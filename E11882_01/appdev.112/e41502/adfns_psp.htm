<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Developing PL/SQL Server Pages (PSP)</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-06T1:49:49Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Advanced Application Developer's Guide" />
<meta name="dcterms.identifier" content="E41502-06" />
<meta name="dcterms.isVersionOf" content="ADFNS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="adfns_web.htm" title="Previous" type="text/html" />
<link rel="Next" href="adfns_cqn.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e41502.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">19/31</span> <!-- End Header -->
<div id="ADFNS016" class="chapter"><a id="BHAEDHIF"></a>
<h1 class="chapter"><span class="secnum">10</span> Developing PL/SQL Server Pages (PSP)</h1>
<p>This chapter explains how to develop PL/SQL Server Pages (PSP), which let you include dynamic content in web pages.</p>
<p class="subhead2"><a id="sthref742"></a>Topics:</p>
<ul>
<li>
<p><a href="#g2475337">What Are PL/SQL Server Pages and Why Use Them?</a></p>
</li>
<li>
<p><a href="#g2475353">Prerequisites for Developing and Deploying PL/SQL Server Pages</a></p>
</li>
<li>
<p><a href="#g2475369">PL/SQL Server Pages and the HTP Package</a></p>
</li>
<li>
<p><a href="#g2475381">PL/SQL Server Pages and Other Scripting Solutions</a></p>
</li>
<li>
<p><a href="#BHAFACCG">Developing PL/SQL Server Pages</a></p>
</li>
<li>
<p><a href="#BHAIFHAG">Loading PL/SQL Server Pages into the Database</a></p>
</li>
<li>
<p><a href="#g2478973">Querying PL/SQL Server Page Source Code</a></p>
</li>
<li>
<p><a href="#BHAHIJCH">Running PL/SQL Server Pages Through URLs</a></p>
</li>
<li>
<p><a href="#BHAEBFEE">Examples of PL/SQL Server Pages</a></p>
</li>
<li>
<p><a href="#BHAFHEHC">Debugging PL/SQL Server Pages</a></p>
</li>
<li>
<p><a href="#BHAFGEJE">Putting PL/SQL Server Pages into Production</a></p>
</li>
</ul>
<a id="g2475337"></a>
<div id="ADFNS1201" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">What Are PL/SQL Server Pages and Why Use Them?</h2>
<p>PL/SQL Server Pages (PSP) are server-side scripts that include dynamic content, including the results of SQL queries, inside web pages. You can author the web pages in an HTML authoring tool and insert blocks of PL/SQL code.</p>
<p><a href="#BHADDBII">Example 10-1</a> shows a simple PL/SQL server page called <code dir="ltr">simple</code>.<code dir="ltr">psp</code>.</p>
<div id="ADFNS510" class="example">
<p class="titleinexample"><a id="BHADDBII"></a>Example 10-1 simple.psp</p>
<pre dir="ltr">
&lt;%@ page language="PL/SQL" %&gt;
&lt;%@ page contentType="text/html" %&gt;
&lt;%@ plsql procedure="show_employees" %&gt;
&lt;%-- This example displays the last name and first name of every 
     employee in the hr.employees table. --%&gt;
&lt;%!
  CURSOR emp_cursor IS
    SELECT last_name, first_name
      FROM hr.employees
        ORDER BY last_name;
%&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html"&gt;
&lt;title&gt;List of Employees&lt;/title&gt;
&lt;/head&gt;
&lt;body TEXT="#000000" BGCOLOR="#FFFFFF"&gt;
&lt;h1&gt;List of Employees&lt;/h1&gt;
&lt;table width="40%" border="1"&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Last Name&lt;/th&gt;
&lt;th align="left"&gt;First Name&lt;/th&gt;
&lt;/tr&gt;
&lt;%  FOR emp_record IN emp_cursor LOOP %&gt;
  &lt;tr&gt;
  &lt;td&gt; &lt;%= emp_record.last_name %&gt; &lt;/td&gt;
  &lt;td&gt; &lt;%= emp_record.first_name %&gt; &lt;/td&gt;
  &lt;/tr&gt;
&lt;%  END LOOP; %&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre></div>
<!-- class="example" -->
<p>You can compile and load a PL/SQL server page into the database with the <code dir="ltr">loadpsp</code> command-line utility. This command loads <code dir="ltr">simple</code>.<code dir="ltr">psp</code> into the <code dir="ltr">hr</code> schema, replacing the <code dir="ltr">show_employees</code> procedure if it exists:</p>
<pre dir="ltr">
loadpsp -replace simple.psp
Enter Password: <span class="italic">password</span>
</pre>
<p>Browser users can run the <code dir="ltr">show_employees</code> procedure through a URL. An HTML page that displays the last and first names of employees in the <code dir="ltr">hr</code>.<code dir="ltr">employees</code> table is returned to the browser through the PL/SQL gateway.</p>
<p>Deploying content through PL/SQL Server Pages has these advantages:</p>
<ul>
<li>
<p>For developers familiar with PL/SQL, the server pages are the easiest way to create professional web pages that include database-generated content. You can develop web pages as you usually do and then embed PL/SQL code in the HTML.</p>
</li>
<li>
<p>PL/SQL Server Pages can be more convenient than using the <code dir="ltr">HTP</code> and <code dir="ltr">HTF</code> packages to write out HTML content line by line.</p>
</li>
<li>
<p>Because processing is performed on the database server, the client browser receives a plain HTML page with no special script tags. You can support all browsers and browser levels equally.</p>
</li>
<li>
<p>Network traffic is efficient because use of PL/SQL Server Pages minimizes the number of database round-trips.</p>
</li>
<li>
<p>You can write content quickly and follow a rapid, iterative development process. You maintain central control of the software, with only a web browser required on the client system.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="g2475353"></a>
<div id="ADFNS1202" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Prerequisites for Developing and Deploying PL/SQL Server Pages</h2>
<p>To develop and deploy PL/SQL server pages, you must meet these prerequisites:</p>
<ul>
<li>
<p>To write a PL/SQL server page you need access to a text editor or HTML authoring tool for writing the script. No other development tool is required.</p>
</li>
<li>
<p>To load a PL/SQL server page you need:</p>
<ul>
<li>
<p>An account on the database in which to load the server pages.</p>
</li>
<li>
<p>Execution rights to the <code dir="ltr">loadpsp</code> command-line utility, which is located in <code dir="ltr">$ORACLE_HOME/bin</code>.</p>
</li>
</ul>
</li>
<li>
<p>To deploy the server pages you must use mod_plsql. As explained in <a href="adfns_web.htm#CHEIAHAE">"Using mod_plsql Gateway to Map Client Requests to a PL/SQL Web Application"</a>, the gateway uses the PL/SQL Web Toolkit.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="adfns_web.htm#CHEIAHAE">"Using mod_plsql Gateway to Map Client Requests to a PL/SQL Web Application"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="g2475369"></a>
<div id="ADFNS1203" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">PL/SQL Server Pages and the HTP Package</h2>
<p>You can enable browser users to run PL/SQL units through HTTP in these ways:</p>
<ul>
<li>
<p>By writing an HTML page with embedded PL/SQL code and compiling it as a PL/SQL server page. You might invoke subprograms from the PL/SQL Web Toolkit, but not to generate every line of HTML output.</p>
</li>
<li>
<p>By writing a complete stored subprogram that produces HTML by invoking the <code dir="ltr">HTP</code> and <code dir="ltr">OWA_*</code> packages in the PL/SQL Web Toolkit. For information about this technique, see <a href="adfns_web.htm#i1006207">"Generating HTML Output with PL/SQL"</a>.</p>
</li>
</ul>
<p>Thus, you must choose which technique to use when writing your web application. The key factors in choosing between these techniques are:</p>
<ul>
<li>
<p>What source are you using as a starting point?</p>
<ul>
<li>
<p>If you have a large body of HTML, and want to include dynamic content or make it the front end of a database application, then use PL/SQL Server Pages.</p>
</li>
<li>
<p>If you have a large body of PL/SQL code that produces formatted output, then you might find it more convenient to produce HTML tags by changing your print statements to invoke the <code dir="ltr">HTP</code> package of the PL/SQL Web Toolkit.</p>
</li>
</ul>
</li>
<li>
<p>What is the fastest and most convenient authoring environment for your group?</p>
<ul>
<li>
<p>If most work is done using HTML authoring tools, then use PL/SQL Server Pages.</p>
</li>
<li>
<p>If you use authoring tools that produce PL/SQL code, then it might be less convenient to use PL/SQL Server Pages.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="g2475381"></a>
<div id="ADFNS1204" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">PL/SQL Server Pages and Other Scripting Solutions</h2>
<p>Scripting solutions can be client-side or server-side. JavaScript is a very popular client-side scripting languages. PL/SQL Server Pages fully support JavaScript. Because any kind of tags can be passed unchanged to the browser through a PL/SQL server page, you can include JavaScript or other client-side script code in a PL/SQL server page.</p>
<p><a id="sthref743"></a><a id="sthref744"></a>Java Server Pages (JSP) and <a id="sthref745"></a><a id="sthref746"></a>Active Server Pages (ASP) are two of the most popular server-side scripting solutions. Compared to PL/SQL Server Pages:</p>
<ul>
<li>
<p>Java server pages are loosely analogous to PL/SQL Server Pages pages; Java servlets are analogous to PL/SQL packages. PL/SQL Server Pages use the same script tag syntax as JSP to make it easy to switch back and forth.</p>
</li>
<li>
<p>PL/SQL Server Pages use syntax that is similar to ASP, although not identical. Typically, you must translate from VBScript or JScript to PL/SQL. The best candidates for migration are pages that use the Active Data Object (ADO) interface to perform database operations.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot mix PL/SQL server pages with other server-side script features, such as server-side includes. Often, you can get the same results by using the corresponding PL/SQL Server Pages features.</div>
</div>
<!-- class="sect1" -->
<a id="BHAFACCG"></a>
<div id="ADFNS1205" class="sect1">
<h2 class="sect1">Developing PL/SQL Server Pages</h2>
<p>To develop a PL/SQL server page, you can start with an existing web page or with an existing stored subprogram. Either way, with a few additions and changes you can create dynamic web pages that perform database operations and display the results.</p>
<p>The file for a PL/SQL server page must have the extension .<code dir="ltr">psp</code>. It can contain whatever content you choose, with text and tags interspersed with PL/SQL Server Pages directives, declarations, and scriptlets. A server page can take these forms:</p>
<ul>
<li>
<p>In the simplest case, it is an HTML file. Compiling it as a PL/SQL server page produces a stored subprogram that outputs the same HTML file.</p>
</li>
<li>
<p>In the most complex case, it is a PL/SQL subprogram that generates all the content of the web page, including the tags for title, body, and headings.</p>
</li>
<li>
<p>In the typical case, it is a mixture of HTML (providing the static parts of the page) and PL/SQL (providing the dynamic content).</p>
</li>
</ul>
<p>The order and placement of the PL/SQL Server Pages directives and declarations is usually not significant. It becomes significant only when another file is included. For ease of maintenance, Oracle recommends that you put the directives and declarations near the beginning of the file.</p>
<p><a href="#BHAGCCAJ">Table 10-1</a> lists the <a id="sthref747"></a>PL/SQL Server Pages elements and directs you to the section that explains how to use them. The section <a href="#BHACAEGJ">"Using Quotation Marks and Escaping Strings in a PSP Script"</a> describes how to use quotation marks in strings that are used in various PL/SQL Server Pages elements.</p>
<div id="ADFNS511" class="tblformalwidemax">
<p class="titleintable"><a id="sthref748"></a><a id="BHAGCCAJ"></a>Table 10-1 PSP Elements</p>
<table class="cellalignment1273" title="PSP Elements" summary="This table summarizes the PSP elements." dir="ltr">
<thead>
<tr class="cellalignment1267">
<th class="cellalignment1274" id="r1c1-t4">PSP Element</th>
<th class="cellalignment1274" id="r1c2-t4">Name</th>
<th class="cellalignment1274" id="r1c3-t4">Specifies . . .</th>
<th class="cellalignment1274" id="r1c4-t4">Section</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r2c1-t4" headers="r1c1-t4">
<p><code dir="ltr">&lt;%@ page</code> ... <code dir="ltr">%&gt;</code></p>
</td>
<td class="cellalignment1275" headers="r2c1-t4 r1c2-t4">
<p>Page Directive</p>
</td>
<td class="cellalignment1275" headers="r2c1-t4 r1c3-t4">
<p>Characteristics of the PL/SQL server page.</p>
</td>
<td class="cellalignment1275" headers="r2c1-t4 r1c4-t4">
<p><a href="#BHACJDBE">"Specifying Basic Server Page Characteristics"</a></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r3c1-t4" headers="r1c1-t4">
<p><code dir="ltr">&lt;%@ parameter</code> ... <code dir="ltr">%&gt;</code></p>
</td>
<td class="cellalignment1275" headers="r3c1-t4 r1c2-t4">
<p>Parameter Directive</p>
</td>
<td class="cellalignment1275" headers="r3c1-t4 r1c3-t4">
<p>The name, and optionally the type and default, for each parameter expected by the PSP stored procedure.</p>
</td>
<td class="cellalignment1275" headers="r3c1-t4 r1c4-t4">
<p><a href="#BHAGEBDA">"Accepting User Input"</a></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r4c1-t4" headers="r1c1-t4">
<p><code dir="ltr">&lt;%@ plsql</code> ... <code dir="ltr">%&gt;</code></p>
</td>
<td class="cellalignment1275" headers="r4c1-t4 r1c2-t4">
<p>Procedure Directive</p>
</td>
<td class="cellalignment1275" headers="r4c1-t4 r1c3-t4">
<p>The name of the stored procedure produced by the PSP file.</p>
</td>
<td class="cellalignment1275" headers="r4c1-t4 r1c4-t4">
<p><a href="#BHAGDGBA">"Naming the PL/SQL Stored Procedure"</a></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r5c1-t4" headers="r1c1-t4">
<p><code dir="ltr">&lt;%@ include</code> ... <code dir="ltr">%&gt;</code></p>
</td>
<td class="cellalignment1275" headers="r5c1-t4 r1c2-t4">
<p>Include Directive</p>
</td>
<td class="cellalignment1275" headers="r5c1-t4 r1c3-t4">
<p>The name of a file to be included at a specific point in the PSP file.</p>
</td>
<td class="cellalignment1275" headers="r5c1-t4 r1c4-t4">
<p><a href="#BHAEFHGG">"Including the Contents of Other Files"</a></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r6c1-t4" headers="r1c1-t4">
<p><code dir="ltr">&lt;%!</code> ... <code dir="ltr">%&gt;</code></p>
</td>
<td class="cellalignment1275" headers="r6c1-t4 r1c2-t4">
<p>Declaration Block</p>
</td>
<td class="cellalignment1275" headers="r6c1-t4 r1c3-t4">
<p>The declaration for a set of PL/SQL variables that are visible throughout the page, not just within the next <code dir="ltr">BEGIN/END</code> block.</p>
</td>
<td class="cellalignment1275" headers="r6c1-t4 r1c4-t4">
<p><a href="#BHAIABJJ">"Declaring Global Variables in a PSP Script"</a></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r7c1-t4" headers="r1c1-t4">
<p><code dir="ltr">&lt;%</code> ... <code dir="ltr">%&gt;</code></p>
</td>
<td class="cellalignment1275" headers="r7c1-t4 r1c2-t4">
<p>Code Block</p>
</td>
<td class="cellalignment1275" headers="r7c1-t4 r1c3-t4">
<p>A set of PL/SQL statements to be executed when the procedure is run.</p>
</td>
<td class="cellalignment1275" headers="r7c1-t4 r1c4-t4">
<p><a href="#BHAFIBIA">"Specifying Executable Statements in a PSP Script"</a></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r8c1-t4" headers="r1c1-t4">
<p><code dir="ltr">&lt;%=</code> ... <code dir="ltr">%&gt;</code></p>
</td>
<td class="cellalignment1275" headers="r8c1-t4 r1c2-t4">
<p>Expression Block</p>
</td>
<td class="cellalignment1275" headers="r8c1-t4 r1c3-t4">
<p>A single PL/SQL expression, such as a string, arithmetic expression, function call, or combination of these.</p>
</td>
<td class="cellalignment1275" headers="r8c1-t4 r1c4-t4">
<p><a href="#BHAIEHEE">"Substituting Expression Values in a PSP Script"</a></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r9c1-t4" headers="r1c1-t4">
<p><code dir="ltr">&lt;%--</code> ... <code dir="ltr">--%&gt;</code></p>
</td>
<td class="cellalignment1275" headers="r9c1-t4 r1c2-t4">
<p>Comment</p>
</td>
<td class="cellalignment1275" headers="r9c1-t4 r1c3-t4">
<p>A comment in a PSP script.</p>
</td>
<td class="cellalignment1275" headers="r9c1-t4 r1c4-t4">
<p><a href="#BHAIEJIF">"Including Comments in a PSP Script"</a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwidemax" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are familiar with dynamic HTML, you can go directly to <a href="#BHAEBFEE">"Examples of PL/SQL Server Pages"</a>.</div>
<p class="subhead2"><a id="sthref749"></a>Topics:</p>
<ul>
<li>
<p><a href="#BHACJDBE">Specifying Basic Server Page Characteristics</a></p>
</li>
<li>
<p><a href="#BHAGEBDA">Accepting User Input</a></p>
</li>
<li>
<p><a href="#BHAGDGBA">Naming the PL/SQL Stored Procedure</a></p>
</li>
<li>
<p><a href="#BHAEFHGG">Including the Contents of Other Files</a></p>
</li>
<li>
<p><a href="#BHAIABJJ">Declaring Global Variables in a PSP Script</a></p>
</li>
<li>
<p><a href="#BHAFIBIA">Specifying Executable Statements in a PSP Script</a></p>
</li>
<li>
<p><a href="#BHAIEHEE">Substituting Expression Values in a PSP Script</a></p>
</li>
<li>
<p><a href="#BHACAEGJ">Using Quotation Marks and Escaping Strings in a PSP Script</a></p>
</li>
<li>
<p><a href="#BHAIEJIF">Including Comments in a PSP Script</a></p>
</li>
</ul>
<a id="BHACJDBE"></a>
<div id="ADFNS512" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Specifying Basic Server Page Characteristics</h3>
<p>Use the <code dir="ltr">&lt;%@ page</code> ... <code dir="ltr">%&gt;</code> directive to specify characteristics of the <a id="sthref750"></a>PL/SQL server page such as:</p>
<ul>
<li>
<p>What scripting language it uses.</p>
</li>
<li>
<p>What type of information (MIME type) it produces.</p>
</li>
<li>
<p>What code to run to handle all uncaught exceptions. This might be an HTML file with a friendly message, renamed to a .<code dir="ltr">psp</code> file. You must specify this same file name in the <code dir="ltr">loadpsp</code> command that compiles the main PSP file. You must specify the same name in both the <code dir="ltr">errorPage</code> directive and in the <code dir="ltr">loadpsp</code> command, including any relative path name such as ..<code dir="ltr">/include/</code>.</p>
</li>
</ul>
<p>This code shows the syntax of the <code dir="ltr">page</code> directive (the attribute names <code dir="ltr">contentType</code> and <code dir="ltr">errorPage</code> are case-sensitive):</p>
<pre dir="ltr">
&lt;%@ page
language='PL/SQL'
contentType='<span class="italic">content_type_string</span>'
charset='<span class="italic">encoding</span>'
errorPage='<span class="italic">file</span>.psp'
%&gt;
</pre>
<p class="subhead2"><a id="sthref751"></a>Topics:</p>
<ul>
<li>
<p><a href="#BHAIEFHD">Specifying the Scripting Language</a></p>
</li>
<li>
<p><a href="#BHAGHFED">Returning Data to the Client Browser</a></p>
</li>
<li>
<p><a href="#BHAEEBEC">Handling Script Errors</a></p>
</li>
</ul>
<a id="BHAIEFHD"></a>
<div id="ADFNS513" class="sect3">
<h4 class="sect3">Specifying the Scripting Language</h4>
<p>To identify a file as a PL/SQL server page, include this directive somewhere in the file:</p>
<pre dir="ltr">
&lt;%@ page language="PL/SQL" %&gt;
</pre>
<p>This directive is for compatibility with other scripting environments. <a href="#BHADDBII">Example 10-1</a> shows an example of a simple PL/SQL server page that includes the language directive.</p>
</div>
<!-- class="sect3" -->
<a id="BHAGHFED"></a>
<div id="ADFNS514" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Returning Data to the Client Browser</h4>
<p class="subhead2"><a id="sthref752"></a>Options:</p>
<ul>
<li>
<p><a href="#BHAIDFCI">Returning HTML</a></p>
</li>
<li>
<p><a href="#BHAIIBFJ">Returning XML, Text, and Other Document Types</a></p>
</li>
<li>
<p><a href="#BHACJICD">Returning Pages Containing Different Character Sets</a></p>
</li>
</ul>
<a id="BHAIDFCI"></a>
<div id="ADFNS515" class="sect4">
<h5 class="sect4">Returning HTML</h5>
<p>The PL/SQL parts of a PL/SQL server page are enclosed within special delimiters. All other content is passed exactly as it is&mdash;including any white space&mdash;to the browser. To display text or HTML tags, write it as you would write a typical web page. You need not invoke any output functions. As illustration, the server page in <a href="#BHADDBII">Example 10-1</a> returns the HTML page shown in <a href="#BHAECBCF">Example 10-2</a>, except that it includes the table rows for the queried employees.</p>
<div id="ADFNS516" class="example">
<p class="titleinexample"><a id="BHAECBCF"></a>Example 10-2 Sample Returned HTML Page</p>
<pre dir="ltr">
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html"&gt;
&lt;title&gt;List of Employees&lt;/title&gt;
&lt;/head&gt;
&lt;body TEXT="#000000" BGCOLOR="#FFFFFF"&gt;
&lt;h1&gt;List of Employees&lt;/h1&gt;
&lt;table width="40%" border="1"&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Last Name&lt;/th&gt;
&lt;th align="left"&gt;First Name&lt;/th&gt;
&lt;/tr&gt;

  &lt;!-- result set of query of hr.employees inserted here --&gt;

&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre></div>
<!-- class="example" -->
<p>Sometimes you might want to display one line of output or another, or change the value of an attribute, based on a condition. You can include control structures and variable substitution inside the PSP delimiters, as shown in this code fragment from <a href="#BHADDBII">Example 10-1</a>:</p>
<pre dir="ltr">
&lt;%  FOR emp_record IN emp_cursor LOOP %&gt;
  &lt;tr&gt;
  &lt;td&gt; &lt;%= emp_record.last_name %&gt; &lt;/td&gt;
  &lt;td&gt; &lt;%= emp_record.first_name %&gt; &lt;/td&gt;
  &lt;/tr&gt;
&lt;%  END LOOP; %&gt;
</pre></div>
<!-- class="sect4" -->
<a id="BHAIIBFJ"></a>
<div id="ADFNS517" class="sect4">
<h5 class="sect4">Returning XML, Text, and Other Document Types</h5>
<p>By default, the PL/SQL gateway transmits files as HTML documents so that the browser interprets the HTML tags. If you want the browser to interpret the document as XML, plain text (with no formatting), or some other document type, then include this directive:</p>
<pre dir="ltr">
&lt;%@ page contentType="<span class="codeinlineitalic">MIMEtype</span>" %&gt;
</pre>
<p>The attribute name <code dir="ltr">contentType</code> is case-sensitive. Insert <code dir="ltr">text/html</code>, <code dir="ltr">text/xml</code>, <code dir="ltr">text/plain</code>, <code dir="ltr">image/jpeg</code>, or some other MIME type that the browser or other client program recognizes. Users might have to configure their browsers to recognize some MIME types. An example of a directive for an Excel spreadsheet is:</p>
<pre dir="ltr">
&lt;%@ page contentType="application/vnd.ms-excel" %&gt;
</pre>
<p>Typically, a PL/SQL server page is intended to be displayed in a web browser. It can also be retrieved and interpreted by a program that can make HTTP requests, such as a a Java or PERL client.</p>
</div>
<!-- class="sect4" -->
<a id="BHACJICD"></a>
<div id="ADFNS518" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Returning Pages Containing Different Character Sets</h5>
<p>By default, the PL/SQL gateway transmits files with the character set defined by the PL/SQL gateway. To convert the data to a different character set for browser display, include this directive:</p>
<pre dir="ltr">
&lt;%@ page charset="encoding" %&gt;
</pre>
<p>Specify <code dir="ltr">Shift_JIS</code>, <code dir="ltr">Big5</code>, <code dir="ltr">UTF-8</code>, or another encoding that the client program recognizes.</p>
<p>You must also configure the character set setting in the database accessor descriptor (DAD) of the PL/SQL gateway. Users might have to select the same encoding in their browsers to see the data displayed properly. For example, a database in Japan might have a database character set that uses the <code dir="ltr">EUC</code> encoding, but the web browsers are configured to display <code dir="ltr">Shift_JIS</code> encoding.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="BHAEEBEC"></a>
<div id="ADFNS519" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Handling Script Errors</h4>
<p><a id="sthref753"></a>When writing PL/SQL server pages, you can get these types of errors:</p>
<ul>
<li>
<p><a id="sthref754"></a>HTML syntax errors</p>
<p>The browser handles these errors. The <code dir="ltr">loadpsp</code> utility does not check for them.</p>
</li>
<li>
<p>PL/SQL syntax errors</p>
<p>The <code dir="ltr">loadpsp</code> utility stops and displays the line number, column number, and a brief message. You must fix the error before continuing.</p>
<p>Any previous version of the stored subprogram can be erased when you attempt to replace it with a script that contains a syntax error. You might want to use one database for prototyping and debugging, and then load the final stored subprogram into a different database for production. You can switch databases using a command-line flag without changing any source code.</p>
</li>
<li>
<p><a id="sthref755"></a>Runtime errors</p>
<p>To handle database errors that occur when the script runs, you can include PL/SQL exception-handling code within a PSP file and have any unhandled exceptions start a special PL/SQL server page. Use the <code dir="ltr">errorPage</code> attribute (the name is case-sensitive) of the <code dir="ltr">&lt;%@ page</code> ... <code dir="ltr">%&gt;</code> directive to specify the page name.</p>
<p>The page for unhandled exceptions is a PL/SQL server page with extension .<code dir="ltr">psp</code>. The error subprogram does not receive any parameters, so to determine the cause of the error, it can invoke the <code dir="ltr">SQLCODE</code> and <code dir="ltr">SQLERRM</code> functions. You can also display a standard HTML page without any scripting when an error occurs, but you must still give it the extension .<code dir="ltr">psp</code> and load it into the database as a stored subprogram.</p>
<p>This line specifies <code dir="ltr">errors</code>.<code dir="ltr">psp</code> as the page to run when errors are encountered:</p>
<pre dir="ltr">
&lt;%@ page language="PL/SQL" contentType="text/html" <span class="bold">errorPage="errors.psp"</span> %&gt; 
</pre></li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BHAGEBDA"></a>
<div id="ADFNS520" class="sect2">
<h3 class="sect2">Accepting User Input</h3>
<p>To set up parameter passing for a PL/SQL server page, include a directive with this syntax:</p>
<pre dir="ltr">
&lt;%@ plsql parameter="<span class="italic">parameter_name</span>" [type="<span class="italic">PL/SQL_type</span>"] [default="<span class="italic">value</span>"] %&gt;
</pre>
<p>The default <code dir="ltr"><span class="codeinlineitalic">PL/SQL_type</span></code> is <code dir="ltr">VARCHAR2</code>. This directive specifies that the parameter <code dir="ltr">p_employee_id</code> is of the type <code dir="ltr">NUMBER</code>:</p>
<pre dir="ltr">
&lt;%@ plsql parameter="p_employee_id" type="NUMBER" %&gt;
</pre>
<p>Specifying a default value for a parameter makes the parameter optional. The default value is substituted directly into a PL/SQL statement, so any strings must be enclosed in single quotation marks, and you can use special values such as <code dir="ltr">NULL</code>. This directive specifies that the parameter <code dir="ltr">p_last_name</code> has the default value <code dir="ltr">NULL</code>:</p>
<pre dir="ltr">
&lt;%@ plsql parameter="p_last_name" default="NULL" %&gt;
</pre>
<p>User input comes encoded in the URL that retrieves the HTML page. You can generate the URL by hard-coding it in an HTML link, or by invoking your page as the action of an HTML form. Your page receives the input as parameters to a PL/SQL stored subprogram.</p>
<p><a href="#BHACEBEE">Example 10-3</a> is like <a href="#BHADDBII">Example 10-1</a>, except that it uses a parameter, <code dir="ltr">p_employee_id</code>. If the PL/SQL gateway is configured so that you can run procedures by invoking <code dir="ltr">http</code>://<code dir="ltr">www</code>.<code dir="ltr">host</code>.<code dir="ltr">com</code>/<code dir="ltr">pls</code>/<code dir="ltr"><span class="codeinlineitalic">proc_name</span></code>, where <code dir="ltr"><span class="codeinlineitalic">proc_name</span></code> is the name of a procedure, then you can pass <code dir="ltr">200</code> for parameter <code dir="ltr">p_employee_id</code> as follows:</p>
<pre dir="ltr">
http://www.example.com/pls/show_employees?p_employee_id=200
</pre>
<div id="ADFNS521" class="example">
<p class="titleinexample"><a id="BHACEBEE"></a>Example 10-3 simplewithuserinput.psp</p>
<pre dir="ltr">
&lt;%@ page language="PL/SQL" %&gt;
&lt;%@ page contentType="text/html" %&gt;
<span class="bold">&lt;%@ plsql parameter="p_employee_id" default="null" type="NUMBER" %&gt;</span>
&lt;%@ plsql procedure="show_employees" %&gt;
&lt;%-- This example displays the last name and first name of every 
     employee in the hr.employees table. --%&gt;
&lt;%!
  CURSOR emp_cursor IS
  SELECT last_name, first_name
  FROM hr.employees
  <span class="bold">WHERE employee_id = p_employee_id</span>
  ORDER BY last_name;
%&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html"&gt;
&lt;title&gt;List of Employees&lt;/title&gt;
&lt;/head&gt;
&lt;body TEXT="#000000" BGCOLOR="#FFFFFF"&gt;
&lt;h1&gt;List of Employees&lt;/h1&gt;
&lt;table width="40%" border="1"&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Last Name&lt;/th&gt;
&lt;th align="left"&gt;First Name&lt;/th&gt;
&lt;/tr&gt;
&lt;%  FOR emp_record IN emp_cursor LOOP %&gt;
  &lt;tr&gt;
  &lt;td&gt; &lt;%= emp_record.last_name %&gt; &lt;/td&gt;
  &lt;td&gt; &lt;%= emp_record.first_name %&gt; &lt;/td&gt;
  &lt;/tr&gt;
&lt;%  END LOOP; %&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BHAGDGBA"></a>
<div id="ADFNS522" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Naming the PL/SQL Stored Procedure</h3>
<p><a id="sthref756"></a>Each top-level PL/SQL server page corresponds to a stored procedure within the server. When you load the page with <code dir="ltr">loadpsp</code>, the utility creates a PL/SQL stored procedure. If the server page is <code dir="ltr"><span class="codeinlineitalic">name</span></code>.<code dir="ltr">psp</code>, the default procedure name is <code dir="ltr"><span class="codeinlineitalic">name</span></code>. For example, if the server page is <code dir="ltr">hello_world</code>.<code dir="ltr">psp</code>, then the default procedure name is <code dir="ltr">hello_world</code>.</p>
<p>To specify a procedure name, use this directive, where <code dir="ltr"><span class="codeinlineitalic">procname</span></code> is the name for the procedure:</p>
<pre dir="ltr">
&lt;%@ plsql procedure="<span class="codeinlineitalic">procname</span>" %&gt;
</pre>
<p>In <a href="#BHADDBII">Example 10-1</a>, this directive gives the stored procedure the name <code dir="ltr">show_employees</code>:</p>
<pre dir="ltr">
&lt;%@ plsql procedure="show_employees" %&gt;
</pre>
<p>It is the name of the procedure, not the name of the PSP script, that you include in the URL.</p>
</div>
<!-- class="sect2" -->
<a id="BHAEFHGG"></a>
<div id="ADFNS523" class="sect2">
<h3 class="sect2">Including the Contents of Other Files</h3>
<p>You can set up an include mechanism to pull in the contents of other files, typically containing either static HTML content or more PL/SQL scripting code. Insert this directive at the point where the content of the other file is to appear, replacing <code dir="ltr"><span class="codeinlineitalic">filename</span></code> with the name of the file to be included:</p>
<pre dir="ltr">
&lt;%@ include file="<span class="codeinlineitalic">filename</span>" %&gt;
</pre>
<p>The included file must have an extension other than .<code dir="ltr">psp</code>. You must specify the same name in both the <code dir="ltr">include</code> directive and in the <code dir="ltr">loadpsp</code> command, including any relative path name such as ..<code dir="ltr">/include/</code>.</p>
<p>Because the files are processed when you load the stored procedure into the database, the substitution is performed only once, not whenever the page is served. Therefore, changes to the included files that occur after the page is loaded into the database are not displayed when the procedure is executed.</p>
<p>You can use the include feature to pull in libraries of code, such as a navigation banners, footers, tables of contents, and so forth into multiple files. Alternatively, you can use this feature as a macro capability to include the same section of script code in multiple places in a page. This example includes an HTML footer:</p>
<pre dir="ltr">
&lt;%@ include file="footer.htm" %&gt;
</pre>
<p>When you use included files:</p>
<ul>
<li>
<p>You can use any names and extensions for the included files. For example, you can include a file called <code dir="ltr">products</code>.<code dir="ltr">txt</code>.</p>
</li>
<li>
<p>If the included files contain PL/SQL scripting code, then they do not need their own set of directives to identify the procedure name, character set, and so on.</p>
</li>
<li>
<p>When specifying the names of files to the <code dir="ltr">loadpsp</code> utility, you must include the names of all included files also. Specify the names of included files before the names of any .<code dir="ltr">psp</code> files.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BHAIABJJ"></a>
<div id="ADFNS524" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Declaring Global Variables in a PSP Script</h3>
<p>You can use the <code dir="ltr">&lt;%!</code> ... <code dir="ltr">%&gt;</code> directive to define a set of PL/SQL variables that are visible throughout the page, not just within the next <code dir="ltr">BEGIN/END</code> block. This element typically spans multiple lines, with individual PL/SQL variable declarations ended by semicolons. The syntax for this directive is as follows:</p>
<pre dir="ltr">
&lt;%! <span class="italic">PL/SQL declaration;</span>
    [ <span class="italic">PL/SQL declaration;</span> ] ... %&gt;
</pre>
<p>The usual PL/SQL syntax is allowed within the block. The delimiters server as shorthand, enabling you to omit the <code dir="ltr">DECLARE</code> keyword. All declarations are available to the code later in the file. <a href="#BHADDBII">Example 10-1</a> includes this cursor declaration:</p>
<pre dir="ltr">
&lt;%!
  CURSOR emp_cursor IS
  SELECT last_name, first_name
  FROM hr.employees
  ORDER BY last_name;
%&gt;
</pre>
<p>You can specify multiple declaration blocks; internally, they are all merged into a single block when the PSP file is created as a stored procedure.</p>
<p>You can also use explicit <code dir="ltr">DECLARE</code> blocks within the <code dir="ltr">&lt;%</code>&nbsp;...&nbsp;<code dir="ltr">%&gt;</code> delimiters that are explained in <a href="#BHAFIBIA">"Specifying Executable Statements in a PSP Script"</a>. These declarations are only visible to the <code dir="ltr">BEGIN/END</code> block that follows them.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To make things easier to maintain, keep all your directives and declarations near the beginning of a PL/SQL server page.</div>
</div>
<!-- class="sect2" -->
<a id="BHAFIBIA"></a>
<div id="ADFNS525" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Specifying Executable Statements in a PSP Script</h3>
<p>You can use the <code dir="ltr">&lt;%</code> ... <code dir="ltr">%&gt;</code> code block directive to run a set of PL/SQL statements when the stored procedure is run. This code shows the syntax for executable statements:</p>
<pre dir="ltr">
&lt;% <span class="italic">PL/SQL statement;</span>
   [ <span class="italic">PL/SQL statement;</span> ] ... %&gt;
</pre>
<p>This element typically spans multiple lines, with individual PL/SQL statements ended by semicolons. The statements can include complete blocks, as in this example, which invokes the <code dir="ltr">OWA_UTIL</code>.<code dir="ltr">TABLEPRINT</code> procedure:</p>
<pre dir="ltr">
&lt;% OWA_UTIL.TABLEPRINT(CTABLE =&gt; 'hr.employees', CATTRIBUTES =&gt; 'border=2', 
   CCOLUMNS =&gt; 'last_name,first_name', CCLAUSES =&gt; 'WHERE employee_id &gt; 100'); %&gt;
</pre>
<p>The statements can also be the bracketing parts of <code dir="ltr">IF/THEN/ELSE</code> or <code dir="ltr">BEGIN/END</code> blocks. When a code block is split into multiple directives, you can put HTML or other directives in the middle, and the middle pieces are conditionally executed when the stored procedure is run. This code from <a href="#BHAECEIB">Example 10-11</a> provides an illustration of this technique:</p>
<pre dir="ltr">
  &lt;% FOR ITEM IN (SELECT product_name, list_price, catalog_url 
                  FROM product_information
                  WHERE list_price IS NOT NULL
                  ORDER BY list_price DESC) LOOP
     IF item.list_price &gt; p_minprice THEN
        v_color := '#CCCCFF';
     ELSE
        v_color := '#CCCCCC';
     END IF;
  %&gt;
  &lt;TR BGCOLOR="&lt;%= v_color %&gt;"&gt;
    &lt;TD&gt;&lt;A HREF="&lt;%= item.catalog_url %&gt;"&gt;&lt;%= item.product_name %&gt;&lt;/A&gt;&lt;/TD&gt;
    &lt;TD&gt;&lt;BIG&gt;&lt;%= item.list_price %&gt;&lt;/BIG&gt;&lt;/TD&gt;
  &lt;/TR&gt;
  &lt;% END LOOP; %&gt;
</pre>
<p>All the usual PL/SQL syntax is allowed within the block. The delimiters server as shorthand, letting you omit the <code dir="ltr">DECLARE</code> keyword. All the declarations are available to the code later on in the file.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To share procedures, constants, and types across different PL/SQL server pages, compile them into a package in the database by using a plain PL/SQL source file. Although you can reference package procedures, constants, and types from PSP scripts, the PSP scripts can only produce standalone procedures, not packages.</div>
</div>
<!-- class="sect2" -->
<a id="BHAIEHEE"></a>
<div id="ADFNS526" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Substituting Expression Values in a PSP Script</h3>
<p><a id="sthref757"></a>An expression directive outputs a single PL/SQL expression, such as a string, arithmetic expression, function call, or combination of these things. The result is substituted as a string at that spot in the HTML page that is produced by the stored procedure. The expression result must be a string value or be able to be cast to a string. For any types that cannot be implicitly cast, such as <code dir="ltr">DATE</code>, pass the value to the PL/SQL <code dir="ltr">TO_CHAR</code> function.</p>
<p>The syntax of an expression directive is as follows, where the <code dir="ltr"><span class="codeinlineitalic">expression</span></code> placeholder is replaced by the desired expression:</p>
<pre dir="ltr">
&lt;%= <span class="codeinlineitalic">expression</span> %&gt;
</pre>
<p>You need not end the PL/SQL expression with a semicolon.</p>
<p><a href="#BHADDBII">Example 10-1</a> includes a directive to print the value of a variable in a row of a cursor:</p>
<pre dir="ltr">
&lt;%= emp_record.last_name %&gt;
</pre>
<p>Compare the preceding example to the equivalent <code dir="ltr">htp</code>.<code dir="ltr">print</code> call in this example (note especially the semicolon that ends the statement):</p>
<pre dir="ltr">
&lt;% HTP.PRN (emp_record.last_name); %&gt;
</pre>
<p>The content within the <code dir="ltr">&lt;%=</code> ... <code dir="ltr">%&gt;</code> delimiters is processed by the <code dir="ltr">HTP</code>.<code dir="ltr">PRN</code> function, which trims leading or trailing white space and requires that you enclose literal strings in single quotation marks.</p>
<p>You can use concatenation by using the twin pipe symbol (<code dir="ltr">||</code>) as in PL/SQL. This directive shows an example of concatenation:</p>
<pre dir="ltr">
&lt;%= 'The employee last name is ' || emp_record.last_name %&gt;
</pre></div>
<!-- class="sect2" -->
<a id="BHACAEGJ"></a>
<div id="ADFNS527" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using Quotation Marks and Escaping Strings in a PSP Script</h3>
<p>PSP attributes use double quotation marks to delimit data. When values specified in PSP attributes are used for PL/SQL operations, they are passed exactly as you specify them in the PSP file. Thus, if PL/SQL requires a string enclosed in single quotation marks, then you must specify the string enclosed in single quotation marks, and enclose the whole thing in double quotation marks.</p>
<p>For example, your PL/SQL procedure might use the string <code dir="ltr">Babe Ruth</code> as the default value for a variable. For the string to be used in PL/SQL, you must enclose it in single quotation marks as <code dir="ltr">'Babe Ruth'</code>. If you specify this string in the <code dir="ltr">default</code> attribute of a PSP directive, you must enclose it in double quotation marks, like this:</p>
<pre dir="ltr">
&lt;%@ plsql parameter="in_players" default="'Babe Ruth'" %&gt;
</pre>
<p>You can also enclose strings that are enclosed in single quotation marks in another set of single quotation marks. In this case, you must escape the inner single quotation marks by specifying the sequence <code dir="ltr">\'</code>. For example:</p>
<pre dir="ltr">
&lt;%@ plsql parameter="in_players" default="'Walter \'Big Train\' Johnson'" %&gt;
</pre>
<p>You can include most characters and character sequences in a PSP file without having them changed by the PSP loader. To include the sequence <code dir="ltr">%&gt;</code>, specify the escape sequence <code dir="ltr">%\&gt;</code>. To include the sequence <code dir="ltr">&lt;%</code>, specify the escape sequence <code dir="ltr">&lt;\%</code>. For example:</p>
<pre dir="ltr">
&lt;%= 'The %\&gt; sequence is used in scripting language: ' || lang_name %&gt;
&lt;%= 'The &lt;\% sequence is used in scripting language: ' || lang_name %&gt;
</pre></div>
<!-- class="sect2" -->
<a id="BHAIEJIF"></a>
<div id="ADFNS528" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Including Comments in a PSP Script</h3>
<p>To put a comment in the HTML portion of a PL/SQL server page for the benefit of those reading the PSP source code, use this syntax:</p>
<pre dir="ltr">
&lt;%-- <span class="italic">PSP comment text</span> --%&gt;
</pre>
<p>Comments in the preceding form do not appear in the HTML output from the PSP and also do not appear when you query the PL/SQL source code in <code dir="ltr">USER_OBJECTS</code>.</p>
<p>To create a comment that is visible in the HTML output and in the <code dir="ltr">USER_OBJECTS</code> source, place the comment in the HTML and use the normal HTML comment syntax:</p>
<pre dir="ltr">
&lt;!-- <span class="codeinlineitalic">HTML comment text</span> --&gt;
</pre>
<p>To include a comment inside a PL/SQL block within a PSP, and to make the comment invisible in the HTML output but visible in <code dir="ltr">USER_OBJECTS</code>, use the normal PL/SQL comment syntax, as in this example:</p>
<pre dir="ltr">
-- Comment in PL/SQL code
</pre>
<p><a href="#BHADEJAH">Example 10-4</a> shows a fragment of a PSP file with the three types of comments.</p>
<div id="ADFNS529" class="example">
<p class="titleinexample"><a id="BHADEJAH"></a>Example 10-4 Sample Comments in a PSP File</p>
<pre dir="ltr">
&lt;p&gt;Today we introduce our new model XP-10.
<span class="bold">&lt;%--</span>
  This is the project with code name "Secret Project".
  Users viewing the HTML page do not see this PSP script comment.
  The comment is not visible in the USER_OBJECTS source code.
<span class="bold">--%&gt;</span>
<span class="bold">&lt;!--</span>
  Some pictures of the XP-10.
  Users viewing the HTML page source see this comment.
  The comment is also visible in the USER_OBJECTS source code.
<span class="bold">--&gt;</span>
&lt;%
FOR image_file IN (SELECT pathname, width, height, description
                   FROM image_library WHERE model_num = 'XP-10')
<span class="bold">--</span> Comments interspersed with PL/SQL statements.
<span class="bold">--</span> Users viewing the HTML page source do not see these PL/SQL comments.
<span class="bold">--</span> These comments are visible in the USER_OBJECTS source code.
LOOP
%&gt;
&lt;img src="&lt;%= image_file.pathname %&gt;" width=&lt;% image_file.width %&gt;
height=&lt;% image_file.height %&gt; alt="&lt;% image_file.description %&gt;"&gt;
&lt;br&gt;
&lt;% END LOOP; %&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BHAIFHAG"></a>
<div id="ADFNS1206" class="sect1">
<h2 class="sect1">Loading PL/SQL Server Pages into the Database</h2>
<p>Use the <a id="sthref758"></a><a id="sthref759"></a><code dir="ltr">loadpsp</code> utility, which is located in <code dir="ltr">$ORACLE_HOME/bin</code>, to load one or more PSP files into the database as stored procedures. Each .<code dir="ltr">psp</code> file corresponds to one stored procedure. The pages are compiled and loaded in one step, to speed up the development cycle. The syntax of the <code dir="ltr">loadpsp</code> utility is:</p>
<pre dir="ltr">
loadpsp [-replace] [<span class="italic">include_file_name</span>...] [<span class="italic">error_file_name</span>] <span class="italic">psp_file_name</span>...
Enter Password: <span class="italic">password</span>
</pre>
<p>When you load a PSP file, the loader performs these actions:</p>
<ol>
<li>
<p>Logs on to the database with the specified user name, password, and net service name</p>
</li>
<li>
<p>Creates the stored procedures in the user schema</p>
</li>
</ol>
<p><code dir="ltr">-replace</code> creates procedures with <code dir="ltr">CREATE</code> <code dir="ltr">OR</code> <code dir="ltr">REPLACE</code> syntax.</p>
<p><code dir="ltr"><span class="codeinlineitalic">include_file_name</span></code> is the name of a file that is specified in the PSP <code dir="ltr">include</code> directive.</p>
<p><code dir="ltr"><span class="codeinlineitalic">error_file_name</span></code> is the name of the file that is specified in the <code dir="ltr">errorPage</code> attribute of the PSP <code dir="ltr">page</code> directive.</p>
<p><code dir="ltr"><span class="codeinlineitalic">psp_file_name</span></code> is the name of a file that is specified in a PSP <code dir="ltr">page</code> directive.</p>
<p>The filenames on the <code dir="ltr">loadpsp</code> command line must exactly match the names specified in the PSP <code dir="ltr">include</code> and <code dir="ltr">page</code> directives, including any relative path name such as ../<code dir="ltr">include</code>/.</p>
<p><a href="#BHAJGEHF">Example 10-5</a> shows a sample PSP load command.</p>
<div id="ADFNS530" class="example">
<p class="titleinexample"><a id="BHAJGEHF"></a>Example 10-5 Loading PL/SQL Server Pages</p>
<pre dir="ltr">
loadpsp -replace -user joe/abc123@/db3 banner.inc error.psp display_order.psp
</pre></div>
<!-- class="example" -->
<p>In <a href="#BHAJGEHF">Example 10-5</a>:</p>
<ul>
<li>
<p>The stored procedure is created in the database <code dir="ltr">db3</code>. The database is accessed as user <code dir="ltr">joe</code> with password <code dir="ltr">abc123</code>, both to create the stored procedure and when the stored procedure is executed.</p>
</li>
<li>
<p><code dir="ltr">banner</code>.<code dir="ltr">inc</code> is a file containing boilerplate text and script code that is included by the .<code dir="ltr">psp</code> file. The inclusion occurs when the PSP is loaded into the database, not when the stored procedure is executed.</p>
</li>
<li>
<p><code dir="ltr">error</code>.<code dir="ltr">psp</code> is a file containing code, text, or both that is processed when an unhandled exception occurs, to present a friendly page rather than an internal error message.</p>
</li>
<li>
<p><code dir="ltr">display_order</code>.<code dir="ltr">psp</code> contains the main code and text for the web page. By default, the corresponding stored procedure is named <code dir="ltr">display_order</code>.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="g2478973"></a>
<div id="ADFNS1207" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Querying PL/SQL Server Page Source Code</h2>
<p>The code that <code dir="ltr">loadpsp</code> generates is different from the code in the source file. It has calls to the <code dir="ltr">HTP</code> package, which generates the HTML tags for the web page.</p>
<p>After loading a PSP file, you can see the generated source code by querying the static data dictionary views <code dir="ltr">*_SOURCE</code>. For example, suppose that you load the script in <a href="#BHADDBII">Example 10-1</a> with this command:</p>
<pre dir="ltr">
loadpsp -replace -user hr simple.psp
Enter Password: <span class="italic">password</span>
</pre>
<p>If you log on to the database as user <code dir="ltr">hr</code>, you can view the source code of the PSP as shown in <a href="#BHAGDCCH">Example 10-6</a>.</p>
<div id="ADFNS531" class="example">
<p class="titleinexample"><a id="BHAGDCCH"></a>Example 10-6 Querying PL/SQL Server Page Source Code</p>
<p>Query:</p>
<pre dir="ltr">
SELECT TEXT
FROM USER_SOURCE
WHERE NAME = 'SHOW_EMPLOYEES'
ORDER BY LINE;
 
</pre>
<p>Result:</p>
<pre dir="ltr">
PROCEDURE show_employees  AS
 
  CURSOR emp_cursor IS
  SELECT last_name, first_name
  FROM hr.employees
  ORDER BY last_name;
 
 BEGIN NULL;
owa_util.mime_header('text/html'); htp.prn('
');
htp.prn('
');
htp.prn('
');
htp.prn('
');
htp.prn('
');
htp.prn('
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html"&gt;
&lt;title&gt;List of Employees&lt;/title&gt;
&lt;/head&gt;
&lt;body TEXT="#000000" BGCOLOR="#FFFFFF"&gt;
&lt;h1&gt;List of Employees&lt;/h1&gt;
&lt;table width="40%" border="1"&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Last Name&lt;/th&gt;
&lt;th align="left"&gt;First Name&lt;/th&gt;
&lt;/tr&gt;
');
  FOR emp_record IN emp_cursor LOOP
htp.prn('
  &lt;tr&gt;
  &lt;td&gt; ');
htp.prn( emp_record.last_name );
htp.prn(' &lt;/td&gt;
  &lt;td&gt; ');
htp.prn( emp_record.first_name );
htp.prn(' &lt;/td&gt;
  &lt;/tr&gt;
');
  END LOOP;
htp.prn('
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
');
 END;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BHAHIJCH"></a>
<div id="ADFNS1208" class="sect1">
<h2 class="sect1">Running PL/SQL Server Pages Through URLs</h2>
<p>After the PL/SQL server page is turned into a stored procedure, you can run the procedure by retrieving an HTTP URL through a web browser or other Internet-aware client program. The virtual path in the URL depends on the way the PL/SQL gateway is configured.</p>
<p>The parameters to the stored procedure are passed through either the <code dir="ltr">POST</code> method or the <code dir="ltr">GET</code> method of the HTTP protocol. With the <code dir="ltr">POST</code> method, the parameters are passed directly from an HTML form and are not visible in the URL. With the <code dir="ltr">GET</code> method, the parameters are passed as name-value pairs in the query string of the URL, separated by <code dir="ltr">&amp;</code> characters, with most nonalphanumeric characters in encoded format (such as <code dir="ltr">%20</code> for a space). You can use the <code dir="ltr">GET</code> method to invoke a PSP page from an HTML form, or you can use a hard-coded HTML link to invoke the stored procedure with a given set of parameters.</p>
<p>Using <code dir="ltr">METHOD=GET</code>, the syntax of the URL looks something like this:</p>
<pre dir="ltr">
http://<span class="italic">sitename</span>/<span class="italic">schemaname</span>/<span class="italic">procname</span>?<span class="italic">parmname1</span>=<span class="italic">value1</span>&amp;<span class="italic">parmname2</span>=<span class="italic">value2</span>
</pre>
<p>For example, this URL includes a <code dir="ltr">p_lname</code> and <code dir="ltr">p_fname</code> parameter:</p>
<pre dir="ltr">
http://www.example.com/pls/show_employees?p_lname=Ashdown&amp;p_fname=Lance
</pre>
<p>Using <code dir="ltr">METHOD=POST</code>, the syntax of the URL does not show the parameters:</p>
<pre dir="ltr">
http://<span class="italic">sitename</span>/<span class="italic">schemaname</span>/<span class="italic">procname</span>
</pre>
<p>For example, this URL specifies a procedure name but does not pass parameters:</p>
<pre dir="ltr">
http://www.example.com/pls/show_employees
</pre>
<p>The <code dir="ltr">METHOD=GET</code> format is more convenient for debugging and allows visitors to pass the same parameters when they return to the page through a bookmark.</p>
<p>The <code dir="ltr">METHOD=POST</code> format allows a larger volume of parameter data, and is suitable for passing sensitive information that must not be displayed in the URL. (URLs linger on in the browser's history list and in the HTTP headers that are passed to the next-visited page.) It is not practical to bookmark pages that are invoked this way.</p>
</div>
<!-- class="sect1" -->
<a id="BHAEBFEE"></a>
<div id="ADFNS1209" class="sect1">
<h2 class="sect1">Examples of PL/SQL Server Pages</h2>
<p>This section shows how you might start with a very simple PL/SQL server page, and produce progressively more complicated versions as you gain more confidence.</p>
<p>As you go through each step, you can follow the instructions in <a href="#BHAIFHAG">"Loading PL/SQL Server Pages into the Database"</a> and <a href="#BHAHIJCH">"Running PL/SQL Server Pages Through URLs"</a> to test the examples.</p>
<p class="subhead2"><a id="sthref760"></a>Topics:</p>
<ul>
<li>
<p><a href="#BHACCEDE">Setup for PL/SQL Server Pages Examples</a></p>
</li>
<li>
<p><a href="#BHACBCFF">Printing the Sample Table with a Loop</a></p>
</li>
<li>
<p><a href="#BHAEHEIC">Allowing a User Selection</a></p>
</li>
<li>
<p><a href="#BHAFDADH">Using an HTML Form to Invoke a PL/SQL Server Page</a></p>
</li>
<li>
<p><a href="#g2479352">Including JavaScript in a PSP File</a></p>
</li>
</ul>
<a id="BHACCEDE"></a>
<div id="ADFNS532" class="sect2">
<h3 class="sect2">Setup for PL/SQL Server Pages Examples</h3>
<p>These examples use the <code dir="ltr">PRODUCT_INFORMATION</code> table in the <code dir="ltr">OE</code> schema, which is described as follows:</p>
<p>SQL*Plus command:</p>
<pre dir="ltr">
DESCRIBE PRODUCT_INFORMATION;
</pre>
<p>Result:</p>
<pre dir="ltr">
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 PRODUCT_ID                                NOT NULL NUMBER(6)
 PRODUCT_NAME                                       VARCHAR2(50)
 PRODUCT_DESCRIPTION                                VARCHAR2(2000)
 CATEGORY_ID                                        NUMBER(2)
 WEIGHT_CLASS                                       NUMBER(1)
 WARRANTY_PERIOD                                    INTERVAL YEAR(2) TO MONTH
 SUPPLIER_ID                                        NUMBER(6)
 PRODUCT_STATUS                                     VARCHAR2(20)
 LIST_PRICE                                         NUMBER(8,2)
 MIN_PRICE                                          NUMBER(8,2)
 CATALOG_URL                                        VARCHAR2(50)
</pre>
<p>The examples assume:</p>
<ul>
<li>
<p>You have set up mod_plsql as described in <a href="adfns_web.htm#CHEIAHAE">"Using mod_plsql Gateway to Map Client Requests to a PL/SQL Web Application"</a>.</p>
</li>
<li>
<p>You have created a DAD for static authentication of the <code dir="ltr">OE</code> user.</p>
</li>
<li>
<p>You can access PL/SQL stored procedures created in the <code dir="ltr">OE</code> schema through this URL, where <code dir="ltr">proc_name</code> is the name of a stored procedure:<code dir="ltr">http://www.example.com/pls/proc_name</code></p>
</li>
</ul>
<p>For debugging purposes, you can display the complete contents of a SQL table with a call to <code dir="ltr">OWA_UTIL</code>.<code dir="ltr">TABLEPRINT</code>, as in <a href="#BHAJFGJA">Example 10-7</a>. Later examples show other techniques that give more control over the presentation.</p>
<div id="ADFNS533" class="example">
<p class="titleinexample"><a id="BHAJFGJA"></a>Example 10-7 show_prod_simple.psp</p>
<pre dir="ltr">
&lt;%@ plsql procedure="show_prod_simple" %&gt;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Show Contents of product_information (Complete Dump)&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;% 
DECLARE
  dummy BOOLEAN;
BEGIN
  dummy := OWA_UTIL.TABLEPRINT('oe.product_information','border');
END;
%&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre></div>
<!-- class="example" -->
<p>Load the PSP in <a href="#BHAJFGJA">Example 10-7</a> at the command line as follows:</p>
<pre dir="ltr">
loadpsp -replace -user oe/<span class="italic">password</span> show_prod_simple.psp
Enter Password: <span class="italic">password</span>
</pre>
<p>Access the PSP through this URL:</p>
<pre dir="ltr">
http://www.example.com/pls/show_prod_simple
</pre></div>
<!-- class="sect2" -->
<a id="BHACBCFF"></a>
<div id="ADFNS534" class="sect2">
<h3 class="sect2">Printing the Sample Table with a Loop</h3>
<p><a href="#BHAJFGJA">Example 10-7</a> loops through the items in the <code dir="ltr">product_information</code> table and adjusts the <code dir="ltr">SELECT</code> statement to retrieve only a subset of the rows or columns. This example uses a very simple presentation, a set of list items, to avoid any problems from mismatched or unclosed table tags.</p>
<div id="ADFNS535" class="example">
<p class="titleinexample"><a id="BHACCAAA"></a>Example 10-8 show_catalog_raw.psp</p>
<pre dir="ltr">
&lt;%@ plsql procedure="show_prod_raw" %&gt;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Show Products (Raw Form)&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;UL&gt;
&lt;% FOR item IN (SELECT product_name, list_price, catalog_url
                FROM product_information
                WHERE list_price IS NOT NULL
                ORDER BY list_price DESC) LOOP %&gt;
&lt;LI&gt;
Item = &lt;%= item.product_name %&gt;&lt;BR&gt;
Price = &lt;%= item.list_price %&gt;&lt;BR&gt;
URL = &lt;%= item.catalog_url %&gt;&lt;BR&gt;
&lt;% END LOOP; %&gt;
&lt;/UL&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#BHAJBEEB">Example 10-9</a> shows a more sophisticated variation of <a href="#BHACCAAA">Example 10-8</a> in which formatting is added to the HTML to improve the presentation.</p>
<div id="ADFNS536" class="example">
<p class="titleinexample"><a id="BHAJBEEB"></a>Example 10-9 show_catalog_pretty.psp</p>
<pre dir="ltr">
&lt;%@ plsql procedure="show_prod_pretty" %&gt;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Show Products (Better Form)&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;UL&gt;
&lt;% FOR item IN (SELECT product_name, list_price, catalog_url
                FROM product_information
                WHERE list_price IS NOT NULL
                ORDER BY list_price DESC) LOOP %&gt;
&lt;LI&gt;
Item = &lt;A HREF=&lt;%= item.catalog_url %&gt;&gt;&lt;%= item.product_name %&gt;&lt;/A&gt;&lt;BR&gt;
Price = &lt;BIG&gt;&lt;%= item.list_price %&gt;&lt;/BIG&gt;&lt;BR&gt;
&lt;% END LOOP; %&gt;
&lt;/UL&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BHAEHEIC"></a>
<div id="ADFNS537" class="sect2">
<h3 class="sect2">Allowing a User Selection</h3>
<p>In <a href="#BHAJFGJA">Example 10-7</a>, <a href="#BHACCAAA">Example 10-8</a>, and <a href="#BHAJBEEB">Example 10-9</a>, the HTML page remains the same unless the <code dir="ltr">PRODUCT_INFORMATION</code> table is updated. <a href="#BHAHGAAF">Example 10-10</a>:</p>
<ul>
<li>
<p>Makes the HTML page accept a minimum price, and presents only the items that are more expensive. (Your customers' buying criteria might vary.)</p>
</li>
<li>
<p>Sets the default minimum price to 100 units of the appropriate currency.</p>
</li>
</ul>
<div id="ADFNS538" class="example">
<p class="titleinexample"><a id="BHAHGAAF"></a>Example 10-10 show_product_partial.psp</p>
<pre dir="ltr">
&lt;%@ plsql procedure="show_product_partial" %&gt;
&lt;%@ plsql parameter="p_minprice" default="100" %&gt;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Show Items Greater Than Specified Price&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;P&gt;This report shows the items whose price is greater than &lt;%= p_minprice %&gt;.
&lt;UL&gt;
&lt;% FOR ITEM IN (SELECT product_name, list_price, catalog_url
                FROM product_information
                WHERE list_price &gt; p_minprice 
                ORDER BY list_price DESC)
   LOOP %&gt;
&lt;LI&gt;
Item = &lt;A HREF="&lt;%= item.catalog_url %&gt;"&gt;&lt;%= item.product_name %&gt;&lt;/A&gt;&lt;BR&gt;
Price = &lt;BIG&gt;&lt;%= item.list_price %&gt;&lt;/BIG&gt;&lt;BR&gt;
&lt;% END LOOP; %&gt;
&lt;/UL&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre></div>
<!-- class="example" -->
<p>After loading <a href="#BHAHGAAF">Example 10-10</a> into the database, you can pass a parameter to the <code dir="ltr">show_product_partial</code> procedure through a URL. This example specifies a minimum price of 250:</p>
<pre dir="ltr">
http://www.example.com/pls/show_product_partial?p_minprice=250
</pre>
<p>Filtering results is appropriate for applications such as search results, where users might be overwhelmed by choices. But in a retail situation, you might want to use the alternative technique illustrated in <a href="#BHAECEIB">Example 10-11</a>, so that customers can still choose to purchase other items:</p>
<ul>
<li>
<p>Instead of filtering the results through a <code dir="ltr">WHERE</code> clause, retrieve the entire result set and then take different actions for different returned rows.</p>
</li>
<li>
<p>Change the HTML to highlight the output that meets their criteria. <a href="#BHAECEIB">Example 10-11</a> uses the background color for an HTML table row. You can also insert a special icon, increase the font size, or use another technique to call attention to the most important rows.</p>
</li>
<li>
<p>Present the results in an HTML table.</p>
</li>
</ul>
<div id="ADFNS539" class="example">
<p class="titleinexample"><a id="BHAECEIB"></a>Example 10-11 show_product_highlighed.psp</p>
<pre dir="ltr">
&lt;%@ plsql procedure="show_product_highlighted" %&gt;
&lt;%@ plsql parameter="p_minprice" default="100" %&gt;
&lt;%! v_color VARCHAR2(7); %&gt;

&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Show Items Greater Than Specified Price&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;P&gt;This report shows all items, highlighting those whose price is
 greater than &lt;%= p_minprice %&gt;.
&lt;P&gt;
&lt;TABLE BORDER&gt;
  &lt;TR&gt;
    &lt;TH&gt;Product&lt;/TH&gt;
    &lt;TH&gt;Price&lt;/TH&gt;
  &lt;/TR&gt;
  &lt;% FOR ITEM IN (SELECT product_name, list_price, catalog_url 
                  FROM product_information
                  WHERE list_price IS NOT NULL
                  ORDER BY list_price DESC) LOOP
     IF item.list_price &gt; p_minprice THEN
        v_color := '#CCCCFF';
     ELSE
        v_color := '#CCCCCC';
     END IF;
  %&gt;
  &lt;TR BGCOLOR="&lt;%= v_color %&gt;"&gt;
    &lt;TD&gt;&lt;A HREF="&lt;%= item.catalog_url %&gt;"&gt;&lt;%= item.product_name %&gt;&lt;/A&gt;&lt;/TD&gt;
    &lt;TD&gt;&lt;BIG&gt;&lt;%= item.list_price %&gt;&lt;/BIG&gt;&lt;/TD&gt;
  &lt;/TR&gt;
  &lt;% END LOOP; %&gt;
&lt;/TABLE&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BHAFDADH"></a>
<div id="ADFNS540" class="sect2">
<h3 class="sect2">Using an HTML Form to Invoke a PL/SQL Server Page</h3>
<p><a href="#BHAGJABB">Example 10-12</a> shows a bare-bones HTML form that allows the user to enter a price. The form invokes the <code dir="ltr">show_product_partial</code> stored procedure illustrated in <a href="#BHAHGAAF">Example 10-10</a> and passes it the entered value as the <code dir="ltr">p_minprice</code> parameter.</p>
<p>To avoid coding the entire URL of the stored procedure in the <code dir="ltr">ACTION=</code> attribute of the form, you can make the form a PSP file so that it resides in the same directory as the PSP file that it invokes. Even though this HTML file contains no PL/SQL code, you can give it a .<code dir="ltr">psp</code> extension and load it as a stored procedure into the database. When the <code dir="ltr">product_form</code> stored procedure is executed through a URL, it displays the HTML exactly as it appears in the file.</p>
<div id="ADFNS541" class="example">
<p class="titleinexample"><a id="BHAGJABB"></a>Example 10-12 product_form.psp</p>
<pre dir="ltr">
&lt;HTML&gt;
&lt;BODY&gt;
&lt;FORM method="POST" action="show_product_partial"&gt;
  &lt;P&gt;Enter the minimum price you want to pay:
  &lt;INPUT type="text" name="p_minprice"&gt;
  &lt;INPUT type="submit" value="Submit"&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="g2479352"></a>
<div id="ADFNS542" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Including JavaScript in a PSP File</h3>
<p>To produce an elaborate HTML file, perhaps including dynamic content such as <a id="sthref761"></a>JavaScript, you can simplify the source code by implementing it as a PSP. This technique avoids having to deal with nested quotation marks, escape characters, concatenated literals and variables, and indentation of the embedded content.</p>
<p><a href="#BHAGACAH">Example 10-13</a> shows a version of <a href="#BHAHGAAF">Example 10-10</a> that uses JavaScript to display the order status in the browser status bar when the user moves his or her mouse over the product URL.</p>
<div id="ADFNS543" class="example">
<p class="titleinexample"><a id="BHAGACAH"></a>Example 10-13 show_product_javascript.psp</p>
<pre dir="ltr">
&lt;%@ plsql procedure="show_product_javascript" %&gt;
&lt;%@ plsql parameter="p_minprice" default="100" %&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
  &lt;TITLE&gt;Show Items Greater Than Specified Price&lt;/TITLE&gt;
 
&lt;SCRIPT language="JavaScript"&gt;
&lt;!--hide
 
var text=" ";
 
function overlink (text)
{
  window.status=text;
}
function offlink (text)
{
  window.status=text;
}
 
//--&gt;
&lt;/SCRIPT&gt;
 
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;P&gt;This report shows the items whose price is greater than &lt;%= p_minprice %&gt;.
&lt;P&gt;
&lt;UL&gt;
&lt;% FOR ITEM IN (SELECT product_name, list_price, catalog_url, product_status
                FROM product_information
                WHERE list_price &gt; p_minprice 
                ORDER BY list_price DESC)
   LOOP %&gt;
&lt;LI&gt;
Item = 
  &lt;A HREF="&lt;%= item.catalog_url %&gt;" 
  onMouseover="overlink('PRODUCT STATUS: &lt;%= item.product_status %&gt;');return true"
  onMouseout="offlink(' ');return true"&gt;
    &lt;%= item.product_name %&gt;
  &lt;/A&gt;
&lt;BR&gt;
Price = &lt;BIG&gt;&lt;%= item.list_price %&gt;&lt;/BIG&gt;&lt;BR&gt;
&lt;% END LOOP; %&gt;
&lt;/UL&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BHAFHEHC"></a>
<div id="ADFNS1210" class="sect1">
<h2 class="sect1">Debugging PL/SQL Server Pages</h2>
<p><a id="sthref762"></a>As you begin experimenting with PL/SQL Server Pages, and as you adapt your first simple pages into more elaborate ones, keep these guidelines in mind when you encounter problems:</p>
<ul>
<li>
<p>The first step is to get all the PL/SQL syntax and PSP directive syntax right. If you make a mistake here, the file does not compile.</p>
<ul>
<li>
<p>Use semicolons to terminate lines where required.</p>
</li>
<li>
<p>If a value must be quoted, quote it. You might need to enclose a value in single quotation marks (which PL/SQL needs) inside double quotation marks (which PSP needs).</p>
</li>
<li>
<p>Mistakes in the PSP directives are usually reported through PL/SQL syntax messages. Check that your directives use the right syntax, that directives are closed properly, and that you are using the right element (declaration, expression, or code block) depending on what goes inside it.</p>
</li>
<li>
<p>PSP attribute names are case-sensitive. Most are specified in all lowercase; <code dir="ltr">contentType</code> and <code dir="ltr">errorPage</code> must be specified as mixed-case.</p>
</li>
</ul>
</li>
<li>
<p>When using a URL to request a PSP, you might get an error that the file is not found. In this case:</p>
<ul>
<li>
<p>Be sure you are requesting the right virtual path, depending on the way the web gateway is configured. Typically, the path includes the host name, optionally a port number, the schema name, and the name of the stored procedure (with no .<code dir="ltr">psp</code> extension).</p>
</li>
<li>
<p>If you use the <code dir="ltr">-replace</code> option when compiling the file, the old version of the stored procedure is erased. So, after a failed compilation, you must fix the error or the page is not available. You might want to test scripts in a separate schema, then load them into the production schema.</p>
</li>
<li>
<p>If you copied the file from another file, remember to change any procedure name directives in the source to match the correct file name.</p>
</li>
<li>
<p>When you get one file-not-found error, request the latest version of the page the next time. The error page might be cached by the browser. You might need to force a page reload in the browser to bypass the cache.</p>
</li>
</ul>
</li>
<li>
<p>When the PSP script is run, and the results come back to the browser, use standard debugging techniques to check for and correct wrong output. The difficult part is to configure the interface between different HTML forms, scripts, and CGI programs so that the right values are passed into your page. The page might return an error because of a parameter mismatch.</p>
<p>Guidelines:</p>
<ul>
<li>
<p>To determine exactly what is being passed to your page, use <code dir="ltr">METHOD=GET</code> in the invoking form so that the parameters are visible in the URL.</p>
</li>
<li>
<p>Ensure that the form or CGI program that invokes your page passes the correct number of parameters, and that the names specified by the <code dir="ltr">NAME=</code> attributes on the form match the parameter names in the PSP file. If the form includes any hidden input fields, or uses the <code dir="ltr">NAME=</code> attribute on the <code dir="ltr">Submit</code> or <code dir="ltr">Reset</code> buttons, then the PSP file must declare equivalent parameters.</p>
</li>
<li>
<p>Ensure that the parameters can be cast from string into the correct PL/SQL types. For example, do not include alphabetic characters if the parameter in the PSP file is declared as a <code dir="ltr">NUMBER</code>.</p>
</li>
<li>
<p>Ensure that the query string of the URL consists of name-value pairs, separated by equals signs, especially if you are passing parameters by constructing a hard-coded link to the page.</p>
</li>
<li>
<p>If you are passing a lot of parameter data, such as large strings, you might exceed the volume that can be passed with <code dir="ltr">METHOD=GET</code>. You can switch to <code dir="ltr">METHOD=POST</code> in the invoking form without changing your PSP file.</p>
</li>
<li>
<p>Although the <code dir="ltr">loadpsp</code> command reports line numbers correctly when there is a syntax error in your source file, line numbers reported for runtime errors refer to a transformed version of the source and do not match the line numbers in the original source. When you encounter errors that produce an error trace instead of the expected web page, you must locate the error through exception handlers and by printing debug output.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BHAFGEJE"></a>
<div id="ADFNS1211" class="sect1">
<h2 class="sect1">Putting PL/SQL Server Pages into Production</h2>
<p>Before putting your PSP application into production, consider issues such as usability and download speed:</p>
<ul>
<li>
<p>Pages can be rendered faster in the browser if the <code dir="ltr">HEIGHT=</code> and <code dir="ltr">WIDTH=</code> attributes are specified for all images. You might standardize on picture sizes, or store the height and width of images in the database along with the data or URL.</p>
</li>
<li>
<p>For viewers who turn off graphics, or who use alternative browsers that read the text out loud, include a description of significant images using the <code dir="ltr">ALT=</code> attribute. You might store the description in the database along with the image.</p>
</li>
<li>
<p>Although an HTML table provides a good way to display data, a large table can make your application seem slow. Often, the reader sees a blank page until the entire table is downloaded. If the amount of data in an HTML table is large, consider splitting the output into multiple tables.</p>
</li>
<li>
<p>If you set text, font, or background colors, test your application with different combinations of browser color settings:</p>
<ul>
<li>
<p>Test what happens if you override just the foreground color in the browser, or just the background color, or both.</p>
</li>
<li>
<p>If you set one color (such as the foreground text color), set all the colors through the <code dir="ltr">&lt;BODY&gt;</code> tag, to avoid hard-to-read combinations like white text on a white background.</p>
</li>
<li>
<p>If you use a background image, specify a similar background color to provide proper contrast for viewers who do not load graphics.</p>
</li>
<li>
<p>If the information conveyed by different colors is crucial, consider using an alternative technique. For example, you might put an icon next to special items in a table. Some users might see your page on a monochrome screen or on browsers that cannot represent different colors.</p>
</li>
</ul>
</li>
<li>
<p>Providing context information prevents users from getting lost. Include a descriptive <code dir="ltr">&lt;TITLE&gt;</code> tag for your page. If the user is partway through a procedure, indicate which step is represented by your page. Provide links to logical points to continue with the procedure, return to a previous step, or cancel the procedure completely. Many pages might use a standard set of links that you embed using the include directive.</p>
</li>
<li>
<p>In any entry fields, users might enter incorrect values. Where possible, use <code dir="ltr">SELECT</code> lists to present a set of choices. Validate any text entered in a field before passing it to SQL. The earlier you can validate, the better; a JavaScript function can detect incorrect data and prompt the user to correct it before they press the <code dir="ltr">Submit</code> button and call the database.</p>
</li>
<li>
<p>Browsers tend to be lenient when displaying incorrect HTML. What looks OK in one browser might look bad or might not display at all in another browser.</p>
<p>Guidelines:</p>
<ul>
<li>
<p>Pay attention to HTML rules for quotation marks, closing tags, and especially for anything to do with tables.</p>
</li>
<li>
<p>Minimize the dependence on tags that are only supported by a single browser. Sometimes you can provide an extra bonus using such tags, but your application must still be usable with other browsers.</p>
</li>
<li>
<p>You can check the validity, and even in some cases the usability, of your HTML for free at many sites on the World Wide Web.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1266">
<tr>
<td class="cellalignment1275">
<table class="cellalignment1271">
<tr>
<td class="cellalignment1270"><a href="adfns_web.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1270"><a href="adfns_cqn.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1277">
<table class="cellalignment1269">
<tr>
<td class="cellalignment1270"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1270"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1270"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1270"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1270"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1270"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
