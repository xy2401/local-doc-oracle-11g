<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using SQL Data Types in Database Applications</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-06T1:49:47Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Advanced Application Developer's Guide" />
<meta name="dcterms.identifier" content="E41502-06" />
<meta name="dcterms.isVersionOf" content="ADFNS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="adfns_part_sql.htm" title="Previous" type="text/html" />
<link rel="Next" href="adfns_sqlproc.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e41502.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/31</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='adfns_sqltypes'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="ADFNS0002" class="chapter"><a id="i1006173"></a>
<h1 class="chapter"><span class="secnum">1</span> Using SQL Data Types in Database Applications</h1>
<p>This chapter explains how to use SQL data types in database applications.</p>
<p class="subhead2"><a id="sthref10"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABHBEGH">Overview of SQL Data Types</a></p>
</li>
<li>
<p><a href="#BABEFDEF">Representing Character Data</a></p>
</li>
<li>
<p><a href="#BABBAHFE">Representing Numeric Data</a></p>
</li>
<li>
<p><a href="#BABJJCAI">Representing Date and Time Data</a></p>
</li>
<li>
<p><a href="#BABECADE">Representing Specialized Data</a></p>
</li>
<li>
<p><a href="#BABEBICE">Representing Conditional Expressions as Data</a></p>
</li>
<li>
<p><a href="#BABIIHAA">Identifying Rows by Address</a></p>
</li>
<li>
<p><a href="#BABDBADI">How Oracle Database Converts Data Types</a></p>
</li>
<li>
<p><a href="#CIHEHJIB">Metadata for SQL Operators and Functions</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><a class="olink LNPLS003" href="../../appdev.112/e25519/datatypes.htm#LNPLS003"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about PL/SQL data types</p>
</li>
<li>
<p><a class="olink LNPLS163" href="../../appdev.112/e25519/overview.htm#LNPLS163"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for introductory information about Abstract Data Types (ADTs)</p>
</li>
<li>
<p><a class="olink ADOBJ" href="../e11822/toc.htm"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a> for advanced information about ADTs</p>
<p>An ADT consists of a data structure and subprograms that manipulate the data. In the static data dictionary view <code >*_OBJECTS</code>, the <code dir="ltr">OBJECT_TYPE</code> of an ADE is <code dir="ltr">TYPE</code>. In the static data dictionary view <code dir="ltr">*_TYPES</code>, the <code dir="ltr">TYPECODE</code> of an ADE is <code dir="ltr">OBJECT</code>.</p>
</li>
</ul>
</div>
<a id="BABHBEGH"></a>
<div id="ADFNS00301" class="sect1">
<h2 class="sect1">Overview of SQL Data Types</h2>
<p><a id="sthref11"></a>A data type associates fixed properties with the values that can be inserted in table columns or passed as parameters to subprograms. These properties cause Oracle Database to treat values of different data types differently. For example, Oracle Database can add values of <code dir="ltr">NUMBER</code> data type, but cannot add values of <code dir="ltr">RAW</code> data type.</p>
<p>Oracle Database provides many data types and several categories for user-defined types that can be used as data types.</p>
<p>The Oracle precompilers recognize other data types in embedded SQL programs. These data types are called <a id="sthref12"></a><a id="sthref13"></a><span class="glossaryterm">external data types</span> and are associated with host variables. Do not confuse external data types with Oracle built-in, Oracle-supplied, and user-defined data types.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF0021" href="../../server.112/e41084/sql_elements001.htm#SQLRF0021"><span class="italic">Oracle Database SQL Language Reference</span></a> for complete information about SQL data types</p>
</li>
<li>
<p><a class="olink CNCPT113" href="../../server.112/e40540/tablecls.htm#CNCPT113"><span class="italic">Oracle Database Concepts</span></a> for additional introductory information about SQL data types (which it calls <span class="italic">Oracle data types</span>)</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="BABEFDEF"></a>
<div id="ADFNS00302" class="sect1">
<h2 class="sect1">Representing Character Data</h2>
<p><a id="sthref14"></a><a href="#BABGACCH">Table 1-1</a> summarizes the SQL data types that store alphanumeric data.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref15"></a><a id="BABGACCH"></a>Table 1-1 SQL Character Data Types</p>
<table class="cellalignment1278" title="SQL Character Data Types" summary="This table lists and briefly describes each SQL character data type." dir="ltr">
<thead>
<tr class="cellalignment1267">
<th class="cellalignment1274" id="r1c1-t4">Data Types</th>
<th class="cellalignment1274" id="r1c2-t4">Values Stored</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r2c1-t4" headers="r1c1-t4">
<p><a id="sthref16"></a><a class="olink SQLRF50974" href="../../server.112/e41084/sql_elements001.htm#SQLRF50974"><code dir="ltr">CHAR</code></a></p>
</td>
<td class="cellalignment1275" headers="r2c1-t4 r1c2-t4">
<p>Fixed-length character literals</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r3c1-t4" headers="r1c1-t4">
<p><a id="sthref17"></a><a class="olink SQLRF50975" href="../../server.112/e41084/sql_elements001.htm#SQLRF50975"><code dir="ltr">NCHAR</code></a></p>
</td>
<td class="cellalignment1275" headers="r3c1-t4 r1c2-t4">
<p>Fixed-length Unicode character literals</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r4c1-t4" headers="r1c1-t4">
<p><a id="sthref18"></a><a class="olink SQLRF50977" href="../../server.112/e41084/sql_elements001.htm#SQLRF50977"><code dir="ltr">VARCHAR2</code></a></p>
</td>
<td class="cellalignment1275" headers="r4c1-t4 r1c2-t4">
<p>Variable-length character literals</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r5c1-t4" headers="r1c1-t4">
<p><a id="sthref19"></a><a class="olink SQLRF50976" href="../../server.112/e41084/sql_elements001.htm#SQLRF50976"><code dir="ltr">NVARCHAR2</code></a></p>
</td>
<td class="cellalignment1275" headers="r5c1-t4 r1c2-t4">
<p>Variable-length Unicode character literals</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r6c1-t4" headers="r1c1-t4">
<p><a class="olink SQLRF20041" href="../../server.112/e41084/sql_elements001.htm#SQLRF20041"><code dir="ltr">CLOB</code></a></p>
</td>
<td class="cellalignment1275" headers="r6c1-t4 r1c2-t4">
<p>Single-byte and multibyte character strings of up to (4&nbsp;gigabytes&nbsp;-&nbsp;1) * (the value obtained from <code dir="ltr">DBMS_LOB.GETCHUNKSIZE</code>)</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r7c1-t4" headers="r1c1-t4">
<p><a class="olink SQLRF20042" href="../../server.112/e41084/sql_elements001.htm#SQLRF20042"><code dir="ltr">NCLOB</code></a></p>
</td>
<td class="cellalignment1275" headers="r7c1-t4 r1c2-t4">
<p>Single-byte and multibyte Unicode character strings of up to (4&nbsp;gigabytes&nbsp;-&nbsp;1) * (the value obtained from <code dir="ltr">DBMS_LOB.GETCHUNKSIZE</code>)</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r8c1-t4" headers="r1c1-t4">
<p><a class="olink SQLRF00201" href="../../server.112/e41084/sql_elements001.htm#SQLRF00201"><code dir="ltr">LONG</code></a></p>
</td>
<td class="cellalignment1275" headers="r8c1-t4 r1c2-t4">
<p>Variable-length character data of up to 2&nbsp;gigabytes&nbsp;-&nbsp;1. Provided only for backward compatibility.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>For a client/server application, if the character set on the client side differs from the character set on the server side, then Oracle Database automatically converts <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, and <code dir="ltr">LONG</code> data from the database character set (determined by the <code dir="ltr">NLS_LANGUAGE</code> parameter) to the character set defined for the user session.</p>
<p class="subhead2"><a id="sthref20"></a><a id="sthref21"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABIDIFE">Specifying Column Lengths as Bytes or Characters</a></p>
</li>
<li>
<p><a href="#BABICBHE">Choosing Between CHAR and VARCHAR2 Data Types</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF50973" href="../../server.112/e41084/sql_elements001.htm#SQLRF50973"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NCHAR</code>, and <code dir="ltr">NVARCHAR2</code> data types</p>
</li>
<li>
<p><a href="#BABBEIHB">"Large Objects (LOBs)"</a> for more information about <code dir="ltr">CLOB</code> and <code dir="ltr">NCLOB</code> data types</p>
</li>
<li>
<p><a href="#BABDBGJA">"LONG and LONG RAW Data Types"</a> for more information about <code dir="ltr">LONG</code> data type</p>
</li>
</ul>
</div>
<a id="BABIDIFE"></a>
<div id="ADFNS159" class="sect2">
<h3 class="sect2">Specifying Column Lengths as Bytes or Characters</h3>
<p><a id="sthref22"></a><a id="sthref23"></a>You can specify the lengths of <a id="sthref24"></a><code dir="ltr">CHAR</code> and <a id="sthref25"></a><code dir="ltr">VARCHAR2</code> columns as either bytes or characters. The lengths of <a id="sthref26"></a><code dir="ltr">NCHAR</code> and <a id="sthref27"></a><code dir="ltr">NVARCHAR2</code> columns are always specified in characters, making them ideal for storing <a id="sthref28"></a>Unicode character literals, where a character might consist of multiple bytes. This table shows some column length specifications and their meanings:</p>
<div class="inftblinformal">
<table class="cellalignment1273" title="Column Length Specifications" summary="The table has two columns. The left column has four examples of column length specifications, and the right column explains their meanings." dir="ltr">
<thead>
<tr class="cellalignment1267">
<th class="cellalignment1274" id="r1c1-t6">Column Length Specification</th>
<th class="cellalignment1274" id="r1c2-t6">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r2c1-t6" headers="r1c1-t6"><code dir="ltr">id</code> <code dir="ltr">VARCHAR2(32 BYTE)</code></td>
<td class="cellalignment1275" headers="r2c1-t6 r1c2-t6">The <code dir="ltr">id</code> column contains up to 32 single-byte characters.</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r3c1-t6" headers="r1c1-t6"><code dir="ltr">name</code> <code dir="ltr">VARCHAR2(32 CHAR)</code></td>
<td class="cellalignment1275" headers="r3c1-t6 r1c2-t6">The <code dir="ltr">name</code> column contains up to 32 characters of the database character set. If the database character set includes multibyte characters, then the 32 characters can occupy more than 32 bytes.</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r4c1-t6" headers="r1c1-t6"><code dir="ltr">biography</code> <code dir="ltr">NVARCHAR2(2000)</code></td>
<td class="cellalignment1275" headers="r4c1-t6 r1c2-t6">The <code dir="ltr">biography</code> column contains up to 2000 characters of any Unicode-representable language. The encoding depends on the national character set. The column can contain multibyte values even if the database character set is single-byte.</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r5c1-t6" headers="r1c1-t6"><code dir="ltr">comment</code> <code dir="ltr">VARCHAR2(2000)</code></td>
<td class="cellalignment1275" headers="r5c1-t6 r1c2-t6">The <code dir="ltr">comment</code> column contains up to 2000 bytes or characters, depending on the value of the initialization parameter <code dir="ltr">NLS_LENGTH_SEMANTICS</code>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p>When using a multibyte database character encoding scheme, consider carefully the space required for tables with character columns. If the database character encoding scheme is single-byte, then the number of bytes and the number of characters in a column is the same. If it is multibyte, however, then generally there is no such correspondence. A character might consist of one or more bytes, depending on the specific multibyte encoding scheme and whether shift-in/shift-out control codes are present. To avoid overflowing buffers, specify data as <code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code> if it might use a Unicode encoding that is different from the database character set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink NLSPG0071" href="../../server.112/e10729/ch7progrunicode.htm#NLSPG0071"><span class="italic">Oracle Database Globalization Support Guide</span></a> for more information about SQL data types <code dir="ltr">NCHAR</code> and <code dir="ltr">NVARCHAR2</code></p>
</li>
<li>
<p><a class="olink SQLRF00218" href="../../server.112/e41084/sql_elements003.htm#SQLRF00218"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about SQL data types <code dir="ltr">NCHAR</code> and <code dir="ltr">NVARCHAR2</code></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABICBHE"></a>
<div id="ADFNS160" class="sect2">
<h3 class="sect2">Choosing Between CHAR and VARCHAR2 Data Types</h3>
<p><a id="sthref29"></a><a id="sthref30"></a>When choosing a data type for a column that stores alphanumeric data in a table, consider:</p>
<ul>
<li>
<p>Space usage</p>
<p>Oracle Database blank-pads values stored in <code dir="ltr">CHAR</code> columns but not values stored in <code dir="ltr">VARCHAR2</code> columns. Therefore, <code dir="ltr">VARCHAR2</code> columns use space more efficiently than <code dir="ltr">CHAR</code> columns.</p>
</li>
<li>
<p>Performance</p>
<p>Because of the blank-padding difference, a full table scan on a large table containing <code dir="ltr">VARCHAR2</code> columns might read fewer data blocks than a full table scan on a table containing the same data stored in <code dir="ltr">CHAR</code> columns. If your application often performs full table scans on large tables containing character data, then you might be able to improve performance by storing data in <code dir="ltr">VARCHAR2</code> columns rather than in <code dir="ltr">CHAR</code> columns.</p>
</li>
<li>
<p>Comparison semantics</p>
<p>When you need ANSI compatibility in comparison semantics, use the <code dir="ltr">CHAR</code> data type. When trailing blanks are important in string comparisons, use the <code dir="ltr">VARCHAR2</code> data type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF0021" href="../../server.112/e41084/sql_elements001.htm#SQLRF0021"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about comparison semantics for these data types</div>
</li>
<li>
<p>Future compatibility</p>
<p>The <code dir="ltr">CHAR</code> and <code dir="ltr">VARCHAR2</code> data types are fully supported. Today, the <code dir="ltr">VARCHAR</code> data type automatically corresponds to the <code dir="ltr">VARCHAR2</code> data type and is reserved for future use.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABBAHFE"></a>
<div id="ADFNS00303" class="sect1">
<h2 class="sect1">Representing Numeric Data</h2>
<p><a id="sthref31"></a><a id="sthref32"></a>The SQL data types that store numeric data are <code dir="ltr">NUMBER</code>, <code dir="ltr">BINARY_FLOAT</code>, and <code dir="ltr">BINARY_DOUBLE</code>.</p>
<p>The <a id="sthref33"></a><code dir="ltr">NUMBER</code> data type stores real numbers in either a fixed-point or <a id="sthref34"></a>floating-point format. <code dir="ltr">NUMBER</code> offers up to 38 decimal digits of precision. In a <code dir="ltr">NUMBER</code> column, you can store positive and negative numbers of magnitude 1&nbsp;x&nbsp;10<sup>-130</sup> through 9.99&nbsp;x10<sup>125</sup>, and 0. All Oracle Database platforms support <code dir="ltr">NUMBER</code> values.</p>
<p>The <a id="sthref35"></a><code dir="ltr">BINARY_FLOAT</code> and <a id="sthref36"></a><code dir="ltr">BINARY_DOUBLE</code> data types store floating-point numbers in the single-precision (32-bit) IEEE 754 format and the double-precision (64-bit) IEEE 754 format, respectively. High-precision values use less space when stored as <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> than when stored as <code dir="ltr">NUMBER</code>. Arithmetic operations on floating-point numbers are usually faster for <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> values than for <code dir="ltr">NUMBER</code> values.</p>
<p>In client interfaces that Oracle Database supports, arithmetic operations on <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> values are performed by the native instruction set that the hardware vendor supplies. The term <a id="sthref37"></a><span class="glossaryterm">native floating-point data type</span> includes <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> data types and all implementations of these types in supported client interfaces.</p>
<p>Native floating-point data types conform substantially with the <a id="sthref38"></a>Institute of Electrical and Electronics Engineers (IEEE) Standard for Binary Floating-Point Arithmetic, IEEE Standard 754-1985 (IEEE754). For details, see <a class="olink SQLRF50985" href="../../server.112/e41084/sql_elements001.htm#SQLRF50985"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p class="subhead2"><a id="sthref39"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABEFAJI">Floating-Point Number Components</a></p>
</li>
<li>
<p><a href="#BABGHIHF">Floating-Point Number Formats</a></p>
</li>
<li>
<p><a href="#BABEBBFG">Comparison Operators for Native Floating-Point Data Types</a></p>
</li>
<li>
<p><a href="#BABBCCJF">Arithmetic Operations with Native Floating-Point Data Types</a></p>
</li>
<li>
<p><a href="#BABJAEGB">Conversion Functions for Floating-Point Data Types</a></p>
</li>
<li>
<p><a href="#BABJJBAD">Client Interfaces for Native Floating-Point Data Types</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF00222" href="../../server.112/e41084/sql_elements001.htm#SQLRF00222"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code dir="ltr">NUMBER</code> data type</p>
</li>
<li>
<p><a class="olink SQLRF00209" href="../../server.112/e41084/sql_elements001.htm#SQLRF00209"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> data types</p>
</li>
</ul>
</div>
<a id="BABEFAJI"></a>
<div id="ADFNS99868" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Floating-Point Number Components</h3>
<p>A floating-point number has these <a id="sthref40"></a>components:</p>
<ul>
<li>
<p>Binary-valued sign</p>
</li>
<li>
<p>Signed exponent</p>
</li>
<li>
<p>Significand</p>
</li>
<li>
<p>Base</p>
</li>
</ul>
<p>The formula for a floating-point value is:</p>
<pre dir="ltr">
(-1)<span class="superscript">sign</span>.<span class="italic">significand</span>.<span class="italic">base</span><span class="superscript">exponent</span>
</pre>
<p>For example, the floating-point value 4.31 is represented:</p>
<pre dir="ltr">
(-1)<span class="superscript">0</span>.431.10<span class="superscript">-2</span>
</pre>
<p>The components of the preceding representation are:</p>
<div class="inftblinformal">
<table class="cellalignment1273" title="Floating-Point Number Components" summary="This table gives the name and value of each component of the preceding floating-point number." dir="ltr">
<thead>
<tr class="cellalignment1267">
<th class="cellalignment1274" id="r1c1-t10">Component Name</th>
<th class="cellalignment1274" id="r1c2-t10">Component Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r2c1-t10" headers="r1c1-t10">Sign</td>
<td class="cellalignment1275" headers="r2c1-t10 r1c2-t10">0</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r3c1-t10" headers="r1c1-t10">Significand</td>
<td class="cellalignment1275" headers="r3c1-t10 r1c2-t10">431</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r4c1-t10" headers="r1c1-t10">Base</td>
<td class="cellalignment1275" headers="r4c1-t10 r1c2-t10">10</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r5c1-t10" headers="r1c1-t10">Exponent</td>
<td class="cellalignment1275" headers="r5c1-t10 r1c2-t10">-2</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect2" -->
<a id="BABGHIHF"></a>
<div id="ADFNS163" class="sect2">
<h3 class="sect2">Floating-Point Number Formats</h3>
<p>A floating-point number <a id="sthref41"></a>format specifies how the components of a floating-point number are represented, thereby determining the range and precision of the values that the format can represent. The <span class="bold">range</span> is the interval bounded by the smallest and largest values and the <span class="bold">precision</span> is the number of significant digits. Both range and precision are finite. If a floating-point number is too precise for a given format, then the number is <a id="sthref42"></a><a id="sthref43"></a><a id="sthref44"></a>rounded.</p>
<p>How the number is rounded depends on the base of its format, which can be either <a id="sthref45"></a><a id="sthref46"></a>decimal or <a id="sthref47"></a><a id="sthref48"></a>binary. A number stored in decimal format is rounded to the nearest decimal place (for example, 1000, 10, or 0.01). A number stored in binary format is rounded to the nearest binary place (for example, 1024, 512, or 1/64).</p>
<p><code dir="ltr">NUMBER</code> values are stored in decimal format. For calculations that need decimal rounding, use the <code dir="ltr">NUMBER</code> data type.</p>
<p>Native floating-point values are stored in binary format.</p>
<p class="subhead2"><a id="sthref49"></a>Topics:</p>
<ul>
<li>
<p><a href="#g1603939">Binary Floating-Point Formats</a></p>
</li>
<li>
<p><a href="#g1604808">Special Values for Native Floating-Point Formats</a></p>
</li>
</ul>
<a id="g1603939"></a>
<div id="ADFNS164" class="sect3">
<h4 class="sect3">Binary Floating-Point Formats</h4>
<p><a id="sthref50"></a><a id="sthref51"></a>This formula determines the value of a floating-point number that uses a binary format:</p>
<pre dir="ltr">
(-1)<span class="superscript">sign</span> 2<span class="superscript">E</span> (bit<span class="subscript">0</span> bit<span class="subscript">1</span> bit<span class="subscript">2</span> ... bit<span class="subscript">p-1</span>)
</pre>
<p><a href="#BABBDEEJ">Table 1-2</a> describes the components of the preceding formula.</p>
<div id="ADFNS165" class="tblformal">
<p class="titleintable"><a id="sthref52"></a><a id="BABBDEEJ"></a>Table 1-2 Binary Floating-Point Format Components</p>
<table class="cellalignment1278" title="Binary Floating-Point Format Components" summary="The table describes the components of the binary format for floating-point numbers" dir="ltr">
<thead>
<tr class="cellalignment1267">
<th class="cellalignment1274" id="r1c1-t11">Component</th>
<th class="cellalignment1274" id="r1c2-t11">Component Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r2c1-t11" headers="r1c1-t11">
<p><code dir="ltr">sign</code></p>
</td>
<td class="cellalignment1275" headers="r2c1-t11 r1c2-t11">
<p>0 or 1</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r3c1-t11" headers="r1c1-t11">
<p><code dir="ltr">E</code> (exponent)</p>
</td>
<td class="cellalignment1275" headers="r3c1-t11 r1c2-t11">
<p>For single-precision (32-bit) data type, an integer from -126 through 127.</p>
<p>For double-precision (64-bit) data type, an integer from -1022 through 1023.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r4c1-t11" headers="r1c1-t11">
<p><code dir="ltr">bit</code><sub>i</sub></p>
</td>
<td class="cellalignment1275" headers="r4c1-t11 r1c2-t11">
<p>0 or 1. (The bit sequence represents a number in base 2.)</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r5c1-t11" headers="r1c1-t11">
<p><code dir="ltr">p</code> (precision)</p>
</td>
<td class="cellalignment1275" headers="r5c1-t11 r1c2-t11">
<p>For single-precision data type, 24.</p>
<p>For double-precision data type, 53.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>The leading bit of the significand, b<sub>0</sub>, must be set (1), except for subnormal numbers (explained later). Therefore, the leading bit is not actually stored, and a binary format provides <span class="italic">n</span> bits of precision while storing only <span class="italic">n</span>-1 bits. The IEEE 754 standard defines the in-memory formats for single-precision and double-precision data types, which <a href="#BABHAGJG">Table 1-3</a> shows.</p>
<div id="ADFNS167" class="tblformal">
<p class="titleintable"><a id="sthref53"></a><a id="BABHAGJG"></a>Table 1-3 Summary of Binary Format Storage Parameters</p>
<table class="cellalignment1278" title=" Summary of Binary Format Storage Parameters" summary="This table summarizes the storage parameters of single-precision and double-precision binary formats." dir="ltr">
<thead>
<tr class="cellalignment1267">
<th class="cellalignment1274" id="r1c1-t12">Data Type</th>
<th class="cellalignment1274" id="r1c2-t12">Sign Bit</th>
<th class="cellalignment1274" id="r1c3-t12">Exponent Bits</th>
<th class="cellalignment1274" id="r1c4-t12">Significand Bits</th>
<th class="cellalignment1274" id="r1c5-t12">Total Bits</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r2c1-t12" headers="r1c1-t12">
<p>Single-precision</p>
</td>
<td class="cellalignment1275" headers="r2c1-t12 r1c2-t12">
<p>1</p>
</td>
<td class="cellalignment1275" headers="r2c1-t12 r1c3-t12">
<p>8</p>
</td>
<td class="cellalignment1275" headers="r2c1-t12 r1c4-t12">
<p>24 (23 stored)</p>
</td>
<td class="cellalignment1275" headers="r2c1-t12 r1c5-t12">
<p>32</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r3c1-t12" headers="r1c1-t12">
<p>Double-precision</p>
</td>
<td class="cellalignment1275" headers="r3c1-t12 r1c2-t12">
<p>1</p>
</td>
<td class="cellalignment1275" headers="r3c1-t12 r1c3-t12">
<p>11</p>
</td>
<td class="cellalignment1275" headers="r3c1-t12 r1c4-t12">
<p>53 (52 stored)</p>
</td>
<td class="cellalignment1275" headers="r3c1-t12 r1c5-t12">
<p>64</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle Database does not support the extended single- and double-precision formats that the IEEE 754 standard defines.</div>
<p>A significand whose leading bit is set is called <a id="sthref54"></a><span class="glossaryterm">normalized</span>. The IEEE 754 standard defines <a id="sthref55"></a><a id="sthref56"></a><span class="glossaryterm">subnormal numbers</span> (also called <a id="sthref57"></a><a id="sthref58"></a><span class="glossaryterm">denormal numbers</span>) that are too small to represent with normalized significands. If the significand of a subnormal number were normalized, then its exponent would be too large. Subnormal numbers preserve this property: If <span class="italic">x</span>-<span class="italic">y</span>==0.0 (using floating-point subtraction), then <span class="italic">x</span>==<span class="italic">y</span>. IEEE 754 formats support subnormal values.</p>
<p><a id="sthref59"></a><a href="#BABIABAB">Table 1-4</a> shows the range and precision of the IEEE 754 single- and double-precision formats and Oracle Database <code dir="ltr">NUMBER</code>. Range limits are expressed as positive numbers, but they also apply to absolute values of negative numbers. (The notation "<span class="italic">number</span>&nbsp;e&nbsp;<span class="italic">exponent</span>" means <span class="italic">number</span>&nbsp;*&nbsp;10<sup>exponent</sup>.)</p>
<div id="ADFNS168" class="tblformal">
<p class="titleintable"><a id="sthref60"></a><a id="BABIABAB"></a>Table 1-4 Range and Precision of Floating-Point Data Types</p>
<table class="cellalignment1278" title=" Range and Precision of Floating-Point Data Types" summary="This table summarizes the ranges and precisions of IEEE 754 formats." dir="ltr">
<thead>
<tr class="cellalignment1267">
<th class="cellalignment1274" id="r1c1-t14">Range and Precision</th>
<th class="cellalignment1274" id="r1c2-t14"><a id="sthref61"></a>Single-precision <a id="sthref62"></a>32-bit<a id="sthref63" href="#sthref63" onclick='footdisplay(1,"These numbers are from the \u003cspan class=\"italic\"\u003eIEEE Numerical Computation Guide\u003c/span\u003e. ")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></th>
<th class="cellalignment1274" id="r1c3-t14"><a id="sthref64"></a>Double-precision <a id="sthref65"></a>64-bit<sup>1</sup></th>
<th class="cellalignment1274" id="r1c4-t14">Oracle Database NUMBER Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r2c1-t14" headers="r1c1-t14">
<p>Maximum positive normal number</p>
</td>
<td class="cellalignment1275" headers="r2c1-t14 r1c2-t14">
<p>3.40282347e+38</p>
</td>
<td class="cellalignment1275" headers="r2c1-t14 r1c3-t14">
<p>1.7976931348623157e+308</p>
</td>
<td class="cellalignment1275" headers="r2c1-t14 r1c4-t14">
<p>&lt; 1.0e126</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r3c1-t14" headers="r1c1-t14">
<p>Minimum positive normal number</p>
</td>
<td class="cellalignment1275" headers="r3c1-t14 r1c2-t14">
<p>1.17549435e-38</p>
</td>
<td class="cellalignment1275" headers="r3c1-t14 r1c3-t14">
<p>2.2250738585072014e-308</p>
</td>
<td class="cellalignment1275" headers="r3c1-t14 r1c4-t14">
<p>1.0e-130</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r4c1-t14" headers="r1c1-t14">
<p>Maximum positive subnormal number</p>
</td>
<td class="cellalignment1275" headers="r4c1-t14 r1c2-t14">
<p>1.17549421e-38</p>
</td>
<td class="cellalignment1275" headers="r4c1-t14 r1c3-t14">
<p>2.2250738585072009e-308</p>
</td>
<td class="cellalignment1275" headers="r4c1-t14 r1c4-t14">
<p>not applicable</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r5c1-t14" headers="r1c1-t14">
<p>Minimum positive subnormal number</p>
</td>
<td class="cellalignment1275" headers="r5c1-t14 r1c2-t14">
<p>1.40129846e-45</p>
</td>
<td class="cellalignment1275" headers="r5c1-t14 r1c3-t14">
<p>4.9406564584124654e-324</p>
</td>
<td class="cellalignment1275" headers="r5c1-t14 r1c4-t14">
<p>not applicable</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r6c1-t14" headers="r1c1-t14">
<p>Precision (decimal digits)</p>
</td>
<td class="cellalignment1275" headers="r6c1-t14 r1c2-t14">
<p>6 - 9</p>
</td>
<td class="cellalignment1275" headers="r6c1-t14 r1c3-t14">
<p>15 - 17</p>
</td>
<td class="cellalignment1275" headers="r6c1-t14 r1c4-t14">
<p>38 - 40</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>These numbers are from the <span class="italic">IEEE Numerical Computation Guide</span>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF00220" href="../../server.112/e41084/sql_elements003.htm#SQLRF00220"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about literal representation of numeric values</p>
</li>
<li>
<p><a class="olink SQLRF00209" href="../../server.112/e41084/sql_elements001.htm#SQLRF00209"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about floating-point formats</p>
</li>
<li>
<p><a class="olink SQLRF52113" href="../../server.112/e41084/conditions003.htm#SQLRF52113"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about floating-point conditions</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="g1604808"></a>
<div id="ADFNS169" class="sect3">
<h4 class="sect3">Special Values for Native Floating-Point Formats</h4>
<p><a id="sthref66"></a><a id="sthref67"></a>The IEEE 754 standard supports the special values shown in <a href="#CIHDBGJD">Table 1-5</a>.</p>
<div id="ADFNS170" class="tblformal">
<p class="titleintable"><a id="sthref68"></a><a id="CIHDBGJD"></a>Table 1-5 Special Values for Native Floating-Point Formats</p>
<table class="cellalignment1278" title="Special Values for Native Floating-Point Formats" summary="This table summarizes the special values that IEEE 754 uses to represent negative floating-point formats." dir="ltr">
<thead>
<tr class="cellalignment1267">
<th class="cellalignment1274" id="r1c1-t16">Value</th>
<th class="cellalignment1274" id="r1c2-t16">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r2c1-t16" headers="r1c1-t16">
<p><code dir="ltr">+INF</code></p>
</td>
<td class="cellalignment1275" headers="r2c1-t16 r1c2-t16">
<p><a id="sthref69"></a><a id="sthref70"></a><a id="sthref71"></a>Positive infinity</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r3c1-t16" headers="r1c1-t16">
<p><code dir="ltr">-INF</code></p>
</td>
<td class="cellalignment1275" headers="r3c1-t16 r1c2-t16">
<p><a id="sthref72"></a>Negative infinity</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r4c1-t16" headers="r1c1-t16">
<p><code dir="ltr">NaN</code></p>
</td>
<td class="cellalignment1275" headers="r4c1-t16 r1c2-t16">
<p><a id="sthref73"></a>Not a number</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r5c1-t16" headers="r1c1-t16">
<p><code dir="ltr">+0</code></p>
</td>
<td class="cellalignment1275" headers="r5c1-t16 r1c2-t16">
<p><a id="sthref74"></a>Positive zero</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r6c1-t16" headers="r1c1-t16">
<p><code dir="ltr">-0</code></p>
</td>
<td class="cellalignment1275" headers="r6c1-t16 r1c2-t16">
<p><a id="sthref75"></a>Negative zero</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>Each value in <a href="#CIHDBGJD">Table 1-5</a> is represented by a specific bit pattern, except <code dir="ltr">NaN</code>. <code dir="ltr">NaN</code>, the result of any undefined operation, is represented by many bit patterns. Some of these bits patterns have the sign bit set and some do not, but the sign bit has no meaning.</p>
<p>The IEEE 754 standard distinguishes between quiet <code dir="ltr">NaN</code>s (which do not raise additional exceptions as they propagate through most operations) and signaling <code dir="ltr">NaN</code>s (which do). The IEEE 754 standard specifies action for when exceptions are enabled and action for when they are disabled.</p>
<p>In Oracle Database, exceptions cannot be enabled. Oracle Database acts as the IEEE 754 standard specifies for when exceptions are disabled. In particular, Oracle Database does not distinguish between quiet and signaling <code dir="ltr">NaN</code>s. You can use Oracle Call Interface (OCI) to retrieve <code dir="ltr">NaN</code> values from Oracle Database, but whether a retrieved <code dir="ltr">NaN</code> value is signaling or quiet depends on the client platform and is beyond the control of Oracle Database.</p>
<p>The IEEE 754 standard defines these classes of special values:</p>
<ul>
<li>
<p>Zero</p>
</li>
<li>
<p>Subnormal</p>
</li>
<li>
<p>Normal</p>
</li>
<li>
<p>Infinity</p>
</li>
<li>
<p><code dir="ltr">NaN</code></p>
</li>
</ul>
<p>The values in each class in the preceding list are larger than the values in the classes that precede it in the list (ignoring signs), except <code dir="ltr">NaN</code>. <code dir="ltr">NaN</code> is unordered with other classes of special values and with itself.</p>
<p>In Oracle Database:</p>
<ul>
<li>
<p>All <code dir="ltr">NaN</code>s are quiet.</p>
</li>
<li>
<p>Any non-<code dir="ltr">NaN</code> value &lt; <code dir="ltr">NaN</code></p>
</li>
<li>
<p>Any <code dir="ltr">NaN</code> == any other <code dir="ltr">NaN</code></p>
</li>
<li>
<p>All <code dir="ltr">NaN</code>s are converted to the same bit pattern.</p>
</li>
<li>
<p>-0 is converted to +0.</p>
</li>
<li>
<p><a id="sthref76"></a><a id="sthref77"></a>IEEE 754 exceptions are not raised.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF52113" href="../../server.112/e41084/conditions003.htm#SQLRF52113"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about floating-point conditions, which let you determine whether an expression is infinite or is the undefined result of an operation (is not a number or <code dir="ltr">NaN</code>).</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABEBBFG"></a>
<div id="ADFNS171" class="sect2">
<h3 class="sect2">Comparison Operators for Native Floating-Point Data Types</h3>
<p><a id="sthref78"></a><a id="sthref79"></a><a id="sthref80"></a><a id="sthref81"></a><a id="sthref82"></a>Oracle Database defines these comparison operators for native floating-point data types:</p>
<ul>
<li>
<p>Equal to</p>
</li>
<li>
<p>Not equal to</p>
</li>
<li>
<p>Greater than</p>
</li>
<li>
<p>Greater than or equal to</p>
</li>
<li>
<p>Less than</p>
</li>
<li>
<p>Less than or equal to</p>
</li>
<li>
<p>Unordered</p>
</li>
</ul>
<p>Comparisons ignore the sign of zero (<code dir="ltr">-0</code> equals <code dir="ltr">+0</code>).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#g1604808">"Special Values for Native Floating-Point Formats"</a> for more information about comparison results, ordering, and other actions of special values</div>
</div>
<!-- class="sect2" -->
<a id="BABBCCJF"></a>
<div id="ADFNS172" class="sect2">
<h3 class="sect2">Arithmetic Operations with Native Floating-Point Data Types</h3>
<p><a id="sthref83"></a><a id="sthref84"></a>Oracle Database defines these arithmetic operators for native floating-point data types:</p>
<ul>
<li>
<p>Multiplication</p>
</li>
<li>
<p>Division</p>
</li>
<li>
<p>Addition</p>
</li>
<li>
<p>Subtraction</p>
</li>
<li>
<p>Remainder</p>
</li>
<li>
<p>Square root</p>
</li>
</ul>
<p>You can define the mode used to round the result of the operation. Exceptions can be raised when operations are performed. Exceptions can also be disabled.</p>
<p>Formerly, Java required floating-point arithmetic to be exactly reproducible. IEEE 754 does not have this requirement. Therefore, results of operations (including arithmetic operations) can be delivered to a destination that uses a range greater than the range that the operands of the operation use.</p>
<p>You can compute the result of a double-precision multiplication at an extended double-precision destination, but the result must be rounded as if the destination were single-precision or double-precision. The range of the result (that is, the number of bits used for the exponent) can use the range supported by the wider (extended double-precision) destination; however, this might cause a double-rounding error in which the least significant bit of the result is incorrect.</p>
<p>This situation can occur only for double-precision multiplication and division on hardware that implements the <a id="sthref85"></a>IA-32 and IA-64 instruction set architecture. Therefore, except for this case, arithmetic for these data types is reproducible across platforms. When the result of a computation is <code dir="ltr">NaN</code>, all platforms produce a value for which <code dir="ltr">IS&nbsp;NAN</code> is true. However, all platforms do not have to use the same bit pattern.</p>
</div>
<!-- class="sect2" -->
<a id="BABJAEGB"></a>
<div id="ADFNS173" class="sect2">
<h3 class="sect2">Conversion Functions for Floating-Point Data Types</h3>
<p><a id="sthref86"></a><a id="sthref87"></a>Oracle Database defines functions that convert between floating-point and other data types, including string formats that use decimal precision (but precision might be lost during the conversion). For example:</p>
<ul>
<li>
<p><a class="olink SQLRF06309" href="../../server.112/e41084/functions196.htm#SQLRF06309"><code dir="ltr">TO_BINARY_DOUBLE</code></a>, described in <a class="olink SQLRF06309" href="../../server.112/e41084/functions196.htm#SQLRF06309"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</li>
<li>
<p><a class="olink SQLRF06310" href="../../server.112/e41084/functions197.htm#SQLRF06310"><code dir="ltr">TO_BINARY_FLOAT</code></a>, described in <a class="olink SQLRF06310" href="../../server.112/e41084/functions197.htm#SQLRF06310"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</li>
<li>
<p><a class="olink SQLRF06130" href="../../server.112/e41084/functions201.htm#SQLRF06130"><code dir="ltr">TO_CHAR</code></a>, described in <a class="olink SQLRF06128" href="../../server.112/e41084/functions199.htm#SQLRF06128"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</li>
<li>
<p><a class="olink SQLRF06140" href="../../server.112/e41084/functions211.htm#SQLRF06140"><code dir="ltr">TO_NUMBER</code></a>, described in <a class="olink SQLRF06130" href="../../server.112/e41084/functions201.htm#SQLRF06130"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</li>
</ul>
<p>Oracle Database can raise exceptions during conversion. The <a id="sthref88"></a><a id="sthref89"></a>IEEE 754 standard defines these exceptions:</p>
<ul>
<li>
<p>Invalid</p>
</li>
<li>
<p>Inexact</p>
</li>
<li>
<p>Divide by zero</p>
</li>
<li>
<p>Underflow</p>
</li>
<li>
<p>Overflow</p>
</li>
</ul>
<p>Oracle Database does not raise these exceptions for native floating-point data types. Generally, operations that raise exceptions produce the values described in <a href="#BABCHEII">Table 1-6</a>.</p>
<div id="ADFNS174" class="tblformal">
<p class="titleintable"><a id="sthref90"></a><a id="BABCHEII"></a>Table 1-6 Values Resulting from Exceptions</p>
<table class="cellalignment1278" title="Values Resulting from Exceptions" summary="This table summarizes the values that can result from exceptions." dir="ltr">
<thead>
<tr class="cellalignment1267">
<th class="cellalignment1274" id="r1c1-t19">Exception</th>
<th class="cellalignment1274" id="r1c2-t19">Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r2c1-t19" headers="r1c1-t19">
<p>Underflow</p>
</td>
<td class="cellalignment1275" headers="r2c1-t19 r1c2-t19">
<p><code dir="ltr">0</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r3c1-t19" headers="r1c1-t19">
<p>Overflow</p>
</td>
<td class="cellalignment1275" headers="r3c1-t19 r1c2-t19">
<p><code dir="ltr">-INF</code>, <code dir="ltr">+INF</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r4c1-t19" headers="r1c1-t19">
<p>Invalid Operation</p>
</td>
<td class="cellalignment1275" headers="r4c1-t19 r1c2-t19">
<p><code dir="ltr">NaN</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r5c1-t19" headers="r1c1-t19">
<p>Divide by Zero</p>
</td>
<td class="cellalignment1275" headers="r5c1-t19 r1c2-t19">
<p><code dir="ltr">-INF</code>, <code dir="ltr">+INF</code>, <code dir="ltr">NaN</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r6c1-t19" headers="r1c1-t19">
<p>Inexact</p>
</td>
<td class="cellalignment1275" headers="r6c1-t19 r1c2-t19">
<p>Any value &ndash; rounding was performed</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="BABJJBAD"></a>
<div id="ADFNS175" class="sect2">
<h3 class="sect2">Client Interfaces for Native Floating-Point Data Types</h3>
<p><a id="sthref91"></a>Oracle Database supports native floating-point data types in these client interfaces:</p>
<ul>
<li>
<p>SQL</p>
</li>
<li>
<p>PL/SQL</p>
</li>
<li>
<p>Oracle Call Interface (OCI)</p>
</li>
<li>
<p>Oracle C++ Call Interface (OCCI)</p>
</li>
<li>
<p>Pro*C/C++</p>
</li>
<li>
<p>JDBC</p>
</li>
</ul>
<p class="subhead2"><a id="sthref92"></a>Topics:</p>
<ul>
<li>
<p><a href="#g1605789">OCI Native Floating-Point Data Types SQLT_BFLOAT and SQLT_BDOUBLE</a></p>
</li>
<li>
<p><a href="#g1605861">Native Floating-Point Data Types Supported in ADTs</a></p>
</li>
<li>
<p><a href="#g1605887">Pro*C/C++ Support for Native Floating-Point Data Types</a></p>
</li>
</ul>
<a id="g1605789"></a>
<div id="ADFNS176" class="sect3">
<h4 class="sect3">OCI Native Floating-Point Data Types SQLT_BFLOAT and SQLT_BDOUBLE</h4>
<p>The OCI API implements the <a id="sthref93"></a>IEEE 754 single- and double-precision native floating-point data types with the data types <a id="sthref94"></a><code dir="ltr">SQLT_BFLOAT</code> and <a id="sthref95"></a><code dir="ltr">SQLT_BDOUBLE</code>, respectively. Conversions between these types and the SQL types <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> are exact on platforms that implement the IEEE 754 standard for the C data types <code dir="ltr">FLOAT</code> and <code dir="ltr">DOUBLE</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNOCI031" href="../../appdev.112/e10646/oci03typ.htm#LNOCI031"><span class="italic">Oracle Call Interface Programmer's Guide</span></a></div>
</div>
<!-- class="sect3" -->
<a id="g1605861"></a>
<div id="ADFNS177" class="sect3">
<h4 class="sect3">Native Floating-Point Data Types Supported in ADTs</h4>
<p>Oracle Database supports the SQL data types <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> as attributes of ADTs.</p>
</div>
<!-- class="sect3" -->
<a id="g1605887"></a>
<div id="ADFNS178" class="sect3">
<h4 class="sect3">Pro*C/C++ Support for Native Floating-Point Data Types</h4>
<p><a id="sthref96"></a>Pro*C/C++ supports the native <code dir="ltr">FLOAT</code> and <code dir="ltr">DOUBLE</code> data types using the column data types <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code>. You can use these data types in the same way that Oracle Database <code dir="ltr">NUMBER</code> data type is used. You can bind <code dir="ltr">FLOAT</code> and <code dir="ltr">DOUBLE</code> to <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code>, respectively, by setting the Pro*C/C++ precompiler command line option <code dir="ltr">NATIVE_TYPES</code> to <code dir="ltr">Y</code> (yes) when you compile your application.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABJJCAI"></a>
<div id="ADFNS00304" class="sect1">
<h2 class="sect1">Representing Date and Time Data</h2>
<p>Oracle Database stores date and time (<a id="sthref97"></a><a id="sthref98"></a><span class="bold">datetime</span>) data in its own internal format, in 7-byte fields that correspond to century, year, month, day, hour, minute, and second.</p>
<p><a href="#BABDBGIE">Table 1-7</a> summarizes the SQL datetime data types. For more information about these data types, see <a class="olink SQLRF00200" href="../../server.112/e41084/sql_elements001.htm#SQLRF00200"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref99"></a><a id="BABDBGIE"></a>Table 1-7 SQL Datetime Data Types</p>
<table class="cellalignment1278" title="SQL Datetime Data Types" summary="This table lists and briefly describes the SQL data types that store date and time data." dir="ltr">
<thead>
<tr class="cellalignment1267">
<th class="cellalignment1274" id="r1c1-t21">Date Type</th>
<th class="cellalignment1274" id="r1c2-t21">Usage</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r2c1-t21" headers="r1c1-t21">
<p><a class="olink SQLRF00202" href="../../server.112/e41084/sql_elements001.htm#SQLRF00202"><code dir="ltr">DATE</code></a></p>
</td>
<td class="cellalignment1275" headers="r2c1-t21 r1c2-t21">
<p>Use to store point-in-time (datetime) values in a table&mdash;for example, dates of jobs.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r3c1-t21" headers="r1c1-t21">
<p><a class="olink SQLRF00203" href="../../server.112/e41084/sql_elements001.htm#SQLRF00203"><code dir="ltr">TIMESTAMP</code></a></p>
</td>
<td class="cellalignment1275" headers="r3c1-t21 r1c2-t21">
<p>Use to store datetime values that are precise to fractional seconds&mdash;for example, times of events that must be compared to determine the order in which they occurred.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r4c1-t21" headers="r1c1-t21">
<p><a class="olink SQLRF00204" href="../../server.112/e41084/sql_elements001.htm#SQLRF00204"><code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code></a></p>
</td>
<td class="cellalignment1275" headers="r4c1-t21 r1c2-t21">
<p>Use to store datetime values that must be gathered or coordinated across geographic regions.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r5c1-t21" headers="r1c1-t21">
<p><a class="olink SQLRF00205" href="../../server.112/e41084/sql_elements001.htm#SQLRF00205"><code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code></a></p>
</td>
<td class="cellalignment1275" headers="r5c1-t21 r1c2-t21">
<p>Use to store datetime values when the time zone is insignificant&mdash;for example, in an application that schedules teleconferences, where participants each see the start and end times for their own time zone.</p>
<p>Appropriate for two-tier applications in which you want to display dates and times that use the time zone of the client system. Usually inappropriate for three-tier applications, because data displayed in a web browser is formatted according to the time zone of the web server, not the time zone of the browser. The web server is the database client, so its local time is used.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r6c1-t21" headers="r1c1-t21">
<p><a class="olink SQLRF00206" href="../../server.112/e41084/sql_elements001.htm#SQLRF00206"><code dir="ltr">INTERVAL</code> <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code></a></p>
</td>
<td class="cellalignment1275" headers="r6c1-t21 r1c2-t21">
<p>Use to store the difference between two datetime values, where only the year and month are significant&mdash;for example, to set a reminder for a date 18 months in the future, or check whether 6 months have elapsed since a particular date.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r7c1-t21" headers="r1c1-t21">
<p><a class="olink SQLRF00207" href="../../server.112/e41084/sql_elements001.htm#SQLRF00207"><code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code></a></p>
</td>
<td class="cellalignment1275" headers="r7c1-t21 r1c2-t21">
<p>Use to store the precise difference between two datetime values&mdash;for example, to set a reminder for a time 36 hours in the future or to record the time between the start and end of a race. To represent long spans of time with high precision, use a large number of days.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="sthref100"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABECDEC">Displaying Current Date and Time</a></p>
</li>
<li>
<p><a href="#BABHDJBH">Displaying and Inserting Dates in Nondefault Formats</a></p>
</li>
<li>
<p><a href="#BABGCHCC">Displaying and Inserting Times in Nondefault Formats</a></p>
</li>
<li>
<p><a href="#BABBDBFI">Arithmetic Operations with Datetime Data Types</a></p>
</li>
<li>
<p><a href="#BABBHEGE">Conversion Functions for Datetime Data Types</a></p>
</li>
<li>
<p><a href="#BABFCHAJ">Importing, Exporting, and Comparing Datetime Types</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNCPP20210" href="../../appdev.112/e10764/types.htm#LNCPP20210"><span class="italic">Oracle Call Interface Programmer's Guide</span></a> for more information about Oracle Database internal date types</div>
<a id="BABECDEC"></a>
<div id="ADFNS180" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Displaying Current Date and Time</h3>
<p>The simplest way to display the <a id="sthref101"></a><a id="sthref102"></a><a id="sthref103"></a>current date and time is:</p>
<pre dir="ltr">
SELECT <a id="sthref104"></a>SYSDATE FROM DUAL
</pre>
<p>The preceding command displays the current date and time in the <a id="sthref105"></a>default date format, which depends on the initialization parameter <a id="sthref106"></a><a id="sthref107"></a><code dir="ltr">NLS_DATE_FORMAT</code>.</p>
<p>The standard Oracle Database default date format is <code dir="ltr">DD-MON-RR</code>. The <a id="sthref108"></a><code dir="ltr">RR</code> datetime format element lets you store 20th century dates in the 21st century by specifying only the last two digits of the year. For example, in the datetime format <code dir="ltr">DD-MON-YY</code>, <code dir="ltr">13-NOV-54</code> refers to the year 1954 in a query issued between 1950 and 2049, but to the year 2054 in a query issued between 2050 and 2099.</p>
<p>To display <code dir="ltr">SYSDATE</code> in a nondefault format, use the <code dir="ltr">TO_CHAR</code> function with a datetime format model.</p>
<p><a href="#BABHFGBE">Example 1-1</a> uses <code dir="ltr">TO_CHAR</code> with a format model to display <code dir="ltr">SYSDATE</code> in a nondefault format, which includes the qualifier BC or AD. (By default, <code dir="ltr">SYSDATE</code> is displayed without this qualifier.)</p>
<div id="ADFNS181" class="example">
<p class="titleinexample"><a id="BABHFGBE"></a>Example 1-1 Displaying Current Date and Time in Nondefault Format</p>
<pre dir="ltr">
SELECT <span class="bold">TO_CHAR(SYSDATE, 'DD-MON-YYYY BC')</span> NOW FROM DUAL;
 
</pre>
<p>Result:</p>
<pre dir="ltr">
NOW
-----------------------
18-MAR-2009 AD
 
1 row selected.
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When testing code that uses <code dir="ltr">SYSDATE</code>, it can be helpful to set <code dir="ltr">SYSDATE</code> to a constant. Do this with the initialization parameter <a id="sthref109"></a><a id="sthref110"></a><code dir="ltr">FIXED_DATE</code>, described in <a class="olink REFRN10062" href="../../server.112/e40402/initparams095.htm#REFRN10062"><span class="italic">Oracle Database Reference</span></a>.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF06124" href="../../server.112/e41084/functions191.htm#SQLRF06124"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code dir="ltr">SYSDATE</code></p>
</li>
<li>
<p><a class="olink NLSPG204" href="../../server.112/e10729/ch3globenv.htm#NLSPG204"><span class="italic">Oracle Database Globalization Support Guide</span></a> for information about <code dir="ltr">NLS_DATE_FORMAT</code></p>
</li>
<li>
<p><a class="olink SQLRF06129" href="../../server.112/e41084/functions200.htm#SQLRF06129"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code dir="ltr">TO_CHAR</code></p>
</li>
<li>
<p><a class="olink SQLRF00212" href="../../server.112/e41084/sql_elements004.htm#SQLRF00212"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about datetime format models</p>
</li>
<li>
<p><a class="olink SQLRF00215" href="../../server.112/e41084/sql_elements004.htm#SQLRF00215"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code dir="ltr">RR</code> datetime format element</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABHDJBH"></a>
<div id="ADFNS182" class="sect2">
<h3 class="sect2">Displaying and Inserting Dates in Nondefault Formats</h3>
<p>Although Oracle Database always stores dates in the default date format (set by the initialization parameter <code dir="ltr">NLS_DATE_FORMAT</code>), you can <a id="sthref111"></a>display and <a id="sthref112"></a>insert dates in nondefault formats by using the <code dir="ltr">TO_CHAR</code> and <code dir="ltr">TO_DATE</code> functions, respectively, with datetime format models.</p>
<p><a href="#BABICJIB">Example 1-2</a> creates a table with a <code dir="ltr">DATE</code> column and inserts into it a date specified in a nondefault format. The date is stored in the default format, as the first <code dir="ltr">SELECT</code> statement shows. The second <code dir="ltr">SELECT</code> statement displays the date in a nondefault format.</p>
<div id="ADFNS183" class="example">
<p class="titleinexample"><a id="BABICJIB"></a>Example 1-2 Inserting and Displaying Date in Nondefault Formats</p>
<pre dir="ltr">
DROP TABLE dates;
CREATE TABLE dates (d DATE);
 
INSERT INTO dates VALUES (<span class="bold">TO_DATE('OCT 27, 1998', 'MON DD, YYYY')</span>);
 
SELECT d FROM dates;
 
</pre>
<p>Result:</p>
<pre dir="ltr">
D
---------
<span class="bold">27-OCT-98</span>
 
1 row selected.

SELECT <span class="bold">TO_CHAR(d, 'YYYY-MON-DD')</span> D FROM dates;
</pre>
<p>Result:</p>
<pre dir="ltr">
D
--------------------
<span class="bold">1998-OCT-27</span>
 
1 row selected.
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Caution:</p>
Be careful when using the <a id="sthref113"></a><code dir="ltr">YY</code> datetime format element, which indicates the year in the current century. For example, in the 21st century, the format <code dir="ltr">DD-MON-YY</code>, <code dir="ltr">31-DEC-92</code> is December 31, 2092 (not December 31, 1992, as you might expect). To store 20th century dates in the 21st century by specifying only the last two digits of the year, use the <code dir="ltr">RR</code> datetime format element (the default).</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink NLSPG204" href="../../server.112/e10729/ch3globenv.htm#NLSPG204"><span class="italic">Oracle Database Globalization Support Guide</span></a> for information about <code dir="ltr">NLS_DATE_FORMAT</code></p>
</li>
<li>
<p><a class="olink SQLRF06129" href="../../server.112/e41084/functions200.htm#SQLRF06129"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code dir="ltr">TO_CHAR</code></p>
</li>
<li>
<p><a class="olink SQLRF06132" href="../../server.112/e41084/functions203.htm#SQLRF06132"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code dir="ltr">TO_DATE</code></p>
</li>
<li>
<p><a class="olink SQLRF00212" href="../../server.112/e41084/sql_elements004.htm#SQLRF00212"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about datetime format models</p>
</li>
<li>
<p><a class="olink SQLRF00215" href="../../server.112/e41084/sql_elements004.htm#SQLRF00215"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code dir="ltr">RR</code> datetime format element</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABGCHCC"></a>
<div id="ADFNS184" class="sect2">
<h3 class="sect2">Displaying and Inserting Times in Nondefault Formats</h3>
<p>Although Oracle Database always stores times in the <a id="sthref114"></a>24-hour format <code dir="ltr">HH24</code>:<code dir="ltr">MI</code>:<code dir="ltr">SS</code>, you can <a id="sthref115"></a>display and <a id="sthref116"></a>insert times in nondefault formats by using the <code dir="ltr">TO_CHAR</code> and <code dir="ltr">TO_DATE</code> functions, respectively, with datetime format models.</p>
<p>In a <code dir="ltr">DATE</code> column:</p>
<ul>
<li>
<p>The <a id="sthref117"></a>default time is 12:00:00 A.M. (midnight).</p>
<p>The default time applies to any value in the column that has no time portion, either because none was specified or because the value was truncated.</p>
</li>
<li>
<p>The default <a id="sthref118"></a>date is the first day of the current month.</p>
<p>The default date applies to any value in the column that has no date portion, because none was specified.</p>
</li>
</ul>
<p><a href="#BABBHIGI">Example 1-3</a> creates a table with a <code dir="ltr">DATE</code> column and inserts into it three dates specified in nondefault formats&mdash;one with both date and time portions, one with no time portion, and one with no date portion. The first <code dir="ltr">SELECT</code> statement shows the current date. The second <code dir="ltr">SELECT</code> statement displays the three dates in a nondefault format that includes both date and time portions.</p>
<div id="ADFNS185" class="example">
<p class="titleinexample"><a id="BABBHIGI"></a>Example 1-3 Inserting and Displaying Dates and Times in Nondefault Formats</p>
<pre dir="ltr">
DROP TABLE birthdays;
CREATE TABLE birthdays (name VARCHAR2(20), day DATE);
 
INSERT INTO birthdays (name, day)
VALUES ('Annie',
        <span class="bold">TO_DATE('13-NOV-92 10:56 A.M.','DD-MON-RR HH:MI A.M.')</span>
       );
 
INSERT INTO birthdays (name, day)
VALUES ('Bobby',
        <span class="bold">TO_DATE('5-APR-02','DD-MON-RR')</span>
       );
 
INSERT INTO birthdays (name, day)
VALUES ('Cindy',
        <span class="bold">TO_DATE('8:25 P.M.','HH:MI A.M.')</span>
       );
 
</pre>
<p>Display current date:</p>
<pre dir="ltr">
SELECT SYSDATE FROM DUAL;
 
</pre>
<p>Result:</p>
<pre dir="ltr">
SYSDATE
---------
<span class="bold">05-NOV-10</span>
 
1 row selected.
</pre>
<p>Display both date and time portions of stored datetime values:</p>
<pre dir="ltr">
SELECT name,
       <span class="bold">TO_CHAR(day, 'Mon DD, RRRR')</span> DAY,
       <span class="bold">TO_CHAR(day, 'HH:MI A.M.')</span> TIME
FROM birthdays;
 
</pre>
<p>Result:</p>
<pre dir="ltr">
NAME                 DAY                   TIME
-------------------- --------------------- ----------
Annie                <span class="bold">Nov 13, 1992          10:56 A.M.</span>
Bobby                <span class="bold">Apr 05, 2002          12:00 A.M.</span>
Cindy                <span class="bold">Nov 01, 2010          08:25 P.M.</span>
 
3 rows selected.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABBDBFI"></a>
<div id="ADFNS202" class="sect2">
<h3 class="sect2">Arithmetic Operations with Datetime Data Types</h3>
<p><a id="sthref119"></a><a id="sthref120"></a>You can perform arithmetic operations on datetime values. The results of such operations are determined by the rules in <a class="olink SQLRF00208" href="../../server.112/e41084/sql_elements001.htm#SQLRF00208"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>SQL has many datetime functions that you can use in datetime expressions. For example, the function <code dir="ltr">ADD_MONTHS</code> returns the date that is a specified number of months from a specified date. For the complete list of datetime functions, see <a class="olink SQLRF20033" href="../../server.112/e41084/functions002.htm#SQLRF20033"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABBHEGE"></a>
<div id="ADFNS203" class="sect2">
<h3 class="sect2">Conversion Functions for Datetime Data Types</h3>
<p><a id="sthref121"></a><a id="sthref122"></a><a href="#BABBDBEI">Table 1-8</a> summarizes the <a id="sthref123"></a>SQL functions that convert to or from datetime data types.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref124"></a><a id="BABBDBEI"></a>Table 1-8 SQL Conversion Functions for Datetime Data Types</p>
<table class="cellalignment1278" title="SQL Conversion Functions for Datetime Data Types" summary="This table summarizes the SQL functions that convert to or from datetime data types. The first column lists the functions by name, in alphabetical order, and each name is a link to the description of the function in SQLRF. The second column gives the data type of the value to be converted. The third column gives the data type of the value that the function returns." dir="ltr">
<thead>
<tr class="cellalignment1267">
<th class="cellalignment1274" id="r1c1-t27">Function</th>
<th class="cellalignment1274" id="r1c2-t27">Converts ...</th>
<th class="cellalignment1274" id="r1c3-t27">To ...</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r2c1-t27" headers="r1c1-t27">
<p><a class="olink SQLRF00682" href="../../server.112/e41084/functions117.htm#SQLRF00682"><code dir="ltr">NUMTODSINTERVAL</code></a></p>
</td>
<td class="cellalignment1275" headers="r2c1-t27 r1c2-t27">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment1275" headers="r2c1-t27 r1c3-t27">
<p><code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r3c1-t27" headers="r1c1-t27">
<p><a class="olink SQLRF00683" href="../../server.112/e41084/functions118.htm#SQLRF00683"><code dir="ltr">NUMTOYMINTERVAL</code></a></p>
</td>
<td class="cellalignment1275" headers="r3c1-t27 r1c2-t27">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment1275" headers="r3c1-t27 r1c3-t27">
<p><code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r4c1-t27" headers="r1c1-t27">
<p><a class="olink SQLRF06129" href="../../server.112/e41084/functions200.htm#SQLRF06129"><code dir="ltr">TO_CHAR</code></a></p>
</td>
<td class="cellalignment1275" headers="r4c1-t27 r1c2-t27">
<p><code dir="ltr">DATE</code></p>
<p><code dir="ltr">TIMESTAMP</code></p>
<p><code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code></p>
<p><code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code></p>
<p><code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code></p>
<p><code dir="ltr">INTERVAL</code> <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code></p>
</td>
<td class="cellalignment1275" headers="r4c1-t27 r1c3-t27">
<p><code dir="ltr">VARCHAR2</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r5c1-t27" headers="r1c1-t27">
<p><a class="olink SQLRF06132" href="../../server.112/e41084/functions203.htm#SQLRF06132"><code dir="ltr">TO_DATE</code></a></p>
</td>
<td class="cellalignment1275" headers="r5c1-t27 r1c2-t27">
<p><code dir="ltr">CHAR</code></p>
<p><code dir="ltr">VARCHAR2</code></p>
<p><code dir="ltr">NCHAR</code></p>
<p><code dir="ltr">NVARCHAR2</code></p>
</td>
<td class="cellalignment1275" headers="r5c1-t27 r1c3-t27">
<p><code dir="ltr">DATE</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r6c1-t27" headers="r1c1-t27">
<p><a class="olink SQLRF06133" href="../../server.112/e41084/functions204.htm#SQLRF06133"><code dir="ltr">TO_DSINTERVAL</code></a></p>
</td>
<td class="cellalignment1275" headers="r6c1-t27 r1c2-t27">
<p><code dir="ltr">CHAR</code></p>
<p><code dir="ltr">VARCHAR2</code></p>
<p><code dir="ltr">NCHAR</code></p>
<p><code dir="ltr">NVARCHAR2</code></p>
</td>
<td class="cellalignment1275" headers="r6c1-t27 r1c3-t27">
<p><code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r7c1-t27" headers="r1c1-t27">
<p><a class="olink SQLRF06142" href="../../server.112/e41084/functions213.htm#SQLRF06142"><code dir="ltr">TO_TIMESTAMP</code></a></p>
</td>
<td class="cellalignment1275" headers="r7c1-t27 r1c2-t27">
<p><code dir="ltr">CHAR</code></p>
<p><code dir="ltr">VARCHAR2</code></p>
<p><code dir="ltr">NCHAR</code></p>
<p><code dir="ltr">NVARCHAR2</code></p>
</td>
<td class="cellalignment1275" headers="r7c1-t27 r1c3-t27">
<p><code dir="ltr">TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r8c1-t27" headers="r1c1-t27">
<p><a class="olink SQLRF06143" href="../../server.112/e41084/functions214.htm#SQLRF06143"><code dir="ltr">TO_TIMESTAMP_TZ</code></a></p>
</td>
<td class="cellalignment1275" headers="r8c1-t27 r1c2-t27">
<p><code dir="ltr">CHAR</code></p>
<p><code dir="ltr">VARCHAR2</code></p>
<p><code dir="ltr">NCHAR</code></p>
<p><code dir="ltr">NVARCHAR2</code></p>
</td>
<td class="cellalignment1275" headers="r8c1-t27 r1c3-t27">
<p><code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r9c1-t27" headers="r1c1-t27">
<p><a class="olink SQLRF06144" href="../../server.112/e41084/functions215.htm#SQLRF06144"><code dir="ltr">TO_YMINTERVAL</code></a></p>
</td>
<td class="cellalignment1275" headers="r9c1-t27 r1c2-t27">
<p><code dir="ltr">CHAR</code></p>
<p><code dir="ltr">VARCHAR2</code></p>
<p><code dir="ltr">NCHAR</code></p>
<p><code dir="ltr">NVARCHAR2</code></p>
</td>
<td class="cellalignment1275" headers="r9c1-t27 r1c3-t27">
<p><code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="BABFCHAJ"></a>
<div id="ADFNS204" class="sect2">
<h3 class="sect2">Importing, Exporting, and Comparing Datetime Types</h3>
<p>You can <a id="sthref125"></a>import, export, and compare <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> and <code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code> values without worrying about time zone offsets, because the database stores these values in normalized format.</p>
<p>When importing, exporting, and comparing <code dir="ltr">DATE</code> and <code dir="ltr">TIMESTAMP</code> values, you must adjust them to account for any time zone differences between source and target databases, because the database does not store their time zones.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABECADE"></a>
<div id="ADFNS00305" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Representing Specialized Data</h2>
<p class="subhead2"><a id="sthref126"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABCEJHF">Representing Geographic Data</a></p>
</li>
<li>
<p><a href="#BABJBEAF">Representing Multimedia Data</a></p>
</li>
<li>
<p><a href="#BABBGGGA">Representing Large Amounts of Data</a></p>
</li>
<li>
<p><a href="#BABFAAGA">Representing Searchable Text</a></p>
</li>
<li>
<p><a href="#BABFFECA">Representing XML Data</a></p>
</li>
<li>
<p><a href="#BABBIIFB">Representing Dynamically Typed Data</a></p>
</li>
<li>
<p><a href="#BABCHDCD">Representing ANSI, DB2, and SQL/DS Data</a></p>
</li>
</ul>
<a id="BABCEJHF"></a>
<div id="ADFNS205" class="sect2">
<h3 class="sect2">Representing Geographic Data</h3>
<p>To represent <a id="sthref127"></a><a id="sthref128"></a>Geographic Information System (GIS) or <a id="sthref129"></a><a id="sthref130"></a>spatial data in the database, you can use Oracle Spatial features, including the type <code dir="ltr">MDSYS</code>.<code dir="ltr">SDO_GEOMETRY</code>. You can store the data in the database by using either an object-relational or a relational model. You can use a set of PL/SQL packages to query and manipulate the data.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SPATL020" href="../../appdev.112/e11830/sdo_objrelschema.htm#SPATL020"><span class="italic">Oracle Spatial Developer's Guide</span></a> for information about Oracle Spatial features</div>
</div>
<!-- class="sect2" -->
<a id="BABJBEAF"></a>
<div id="ADFNS206" class="sect2">
<h3 class="sect2">Representing Multimedia Data</h3>
<p><a id="sthref131"></a><a id="sthref132"></a><a id="sthref133"></a>Oracle Multimedia enables Oracle Database to store, manage, and retrieve images, audio, video, or other heterogeneous media data in an integrated fashion with other enterprise information. Oracle Multimedia extends Oracle Database reliability, availability, and data management to multimedia content in traditional, Internet, electronic commerce, and media-rich applications.</p>
<p>Whether you store such multimedia data inside the database as <code dir="ltr">BLOB</code> or <code dir="ltr">BFILE</code> values, or store it externally on a web server or other kind of server, you can use Oracle Multimedia to access the data using either an object-relational or a relational model, and manipulate and query the data using a set of ADTs.</p>
<p>Oracle Multimedia provides the <code dir="ltr">ORDAudio</code>, <code dir="ltr">ORDDoc</code>, <code dir="ltr">ORDImage</code>, <code dir="ltr">ORDImageSignature</code>, <code dir="ltr">ORDVideo</code>, and <code dir="ltr">SI_StillImage</code> ADTs (including methods) for these purposes:</p>
<ul>
<li>
<p>Extracting metadata and attributes from multimedia data</p>
</li>
<li>
<p>Retrieving and managing multimedia data from Oracle Multimedia, web servers, file systems, and other servers</p>
</li>
<li>
<p>Performing manipulation operations on image data</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink AIVUG" href="../e10776/toc.htm"><span class="italic">Oracle Multimedia Reference</span></a> for information about Oracle Multimedia</div>
</div>
<!-- class="sect2" -->
<a id="BABBGGGA"></a>
<div id="ADFNS207" class="sect2">
<h3 class="sect2">Representing Large Amounts of Data</h3>
<p>For representing <a id="sthref134"></a>large amounts of data, Oracle Database provides:</p>
<ul>
<li>
<p><a href="#BABBEIHB">Large Objects (LOBs)</a></p>
</li>
<li>
<p><a href="#BABDBGJA">LONG and LONG RAW Data Types</a> (for backward compatibility)</p>
</li>
</ul>
<a id="BABBEIHB"></a>
<div id="ADFNS99867" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Large Objects (LOBs)</h4>
<p><a id="sthref135"></a><span class="bold">Large Objects (LOBs)</span> are data types that are designed to store large amounts of data (the maximum size of a LOB depends on how your database is configured). Storing data in LOBs enables you to access and manipulate the data efficiently in your application.</p>
<p><a href="#BABBFEJI">Table 1-9</a> summarizes the LOBs.</p>
<div id="ADFNS208" class="tblformal">
<p class="titleintable"><a id="sthref136"></a><a id="BABBFEJI"></a>Table 1-9 Large Objects (LOBs)</p>
<table class="cellalignment1278" title=" Large Objects (LOBs)" summary="This table summarizes large object datatypes." dir="ltr">
<thead>
<tr class="cellalignment1267">
<th class="cellalignment1274" id="r1c1-t30">Data Type</th>
<th class="cellalignment1274" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r2c1-t30" headers="r1c1-t30">
<p><a class="olink SQLRF50997" href="../../server.112/e41084/sql_elements001.htm#SQLRF50997"></a><a id="sthref137"></a>BLOB</p>
</td>
<td class="cellalignment1275" headers="r2c1-t30 r1c2-t30">
<p><a id="sthref138"></a><span class="bold">Binary large object</span></p>
<p>Stores any kind of data in binary format.</p>
<p>Typically used for multimedia data such as images, audio, and video.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r3c1-t30" headers="r1c1-t30">
<p><a class="olink SQLRF20041" href="../../server.112/e41084/sql_elements001.htm#SQLRF20041"></a><a id="sthref139"></a>CLOB</p>
</td>
<td class="cellalignment1275" headers="r3c1-t30 r1c2-t30">
<p><a id="sthref140"></a><span class="bold">Character large object</span></p>
<p>Stores string data in the database character set format.</p>
<p>Used for large strings or documents that use the database character set exclusively.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r4c1-t30" headers="r1c1-t30">
<p><a class="olink SQLRF20042" href="../../server.112/e41084/sql_elements001.htm#SQLRF20042"></a><a id="sthref141"></a>NCLOB</p>
</td>
<td class="cellalignment1275" headers="r4c1-t30 r1c2-t30">
<p><a id="sthref142"></a><span class="bold">National character large object</span></p>
<p>Stores string data in National Character Set format.</p>
<p>Used for large strings or documents in the National Character Set.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r5c1-t30" headers="r1c1-t30">
<p><a class="olink SQLRF50996" href="../../server.112/e41084/sql_elements001.htm#SQLRF50996"></a><a id="sthref143"></a>BFILE</p>
</td>
<td class="cellalignment1275" headers="r5c1-t30 r1c2-t30">
<p><a id="sthref144"></a><span class="bold">External large object</span></p>
<p>Stores a binary file outside the database in the host operating system file system. Applications have read-only access to <code dir="ltr">BFILE</code>s.</p>
<p>Used for static data that applications do not manipulate, such as image data.</p>
<p>Any kind of data (that is, any operating system file) can be stored in a <code dir="ltr">BFILE</code>. For example, you can store character data in a <code dir="ltr">BFILE</code> and then load the <code dir="ltr">BFILE</code> data into a <code dir="ltr">CLOB</code>, specifying the character set when loading.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>An instance of type <code dir="ltr">BLOB</code>, <code dir="ltr">CLOB</code>, or <code dir="ltr">NCLOB</code> can be either <a id="sthref145"></a><span class="bold">temporary</span> (declared in the scope of your application) or <a id="sthref146"></a><span class="bold">persistent</span> (created and stored in the database).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF50994" href="../../server.112/e41084/sql_elements001.htm#SQLRF50994"><span class="italic">Oracle Database SQL Language Reference</span></a> for additional general information about LOBs</p>
</li>
<li>
<p><a class="olink ADLOB001" href="../../appdev.112/e18294/adlob_intro.htm#ADLOB001"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for information about using LOBs in application development</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BABDBGJA"></a>
<div id="ADFNS99866" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">LONG and LONG RAW Data Types</h4>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle supports the <a id="sthref147"></a><code dir="ltr">LONG</code> and <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> data types for <a id="sthref148"></a>backward compatibility, but strongly recommends that you convert <code dir="ltr">LONG</code> columns to LOB columns and <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> columns to <code dir="ltr">BLOB</code> columns.</div>
<p><code dir="ltr">LONG</code> columns store variable-length character strings containing up to 2&nbsp;gigabytes&nbsp;-&nbsp;1 bytes. <code dir="ltr">LONG</code> columns have many of the characteristics of <code dir="ltr">VARCHAR2</code> columns. You can use <code dir="ltr">LONG</code> columns to store long text strings. The length of <code dir="ltr">LONG</code> values may be limited by the memory available on your computer. For more information about the <code dir="ltr">LONG</code> data type, including its many restrictions, see <a class="olink SQLRF00201" href="../../server.112/e41084/sql_elements001.htm#SQLRF00201"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>The <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> (and <a id="sthref149"></a><code dir="ltr">RAW</code>) data types store data that is not to be explicitly converted by Oracle Database when moving data between different systems. These data types are intended for binary data or byte strings. For example, you can use <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> to store graphics, sound, documents, or arrays of binary data, for which the interpretation is dependent on the use. You can index <code dir="ltr">RAW</code> data, but not <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> data. For more information about the <code dir="ltr">RAW</code> and <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> data types, see <a class="olink SQLRF50993" href="../../server.112/e41084/sql_elements001.htm#SQLRF50993"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABFAAGA"></a>
<div id="ADFNS209" class="sect2">
<h3 class="sect2">Representing Searchable Text</h3>
<p><a id="sthref150"></a><a id="sthref151"></a>Rather than writing low-level code to do full-text searches, you can use <a id="sthref152"></a>Oracle Text. Oracle Text stores the search data in a special kind of index and lets you query the data with operators and PL/SQL packages. This technology enables you to create your own search engine using data from tables, files, or URLs, and combine the search logic with relational queries. You can also search XML data this way with the XPath notation.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCAPP" href="../../text.112/e24435/toc.htm"><span class="italic">Oracle Text Application Developer's Guide</span></a> for more information about Oracle Text</div>
</div>
<!-- class="sect2" -->
<a id="BABFFECA"></a>
<div id="ADFNS00309" class="sect2">
<h3 class="sect2">Representing XML Data</h3>
<p>If you have information stored as files in XML format, or want to store an ADT in XML format, then you can use the Oracle-supplied type <a id="sthref153"></a><a id="sthref154"></a><code dir="ltr">XMLType</code>.</p>
<p>When you create an <code dir="ltr">XMLType</code> column in a table, you can store the XML data in any of these ways:</p>
<ul>
<li>
<p>In a <code dir="ltr">CLOB</code> column</p>
</li>
<li>
<p>As binary XML (stored internally as a <code dir="ltr">CLOB</code>)</p>
</li>
<li>
<p>Object relationally</p>
</li>
</ul>
<p><code dir="ltr">XMLType</code> has member functions that access, extract, and query the XML data using W3C XPath expressions (see <a class="olink ADXDB0400" href="../../appdev.112/e23094/xdb04cre.htm#ADXDB0400"><span class="italic">Oracle XML DB Developer's Guide</span></a>). Also, Oracle provides SQL XML functions that manipulate or return whole or partial XML documents (see <a class="olink SQLRF51185" href="../../server.112/e41084/functions002.htm#SQLRF51185"><span class="italic">Oracle Database SQL Language Reference</span></a>) and these PL/SQL packages (described in <a class="olink ARPLS399" href="../../appdev.112/e40758/d_xmldom.htm#ARPLS399"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>):</p>
<ul>
<li>
<p><a class="olink ARPLS399" href="../../appdev.112/e40758/d_xmldom.htm#ARPLS399"><code dir="ltr">DBMS_XMLDOM</code></a>, for accessing XMLType objects</p>
</li>
<li>
<p><a class="olink ARPLS374" href="../../appdev.112/e40758/d_xmlgen.htm#ARPLS374"><code dir="ltr">DBMS_XMLGEN</code></a>, for converting the results of a SQL query to a canonical XML format</p>
</li>
<li>
<p><a class="olink ARPLS212" href="../../appdev.112/e40758/d_xmlindex.htm#ARPLS212"><code dir="ltr">DBMS_XMLINDEX</code></a>, for implementing asynchronous indexing</p>
</li>
<li>
<p><a class="olink ARPLS375" href="../../appdev.112/e40758/d_xmlpar.htm#ARPLS375"><code dir="ltr">DBMS_XMLPARSER</code></a>, for accessing the contents and structure of XML documents</p>
</li>
<li>
<p><a class="olink ARPLS376" href="../../appdev.112/e40758/d_xmlque.htm#ARPLS376"><code dir="ltr">DBMS_XMLQUERY</code></a>, for database-to-<code dir="ltr">XMLType</code> functionality</p>
</li>
<li>
<p><a class="olink ARPLS066" href="../../appdev.112/e40758/d_xmlsav.htm#ARPLS066"><code dir="ltr">DBMS_XMLSAVE</code></a>, for XML-to-database-type functionality</p>
</li>
<li>
<p><a class="olink ARPLS377" href="../../appdev.112/e40758/d_xmlsch.htm#ARPLS377"><code dir="ltr">DBMS_XMLSCHEMA</code></a>, for managing XML schemas</p>
</li>
<li>
<p><a class="olink ARPLS801" href="../../appdev.112/e40758/d_xmlstr.htm#ARPLS801"><code dir="ltr">DBMS_XMLSTORE</code></a>, for storing XML data in relational tables</p>
</li>
<li>
<p><a class="olink ARPLS213" href="../../appdev.112/e40758/d_xmltranslations.htm#ARPLS213"><code dir="ltr">DBMS_XMLTRANSLATIONS</code></a>, for translating strings so that they can be searched or displayed in various languages</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADXDB" href="../e23094/toc.htm"><span class="italic">Oracle XML DB Developer's Guide</span></a> for information about Oracle XML DB and how you can use it to store, generate, manipulate, manage, and query XML data in the database</p>
</li>
<li>
<p><a class="olink ADXDK" href="../e23582/toc.htm"><span class="italic">Oracle XML Developer's Kit Programmer's Guide</span></a> for information about client-side programming with XML</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABBIIFB"></a>
<div id="ADFNS210" class="sect2">
<h3 class="sect2">Representing Dynamically Typed Data</h3>
<p><a id="sthref155"></a><a id="sthref156"></a><a id="sthref157"></a>Some languages allow data types to change at run time, and some let a program check the type of a variable. For example, C has the <code dir="ltr">union</code> keyword and the <code dir="ltr">void&nbsp;*</code> pointer, and Java has the <code dir="ltr">typeof</code> operator and wrapper types such as <code dir="ltr">Number</code>.</p>
<p>In Oracle Database, you can create variables and columns that can hold data of any type and test their values to determine their underlying representation. For example, a single table column can have a numeric value in one row, a string value in another row, and an object in another row.</p>
<p>You can use the Oracle-supplied ADT <code dir="ltr">SYS</code>.<a id="sthref158"></a><code dir="ltr">ANYDATA</code> to represent values of any scalar type or ADT. <code dir="ltr">SYS</code>.<code dir="ltr">ANYDATA</code> has methods that accept scalar values of any type, and turn them back into scalars or objects. Similarly, you can use the Oracle-supplied ADT <code dir="ltr">SYS</code>.<a id="sthref159"></a><code dir="ltr">ANYDATASET</code> to represent values of any collection type. For more information about these ADTs, see <a class="olink ADOBJ010" href="../../appdev.112/e11822/adobjadv.htm#ADOBJ010"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a>.</p>
<p>To check and manipulate type information, use the <code dir="ltr">DBMS_TYPES</code> package, as in <a href="#BABIFGBF">Example 1-4</a>. For more information about this package, see <a class="olink ARPLS076" href="../../appdev.112/e40758/d_types.htm#ARPLS076"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
<p>With OCI, use the <a id="sthref160"></a><code dir="ltr">OCIAnyData</code> and <code dir="ltr">OCIAnyDataSet</code> interfaces, described in <a class="olink LNOCI16877" href="../../appdev.112/e10646/oci12oty.htm#LNOCI16877"><span class="italic">Oracle Call Interface Programmer's Guide</span></a>.</p>
<div id="ADFNS211" class="example">
<p class="titleinexample"><a id="BABIFGBF"></a>Example 1-4 Accessing Information in a SYS.ANYDATA Column</p>
<pre dir="ltr">
CREATE OR REPLACE TYPE employee_type AS
  OBJECT (empno NUMBER, ename VARCHAR2(10));
/
 
DROP TABLE mytab;
CREATE TABLE mytab (id NUMBER, data SYS.ANYDATA);
 
INSERT INTO mytab (id, data)
VALUES (1, SYS.ANYDATA.ConvertNumber(5));
 
INSERT INTO mytab (id, data)
VALUES (2, SYS.ANYDATA.ConvertObject(Employee_type(5555, 'john')));
 
CREATE OR REPLACE PROCEDURE p IS
  CURSOR cur IS SELECT id, data FROM mytab;
  v_id                        mytab.id%TYPE;
  v_data                      mytab.data%TYPE;
  v_type                      SYS.ANYTYPE;
  v_typecode                  PLS_INTEGER;
  v_typename                  VARCHAR2(60);
  v_dummy                     PLS_INTEGER;
  v_n                         NUMBER;
  v_employee                  employee_type;
  non_null_anytype_for_NUMBER exception;
  unknown_typename            exception;
BEGIN
  OPEN cur;
  LOOP
    FETCH cur INTO v_id, v_data;
    EXIT WHEN cur%NOTFOUND;
 
    /* typecode signifies type represented by v_data.
       GetType also produces a value of type SYS.ANYTYPE with methods you
       can call to find precision and scale of a number, length of a
       string, and so on. */
 
       v_typecode := v_data.GetType (v_type /* OUT */);
 
    /* Compare typecode to DBMS_TYPES constants to determine type of data
       and decide how to display it. */
  
    CASE v_typecode
      WHEN <span class="bold">DBMS_TYPES.TYPECODE_NUMBER</span> THEN
        IF v_type IS NOT NULL THEN  -- This condition should never happen.
          RAISE non_null_anytype_for_NUMBER;
        END IF;
 
      -- For each type, there is a Get method.
      v_dummy := v_data.GetNUMBER (v_n /* OUT */);
      DBMS_OUTPUT.PUT_LINE
        (TO_CHAR(v_id) || ': NUMBER = ' || TO_CHAR(v_n) );
 
       WHEN <span class="bold">DBMS_TYPES.TYPECODE_OBJECT</span> THEN
         v_typename := v_data.GetTypeName();
         IF v_typename NOT IN ('HR.EMPLOYEE_TYPE') THEN
           RAISE unknown_typename;
         END IF;
         v_dummy := v_data.GetObject (v_employee /* OUT */);
         DBMS_OUTPUT.PUT_LINE
           (TO_CHAR(v_id) || ': user-defined type = ' || v_typename ||
            ' ( ' || v_employee.empno || ', ' || v_employee.ename || ' )' );
    END CASE;
  END LOOP;
  CLOSE cur;
EXCEPTION
  WHEN non_null_anytype_for_NUMBER THEN
    RAISE_Application_Error (-20000,
      'Paradox: the return AnyType instance FROM GetType ' ||
      'should be NULL for all but user-defined types');
  WHEN unknown_typename THEN
    RAISE_Application_Error( -20000, 'Unknown user-defined type ' ||
      v_typename || ' - program written to handle only HR.EMPLOYEE_TYPE');
END;
/
 
SELECT t.data.gettypename() AS "Type Name" FROM mytab t;
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Type Name
--------------------------------------------------------------------------------
SYS.NUMBER
HR.EMPLOYEE_TYPE
 
2 rows selected.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABCHDCD"></a>
<div id="ADFNS212" class="sect2">
<h3 class="sect2">Representing ANSI, DB2, and SQL/DS Data</h3>
<p>SQL statements that create tables and clusters can use <a id="sthref161"></a><a id="sthref162"></a>ANSI data types and data types from the IBM products <a id="sthref163"></a><a id="sthref164"></a>SQL/DS and <a id="sthref165"></a><a id="sthref166"></a>DB2 (except those noted after this paragraph). Oracle Database <a id="sthref167"></a>converts the ANSI or IBM data type to the equivalent Oracle data type, records the Oracle data type as the name of the column data type, and stores the column data in the Oracle data type. For conversion details, see <a class="olink SQLRF00213" href="../../server.112/e41084/sql_elements001.htm#SQLRF00213"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
SQL statements cannot use the SQL/DS and DB2 data types <code dir="ltr">TIME</code>, <code dir="ltr">GRAPHIC</code>, <code dir="ltr">VARGRAPHIC</code>, and <code dir="ltr">LONG</code> <code dir="ltr">VARGRAPHIC</code>, because they have no equivalent Oracle data types.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABEBICE"></a>
<div id="ADFNS1005" class="sect1">
<h2 class="sect1">Representing Conditional Expressions as Data</h2>
<p><a id="sthref168"></a>Oracle Expression Filter (a feature of Rules Manager) enables you to store, index, and evaluate <a id="sthref169"></a><a id="sthref170"></a>conditional expressions in one or more columns of a database table. Then Oracle Expression Filter compares the stored expressions to incoming data, identifying rows of interest.</p>
<p><span class="bold">Scenario:</span> You created the following table, in which each row holds data for a stock-trading account holder, and you want to define a column that stores information about the stocks in which each trader is interested as a conditional expression.</p>
<pre dir="ltr">
DROP TABLE traders;
CREATE TABLE traders (
  name     VARCHAR2(10),
  email    VARCHAR2(20),
  interest VARCHAR2(30)
);
</pre>
<p><span class="bold">Solution:</span></p>
<ol>
<li>
<p>Create a type with attributes for the trading symbol, limit price, and amount of change in the stock price:</p>
<pre dir="ltr">
CREATE OR REPLACE TYPE ticker AS OBJECT (
  symbol VARCHAR2(20),
  price  NUMBER,
  change NUMBER
);
/
</pre></li>
<li>
<p>Create an attribute set based on the type <code dir="ltr">ticker</code>:</p>
<pre dir="ltr">
BEGIN
  DBMS_EXPFIL.DROP_ATTRIBUTE_SET (attr_set  =&gt; 'ticker');
END;
/
BEGIN
  DBMS_EXPFIL.CREATE_ATTRIBUTE_SET
  (attr_set  =&gt; 'ticker',
  from_type =&gt; 'YES');
END;
/
</pre></li>
<li>
<p>Associate the attribute set with the expression set stored in the column <code dir="ltr">trader</code>.<code dir="ltr">interest</code>:</p>
<pre dir="ltr">
BEGIN
  DBMS_EXPFIL.ASSIGN_ATTRIBUTE_SET
  (attr_set =&gt; 'ticker',
  expr_tab =&gt; 'traders',
  expr_col =&gt; 'interest');
  END;
/
</pre>
<p>The preceding code ensures that the <code dir="ltr">interest</code> column stores valid conditional expressions.</p>
</li>
<li>
<p>Populate the table with trader names, e-mail addresses, and conditional expressions that represent stocks in which the trader is interested, at specific prices. For example:</p>
<pre dir="ltr">
INSERT INTO traders (name, email, interest)
VALUES ('Vishu', 'vishu@example.com', 'symbol = ''ABC'' AND price &gt; 25');
</pre></li>
<li>
<p>Use the <code dir="ltr">EVALUATE</code> operator to identify the conditional expressions that evaluate to <code dir="ltr">TRUE</code> for a given data item. For example, this query returns traders who are interested in the stock quote <code dir="ltr">(symbol='ABC', price=31, change=5.2)</code>:</p>
<pre dir="ltr">
SELECT name, email
FROM traders
WHERE EVALUATE (
  interest,
  'symbol=&gt;''ABC'',
  price=&gt;31,
  change=&gt;5.2'
) = 1;
 
</pre>
<p>Result:</p>
<pre dir="ltr">
NAME       EMAIL
---------- --------------------
Vishu      vishu@example.com
 
1 row selected.
</pre>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
To speed up the query, create an Oracle Expression Filter index on the <code dir="ltr">interest</code> column.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink EXPRN007" href="../../appdev.112/e14919/exprn_expconcepts.htm#EXPRN007"><span class="italic">Oracle Database Rules Manager and Expression Filter Developer's Guide</span></a> for information about developing applications using Oracle Expression Filter</div>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="BABIIHAA"></a>
<div id="ADFNS00306" class="sect1">
<h2 class="sect1">Identifying Rows by Address</h2>
<p>The fastest way to access a row is by its address, or <a id="sthref171"></a><span class="bold">rowid</span>, which uniquely identifies it. Different rows in the same data block can have the same rowid only if they are in different clustered tables. If a row is larger than one data block, then its rowid identifies its initial row piece.</p>
<p>To see rowids, query the <a id="sthref172"></a><code dir="ltr">ROWID</code> pseudocolumn, whose value is a string that represents the address of the row. The string has the data type <code dir="ltr">ROWID</code> or <code dir="ltr">UROWID</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you update a row in a table compressed with Hybrid Columnar Compression (HCC), the <code dir="ltr">ROWID</code> of the row changes. HCC, a feature of certain Oracle storage systems, is described in <a class="olink CNCPT89198" href="../../server.112/e40540/tablecls.htm#CNCPT89198"><span class="italic">Oracle Database Concepts</span></a>.</div>
<p class="subhead2"><a id="sthref173"></a>Topics:</p>
<ul>
<li>
<p><a href="#CIHGBAHI">Querying the ROWID Pseudocolumn</a></p>
</li>
<li>
<p><a href="#CIHHABIJ">ROWID Data Type</a></p>
</li>
<li>
<p><a href="#CIHIJGBB">UROWID Data Type</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF00254" href="../../server.112/e41084/pseudocolumns008.htm#SQLRF00254"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code dir="ltr">ROWID</code> pseudocolumn</div>
<a id="CIHGBAHI"></a>
<div id="ADFNS215" class="sect2">
<h3 class="sect2">Querying the ROWID Pseudocolumn</h3>
<p>Each table in Oracle Database has a pseudocolumn named <code dir="ltr">ROWID</code>, which can appear in a query in either the <code dir="ltr">SELECT</code> list or <code dir="ltr">WHERE</code> clause.</p>
<p><a href="#BABHBJEG">Example 1-5</a> creates a table of with a column of the data type <code dir="ltr">ROWID</code>, populates it with rowids by querying the <code dir="ltr">ROWID</code> pseudocolumn inside an <code dir="ltr">INSERT</code> statement, and then displays it. The rowids of the table rows show how they are stored.</p>
<div id="ADFNS216" class="example">
<p class="titleinexample"><a id="BABHBJEG"></a>Example 1-5 Querying the ROWID Pseudocolumn</p>
<pre dir="ltr">
DROP TABLE t_tab;  -- in case it exists
CREATE TABLE t_tab (col1 <span class="bold">ROWID</span>);
 
INSERT INTO t_tab (col1)
<span class="bold">SELECT ROWID</span>
FROM employees
WHERE employee_id &gt; 199;
 
</pre>
<p>Query:</p>
<pre dir="ltr">
SELECT employee_id, <span class="bold">rowid</span>
FROM employees
WHERE employee_id &gt; 199;
 
</pre>
<p><code dir="ltr">ROWID</code> varies, but result is similar to:</p>
<pre dir="ltr">
EMPLOYEE_ID <span class="bold">ROWID</span>
----------- ------------------
        200 AAAPeSAAFAAAABTAAC
        201 AAAPeSAAFAAAABTAAD
        202 AAAPeSAAFAAAABTAAE
        203 AAAPeSAAFAAAABTAAF
        204 AAAPeSAAFAAAABTAAG
        205 AAAPeSAAFAAAABTAAH
        206 AAAPeSAAFAAAABTAAI
 
7 rows selected.
 
</pre>
<p>Query:</p>
<pre dir="ltr">
SELECT * FROM t_tab;
 
</pre>
<p><code dir="ltr">COL1</code> varies, but result is similar to:</p>
<pre dir="ltr">
COL1
------------------
AAAPeSAAFAAAABTAAC
AAAPeSAAFAAAABTAAD
AAAPeSAAFAAAABTAAE
AAAPeSAAFAAAABTAAF
AAAPeSAAFAAAABTAAG
AAAPeSAAFAAAABTAAH
AAAPeSAAFAAAABTAAI
 
7 rows selected.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CIHHABIJ"></a>
<div id="ADFNS217" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">ROWID Data Type</h3>
<p>In heap-organized tables generated by Oracle Database, the values in the <code dir="ltr">ROWID</code> pseudocolumn have the data type <a id="sthref174"></a><code dir="ltr">ROWID</code>. Internally, this data type is a structure that stores information that the database server needs to access a row. The format of this structure is either restricted, extended, or external binary.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Creating a column of the type <code dir="ltr">ROWID</code> (like <code dir="ltr">col1</code> in <a href="#BABHBJEG">Example 1-5</a>) does not guarantee that its values will be valid rowids.</div>
<p class="subhead2"><a id="sthref175"></a>Topics:</p>
<ul>
<li>
<p><a href="#g1611879">Restricted Internal ROWID Format</a></p>
</li>
<li>
<p><a href="#g1611945">Extended Internal ROWID Format</a></p>
</li>
<li>
<p><a href="#g1612032">External Binary Internal ROWID Format</a></p>
</li>
</ul>
<a id="g1611879"></a>
<div id="ADFNS218" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Restricted Internal ROWID Format</h4>
<p>A <code dir="ltr">ROWID</code> structure with the <a id="sthref176"></a>restricted internal format has these components:</p>
<ul>
<li>
<p>Data file identifier</p>
</li>
<li>
<p>Block identifier</p>
</li>
<li>
<p>Row identifier</p>
</li>
</ul>
<p>On most platforms, the size of this structure is 6 bytes.</p>
<p>The database server returns a <code dir="ltr">ROWID</code> pseudocolumn value to the client application as an 18-character string with a hexadecimal encoding of each component.</p>
</div>
<!-- class="sect3" -->
<a id="g1611945"></a>
<div id="ADFNS219" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Extended Internal ROWID Format</h4>
<p>A <code dir="ltr">ROWID</code> structure with the <a id="sthref177"></a>extended internal format has the same components as the restricted format and a data object number, which identifies a database segment. On most platforms, the size of this structure is 10 bytes.</p>
<p>The database server returns a <code dir="ltr">ROWID</code> pseudocolumn value to the client application as an 18-character string with a base-64 encoding of each component. For example, the string might be <code dir="ltr">"AAAA8mAALAAAAQkAAA"</code>, which represents a base-64 encoding of the components of the extended <code dir="ltr">ROWID</code> in a four-piece format, <code dir="ltr">OOOOOOFFFBBBBBBRRR</code>.</p>
<p>To access and interpret the contents of an extended rowid, use the <code dir="ltr">DBMS_ROWID</code> package, described in <a class="olink ARPLS053" href="../../appdev.112/e40758/d_rowid.htm#ARPLS053"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
</div>
<!-- class="sect3" -->
<a id="g1612032"></a>
<div id="ADFNS220" class="sect3">
<h4 class="sect3">External Binary Internal ROWID Format</h4>
<p>Some client applications use a <a id="sthref178"></a><a id="sthref179"></a>binary internal format for the <code dir="ltr">ROWID</code> structure. For example, OCI and some precompiler applications can map the <code dir="ltr">ROWID</code> data type to a 3GL structure on bind or define calls.</p>
<p>In binary internal format, the <code dir="ltr">ROWID</code> structure is the same size for restricted and extended rowids. For a restricted rowid, the data object number is stored in an unused field.</p>
<p>The format of the extended binary <code dir="ltr">ROWID</code>, expressed as a C <code dir="ltr">struct</code>, is:</p>
<pre dir="ltr">
struct riddef {
    ub4    ridobjnum; <span class="italic">/* data obj#--this field is </span>
<span class="italic">                         unused in restricted ROWIDs */</span>
    ub2    ridfilenum;
    ub1    filler;
    ub4    ridblocknum;
    ub2    ridslotnum;
}
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHIJGBB"></a>
<div id="ADFNS221" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">UROWID Data Type</h3>
<p>In tables that are foreign (that is, not generated by Oracle Database) or index-organized, the values in the <code dir="ltr">ROWID</code> pseudocolumn have the data type <a id="sthref180"></a><code dir="ltr">UROWID</code>. This data type stores a <a id="sthref181"></a><a id="sthref182"></a><span class="bold">universal rowid (urowid)</span>.</p>
<p>Urowids for foreign tables (such as DB2 tables accessed through a gateway) are called <a id="sthref183"></a><a id="sthref184"></a><span class="glossaryterm">foreign rowids</span>.</p>
<p>Urowids for index-organized tables (whose rows are stored in index leaves, which can move) are called <a id="sthref185"></a><a id="sthref186"></a><span class="glossaryterm">logical rowids</span>. Oracle Database creates logical rowids based on the primary key of the table. The logical rowids do not change if the primary key does not change.</p>
<p>To store urowids in a table, define a column of data type <code dir="ltr">UROWID</code> for the table and then retrieve the value of the <code dir="ltr">ROWID</code> pseudocolumn into that column.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABDBADI"></a>
<div id="ADFNS00307" class="sect1">
<h2 class="sect1">How Oracle Database Converts Data Types</h2>
<p>Generally, you cannot assign a value of one data type to a variable or column of another data type, or create an expression with values of different data types. However, in some cases, Oracle Database accepts data of one type where it expects data of another type and then automatically <a id="sthref187"></a>converts the accepted data to the expected type. This is called <span class="bold">implicit data conversion</span>.</p>
<p class="subhead2"><a id="sthref188"></a>Topics:</p>
<ul>
<li>
<p><a href="#g1612249">Data Type Conversion During Assignments</a></p>
</li>
<li>
<p><a href="#g1612559">Data Type Conversion During Expression Evaluation</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF00214" href="../../server.112/e41084/sql_elements002.htm#SQLRF00214"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about data type conversion</div>
<a id="g1612249"></a>
<div id="ADFNS222" class="sect2">
<h3 class="sect2">Data Type Conversion During Assignments</h3>
<p><a id="sthref189"></a><a id="sthref190"></a>For the assignment</p>
<pre dir="ltr">
<span class="italic">variable</span> := <span class="italic">expression</span>
</pre>
<p>if the data type of <code dir="ltr"><span class="codeinlineitalic">expression</span></code> differs from that of <code dir="ltr"><span class="codeinlineitalic">variable</span></code>, then Oracle Database tries to convert the data type of <code dir="ltr"><span class="codeinlineitalic">expression</span></code> to that of <code dir="ltr"><span class="codeinlineitalic">variable</span></code>. For information about when that is possible, see <a class="olink SQLRF51047" href="../../server.112/e41084/sql_elements002.htm#SQLRF51047"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>A character-to-<code dir="ltr">NUMBER</code> conversion succeeds only if the character string represents a valid number. A character-to-<code dir="ltr">DATE</code> conversion succeeds only if the character string satisfies the session default date format. (For information about the default date format, see <a href="#BABECDEC">"Displaying Current Date and Time"</a>.)</p>
<p class="subhead2"><a id="sthref191"></a>Examples</p>
<p>Assume that <code dir="ltr">test_package</code>, its public variable <code dir="ltr">var1</code>, and <code dir="ltr">table1_tab</code> are declared as follows:</p>
<pre dir="ltr">
CREATE OR REPLACE PACKAGE test_package AS
  var1 CHAR(5);
END;
/
 
DROP TABLE table1_tab;
CREATE TABLE table1_tab (col1 NUMBER);
</pre>
<p>In the assignment</p>
<pre dir="ltr">
<span class="italic">variable</span> := <span class="italic">expression</span>
</pre>
<p>the data type of <code dir="ltr"><span class="codeinlineitalic">expression</span></code> must be either the same as, or implicitly convertible to, the data type of <code dir="ltr"><span class="codeinlineitalic">variable</span></code>. For example, for this assignment, Oracle Database automatically converts zero to the data type of <code dir="ltr">var1</code>, which is <code dir="ltr">CHAR(5)</code>:</p>
<pre dir="ltr">
var1 := 0;
</pre>
<p>In the statement</p>
<pre dir="ltr">
INSERT INTO table1_tab (col1) VALUES (<span class="italic">expression</span>)
</pre>
<p>the data type of <code dir="ltr"><span class="codeinlineitalic">expression</span></code> must be either the same as, or implicitly convertible to, the data type of <code dir="ltr">col1</code>. For example, for this statement, Oracle Database automatically converts the string '19' to the data type of <code dir="ltr">col1</code>, which is <code dir="ltr">NUMBER</code>:</p>
<pre dir="ltr">
INSERT INTO table1_tab (col1) VALUES ('19')
</pre>
<p>In the statement</p>
<pre dir="ltr">
UPDATE table1_tab SET <span class="italic">column</span> = <span class="italic">expression</span>
</pre>
<p>the data type of <code dir="ltr"><span class="codeinlineitalic">expression</span></code> must be either the same as, or implicitly convertible to, the data type of <code dir="ltr"><span class="codeinlineitalic">column</span></code>. For example, for this statement, Oracle Database automatically converts the string '30' to the data type of <code dir="ltr">col1</code>, which is <code dir="ltr">NUMBER</code>:</p>
<pre dir="ltr">
UPDATE table1_tab SET col1 = '30';
</pre>
<p>In the statement</p>
<pre dir="ltr">
SELECT <span class="italic">column</span> INTO <span class="italic">variable</span> FROM table1_tab
</pre>
<p>the data type of <code dir="ltr"><span class="codeinlineitalic">column</span></code> must be either the same as, or convertible to, the data type of <code dir="ltr"><span class="codeinlineitalic">variable</span></code>. For example, for this statement, Oracle Database automatically converts the value selected from <code dir="ltr">col1</code>, which is 30, to the data type of <code dir="ltr">var1</code>, which is <code dir="ltr">CHAR(5)</code>:</p>
<pre dir="ltr">
SELECT col1 INTO var1 FROM table1_tab WHERE col1 = 30;
</pre></div>
<!-- class="sect2" -->
<a id="g1612559"></a>
<div id="ADFNS223" class="sect2">
<h3 class="sect2">Data Type Conversion During Expression Evaluation</h3>
<p><a id="sthref192"></a>When evaluating an expression, Oracle Database can perform the same automatic conversions that it does for assignments. The target data type is determined by the context of the expression. For example, if an expression is the operand of an arithmetic operator, then Oracle Database tries to convert the value of the expression to <code dir="ltr">NUMBER</code>; if the expression is the operand of a string function, then Oracle Database tries to convert the value of the expression to <code dir="ltr">VARCHAR2</code>.</p>
<p>For the assignment</p>
<pre dir="ltr">
<span class="italic">variable</span> := <span class="italic">expression</span>
</pre>
<p>Oracle Database first evaluates <code dir="ltr"><span class="codeinlineitalic">expression</span></code>, using the conversion rules for expressions. If the evaluation succeeds, the result is a single value of a single data type, which Oracle Database tries to assign to <code dir="ltr"><span class="codeinlineitalic">variable</span></code>, using the conversion rules for assignments.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHEHJIB"></a>
<div id="ADFNS00308" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Metadata for SQL Operators and Functions</h2>
<p>The dynamic performance view <code dir="ltr">V$SQLFN_METADATA</code> contains <a id="sthref193"></a><a id="sthref194"></a>metadata about SQL operators and <a id="sthref195"></a>functions. For every function in <code dir="ltr">V$SQLFN_METADATA</code>, the dynamic performance view <code dir="ltr">V$SQLFN_ARG_METADATA</code> has one row of metadata about each function argument. If a function argument can be repeated (as in the functions <code dir="ltr">LEAST</code> and <code dir="ltr">GREATEST</code>), then <code dir="ltr">V$SQLFN_ARG_METADATA</code> has only one row for each repeating argument. You can join these two views on the column <code dir="ltr">FUNCID</code>.</p>
<p>These views enable third-party tools to leverage SQL functions without maintaining their metadata in the application layer.</p>
<p class="subhead2"><a id="ADFNS225"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABGJIJG">ARGn Data Type</a></p>
</li>
<li>
<p><a href="#BABEEGDC">DISP_TYPE Data Type</a></p>
</li>
<li>
<p><a href="#BABHDFDI">Data Type Families</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink REFRN30501" href="../../server.112/e40402/dynviews_3068.htm#REFRN30501"><span class="italic">Oracle Database Reference</span></a> for more information about <code dir="ltr">V$SQLFN_METADATA</code></p>
</li>
<li>
<p><a class="olink REFRN30500" href="../../server.112/e40402/dynviews_3067.htm#REFRN30500"><span class="italic">Oracle Database Reference</span></a> for more information about <code dir="ltr">V$SQLFN_ARG_METADATA</code></p>
</li>
</ul>
</div>
<a id="BABGJIJG"></a>
<div id="ADFNS99865" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">ARGn Data Type</h3>
<p><a id="sthref196"></a>In the view <code dir="ltr">V$SQLFN_METADATA</code>, the column <code dir="ltr">DATATYPE</code> is the data type of the function (that is, the data type that the function returns). This data type can be an Oracle data type, data type family (see <a href="#BABHDFDI">"Data Type Families"</a>), or <code dir="ltr">ARG</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>. <code dir="ltr">ARG</code><code dir="ltr"><span class="codeinlineitalic">n</span></code> is the data type of the <span class="italic">n</span>th argument of the function. For example:</p>
<ul>
<li>
<p>The <code dir="ltr">MAX</code> function (described in <a class="olink SQLRF00666" href="../../server.112/e41084/functions098.htm#SQLRF00666"><span class="italic">Oracle Database SQL Language Reference</span></a>) returns a value that has the data type of its first argument, so the <code dir="ltr">MAX</code> function has return data type <code dir="ltr">ARG1</code>.</p>
</li>
<li>
<p>The <code dir="ltr">DECODE</code> function (described in <a class="olink SQLRF00631" href="../../server.112/e41084/functions049.htm#SQLRF00631"><span class="italic">Oracle Database SQL Language Reference</span></a>) returns a value that has the data type of its third argument, so the <code dir="ltr">DECODE</code> function has data type <code dir="ltr">ARG3</code>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABEEGDC"></a>
<div id="ADFNS99864" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">DISP_TYPE Data Type</h3>
<p><a id="sthref197"></a>In the view <code dir="ltr">V$SQLFN_METADATA</code>, <code dir="ltr">DISP_TYPE</code> is the data type of an argument that can be any expression. An expression is either a single value or a combination of values and SQL functions that has a single value.</p>
<div id="ADFNS227" class="tblformal">
<p class="titleintable"><a id="sthref198"></a><a id="g1771782"></a>Table 1-10 <a id="sthref199"></a>Display Types of SQL Functions</p>
<table class="cellalignment1278" title="Display Types of SQL Functions" summary="This table summarizes the display types of SQL built-in functions." dir="ltr">
<thead>
<tr class="cellalignment1267">
<th class="cellalignment1274" id="r1c1-t43">Display Type</th>
<th class="cellalignment1274" id="r1c2-t43">Description</th>
<th class="cellalignment1274" id="r1c3-t43">Example</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r2c1-t43" headers="r1c1-t43">
<p><code dir="ltr">NORMAL</code></p>
</td>
<td class="cellalignment1275" headers="r2c1-t43 r1c2-t43">
<p><code dir="ltr">FUNC(A,B,...)</code></p>
</td>
<td class="cellalignment1275" headers="r2c1-t43 r1c3-t43">
<p><code dir="ltr">LEAST(A,B,C)</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r3c1-t43" headers="r1c1-t43">
<p><code dir="ltr">ARITHMETIC</code></p>
</td>
<td class="cellalignment1275" headers="r3c1-t43 r1c2-t43">
<p><code dir="ltr">A FUNC B)</code></p>
</td>
<td class="cellalignment1275" headers="r3c1-t43 r1c3-t43">
<p><code dir="ltr">A+B</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r4c1-t43" headers="r1c1-t43">
<p><code dir="ltr">PARENTHESIS</code></p>
</td>
<td class="cellalignment1275" headers="r4c1-t43 r1c2-t43">
<p><code dir="ltr">FUNC()</code></p>
</td>
<td class="cellalignment1275" headers="r4c1-t43 r1c3-t43">
<p><code dir="ltr">SYS_GUID()</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r5c1-t43" headers="r1c1-t43">
<p><code dir="ltr">RELOP</code></p>
</td>
<td class="cellalignment1275" headers="r5c1-t43 r1c2-t43">
<p><code dir="ltr">A FUNC B</code></p>
</td>
<td class="cellalignment1275" headers="r5c1-t43 r1c3-t43">
<p><code dir="ltr">A IN B</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r6c1-t43" headers="r1c1-t43">
<p><code dir="ltr">CASE_LIKE</code></p>
</td>
<td class="cellalignment1275" headers="r6c1-t43 r1c2-t43">
<p><code dir="ltr">CASE</code> statement or <code dir="ltr">DECODE</code> decode</p>
</td>
<td class="cellalignment1275" headers="r6c1-t43 r1c3-t43">&nbsp;</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r7c1-t43" headers="r1c1-t43">
<p><code dir="ltr">NOPAREN</code></p>
</td>
<td class="cellalignment1275" headers="r7c1-t43 r1c2-t43">
<p><code dir="ltr">FUNC</code></p>
</td>
<td class="cellalignment1275" headers="r7c1-t43 r1c3-t43">
<p><code dir="ltr">SYSDATE</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="BABHDFDI"></a>
<div id="ADFNS99863" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Data Type Families</h3>
<p>Often, a SQL function argument can have any data type in a <a id="sthref200"></a><a id="sthref201"></a><a id="sthref202"></a>data type family. <a href="#g1765492">Table 1-11</a> shows the data type families and their member data types.</p>
<div id="ADFNS224" class="tblformal">
<p class="titleintable"><a id="sthref203"></a><a id="g1765492"></a>Table 1-11 Data Type Families</p>
<table class="cellalignment1278" title="Data Type Families" summary="This table summarizes the datatype families." dir="ltr">
<thead>
<tr class="cellalignment1267">
<th class="cellalignment1274" id="r1c1-t44">Family</th>
<th class="cellalignment1274" id="r1c2-t44">Data Types</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r2c1-t44" headers="r1c1-t44">
<p><code dir="ltr">STRING</code></p>
</td>
<td class="cellalignment1275" headers="r2c1-t44 r1c2-t44">
<p><code dir="ltr">CHARACTER</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r3c1-t44" headers="r1c1-t44">&nbsp;</td>
<td class="cellalignment1275" headers="r3c1-t44 r1c2-t44">
<p><code dir="ltr">VARCHAR2</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r4c1-t44" headers="r1c1-t44">&nbsp;</td>
<td class="cellalignment1275" headers="r4c1-t44 r1c2-t44">
<p><code dir="ltr">CLOB</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r5c1-t44" headers="r1c1-t44">&nbsp;</td>
<td class="cellalignment1275" headers="r5c1-t44 r1c2-t44">
<p><code dir="ltr">NCHAR</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r6c1-t44" headers="r1c1-t44">&nbsp;</td>
<td class="cellalignment1275" headers="r6c1-t44 r1c2-t44">
<p><code dir="ltr">NVARCHAR2</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r7c1-t44" headers="r1c1-t44">&nbsp;</td>
<td class="cellalignment1275" headers="r7c1-t44 r1c2-t44">
<p><code dir="ltr">NCLOB</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r8c1-t44" headers="r1c1-t44">&nbsp;</td>
<td class="cellalignment1275" headers="r8c1-t44 r1c2-t44">
<p><code dir="ltr">LONG</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r9c1-t44" headers="r1c1-t44">
<p><code dir="ltr">NUMERIC</code></p>
</td>
<td class="cellalignment1275" headers="r9c1-t44 r1c2-t44">
<p><code dir="ltr">NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r10c1-t44" headers="r1c1-t44">&nbsp;</td>
<td class="cellalignment1275" headers="r10c1-t44 r1c2-t44">
<p><code dir="ltr">BINARY_FLOAT</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r11c1-t44" headers="r1c1-t44">&nbsp;</td>
<td class="cellalignment1275" headers="r11c1-t44 r1c2-t44">
<p><code dir="ltr">BINARY_DOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r12c1-t44" headers="r1c1-t44">
<p><code dir="ltr">DATETYPE</code></p>
</td>
<td class="cellalignment1275" headers="r12c1-t44 r1c2-t44">
<p><code dir="ltr">DATE</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r13c1-t44" headers="r1c1-t44">&nbsp;</td>
<td class="cellalignment1275" headers="r13c1-t44 r1c2-t44">
<p><code dir="ltr">TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r14c1-t44" headers="r1c1-t44">&nbsp;</td>
<td class="cellalignment1275" headers="r14c1-t44 r1c2-t44">
<p><code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r15c1-t44" headers="r1c1-t44">&nbsp;</td>
<td class="cellalignment1275" headers="r15c1-t44 r1c2-t44">
<p><code dir="ltr">TIMESTAMP</code> <code dir="ltr">WITH</code> <code dir="ltr">LOCAL</code> <code dir="ltr">TIME</code> <code dir="ltr">ZONE</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r16c1-t44" headers="r1c1-t44">&nbsp;</td>
<td class="cellalignment1275" headers="r16c1-t44 r1c2-t44">
<p><code dir="ltr">INTERVAL</code> <code dir="ltr">YEAR</code> <code dir="ltr">TO</code> <code dir="ltr">MONTH</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r17c1-t44" headers="r1c1-t44">&nbsp;</td>
<td class="cellalignment1275" headers="r17c1-t44 r1c2-t44">
<p><code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r18c1-t44" headers="r1c1-t44">
<p><code dir="ltr">BINARY</code></p>
</td>
<td class="cellalignment1275" headers="r18c1-t44 r1c2-t44">
<p><code dir="ltr">BLOB</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r19c1-t44" headers="r1c1-t44">&nbsp;</td>
<td class="cellalignment1275" headers="r19c1-t44 r1c2-t44">
<p><code dir="ltr">RAW</code></p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r20c1-t44" headers="r1c1-t44">&nbsp;</td>
<td class="cellalignment1275" headers="r20c1-t44 r1c2-t44">
<p><code dir="ltr">LONGRAW</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1266">
<tr>
<td class="cellalignment1275">
<table class="cellalignment1271">
<tr>
<td class="cellalignment1270"><a href="adfns_part_sql.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1270"><a href="adfns_sqlproc.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1277">
<table class="cellalignment1269">
<tr>
<td class="cellalignment1270"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1270"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1270"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1270"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1270"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1270"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
