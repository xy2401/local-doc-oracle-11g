<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Performing User-Managed Database Flashback and Recovery</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1054" />
<meta name="description" content="A guide to backup and recovery of Oracle databases, including RMAN backup and recovery, RMAN data transfer, Oracle Flashback Technology, and user-managed backup and recovery" />
<meta name="dcterms.created" content="2015-05-13T14:1:12Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Backup and Recovery User's Guide" />
<meta name="dcterms.identifier" content="E10642-08" />
<meta name="dcterms.isVersionOf" content="BRADV" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2003, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="osbackup.htm" title="Previous" type="text/html" />
<link rel="Next" href="osadvsce.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10642.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">44/47</span> <!-- End Header -->
<div id="BRADV017" class="chapter"><a id="BABBBBBB"></a>
<h1 class="chapter"><span class="secnum">29</span> Performing User-Managed Database Flashback and Recovery</h1>
<p><a id="sthref1986"></a><a id="sthref1987"></a>This chapter describes how to restore and recover a database and use the flashback features of Oracle Database in a user-managed backup and recovery strategy. A user-managed backup and recovery strategy means a method that does not depend on RMAN.</p>
<p>This chapter contains the following topics:<a id="sthref1988"></a><a id="sthref1989"></a></p>
<ul>
<li>
<p><a href="#CHDBIFHI">Performing Flashback Database with SQL*Plus</a></p>
</li>
<li>
<p><a href="#i1011069">Overview of User-Managed Media Recovery</a></p>
</li>
<li>
<p><a href="#i1011065">Performing Complete Database Recovery</a></p>
</li>
<li>
<p><a href="#i1007175">Performing Incomplete Database Recovery</a></p>
</li>
<li>
<p><a href="#i1007937">Recovering a Database in NOARCHIVELOG Mode</a></p>
</li>
<li>
<p><a href="#CHDEJCGC">Troubleshooting Media Recovery</a></p>
</li>
</ul>
<a id="CHDBIFHI"></a>
<div id="BRADV99982" class="sect1">
<h2 class="sect1">Performing Flashback Database with SQL*Plus</h2>
<p>Oracle Flashback Database returns your entire database to a previous state without requiring you to restore files from backup. The SQL*Plus <code dir="ltr">FLASHBACK DATABASE</code> command performs the same function as the RMAN <code dir="ltr">FLASHBACK DATABASE</code> command: it returns the database to a prior state.</p>
<p>Flashback Database requires you to create a fast recovery area for your database and enable the collection of flashback logs. See <a href="rcmflash.htm#g1016666">Chapter 18, "Performing Flashback and Database Point-in-Time Recovery"</a> for more details about how the Flashback Database feature works, requirements for using Flashback Database, and how to enable the collection of flashback logs required for Flashback Database. The requirements and preparations are the same whether you use RMAN or SQL*Plus.</p>
<p><span class="bold">To perform a flashback of the database with SQL*Plus:</span></p>
<ol>
<li>
<p>Query the target database to determine the range of possible flashback SCNs. The following SQL*Plus queries show you the latest and earliest SCN in the flashback window:</p>
<pre dir="ltr">
SELECT CURRENT_SCN FROM V$DATABASE;

SELECT OLDEST_FLASHBACK_SCN, OLDEST_FLASHBACK_TIME 
FROM   V$FLASHBACK_DATABASE_LOG;
</pre></li>
<li>
<p>Use other flashback features if necessary to identify the SCN or time of the unwanted changes to your database.</p>
</li>
<li>
<p>Start SQL*Plus with administrator privileges and ensure that the database is in mounted, not open.</p>
</li>
<li>
<p>Run the <code dir="ltr">FLASHBACK DATABASE</code> statement to return the database to a prior <code dir="ltr">TIMESTAMP</code> or <code dir="ltr">SCN</code>. For example:</p>
<pre dir="ltr">
FLASHBACK DATABASE TO SCN 46963;
FLASHBACK DATABASE TO TIMESTAMP '2002-11-05 14:00:00';
FLASHBACK DATABASE 
  TO TIMESTAMP to_timestamp('2002-11-11 16:00:00', 'YYYY-MM-DD HH24:MI:SS');
</pre></li>
<li>
<p>When the operation completes, open the database read-only and perform queries to verify that you have recovered the data you need.</p>
<p>If your chosen target time was not far enough in the past, then use another <code dir="ltr">FLASHBACK DATABASE</code> statement. Otherwise, you can use <code dir="ltr">RECOVER DATABASE</code> to return the database to the present time and then try another <code dir="ltr">FLASHBACK DATABASE</code> statement.</p>
</li>
<li>
<p>When satisfied with the results, open the database with the <code dir="ltr">RESETLOGS</code> option.</p>
<p>If appropriate, you can also use Data Pump Export to save lost data, use <code dir="ltr">RECOVER DATABASE</code> to return the database to the present, and reimport the lost object.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS1008" href="../../appdev.112/e41502/adfns_flashback.htm#ADFNS1008"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> to learn how to use related flashback features such as Oracle Flashback Query and Oracle Flashback Transaction Query</div>
</div>
<!-- class="sect1" -->
<a id="i1011069"></a>
<div id="BRADV215" class="sect1">
<h2 class="sect1">Overview of User-Managed Media Recovery</h2>
<p>This section provides an overview of recovery with SQL*Plus. This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDJADBH">About User-Managed Restore and Recovery</a></p>
</li>
<li>
<p><a href="#CHDGFAFB">Automatic Recovery with the RECOVER Command</a></p>
</li>
<li>
<p><a href="#CHDBIHIG">Recovery When Archived Logs Are in the Default Location</a></p>
</li>
<li>
<p><a href="#CHDEGHBJ">Recovery When Archived Logs Are in a Nondefault Location</a></p>
</li>
<li>
<p><a href="#CHDHBBAG">Recovery Cancellation</a></p>
</li>
<li>
<p><a href="#i1007618">Parallel Media Recovery</a></p>
</li>
</ul>
<a id="CHDJADBH"></a>
<div id="BRADV210" class="sect2">
<h3 class="sect2">About User-Managed Restore and Recovery</h3>
<p>Typically, you restore a file when a media failure or user error has damaged or deleted multiple data files. <a id="sthref1990"></a><a id="sthref1991"></a><a id="sthref1992"></a>In a user-managed restore operation, you use an operating system utility to restore a backup of the file.</p>
<p><a id="sthref1993"></a><a id="sthref1994"></a><a id="sthref1995"></a><a id="sthref1996"></a><a id="sthref1997"></a>If a media failure affects data files, then the recovery procedure depends on:</p>
<ul>
<li>
<p>The archiving mode of the database: <code dir="ltr">ARCHIVELOG</code> or <code dir="ltr">NOARCHIVELOG</code></p>
</li>
<li>
<p>The type of media failure</p>
</li>
<li>
<p>The files affected by the media failure (data files, control files, archived redo logs, and the server parameter file are all candidates for restore operations)</p>
</li>
</ul>
<p>If either a permanent or temporary media failure affects any data files of a database operating in <code dir="ltr">NOARCHIVELOG</code> mode, then the database automatically shuts down. If the media failure is temporary, then correct the underlying problem and restart the database. Usually, crash recovery recovers all committed transactions from the online redo log. If the media failure is permanent, then recover the database as described in <a href="#i1007937">"Recovering a Database in NOARCHIVELOG Mode"</a>.</p>
<p><a href="#CHDFCFGE">Table 29-1</a> explains the implications for media recovery when you lose files in a database that runs in <code dir="ltr">ARCHIVELOG</code> mode.</p>
<div id="BRADV502" class="tblruleformalwide">
<p class="titleintable"><a id="sthref1998"></a><a id="CHDFCFGE"></a>Table 29-1 User-Managed Restore Operations</p>
<table class="cellalignment1945" title="User-Managed Restore Operations" summary="user-managed restore techniques" dir="ltr">
<thead>
<tr class="cellalignment1934">
<th class="cellalignment1941" id="r1c1-t3">If You Lose...</th>
<th class="cellalignment1941" id="r1c2-t3">Then...</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r2c1-t3" headers="r1c1-t3">
<p>Data files in the <code dir="ltr">SYSTEM</code> tablespace or data files with active undo segments</p>
</td>
<td class="cellalignment1942" headers="r2c1-t3 r1c2-t3">
<p>The database automatically shuts down. If the hardware problem is temporary, then fix it and restart the database. Usually, crash recovery recovers lost transactions. If the hardware problem is permanent, then restore the data files from backups and recover the database as described in <a href="#i1011267">"Performing Closed Database Recovery"</a>.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r3c1-t3" headers="r1c1-t3">
<p>Data files not in the <code dir="ltr">SYSTEM</code> tablespace or data files that do not contain active rollback or undo segments</p>
</td>
<td class="cellalignment1942" headers="r3c1-t3 r1c2-t3">
<p>Affected data files are taken offline, but the database stays open. If the unaffected portions of the database must remain available, then do not shut down the database. Take tablespaces containing problem data files offline using the temporary option, then recover them as described in <a href="#i1007051">"Performing Open Database Recovery"</a>.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r4c1-t3" headers="r1c1-t3">
<p>All copies of the current control file</p>
</td>
<td class="cellalignment1942" headers="r4c1-t3 r1c2-t3">
<p>You must restore a backup control file and then open the database with the <code dir="ltr">RESETLOGS</code> option.</p>
<p>If you do not have a backup, then you can attempt to re-create the control file. If possible, use the script included in the <code dir="ltr">ALTER</code> <code dir="ltr">DATABASE</code> <code dir="ltr">BACKUP</code> <code dir="ltr">CONTROLFILE</code> <code dir="ltr">TO</code> <code dir="ltr">TRACE</code> output. Additional work may be required to match the control file structure with the current database structure.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r5c1-t3" headers="r1c1-t3">
<p>One copy of a multiplexed control file</p>
</td>
<td class="cellalignment1942" headers="r5c1-t3 r1c2-t3">
<p><a id="sthref1999"></a><a id="sthref2000"></a>Copy an intact multiplexed control file into the location of the damaged or missing control file and open the database. If you cannot copy the control file to its original location, then edit the initialization parameter file to reflect a new location or remove the damaged control file. Then, open the database.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r6c1-t3" headers="r1c1-t3">
<p>One or more archived logs required for media recovery</p>
</td>
<td class="cellalignment1942" headers="r6c1-t3 r1c2-t3">
<p>You must restore backups of these archived logs for recovery to proceed. You can restore either to the default or nondefault location. If you do not have backups, then you must perform incomplete recovery up to an SCN before the first missing redo log and open <code dir="ltr">RESETLOGS</code>.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r7c1-t3" headers="r1c1-t3">
<p>The server parameter file (SPFILE)</p>
</td>
<td class="cellalignment1942" headers="r7c1-t3 r1c2-t3">
<p>If you have a backup of the server parameter file, then restore it. Alternatively, if you have a backup of the client-side initialization parameter file, then you can restore a backup of this file, start the instance, and then re-create the server parameter file.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformalwide" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Restore and recovery of Oracle Managed Files is no different from restore and recovery of user-named files.</div>
<p><a id="sthref2001"></a><a id="sthref2002"></a><a id="sthref2003"></a><a id="sthref2004"></a><a id="sthref2005"></a>To <a id="sthref2006"></a>perform media recovery, Oracle recommends that you use the <code dir="ltr">RECOVER</code> statement in SQL*Plus. You can also use the SQL statement <code dir="ltr">ALTER</code> <code dir="ltr">DATABASE</code> <code dir="ltr">RECOVER</code>, but the <code dir="ltr">RECOVER</code> statement is usually simpler. To start any type of media recovery, you must adhere to the following restrictions:</p>
<ul>
<li>
<p>You must have administrator privileges.</p>
</li>
<li>
<p>All recovery sessions must be compatible.</p>
</li>
<li>
<p>One session cannot start complete media recovery while another performs incomplete media recovery.</p>
</li>
<li>
<p>You cannot start media recovery if you are connected to the database through a shared server process.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDGFAFB"></a>
<div id="BRADV90025" class="sect2">
<h3 class="sect2">Automatic Recovery with the RECOVER Command</h3>
<p>When using SQL*Plus to perform media recovery, the easiest strategy is to perform automatic recovery with the SQL*Plus <code dir="ltr">RECOVER</code> command. Automatic recovery initiates recovery without manually prompting SQL*Plus to apply each individual archived redo log.</p>
<p><a id="sthref2007"></a><a id="sthref2008"></a><a id="sthref2009"></a><a id="sthref2010"></a>When using SQL*Plus, you have the following options for automating the application of the default file names of archived redo logs needed during recovery:</p>
<ul>
<li>
<p>Issuing <code dir="ltr">SET</code> <code dir="ltr">AUTORECOVERY</code> <code dir="ltr">ON</code> before issuing the <code dir="ltr">RECOVER</code> command. If you perform recovery with <code dir="ltr">SET</code> <code dir="ltr">AUTORECOVERY</code> <code dir="ltr">OFF</code>, which is the default, then you must enter file names manually or accept the suggested file name by pressing Enter.</p>
</li>
<li>
<p>Specifying the <code dir="ltr">AUTOMATIC</code> keyword as an option of the <code dir="ltr">RECOVER</code> command.</p>
</li>
</ul>
<p>In either case, no interaction is required when you issue the <code dir="ltr">RECOVER</code> command if the necessary files are in the correct locations with the correct names. When the database successfully applies a redo log file, the following message is returned:</p>
<pre dir="ltr">
Log applied.
</pre>
<p>You are then prompted for the next redo log in the sequence. If the most recently applied log is the last required log, then recovery is terminated.</p>
<p>The file names used for automatic recovery are derived from the concatenated values of <code dir="ltr">LOG_ARCHIVE_FORMAT</code> <a id="sthref2011"></a>with <code dir="ltr">LOG_ARCHIVE_DEST_</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>, where <code dir="ltr"><span class="codeinlineitalic">n</span></code> is the highest value among all enabled, local destinations. For example, assume that the following initialization parameter settings are in effect in the database instance:</p>
<pre dir="ltr">
LOG_ARCHIVE_DEST_1 = "LOCATION=/arc_dest/loc1/" 
LOG_ARCHIVE_DEST_2 = "LOCATION=/arc_dest/loc2/"
LOG_ARCHIVE_DEST_STATE_1 = DEFER 
LOG_ARCHIVE_DEST_STATE_2 = ENABLE 
LOG_ARCHIVE_FORMAT = arch_%t_%s_%r.arc
</pre>
<p>In this example, SQL*Plus automatically suggests the file name <code dir="ltr">/arc_dest/loc2/arch_%t_%s_%r.arc</code> (where <code dir="ltr">%t</code> is the thread, <code dir="ltr">%s</code> is the sequence and <code dir="ltr">%r</code> is the resetlogs ID).</p>
<div id="BRADV90026" class="sect3"><a id="sthref2012"></a>
<h4 class="sect3">Automatic Recovery with SET AUTORECOVERY</h4>
<p>After restoring data file backups, you can run the <code dir="ltr">SET</code> <code dir="ltr">AUTORECOVERY</code> <code dir="ltr">ON</code> command to enable on automatic recovery. For example, you could enter the following commands in SQL*Plus to perform automatic recovery and open the database:</p>
<pre dir="ltr">
STARTUP MOUNT
SET AUTORECOVERY ON
RECOVER DATABASE
ALTER DATABASE OPEN;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
After issuing the SQL*Plus <code dir="ltr">RECOVER</code> command, you can view all files that have been considered for recovery in the <code dir="ltr">V$RECOVERY_FILE_STATUS</code> view. You can access status information for each file in the <code dir="ltr">V$RECOVERY_STATUS</code> view. These views are not accessible after you terminate the recovery session.</div>
</div>
<!-- class="sect3" -->
<div id="BRADV90027" class="sect3"><a id="sthref2013"></a>
<h4 class="sect3">Automatic Recovery with the AUTOMATIC Option of the RECOVER Command</h4>
<p>Besides using <code dir="ltr">SET</code> <code dir="ltr">AUTORECOVERY</code> to turn on automatic recovery, you can also simply specify the <code dir="ltr">AUTOMATIC</code> keyword in the <code dir="ltr">RECOVER</code> command. For example, you could enter the following commands in SQL*Plus to perform automatic recovery and open the database:</p>
<pre dir="ltr">
STARTUP MOUNT
RECOVER AUTOMATIC DATABASE
ALTER DATABASE OPEN;
</pre>
<p><a id="sthref2014"></a><a id="sthref2015"></a><a id="sthref2016"></a>If you use an Oracle Real Application Clusters configuration, and if you are performing incomplete recovery or using a backup control file, then the database can only compute the name of the first archived redo log file from the <span class="italic">first</span> redo thread. You may have to manually apply the first log file from the other redo threads. After the first log file in a given thread has been supplied, the database can suggest the names of the subsequent logs in this thread.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDBIHIG"></a>
<div id="BRADV90028" class="sect2">
<h3 class="sect2">Recovery When Archived Logs Are in the Default Location</h3>
<p><a id="sthref2017"></a><a id="sthref2018"></a>Recovering when the archived logs are in their default location is the simplest case. As a log is needed, the database suggests the file name. If you run nonautomatic media recovery with SQL*Plus, then the output is displayed in the format shown by this example:</p>
<pre dir="ltr">
ORA-00279: change 53577 generated at 11/26/02 19:20:58 needed for thread 1
ORA-00289: suggestion : /oracle/oradata/trgt/arch/arcr_1_802.arc
ORA-00280: change 53577 for thread 1 is in sequence #802
Specify log: [&lt;RET&gt; for suggested | AUTO | FROM logsource | CANCEL ]
</pre>
<p>Similar messages are returned when you use an <code dir="ltr">ALTER</code> <code dir="ltr">DATABASE</code> <code dir="ltr">...</code> <code dir="ltr">RECOVER</code> statement. However, no prompt is displayed.<span class="bold"><a id="sthref2019"></a><a id="sthref2020"></a><a id="sthref2021"></a></span></p>
<p>The database constructs suggested archived log file names by concatenating the current values of the initialization parameters <a id="sthref2022"></a><a id="sthref2023"></a><code dir="ltr">LOG_ARCHIVE_DEST_</code><code dir="ltr"><span class="codeinlineitalic">n</span></code> (where <code dir="ltr"><span class="codeinlineitalic">n</span></code> is the highest value among all enabled, local destinations) and <code dir="ltr">LOG_ARCHIVE_FORMAT</code> and using log history data from the control file. The following are possible settings:</p>
<pre dir="ltr">
LOG_ARCHIVE_DEST_1 = 'LOCATION = /oracle/oradata/trgt/arch/'
LOG_ARCHIVE_FORMAT = arcr_%t_%s.arc

SELECT NAME FROM V$ARCHIVED_LOG;

NAME
----------------------------------------
/oracle/oradata/trgt/arch/arcr_1_467.arc
/oracle/oradata/trgt/arch/arcr_1_468.arc
/oracle/oradata/trgt/arch/arcr_1_469.arc
</pre>
<p>Thus, if all the required archived log files are mounted at <a id="sthref2024"></a>the <code dir="ltr">LOG_ARCHIVE_DEST_1</code> destination, and if the value for <code dir="ltr">LOG_ARCHIVE_FORMAT</code> is never altered, then the database can suggest and apply log files to complete media recovery automatically.</p>
</div>
<!-- class="sect2" -->
<a id="CHDEGHBJ"></a>
<div id="BRADV90029" class="sect2">
<h3 class="sect2">Recovery When Archived Logs Are in a Nondefault Location</h3>
<p>Performing media recovery when archived logs are not in their default location adds an extra step. You have the following mutually exclusive options:</p>
<ul>
<li>
<p>Edit the <code dir="ltr">LOG_ARCHIVE_DEST_</code><code dir="ltr"><span class="codeinlineitalic">n</span></code> parameter that specifies the location of the archived redo logs, then recover as usual.</p>
</li>
<li>
<p>Use the <code dir="ltr">SET</code> statement in SQL*Plus to specify the nondefault log location before recovery, or the <code dir="ltr">LOGFILE</code> parameter of the <code dir="ltr">RECOVER</code> command</p>
</li>
</ul>
<a id="CHDFADHI"></a>
<div id="BRADV90030" class="sect3">
<h4 class="sect3">Resetting the Archived Log Destination</h4>
<p><a id="sthref2025"></a><a id="sthref2026"></a>You can edit the initialization parameter file or issue <code dir="ltr">ALTER</code> <code dir="ltr">SYSTEM</code> statements to change the default location of the archived redo logs.</p>
<p><span class="bold">To change the default archived log location before recovery:</span></p>
<ol>
<li>
<p>Use an operating system utility to restore the archived logs to a nondefault location. For example, enter:</p>
<pre dir="ltr">
% cp /backup/arch/* /tmp/
</pre></li>
<li>
<p>Change the value for the archive log parameter to the nondefault location. You can issue <code dir="ltr">ALTER</code> <code dir="ltr">SYSTEM</code> statements while the instance is started, or edit the initialization parameter file and then start the database instance. For example, while the instance is shut down edit the parameter file as follows:</p>
<pre dir="ltr">
LOG_ARCHIVE_DEST_1 = 'LOCATION=/tmp/'
LOG_ARCHIVE_FORMAT = arcr_%t_%s.arc
</pre></li>
<li>
<p>Using SQL*Plus, start a new instance by specifying the edited initialization parameter file, and then mount the database. For example, enter:</p>
<pre dir="ltr">
STARTUP MOUNT
</pre></li>
<li>
<p>Begin media recovery as usual. For example, enter:</p>
<pre dir="ltr">
RECOVER DATABASE
</pre></li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CHDCICAJ"></a>
<div id="BRADV90031" class="sect3">
<h4 class="sect3">Overriding the Archived Log Destination</h4>
<p>In some cases, you may want to override the current setting for the archiving destination parameter as a source for archived log files.</p>
<p><span class="bold">To recover archived logs in a nondefault location with SET LOGSOURCE:</span></p>
<ol>
<li>
<p><span class="bold"><a id="sthref2027"></a><a id="sthref2028"></a></span>Using an operating system utility, copy the archived redo logs to an alternative location. For example, enter:</p>
<pre dir="ltr">
% cp $ORACLE_HOME/oradata/trgt/arch/* /tmp
</pre></li>
<li>
<p>Specify the alternative location within SQL*Plus for the recovery operation. Use the<a id="sthref2029"></a><a id="sthref2030"></a><a id="sthref2031"></a><a id="sthref2032"></a><a id="sthref2033"></a><a id="sthref2034"></a> <code dir="ltr">LOGSOURCE</code> parameter of the <code dir="ltr">SET</code> statement. For example, start SQL*Plus and run:</p>
<pre dir="ltr">
SET LOGSOURCE "/tmp"
</pre></li>
<li>
<p>Recover the offline tablespace. For example, to recover the offline tablespace <code dir="ltr">users</code> do the following:</p>
<pre dir="ltr">
RECOVER AUTOMATIC TABLESPACE users
</pre></li>
<li>
<p>Alternatively, you can avoid running <code dir="ltr">SET</code> <code dir="ltr">LOGSOURCE</code> and simply run:</p>
<pre dir="ltr">
RECOVER AUTOMATIC TABLESPACE users FROM "/tmp"
</pre></li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
Overriding the redo log source does not affect the archive redo log destination for online redo log groups being archived.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDHBBAG"></a>
<div id="BRADV99983" class="sect2">
<h3 class="sect2">Recovery Cancellation</h3>
<p><a id="sthref2035"></a><a id="sthref2036"></a><a id="sthref2037"></a><a id="sthref2038"></a><a id="sthref2039"></a><a id="sthref2040"></a><a id="sthref2041"></a>If you start media recovery and must then interrupt it, then either enter <code dir="ltr">CANCEL</code> when prompted for a redo log file, or use your operating system's interrupt signal if you must terminate when recovering an individual data file, or when automated recovery is in progress. After recovery is canceled, you can resume it later with the <code dir="ltr">RECOVER</code> command. Recovery resumes where it left off when it was canceled.</p>
</div>
<!-- class="sect2" -->
<a id="i1007618"></a>
<div id="BRADV221" class="sect2">
<h3 class="sect2">Parallel Media Recovery</h3>
<p><a id="sthref2042"></a><a id="sthref2043"></a>By default, Oracle Database uses <span class="glossaryterm">parallel media recovery</span> to improve performance of the roll forward phase of media recovery. In parallel recovery of media, the database uses a "division of labor" approach to allocate different processes to different data blocks while rolling forward, thereby making the procedure more efficient. The number of processes used is derived from the <code dir="ltr">CPU_COUNT</code> initialization parameter, which by default equals the number of CPUs on the system. For example, if parallel recovery is performed on a system where <code dir="ltr">CPU_COUNT</code> is <code dir="ltr">4</code>, and only one data file is recovered, then four spawned processes read blocks from the archive logs and apply redo.</p>
<p>Typically, media recovery is limited by data block reads and writes. Parallel recovery attempts to use all of the available I/O bandwidth of the system to improve performance. Unless there is a system I/O bottleneck or poor asynchronous I/O support, parallel recovery is likely to improve performance of recovery.</p>
<p>To override the default behavior of performing parallel recovery, use the SQL*Plus <a id="sthref2044"></a><code dir="ltr">RECOVER</code> command with the <code dir="ltr">NOPARALLEL</code> option, or <code dir="ltr">RECOVER</code> <code dir="ltr">PARALLEL</code> <code dir="ltr">0</code>. The <code dir="ltr">RECOVERY_PARALLELISM</code> initialization parameter controls instance or crash recovery <span class="italic">only</span>. Media recovery is not affected by the value used for <code dir="ltr">RECOVERY_PARALLELISM</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQPUG" href="../../server.112/e16604/toc.htm"><span class="italic">SQL*Plus User's Guide and Reference</span></a> for more information about the SQL*Plus <code dir="ltr">RECOVER</code> <code dir="ltr">...</code> <code dir="ltr">PARALLEL</code> and <code dir="ltr">NOPARALLEL</code> commands</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1011065"></a>
<div id="BRADV216" class="sect1">
<h2 class="sect1">Performing Complete Database Recovery</h2>
<p><a id="sthref2045"></a><a id="sthref2046"></a><a id="sthref2047"></a><a id="sthref2048"></a>Typically, you perform complete recovery of the database when a media failure makes one or more data files inaccessible. The <code dir="ltr">V$RECOVER_FILE</code> view indicates which files need recovery. When <a id="sthref2049"></a>you perform complete database recovery, you use all available redo to recover the database to the current SCN.</p>
<p>Depending on the circumstances, you can either recover the whole database at once or recover individual tablespaces or data files. Because you do not have to open the database with the <code dir="ltr">RESETLOGS</code> option after complete recovery, you have the option of recovering some data files at one time and the remaining data files later.</p>
<p>The procedures in this section assume the following:</p>
<ul>
<li>
<p>The current control file is available. If you must restore or re-create the control file, then see <a href="osadvsce.htm#CHDGJAEH">"Recovering After the Loss of All Current Control Files"</a> and <a href="osadvsce.htm#CHDJAABB">"Re-Creating a Control File"</a>.</p>
</li>
<li>
<p>You have backups of all needed data files. If you are missing data file backups, then see <a href="osadvsce.htm#i1006226">"Re-Creating Data Files When Backups Are Unavailable"</a>.</p>
</li>
<li>
<p>All necessary archived redo logs are available. If you are missing redo required to completely recover the database, then you must perform database point-in-time recovery. See <a href="#i1007175">"Performing Incomplete Database Recovery"</a>.</p>
</li>
</ul>
<p><a id="sthref2050"></a><a id="sthref2051"></a><a id="sthref2052"></a>This section describes the steps necessary to complete media recovery operations, and includes the following topics:</p>
<ul>
<li>
<p><a href="#i1011267">Performing Closed Database Recovery</a></p>
</li>
<li>
<p><a href="#i1007051">Performing Open Database Recovery</a></p>
</li>
</ul>
<a id="i1011267"></a>
<div id="BRADV90032" class="sect2">
<h3 class="sect2">Performing Closed Database Recovery</h3>
<p><a id="sthref2053"></a><a id="sthref2054"></a>This section describes steps to perform complete recovery while the database is not open. You can recover either all damaged data files in one operation or perform individual recovery of each damaged data file in separate operations.</p>
<p><span class="bold">To restore and recover damaged or missing data files:</span></p>
<ol>
<li id="CHDJEDGI">
<p>If the database is open, query <a id="sthref2055"></a><code dir="ltr">V$RECOVER_FILE</code> to determine which data files must be recovered and why they must be recovered.</p>
<p>If you are planning to perform complete recovery rather than point-in-time recovery, then you can recover only those data files that require recovery, rather than the whole database. For point-in-time recovery, you must restore and recover all data files, unless you perform TSPITR as described in <a href="rcmtspit.htm#CIHGGAFH">Chapter 21, "Performing RMAN Tablespace Point-in-Time Recovery (TSPITR)"</a>. You can also use Flashback Database, but this procedure affects all data files and returns the entire database to a past time.</p>
<p>You can query the <code dir="ltr">V$RECOVER_FILE</code> view to list data files requiring recovery by data file number with their status and error information.</p>
<pre dir="ltr">
SELECT FILE#, ERROR, ONLINE_STATUS, CHANGE#, TIME 
FROM   V$RECOVER_FILE;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot use <code dir="ltr">V$RECOVER_FILE</code> with a control file restored from backup or a control file that was re-created after the time of the media failure affecting the data files. A restored or re-created control file does not contain the information needed to update <code dir="ltr">V$RECOVER_FILE</code> accurately.</div>
<p>You can also perform useful joins by using the data file number and the <code dir="ltr">V$DATAFILE</code> and <code dir="ltr">V$TABLESPACE</code> views to get the data file and tablespace names. Use the following SQL*Plus commands to format the output of the query:</p>
<pre dir="ltr">
COL DF# FORMAT 999
COL DF_NAME FORMAT A35
COL TBSP_NAME FORMAT A7
COL STATUS FORMAT A7
COL ERROR FORMAT A10
COL CHANGE# FORMAT 99999999
SELECT r.FILE# AS df#, d.NAME AS df_name, t.NAME AS tbsp_name, 
       d.STATUS, r.ERROR, r.CHANGE#, r.TIME
FROM   V$RECOVER_FILE r, V$DATAFILE d, V$TABLESPACE t
WHERE  t.TS# = d.TS#
AND    d.FILE# = r.FILE#;
</pre>
<p>The <code dir="ltr">ERROR</code> column identifies the problem for each file requiring recovery.</p>
</li>
<li>
<p><a id="sthref2056"></a><a id="sthref2057"></a>Query the <code dir="ltr">V$ARCHIVED_LOG</code> and <code dir="ltr">V$RECOVERY_LOG</code> views to determine which archived redo log files are needed.</p>
<p><code dir="ltr">V$ARCHIVED_LOG</code> lists file names for all archived redo logs, whereas <code dir="ltr">V$RECOVERY_LOG</code> lists only the archived redo logs that the database needs to perform media recovery. The latter view also includes the probable names of the files based on the naming convention specified by using the <code dir="ltr">LOG_ARCHIVE_FORMAT</code> parameter.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code dir="ltr">V$RECOVERY_LOG</code> is only populated when media recovery is required for a data file. Thus, this view is not useful for a planned recovery, such as recovery from a user error.
<p>If a data file requires recovery, but no backup of the data file exists, then you need all redo generated starting from the time when the data file was added to the database.</p>
</div>
</li>
<li id="CHDGADJF">
<p>If all archived logs are available in the default location, then skip to the Step 4.</p>
<p>If some archived logs must be restored, and if sufficient space is available, then restore the required archived redo log files to the location specified <a id="sthref2058"></a>by <code dir="ltr">LOG_ARCHIVE_DEST_1</code>. The database locates the correct log automatically when required during media recovery. For example, you might enter a command such as the following on Linux or UNIX:</p>
<pre dir="ltr">
% cp /disk2/arch/* $ORACLE_HOME/oradata/trgt/arch
</pre>
<p>If sufficient space is not available, then restore some or all of the required archived redo log files to an alternative location.</p>
</li>
<li>
<p>If the database is open, then shut it down. For example:</p>
<pre dir="ltr">
SHUTDOWN IMMEDIATE
</pre></li>
<li>
<p>Inspect the media to determine the source of the problem.</p>
<p>If the hardware problem that caused the media failure was temporary, and if the data was undamaged (for example, a disk or controller power failure occurred), then no media recovery is required: start the database and resume normal operations.</p>
<p>If you cannot repair the problem, then proceed to the Step 6.</p>
</li>
<li>
<p>If the files are permanently damaged, then identify the most recent backups for the damaged files. Restore <span class="italic">only</span> the data files damaged by the media failure: do not restore undamaged data files or any online redo log files.</p>
<p>For example, if <code dir="ltr"><span class="codeinlineitalic">ORACLE_HOME/</span></code><code dir="ltr">oradata/trgt/users01.dbf</code> is the only damaged file, then you may find that <code dir="ltr">/backup/users01_10_24_02.dbf</code> is the most recent backup of this file. If you do not have a backup of a specific data file, then you may be able to create an empty replacement file that can be recovered.</p>
</li>
<li>
<p>Use an operating system utility to restore the data files to their default location or to a new location. For example, a Linux or UNIX user restoring <code dir="ltr">users01.dbf</code> to its default location might enter:</p>
<pre dir="ltr">
% cp /backup/users01_10_24_06.dbf $ORACLE_HOME/oradata/trgt/users01.dbf
</pre>
<p>Use the following guidelines when determining where to restore data file backups:</p>
<ul>
<li>
<p>If the hardware problem is repaired and you can restore the data files to their default locations, then restore the data files to their default locations and begin media recovery.</p>
</li>
<li>
<p>If the hardware problem persists and you cannot restore data files to their original locations, then restore the data files to an alternative storage device. Indicate the new location of these files in the control file with the <code dir="ltr">ALTER DATABASE RENAME FILE</code> statement. See <a class="olink ADMIN11430" href="../../server.112/e25494/dfiles.htm#ADMIN11430"><span class="italic">Oracle Database Administrator's Guide</span></a>.</p>
</li>
<li>
<p>If you are restoring a data file to a raw disk or partition, then the technique is basically the same as when you are restoring to a file on a file system. Be aware of the naming conventions for files on raw devices (which differ depending on the operating system), and use an operating system utility that supports raw devices.</p>
</li>
</ul>
</li>
<li id="CHDGACIB">
<p>Connect to the database with administrator privileges. Then start a new instance and mount, but do not open, the database. For example, enter:</p>
<pre dir="ltr">
STARTUP MOUNT
</pre></li>
<li>
<p>If you restored one or more damaged data files to alternative locations, then update the control file of the database to reflect the new data file names. For example, to change the file name of the data file in tablespace <code dir="ltr">users</code> you might enter:</p>
<pre dir="ltr">
ALTER DATABASE RENAME FILE '?/oradata/trgt/users01.dbf' TO
                           '/disk2/users01.dbf';
</pre></li>
<li>
<p>Obtain the data file names and statuses of all data files by checking the list of data files that normally accompanies the current control file or by querying the <code dir="ltr">V$DATAFILE</code> view. For example, enter:</p>
<pre dir="ltr">
SELECT NAME,STATUS FROM V$DATAFILE;
</pre></li>
<li>
<p>Ensure that all data files requiring recovery are online. The only exceptions are data files in an offline tablespace that was taken offline normally or data files in a read-only tablespace. For example, to guarantee that a data file named <code dir="ltr">/oracle/dbs/tbs_10.f</code> is online, enter the following:</p>
<pre dir="ltr">
ALTER DATABASE DATAFILE '/oracle/dbs/tbs_10.f' ONLINE;
</pre>
<p>If a specified data file is already online, then the database ignores the statement. If you prefer, create a script to bring all data files online at once, as in the following example:</p>
<pre dir="ltr">
SPOOL onlineall.sql
SELECT 'ALTER DATABASE DATAFILE '''||name||''' ONLINE;' FROM V$DATAFILE;
SPOOL OFF

SQL&gt; @onlineall
</pre></li>
<li>
<p>If you restored archived redo logs to an alternative location, then you can specify the location before media recovery with the<a id="sthref2059"></a><a id="sthref2060"></a><a id="sthref2061"></a><a id="sthref2062"></a><a id="sthref2063"></a><a id="sthref2064"></a> <code dir="ltr">LOGSOURCE</code> parameter of the <code dir="ltr">SET</code> command in SQL*Plus. For example, if the logs are staged in <code dir="ltr">/tmp</code>, you can enter the following command:</p>
<pre dir="ltr">
SET LOGSOURCE /tmp
</pre>
<p>Alternatively, you can skip Step 12 and use the <code dir="ltr">FROM</code> parameter on the <code dir="ltr">RECOVER</code> command as in Step 13. For example, if the logs are staged in <code dir="ltr">/tmp</code>, you can enter the following command:</p>
<pre dir="ltr">
RECOVER AUTOMATIC FROM '/tmp' DATABASE
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Overriding the redo log source does not affect the archive redo log destination for online redo log groups being archived.</div>
</li>
<li>
<p>Issue a statement to recover the database, tablespace, or data file. For example, enter one of the following <code dir="ltr">RECOVER</code> commands:</p>
<pre dir="ltr">
RECOVER AUTOMATIC DATABASE   # whole database
RECOVER AUTOMATIC TABLESPACE users   # specific tablespace
RECOVER AUTOMATIC DATAFILE '?/oradata/trgt/users01.dbf'; # specific data file
</pre>
<p>If you choose not to automate the application of archived redo logs, then you must accept or reject each prompted log. If you automate recovery, then the database applies the logs automatically. Recovery continues until all required archived and online redo logs have been applied to the restored data files. The database notifies you when media recovery is complete:</p>
<pre dir="ltr">
Media recovery complete.
</pre>
<p>If no archived redo logs are required for complete media recovery, then the database applies all necessary online redo log files and terminates recovery.</p>
</li>
<li>
<p>After recovery terminates, open the database for use:</p>
<pre dir="ltr">
ALTER DATABASE OPEN;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1011069">"Overview of User-Managed Media Recovery"</a> for more information about applying redo log files<a class="olink REFRN" href="../../server.112/e40402/toc.htm"><span class="italic">Oracle Database Reference</span></a></div>
</li>
<li>
<p>After archived logs are applied, and after making sure that a copy of each archived log group still exists in offline storage, delete the restored copy of the archived redo log file to free disk space. For example:<a id="sthref2065"></a></p>
<pre dir="ltr">
% rm /tmp/*.arc
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1011069">"Overview of User-Managed Media Recovery"</a> for an overview of log application during media recovery</div>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1007051"></a>
<div id="BRADV90033" class="sect2">
<h3 class="sect2">Performing Open Database Recovery</h3>
<p><span class="bold"><a id="sthref2066"></a><a id="sthref2067"></a><a id="sthref2068"></a></span><a id="sthref2069"></a>It is possible for a media failure to occur while the database remains open, leaving the undamaged data files online and available for use. Damaged data files&mdash;but not the tablespaces that contain them&mdash;are automatically taken offline if the database writer cannot write to them. If the database writer cannot open a data file, an error is still returned. Queries that cannot read damaged files return errors, but the data files are not taken offline because of the failed queries. For example, you may run a SQL query and see output such as:</p>
<pre dir="ltr">
ERROR at line 1:
ORA-01116: error in opening database file 3
ORA-01110: data file 11: '/oracle/oradata/trgt/cwmlite02.dbf'
ORA-27041: unable to open file
SVR4 Error: 2: No such file or directory
Additional information: 3
</pre>
<p>You cannot use the procedure in this section to perform complete media recovery on the <code dir="ltr">SYSTEM</code> tablespace while the database is open. If the media failure damages data files of the <code dir="ltr">SYSTEM</code> tablespace, then the database automatically shuts down.</p>
<p class="subhead2"><a id="BRADV619"></a>To restore data files in an open database:</p>
<ol>
<li>
<p>Follow Step <a href="#CHDJEDGI">1</a> through Step <a href="#CHDGADJF">3</a> in <a href="#i1011267">"Performing Closed Database Recovery"</a>.</p>
</li>
<li>
<p>If the database is open, then take all tablespaces containing damaged data files offline. For example, if the tablespaces <code dir="ltr">users</code> and <code dir="ltr">tools</code> contain damaged data files, then execute the following SQL statements:</p>
<pre dir="ltr">
ALTER TABLESPACE users OFFLINE TEMPORARY;
ALTER TABLESPACE tools OFFLINE TEMPORARY;
</pre>
<p>If you specify <code dir="ltr">TEMPORARY</code>, then Oracle Database creates a <a href="glossary.htm#i432263"><span class="xrefglossterm">checkpoint</span></a> for all online data files in the tablespace. Files that are offline when you issue this statement may require media recovery before you bring the tablespace back online. If you specify <code dir="ltr">IMMEDIATE</code>, then you must perform media recovery on the tablespace before bringing it back online.</p>
</li>
<li>
<p>Inspect the media to determine the source of the problem.</p>
<p>As explained in <a href="osbackup.htm#CEGIHAEF">"Running the DBVERIFY Utility"</a>, you can use the DBVERIFY utility to run an integrity check on offline data files.</p>
<p>If the hardware problem that caused the media failure was temporary, and if the data was undamaged, then no media recovery is required. You can bring the offline tablespaces online and resume normal operations. If you cannot repair the problem, or if DBVERIFY reports corrupt blocks, then proceed to the Step 4.</p>
</li>
<li>
<p>If files are permanently damaged, then use operating system commands to restore the most recent backup files of <span class="italic">only</span> the data files damaged by the media failure. For example, to restore <code dir="ltr">users01.dbf</code> you might use the <code dir="ltr">cp</code> command on Linux or UNIX as follows:</p>
<pre dir="ltr">
% cp /disk2/backup/users01.dbf $ORACLE_HOME/oradata/trgt/users01.dbf
</pre>
<p>If the hardware problem is fixed and the data files can be restored to their original locations, then do so. Otherwise, restore the data files to an alternative storage device. Do not restore undamaged data files, online redo logs, or control files.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In some circumstances, if you do not have a backup of a specific data file, you can use the <code dir="ltr">ALTER</code> <code dir="ltr">DATABASE</code> <code dir="ltr">CREATE</code> <code dir="ltr">DATAFILE</code> statement to create an empty replacement file that is recoverable.</div>
</li>
<li>
<p>If you restored one or more damaged data files to alternative locations, then update the control file of the database to reflect the new data file names. For example, to change the file name of the data file in tablespace <code dir="ltr">users</code> you might enter:</p>
<pre dir="ltr">
ALTER DATABASE RENAME FILE '?/oradata/trgt/users01.dbf' TO
                           '/disk2/users01.dbf';
</pre></li>
<li>
<p>If you restored archived redo logs to an alternative location, then you can specify the location before media recovery with the<a id="sthref2070"></a><a id="sthref2071"></a><a id="sthref2072"></a><a id="sthref2073"></a><a id="sthref2074"></a><a id="sthref2075"></a> <code dir="ltr">LOGSOURCE</code> parameter of the <code dir="ltr">SET</code> command in SQL*Plus. For example, if the logs are staged in <code dir="ltr">/tmp</code>, you can enter the following command:</p>
<pre dir="ltr">
SET LOGSOURCE /tmp
</pre>
<p>Alternatively, you can skip Step 6 and use the <code dir="ltr">FROM</code> parameter on the <code dir="ltr">RECOVER</code> command as in Step 7. For example, if the logs are staged in <code dir="ltr">/tmp</code>, you can enter the following command:</p>
<pre dir="ltr">
RECOVER AUTOMATIC FROM '/tmp' TABLESPACE users, tools;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Overriding the redo log source does not affect the archive redo log destination for online redo log groups being archived.</div>
</li>
<li>
<p>Connect to the database with administrator privileges, and start offline tablespace recovery of all damaged data files in one or more offline tablespaces using one step. For example, recover <code dir="ltr">users</code> and <code dir="ltr">tools</code> as follows:</p>
<pre dir="ltr">
RECOVER AUTOMATIC TABLESPACE users, tools;
</pre>
<p>The database begins the roll forward phase of media recovery by applying the necessary archived and online redo logs to reconstruct the restored data files. Unless the application of files is automated with the <code dir="ltr">RECOVER</code> <code dir="ltr">AUTOMATIC</code> or <code dir="ltr">SET</code> <code dir="ltr">AUTORECOVERY</code> <code dir="ltr">ON</code> commands, the database prompts for each required redo log file.</p>
<p>Recovery continues until all required archived logs have been applied to the data files. The online redo logs are then automatically applied to the restored data files to complete media recovery. If no archived redo logs are required for complete media recovery, then the database does not prompt for any. Instead, all necessary online redo logs are applied, and media recovery is complete.</p>
</li>
<li>
<p>When the damaged tablespaces are recovered up to the moment that media failure occurred, bring the offline tablespaces online. For example, to bring tablespaces <code dir="ltr">users</code> and <code dir="ltr">tools</code> online, issue the following statements:</p>
<pre dir="ltr">
ALTER TABLESPACE users ONLINE;
ALTER TABLESPACE tools ONLINE;
</pre></li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN012" href="../../server.112/e25494/dfiles.htm#ADMIN012"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn about creating data files and <a class="olink SQLRF00802" href="../../server.112/e41084/statements_1004.htm#SQLRF00802"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn about <code dir="ltr">ALTER</code> <code dir="ltr">DATABASE</code> <code dir="ltr">RENAME</code> <code dir="ltr">FILE</code></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007175"></a>
<div id="BRADV217" class="sect1">
<h2 class="sect1">Performing Incomplete Database Recovery</h2>
<p><a id="sthref2076"></a><a id="sthref2077"></a><a id="sthref2078"></a><a id="sthref2079"></a><a id="sthref2080"></a><a id="sthref2081"></a><a id="sthref2082"></a><a id="sthref2083"></a>Typically, you perform <a href="glossary.htm#i999787"><span class="xrefglossterm">database point-in-time recovery (DBPITR)</span></a> in the following situations:</p>
<ul>
<li>
<p>You want to recover the database to an SCN before a user or administrative error.</p>
</li>
<li>
<p>The database contains corrupt blocks.</p>
</li>
<li>
<p>Complete database recovery failed because all necessary archived redo logs were not available.</p>
</li>
<li>
<p>You are creating a test database or a reporting database from production database backups.</p>
</li>
</ul>
<p><a id="sthref2084"></a><a id="sthref2085"></a><a id="sthref2086"></a>If the database is operating in <code dir="ltr">ARCHIVELOG</code> mode, and if the only copy of an archived redo log file is damaged, then the damaged file does not affect the present operation of the database. <a href="#CHDEHHEI">Table 29-2</a> describes situations that can arise depending on when the redo log was written and when you backed up the data file.</p>
<div id="BRADV503" class="tblformal">
<p class="titleintable"><a id="sthref2087"></a><a id="CHDEHHEI"></a>Table 29-2 Loss of Archived Redo Logs</p>
<table class="cellalignment1940" title="Loss of Archived Redo Logs" summary="Loss of archived redo logs" dir="ltr">
<thead>
<tr class="cellalignment1934">
<th class="cellalignment1941" id="r1c1-t16">If You Backed Up...</th>
<th class="cellalignment1941" id="r1c2-t16">Then...</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r2c1-t16" headers="r1c1-t16">
<p>All data files after the filled online redo log group (which is now archived) was written</p>
</td>
<td class="cellalignment1942" headers="r2c1-t16 r1c2-t16">
<p>The archived version of the filled online redo log group is not required for complete media recovery.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r3c1-t16" headers="r1c1-t16">
<p>A specific data file before the filled online redo log group was written</p>
</td>
<td class="cellalignment1942" headers="r3c1-t16 r1c2-t16">
<p>If the corresponding data file is damaged by a permanent media failure, then use the most recent backup of the damaged data file and perform tablespace point-in-time recovery of the damaged data file, up to the damaged archived redo log file.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infoboxnotewarn">
<p class="notep1">Caution:</p>
If you know that an archived redo log group has been damaged, then immediately back up all data files so that you have a whole database backup that does not require the damaged archived redo log.</div>
<p>The technique for DBPITR is very similar to the technique described in <a href="#i1011267">"Performing Closed Database Recovery"</a>, except that you terminate DBPITR by specifying a particular time or SCN or entering <code dir="ltr">CANCEL</code>. Cancel-based recovery prompts you with the suggested file names of archived redo logs. Recovery stops when you specify <code dir="ltr">CANCEL</code> instead of a file name or when all redo has been applied to the data files. Cancel-based recovery is the best technique to control which archived log terminates recovery.</p>
<p>The procedures in this section assume the following:</p>
<ul>
<li>
<p>The current control file is available. If you must restore or re-create the control file, then see <a href="osadvsce.htm#CHDGJAEH">"Recovering After the Loss of All Current Control Files"</a>.</p>
</li>
<li>
<p>You have backups of all needed data files. If you are missing data file backups, then see <a href="osadvsce.htm#i1006226">"Re-Creating Data Files When Backups Are Unavailable"</a>.</p>
</li>
</ul>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#i1007299">Performing Cancel-Based Incomplete Recovery</a></p>
</li>
<li>
<p><a href="#i1007361">Performing Time-Based or Change-Based Incomplete Recovery</a></p>
</li>
</ul>
<a id="i1007299"></a>
<div id="BRADV90034" class="sect2">
<h3 class="sect2">Performing Cancel-Based Incomplete Recovery</h3>
<p>In cancel-based recovery, recovery proceeds by prompting you with the suggested file names of archived redo log files. Recovery stops when you specify <code dir="ltr">CANCEL</code> instead of a file name or when all redo has been applied to the data files.</p>
<p class="subhead2"><a id="BRADV620"></a>To perform cancel-based recovery:</p>
<ol>
<li>
<p>Follow Step<a href="#CHDJEDGI">1</a> through Step <a href="#CHDGACIB">8</a> in <a href="#i1011267">"Performing Closed Database Recovery"</a>.</p>
</li>
<li>
<p>Begin cancel-based recovery by issuing the following command in SQL*Plus:</p>
<pre dir="ltr">
RECOVER DATABASE UNTIL CANCEL
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you fail to specify the <code dir="ltr">UNTIL</code> clause on the <code dir="ltr">RECOVER</code> command, then the database assumes a complete recovery and does not open until all redo is applied.</div>
<p>The database applies the necessary redo log files to reconstruct the restored data files. The database supplies the name it expects to find <a id="sthref2088"></a>from <code dir="ltr">LOG_ARCHIVE_DEST_1</code> and requests you to stop or proceed with applying the log file. If the control file is a backup, then you must supply the names of the online redo logs if you want to apply the changes in these logs.</p>
</li>
<li>
<p>Continue applying redo log files until the last log has been applied to the restored data files, then cancel recovery by executing the following command:</p>
<pre dir="ltr">
CANCEL
</pre>
<p>The database indicates whether recovery is successful. If you cancel before all the data files have been recovered to a consistent SCN and then try to open the database, then you get an <code dir="ltr">ORA-1113</code> error if more recovery is necessary. You can query <code dir="ltr">V$RECOVER_FILE</code> to determine whether more recovery is needed, or if a backup of a data file was not restored before starting incomplete recovery.</p>
</li>
<li id="CHDGJGGF">
<p>Open the database with the <code dir="ltr">RESETLOGS</code> option. You must always reset the logs after incomplete recovery or recovery with a backup control file. For example:</p>
<pre dir="ltr">
ALTER DATABASE OPEN RESETLOGS;
</pre>
<p>If you attempt to use <code dir="ltr">OPEN</code> <code dir="ltr">RESETLOGS</code> when you should not, or if you neglect to reset the log when you should, then the database returns an error and does not open the database. Correct the problem and try again.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006120">"About User-Managed Media Recovery Problems"</a> for descriptions of situations that can cause <code dir="ltr">ALTER</code> <code dir="ltr">DATABASE</code> <code dir="ltr">OPEN</code> <code dir="ltr">RESETLOGS</code> to fail</div>
</li>
<li id="CHDDFBBJ">
<p>After opening the database with the <code dir="ltr">RESETLOGS</code> option, check the alert log.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The easiest way to locate trace files and the alert log is to run the following SQL query: <code dir="ltr">SELECT NAME, VALUE FROM V$DIAG_INFO</code>.</div>
<p>When you open with the <code dir="ltr">RESETLOGS</code> option, the database returns different messages depending on whether recovery was complete or incomplete. If the recovery was complete, then the following message appears in the alert log:</p>
<pre dir="ltr">
RESETLOGS after complete recovery through change <span class="italic">scn</span>
</pre>
<p>If the recovery was incomplete, then this message is reported in the alert log, where <code dir="ltr"><span class="codeinlineitalic">scn</span></code> refers to the end point of incomplete recovery:</p>
<pre dir="ltr">
RESETLOGS after incomplete recovery UNTIL CHANGE <span class="italic">scn</span>
</pre>
<p>Also check the alert log to determine whether the database detected inconsistencies between the data dictionary and the control file. <a href="#CHDIBHDI">Table 29-3</a> describes two possible scenarios.</p>
<div id="BRADV504" class="tblformal">
<p class="titleintable"><a id="sthref2089"></a><a id="CHDIBHDI"></a>Table 29-3 Inconsistencies Between Data Dictionary and Control File</p>
<table class="cellalignment1940" title="Inconsistencies Between Data Dictionary and Control File" summary="Describes inconsistencies in datafile records" dir="ltr">
<thead>
<tr class="cellalignment1934">
<th class="cellalignment1941" id="r1c1-t21">Data File Listed in Control File</th>
<th class="cellalignment1941" id="r1c2-t21">Data File Listed in the Data Dictionary</th>
<th class="cellalignment1941" id="r1c3-t21">Result</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r2c1-t21" headers="r1c1-t21">
<p>Yes</p>
</td>
<td class="cellalignment1942" headers="r2c1-t21 r1c2-t21">
<p>No</p>
</td>
<td class="cellalignment1942" headers="r2c1-t21 r1c3-t21">
<p>References to the unlisted data file are removed from the control file. A message in the alert log indicates what was found.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r3c1-t21" headers="r1c1-t21">
<p>No</p>
</td>
<td class="cellalignment1942" headers="r3c1-t21 r1c2-t21">
<p>Yes</p>
</td>
<td class="cellalignment1942" headers="r3c1-t21 r1c3-t21">
<p>The database creates a placeholder entry in the control file under <code dir="ltr">MISSING</code><code dir="ltr">nnnnn</code> (where <code dir="ltr">nnnnn</code> is the file number in decimal). <code dir="ltr">MISSING</code><code dir="ltr">nnnnn</code> is flagged in the control file as offline and requiring media recovery. You can make the data file corresponding to <code dir="ltr">MISSING</code><code dir="ltr">nnnnn</code> accessible by using <code dir="ltr">ALTER</code> <code dir="ltr">DATABASE</code> <code dir="ltr">RENAME</code> <code dir="ltr">FILE</code> for <code dir="ltr">MISSING</code><code dir="ltr">nnnnn</code> so that it points to the data file. If you do not have a backup of this data file, then drop the tablespace.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1007361"></a>
<div id="BRADV90035" class="sect2">
<h3 class="sect2">Performing Time-Based or Change-Based Incomplete Recovery<a id="sthref2090"></a><a id="sthref2091"></a><a id="sthref2092"></a></h3>
<p><a id="sthref2093"></a><a id="sthref2094"></a><a id="sthref2095"></a>This section describes how to specify an SCN or time for the end point of recovery. If your database is affected by seasonal time changes (for example, daylight savings time), then you may experience a problem if a time appears twice in the redo log and you want to recover to the second, or later time. To handle time changes, perform cancel-based or change-based recovery.<a id="sthref2096"></a></p>
<p class="subhead2"><a id="BRADV621"></a>To perform change-based or time-based recovery:</p>
<ol>
<li>
<p>Follows Step <a href="#CHDJEDGI">1</a> through Step <a href="#CHDGACIB">8</a> in <a href="#i1011267">"Performing Closed Database Recovery"</a>.</p>
</li>
<li>
<p>I<a id="sthref2097"></a><a id="sthref2098"></a><a id="sthref2099"></a><a id="sthref2100"></a>ssue the <code dir="ltr">RECOVER</code> <code dir="ltr">DATABASE</code> <code dir="ltr">UNTIL</code> statement to begin recovery. If recovering to an SCN, then specify as a decimal number without quotation marks. For example, to recover through SCN 10034 issue:</p>
<pre dir="ltr">
RECOVER DATABASE UNTIL CHANGE 10034;
</pre>
<p>If recovering to a time, then the time is always specified using the following format, delimited by single quotation marks: <code dir="ltr">'YYYY-MM-DD:HH24:MI:SS'</code>. The following statement recovers the database up to a specified time:</p>
<pre dir="ltr">
RECOVER DATABASE UNTIL TIME '2000-12-31:12:47:30'
</pre></li>
<li>
<p>Apply the necessary redo log files to recover the restored data files. The database automatically terminates the recovery when it reaches the correct time, and returns a message indicating whether recovery is successful.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Unless recovery is automated, the database supplies the name <a id="sthref2101"></a>from <code dir="ltr">LOG_ARCHIVE_DEST_1</code> and asks you to stop or proceed with after each log. If the control file is a backup, then after the archived logs are applied you must supply the names of the online logs.</div>
</li>
<li>
<p>Follow Steps <a href="#CHDGJGGF">4</a> and <a href="#CHDDFBBJ">5</a> in <a href="#i1007299">"Performing Cancel-Based Incomplete Recovery"</a>.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007937"></a>
<div id="BRADV219" class="sect1">
<h2 class="sect1">Recovering a Database in NOARCHIVELOG Mode</h2>
<p><a id="sthref2102"></a><a id="sthref2103"></a><a id="sthref2104"></a><a id="sthref2105"></a><a id="sthref2106"></a><a id="sthref2107"></a>If a media failure damages data files in a <code dir="ltr">NOARCHIVELOG</code> database, then the only option for recovery is usually to restore a consistent whole database backup. If you are using logical backups created by Oracle Data Pump Export to supplement regular physical backups, then you can also attempt to restore the database by importing an exported backup of the database into a re-created database or a database restored from an old backup.</p>
<p class="subhead2"><a id="BRADV622"></a><a id="sthref2108"></a>To restore and recover the most recent whole database backup:</p>
<ol>
<li>
<p>I<a id="sthref2109"></a><a id="sthref2110"></a>f the database is open, then shut down the database. For example, enter:</p>
<pre dir="ltr">
SHUTDOWN IMMEDIATE
</pre></li>
<li>
<p>If possible, correct the media problem so that the backup database files can be restored to their original locations.</p>
</li>
<li>
<p>Restore the most recent whole database backup with operating system commands. Restore all of the data files and control files of the whole database backup, not just the damaged files. If the hardware problem has not been corrected and some or all of the database files must be restored to alternative locations, then restore the whole database backup to a new location. The following example restores a whole database backup to its default location:</p>
<pre dir="ltr">
% cp /backup/*.dbf $ORACLE_HOME/oradata/trgt/ 
</pre></li>
<li>
<p>If necessary, edit the restored initialization parameter file to indicate the new location of the control files. For example:</p>
<pre dir="ltr">
CONTROL_FILES = "/new_disk/oradata/trgt/control01.dbf"
</pre></li>
<li>
<p>Start an instance using the restored and edited parameter file and mount, but do not open, the database. For example:</p>
<pre dir="ltr">
STARTUP MOUNT
</pre></li>
<li>
<p>If the restored data file names will be different (as will be the case when you restore to a different file system or directory, on the same node or a different node), then update the control file to reflect the new data file locations. For example, to rename data file <code dir="ltr">1</code> you might enter:</p>
<pre dir="ltr">
ALTER DATABASE RENAME FILE '?/oradata/trgt/system01.dbf' TO
                           '/new_disk/oradata/system01.dbf';
</pre></li>
<li>
<p>If the online redo logs were located on a damaged disk, and the hardware problem is not corrected, then specify a new location for each affected online log. For example, enter:</p>
<pre dir="ltr">
ALTER DATABASE RENAME FILE '?/oradata/trgt/redo01.log' TO
                           '/new_disk/oradata/redo_01.log';
ALTER DATABASE RENAME FILE '?/oradata/trgt/redo02.log' TO
                           '/new_disk/oradata/redo_02.log';
</pre></li>
<li>
<p>Because online redo logs are never backed up, you cannot restore them with the data files and control files. To enable the database to reset the online redo logs, you must first mimic incomplete recovery:</p>
<pre dir="ltr">
RECOVER DATABASE UNTIL CANCEL
CANCEL
</pre></li>
<li>
<p><a id="sthref2111"></a><a id="sthref2112"></a>Open the database in <code dir="ltr">RESETLOGS</code> mode. This command clears the online redo logs and resets the log sequence to 1:</p>
<pre dir="ltr">
ALTER DATABASE OPEN RESETLOGS;
</pre>
<p>If you restore a <code dir="ltr">NOARCHIVELOG</code> database backup and then reset the log, the action discards all changes to the database made from the time the backup was taken to the time of the failure.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN012" href="../../server.112/e25494/dfiles.htm#ADMIN012"><span class="italic">Oracle Database Administrator's Guide</span></a> for more information about renaming and relocating data files, and <a class="olink SQLRF00802" href="../../server.112/e41084/statements_1004.htm#SQLRF00802"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn about <code dir="ltr">ALTER</code> <code dir="ltr">DATABASE</code> <code dir="ltr">RENAME</code> <code dir="ltr">FILE</code></div>
</div>
<!-- class="sect1" -->
<a id="CHDEJCGC"></a>
<div id="BRADV90036" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Troubleshooting Media Recovery</h2>
<p>This section describes how to troubleshoot user-managed media recovery, that is, media recovery performed without using Recovery Manager (RMAN). This section includes the following topics:<a id="sthref2113"></a><a id="sthref2114"></a></p>
<ul>
<li>
<p><a href="#i1006120">About User-Managed Media Recovery Problems</a></p>
</li>
<li>
<p><a href="#CIHHEEDA">Investigating the Media Recovery Problem: Phase 1</a></p>
</li>
<li>
<p><a href="#CIHFFDCI">Trying to Fix the Recovery Problem Without Corrupting Blocks: Phase 2</a></p>
</li>
<li>
<p><a href="#i1006314">Deciding Whether to Allow Recovery to Mark as Corrupt Blocks: Phase 3</a></p>
</li>
<li>
<p><a href="#i1006409">Allowing Recovery to Corrupt Blocks: Phase 4</a></p>
</li>
<li>
<p><a href="#CIHEDGCC">Performing Trial Recovery</a></p>
</li>
</ul>
<a id="i1006120"></a>
<div id="BRADV241" class="sect2">
<h3 class="sect2">About User-Managed Media Recovery Problems</h3>
<p><a id="sthref2115"></a><a id="sthref2116"></a><a id="sthref2117"></a><a id="sthref2118"></a><a href="#CIHBAIGH">Table 29-4</a> describes potential problems that can occur during media recovery.</p>
<div id="BRADV505" class="tblruleformalwide">
<p class="titleintable"><a id="sthref2119"></a><a id="CIHBAIGH"></a>Table 29-4 Media Recovery Problems</p>
<table class="cellalignment1945" title="Media Recovery Problems " summary="This table describes possible problems encountered in media recovery." dir="ltr">
<thead>
<tr class="cellalignment1934">
<th class="cellalignment1941" id="r1c1-t24">Problem</th>
<th class="cellalignment1941" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r2c1-t24" headers="r1c1-t24">
<p>Missing or misnamed archived log</p>
</td>
<td class="cellalignment1942" headers="r2c1-t24 r1c2-t24">
<p>Recovery stops because the database cannot find the archived log recorded in the control file.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r3c1-t24" headers="r1c1-t24">
<p>When you attempt to open the database, error <code dir="ltr">ORA-1113</code> indicates that a data file needs media recovery.</p>
</td>
<td class="cellalignment1942" headers="r3c1-t24 r1c2-t24">
<p>This error commonly occurs because:</p>
<ul>
<li>
<p>You are performing incomplete recovery but failed to restore all needed data file backups.</p>
</li>
<li>
<p>Incomplete recovery stopped before data files reached a consistent SCN.</p>
</li>
<li>
<p>You are recovering data files from an online backup, but not enough redo was applied to make the data files consistent.</p>
</li>
<li>
<p>You are performing recovery with a backup control file, and did not specify the location of a needed online redo log.</p>
</li>
<li>
<p>A data file is undergoing media recovery when you attempt to open the database.</p>
</li>
<li>
<p>Data files needing recovery were not brought online before you execute the <code dir="ltr">RECOVER</code> <code dir="ltr">DATABASE</code> command, and so were not recovered.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r4c1-t24" headers="r1c1-t24">
<p><a id="sthref2120"></a>Redo record problems</p>
</td>
<td class="cellalignment1942" headers="r4c1-t24 r1c2-t24">
<p>Two possible cases are as follows:</p>
<ul>
<li>
<p>Recovery stops because of failed consistency checks, a problem called <a id="sthref2121"></a><a id="sthref2122"></a><span class="glossaryterm">stuck recovery</span>. Stuck recovery can occur when an underlying operating system or storage system loses a write issued by the database during normal operation.</p>
</li>
<li>
<p>The database signals an internal error when applying the redo. This problem can be caused by an Oracle Database bug. If <a href="glossary.htm#CHDIHJHF"><span class="xrefglossterm">checksum</span></a> verification is not being used, then the errors can also be caused by corruptions to the redo or data blocks.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r5c1-t24" headers="r1c1-t24">
<p><a id="sthref2123"></a>Corrupted archived logs</p>
</td>
<td class="cellalignment1942" headers="r5c1-t24 r1c2-t24">
<p>Logs may be corrupted while they are stored on or copied between storage systems. If <code dir="ltr">DB_BLOCK_CHECKSUM</code> is enabled, then the database usually signals a checksum error. If checksum checking is disabled, then log corruption may appear as a problem with redo.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r6c1-t24" headers="r1c1-t24">
<p><a id="sthref2124"></a><a id="sthref2125"></a><a id="sthref2126"></a>Archived logs with incompatible parallel redo format</p>
</td>
<td class="cellalignment1942" headers="r6c1-t24 r1c2-t24">
<p>If you enable the parallel redo feature, then the database generates redo logs in a new format. Prior releases of Oracle are unable to apply parallel redo logs. However, releases before Oracle9<span class="italic">i</span> Database Release 2 (9.2) can detect the parallel redo format and indicate the inconsistency with the following error message: <code dir="ltr">External</code> <code dir="ltr">error</code> <code dir="ltr">00303,</code> <code dir="ltr">00000,</code> <code dir="ltr">"cannot</code> <code dir="ltr">process</code> <code dir="ltr">Parallel</code> <code dir="ltr">Redo"</code>.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r7c1-t24" headers="r1c1-t24">
<p><a id="sthref2127"></a><a id="sthref2128"></a>Corrupted data blocks</p>
</td>
<td class="cellalignment1942" headers="r7c1-t24 r1c2-t24">
<p>A data file backup may have contained a corrupted data block, or the data block may become corrupted either during recovery or when it is copied to the backup. If <code dir="ltr">DB_BLOCK_CHECKSUM</code> is enabled, then the database computes a checksum for each block during normal operations and stores it in the block before writing it to disk. When the database reads the block from disk later, it recomputes the checksum and compares it to the stored value. If they do not match, then the database signals a checksum error. If checksum checking is disabled, then the problem may also appear as a redo corruption.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r8c1-t24" headers="r1c1-t24">
<p>Random problems</p>
</td>
<td class="cellalignment1942" headers="r8c1-t24 r1c2-t24">
<p>Memory corruptions and other transient problems can occur during recovery.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformalwide" -->
<p><a id="sthref2129"></a><a id="sthref2130"></a><a id="sthref2131"></a>The symptoms of media recovery problems are usually external or internal errors signaled during recovery. For example, an external error indicates that a redo block or a data block has failed checksum verification checks. Internal errors can be caused by either bugs in the database or errors arising from the underlying operating system and hardware.</p>
<p>If media recovery encounters a problem while recovering a database backup, then whether it is a stuck recovery problem or a problem during redo application, the database always stops and leaves the data files undergoing recovery in a consistent state, that is, at a consistent SCN preceding the failure. You can then do one of the following:</p>
<ul>
<li>
<p>Open the database read-only to investigate the problem.</p>
</li>
<li>
<p>Open the database with the <code dir="ltr">RESETLOGS</code> option, if the requirements for opening <code dir="ltr">RESETLOGS</code> have been met. The <code dir="ltr">RESETLOGS</code> restrictions apply to opening the <a href="glossary.htm#CHDEJBIJ"><span class="xrefglossterm">physical standby database</span></a> as well, because a standby database is updated by a form of media recovery.</p>
</li>
</ul>
<p>In general, opening the database read-only or opening with the <code dir="ltr">RESETLOGS</code> option requires all online data files to be recovered to the same SCN. If this requirement is not met, then the database may signal <code dir="ltr">ORA-1113</code> or other errors when you attempt to open it. Some common causes of <code dir="ltr">ORA-1113</code> are described in <a href="#CIHBAIGH">Table 29-4</a>.</p>
<p><a id="sthref2132"></a>The basic methodology for responding to media recovery problems occurs in the following phases:</p>
<ol>
<li>
<p>Try to identify the cause of the problem. Run a trial recovery if needed.</p>
</li>
<li>
<p>If the problem is related to missing redo logs or if you suspect that there is a redo log, memory, or data block corruption, then try to resolve the problem using the methods described in <a href="#g1007463">Table 29-5</a>.</p>
</li>
<li>
<p>If you cannot resolve the problem using the methods described in <a href="#g1007463">Table 29-5</a>, then do one of the following:</p>
<ul>
<li>
<p>Open the database with the <code dir="ltr">RESETLOGS</code> option if you are recovering a whole database backup. If you have performed serial media recovery, then the database contains all the changes up to but not including the changes at the SCN where the corruption occurred. No changes from this SCN onward are in the recovered part of the database. If you have restored online backups, then opening <code dir="ltr">RESETLOGS</code> succeeds only if you have recovered through all the <code dir="ltr">ALTER</code> <code dir="ltr">...</code> <code dir="ltr">END</code> <code dir="ltr">BACKUP</code> operations in the redo stream.</p>
</li>
<li>
<p>Proceed with recovery by allowing media recovery to corrupt <a id="sthref2133"></a>data blocks. After media recovery completes, try performing <a href="glossary.htm#i432160"><span class="xrefglossterm">block media recovery</span></a> using RMAN.</p>
</li>
<li>
<p>Call Oracle Support Services as a last resort.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="rcmadvre.htm#i1006453">"Performing Disaster Recovery"</a> to learn about block media recovery</div>
</li>
</ul>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHHEEDA"></a>
<div id="BRADV242" class="sect2">
<h3 class="sect2">Investigating the Media Recovery Problem: Phase 1</h3>
<p><a id="sthref2134"></a><a id="sthref2135"></a>If media recovery encounters a problem, then obtain as much information as possible after recovery halts. You do not want to waste time fixing the wrong problem, which may make matters worse.</p>
<p>The goal of this initial investigation is to determine whether the problem is caused by incorrect setup, corrupted redo logs, corrupted data blocks, memory corruption, or other problems. If you see a <a href="glossary.htm#CHDIHJHF"><span class="xrefglossterm">checksum</span></a> error on a data block, then the data block is corrupted. If you see a checksum error on a redo log block, then the redo log is corrupted.</p>
<p>Sometimes the cause of a recovery problem can be difficult to determine. Nevertheless, the methods in this section enable you to quickly recover a database even when you do not completely understand the cause of the problem.</p>
<p>To investigate media recovery problems:</p>
<ol>
<li>
<p>Examine the <code dir="ltr">alert.log</code> to see whether the error messages give general information about the nature of the problem. For example, does the <code dir="ltr">alert_</code><code dir="ltr"><span class="codeinlineitalic">SID</span></code><code dir="ltr">.log</code> indicate any checksum failures? Does the <code dir="ltr">alert_</code><code dir="ltr"><span class="codeinlineitalic">SID</span></code><code dir="ltr">.log</code> indicate that media recovery may have to corrupt data blocks in order to continue?</p>
</li>
<li>
<p>Check the trace file generated by the Oracle Database during recovery. It may contain additional error information.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHFFDCI"></a>
<div id="BRADV24383" class="sect2">
<h3 class="sect2">Trying to Fix the Recovery Problem Without Corrupting Blocks: Phase 2</h3>
<p><a id="sthref2136"></a><a id="sthref2137"></a>Depending on the type of media recovery problem you suspect, you have different solutions at your disposal. You can try one or a combination of the techniques described in <a href="#g1007463">Table 29-5</a>. These solutions are common repair techniques and fairly safe for resolving most media recovery issues.</p>
<div id="BRADV506" class="tblruleformalwide">
<p class="titleintable"><a id="sthref2138"></a><a id="g1007463"></a>Table 29-5 Media Recovery Solutions</p>
<table class="cellalignment1945" title="Media Recovery Solutions " summary="This table describes causes for a media recovery problem, and causes for and responses to each." dir="ltr">
<thead>
<tr class="cellalignment1934">
<th class="cellalignment1941" id="r1c1-t26">If You Suspect...</th>
<th class="cellalignment1941" id="r1c2-t26">Then...</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r2c1-t26" headers="r1c1-t26">
<p>Missing or misnamed archived redo logs</p>
</td>
<td class="cellalignment1942" headers="r2c1-t26 r1c2-t26">
<p>Determine whether you entered the correct file name. If you did, then check whether the log is missing from the operating system. If it is missing, and if you have a backup, then restore the backup and apply the log. If you do not have a backup, then if possible perform incomplete recovery up to the point of the missing log.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r3c1-t26" headers="r1c1-t26">
<p><code dir="ltr">ORA-1113</code> for <code dir="ltr">ALTER DATABASE OPEN</code></p>
</td>
<td class="cellalignment1942" headers="r3c1-t26 r1c2-t26">
<p>Review the causes of this error in <a href="#CIHBAIGH">Table 29-4</a>. Ensure that all read/write data files requiring recovery are online.</p>
<p>If you use a backup control file for recovery, then the control file and data files must be at a consistent SCN for the database to be opened. If you do not have the necessary redo, then you must re-create the control file.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r4c1-t26" headers="r1c1-t26">
<p>Corrupt archived logs</p>
</td>
<td class="cellalignment1942" headers="r4c1-t26 r1c2-t26">
<p>The log is corrupted if the checksum verification on the log redo block fails. If <code dir="ltr">DB_BLOCK_CHECKSUM</code> was not enabled either during the recovery session or when the database generated the redo, then recovery problems may be caused by corrupted logs. If the log is corrupt and an alternate copy of the corrupt log is available, then try to apply it and see whether this tactic fixes the problem.</p>
<p>The <code dir="ltr">DB_BLOCK_CHECKSUM</code> initialization parameter determines whether checksums are computed for redo log and data blocks.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r5c1-t26" headers="r1c1-t26">
<p>Archived logs with incompatible parallel redo format</p>
</td>
<td class="cellalignment1942" headers="r5c1-t26 r1c2-t26">
<p>If you run an Oracle Database release before Oracle9<span class="italic">i</span> Database Release 2, and if you attempt to apply redo logs created with the parallel redo format, then you must do the following steps:</p>
<ol>
<li>
<p>Upgrade the database to a later release.</p>
</li>
<li>
<p>Perform media recovery.</p>
</li>
<li>
<p>Shut down the database consistently and back up the database.</p>
</li>
<li>
<p>Downgrade the database to the original release.</p>
</li>
</ol>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r6c1-t26" headers="r1c1-t26">
<p>Memory corruption or transient problems</p>
</td>
<td class="cellalignment1942" headers="r6c1-t26 r1c2-t26">
<p>You may be able to fix the problem by shutting down the database and restarting recovery. The database should be left in a consistent state if the second attempt also fails.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r7c1-t26" headers="r1c1-t26">
<p>Corrupt data blocks</p>
</td>
<td class="cellalignment1942" headers="r7c1-t26 r1c2-t26">
<p>Restore and recover the data file again with user-managed methods, or restore and recover individual data blocks with the RMAN <code dir="ltr">RECOVER ... BLOCK</code> command. This technique may fix the problem.</p>
<p>A data block is corrupted if the checksum verification on the block fails. If <code dir="ltr">DB_BLOCK_CHECKING</code> is disabled, then a corrupted data block problem may appear as a redo problem. If you must proceed with media recovery, then you may want to allow media recovery to mark the block as corrupt for now, continue recovery, and then use RMAN to perform block media recovery later.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformalwide" -->
<p>If you cannot fix the problem with the methods described in <a href="#g1007463">Table 29-5</a>, then there may be no easy way to fix the problem without losing data. You have these options:</p>
<ul>
<li>
<p>Open the database with the <code dir="ltr">RESETLOGS</code> option (for whole database recovery).</p>
<p>This solution discards all changes after the point where the redo problem occurred, but guarantees a logically consistent database.</p>
</li>
<li>
<p>Allow media recovery to corrupt one or more data blocks and then proceed.</p>
<p>This option only succeeds if the alert log indicates that recovery can continue if it is allowed to corrupt a data block, which should be the case for most recovery problems. This option is best if you must start the database quickly and recover all changes. If you are considering this option, then proceed to <a href="#i1006314">"Deciding Whether to Allow Recovery to Mark as Corrupt Blocks: Phase 3"</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="rcmblock.htm#CHDCBIIB">"Performing Block Media Recovery"</a>to learn how to perform block media recovery with the <code dir="ltr">RECOVER ... BLOCK</code> command</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1006314"></a>
<div id="BRADV99984" class="sect2">
<h3 class="sect2">Deciding Whether to Allow Recovery to Mark as Corrupt Blocks: Phase 3</h3>
<p><a id="sthref2139"></a><a id="sthref2140"></a>When media recovery encounters a problem, the alert log may indicate that recovery can continue if it is allowed to mark as corrupt the data block causing the problem. The alert log contains information about the block: its block type, block address, the tablespace it belongs to, and so forth. For blocks containing user data, the alert log may also report the data object number.</p>
<p>In this case, the database can proceed with recovery if it is allowed to mark the problem block as corrupt. Nevertheless, this response is not always advisable. For example, if the block is an important block in the <code dir="ltr">SYSTEM</code> tablespace, marking the block as corrupt can eventually prevent you from opening the recovered database. Another consideration is whether the recovery problem is isolated. If this problem is followed immediately by many other problems in the redo stream, then you may want to open the database with the <code dir="ltr">RESETLOGS</code> option.</p>
<p>For a block containing user data, you can usually query the database to discover which object or table owns this block. If the database is not open, then you should be able to open the database read-only, even if you are recovering a whole database backup. The following example cancels recovery and opens the database read-only:</p>
<pre dir="ltr">
CANCEL
ALTER DATABASE OPEN READ ONLY;
</pre>
<p>Assume that the data object number reported in the <code dir="ltr">alert_</code><code dir="ltr"><span class="codeinlineitalic">SID</span></code><code dir="ltr">.log</code> is <code dir="ltr">8031</code>. You can determine the owner, object name, and object type by issuing this query:</p>
<pre dir="ltr">
SELECT OWNER, OBJECT_NAME, SUBOBJECT_NAME, OBJECT_TYPE
FROM DBA_OBJECTS
WHERE DATA_OBJECT_ID = 8031;
</pre>
<p>To determine whether a recovery problem is isolated, you can run a diagnostic <span class="glossaryterm">trial recovery</span>, which scans the redo stream for problems but does not actually make any changes to the recovered database. If a trial recovery discovers any recovery problems, then it reports them in the <code dir="ltr">alert_</code><code dir="ltr"><span class="codeinlineitalic">SID</span></code><code dir="ltr">.log</code>. You can use the <code dir="ltr">RECOVER</code> <code dir="ltr">...</code> <code dir="ltr">TEST</code> statement to invoke trial recovery, as described in <a href="#i1006461">"Executing the RECOVER ... TEST Statement"</a>.</p>
<p>After you have done these investigations, you can follow the guidelines in <a href="#g1007496">Table 29-6</a> to decide whether to allow recovery to permit corrupt blocks.</p>
<div id="BRADV507" class="tblruleformalwide">
<p class="titleintable"><a id="sthref2141"></a><a id="g1007496"></a>Table 29-6 Guidelines for Allowing Recovery to Permit Corrupt Blocks</p>
<table class="cellalignment1945" title="Guidelines for Allowing Recovery to Permit Corrupt Blocks " summary="This table provides guidelines for allowing media recovery to permit corruption." dir="ltr">
<thead>
<tr class="cellalignment1934">
<th class="cellalignment1941" id="r1c1-t28">If the Problem Is...</th>
<th class="cellalignment1941" id="r1c2-t28">and the Block Is...</th>
<th class="cellalignment1941" id="r1c3-t28">Then...</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r2c1-t28" headers="r1c1-t28">
<p>Not isolated</p>
</td>
<td class="cellalignment1942" headers="r2c1-t28 r1c2-t28">&nbsp;</td>
<td class="cellalignment1942" headers="r2c1-t28 r1c3-t28">
<p>You should probably open the database with the <code dir="ltr">RESETLOGS</code> option. This response is important for stuck recovery problems, because stuck recovery can be caused by the operating system or a storage system losing writes. If an operating system or storage system suddenly fails, then it can cause stuck recovery problems on several blocks.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r3c1-t28" headers="r1c1-t28">
<p>Isolated</p>
</td>
<td class="cellalignment1942" headers="r3c1-t28 r1c2-t28">
<p>In the <code dir="ltr">SYSTEM</code> tablespace</p>
</td>
<td class="cellalignment1942" headers="r3c1-t28 r1c3-t28">
<p>Do not corrupt the block, because it may eventually prevent you from opening the database. However, sometimes data in the <code dir="ltr">SYSTEM</code> tablespace is unimportant. If you must corrupt a <code dir="ltr">SYSTEM</code> block and recover all changes, then contact Oracle Support Services.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r4c1-t28" headers="r1c1-t28">
<p>Isolated</p>
</td>
<td class="cellalignment1942" headers="r4c1-t28 r1c2-t28">
<p>Index data</p>
</td>
<td class="cellalignment1942" headers="r4c1-t28 r1c3-t28">
<p>Consider corrupting index blocks because the index can be rebuilt later after the database has been recovered.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r5c1-t28" headers="r1c1-t28">
<p>Isolated</p>
</td>
<td class="cellalignment1942" headers="r5c1-t28 r1c2-t28">
<p>User data</p>
</td>
<td class="cellalignment1942" headers="r5c1-t28 r1c3-t28">
<p>Decide based on the importance of the data. If you continue with data file recovery and corrupt a block, then you lose data in the block. However, you can use RMAN to perform block media recovery later, after data file recovery completes. If you open <code dir="ltr">RESETLOGS</code>, then the database is consistent but loses any changes made after the point where recovery was stopped.</p>
</td>
</tr>
<tr class="cellalignment1934">
<td class="cellalignment1942" id="r6c1-t28" headers="r1c1-t28">
<p>Isolated</p>
</td>
<td class="cellalignment1942" headers="r6c1-t28 r1c2-t28">
<p>Rollback or undo data</p>
</td>
<td class="cellalignment1942" headers="r6c1-t28 r1c3-t28">
<p>If all of the transactions are committed, then consider corrupting the rollback or undo block. The database is not harmed if the transactions that generated the undo are never rolled back. However, if those transactions are rolled back, then corrupting the undo block can cause problems. If you are unsure, then contact Oracle Support Services.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformalwide" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIHEDGCC">"Performing Trial Recovery"</a> to learn how to perform trial recovery, and <a href="#i1006409">"Allowing Recovery to Corrupt Blocks: Phase 4"</a> if you decide to allow recovery to permit corrupt blocks</div>
</div>
<!-- class="sect2" -->
<a id="i1006409"></a>
<div id="BRADV244" class="sect2">
<h3 class="sect2">Allowing Recovery to Corrupt Blocks: Phase 4</h3>
<p><a id="sthref2142"></a>If you decide to allow recovery to proceed despite block corruptions, then run the <code dir="ltr">RECOVER</code> command with the <code dir="ltr">ALLOW</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">CORRUPTION</code> clause, where <code dir="ltr"><span class="codeinlineitalic">n</span></code> is the number of allowable corrupt blocks.</p>
<p><span class="bold">To allow recovery to corrupt blocks:</span></p>
<ol>
<li>
<p>Ensure that all normal recovery preconditions are met. For example, if the database is open, then take tablespaces offline before attempting recovery.</p>
</li>
<li>
<p>Run the <code dir="ltr">RECOVER</code> command as in the following example:</p>
<pre dir="ltr">
RECOVER DATABASE ALLOW 5 CORRUPTION
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHEDGCC"></a>
<div id="BRADV245" class="sect2">
<h3 class="sect2">Performing Trial Recovery</h3>
<p><a id="sthref2143"></a><a id="sthref2144"></a><a id="sthref2145"></a><a id="sthref2146"></a><a id="sthref2147"></a>When problems such as stuck recovery occur, you have a difficult choice. If the block is relatively unimportant, and if the problem is isolated, then it is better to corrupt the block. But if the problem is not isolated, then it may be better to open the database with the <code dir="ltr">RESETLOGS</code> option.</p>
<p>Because of this situation, Oracle Database supports <a href="glossary.htm#CHDDIHDD"><span class="xrefglossterm">trial recovery</span></a>. A trial recovery applies redo in a way similar to normal media recovery, but it never writes its changes to disk and it always rolls back its changes. Trial recovery occurs only in memory.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006409">"Allowing Recovery to Corrupt Blocks: Phase 4"</a></div>
<a id="i1006449"></a>
<div id="BRADV90037" class="sect3">
<h4 class="sect3">How Trial Recovery Works</h4>
<p><a id="sthref2148"></a><a id="sthref2149"></a><a id="sthref2150"></a>By default, if a trial recovery encounters a stuck recovery or similar problem, then it always marks the data block as corrupt in memory when this action can allow recovery to proceed. The database writes errors generated during trial recovery to alert files. These errors are clearly marked as test run errors.</p>
<p>Like normal media recovery, trial recovery can prompt you for archived log file names and ask you to apply them. Trial recovery ends when:</p>
<ul>
<li>
<p>The database runs out of the maximum number of buffers in memory that trial recovery is permitted to use</p>
</li>
<li>
<p>An unrecoverable error is signaled, that is, an error that cannot be resolved by corrupting a data block</p>
</li>
<li>
<p>You cancel or interrupt the recovery session</p>
</li>
<li>
<p>The next redo record in the redo stream changes the control file</p>
</li>
<li>
<p>All requested redo has been applied</p>
</li>
</ul>
<p>When trial recovery ends, the database removes all effects of the test run from the system&mdash;except the possible error messages in the alert files. If the instance fails during trial recovery, then the database removes all effects of trial recovery from the system, because trial recovery never writes changes to disk.</p>
<p>Trial recovery lets you foresee what problems might occur if you were to continue with normal recovery. For problems caused by ongoing memory corruption, trial recovery and normal recovery can encounter different errors.</p>
</div>
<!-- class="sect3" -->
<a id="i1006461"></a>
<div id="BRADV90038" class="sect3">
<h4 class="sect3">Executing the RECOVER ... TEST Statement</h4>
<p>You can use the <code dir="ltr">TEST</code> option for any <code dir="ltr">RECOVER</code> command. For example, you can start SQL*Plus and then issue any of the following commands:</p>
<pre dir="ltr">
RECOVER DATABASE TEST
RECOVER DATABASE USING BACKUP CONTROLFILE UNTIL CANCEL TEST
RECOVER TABLESPACE users TEST
RECOVER DATABASE UNTIL CANCEL TEST
</pre>
<p>By default, trial recovery always attempts to corrupt blocks in memory if this action allows trial recovery to proceed. Trial recovery by default can corrupt an unlimited number of data blocks. You can specify the <code dir="ltr">ALLOW</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">CORRUPTION</code> clause on the <code dir="ltr">RECOVER</code> <code dir="ltr">...</code> <code dir="ltr">TEST</code> statement to limit the number of data blocks that trial recovery can corrupt in memory.</p>
<p>A trial recovery command is usable in any scenario in which a normal recovery command is usable. Nevertheless, you should only need to run trial recovery when recovery runs into problems.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1933">
<tr>
<td class="cellalignment1942">
<table class="cellalignment1938">
<tr>
<td class="cellalignment1937"><a href="osbackup.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1937"><a href="osadvsce.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2003, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1944">
<table class="cellalignment1936">
<tr>
<td class="cellalignment1937"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1937"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1937"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1937"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1937"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1937"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
