<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Preparing Text for Mining</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 025" />
<meta name="dcterms.created" content="2011-06-30T14:1:10Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Data Mining Application Developer's Guide" />
<meta name="dcterms.identifier" content="E12218-07" />
<meta name="dcterms.isVersionOf" content="DMPRG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2005, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="xform_casetbl.htm" title="Previous" type="text/html" />
<link rel="Next" href="models_building.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e12218.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">11/15</span> <!-- End Header --><a id="BABJADCE"></a><a id="DMPRG007"></a>
<h1 class="chapter"><span class="secnum">4</span> Preparing Text for Mining</h1>
<p>Oracle <a id="sthref185"></a><a id="sthref186"></a>Data Mining supports the mining of data sets that have one or more text columns. These <a id="sthref187"></a>columns must undergo a special preprocessing step whereby text tokens known as <span class="bold">terms</span> are extracted and stored in a nested column. The transformed text can then be used as any other attribute in the building, testing, and scoring of models. Any algorithm that supports nested data can be used for text mining. (See <a href="xform_casetbl.htm#BJEBGFAA">Table 3-2</a> in <a href="xform_casetbl.htm#BGBIHJGD">Chapter 3</a>.)</p>
<p>This chapter explains how to use PL/SQL to prepare a column of text for mining.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle Data Mining includes sample programs that illustrate text transformation and text mining using the PL/SQL API. Refer to <a class="olink DMADM009" href="../../datamine.112/e16807/sampleprogs.htm#DMADM009"><span class="italic">Oracle Data Mining Administrator's Guide</span></a> for information about the Oracle Data Mining sample programs.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DMCON011" href="../../datamine.112/e16808/text.htm#DMCON011"><span class="italic">Oracle Data Mining Concepts</span></a> for information about text mining</div>
<p>This chapter contains the following sections.</p>
<ul>
<li>
<p><a href="#BJGFFEHE">Oracle Text Routines for Term Extraction</a></p>
</li>
<li>
<p><a href="#BJGJFIEI">Term Extraction in the Sample Programs</a></p>
</li>
<li>
<p><a href="#BJGGGDJC">From Unstructured Data to Structured Data</a></p>
</li>
<li>
<p><a href="#BJGDAHIC">Steps in the Term Extraction Process</a></p>
</li>
<li>
<p><a href="#CHDECJHG">Example: Transforming a Text Column</a></p>
</li>
</ul>
<a id="BJGFFEHE"></a><a id="DMPRG179"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Oracle Text Routines for Term Extraction</h2>
<p>Oracle Data Mining uses specialized <a id="sthref188"></a>Oracle Text routines to preprocess text data. Oracle Text is a technology within the database for building text querying and classification applications.</p>
<p>Oracle Text provides the following facilities for the Oracle Data Mining term extraction process:</p>
<ul>
<li>
<p><code><a id="sthref189"></a>SVM_CLASSIFIER</code>, defined in the <code>CTX_DLL</code> Oracle Text PL/SQL package, specifies an <a id="sthref190"></a>index preference for Oracle Data Mining term extraction.</p>
</li>
<li>
<p>The <code><a id="sthref191"></a>CTXSYS.DRVODM</code> Oracle Text PL/SQL package defines the table functions, <code><a id="sthref192"></a>FEATURE_PREP</code> and <code><a id="sthref193"></a>FEATURE_EXPLAIN</code>, which generate intermediate and final tables of text terms for Oracle Data Mining.</p>
</li>
</ul>
<p>In PL/SQL, the term extraction process <a id="sthref194"></a><a id="sthref195"></a>requires the use of these Oracle Text facilities. (See <a href="java_api.htm#BABJIIAC">"Using Text Transformation"</a>.)</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCAPP" href="../../text.112/e24435/toc.htm"><span class="italic">Oracle Text Application Developer's Guide</span></a> and <a class="olink CCREF" href="../../text.112/e24436/toc.htm"><span class="italic">Oracle Text Reference</span></a> for information on Oracle Text</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Oracle Text facilities for Oracle Data Mining are documented in this chapter. They are not documented in the Oracle Text manuals.</div>
<div class="infobox-note">
<p class="notep1">Note on Terminology:</p>
Text terms are also known as <span class="bold">features</span>. In text mining, a feature is a word or group of words extracted from a text document. Features (terms) are the fundamental unit of text that can be manipulated and analyzed.
<p>The feature extraction mining function (NMF algorithm in Oracle Data Mining) and text mining transformation both perform a kind of feature extraction.</p>
<ul>
<li>
<p>A feature extraction model creates features that represent fundamental qualities of multiple attributes. The model operates on the features instead of the original attributes.</p>
</li>
<li>
<p>Text transformation changes a text document into a collection of features, each one representing a fundamental characteristic of the document. The model operates on the text features instead of the original document.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="BJGJFIEI"></a><a id="DMPRG180"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Term Extraction in the Sample Programs</h2>
<p>A good place to start in learning the term extraction process is with the sample programs. The following sample programs contain term extraction code for text mining:</p>
<ul>
<li>
<p><code><a id="sthref196"></a>dmsh.sql</code> &mdash; Prepares the build, test, and scoring data for the sample programs, including the text mining programs. <code>dmsh.sql</code> creates views for data mining and tables and indexes for text mining.</p>
</li>
<li>
<p><code><a id="sthref197"></a>dmtxtfe.sql</code> &mdash; Using the indexed text column created by <code>dmsh.sql</code>, creates a nested column suitable for text mining.</p>
<p>The <code>dmtxtfe.sql</code> program is a sample term extractor. It contains extensive comments that explain the code in a step-by-step fashion. You can expand this program into a complete term extraction solution by adding index creation and the preparation of test and scoring data (as in <code>dmsh.sql</code>).</p>
</li>
</ul>
<p>Two sample PL/SQL programs use the data prepared by <code>dmsh.sql</code> to mine text.</p>
<ul>
<li>
<p><code>dmtxtnmf.sql</code> creates and applies a model that uses Non-Negative Matrix Factorization.</p>
</li>
<li>
<p><code>dmtxtsvm.sql</code> creates and applies a model that uses SVM classification.</p>
</li>
</ul>
<p>Both these programs mine a table of customer data that includes a nested column of text data called <code>COMMENTS</code>. The <code>COMMENTS</code> column has been pre-processed by <code>dmsh.sql</code>. The models created by these programs are referenced in the following example from a Linux system.</p>
<pre>
-- Run the programs to create the models
SQL&gt; @ $ORACLE_HOME/rdbms/demo/dmtxtnmf.sql
SQL&gt; @ $ORACLE_HOME/rdbms/demo/dmtxtsvm.sql
-- List the models created by the programs
SQL&gt; SELECT model_name, mining_function, algorithm FROM user_mining_models;
 
MODEL_NAME                MINING_FUNCTION              ALGORITHM
------------------------  ---------------------------  ------------------------
T_SVM_CLAS_SAMPLE         CLASSIFICATION               SUPPORT_VECTOR_MACHINES
T_NMF_SAMPLE              FEATURE_EXTRACTION           NONNEGATIVE_MATRIX_FACTOR
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DMADM009" href="../../datamine.112/e16807/sampleprogs.htm#DMADM009"><span class="italic">Oracle Data Mining Administrator's Guide</span></a>. This manual provides instructions for obtaining and running the sample programs. It includes information about the build, training, and scoring data used by these programs.</div>
</div>
<!-- class="sect1" -->
<a id="BJGGGDJC"></a><a id="DMPRG181"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">From Unstructured Data to Structured Data</h2>
<p>The pre-processing steps for text <a id="sthref198"></a>mining create <a id="sthref199"></a>nested table columns of type <code><a id="sthref200"></a>DM_NESTED_NUMERICALS</code> from columns of type <code>VARCHAR2</code> or <code>CLOB</code>. Each row of the nested table specifies an attribute name and a value. The <code><a id="sthref201"></a>DM_NESTED_NUMERICALS</code> type defines the following columns.</p>
<pre>
attribute_name     VARCHAR2(4000)
value               NUMBER)
</pre>
<p>The term extraction process treats the text in each row of the original table as a separate document. Each document is transformed to a set of terms that have a numeric value and a text label. Within the nested table column, the <code>attribute_name</code> column holds the text and the <code>value</code> column holds the numeric value of the term, which is derived using the term frequency in the document and in the document collection (other rows).</p>
<p>For example, the following query returns various attributes of customer 102998, including a text column of comments. The text column has not been transformed.</p>
<pre>
SQL&gt; select cust_id, cust_gender, cust_income_level, affinity_card, comments
             from mining_build_text
             where cust_id = 102998;
 
CUST_ID C  CUST_INCOME_LEVEL     AFFINITY_CARD COMMENTS
------- -- --------------------  ------------- --------------------------------
102998  M  J: 190,000 - 249,999  1             I wanted to write you to let you
                                               know that I've purchased several
                                               items at your store recently and
                                               have been very satisfied with my
                                               purchases. Keep up the good work.
  
</pre>
<p>The following query returns the same attributes of customer 102998, but the text in the comments column has been transformed. The query extracts the <code>ATTRIBUTE_NAME</code> and <code>VALUE</code> columns from the nested table that holds the transformed text.</p>
<pre>
SQL&gt; select b.cust_id, b.cust_gender, b.cust_income_level, b.affinity_card, n.*
             from mining_build_nested_text b,
                  table(b.comments) n
             where b.cust_id = 102998
             order by n.attribute_name;
 
CUST_ID  C  CUST_INCOME_LEVEL    AFFINITY_CARD  ATTRIBUTE_NAME  VALUE
-------  -- -------------------  -------------  --------------  --------
102998   M  J: 190,000 - 249,999  1              GOOD            .26894
102998   M  J: 190,000 - 249,999  1              ITEMS            158062
102998   M  J: 190,000 - 249,999  1              KEEP             238765
102998   M  J: 190,000 - 249,999  1              KNOW              .2006
102998   M  J: 190,000 - 249,999  1              LET              299856
102998   M  J: 190,000 - 249,999  1              PURCHASED        142743
102998   M  J: 190,000 - 249,999  1              PURCHASES        173146
102998   M  J: 190,000 - 249,999  1              RECENTLY        .195223
102998   M  J: 190,000 - 249,999  1              SATISFIED       .355851
102998   M  J: 190,000 - 249,999  1              SEVERAL         .355851
102998   M  J: 190,000 - 249,999  1              STORE          .0712537
102998   M  J: 190,000 - 249,999  1              UP              .159838
102998   M  J: 190,000 - 249,999  1              WANTED          .355851
102998   M  J: 190,000 - 249,999  1              WORK            .299856
102998   M  J: 190,000 - 249,999  1              WRITE           .355851
</pre>
<p>The <code>ATTRIBUTE_NAME</code> column holds an item of text from the original comments column. The <code>VALUE</code> column holds the term value. Note that not all words from the original comments column are extracted as terms. For example, the articles <code>the</code> and <code>to</code> are not included.</p>
</div>
<!-- class="sect1" -->
<a id="BJGDAHIC"></a><a id="DMPRG182"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Steps in the Term Extraction Process</h2>
<p>The steps in the term extraction process are summarized in this section. Further details and specific syntax requirements are explained later in this chapter.</p>
<a id="DMPRG183"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref202"></a>
<h3 class="sect2">Transform a Text Column in the Build Table</h3>
<p>First transform the text in the build data. During this process you will generate the text term definitions, which you will reuse for the test and apply data. Perform the following steps:</p>
<ol>
<li>
<p>Create an index on the text column in the build table.</p>
</li>
<li>
<p>Create an <code><a id="sthref203"></a>SVM_CLASSIFIER</code> preference for the index.</p>
</li>
<li>
<p>Define a table to hold the categories specified by the <code>SVM_CLASSIFIER</code> index.</p>
</li>
<li>
<p>Use the <code><a id="sthref204"></a>FEATURE_PREP</code> table function to create the term definitions and populate an intermediate terms table.</p>
</li>
<li>
<p>Use the <code><a id="sthref205"></a>FEATURE_EXPLAIN</code> table function to populate the final terms table.</p>
</li>
<li>
<p>Replicate the columns of the original build table (using a view or another table), replacing the text column with a nested table column. Load the terms from the final terms table into the nested table column.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="DMPRG184"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref206"></a>
<h3 class="sect2">Transform a Text Column in the Test and Apply Tables</h3>
<p>The test and apply data must undergo the same pre-processing as the build data. To transform the test and apply data, you will reuse the term definitions generated for the build data. Perform the following steps:</p>
<ol>
<li>
<p>Create an index on the text column in the test or apply table.</p>
</li>
<li>
<p>Use the <code>FEATURE_PREP</code> table function to populate an intermediate terms table. Use the term definitions previously generated for the build data.</p>
</li>
<li>
<p>Use the <code>FEATURE_EXPLAIN</code> table function to populate the final terms table.</p>
</li>
<li>
<p>Replicate the columns of the original test or apply table, replacing the text column with a nested table column. Load the terms from the final terms table into the nested table column.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="DMPRG185"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref207"></a>
<h3 class="sect2">Create the Index and Index Preference</h3>
<p>Oracle Text processing requires a text index. Oracle Text supports several types of indexes for querying, cataloging, and classifying text documents. The Oracle Data Mining term extraction process requires a <code>CONTEXT</code> index for text querying.</p>
<p>You must create an index for each text column to be transformed. Use the following syntax to create the index.</p>
<pre>
SQL&gt;CREATE INDEX <span class="codeinlineitalic">index_name</span> ON <span class="codeinlineitalic">table_name</span>(<span class="codeinlineitalic">column_name</span>)
                   INDEXTYPE IS ctxsys.context PARAMETERS ('nopopulate');
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
This statement creates a basic <code>CONTEXT</code> index. You can further define the characteristics of the index by specifying additional arguments to the <code>CREATE INDEX</code> statement. Refer to <a class="olink CCREF0105" href="../../text.112/e24436/csql.htm#CCREF0105"><span class="italic">Oracle Text Reference</span></a> for details.</div>
<p>Oracle Text supports index preferences for overriding the default characteristics of an index. The <code>CREATE_PREFERENCE</code> procedure in the Oracle Text package <code>CTX_DDL</code> creates a preference with the name and type that you specify. The <code><a id="sthref208"></a>SVM_CLASSIFIER</code> preference type defines the characteristics of an index for Oracle Data Mining.</p>
<p>You must create an index preference when you prepare the build data. It will be reused when you prepare the test and apply data. Use the following syntax to create the index preference.</p>
<pre>
SQL&gt;EXECUTE ctx_ddl.create_preference(<span class="codeinlineitalic">'preference_name</span>', 'SVM_CLASSIFIER');
</pre>
<p>The <code>SVM_CLASSIFIER</code> index preference uses a predefined table with two numeric columns: <code>ID</code> and <code>CAT</code>. <code>ID</code> holds the case ID; <code>CAT</code> holds the category. The category table is used for internal processing. You must create the category table using the following syntax.</p>
<pre>
SQL&gt;CREATE TABLE <span class="codeinlineitalic">category_table_name</span>(id NUMBER, cat NUMBER);
</pre></div>
<!-- class="sect2" -->
<a id="DMPRG186"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref209"></a>
<h3 class="sect2">Create the Intermediate Terms Table</h3>
<p>The <code>FEATURE_PREP</code> table function in the <code>CTXSYS.DRVODM</code> Oracle Text package extracts terms from a text column using an index preference of type <code>SVM_CLASSIFIER</code>. <code>FEATURE_PREP</code> creates a table of term definitions from the build data and reuses these definitions for the test and apply data.</p>
<p><code>FEATURE_PREP</code> returns an intermediate terms table.</p>
<a id="DMPRG187"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref210"></a>
<h4 class="sect3">FEATURE_PREP Calling Syntax</h4>
<p><code><a id="sthref211"></a>FEATURE_PREP</code> is an over-loaded function that accepts two different sets of arguments. You will specify one set of arguments for the build data and another set for the test and apply data.</p>
<pre>
--- syntax for build data ---
            CTXSYS.DRVODM.FEATURE_PREP (
                   text_index                IN   VARCHAR2,
                   case_id                   IN   VARCHAR2,
                   category_tbl              IN   VARCHAR2,
                   category_tbl_id_col       IN   VARCHAR2,
                   category_tbl_cat_col      IN   VARCHAR2,
                   feature_definition_tbl    IN   VARCHAR2,
                   index_preference          IN   VARCHAR2)
                RETURN DRVODM;

--- syntax for test/apply data ---
           CTXSYS.DRVODM.FEATURE_PREP (
                   text_index                IN   VARCHAR2,
                   case_id                   IN   VARCHAR2,
                   feature_definition_tbl    IN   VARCHAR2,
                RETURN DRVODM;
</pre></div>
<!-- class="sect3" -->
<a id="DMPRG188"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref212"></a>
<h4 class="sect3">FEATURE_PREP Return Value</h4>
<p><code>FEATURE_PREP</code> returns the following columns. The <code>SEQUENCE_ID</code> column holds the case ID; the <code>ATTRIBUTE_ID</code> column holds the term ID.</p>
<pre>
Name                   NULL?   Type
---------------------- ------- ------
SEQUENCE_ID                    NUMBER
ATTRIBUTE_ID                   NUMBER
VALUE                          NUMBER
</pre></div>
<!-- class="sect3" -->
<a id="DMPRG189"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref213"></a>
<h4 class="sect3">FEATURE_PREP Arguments</h4>
<p><code>FEATURE_PREP</code> accepts the arguments described in <a href="#CHDCBAHG">Table 4-1</a>.</p>
<div class="tblformal">
<p class="titleintable"><a id="DMPRG190"></a><a id="sthref214"></a><a id="CHDCBAHG"></a>Table 4-1 FEATURE_PREP Table Function Arguments</p>
<table class="cellalignment1303" title="FEATURE_PREP Table Function Arguments" summary="This table describes the arguments of the CTXSYS.DRVODM.FEATURE_PREP table function" dir="ltr">
<thead>
<tr class="cellalignment1297">
<th class="cellalignment1304" id="r1c1-t9">Argument Name</th>
<th class="cellalignment1304" id="r1c2-t9">Data Type</th>
<th class="cellalignment1304" id="r1c3-t9"><br /></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1297">
<td class="cellalignment1305" id="r2c1-t9" headers="r1c1-t9">
<p><code>text_index</code></p>
</td>
<td class="cellalignment1305" headers="r2c1-t9 r1c2-t9">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1305" headers="r2c1-t9 r1c3-t9">
<p>Name of the index on the text column in the build, test, or apply table.</p>
</td>
</tr>
<tr class="cellalignment1297">
<td class="cellalignment1305" id="r3c1-t9" headers="r1c1-t9">
<p><code>case_ID</code></p>
</td>
<td class="cellalignment1305" headers="r3c1-t9 r1c2-t9">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1305" headers="r3c1-t9 r1c3-t9">
<p>Name of the case ID column in the build, test, or apply table.</p>
</td>
</tr>
<tr class="cellalignment1297">
<td class="cellalignment1305" id="r4c1-t9" headers="r1c1-t9">
<p><code>category_tbl</code></p>
</td>
<td class="cellalignment1305" headers="r4c1-t9 r1c2-t9">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1305" headers="r4c1-t9 r1c3-t9">
<p>Name of the table used by the <code>SVM_CLASSIFIER</code> index preference.</p>
<p>Specify this argument only for build data.</p>
</td>
</tr>
<tr class="cellalignment1297">
<td class="cellalignment1305" id="r5c1-t9" headers="r1c1-t9">
<p><code>category_tbl_id_col</code></p>
</td>
<td class="cellalignment1305" headers="r5c1-t9 r1c2-t9">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1305" headers="r5c1-t9 r1c3-t9">
<p>Specify 'id'. This is the name of the <code>ID</code> column in the table used by the <code>SVM_CLASSIFIER</code> index preference.</p>
<p>Specify this argument only for build data.</p>
</td>
</tr>
<tr class="cellalignment1297">
<td class="cellalignment1305" id="r6c1-t9" headers="r1c1-t9">
<p><code>category_tbl_cat_col</code></p>
</td>
<td class="cellalignment1305" headers="r6c1-t9 r1c2-t9">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1305" headers="r6c1-t9 r1c3-t9">
<p>Specify 'cat'. This is the name of the <code>CAT</code> column in the table used by the <code>SVM_CLASSIFIER</code> index preference.</p>
<p>Specify this argument only for build data.</p>
</td>
</tr>
<tr class="cellalignment1297">
<td class="cellalignment1305" id="r7c1-t9" headers="r1c1-t9">
<p><code>feature_definition_tbl</code></p>
</td>
<td class="cellalignment1305" headers="r7c1-t9 r1c2-t9">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1305" headers="r7c1-t9 r1c3-t9">
<p>Name of the term definition table created by <code>FEATURE_PREP</code>. The columns of the term definition table are:</p>
<pre>
Name         Null?     Type
---------------------------------
CAT_ID                   NUMBER
TYPE                     NUMBER
RULE                     BLOB
</pre></td>
</tr>
<tr class="cellalignment1297">
<td class="cellalignment1305" id="r8c1-t9" headers="r1c1-t9">
<p><code>index_preference</code></p>
</td>
<td class="cellalignment1305" headers="r8c1-t9 r1c2-t9">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1305" headers="r8c1-t9 r1c3-t9">
<p>Name of the <code>SVM_CLASSIFIER</code> index preference.</p>
<p>Specify this argument only for build data.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<a id="DMPRG191"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref215"></a>
<h4 class="sect3">FEATURE_PREP Example</h4>
<p>The following example creates an intermediate terms table called <code>txt_term_out</code>. The <code>FEATURE_PREP</code> table function extracts terms from a text column with an index called <code>build_text_idx</code>. The text column is in a build table with a case ID column called <code>cust_id</code>. The index preference <code>txt_pref</code> is applied to the index using the <code>id</code> and <code>cat</code> columns in the table <code>cat_tbl</code>. <code>FEATURE_PREP</code> creates a table of term definitions called <code>txt_pref_terms</code>.</p>
<pre>
CREATE TABLE txt_term_out AS
SELECT *
  FROM TABLE(ctxsys.drvodm.feature_prep (
               'build_text_idx',
               'cust_id',
               'cat_tbl',
               'id',
               'cat',
               'txt_pref_terms',
               'txt_pref'));
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="DMPRG192"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref216"></a>
<h3 class="sect2">Create the Final Terms Table</h3>
<p>The <code>FEATURE_EXPLAIN</code> table function in the <code>CTXSYS.DRVODM</code> Oracle Text package extracts the term values from the definitions created by <code>FEATURE_PREP</code> and appends the associated word to each value.</p>
<p><code>FEATURE_EXPLAIN</code> returns the final terms table.</p>
<a id="DMPRG193"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref217"></a>
<h4 class="sect3"><a id="sthref218"></a>FEATURE_EXPLAIN Calling Syntax</h4>
<p>The calling syntax of <code>FEATURE_EXPLAIN</code> is described as follows.</p>
<pre>
            CTXSYS.DRVODM.FEATURE_EXPLAIN (
                   feature_definition_tbl     IN   VARCHAR2,
                RETURN DRVODM;
</pre></div>
<!-- class="sect3" -->
<a id="DMPRG194"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref219"></a>
<h4 class="sect3">FEATURE_EXPLAIN Return Value</h4>
<p><code>FEATURE_EXPLAIN</code> returns the following columns.</p>
<pre>
Name              Type
---------------    ---------------
text               VARCHAR2(160)
type               NUMBER(3)
ID                 NUMBER
score              NUMBER
</pre></div>
<!-- class="sect3" -->
<a id="DMPRG195"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref220"></a>
<h4 class="sect3">FEATURE_EXPLAIN Arguments</h4>
<p><code>FEATURE_EXPLAIN</code> accepts a single argument: the terms definition table created by <code>FEATURE_PREP</code>.</p>
</div>
<!-- class="sect3" -->
<a id="DMPRG196"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref221"></a>
<h4 class="sect3">FEATURE_EXPLAIN Example</h4>
<p>The following example creates a final terms table called <code>txt_final_terms</code> using the intermediate terms table <code>txt_term_out</code>. The <code>FEATURE_EXPLAIN</code> table function returns the terms specified in the terms definition table <code>txt_pref_terms</code>.</p>
<pre>
SQL&gt; create table txt_final_terms as
                   select A.sequence_id, B.text, A.value
                         FROM txt_term_out A,
                              TABLE(ctxsys.drvodm.feature_explain(
                                    'txt_pref_terms')) B
                         WHERE A.attribute_id = B.id;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="DMPRG197"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref222"></a>
<h3 class="sect2">Populate a Nested Table Column</h3>
<p>Use the final terms table to populate a <a id="sthref223"></a>nested table column of type <code><a id="sthref224"></a>DM_NESTED_NUMERICALS</code>.</p>
<p>The following example creates the table <code>mining_build_nested_text</code>. (Alternatively, you could create a view.) The table has a case ID column of customer IDs and three customer attribute columns: age, education, and occupation. It also includes a comments column of type <code>DM_NESTED_NUMERICALS</code> created from the terms table <code>txt_final_terms</code>.</p>
<pre>
SQL&gt; CREATE TABLE mining_build_nested_text
       NESTED TABLE comments store AS build_comments
      AS
    SELECT non_text.cust_id,
      non_text.age,
      non_text.education,
      non_text.occupation,
     txt.comments
     FROM
     mining_build_text non_text,
     ( SELECT features.sequence_id,
              cast(COLLECT(dm_nested_numerical(features.text,features.value))
                           as dm_nested_numericals)  comments
       FROM txt_final_terms features
       group by features.sequence_id) txt
     WHERE non_text.cust_id = txt.sequence_id(+);
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDECJHG"></a><a id="DMPRG198"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Example: Transforming a Text Column</h2>
<p>In the following example, a text column in <code>MINING_BUILD_TEXT</code> is transformed to a nested table column in <code>MINING_BUILD_NESTED_TEXT</code>. The same text column in <code>MINING_APPLY_TEXT</code> is transformed to a nested table column in <code>MINING_APPLY_NESTED_TEXT</code>.</p>
<p>Both <code>MINING_BUILD_TEXT</code> and <code>MINING_APPLY_TEXT</code> have the following columns.</p>
<pre>
 Name                              Null?    Type
 --------------------------------- -------- ---------------------------
 CUST_ID                           NOT NULL NUMBER
 AGE                                        NUMBER
 EDUCATION                                  VARCHAR2(21)
 OCCUPATION                                 VARCHAR2(21)
 COMMENTS                                   VARCHAR2(4000)
</pre>
<p>The following statements create the indexes.</p>
<pre>
SQL&gt; create index build_text_idx on mining_build_text (comments)
             indextype is ctxsys.context parameters ('nopopulate');
SQL&gt; create index apply_text_idx ON mining_apply_text (comments)
             indextype is ctxsys.context parameters ('nopopulate');
</pre>
<p>The following statements create the index preference and its table.</p>
<pre>
SQL&gt; execute ctx_ddl.create_preference('idx_pref', 'SVM_CLASSIFIER');
SQL&gt; create table idx_pref_cat (id number, cat number);
</pre>
<p>The following statement returns the intermediate terms in the table <code>BUILD_TERMS_OUT</code>. It also creates the table <code>FEATURE_DEFS</code> and populates it with the term definitions.</p>
<pre>
SQL&gt;  create table build_terms_out as
              select * from
                     table (ctxsys.drvodm.feature_prep
                                  ('build_text_idx',
                                   'cust_id',
                                   'idx_pref_cat',
                                   'id',
                                   'cat',
                                   'feature_defs',
                                   'idx_pref'));
</pre>
<p>The following statement returns the final terms in the table <code>BUILD_EXPLAIN_OUT</code>.</p>
<pre>
SQL&gt; create table build_explain_out as
             select a.sequence_id,
                    b.text,
                    a.value
             from build_terms_out a,
             table (ctxsys.drvodm.feature_explain('feature_defs')) b
             where a.attribute_id = b.id;
</pre>
<p>The following statement creates the table <code>MINING_BUILD_NESTED_TEXT</code>. This table contains the non-text attributes from the original build table and a nested table of comments. This table can be used to build a model.</p>
<pre>
SQL&gt; create table mining_build_nested_text
        nested table comments store as build_comments
          as select non_text.cust_id,
                    non_text.age,
                    non_text.education,
                    non_text.occupation,
                    txt.comments
              from mining_build_text non_text,
             (select features.sequence_id,
                cast(collect(dm_nested_numerical(features.text,features.value))
                as dm_nested_numericals)  comments
              from build_explain_out features
              group by features.sequence_id) txt
              where non_text.cust_id = txt.sequence_id(+);
</pre>
<p>The following statement creates the intermediate terms table for the comments column in the apply table, <code>MINING_APPLY_TEXT</code>. It uses the term definitions in the <code>FEATURE_DEFS</code> table, which was created during the pre-processing of the comments column in <code>MINING_BUILD_TEXT</code>.</p>
<pre>
SQL&gt;  create table apply_terms_out as
              select * from
                     table (ctxsys.drvodm.feature_prep
                                  ('apply_text_idx',
                                   'cust_id',
                                   'feature_defs'));
</pre>
<p>The following statement creates the final terms table for apply.</p>
<pre>
SQL&gt; create table apply_explain_out as
             select a.sequence_id,
                    b.text,
                    a.value
             from apply_terms_out a,
             table (ctxsys.drvodm.feature_explain('feature_defs')) b
             where a.attribute_id = b.id;
</pre>
<p>The following statement creates the table <code>MINING_APPLY_NESTED_TEXT</code>. This table contains the non-text attributes from the original apply table and a nested table of comments. This table can be used to apply the model.</p>
<pre>
SQL&gt; create table mining_apply_nested_text
        nested table comments store as apply_comments
          as select non_text.cust_id,
                    non_text.age,
                    non_text.education,
                    non_text.occupation,
                    txt.comments
              from mining_apply_text non_text,
             (select features.sequence_id,
                cast(collect(dm_nested_numerical(features.text,features.value))
                as dm_nested_numericals)  comments
              from apply_explain_out features
              group by features.sequence_id) txt
              where non_text.cust_id = txt.sequence_id(+);
</pre></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1296">
<tr>
<td class="cellalignment1305">
<table class="cellalignment1301">
<tr>
<td class="cellalignment1300"><a href="xform_casetbl.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1300"><a href="models_building.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2005, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1307">
<table class="cellalignment1299">
<tr>
<td class="cellalignment1300"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1300"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1300"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1300"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1300"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1300"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
