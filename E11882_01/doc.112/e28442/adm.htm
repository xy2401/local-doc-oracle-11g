<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Access Layer Customization</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 740" />
<meta name="dcterms.created" content="2013-10-17T14:37:19Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Communications Data Model Implementation and Operations Guide" />
<meta name="dcterms.identifier" content="E28442-05" />
<meta name="dcterms.isVersionOf" content="CDMOG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2011, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="pdm.htm" title="Previous" type="text/html" />
<link rel="Next" href="etlmap.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e28442.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/15</span> <!-- End Header -->
<div id="CDMOG184" class="chapter"><a id="CHDDHGHC"></a>
<h1 class="chapter"><span class="secnum">3</span> Access Layer Customization</h1>
<p>This chapter provides information about customizing the access layer of Oracle Communications Data Model. It includes the following topics:</p>
<ul>
<li>
<p><a href="#CHDECHGE">Introduction to Customizing the Access Layer of Oracle Communications Data Model</a></p>
</li>
<li>
<p><a href="#CHDIIDHC">Derived Tables in the Oracle Communications Data Model</a></p>
</li>
<li>
<p><a href="#CHDJGIEB">Aggregate Tables in the Oracle Communications Data Model</a></p>
</li>
<li>
<p><a href="#BABIJFEA">Dimensional Components in the Oracle Communications Data Model</a></p>
</li>
<li>
<p><a href="#BABCCDIJ">Materialized Views in the Oracle Communications Data Model</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a href="pdm.htm#CHDFIAJJ">Chapter 2, "Physical Model Customization"</a></div>
<a id="CHDECHGE"></a>
<div id="CDMOG185" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Introduction to Customizing the Access Layer of Oracle Communications Data Model</h2>
<p><a id="sthref80"></a>The access layer of Oracle Communications Data Model provides the calculated and summarized ("flattened") perspectives of the data needed by business intelligence tools. Access layer objects are populated using the data from the foundation layer 3NF objects.</p>
<p>The access layer objects in the <code>ocdm_sys</code> schema include: derived and aggregate tables and OLAP cube views. This layer also contains data mining models. The results of these models are stored in derived tables. The models themselves are also defined in the <code>ocdm_sys</code> schema.</p>
<p>When designing and customizing access layer objects:</p>
<ul>
<li>
<p>Follow the general guidelines for customizing physical objects given in <a href="pdm.htm#CHDDFHCA">"General Recommendations When Designing Physical Structures"</a>.</p>
</li>
<li>
<p>Design access layer objects to support business intelligence reports and queries that your business end-users require. See <a href="rep_quer.htm#BGBDEIJE">Chapter 5, "Report and Query Customization."</a></p>
</li>
</ul>
<p>The following topics provide specialized information about designing and customizing access layer objects:</p>
<ul>
<li>
<p><a href="#CHDIIDHC">Derived Tables in the Oracle Communications Data Model</a></p>
</li>
<li>
<p><a href="#CHDJGIEB">Aggregate Tables in the Oracle Communications Data Model</a></p>
</li>
<li>
<p><a href="#BABIJFEA">Dimensional Components in the Oracle Communications Data Model</a></p>
</li>
<li>
<p><a href="#BABCCDIJ">Materialized Views in the Oracle Communications Data Model</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CHDIIDHC"></a>
<div id="CDMOG186" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Derived Tables in the Oracle Communications Data Model</h2>
<p>Derived tables have a <code>DWD_</code> prefix. <a id="sthref81"></a><a id="sthref82"></a>Derived tables are tables where one of the following apply:</p>
<ul>
<li>
<p>Have as values the result of a non-aggregate calculation against the data in the foundation layer tables.</p>
</li>
<li>
<p>Have some minimal level of aggregation, typically at the day level (for example, <code>DWD_CNT_DAY</code>).</p>
</li>
<li>
<p>Summarize, at day or month level, all activities over the period of specific processes, split in various attributes (for example, <code>DWD_ACCT_BAL_MO</code>).</p>
</li>
</ul>
<p>Some derived tables leverage, and hence are dependent on, other derived tables (for example <code>DWD_CUST_MNNG</code>).</p>
<p>Depending on the type of derived table you customize derived tables as follows:</p>
<ul>
<li>
<p>Tables that hold the results of a calculation such as the <code>DWD_BER_FER_ERR_RATIO_DAY</code> table that contains values that are the daily BER (Bit Error Rate) and FER (Frame Error Rate) statistics about the network elements. For information on customizing these tables, see <a href="#CHDFHCJI">"Creating New Derived Tables for Calculated Data"</a>.</p>
</li>
<li>
<p>Result tables for the data mining models (for example, <code>DWD_CUST_MNNG</code>). For information on customizing data mining models, see <a href="#CHDFIJBJ">"Customizing Oracle Communications Data Model Data Mining Models"</a>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
The Derived Tables topic in <a class="olink CDMRF726" href="../../doc.112/e28440/physical_cdm.htm#CDMRF726"><span class="italic">Oracle Communications Data Model Reference</span></a> for a list of all of the derived tables in the default Oracle Communications Data Model. For a list of only those derived tables that are results tables for the data mining models, see the chapter on Data Mining Models in <a class="olink CDMRF1194" href="../../doc.112/e28440/data_mining_cdm.htm#CDMRF1194"><span class="italic">Oracle Communications Data Model Reference</span></a>.</div>
<a id="CHDFHCJI"></a>
<div id="CDMOG187" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating New Derived Tables for Calculated Data</h3>
<p>If, during fit-gap analysis, you identified a need for calculated data that is not provided by the default derived tables, you can meet this need by defining new tables or, alternatively, by adding missing dimensions and measures to existing derived tables. When designing these tables, name the tables following the convention of using the <code>CWD_</code> prefix (for Customized Warehouse Derived) or <code>DWD_</code> (for Data Warehouse Derived). Make sure all the main dimensions are put first and have Foreign Keys to their corresponding reference or lookup tables. Attributes that add information only, avoiding costly joins, should not be part of the Primary Key of the derived table. Some dimensions that are part of a hierarchy do not necessarily need to be part of the Primary Key. All measures should be put afterward, grouped if possible by similar meaning. Make sure that all monetary measures should have the <code>LOCAL</code> and <code>REPORTING</code> amount associated, and if possible the currency (as required in the TM Forum SID).</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a class="olink CDMRF195" href="../../doc.112/e28440/dimensional.htm#CDMRF195"><span class="italic">Oracle Communications Data Model Reference</span></a> for details on dimensions that are part of a hierarchy.</div>
</div>
<!-- class="sect2" -->
<a id="CHDFIJBJ"></a>
<div id="CDMOG188" class="sect2">
<h3 class="sect2">Customizing Oracle Communications Data Model Data Mining Models</h3>
<p><a id="sthref83"></a>Some derived (<code>DWD_</code>) tables in the default <code>ocdm_sys</code> schema are the results of data mining models defined in the default Oracle Communications Data Model. Those models are defined in the default <code>ocdm_sys</code> schema that also comes with Oracle Communications Data Model.</p>
<p>Oracle Communications Data Model data mining models get source data from views defined on two derived tables (<code>DWD_</code>) and a base table (<code>DWB_</code>). These tables are:</p>
<ul>
<li>
<p><code>DWD_CUST_DNA</code></p>
</li>
<li>
<p><code>DWD_VAS_SBRP_QCK_SUMM</code></p>
</li>
<li>
<p><code>DWB_EVT_PRTY_INTRACN</code></p>
</li>
</ul>
<p>Derived tables store data mining models prediction results and model rules, in (<code>DWD_</code>), and use reference tables (<code>DWR_</code>), and look up tables (<code>DWL_</code>). These tables are:</p>
<ul>
<li>
<p><code>DWD_CUST_PROD_AFFLTN</code></p>
</li>
<li>
<p><code>DWD_CUST_DNA</code></p>
</li>
<li>
<p><code>DWR_CUST_DT_NODE</code></p>
</li>
<li>
<p><code>DWD_CHRN_SVM_FACTOR</code></p>
</li>
<li>
<p><code>DWD_CHRN_SVM_ROC</code></p>
</li>
<li>
<p><code>DWD_PROMO_SVM_FACTOR</code></p>
</li>
<li>
<p><code>DWD_PROMO_SVM_ROC</code></p>
</li>
<li>
<p><code>DWR_CUST_SGMNT</code></p>
</li>
<li>
<p><code>DWR_CUST_SGMNT_DTL</code></p>
</li>
<li>
<p><code>DWL_MNNG_LTV_BAND</code></p>
</li>
<li>
<p><code>DWL_MNNG_LT_SRVVL_BAND</code></p>
</li>
</ul>
<p>When Oracle Communications Data Model is installed the installer copies the mining source scripts to <code>$ORACLE_HOME/ocdm/pdm/mining/src</code>.</p>
<p><a href="#CHDIHEEH">Table 3-1</a> lists the mining scripts.</p>
<div id="CDMOG464" class="tblformalwide">
<p class="titleintable"><a id="sthref84"></a><a id="CHDIHEEH"></a>Table 3-1 Oracle Communications Data Model Mining Scripts</p>
<table class="cellalignment2082" title="Oracle Communications Data Model Mining Scripts" summary="Data Model mining scripts" dir="ltr">
<thead>
<tr class="cellalignment2076">
<th class="cellalignment2083" id="r1c1-t5">Script Name</th>
<th class="cellalignment2083" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r2c1-t5" headers="r1c1-t5">
<p><code>cust_sntmnt_manual_score.sql</code></p>
</td>
<td class="cellalignment2084" headers="r2c1-t5 r1c2-t5">
<p>Predefined dictionary for customer comment scoring.</p>
</td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r3c1-t5" headers="r1c1-t5">
<p><code>ocdm_mining_init.sql</code></p>
</td>
<td class="cellalignment2084" headers="r3c1-t5 r1c2-t5">
<p>Initializes mining environment and executes the other three mining scripts.</p>
</td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r4c1-t5" headers="r1c1-t5">
<p><code>pkg_mining_etl.sql</code></p>
</td>
<td class="cellalignment2084" headers="r4c1-t5 r1c2-t5">
<p>Defines views, which have training/apply data, on source tables.</p>
</td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r5c1-t5" headers="r1c1-t5">
<p><code>pkg_ocdm_mining.sql</code></p>
</td>
<td class="cellalignment2084" headers="r5c1-t5 r1c2-t5">
<p>Core mining package that has a procedure for each model. Each procedure drops, creates mining model and scores mining model.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p>When you create a customized Oracle Communications Data Model warehouse, you can customize the data mining models in the following ways:</p>
<ul>
<li>
<p>Create a model as discussed in <a href="#CHDDCGJC">"Creating a New Data Mining Model for Oracle Communications Data Model"</a>.</p>
</li>
<li>
<p>Modify an existing model as discussed in <a href="#CHDBIEGF">"Modifying Oracle Communications Data Model Data Mining Models"</a>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a href="#CHDFJFHB">"Tutorial: Customizing the Churn Prediction Model"</a>.</div>
<a id="CHDDCGJC"></a>
<div id="CDMOG465" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating a New Data Mining Model for Oracle Communications Data Model</h4>
<p>To create a data mining model:</p>
<ol>
<li>
<p>Define the problem and identify input attributes. Also identify target attribute if the mining problem is supervised.</p>
</li>
<li>
<p>Check if the existing mining source views defined in <code>pkg_mining_etl.sql</code> script support the requirement of your problem. Modify the definition of views to support your requirement. Do not remove any columns from view definition unless you are sure that those columns do not make any sense.</p>
</li>
<li>
<p>If the existing mining source views do not support required fields, create a new table or view to support your requirements. Add the new table to <code>pkg_mining_etl.sql</code> PL/SQL package. Follow the naming conventions outlined in <a href="pdm.htm#CHDFGAAG">"Conventions When Customizing the Physical Model"</a> and use a <code>DWD_</code> prefix for results tables. Modify the intra-ETL programs to support your mining problem requirements.</p>
</li>
<li>
<p>For each mining problem that Oracle Data Mining supports, there is more than one algorithm. Create a setting table for your mining problem and follow the naming convention. The prefix for a setting table is "<code>DM_</code>". Add the definition of new setting table to <code>ocdm_mining_init.sql</code> script.</p>
</li>
<li>
<p>Add a procedure for your mining problem to <code>pkg_ocdm_mining</code> PL/SQL package. This procedure should create mining model and score the trained mining model on apply data. Compile the package. To create the mining model for your problem, invoke the newly added procedure. Make sure your new procedure works according to your expectations. Check <code>user_mining_models</code> data dictionary view for trained model. There are few more data dictionary views that give more information on the trained models. For more details, refer to <a class="olink DMCON" href="../../datamine.112/e16808/toc.htm"><span class="italic">Oracle Data Mining Concepts</span></a>.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CHDBIEGF"></a>
<div id="CDMOG466" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Modifying Oracle Communications Data Model Data Mining Models</h4>
<p>To customize Oracle Communications Data Model mining models, take the following steps:</p>
<ol>
<li>
<p>Change the definition of source views used as input to the mining model.</p>
</li>
<li>
<p>If required, change the definition of source derived table, <code>DWD_CUST_DNA</code>. Do not remove any existing columns. Only add new columns with <code>NULL</code> enable.</p>
</li>
<li>
<p>Modify the intra-ETL package of <code>DWD_CUST_DNA</code> table. Execute the intra-ETL package to load data into <code>DWD_CUST_DNA</code> table.</p>
</li>
<li>
<p>Refresh mining views by executing following statement. You need to pass training day and apply day key:</p>
<pre>
SQL&gt; exec PKG_MINING_ETL.refresh_mining_views(l_trnng_day_key,l_apply_day_key);
</pre></li>
<li>
<p>Train the model again by calling Oracle Communications Data Model mining package.</p>
</li>
<li>
<p>Ensure that the model reflects the new definition (for example, that a new column has been added).</p>
</li>
</ol>
<div id="CDMOG467" class="example">
<p class="titleinexample"><a id="sthref85"></a>Example 3-1 Adding a New Column to a Mining Model in Oracle Communications Data Model</p>
<pre>
</pre></div>
<!-- class="example" -->
<p>To add a new column to <code>create_prpd_churn_svm_model</code>, perform the following steps:</p>
<ol>
<li>
<p>Add the new column to views that are used in <code>create_prpd_churn_svm_model</code>.</p>
<ul>
<li>
<p><code>DWV_PRPD_CUST_CHRN_SRC</code></p>
</li>
<li>
<p><code>DWV_PRPD_CUST_CHRN_TST</code></p>
</li>
<li>
<p><code>DWV_PRPD_CUST_CHRN_APPLY</code></p>
</li>
</ul>
</li>
<li>
<p>Train the model by issuing the following statement:</p>
<pre>
pkg_ocdm_mining.create_prpd_churn_svm_model(training_day_key);
</pre></li>
<li>
<p>Execute the following statement to query model details table and ensure the new column name is included in the query result:</p>
<pre>
SQL&gt; SELECT attribute_name
        FROM TABLE(SELECT ATTRIBUTE_SET FROM 
        TABLE(DBMS_DATA_MINING.GET_MODEL_DETAILS_SVM('OCDM_PRPD_CHURN_SVM'))
     WHERE CLASS=1);
</pre></li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a href="etlmap.htm#BEHFFJJH">"Refreshing the Data in an Oracle Communications Data Model Warehouse"</a>, and <a href="security_roles.htm#BABHEIFD">Chapter 7, "Working with User Privileges in Oracle Communications Data Model"</a></div>
</div>
<!-- class="sect3" -->
<a id="CHDFJFHB"></a>
<div id="CDMOG468" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Tutorial: Customizing the Churn Prediction Model</h4>
<p>After you have populated Oracle Communications Data Model foundation layer and the derived tables, you can leverage the prebuilt Oracle Communications Data Model mining model for some more advanced analysis and predictions.</p>
<p>This tutorial shows you how to predict the prepaid customers who will terminate the service in next three months (churners) based on the populated Oracle Communications Data Model warehouse. Using prebuilt Oracle Communications Data Model Mining models, you can easily and very quickly see the prediction result of your customers, without having to go through all of the data preparation, training, testing and applying process that you must perform in a traditional from-scratch mining project.</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a class="olink DMCON" href="../../datamine.112/e16808/toc.htm"><span class="italic">Oracle Data Mining Concepts</span></a> for more information about the Oracle Database mining training and scoring (applying) process.</div>
<p>After the initially generated mining model, as time goes by, the customer information and their behavior change. Consequently, you must refresh the previous trained mining models based on the latest customer and usage data. You can follow the process in this tutorial to refresh the mining models to acquire predictions on latest customer information.</p>
<p>This tutorial shows you how to generate the Churn Prediction model through Oracle Communications Data Model Mining APIs. To use different parameters in the training process, or customize the model in more advanced fashion, you can also use Oracle Data Miner to do the same work.</p>
<p>This tutorial consists of the following:</p>
<ul>
<li>
<p><a href="#CHDGHBJC">Tutorial Prerequisites</a></p>
</li>
<li>
<p><a href="#CHDEICAE">Preparing Your Environment</a></p>
</li>
<li>
<p><a href="#CHDBJHAA">Generating the Prepaid Churn Prediction Model</a></p>
</li>
<li>
<p><a href="#CHDDGHBG">Checking the Result</a></p>
</li>
</ul>
<a id="CHDGHBJC"></a>
<div id="CDMOG469" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Tutorial Prerequisites</h5>
<p>Before starting this tutorial:</p>
<ol>
<li>
<p>Review the Oracle by Example (OBE) tutorial "Using Oracle Data Miner 11<span class="italic">g</span> Release 2." To access this tutorial, open the Oracle Learning Library in your browser by following the instructions in <a href="preface.htm#BABIJDCI">"Oracle Technology Network"</a>; and, then, search for the tutorial by name.</p>
</li>
<li>
<p>Install Oracle Communications Data Model.</p>
</li>
<li>
<p>Populate the base, reference, and lookup tables.</p>
</li>
<li>
<p>Execute the intra-ETL.</p>
</li>
</ol>
<p>Ensure that the following tables contain valid data:</p>
<div class="inftblhruleinformal">
<table class="cellalignment2082" summary="Tables needing valid data" dir="ltr">
<tbody>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r1c1-t9"><code>DWB_ACCT_STAT_HIST</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r2c1-t9"><code>DWB_BRDBND_USG_EVT</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r3c1-t9"><code>DWB_FIXED_LN_CALL_EVT</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r4c1-t9"><code>DWB_ISP_USG_EVT</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r5c1-t9"><code>DWB_MMS_EVT</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r6c1-t9"><code>DWB_NP_RQST_HDR</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r7c1-t9"><code>DWB_SMS_EVT</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r8c1-t9"><code>DWB_WRLS_CALL_EVT</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r9c1-t9"><code>DWB_WRLS_CNTNT_DNLDG_EVT</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r10c1-t9"><code>DWD_ACCT_DEBT_MO</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r11c1-t9"><code>DWD_ACCT_PYMT_DAY</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r12c1-t9"><code>DWD_CNTCT_CNTR_DAY</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r13c1-t9"><code>DWD_CUST_DNA</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r14c1-t9"><code>DWD_PRPD_ACCT_STTSTC_DAY</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r15c1-t9"><code>DWL_AGE_BND</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r16c1-t9"><code>DWL_AGE_ON_NET_BND</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r17c1-t9"><code>DWL_DEBT_AGNG_BND</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r18c1-t9"><code>DWR_ACCT</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r19c1-t9"><code>DWR_ADDR_LOC</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r20c1-t9"><code>DWR_AGRMNT</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r21c1-t9"><code>DWR_CUST</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r22c1-t9"><code>DWR_BSNS_MO</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r23c1-t9"><code>DWR_CUST_SCR</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r24c1-t9"><code>DWR_DEMOG_ATRIB</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r25c1-t9"><code>DWR_EXTRNL_OPRTR</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r26c1-t9"><code>DWR_HH</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r27c1-t9"><code>DWR_INDVL_DEMOG_VAL</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r28c1-t9"><code>DWR_JB</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r29c1-t9"><code>DWR_PROD_SBRP</code></td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r30c1-t9"><code>DWR_SOC_JB</code></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblhruleinformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
If you have not populated the real customer data and you only want to learn the Oracle Communications Data Model mining model, you can use the sample data by taking the following steps:
<ol>
<li>
<p>Ensure that during the install you generated the calendar data covering the range of 2011 through 2012. For example, by setting the parameters of starting from <code>"20070101"</code> for 10 years satisfy this condition.</p>
</li>
<li>
<p>Download the sample data (<code>ocdm_for_mining.dmp.zip</code>):</p>
<p><code><a href="http://download.oracle.com/technetwork/database/options/comm-data-model/ocdm_for_mining.dmp.zip">http://download.oracle.com/technetwork/database/options/comm-data-model/ocdm_for_mining.dmp.zip</a></code></p>
<p>Then unzip the sample data and import that data into your new <code>ocdm_sys</code> schema using the following command:</p>
<pre>
imp system/&lt;<span class="codeinlineitalic">password</span>&gt; file=ocdm_for_mining.dmp fromuser=ocdm_sample touser=ocdm_sys ignore=y log=mining_dump_import.log
</pre></li>
</ol>
</div>
</div>
<!-- class="sect4" -->
<a id="CHDEICAE"></a>
<div id="CDMOG470" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Preparing Your Environment</h5>
<p>This tutorial requires a valid, populated Oracle Communications Data Model warehouse.</p>
<div class="infobox-note">
<p class="notep1">Oracle by Example:</p>
For more information about using SQL Developer, refer to tutorial "Getting Started with Oracle SQL Developer 3.0". To access this tutorial, open the Oracle Learning Library in your browser by following the instructions in <a href="preface.htm#BABIJDCI">"Oracle Technology Network"</a>; and, then, search for the tutorial by name.</div>
<p>To prepare the environment, take the following steps:</p>
<ol>
<li>
<p>In SQL Developer, connect to the <code>ocdm_sys</code> schema.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
SQL Developer can be found on any Oracle Database Installation under <code>$ORACLE_HOME/sqldeveloper</code>.</div>
</li>
<li>
<p>After you connect to the <code>ocdm_sys</code> schema, you can see all the tables in that schema. You can narrow down the list by right clicking the "table" and then applying filters:</p>
<img width="1077" height="742" src="img/adm_prep1.png" alt="Description of adm_prep1.png follows" /><br />
<a id="sthref86" href="img_text/adm_prep1.htm">Description of the illustration adm_prep1.png</a><br />
<br /></li>
<li>
<p>(Optional) As mentioned in the <a href="#CHDEICAE">"Preparing Your Environment"</a>", if you have not populated tables with your data you can try using sample data. After you download the sample data, follow these steps to import the sample data:</p>
<ol>
<li>
<p>Connect to sqlplus as sysdba:</p>
<pre>
sqlplus / as sysdba
</pre></li>
<li>
<p>Execute following commands to generate disable constraint script:</p>
<pre>
spool disable_constraints.sql
SET PAGESIZE 15000
SET LINESIZE 1000
conn ocdm_sys/ocdm_sys
SELECT 'ALTER TABLE ' || table_name || ' disable constraint ' || constraint_name || ';'
FROM user_constraints
WHERE STATUS='ENABLED'
AND constraint_type = 'R';
 
 
SELECT 'ALTER TABLE ' || table_name || ' disable constraint ' || constraint_name || ';'
FROM user_constraints
WHERE STATUS='ENABLED'
AND constraint_type = 'U';
 
SELECT 'ALTER TABLE ' || table_name || ' disable constraint ' || constraint_name || ';'
FROM user_constraints
WHERE STATUS='ENABLED'
AND constraint_type = 'C';
 
SELECT 'ALTER TABLE ' || table_name || ' disable constraint ' || constraint_name || ';'
FROM user_constraints
WHERE STATUS='ENABLED'
AND constraint_type = 'P';
 
spool off
</pre></li>
<li>
<p>Execute <code>disable_constraints.sql</code> script as <code>ocdm_sys</code> user:</p>
<pre>
sqlplus ocdm_sys/ocdm_sys @disable_constraints.sql
</pre></li>
<li>
<p>Import the sample dump into <code>ocdm_sys</code> schema by executing the following commands:</p>
<pre>
imp system/&lt;password&gt; file=ocdm_for_mining.dmp fromuser=ocdm_sample touser=ocdm_sys ignore=y log=mining_dump_import.log
</pre></li>
<li>
<p>Execute the following commands to generate enable constraint script:</p>
<pre>
spool enable_constraints.sql
SET PAGESIZE 15000
SET LINESIZE 1000
conn ocdm_sys/ocdm_sys
SELECT 'ALTER TABLE ' || table_name || ' enable constraint ' || constraint_name || ';'
FROM user_constraints
WHERE STATUS='DISABLED'
AND constraint_type = 'R';
 
 
SELECT 'ALTER TABLE ' || table_name || ' enable constraint ' || constraint_name || ';'
FROM user_constraints
WHERE STATUS='DISABLED'
AND constraint_type = 'U';
 
SELECT 'ALTER TABLE ' || table_name || ' enable constraint ' || constraint_name || ';'
FROM user_constraints
WHERE STATUS='DISABLED'
AND constraint_type = 'C';
 
SELECT 'ALTER TABLE ' || table_name || ' enable constraint ' || constraint_name || ';'
FROM user_constraints
WHERE STATUS='DISABLED'
AND constraint_type = 'P';
 
spool off
</pre></li>
<li>
<p>Execute <code>enable_constraints.sql</code> script as <code>ocdm_sys</code> user:</p>
<pre>
sqlplus ocdm_sys/ocdm_sys @enable_constraints.sql
</pre></li>
</ol>
</li>
<li>
<p>Review tables to ensure they contain valid data, either from your own customer data, or from the sample data:</p>
<img width="954" height="833" src="img/adm_prep2.png" alt="Description of adm_prep2.png follows" /><br />
<a id="sthref87" href="img_text/adm_prep2.htm">Description of the illustration adm_prep2.png</a><br />
<br /></li>
<li>
<p>Review the <code>DWD_CUST_DNA</code> table:</p>
<img width="1213" height="850" src="img/adm_prep3.png" alt="Description of adm_prep3.png follows" /><br />
<a id="sthref88" href="img_text/adm_prep3.htm">Description of the illustration adm_prep3.png</a><br />
<br /></li>
<li>
<p>Select and check each of the following tables to ensure that the table is properly populated:</p>
<p><code>DWR_CUST</code></p>
<p><code>DWB_EVT_PRTY_INTRACN</code></p>
<p><code>DWB_ACCT_PYMT</code></p>
<p><code>DWD_CUST_DNA</code></p>
<p><code>DWD_VAS_SBRP_QCK_SUMM</code></p>
</li>
</ol>
</div>
<!-- class="sect4" -->
<a id="CHDBJHAA"></a>
<div id="CDMOG471" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Generating the Prepaid Churn Prediction Model</h5>
<p>For generating prepaid churn prediction model, refresh the mining views defined on mining source tables <code>DWD_CUST_DNA</code> and <code>DWD_VAS_SBRP_QCK_SUMM</code>.</p>
<ol>
<li>
<p>Refresh mining views by passing training day key and apply day key. If you are using mining sample dump provided, then pass <code>20110201</code> as training day key and <code>20110301</code> as apply day key:</p>
<pre>
sqlplus  ocdm_sys/ocdm_sys
SQL&gt; exec PKG_MINING_ETL.refresh_mining_views(l_trnng_day_key,l_apply_day_key);
</pre></li>
<li>
<p>Check <code>user_mining_models</code> data dictionary view for mining models. It should return no data if you have not previously trained any models:</p>
<pre>
SQL&gt; SELECT * FROM user_mining_models;
</pre></li>
<li>
<p>Train the prepaid churn prediction model by executing following:</p>
<pre>
sqlplus  ocdm_sys/ocdm_sys
SQL&gt; exec PKG_OCDM_MINING.create_prpd_churn_svm_model (l_trnng_day_key);
</pre></li>
<li>
<p>Check <code>user_mining_models</code> data dictionary view for trained prepaid churn prediction mining model:</p>
<pre>
SQL&gt; SELECT * FROM user_mining_models;
</pre></li>
<li>
<p>Check <code>DWD_CHRN_SVM_FACTOR</code> table for prepaid churn SVM factors:</p>
<pre>
SQL&gt; SELECT * FROM DWD_CHRN_SVM_FACTOR WHERE ACCT_TYP_CD = 'PRPD';
</pre></li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
This tutorial does not refresh all models. It only refreshes one prepaid churn prediction model. To refresh all of the default mining models based on latest customer data, follow the instructions in <a href="etlmap.htm#BEHFFJJH">"Refreshing the Data in an Oracle Communications Data Model Warehouse"</a>.</div>
</div>
<!-- class="sect4" -->
<a id="CHDDGHBG"></a>
<div id="CDMOG472" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Checking the Result</h5>
<p>After you refresh, train, and generate the data mining model, check the <code>DWD_CUST_DNA</code> results table in <code>ocdm_sys</code> schema as follows:</p>
<ol>
<li>
<p>Issue the following query.</p>
<pre>
SQL&gt; SELECT CUST_CD, PRDCT_CHURN_SVM_IND, PRDCT_CHURN_SVM_PROB 
FROM DWD_CUST_DNA 
WHERE CHRN_IND = 0 --Apply it only on active customers, hence checking their data
AND   DAY_KEY = 20110301 --Apply day Key
AND ROWNUM &lt; 10
;
</pre>
<p>This provides results:</p>
<img width="944" height="867" src="img/adm_result2.png" alt="Description of adm_result2.png follows" /><br />
<a id="sthref89" href="img_text/adm_result2.htm">Description of the illustration adm_result2.png</a><br />
<br />
<p>For each customer identified by <code>CUST_CD</code>, the <code>PRDCT_CHRN_SVM_IND</code> column gives a Boolean prediction of whether a customer will churn in next three months. Zero (0) stands for non-churner, while one (1) stands for churner. The <code>PRDCT_CHURN_SVM_PROB</code> column provides a more detailed probability (0~1) that specifies how likely a customer is going to churn.</p>
</li>
<li>
<p>(Optional) If you have also installed the Oracle Communications Data Model sample reports in Oracle Business Intelligence Suite Enterprise Edition 11g, you can also view the results as an Oracle Business Intelligence Suite Enterprise Edition report.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a class="olink CDMIG119" href="../../doc.112/e28441/intro.htm#CDMIG119"><span class="italic">Oracle Communications Data Model Installation Guide</span></a> for more information on installing the sample reports and deploying the Oracle Communications Data Model RPD and webcat on the Business Intelligence Suite Enterprise Edition instance.</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDJGIEB"></a>
<div id="CDMOG196" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Aggregate Tables in the Oracle Communications Data Model</h2>
<p><a id="sthref90"></a><a id="sthref91"></a>Aggregate tables are tables that aggregate or "roll up" the data to one level higher than a base or derived table (and other functions can also be in the aggregate tables such as average, count, min, max, and others). The aggregate tables in the default Oracle Communications Data Model are actually materialized views and have a <code>DWA_</code> prefix. These aggregate tables provide a view of the data similar to the view provided by a fact table in a snowflake schema.</p>
<p>The default Oracle Communications Data Model defines several aggregate tables. For example, the <code>DWA_BER_FER_ERR_RATIO_MONTH</code> table aggregates the values of the <code>DWD_BER_FER_ERR_RATIO_DAY</code> table to the month level.</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
The "Aggregate Tables" topic in <a class="olink CDMRF728" href="../../doc.112/e28440/physical_cdm.htm#CDMRF728"><span class="italic">Oracle Communications Data Model Reference</span></a> for a list of the aggregate tables in the default Oracle Communications Data Model.</div>
<p>If, during fit-gap analysis, you identified a need for simple aggregated data that is not provided by the default aggregate tables, you can define new materialized views. When designing these tables, keep the following points in mind:</p>
<ul>
<li>
<p>Create a query for the materialized view that aggregates up only a single level. For example, if aggregating over time, then aggregate only from day to month.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you must aggregate up many levels (for example in time, month, quarter, and year) or different hierarchies (for example, the fiscal and calendar hierarchies for a time dimension), do not define a <code>DWA_</code> table; instead, define the aggregations by creating OLAP cubes.</div>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a href="#BABCCDIJ">"Materialized Views in the Oracle Communications Data Model"</a> and <a href="#CHDGECFG">"Defining New Oracle OLAP Cubes for Oracle Communications Data Model"</a>.</div>
</li>
<li>
<p>Name the tables following the conventions outlined in <a href="pdm.htm#CHDDEGEF">"General Naming Conventions for Physical Objects"</a> and use a <code>DWA_</code> prefix.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BABIJFEA"></a>
<div id="CDMOG197" class="sect1">
<h2 class="sect1">Dimensional Components in the Oracle Communications Data Model</h2>
<p><a id="sthref92"></a><a id="sthref93"></a>There is often much discussion regarding the 'best' modeling approach to take for any given data warehouse with each style, classic 3NF and dimensional having their own strengths and weaknesses. It is likely that data warehouses must do more to embrace the benefits of each model type rather than rely on just one - this is the approach that was adopted in designing the Oracle Communications Data Model. The foundation layer of the Oracle Communications Data Model is a 3NF model. The default Oracle Communications Data Model also provides a dimensional model of the data. This dimensional model of the data is a perspective that summarizes and aggregates data, rather than preserving detailed transaction information.</p>
<p>Familiarize yourself with dimensional modeling by reading the following topics before you begin to customize the dimensional model of the default Oracle Communications Data Model:</p>
<ul>
<li>
<p><a href="#CHDDDGHD">Characteristics of a Dimensional Model</a></p>
</li>
<li>
<p><a href="#CHDGJHFH">Characteristics of Relational Star and Snowflake Tables</a></p>
</li>
<li>
<p><a href="#CHDBIIIE">Characteristics of the OLAP Dimensional Model</a></p>
</li>
<li>
<p><a href="#CHDBCJJA">Characteristics of the OLAP Cubes in Oracle Communications Data Model</a></p>
</li>
<li>
<p><a href="#CHDGECFG">Defining New Oracle OLAP Cubes for Oracle Communications Data Model</a></p>
</li>
<li>
<p><a href="#CHDHBBAJ">Changing an Oracle OLAP Cube in Oracle Communications Data Model</a></p>
</li>
<li>
<p><a href="#CHDIJCGJ">Creating a Forecast Cube for Oracle Communications Data Model</a></p>
</li>
<li>
<p><a href="#CHDHEGCC">Choosing a Cube Partitioning Strategy for Oracle Communications Data Model</a></p>
</li>
<li>
<p><a href="#CHDFAHED">Choosing a Cube Data Maintenance Method for Oracle Communications Data Model</a></p>
</li>
</ul>
<a id="CHDDDGHD"></a>
<div id="CDMOG198" class="sect2">
<h3 class="sect2">Characteristics of a Dimensional Model</h3>
<p>The simplicity of a dimensional model is inherent because it defines objects that represent real-world business entities. Analysts know which business measures they are interested in examining, which dimensions and attributes make the data meaningful, and how the dimensions of their business are organized into levels and hierarchies.</p>
<p>In the simplest terms, a dimensional model identifies the following objects:</p>
<ul>
<li>
<p><span class="bold">Measures.</span> Measures store quantifiable business data (such as sales, expenses, and inventory). Measures are also called "facts". Measures are organized by one or more dimensions and may be stored or calculated at query time:</p>
<ul>
<li>
<p><span class="bold">Stored Measures</span>. Stored measures are loaded and stored at the leaf level. Commonly, there is also a percentage of summary data that is stored. Summary data that is not stored is dynamically aggregated when queried.</p>
</li>
<li>
<p><span class="bold">Calculated Measures.</span> Calculated measures are measures whose values are calculated dynamically at query time. Only the calculation rules are stored in the database. Common calculations include measures such as ratios, differences, totals and moving averages. Calculations do not require disk storage space, and they do not extend the processing time required for data maintenance.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Dimensions.</span> A dimension is a structure that categorizes data to enable users to answer business questions. Commonly used dimensions are Customers, Products, and Time. A dimension's structure is organized hierarchically based on parent-child relationships. These relationships enable:</p>
<ul>
<li>
<p>Navigation between levels.</p>
<p>Hierarchies on dimensions enable drilling down to lower levels or navigation to higher levels (rolling up). Drilling down on the Time dimension member 2012 typically navigates you to the quarters Q1 2012 through Q4 2012. In a calendar year hierarchy for 2012, drilling down on Q1 2012 would navigate you to the months, January 12 through March 12. These kinds of relationships make it easy for users to navigate through large volumes of multidimensional data.</p>
</li>
<li>
<p>Aggregation from child values to parent values.</p>
<p>The parent represents the aggregation of its children. Data values at lower levels aggregate into data values at higher levels. Dimensions are structured hierarchically so that data at different levels of aggregation are manipulated efficiently for analysis and display.</p>
</li>
<li>
<p>Allocation from parent values to child values.</p>
<p>The reverse of aggregation is allocation and is heavily used by planning budgeting, and similar applications. Here, the role of the hierarchy is to identify the children and descendants of particular dimension members of "top-down" allocation of budgets (among other uses).</p>
</li>
<li>
<p>Grouping of members for calculations.</p>
<p>Share and index calculations take advantage of hierarchical relationships (for example, the percentage of total profit contributed by each product, or the percentage share of product revenue for a certain category, or costs as a percentage of the geographical region for a retail location).</p>
</li>
</ul>
</li>
</ul>
<p>A dimension object helps to organize and group dimensional information into hierarchies. This represents natural 1:n relationships between columns or column groups (the levels of a hierarchy) that cannot be represented with constraint conditions. Going up a level in the hierarchy is called rolling up the data and going down a level in the hierarchy is called drilling down the data.</p>
<p>There are two ways that you can implement a dimensional model:</p>
<ul>
<li>
<p><span class="bold">Relational tables in a star schema configuration.</span> This traditional method of implementing a dimensional model is discussed in <a href="#CHDGJHFH">"Characteristics of Relational Star and Snowflake Tables"</a>.</p>
</li>
<li>
<p><span class="bold">Oracle OLAP Cubes</span>. The physical model provided with Oracle Communications Data Model provides a dimensional perspective of the data using Oracle OLAP cubes. This dimensional model is discussed in <a href="#CHDBIIIE">"Characteristics of the OLAP Dimensional Model"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDGJHFH"></a>
<div id="CDMOG199" class="sect2">
<h3 class="sect2">Characteristics of Relational Star and Snowflake Tables</h3>
<p>In the case of relational tables, the dimensional model has historically been implemented as a star or snowflake schema. Dimension tables (which contain information about hierarchies, levels, and attributes) join to one or more fact tables. Fact tables are the large tables that store quantifiable business measurements (such as sales, expenses, and inventory) and typically have foreign keys to the dimension tables. Dimension tables, also known as lookup or reference tables, contain the relatively static or descriptive data in the data warehouse.</p>
<p>A star schema is a relational schema whose design represents a multidimensional data model. The star schema consists of one or more fact tables and one or more dimension tables that are related through foreign keys. This allows drill paths, hierarchy and query profile to be embedded in the data model itself rather than the data. This in part at least, is what makes navigation of the model so straightforward for end users. Star schemas usually have a large fact table surrounded by smaller dimension tables. Dimension tables do not change very much. Most of the information that the users need are in the fact tables. Therefore, star schemas have fewer table joins than do 3NF models.</p>
<p>A star schema is so called because the diagram resembles a star, with points radiating from a center. The center of the star consists of one or more fact tables and the points of the star are the dimension tables.</p>
<div id="CDMOG200" class="figure">
<p class="titleinfigure"><a id="CHDFJADI"></a>Figure 3-1 Star Schema Diagram</p>
<img width="380" height="178" src="img/starschm.gif" alt="Description of Figure 3-1 follows" /><br />
<a id="sthref94" href="img_text/starschm.htm">Description of "Figure 3-1 Star Schema Diagram"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Snowflake schemas are slight variants of a simple star schema where the dimension tables are further normalized and broken down into multiple tables. The snowflake aspect only affects the dimensions and not the fact table and is therefore considered conceptually equivalent to star schemas. Snowflake dimensions are useful and indeed necessary when there are fact tables of differing granularity. A month-level derived or aggregate table (or materialized view) must be associated with a month level snowflake dimension table rather than the default (lower) Day level star dimension table.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a href="#CHDFGFEB">"Declaring Relational Dimension Tables"</a> and <a href="#CHDIFFEH">"Validating Relational Dimension Tables"</a>.</div>
<a id="CHDFGFEB"></a>
<div id="CDMOG201" class="sect3">
<h4 class="sect3">Declaring Relational Dimension Tables</h4>
<p>When a relational table acts as a dimension to a fact table, it is recommended that you declare that table as a dimension (even though it is not necessary). Defined dimensions can yield significant performance benefits, and support the use of more complex types of rewrite.</p>
<p>To define and declare the structure of the dimension use the <code>CREATE DIMENSION</code> command. Use the <code>LEVEL</code> clause to identify the names of the dimension levels.</p>
</div>
<!-- class="sect3" -->
<a id="CHDIFFEH"></a>
<div id="CDMOG202" class="sect3">
<h4 class="sect3">Validating Relational Dimension Tables</h4>
<p>To improve the data quality of the dimension data in the data warehouse, it is recommended that you validate the declarative information about the relationships between the dimension members after any modification to the dimension data.</p>
<p>To perform this validation, use the <code>VALIDATE_DIMENSION</code> procedure of the <code>DBMS_DIMENSION</code> package. When the <code>VALIDATE_DIMENSION</code> procedure encounters any errors, the procedure places the errors into the <code>DIMENSION_EXCEPTIONS</code> table. To find the exceptions identified by the <code>VALIDATE_DIMENSION</code> procedure, query the <code>DIMENSION_EXCEPTIONS</code> table.</p>
<p>You can schedule a call to the <code>VALIDATE_DIMENSION</code> procedure as a post-process step to the regular Incremental Dimension load script. This can be done before the call to refresh the derived or aggregate tables of the data model through materialized view refresh, intra-ETL package calls.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDBIIIE"></a>
<div id="CDMOG203" class="sect2">
<h3 class="sect2">Characteristics of the OLAP Dimensional Model</h3>
<p>Oracle OLAP Cubes logically represent data similar to relational star tables, although the data is actually stored in multidimensional arrays. Like dimension tables, cube dimensions organize members into hierarchies, levels, and attributes. The cube stores the measure (fact) data. The dimensions form the edges of the cube.</p>
<p>Oracle OLAP is an OLAP server embedded in the Oracle Database. Oracle OLAP provides native multidimensional storage and speed-of-thought response times when analyzing data across multiple dimensions. The database provides rich support for analytics such as time series calculations, forecasting, advanced aggregation with additive and nonadditive operators, and allocation operations.</p>
<p>By integrating multidimensional objects and analytics into the database, Oracle Database provides the best of both worlds: the power of multidimensional analysis along with the reliability, availability, security, and scalability of the Oracle database.</p>
<p>Oracle OLAP is fully integrated into Oracle Database. At a technical level, this means:</p>
<ul>
<li>
<p>The OLAP engine runs within the kernel of Oracle Database.</p>
</li>
<li>
<p>Dimensional objects are stored in Oracle Database in their native multidimensional format.</p>
</li>
<li>
<p>Cubes and other dimensional objects are first class data objects represented in the Oracle data dictionary.</p>
</li>
<li>
<p>Data security is administered in the standard way, by granting and revoking privileges to Oracle Database users and roles.</p>
</li>
<li>
<p>OLAP cubes, dimensions, and hierarchies are exposed to applications as relational views. Consequently, applications can query OLAP objects using SQL as described in <a href="#CHDGEBHI">"Oracle OLAP Cube Views"</a> and <a href="rep_quer.htm#BGBDEIJE">Chapter 5, "Report and Query Customization."</a></p>
</li>
<li>
<p>Oracle OLAP cubes can be enhanced so that they are materialized views as described in <a href="#CHDBBCEC">"Cube Materialized Views"</a>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a class="olink OLAUG9113" href="../../olap.112/e17123/overview.htm#OLAUG9113"><span class="italic">Oracle OLAP User's Guide</span></a> and<a href="#CHDBCJJA">"Characteristics of the OLAP Cubes in Oracle Communications Data Model"</a>.</div>
<p class="subhead2"><a id="CDMOG204"></a>Benefits of Using Oracle OLAP</p>
<p>The benefits of using Oracle OLAP are significant; Oracle OLAP offers the power of simplicity and provides: One database, standard administration and security, standard interfaces and development tools.</p>
<p>The Oracle OLAP dimensional data model is highly structured. Structure implies rules that govern the relationships among the data and control how the data can be queried. Cubes are the physical implementation of the dimensional model, and thus are highly optimized for dimensional queries. The OLAP engine leverages this innate dimensionality in performing highly efficient cross-cube joins for inter-row calculations, outer joins for time series analysis, and indexing. Dimensions are pre-joined to the measures. The technology that underlies cubes is based on an indexed multidimensional array model, which provides direct cell access.</p>
<p>The OLAP engine manipulates dimensional objects in the same way that the SQL engine manipulates relational objects. However, because the OLAP engine is optimized to calculate analytic functions, and dimensional objects are optimized for analysis, analytic and row functions can be calculated much faster in OLAP than in SQL.</p>
<p>The dimensional model enables Oracle OLAP to support high-end business intelligence tools and applications such as OracleBI Discoverer Plus OLAP, OracleBI Spreadsheet Add-In, Oracle Business Intelligence Suite Enterprise Edition, BusinessObjects Enterprise, and Cognos ReportNet.</p>
<p class="subhead2"><a id="CDMOG205"></a>Oracle OLAP Dimensional Objects</p>
<p>Oracle OLAP dimensional objects include cubes, measures, dimensions, hierarchies, levels and attributes. The OLAP dimensional objects are described in detail in <a class="olink OLAUG9109" href="../../olap.112/e17123/overview.htm#OLAUG9109"><span class="italic">Oracle OLAP User's Guide</span></a>. <a href="#CHDFCCDJ">Figure 3-2</a> shows the general relationships among the objects.</p>
<div id="CDMOG206" class="figure">
<p class="titleinfigure"><a id="CHDFCCDJ"></a>Figure 3-2 Diagram of the OLAP Dimensional Model</p>
<img width="580" height="315" src="img/logicalm.gif" alt="Description of Figure 3-2 follows" /><br />
<a id="sthref95" href="img_text/logicalm.htm">Description of "Figure 3-2 Diagram of the OLAP Dimensional Model"</a><br />
<br /></div>
<!-- class="figure" -->
<a id="CHDGEBHI"></a>
<div id="CDMOG207" class="sect3">
<h4 class="sect3">Oracle OLAP Cube Views</h4>
<p>When you define an OLAP cube, Oracle OLAP automatically generates a set of relational views on the cube and its dimensions and hierarchies</p>
<ul>
<li>
<p>Cube view. Each cube has a cube view that presents the data for all the measures and calculated measures in the cube. You can use a cube view like a fact table in a star or snowflake schema. However, the cube view contains all the summary data in addition to the detail level data. The default name of a cube view is <code><span class="codeinlineitalic">cube</span></code><code>_VIEW</code>.</p>
</li>
<li>
<p>Dimension and hierarchy views. Each dimension has one dimension view plus a hierarchy view for each hierarchy associated with the dimension. The default name for a dimension view is <code><span class="codeinlineitalic">dimension</span></code><code>_VIEW</code>. For a hierarchy view, the default name is <code><span class="codeinlineitalic">dimension_hierarchy</span></code><code>_VIEW</code>.</p>
</li>
</ul>
<p>These views are related in the same way as fact and dimension tables in a star schema. Cube views serve the same function as fact tables, and hierarchy views and dimension views serve the same function as dimension tables. Typical queries join a cube view with either a hierarchy view or a dimension view.</p>
<p>SQL applications query these views to display the information-rich contents of these objects to analysts and decision makers. You can also create custom views that follow the structure expected by your applications, using the system-generated views like base tables.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
The discussion on querying dimensional objects in <a class="olink OLAUG400" href="../../olap.112/e17123/query.htm#OLAUG400"><span class="italic">Oracle OLAP User's Guide</span></a> and <a href="rep_quer.htm#BGBDEIJE">Chapter 5, "Report and Query Customization."</a></div>
</div>
<!-- class="sect3" -->
<a id="CHDBBCEC"></a>
<div id="CDMOG208" class="sect3">
<h4 class="sect3">Cube Materialized Views</h4>
<p>Oracle OLAP cubes can be enhanced so that they are materialized views. A cube that has been enhanced in this way is called a cube materialized view and has a <code>CB$</code> prefix. Cube materialized views can be incrementally refreshed through the Oracle Database materialized view subsystem, and they can serve as targets for transparent rewrite of queries against the source tables.</p>
<p>The OLAP dimensions associated with a cube materialized view are also defined with materialized view capabilities.</p>
<p class="subhead2"><a id="CDMOG209"></a>Necessary Cube Characteristics for Cube Materialized Views</p>
<p>A cube must conform to the following requirements, before it can be designated as a cube materialized view:</p>
<ul>
<li>
<p>All dimensions of the cube have at least one level and one level-based hierarchy. Ragged and skip-level hierarchies are not supported. The dimensions must be mapped.</p>
</li>
<li>
<p>All dimensions of the cube use the same aggregation operator, which is either <code>SUM</code>, <code>MIN</code>, or <code>MAX</code>.</p>
</li>
<li>
<p>The cube has one or more dimensions and one or more measures.</p>
</li>
<li>
<p>The cube is fully defined and mapped. For example, if the cube has five measures, then all five are mapped to the source tables.</p>
</li>
<li>
<p>The data type of the cube is <code>NUMBER</code>, <code>VARCHAR2</code>, <code>NVARCHAR2</code>, or <code>DATE</code>.</p>
</li>
<li>
<p>The source detail tables support dimension and rely constraints. If they have not been defined, then use the Relational Schema Advisor to generate a script that defines them on the detail tables.</p>
</li>
<li>
<p>The cube is compressed.</p>
</li>
<li>
<p>The cube can be enriched with calculated measures, but it cannot support more advanced analytics in a cube script.</p>
</li>
</ul>
<p class="subhead2"><a id="CHDDABHH"></a><a id="CDMOG210"></a>Adding Materialized View Capabilities</p>
<p><a id="sthref96"></a>To add materialized view capabilities to an OLAP cube, take the following steps:</p>
<ol>
<li>
<p>In the Analytic Workspace Manager, connect to the <code>ocdm_sys</code> schema.</p>
</li>
<li>
<p>From the cube list, select the cube which you want to enable.</p>
</li>
<li>
<p>In the right pane, select the <span class="gui-object-action">Materialized Views</span> tab.</p>
</li>
<li>
<p>Select <span class="gui-object-action">Enable Materialized View Refresh of the Cube</span>. then click <span class="gui-object-action">Apply</span>.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot enable the cube materialized view for a forecast cube.</div>
<div class="infobox-note">
<p class="notep1">Oracle by Example:</p>
For more information on working with OLAP cubes, see the following OBE tutorials:
<ul>
<li>
<p>"Querying OLAP 11<span class="italic">g</span> Cubes"</p>
</li>
<li>
<p>"Using Oracle OLAP 11<span class="italic">g</span> With Oracle BI Enterprise Edition"</p>
</li>
</ul>
<p>To access the tutorials, open the Oracle Learning Library in your browser by following the instructions in <a href="preface.htm#BABIJDCI">"Oracle Technology Network"</a>; and, then, search for the tutorials by name.</p>
</div>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a class="olink OLAUG9156" href="../../olap.112/e17123/cubes.htm#OLAUG9156"><span class="italic">Oracle OLAP User's Guide</span></a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDBCJJA"></a>
<div id="CDMOG211" class="sect2">
<h3 class="sect2">Characteristics of the OLAP Cubes in Oracle Communications Data Model</h3>
<p><a id="sthref97"></a>The default access layer of Oracle Communications Data Model provides a dimensional perspective of the data using Oracle OLAP cubes.</p>
<p>There are OLAP cubes defined in the default <code>ocdm_sys</code> schema. These cubes have the general characteristics described in <a href="#CHDBIIIE">"Characteristics of the OLAP Dimensional Model"</a>. Specifically, OLAP cubes in the Oracle Communications Data Model have the following characteristics:</p>
<ul>
<li>
<p>All of the default OLAP cubes are loaded with data from <code>DWA_</code> tables that are materialized views.</p>
</li>
<li>
<p>The cubes were defined and built using the Analytical Workspace Manager (AWM) client tool.</p>
</li>
<li>
<p>A relational view (with a <code>_VIEW</code> suffix) is defined over each of the OLAP cubes.</p>
</li>
<li>
<p>All of the OLAP cubes in the Oracle Communications Data Model are cube materialized views (that is, <code>CB$</code> objects).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Immediately after installation, all materialized views underlying the OLAP cubes are disabled by default. To enable the cube materialized views, you must follow the steps outlined in <a href="#CHDDABHH">"Adding Materialized View Capabilities"</a>.</div>
</li>
</ul>
<p><a id="sthref98"></a><a id="sthref99"></a>For information on the using OLAP cubes in your customized version of Oracle Communications Data Model, see <a class="olink OLAUG9147" href="../../olap.112/e17123/cubes.htm#OLAUG9147"><span class="italic">Oracle OLAP User's Guide</span></a> and the following topics:</p>
<ul>
<li>
<p><a href="#CHDGECFG">Defining New Oracle OLAP Cubes for Oracle Communications Data Model</a></p>
</li>
<li>
<p><a href="#CHDHBBAJ">Changing an Oracle OLAP Cube in Oracle Communications Data Model</a></p>
</li>
<li>
<p><a href="#CHDIJCGJ">Creating a Forecast Cube for Oracle Communications Data Model</a></p>
</li>
<li>
<p><a href="#CHDHEGCC">Choosing a Cube Partitioning Strategy for Oracle Communications Data Model</a></p>
</li>
<li>
<p><a href="#CHDFAHED">Choosing a Cube Data Maintenance Method for Oracle Communications Data Model</a></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDGECFG"></a>
<div id="CDMOG212" class="sect2">
<h3 class="sect2">Defining New Oracle OLAP Cubes for Oracle Communications Data Model</h3>
<p><a id="sthref100"></a>You can add new OLAP cubes to the <code>ocdm_sys</code> schema. For consistency's sake, design and define these new cubes as described in <a href="#CHDBCJJA">"Characteristics of the OLAP Cubes in Oracle Communications Data Model"</a>.</p>
<p>Take the following steps to define new cubes:</p>
<ol>
<li>
<p>Ensure that there is an aggregate table (DWA_) to use as the "lowest leaf" data for the cube. See <a href="#CHDJGIEB">"Aggregate Tables in the Oracle Communications Data Model"</a> for information on creating new tables.</p>
</li>
<li>
<p>Use the AWM to define new Cubes for a customized version of Oracle Communications Data Model. Follow the instructions given for creating cubes and dimensions in <a class="olink OLAUG300" href="../../olap.112/e17123/cubes.htm#OLAUG300"><span class="italic">Oracle OLAP User's Guide</span></a>.</p>
<p>Use the information provided in <a href="#CHDBIIIE">"Characteristics of the OLAP Dimensional Model"</a>. and the Oracle OLAP User's Guide to guide you when you design and define new OLAP cubes. Also, if you are familiar with a relational star schema design as outlined in <a href="#CHDGJHFH">"Characteristics of Relational Star and Snowflake Tables"</a>, then you can use this understanding to help you design an OLAP Cube:</p>
<ul>
<li>
<p>Fact tables correspond to cubes.</p>
</li>
<li>
<p>Data columns in the fact tables correspond to measures.</p>
</li>
<li>
<p>Foreign key constraints in the fact tables identify the dimension tables.</p>
</li>
<li>
<p>Dimension tables identify the dimensions.</p>
</li>
<li>
<p>Primary keys in the dimension tables identify the base-level dimension members.</p>
</li>
<li>
<p>Parent columns in the dimension tables identify the higher level dimension members.</p>
</li>
<li>
<p>Columns in the dimension tables containing descriptions and characteristics of the dimension members identify the attributes.</p>
</li>
</ul>
<p>You can also get insights into the dimensional model by looking at the sample reports included with Oracle Communications Data Model.</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a class="olink CDMIG119" href="../../doc.112/e28441/intro.htm#CDMIG119"><span class="italic">Oracle Communications Data Model Installation Guide</span></a> for more information on installing the sample reports and deploying the Oracle Communications Data Model RPD and webcat on the Business Intelligence Suite Enterprise Edition instance.</div>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
While investigating your source data, you may decide to create relational views that more closely match the dimensional model that you plan to create.</div>
</li>
<li>
<p>Add materialized view capabilities to the OLAP cubes as described in <a href="#CHDDABHH">"Adding Materialized View Capabilities"</a>.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a class="olink OLAUG9156" href="../../olap.112/e17123/cubes.htm#OLAUG9156"><span class="italic">Oracle OLAP User's Guide</span></a>, <a href="#CHDGECFG">"Defining New Oracle OLAP Cubes for Oracle Communications Data Model"</a>, and the sample reports in <a class="olink CDMRF1242" href="../../doc.112/e28440/sample_reports.htm#CDMRF1242"><span class="italic">Oracle Communications Data Model Reference</span></a>.</div>
<div class="infobox-note">
<p class="notep1">Oracle by Example:</p>
For more information on creating OLAP cubes, see the "Building OLAP 11<span class="italic">g</span> Cubes" OBE tutorial.
<p>To access the tutorial, open the Oracle Learning Library in your browser by following the instructions in <a href="preface.htm#BABIJDCI">"Oracle Technology Network"</a>; and, then, search for the tutorial by name.</p>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDHBBAJ"></a>
<div id="CDMOG213" class="sect2">
<h3 class="sect2">Changing an Oracle OLAP Cube in Oracle Communications Data Model</h3>
<p><a id="sthref101"></a><a id="sthref102"></a>Common customizations to Oracle Communications Data Model cubes are changing the dimensions or the measures of the cube.</p>
<p>Since all Oracle Communications Data Model cubes load data from tables with the <code>DWA_</code> prefix, to change the measures or dimensions of one cube, you must take the following steps:</p>
<ol>
<li>
<p>Use the information in <a class="olink CDMRF1241" href="../../doc.112/e28440/olap_cubes_cdm.htm#CDMRF1241"><span class="italic">Oracle Communications Data Model Reference</span></a>, to identify the DWA_ table from which the OLAP cube is populated.</p>
</li>
<li>
<p>Change the structure of the <code>DWA_</code> table identified in Step 1.</p>
</li>
<li>
<p>Change the OLAP cube and cube materialized views to reflect the new structure.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDIJCGJ"></a>
<div id="CDMOG214" class="sect2">
<h3 class="sect2">Creating a Forecast Cube for Oracle Communications Data Model</h3>
<p><a id="sthref103"></a><a id="sthref104"></a>To create a forecast cube for Oracle Communications Data Model:</p>
<ol>
<li>
<p>Create a cube to contain the results of the forecast as described in <a href="#CHDGECFG">"Defining New Oracle OLAP Cubes for Oracle Communications Data Model"</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot enable materialized views for an Oracle Communications Data Model forecast cube.</div>
</li>
<li>
<p>Write an OLAP DML forecasting context program as described in <a class="olink OLADM308" href="../../olap.112/e17122/dml_program.htm#OLADM308"><span class="italic">Oracle OLAP DML Reference</span></a>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDHEGCC"></a>
<div id="CDMOG215" class="sect2">
<h3 class="sect2">Choosing a Cube Partitioning Strategy for Oracle Communications Data Model</h3>
<p><a id="sthref105"></a><a id="sthref106"></a>Partitioning is a method of physically storing the contents of a cube. It improves the performance of large cubes in the following ways:</p>
<ul>
<li>
<p>Improves scalability by keeping data structures small. Each partition functions like a smaller measure.</p>
</li>
<li>
<p>Keeps the working set of data smaller both for queries and maintenance, since the relevant data is stored together.</p>
</li>
<li>
<p>Enables parallel aggregation during data maintenance. Each partition can be aggregated by a separate process.</p>
</li>
<li>
<p>Simplifies removal of old data from storage. Old partitions can be dropped, and new partitions can be added.</p>
</li>
</ul>
<p>The number of partitions affects the database resources that can be allocated to loading and aggregating the data in a cube. Partitions can be aggregated simultaneously when sufficient resources have been allocated.</p>
<p>The Cube Partitioning Advisor analyzes the source tables and develops a partitioning strategy. You can accept the recommendations of the Cube Partitioning Advisor, or you can make your own decisions about partitioning.</p>
<p>If your partitioning strategy is driven primarily by life-cycle management considerations, then you should partition the cube on the Time dimension. Old time periods can then be dropped as a unit, and new time periods added as a new partition. The Cube Partitioning Advisor has a Time option, which recommends a hierarchy and a level in the Time dimension for partitioning.</p>
<p>The level on which to partition a cube is determined based on a trade off between load performance and query performance.</p>
<p>Typically, you do not want to partition on too low a level (for example, on the DAY level of a TIME dimension) because if you do then too many partitions must be defined at load time which slows down an initial or historical load. Also, a large number of partitions can result in unusually long Analytic Workspace attach times and slows down the Time Series-based calculations. Also, a Quarterly Cumulative measure (Quarter to Date Measure) needs to access 90 or 91 partitions to calculate a value for one Customer and Organization. All dimension members above the partition level of partition dimension (including those belonging to nondefault hierarchies) would be present in a single default template. Day level partitioning makes this very heavy since all higher level members are stored in default template. However, the advantage of partitioning <code>DAY</code> if the OLAP Cube load frequency is daily then there you must only load from a new partition in fact table into a single partition in the OLAP cube every day. This greatly improves the load performance since percentage-based refresh can be enabled if the cube is materialized-view enabled and has materialized-view logs.</p>
<p class="subhead2"><a id="CDMOG216"></a>Recommendations: Cube Partitioning Strategy</p>
<p>Usually a good compromise between the differing load and query performance requirements is to use an intermediate level like <code>MONTH</code> as the partition level. Time series calculations within a month (week to date, month to date, and so on) are fast and higher level calculations like year to date needs to refer to 12 partitions at most. Also this way the monthly partition is defined and created only one time (that is during the initial load on first of each month) and is then reused for each subsequent load that month. The aggregation process may be triggered off at the month level (instead of specific day level) and some redundant aggregations (of previously loaded dates of current month) may occur each time but it should result in satisfactory load and query performance.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
"The discussion on choosing a partition strategy in <a class="olink OLAUG9148" href="../../olap.112/e17123/cubes.htm#OLAUG9148"><span class="italic">Oracle OLAP User's Guide</span></a>, <a href="pdm.htm#CHDJBEFG">"Indexes and Partitioned Indexes in the Oracle Communications Data Model"</a>, and <a href="#CHDCGHCG">"Partitioning and Materialized Views"</a>.</div>
</div>
<!-- class="sect2" -->
<a id="CHDFAHED"></a>
<div id="CDMOG217" class="sect2">
<h3 class="sect2">Choosing a Cube Data Maintenance Method for Oracle Communications Data Model</h3>
<p><a id="sthref107"></a>While developing a dimensional model of your data, it is a good idea to map and load each object immediately after you create it so that you can immediately detect and correct any errors that you made to the object definition or the mapping.</p>
<p>However, in a production environment, you want to perform routine maintenance as quickly and easily as possible. For this stage, you can choose among data maintenance methods. You can refresh all cubes using the Maintenance Wizard. This wizard enables you to refresh a cube immediately, or submit the refresh as a job to the Oracle job queue, or generate a PL/SQL script. You can run the script manually or using a scheduling utility, such as Oracle Enterprise Manager Scheduler or the <code>DBMS_SCHEDULER</code> PL/SQL package. The generated script calls the <code>BUILD</code> procedure of the <code>DBMS_CUBE</code> PL/SQL package. You can modify this script or develop one from the start using this package.</p>
<p>The data for a partitioned cube is loaded and aggregated in parallel when multiple processes have been allocated to the build. You are able to see this in the build log.</p>
<p>In addition, each cube can support these data maintenance methods:</p>
<ul>
<li>
<p>Custom cube scripts</p>
</li>
<li>
<p>Cube materialized views</p>
</li>
</ul>
<p>If you are defining cubes to replace existing materialized views, then you use the materialized views as an integral part of data maintenance. Note, however, that materialized view capabilities restrict the types of analytics that can be performed by a custom cube script.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a class="olink OLAUG700" href="../../olap.112/e17123/admin.htm#OLAUG700"><span class="italic">Oracle OLAP User's Guide</span></a> and <a href="#CHDIJEDJ">"Types of Materialized Views and Refresh Options"</a></div>
<div class="infobox-note">
<p class="notep1">Oracle by Example:</p>
See the following OBE tutorial for an example of how Oracle uses cube materialized views for transparent access to a relational star schema.:
<ul>
<li>
<p>"Querying OLAP 11<span class="italic">g</span> Cubes"</p>
</li>
</ul>
<p>To access the tutorial, open the Oracle Learning Library in your browser by following the instructions in <a href="preface.htm#BABIJDCI">"Oracle Technology Network"</a>; and, then, search for the tutorial by name.</p>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCCDIJ"></a>
<div id="CDMOG218" class="sect1">
<h2 class="sect1">Materialized Views in the Oracle Communications Data Model</h2>
<p><a id="sthref108"></a>Materialized views are query results that have been stored or "materialized" in advance as schema objects. From a physical design point of view, materialized views resemble tables or partitioned tables and behave like indexes in that they are used transparently and can improve performance.</p>
<p>In the past, organizations using summaries spent a significant amount of time and effort creating summaries manually, identifying which summaries to create, indexing the summaries, updating them, and advising their users on which ones to use. With the advent of materialized views, a database administrator creates one or more materialized views, which are the equivalent of a summary. Thus, the workload of the database administrator is eased and the user no longer needed to be aware of the summaries that had been defined. Instead, the end user queries the tables and views at the detail data level. The query rewrite mechanism in the Oracle server automatically rewrites the SQL query to use the summary tables and reduces response time for returning results from the query.</p>
<p>Materialized views improve query performance by precalculating expensive join and aggregation operations on the database before executing and storing the results in the database. The query optimizer automatically recognizes when an existing materialized view can and should be used to satisfy a request.</p>
<p>The default Oracle Communications Data Model defines many materialized views. In the default <code>ocdm_sys</code> schema, you can identify these materialized views by looking at objects with the prefixes listed in the following table.</p>
<div class="inftblinformal">
<table class="cellalignment2082" summary="Prefixes and suffixes used when naming objects" dir="ltr">
<thead>
<tr class="cellalignment2076">
<th class="cellalignment2083" id="r1c1-t33">Prefix</th>
<th class="cellalignment2083" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r2c1-t33" headers="r1c1-t33"><code>DWA_</code></td>
<td class="cellalignment2084" headers="r2c1-t33 r1c2-t33">Aggregate tables which are materialized views.
<p><span class="bold">See:</span> Aggregate tables in <a class="olink CDMRF728" href="../../doc.112/e28440/physical_cdm.htm#CDMRF728"><span class="italic">Oracle Communications Data Model Reference</span></a> for a list of these objects in the default data model.</p>
<p><a href="#CHDJGIEB">"Aggregate Tables in the Oracle Communications Data Model"</a> for more information on customizing these objects,.</p>
</td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r3c1-t33" headers="r1c1-t33"><code>CB$</code></td>
<td class="cellalignment2084" headers="r3c1-t33 r1c2-t33">An OLAP cube enhanced with materialized view capabilities.
<p><span class="bold">See:</span> OLAP cube materialized views in <a class="olink CDMRF736" href="../../doc.112/e28440/physical_cdm.htm#CDMRF736"><span class="italic">Oracle Communications Data Model Reference</span></a> for a list of these objects in the default data model.</p>
<p><a href="#CHDBCJJA">"Characteristics of the OLAP Cubes in Oracle Communications Data Model"</a> for information on OLAP cubes.</p>
<p><span class="bold">Note:</span> Do <code>not</code> report or query against this object. Instead access the relational view of an OLAP cube (that is, the object with the <code>_VIEW</code> suffix).</p>
</td>
</tr>
<tr class="cellalignment2076">
<td class="cellalignment2084" id="r4c1-t33" headers="r1c1-t33"><code>DMV_</code></td>
<td class="cellalignment2084" headers="r4c1-t33 r1c2-t33">Materialized views created for performance reasons (that is, <span class="italic">not</span> an aggregate table or a cube materialized view).
<p><span class="bold">See:</span> <a class="olink CDMRF" href="../e28440/toc.htm"><span class="italic">Oracle Communications Data Model Reference</span></a> to identify these objects in the default data model.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p>The following topics provide more information on using and creating materialized views in your customized Oracle Communications Data Model:</p>
<ul>
<li>
<p><a href="#CHDIJEDJ">Types of Materialized Views and Refresh Options</a></p>
</li>
<li>
<p><a href="#CHDHFGEH">Choosing Indexes for Materialized Views</a></p>
</li>
<li>
<p><a href="#CHDCGHCG">Partitioning and Materialized Views</a></p>
</li>
<li>
<p><a href="#CHDHIGBI">Compressing Materialized Views</a></p>
</li>
</ul>
<a id="CHDIJEDJ"></a>
<div id="CDMOG219" class="sect2">
<h3 class="sect2">Types of Materialized Views and Refresh Options</h3>
<p><a id="sthref109"></a><a id="sthref110"></a>Refresh option vary by the type of materialized view:</p>
<ul>
<li>
<p><a href="#BABFJIEA">Refresh Options for Materialized Views with Aggregates</a></p>
</li>
<li>
<p><a href="#BABDBJHA">Refresh Options for Materialized Views Containing Only Joins</a></p>
</li>
<li>
<p><a href="#CHDEHFEI">Refresh Options for Nested Materialized Views</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a class="olink OLAUG" href="../../olap.112/e17123/toc.htm"><span class="italic">Oracle OLAP User's Guide</span></a> for a discussion of creating materialized views of Oracle OLAP cubes.</div>
<a id="BABFJIEA"></a>
<div id="CDMOG220" class="sect3">
<h4 class="sect3">Refresh Options for Materialized Views with Aggregates</h4>
<p>In data warehouses, materialized views normally contain aggregates. The <code>DWA_</code> tables in the default Oracle Communications Data Model are this type of materialized view.</p>
<p>For a materialized view with aggregates, for fast refresh to be possible:</p>
<ul>
<li>
<p>The <code>SELECT</code> list must contain all of the <code>GROUP BY</code> columns (if present).</p>
</li>
<li>
<p>There must be a <code>COUNT(*)</code> and a <code>COUNT(</code><code><span class="codeinlineitalic">column</span></code><code>)</code> on any aggregated columns.</p>
</li>
<li>
<p>Materialized view logs must be present on all tables referenced in the query that defines the materialized view. The valid aggregate functions are: <code>SUM</code>, <code>COUNT(</code><code><span class="codeinlineitalic">x</span></code><code>)</code>, <code>COUNT(*)</code>, <code>AVG</code>, <code>VARIANCE</code>, <code>STDDEV</code>, <code>MIN</code>, and <code>MAX</code>, and the expression to be aggregated can be any SQL value expression.</p>
</li>
</ul>
<p>Fast refresh for a materialized view containing joins and aggregates is possible after any type of DML to the base tables (direct load or conventional <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code>).</p>
<p>You can define that the materialized view be refreshed <code>ON COMMIT</code> or <code>ON DEMAND</code>. A <code>REFRESH ON COMMIT</code> materialized view is automatically refreshed when a transaction that does DML to a materialized view's detail tables commits.</p>
<p>When you specify <code>REFRESH ON COMMIT</code>, the table commit can take more time than if you have not. This is because the refresh operation is performed as part of the commit process. Therefore, this method may not be suitable if many users are concurrently changing the tables upon which the materialized view is based.</p>
</div>
<!-- class="sect3" -->
<a id="BABDBJHA"></a>
<div id="CDMOG221" class="sect3">
<h4 class="sect3">Refresh Options for Materialized Views Containing Only Joins</h4>
<p>Some materialized views contain only joins and no aggregates (for example, when a materialized view is created that joins the sales table to the times and customers tables). The advantage of creating this type of materialized view is that expensive joins are precalculated.</p>
<p>Fast refresh for a materialized view containing only joins is possible after any type of DML to the base tables (direct-path or conventional <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code>).</p>
<p>A materialized view containing only joins can be defined to be refreshed <code>ON COMMIT</code> or <code>ON DEMAND</code>. If it is ON COMMIT, the refresh is performed at commit time of the transaction that does DML on the materialized view's detail table.</p>
<p>If you specify <code>REFRESH FAST</code>, Oracle Database performs further verification of the query definition to ensure that fast refresh can be performed if any of the detail tables change. These additional checks are:</p>
<ul>
<li>
<p>A materialized view log must be present for each detail table unless the table supports partition change tracking. Also, when a materialized view log is required, the <code>ROWID</code> column must be present in each materialized view log.</p>
</li>
<li>
<p>The rowids of all the detail tables must appear in the <code>SELECT</code> list of the materialized view query definition.</p>
</li>
</ul>
<p>If some of these restrictions are not met, you can create the materialized view as <code>REFRESH FORCE</code> to take advantage of fast refresh when it is possible. If one table does not meet all of the criteria, but the other tables do the materialized view is still fast refreshable with respect to the other tables for which all the criteria are met.</p>
<p>To achieve an optimally efficient refresh:</p>
<ul>
<li>
<p>Ensure that the defining query does not use an outer join that behaves like an inner join. If the defining query contains such a join, consider rewriting the defining query to contain an inner join.</p>
</li>
<li>
<p>If the materialized view contains <span class="italic">only</span> joins, the <code>ROWID</code> columns for each table (and each instance of a table that occurs multiple times in the <code>FROM</code> list) must be present in the <code>SELECT</code> list of the materialized view.</p>
</li>
<li>
<p>If the materialized view has remote tables in the <code>FROM</code> clause, all tables in the <code>FROM</code> clause must be located on that same site. Further, <code>ON COMMIT</code> refresh is not supported for materialized view with remote tables. Except for SCN-based materialized view logs, materialized view logs must be present on the remote site for each detail table of the materialized view and ROWID columns must be present in the SELECT list of the materialized view.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CHDEHFEI"></a>
<div id="CDMOG222" class="sect3">
<h4 class="sect3">Refresh Options for Nested Materialized Views</h4>
<p>A nested materialized view is a materialized view whose definition is based on another materialized view. A nested materialized view can reference other relations in the database in addition to referencing materialized views.</p>
<p>In a data warehouse, you typically create many aggregate views on a single join (for example, rollups along different dimensions). Incrementally maintaining these distinct materialized aggregate views can take a long time, because the underlying join has to be performed many times.</p>
<p>Using nested materialized views, you can create multiple single-table materialized views based on a joins-only materialized view and the join is performed just one time. In addition, optimizations can be performed for this class of single-table aggregate materialized view and thus refresh is very efficient.</p>
<p>Some types of nested materialized views cannot be fast refreshed. Use <code>EXPLAIN_MVIEW</code> to identify those types of materialized views.</p>
<p>You can refresh a tree of nested materialized views in the appropriate dependency order by specifying the <code>nested</code> <code>=TRUE</code> parameter with the <code>DBMS_MVIEW.REFRESH</code> parameter.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDHFGEH"></a>
<div id="CDMOG223" class="sect2">
<h3 class="sect2">Choosing Indexes for Materialized Views</h3>
<p><a id="sthref111"></a><a id="sthref112"></a>The two most common operations on a materialized view are query execution and fast refresh, and each operation has different performance requirements:</p>
<ul>
<li>
<p>Query execution might need to access any subset of the materialized view key columns, and might need to join and aggregate over a subset of those columns. Consequently, for best performance, create a single-column bitmap index on each materialized view key column.</p>
</li>
<li>
<p>In the case of materialized views containing only joins using fast refresh, create indexes on the columns that contain the rowids to improve the performance of the refresh operation.</p>
</li>
<li>
<p>If a materialized view using aggregates is fast refreshable, then an index appropriate for the fast refresh procedure is created unless <code>USING NO INDEX</code> is specified in the <code>CREATE MATERIALIZED VIEW</code> statement.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a href="pdm.htm#CHDJBEFG">"Indexes and Partitioned Indexes in the Oracle Communications Data Model"</a></div>
</div>
<!-- class="sect2" -->
<a id="CHDCGHCG"></a>
<div id="CDMOG224" class="sect2">
<h3 class="sect2">Partitioning and Materialized Views</h3>
<p><a id="sthref113"></a><a id="sthref114"></a>Because of the large volume of data held in a data warehouse, partitioning is an extremely useful option when designing a database. Partitioning the fact tables improves scalability, simplifies system administration, and makes it possible to define local indexes that can be efficiently rebuilt. Partitioning the fact tables also improves the opportunity of fast refreshing the materialized view because this may enable partition change tracking refresh on the materialized view.</p>
<p>Partitioning a materialized view has the same benefits as partitioning fact tables. When a materialized view is partitioned a refresh procedure can use parallel DML in more scenarios and partition change tracking-based refresh can use truncate partition to efficiently maintain the materialized view.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a class="olink VLDBG" href="../../server.112/e25523/toc.htm"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a>, <a href="pdm.htm#CHDEDHHJ">"Partitioned Tables in the Oracle Communications Data Model"</a>, <a href="pdm.htm#CHDJBEFG">"Indexes and Partitioned Indexes in the Oracle Communications Data Model"</a>, and <a href="#CHDHEGCC">"Choosing a Cube Partitioning Strategy for Oracle Communications Data Model"</a></div>
<p class="subhead2"><a id="CDMOG225"></a>Using Partition Change Tracking</p>
<p><a id="sthref115"></a><a id="sthref116"></a>It is possible and advantageous to track freshness to a finer grain than the entire materialized view. The ability to identify which rows in a materialized view are affected by a certain detail table partition, is known as partition change tracking. When one or more of the detail tables are partitioned, it may be possible to identify the specific rows in the materialized view that correspond to a modified detail partition(s). those rows become stale when a partition is modified while all other rows remain fresh.</p>
<p>You can use partition change tracking to identify which materialized view rows correspond to a particular partition. Partition change tracking is also used to support fast refresh after partition maintenance operations on detail tables. For instance, if a detail table partition is truncated or dropped, the affected rows in the materialized view are identified and deleted. Identifying which materialized view rows are fresh or stale, rather than considering the entire materialized view as stale, allows query rewrite to use those rows that refresh while in <code>QUERY_REWRITE_INTEGRITY = ENFORCED</code> or <code>TRUSTED</code> modes.</p>
<p>Several views, such as <code>DBA_MVIEW_DETAIL_PARTITION</code>, detail which partitions are stale or fresh. Oracle does not rewrite against partial stale materialized views if partition change tracking on the changed table is enabled by the presence of join dependent expression in the materialized view.</p>
<p>To support partition change tracking, a materialized view must satisfy the following requirements:</p>
<ul>
<li>
<p>At least one detail table referenced by the materialized view must be partitioned.</p>
</li>
<li>
<p>Partitioned tables must use either range, list or composite partitioning.</p>
</li>
<li>
<p>The top level partition key must consist of only a single column.</p>
</li>
<li>
<p>The materialized view must contain either the partition key column or a partition marker or <code>ROWID</code> or join dependent expression of the detail table.</p>
</li>
<li>
<p>If you use a <code>GROUP BY</code> clause, the partition key column or the partition marker or <code>ROWID</code> or join dependent expression must be present in the <code>GROUP BY</code> clause.</p>
</li>
<li>
<p>If you use an analytic window function or the <code>MODEL</code> clause, the partition key column or the partition marker or <code>ROWID</code> or join dependent expression must be present in their respective <code>PARTITION BY</code> subclauses.</p>
</li>
<li>
<p>Data modifications can only occur on the partitioned table. If partition change tracking refresh is being done for a table which has join dependent expression in the materialized view, then data modifications should not have occurred in any of the join dependent tables.</p>
</li>
<li>
<p>The <code>COMPATIBILITY</code> initialization parameter must be a minimum of <code>9.0.0.0.0</code>.</p>
</li>
<li>
<p>Partition change tracking is not supported for a materialized view that refers to views, remote tables, or outer joins.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDHIGBI"></a>
<div id="CDMOG226" class="sect2">
<h3 class="sect2">Compressing Materialized Views</h3>
<p><a id="sthref117"></a><a id="sthref118"></a>Using data compression for a materialized view brings you a additional dramatic performance improvement.</p>
<p>Consider data compression when using highly redundant data, such as tables with many foreign keys. In particular, likely candidates are materialized views created with the <code>ROLLUP</code> clause.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a href="pdm.htm#CHDFJDEE">"Data Compression in the Oracle Communications Data Model"</a>, and <a href="#CHDJGIEB">"Aggregate Tables in the Oracle Communications Data Model"</a>.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2075">
<tr>
<td class="cellalignment2084">
<table class="cellalignment2080">
<tr>
<td class="cellalignment2079"><a href="pdm.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2079"><a href="etlmap.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2011, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2086">
<table class="cellalignment2078">
<tr>
<td class="cellalignment2079"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2079"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2079"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2079"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2079"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2079"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
