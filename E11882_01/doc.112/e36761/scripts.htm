<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Oracle R Enterprise Embedded Execution</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 730" />
<meta name="dcterms.created" content="2013-04-16T10:39:3Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="R Enterprise User's Guide" />
<meta name="dcterms.identifier" content="E36761-08" />
<meta name="dcterms.isVersionOf" content="OREUG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2012, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="mining.htm" title="Previous" type="text/html" />
<link rel="Next" href="appbpkgs.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e36761.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">12/14</span> <!-- End Header -->
<div class="chapter"><a id="sthref92"></a>
<h1 class="chapter"><span class="secnum">8</span> Oracle R Enterprise Embedded Execution</h1>
<p>This chapter describes these topics:</p>
<ul>
<li>
<p><a href="#CIHEIHAJ">Security Considerations for Scripts</a></p>
</li>
<li>
<p><a href="#BABFIHJI">Support for Database Parallelism</a></p>
</li>
<li>
<p><a href="#CIHGHACE">R Interface for Embedded Oracle R Enterprise Scripts</a></p>
</li>
<li>
<p><a href="#CIHIDJHD">Oracle R Enterprise Embedded SQL Scripts</a></p>
</li>
</ul>
<a id="CIHEIHAJ"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Security Considerations for Scripts</h2>
<p>Both R scripts and SQL scripts allow access to the database server. For this reason, creation of scripts must be controlled. The <a href="#BABJJDHD">RQADMIN Role</a> is required for those users who create and drop scripts.</p>
<a id="BABJJDHD"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">RQA<a id="sthref93"></a>DMIN Role</h3>
<p>Oracle R Enterprise creates the RQADMIN role.</p>
<p>The RQADMIN role must be explicitly granted to a user.</p>
<p>The RQADMIN role is required in these instances:</p>
<ul>
<li>
<p>Calling <code>ore.doEval()</code> with <code>FUN</code> argument</p>
</li>
<li>
<p>Creating and dropping scripts with <code>ore.scriptCreate</code> and <code>ore.scriptDrop</code></p>
</li>
</ul>
<p>The RQADMIN role is <span class="italic">not</span> required when calling <code>ore.rowApply</code>, <code>ore.groupApply</code>, <code>ore.tableApply</code>, <code>ore.indexApply</code>, and <code>ore.doEval</code> with the <code>FUN.NAME</code> argument.</p>
<p>To grant RQADMIN to RQUSER, start SQL*Plus as <code>sysdba</code> and type</p>
<pre>
grant rqadmin to RQUSER
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
You should grant RQADMIN only to those users who need it.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABFIHJI"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Support for Database Parallelism</h2>
<p>Parallel processing is not restricted to Oracle R Enterprise functions only; it can be enabled for Open Source R packages that are not part of Oracle R Enterprise. For such packages data-parallelism can be leveraged through Oracle R Enterprise embedded R execution.</p>
<p>On the R side, Oracle R Enterprise provides <code><a href="#CIHFCCHB">ore.groupApply()</a></code>, <code><a href="#CIHEIADI">ore.rowApply()</a></code>, and <a href="#CIHJHBHA">ore.indexApply()</a> for data-parallel processing. Data-parallel processing consists of dividing a data set into multiple subsets that can be processed in parallel (independently). Oracle R Enterprise also provides SQL-equivalent functionality for group apply and row apply as described in <a href="#CIHIDJHD">Oracle R Enterprise Embedded SQL Scripts</a>.</p>
<p>Open Source packages (CRAN packages) can generally not leverage the Oracle R Enterprise transparency layer (because they are not written using base R exclusively or include callouts to functionality such as C functions) and execute on data in the R address space. This means that their use is subject to memory and parallelism constraints of R and the way the CRAN package was written. Oracle R Enterprise does not automatically parallelize the internal code of CRAN packages.</p>
<p>Embedded R execution enables leveraging what is likely a larger server (a Database server, such as Oracle Exadata) in terms of memory and number of processors to expand what a typical R client may be able to achieve. In addition, embedded R execution provides for more efficient transfer of data between the database and the R engine (since they are on the same machine). Embedded R execution also allows for data parallel execution of user R functions that may leverage CRAN packages, both from Oracle R Enterprise R and SQL APIs.</p>
</div>
<!-- class="sect1" -->
<a id="CIHGHACE"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">R Interface for Embedded Oracle R Enterprise Scripts</h2>
<p>These Oracle R Enterprise functions permit R-based applications to embed Oracle R Enterprise functionality in the scripts. For example, they allow R scripts to perform operations on database objects.</p>
<p>An R script contains a single function definition. R scripts reside in the Oracle R Enterprise in-database R script archive.</p>
<p>Embedded R scripts provide several advantages:</p>
<ul>
<li>
<p>You can execute R scripts in the database where the data resides; you do not have to move data out of the database. The scripts may contain custom techniques or include functions from CRAN packages.</p>
</li>
<li>
<p>You can run existing R scripts within R-based applications and operational SQL-based applications.</p>
</li>
<li>
<p>You can leverage distributed data flow parallelism in Oracle Database; the parallelism is user controlled but database managed.</p>
</li>
<li>
<p>You can use the security provided by Oracle Database. See <a href="#BABEHDID">Security Issues for Embedded R Scripts</a> for information about how to register scripts so that they are secure.</p>
</li>
</ul>
<p>Oracle R Enterprise provides these functions that support running R scripts in the database:</p>
<ul>
<li>
<p><a href="#CIHFIHEG">ore.doEval()</a></p>
</li>
<li>
<p><a href="#CIHCGJCF">ore.tableApply()</a></p>
</li>
<li>
<p><a href="#CIHFCCHB">ore.groupApply()</a></p>
</li>
<li>
<p><a href="#CIHEIADI">ore.rowApply()</a></p>
</li>
<li>
<p><a href="#CIHJHBHA">ore.indexApply()</a></p>
</li>
<li>
<p><a href="#CIHIBEGD">ore.scriptCreate()</a></p>
</li>
<li>
<p><a href="#CIHHCJBC">ore.scriptDrop()</a></p>
</li>
</ul>
<p>There are example scripts in <a href="#CIHFIHEG">ore.doEval()</a> and <a href="#CIHJHBHA">ore.indexApply()</a>.</p>
<a id="BABEHDID"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Security Issues for Embedded R Scripts</h3>
<p>All of these scripts require an argument <code>FUN</code> or <code>FUN.NAME</code>. For security reasons, use of the argument <code>FUN</code> requires the RQADMIN role, a collection of Oracle Database privileges. Since creation of the script represented by the argument <code>FUN.NAME</code> must be published by a user with RQADMIN credentials, it can be used by anyone authorized to use Oracle R Enterprise.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref94"></a>
<h3 class="sect2">Input for ore.*Apply() and ore.doEval()</h3>
<p>The functions <code>ore.tableApply()</code>, <code>ore.groupApply()</code>, <code>ore.rowApply(),and</code> <code>ore.indexApply()</code>, and <code>ore.doEval()</code> all take either a <code>FUN.NAME</code> parameter (for a function that has been loaded into the R script repository) or <code>FUN</code>, which is an R function (closure).</p>
<p>All functions can return anything. However, when you specify the FUN.VALUE argument the output should be a matching <code>data.frame</code>.</p>
<p>All functions take parameters that are passed as optional arguments (<code>... arguments</code>). They can named or not.</p>
<p>All functions take the <code>FUN.NAME</code> parameter, which is the name of a function in the R script repository in the database, or an actual R function in the <code>FUN</code> parameter.</p>
</div>
<!-- class="sect2" -->
<a id="CIHFIHEG"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">ore.doEval()</h3>
<p><code>ore.doEval()</code> invokes a stand-alone R script in the database without input data; parameters are allowed. It returns an <code>ore.frame</code> object or serialized R objects.</p>
<p>Input for <code>ore.doEval()</code>is internally generated data. You can load data from a file or a table using <code>ore.pull()</code>.</p>
<p>Input data is one of the following:</p>
<ul>
<li>
<p>Internally generated</p>
</li>
<li>
<p>Loaded from a file or pulled from the database by using <code>ore.pull()</code></p>
</li>
<li>
<p>Made available through the Transparency Layer</p>
</li>
</ul>
<p><code>ore.doEval()</code> takes the <code>FUN.NAME</code> parameter, which is the name of a function in the R script repository in the database, or an actual R function in the <code>FUN</code> parameter.</p>
<p>The following additional arguments to the <code>FUN</code> parameter starting with <code>ore.</code> are special control arguments. They are not passed to the function specified by the <code>FUN</code> or <code>FUN.NAME</code> arguments, but instead control what happens before or after the execution of the closure. The following control arguments are supported:</p>
<ul>
<li>
<p><code>ore.drop</code> controls the input data. If TRUE, one column <code>data.frame</code> will be converted to a vector. The default value is TRUE.</p>
</li>
<li>
<p><code>ore.connect</code> controls whether to automatically connect to Oracle R Enterprise inside the closure. This is equivalent to doing an <code>ore.connect</code> call with the same credentials as the client session. The default value is FALSE.</p>
</li>
<li>
<p><code>ore.graphics</code> controls whether to start a graphical driver and look for images. The default value is TRUE.</p>
</li>
<li>
<p><code>ore.png.*</code> specifies additional parameters for the <code>png</code> graphics driver if <code>ore.graphics</code> is TRUE. The naming convention for these arguments is to add an <code>ore.png.prefix</code> to the arguments of the <code>png</code> function. For example, if <code>ore.png.height</code> is supplied, argument height is passed to the <code>png</code> function. If not set, the standard default values for the <code>png</code> function are used.</p>
</li>
</ul>
<p>This example scales the first <span class="italic">n</span> integers by the value provided. The result is a serialized R object (<code>data.frame</code>):</p>
<p>Oracle R Enterprise comes with a number of predefined graphical scripts. All predefined scripts have a reserved name that start with <code>RQG$</code> followed by a function name from the graphics package that the script wraps. Depending on the function it either takes the first, the first and second, or all of the columns of the input <code>data.frame</code>. Thus, predefined scripts can only be used with <code>ore.tableApply</code>, ore.<code>groupApply</code>, or <code>ore.rowApply</code>. Each function also has <code>...</code> so that it can pass any parameter to the function that it wraps.</p>
<pre>
res &lt;- 
   ore.doEval(function (num = 10, scale = 100) {
          ID &lt;- seq(num)
          data.frame(ID = ID, RES = ID / scale)
          })
class(res)
res
local_res &lt;- ore.pull(res)
class(local_res)
local_res
</pre>
<p>For more examples, see the R help for <code>ore.doEval()</code>.</p>
</div>
<!-- class="sect2" -->
<a id="CIHCGJCF"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">ore.tableApply()</h3>
<p><code>ore.tableApply()</code> invokes an R script with an entire table (<code>ore.frame</code>) as input. The input is provided all at once to the function. As with <code>ore.doEval()</code>, it can return an <code>ore.frame</code> object or serialized R objects.</p>
<p>Input data is an <code>ore.frame</code> object.</p>
<p>Returns a data frame signature as an <code>ore.frame</code> object.</p>
<p>Takes NULL or <code>&lt;variable&gt;=&lt;value&gt;</code> as an argument.</p>
</div>
<!-- class="sect2" -->
<a id="CIHFCCHB"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">ore.groupApply()</h3>
<p><code>ore.groupApply()</code> partitions the data according to a specified column's values and invokes the R script on each partition in parallel, when possible. The return value is a list of each group's execution results.</p>
<p>Input data is an <code>ore.frame</code> object.</p>
<p>Returns either a NULL value as an <code>ore.object</code> or a data frame signature as an <code>ore.frame</code> object.</p>
<p>Takes NULL or <code>&lt;variable&gt;=&lt;value&gt;</code> as an argument.</p>
<p>You must specify the partition column for <code>ore.groupApply()</code>.</p>
<p>Takes the <code>FUN.NAME</code> parameter, which is the name of a function in the R script repository in the database, or an actual R function in the <code>FUN</code> parameter.</p>
</div>
<!-- class="sect2" -->
<a id="CIHEIADI"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">ore.rowApply()</h3>
<p><code>ore.rowApply()</code> enables you to specify a chunk size, which is the number of rows that the function should act upon. The function is invoked multiple times in parallel, if multiple R engines can be invoked at the database server, until all data is processed. The return value is a list of each chunk's execution results.</p>
<p>Input data is an <code>ore.frame</code> object.</p>
<p>Returns either a NULL value as an <code>ore.object</code> or a data frame signature as an <code>ore.frame</code> object.</p>
<p>Takes NULL or <code>&lt;variable&gt;=&lt;value&gt;</code> as an argument.</p>
<p>You can specify the chunk size for <code>ore.rowApply()</code>.</p>
<p>Takes the <code>FUN.NAME</code> parameter, which is the name of a function in the R script repository in the database, or an actual R function in the <code>FUN</code> parameter.</p>
</div>
<!-- class="sect2" -->
<a id="CIHJHBHA"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">ore.indexApply()</h3>
<p><code>ore.indexApply()</code> invokes an R script <span class="italic">n</span> times, where <span class="italic">n</span> is a positive integer. The return value is a list of each execution's results.</p>
<p>Input data is one of the following:</p>
<ul>
<li>
<p>Internally generated</p>
</li>
<li>
<p>Loaded from a file or pulled from the database by using <code>ore.pull()</code></p>
</li>
<li>
<p>Made available through the Transparency Layer</p>
</li>
</ul>
<p><code>ore.indexApply()</code> can take NULL or <code>&lt;variable&gt;=&lt;value&gt;</code> as arguments.</p>
<p>You must specify <span class="italic">n</span>, the number of times to invoke the R function.</p>
<p>Takes the <code>FUN.NAME</code> parameter, which is the name of a function in the R script repository in the database, or an actual R function in the <code>FUN</code> parameter</p>
<p>For example, this code applies the function 10 times:</p>
<pre>
res&lt;-ore.indexApply(10,function (x, scale = 100) x / scale)
</pre></div>
<!-- class="sect2" -->
<a id="CIHIBEGD"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">ore.scriptCreate()</h3>
<p><code>ore.scriptCreate()</code> creates an R script in the database. The script can be used by name in other embedded R script functions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>ore.scriptCreate()</code> requires the RQADMIN role.</div>
<p><code>ore.scriptCreate()</code> has this syntax:</p>
<pre>
ore.scriptCreate(name, FUN)
</pre>
<p>where</p>
<ul>
<li>
<p><code>name</code> is a character string specifying the name of the R script in Oracle Database.</p>
</li>
<li>
<p><code>FUN</code> is a function definition to be used with functions <code>ore.doEval(,</code> <code>ore.groupApply()</code>, <code>ore.indexApply()</code>, <code>ore.rowApply()</code>, or <code>ore.tableApply()</code>.</p>
</li>
</ul>
<p>The function returns an invisible NULL value if it succeeds; if it does not succeed in creating the script, it returns an error.</p>
<a id="BABFGGDF"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">ore.scriptCreate() Example</h4>
<p>This example creates a script and then drops it:</p>
<pre>
ore.scriptCreate("MYLM",function(data, formula, ...) lm(formula, data, ...))
       IRIS &lt;- ore.push(iris)
       ore.tableApply(IRIS[1:4], FUN.NAME = "MYLM" formula = Sepal.Length ~ .)
       ore.scriptDrop("MYLM")
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHHCJBC"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">ore.scriptDrop()</h3>
<p><code>ore.scriptDrop()</code> drops a named R script from the database repository. Requires the RQADMIN role.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>ore.scriptDrop()</code> requires the RQADMIN role.</div>
<p><code>ore.scriptDrop()</code> has this syntax:</p>
<pre>
ore.scriptDrop(name)
</pre>
<p>where</p>
<ul>
<li>
<p><code>name</code> is a character string specifying the name of the R script in Oracle Database.</p>
</li>
</ul>
<p>The function returns an invisible NULL value if it succeeds; if it does not succeed in dropping the script, it returns an error.</p>
<p>For an example, see <a href="#BABFGGDF">ore.scriptCreate() Example</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABGIGCI"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Automatic Database Connection in Embedded R Scripts</h3>
<p>An embedded R script can automatically connect to an Oracle database.</p>
<p>If automatic connections are enabled, the following functionality occurs:</p>
<ul>
<li>
<p>Embedded R scripts are automatically connected to the database.</p>
</li>
<li>
<p>The automatic connection has the same credentials as the session that invokes the embedded R SQL functions.</p>
</li>
<li>
<p>The script runs in an autonomous transaction.</p>
</li>
<li>
<p>ROracle queries work with the automatic connection.</p>
</li>
<li>
<p>Oracle R Enterprise transparency is enabled in the embedded script.</p>
</li>
<li>
<p>User and site-wide R profile loading is disabled in embedded R.</p>
<p>Profile loading was supported in earlier Oracle R Enterprise releases. An automatic connection provides a more secure connection.</p>
</li>
</ul>
<p>Automatic connections are disabled by default. You can specify whether automatic connections are enabled or disabled by using the <code>ore.connect</code> control argument. Control arguments are documented in R help for <code>ore.doEval()</code>.</p>
<p>To enable automatic connections, ROracle was extended by adding a new driver <code>ExtDriver</code> with the constructor <code>Extproc</code> that is initialized by passing an external pointer wrapping the <code>extproc</code> context. Similarly to <code>OraDriver</code>, <code>ExtDriver</code> is a singleton. Both drivers can exist simultaneously in a session since these are represented by two distinct singletons. This setup allows working with <code>extproc</code> and explicit <code>OraDriver</code> connections in the same R script as shown by the following example.</p>
<pre>
ore.doEval(function() {
  ore.disconnect()
  con1 &lt;- dbConnect(Extproc())
  res1 &lt;- dbGetQuery(con1, "select * from grade order by name")
  con2 &lt;- dbConnect(Oracle(), "scott", "tiger")
  res2 &lt;- dbGetQuery(con2, "select * from emp order by empno")
  dbDisconnect(con1)
  dbDisconnect(con2)
  cbind(head(res1)[,1:3], head(res2)[,1:3])
}, ore.connect = TRUE)
</pre></div>
<!-- class="sect2" -->
<a id="CIHFICHG"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Examples of Embedded R Scripts</h3>
<p>For a detailed example of an<a id="sthref95"></a> embedded R script, see the Oracle R Enterprise Blog "Introduction to ORE Embedded R Script Execution" at <code><a href="https://blogs.oracle.com/R/entry/analyzing_big_data_using_the1">https://blogs.oracle.com/R/entry/analyzing_big_data_using_the1</a></code>.</p>
<p><span class="italic">Part 6: ORE Embedded<a id="sthref96"></a> R Scripts: R Interface</span> in the free <span class="bold">Oracle R Enterprise Tutorial Series</span> describes embedded R scripts and contains several examples. See <a href="intro.htm#CEGEJDAF">Oracle R Enterprise Training</a> for information about the Tutorial Series.</p>
<p>Several of the <a href="using.htm#CEGCADBI">Oracle R Enterprise Demos</a> illustrate embedded execution.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHIDJHD"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Oracle R Enterprise Embedded SQL Scripts</h2>
<p>The SQL interface allows you to embed R script execution in production database applications.</p>
<p>The functions associated with the SQL interface must be stored in the database R repository, and referenced by name in SQL API functions. See <a href="#BABBDJIG">Registering and Managing SQL Scripts</a> for a description of how to add scripts to the repository, remove scripts from the repository, and list and use scripts in the repository.</p>
<p>For descriptions of the SQL functions, see <a href="#CEGGJGDB">Oracle R Enterprise SQL Functions</a>.</p>
<a id="BABBDJIG"></a>
<div class="sect2">
<h3 class="sect2">Registering <a id="sthref97"></a><a id="sthref98"></a>and Managing SQL Scripts</h3>
<p>For security purposes, you must first register the R script under some system unique name and use the new name instead of the actual script in calls to <code>rq*Eval</code> table functions.</p>
<p>There are two administrative functions that create and drop scripts and a view that lists scripts:</p>
<ul>
<li>
<p><code>sys.rqScriptCreate()</code></p>
</li>
<li>
<p><code>sys.rqScriptDrop()</code></p>
</li>
<li>
<p>view allows you to list and use scripts that were created</p>
</li>
</ul>
<p>The scripts require the RQADMIN role described in <a href="#BABJJDHD">RQADMIN Role</a>.</p>
<p>When using <code>sys.rqScriptCreate()</code>, you must specify a corresponding R Closure of the function string.</p>
<p>Here is an example of registering the scripts and of using the registered scripts:</p>
<pre>
begin
  sys.rqScriptCreate('tmrqfun2',
'function() {
ID &lt;- 1:10
res &lt;- data.frame(ID = ID, RES = ID / 100)
res
}');
end;
/
 
select *
  from table(rqEval(
        NULL,
       'select 1 id, 1 res from dual',
       'tmrqfun2'));
 
begin
  sys.rqScriptDrop('tmrqfun2');
end;
/
</pre></div>
<!-- class="sect2" -->
<a id="CEGGJGDB"></a>
<div id="OREUG168" class="sect2">
<h3 class="sect2">Oracle R Enterprise <a id="sthref99"></a>SQL Functions</h3>
<p>The <code>rq*Eval</code> functions result in one or more new R engines being started at the database depending on database parallelism settings.</p>
<p>To enable execution of an R script in the database (lights-out processing), Oracle R Enterprise provides variants of <code>ore.doEval()</code>, <code>ore.tableApply()</code>, <code>ore.groupApply()</code>, and <code>ore.rowApply()</code> in SQL. (<code>ore.doEval()</code>, <code>ore.tableApply()</code>, <code>ore.groupApply()</code>, and <code>ore.rowApply()</code> are described in <a href="#CIHGHACE">R Interface for Embedded Oracle R Enterprise Scripts</a>.)</p>
<p>The SQL functions are</p>
<ul>
<li>
<p><code>rqTableEval()</code></p>
</li>
<li>
<p><code>rqEval()</code></p>
</li>
<li>
<p><code>rqRowEval()</code></p>
</li>
<li>
<p><code>rqGroupEval()</code></p>
</li>
</ul>
<p><code>rqGroupEval()</code> requires additional SQL specification and is provided here as a virtual function, which partitions the data according to a specified column's values and invokes the R script on each partition. For more information, see <a href="#CEGJJCID">rqGroupEval() Function</a>.</p>
<p>You can also use these functions with objects in a datastore, as described in <a href="#BABGCACG">rq*Eval() and Objects in a Datastore</a>.</p>
<p>The <code>rq*Eval()</code> functions (<code>rqEval()</code>, <code>rqTableEval()</code>, <code>rqGroupEval()</code>, and <code>rqRowEval()</code>) have similar syntax:</p>
<pre>
rq*Eval(
     cursor(select * from table-1),
     cursor(select * from table-2),
     'select &lt;column list&gt; from table-3 t',
     &lt;grouping col-name from table-1 or num_rows&gt;,
     &lt;R closure name of registered-R-code&gt;
     )
</pre>
<p>where</p>
<ul>
<li>
<p>The first cursor is the input cursor: Input is passed as a whole table, group, or N rows at a time to the R closure described in the fourth parameter.</p>
<p><code>rqEval()</code> does <span class="italic">not</span> have this cursor argument.</p>
</li>
<li>
<p>The second cursor is the parameters cursor: One row of scalar values (string, numeric, or both) can be passed; for example, the name of the model and several numeric scalar values for model setting.</p>
</li>
<li>
<p>The query specifies the output table definition; output can be 'SELECT statement', 'XML', or 'PNG'.</p>
</li>
<li>
<p><code>grouping col-name</code> applies to <code>rqGroupEval()</code>; it provides the name of the grouping column.</p>
</li>
<li>
<p><code>num_rows</code> applies to <code>rqRowEval()</code>; it provides the number of rows to provide to the functions at one time.</p>
</li>
<li>
<p>&lt;R closure name of registered-R-code&gt; is a registered version of the R function to execute. See <a href="#BABBDJIG">Registering and Managing SQL Scripts</a> for details.</p>
</li>
</ul>
<p>The return values for all of the SQL functions specify one of these values:</p>
<ul>
<li>
<p>A table signature that is specified in a SELECT statement, which returns results as a table from the <code>rq</code> function.</p>
</li>
<li>
<p>XML, returned as a CLOB which returns both structured and graph images in an XML string. The structured components are provided first, followed by the base 64 encoding of the <code>png</code> representation of the image.</p>
</li>
<li>
<p>PNG, returned as a BLOB which returns graph images in PNG format.</p>
</li>
</ul>
<p><code>rqEval(),</code> <code>rqTableEval()</code>, <code>rqGroupEval()</code>, and <code>rqRowEval()</code> must specify an R script by the name that is stored in the R script repository. See <a href="#BABBDJIG">Registering and Managing SQL Scripts</a> for information about the <code>sys.rq_scripts</code> view provides a list of registered scripts.</p>
<p>The following examples illustrate using these functions:</p>
<ul>
<li>
<p>This example uses all rows from the table <code>fish</code> as input to the R function that takes no other parameters and produces <code>output</code> that contains all input data plus the ROWSUM of values.</p>
<p>Note that parameters (<code>param</code>) to the R function is optional.</p>
<pre>
begin
sys.rqScriptCreate('tmrqfun2',
'function(x, param) {
        dat &lt;- data.frame(x, stringsAsFactors=F)
        cbind(dat, ROWSUM = apply(dat,1,sum)+10)
}');
end;
/
 
select * from table(rqTableEval(  
   cursor(select * from fish),
   NULL,
   'select t.*, 1 rowsum from fish t',
   'tmrqfun2' ));
 
begin
sys.rqScriptDrop('tmrqfun2');
end;
/
</pre></li>
<li>
<p>This example illustrates passing n=1 (4th parameter) row at a time from the table <code>fish</code> to the R function. No parameters are required by the function. The function generates ROWSUM which is added as an extra column to <code>fish</code> in the output.</p>
<pre>
begin
sys.rqScriptCreate('tmrqfun2',
'function(x, param) {
        dat &lt;- data.frame(x, stringsAsFactors=F)
        cbind(dat, ROWSUM = apply(dat,1,sum)+10)
}');
end;
/
 
select * from table(rqRowEval(  
   cursor(select * from fish),
   NULL,
   'select t.*, 1 rowsum from fish t',
    1,
   'tmrqfun2' ));
 
begin
sys.rqScriptDrop('tmrqfun2');
end;
/
</pre></li>
</ul>
<a id="CEGJJCID"></a>
<div id="OREUG169" class="sect3">
<h4 class="sect3">rqGroupEval() <a id="sthref100"></a>Function</h4>
<p><code>rqGroupEval()</code> invokes an R script on data that is partitioned by a grouping column.</p>
<p><code>rqGroupEval()</code> requires the creation of two PL/SQL objects, a package and a pipelined table function:</p>
<ol>
<li>
<p>Create a PL/SQL package that specifies the types of result to be returned.</p>
</li>
<li>
<p>Create a function that takes the return value of the package and uses the return value with PIPELINED_PARALLEL_ENABLE set to indicate the column on which to partition data.</p>
</li>
</ol>
<p>Suppose that ONTIME_S is a table that stores information about arrival of airplanes. The data cursor uses all data, but you could also define cursors that use some columns using PL/SQL records. Then you must define as many PL?SQL table functions as the number of grouping columns that you are interested in using for a particular data cursor.</p>
<pre>
CREATE PACKAGE ontimePkg AS
  TYPE cur IS REF CURSOR RETURN ontime_s%ROWTYPE;
END ontimePkg;
/
 
CREATE FUNCTION ontimeGroupEval(
  inp_cur  ontimePkg.cur,
  par_cur  SYS_REFCURSOR,
  out_qry  VARCHAR2,
  grp_col  VARCHAR2,
  exp_txt  CLOB)
RETURN SYS.AnyDataSet
PIPELINED PARALLEL_ENABLE (PARTITION inp_cur BY HASH (month))
CLUSTER inp_cur BY (month)
USING rqGroupEvalImpl;
/
</pre>
<p>At this time, only one grouping column is supported. If you have multiple columns combine the columns into one column and use the new column as a grouping column. PARALLEL_ENABLE clause is optional but CLUSTER BY is not.</p>
</div>
<!-- class="sect3" -->
<a id="BABGCACG"></a>
<div class="sect3">
<h4 class="sect3">rq*Eval() and Objects in a Datastore</h4>
<p><code>rq*Eval()</code>and related functions allow you to use serialized R objects saved in a datastore using a parameter cursor. You can specify the association of object and datastore names of the serialized R objects with the R function parameter names in that parameter cursor.</p>
<p>Here is an example of how to use <code>rq*Eval()</code>this way. Suppose that user <code>scott</code> has saved a model in the datastore <code>ontime_model</code> as the object <code>lm.mod</code>,. Suppose <code>scott</code> wants to use this model in SQL for embedded Oracle R Enterprise scoring. This code shows how to use the model for embedded scoring. See <a href="#BABGIGCI">Automatic Database Connection in Embedded R Scripts</a> for the configuration parameters for <code>ore.connect()</code>.</p>
<pre>
begin
  sys.rqScriptCreate('tmrqmodelscore',
    'function(dat, in.dsname, in.objname) {
       ore.load(name=in.dsname, list=in.objname)
       mod &lt;- get(in.objname)
       prd &lt;- predict(mod, newdata=dat)
       prd[as.integer(rownames(prd))] &lt;- prd
       res &lt;- cbind(dat, PRED = prd)
       res
    }');
end;
/ -- score model
 
select * from table(rqTableEval(
             cursor(select ARRDELAY, DISTANCE, DEPDELAY from ontime_s
                where year = 2003 and month = 5 and dayofmonth = 2),
             cursor(select 'ontime_model' as "in.dsname", 
            'lm.mod' as "in.objname", 1 as "ore.connect" from dual),
             'select ARRDELAY, DISTANCE, DEPDELAY, 1 PRED from ontime_s',
            'tmrqmodelscore'))
order by 1, 2, 3;
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref101"></a>
<h4 class="sect3">Datastore Management in SQL</h4>
<p>Oracle R Enterprise provides basic management for datastores in SQL. Basic datastore management includes show, search, and drop. The following functions and views are provided:</p>
<ul>
<li>
<p><code>rqDropDataStore()</code> deletes a datastore and all of the objects in the datastore.</p>
<p><span class="bold">Syntax</span>: <code>rqDropDataStore('&lt;ds_name&gt;')</code>, where <code>&lt;ds_name&gt;</code> is the name of the datastore to delete.</p>
<p>The following example deletes the datastore ds_model from current user schema:</p>
<pre>
rqDropDataStore('ds_model')
</pre></li>
<li>
<p><code>rquser_DataStoreList</code> is a view containing datastore-level information for all datastores in the current user schema. The information consists of datastore name, number of objects, size, creation date, and description.</p>
<p>These examples illustrate using the view:</p>
<pre>
select * from rquser_DataStoreList
select dsname, nobj, size from rquser_datastorelist where dsname = 'ds_1'
</pre></li>
<li>
<p><code>rquser_DataStoreContents</code> is a view containing object-level information about all datastores in the current user schema. The information consists of object name, size, class, length, number of rows and columns.</p>
<p>This example lists the datastore contents for datastore <code>ds_1</code>:</p>
<pre>
select * from rquser_DataStoreContents where dsname = 'ds_1';
</pre></li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2090">
<tr>
<td class="cellalignment2097">
<table class="cellalignment2095">
<tr>
<td class="cellalignment2094"><a href="mining.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2094"><a href="appbpkgs.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2012, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2099">
<table class="cellalignment2093">
<tr>
<td class="cellalignment2094"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2094"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2094"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2094"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2094"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2094"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
