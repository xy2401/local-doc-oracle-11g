<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using Oracle R Enterprise</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 730" />
<meta name="dcterms.created" content="2013-04-16T10:39:2Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="R Enterprise User's Guide" />
<meta name="dcterms.identifier" content="E36761-08" />
<meta name="dcterms.isVersionOf" content="OREUG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2012, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="trans.htm" title="Previous" type="text/html" />
<link rel="Next" href="procs.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e36761.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">7/14</span> <!-- End Header -->
<div id="OREUG152" class="chapter"><a id="CEGCICBB"></a>
<h1 class="chapter"><span class="secnum">3</span> Using Oracle R Enterprise</h1>
<p>This chapter explains how to use Oracle R Enterprise to analyze data stored in tables or views in an Oracle Database.</p>
<p>This chapter discusses these topics:</p>
<ul>
<li>
<p><a href="#CEGIAJIF">Tables in Oracle Database</a></p>
</li>
<li>
<p><a href="#CEGBGDEC">View Oracle R Enterprise Documentation</a></p>
</li>
<li>
<p><a href="#CEGECICD">Oracle R Enterprise Data</a></p>
</li>
<li>
<p><a href="#CEGGAJAC">Oracle R Enterprise Database-Embedded R Engine</a></p>
</li>
<li>
<p><a href="#CEGGIDFI">Oracle R Enterprise Examples</a></p>
</li>
</ul>
<p>We assume familiarity with R in the remainder of this section.</p>
<p>For additional examples of using Oracle R Enterprise functionality, see <a href="procs.htm#CIHEIEBC">Oracle R Enterprise Statistical Functions</a>. For examples of building statistical models, including models created using Oracle Data Mining algorithm, see <a href="mining.htm#CEGCHAEJ">In-Database Predictive Models in Oracle R Enterprise</a>.</p>
<a id="CEGIAJIF"></a>
<div id="OREUG153" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Tables in <a id="sthref29"></a>Oracle <a id="sthref30"></a>Database</h2>
<p>Before you can use Oracle R Enterprise to analyze data stored in database tables, you must install Oracle R Enterprise, start a client, and connect to the database, as described in <span class="italic">Oracle R Enterprise Administrator's Guide</span>.</p>
<p>By convention, most of the functions and methods defined in Oracle R Enterprise begin with the prefix <code>ore</code>. This is done to avoid name collisions with other R software. However, the objects created by those functions and methods can be anything the end user wants them to be. The end user has complete control over object naming.</p>
<p>Pick any object returned by <code>ore.ls()</code> and type either <code>class(OBJECTNAME)</code> or <code>class(OBJECTNAME$COLUMN_NAME)</code>. For example, the following code shows that the class of DF_TABLE is <code>ore.frame</code>. The DF_TABLE object is created in <a href="#CEGBEGDC">Example: Load Data</a>.</p>
<pre>
R&gt; class(DF_TABLE)
[1] "ore.frame"
</pre>
<p>The prefix <code>ore</code> indicates that the object is an Oracle R Enterprise created object that holds metadata for the corresponding object in Oracle Database.</p>
<p><span class="bold">ore.fra<a id="sthref31"></a>me</span> is the Oracle R Enterprise metadata object that maps to a database table. The <code>ore.frame</code> object is the counterpart to an R data.frame.</p>
<p><code>ore.frame</code> or can be returned by the <code>class()</code> function. For an example of creating <code>ore.frame</code> data, see <a href="#CEGDHJHI">Load an R Data Frame into the Database</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CEGBGDEC"></a>
<div id="OREUG154" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">View <a id="sthref32"></a><a id="sthref33"></a>Oracle R Enterprise <a id="sthref34"></a>Documentation</h2>
<p>Use this command to view the Oracle R Enterprise documentation library:</p>
<pre>
R&gt; OREShowDoc()
</pre></div>
<!-- class="sect1" -->
<a id="CEGECICD"></a>
<div id="OREUG155" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Oracle R Enterprise <a id="sthref35"></a>Data</h2>
<p>Oracle R Enterprise supports this functionality:</p>
<ul>
<li>
<p><a href="#CEGJJCBB">Long Names</a></p>
</li>
<li>
<p><a href="#CEGDHJHI">Load an R Data Frame into the Database</a></p>
</li>
<li>
<p><a href="#CEGJBAJJ">Materialize R Data</a></p>
</li>
<li>
<p><a href="#CEGCGDAC">Verify that an ore.frame Exists</a></p>
</li>
<li>
<p><a href="#CEGGFCDC">Drop a Database Table</a></p>
</li>
<li>
<p><a href="#CEGFHHJE">Pull a Database Table to an R Frame</a></p>
</li>
<li>
<p><a href="#CEGBAHHD">Order in Tables</a></p>
</li>
<li>
<p><a href="#CHDHJJGD">Persist and Manage R Objects in the Database</a></p>
</li>
</ul>
<a id="CEGJJCBB"></a>
<div class="sect2">
<h3 class="sect2">Long Names</h3>
<p>Oracle R Enterprise handles R naming conventions for <code>ore.frame</code> columns, instead of a more restrictive Database names. <code>ore.frame</code> column names can be longer than 30 bytes, contain double quotes, and be non-unique.</p>
</div>
<!-- class="sect2" -->
<a id="CEGDHJHI"></a>
<div id="OREUG156" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Load an R Data Frame <a id="sthref36"></a>into the Database</h3>
<p>Follow these steps to load data from R data frames on your system to the Oracle database:</p>
<ol>
<li>
<p>Load contents of the file to an R data frame using <code>read.table()</code> or <code>read.csv()</code> functions documented in R online help.</p>
</li>
<li>
<p>Then <a id="sthref37"></a>use <code>ore.create()</code>to load a data frame to a table:</p>
<pre>
ore.create(data_frame, table="TABLE_NAME")
</pre></li>
</ol>
<p>Step 2 loads data_frame into the database table TABLE_NAME.</p>
<p>For an example, see <a href="#CEGBEGDC">Example: Load Data</a>.</p>
<a id="CEGBEGDC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Example: Load Data</h4>
<p>This example creates an R data frame <code>df</code> consisting of pairs of numbers and letters and then loads the data frame into the table DF_TABLE. The example shows that the data frame and the table have the same dimensions and the same first few elements, but different values for class. The class for DF_TABLE is <code>ore.frame</code>. At the end of the example is a check that DF_TABLE exists in the current schema.</p>
<pre>
R&gt; df &lt;- data.frame(A=1:26, B=letters[1:26])
R&gt; dim(df)
[1] 26  2
R&gt; class(df)
[1] "data.frame"
R&gt; head(df)
  A B
1 1 a
2 2 b
3 3 c
4 4 d
5 5 e
6 6 f
R&gt; ore.create(df, table="DF_TABLE")
R&gt; ore.ls()
[1] "DF_TABLE" 
R&gt; class(DF_TABLE)
[1] "ore.frame"
attr(,"package")
[1] "OREbase"
R&gt; dim(DF_TABLE)
[1] 26  2
R&gt; head(DF_TABLE)
  A B
0 1 a
1 2 b
2 3 c
3 4 d
4 5 e
5 6 f
R&gt; exists("DF_TABLE")[1] TRUE
</pre>
<p>If you connect to the database using a tool such as SQL Developer, you can view DF_TABLE directly in the database.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CEGJBAJJ"></a>
<div id="OREUG157" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Materialize<a id="sthref38"></a> R Data</h3>
<p><a id="sthref39"></a>The <code>ore.push(data.frame)</code> function stores an R object in the database as a temporary object, and returns a handle to that object. It converts data frame, matrix, and vector objects to a table, and list, model, and other objectss to a serialized object.</p>
<p>The object that you create exists during the R session; to store the data in a permanent way, see <a href="#CHDHJJGD">Persist and Manage R Objects in the Database</a></p>
<p>This example pushes the numerical vector created by the R command <code>c(1,2,3,4,5)</code> to <span class="italic">v</span>, an Oracle R Enterprise object:</p>
<pre>
R&gt; v &lt;- ore.push(c(1,2,3,4,5))
R&gt; class(v)
[1] "ore.numeric"
attr(,"package")
[1] "OREbase"
R&gt; head(v)
[1] 1 2 3 4 5
</pre></div>
<!-- class="sect2" -->
<a id="CEGCGDAC"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Verify that an ore.frame Exists</h3>
<p><code>ore.exists()</code> checks for the existence of an <code>ore.frame</code> object in the ORE schema environment. For <code>ore.exists()</code>to find an <code>ore.frame</code> object the object must have been synchronized with <code>ore.sync()</code> first.</p>
<p>The objects available in the ORE environment are not necessarily the same as the database objects. One should not use <code>ore.exists</code>() to check for table existence.</p>
<p>For an example, see <a href="#CEGBEGDC">Example: Load Data</a>.</p>
<p><code>ore.exists(name, schema)</code>has these arguments:</p>
<ul>
<li>
<p><code>name</code>: A character string specifying the name of the <code>ore.frame</code> object</p>
</li>
<li>
<p><code>schema</code>: A character string specifying the name of database schema to check</p>
</li>
</ul>
<p><code>ore.exists()</code> returns TRUE if the object exists in the ORE schema and FALSE, if it does not exist.</p>
</div>
<!-- class="sect2" -->
<a id="CEGGFCDC"></a>
<div id="OREUG158" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Drop a Database<a id="sthref40"></a> Table</h3>
<p>To drop a<a id="sthref41"></a> table in the database use</p>
<pre>
ore.drop(table="NAMEOFTABLE")
</pre>
<p>For example, these commands drop the table <code>v</code> and verifies that it does not exist:</p>
<pre>
R&gt; ore.drop(table="v")
R&gt; ore.exists("v")
[1] FALSE
</pre>
<p>If you drop a table that does not exist, there is no error message.</p>
</div>
<!-- class="sect2" -->
<a id="CEGFHHJE"></a>
<div id="OREUG159" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Pull a Database <a id="sthref42"></a>Table to an R Frame</h3>
<p>To pull the contents <a id="sthref43"></a>of an Oracle Database table or view to an in-memory R data frame use <code>ore.pull(OBJECT_NAME)</code>for the name of an object returned by <code>ore.ls()</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can pull a table or view to an R frame only if the data can fit into R's memory.</div>
<p>Suppose that your Oracle Database contains the table NARROW. Then <code>ore.pull()</code> creates the data frame <code>df_narrow</code> from the table NARROW. When you verify that <code>df_narrow</code> is a data frame. The warning message appears because the table NARROW is not indexed:</p>
<pre>
R&gt; df_narrow &lt;- ore.pull(NARROW)
Warning message:
ORE object has no unique key - using random order 
R&gt; class(df_narrow)
[1] "data.frame"
</pre></div>
<!-- class="sect2" -->
<a id="CEGBAHHD"></a>
<div class="sect2">
<h3 class="sect2">Order in Tables</h3>
<p>Almost all data in R is a vector or is based on vectors (vectors themselves, lists, matrices, data frames, and so forth). The elements of a vector have an explicit order. Each element has an index. R code actively uses this order of elements.</p>
<p>However, database-backed relational data (tables and views) does not define any order of rows and thus cannot be directly mapped to R data structures. You can define an explicit order on database tables and views via an ORDER BY clause. The order is usually achieved by having a unique identifier (single- or multi- column key). Ordering in this way can be inefficient and slow for some operations that lead to unnecessary sorting.</p>
<p><code>row.names&lt;-</code> defines ordering but doesn't actually index a table. The assignment option provides a way to specify a unique column. Initially it supports at least one column but may support multi-column specifications as well. When <code>row.names&lt;-</code> is applied to unordered frames, it returns an error.</p>
<p>You can use the integer indexing created by the ordering infrastructure to perform sampling and partitioning, as described in <a href="#CEGHIDFB">Sampling and Partitioning</a>.</p>
<p>Suppose that the table NARROW is not indexed. The following example illustrates using <code>row.names</code> to create an indexed table:</p>
<pre>
R&gt; row.names(head(NARROW))
Error: ORE object has no unique key
In addition: Warning message:
ORE object has no unique key - using random order 
R&gt; 
R&gt; row.names(NARROW) &lt;- NARROW$ID
R&gt; 
R&gt; row.names(head(NARROW[,1:3]))
[1] "101501" "101502" "101503" "101504" "101505" "101506"
R&gt; 
R&gt; head(NARROW[,1:3])
           ID GENDER AGE
101501 101501   &lt;NA&gt;  41
101502 101502   &lt;NA&gt;  27
101503 101503   &lt;NA&gt;  20
101504 101504   &lt;NA&gt;  45
101505 101505   &lt;NA&gt;  34
101506 101506   &lt;NA&gt;  38
</pre></div>
<!-- class="sect2" -->
<a id="CEGHIDFB"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Sampling and Partitioning</h3>
<p>The ordering (indexing) for tables described in <a href="#CEGBAHHD">Order in Tables</a> can be used to perform sampling and partitioning.</p>
<p>This section provides examples of</p>
<ul>
<li>
<p><a href="#CEGBCDFC">Indexing</a></p>
</li>
<li>
<p><a href="#CEGHJCEJ">Sampling</a></p>
</li>
<li>
<p><a href="#CEGEGGAC">Random Partitioning</a></p>
</li>
</ul>
<a id="CEGBCDFC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Indexing</h4>
<p>R supports powerful constructions using vectors as indices. Oracle R Enterprise supports similar functionality with these differences:</p>
<ul>
<li>
<p>Integer indexing is not supported for <code>ore.vector</code> objects.</p>
</li>
<li>
<p>Negative integer indexes are not supported.</p>
</li>
<li>
<p>Row order is not preserved.</p>
</li>
</ul>
<p>This example illustrates indexing:</p>
<pre>
R&gt; tmp &lt;- ASTHMA
R&gt; tmp[c(1L, 2L, 1L),]
Error: ORE object has no unique key
R&gt; rownames(tmp) &lt;- tmp
R&gt; tmp[c(1L, 2L, 1L),]
         CITY ASTHMA COUNT
1|0|65      1      0    65
1|0|65.1    1      0    65
1|1|35      1      1    35
R&gt; tmp[c(1L, 2L, 1L),]@dataQry
</pre></div>
<!-- class="sect3" -->
<a id="CEGHJCEJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Sampling</h4>
<p>This code illustrates several sampling techniques:</p>
<pre>
# Generate random data
set.seed(123)
N &lt;- 1000000
mydata &lt;- data.frame(x = rnorm(N, mean = 20, sd = 2),
                     group =
                     sample(letters, N, replace = TRUE,
                            prob = (26:1)/sum(26:1)))
mydata$y &lt;-
    rbinom(N, 1,
           1/(1+exp(-(.5 - 0.25 * mydata$x + .1 * as.integer(mydata$group)))))
MYDATA &lt;- ore.push(mydata)
rm(mydata)
 
# Create a function that creates random row indices from large tables
mysampler &lt;- function(n, size, replace = FALSE)
{
    #' Random Whole Number Sampler
    #' @param n       number of observations in sample
    #' @param size    total number of observations
    #' @param replace indicator for sampling with replacement
    #' @return numeric vector containing the sample indices
    n    &lt;- round(n)
    size &lt;- round(size)
    if    (n &lt; 0) stop("'n' must be a non-negative number")
    if (size &lt; 1) stop("'size' must be a positive number")
    if (!replace &amp;&amp; (n &gt; size))
        stop("'n' cannot exceed 'size' when 'replace = FALSE'")
    if (n == 0)
        numeric()
    else if (replace)
        round(runif(n, min = 0.5, max = size + 0.5))
    else
    {
        maxsamp &lt;- seq(size + 0.5, by = -1, length.out = n)
        samp &lt;- round(runif(n, min = 0.5, max = maxsamp))
        while(length(bump1 &lt;- which(duplicated(samp))))
            samp[bump1] &lt;- samp[bump1] + 1
        samp
    }
}
 
# Data set and sample size
N &lt;- nrow(MYDATA)
sampleSize &lt;- 500
 
# 1. Simple random sampling
srs &lt;- mysampler(sampleSize, N)
simpleRandomSample &lt;- ore.pull(MYDATA[srs, , drop = FALSE])
 
# 2. Systematic sampling
systematic &lt;- round(seq(1, N, length.out = sampleSize))
systematicSample &lt;- ore.pull(MYDATA[systematic, , drop = FALSE])
 
# 3. Stratified sampling
stratifiedSample &lt;-
    do.call(rbind,
            lapply(split(MYDATA, MYDATA$group),
                   function(y)
                   {
                       ny &lt;- nrow(y)
                       y[mysampler(sampleSize * ny/N, ny), , drop = FALSE]
                   }))
 
# 4. Cluster sampling
clusterSample &lt;- do.call(rbind, sample(split(MYDATA, MYDATA$group), 2))
 
# 5a. Accidental/Convenience sampling (via row order access)
convenientSample1 &lt;- head(MYDATA, sampleSize)
 
# 5b. Accidental/Convenience sampling (via hashing)
maxHash &lt;- 2^32 # maximum allowed in ore.hash
convenient2 &lt;- (ore.hash(rownames(MYDATA), maxHash)/maxHash) &lt;= (sampleSize/N)
convenientSample2 &lt;- ore.pull(MYDATA[convenient2, , drop = FALSE])
Random
</pre></div>
<!-- class="sect3" -->
<a id="CEGEGGAC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Random Partitioning</h4>
<p>For Oracle R Enterprise random partitions can be generated in the transparency layer by adding a partition or group column to an ore.frame object in the following manner:</p>
<pre>
nrowX &lt;- nrow(x)
x$partition &lt;- sample(rep(1:k, each = nrowX/k, length.out = nrowX), replace = TRUE)
</pre>
<p>After these partitions have been joined to the original data set, the ore.groupApply function can be used to perform the little bootstraps:</p>
<pre>
results &lt;- ore.groupApply(x, x$partition, function(y) {...}, parallel = TRUE)
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDHJJGD"></a>
<div class="sect2">
<h3 class="sect2">Persist and Manage R Objects in the Database</h3>
<p>R objects exist for the duration of the current session, unless they are explicitly saved. For example, if you build a model in a particular R session, the model is not available when the session is closed, unless the model was explicitly saved.</p>
<p>Oracle R Enterprise supports persistence for R objects onto the database.</p>
<p>Persistence provides these advantages:</p>
<ul>
<li>
<p>You can access the same R and Oracle R Enterprise object (for example, a model) among different R sessions.</p>
</li>
<li>
<p>You can build a model in R and use it for prediction and scoring in embedded Oracle R Enterprise.</p>
</li>
</ul>
<p>Oracle R Enterprise creates <span class="bold">datastores</span> to contain persisted objects.</p>
<p>Persisted objects reside in a datastore. The following Oracle R Enterprise functionality allows you manage persistence:</p>
<ul>
<li>
<p><a href="#CEGHCAJJ">ore.save()</a></p>
</li>
<li>
<p><a href="#CEGDECAC">ore.load()</a></p>
</li>
<li>
<p><a href="#CEGHFECD">ore.delete()</a></p>
</li>
<li>
<p><a href="#CEGGICFH">ore.datastore()</a></p>
</li>
<li>
<p><a href="#CEGDHGFG">ore.datastoreSummary()</a></p>
</li>
</ul>
<a id="CEGHCAJJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">ore.save()</h4>
<p><code>ore.save()</code> saves an R object or a list of R objects to the specified datastore in the connected database in the current user's schema:</p>
<pre>
ore.save({...}, list = character(0), name, envir = parent.frame(), overwrite = FALSE, append = FALSE, description = character(0)))
</pre>
<p>The parameters for <code>ore.save()</code> are as follows:</p>
<ul>
<li>
<p><code>{...}</code> is the list of R objects to save; the names of the objects to be saved (as symbols or character strings)</p>
</li>
<li>
<p><code>list</code> is a character vector containing the names of objects to be saved</p>
</li>
<li>
<p><code>envir</code> is the environment to search for objects to be saved</p>
</li>
<li>
<p><code>overwrite</code> is a logical value specifying whether to overwrite the datastore if already exists; the default is FALSE (do not overwrite)</p>
</li>
<li>
<p><code>name</code> is the name of the datastore; <code>name</code> must be specified</p>
</li>
<li>
<p><code>description</code> is a comment describing the datastore</p>
</li>
<li>
<p><code>append</code> is a logical value specifying whether to append objects to the datastore if already exists; the default is FALSE (do not append)</p>
</li>
</ul>
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref44"></a>
<h5 class="sect4">Examples of ore.save()</h5>
<p>Save all objects in the current workspace environment to the datastore <code>ds_1</code> in the user's current schema:</p>
<pre>
ore.save(list=ls(), name="ds_1", description = "example datastore")
</pre>
<p>Overwrite existing datastore <code>ds_2</code> with objects <code>x</code>, <code>y</code>, and <code>z</code> in the current workspace environment:</p>
<pre>
ore.save(x, y, z, name="ds_2", overwrite=TRUE)
</pre>
<p>Add objects <code>x</code>, <code>y</code>, and <code>z</code> in the current workspace environment to the existing datastore <code>ds_3</code> (that is append the objects to the datastore):</p>
<pre>
ore.save(x, y, z, name="ds_3", append=TRUE)
</pre></div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CEGDECAC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">ore.load()</h4>
<p><code>ore.load()</code> loads all of the R objects stored in a specified datastore in the current user schema in the connected database to R:</p>
<pre>
ore.load(name, list = character(0), envir = parent.frame())
</pre>
<p>The parameters for <code>ore.load()</code> are</p>
<ul>
<li>
<p><code>name</code> is a character string specifying the name of datastore to load the objects from; you must specify a name</p>
</li>
<li>
<p><code>list</code> is a character vector containing the names of objects to be loaded</p>
</li>
<li>
<p><code>envir</code> is the R environment that objects are loaded to</p>
</li>
</ul>
<p><code>ore.load()</code> returns a character vector containing the names of objects loaded from the datastore.</p>
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref45"></a>
<h5 class="sect4">Examples of ore.load()</h5>
<p>Load all objects in the datastore <code>ds_1</code>:</p>
<pre>
ore.load("ds_1")
</pre>
<p>Load just the objects <code>x</code>, <code>y</code>, and <code>z</code> from datastore <code>ds_1</code>:</p>
<pre>
ore.load("ds_1", list=c("x", "Y", "z"))
</pre></div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CEGHFECD"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">ore.delete()</h4>
<p><code>ore.delete()</code> deletes the specified datastore (and all of the R objects in it) from the current user schema in the connected database:</p>
<pre>
ore.delete(name)
</pre>
<p>The parameter for <code>ore.delete()</code> is</p>
<ul>
<li>
<p><code>name</code> is a character string specifying the name of datastore to delete; you must specify a name</p>
</li>
</ul>
<p>Use <a href="#CEGGICFH">ore.datastore()</a> to list the datastores that exist in the user's Oracle Database schema.</p>
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref46"></a>
<h5 class="sect4">Example of ore.delete()</h5>
<p>Delete the datastore <code>ds_1</code> from the user's current schema:</p>
<pre>
ore.delete("ds_1")
</pre></div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CEGGICFH"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">ore.datastore()</h4>
<p><code>ore.datastore()</code> lists the datastores and basic information about each datastore in the current schema:</p>
<pre>
ore.datastore(name, pattern)
</pre>
<p>The parameters for <code>ore.datastore()</code> are</p>
<ul>
<li>
<p><code>name</code> is a character string specifying the name of datastore to list</p>
</li>
<li>
<p><code>pattern</code> is a regular expression character string specifying the names of the datastores to list.</p>
</li>
</ul>
<p><code>ore.datastore()</code> lists information about the datastore with name specified in <code>name</code> or information about the datastores whose names match the regular expression specified in <code>pattern</code>.</p>
<p>If neither <code>name</code> nor <code>pattern</code> is provided, <code>ore.datastore()</code> returns information about all datastores in user's schema.</p>
<p>Either <code>name</code> or <code>pattern</code> can be specified but not both.</p>
<p><code>ore.datastore()</code> returns a <code>data.frame</code> object with these columns:</p>
<ul>
<li>
<p><code>datastore.name</code> name of the datastore</p>
</li>
<li>
<p><code>object.count</code> number of objects in the datastore identified by <code>datastore.name</code></p>
</li>
<li>
<p><code>size</code> size of the datastore in bytes</p>
</li>
<li>
<p><code>creation.date</code> date of datastore creation</p>
</li>
<li>
<p><code>description</code> comment for datastore (comment is specified in the <code>description</code> parameter of <code>ore.save</code>)</p>
</li>
</ul>
<p>Each row of the <code>data.frame</code> lists one datastore. Rows are sorted by column <code>datastore.name</code> in alphabetical order.</p>
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref47"></a>
<h5 class="sect4">Example of ore.datastore()</h5>
<p>List all of the datastores in the connected schema:</p>
<pre>
ore.datastore()
</pre></div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CEGDHGFG"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">ore.datastoreSummary()</h4>
<p><code>ore.datastoreSummary()</code> returns a <code>data.frame</code> that lists the names and summary information for the R objects saved in the specified datastore in the schema in the connected database:</p>
<pre>
ore.datastoreSummary(name)
</pre>
<p>The parameter for <code>ore.datastoreSummary()</code> is</p>
<ul>
<li>
<p><code>name</code> is a character string specifying the name of datastore to summarize; you must specify a name</p>
</li>
</ul>
<p>If the specified datastore does not exist, an error is returned.</p>
<p><code>ore.datastoreSummary()</code> returns a <code>data.frame</code> object with these columns:</p>
<ul>
<li>
<p><code>object.name</code> is the name of the R object</p>
</li>
<li>
<p><code>class.name</code> is the class name of the R object</p>
</li>
<li>
<p><code>size</code> is the size of the R object in bytes</p>
</li>
<li>
<p><code>length</code> is the length of the R object</p>
</li>
<li>
<p><code>row.count</code> is the number of rows for the R object</p>
</li>
<li>
<p><code>col.count</code> is number of columns of the R object</p>
</li>
</ul>
<p>Each row of the <code>data.frame</code> lists one R object. Rows are sorted by column <code>datastore.name</code> in alphabetical order.</p>
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref48"></a>
<h5 class="sect4">Example of ore.datastoreSummary()</h5>
<p>List summary information for all of the R objects in the datastore <code>ds_1</code>:</p>
<pre>
ore.datastoreSummary(name = "ds_1")
</pre></div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<div id="OREUG161" class="sect1"><a id="sthref49"></a>
<h2 class="sect1">Using R <a id="sthref50"></a>with Oracle R Enterprise Data Types</h2>
<p>The following examples illustrate using R with Oracle R Enterprise data types:</p>
<ul>
<li>
<p><span class="bold">Simple <a id="sthref51"></a>column and row selection in R</span>:</p>
<pre>
# Push built-in R data set iris to database
R&gt; ore.create(iris, table="IRIS")
R&gt; head(iris)
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
R&gt; iris_projected = IRIS[, c("PETAL_LENGTH", "SPECIES")]
R&gt; head (iris_projected)
  PETAL_LENGTH SPECIES
0          1.4  setosa
1          1.4  setosa
2          1.3  setosa
3          1.5  setosa
4          1.4  setosa
5          1.7  setosa
</pre></li>
<li>
<p><span class="bold">Database <a id="sthref52"></a>JOIN using R</span>:</p>
<pre>
df1 &lt;- data.frame(x1=1:5, y1=letters[1:5])
df2 &lt;- data.frame(x2=5:1, y2=letters[11:15])
merge (df1, df2, by.x="x1", by.y="x2")
 x1 y1 y2
1  1  a  o
2  2  b  n
3  3  c  m
4  4  d  l
5  5  e  k
# Create database objects to correspond to in-memory R objects df1 and df2
ore.df1 &lt;- ore.create(df1, table="DF1")
ore.df2 &lt;- ore.create(df2, table="DF2")
# Compare results
R&gt; merge (DF1, DF2, by.x="X1", by.y="X2")
  X1 Y1 Y2
0  1  a  o
1  2  b  n
2  3  c  m
3  4  d  l
4  5  e  k
</pre></li>
<li>
<p><span class="bold">Database a<a id="sthref53"></a>ggregation using R</span>:</p>
<pre>
# Push built-in data set iris to database
ore.create(iris, table="IRIS")
aggdata &lt;- aggregate(IRIS, by = list(IRIS$SPECIES), FUN = summary)
class(aggdata)
head(aggdata)
</pre></li>
<li>
<p><span class="bold">Data formatting<a id="sthref54"></a><a id="sthref55"></a> and creating derived columns in R</span></p>
<p>Note that adding derived columns does not change the database table. See <a href="#CEGFJIJA">Derived Columns in Oracle R Enterprise</a>.</p>
<pre>
diverted_fmt &lt;- function (x) {
ifelse(x==0, 'Not Diverted',
ifelse(x==1, 'Diverted',''))
}
cancellationCode_fmt &lt;- function(x) {
ifelse(x=='A', 'A CODE',
ifelse(x=='B', 'B CODE',
ifelse(x=='C', 'C CODE',
ifelse(x=='D', 'D CODE', 'NOT CANCELLED'))))
}
delayCategory_fmt &lt;- function(x) {
ifelse(x&gt;200,'LARGE',
ifelse(x&gt;=30,'MEDIUM','SMALL'))
}
zscore &lt;- function(x) {
(x-mean(x,na.rm=TRUE))/sd(x,na.rm=TRUE)
# ONTIME_S is a database table
ONTIME_S$DIVERTED &lt;- diverted_fmt(DIVERTED)
ONTIME_S$CANCELLATIONCODE &lt;- cancellationCode_fmt(CANCELLATIONCODE)
ONTIME_S$ARRDELAY &lt;- delayCategory_fmt(ARRDELAY)
ONTIME_S$DEPDELAY &lt;- delayCategory_fmt(DEPDELAY)
ONTIME_S$DISTANCE_ZSCORE &lt;- zscore(DISTANCE)
</pre></li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CEGFJIJA"></a>
<div id="OREUG162" class="sect1">
<h2 class="sect1">Derived Columns<a id="sthref56"></a> in Oracle R Enterprise</h2>
<p>When you add derived columns using Oracle R Enterprise, the derived columns do not affect the underlying table in the database. A SQL query is generated that has the additional derived columns in the select list, but the table is not changed.</p>
</div>
<!-- class="sect1" -->
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref57"></a>
<h2 class="sect1">Using CRAN Packages with Oracle R Enterprise</h2>
<p>This example illustrates using Oracle R Enterprise with a standard R package downloaded from CRAN:</p>
<ul>
<li>
<p><a href="#CEGGGJFD">Build and Use a Regression Model</a></p>
</li>
</ul>
<a id="CEGGGJFD"></a>
<div id="OREUG164" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Build and Use a <a id="sthref58"></a>Regression Model</h3>
<p>This example illustrates building a regression model using a CRAN package. You can prepare the data used for training in the database (filtering out observations that are not of interest, selecting attributes, imputing missing values, and so forth). Suppose that the preprocessed data is in the table ONTIME_S_PREPROCESSED_SUBSET. Then pull the prepared training set (which is usually small enough to fit in desktop R memory) into the R client to execute the model build.</p>
<p>You can use the resulting model to score (predict) large numbers of rows, in parallel, in Oracle Database. The data are stored in <code>ONTIME_S_FINAL_DATA_TO_BE_SCORED</code>.</p>
<p>Note that scoring is a trivially parallelizable operation because one row can be scored independent of and in parallel with another row. The model built on the desktop is shipped to the database to perform scoring on vast numbers of rows in the database.</p>
<p>The computations are divided into these steps:</p>
<ol>
<li>
<p>Build a model <a id="sthref59"></a>in the desktop:</p>
<pre>
dat &lt;- ore.pull(ONTIME_S_PREPROCESSED_SUBSET)
mod &lt;- glm(ARRDELAY ~ DISTANCE + DEPDELAY, dat)
mod
summary(mod)
</pre></li>
<li>
<p>Score<a id="sthref60"></a> in-parallel in the database using embedded R:</p>
<pre>
prd &lt;- predict(mod, newdata=ONTIME_S_FINAL_DATA_TO_BE_SCORED)
class(prd)
# Add predictions as a new column
res &lt;- cbind(newdat, PRED = prd)
head(res)
</pre></li>
</ol>
<p>R provides many other ways to build regression models, such as <code>lm()</code>.</p>
<p>For other ways to build regression models, see <a href="orelm.htm#CACEJIBC">Oracle R Enterprise Versions of R Models</a> and <a href="mining.htm#CEGCHAEJ">In-Database Predictive Models in Oracle R Enterprise</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CEGGAJAC"></a>
<div id="OREUG163" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Oracle R Enterprise<a id="sthref61"></a> Database-Embedded R Engine</h2>
<p>The embedded R engine in Oracle Database allows R users to off load desktop calculations that may require either more resources such as those available to Oracle Database or database-driven data parallelism. The embedded R engine also executes R scripts embedded in SQL or PL/SQL programs (lights-out processing).</p>
<p>These examples illustrate using Oracle R Enterprise embedded R engine with standard R packages downloaded from CRAN:</p>
<ul>
<li>
<p><a href="#CEGJECHG">Perform R Computation in Oracle Database</a></p>
</li>
<li>
<p><a href="#CEGBGFAH">Build a Series of Regression Models Using Data Parallelism</a></p>
</li>
</ul>
<a id="CEGJECHG"></a>
<div id="OREUG165" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Perform R Computation <a id="sthref62"></a>in Oracle Database</h3>
<p>This example illustrates <span class="bold">off loading R computation</span> to execute in the embedded R engine. To off load an R computation, simply include the R code within a closure (that is, <code>function() {}</code>) and invoke <code>ore.doEval()</code>. <code>ore.doEval()</code> schedules execution of the R code with the database-embedded R engine and returns the results back to the desktop for continued analysis:</p>
<pre>
library(biglm)
mod &lt;- ore.doEval(
   function() {
      library(biglm)
      dat &lt;- ore.pull(ore.get("ONTIME_S"))
      mod &lt;- biglm(ARRDELAY ~ DISTANCE + DEPDELAY, dat)
      mod
     }, ore.connect = TRUE);
print(mod)
mod=ore.pull(mod)
print(mod)
</pre></div>
<!-- class="sect2" -->
<a id="CEGBGFAH"></a>
<div id="OREUG166" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Build a Series of Regression <a id="sthref63"></a>Models Using Data Parallelism</h3>
<p>This example illustrates <span class="bold">database-driven data parallelism</span> at work in building a series of regression models using a CRAN package. One model is built per unique value of a factor. The database orchestrates the parallel and concurrent building of the models, one per factor and brings the list of all models built to the user desktop for further analysis:</p>
<pre>
modList &lt;- ore.groupApply(
  # Organize input to the R script &ndash; This is always an Oracle R Enterprise   
  # data frame
   X=ONTIME_S,
  # Specify the grouping column. Here we request one model per unique value of
  # ONTIME_S$DEST
   INDEX=ONTIME_S$DEST,
  # Model building code goes inside the closure. Input and grouping 
  # conditions can be referenced as parameters to the function
    function(x) {
     library(biglm)
     biglm(ARRDELAY ~ DISTANCE + DEPDELAY, x)
     });

   modList_local &lt;- ore.pull(modList)
# Print the model for just one destination - BOSTON
summary(modList_local$BOS)
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CEGGIDFI"></a>
<div id="OREUG172" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Oracle R Enterprise <a id="sthref64"></a>Examples</h2>
<p>Oracle R Enterprise is shipped with a collection of demos, examples that illustrate how to use Oracle R Enterprise. These examples are a collection of self-contained R scripts.</p>
<p>Most of the sample programs use the data frame <code>iris</code>, which is included in the R distribution. <code>iris</code> is loaded into a table as described in <a href="#CEGECFEA">Load a Data Frame to a Table</a>.</p>
<p>The rest of this section describes two examples in detail and includes a list of all of the examples:</p>
<ul>
<li>
<p><a href="#CEGECFEA">Load a Data Frame to a Table</a></p>
</li>
<li>
<p><a href="#CEGEBECD">Handle NULL Values Using airquality</a></p>
</li>
<li>
<p><a href="#CEGCADBI">Oracle R Enterprise Demos</a></p>
</li>
</ul>
<a id="CEGECFEA"></a>
<div id="OREUG173" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Load a Data <a id="sthref65"></a>Frame to a Table</h3>
<p>Start R, load the ORE packages via <code>library(ORE)</code>, and then connect to the database.</p>
<p>Follow these steps to load an R data frame to a database table:</p>
<ol>
<li>
<p>This example uses the R data set <code>iris</code>.</p>
<p>The <code>iris</code> data set is located in the datasets package that is part of the R distribution:</p>
<pre>
R&gt; find("iris")
[1] "package:datasets"
</pre>
<p>Use the R command <code>class</code> to verify that <code>iris</code> is an R data frame:</p>
<pre>
R&gt; class(iris)
[1] "data.frame"
</pre>
<p><code>iris</code> consist of measurements of parts of iris flowers. Use the R command <code>head</code> to see a small sample of the data in <code>iris</code>.</p>
<pre>
R&gt; head(iris)
      Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
</pre></li>
<li>
<p>Now load the data frame <code>iris</code> into the database that you are connected to.</p>
<p>Suppose that the database table version of <code>iris</code> is named IRIS_TABLE. Drop IRIS_TABLE to make sure that no table of this name exists in the connected schema:</p>
<pre>
ore.drop(table = "IRIS_TABLE")
</pre>
<p>If IRIS_TABLE doesn't exist, you do not get a message.</p>
</li>
<li>
<p>Now create a database table with the data contained in <code>iris</code>:</p>
<pre>
ore.create(iris, table = "IRIS_TABLE")
</pre>
<p>Use <code>ore.ls()</code> to verify that the table was created:</p>
<pre>
R&gt; ore.ls()
[1] "IRIS_TABLE" "NARROW"     "ONTIME_S" 
</pre></li>
<li>
<p>IRIS_TABLE is a database-resident table with just metadata on the R side:</p>
<pre>
R&gt; class(IRIS_TABLE)
[1] "ore.frame"
attr(,"package")
[1] "OREbase"
</pre></li>
<li>
<p>Use <code>head</code> to see the column names and the first few values in IRIS_TABLE:</p>
<pre>
R&gt; head(IRIS_TABLE)
  SEPAL_LENGTH SEPAL_WIDTH PETAL_LENGTH PETAL_WIDTH SPECIES
0          5.1         3.5          1.4         0.2  setosa
1          4.9         3.0          1.4         0.2  setosa
2          4.7         3.2          1.3         0.2  setosa
3          4.6         3.1          1.5         0.2  setosa
4          5.0         3.6          1.4         0.2  setosa
5          5.4         3.9          1.7         0.4  setosa
</pre></li>
<li>
<p>Use <code>class</code> to see the data type of the column SPECIES.</p>
<pre>
R &gt; class(IRIS_TABLE$SPECIES)
[1] "raw"
</pre></li>
</ol>
<p>You can use R functions to analyze the data in the table. Here are some simple examples taken from the example <code>basic.R</code>:</p>
<ul>
<li>
<p>Use <code>unique</code> to get a list of the unique entries in a column. This example finds the unique SPECIES:</p>
<pre>
R&gt; unique(IRIS_TABLE$SPECIES)
[1] setosa     versicolor virginica 
Levels: setosa versicolor virginica
</pre></li>
<li>
<p>Find the minimum, maximum, and mean of PETAL_LENGTH:</p>
<pre>
R&gt; min(IRIS_TABLE$PETAL_LENGTH)
[1] 1
R&gt; max(IRIS_TABLE$PETAL_LENGTH)
[1] 6.9
R&gt; mean(IRIS_TABLE$PETAL_LENGTH)
[1] 3.758
</pre></li>
</ul>
<p>If you need information about an R function, use the command <code>help(function-name)</code>.</p>
</div>
<!-- class="sect2" -->
<a id="CEGEBECD"></a>
<div id="OREUG174" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Handle NULL <a id="sthref66"></a>Values Using airquality</h3>
<p>Oracle Database has logical values: TRUE, FALSE, NULL. There is a 3x3 table that defines truth values for propositions with AND and OR. NULL is treated as an unknown value. For some operations the result is either deterministic (for example TRUE OR NULL) or unknown (TRUE AND NULL). If logical values are used in a WHERE clause, only rows with the condition TRUE are selected; FALSE and NULL are ignored. R, on the other hand, keeps TRUE and NA. Rows with NA are selected with value NA.</p>
<p>The option <code>ore.na.extract</code> controls whether NAs are selected or not. The default is to treat NA as SQL treats FALSE.</p>
<p>The demo <code>nulls.R</code> is the only sample that does not use <code>iris</code> as data. <code>nulls.R</code> compares the handling of NULLs in SQL with the handling of NAs in R.</p>
<p>In R, NA is a logical constant of length 1 which contains a missing value indicator. In the database, null refers to the absence of a value in a column of a row. Nulls indicate missing, unknown, or inapplicable data.</p>
<p>Follow these steps to understand the demo <code>nulls.R</code>:</p>
<ol>
<li>
<p>This demo uses the data frame <code>airquality</code>. Verify that the data set is a data frame and look at the few rows of the data frame:</p>
<pre>
R&gt; class(airquality)
[1] "data.frame"
R&gt; head(airquality)
  Ozone Solar.R Wind Temp Month Day
1    41     190  7.4   67     5   1
2    36     118  8.0   72     5   2
3    12     149 12.6   74     5   3
4    18     313 11.5   62     5   4
5    NA      NA 14.3   56     5   5
6    28      NA 14.9   66     5   6
</pre></li>
<li>
<p>Load <code>airquality</code> into the database as "AIRQUALITY":</p>
<pre>
ore.drop(table = "AIRQUALITY")
ore.create(airquality, table = "AIRQUALITY")
</pre>
<p>Use <code>ore.ls()</code> to verify that the table was created. If you wish, use <code>class(AIRQUALITY)</code> to verify that <code>AIRQUALITY</code> is a database-resident table with just metadata on the R side.</p>
</li>
<li>
<p>Examine how R handles NAs. Return all observations where ozone &lt; 30 is TRUE:</p>
<pre>
R&gt; nrow(airquality[airquality$Ozone &lt; 30,])[1] 92
</pre>
<p>Compare this with the results when NAs are explicitly excluded:</p>
<pre>
R&gt; nrow(airquality[airquality$Ozone &lt; 30 &amp; !is.na(airquality$Ozone),])
[1] 55
</pre></li>
<li>
<p>The default behavior for SQL tables is to exclude NULLS in output:</p>
<pre>
nrow(AIRQUALITY[AIRQUALITY$OZONE &lt; 30,])
[1] 55
</pre>
<p>To handle NULLs the same way that R handles NA, request the behavior explicitly:</p>
<pre>
options(ore.na.extract = TRUE)
nrow(AIRQUALITY[AIRQUALITY$OZONE &lt; 30,])
[1] 92
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CEGCADBI"></a>
<div id="OREUG175" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Oracle R Enterprise <a id="sthref67"></a>Demos</h3>
<p>Thes<a id="sthref68"></a>e scripts have been added as demos to the ORE package.</p>
<p>To list all of the demos included with Oracle R Enterprise, type</p>
<pre>
R&gt; demo(package = "ORE")
</pre>
<p>To run one of these scripts, specify the name of the demo in a <code>demo</code> function call. For example, to run <code>aggregate.R</code>, type</p>
<pre>
R&gt; demo("aggregate", package = "ORE")
</pre>
<p>These demos are shipped with Oracle R Enterprise:</p>
<pre>
aggregate      Aggregation
analysis       Basic analysis &amp; data processing operations
basic          Basic connectivity to database
binning        Binning logic
columnfns      Column functions
cor            Correlation matrix
crosstab       Frequency cross tabulations
datastore      DataStore operations
datetime       Date/Time operations
derived        Handling of derived columns
distributions  Distribution, density, and quantile functions
do_eval        Embedded R processing
freqanalysis   Frequency cross tabulations
graphics       Demonstrates visual analysis
group_apply    Embedded R processing by group
hypothesis     Hyphothesis testing functions
matrix         Matrix related operations
nulls          Handling of NULL in SQL vs. NA in R
odm_ai         Oracle Data Mining: attribute importance
odm_dt         Oracle Data Mining: decision trees
odm_glm        Oracle Data Mining: generalized linear models
odm_kmeans     Oracle Data Mining: enhanced k-means clustering
odm_nb         Oracle Data Mining: naive Bayes classification
odm_svm        Oracle Data Mining: support vector machines
push_pull      RDBMS &lt;-&gt; R data transfer
rank           Attributed-based ranking of observations
reg            Ordinary least squares linear regression
row_apply      Embedded R processing by row chunks
sampling       Random row sampling and partitioning of an ore.frame
sql_like       Mapping of R to SQL commands
stepwise       Stepwise OLS linear regression
summary        Summary functionality
table_apply    Embedded R processing of entire table  
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2090">
<tr>
<td class="cellalignment2097">
<table class="cellalignment2095">
<tr>
<td class="cellalignment2094"><a href="trans.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2094"><a href="procs.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2012, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2099">
<table class="cellalignment2093">
<tr>
<td class="cellalignment2094"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2094"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2094"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2094"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2094"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2094"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
