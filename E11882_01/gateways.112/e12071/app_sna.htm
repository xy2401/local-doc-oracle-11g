<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Client Application Development (SNA Only)</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-07-18T21:25:1Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Gateway for APPC User's Guide" />
<meta name="dcterms.identifier" content="E12071-03" />
<meta name="dcterms.isVersionOf" content="APPUG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="tip.htm" title="Previous" type="text/html" />
<link rel="Next" href="com_con.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e12071.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/20</span> <!-- End Header -->
<div id="APPUG400" class="chapter"><a id="g1020838"></a>
<h1 class="chapter"><span class="secnum">4</span> Client Application Development (SNA Only)</h1>
<p>This chapter discusses how you will call a TIP and control a remote host transaction. It also provides you with the steps for preparing and executing a gateway transaction. This chapter assumes:</p>
<ul>
<li>
<p>a remote host transaction (RHT) has already been written;</p>
</li>
<li>
<p>a TIP corresponding to the RHT has already been defined using the steps described in <a href="tip.htm#g1011602">Chapter 3, "Creating a TIP"</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If your gateway uses the TCP/IP support for IMS Connect, refer to <a href="app_tcp.htm#g1017213">Chapter 7, "Client Application Development (TCP/IP Only)"</a> for information about calling a TIP and controlling a remote host transaction.</div>
</li>
</ul>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#i1007803">"Overview of Client Application"</a></p>
</li>
<li>
<p><a href="#i1006611">"Preparing the Client Application"</a></p>
</li>
<li>
<p><a href="#i1007818">"Understanding the Remote Host Transaction Requirements"</a></p>
</li>
<li>
<p><a href="#i1007826">"Customized TIPs for Each Remote Host Transaction"</a></p>
</li>
<li>
<p><a href="#i1006752">"Client Application Requirements"</a></p>
</li>
<li>
<p><a href="#i1006907">"Ensuring TIP and Remote Transaction Program Correspondence"</a></p>
</li>
<li>
<p><a href="#i1007075">"Calling the TIP from the Client Application"</a></p>
</li>
<li>
<p><a href="#i1007855">"Exchanging Data"</a></p>
</li>
<li>
<p><a href="#i1007756">"Executing the Application"</a></p>
</li>
<li>
<p><a href="#i1007346">"APPC Conversation Sharing"</a></p>
</li>
<li>
<p><a href="#i1007503">"Application Development with Multi-Byte Character Set Support"</a></p>
</li>
<li>
<p><a href="#i1007531">"Modifying a Terminal-Oriented Transaction to Use APPC"</a></p>
</li>
<li>
<p><a href="#i1007544">"Privileges Needed to Use TIPs"</a></p>
</li>
</ul>
<a id="i1007803"></a>
<div id="APPUG970" class="sect1">
<h2 class="sect1"><span class="secnum">4.1</span> Overview of Client Application <a id="sthref534"></a><a id="sthref535"></a></h2>
<p>The Procedural Gateway Administration Utility (<a id="sthref536"></a>PGAU) generates a complete TIP using definitions you provide. The client application can then call the TIP to access the remote host transaction. <a href="admin_util.htm#g1029659">Chapter 2, "Procedural Gateway Administration Utility"</a>, discusses the use of PGAU in detail.</p>
<p>This overview explains what you must do in order to call a TIP and control a remote host transaction.</p>
<p>The gateway receives PL/SQL calls from the <a id="sthref537"></a>Oracle database and issues APPC calls to communicate with a remote transaction program. The following three application programs make this possible:</p>
<ol>
<li>
<p>an APPC-enabled remote host transaction program</p>
</li>
<li>
<p>a <a id="sthref538"></a>Transaction Interface Package, or TIP. A TIP is a P<a id="sthref539"></a>L/SQL package that handles communication between the client and the gateway and performs datatype conversions between COBOL and PL/SQL.</p>
<p>PGAU generates the <a id="sthref540"></a><a id="sthref541"></a>TIP specification for you. In the shipped samples, the PGAU-generated package is called <code><a id="sthref542"></a><a id="sthref543"></a>pgadb2i.pkb</code>. This generated TIP includes at least three function calls that map to the remote transaction program:</p>
<ul>
<li>
<p><code>pgadb2i_init</code> initializes the conversation with the remote transaction program</p>
</li>
<li>
<p><code>pgadb2i_main</code> exchanges application data with the remote transaction program</p>
</li>
<li>
<p><code>pgadb2i_term</code> terminates the conversation with the remote transaction program</p>
</li>
</ul>
<p>Refer to <a href="apf.htm#g638154">Appendix E, "Tip Internals"</a> for more information about TIPs, if you are writing your own TIP or debugging.</p>
</li>
<li>
<p>a client application that calls the TIP.</p>
<p>The client application calls the three TIP functions with input and output arguments. In the example, the client application passes <code>empno</code>, an employee number to the remote transaction and the remote transaction sends back <code>emprec</code> an employee record.</p>
</li>
</ol>
<p><a href="#CHDDBIFA">Table 4-1</a> demonstrates the logic flow between the PL/SQL driver, the TIP, and the gateway using the example CICS-DB2 transaction.</p>
<div id="APPUG1299" class="tblhruleformal">
<p class="titleintable"><a id="sthref544"></a><a id="CHDDBIFA"></a>Table 4-1 Logic Flow of CICS-DB2 Example</p>
<table class="cellalignment342" title="Logic Flow of CICS-DB2 Example" summary="demonstrates the logic flow between the PL/SQL driver, the TIP, and the gateway using the example CICS-DB2 transaction" dir="ltr">
<thead>
<tr class="cellalignment333">
<th class="cellalignment340" id="r1c1-t3">Client Application</th>
<th class="cellalignment340" id="r1c2-t3">Oracle TIP</th>
<th class="cellalignment340" id="r1c3-t3">Procedures Established Between the Gateway and the Remote Transaction (mainframe)</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment333">
<td class="cellalignment341" id="r2c1-t3" headers="r1c1-t3">
<p><code>calls tip_init</code></p>
</td>
<td class="cellalignment341" headers="r2c1-t3 r1c2-t3">
<p>Calls <code>PGAINIT</code></p>
</td>
<td class="cellalignment341" headers="r2c1-t3 r1c3-t3">
<p>Gateway sets up control blocks and issues APPC <code>ALLOCATE</code>. Mainframe program initiates.</p>
</td>
</tr>
<tr class="cellalignment333">
<td class="cellalignment341" id="r3c1-t3" headers="r1c1-t3">
<p><code>calls tip_main</code></p>
</td>
<td class="cellalignment341" headers="r3c1-t3 r1c2-t3">
<p>Calls <code>PGAXFER</code> to send <code>empno</code> and receive <code>emprec</code></p>
</td>
<td class="cellalignment341" headers="r3c1-t3 r1c3-t3">
<p>Gateway issues APPC <code>SEND</code> to the mainframe. Mainframe <code>RECEIVE</code> completes. Mainframe performs application logic and issues APPC <code>SEND</code> back to gateway. The gateway- issues APPC <code>RECEIVE</code>; receive completes. Mainframe issues APPC <code>TERM</code>.</p>
</td>
</tr>
<tr class="cellalignment333">
<td class="cellalignment341" id="r4c1-t3" headers="r1c1-t3">
<p><code>calls tip_term</code></p>
</td>
<td class="cellalignment341" headers="r4c1-t3 r1c2-t3">
<p>Call <code>PGATERM</code></p>
</td>
<td class="cellalignment341" headers="r4c1-t3 r1c3-t3">
<p>Gateway cleans up control blocks.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>A client application which utilizes the gateway to exchange data with a remote host transaction performs some tasks for itself and instructs the TIP to perform other tasks on its behalf. The client application designer must consequently know the behavior of the remote transaction and how the TIP facilitates the exchange.</p>
<p>The following sections provide an overview of remote host transaction behavior, how this behavior is controlled by the client application and how TIP function calls and data declarations support the client application to control the remote host transaction. These sections also provide background information about what the TIP does for the client application and how the TIP calls exchange data with the remote host transaction.</p>
</div>
<!-- class="sect1" -->
<a id="i1006611"></a>
<div id="APPUG971" class="sect1">
<h2 class="sect1"><span class="secnum">4.2</span> Preparing the Client Application<a id="sthref545"></a></h2>
<p>To prepare the client application for execution you must understand the remote host transaction requirements and then perform these steps:</p>
<ol>
<li>
<p>Move relevant <a id="sthref546"></a>COBOL records layout (copybooks) to the gateway system for input to PGAU.</p>
</li>
<li>
<p>Describe the remote host transaction data and calls to the <a id="sthref547"></a>PG Data Dictionary (PG DD) with <code>DEFINE DATA</code>, <code>DEFINE CALL</code>, and <code>DEFINE TRANSACTION</code> statements.</p>
</li>
<li>
<p>Generate the TIP in the Oracle database, using <code>GENERATE</code>.</p>
</li>
<li>
<p>Create the client application that calls the TIP public functions.</p>
</li>
<li>
<p>Grant privileges on the newly created package.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="i1007818"></a>
<div id="APPUG972" class="sect1">
<h2 class="sect1"><span class="secnum">4.3</span> Understanding the Remote Host Transaction Requirements<a id="sthref548"></a></h2>
<p>Browse through the remote host transaction program (RTP) to determine:</p>
<ul>
<li>
<p>the PL/SQL parameters required on the various client application to TIP calls</p>
</li>
<li>
<p>the order in which the calls are made</p>
</li>
</ul>
<p>Identify the remote host transaction program (RTP) facilities to be called and the data to be exchanged on each call. You will then define the following, and store them in the PG&nbsp;DD:</p>
<ul>
<li>
<p><code>DEFINE DATA</code></p>
</li>
<li>
<p><code>DEFINE CALL</code></p>
</li>
<li>
<p><code>DEFINE TRANSACTION</code></p>
</li>
</ul>
<p>Refer to <a href="tip.htm#g1011602">Chapter 3, "Creating a TIP"</a> for specific definition steps and for the actual creation and generation of a TIP.</p>
<div id="APPUG973" class="sect2"><a id="sthref549"></a>
<h3 class="sect2"><span class="secnum">4.3.1</span> TIP Content and Purpose<a id="sthref550"></a><a id="sthref551"></a></h3>
<p>The content of a PGAU-generated TIP reflects the calls available to the remote host transaction and the data that has been exchanged. Understanding this content helps when designing and debugging client applications that call the TIP.</p>
<p>A TIP is a <a id="sthref552"></a>PL/SQL package, and accordingly has <a id="sthref553"></a><a id="sthref554"></a>two sections:</p>
<ol>
<li>
<p>A Package Specification containing:</p>
<ul>
<li>
<p>Public function prototypes and parameters, and</p>
</li>
</ul>
</li>
<li>
<p>A Package Body containing:</p>
<ul>
<li>
<p>Private functions and internal control variables</p>
</li>
<li>
<p>Public functions</p>
</li>
<li>
<p>Package initialization following the last public function.</p>
</li>
</ul>
</li>
</ol>
<p>The purpose of the TIP is to provide a PL/SQL callable public function for every allowed remote transaction program interaction. A <a id="sthref555"></a>remote transaction program interaction is a logically related group of data exchanges through one or more <a id="sthref556"></a><a id="sthref557"></a><code>PGAXFER</code> RPC calls. This is conceptually similar to a screen or menu interaction in which several fields are filled in, the enter key is pressed, and several fields are returned to the user. Carrying the analogy further:</p>
<ul>
<li>
<p>the user might be likened to the TIP or client application</p>
</li>
<li>
<p>fields to be filled in are <code>IN</code> parameters on the TIP function call</p>
</li>
<li>
<p>fields returned are <code>OUT</code> parameters on the TIP function call</p>
</li>
<li>
<p>screen or menu is the group of <code>IN</code> and <code>OUT</code> parameters combined</p>
</li>
<li>
<p>a pressed enter key is likened to the <code>PGAXFER</code> remote procedural call (RPC)</p>
</li>
</ul>
<p>The actual grouping of parameters that constitute a transaction call is defined by the user. The gateway places no restrictions on how a remote transaction program might correspond to a collection of TIP function calls, each call having many <code>IN</code> and <code>OUT</code> parameters.</p>
<p>PGA users typically have one TIP per remote transaction program. How the TIP function calls are grouped and what data parameters are exchanged on each call depends on the size, complexity and behavior of the remote transaction program.</p>
<p>Refer to Oracle's <a class="olink LNPLS" href="../../appdev.112/e25519/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for a discussion of how <a id="sthref558"></a>PL/SQL packages work. The following discussion covers the logic that must be performed within a TIP. Refer to the sample TIP and driver supplied in the <code>%ORACLE_HOME%\dg4appc\demo\CICS</code> directory for Microsoft Windows or <code>$ORACLE_HOME/dg4appc/demo/CICS</code> directory for UNIX based systems, in files<a id="sthref559"></a><a id="sthref560"></a> <code>pgadb2i.pkh</code>, <a id="sthref561"></a><a id="sthref562"></a><code>pgadb2i.pkb</code>, and<a id="sthref563"></a> <code>pgadb2id.sql</code>.</p>
</div>
<!-- class="sect2" -->
<a id="i1006667"></a>
<div id="APPUG974" class="sect2">
<h3 class="sect2"><span class="secnum">4.3.2</span> Remote Host Transaction Types<a id="sthref564"></a></h3>
<p>From a database gateway application perspective, there are three main types of remote host transactions:</p>
<ul>
<li>
<p>one-shot</p>
</li>
<li>
<p>persistent</p>
</li>
<li>
<p>multi-conversational</p>
</li>
</ul>
<div id="APPUG975" class="sect3"><a id="sthref565"></a>
<h4 class="sect3"><span class="secnum">4.3.2.1</span> One-Shot Transactions<a id="sthref566"></a></h4>
<p><a id="sthref567"></a>A simple remote transaction program which receives one employee number and returns the employee record could have a TIP which provides one call, passing the employee number as an <code>IN</code> parameter and returning the employee record as an <code>OUT</code> parameter. An additional two function calls must be provided by this and every TIP:</p>
<ul>
<li>
<p>a remote transaction program init function call</p>
</li>
<li>
<p>a remote transaction program terminate function call</p>
</li>
</ul>
<p>The most simple TIP has three public functions, such as <code>tip_init</code>, <code>tip_main</code>, and <code>tip_term</code>.</p>
<p>The client application calls <code>tip_init</code>, <code>tip_main</code>, and <code>tip_term</code> in succession. The corresponding activity at the remote site is remote transaction program start, data exchange, and remote transaction program end.</p>
<p>The remote transaction program might even terminate itself before receiving a terminate signal from the gateway. This sequence is usual and is handled normally by gateway logic. This kind of remote transaction program is termed one-shot.</p>
</div>
<!-- class="sect3" -->
<div id="APPUG976" class="sect3"><a id="sthref568"></a>
<h4 class="sect3"><span class="secnum">4.3.2.2</span> Persistent Transactions<a id="sthref569"></a></h4>
<p><a id="sthref570"></a>A more complex remote transaction program has two modes of behavior: an <code>INQUIRY</code> or reporting mode, and an <code>UPDATE</code> mode. These modes can have two TIP data transfer function calls: one for <code>INQUIRY</code> and one for <code>UPDATE</code>. Such a TIP might have five public functions. For example:</p>
<ul>
<li>
<p><a id="sthref571"></a><code>tip_init</code></p>
<p>This initializes communications with the remote transaction program.</p>
</li>
<li>
<p><a id="sthref572"></a><code>tip_mode</code></p>
<p>This accepts a mode selection parameter and puts the transaction program into either inquiry or update mode.</p>
</li>
<li>
<p><a id="sthref573"></a><code>tip_inqr</code></p>
<p>This returns an employee record for a given employee number.</p>
</li>
<li>
<p>t<a id="sthref574"></a><code>ip_updt</code></p>
<p>This accepts an employee record for a given employee number.</p>
</li>
<li>
<p><a id="sthref575"></a><code>tip_term</code></p>
<p>This terminates communications with the remote transaction program.</p>
</li>
</ul>
<p>The client application calls <code>tip_init</code> and then <code>tip_mode</code> to place the remote transaction program in inquiry mode which then scans employee records, searching for some combination of attributes (known to the client application and end-user). Some parameter on an inquiry call is then set to signal a change to update mode and the client application calls <code>tip_updt</code> to update some record. The client application finally calls <code>tip_term</code> to terminate the remote transaction program.</p>
<p>The corresponding activity at the <a id="sthref576"></a>remote site is:</p>
<ul>
<li>
<p>remote transaction program start</p>
</li>
<li>
<p>mode selection exchange</p>
</li>
<li>
<p>loop reading records</p>
</li>
<li>
<p>switch to update mode</p>
</li>
<li>
<p>update one record</p>
</li>
<li>
<p>remote transaction program end</p>
</li>
</ul>
<p>Such a remote transaction program is called persistent because it interacts until it is signalled to terminate.</p>
<p>The remote transaction program can be written to permit a return to inquiry mode and repeat the entire process indefinitely.</p>
</div>
<!-- class="sect3" -->
<div id="APPUG977" class="sect3"><a id="sthref577"></a>
<h4 class="sect3"><span class="secnum">4.3.2.3</span> Multi-Conversational Transactions<a id="sthref578"></a></h4>
<p><a id="sthref579"></a>A client application might need to get information from one transaction, <code>tran_A</code>, and subsequently write or lookup information from another, <code>tran_B</code>. This is possible with a properly written client application and TIPs for <code>tran_A</code> and <code>tran_B</code>. In fact, any number of transactions might be concurrently controlled by a single client application. All transactions could be read-only, with the client application retrieving data from each and consolidating it into a local Oracle database or displaying it in an Oracle Form.</p>
<p>Alternatively, a transaction could be capable of operating in different modes or performing different services depending on what input selections were supplied by the client application. For example, one instance of <code>tran_C</code> can perform one service while a second instance of <code>tran_C</code> performs a second service. Each instance of <code>tran_C</code> would have its own unique conversation with the client application and each instance could have its own behavior (one-shot or persistent) depending on the nature of the service being performed.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007826"></a>
<div id="APPUG978" class="sect1">
<h2 class="sect1"><span class="secnum">4.4</span> Customized TIPs for Each Remote Host Transaction<a id="sthref580"></a><a id="sthref581"></a></h2>
<p>Each remote host system might have hundreds of <a id="sthref582"></a>remote transaction programs (RTPs) which a user might want to call. Each remote transaction program is different, passes different data, and performs different functions. The interface between the user and each remote transaction program must consequently be specialized and customized to the user's requirements for each remote transaction program. The Transaction Interface Package provides this customized interface.</p>
<p class="subhead1"><a id="APPUG1300"></a>Example</p>
<p>Assume that the remote site has a transaction program which manages employee information in an employee database or other file system. The remote transaction program's name, in the remote host, is <code>EMPT</code> for Employee Tracking. <code>EMPT</code> provides both inquiry and update facilities, and different Oracle users are required to access and use these <code>EMPT</code> facilities.</p>
<p>Some users might be restricted to inquiry-only use of <code>EMPT</code>, while others might have update requirements. In support of the Oracle users' client applications, at least three possible TIPs could exist:</p>
<ol>
<li>
<p><code>EMP_MGMT</code> to provide access to all facilities of the <code>EMPT</code> remote transaction program.</p>
</li>
<li>
<p><code>EMP_UPDT</code> to access only the update functions of the <code>EMPT</code> remote transaction program.</p>
</li>
<li>
<p><code>EMP_INQR</code> to access only the lookup functions of the <code>EMPT</code> remote transaction program.</p>
</li>
</ol>
<p>End-user access to these TIPs is controlled by Oracle privileges. Additional security might be imposed on the end-user by the remote host.</p>
<p>Each TIP also has encoded within it the name of the remote transaction program (<code>EMPT</code>) and network information sufficient to establish an APPC conversation with <code>EMPT</code>.</p>
</div>
<!-- class="sect1" -->
<a id="i1006752"></a>
<div id="APPUG979" class="sect1">
<h2 class="sect1"><span class="secnum">4.5</span> Client Application Requirements<a id="sthref583"></a><a id="sthref584"></a></h2>
<p>Using the TIP, the client application must correspond with and control the <a id="sthref585"></a>remote host transaction. This involves:</p>
<ol>
<li>
<p>client application initialization</p>
</li>
<li>
<p>user input and output</p>
</li>
<li id="i1008983">
<p>remote host transaction initialization using the TIP initialization functions (with and without overrides)</p>
</li>
<li id="i1008989">
<p>remote host transaction control and data exchange using the TIP user functions</p>
</li>
<li id="i1008993">
<p>remote host transaction termination using the TIP termination function</p>
</li>
<li>
<p>exception handling</p>
</li>
<li>
<p>client application termination</p>
</li>
</ol>
<p>Steps&nbsp;<a href="#i1008983">3</a>, <a href="#i1008989">4</a> and&nbsp;<a href="#i1008993">5</a> vary, based on the requirements of the remote host transaction.</p>
<p class="subhead1"><a id="APPUG1301"></a><a id="sthref586"></a><a id="sthref587"></a>One-shot remote host transaction client applications must:</p>
<ul>
<li>
<p>Declare RHT/TIP datatypes to be exchanged. <a id="sthref588"></a>All client applications must declare variables to be exchanged with the RHTs using TIPs. <a id="sthref589"></a>PL/SQL datatypes for such variables have already been defined in the TIP corresponding to each RHT and the client application need only reference the TIP datatype in its declaration. Refer also to <a href="#i1007085">"Declaring TIP Variables"</a> for more information. Also refer to the TIP content documentation file for the specific TIP/RHT for more information about the exact usage of these variables.</p>
</li>
<li>
<p>Initialize the RHT using the TIP initialization function<a id="sthref590"></a>. The TIP directs the gateway server to initialize a conversation with the desired RHT, specifying either default RHT identifying parameters (supplied when the RHT was defined in the PG DD and encoded within the TIP when it was generated) or override RHT identifying parameters supplied by the user or client application when the TIP initialization function is called. Refer to <a href="#i1007176">"Initializing the Conversation"</a> and <a href="#i1007242">"Overriding TIP Initializations"</a> for more details.</p>
</li>
<li>
<p>Exchange data with the RHT using the TIP user function (one call).<a id="sthref591"></a> As previously discussed, a one-shot remote host transaction only accommodates a single data exchange and upon completion of that exchange, the RHT terminates on its own. The client application consequently needs only to execute a single call to the user-defined TIP function to cause the data exchange.</p>
<p>Refer to the TIP content documentation file in <code>%ORACLE_HOME%\dg4appc\demo\CICS\</code> on Microsoft Windows or <code>$ORACLE_HOME/dg4appc/demo/CICS/</code> on UNIX based systems, for the specific TIP/RHT for the exact syntax of this call.</p>
<p>The client application should initialize values into <code>IN</code> or <code>IN OUT</code> parameter values before calling the TIP function call. These are the same variables that were declared above, when you declared the RHT/TIP datatypes to be exchanged.</p>
<p>All TIP function calls return a <code>0</code> return code value and all returned user gateway data values are exchanged in the function parameters. Any exception conditions are raised as required and can be intercepted in an exception handler.</p>
<p>Upon return from the TIP function call, the client application can analyze and operate on the <code>IN OUT</code> or <code>OUT</code> parameter values. These are the same variables that were declared above, when you declared the RHT/TIP datatypes to be exchanged.</p>
<p>Refer to <a href="apd.htm#g640607">Appendix D, "Datatype Conversions"</a> for details about how TIPs convert the various types and formats of remote host data.</p>
</li>
<li>
<p>Terminate the RHT using the TIP termination function<a id="sthref592"></a>. Regardless of the type of RHT being accessed, the TIP terminate function should be called to clean up and terminate the conversation with the RHT. Conversations with one-shot RHTs can be terminated from the gateway server before the RHT terminates. The TIP must perform its cleanup as well. Cleanup is only performed at the termination request of the client application.</p>
<p>The client application can request a normal or an aborted termination.</p>
<p>Refer to <a id="sthref593"></a><a id="sthref594"></a><a href="#i1007305">"Terminating the Conversation"</a> for more information.</p>
</li>
</ul>
<p class="subhead1"><a id="APPUG1302"></a><a id="sthref595"></a><a id="sthref596"></a>Persistent remote host transaction client applications must:</p>
<ul>
<li>
<p>Declare RHT/TIP datatypes to be exchanged. <a id="sthref597"></a>All client applications must declare variables to be exchanged with the RHTs using TIPs. <a id="sthref598"></a>PL/SQL datatypes for such variables have already been defined in the TIP corresponding to each RHT; the client application need only reference the TIP datatype in its declaration. Refer to <a href="#i1007085">"Declaring TIP Variables"</a> for more information. Refer also to the TIP content documentation file for the specific TIP/RHT for more information about the exact usage of these variables.</p>
</li>
<li>
<p>Initialize the RHT using the TIP initialization function. <a id="sthref599"></a>The TIP directs the gateway server to initialize a conversation with the desired RHT, specifying either default RHT identifying parameters (supplied when the RHT was defined in the PG DD and encoded within the TIP when it was generated) or override RHT identifying parameters supplied by the user or client application when the TIP initialization function is called. Refer to <a href="#i1007176">"Initializing the Conversation"</a> and <a href="#i1007242">"Overriding TIP Initializations"</a> for more details.</p>
</li>
<li>
<p>Repetitively exchange data with RHT using the TIP user function(s).<a id="sthref600"></a> Remote host transactions that provide or require ongoing or repetitive control sequences should be controlled by the client application in the same manner that the RHT would be operated by an interactive user or other control program. The intercession of the TIP and gateway server does not alter the RHT behavior; instead, it extends control of that behavior to the client application using the various function calls defined in the TIP.</p>
<p>A persistent RHT can be controlled with one or more TIP function calls. The RHT might be designed, for example, to loop and return output for every input until the conversation is explicitly terminated. Or it could have been designed to accept as input a count or list of operations to perform and return the results in multiple exchanges for which the TIP function has only <code>OUT</code> parameters.</p>
<p>A persistent RHT can also be interactive, each output being specified by a previous input selection and ending only when the conversation has been explicitly terminated by the client application.</p>
<p>The TIP function calls available to the client applications and their specific syntax is documented in the TIP Content documentation file for the specific TIP/RHT.</p>
<p>The manner in which the RHT interprets the TIP <code>IN</code> parameters and returns TIP <code>OUT</code> parameters must be determined from the RHT or explained by the RHT programmer. The TIP provides the function calls and the exchanged parameter datatypes to facilitate the client application's control of the RHT and imposes no limitations or preconditions on the sequence of operations the RHT is directed to perform. The TIP provides the client application with the calls and data parameters the RHT was defined to accept in the PG DD.</p>
</li>
<li>
<p>Terminate the RHT using the TIP termination function<a id="sthref601"></a>. Regardless of the type of RHT being accessed, the TIP terminate function should be called to clean up and terminate the conversation with the RHT. Conversations with persistent RHTs can be terminated from the gateway server before the RHT terminates, or the RHT might have already terminated. The TIP must perform its cleanup as well and this cleanup is only performed at the termination request of the client application.</p>
<p>The client application can request a normal or an aborted termination.</p>
<p>Refer to <a href="#i1007305">"Terminating the Conversation"</a> for more information.</p>
</li>
</ul>
<p class="subhead1"><a id="APPUG1303"></a><a id="sthref602"></a><a id="sthref603"></a>Multi-conversational remote host transaction client applications must:</p>
<ul>
<li>
<p>Declare RHT/TIP datatypes to be exchanged.<a id="sthref604"></a> All client applications must declare variables to be exchanged with the RHTs using TIPs. <a id="sthref605"></a>PL/SQL datatypes for such variables have already been defined in the TIP corresponding to each RHT, and the client application need only reference the TIP datatype in its declaration. Refer to <a href="#i1007085">"Declaring TIP Variables"</a> for more information. Also refer to the TIP content documentation file for the specific TIP/RHT for more information about the exact usage of these variables.</p>
</li>
<li>
<p>Initialize each RHT involved, using the TIP initializing function<a id="sthref606"></a>. A specific customized TIP exists for each RHT as defined in the PG DD. Client applications that control multiple RHTs are multi-conversational and must start each RHT and its associated conversation. This is done by calling each TIP initialization function as before; but multiple TIPs are initialized.</p>
<p>If a single RHT is designed to perform multiple services for one or more callers and if the client application is designed to use this RHT, the TIP corresponding to that RHT can be initialized multiple times by the client application.</p>
<p>The client application subsequently distinguishes from active RHTs under its control using:</p>
<ul>
<li>
<p>TIP schema <code>tipname.callname</code> when multiple TIP/RHTs are being controlled. By encoding the same TIP schema name on TIP user calls, the client application specifies to which RHT the call is being made.</p>
</li>
<li>
<p><code>tranuse</code> <code>IN OUT</code> parameter value when multiple instances of the same TIP/RHT are being controlled. This is the value returned on the TIP initialization function call and subsequently passed as an <code>IN</code> parameter on the user-defined TIP function calls. The returned <code>tranuse</code> value corresponds to that conversation connected to a given instance of an RHT. By supplying the same <code>tranuse</code> value on TIP user calls, the client application specifies to which RHT instance the given RHT call is being made.</p>
</li>
</ul>
<p>Client application logic must keep track of which RHTs have been started and which TIPs and <code>tranuse</code> values correspond to started RHTs.</p>
</li>
<li>
<p>Exchange data with each RHT, using the TIP user function(s), either once or repetitively<a id="sthref607"></a> if the RHT is one-shot or persistent. Client application logic must sequence the RHTs though their allowed steps in accordance with proper RHT operation, as does a user operating the RHTs interactively.</p>
<p>Client application logic must also perform any cross-RHT result analysis or data transfer that might be required. All TIPs execute in isolation from each other.</p>
<p>Output from one RHT intended as input to another RHT must be received in the client application as an <code>IN</code> or <code>IN OUT</code> parameter from the first RHT and sent as an <code>IN</code> or <code>IN OUT</code> parameter from the client application to the second RHT. All TIP-to-RHT function calls must be performed by the client application and data parameters exchanged must have been declared as variables by the client application. The TIPs provide both the required datatype definitions and the RHT function calls for the client application.</p>
<p>Refer to the TIP content documentation file for each specific TIP/RHT for the exact syntax of the TIP function calls and definitions of the parameter datatypes exchanged.</p>
</li>
<li>
<p>Terminate each initialized RHT<a id="sthref608"></a>, using the TIP termination function. To terminate an RHT, its corresponding TIP termination function must be called to terminate the RHT and its conversation and to initiate TIP cleanup. The RHT to be terminated is specified by its TIP schema name (the same schema as for its data exchange function calls) and the <code>tranuse</code> value when multiple instances of the same RHT are being terminated.</p>
<p>RHTs and their corresponding TIPs can be terminated in any sequence desired by the client application and do not have to be terminated in the same order in which they are initialized.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The specific syntax of the various TIP data exchange variables function calls is the same as was previously defined in the PG DD for the particular RHT and can be researched by examining the TIP content documentation file<a id="sthref609"></a><a id="sthref610"></a> (<code>tipname.doc</code>) or the TIP specification file produced when the TIP was generated. If a TIP has not yet been generated for the RHT being accessed, refer to <a href="tip.htm#g1011602">Chapter 3, "Creating a TIP"</a>, and <a href="#i1006919">"DATA Correspondence"</a>, <a href="#i1006970">"CALL Correspondence"</a>, and <a href="#i1007035">"TRANSACTION Correspondence"</a> for more information. It is preferable to define and generate the TIP first, however, so that the client application reference documentation is available to you when needed.</div>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1006907"></a>
<div id="APPUG980" class="sect1">
<h2 class="sect1"><span class="secnum">4.6</span> Ensuring TIP and Remote Transaction Program Correspondence<a id="sthref611"></a><a id="sthref612"></a></h2>
<p>A remote host transaction program and its related TIP with client application must correspond on <a id="sthref613"></a>two key requirements:</p>
<ul>
<li>
<p>Parameter datatype conversion, which results from the way in which transaction <code>DATA</code> is defined. Refer to <a href="apd.htm#g640607">Appendix D, "Datatype Conversions"</a> for a discussion of how PGAU-generated TIPs convert data based on the data definitions.</p>
</li>
<li>
<p>APPC send/receive synchronization, which results from the way in which transaction <code>CALL</code>s are defined</p>
</li>
</ul>
<p>These <code>DATA</code> and <code>CALL</code> definitions are then included by reference in a <code>TRANSACTION</code> definition.</p>
<a id="i1006919"></a>
<div id="APPUG981" class="sect2">
<h3 class="sect2"><span class="secnum">4.6.1</span> DATA Correspondence<a id="sthref614"></a><a id="sthref615"></a><a id="sthref616"></a></h3>
<p>Using data definitions programmed in the language of the remote host transaction, the <a id="sthref617"></a><a id="sthref618"></a>PGAU <code>DEFINE DATA</code> command stores in the <a id="sthref619"></a>PG DD the information needed for <a id="sthref620"></a><a id="sthref621"></a>PGAU <code>GENERATE</code> to create the TIP function logic to perform:</p>
<ul>
<li>
<p>all data conversion from PL/SQL <code>IN</code> parameters supplied by the receiving remote host transaction</p>
</li>
<li>
<p>all buffering into the format expected by the receiving remote host transaction</p>
</li>
<li>
<p>all data unbuffering from the format supplied by the sending remote host transaction</p>
</li>
<li>
<p>all data conversion to PL/SQL <code>OUT</code> parameters supplied by the sending remote host transaction</p>
</li>
</ul>
<p>PGAU determines the information needed to generate the conversion and buffering logic from the data definitions included in the remote host transaction program. PGAU <code>DEFINE DATA</code> reads this information from files, such as COBOL copy books, or in-stream from scripts and saves it in the PG DD for repeated use. The gateway Administrator needs to transfer these definition files from the remote host to the Oracle host where PGAU runs.</p>
<p>From the data definitions stored in the PG DD, PGAU <code>GENERATE</code> determines the remote host datatype and matches it to an appropriate <a id="sthref622"></a>PL/SQL datatype. It also determines data lengths and offsets within records and buffers and generates the needed PL/SQL logic into the TIP. Refer to the PGAU <a href="admin_util.htm#i1006776">"DEFINE DATA"</a> statement in <a href="admin_util.htm#g1029659">Chapter 2, "Procedural Gateway Administration Utility"</a> and <a href="apg.htm#i635215">"Sample PGAU DEFINE DATA Statements"</a> in <a href="apg.htm#g644868">Appendix F, "Administration Utility Samples"</a> for more information.</p>
<p>All data that are referenced as parameters by subsequent calls must first be defined using PGAU <code>DEFINE DATA</code>. Simple data items, such as single numbers or character strings, and complex multi-field data aggregates, such as records or structures, can be defined. PGAU automatically generates equivalent PL/SQL variables and records of fields or tables for the client application to reference in its calls to the generated TIP.</p>
<p>As discussed, a parameter might be a simple data item, such as an employee number, or a complex item, such as an employee record. PGAU <code>DEFINE DATA</code> automatically extracts the datatype information it needs from the input program data definition files.</p>
<p>In this example, <code>empno</code> and <code>emprec</code> are the arguments to be exchanged.</p>
<pre>
pgadb2i_main(trannum,empno,emprec)
</pre>
<p>A PGAU <code>DEFINE DATA</code> statement must therefore be issued for each of these parameters:</p>
<pre>
DEFINE DATA EMPNO
       PLSDNAME (EMPNO)
       USAGE (PASS)
       LANGUAGE (IBMVSCOBOLII)
       (
       01 EMP-NO PIC X(6).
       ); 

DEFINE DATA EMPREC
       PLSDNAME (DCLEMP)
       USAGE (PASS)
       LANGUAGE (IBMVSCOBOLII)
       INFILE("emp.cob");
</pre>
<p>Note that a definition is not required for the <code>trannum</code> argument. This is the APPC conversation identifier and does not require a definition in PGAU.</p>
</div>
<!-- class="sect2" -->
<a id="i1006970"></a>
<div id="APPUG982" class="sect2">
<h3 class="sect2"><span class="secnum">4.6.2</span> CALL Correspondence<a id="sthref623"></a><a id="sthref624"></a><a id="sthref625"></a><a id="sthref626"></a></h3>
<p>The requirement to synchronize <a id="sthref627"></a>APPC <code>SEND</code>s and <code>RECEIVE</code>s means that when the remote transaction program expects data parameters to be input, it issues APPC <code>RECEIVE</code>s to read the data parameters. Accordingly, the TIP must cause the gateway to issue APPC <code>SEND</code>s to write the data parameters to the remote transaction program. The TIP must also cause the gateway to issue APPC <code>RECEIVE</code>s when the remote transaction program issues APPC <code>SEND</code>s.</p>
<p>The PGAU <code>DEFINE CALL</code> statement specifies how the generated TIP is to be called by the client application and which data parameters are to be exchanged with the remote host transaction for that call. Each PGAU <code>DEFINE CALL</code> statement might specify the name of the TIP function, one or more data parameters, and the <code>IN/OUT</code> mode of each data parameter. Data parameters must have been previously defined with PGAU <code>DEFINE DATA</code> statements. Refer to <a href="admin_util.htm#i1006743">"DEFINE CALL"</a> in <a href="admin_util.htm#g1029659">Chapter 2, "Procedural Gateway Administration Utility"</a> and <a href="apg.htm#i634298">"Sample PGAU DEFINE CALL Statements"</a> in <a href="apg.htm#g644868">Appendix F, "Administration Utility Samples"</a> for more information.</p>
<p>PGAU <code>DEFINE CALL</code> processing stores the specified information in the PG DD for later use by PGAU <code>GENERATE</code>. PGAU <code>GENERATE</code> then creates the following in the TIP package specification:</p>
<ul>
<li>
<p>declarations of public PL/SQL functions for each <code>CALL</code> defined with PL/SQL parameters for each <code>DATA</code> definition specified on the <code>CALL</code></p>
</li>
<li>
<p>declarations of the public PL/SQL data parameters</p>
</li>
</ul>
<p>The client application calls the TIP public function as a PL/SQL function call, using the function name and parameter list specified in the PGAU <code>DEFINE CALL</code> statement. The client application might also declare, by reference, private variables of the same datatype as the TIP public data parameters to facilitate data passing and handling within the client application, thus sharing the declarations created by PGAU <code>GENERATE</code>.</p>
<p>In this example, the following PGAU <code>DEFINE CALL</code> statement must be issued to define the TIP public function:</p>
<pre>
DEFINE CALL DB2IMAIN
       PKGCALL (pgadb2i_main)
       PARMS ((empno IN),(emprec OUT));
</pre>
<a id="i1008771"></a>
<div id="APPUG983" class="sect3">
<h4 class="sect3"><span class="secnum">4.6.2.1</span> <a id="sthref628"></a>Flexible Call Sequence</h4>
<p><a id="sthref629"></a><a id="sthref630"></a>The number of data parameters exchanged between the TIP and the gateway on each call can vary at the user's discretion, as long as the remote transaction program's <code>SEND/RECEIVE</code> requests are satisfied. For example, the remote transaction program data exchange sequence might be:</p>
<pre>
APPC SEND    5 fields  (field1-field5)
APPC RECEIVE 1 fields  (field6)
APPC SEND    1 field   (field7)
APPC RECEIVE 3 fields  (field8 - field10)
</pre>
<p>The resulting TIP/application call sequence could be:</p>
<pre>
tip_call1(parm1 OUT,  &lt;-- APPC SEND field1 from remote TP
         parm2 OUT,  &lt;-- APPC SEND field2 from remote TP
         parm3 OUT); &lt;-- APPC SEND field3 from remote TP

tip_call2(parm4 OUT,  &lt;-- APPC SEND field4 from remote TP
         parm5 OUT); &lt;-- APPC SEND field5 from remote TP
tip_call3(parm6 IN OUT); --&gt; APPC RECEIVE field6 in remote TP
                         &lt;-- APPC SEND field7 from remote TP

tip_call4(parm8 IN,   --&gt; APPC RECEIVE field8 into remote TP
          parm9 IN,   --&gt; APPC RECEIVE field9 into remote TP
          parm10 IN); --&gt; APPC RECEIVE field10 into remote TP
</pre>
<p>To define these four public functions to the TIP, four PGAU <code>DEFINE CALL</code> statements must be issued, each specifying its unique public function name (<code>tip_callx</code>) and the data parameter list to be exchanged. Once a data item is defined using <code>DEFINE DATA</code>, it can be referenced in multiple calls in any mode (<code>IN</code>, <code>OUT</code>, or <code>IN OUT</code>). For example, <code>parm5</code> could be used a second time in place of <code>parm6</code>. This implies the same data is being exchanged in both instances, received into the TIP and application on <code>tip_call2</code> and returned, possibly updated, to the remote host in <code>tip_call4</code>.</p>
<p>Notice also that the remote transaction program's first five written fields are read by two separate TIP function calls, <code>tip_call1</code> and <code>tip_call2</code>. This could also have been equivalently accomplished with five TIP function calls of one <code>OUT</code> parameter each or a single TIP function call with five <code>OUT</code> parameters. Then the remote transaction program's first read field (<code>field6</code>) and subsequent written field (<code>field7</code>) correspond to a single TIP function call (<code>tip_call3</code>) with a single <code>IN OUT</code> parameter (<code>parm6</code>).</p>
<p>This use of a single <code>IN OUT</code> parameter implies that the remote transaction program's datatype for <code>field6</code> and <code>field7</code> are both the same and correspond to the conversion performed for the datatype of <code>parm6</code>. If <code>field6</code> and <code>field7</code> were of different datatypes, then they have to correspond to different PL/SQL parameters (for example, <code>parm6</code> <code>IN</code> and <code>parm7</code> <code>OUT</code>). They could still be exchanged as two parameters on a single TIP call or one parameter each on two TIP calls, however.</p>
<p>Lastly, the remote transaction program's remaining three <code>RECEIVE</code> fields are supplied by <code>tip_call4</code> parameters 8-10. They also could have been done with three TIP calls passing one parameter each or two TIP calls passing one parameter on one call and two parameters on the other, in either order. This flexibility permits the user to define the correspondence between the remote transaction program's operation and the TIP function calls in whatever manner best suits the user.</p>
</div>
<!-- class="sect3" -->
<div id="APPUG984" class="sect3"><a id="sthref631"></a>
<h4 class="sect3"><span class="secnum">4.6.2.2</span> <a id="sthref632"></a>Call Correspondence Order Restrictions</h4>
<p><a id="sthref633"></a>Each TIP public function first sends all <code>IN</code> parameters, before it receives any <code>OUT</code> parameters. Thus, a remote transaction program expecting to send one field and then receive one field must correspond to separate TIP calls.</p>
<p>For example:</p>
<pre>
tip_callO( parmO OUT); &lt;-- APPC SEND outfield from remote TP
</pre>
<p><code>PGAXFER</code> RPC checks first for parameters to send, but finds none and proceeds to receive parameters:</p>
<pre>
tip_callI( parmI IN);  --&gt; APPC RECEIVE infield to remote TP
</pre>
<p><code>PGAXFER</code> RPC processes parameters to send and then checks for parameters to receive, but finds none and completes; therefore, a single TIP public function with an <code>OUT</code> parameter followed by an <code>IN</code> parameter does not work, because the <code>IN</code> parameter is processed first--regardless of its position in the parameter list.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1007035"></a>
<div id="APPUG985" class="sect2">
<h3 class="sect2"><span class="secnum">4.6.3</span> TRANSACTION Correspondence<a id="sthref634"></a><a id="sthref635"></a><a id="sthref636"></a><a id="sthref637"></a></h3>
<p>The <a id="sthref638"></a>remote host transaction is defined with the PGAU <code>DEFINE TRANSACTION</code> statement with additional references to prior definitions of <code>CALL</code>s that the transaction supports.</p>
<p>You specify the <a id="sthref639"></a>remote host transaction attributes, such as:</p>
<ul>
<li>
<p>transaction ID or name</p>
</li>
<li>
<p>network address or location</p>
</li>
<li>
<p>system type (such as IBM370)</p>
</li>
<li>
<p>Oracle National Language of the remote host</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <a id="sthref640"></a>PL/SQL package name is specified when the transaction is defined; this is the name by which the TIP is referenced and which the public function calls to be included within the TIP. Each public function must have been previously defined with a PGAU <code>DEFINE CALL</code> statement, which has been stored in the PG DD. If you do not specify a package name (TIP name) in the <code>GENERATE</code> statement, the transaction name you specified will become the package name by default. In that case, the transaction name (<code><span class="codeinlineitalic">tname)</span></code> must be unique and must be in valid PL/SQL syntax within the database containing the PL/SQL packages.
<p>For more information, refer to <a href="admin_util.htm#i1006863">"DEFINE TRANSACTION"</a> in <a href="admin_util.htm#g1029659">Chapter 2, "Procedural Gateway Administration Utility"</a> and <a href="apg.htm#i634308">"Sample PGAU DEFINE TRANSACTION Statement"</a> in <a href="apg.htm#g644868">Appendix F, "Administration Utility Samples"</a>.</p>
</div>
</li>
</ul>
<p>In this example, the following <code>DEFINE TRANSACTION</code> statements are used to define a remote CICS transaction called <code>DB2I</code>:</p>
<pre>
DEFINE TRANSACTION DB2I
   CALL (   DB2IMAIN,
            DB2IDIAG   )
   SIDEPROFILE(CICSPROD)
   TPNAME(DB2I)
   LOGMODE(ORAPLU62)
   SYNCLEVEL(0)
   NLS_LANGUAGE("AMERICAN_AMERICA.WE8EBCDIC37C");
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007075"></a>
<div id="APPUG986" class="sect1">
<h2 class="sect1"><span class="secnum">4.7</span> Calling the TIP from the Client Application<a id="sthref641"></a><a id="sthref642"></a></h2>
<p>Once a TIP is created, a client application must be written to interface with the TIP. A client application that calls the TIP functions must include five logical sections:</p>
<ul>
<li>
<p>declaring TIP variables</p>
</li>
<li>
<p>initializing the conversation</p>
</li>
<li>
<p>exchanging data</p>
</li>
<li>
<p>terminating the conversation</p>
</li>
<li>
<p>error handling</p>
</li>
</ul>
<a id="i1007085"></a>
<div id="APPUG987" class="sect2">
<h3 class="sect2"><span class="secnum">4.7.1</span> Declaring TIP Variables<a id="sthref643"></a><a id="sthref644"></a></h3>
<p>The user declarations section of the <code><a id="sthref645"></a><a id="sthref646"></a>tipname.doc</code> file documents the required declarations.</p>
<p>When passing <a id="sthref647"></a>PL/SQL parameters on calls to TIP functions, the client application must use the exact same PL/SQL datatypes for TIP function arguments as are defined by the TIP in its specification section. Assume, for example, the following is in the TIP specification, or <code>tipname.doc:</code></p>
<pre>
FUNCTION <span class="italic">tip_call1</span>    <span class="italic">tranuse</span>,   IN      BINARY_INTEGER, 
                      <span class="italic">tip_var1   io_mode pls_type1,</span> 
                      <span class="italic">tip_record io_mode tran_rectype)</span> 
RETURN INTEGER;

TYPE  <span class="italic">tran_rectype</span> is RECORD
      <span class="italic">(rec_field1 pls_type1</span>,
      ...
      <span class="italic">rec_fieldN pls_typeN)</span>;
</pre>
<p><a href="#g1013935">Table 4-2</a> provides a description of the function declarations:</p>
<div id="APPUG1304" class="tblformal">
<p class="titleintable"><a id="sthref648"></a><a id="g1013935"></a>Table 4-2 Function Declarations</p>
<table class="cellalignment339" title="Function Declarations" summary="provides a description of the function declaration" dir="ltr">
<thead>
<tr class="cellalignment333">
<th class="cellalignment340" id="r1c1-t6">Item</th>
<th class="cellalignment340" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment333">
<td class="cellalignment341" id="r2c1-t6" headers="r1c1-t6">
<p><code><span class="codeinlineitalic">tip_call1</span></code></p>
</td>
<td class="cellalignment341" headers="r2c1-t6 r1c2-t6">
<p>The TIP function name as defined in the package specification.</p>
</td>
</tr>
<tr class="cellalignment333">
<td class="cellalignment341" id="r3c1-t6" headers="r1c1-t6">
<p><code><span class="codeinlineitalic">tranuse</span></code></p>
</td>
<td class="cellalignment341" headers="r3c1-t6 r1c2-t6">
<p>The remote transaction instance parameter returned from the TIP init function identifying the conversation on which this TIP call is to exchange data.</p>
</td>
</tr>
<tr class="cellalignment333">
<td class="cellalignment341" id="r4c1-t6" headers="r1c1-t6">
<p><code><span class="codeinlineitalic">tran_rectype</span></code></p>
</td>
<td class="cellalignment341" headers="r4c1-t6 r1c2-t6">
<p>The PL/SQL record datatype declared in the <code>tipname</code> TIP specification. This is the same value as in the TYPE <code><span class="codeinlineitalic">tran_rectype</span></code> <code>is RECORD</code> statement.</p>
</td>
</tr>
<tr class="cellalignment333">
<td class="cellalignment341" id="r5c1-t6" headers="r1c1-t6">
<p><code><span class="codeinlineitalic">pls_typeN</span></code></p>
</td>
<td class="cellalignment341" headers="r5c1-t6 r1c2-t6">
<p>Is a PL/SQL atomic datatype.</p>
</td>
</tr>
<tr class="cellalignment333">
<td class="cellalignment341" id="r6c1-t6" headers="r1c1-t6">
<p><code><span class="codeinlineitalic">rec_fieldN</span></code></p>
</td>
<td class="cellalignment341" headers="r6c1-t6 r1c2-t6">
<p>Is a PL/SQL record field corresponding to a remote transaction program record field.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>In the client application PL/SQL atomic datatypes should be defined as the exact same datatype of their corresponding arguments in the TIP function definition. The following should be coded in the client application before the <code>BEGIN</code> command:</p>
<pre>
<span class="italic">appl_var  pls_type1</span>;    /* declare appl variable for ....  */
</pre>
<p>TIP datatypes need not be redefined. They must be declared <code>locally</code> within the client application, appearing in the client application before the <code>BEGIN</code>:</p>
<pre>
<span class="italic">appl_record tipname.tran_rectype;</span>  /* declare appl record */
</pre>
<p><a href="#g1013965">Table 4-3</a> describes the command line arguments:</p>
<div id="APPUG1305" class="tblformal">
<p class="titleintable"><a id="sthref649"></a><a id="g1013965"></a>Table 4-3 Command Line Arguments</p>
<table class="cellalignment339" title="Command Line Arguments " summary="describes the command line arguments" dir="ltr">
<thead>
<tr class="cellalignment333">
<th class="cellalignment340" id="r1c1-t7">Item</th>
<th class="cellalignment340" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment333">
<td class="cellalignment341" id="r2c1-t7" headers="r1c1-t7">
<p><code><span class="codeinlineitalic">tip_call1</span></code></p>
</td>
<td class="cellalignment341" headers="r2c1-t7 r1c2-t7">
<p>The TIP function name as defined in the package specification.</p>
</td>
</tr>
<tr class="cellalignment333">
<td class="cellalignment341" id="r3c1-t7" headers="r1c1-t7">
<p><code><span class="codeinlineitalic">tranuse</span></code></p>
</td>
<td class="cellalignment341" headers="r3c1-t7 r1c2-t7">
<p>The remote transaction instance parameter returned from the TIP init function identifying the conversation on which this TIP call is to exchange data.</p>
</td>
</tr>
<tr class="cellalignment333">
<td class="cellalignment341" id="r4c1-t7" headers="r1c1-t7">
<p><code><span class="codeinlineitalic">tran_rectype</span></code></p>
</td>
<td class="cellalignment341" headers="r4c1-t7 r1c2-t7">
<p>The PL/SQL record datatype declared in the <code>tipname</code> TIP specification. This is the same value as in the <code>TYPE</code> <code><span class="codeinlineitalic">tran_rectype</span></code> <code>is RECORD</code> statement.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>Refer to the <code><span class="codeinlineitalic">tipname</span></code><code>.doc</code> content file for a complete description of the user declarations you can reference.</p>
<p>The client application calls the TIP public function as if it were any local PL/SQL function:</p>
<pre>
rc = tip_call1( tranuse,
                appl_var,
                appl_record);
</pre>
<p>In the CICS-DB2 inquiry example, the PL/SQL driver <code>pgadb2id.sql</code>, which is located in <code>%ORACLE_HOME%\dg4appc\demo\CICS</code> directory for Microsoft Windows and <code>$ORACLE_HOME/dg4appc/demo/CICS</code> directory for UNIX based systems, is the client application and includes the following declaration:</p>
<pre>
...
...
CREATE or REPLACE PROCEDURE db2idriv(empno IN CHAR) IS
tranuse INTEGER :=0               /* transaction usage number     */
DCLEMP PGADB2I.DCLEMP_typ;        /* DB2 EMP row definition       */
DB2 PGADB2I.DB2_typ;              /* DB2 diagnostic information   */
rc INTEGER :=0                    /* PGA RPC return codes         */
line VARCHAR2(132);               /* work buffer for output       */
term INTEGER :=0;                 /* 1 if pgadb2i_term called     */
...
...
</pre></div>
<!-- class="sect2" -->
<a id="i1007176"></a>
<div id="APPUG988" class="sect2">
<h3 class="sect2"><span class="secnum">4.7.2</span> Initializing the Conversation</h3>
<p>The call to <a id="sthref650"></a>initialize the conversation serves several purposes:</p>
<ul>
<li>
<p>To cause the PL/SQL package, the TIP, to be loaded and to perform the initialization logic programmed in the TIP initialization section.</p>
</li>
<li>
<p>To cause the TIP init function to call the <code>PGAINIT</code> remote procedural call (RPC), which in turn establishes communication with the remote transaction program (RTP), and returns a transaction instance number to the application.</p>
</li>
</ul>
<p>Optionally, calls to initialize the conversation can be used to:</p>
<ul>
<li>
<p>Override default RHT/OLTP identification, network address attributes, and conversation security user&nbsp;ID and password.</p>
</li>
<li>
<p>Specify what diagnostic <a id="sthref651"></a>traces the TIP is to produce. Refer to <a href="pro_det.htm#g1026955">Chapter 8, "Troubleshooting"</a> for more information about diagnostic traces.</p>
</li>
</ul>
<p>PGAU-generated TIPs provide four different initialization functions that client applications can call. These are overloaded functions which all have the same name, but vary in the types of parameters passed.</p>
<p>Three initialization parameters are passed:</p>
<ul>
<li>
<p>The transaction instance number for RHT conversation identification. The <code>tranuse</code> parameter is required on all TIP initializations.</p>
</li>
<li>
<p>TIP diagnostic flags for TIP runtime diagnostic controls. The <code>tipdiag</code> parameter is optional. Refer to <a href="pro_det.htm#g1026955">Chapter 8, "Troubleshooting"</a> for a discussion of TIP diagnostics.</p>
</li>
<li>
<p>TIP default overrides for overriding OLTP and network attributes. The <code>override</code> parameter is optional.</p>
</li>
</ul>
<p>The following four functions are shown as they might appear in the TIP Content documentation file. Examples of client application use are provided later.</p>
<pre>
TYPE override_Typ IS RECORD (
        tranname  VARCHAR2(255),  /* Transaction Program     */
        transync  BINARY_INTEGER, /* RESERVED                */
        trannls   VARCHAR2(50),   /* RESERVED                */
        oltpname  VARCHAR2(255),  /* Logical Unit            */
        oltpmode  VARCHAR2(255),  /* LOG Mode Entry          */
        netaddr   VARCHAR2(255),  /* Side Profile            */
        oltpuser  VARCHAR2(8),    /* userid for OLTP access  */
        oltppass  VARCHAR2(8));   /* password for OLTP access*/

FUNCTION pgadb2i_init(                /* init standard */
           tranuse IN OUT BINARY_INTEGER)
           RETURN INTEGER;

FUNCTION pgadb2i_init(                /* init override */
           tranuse IN OUT BINARY_INTEGER,
           override IN override_Typ)
           RETURN INTEGER;

FUNCTION pgadb2i_init(               /* init diagnostic */
           tranuse IN OUT BNARY_INTEGER,
           tipdiag IN CHAR)
           RETURN INTEGER;

FUNCTION pgadb2i_init(                /* init over-diag */
           tranuse IN OUT BINARY_INTEGER,
           override IN override_Typ,
           tipdiag IN CHAR)
           RETURN INTEGER;
</pre>
<div id="APPUG989" class="sect3"><a id="sthref652"></a>
<h4 class="sect3"><span class="secnum">4.7.2.1</span> <a id="sthref653"></a>Transaction Instance Parameter</h4>
<p>This transaction instance number (shown in examples as <code>tranuse</code>) must be passed to subsequent TIP exchange and terminate functions. It identifies to the gateway on which APPC conversation--and therefore which iteration of a remote transaction program--the data is to be transmitted or communication terminated.</p>
<p>A single client application might control multiple instances of the same remote transaction program or multiple different remote transaction programs, all concurrently. The transaction instance number is the TIP's mechanism for routing the client application call through the gateway to the intended remote transaction program.</p>
<p>It is the responsibility of the client application to save the transaction instance number of each active transaction and pass the correct one to each TIP function called for that transaction.</p>
<p>The client application calls the TIP initialization function as if it were any local PL/SQL function. For example:</p>
<pre>
...
...
tranuse INTEGER := 0;/* transaction usage number*/
...
...
BEGIN
 rc := pgadb2i.pgadb2i_init(tranuse);
...
...
</pre></div>
<!-- class="sect3" -->
<a id="i1007242"></a>
<div id="APPUG990" class="sect3">
<h4 class="sect3"><span class="secnum">4.7.2.2</span> Overriding TIP Initializations<a id="sthref654"></a><a id="sthref655"></a></h4>
<p>Note that in the preceding example the client application did not specify any remote transaction program name, network connection, or security information. The TIP has such information internally coded as defaults and the client application simply calls the appropriate TIP for the chosen remote transaction program. The client application can, however, optionally override some TIP defaults and supply security information.</p>
<p>You do not need to change any client applications that do not require overrides.</p>
<p><a id="i1007247"></a>When the remote host transaction was defined in the PG DD, the <code>DEFINE TRANSACTION</code> statement specified certain default OLTP and network identification attributes which can be overridden:<a id="sthref656"></a><a id="sthref657"></a><a id="sthref658"></a><a id="sthref659"></a></p>
<ul>
<li>
<p><code><span class="codeinlineitalic">TPname</span></code></p>
</li>
<li>
<p><code><span class="codeinlineitalic">LUname</span></code></p>
</li>
<li>
<p><code>LOGMODE</code></p>
</li>
<li>
<p><code><span class="codeinlineitalic">Side Profile</span></code></p>
</li>
</ul>
<p>Refer to <a href="admin_util.htm#i1006863">"DEFINE TRANSACTION"</a> in <a href="admin_util.htm#g1029659">Chapter 2, "Procedural Gateway Administration Utility"</a> for more information about the <code>DEFINE TRANSACTION</code> statement.</p>
<p>These PG DD-defined transaction attributes are generated into TIPs as defaults and can be overridden at <a id="sthref660"></a>TIP initialization time. This facilitates the use of one TIP, which can be used with a test transaction or system, and can later be used with a production transaction or system, without having to regenerate the TIP.</p>
<p>The <code>override_Typ</code> record datatype describes the various transaction attributes that can be overridden by the client application. The following o<a id="sthref661"></a><a id="sthref662"></a>verrides are currently supported:</p>
<ul>
<li>
<p><code>tranname</code> can be set to override the value that was specified by the <code>TPNAME</code> parameter of the <code>DEFINE TRANSACTION</code> statement</p>
</li>
<li>
<p><code>oltpname</code> can be set to override the value that was specified by the <code>LUNAME</code> parameter of the <code>DEFINE TRANSACTION</code> statement</p>
</li>
<li>
<p><code>oltpmode</code> can be set to override the value that was specified by the <code>LOGMODE</code> parameter of the <code>DEFINE TRANSACTION</code> statement</p>
</li>
<li>
<p><code>netaddr</code> can be set to override the value that was specified by the <code>SIDEPROFILE</code> parameter of the <code>DEFINE TRANSACTION</code> statement</p>
</li>
</ul>
<p>In addition to the transaction attributes defined in the <a id="sthref663"></a>PG DD, there are two security-related parameters, conversation security user&nbsp;ID and conversation security password, that can be overridden at TIP initialization time. The values for these parameters normally come from either the database link used to access the gateway or the Oracle database session. There are cases when the Oracle database user&nbsp;ID is not sufficient for accessing the OLTP system. The user&nbsp;ID and password overrides provide a way to specify those parameters to the OLTP system.</p>
<p>The following overrides are currently supported:</p>
<ul>
<li>
<p><code>oltpuser</code> can be set to override the user&nbsp;ID used to initialize the conversation with the OLTP</p>
</li>
<li>
<p><code>oltppass</code> can be set to override the password used to initialize the conversation with the OLTP</p>
</li>
</ul>
<p>The security overrides have an effect only if <code>PGA_SECURITY_TYPE=PROGRAM</code> is specified in the gateway initialization file, and the OLTP system is configured to accept a user&nbsp;ID and password on incoming conversation requests.</p>
<p>The <code>transync</code> (APPC <code>SYNCLEVEL</code>) and <code>trannls</code> (Globalization Support character set) are defined in the override record datatype, but are reserved for future use. The RHT <code>SYNCLEVEL</code> and Globalization Support name cannot be overridden.</p>
<p>The client application might override the default attributes at TIP initialization for the following reasons:</p>
<ul>
<li>
<p>to start a different version of the RHT (such as production instead of test)</p>
</li>
<li>
<p>to change the location of the OLTP containing the RHT (if the OLTP was moved due to migration or a switch to backup configuration)</p>
</li>
</ul>
<p>Client applications requiring overrides can use any combination of override and initialization parameters and might alter the combination at any time without regenerating the TIP or affecting applications that do not override parameters.</p>
<p>To override the TIP defaults, an additional client application record variable must be declared as <code>override_Typ</code> datatype, values must be assigned to the override subfields, and the override record variable must be passed on the TIP initialization call from the client application.</p>
<p>For example:</p>
<pre>
   ...
   ...
   my_overrides pgadb2i.override_Typ;   -- declaration
   ...
   ...
   my_overrides.oltpname := 'CICSPROD'; -- swap to production CICS
   my_overrides.tranname := 'TNEW';     -- new transaction name

BEGIN
   rc := pgadb2i.pgadb2i_init(tranuse,my_overrides); -- init
   ...
   ...
</pre>
<p>Within the TIP, override attributes are checked for syntax problems and passed to the gateway server.</p>
</div>
<!-- class="sect3" -->
<div id="APPUG991" class="sect3"><a id="sthref664"></a>
<h4 class="sect3"><span class="secnum">4.7.2.3</span> Security Considerations</h4>
<p>The <a id="sthref665"></a><a id="sthref666"></a>security requirements of the default and overridden OLTPs must be the same because the same gateway server is used in either conversation, as dictated by the database link names in the PGA RPC calls. The gateway server startup security mode is set at gateway server initialization time and passed unchanged to the OLTP at TIP or conversation initialization time.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007855"></a>
<div id="APPUG992" class="sect1">
<h2 class="sect1"><span class="secnum">4.8</span> Exchanging Data<a id="sthref667"></a></h2>
<p>The client application should pass the transaction instance number, returned from a previous <code>tip_init</code> call, to identify which remote transaction program is affected and to identify any client application data parameters to be exchanged with the remote transaction program.</p>
<p>In this CICS-DB2 inquiry example, we pass an employee number and receive an employee record back:</p>
<pre>
rc = pgadb2i.pgadb2i_main(tranuse, /* transfer data         */
                           empno,   /* employee number       */
                           DCLEMP); /* return employee record*/
</pre>
<a id="i1007305"></a>
<div id="APPUG993" class="sect2">
<h3 class="sect2"><span class="secnum">4.8.1</span> <a id="sthref668"></a><a id="sthref669"></a><a id="sthref670"></a>Terminating the Conversation</h3>
<p>The client application calls the TIP termination function as if it were any local PL/SQL function. For example:</p>
<pre>
...
...
term := 1;    /* indicate term called* */
 rc := pgadb2i.pgadb2i_term(tranuse,0); /* terminate normally  */
...
...
</pre>
<p>After a transaction instance number has been passed on a TIP terminate call to terminate the transaction, or after the remote transaction program has abended, that particular transaction instance number may be forgotten.</p>
</div>
<!-- class="sect2" -->
<div id="APPUG994" class="sect2"><a id="sthref671"></a>
<h3 class="sect2"><span class="secnum">4.8.2</span> <a id="sthref672"></a><a id="sthref673"></a>Error Handling</h3>
<p>The client application should include an exception handler that can clean up any active APPC conversations before the client application terminates. The sample client application provided in <code><a id="sthref674"></a><a id="sthref675"></a>pgadb2id.sql</code> contains an example of exception handling.</p>
<p>Gateway exceptions are reported in the range PGA-20900 to PGA-20999. When an exception occurs, the TIP termination function should be called for any active conversations that have been started by prior calls to the TIP initialization function.</p>
<p>For example:</p>
<pre>
EXCEPTION
 WHEN OTHERS THEN
  IF term = 0 THEN         /* terminate function not called yet */
   rc := pgadb2i.pgadb2i_term(tranuse,1); /*terminate abnormally*/
  END IF;
 RAISE;
...
...
</pre>
<p>The remote transaction should also include provisions for error handling and debugging, such as writing debugging information to the CICS temporary storage queue area. Refer to the <a class="olink LNPLS" href="../../appdev.112/e25519/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for a discussion of how to intercept and handle Oracle exceptions.</p>
</div>
<!-- class="sect2" -->
<div id="APPUG995" class="sect2"><a id="sthref676"></a>
<h3 class="sect2"><span class="secnum">4.8.3</span> <a id="sthref677"></a>Granting Execute Authority</h3>
<p>The TIP is a standard <a id="sthref678"></a>PL/SQL package and execute authority must be granted to users who call the TIP from their client application. In this example, we grant execute on the <code>PGADB2I</code> package to user <code>SCOTT</code>:</p>
<pre>
GRANT EXECUTE ON PGADB2I TO SCOTT
</pre>
<p>Refer to the <a class="olink ADMIN" href="../../server.112/e25494/toc.htm"><span class="italic">Oracle Database Administrator's Guide</span></a> for further information.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007756"></a>
<div id="APPUG996" class="sect1">
<h2 class="sect1"><span class="secnum">4.9</span> Executing the Application<a id="sthref679"></a><a id="sthref680"></a></h2>
<p>Before executing the client application, ensure that a connection to the host is established and that the receiving partner is available. In this example we use PL/SQL driver <code>DB2IDRIV</code> to execute the CICS-DB2 inquiry. To execute this client application, enter from SQL*Plus:</p>
<pre>
set serveroutput on
execute DB2IDRIV(<span class="italic">'nnnnnn'</span><span class="codeinlineitalic">)</span>;
</pre></div>
<!-- class="sect1" -->
<a id="i1007346"></a>
<div id="APPUG997" class="sect1">
<h2 class="sect1"><span class="secnum">4.10</span> APPC Conversation Sharing<a id="sthref681"></a></h2>
<p>Multiple TIPs can share the same APPC conversation with one or more <a id="sthref682"></a>Remote Host Transactions (RHTs) which are also sharing that same conversation. Two benefits derive from this feature:</p>
<ul>
<li>
<p>Existing RHTs which rely upon passing control of a conversation are supported by Oracle Database Gateway for APPC.</p>
</li>
<li>
<p>TIPs otherwise too large for PL/SQL compilation can be separated into multiple smaller TIPs, each with fewer user-defined functions, providing the client application with the same set of function calls and data definitions without any change to the RHT.</p>
</li>
</ul>
<div id="APPUG998" class="sect2"><a id="sthref683"></a>
<h3 class="sect2"><span class="secnum">4.10.1</span> APPC Conversation Sharing Concepts<a id="sthref684"></a><a id="sthref685"></a></h3>
<p>Mainframe OLTPs, such as IMS, allow transactions to share a single APPC conversation by passing it when the transaction calls another transaction. RHTs are defined to PGAU as single transactions with calls, inputs and outputs for which PGAU generates a single TIP with initialization, transfer and termination functions corresponding to that specific RHT.</p>
<p>Logic generated into every TIP allows that TIP either:</p>
<ul>
<li>
<p>to initiate a new conversation when its init function is called, or</p>
</li>
<li>
<p>to transfer data on an existing conversation when its user-defined functions are called, or</p>
</li>
<li>
<p>to terminate an existing conversation when its "term" function is called.</p>
</li>
</ul>
<p>An APPC conversation is treated as a resource shared and managed by multiple TIPs. There is no requirement for any TIP to be the sole user of an APPC conversation.</p>
<p>Any <a id="sthref686"></a>TIP generated at 3.4.0 or later can perform any of the following combinations of service:</p>
<ul>
<li>
<p>initiate</p>
</li>
<li>
<p>initiate and transfer</p>
</li>
<li>
<p>initiate, transfer, and terminate (standard operation)</p>
</li>
<li>
<p>transfer</p>
</li>
<li>
<p>transfer and terminate</p>
</li>
<li>
<p>terminate</p>
</li>
<li>
<p>initiate and terminate (assumes other TIPs perform transfer)</p>
</li>
</ul>
<p>A single APPC conversation can be shared in the following ways:</p>
<ul>
<li>
<p>from one TIP to multiple RHTs</p>
</li>
<li>
<p>from multiple TIPs to one RHT</p>
</li>
<li>
<p>from multiple TIPs to multiple RHTs</p>
</li>
</ul>
<p>Without APPC conversation sharing, a single TIP must be defined which contains all functions and data for all RHTs which a client application might need to call. Creating TIPs with a superset of RHTs often causes such TIPs to be too large for PL/SQL to compile.</p>
<p>Conversely, with APPC conversation sharing, each RHT (or even each RHT data exchange for those RHTs which perform multiple, different data exchange operations) can be defined in a single TIP which is smaller and less likely to exceed PL/SQL compilation limits.</p>
</div>
<!-- class="sect2" -->
<div id="APPUG999" class="sect2"><a id="sthref687"></a>
<h3 class="sect2"><span class="secnum">4.10.2</span> APPC Conversation Sharing Usage<a id="sthref688"></a></h3>
<p>APPC conversation sharing is automatically available in every TIP generated at 3.4.0 or later. No TIPs generated before 3.4.0 can participate in APPC conversation sharing. TIPs generated before 3.4.0 must be regenerated using PGAU 3.4.0. or later to participate in APPC conversation sharing. PGAU is upward compatible and regeneration should be transparent, provided only the regenerated TIP body (<code><span class="codeinlineitalic">tipname</span></code><code>.pkb</code>) is recompiled. If the TIP specification is also recompiled, the client application needs recompilation as well. Refer to <a href="apf.htm#g638154">Appendix E, "Tip Internals"</a> for more detailed information.</p>
<p>Definition and generation of TIPs is accomplished as previously discussed in Chapters 1, 2, and 3. No additional options or parameters need be specified.</p>
<p><a id="sthref689"></a>Run-time use of APPC conversation sharing is under the control of the client application. It is accomplished simply by calling the init function of one of the TIPs that share a conversation and passing the <code>tranuse</code> value returned to the other TIP functions as each is called in its desired order. Any TIP init function can be used, provided that all TIPs were defined with the same <code>DEFINE TRANSACTION TPNAME</code> or <code>SIDEPROFILE</code> value. The <code>TPNAME</code> or <code>SIDEPROFILE</code> value specifies which RHT to initialize.</p>
<p>When the init function of an APPC conversation sharing-capable TIP is called to initialize a conversation, the <code>tranuse</code> value returned indicates conversation sharing is enabled. By passing that same <code>tranuse</code> value when calling functions in other TIPs, those other TIPs perform their transfers on the same conversation already initialized, provided that all TIPs involved were generated at Version 3.4.0 or later.</p>
</div>
<!-- class="sect2" -->
<div id="APPUG1000" class="sect2"><a id="sthref690"></a>
<h3 class="sect2"><span class="secnum">4.10.3</span> APPC Conversation Sharing TIP Compatibility<a id="sthref691"></a><a id="sthref692"></a></h3>
<p>TIPs generated at 3.4.0 or later of the <a id="sthref693"></a>database gateway use and expect different values for <code>tranuse</code> than do pre-3.4.0 TIPs. If a pre-3.4.0 TIP is used to initialize a conversation and its <code>tranuse</code> value is passed to a 3.4.0 or later generated TIP, the following exception is raised:</p>
<pre>
ORA-20704 PGA_TIP: tranuse value cannot be shared
</pre>
<p>Pre-3.4.0 generated TIPs do not detect the different <code>tranuse</code> value for shared conversations, however, and this can result in unpredictable errors.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
All TIPs called in a shared conversation must have been generated at 3.4.0 or later.
<p>No TIPs generated before 3.4.0 can participate in APPC conversation sharing.</p>
</div>
<p>The <code>tranuse</code> values are incompatible between pre-3.4.0 and 3.4.0 or later releases. This should not pose a problem for you for the following reason: before 3.4.0, all RHT functions defined in a TIP had to be called through that TIPs functions, and the init function of that same TIP had to be called first to initialize the conversation. The <code>tranuse</code> value was only valid for the TIP which initialized it. Thus, unless you make programming changes, it is not possible for an existing application to accidentally mix <code>tranuse</code> values.</p>
<p>Pre-3.4.0 TIPs and client applications can continue to be used without change and old client applications can call new 3.4.0 or later TIPs without change. This is made possible when an old TIP body is regenerated and compiled; the TIP now becomes capable of APPC conversation sharing, even though the old client application has not changed.</p>
<p>None of the functions of a pre-3.4.0 TIP can share an APPC conversation. However, once a TIP is regenerated at 3.4.0 or later, any of its functions can share APPC conversations.</p>
</div>
<!-- class="sect2" -->
<div id="APPUG1001" class="sect2"><a id="sthref694"></a>
<h3 class="sect2"><span class="secnum">4.10.4</span> APPC Conversation Sharing for TIPs That Are Too Large <a id="sthref695"></a><a id="sthref696"></a></h3>
<p><a id="sthref697"></a>You can use conversation sharing to circumvent a TIP that is too large to compile. This is identified by '<code>PLS-00123 - package too large to compile</code>', or some other problem symptom such as PL/SQL compilation hanging. In this case you must choose which function calls to remove from the former TIP and define into new TIPs.</p>
<p>Specifically, you must decide which <a id="sthref698"></a><a id="sthref699"></a>PGAU <code>DEFINE CALL</code> statements and their related <a id="sthref700"></a><a id="sthref701"></a><code>DEFINE DATA</code> statements should be moved from the old PGAU control file (<code>.ctl</code>) into one or more new PGAU control files. In addition, you must decide which P<a id="sthref702"></a><a id="sthref703"></a>GAU <code>DEFINE TRANSACTION</code> statements should be included in each new PGAU control file defining each new TIP.</p>
<p>You must consider several PGAU statements; refer to <a href="#g1013981">Table 4-4</a> for a list of the PGAU statements and their descriptions:</p>
<div id="APPUG1306" class="tblformal">
<p class="titleintable"><a id="sthref704"></a><a id="g1013981"></a>Table 4-4 PGAU Statements</p>
<table class="cellalignment339" title="PGAU Statements" summary="lists the PGAU statements and their descriptions" dir="ltr">
<thead>
<tr class="cellalignment333">
<th class="cellalignment340" id="r1c1-t9">Statement</th>
<th class="cellalignment340" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment333">
<td class="cellalignment341" id="r2c1-t9" headers="r1c1-t9">
<p><code>DEFINE DATA</code> statements</p>
</td>
<td class="cellalignment341" headers="r2c1-t9 r1c2-t9">
<p>Must be unique. They can be shared by all affected PGAU control files, provided they are defined to the Procedural Gateway Data Dictionary (PG DD) before being referenced by <code>DEFINE CALL</code> statements. No changes are needed to these statements.</p>
</td>
</tr>
<tr class="cellalignment333">
<td class="cellalignment341" id="r3c1-t9" headers="r1c1-t9">
<p><code>DEFINE CALL</code> statements</p>
</td>
<td class="cellalignment341" headers="r3c1-t9 r1c2-t9">
<p>Must be unique. They need only be referenced by the new <code>DEFINE TRANSACTION</code> statement of the TIP in which they are included, provided they are defined to the PG DD before being referenced by a <code>DEFINE TRANSACTION</code> statement. The <code>DEFINE CALL</code> statements can optionally be moved to the new PGAU control file of the TIP in which they are included.</p>
</td>
</tr>
<tr class="cellalignment333">
<td class="cellalignment341" id="r4c1-t9" headers="r1c1-t9">
<p><code>DEFINE TRANSACTION</code> statements</p>
</td>
<td class="cellalignment341" headers="r4c1-t9 r1c2-t9">
<p>Specified for each new TIP desired and will reference those call definitions moved from the former large TIP to the new small TIPs. No transaction attributes will change. This allows any new TIP to perform the same initialization or termination with the same RHT as the former large TIP. The old <code>DEFINE TRANSACTION</code> statement (of the former large TIP) should now exclude any call definitions which are being moved to new small TIPs.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<div id="APPUG1002" class="sect2"><a id="sthref705"></a>
<h3 class="sect2"><span class="secnum">4.10.5</span> APPC Conversation Sharing Example<a id="sthref706"></a><a id="sthref707"></a></h3>
<p>Assume the existence of RHTs <code>A</code>, <code>B</code> and <code>C</code>, and that RHT <code>A</code> performs a menu selection and calls RHT <code>B</code> for a query function or RHT <code>C</code> for an update followed by a select function.</p>
<p>You could define the following <code>DATA</code> and <code>CALL</code>s:</p>
<ul>
<li>
<p><code>DEFINE DATA</code> <code><span class="codeinlineitalic">choice ...</span></code></p>
</li>
<li>
<p><code>DEFINE DATA</code> <code><span class="codeinlineitalic">input ...</span></code></p>
</li>
<li>
<p><code>DEFINE DATA</code> <code><span class="codeinlineitalic">answer ...</span></code></p>
</li>
<li>
<p><code>DEFINE DATA</code> <code><span class="codeinlineitalic">record ...</span></code></p>
</li>
<li>
<p><code>DEFINE CALL menu_A callname(pick) parms(choice in);</code></p>
</li>
<li>
<p><code>DEFINE CALL query_B callname(query) parms((input in),</code></p>
</li>
</ul>
<p><code>(answer out));</code></p>
<ul>
<li>
<p><code>DEFINE CALL update_C callname(update) parms(record in);</code></p>
</li>
<li>
<p><code>DEFINE CALL select_C callname(select) parms(record out);</code></p>
</li>
</ul>
<p>The following example TIPs could be defined:</p>
<p class="subhead1"><a id="APPUG1307"></a>Example 1</p>
<p>This example does not use APPC conversation sharing, but is a valid TIP definition created before release 3.4.0, combining the functions of RHTs <code>A</code>, <code>B</code> and <code>C</code>.</p>
<pre>
DEFINE TRANSACTION rhtABC calls(menu_A, 
                                query_B, 
                                update_C, 
                                select_C) 
                          tpname(RHTA);   
</pre>
<p>This TIP includes all data definitions and calls, and might be too large to compile. This TIP does not use APPC conversation sharing as there is only the one TIP, <code>rhtABC</code>. The RHTs do, however, perform their normal sharing of the conversation at the remote host. If the TIP was small enough to compile, the client application calls TIP functions as follows:</p>
<pre>
rc := rhtABC.rhtABC_init(tranuse); 
rc := rhtABC.pick(tranuse, choice); 
rc := rhtABC.query(tranuse, input, answer); 
rc := rhtABC.update(tranuse, record); 
rc := rhtABC.select(tranuse, record); 
rc := rhtABC.rhtABC_term(tranuse); 
</pre>
<p class="subhead1"><a id="APPUG1308"></a>Example 2</p>
<p>This example demonstrates defining a set of TIPs with APPC conversation sharing, separating the functions of RHTs <code>A</code>, <code>B</code> and <code>C</code> into three TIPs:</p>
<pre>
DEFINE TRANSACTION rhtA calls(menu_A)   tpname(RHTA); 
DEFINE TRANSACTION rhtB calls(query_B)  tpname(RHTA); 
DEFINE TRANSACTION rhtC calls(update_C, 
                              select_C) tpname(RHTA); 
</pre>
<p>Each TIP includes only the call and data it requires, and each TIP automatically performs APPC conversation sharing. The client application calls these functions as follows:</p>
<pre>
rc := rhtA.rhtA_init(tranuse); 
rc := rhtA.pick(tranuse, choice); 
rc := rhtB.query(tranuse, input, answer); 
rc := rhtC.update(tranuse, record); 
rc := rhtC.select(tranuse, record); 
rc := rhtB.rhtB_term(tranuse); 
</pre>
<p>The only client application difference between the two examples is in the schema qualifier on each of the TIP calls. This is because the function being called is in a different TIP which has a different package name in the database.</p>
<p>Only new <code>DEFINE TRANSACTION</code> statements were needed to make use of APPC conversation sharing. The <code>CALL</code> and <code>DATA</code> definitions were used as-is. This means the old TIP <code>rhtABC</code> is still defined as it was and might still be too large to compile.</p>
<p class="subhead1"><a id="APPUG1309"></a>Example 3</p>
<p>If you performed Sample 2 but you still believe that the TIP may be too large to compile, try this:</p>
<pre>
DEFINE TRANSACTION rhtABC calls(menu_A)   tpname(RHTA); 
DEFINE TRANSACTION rhtB   calls(query_B)  tpname(RHTA); 
DEFINE TRANSACTION rhtCU  calls(update_C) tpname(RHTA); 
DEFINE TRANSACTION rhtCS  calls(select_C) tpname(RHTA); 
</pre>
<p>TIP <code>rhtABC</code> has had three functions removed so it is now smaller and more likely to compile. TIP <code>rhtB</code> has one function and TIP <code>rhtC</code> has been separated into two TIPs even though the corresponding host functions remain in a single RHT.</p>
<p>The client application calls these functions as follows:</p>
<pre>
rc := rhtB.rhtB_init(tranuse); 
rc := rhtABC.pick(tranuse, choice); 
rc := rhtB.query(tranuse, input); 
rc := rhtCU.update(tranuse, record); 
rc := rhtCS.select(tranuse, record); 
rc := rhtABC.rhtABC_term(tranuse); 
</pre>
<p>A different TIP is used for initialization, illustrating that all TIPs contain the init and term functions, and because the <code>DEFINE TRANSACTION</code> statements all specified the same <code>tpname(RHTA)</code>, the same remote host transaction is always called for initialization.</p>
</div>
<!-- class="sect2" -->
<div id="APPUG1003" class="sect2"><a id="sthref708"></a>
<h3 class="sect2"><span class="secnum">4.10.6</span> APPC Conversation Sharing Overrides and Diagnostics<a id="sthref709"></a></h3>
<p><a id="sthref710"></a>TIP default override parameters are processed in the TIP init function which was called to perform initialization. Once the APPC conversation is established, no further sharing of overriding parameters is necessary. You need do nothing more than pass the overrides to the TIP init function.</p>
<p><a id="sthref711"></a>TIP diagnostic parameters are shared among all TIPs sharing a given conversation. In effect, requesting diagnostics of the TIP performing initialization causes the same diagnostics to be requested of all TIPs sharing the conversation. Requesting diagnostics from only one TIP of several sharing a conversation is not possible. The application designer or user need only pass the TIP runtime trace controls to the TIP init function.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007503"></a>
<div id="APPUG1004" class="sect1">
<h2 class="sect1"><span class="secnum">4.11</span> Application Development with <a id="sthref712"></a><a id="sthref713"></a><a id="sthref714"></a>Multi-Byte Character Set Support</h2>
<p><a id="sthref715"></a>COBOL presently only supports <a id="sthref716"></a>double byte character sets (DBCS) for <a id="sthref717"></a><code>PIC G</code> datatypes.</p>
<p>PGAU processes COBOLII <code>PIC G</code> datatypes as PL/SQL <code>VARCHAR2</code> variables and generates TIPs which automatically convert the data according to the Oracle <code>NLS_LANGUAGE</code>s specified for the remote host data and the local Oracle data.</p>
<p>These Oracle <code>NLS_LANGUAGE</code>s can be specified as defaults for all <code>PIC G</code> data exchanged by the TIP with the remote transaction (see <code>DEFINE TRANSACTION</code> <code>...</code> <code>REMOTE_MBCS</code> or <code>LOCAL_MBCS</code>). The Oracle <code>NLS_LANGUAGE</code>s for any individual <code>PIC G</code> data item can be further overridden (see <code>REDEFINE DATA</code> <code>...</code> <code>REMOTE</code> or <code>LOCAL_LANGUAGE</code>).</p>
<p>DBCS data can be encoded in any combination of supported DBCS character sets. For example, a remote host application which allows different codepages for each field of data in a record is supported by the Oracle Database Gateway MBCS<a id="sthref718"></a> support.</p>
<p>Use of <code>REDEFINE DATA ... REMOTE_LANGUAGE</code> or <code>LOCAL_LANGUAGE</code> on <code>PIC X</code> items is also supported. Thus a TIP can perform DBCS or MBCS conversions for specified <code>PIC X</code> data fields, in addition to SBCS conversions by default for the remaining <code>PIC X</code> data fields. Default SBCS conversion is according to the <code>DEFINE TRANSACTION... NLS_LANGUAGE</code> and local Oracle default <code>LANGUAGE</code> environment values.</p>
<p>When PGAU is generating a TIP, the <code>PIC G</code> datatypes are converted to PL/SQL <code>VARCHAR2</code> datatypes. After conversion by the TIP, received <code>'PIC G' VARCHAR2</code> datatypes can have a length less then the maximum due to deletion of shift-out and shift-in meta characters, and sent <code>'PIC G'</code> RAWs will have the shift-out and shift-in characters inserted as required by the remote host character set specified.</p>
<p>This is different from the conversions performed for <code>PIC X</code> data which is always a known fixed-length and hence <code>CHAR</code> datatypes are used in TIPs for <code>PIC X</code> data fields. However, even when the <code>PIC X</code> field contains DBCS or MBCS data, a <code>CHAR</code> variable is still used and padded with blanks if needed.</p>
<p>Some remote host applications bracket a <code>PIC G</code> field with <code>PIC X</code> bytes used for shift-out, shift-in meta-character insertion. Such a COBOL definition might look like:</p>
<pre>
01 MY_RECORD. 
   05 SO PIC X. 
   05 MY_SBCS_DATA PIC G(52). 
   05 SI PIC X. 
</pre>
<p>This is not processed correctly by PGAU, because all three fields are defined, and consequently treated, as separate data items when conversion is performed.</p>
<p>To be properly processed, the definition input to PGAU should be:</p>
<pre>
01 MY_RECORD. 
   05 MY_MBCS_DATA PIC G(51).
</pre>
<p>The PGAU <code>REDEFINE DATA</code> statement can redefine the 3-field definition to the 1-field definition by specifying <code>USAGE(SKIP)</code> on fields <code>SO</code> and <code>SI</code>, and <code>'05 MY_MBCS_DATA PIC G(51).'</code> to redefine <code>MY_MBCS_DATA</code>. The three <code>REDEFINE</code> statements can be placed in the PGAU input control file, and thus the remote host definition need not be altered.</p>
</div>
<!-- class="sect1" -->
<a id="i1007531"></a>
<div id="APPUG1005" class="sect1">
<h2 class="sect1"><span class="secnum">4.12</span> Modifying a Terminal-Oriented Transaction to Use APPC</h2>
<p><a id="sthref719"></a><a id="sthref720"></a>The remote transaction program must include mapped APPC verbs to initiate, communicate, and terminate the APPC conversation. However, when the remote transaction program is terminal-oriented, the following options are available:</p>
<ul>
<li>
<p>You can separate the terminal logic from the application and I/O logic. Once this separation is achieved, a small front end remote transaction program can be written to interface between the gateway calls and the transaction application logic. For example, in CICS the CICS <code>LINK</code> is used to implement this technique.</p>
</li>
<li>
<p>You can modify your existing program so that APPC calls are embedded. In the example, <code>PGADB2I</code>, we use CICS and its associated mapped APPC verbs as follows:</p>
<ul>
<li>
<p>EXEC CICS <code>ASSIGN</code> accepts the conversation initiated by the gateway.</p>
</li>
<li>
<p>EXEC CICS <code>RECEIVE</code> receives the arguments.</p>
</li>
<li>
<p>EXEC CICS <code>SEND</code> ends the results.</p>
</li>
<li>
<p>EXEC CICS <code>RETURN</code> terminates the conversation.</p>
</li>
</ul>
</li>
<li>
<p>If you do not want to modify your terminal-oriented transaction, you can insert an APPC-capable interface, such as IBM Corporation's FEPI for CICS Transaction Server for z/OS, between the terminal-oriented program and the gateway.</p>
</li>
<li>
<p>With IMS/TM, existing unmodified IMS transactions can be accessed with the gateway using the implicit APPC facility. With implicit APPC, the standard DLI GU, GN, and ISRT calls using the I/O PCB are automatically converted to appropriate APPC send or receive calls when the IMS transaction is invoked through APPC.<a id="sthref721"></a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1007544"></a>
<div id="APPUG1006" class="sect1">
<h2 class="sect1"><span class="secnum">4.13</span> Privileges Needed to Use TIPs<a id="sthref722"></a><a id="sthref723"></a><a id="sthref724"></a><a id="sthref725"></a></h2>
<p>Execute privileges must be explicitly granted to callers of TIPs or procedures. This privilege cannot be granted through a role.</p>
<p>Any TIP user wanting to trace a TIP must be granted execute privileges on the rtrace and ptrace procedures. Refer to the "Configuring PGAU" section in the chapter appropriate for your communications protocol in the <a class="olink APPCI" href="../e12078/toc.htm"><span class="italic">Oracle Database Gateway for APPC Installation and Configuration Guide for AIX 5L Based Systems (64-Bit), HP-UX Itanium, Solaris Operating System (SPARC 64-Bit), Linux x86, and Linux x86-64</span></a>, <a class="olink APPCW" href="../e12079/toc.htm"><span class="italic">Oracle Database Gateway for APPC Installation and Configuration Guide for Microsoft Windows</span></a>, and the <a class="olink EXPRN" href="../../appdev.112/e14919/toc.htm"><span class="italic">Oracle Database Rules Manager and Expression Filter Developer's Guide</span></a> for more information.</p>
<p>For example, on Microsoft Windows:</p>
<pre>
C:\&gt; sqlplus pgaadmin\<span class="italic">pw@database_specification_string</span> 
SQL&gt; grant execute on pgaadmin.purge_trace to <span class="italic">tip_user_userid</span>;
SQL&gt; grant execute on pgaadmin.read_trace to <span class="italic">tip_user_userid;</span> 
</pre>
<p>On UNIX based systems:</p>
<pre>
$ sqlplus pgaadmin/<span class="italic">pw@database_specification_string</span> 
SQL&gt; grant execute on pgaadmin.purge_trace to <span class="italic">tip_user_userid</span>;
SQL&gt; grant execute on pgaadmin.read_trace to <span class="italic">tip_user_userid;</span> 
</pre>
<p>After a TIP has been developed, the TIP user must be granted execute privileges on the TIP by the TIP owner. The TIP owner is usually <code>PGAADMIN</code>, but can be another user who has been granted either the <code>PGDDDEF</code> or <code>PGDDGEN</code> roles.</p>
<p>For example, on Microsoft Windows:</p>
<pre>
C:\&gt; sqlplus tip_owner\<span class="italic">pw@database_specification_string</span> 
SQL&gt; grant execute on tipname to <span class="italic">tip_user_userid</span>;
</pre>
<p>On UNIX based systems:</p>
<pre>
$ sqlplus tip_owner/<span class="italic">pw@database_specification_string</span> 
SQL&gt; grant execute on tipname to <span class="italic">tip_user_userid</span>;
</pre>
<p>where <code><span class="codeinlineitalic">database_specification_string</span></code> is the <a id="sthref726"></a>Oracle Net identifier for the Oracle database where the gateway <code>UTL_RAW</code> and <code>UTL_PG</code> components were installed. This is the same Oracle database where the TIPs are executed and where grants on the TIPs are performed from the TIP owner user&nbsp;ID.</p>
<p>A SQL script for performing these grants is provided in the <code>%ORACLE_HOME%\\dg4appc\\admin</code> directory on Microsoft Windows and in the <code>$ORACLE_HOME/dg4appc/admin</code> directory on UNIX based system. The<a id="sthref727"></a><a id="sthref728"></a> <code>pgddausr.sql</code> script performs the grants for private access to the packages by a single TIP user. If private grants are to be used, the <code>pgddausr.sql</code> script must be run once for each TIP user's user&nbsp;ID.</p>
<p>To run these scripts, use SQL*Plus to connect to the Oracle database as user <code>PGAADMIN</code>. From SQL*Plus, run the <code>pgddausr.sql</code> script from the <code>%ORACLE_HOME%\\dg4appc\\admin</code> directory on Microsoft Windows or <code>$ORACLE_HOME/dg4appc/admin</code> directory on UNIX based system. The script performs the necessary grants as previously described. You are prompted for the required user&nbsp;IDs, passwords, and database specification strings. If you are using private grants, repeat this step for each user&nbsp;ID requiring access to the packages.</p>
<p>No script has been provided to perform public grants. To do this, issue the following commands:</p>
<p>For Microsoft Windows:</p>
<pre>
C:\&gt; sqlplus tip_owner\<span class="italic">pw@database_specification_string</span> 
SQL&gt; grant execute on tipname to PUBLIC;  
</pre>
<p>For UNIX based systems:</p>
<pre>
$ sqlplus tip_owner/<span class="italic">pw@database_specification_string</span> 
SQL&gt; grant execute on tipname to PUBLIC;  
</pre></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment332">
<tr>
<td class="cellalignment341">
<table class="cellalignment337">
<tr>
<td class="cellalignment336"><a href="tip.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment336"><a href="com_con.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment344">
<table class="cellalignment335">
<tr>
<td class="cellalignment336"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment336"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment336"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment336"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment336"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment336"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
