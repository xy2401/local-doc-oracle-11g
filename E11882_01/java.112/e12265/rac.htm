<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using Oracle RAC Features</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.1 Build 018" />
<meta name="dcterms.created" content="2009-09-10T18:4:7Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Universal Connection Pool for JDBC Developer's Guide" />
<meta name="dcterms.identifier" content="E12265-02" />
<meta name="dcterms.isVersionOf" content="JJUCP" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2009,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="manage.htm" title="Previous" type="text/html" />
<link rel="Next" href="dgn_conpool.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e12265.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">11/14</span> <!-- End Header --><a id="CHDCDFAC"></a>
<h1 class="chapter"><span class="secnum">8</span> Using Oracle RAC Features</h1>
<p>The following sections are included in this chapter:</p>
<ul>
<li>
<p><a href="#CHDHIBJE">Overview of Oracle RAC Features</a></p>
</li>
<li>
<p><a href="#CHDHCGGG">Using Fast Connection Failover</a></p>
</li>
<li>
<p><a href="#CHDEEHJI">Using Run-Time Connection Load Balancing</a></p>
</li>
<li>
<p><a href="#CHDCIHED">Using Connection Affinity</a></p>
</li>
</ul>
<a id="CHDHIBJE"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Overview of Oracle RAC Features</h2>
<p><a id="sthref309"></a><a id="sthref310"></a><a id="sthref311"></a>UCP JDBC connection pools provide a tight integration with various Oracle Real Application Clusters (RAC) Database features. The features include Fast Connection Failover (FCF), Run-Time Connection Load Balancing, and Connection Affinity. These features require the use of an Oracle JDBC driver, Oracle RAC database, and the Oracle Notification Service library (<code>ons.jar</code>) that is included with the Oracle Client software. For those new to these technologies, refer to the <a class="olink RACAD" href="../../rac.112/e41960/toc.htm"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> and the <a class="olink JJDBC" href="../e16548/toc.htm"><span class="italic">Oracle Database JDBC Developer's Guide</span></a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting from Oracle Database 11<span class="italic">g</span> Release 2 (11.2), FCF is also supported by Oracle Restart on a single instance database. Oracle Restart was previously known as Single-Instance High Availability (SIHA). For more information on Oracle Restart, refer to <span class="italic"><a class="olink ADMIN12708" href="../../server.112/e25494/restart.htm#ADMIN12708">Oracle Database Administrator's Guide</a></span>.</div>
<p>Applications use Oracle RAC features to maximize connection performance and availability and to mitigate down-time due to connection problems. Applications have different availability and performance requirements and should implement Oracle RAC features accordingly.</p>
<p class="subhead2"><a id="sthref312"></a>Generic High Availability and Performance Features</p>
<p><a id="sthref313"></a>The UCP for JDBC APIs and connection pool properties include many high availability and performance features that do not require an Oracle RAC database. These features work well with both Oracle and non-Oracle connections and are discussed throughout this guide. For example: validating connections on borrow; setting timeout properties; setting maximum reuse properties; and connection pool manager operations are all used to ensure a high-level of connection availability and optimal performance.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Generic high availability and performance features work slightly better when using Oracle connections because UCP for JDBC leverages Oracle JDBC internal APIs.</div>
<p class="subhead2"><a id="sthref314"></a>Database Version Compatibility for Oracle RAC</p>
<p><a href="#BABBBJEJ">Table 8-1</a> lists supported Database versions for various Oracle RAC features:</p>
<div class="tblhruleformal">
<p class="titleintable"><a id="sthref315"></a><a id="BABBBJEJ"></a>Table 8-1 Oracle RAC Version Compatibility</p>
<table class="cellalignment38" title="Oracle RAC Version Compatibility" summary="Oracle RAC version compatibility" dir="ltr">
<thead>
<tr class="cellalignment32">
<th class="cellalignment39" id="r1c1-t4">Feature</th>
<th class="cellalignment39" id="r1c2-t4">Supported Database Version</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment32">
<td class="cellalignment40" id="r2c1-t4" headers="r1c1-t4">
<p>Fast Connection Failover</p>
</td>
<td class="cellalignment40" headers="r2c1-t4 r1c2-t4">
<p>10.1.x and later versions</p>
</td>
</tr>
<tr class="cellalignment32">
<td class="cellalignment40" id="r3c1-t4" headers="r1c1-t4">
<p>Run-time Connection Load-Balancing</p>
</td>
<td class="cellalignment40" headers="r3c1-t4 r1c2-t4">
<p>10.2.x and later versions</p>
</td>
</tr>
<tr class="cellalignment32">
<td class="cellalignment40" id="r4c1-t4" headers="r1c1-t4">
<p>Web Session Affinity</p>
</td>
<td class="cellalignment40" headers="r4c1-t4 r1c2-t4">
<p>11.1.x and later versions</p>
</td>
</tr>
<tr class="cellalignment32">
<td class="cellalignment40" id="r5c1-t4" headers="r1c1-t4">
<p>Transaction-Based Affinity</p>
</td>
<td class="cellalignment40" headers="r5c1-t4 r1c2-t4">
<p>10.2.x and later versions (11.1.x recommended)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p class="subhead2"><a id="sthref316"></a>Oracle JDBC Driver Version Compatibility for Oracle RAC</p>
<p>Oracle JDBC driver 10.1.x and later versions are supported with Oracle RAC features.</p>
</div>
<!-- class="sect1" -->
<a id="CHDHCGGG"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="JJUCP08100"></a>Using Fast Connection Failover</h2>
<p><a id="sthref317"></a><a id="sthref318"></a><a id="sthref319"></a>The Fast Connection Failover (FCF) feature is a Fast Application Notification (FAN) client implemented through the connection pool. The feature requires the use of an Oracle JDBC driver and an Oracle RAC database or an Oracle Restart on a single instance database. This section only describes the steps that an application must perform when using FCF with Oracle RAC. For more information on setting up an Oracle RAC database, see the <a class="olink RACAD" href="../../rac.112/e41960/toc.htm"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> or consult an Oracle database administrator.</p>
<p><a id="sthref320"></a>FCF manages pooled connections for high availability and provides the following features:</p>
<ul>
<li>
<p>FCF supports unplanned outages. Dead connections are rapidly detected and then the connections are aborted and removed from the pool. Connection removal relies on abort to rapidly sever socket connections in order to prevent hangs. Borrowed and in-use connections are interrupted only for unplanned outages.</p>
</li>
<li>
<p>FCF supports planned outages. Borrowed or in-use connections are not interrupted and closed until work is done and control of the connection is returned to the pool.</p>
</li>
<li>
<p>FCF encapsulates fatal connection errors and exceptions into the <code>isValid</code> API for robust and efficient retries. See <a href="connect.htm#CHDIDEEB">"Checking If a Connection Is Valid"</a> for more information on using this API.</p>
</li>
<li>
<p>FCF recognizes new nodes that join an Oracle RAC cluster and places new connections on that node appropriately in order to deliver maximum quality of service to applications at run-time. This facilitates middle-tier integration of Oracle RAC node joins and work-request routing from the application tier.</p>
</li>
<li>
<p>FCF distributes runtime work requests to all active Oracle RAC instances.</p>
</li>
</ul>
<p class="subhead2"><a id="sthref321"></a>Unplanned Shutdown Scenarios</p>
<p>FCF supports unplanned shutdown scenarios by detecting and removing stale connections to an Oracle RAC cluster. Stale connections include connections that do not have a service available on any instance in an Oracle RAC cluster due to service-down and node-down events. Borrowed connections and available connections that are stale are detected, and their network connection is severed before removing them from the pool. These removed connections are not replaced by the pool. Instead, the application must retry connections before performing any work with a connection.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Borrowed connections are immediately aborted and closed during unplanned shutdown scenarios. Any on-going transactions immediately receive an exception.</div>
<p class="subhead2"><a id="sthref322"></a>Planned Shutdown Scenarios</p>
<p>FCF supports planned shutdown scenarios where an Oracle RAC service can be gracefully shutdown. In such scenarios, stale borrowed connections are marked and will only be aborted and removed after they are returned to the pool. Any on-going transactions do not see any difference and proceed to complete.</p>
<p>The primary difference between unplanned and planned shutdown scenarios is how borrowed connections are handled. Stale connections that are idle in the pool (not borrowed) are removed in the same manner as the unplanned shutdown scenario.</p>
<p class="subhead2"><a id="sthref323"></a>Oracle RAC Instance Rejoin and New Instance Scenarios</p>
<p>FCF supports scenarios where an Oracle RAC cluster adds instances that provide a service of interest. The instance may be new to the cluster or may have been restarted after a down event. In both cases, UCP for JDBC recognizes the new instance and creates connections to the node as required.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref324"></a>
<h3 class="sect2">Example Fast Connection Failover Configuration</h3>
<p><a id="sthref325"></a><a id="sthref326"></a>The following example demonstrates a connection pool that uses the FCF feature. FCF is configured through a pool-enabled data source. The example includes enabling FCF, configuring the Oracle Notification Service (ONS) and configuring a connection URL. These topics are discussed after the example.</p>
<div class="example">
<p class="titleinexample"><a id="CHDEEBAJ"></a>Example 8-1 Fast Connection Failover Configuration Example</p>
<pre>
PoolDataSource  pds = PoolDataSourceFactory.getPoolDataSource();

pds.setConnectionPoolName("FCFSamplePool");
pds.setFastConnectionFailoverEnabled(true);
pds.setONSConfiguration("nodes=racnode1:4200,racnode2:4200\nwalletfile= /oracle11/onswalletfile");
pds.setConnectionFactoryClassName("oracle.jdbc.pool.OracleDataSource");pds.setURL("jdbc:oracle:thin@(DESCRIPTION= "+
   "(LOAD_BALANCE=on)"+
   "(ADDRESS=(PROTOCOL=TCP)(HOST=racnode1) (PORT=1521))"+
   "(ADDRESS=(PROTOCOL=TCP)(HOST=racnode2) (PORT=1521))"+
   "(CONNECT_DATA=(SERVICE_NAME=service_name)))");
...
</pre></div>
<!-- class="example" -->
<p>The <code>isValid</code> method of the <code>oracle.ucp.jdbc.ValidConnection</code> interface is typically used in conjunction with the FCF feature and is used to check if a borrowed connection is still usable after an SQL exception has been thrown due to a Oracle RAC down event. For example:</p>
<pre>
try {  conn = pds.getConnection;  ...}catch (SQLException sqlexc)
{
   if (conn == null || !((ValidConnection) conn).isValid())
        
   // take the appropriate action
   
...
conn.close();
}
</pre>
<p>For more information on the <code>ValidConnection</code> interface, see <a href="connect.htm#CHDIDEEB">"Checking If a Connection Is Valid"</a>.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref327"></a>
<h3 class="sect2">Enabling Fast Connection Failover</h3>
<p><a id="sthref328"></a><a id="sthref329"></a><a id="sthref330"></a>The FCF pool property is used to enable and disable FCF. FCF is disabled by default. The following example demonstrates enabling FCF as shown in <a href="#CHDEEBAJ">Example 8-1</a>.</p>
<pre>
pds.setFastConnectionFailoverEnabled(true);
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
FCF must also be enabled to use run-time connection load balancing and connection affinity. These features are discussed later in this chapter.</div>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref331"></a>
<h3 class="sect2">Configuring ONS</h3>
<p><a id="sthref332"></a><a id="sthref333"></a><a id="sthref334"></a><a id="sthref335"></a><a id="sthref336"></a><a id="sthref337"></a>FCF relies on the Oracle Notification Service (ONS) to propagate database events between the connection pool and the Oracle RAC database. At run-time, the connection pool must be able to setup an ONS environment. ONS (<code>ons.jar</code>) is included as part of the Oracle Client software. ONS can be configured using either remote configuration or client-side ONS daemon configuration. Remote configuration is the preferred configuration for standalone client applications.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref338"></a>
<h4 class="sect3">Remote Configuration</h4>
<p>UCP for JDBC supports remote configuration of ONS through the <code>SetONSConfiguration</code> pool property. The ONS property value is a string that closely resembles the content of an <code>ons.config</code> file. The string contains a list of <code>name=value</code> pairs separated by a new line character (<code>\n</code>). The name can be: <code>nodes</code>, <code>walletfile</code>, or <code>walletpassword</code>. The parameter string should at least specify the ONS configuration nodes attribute as a list of <code>host:port</code> pairs separated by a comma. SSL would be used when the <code>walletfile</code> attribute is specified as an Oracle wallet file.</p>
<p>The following example demonstrates an ONS configuration string as shown in <a href="#CHDEEBAJ">Example 8-1</a>:</p>
<pre>
...
pds.setONSConfiguration("nodes=racnode1:4200,racnode2:4200\nwalletfile=/oracle11/onswalletfile");
...
</pre>
<p>Applications that use remote configuration must set the <code>oracle.ons.oraclehome</code> system property to the location of <code>ORACLE_HOME</code> before starting the application. For example:</p>
<pre>
java -Doracle.ons.oraclehome=$ORACLE_HOME ...
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The parameters in the configuration string must match those for the Oracle RAC database. In addition, the <code>setONSConfiguration</code> property is only used for standalone Java applications. When using Oracle Application Server, ONS should be configured using procedures that are applicable to the server.</div>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref339"></a>
<h4 class="sect3">Client-Side Daemon Configuration</h4>
<p>Client-Side ONS daemon configuration is typical of applications that run on a middle tier server such as the Oracle Application Server. Clients in this scenario directly configure ONS by updating the <code>ons.config</code> file. The location of the file may be different depending on the platform. The following example demonstrates an <code>ons.config</code> file for <a href="#CHDEEBAJ">Example 8-1</a>:</p>
<pre>
localport=4100
remoteport=4200
nodes=racnode1:4200,racnode2:4200
walletfile=/oracle11/onswalletfile
</pre>
<ul>
<li>
<p><code>localport</code>: The port that ONS binds to on the localhost interface to talk to local clients.</p>
</li>
<li>
<p><code>remoteport</code>: the port that ONS binds to on all interfaces for talking to other ONS daemons.</p>
</li>
</ul>
<p>The ONS utility (<code>onsctl</code>) can be used to start, stop, ping, and refresh ONS and can also be used to debug ONS. ONS must be refreshed after updating the <code>ons.config</code> file.</p>
<p>For more information on setting up ONS, refer to the following links:</p>
<ul>
<li>
<p><a href="http://www.oracle.com/technology/products/ias/hi_av/OracleApplicationServer10gFCF.pdf">Oracle Application Server 10g Fast Connection Failover Configuration Guide</a></p>
</li>
<li>
<p>The <a class="olink JJDBC26000" href="../../java.112/e16548/fstconfo.htm#JJDBC26000">Fast Connection Failover</a> chapter in the <a class="olink JJDBC" href="../e16548/toc.htm"><span class="italic">Oracle Database JDBC Developer's Guide</span></a></p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref340"></a>
<h3 class="sect2">Configuring the Connection URL</h3>
<p><a id="sthref341"></a><a id="sthref342"></a><a id="sthref343"></a>A connection factory's connection URL must use the service name syntax when using FCF. The service name is used to map the connection pool to the service. In addition, the factory class must be an Oracle factory class. The following example demonstrates configuring the connection URL as shown in <a href="#CHDEEBAJ">Example 8-1</a>:</p>
<pre>
...
pds.setConnectionFactoryClassName("oracle.jdbc.pool.OracleDataSource");
pds.setURL("jdbc:oracle:thin@//host:port/service_name");
...
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
An exception is thrown if a service identifier (SID) is specified for the connection URL when FCF is enabled.</div>
<p>The following examples demonstrate valid connection URL syntax when connecting to an Oracle RAC database. Examples for both the Oracle JDBC thin and Oracle OCI driver are included. Notice that the URL can be used to explicitly enable load balancing among Oracle RAC nodes:<a id="sthref344"></a></p>
<p class="subhead2"><a id="sthref345"></a>Valid Connection URL Usage</p>
<pre>
pds.setURL("jdbc:oracle:thin@//host:port/service_name"); 

pds.setURL("jdbc:oracle:thin@//cluster-alias:port/service_name"); 

pds.setURL("jdbc:oracle:thin:@(DESCRIPTION= "+
   "(LOAD_BALANCE=on)"+
   "(ADDRESS=(PROTOCOL=TCP)(HOST=host1)(PORT=1521))"+
   "(ADDRESS=(PROTOCOL=TCP)(HOST=host2)(PORT=1521))"+
   "(CONNECT_DATA=(SERVICE_NAME=service_name)))");

pds.setURL("jdbc:oracle:thin:@(DESCRIPTION= "+
   "(ADDRESS=(PROTOCOL=TCP)(HOST=cluster_alias) (PORT=1521)) "+
   "(CONNECT_DATA=(SERVICE_NAME=service_name)))");

pds.setURL("jdbc:oracle:oci:@TNS_ALIAS");

pds.setURL("jdbc:oracle:oci:@(DESCRIPTION= "+
   "(LOAD_BALANCE=on) "+
   "(ADDRESS=(PROTOCOL=TCP)(HOST=host1) (PORT=1521)) "+
   "(ADDRESS=(PROTOCOL=TCP)(HOST=host2)(PORT=1521)) "+
   "(CONNECT_DATA=(SERVICE_NAME=service_name)))"); 

pds.setURL("jdbc:oracle:oci:@(DESCRIPTION= "+
   "(ADDRESS=(PROTOCOL=TCP)(HOST=cluster_alias) (PORT=1521)) "+
   "(CONNECT_DATA=(SERVICE_NAME=service_name)))");
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDEEHJI"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Run-Time Connection Load Balancing</h2>
<p><a id="sthref346"></a><a id="sthref347"></a><a id="sthref348"></a><a id="sthref349"></a><a id="sthref350"></a><a id="sthref351"></a>UCP JDBC connection pools leverage the load balancing functionality provided by an Oracle RAC database. Run-time connection load balancing requires the use of an Oracle JDBC driver and an Oracle RAC database. For more information on setting up an Oracle RAC database, see the <a class="olink RACAD" href="../../rac.112/e41960/toc.htm"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> or consult an Oracle database administrator.</p>
<p>Run-time connection load balancing is useful when:</p>
<ul>
<li>
<p>Traditional balancing of workload is not optimal</p>
</li>
<li>
<p>Requests must be routed to make optimal use of resources in a clustered database</p>
</li>
<li>
<p>Capacity within the cluster differs and is expected to change over time</p>
</li>
<li>
<p>The need to avoid sending work to slow, hung, and dead nodes is required</p>
</li>
</ul>
<p>UCP for JDBC uses the Oracle RAC Load Balancing Advisory. The advisory is used to balance work across Oracle RAC instances and is used to determine which instances offer the best performance. Applications transparently receive connections from instances that offer the best performance. Connection requests are quickly diverted from instances that have slowed, are not responding, or that have failed.</p>
<p><a id="sthref352"></a>Run-time connection load balancing provides the following benefits:</p>
<ul>
<li>
<p>Manages pooled connections for high performance and scalability</p>
</li>
<li>
<p>Receives continuous recommendations on the percentage of work to route to database instances</p>
</li>
<li>
<p>Adjusts distribution of work based on different back-end node capacities such as CPU capacity or response time</p>
</li>
<li>
<p>Reacts quickly to changes in cluster reconfiguration, application workload, overworked nodes, or hangs</p>
</li>
<li>
<p>Receives metrics from the Oracle RAC Load Balance Advisory. Connections to well performing instances are used most often. New and unused connections to under-performing instances will gravitate away over time. When distribution metrics are not received, connection are selected using a random choice.</p>
</li>
</ul>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref353"></a>
<h3 class="sect2">Setting Up Run-Time Connection Load Balancing</h3>
<p><a id="sthref354"></a><a id="sthref355"></a><a id="sthref356"></a><a id="sthref357"></a>Run-time connection load balancing requires that FCF is enabled and configured properly. See <a href="#CHDHCGGG">"Using Fast Connection Failover"</a> for detailed instructions on setting up FCF.</p>
<p>In addition, the Oracle RAC Load Balancing Advisory must be configured with service-level goals for each service for which load balancing is enabled. The Oracle RAC Load Balancing Advisory may be configured for <code>SERVICE_TIME</code> or <code>THROUGHPUT</code>. The connection load balancing goal should be set to <code>SHORT</code>. For example:</p>
<pre>
EXECUTE DBMS_SERVICE.MODIFY_SERVICE (service_name =&gt; 'sjob' -, goal =&gt; 
   DBMS_SERVICE.GOAL_THROUGHPUT -, clb_goal =&gt; DBMS_SERVICE.CLB_GOAL_SHORT);
</pre>
<p>Or</p>
<pre>
EXECUTE DBMS_SERVICE.MODIFY_SERVICE (service_name =&gt; 'sjob' -, goal =&gt; 
   DBMS_SERVICE.GOAL_SERVICE_TIME -, clb_goal =&gt; DBMS_SERVICE.CLB_GOAL_SHORT);
</pre>
<p>The Load Balancing Advisory goal can also be set by calling the <code>DBMS_SERVICE.create_service</code>. See the <a class="olink RACAD7120" href="../../rac.112/e41960/hafeats.htm#RACAD7120">Introduction to Automatic Workload Management</a> chapter in the <a class="olink RACAD" href="../../rac.112/e41960/toc.htm"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a>. In particular, refer to the "Load Balancing Advisory" section.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDCIHED"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Connection Affinity</h2>
<p><a id="sthref358"></a><a id="sthref359"></a><a id="sthref360"></a>UCP JDBC connection pools leverage affinity functionality provided by an Oracle RAC database. Connection affinity requires the use of an Oracle JDBC driver and an Oracle RAC database version 11.1.0.6 or higher. For more information on setting up an Oracle RAC database, see the <a class="olink RACAD" href="../../rac.112/e41960/toc.htm"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> or consult an Oracle database administrator.</p>
<p>Connection affinity is a performance feature that allows a connection pool to select connections that are directed at a specific Oracle RAC instance. The pool uses run-time connection load balancing (if configured) to select an Oracle RAC instance to create the first connection and then subsequent connections are created with an affinity to the same instance.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Affinity is only a hint. A connection pool will select a new Oracle RAC instance for connections if a desired instance is not found.</div>
<p>UCP JDBC connection pools support two types of connection affinity: transaction-based affinity and Web session affinity.</p>
<p class="subhead2"><a id="sthref361"></a>Transaction-Based Affinity</p>
<p><a id="sthref362"></a><a id="sthref363"></a><a id="sthref364"></a>Transaction-based affinity is an affinity to an Oracle RAC instance that can be released by either the client application or a failure event. Applications typically use this type of affinity when long-lived affinity to an Oracle RAC instance is desired or when the cost (in terms of performance) of being redirected to a new Oracle RAC instance is high. Distributed transactions are a good example of transaction-based affinity. XA connections that are enlisted in a distributed transaction keep an affinity to the Oracle RAC instance for the duration of the transaction. In this case, an application would incur a significant performance cost if a connection is redirect to a different Oracle RAC instance during the distributed transaction.</p>
<p class="subhead2"><a id="sthref365"></a><a id="sthref366"></a><a id="sthref367"></a><a id="sthref368"></a>Web Session Affinity</p>
<p>Web session affinity is an affinity to an Oracle RAC instance that can be released by either the instance, a client application, or a failure event. The Oracle RAC instance uses a hint to communicate to a connection pool whether affinity has been enabled or disabled on the instance. An Oracle RAC instance may disable affinity based on many factors, such as performance or load. If an Oracle RAC instance can no longer support affinity, the connections in the pool are refreshed to use a new instance and affinity is established once again.</p>
<p>Applications typically use this type of affinity when short-lived affinity to an Oracle RAC instance is expected or if the cost (in terms of performance) of being redirected to a new Oracle RAC instance is minimal. For example, a mail client session might use Web session affinity to an Oracle RAC instance to increase performance and is relatively unaffected if a connection is redirected to a different instance.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref369"></a>
<h3 class="sect2">Setting Up Connection Affinity</h3>
<p><a id="sthref370"></a>Connection affinity is set up as follows:</p>
<ul>
<li>
<p>Enable FCF. See <a href="#CHDHCGGG">"Using Fast Connection Failover"</a>.</p>
</li>
<li>
<p>Enable run-time connection load balancing. See <a href="#CHDEEHJI">"Using Run-Time Connection Load Balancing"</a>.</p>
</li>
<li>
<p>Create a connection affinity callback.</p>
</li>
<li>
<p>Register the callback.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Transaction-based affinity is strictly scoped between the application/middle-tier and UCP for JDBC; therefore, transaction-based affinity only requires that the <code>setFastConnectionFailoverEnabled</code> property be set to <code>true</code> and does not require complete FCF configuration.
<p>In addition, transaction-based affinity does not technically require run-time connection load balancing. However, it can help with performance and is usually enabled regardless. If run-time connection load balancing is not enabled, the connection pool randomly picks connections.</p>
</div>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref371"></a>
<h4 class="sect3">Creating a Connection Affinity Callback</h4>
<p><a id="sthref372"></a><a id="sthref373"></a><a id="sthref374"></a>Connection affinity requires the use of a callback. The callback is an implementation of the <code>ConnectionAffinityCallback</code> interface which is located in the <code>oracle.ucp</code> package. The callback is used by the connection pool to establish and retrieve a connection affinity context and is also used to set the affinity policy type (transaction-based or Web session).</p>
<p><a id="sthref375"></a><a id="sthref376"></a><a id="sthref377"></a><a id="sthref378"></a>The following example demonstrates setting an affinity policy in a callback implementation. The example also demonstrates manually setting an affinity context. typically, the connection pool sets the affinity context inside an application. However, the ability to manually set an affinity context is provided for applications that want to customize affinity behavior and control the affinity context directly.</p>
<pre>
public class AffinityCallbackSample
   implements ConnectionAffinityCallback {
   
   Object appAffinityContext = null;
   ConnectionAffinityCallback.AffinityPolicy affinityPolicy =
   ConnectionAffinityCallback.AffinityPolicy.TRANSACTION_BASED_AFFINITY;
   
   //For Web session affinity, use WEBSESSION_BASED_AFFINITY;
   
   public void setAffinityPolicy(AffinityPolicy policy)
   {
      affinityPolicy = policy;
   }
   
   public AffinityPolicy getAffinityPolicy()
   {
      return affinityPolicy;
   }
   
   public boolean setConnectionAffinityContext(Object affCxt)
   {
      synchronized (lockObj)
      {
         appAffinityContext = affCxt;
      }
      return true;
   }
   
   public Object getConnectionAffinityContext()
   {
      synchronized (lockObj)
      {
         return appAffinityContext;
      }
   }
}
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref379"></a>
<h4 class="sect3">Registering a Connection Affinity Callback</h4>
<p><a id="sthref380"></a><a id="sthref381"></a>A connection affinity callback is registered on a connection pool using the <code>registerConnectionAffinityCallback</code> method. The callback is registered when creating the connection pool. Only one callback can be registered per connection pool.</p>
<p>The following example demonstrates registering a connection affinity callback implementation:</p>
<pre>
ConnectionAffinityCallback callback = new MyCallback();

PoolDataSource  pds = PoolDataSourceFactory.getPoolDataSource();

pds.setConnectionPoolName("AffinitySamplePool");
pds.registerConnectionAffinityCallback(callback);
...
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref382"></a>
<h4 class="sect3">Removing a Connection Affinity Callback</h4>
<p><a id="sthref383"></a><a id="sthref384"></a>A connection affinity callback is removed from a connection pool using the <code>removeConnectionAffinityCallback</code> method. For example:</p>
<pre>
PoolDataSource  pds = PoolDataSourceFactory.getPoolDataSource();

pds.setConnectionPoolName("AffinitySamplePool");
pds.removeConnectionAffinityCallback();
...
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment31">
<tr>
<td class="cellalignment40">
<table class="cellalignment36">
<tr>
<td class="cellalignment35"><a href="manage.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment35"><a href="dgn_conpool.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2009,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment42">
<table class="cellalignment34">
<tr>
<td class="cellalignment35"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment35"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment35"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment35"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment35"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment35"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
