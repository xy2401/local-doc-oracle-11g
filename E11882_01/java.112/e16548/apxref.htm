<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>JDBC Reference Information</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.1" />
<meta name="dcterms.created" content="2011-09-15T1:42:58Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database JDBC Developer's Guide" />
<meta name="dcterms.identifier" content="E16548-03" />
<meta name="dcterms.isVersionOf" content="JJDBC" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="part9.htm" title="Previous" type="text/html" />
<link rel="Next" href="apxracfan.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e16548.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">49/54</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='apxref'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript><a id="g637883"></a><a id="JJDBC28905"></a>
<h1 class="appendix"><span class="secnum">A</span> JDBC Reference Information</h1>
<p>This appendix contains detailed Java Database Connectivity (JDBC) reference information, including the following topics:</p>
<ul>
<li>
<p><a href="#i1001571">Valid SQL-JDBC Data Type Mappings</a></p>
</li>
<li>
<p><a href="#i1004133">Supported SQL and PL/SQL Data Types</a></p>
</li>
<li>
<p><a href="#i1005081">Embedded JDBC Escape Syntax</a></p>
</li>
<li>
<p><a href="#i1007713">Oracle JDBC Notes and Limitations</a></p>
</li>
</ul>
<a id="i1001571"></a><a id="JJDBC28906"></a>
<div class="sect1">
<h2 class="sect1">Valid SQL-JDBC Data Type Mappings</h2>
<p><a href="datacc.htm#g1028145">Table 11-1</a> describes the default mappings between Java classes and SQL data types supported by Oracle JDBC drivers. Compare the contents of the JDBC Type Codes, Standard Java Types, and SQL Data Types columns in <a href="datacc.htm#g1028145">Table 11-1</a> with the contents of <a href="#CACBBAIE">Table A-1</a>.</p>
<p><a href="#CACBBAIE">Table A-1</a> lists all the possible Java types to which a given SQL data type can be validly mapped. Oracle JDBC drivers will support these nondefault mappings. For example, to materialize SQL <code>CHAR</code> data in an <code>oracle.sql.CHAR</code> object, use the <code>getCHAR</code> method. To materialize it as a <code>java.math.BigDecimal</code> object, use the <code>getBigDecimal</code> method.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For classes where <code>oracle.sql.ORAData</code> appears in italic, these can be generated by JPublisher.</div>
<div class="tblformal">
<p class="titleintable"><a id="JJDBC28907"></a><a id="sthref921"></a><a id="CACBBAIE"></a>Table A-1 Valid SQL Data Type-Java Class Mappings</p>
<table class="cellalignment8" title="Valid SQL Data Type-Java Class Mappings " summary="table" >
<thead>
<tr class="cellalignment2">
<th class="cellalignment9" id="r1c1-t3">SQL data type</th>
<th class="cellalignment9" id="r1c2-t3">Java types</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2">
<td class="cellalignment10" id="r2c1-t3" headers="r1c1-t3">
<p><code>CHAR</code>, <code>VARCHAR2</code>, <code>LONG</code></p>
</td>
<td class="cellalignment10" headers="r2c1-t3 r1c2-t3">
<p><code>java.lang.String</code></p>
<p><code>oracle.sql.CHAR</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r3c1-t3" headers="r1c1-t3">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment10" headers="r3c1-t3 r1c2-t3">
<p><code>boolean</code></p>
<p><code>char</code></p>
<p><code>byte</code></p>
<p><code>short</code></p>
<p><code>int</code></p>
<p><code>long</code></p>
<p><code>float</code></p>
<p><code>double</code></p>
<p><code>java.lang.Byte</code></p>
<p><code>java.lang.Short</code></p>
<p><code>java.lang.Integer</code></p>
<p><code>java.lang.Long</code></p>
<p><code>java.lang.Float</code></p>
<p><code>java.lang.Double</code></p>
<p><code>java.math.BigDecimal</code></p>
<p><code>oracle.sql.NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r4c1-t3" headers="r1c1-t3">
<p><code>BINARY_INTEGER</code></p>
</td>
<td class="cellalignment10" headers="r4c1-t3 r1c2-t3">
<p><code>boolean</code></p>
<p><code>char</code></p>
<p><code>byte</code></p>
<p><code>short</code></p>
<p><code>int</code></p>
<p><code>long</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r5c1-t3" headers="r1c1-t3">
<p><code>BINARY_FLOAT</code></p>
</td>
<td class="cellalignment10" headers="r5c1-t3 r1c2-t3">
<p><code>oracle.sql.BINARY_FLOAT</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r6c1-t3" headers="r1c1-t3">
<p><code>BINARY_DOUBLE</code></p>
</td>
<td class="cellalignment10" headers="r6c1-t3 r1c2-t3">
<p><code>oracle.sql.BINARY_DOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r7c1-t3" headers="r1c1-t3">
<p><code>DATE</code></p>
</td>
<td class="cellalignment10" headers="r7c1-t3 r1c2-t3">
<p><code>oracle.sql.DATE</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r8c1-t3" headers="r1c1-t3">
<p><code>RAW</code></p>
</td>
<td class="cellalignment10" headers="r8c1-t3 r1c2-t3">
<p><code>oracle.sql.RAW</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r9c1-t3" headers="r1c1-t3">
<p><code>BLOB</code></p>
</td>
<td class="cellalignment10" headers="r9c1-t3 r1c2-t3">
<p><code>oracle.sql.BLOB</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r10c1-t3" headers="r1c1-t3">
<p><code>CLOB</code></p>
</td>
<td class="cellalignment10" headers="r10c1-t3 r1c2-t3">
<p><code>oracle.sql.CLOB</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r11c1-t3" headers="r1c1-t3">
<p><code>BFILE</code></p>
</td>
<td class="cellalignment10" headers="r11c1-t3 r1c2-t3">
<p><code>oracle.sql.BFILE</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r12c1-t3" headers="r1c1-t3">
<p><code>ROWID</code></p>
</td>
<td class="cellalignment10" headers="r12c1-t3 r1c2-t3">
<p><code>oracle.sql.ROWID</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r13c1-t3" headers="r1c1-t3">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment10" headers="r13c1-t3 r1c2-t3">
<p><code>oracle.sql.TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r14c1-t3" headers="r1c1-t3">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
<td class="cellalignment10" headers="r14c1-t3 r1c2-t3">
<p><code>oracle.sql.TIMESTAMPTZ</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r15c1-t3" headers="r1c1-t3">
<p><code>TIMESTAMP WITH LOCAL TIME ZONE</code></p>
</td>
<td class="cellalignment10" headers="r15c1-t3 r1c2-t3">
<p><code>oracle.sql.TIMESTAMPLTZ</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r16c1-t3" headers="r1c1-t3">
<p>ref cursor</p>
</td>
<td class="cellalignment10" headers="r16c1-t3 r1c2-t3">
<p>j<code>ava.sql.ResultSet</code></p>
<p><code>sqlj.runtime.ResultSetIterator</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r17c1-t3" headers="r1c1-t3">
<p>user defined named types, ADTs</p>
</td>
<td class="cellalignment10" headers="r17c1-t3 r1c2-t3">
<p><code>oracle.sql.STRUCT</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r18c1-t3" headers="r1c1-t3">
<p>opaque named types</p>
</td>
<td class="cellalignment10" headers="r18c1-t3 r1c2-t3">
<p><code>oracle.sql.OPAQUE</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r19c1-t3" headers="r1c1-t3">
<p>nested tables and VARRAY named types</p>
</td>
<td class="cellalignment10" headers="r19c1-t3 r1c2-t3">
<p><code>oracle.sql.ARRAY</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r20c1-t3" headers="r1c1-t3">
<p>references to named types</p>
</td>
<td class="cellalignment10" headers="r20c1-t3 r1c2-t3">
<p><code>oracle.sql.REF</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The type <code>UROWID</code> is not supported.</p>
</li>
<li>
<p>The <code>oracle.sql.Datum</code> class is abstract. The value passed to a parameter of type <code>oracle.sql.Datum</code> must be of the Java type corresponding to the underlying SQL type. Likewise, the value returned by a method with return type <code>oracle.sql.Datum</code> must be of the Java type corresponding to the underlying SQL type.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1004133"></a><a id="JJDBC28908"></a>
<div class="sect1">
<h2 class="sect1">Supported SQL and PL/SQL Data Types</h2>
<p>The tables in this section list SQL and PL/SQL data types, and whether Oracle JDBC drivers support them. <a href="#g1009689">Table A-2</a> describes Oracle JDBC driver support for SQL data types.</p>
<div class="tblformal">
<p class="titleintable"><a id="JJDBC28909"></a><a id="sthref922"></a><a id="g1009689"></a>Table A-2 Support for SQL Data Types</p>
<table class="cellalignment8" title="Support for SQL Data Types " summary="table" dir="ltr">
<thead>
<tr class="cellalignment2">
<th class="cellalignment9" id="r1c1-t5">SQL Data Type</th>
<th class="cellalignment9" id="r1c2-t5">Supported by JDBC Drivers?</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2">
<td class="cellalignment10" id="r2c1-t5" headers="r1c1-t5">
<p>BFILE</p>
</td>
<td class="cellalignment10" headers="r2c1-t5 r1c2-t5">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r3c1-t5" headers="r1c1-t5">
<p>BLOB</p>
</td>
<td class="cellalignment10" headers="r3c1-t5 r1c2-t5">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r4c1-t5" headers="r1c1-t5">
<p>CHAR</p>
</td>
<td class="cellalignment10" headers="r4c1-t5 r1c2-t5">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r5c1-t5" headers="r1c1-t5">
<p>CLOB</p>
</td>
<td class="cellalignment10" headers="r5c1-t5 r1c2-t5">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r6c1-t5" headers="r1c1-t5">
<p>DATE</p>
</td>
<td class="cellalignment10" headers="r6c1-t5 r1c2-t5">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r7c1-t5" headers="r1c1-t5">
<p>NCHAR</p>
</td>
<td class="cellalignment10" headers="r7c1-t5 r1c2-t5">
<p>no<a id="sthref923" href="#sthref923" onclick='footdisplay(1,"The NCHAR type is supported indirectly. There is no corresponding java.sql.Types type, but if your application calls the formOfUse(NCHAR) method, then this type can be accessed.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r8c1-t5" headers="r1c1-t5">
<p>NCHAR VARYING</p>
</td>
<td class="cellalignment10" headers="r8c1-t5 r1c2-t5">
<p>no</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r9c1-t5" headers="r1c1-t5">
<p>NUMBER</p>
</td>
<td class="cellalignment10" headers="r9c1-t5 r1c2-t5">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r10c1-t5" headers="r1c1-t5">
<p>NVARCHAR2</p>
</td>
<td class="cellalignment10" headers="r10c1-t5 r1c2-t5">
<p>yes<a id="sthref924" href="#sthref924" onclick='footdisplay(2,"In JSE 6, the NVARCHAR2 type is supported directly. In J2SE 5.0, the NVARCHAR2 type is supported indirectly. There is no corresponding java.sql.Types type, but if your application calls the formOfUse(NCHAR) method, then this type can be accessed.")'><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r11c1-t5" headers="r1c1-t5">
<p>RAW</p>
</td>
<td class="cellalignment10" headers="r11c1-t5 r1c2-t5">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r12c1-t5" headers="r1c1-t5">
<p>REF</p>
</td>
<td class="cellalignment10" headers="r12c1-t5 r1c2-t5">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r13c1-t5" headers="r1c1-t5">
<p>ROWID</p>
</td>
<td class="cellalignment10" headers="r13c1-t5 r1c2-t5">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r14c1-t5" headers="r1c1-t5">
<p>UROWID</p>
</td>
<td class="cellalignment10" headers="r14c1-t5 r1c2-t5">
<p>no</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r15c1-t5" headers="r1c1-t5">
<p>VARCHAR2</p>
</td>
<td class="cellalignment10" headers="r15c1-t5 r1c2-t5">
<p>yes</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>The NCHAR type is supported indirectly. There is no corresponding java.sql.Types type, but if your application calls the formOfUse(NCHAR) method, then this type can be accessed.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>In JSE 6, the NVARCHAR2 type is supported directly. In J2SE 5.0, the NVARCHAR2 type is supported indirectly. There is no corresponding java.sql.Types type, but if your application calls the formOfUse(NCHAR) method, then this type can be accessed.</p>
<p><a href="#g1009738">Table A-3</a> describes Oracle JDBC support for the ANSI-supported SQL data types.</p>
<div class="tblformal">
<p class="titleintable"><a id="JJDBC28910"></a><a id="sthref925"></a><a id="g1009738"></a>Table A-3 Support for ANSI-92 SQL Data Types</p>
<table class="cellalignment8" title="Support for ANSI-92 SQL Data Types " summary="table" dir="ltr">
<thead>
<tr class="cellalignment2">
<th class="cellalignment9" id="r1c1-t6">ANSI-Supported SQL Data Type</th>
<th class="cellalignment9" id="r1c2-t6">Supported by JDBC Drivers?</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2">
<td class="cellalignment10" id="r2c1-t6" headers="r1c1-t6">
<p>CHARACTER</p>
</td>
<td class="cellalignment10" headers="r2c1-t6 r1c2-t6">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r3c1-t6" headers="r1c1-t6">
<p>DEC</p>
</td>
<td class="cellalignment10" headers="r3c1-t6 r1c2-t6">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r4c1-t6" headers="r1c1-t6">
<p>DECIMAL</p>
</td>
<td class="cellalignment10" headers="r4c1-t6 r1c2-t6">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r5c1-t6" headers="r1c1-t6">
<p>DOUBLE PRECISION</p>
</td>
<td class="cellalignment10" headers="r5c1-t6 r1c2-t6">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r6c1-t6" headers="r1c1-t6">
<p>FLOAT</p>
</td>
<td class="cellalignment10" headers="r6c1-t6 r1c2-t6">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r7c1-t6" headers="r1c1-t6">
<p>INT</p>
</td>
<td class="cellalignment10" headers="r7c1-t6 r1c2-t6">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r8c1-t6" headers="r1c1-t6">
<p>INTEGER</p>
</td>
<td class="cellalignment10" headers="r8c1-t6 r1c2-t6">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r9c1-t6" headers="r1c1-t6">
<p>NATIONAL CHARACTER</p>
</td>
<td class="cellalignment10" headers="r9c1-t6 r1c2-t6">
<p>no</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r10c1-t6" headers="r1c1-t6">
<p>NATIONAL CHARACTER VARYING</p>
</td>
<td class="cellalignment10" headers="r10c1-t6 r1c2-t6">
<p>no</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r11c1-t6" headers="r1c1-t6">
<p>NATIONAL CHAR</p>
</td>
<td class="cellalignment10" headers="r11c1-t6 r1c2-t6">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r12c1-t6" headers="r1c1-t6">
<p>NATIONAL CHAR VARYING</p>
</td>
<td class="cellalignment10" headers="r12c1-t6 r1c2-t6">
<p>no</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r13c1-t6" headers="r1c1-t6">
<p>NCHAR</p>
</td>
<td class="cellalignment10" headers="r13c1-t6 r1c2-t6">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r14c1-t6" headers="r1c1-t6">
<p>NCHAR VARYING</p>
</td>
<td class="cellalignment10" headers="r14c1-t6 r1c2-t6">
<p>no</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r15c1-t6" headers="r1c1-t6">
<p>NUMERIC</p>
</td>
<td class="cellalignment10" headers="r15c1-t6 r1c2-t6">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r16c1-t6" headers="r1c1-t6">
<p>REAL</p>
</td>
<td class="cellalignment10" headers="r16c1-t6 r1c2-t6">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r17c1-t6" headers="r1c1-t6">
<p>SMALLINT</p>
</td>
<td class="cellalignment10" headers="r17c1-t6 r1c2-t6">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r18c1-t6" headers="r1c1-t6">
<p>VARCHAR</p>
</td>
<td class="cellalignment10" headers="r18c1-t6 r1c2-t6">
<p>yes</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#g1009950">Table A-4</a> describes Oracle JDBC driver support for SQL User-Defined types.</p>
<div class="tblformal">
<p class="titleintable"><a id="JJDBC28911"></a><a id="sthref926"></a><a id="g1009950"></a>Table A-4 Support for SQL User-Defined Types</p>
<table class="cellalignment8" title="Support for SQL User-Defined Types" summary="table" dir="ltr">
<thead>
<tr class="cellalignment2">
<th class="cellalignment9" id="r1c1-t7">SQL User-Defined type</th>
<th class="cellalignment9" id="r1c2-t7">Supported by JDBC Drivers?</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2">
<td class="cellalignment10" id="r2c1-t7" headers="r1c1-t7">
<p>OPAQUE</p>
</td>
<td class="cellalignment10" headers="r2c1-t7 r1c2-t7">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r3c1-t7" headers="r1c1-t7">
<p>Reference types</p>
</td>
<td class="cellalignment10" headers="r3c1-t7 r1c2-t7">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r4c1-t7" headers="r1c1-t7">
<p>Object types (<code>JAVA_OBJECT</code>)</p>
</td>
<td class="cellalignment10" headers="r4c1-t7 r1c2-t7">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r5c1-t7" headers="r1c1-t7">
<p>Nested table types and VARRAY types</p>
</td>
<td class="cellalignment10" headers="r5c1-t7 r1c2-t7">
<p>yes</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#g1009796">Table A-5</a> describes Oracle JDBC driver support for PL/SQL data types. Note that PL/SQL data types include these categories:</p>
<ul>
<li>
<p>Scalar types</p>
</li>
<li>
<p>Scalar character types, which includes <code>BOOLEAN</code> and <code>DATE</code> data types</p>
</li>
<li>
<p>Composite types</p>
</li>
<li>
<p>Reference types</p>
</li>
<li>
<p>Large object (LOB) types</p>
</li>
</ul>
<div class="tblformal">
<p class="titleintable"><a id="JJDBC28912"></a><a id="sthref927"></a><a id="g1009796"></a>Table A-5 Support for PL/SQL Data Types</p>
<table class="cellalignment8" title="Support for PL/SQL Data Types " summary="table" dir="ltr">
<thead>
<tr class="cellalignment2">
<th class="cellalignment9" id="r1c1-t8">PL/SQL Data Type</th>
<th class="cellalignment9" id="r1c2-t8">Supported by JDBC Drivers?</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2">
<td class="cellalignment10" id="r2c1-t8" headers="r1c1-t8">
<p><span class="bold">Scalar Types:</span></p>
</td>
<td class="cellalignment10" headers="r2c1-t8 r1c2-t8">&nbsp;</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r3c1-t8" headers="r1c1-t8">
<p>BINARY INTEGER</p>
</td>
<td class="cellalignment10" headers="r3c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r4c1-t8" headers="r1c1-t8">
<p>DEC</p>
</td>
<td class="cellalignment10" headers="r4c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r5c1-t8" headers="r1c1-t8">
<p>DECIMAL</p>
</td>
<td class="cellalignment10" headers="r5c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r6c1-t8" headers="r1c1-t8">
<p>DOUBLE PRECISION</p>
</td>
<td class="cellalignment10" headers="r6c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r7c1-t8" headers="r1c1-t8">
<p>FLOAT</p>
</td>
<td class="cellalignment10" headers="r7c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r8c1-t8" headers="r1c1-t8">
<p>INT</p>
</td>
<td class="cellalignment10" headers="r8c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r9c1-t8" headers="r1c1-t8">
<p>INTEGER</p>
</td>
<td class="cellalignment10" headers="r9c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r10c1-t8" headers="r1c1-t8">
<p>NATURAL</p>
</td>
<td class="cellalignment10" headers="r10c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r11c1-t8" headers="r1c1-t8">
<p>NATURAL<span class="italic">n</span></p>
</td>
<td class="cellalignment10" headers="r11c1-t8 r1c2-t8">
<p>no</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r12c1-t8" headers="r1c1-t8">
<p>NUMBER</p>
</td>
<td class="cellalignment10" headers="r12c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r13c1-t8" headers="r1c1-t8">
<p>NUMERIC</p>
</td>
<td class="cellalignment10" headers="r13c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r14c1-t8" headers="r1c1-t8">
<p>PLS_INTEGER</p>
</td>
<td class="cellalignment10" headers="r14c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r15c1-t8" headers="r1c1-t8">
<p>POSITIVE</p>
</td>
<td class="cellalignment10" headers="r15c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r16c1-t8" headers="r1c1-t8">
<p>POSITIVE<span class="italic">n</span></p>
</td>
<td class="cellalignment10" headers="r16c1-t8 r1c2-t8">
<p>no</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r17c1-t8" headers="r1c1-t8">
<p>REAL</p>
</td>
<td class="cellalignment10" headers="r17c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r18c1-t8" headers="r1c1-t8">
<p>SIGNTYPE</p>
</td>
<td class="cellalignment10" headers="r18c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r19c1-t8" headers="r1c1-t8">
<p>SMALLINT</p>
</td>
<td class="cellalignment10" headers="r19c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r20c1-t8" headers="r1c1-t8">
<p><span class="bold">Scalar Character Types:</span></p>
</td>
<td class="cellalignment10" headers="r20c1-t8 r1c2-t8">&nbsp;</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r21c1-t8" headers="r1c1-t8">
<p>CHAR</p>
</td>
<td class="cellalignment10" headers="r21c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r22c1-t8" headers="r1c1-t8">
<p>CHARACTER</p>
</td>
<td class="cellalignment10" headers="r22c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r23c1-t8" headers="r1c1-t8">
<p>LONG</p>
</td>
<td class="cellalignment10" headers="r23c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r24c1-t8" headers="r1c1-t8">
<p>LONG RAW</p>
</td>
<td class="cellalignment10" headers="r24c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r25c1-t8" headers="r1c1-t8">
<p>NCHAR</p>
</td>
<td class="cellalignment10" headers="r25c1-t8 r1c2-t8">
<p>no (see Note)</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r26c1-t8" headers="r1c1-t8">
<p>NVARCHAR2</p>
</td>
<td class="cellalignment10" headers="r26c1-t8 r1c2-t8">
<p>no (see Note)</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r27c1-t8" headers="r1c1-t8">
<p>RAW</p>
</td>
<td class="cellalignment10" headers="r27c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r28c1-t8" headers="r1c1-t8">
<p>ROWID</p>
</td>
<td class="cellalignment10" headers="r28c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r29c1-t8" headers="r1c1-t8">
<p>STRING</p>
</td>
<td class="cellalignment10" headers="r29c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r30c1-t8" headers="r1c1-t8">
<p>UROWID</p>
</td>
<td class="cellalignment10" headers="r30c1-t8 r1c2-t8">
<p>no</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r31c1-t8" headers="r1c1-t8">
<p>VARCHAR</p>
</td>
<td class="cellalignment10" headers="r31c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r32c1-t8" headers="r1c1-t8">
<p>VARCHAR2</p>
</td>
<td class="cellalignment10" headers="r32c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r33c1-t8" headers="r1c1-t8">
<p>BOOLEAN</p>
</td>
<td class="cellalignment10" headers="r33c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r34c1-t8" headers="r1c1-t8">
<p>DATE</p>
</td>
<td class="cellalignment10" headers="r34c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r35c1-t8" headers="r1c1-t8">
<p><span class="bold">Composite Types:</span></p>
</td>
<td class="cellalignment10" headers="r35c1-t8 r1c2-t8">&nbsp;</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r36c1-t8" headers="r1c1-t8">
<p>RECORD</p>
</td>
<td class="cellalignment10" headers="r36c1-t8 r1c2-t8">
<p>no</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r37c1-t8" headers="r1c1-t8">
<p>TABLE</p>
</td>
<td class="cellalignment10" headers="r37c1-t8 r1c2-t8">
<p>no</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r38c1-t8" headers="r1c1-t8">
<p>VARRAY</p>
</td>
<td class="cellalignment10" headers="r38c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r39c1-t8" headers="r1c1-t8">
<p><span class="bold">Reference Types:</span></p>
</td>
<td class="cellalignment10" headers="r39c1-t8 r1c2-t8">&nbsp;</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r40c1-t8" headers="r1c1-t8">
<p>REF CURSOR types</p>
</td>
<td class="cellalignment10" headers="r40c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r41c1-t8" headers="r1c1-t8">
<p>object reference types</p>
</td>
<td class="cellalignment10" headers="r41c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r42c1-t8" headers="r1c1-t8">
<p><span class="bold">LOB Types:</span></p>
</td>
<td class="cellalignment10" headers="r42c1-t8 r1c2-t8">&nbsp;</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r43c1-t8" headers="r1c1-t8">
<p>BFILE</p>
</td>
<td class="cellalignment10" headers="r43c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r44c1-t8" headers="r1c1-t8">
<p>BLOB</p>
</td>
<td class="cellalignment10" headers="r44c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r45c1-t8" headers="r1c1-t8">
<p>CLOB</p>
</td>
<td class="cellalignment10" headers="r45c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r46c1-t8" headers="r1c1-t8">
<p>NCLOB</p>
</td>
<td class="cellalignment10" headers="r46c1-t8 r1c2-t8">
<p>yes</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The types <code>NATURAL</code>, <code>NATURAL</code><code><span class="codeinlineitalic">n</span></code>, <code>POSITIVE</code>, <code>POSITIVE</code><code><span class="codeinlineitalic">n</span></code>, and <code>SIGNTYPE</code> are subtypes of <code>BINARY INTEGER</code>.</p>
</li>
<li>
<p>The types <code>DEC</code>, <code>DECIMAL</code>, <code>DOUBLE PRECISION</code>, <code>FLOAT</code>, <code>INT</code>, <code>INTEGER</code>, <code>NUMERIC</code>, <code>REAL</code>, and <code>SMALLINT</code> are subtypes of <code>NUMBER</code>.</p>
</li>
<li>
<p>The types <code>NCHAR</code> and <code>NVARCHAR2</code> are supported indirectly. There is no corresponding <code>java.sql.Types</code> type, but if your application calls <code>formOfUse(NCHAR)</code>, then these types can be accessed. Refer to <a href="global.htm#CHDHHJDB">"NCHAR, NVARCHAR2, NCLOB and the defaultNChar Property in JDK 1.5"</a> for details.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1005081"></a><a id="JJDBC28913"></a>
<div class="sect1">
<h2 class="sect1">Embedded JDBC Escape Syntax</h2>
<p>Oracle <a id="sthref928"></a><a id="sthref929"></a>JDBC drivers support some embedded JDBC escape syntax, which is the syntax that you specify between curly braces. The current support is basic.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
JDBC escape syntax was previously known as SQL92 Syntax or SQL92 escape syntax.</div>
<p>This section describes the support offered by the drivers for the following constructs:</p>
<ul>
<li>
<p><a href="#i1005144">Time and Date Literals</a></p>
</li>
<li>
<p><a href="#i1005185">Scalar Functions</a></p>
</li>
<li>
<p><a href="#i1005208">LIKE Escape Characters</a></p>
</li>
<li>
<p><a href="#i1005227">Outer Joins</a></p>
</li>
<li>
<p><a href="#i1005244">Function Call Syntax</a></p>
</li>
</ul>
<p>Where driver support is limited, these sections also describe possible workarounds.</p>
<p class="subhead2"><a id="JJDBC28914"></a>Disabling Escape Processing</p>
<p>The <a id="sthref930"></a>processing for JDBC escape syntax is enabled by default, which results in the JDBC driver performing escape substitution before sending the SQL code to the database. If you want the driver to use regular Oracle <a id="sthref931"></a>SQL syntax, which is more efficient than JDBC escape syntax processing, then use this statement:</p>
<pre>
stmt.setEscapeProcessing(false);
</pre>
<a id="i1005144"></a><a id="JJDBC28915"></a>
<div class="sect2">
<h3 class="sect2">Time and Date Literals</h3>
<p><a id="sthref932"></a><a id="sthref933"></a>Databases differ in the syntax they use for date, time, and timestamp literals. JDBC supports dates and times written only in a specific format. This section describes the formats you must use for date, time, and timestamp literals in SQL statements.</p>
<a id="JJDBC28916"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref934"></a>
<h4 class="sect3">Date Literals</h4>
<p>The JDBC drivers support date literals in SQL statements written in the format:</p>
<pre>
{d 'yyyy-mm-dd'}
</pre>
<p>Where <code>yyyy-mm-dd</code> represents the year, month, and day. For example:</p>
<pre>
{d '1995-10-22'}
</pre>
<p>The JDBC drivers will replace this escape clause with the equivalent Oracle representation: "22 OCT 1995".</p>
<p>The following code snippet contains an example of using a date literal in a SQL statement.</p>
<pre>
// Connect to the database
// You can put a database name after the @ sign in the connection URL.
OracleDataSource ods = new OracleDataSource();
ods.setURL("jdbc:oracle:oci:@");
ods.setUser("scott");
ods.setPassword("tiger");
Connection conn = ods.getConnection();

// Create a Statement
Statement stmt = conn.createStatement ();

// Select the ename column from the emp table where the hiredate is Jan-23-1982
ResultSet rset = stmt.executeQuery 
                 ("SELECT ename FROM emp WHERE hiredate = {d '1982-01-23'}");

// Iterate through the result and print the employee names
while (rset.next ())
   System.out.println (rset.getString (1));
</pre></div>
<!-- class="sect3" -->
<a id="JJDBC28917"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref935"></a>
<h4 class="sect3">Time Literals</h4>
<p>The JDBC drivers support time literals in SQL statements written in the format:</p>
<pre>
{t 'hh:mm:ss'}
</pre>
<p>where, <code>hh:mm:ss</code> represents the hours, minutes, and seconds. For example:</p>
<pre>
{t '05:10:45'}
</pre>
<p>The JDBC drivers will replace this escape clause with the equivalent Oracle representation: "05:10:45".</p>
<p>If the time is specified as:</p>
<pre>
{t '14:20:50'}
</pre>
<p>Then the equivalent Oracle representation would be "14:20:50", assuming the server is using a 24-hour clock.</p>
<p>This code snippet contains an example of using a time literal in a SQL statement.</p>
<pre>
ResultSet rset = stmt.executeQuery 
                 ("SELECT ename FROM emp WHERE hiredate = {t '12:00:00'}");
</pre></div>
<!-- class="sect3" -->
<a id="JJDBC28918"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref936"></a>
<h4 class="sect3">Timestamp Literals</h4>
<p>The JDBC drivers support timestamp literals in SQL statements written in the format:</p>
<pre>
{ts 'yyyy-mm-dd hh:mm:ss.f...'} 
</pre>
<p>where <code>yyyy-mm-dd hh:mm:ss.f...</code> represents the year, month, day, hours, minutes, and seconds. The fractional seconds portion (<code>.f...</code>) is optional and can be omitted. For example: <code>{ts '1997-11-01 13:22:45'}</code> represents, in Oracle format, NOV 01 1997 13:22:45.</p>
<p>This code snippet contains an example of using a timestamp literal in a SQL statement.</p>
<pre>
ResultSet rset = stmt.executeQuery 
    ("SELECT ename FROM emp WHERE hiredate = {ts '1982-01-23 12:00:00'}");
</pre>
<p class="subhead2"><a id="JJDBC28919"></a>Mapping SQL DATE Data type to Java</p>
<p>Oracle Database 8<span class="italic">i</span> and earlier versions did not support <code>TIMESTAMP</code> data, but Oracle <code>DATE</code> data used to have a time component as an extension to the SQL standard. So, Oracle Database 8<span class="italic">i</span> and earlier versions of JDBC drivers mapped <code>oracle.sql.DATE</code> to <code>java.sql.Timestamp</code> to preserve the time component. Starting with Oracle Database 9.0.1, <code>TIMESTAMP</code> support was included and 9<span class="italic">i</span> JDBC drivers started mapping <code>oracle.sql.DATE</code> to <code>java.sql.Date</code>. This mapping was incorrect as it truncated the time component of Oracle <code>DATE</code> data. To overcome this problem, Oracle Database 11.1 introduced a new flag <code>mapDateToTimestamp</code>. The default value of this flag is <code>true</code>, which means that by default the drivers will correctly map <code>oracle.sql.DATE</code> to <code>java.sql.Timestamp</code>, retaining the time information. If you still want the incorrect but 10<span class="italic">g</span> compatible <code>oracle.sql.DATE</code> to <code>java.sql.Date</code> mapping, then you can get it by setting the value of <code>mapDateToTimestamp</code> flag to <code>false</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>In Oracle Database 11<span class="italic">g</span>, if you have an index on a DATE column to be used by a SQL query, then to obtain faster and accurate results, you must use the <code>setObject</code> method in the following way:</p>
<pre>
Date d = parseIsoDate(val);
Timestamp t = new Timestamp(d.getTime());
stmt.setObject(pos, new oracle.sql.DATE(t, (Calendar)UTC_CAL.clone()));
</pre>
<p>This is because if you use the <code>setDate</code> method, then the time component of the Oracle DATE data will be lost and if you use the <code>setTimestamp</code> method, then the index on the DATE column will not be used.</p>
</li>
<li>
<p>To overcome the problem of <code>oracle.sql.DATE</code> to <code>java.sql.Date</code> mapping, Oracle Database 9.2 had introduced a flag, <code>V8Compatible</code>. The default value of this flag was <code>false</code>, which allowed the mapping of Oracle <code>DATE</code> data to <code>java.sql.Date</code> data. But, users could retain the time component of the Oracle <code>DATE</code> data by setting the value of this flag to <code>true</code>. This flag is desupported in 11<span class="italic">g</span> because it controlled Oracle Database 8<span class="italic">i</span> compatibility, which is no longer supported.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1005185"></a><a id="JJDBC28920"></a>
<div class="sect2">
<h3 class="sect2">Scalar Functions</h3>
<p><a id="sthref937"></a><a id="sthref938"></a>Oracle JDBC drivers do not support all scalar functions. To find out which functions the drivers support, use the following methods supported by the Oracle-specific <code>oracle.jdbc.<a id="sthref939"></a><a id="sthref940"></a>OracleDatabaseMetaData</code> class and the standard Java <code>java.sql.DatabaseMetadata</code> interface:</p>
<ul>
<li>
<p><code><a id="sthref941"></a>getNumericFunctions()</code></p>
<p>Returns a comma-delimited list of math functions supported by the driver. For example, <code>ABS</code>, <code>COS</code>, <code>SQRT</code>.</p>
</li>
<li>
<p><code><a id="sthref942"></a>getStringFunctions()</code></p>
<p>Returns a comma-delimited list of string functions supported by the driver. For example, <code>ASCII</code>, <code>LOCATE</code>.</p>
</li>
<li>
<p><code><a id="sthref943"></a>getSystemFunctions()</code></p>
<p>Returns a comma-delimited list of system functions supported by the driver. For example, <code>DATABASE</code>, <code>USER</code>.</p>
</li>
<li>
<p><code><a id="sthref944"></a>getTimeDateFunctions()</code></p>
<p>Returns a comma-delimited list of time and date functions supported by the driver. For example, <code>CURDATE</code>, <code>DAYOFYEAR</code>, <code>HOUR</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle JDBC drivers support <code>fn</code>, the function keyword.</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1005208"></a><a id="JJDBC28921"></a>
<div class="sect2">
<h3 class="sect2">LIKE Escape Characters</h3>
<p><a id="sthref945"></a><a id="sthref946"></a>The characters <code>%</code> and <code>_</code> have special meaning in SQL <code>LIKE</code> clauses. You use <code>%</code> to match zero or more characters and <code>_</code> to match exactly one character. If you want to interpret these characters literally in strings, then you precede them with a special escape character. For example, if you want to use ampersand (<code>&amp;</code>) as the escape character, then you identify it in the SQL statement as:</p>
<pre>
Statement stmt = conn.createStatement ();

// Select the empno column from the emp table where the ename starts with '_'
ResultSet rset = stmt.executeQuery
          ("SELECT empno FROM emp WHERE ename LIKE '&amp;_%' {ESCAPE '&amp;'}");

// Iterate through the result and print the employee numbers
while (rset.next ())
   System.out.println (rset.getString (1));
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you want to use the backslash character (\) as an escape character, then you must enter it twice, that is, \\. For example:
<pre>
ResultSet rset = stmt.executeQuery("SELECT empno FROM emp
                WHERE ename LIKE '\\_%' {escape '\\'}");
</pre></div>
</div>
<!-- class="sect2" -->
<a id="i1005227"></a><a id="JJDBC28922"></a>
<div class="sect2">
<h3 class="sect2">Outer Joins</h3>
<p><a id="sthref947"></a><a id="sthref948"></a>Oracle JDBC drivers do not support the outer join syntax. The workaround is to use Oracle outer join syntax:</p>
<p>Instead of:</p>
<pre>
Statement stmt = conn.createStatement ();
ResultSet rset = stmt.executeQuery
     ("SELECT ename, dname 
       FROM {OJ dept LEFT OUTER JOIN emp ON dept.deptno = emp.deptno} 
       ORDER BY ename");
</pre>
<p>Use Oracle SQL syntax:</p>
<pre>
Statement stmt = conn.createStatement ();
ResultSet rset = stmt.executeQuery
     ("SELECT ename, dname 
       FROM emp b, dept a WHERE a.deptno = b.deptno(+)
       ORDER BY ename");
</pre></div>
<!-- class="sect2" -->
<a id="i1005244"></a><a id="JJDBC28923"></a>
<div class="sect2">
<h3 class="sect2">Function Call Syntax</h3>
<p><a id="sthref949"></a><a id="sthref950"></a>Oracle JDBC drivers support the following procedure and function call syntax:</p>
<p>Procedure calls:</p>
<pre>
{ call <span class="italic">procedure_name</span> (<span class="italic">argument1</span>, <span class="italic">argument2</span>,...) } 
</pre>
<p>Function calls:</p>
<pre>
{ ? = call <span class="italic">procedure_name</span> (<span class="italic">argument1</span>, <span class="italic">argument2</span>,...) }
</pre></div>
<!-- class="sect2" -->
<a id="JJDBC28924"></a>
<div class="sect2"><a id="sthref951"></a>
<h3 class="sect2"><a id="sthref952"></a>JDBC Escape Syntax to Oracle SQL Syntax Example</h3>
<p>You can write a simple program to translate JDBC escape syntax to Oracle SQL syntax. The following program prints the comparable Oracle SQL syntax for statements using JDBC escape syntax for function calls, date literals, time literals, and timestamp literals. In the program, the <a id="sthref953"></a><code>oracle.jdbc.<a id="sthref954"></a>OracleSql</code> class <code>parse()</code> method performs the conversions.</p>
<pre>
public class Foo 
{ 
   static oracle.jdbc.OracleDriver driver = new oracle.jdbc.OracleDriver();
   public static void main (String args[]) throws Exception 
   { 
      show ("{call foo(?, ?)}"); 
      show ("{? = call bar (?, ?)}"); 
      show ("{d '1998-10-22'}"); 
      show ("{t '16:22:34'}"); 
      show ("{ts '1998-10-22 16:22:34'}"); 
   } 
 
   public static void show (String s) throws Exception 
   { 
      System.out.println (s + " =&gt; " + 
         driver.processSqlEscapes(s)); 
   } 
}
</pre>
<p>The following code is the output that prints the comparable SQL syntax.</p>
<pre>
{call foo(?, ?)} =&gt; BEGIN foo(:1, :2); END; 
{? = call bar (?, ?)} =&gt; BEGIN :1 := bar (:2, :3); END;
{d '1998-10-22'} =&gt; TO_DATE ('1998-10-22', 'YYYY-MM-DD')
{t '16:22:34'} =&gt; TO_DATE ('16:22:34', 'HH24:MI:SS')
{ts '1998-10-22 16:22:34'} =&gt; TO_TIMESTAMP ('1998-10-22 16:22:34', 'YYYY-MM-DD 
HH24:MI:SS.FF')
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007713"></a><a id="JJDBC28925"></a>
<div class="sect1">
<h2 class="sect1">Oracle JDBC Notes and Limitations</h2>
<p>The following <a id="sthref955"></a><a id="sthref956"></a>limitations exist in the Oracle JDBC implementation, but all of them are either insignificant or have easy workarounds. This section covers the following topics:</p>
<ul>
<li>
<p><a href="#BABDIEBF">CursorName</a></p>
</li>
<li>
<p><a href="#BABEFGID">JDBC Outer Join Escapes</a></p>
</li>
<li>
<p><a href="#BABFECBJ">PL/SQL TABLE, BOOLEAN, and RECORD Types</a></p>
</li>
<li>
<p><a href="#BABJIFAA">IEEE 754 Floating Point Compliance</a></p>
</li>
<li>
<p><a href="#i1005022">Catalog Arguments to DatabaseMetaData Calls</a></p>
</li>
<li>
<p><a href="#BABIFGIF">SQLWarning Class</a></p>
</li>
<li>
<p><a href="#BABJEFCE">Executing DDL Statements</a></p>
</li>
<li>
<p><a href="#BABEJDBH">Binding Named Parameters</a></p>
</li>
</ul>
<a id="BABDIEBF"></a><a id="JJDBC28926"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref957"></a><a id="sthref958"></a><a id="sthref959"></a>CursorName</h3>
<p><a id="sthref960"></a>Oracle JDBC drivers do not support the <code>get getCursorName</code> and <code>setCursorName</code> methods, because there is no convenient way to map them to Oracle constructs. Oracle recommends using <code><a id="sthref961"></a>ROWID</code> instead.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oraint.htm#i1058701">"Oracle ROWID Type"</a> for more information about how to use and manipulate <code>ROWID</code>s.</div>
</div>
<!-- class="sect2" -->
<a id="BABEFGID"></a><a id="JJDBC28927"></a>
<div class="sect2">
<h3 class="sect2">JDBC Outer Join Escapes</h3>
<p><a id="sthref962"></a>Oracle JDBC drivers do not support JDBC outer join escapes. Use Oracle SQL syntax with + instead.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1005081">"Embedded JDBC Escape Syntax"</a></div>
</div>
<!-- class="sect2" -->
<a id="BABFECBJ"></a><a id="JJDBC28928"></a>
<div class="sect2">
<h3 class="sect2">PL/SQL TABLE, BOOLEAN, and RECORD Types</h3>
<p>It is not feasible for <a id="sthref963"></a><a id="sthref964"></a>Oracle JDBC drivers to support calling arguments or return values of the PL/SQL <code>RECORD</code>, <code>BOOLEAN</code>, or table with non-scalar element types. However, Oracle JDBC drivers support PL/SQL index-by table of scalar element types.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oraint.htm#i1018084">"Accessing PL/SQL Index-by Tables"</a></div>
<p>As a workaround to PL/SQL <code>RECORD</code>, <code>BOOLEAN</code>, or non-scalar table types, create container procedures that handle the data as types supported by JDBC. For example, to wrap a stored procedure that uses PL/SQL boolean, create a stored procedure that takes a character or number from JDBC and passes it to the original procedure as <code>BOOLEAN</code> or, for an output parameter, accepts a <code>BOOLEAN</code> argument from the original procedure and passes it as a <code>CHAR</code> or <code>NUMBER</code> to JDBC. Similarly, to wrap a stored procedure that uses PL/SQL records, create a stored procedure that handles a record in its individual components, such as <code>CHAR</code> and <code>NUMBER</code>, or in a structured object type. To wrap a stored procedure that uses PL/SQL tables, break the data into components or perhaps use Oracle collection types.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="apxtblsh.htm#i1005380">"Boolean Parameters in PL/SQL Stored Procedures"</a> for an example of a workaround for <code>BOOLEAN</code>.</div>
</div>
<!-- class="sect2" -->
<a id="BABJIFAA"></a><a id="JJDBC28929"></a>
<div class="sect2">
<h3 class="sect2">IEEE 754 Floating Point Compliance</h3>
<p><a id="sthref965"></a><a id="sthref966"></a><a id="sthref967"></a>The arithmetic for the Oracle <code>NUMBER</code> type does not comply with the IEEE 754 standard for floating-point arithmetic. Therefore, there can be small disagreements between the results of computations performed by Oracle and the same computations performed by Java.</p>
<p>Oracle stores numbers in a format compatible with decimal arithmetic and guarantees 38 decimal digits of precision. It represents zero, minus infinity, and plus infinity exactly. For each positive number it represents, it represents a negative number of the same absolute value.</p>
<p>It represents every positive number between 10<sup>-30</sup> and (1 &ndash; 10<sup>-38</sup>) * 10<sup>126</sup> to full 38-digit precision.</p>
</div>
<!-- class="sect2" -->
<a id="i1005022"></a><a id="JJDBC28930"></a>
<div class="sect2">
<h3 class="sect2">Catalog Arguments to DatabaseMetaData Calls</h3>
<p><a id="sthref968"></a><a id="sthref969"></a><a id="sthref970"></a>Certain <code>DatabaseMetaData</code> methods define a <code>catalog</code> parameter. This parameter is one of the selection criteria for the method. Oracle does not have multiple catalogs, but it does have packages.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oraperf.htm#i1023518">"Reporting DatabaseMetaData TABLE_REMARKS"</a> for information about how Oracle JDBC drivers treat the <code>catalog</code> argument.</div>
</div>
<!-- class="sect2" -->
<a id="BABIFGIF"></a><a id="JJDBC28931"></a>
<div class="sect2">
<h3 class="sect2">SQLWarning Class</h3>
<p><a id="sthref971"></a><a id="sthref972"></a>The <code>java.sql.SQLWarning</code> class provides information about a database access warning. Warnings typically contain a description of the warning and a code that identifies the warning. Warnings are silently chained to the object whose method caused it to be reported. Oracle JDBC drivers generally do not support <code>SQLWarning</code>. As an exception to this, scrollable result set operations do generate SQL warnings, but the <code>SQLWarning</code> instance is created on the client, not in the database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="getsta.htm#i1018335">"Processing SQL Exceptions"</a></div>
</div>
<!-- class="sect2" -->
<a id="BABJEFCE"></a><a id="JJDBC28932"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Executing DDL Statements</h3>
<p>You must execute Data Definition Language (DDL) statements with <code>Statement</code> objects. If you use <code>PreparedStatements</code> objects or <code>CallableStatements</code> objects, then the DDL statement takes effect only on the first execution. This can cause unexpected behavior if the SQL statements are in a statement cache.</p>
</div>
<!-- class="sect2" -->
<a id="BABEJDBH"></a><a id="JJDBC28933"></a>
<div class="sect2">
<h3 class="sect2">Binding Named Parameters</h3>
<p>Binding by name is not supported when using the <code>set</code><code><span class="codeinlineitalic">XXX</span></code> methods. Under certain circumstances, previous versions of Oracle JDBC drivers have allowed binding statement variables by name when using the <code>set</code><code><span class="codeinlineitalic">XXX</span></code> methods. In the following statement, the named variable <code>EmpId</code> would be bound to the integer <code>314159</code>.</p>
<pre>
PreparedStatement p = conn.prepareStatement
  ("SELECT name FROM emp WHERE id = :EmpId");
  p.setInt(1, 314159);
</pre>
<p>This capability to bind by name using the <code>set</code><code><span class="codeinlineitalic">XXX</span></code> methods is not part of the JDBC specification, and Oracle does not support it. The JDBC drivers can throw a <code>SQLException</code> or produce unexpected results. Starting from Oracle Database 10<span class="italic">g</span> JDBC drivers, bind by name is supported using the <code>set</code><code><span class="codeinlineitalic">XXX</span></code><code>AtName</code> methods.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oraint.htm#CHDBGJFG">"Interface oracle.jdbc.OracleCallableStatement"</a> and <a href="oraint.htm#CHDIIDBE">"Interface oracle.jdbc.OraclePreparedStatement"</a></div>
<p>The bound values are not copied by the drivers until you call the <code>execute</code> method. So, changing the bound value before calling the <code>execute</code> method could change the bound value. For example, consider the following code snippet:</p>
<pre>
PreparedStatement p;
.......
Date d = new Date(1181676033917L);
p.setDate(1, d);
d.setTime(0);
p.executeUpdate();
</pre>
<p>This code snippet inserts <code>Date(0)</code> in the database instead of <code>Date(1181676033917L)</code> because the bound values are not copied by JDBC driver implementation for performance reasons.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1">
<tr>
<td class="cellalignment10">
<table class="cellalignment6">
<tr>
<td class="cellalignment5"><a href="part9.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5"><a href="apxracfan.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment13">
<table class="cellalignment4">
<tr>
<td class="cellalignment5"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
