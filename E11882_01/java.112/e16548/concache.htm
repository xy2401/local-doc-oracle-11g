<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Implicit Connection Caching</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.1" />
<meta name="dcterms.created" content="2011-09-15T1:42:58Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database JDBC Developer's Guide" />
<meta name="dcterms.identifier" content="E16548-03" />
<meta name="dcterms.isVersionOf" content="JJDBC" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="stmtcach.htm" title="Previous" type="text/html" />
<link rel="Next" href="rlb.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e16548.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">33/54</span> <!-- End Header --><a id="CDEGABII"></a><a id="JJDBC28685"></a>
<h1 class="chapter"><span class="secnum">21</span> Implicit Connection Caching</h1>
<p>Connection caching, generally implemented in the middle tier, is a means of keeping and using the cache of physical database connections.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting from Oracle Database 11<span class="italic">g</span> Release 2 (11.2), this feature has been deprecated, and replaced with Universal Connection Pool (UCP) for JDBC. Oracle recommends that you take advantage of the new architecture, which is more powerful and offers better performance. Refer to the following link for more information
<pre>
<a href="http://www.oracle.com/technology/tech/java/sqlj_jdbc/index.html">http://www.oracle.com/technology/tech/java/sqlj_jdbc/index.html</a>
</pre></div>
<p>The <a id="sthref727"></a>implicit connection cache is an improved Java Database Connectivity (JDBC) 3.0-compliant connection cache implementation for <code>DataSource</code>. Java and Java2 Platform, Enterprise Edition (J2EE) applications benefit from transparent access to the cache, support for multiple users, and the ability to request connections based on user-defined profiles.</p>
<p>An application turns the implicit connection cache on by calling <code>setConnectionCachingEnabled(true)</code> on an <code>OracleDataSource</code>. After implicit caching is turned on, the first connection request to the <code>OracleDataSource</code> transparently creates a connection cache. There is no need for application developers to write their own cache implementations.</p>
<p>This chapter is divided into the following sections:</p>
<ul>
<li>
<p><a href="#CDEHJDJF">The Implicit Connection Cache</a></p>
</li>
<li>
<p><a href="#CDECFEIC">Using the Connection Cache</a></p>
</li>
<li>
<p><a href="#CDEFFBFC">Connection Attributes</a></p>
</li>
<li>
<p><a href="#CDEBCBJC">Connection Cache Properties</a></p>
</li>
<li>
<p><a href="#CDECGHJE">Connection Cache Manager API</a></p>
</li>
<li>
<p><a href="#CDEHHCDH">Advanced Topics</a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The concept of connection caching is not relevant to the server-side internal driver, where you always use the default connection. Connection caching is relevant only to the client-side JDBC drivers and the server-side Thin driver.</div>
</li>
</ul>
<a id="CDEHJDJF"></a><a id="JJDBC28686"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">The Implicit Connection Cache</h2>
<p>The connection caching architecture has been redesigned so that caching is transparently integrated into the data source architecture.</p>
<p>The connection cache uses the concept of physical connections and logical connections. Physical connections are the actual connections returned by the database and logical connections are containers used by the cache to manipulate physical connections. You can think of logical connections as handles. The caches always return logical connections, which implement the same interfaces as physical connections.</p>
<p>The implicit connection cache offers the following:</p>
<ul>
<li>
<p>Driver independence</p>
<p>Both the JDBC Thin and JDBC Oracle Call Interface (OCI) drivers support the implicit connection cache.</p>
</li>
<li>
<p>Transparent access to the JDBC connection cache</p>
<p>After an application turns implicit caching on, it uses the standard <code>OracleDataSource</code> application programming interfaces (APIs) to get connections. With caching enabled, all connection requests are serviced from the connection cache.</p>
<p>When an application calls the <code>OracleConnection.close</code> method to close the logical connection, the physical connection is returned to the cache.</p>
</li>
<li>
<p>Single cache per <code>OracleDataSource</code> instance</p>
<p>When connection caching is turned on, each cache-enabled <code>OracleDataSource</code> has exactly one cache associated with it. All connections obtained through that data source, no matter what user name and password are used, are returned to the cache. When an application requests a connection from the data source, the cache either returns an existing connection or creates a new connection with matching authentication information.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Caches cannot be shared between <code>DataSource</code> instances. There is a one-to-one mapping between cache-enabled <code>DataSource</code> instances and caches.</div>
</li>
<li>
<p>Heterogeneous user names and passwords per cache</p>
<p>Unlike the previous cache implementation, all connections obtained through the same data source are stored in a common cache, no matter what user name and password the connection requests.</p>
</li>
<li>
<p>Support for JDBC 3.0 connection caching, including support for multiple users and the required cache properties</p>
</li>
<li>
<p>Property-based configuration</p>
<p>Cache properties define the behavior of the cache. The supported properties set timeouts, the number of connections to be held in the cache, and so on. Using these properties, applications can reclaim and reuse abandoned connections. The implicit connection cache supports all the JDBC 3.0 connection cache properties.</p>
</li>
<li>
<p>OracleConnectionCacheManager</p>
<p>The new <code>OracleConnectionCacheManager</code> class provides a rich set of administrative APIs that applications can use to manage the connection cache. Each virtual machine has one distinguished instance of <code>OracleConnectionCacheManager</code>. Applications manage a cache through the single <code>OracleConnectionCacheManager</code> instance.</p>
</li>
<li>
<p>User-defined connection attributes</p>
<p>The implicit connection cache supports user-defined connection attributes that can be used to determine which connections are retrieved from the cache. Connection attributes can be thought of as labels whose semantics are defined by the application, not by the caching mechanism.</p>
</li>
<li>
<p>Callback mechanism</p>
<p>The implicit connection cache provides a mechanism for users to define cache behavior when a connection is returned to the cache, when handling abandoned connections, and when a connection is requested but none is available in the cache.</p>
</li>
<li>
<p>Connect-time load balancing</p>
<p>Implicit connection caching provides connect-time load balancing when a connection is first created by the application. The database listener distributes connection creation across Oracle Real Application Clusters instances that would perform the best at the time of connection creation.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink RACAD7122" href="../../rac.112/e41960/hafeats.htm#RACAD7122"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a></div>
</li>
<li>
<p>Run-time connection load balancing</p>
<p>Run-time connection load balancing of work requests uses Service Metrics to route work requests to an Oracle Real Application Clusters instance that offers the best performance. Selecting a connection from the cache based on service, to execute a work request, greatly increases the throughput and scalability.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="rlb.htm#CHDCEHBJ">Chapter 22, " Run-Time Connection Load Balancing"</a> and <a class="olink RACAD" href="../../rac.112/e41960/toc.htm"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a></div>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CDECFEIC"></a><a id="JJDBC28687"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using the Connection Cache</h2>
<p>This section discusses how applications use the implicit connection cache. It covers the following topics:</p>
<ul>
<li>
<p><a href="#CACDBBJI">Turning Caching On</a></p>
</li>
<li>
<p><a href="#CACDBFAD">Opening a Connection</a></p>
</li>
<li>
<p><a href="#CACICEDF">Setting Connection Cache Name</a></p>
</li>
<li>
<p><a href="#CACHDHBE">Setting Connection Cache Properties</a></p>
</li>
<li>
<p><a href="#CACBFJAA">Closing a Connection</a></p>
</li>
<li>
<p><a href="#CACFIJJB">Implicit Connection Cache Example</a></p>
</li>
</ul>
<a id="CACDBBJI"></a><a id="JJDBC28688"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Turning Caching On</h3>
<p>An application turns the implicit connection cache on by calling <code>OracleDataSource.setConnectionCachingEnabled(true)</code>. After implicit caching is turned on, the first connection request to the <code>OracleDataSource</code> class transparently creates a connection cache.</p>
<p><a href="#CACGHAIA">Example 21-1</a> provides a sample code that uses the implicit connection cache.</p>
<div class="example">
<p class="titleinexample"><a id="CACGHAIA"></a><a id="JJDBC28689"></a>Example 21-1 Using the Implicit Connection Cache</p>
<pre>
// Example to show binding of OracleDataSource to JNDI,
// then using implicit connection cache 
 
import oracle.jdbc.pool.*; // import the pool package
 
Context ctx = new InitialContext(ht);
OracleDataSource ods = new OracleDataSource();
 
// Set DataSource properties
ods.setUser("Scott");
ods.setConnectionCachingEnabled(true);    // Turns on caching
ctx.bind("MyDS", ods);
// ...
// Retrieve DataSource from the InitialContext
ods =(OracleDataSource) ctx. lookup("MyDS");  
 
// Transparently create cache and retrieve connection 
conn = ods.getConnection();
// ...
conn.close();  // return connection to the cache
// ...
ods.close() // close datasource and clean up the cache
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CACDBFAD"></a><a id="JJDBC28690"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Opening a Connection</h3>
<p>After you have turned connection caching on, whenever you retrieve a connection through the <code>OracleDataSource.getConnection</code> method, the JDBC drivers check to see if a connection is available in the cache.</p>
<p>The <code>getConnection</code> method checks if there are any free physical connections in the cache that match the specified criteria. If a match is found, then a logical connection is returned, wrapping the physical connection. If no physical connection match is found, then a new physical connection is created, wrapped in a logical connection, and returned.</p>
<p>There are four variations on <code>getConnection</code>, two that make no reference to the connection cache and two that specify which sort of connections the cache may return. The non-cache-specific <code>getConnection</code> methods behave in the standard manner.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When implicit connection cache is enabled, the connection returned by <code>OracleDataSource.getConnection</code> may not have the state reset. You must, therefore, reset all the connection states, such as auto-commit, batch size, prefetch size, transaction status, and transaction isolation, before putting the connection back into the cache.</div>
</div>
<!-- class="sect2" -->
<a id="CACICEDF"></a><a id="JJDBC28691"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Setting Connection Cache Name</h3>
<p>The <code>ConnectionCacheName</code> property of <code>OracleDataSource</code> is an optional property used by the Connection Cache Manager to manage a connection cache. You can set this property by calling the following method:</p>
<pre>
public void synchronized setConnectionCacheName(String cacheName) throws SQLException
</pre>
<p>When this property is set, the name is used to uniquely identify the cache accessed by the cache-enabled <code>OracleDataSource</code>. If the property is not set, then a default cache name is created using the convention <code><span class="codeinlineitalic">DataSourceName#HexRepresentationOfNumberOfCaches</span></code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>getConnectionCacheName()</code> method will return the name of the connection cache only if the <code>setConnectionCacheName</code> method is called after the <code>setConnectionCachingEnabled</code> method is called.</div>
</div>
<!-- class="sect2" -->
<a id="CACHDHBE"></a><a id="JJDBC28692"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Setting Connection Cache Properties</h3>
<p>You can fine-tune the behavior of the implicit connection cache using the <code>setConnectionCacheProperties</code> method to set various connection properties.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CDEBCBJC">"Connection Cache Properties"</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Before setting the cache-specific properties, you must enable caching on the data source; otherwise the <code>setConnectionCacheProperties</code> method will have no effect.</p>
</li>
<li>
<p>Although these properties govern the behavior of the connection cache, they are set on the data source, and not on the connection or on the cache itself.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CACBFJAA"></a><a id="JJDBC28693"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Closing a Connection</h3>
<p>An application returns a connection to the cache by calling the <code>close</code> method. There are two variants of the <code>close</code> method: one with no arguments and one that takes a <code>Connection</code> object as argument.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Applications must close connections to ensure that the connections are returned to the cache.</p>
</li>
<li>
<p>When implicit connection cache is enabled, you must reset all the connection states, such as auto-commit, batch size, prefetch size, transaction status, and transaction isolation, before putting the connection back into the cache. This ensures that any subsequent connection retrieved from the cache will have its state reset.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CACFIJJB"></a><a id="JJDBC28694"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref728"></a>Implicit Connection Cache Example</h3>
<p><a href="#CDEDAIGA">Example 21-2</a> demonstrates creating a data source, setting its caching and data source properties, retrieving a connection, and closing that connection in order to return it to the cache.</p>
<div class="example">
<p class="titleinexample"><a id="CDEDAIGA"></a><a id="JJDBC28695"></a>Example 21-2 Connection Cache Example</p>
<pre>
import java.sql.*;
import javax.sql.*;
import java.util.*;
import javax.naming.*;
import javax.naming.spi.*;
import oracle.jdbc.*;
import oracle.jdbc.pool.*;
 
...
  
    // create a DataSource    
    OracleDataSource ods = new OracleDataSource();
    
    // set cache properties 
    java.util.Properties prop = new java.util.Properties();
    prop.setProperty("MinLimit", "2");    
    prop.setProperty("MaxLimit", "10");    
 
    // set DataSource properties    
    String url = "jdbc:oracle:oci8:@";    
    ods.setURL(url);    
    ods.setUser("hr");    
    ods.setPassword("hr");    
    ods.setConnectionCachingEnabled(true); // be sure set to true    
    ods.setConnectionCacheProperties (prop);    
    ods.setConnectionCacheName("ImplicitCache01"); // this cache's name    
 
    // We need to create a connection to create the cache 
    Connection conn = ds.getConnection(user, pass);
    Statement  stmt  = conn.createStatement();
    ResultSet  rset  = stmt.executeQuery("select user from dual");
    conn.close(); 
     
    ods.close();
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CDEFFBFC"></a><a id="JJDBC28696"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref729"></a>Connection Attributes</h2>
<p>Each connection obtained from a data source can have user-defined attributes. Attributes are specified by the application developer and are <code>java.lang.Properties</code> name and value pairs.</p>
<p>An application can use connection attributes to supply additional semantics to identify connections. For instance, an application may create an attribute named <code>connection_type</code> and then assign it the value <code>payroll</code> or <code>inventory</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The semantics of connection attributes are entirely application-defined. The connection cache itself enforces no restrictions on the key or value of connection attributes.</div>
<p>The methods that get and set connection attributes are found on the <code>OracleConnection</code> interface. This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CACGGCDE">Getting Connections</a></p>
</li>
<li>
<p><a href="#CDEEIAAA">Setting Connection Attributes</a></p>
</li>
<li>
<p><a href="#CACGEEII">Checking Attributes of a Returned Connection</a></p>
</li>
<li>
<p><a href="#CACDBGHG">Connection Attribute Example</a></p>
</li>
</ul>
<a id="CACGGCDE"></a><a id="JJDBC28697"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Getting Connections</h3>
<p>The first connection you retrieve has no attributes. You must set them. After you have set attributes on a connection, you can request the connection by specifying its attribute, using the specialized forms of the <code>getConnection</code> method:</p>
<ul>
<li>
<p><code>getConnection(java.util.Properties cachedConnectionAttributes</code></p>
<p>Requests a database connection that matches the specified <code>cachedConnectionAttributes</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For a discussion on connection attributes, see <a href="#CDEFJEHD">"Other Properties"</a> .</div>
</li>
<li>
<p><code>getConnection(java.lang.String user, java.lang.String password, java.util.Properties cachedConnectionAttributes)</code></p>
<p>Requests a database connection from the implicit connection cache that matches the specified <code>user</code>, <code>password</code> and <code>cachedConnectionAttributes</code>. If null values are passed for <code>user</code> and <code>password</code>, the <code>DataSource</code> defaults are used.</p>
</li>
</ul>
<p class="subhead2"><a id="JJDBC28698"></a>Attribute Matching Rules</p>
<p>The rules for matching <code>connectionAttributes</code> come in two variations:</p>
<ul>
<li>
<p>Basic</p>
<p>In this variation, the cache is searched to retrieve the connection that matches the attributes. The connection search mechanism as follows:</p>
<ol>
<li>
<p>If an exact match is found, the connection is returned to the caller.</p>
</li>
<li>
<p>If an exact match is not found and the <code>ClosestConnectionMatch</code> data source property is set, then the connection with the closest match is returned. The closest matched connection is one that has the highest number of the original attributes matched. Note that the closest matched connection may match a subset of the original attributes, but does not have any attributes that are not part of the original list. For example, if the original list of attributes is A, B and C, then a closest match may have A and B set, but never a D.</p>
</li>
<li>
<p>If none of the existing connections matches, a new connection is returned. The new connection is created using the user name and password set on the <code>DataSource</code>. If <code>getConnection(String, String, java.util.Properties)</code> is called, then the user name and password passed as arguments are used to open the new connection.</p>
</li>
</ol>
</li>
<li>
<p>Advanced</p>
<p>In this variation, the attributes may be associated with weights. The connection search mechanism is similar to the basic <code>connectionAttributes</code> based search, except that the connections are searched not only based on the <code>connectionAttributes</code>, but also using a set of weights that are associated with the keys on the <code>connectionAttributes</code>. These weights are assigned to the keys as a one-time operation and is supported as a connection cache property, <code>AttributeWeights</code>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CDEEIAAA"></a><a id="JJDBC28699"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Setting Connection Attributes</h3>
<p>An application sets connection attributes using the following:</p>
<pre>
applyConnectionAttributes(java.util.Properties connAttr)
</pre>
<p>No validation is done on <code>connAttr</code>. Applying connection attributes is cumulative. Each time you call <code>applyConnectionAttributes</code>, the <code>connAttr</code> attribute you supply is added to those previously in force.</p>
</div>
<!-- class="sect2" -->
<a id="CACGEEII"></a><a id="JJDBC28700"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Checking Attributes of a Returned Connection</h3>
<p>When an application requests a connection with specified attributes, it is possible that no match will be found in the connection cache. When this happens, the connection cache creates a connection with no attributes and returns it. The connection cache cannot create a connection with the requested attributes, because the Connection Cache manager is ignorant of the semantics of the attributes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the <code>closestConnectionMatch</code> property has been set, then the cache manager looks for close attribute matches rather than exact matches.</div>
<p>For this reason, applications should always check the attributes of a returned connection. To do this, use the <code>getUnMatchedConnectionAttributes</code> method, which returns a list of any attributes that were not matched in retrieving the connection. If the return value of this method is <code>null</code>, you know that you must set all the connection attributes.</p>
</div>
<!-- class="sect2" -->
<a id="CACDBGHG"></a><a id="JJDBC28701"></a>
<div class="sect2">
<h3 class="sect2">Connection Attribute Example</h3>
<p><a href="#CDEDJABC">Example 21-3</a> illustrates using connection attributes.</p>
<div class="example">
<p class="titleinexample"><a id="CDEDJABC"></a><a id="JJDBC28702"></a>Example 21-3 Using Connection Attributes</p>
<pre>
    java.util.Properties connAttr = new java.util.Properties();
    connAttr.setProperty("connection_type", "payroll");
 
    // retrieve connection that matches attributes
    Connection conn = ds.getConnection(connAttr); 
    // Check to see which attributes weren't matched
   unmatchedProp = ((OracleConnection)conn).getUnMatchedConnectionAttributes();
   if ( unmatchedProp != null )
    {
    // apply attributes to the connection
    ((OracleConnection)conn).applyConnectionAttributes(connAttr);  
    }
    // verify whether conn contains property after apply attributes
    connProp = ((OracleConnection)conn).getConnectionAttributes(); 
    listProperties (connProp);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CDEBCBJC"></a><a id="JJDBC28703"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref730"></a>Connection Cache Properties</h2>
<p>The connection cache properties govern the characteristics of a connection cache. This section lists the supported connection cache properties. It covers the following topics:</p>
<ul>
<li>
<p><a href="#CACGCFDE">Limit Properties</a></p>
</li>
<li>
<p><a href="#CACHHIJF">TIMEOUT Properties</a></p>
</li>
<li>
<p><a href="#CDEFJEHD">Other Properties</a></p>
</li>
<li>
<p><a href="#CACBBCGJ">Connection Property Example</a></p>
</li>
</ul>
<p>Applications set cache properties in one of the following ways:</p>
<ul>
<li>
<p>Using the <code>OracleDataSource</code> method <code>setConnectionCacheProperties</code></p>
</li>
<li>
<p>When creating a cache using <code>OracleConnectionCacheManager</code></p>
</li>
<li>
<p>When reinitializing a cache using <code>OracleConnectionCacheManager</code></p>
</li>
</ul>
<a id="CACGCFDE"></a><a id="JJDBC28704"></a>
<div class="sect2">
<h3 class="sect2">Limit Properties</h3>
<p>These properties control the size of the cache.</p>
<p class="subhead2"><a id="CDEGEECB"></a><a id="JJDBC28705"></a>InitialLimit</p>
<p>Sets how many connections are created in the cache when it is created or reinitialized. When this property is set to an integer value greater than 0, creating or reinitializing the cache automatically creates the specified number of connections, filling the cache in advance of need.</p>
<p>Default: 0</p>
<p class="subhead2"><a id="CDEHIEFA"></a><a id="JJDBC28706"></a>MaxLimit</p>
<p>Sets the maximum number of connection instances the cache can hold. The default value is <code>Integer.MAX_VALUE</code>, meaning that there is no limit enforced by the connection cache, so that the number of connections is limited only by the number of database sessions configured for the database.</p>
<p>Default: <code>Integer.MAX_VALUE</code> (no limit)</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the number of concurrent connections exceeds the maximum number of sessions configured at the database server, then you will get <code>ORA-00018</code> error. To avoid this error, you must set a value for the <code>MaxLimit</code> property. This value should be less than the value of the <code>SESSIONS</code> parameter configured for the database server.</div>
<p class="subhead2"><a id="CDEJIBGI"></a><a id="JJDBC28707"></a>MaxStatementsLimit</p>
<p>Sets the maximum number of statements that a connection keeps open. When a cache has this property set, reinitializing the cache or closing the data source automatically closes all cursors beyond the specified <code>MaxStatementsLimit</code>.</p>
<p>Default: 0</p>
<p class="subhead2"><a id="JJDBC28708"></a>MinLimit</p>
<p>Sets the minimum number of connections the cache maintains.</p>
<p>Default: 0</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Setting the <code>MinLimit</code> property does not initialize the cache to contain the minimum number of connections. To do this, use the <code>InitialLimit</code> property.</p>
</li>
<li>
<p>When <code>InitialLimit</code> is greater than <code>MinLimit</code>, it is possible to have any number of connections specified by <code>InitialLimit</code> up to a value specified by <code>MaxLimit</code>. Therefore, <code>InitialLimit</code> does not depend on <code>MinLimit</code>.</p>
</li>
<li>
<p>Connections can fall below the minimum limit set on the connection pool when JDBC Fast Connection Failover DOWN events are processed. The processing removes affected connections from the pool. <code>MinLimit</code> will be honored as requests to the connection pool increase and the number of connections get past the <code>MinLimit</code> value.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CACHHIJF"></a><a id="JJDBC28709"></a>
<div class="sect2">
<h3 class="sect2">TIMEOUT Properties</h3>
<p>These properties control the lifetime of an element in the cache.</p>
<p class="subhead2"><a id="JJDBC28710"></a>InactivityTimeout</p>
<p>Sets the maximum time a physical connection can remain idle in a connection cache. An idle connection is one that is not active and does not have a logical handle associated with it. When <code>InactivityTimeout</code> expires, the underlying physical connection is closed. However, the size of the cache is not allowed to shrink below <code>minLimit</code>, if it has been set.</p>
<p>Default: 0 (no timeout in effect)</p>
<p class="subhead2"><a id="JJDBC28711"></a>TimeToLiveTimeout</p>
<p>Sets the maximum time in seconds that a logical connection can remain open. When <code>TimeToLiveTimeout</code> expires, the logical connection is unconditionally closed, the relevant statement handles are canceled, and the underlying physical connection is returned to the cache for reuse.</p>
<p>Default: 0 (no timeout in effect)</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGEEEA">"Use Cases for TimeToLiveTimeout and AbandonedConnectionTimeout"</a></div>
<p class="subhead2"><a id="JJDBC28712"></a>AbandonedConnectionTimeout</p>
<p>Sets the maximum time that a connection can remain unused before the connection is closed and returned to the cache. A connection is considered unused if it has not had SQL database activity.</p>
<p>When <code>AbandonedConnectionTimeout</code> is set, JDBC monitors SQL database activity on each logical connection. For example, when <code>stmt.execute</code> is called on the connection, a heartbeat is registered to convey that this connection is active. The heartbeats are set at each database execution. If a connection has been inactive for the specified amount of time, the underlying connection is reclaimed and returned to the cache for reuse.</p>
<p>Default: 0 (no timeout in effect)</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGEEEA">"Use Cases for TimeToLiveTimeout and AbandonedConnectionTimeout"</a></div>
<p class="subhead2"><a id="JJDBC28713"></a>PropertyCheckInterval</p>
<p>Sets the time interval at which the Connection Cache Manager inspects and enforces all specified cache properties. <code>PropertyCheckInterval</code> is set in seconds.</p>
<p>Default: 900 seconds</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NETAG0144" href="../../network.112/e41945/performance.htm#NETAG0144"><span class="italic">Oracle Database Net Services Administrator's Guide</span></a></div>
</div>
<!-- class="sect2" -->
<a id="CDEFJEHD"></a><a id="JJDBC28714"></a>
<div class="sect2">
<h3 class="sect2">Other Properties</h3>
<p>These properties control miscellaneous cache behavior.</p>
<p class="subhead2"><a id="JJDBC28715"></a>AttributeWeights</p>
<p><code>AttributeWeights</code> sets the weight for each attribute set on the connection.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CDEGAHBF">"AttributeWeights"</a></div>
<p class="subhead2"><a id="CDEEFFFA"></a><a id="JJDBC28716"></a>ClosestConnectionMatch</p>
<p><code>ClosestConnectionMatch</code> causes the connection cache to retrieve the connection with the closest approximation to the specified connection attributes.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CDEFCIBH">"ClosestConnectionMatch"</a></div>
<p class="subhead2"><a id="JJDBC28717"></a>ConnectionWaitTimeout</p>
<p>Specifies cache behavior when a connection is requested and there are already <a href="#CDEHIEFA">MaxLimit</a> connections active. If <code>ConnectionWaitTimeout</code> is equal to zero, then each connection request waits for zero seconds, that is, <code>null</code> connection is returned immediately. If <code>ConnectionWaitTimeout</code> is greater than zero, then each connection request waits for the specified number of seconds or until a connection is returned to the cache. If no connection is returned to the cache before the timeout elapses, then the connection request returns <code>null</code>.</p>
<p>Default: zero</p>
<p class="subhead2"><a id="JJDBC28718"></a>LowerThresholdLimit</p>
<p>Sets the lower threshold limit on the cache. The default is 20 percent of the <code>MaxLimit</code> on the connection cache. This property is used whenever a <code>releaseConnection(</code>) cache callback method is registered.</p>
<p class="subhead2"><a id="JJDBC28719"></a>ValidateConnection</p>
<p>Setting <code>ValidateConnection</code> to <code>true</code> causes the connection cache to test every connection it retrieves against the underlying database. If a valid connection cannot be retrieved, then an exception is thrown.</p>
<p>Default: <code>false</code></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In Oracle Database 11<span class="italic">g</span> Release 1 (11.1) and later versions, there is a change in connection cache behavior. If both the <code>ValidateConnection</code> property and the Database <code>CONNECT_TIME</code> resource limit are enabled, then the connection cache may return a connection that exceeds the value set for the <code>CONNECT_TIME</code> limit, without throwing an exception. An exception is instead thrown at the next statement execution on this connection.
<p>Oracle recommends not setting the <code>CONNECT_TIME</code> limit while enabling the <code>ValidateConnection</code> property.</p>
</div>
</div>
<!-- class="sect2" -->
<a id="CACBBCGJ"></a><a id="JJDBC28720"></a>
<div class="sect2">
<h3 class="sect2">Connection Property Example</h3>
<p><a href="#CDEFBDDF">Example 21-4</a> demonstrates how an application uses connection properties.</p>
<div class="example">
<p class="titleinexample"><a id="CDEFBDDF"></a><a id="JJDBC28721"></a>Example 21-4 Using Connection Properties</p>
<pre>
import java.sql.*;
import javax.sql.*;
import java.util.*;
import javax.naming.*;
import javax.naming.spi.*;
import oracle.jdbc.*;
import oracle.jdbc.pool.*;
...
  OracleDataSource ds =  (OracleDataSource) ctx.lookup("...");
  java.util.Properties prop = new java.util.Properties ();
  prop.setProperty("MinLimit", "5");     // the cache size is 5 at least 
  prop.setProperty("MaxLimit", "25");
  prop.setProperty("InitialLimit", "3"); // create 3 connections at startup
  prop.setProperty("InactivityTimeout", "1800");    //  seconds
  prop.setProperty("AbandonedConnectionTimeout", "900");  //  seconds
  prop.setProperty("MaxStatementsLimit", "10");
  prop.setProperty("PropertyCheckInterval", "60"); // seconds

  ds.setConnectionCacheProperties (prop);  // set properties
  Connection conn = ds.getConnection();
  conn.dosomework();
  java.util.Properties propList=ds.getConnectionCacheProperties();  // retrieve
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CDECGHJE"></a><a id="JJDBC28722"></a>
<div class="sect1">
<h2 class="sect1">Connection Cache Manager API</h2>
<p><code>OracleConnectionCacheManager</code> provides administrative APIs that the middle tier can use to manage available connection caches. This section provides an example of using the Connection Cache Manager.</p>
<p class="subhead2"><a id="JJDBC28723"></a>Example of ConnectionCacheManager Use</p>
<p><a href="#CACEDBGC">Example 21-5</a> demonstrates the <code>OracleConnectionCacheManager</code> interface.</p>
<div class="example">
<p class="titleinexample"><a id="CACEDBGC"></a><a id="JJDBC28724"></a>Example 21-5 Connection Cache Manager Example</p>
<pre>
import java.sql.*;
import javax.sql.*;
import java.util.*;
import javax.naming.*;
import javax.naming.spi.*;
import oracle.jdbc.*;
import oracle.jdbc.pool.*;
...
// Get singleton ConnectionCacheManager instance
  OracleConnectionCacheManager occm =
  OracleConnectionCacheManager.getConnectionCacheManagerInstance();
  String cacheName = "foo";  // Look for a specific cache
  // Use Cache Manager to check # of available connections 
  // and active connections
  System.out.println(occm.getNumberOfAvailableConnections(cacheName)
      " connections are available in cache " + cacheName);
 
  System.out.println(occm.getNumberOfActiveConnections(cacheName)
      + " connections are active");
  // Refresh all connections in cache 
  occm.refreshCache(cacheName,
    OracleConnectionCacheManager.REFRESH_ALL_CONNECTIONS);
  // Reinitialize cache, closing all connections
  java.util.Properties newProp = new java.util.Properties();
  newProp.setProperty("MaxLimit", "50");
  occm.reinitializeCache(cacheName, newProp);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CDEHHCDH"></a><a id="JJDBC28741"></a>
<div class="sect1">
<h2 class="sect1">Advanced Topics</h2>
<p>This section discusses cache functionality that is useful for advanced users, but is not essential to understanding or using the implicit connection cache. This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CDEGFBGE">Attribute Weights and Connection Matching</a></p>
</li>
<li>
<p><a href="#CDEBEDAB">Connection Cache Callbacks</a></p>
</li>
</ul>
<a id="CDEGFBGE"></a><a id="JJDBC28742"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Attribute Weights and Connection Matching</h3>
<p>There are two connection cache properties that enable the developer to specify which connections in the connection cache are accepted in response to a <code>getConnection</code> request. When you set the <code>ClosestConnectionMatch</code> property to <code>true</code>, you are telling the Connection Cache Manager to return connections that match only some of the attributes you have specified.</p>
<p>If you do not specify <code>attributeWeights</code>, then the Connection Cache Manager returns the connection that matches the highest number of attributes. If you specify <code>attributeWeights</code>, then you can control the priority the manager uses in matching attributes.</p>
<p class="subhead2"><a id="CDEFCIBH"></a><a id="JJDBC28743"></a>ClosestConnectionMatch</p>
<p>Setting <code>ClosestConnectionMatch</code> to <code>true</code> causes the connection cache to retrieve the connection with the closest approximation to the specified connection attributes. This can be used in combination with <code>AttributeWeights</code> to specify what is considered a closest match.</p>
<p>Default: <code>false</code></p>
<p class="subhead2"><a id="CDEGAHBF"></a><a id="JJDBC28744"></a>AttributeWeights</p>
<p>Sets the weights for each <code>connectionAttribute</code>. This property is used when <code>ClosestConnectionMatch</code> is set to <code>true</code> to determine which attributes are given highest priority when searching for matches. An attribute with a high weight is given more importance in determining a match than an attribute with a low weight.</p>
<p><code>AttributeWeights</code> contains a set of <code>String</code>s representing key-value pairs. Each key/value pair sets the weights for each <code>connectionAttribute</code> for which the user intends to request a connection. Each <code>String</code> is in the format written by the <code>java.util.Properties.Store(OutputStream, String)</code> method, and thus can be read by the <code>java.util.Properties.load(InputStream)</code> method. The <code>Key</code> is a <code>connectionAttribute</code> and the <code>Value</code> is the weight. A weight must be an integer value greater than 0. The default weight is 1.</p>
<p>For example, <code>TRANSACTION_ISOLATION</code> could be assigned a weight of 10 and <code>ROLE</code> a weight of 5. If <code>ClosestConnectionMatch</code> is set to <code>true</code>, when a <code>connectionAttribute</code> based connection request is made on the cache, connections with a matching <code>TRANSACTION_ISOLATION</code> will be favored over connections with a matching <code>ROLE</code>.</p>
<p>Default: No <code>AttributeWeights</code></p>
</div>
<!-- class="sect2" -->
<a id="CDEBEDAB"></a><a id="JJDBC28745"></a>
<div class="sect2">
<h3 class="sect2">Connection Cache Callbacks</h3>
<p>The implicit connection cache offers a way for the application to specify callbacks to be called by the connection cache. Callback methods are supported with the <code>OracleConnectionCacheCallback</code> interface. This callback mechanism is useful to take advantage of the special knowledge of the application about particular connections, supplementing the default behavior when handling abandoned connections or when the cache is empty.</p>
<p><code>OracleConnectionCacheCallback</code> is an interface that must be implemented by the user and registered with <code>OracleConnection</code>. The registration API is as follows:</p>
<pre>
public void
registerConnectionCacheCallback(
OracleConnectionCacheCallback cbk, Object usrObj,  int cbkflag);
</pre>
<p>In this interface, <code>cbk</code> is the user implementation of the <code>OracleConnectionCacheCallback</code> interface. The <code>usrObj</code> parameter contains any parameters that the user wants supplied. This user object is passed back, unmodified, when the callback method is called. The <code>cbkflag</code> parameter specifies which callback method should be called. It must be one of the following values:</p>
<ul>
<li>
<p><code>OracleConnection.ABANDONED_CONNECTION_CALLBACK</code></p>
</li>
<li>
<p><code>OracleConnection.RELEASE_CONNECTION_CALLBACK</code></p>
</li>
<li>
<p><code>OracleConnection.ALL_CALLBACKS</code></p>
</li>
</ul>
<p>When <code>ALL_CALLBACKS</code> is set, all the connection cache callback methods are called. For example,</p>
<pre>
// register callback, to invoke all callback methods
((OracleConnection)conn).registerConnectionCacheCallback( new UserConnectionCacheCallback(), 
  new SomeUserObject(), 
OracleConnection.ALL_CALLBACKS);
</pre>
<p>An application can register a <code>ConnectionCacheCallback</code> on an <code>OracleConnection</code>. When a callback is registered, the connection cache calls the <code>handleAbandonedConnection</code> method of the callback before reclaiming the connection. If the callback returns <code>true</code>, then the connection is reclaimed. If the callback returns <code>false</code>, then the connection remains active.</p>
<p>The <code>UserConnectionCacheCallback</code> interface supports two callback methods to be implemented by the user, <code>releaseConnection</code> and <code>handleAbandonedConnection</code>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDGEEEA"></a><a id="JJDBC28746"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Use Cases for TimeToLiveTimeout and AbandonedConnectionTimeout</h3>
<p>The following are the use cases for the <code>TimeToLiveTimeout</code> and <code>AbandonedConnectionTimeout</code> timeout mechanisms when used with implicit connection cache. Note that these timeout mechanisms are applicable to the logical connection when it is retrieved from the connection cache.</p>
<ul>
<li>
<p>The application considers the connections completely stateless.</p>
<p>When the connections are stateless, either of the timeout mechanisms can be used. The connections for which the timeout expires are put back into the connection cache for reuse. These connections are valid for reuse because there is no session state associated with them.</p>
</li>
<li>
<p>The application maintains state on each connection, but has a cleanup routine that can render the connections stateless when they are returned to the connection cache.</p>
<p>In this case, <code>TimeToLiveTimeout</code> cannot be used. There is no way for the connection cache to ensure that a connection returned to the cache is in a reusable condition.However, <code>AbandonedConnectionTimeout</code> can be used in this scenario, only if <code>OracleConnectionCacheCallback</code> is registered on the connection. The <code>handleAbandonedConnection</code> callback method is implemented by the application and ensures that the necessary cleanup is done. The connection is closed when the timeout processing invokes this callback method. The closing of this connection by the callback method causes the connection to be put back into the connection cache in a state where it is reusable.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not to close the connection after calling handleAbandonedConnection method because the connection could be in an invalid state. JDBC internally knows how to reclaim a connection even when it is in an invalid state.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CDEBEDAB">"Connection Cache Callbacks"</a></div>
</li>
<li>
<p>The application maintains state on each connection, but has no control over the connection and, therefore, cannot ensure cleaning up of state for reuse of connections by other applications or users.</p>
<p>The use of either of the timeout mechanisms is <span class="italic">not</span> recommended.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1">
<tr>
<td class="cellalignment10">
<table class="cellalignment6">
<tr>
<td class="cellalignment5"><a href="stmtcach.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5"><a href="rlb.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment13">
<table class="cellalignment4">
<tr>
<td class="cellalignment5"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
