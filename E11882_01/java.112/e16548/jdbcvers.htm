<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>JDBC Standards Support</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.1" />
<meta name="dcterms.created" content="2011-09-15T1:42:57Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database JDBC Developer's Guide" />
<meta name="dcterms.identifier" content="E16548-03" />
<meta name="dcterms.isVersionOf" content="JJDBC" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="part2.htm" title="Previous" type="text/html" />
<link rel="Next" href="oraint.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e16548.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">12/54</span> <!-- End Header --><a id="g1059277"></a><a id="JJDBC28082"></a>
<h1 class="chapter"><span class="secnum">3</span> JDBC Standards Support</h1>
<p>The <a id="ABC1063834"></a>Oracle Java Database Connectivity (JDBC) drivers support different versions of the JDBC standard features. In Oracle Database 11<span class="italic">g</span> Release 2 (11.2), Oracle JDBC drivers have been enhanced to provide support for the JDBC 4.0 standards. These features are provided through the <code>oracle.jdbc</code> and <code>oracle.sql</code> packages. These packages support Java Development Kit (JDK) releases 1.5 and 1.6. This chapter discusses the JDBC standards support in Oracle JDBC drivers. It contains the following sections:</p>
<ul>
<li>
<p><a href="#i1056891">Support for JDBC 2.0 Standard</a></p>
</li>
<li>
<p><a href="#i1005572">Support for JDBC 3.0 Standard</a></p>
</li>
<li>
<p><a href="#BCFFIFAD">Support for JDBC 4.0 Standard</a></p>
</li>
</ul>
<a id="i1056891"></a><a id="JJDBC28083"></a>
<div class="sect1">
<h2 class="sect1">Support for JDBC 2.0<a id="sthref70"></a> Standard<a id="sthref71"></a></h2>
<p>Standard JDBC 2.0 features are supported by JDK 1.2 and later versions. There are three areas to consider:</p>
<ul>
<li>
<p>Support for data types, such as objects, arrays, and large objects (LOBs). This is handled through the standard <code>java.sql</code> package.</p>
</li>
<li>
<p>Support for standard features, such as result set enhancements and update batching. This is handled through standard objects, such as <code>Connection</code>, <code>ResultSet</code>, and <code>PreparedStatement</code>, under JDK 1.2.x and later.</p>
</li>
<li>
<p>Support for extended features, such as features of the JDBC 2.0 optional package, also known as the standard extension application programming interface (API), including data sources, connection pooling, and distributed transactions.</p>
</li>
</ul>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#i1057440">Data Type Support</a></p>
</li>
<li>
<p><a href="#CIHJCBEJ">Standard Feature Support</a></p>
</li>
<li>
<p><a href="#CIHGIBEC">Extended Feature Support</a></p>
</li>
<li>
<p><a href="#CIHHIEHI">Standard versus Oracle Performance Enhancement APIs</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Versions of JDK earlier than 1.5 are no longer supported. The package <code>oracle.jdbc2</code> has been removed.</div>
<a id="i1057440"></a><a id="JJDBC28084"></a>
<div class="sect2">
<h3 class="sect2">Data T<a id="sthref72"></a>ype Support</h3>
<p>Oracle JDBC fully supports JDK 1.5 and JDK 1.6, which includes standard JDBC 2.0 functionality through implementation of interfaces in the standard <code>java.sql</code> package. These interfaces are implemented as appropriate by classes in the <code>oracle.sql</code> and <code>oracle.jdbc</code> packages.</p>
</div>
<!-- class="sect2" -->
<a id="CIHJCBEJ"></a><a id="JJDBC28085"></a>
<div class="sect2">
<h3 class="sect2">Stand<a id="sthref73"></a>ard Feature Support</h3>
<p>In a JDK 1.5 environment, using the JDBC classes in <code>ojdbc5.jar</code>, JDBC 2.0 features, such as scrollable result sets, updatable result sets, and update batching, are supported through methods specified by standard JDBC 2.0 interfaces.</p>
</div>
<!-- class="sect2" -->
<a id="CIHGIBEC"></a><a id="JJDBC28086"></a>
<div class="sect2">
<h3 class="sect2">Extend<a id="sthref74"></a>ed Feature Support</h3>
<p>Features of the JDBC 2.0 optional package, including data sources, connection pooling, and distributed transactions, are supported in a JDK 1.2.x or later environment.</p>
<p>The standard <code>javax.sql</code> package and classes that implement its interfaces are included in the Java Archive (JAR) files packaged with Oracle Database.</p>
</div>
<!-- class="sect2" -->
<a id="CIHHIEHI"></a><a id="JJDBC28087"></a>
<div class="sect2">
<h3 class="sect2">Stand<a id="sthref75"></a>ard versus Oracle Performance Enhancement APIs</h3>
<p>The following performance enhancements are available under JDBC 2.0, which had previously been available only as Oracle extensions:</p>
<ul>
<li>
<p>Update batching</p>
</li>
<li>
<p>Fetch size or row prefetching</p>
</li>
</ul>
<p>In each case, you have the option of using the standard model or the Oracle model. Oracle recommends that you use the JDBC standard model whenever possible. Do not, however, try to mix usage of the standard model and Oracle model within a single application for either of these features.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oraperf.htm#i1056232">"Update Batching"</a></p>
</li>
<li>
<p><a href="resltset.htm#i1023619">"Fetch Size"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1005572"></a><a id="JJDBC28088"></a>
<div class="sect1">
<h2 class="sect1">Support for JDBC 3.0 S<a id="sthref76"></a>tandard</h2>
<p>Standard JDBC 3.0 features are supported by JDK 1.4 and later versions. <a href="#CFAFGHAJ">Table 3-1</a> lists the JDBC 3.0 features supported by Oracle Database 11<span class="italic">g</span> Release 2 (11.2) and gives references to a detailed discussion of each feature.</p>
<div class="tblhruleformalwide">
<p class="titleintable"><a id="JJDBC28089"></a><a id="sthref77"></a><a id="CFAFGHAJ"></a>Table 3-1 Key Areas of JDBC 3.0 Functionality</p>
<table class="cellalignment11" title="Key Areas of JDBC 3.0 Functionality " summary="table" dir="ltr">
<thead>
<tr class="cellalignment2">
<th class="cellalignment9" id="r1c1-t4">Feature</th>
<th class="cellalignment9" id="r1c2-t4">Comments and References</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2">
<td class="cellalignment10" id="r2c1-t4" headers="r1c1-t4">
<p>Transaction savepoints</p>
</td>
<td class="cellalignment10" headers="r2c1-t4 r1c2-t4">
<p>See <a href="#i1006293">"Transaction Savepoints"</a> for information.</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r3c1-t4" headers="r1c1-t4">
<p>Statement caching</p>
</td>
<td class="cellalignment10" headers="r3c1-t4 r1c2-t4">
<p>Reuse of prepared statements by connection pools. See <a href="stmtcach.htm#g1079466">Chapter 20, "Statement and Result Set Caching"</a>.</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r4c1-t4" headers="r1c1-t4">
<p>Switching between local and global transactions</p>
</td>
<td class="cellalignment10" headers="r4c1-t4 r1c2-t4">
<p>See <a href="xadistra.htm#i1068757">"Switching Between Global and Local Transactions"</a>.</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r5c1-t4" headers="r1c1-t4">
<p>LOB modification</p>
</td>
<td class="cellalignment10" headers="r5c1-t4 r1c2-t4">
<p>See <a href="#CACBEAGJ">"JDBC 3.0 LOB Interface Methods"</a> .</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r6c1-t4" headers="r1c1-t4">
<p>Named SQL parameters</p>
</td>
<td class="cellalignment10" headers="r6c1-t4 r1c2-t4">
<p>See <a href="oraint.htm#CHDBGJFG">"Interface oracle.jdbc.OracleCallableStatement"</a> and <a href="oraint.htm#CHDIIDBE">"Interface oracle.jdbc.OraclePreparedStatement"</a> .</p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r7c1-t4" headers="r1c1-t4">
<p>RowSets</p>
</td>
<td class="cellalignment10" headers="r7c1-t4 r1c2-t4">
<p>See <a href="jcrowset.htm#g634339">Chapter 18, "JDBC RowSets"</a></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r8c1-t4" headers="r1c1-t4">
<p>Retrieving auto-generated keys</p>
</td>
<td class="cellalignment10" headers="r8c1-t4 r1c2-t4">
<p>See <a href="#CHDEGDHJ">"Retrieval of Auto-Generated Keys"</a></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r9c1-t4" headers="r1c1-t4">
<p>Result set holdability</p>
</td>
<td class="cellalignment10" headers="r9c1-t4 r1c2-t4">
<p>See <a href="#CHDIHAFD">"Result Set Holdability"</a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<p>The following JDBC 3.0 features supported by Oracle JDBC drivers are covered in this section:</p>
<ul>
<li>
<p><a href="#i1006293">Transaction Savepoints</a></p>
</li>
<li>
<p><a href="#CHDEGDHJ">Retrieval of Auto-Generated Keys</a></p>
</li>
<li>
<p><a href="#CACBEAGJ">JDBC 3.0 LOB Interface Methods</a></p>
</li>
<li>
<p><a href="#CHDIHAFD">Result Set Holdability</a></p>
</li>
</ul>
<a id="i1006293"></a><a id="JJDBC28091"></a>
<div class="sect2">
<h3 class="sect2">Transaction Savepoints</h3>
<p><a id="ABC1063839"></a><a id="ABC1063839SRI1"></a>The JDBC 3.0 specification supports <span class="bold">savepoints</span>, which offer finer demarcation within transactions. Applications can set a savepoint within a transaction and then roll back all work done after the savepoint. Savepoints relax the atomicity property of transactions. A transaction with a savepoint is atomic in the sense that it appears to be a single unit outside the context of the transaction, but code operating within the transaction can preserve partial states.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Savepoints are supported for local transactions only. Specifying a savepoint within a global transaction causes a <code>SQLException</code> exception to be thrown.</div>
<a id="JJDBC28092"></a>
<div class="sect3"><a id="sthref78"></a>
<h4 class="sect3">Creating a Savepoint</h4>
<p>You create a savepoint using the <code>Connection.setSavepoint</code> method, which returns a <code>java.sql.Savepoint</code> instance.</p>
<p>A savepoint is either named or unnamed. You specify the name of a savepoint by supplying a string to the <code>setSavepoint</code> method. If you do not specify a name, then the savepoint is assigned an integer ID. You retrieve a name using the <code>getSavepointName</code> method. You retrieve an ID using the <code>getSavepointId</code> method.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Attempting to retrieve a name from an unnamed savepoint or attempting to retrieve an ID from a named savepoint throws a <code>SQLException</code> exception.</div>
</div>
<!-- class="sect3" -->
<a id="JJDBC28093"></a>
<div class="sect3"><a id="sthref79"></a>
<h4 class="sect3">Rolling Back to a Savepoint</h4>
<p>You roll back to a savepoint using the <code>Connection.rollback(Savepoint svpt)</code> method. If you try to roll back to a savepoint that has been released, then a <code>SQLException</code> exception is thrown.</p>
</div>
<!-- class="sect3" -->
<a id="JJDBC28094"></a>
<div class="sect3"><a id="sthref80"></a>
<h4 class="sect3">Releasing a Savepoint</h4>
<p>You remove a savepoint using the <code>Connection.releaseSavepoint(Savepoint svpt)</code> method.</p>
</div>
<!-- class="sect3" -->
<a id="JJDBC28095"></a>
<div class="sect3"><a id="sthref81"></a>
<h4 class="sect3">Checking Savepoint Support</h4>
<p>You query if savepoints are supported by your database by calling the <code>oracle.jdbc.OracleDatabaseMetaData.supportsSavepoints</code> method, which returns <code>true</code> if savepoints are available, <code>false</code> otherwise.</p>
</div>
<!-- class="sect3" -->
<a id="JJDBC28096"></a>
<div class="sect3"><a id="sthref82"></a>
<h4 class="sect3">Savepoint Notes</h4>
<p>When using savepoints, you must consider the following:</p>
<ul>
<li>
<p>After a savepoint has been released, attempting to reference it in a rollback operation will cause a <code>SQLException</code> exception to be thrown.</p>
</li>
<li>
<p>When a transaction is committed or rolled back, all savepoints created in that transaction are automatically released and become invalid.</p>
</li>
<li>
<p>Rolling a transaction back to a savepoint automatically releases and makes invalid any savepoints created after the savepoint in question.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDEGDHJ"></a><a id="JJDBC28099"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref83"></a>Retrieval of Auto-Generated Keys</h3>
<p>Many database systems automatically generate a unique key field when a row is inserted. Oracle Database provides the same functionality with the help of sequences and triggers. JDBC 3.0 introduces the retrieval of auto-generated keys feature that enables you to retrieve such generated values. In JDBC 3.0, the following interfaces are enhanced to support the retrieval of auto-generated keys feature:</p>
<ul>
<li>
<p><code>java.sql.DatabaseMetaData</code></p>
</li>
<li>
<p><code>java.sql.Connection</code></p>
</li>
<li>
<p><code>java.sql.Statement</code></p>
</li>
</ul>
<p>These interfaces provide methods that support retrieval of auto-generated keys. However, this feature is supported only when <code>INSERT</code> statements are processed. Other data manipulation language (DML) statements are processed, but without retrieving auto-generated keys.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Oracle server-side internal driver does not support the retrieval of auto-generated keys feature.</div>
<a id="CHDDJABH"></a><a id="JJDBC28101"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">java.sql.Statement</h4>
<p>If key columns are not explicitly indicated, then Oracle JDBC drivers cannot identify which columns need to be retrieved. When a column name or column index array is used, Oracle JDBC drivers can identify which columns contain auto-generated keys that you want to retrieve. However, when the <code>Statement.RETURN_GENERATED_KEYS</code> integer flag is used, Oracle JDBC drivers cannot identify these columns. When the integer flag is used to indicate that auto-generated keys are to be returned, the <code>ROWID</code> pseudo column is returned as key. The <code>ROWID</code> can be then fetched from the <code>ResultSet</code> object and can be used to retrieve other columns.</p>
</div>
<!-- class="sect3" -->
<a id="JJDBC28103"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref84"></a>
<h4 class="sect3">Sample Code</h4>
<p>The following code illustrates retrieval of auto-generated keys:</p>
<pre>
/** SQL statements for creating an ORDERS table and a sequence for generating the
  * ORDER_ID.
  *
  * CREATE TABLE ORDERS (ORDER_ID NUMBER, CUSTOMER_ID NUMBER, ISBN NUMBER,
  * DESCRIPTION NCHAR(5))
  *
  * CREATE SEQUENCE SEQ01 INCREMENT BY 1 START WITH 1000
  */

...
String cols[] = {"ORDER_ID", "DESCRIPTION"};

// Create a PreparedStatement for inserting a row into the ORDERS table.
OraclePreparedStatement pstmt = (OraclePreparedStatement)
conn.prepareStatement("INSERT INTO ORDERS (ORDER_ID, CUSTOMER_ID, ISBN,  DESCRIPTION) VALUES (SEQ01.NEXTVAL, 101,
 966431502, ?)", cols);
char c[] = {'a', '\u5185', 'b'};
String s = new String(c);
pstmt.setNString(1, s);
pstmt.executeUpdate();
ResultSet rset = pstmt.getGeneratedKeys();
...
</pre>
<p>In the preceding example, a sequence, <code>SEQ01</code>, is created to generate values for the <code>ORDER_ID</code> column starting from <code>1000</code> and incrementing by <code>1</code> each time the sequence is processed to generate the next value. An <code>OraclePreparedStatement</code> object is created to insert a row in to the <code>ORDERS</code> table.</p>
</div>
<!-- class="sect3" -->
<a id="JJDBC28104"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref85"></a>
<h4 class="sect3">Limitations</h4>
<p>Auto-generated keys are implemented using the DML returning clause. So, they are subjected to the following limitations:</p>
<ul>
<li>
<p>You cannot combine auto-generated keys with batch update.</p>
</li>
<li>
<p>You need to access the <code>ResultSet</code> object returned from <code>getGeneratedKeys</code> method by position only and no bind variable names should be used as columns in the <code>ResultSet</code> object.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CACBEAGJ"></a><a id="JJDBC28105"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">JDBC 3.0 LOB Interface Methods</h3>
<p><a href="#CACFFCBB">Table 3-2</a> and <a href="#CACGFCFC">Table 3-3</a> show the conversions between Oracle proprietary methods and JDBC 3.0 standard methods.</p>
<div class="tblformal">
<p class="titleintable"><a id="JJDBC28106"></a><a id="sthref86"></a><a id="CACFFCBB"></a>Table 3-2 BLOB Method Equivalents</p>
<table class="cellalignment8" title="BLOB Method Equivalents" summary="table" dir="ltr">
<thead>
<tr class="cellalignment2">
<th class="cellalignment9" id="r1c1-t8">Oracle Proprietary Method</th>
<th class="cellalignment9" id="r1c2-t8">JDBC 3.0 Standard Method</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2">
<td class="cellalignment10" id="r2c1-t8" headers="r1c1-t8">
<p><code>putBytes(long pos, byte [] bytes)</code></p>
</td>
<td class="cellalignment10" headers="r2c1-t8 r1c2-t8">
<p><code>setBytes(long pos, byte[] bytes)</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r3c1-t8" headers="r1c1-t8">
<p><code>putBytes(long pos, byte [] bytes, int length)</code></p>
</td>
<td class="cellalignment10" headers="r3c1-t8 r1c2-t8">
<p><code>setBytes(long pos, byte[] bytes, int offset, int len)</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r4c1-t8" headers="r1c1-t8">
<p><code>getBinaryOutputStream(long pos)</code></p>
</td>
<td class="cellalignment10" headers="r4c1-t8 r1c2-t8">
<p><code>setBinaryStream(long pos)</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r5c1-t8" headers="r1c1-t8">
<p><code>trim (long len)</code></p>
</td>
<td class="cellalignment10" headers="r5c1-t8 r1c2-t8">
<p><code>truncate(long len)</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="tblformal">
<p class="titleintable"><a id="JJDBC28107"></a><a id="sthref87"></a><a id="CACGFCFC"></a>Table 3-3 CLOB Method Equivalents</p>
<table class="cellalignment8" title="CLOB Method Equivalents" summary="table" dir="ltr">
<thead>
<tr class="cellalignment2">
<th class="cellalignment9" id="r1c1-t9">Oracle Proprietary Method</th>
<th class="cellalignment9" id="r1c2-t9">JDBC 3.0 Standard Method</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2">
<td class="cellalignment10" id="r2c1-t9" headers="r1c1-t9">
<p><code>putString(long pos, String str)</code></p>
</td>
<td class="cellalignment10" headers="r2c1-t9 r1c2-t9">
<p><code>setString(long pos, String str)</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r3c1-t9" headers="r1c1-t9">
<p>not applicable</p>
</td>
<td class="cellalignment10" headers="r3c1-t9 r1c2-t9">
<p><code>setString(long pos, String str, int offset, int len)</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r4c1-t9" headers="r1c1-t9">
<p><code>getAsciiOutputStream(long pos)</code></p>
</td>
<td class="cellalignment10" headers="r4c1-t9 r1c2-t9">
<p><code>setAsciiStream(long pos)</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r5c1-t9" headers="r1c1-t9">
<p><code>getCharacterOutputStream(long pos)</code></p>
</td>
<td class="cellalignment10" headers="r5c1-t9 r1c2-t9">
<p><code>setCharacterStream(long pos)</code></p>
</td>
</tr>
<tr class="cellalignment2">
<td class="cellalignment10" id="r6c1-t9" headers="r1c1-t9">
<p><code>trim (long len)</code></p>
</td>
<td class="cellalignment10" headers="r6c1-t9 r1c2-t9">
<p><code><a id="sthref88"></a>truncate(long len)</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="CHDIHAFD"></a><a id="JJDBC28108"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref89"></a>Result Set Holdability</h3>
<p>Result set holdability was introduced since JDBC 3.0. This feature enables applications to decide whether the <code>ResultSet</code> objects should be open or closed, when a commit operation is performed. The commit operation could be either implicit or explicit.</p>
<p>Oracle Database supports only <code>HOLD_CURSORS_OVER_COMMIT</code>. Therefore, it is the default value for Oracle JDBC drivers. Any attempt to change holdability will throw a <code>SQLException</code> exception.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BCFFIFAD"></a><a id="JJDBC28109"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Support for JDBC 4.0 Standard</h2>
<p>The JDBC 4.0 standard support is provided by JDK 1.6 and later versions. Oracle Database 11<span class="italic">g</span> Release 2 (11.2) JDBC drivers provide support for the JDBC 4.0 standard.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>You need to have the <code>ojdbc6.jar</code> in your <code>classpath</code> environment variable in order to have JDBC 4.0 standard support.</p>
</li>
<li>
<p>The JDBC 4.0 specification defines the <code>getClientInfo</code> and <code>setClientInfo</code> methods to get and set client information. The 11.2 Oracle JDBC drivers do not define any client information, so any call to these methods throws a <code>SQLClientInfoException</code> exception.</p>
</li>
<li>
<p>The JDBC 4.0 specification defines the <code>java.sql.Connection.createArrayOf</code> factory method to create <code>java.sql.Array</code> objects. The <code>createArrayOf</code> method accepts the name of the array element type as one of the arguments, where the array type is anonymous. Oracle database supports only named array types, not anonymous array types. So, the 11.2 Oracle JDBC drivers do not and cannot support the <code>createArrayOf</code> method. You must use the Oracle specific <code>createARRAY</code> method to create an array type. For more information about the <code>createArrayOf</code> method, refer to <a href="oraarr.htm#i1056647">"Creating ARRAY Objects"</a>.</p>
</li>
<li>
<p>This document provides only an overview of these new features. For detailed information about these features, see <span class="italic">"Java 2 Platform, Standard Edition (JSE) 6.0 specification</span>" at</p>
<pre>
<a href="http://download.oracle.com/javase/6/docs/">http://download.oracle.com/javase/6/docs/</a>
</pre></li>
</ul>
</div>
<p>Some of the features available in Oracle Database 11<span class="italic">g</span> Release 2 (11.2) JDBC drivers are the following:</p>
<ul>
<li>
<p><a href="#BCFFFGAI">Wrapper Pattern Support</a></p>
</li>
<li>
<p><a href="#BABGHBCC">SQLXML Type</a></p>
</li>
<li>
<p><a href="#BCFDEBFH">Enhanced Exception Hierarchy and SQLException</a></p>
</li>
<li>
<p><a href="#BCFJDDFF">The RowId Data Type</a></p>
</li>
<li>
<p><a href="#BCFIDIEH">LOB Creation</a></p>
</li>
<li>
<p><a href="#BCFDBCEC">National Language Character Set Support</a></p>
</li>
</ul>
<a id="BCFFFGAI"></a><a id="JJDBC28110"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Wrapper Pattern Support</h3>
<p>Wrapper pattern is a common coding pattern used in Java applications to provide extensions beyond the traditional JDBC API that are specific to a data source. You may need to use these extensions to access the resources that are wrapped as proxy class instances representing the actual resources. JDBC 4.0 introduces the <code>Wrapper</code> interface that describes a standard mechanism to access these wrapped resources represented by their proxy, to permit direct access to the resource delegates.</p>
<p>The <code>Wrapper</code> interface provides the following two methods:</p>
<ul>
<li>
<p><code>public boolean isWrapperFor(Class&lt;?&gt; iface) throws SQLException;</code></p>
</li>
<li>
<p><code>public &lt;T&gt; T unwrap(Class&lt;T&gt; iface) throws SQLException;</code></p>
</li>
</ul>
<p>The other JDBC 4.0 interfaces, except those that represent SQL data, all implement this interface. These include <code>Connection</code>, <code>Statement</code> and its subtypes, <code>ResultSet</code>, and the metadata interfaces.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<code><a href="http://download.oracle.com/javase/6/docs/api/java/sql/Wrapper.html">http://download.oracle.com/javase/6/docs/api/java/sql/Wrapper.html</a></code></div>
</div>
<!-- class="sect2" -->
<a id="BABGHBCC"></a><a id="JJDBC28111"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">SQLXML Type</h3>
<p>One of the most important updates in JDBC 4.0 standard is the support for the XML data type, defined by the SQL 2003 standard. Now JDBC offers a mapping interface to support the SQL/XML database data type, that is, <code>java.sql.SQLXML</code>. This new JDBC interface defines Java native bindings for XML, thus making handling of any database XML data easier and more efficient.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>You also need to include the <code>xdb.jar</code> and <code>xmlparserv2.jar</code> files in the <code>classpath</code> environment variable to use <code>SQLXML</code> type data, if they are not already present in the <code>classpath</code>.</p>
</li>
<li>
<p>SQLXML is not supported in <code>CachedRowset</code> objects.</p>
</li>
</ul>
</div>
<p>You can create an instance of XML by calling the <code><a id="sthref90"></a>createSQLXML</code> method in <code>java.sql.Connection</code> interface. This method returns an empty XML object.</p>
<p>The <code>PreparedStatement</code>, <code>CallableStatement</code>, and <code>ResultSet</code> interfaces have been extended with the appropriate getter and setter methods in the following way:</p>
<ul>
<li>
<p><code>PreparedStatement</code>: The method <code>setSQLXML</code> have been added</p>
</li>
<li>
<p><code>CallableStatement</code>: The methods <code>getSQLXML</code> and <code>setSQLXML</code> have been added</p>
</li>
<li>
<p><code>ResultSet</code>: The method <code>getSQLXML</code> have been added</p>
</li>
</ul>
<p class="subhead2"><a id="JJDBC28112"></a>The oracle.jdbc.<a id="sthref91"></a>getObjectReturnsXMLType Property</p>
<p>In Oracle Database 10<span class="italic">g</span> and earlier versions of Oracle Database 11<span class="italic">g</span>, Oracle JDBC drivers supported the Oracle SQL XML type (XMLType) through an Oracle proprietary extension. XML values were represented by instances of the <code>oracle.xdb.XMLType</code> class and the SQL XMLType values were read and set through the JDBC standard <code>getObject</code>, <code>setObject</code>, and <code>updateObject</code> methods.</p>
<p>The JDBC standard requires the <code>getObject</code> method to return an instance of <code>java.sql.SQLXML</code> type when called on a SQL XML type column. But, the earlier versions of Oracle JDBC drivers return an instance of <code>oracle.xdb.XMLType</code>. This does not conform to the JDBC standard.</p>
<p>The current release of Oracle JDBC drivers conform to the JDBC standard with the introduction of a new connection property, <code>oracle.jdbc.getObjectReturnsXMLType</code>. If you set this property to <code>false</code>, then the <code>getObject</code> method returns an instance of <code>java.sql.SQLXML</code> type. You can achieve this by using the following command line option while compiling your program with <code>javac</code>:</p>
<pre>
-Doracle.jdbc.getObjectReturnsXMLType="false"
</pre>
<p>If you depend on the existing Oracle proprietary support for SQL XMLType using <code>oracle.xdb.XMLType</code>, then you can change the value of this property back to <code>true</code> by using the following command line option:</p>
<pre>
-Doracle.jdbc.getObjectReturnsXMLType="true"
</pre>
<p>The value of the <code>oracle.jdbc.getObjectReturnsXMLType</code> property is a <code>String</code> representing a boolean value of either <code>true</code> or <code>false</code>. If the value of this property is <code>true</code>, then the <code>getObject</code> method returns <code>oracle.xdb.XMLType</code> instances, when called for a SQL XMLType column. This is the deafault value of the <code>oracle.jdbc.getObjectReturnsXMLType</code> property. If the value of this property is <code>false</code>, then the <code>getObject</code> method returns <code>java.sql.SQLXML</code> instances. This is the standard JDBC-compliant mode.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>oracle.jdbc.getObjectReturnsXMLType</code> property affects only the result of the <code>getObject</code> method. All other methods conform to the JDBC 4.0 standard regardless of the value of the property.</div>
<p class="subhead2"><a id="JJDBC28113"></a>Example</p>
<div class="example">
<p class="titleinexample"><a id="JJDBC28114"></a><a id="sthref92"></a>Example 3-1 Accessing SQLXML Data</p>
<p>The following example shows how to create an instance of XML from a <code>String</code>, write the XML data into the Database, and then retrieve the XML data from the Database.</p>
<pre>
import java.sql.*;
import java.util.Properties;
import oracle.jdbc.pool.OracleDataSource;
 
public class SQLXMLTest
 {
 
  public static void main(String[] args) 
  {
  
  Connection conn = null;
  Statement stmt = null;
  ResultSet rs = null;
  PreparedStatement ps = null;
  
  String xml = "&lt;?xml version=\"1.0\"?&gt;\n" +
    "&lt;oldjoke&gt;\n" +
    "&lt;burns&gt;Say &lt;quote&gt;goodnight&lt;/quote&gt;, Gracie.&lt;/burns&gt;\n" +
    "&lt;allen&gt;&lt;quote&gt;Goodnight, Gracie.&lt;/quote&gt;&lt;/allen&gt;\n" +
    "&lt;applause/&gt;\n" +
    "&lt;/oldjoke&gt;";
 
  try
  {
 
     OracleDataSource ods = new OracleDataSource();
     ods.setURL("jdbc:oracle:thin:@//localhost:1521/orcl");
     ods.setUser("scott");
     ods.setPassword("tiger");
     conn = ods.getConnection();
 
     ps = conn.prepareStatement("insert into x values (?, ?)");
     ps.setString(1, "string to string");
     SQLXML x = conn.createSQLXML();
     x.setString(xml);
     ps.setSQLXML(2, x);
     ps.execute();
     x.free();
     stmt = conn.createStatement();
     rs = stmt.executeQuery("select * from x");
     while (rs.next()) 
     {
 
       System.out.println(rs.getString(1) + "\n" + rs.getSQLXML(2).getString());
     }
 
     rs.close();
     ps.close();    
  }
 
  catch (SQLException e){e.printStackTrace ();}
 
  }
}
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Calling a setter method with an empty XML throws <code>SQLException</code>. The getter methods never return an empty XML.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
JSR 173: Streaming API for XML at:
<p><code><a href="http://www.jcp.org/aboutJava/communityprocess/first/jsr173/">http://www.jcp.org/aboutJava/communityprocess/first/jsr173/</a></code></p>
</div>
</div>
<!-- class="sect2" -->
<a id="BCFDEBFH"></a><a id="JJDBC28115"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Enhanced Exception Hierarchy and SQLException</h3>
<p>JDBC 3.0 defines only a single exception, <code>SQLException</code>. However, there are large categories of errors and it is useful to distinguish them. This feature provides subclasses of the <code>SQLException</code> class to identify the different categories of errors. The primary distinction is between permanent errors and transient errors. Permanent errors are a result of the correct operation of the system and will always occur. Transient errors are the result of failures, including timeouts, of some part of the system and may not reoccur.</p>
<p>JDBC 4.0 adds additional exceptions to represent transient and permanent errors and the different categories of these errors.</p>
<p>Also, the <code>SQLException</code> class and its subclasses are enhanced to provide support for the J2SE chained exception functionality.</p>
</div>
<!-- class="sect2" -->
<a id="BCFJDDFF"></a><a id="JJDBC28116"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">The RowId Data Type</h3>
<p>JDBC 4.0 provides the <code>java.sql.RowId</code> data type to represent SQL <code>ROWID</code> values. You can retrieve a <code>RowId</code> value using the getter methods defined in the <code>ResultSet</code> and <code>CallableStatement</code> interfaces. You can also use a <code>RowId</code> value in a parameterized <code>PreparedStatement</code> to set a parameter with a <code>RowId</code> object or in an updatable result set to update a column with a specific <code>RowId</code> value.</p>
<p>A <code>RowId</code> object is valid until the identified row is not deleted. A <code>RowId</code> object may also be valid for the following:</p>
<ul>
<li>
<p>The duration of the transaction in which it is created</p>
</li>
<li>
<p>The duration of the session in which it is created</p>
</li>
<li>
<p>An undefined duration where by it is valid forever</p>
</li>
</ul>
<p>The lifetime of the RowId object can be determined by calling the <code>DatabaseMetaData.getRowIdLifetime</code> method.</p>
</div>
<!-- class="sect2" -->
<a id="BCFIDIEH"></a><a id="JJDBC28117"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">LOB Creation</h3>
<p>In JDBC 4.0, the <code>Connection</code> interface has been enhanced to provide support for the creation of <code>BLOB</code>, <code>CLOB</code>, and <code>NCLOB</code> objects. The interface provides the <code>createBlob</code>, <code>createClob</code>, and <code>createNClob</code> methods that enable you to create <code>Blob</code>, <code>Clob</code>, and <code>NClob</code> objects.</p>
<p>The created large objects (LOBs) do not contain any data. You can add or retrieve data to or from these objects by calling the APIs available in the <code>java.sql.Blob</code>, <code>java.sql.Clob</code>, and <code>java.sql.NClob</code> interfaces. You can either retrieve the entire content or a part of the content from these objects. The following code snippet illustrates how to retrieve 100 bytes of data from a <code>BLOB</code> object starting at offset 200:</p>
<pre>
...
Connection con = DriverManager.getConnection(url, props);
Blob aBlob = con.createBlob();
// Add data to the BLOB object.
aBlob.setBytes(...);
...
// Retrieve part of the data from the BLOB object.
InputStream is = aBlob.getBinaryStream(200, 100);
...
</pre>
<p>You can also pass LOBs as input parameters to a <code>PreparedStatement</code> object by using the <code>setBlob</code>, <code>setClob</code>, and <code>setNClob</code> methods. You can use the <code>updateBlob</code>, <code>updateClob</code>, and <code>updateNClob</code> methods to update a column value in an updatable result set.</p>
<p>These LOBs are temporary LOBs and can be used for any purpose for which temporary LOBs should be used. To make the storage permanent in the database, these LOBs must be written to a table.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oralob.htm#i1060097">"Working With Temporary LOBs"</a></div>
<p>Temporary LOBs remain valid for at least the duration of the transaction in which they are created. This may result in unwarranted use of memory during a long running transaction. You can release LOBs by calling their <code>free</code> method, as follows:</p>
<pre>
...
Clob aClob = con.createClob();
int numWritten = aClob.setString(1, val);
aClob.free();
...
</pre></div>
<!-- class="sect2" -->
<a id="BCFDBCEC"></a><a id="JJDBC28118"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">National Language Character Set Support</h3>
<p>JDBC 4.0 introduces the <code>NCHAR</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>, and <code>NCLOB</code> JDBC types to access the national character set types. These types are similar to the <code>CHAR</code>, <code>VARCHAR</code>, <code>LONGVARCHAR</code>, and <code>CLOB</code> types, except that the values are encoded using the national character set.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1">
<tr>
<td class="cellalignment10">
<table class="cellalignment6">
<tr>
<td class="cellalignment5"><a href="part2.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment5"><a href="oraint.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment13">
<table class="cellalignment4">
<tr>
<td class="cellalignment5"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment5"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment5"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment5"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment5"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment5"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
