<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Working with Labeled Data</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-08-19T10:59:34Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Label Security Administrator's Guide" />
<meta name="dcterms.identifier" content="E10745-04" />
<meta name="dcterms.isVersionOf" content="OLSAG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="getstrtd.htm" title="Previous" type="text/html" />
<link rel="Next" href="olsoid.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10745.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">12/30</span> <!-- End Header -->
<div id="OLSAG019" class="chapter"><a id="i1008311"></a>
<h1 class="chapter"><span class="secnum">5</span> Working with Labeled Data</h1>
<p>This chapter explains how to</p>
<ul>
<li>
<p>Use Oracle Label Security features to manage labeled data</p>
</li>
<li>
<p>View the value of security attributes for a session</p>
</li>
<li>
<p>Change the value of those session attributes</p>
</li>
</ul>
<p>The chapter contains these sections:</p>
<ul>
<li>
<p><a href="#i1008346">The Policy Label Column and Label Tags</a></p>
</li>
<li>
<p><a href="#i1008562">Presenting the Label</a></p>
</li>
<li>
<p><a href="#i1008661">Filtering Data Using Labels</a></p>
</li>
<li>
<p><a href="#i1008917">Inserting Labeled Data</a></p>
</li>
<li>
<p><a href="#i1013397">Changing Your Session and Row Labels with SA_SESSION</a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Many of the examples in this book use the <span class="italic">HUMAN_RESOURCES</span> sample policy. Its policy name is <span class="italic">HR</span> and its policy label column is <span class="italic">HR_LABEL</span>. Unless otherwise noted, the examples assume that the SQL statements are performed on rows within the user's authorization and with full Oracle Label Security <a id="sthref227"></a>policy enforcement in effect.</div>
</li>
</ul>
<a id="i1008346"></a>
<div id="OLSAG020" class="sect1">
<h2 class="sect1"><span class="secnum">5.1</span> The Policy Label Column and Label Tags</h2>
<p>This section explains how policy label columns in a table or schema are created and filled, using these topics:</p>
<ul>
<li>
<p><a href="#i1008357">The Policy Label Column</a></p>
</li>
<li>
<p><a href="#i1008398">Label Tags</a></p>
</li>
</ul>
<a id="i1008357"></a>
<div id="OLSAG3143" class="sect2">
<h3 class="sect2"><span class="secnum">5.1.1</span> The Policy Label Column<a id="sthref228"></a></h3>
<p>Each policy that is applied to a table creates a column in the database. By default, the data type of the <a id="sthref229"></a>policy label column is <a id="sthref230"></a>NUMBER.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The act of creating a policy does not in itself have any effect on tables or schemas. It only applyies the policy to a table or schema. Refer to these sections:
<ul>
<li>
<p><a href="creatpol.htm#i1009771">"Creating a Policy with SA_SYSDBA.CREATE_POLICY"</a></p>
</li>
<li>
<p><a href="admpolcy.htm#i1011390">Applying a Policy with SA_POLICY_ADMIN.APPLY_TABLE_POLICY</a></p>
</li>
<li>
<p><a href="admpolcy.htm#i1011566">Applying a Policy with SA_POLICY_ADMIN.APPLY_SCHEMA_POLICY</a></p>
</li>
</ul>
</div>
<p>Each row's label for that policy is represented by a tag in that column, using the numeric equivalent of the character-string label value. The label tag is automatically generated when the label is created, unless the administrator specifies the tag manually at that time.</p>
<p>The automatic label generation follows the rules established by the administrator while defining the label components, as described in <a href="labels.htm#CBJHCJDC">Chapter 2, "Understanding Data Labels and User Labels"</a>.</p>
<div id="OLSAG3144" class="sect3"><a id="sthref231"></a>
<h4 class="sect3"><span class="secnum">5.1.1.1</span> Hiding the Policy Label Column</h4>
<p>The administrator can decide not to display the column representing a policy by applying the HIDE<a id="sthref232"></a> option to the table. After a policy using HIDE is applied to a table, a user executing a SELECT * or performing a DESCRIBE operation will not see the policy label column. If the policy label column is not hidden, then the label tag is displayed as data type NUMBER. Refer to <a href="enforce.htm#i1015793">"The HIDE Policy Column Option"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="i1008372"></a>
<div id="OLSAG3145" class="sect3">
<h4 class="sect3"><span class="secnum">5.1.1.2</span> Example 1: Numeric Column Data Type (NUMBER)</h4>
<pre>
SQL&gt; describe emp;
 Name                                      Null?    Type
 ----------------------------------------- -------- --------
 EMPNO                                     NOT NULL NUMBER(4)
 ENAME                                              CHAR(10)
 JOB                                                CHAR(9)
 MGR                                                NUMBER(4)
 SAL                                                NUMBER(7,2)
 DEPTNO                                    NOT NULL NUMBER(2)
 HR_LABEL                                           NUMBER(10)
</pre></div>
<!-- class="sect3" -->
<a id="i1008384"></a>
<div id="OLSAG3146" class="sect3">
<h4 class="sect3"><span class="secnum">5.1.1.3</span> Example 2: Numeric Column Data Type with Hidden Column</h4>
<p><a id="sthref233"></a>Notice that in this example, the HR_LABEL column is <span class="italic">not</span> displayed.</p>
<pre>
SQL&gt; describe emp;
 Name                                      Null?    Type
 ----------------------------------------- -------- --------
 EMPNO                                     NOT NULL NUMBER(4)
 ENAME                                              CHAR(10)
 JOB                                                CHAR(9)
 MGR                                                NUMBER(4)
 SAL                                                NUMBER(7,2)
 DEPTNO                                    NOT NULL NUMBER(2)
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1008398"></a>
<div id="OLSAG3147" class="sect2">
<h3 class="sect2"><span class="secnum">5.1.2</span> Label Tags</h3>
<p>As noted in <a href="labels.htm#CBJHCJDC">Chapter 2, "Understanding Data Labels and User Labels"</a>, the administrator first defines a set of label components to be used in a policy. When creating labels, the administrator specifies the set of valid combinations of components that can make up a label, that is, a level optionally combined with one or more groups or compartments. Each such <a id="sthref234"></a>valid label within a policy is uniquely identified by an associated numeric tag assigned by the administrator or generated automatically upon its first use. Manual definition has the advantage of allowing the administrator to control the ordering of label values when they are sorted or logically compared.</p>
<p>However, label tags must be unique across all policies in the database. When you use <a id="sthref235"></a>multiple policies in a database, you cannot use the same numeric label tag in different policies. Remember that each label tag uniquely identifies one label, and that numeric tag is what is stored in the data rows, not the label's character-string representation.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i1013334">Manually Defining Label Tags to Order Labels</a></p>
</li>
<li>
<p><a href="#i1008484">Manually Defining Label Tags to Manipulate Data</a></p>
</li>
<li>
<p><a href="#i1008496">Automatically Generated Label Tags</a></p>
</li>
</ul>
<a id="i1013334"></a>
<div id="OLSAG3148" class="sect3">
<h4 class="sect3"><span class="secnum">5.1.2.1</span> Manually Defining Label Tags to Order Labels</h4>
<p>By <a id="sthref236"></a>manually defining label tags, the administrator can implement a data manipulation strategy that permits labels to be meaningfully sorted and compared. To do this, the administrator predefines all of the labels to be associated with protected data, and assigns to each label a meaningful label tag value. Manually assigned label tags can have up to eight digits. The value of a label tag must be greater than zero.</p>
<p>It may be advantageous to implement a strategy in which label tag values are related to the numeric values of label components. In this way, you can use the tags to group data rows in a meaningful way. This approach, however, is not mandatory. It is good practice to set tags for labels of higher sensitivity to a higher numeric value than tags for labels of lower sensitivity.</p>
<p><a href="#g1014736">Table 5-1</a> illustrates a set of label tags that have been assigned by an administrator. Notice that, in this example, the administrator has based the label tag value on the numeric form of the levels, compartments, and rows that were discussed in <a href="labels.htm#CBJHCJDC">Chapter 2, "Understanding Data Labels and User Labels"</a>.</p>
<div id="OLSAG3149" class="tblformal">
<p class="titleintable"><a id="sthref237"></a><a id="g1014736"></a>Table 5-1 Administratively Defined Label Tags (Example)</p>
<table class="cellalignment2269" title="Administratively Defined Label Tags (Example)" summary="This table provides example label tags and label strings to aid in the discussion that follows." dir="ltr">
<thead>
<tr class="cellalignment2260">
<th class="cellalignment2267" id="r1c1-t4">Label Tag</th>
<th class="cellalignment2267" id="r1c2-t4">Label String</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r2c1-t4" headers="r1c1-t4">
<p>10000</p>
</td>
<td class="cellalignment2268" headers="r2c1-t4 r1c2-t4">
<p>P</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r3c1-t4" headers="r1c1-t4">
<p>20000</p>
</td>
<td class="cellalignment2268" headers="r3c1-t4 r1c2-t4">
<p>C</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r4c1-t4" headers="r1c1-t4">
<p>21000</p>
</td>
<td class="cellalignment2268" headers="r4c1-t4 r1c2-t4">
<p>C:FNCL</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r5c1-t4" headers="r1c1-t4">
<p>21100</p>
</td>
<td class="cellalignment2268" headers="r5c1-t4 r1c2-t4">
<p>C:FNCL,OP</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r6c1-t4" headers="r1c1-t4">
<p>30000</p>
</td>
<td class="cellalignment2268" headers="r6c1-t4 r1c2-t4">
<p>S</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r7c1-t4" headers="r1c1-t4">
<p>31110</p>
</td>
<td class="cellalignment2268" headers="r7c1-t4 r1c2-t4">
<p>S:OP:WR</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r8c1-t4" headers="r1c1-t4">
<p>40000</p>
</td>
<td class="cellalignment2268" headers="r8c1-t4 r1c2-t4">
<p>HS</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r9c1-t4" headers="r1c1-t4">
<p>42000</p>
</td>
<td class="cellalignment2268" headers="r9c1-t4 r1c2-t4">
<p>HS:OP</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a id="sthref238"></a>In this example, labels with a level of PUBLIC begin with "1", labels with a level of CONFIDENTIAL begin with "2", labels with a level of SENSITIVE begin with "3", and labels with a level of HIGHLY_SENSITIVE begin with "4".</p>
<p>Labels with the FINANCIAL compartment then come in the 1000 range, labels with the compartment OP are in the 1100 range, and so on. The tens place is used to indicate the group WR, for example.</p>
<p>Another strategy might be completely based on groups, where the tags might be 3110, 3120, 3130, and so on.</p>
<p>Note, however, that label tags identify the <span class="italic">whole</span> label, independent of the numeric values assigned for the individual label components. The label tag is used as a whole integer, not as a set of individually evaluated numbers.</p>
</div>
<!-- class="sect3" -->
<a id="i1008484"></a>
<div id="OLSAG3150" class="sect3">
<h4 class="sect3"><span class="secnum">5.1.2.2</span> Manually Defining Label Tags to Manipulate Data</h4>
<p><a id="sthref239"></a>An administratively defined label tag can serve as a convenient way to reference a complete label string (that is, a particular combination of label components). As illustrated in <a href="#g1014736">Table 5-1</a>, for example, the tag "31110" could stand for the complete label string "S:OP:WR".</p>
<p>Label tags can be used as a convenient way to <a id="sthref240"></a>partition data. For example, all data with labels in the range 1000 - 1999 could be placed in tablespace A, all data with labels in the range 2000 - 2999 could be placed in tablespace B, and so on.</p>
<p>This simplified notation also comes in handy when there is a finite number of labels and you need to perform various operations upon them. Consider a situation in which one company hosts a human resources system for many other companies. Assume that all users from Company Y have the label "C:ALPHA:CY", for which the tag "210" has been set. To determine the total number of application users from Company Y, the host administrator can enter:</p>
<pre>
SELECT * FROM tab1
  WHERE hr_label = 210;
</pre></div>
<!-- class="sect3" -->
<a id="i1008496"></a>
<div id="OLSAG3151" class="sect3">
<h4 class="sect3"><span class="secnum">5.1.2.3</span> Automatically Generated Label Tags</h4>
<p>Dynamically generated label tags, illustrated in <a href="#g1014767">Table 5-2</a>, have 10 digits, with no relationship to numbers assigned to any label component. There is no way to group the data by label.</p>
<div id="OLSAG3152" class="tblformal">
<p class="titleintable"><a id="sthref241"></a><a id="g1014767"></a>Table 5-2 Generated Label Tags (Example)</p>
<table class="cellalignment2269" title="Generated Label Tags (Example)" summary="This table lists example label tags and associated label strings for use in the discussion that follows." dir="ltr">
<thead>
<tr class="cellalignment2260">
<th class="cellalignment2267" id="r1c1-t5">Label Tag</th>
<th class="cellalignment2267" id="r1c2-t5">Label String</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r2c1-t5" headers="r1c1-t5">
<p>100000020</p>
</td>
<td class="cellalignment2268" headers="r2c1-t5 r1c2-t5">
<p>P</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r3c1-t5" headers="r1c1-t5">
<p>100000052</p>
</td>
<td class="cellalignment2268" headers="r3c1-t5 r1c2-t5">
<p>C</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r4c1-t5" headers="r1c1-t5">
<p>100000503</p>
</td>
<td class="cellalignment2268" headers="r4c1-t5 r1c2-t5">
<p>C:FNCL</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r5c1-t5" headers="r1c1-t5">
<p>100000132</p>
</td>
<td class="cellalignment2268" headers="r5c1-t5 r1c2-t5">
<p>C:FNCL,OP</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r6c1-t5" headers="r1c1-t5">
<p>100000003</p>
</td>
<td class="cellalignment2268" headers="r6c1-t5 r1c2-t5">
<p>S</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r7c1-t5" headers="r1c1-t5">
<p>100000780</p>
</td>
<td class="cellalignment2268" headers="r7c1-t5 r1c2-t5">
<p>S:OP:WR</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r8c1-t5" headers="r1c1-t5">
<p>100000035</p>
</td>
<td class="cellalignment2268" headers="r8c1-t5 r1c2-t5">
<p>HS</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r9c1-t5" headers="r1c1-t5">
<p>100000036</p>
</td>
<td class="cellalignment2268" headers="r9c1-t5 r1c2-t5">
<p>HS:OP</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="creatpol.htm#i1010362">"Creating a Valid Data Label with SA_LABEL_ADMIN.CREATE_LABEL"</a></p>
</li>
<li>
<p><a href="utilities.htm#i1013201">"Planning a Label Tag Strategy to Enhance Performance"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<div id="OLSAG021" class="sect1"><a id="sthref242"></a>
<h2 class="sect1"><span class="secnum">5.2</span> Assigning Labels to Data Rows</h2>
<p>For rows that are being inserted, refer to <a href="#i1008917">Inserting Labeled Data</a>.</p>
<p>For existing data rows, labels can be assigned by a labeling function that you create. In such a function, you specify the exact table and row conditions defining what label to insert. The function can be named in the call to apply a policy to a table or schema, or in an update by the administrator.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="enforce.htm#i1010887">"Using a Labeling Function"</a></p>
</li>
<li>
<p><a href="admpolcy.htm#i1011390">Applying a Policy with SA_POLICY_ADMIN.APPLY_TABLE_POLICY</a>.</p>
</li>
<li>
<p><a href="admpolcy.htm#i1011566">"Applying a Policy with SA_POLICY_ADMIN.APPLY_SCHEMA_POLICY"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1008562"></a>
<div id="OLSAG022" class="sect1">
<h2 class="sect1"><span class="secnum">5.3</span> Presenting the Label</h2>
<p>When you retrieve labels, you do not automatically obtain the character string value. By default, the label tag value is returned. Two label manipulation functions enable you to convert the label tag value to and from its character string representation:</p>
<ul>
<li>
<p><a href="#i1008573">Converting a Character String to a Label Tag, with CHAR_TO_LABEL</a></p>
</li>
<li>
<p><a href="#i1008589">Converting a Label Tag to a Character String, with LABEL_TO_CHAR</a></p>
</li>
</ul>
<a id="i1008573"></a>
<div id="OLSAG3153" class="sect2">
<h3 class="sect2"><span class="secnum">5.3.1</span> Converting a Character String to a Label Tag, with CHAR_TO_LABEL</h3>
<p><a id="sthref243"></a>Use the <a id="sthref244"></a>CHAR_TO_LABEL function to convert a character string to a label tag. This function returns the label tag for the specified character string.</p>
<p><span class="bold">Syntax:</span></p>
<pre>
FUNCTION CHAR_TO_LABEL (
     policy_name     IN VARCHAR2,
     label_string    IN VARCHAR2)
RETURN NUMBER; 
</pre>
<p><span class="bold">Example:</span></p>
<pre>
INSERT INTO emp (empno,hr_label) 
VALUES (999, CHAR_TO_LABEL('HR','S:A,B:G5');
</pre>
<p>Here, <code>HR</code> is the label policy name, <code>S</code> is a sensitivity level, <code>A,B</code> compartments, and <code>G5</code> a group.</p>
</div>
<!-- class="sect2" -->
<a id="i1008589"></a>
<div id="OLSAG3154" class="sect2">
<h3 class="sect2"><span class="secnum">5.3.2</span> Converting a Label Tag to a Character String, with LABEL_TO_CHAR</h3>
<p><a id="sthref245"></a>When you query a table or view, you automatically retrieve all of the rows in the table or view that satisfy the qualifications of the query and are dominated by your label. If the policy label column is not hidden, then the label tag value for each row is displayed. You must use the <a id="sthref246"></a>LABEL_TO_CHAR function to display the character string value of each label.</p>
<p>Note that all conversions must be explicit. There is no automatic casting to and from tag and character string representations.</p>
<p>Syntax:</p>
<pre>
FUNCTION LABEL_TO_CHAR (
     label                 IN NUMBER)
RETURN VARCHAR2; 
</pre>
<div id="OLSAG3155" class="sect3"><a id="sthref247"></a>
<h4 class="sect3"><span class="secnum">5.3.2.1</span> LABEL_TO_CHAR Examples</h4>
<p>The examples that follow illustrate the use of LABEL_TO_CHAR.</p>
<div id="OLSAG3156" class="sect4"><a id="sthref248"></a>
<h5 class="sect4"><span class="secnum">5.3.2.1.1</span> Example 1:</h5>
<p>To retrieve the label of a row from a table or view, specify the <a id="sthref249"></a>policy label column in the SELECT statement as follows:</p>
<pre>
SELECT label_to_char (hr_label) AS label, ename FROM tab1;
  WHERE ename = 'RWRIGHT';
</pre>
<p>This statement returns the following:</p>
<pre>
LABEL          ENAME
------------   ----------
S:A,B:G1       RWRIGHT
</pre></div>
<!-- class="sect4" -->
<div id="OLSAG3157" class="sect4"><a id="sthref250"></a>
<h5 class="sect4"><span class="secnum">5.3.2.1.2</span> Example 2:</h5>
<p>You can also specify the policy label column in the WHERE clause of a SELECT statement. The following statement displays all rows that have the policy label <code>S:A,B:G1</code></p>
<pre>
SELECT label_to_char (hr_label) AS label,ename FROM emp
  WHERE hr_label = char_to_label ('HR', 'S:A,B:G1');
</pre>
<p>This statement returns the following:</p>
<pre>
LABEL           ENAME
-------------   ---------
S:A,B:G1        RWRIGHT
S:A,B:G1        ESTANTON 
</pre>
<p>Alternatively, you could use a more flexible statement to look up data that contains the string "S:A,B:G1" anywhere in the text of the HR_LABEL column:</p>
<pre>
SELECT label_to_char (hr_label) AS label,ename FROM emp
  WHERE label_to_char (hr_label) like '%S:A,B:G1%';
</pre>
<p>If you do not use the LABEL_TO_CHAR function, then you will see the label tag.</p>
</div>
<!-- class="sect4" -->
<div id="OLSAG3158" class="sect4"><a id="sthref251"></a>
<h5 class="sect4"><span class="secnum">5.3.2.1.3</span> Example 3:</h5>
<p>The following example is with the numeric column data type (NUMBER) and dynamically generated label tags, but without using the <a id="sthref252"></a>LABEL_TO_CHAR function. If you do not use the LABEL_TO_CHAR function, then you will see the label tag.</p>
<pre>
SQL&gt; select empno, hr_label from emp
     where ename='RWRIGHT';

EMPNO      HR_LABEL
---------- ----------
7839       1000000562
</pre></div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="i1008634"></a>
<div id="OLSAG3159" class="sect3">
<h4 class="sect3"><span class="secnum">5.3.2.2</span> Retrieving All Columns from a Table When the Policy Label Column Is Hidden</h4>
<p>If the <a id="sthref253"></a>policy label column is hidden, then it is not automatically returned when you select all columns from a table using the SELECT * command. You must explicitly specify that you want to retrieve the label. For example, to retrieve all columns from the DEPT table (including the policy label column in its character representation), enter the following:</p>
<pre>
SQL&gt; column label format a10
SQL&gt; select label_to_char (hr_label) as label, dept.*
  2  from dept;
</pre>
<p>Running these SQL statements returns the following data:</p>
<div id="OLSAG3160" class="tblformal">
<p class="titleintable"><a id="sthref254"></a><a id="sthref255"></a>Table 5-3 Data Returned from Sample SQL Statements re Hidden Column</p>
<table class="cellalignment2269" title="Data Returned from Sample SQL Statements re Hidden Column " summary="This table shows the data returned from the query shown, listing the label, department number, distinguished name, and location." dir="ltr">
<thead>
<tr class="cellalignment2260">
<th class="cellalignment2267" id="r1c1-t8">LABEL</th>
<th class="cellalignment2267" id="r1c2-t8">DEPTNO</th>
<th class="cellalignment2267" id="r1c3-t8">DNAME</th>
<th class="cellalignment2267" id="r1c4-t8">LOC</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r2c1-t8" headers="r1c1-t8">
<p>L1</p>
</td>
<td class="cellalignment2268" headers="r2c1-t8 r1c2-t8">
<p>10</p>
</td>
<td class="cellalignment2268" headers="r2c1-t8 r1c3-t8">
<p>ACCOUNTING</p>
</td>
<td class="cellalignment2268" headers="r2c1-t8 r1c4-t8">
<p>NEW YORK</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r3c1-t8" headers="r1c1-t8">
<p>L1</p>
</td>
<td class="cellalignment2268" headers="r3c1-t8 r1c2-t8">
<p>20</p>
</td>
<td class="cellalignment2268" headers="r3c1-t8 r1c3-t8">
<p>RESEARCH</p>
</td>
<td class="cellalignment2268" headers="r3c1-t8 r1c4-t8">
<p>DALLAS</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r4c1-t8" headers="r1c1-t8">
<p>L1</p>
</td>
<td class="cellalignment2268" headers="r4c1-t8 r1c2-t8">
<p>30</p>
</td>
<td class="cellalignment2268" headers="r4c1-t8 r1c3-t8">
<p>SALES</p>
</td>
<td class="cellalignment2268" headers="r4c1-t8 r1c4-t8">
<p>CHICAGO</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r5c1-t8" headers="r1c1-t8">
<p>L1</p>
</td>
<td class="cellalignment2268" headers="r5c1-t8 r1c2-t8">
<p>40</p>
</td>
<td class="cellalignment2268" headers="r5c1-t8 r1c3-t8">
<p>OPERATIONS</p>
</td>
<td class="cellalignment2268" headers="r5c1-t8 r1c4-t8">
<p>BOSTON</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>By contrast, if you do not explicitly specify the HR_LABEL column, the label is not displayed at all. Note that while the policy column name is on a policy basis, the <a id="sthref256"></a>HIDE option is on a table-by-table basis.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="enforce.htm#i1015793">"The HIDE Policy Column Option"</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008661"></a>
<div id="OLSAG023" class="sect1">
<h2 class="sect1"><span class="secnum">5.4</span> Filtering Data Using Labels</h2>
<p>During the processing of SQL statements, Oracle Label Security makes calls to the security policies defined in the database by the create and apply procedures discussed in <a href="creatpol.htm#CIHHBACI">Chapter 7, "Creating an Oracle Label Security Policy"</a> and <a href="admpolcy.htm#BGBGFGHH">Chapter 10, "Applying Policies to Tables and Schemas"</a>. For SELECT statements, the policy filters the data rows that the user is authorized to see. For INSERT, UPDATE, and DELETE statements, Oracle Label Security permits or denies the requested operation, based on the user's authorizations.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i1008702">Using Numeric Label Tags in WHERE Clauses</a></p>
</li>
<li>
<p><a href="#i1008735">Ordering Labeled Data Rows</a></p>
</li>
<li>
<p><a href="#i1008748">Ordering by Character Representation of Label</a></p>
</li>
<li>
<p><a href="#i1008754">Determining Upper and Lower Bounds of Labels</a></p>
</li>
<li>
<p><a href="#i1008812">Merging Labels with the MERGE_LABEL Function</a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="utilities.htm#i1013275">"Partitioning Data Based on Numeric Label Tags"</a></div>
</li>
</ul>
<a id="i1008702"></a>
<div id="OLSAG3161" class="sect2">
<h3 class="sect2"><span class="secnum">5.4.1</span> Using Numeric Label Tags in WHERE Clauses</h3>
<p>This section describes techniques of using numeric <a id="sthref257"></a>label tags in WHERE clauses of SELECT statements.</p>
<p>When using labels in the NUMBER format, the administrator can set up labels so that a list of their label tags distinguishes the different levels. Comparisons of these numeric label tags can be used for <a id="sthref258"></a>ORDER BY processing, and with the logical operators.</p>
<p>For example, if the administrator has assigned all UNCLASSIFIED labels to the 1000 range, all SENSITIVE labels to the 2000 range, and all HIGHLY_SENSITIVE labels to the 3000 range, then you can list all SENSITIVE records by entering:</p>
<pre>
SELECT * FROM emp
WHERE hr_label BETWEEN 2000 AND 2999;
</pre>
<p>To list all SENSITIVE and UNCLASSIFIED records, you can enter:</p>
<pre>
SELECT * FROM emp
WHERE hr_label &lt;3000;
</pre>
<p>To list all HIGHLY_SENSITIVE records, you can enter:</p>
<pre>
SELECT * FROM emp
WHERE hr_label=3000;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Remember that such queries have meaning only if the administrator has applied a numeric ordering strategy to the label tags that he or she originally assigned to the labels. In this way, the administrator can provide for convenient dissemination of data. If, however, the label tag values are generated automatically, then there is no intrinsic relationship between the value of the tag and the order of the labels.</div>
<p>Alternatively, you can use dominance relationships to set up an ordering strategy.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="appxa.htm#i634488">"Using Dominance Functions"</a></div>
</div>
<!-- class="sect2" -->
<a id="i1008735"></a>
<div id="OLSAG3162" class="sect2">
<h3 class="sect2"><span class="secnum">5.4.2</span> Ordering Labeled Data Rows</h3>
<p>You can perform an <a id="sthref259"></a>ORDER BY referencing the policy label column to order rows by the numeric label tag value that the administrator has set. For example:</p>
<pre>
SELECT * from emp
ORDER BY hr_label;
</pre>
<p>Notice that no functions were necessary in this statement. The statement made use of label tags set up by the administrator.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Again, such queries have meaning only if the administrator has applied a numeric ordering strategy to the label tags originally assigned to the labels.</div>
</div>
<!-- class="sect2" -->
<a id="i1008748"></a>
<div id="OLSAG3163" class="sect2">
<h3 class="sect2"><span class="secnum">5.4.3</span> Ordering by Character Representation of Label</h3>
<p>Using the <a id="sthref260"></a>LABEL_TO_CHAR function, you can order data rows by the character representation of the label. For example, the following statement returns all rows sorted by the text order of the label:</p>
<pre>
SELECT * FROM emp
ORDER BY label_to_char (hr_label);
</pre></div>
<!-- class="sect2" -->
<a id="i1008754"></a>
<div id="OLSAG3164" class="sect2">
<h3 class="sect2"><span class="secnum">5.4.4</span> Determining Upper and Lower Bounds of Labels</h3>
<p>This section describes the Oracle Label Security functions that determine the least upper bound or the greatest lower bound of two or more labels. Two single-row functions operate on each row returned by a query. They return one result for each row.</p>
<ul>
<li>
<p><a href="#i1008773">Finding Least Upper Bound with LEAST_UBOUND</a></p>
</li>
<li>
<p><a href="#i1008800">Finding Greatest Lower Bound with GREATEST_LBOUND</a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In all functions that take multiple labels, the labels must all belong to the same policy.</div>
</li>
</ul>
<a id="i1008773"></a>
<div id="OLSAG3165" class="sect3">
<h4 class="sect3"><span class="secnum">5.4.4.1</span> Finding Least Upper Bound with LEAST_UBOUND</h4>
<p>The <a id="sthref261"></a>LEAST_UBOUND (<a id="sthref262"></a>LUBD) function returns a character string label that is the least upper bound of <span class="italic">label1</span> and <span class="italic">label2:</span> that is, the one label that <a id="sthref263"></a>dominates both. The least upper bound is the highest level, the union of the compartments in the labels, and the union of the groups in the labels. For example, the least upper bound of HIGHLY_SENSITIVE:ALPHA and SENSITIVE:BETA is HIGHLY_SENSITIVE:ALPHA,BETA.</p>
<p>Syntax:</p>
<pre>
FUNCTION LEAST_UBOUND (
     label1                    IN NUMBER,
     label2                    IN NUMBER) 
RETURN VARCHAR2; 
</pre>
<p>The LEAST_UBOUND function is useful when joining rows with different labels, because it provides a high water mark label for joined rows.</p>
<p>The following query compares each employee's label with the label of his or her department, and returns the higher label, whether it be in the EMP table or the DEPT table.</p>
<pre>
SELECT ename,dept.deptno, 
  LEAST_UBOUND(emp.hr_label,dept.hr_label) as label
  FROM emp, dept
  WHERE emp.deptno=dept.deptno;
</pre>
<p>This query returns the following data:</p>
<div id="OLSAG3166" class="tblformal">
<p class="titleintable"><a id="sthref264"></a><a id="g1015036"></a>Table 5-4 Data Returned from Sample SQL Statements re Least_UBound</p>
<table class="cellalignment2269" title="Data Returned from Sample SQL Statements re Least_UBound " summary="This table lists the rows returned from the query, showing each row&rsquo;s employee name, department number, and label." dir="ltr">
<thead>
<tr class="cellalignment2260">
<th class="cellalignment2267" id="r1c1-t15">ENAME</th>
<th class="cellalignment2267" id="r1c2-t15">DEPTNO</th>
<th class="cellalignment2267" id="r1c3-t15">LABEL</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r2c1-t15" headers="r1c1-t15">
<p>KING</p>
</td>
<td class="cellalignment2268" headers="r2c1-t15 r1c2-t15">
<p>10</p>
</td>
<td class="cellalignment2268" headers="r2c1-t15 r1c3-t15">
<p>L3:M:D10</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r3c1-t15" headers="r1c1-t15">
<p>BLAKE</p>
</td>
<td class="cellalignment2268" headers="r3c1-t15 r1c2-t15">
<p>30</p>
</td>
<td class="cellalignment2268" headers="r3c1-t15 r1c3-t15">
<p>L3:M:D30</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r4c1-t15" headers="r1c1-t15">
<p>CLARK</p>
</td>
<td class="cellalignment2268" headers="r4c1-t15 r1c2-t15">
<p>10</p>
</td>
<td class="cellalignment2268" headers="r4c1-t15 r1c3-t15">
<p>L3:M:D10</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r5c1-t15" headers="r1c1-t15">
<p>JONES</p>
</td>
<td class="cellalignment2268" headers="r5c1-t15 r1c2-t15">
<p>20</p>
</td>
<td class="cellalignment2268" headers="r5c1-t15 r1c3-t15">
<p>L3:M:D20</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r6c1-t15" headers="r1c1-t15">
<p>MARTIN</p>
</td>
<td class="cellalignment2268" headers="r6c1-t15 r1c2-t15">
<p>30</p>
</td>
<td class="cellalignment2268" headers="r6c1-t15 r1c3-t15">
<p>L2:E:D30</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<a id="i1008800"></a>
<div id="OLSAG3167" class="sect3">
<h4 class="sect3"><span class="secnum">5.4.4.2</span> Finding Greatest Lower Bound with GREATEST_LBOUND</h4>
<p><a id="sthref265"></a>The <a id="sthref266"></a>GREATEST_LBOUND (<a id="sthref267"></a>GLBD) function can be used to determine the lowest label of the data that can be involved in an operation, given two different labels. It returns a character string label that is the greatest lower bound of <span class="italic">label1</span> and <span class="italic">label2</span>. The greatest lower bound is the lowest level, the intersection of the compartments in the labels and the groups in the labels. For example, the greatest lower bound of HIGHLY_SENSITIVE:ALPHA and SENSITIVE is SENSITIVE.</p>
<p>Syntax:</p>
<pre>
FUNCTION GREATEST_LBOUND (
     label1                  IN NUMBER,
     label2                  IN NUMBER) 
RETURN VARCHAR2; 
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1008812"></a>
<div id="OLSAG3168" class="sect2">
<h3 class="sect2"><span class="secnum">5.4.5</span> Merging Labels with the MERGE_LABEL Function</h3>
<p>The <a id="sthref268"></a>MERGE_LABEL function is a utility for merging two <a id="sthref269"></a>labels together. It accepts the character string form of two labels and the three-character specification of a merge format. Its syntax is as follows:</p>
<p><span class="bold">Syntax:</span></p>
<pre>
FUNCTION merge_label (label1 IN number,
                      label2 IN number,
                      merge_format IN VARCHAR2)
RETURN number;
</pre>
<p>The valid merge format is specified with a three-character string:</p>
<p><span class="italic">&lt;highest level or lowest level&gt;&lt;union or intersection of compartments&gt;&lt;union or intersection of groups&gt;</span></p>
<ul>
<li>
<p>The first character indicates whether to merge using the highest level or the lowest level of the two labels.</p>
</li>
<li>
<p>The second character indicates whether to merge using the union or the intersection of the compartments in the two labels.</p>
</li>
<li>
<p>The third character indicates whether to merge using the union or the intersection of the groups in the two labels.</p>
</li>
</ul>
<p>The following table defines the MERGE_LABEL format constants.</p>
<div id="OLSAG3169" class="tblformal">
<p class="titleintable"><a id="sthref270"></a><a id="sthref271"></a>Table 5-5 MERGE_LABEL Format Constants</p>
<table class="cellalignment2269" title="MERGE_LABEL Format Constants " summary="This table lists the constants used in MERGE_LABEL formats, giving for each one the format specification, datatype, constsant, meaning, and position where it is used." dir="ltr">
<thead>
<tr class="cellalignment2260">
<th class="cellalignment2267" id="r1c1-t16">Format Specification</th>
<th class="cellalignment2267" id="r1c2-t16">Data Type</th>
<th class="cellalignment2267" id="r1c3-t16">Constant</th>
<th class="cellalignment2267" id="r1c4-t16">Meaning</th>
<th class="cellalignment2267" id="r1c5-t16">Positions in Which Format Is Used</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r2c1-t16" headers="r1c1-t16">
<p>max_lvl_fmt</p>
</td>
<td class="cellalignment2268" headers="r2c1-t16 r1c2-t16">
<p>CONSTANT varchar2(1)</p>
</td>
<td class="cellalignment2268" headers="r2c1-t16 r1c3-t16">
<p>H</p>
</td>
<td class="cellalignment2268" headers="r2c1-t16 r1c4-t16">
<p>Maximum level</p>
</td>
<td class="cellalignment2268" headers="r2c1-t16 r1c5-t16">
<p>First (level)</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r3c1-t16" headers="r1c1-t16">
<p>min_lvl_fmt</p>
</td>
<td class="cellalignment2268" headers="r3c1-t16 r1c2-t16">
<p>CONSTANT varchar2(1)</p>
</td>
<td class="cellalignment2268" headers="r3c1-t16 r1c3-t16">
<p>L</p>
</td>
<td class="cellalignment2268" headers="r3c1-t16 r1c4-t16">
<p>Minimum level</p>
</td>
<td class="cellalignment2268" headers="r3c1-t16 r1c5-t16">
<p>First (Level)</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r4c1-t16" headers="r1c1-t16">
<p>union_fmt</p>
</td>
<td class="cellalignment2268" headers="r4c1-t16 r1c2-t16">
<p>CONSTANT varchar2(1)</p>
</td>
<td class="cellalignment2268" headers="r4c1-t16 r1c3-t16">
<p>U</p>
</td>
<td class="cellalignment2268" headers="r4c1-t16 r1c4-t16">
<p>Union of the two labels</p>
</td>
<td class="cellalignment2268" headers="r4c1-t16 r1c5-t16">
<p>Second (compartments) and Third (groups)</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r5c1-t16" headers="r1c1-t16">
<p>inter_fmt</p>
</td>
<td class="cellalignment2268" headers="r5c1-t16 r1c2-t16">
<p>CONSTANT varchar2(1)</p>
</td>
<td class="cellalignment2268" headers="r5c1-t16 r1c3-t16">
<p>I</p>
</td>
<td class="cellalignment2268" headers="r5c1-t16 r1c4-t16">
<p>Intersection of the two labels</p>
</td>
<td class="cellalignment2268" headers="r5c1-t16 r1c5-t16">
<p>Second (compartments) and Third (groups)</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r6c1-t16" headers="r1c1-t16">
<p>minus_fmt</p>
</td>
<td class="cellalignment2268" headers="r6c1-t16 r1c2-t16">
<p>CONSTANT varchar2(1)</p>
</td>
<td class="cellalignment2268" headers="r6c1-t16 r1c3-t16">
<p>M</p>
</td>
<td class="cellalignment2268" headers="r6c1-t16 r1c4-t16">
<p>Remove second label from first label</p>
</td>
<td class="cellalignment2268" headers="r6c1-t16 r1c5-t16">
<p>Second (compartments) and Third (groups)</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r7c1-t16" headers="r1c1-t16">
<p>null_fmt</p>
</td>
<td class="cellalignment2268" headers="r7c1-t16 r1c2-t16">
<p>CONSTANT varchar2(1)</p>
</td>
<td class="cellalignment2268" headers="r7c1-t16 r1c3-t16">
<p>N</p>
</td>
<td class="cellalignment2268" headers="r7c1-t16 r1c4-t16">
<p>If specified in compartments column, returns no compartments. If specified in groups column, returns no groups.</p>
</td>
<td class="cellalignment2268" headers="r7c1-t16 r1c5-t16">
<p>Second (compartments) and Third (groups)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>For example, HUI specifies the highest level of the two labels, union of the compartments, intersection of the groups.</p>
<p>The <a id="sthref272"></a>MERGE_LABEL function is particularly useful to developers if the <a id="sthref273"></a>LEAST_UBOUND function does not provide the intended result. The LEAST_UBOUND function, when used with two labels containing groups, may result in a less sensitive data label than expected. The MERGE_LABEL function enables you to compute an intersection on the groups, instead of the union of groups that is provided by the LEAST_UBOUND function.</p>
<p>For example, if the label of one data record contains the group UNITED_STATES, and the label of another data record contains the group UNITED_KINGDOM, and the LEAST_UBOUND function is used to compute the least upper bound of these two labels, then the resulting label would be accessible to users authorized for either the UNITED_STATES or the UNITED_KINGDOM.</p>
<p>If, by contrast, the MERGE_LABEL function is used with a format clause of HUI, then the resulting label would contain the highest level, the union of the compartments, and no groups. This is because UNITED_STATES and UNITED_KINGDOM do not intersect.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008917"></a>
<div id="OLSAG024" class="sect1">
<h2 class="sect1"><span class="secnum">5.5</span> Inserting Labeled Data</h2>
<p><a id="sthref274"></a>When you insert data into a table protected by a policy under Oracle Label Security, a numeric label value tag must be supplied, usually in the INSERT statement itself.</p>
<p>To do this, you must explicitly specify the tag for the desired label or explicitly convert the character string representation of the label into the correct tag. Note that this does not mean generating new label tags, but referencing the correct tag. When Oracle Label Security is using Oracle Internet Directory, the only permissible labels (and corresponding tags) are those pre-defined by the administrator and already in Oracle Internet Directory.</p>
<p>The only times an INSERT statement may omit a label value are:</p>
<ol>
<li>
<p>if the LABEL_DEFAULT enforcement option was specified when the policy was applied, or</p>
</li>
<li>
<p>if no enforcement options were specified when the policy was applied and LABEL_DEFAULT was specified when the policy was created, or</p>
</li>
<li>
<p>if the statement applying the policy named a labeling function. <a id="sthref275"></a></p>
</li>
</ol>
<p>In cases 1 and 2, the user's session default row label is used as the inserted row's label. In case 3, the inserted row's label is created by that labeling function.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="admpolcy.htm#i1011390">"Applying a Policy with SA_POLICY_ADMIN.APPLY_TABLE_POLICY"</a>, or to schemas</p>
</li>
<li>
<p><a href="creatpol.htm#i1009771">"Creating a Policy with SA_SYSDBA.CREATE_POLICY"</a></p>
</li>
<li>
<p><a href="enforce.htm#i1010887">"Using a Labeling Function"</a></p>
</li>
<li>
<p>All of <a href="enforce.htm#i1017341">Chapter 9, "Implementing Policy Enforcement Options and Labeling Functions"</a> regarding reading and writing labeled data (and labels) and according to policy enforcement options</p>
</li>
</ul>
</div>
<p>This section explains the different ways to specify a label in an INSERT statement:</p>
<ul>
<li>
<p><a href="#i1008954">Inserting Labels Using CHAR_TO_LABEL</a></p>
</li>
<li>
<p><a href="#i1008961">Inserting Labels Using Numeric Label Tag Values</a></p>
</li>
<li>
<p><a href="#i1008967">Inserting Data Without Specifying a Label</a></p>
</li>
<li>
<p><a href="#i1008976">Inserting Data When the Policy Label Column Is Hidden</a></p>
</li>
<li>
<p><a href="#i1008992">Inserting Labels Using TO_DATA_LABEL</a></p>
</li>
</ul>
<a id="i1008954"></a>
<div id="OLSAG3170" class="sect2">
<h3 class="sect2"><span class="secnum">5.5.1</span> Inserting Labels Using CHAR_TO_LABEL</h3>
<p>To insert a <a id="sthref276"></a>row label, you can specify the label character string and then transform it into a label using the <a id="sthref277"></a>CHAR_TO_LABEL function. Using the definition for table emp, the following example shows how to insert data with explicit labels:</p>
<pre>
INSERT INTO emp (ename,empno,hr_label)
VALUES ('ESTANTON',10,char_to_label ('HR', 'SENSITIVE'));
</pre></div>
<!-- class="sect2" -->
<a id="i1008961"></a>
<div id="OLSAG3171" class="sect2">
<h3 class="sect2"><span class="secnum">5.5.2</span> Inserting Labels Using Numeric Label Tag Values</h3>
<p>You can insert data using the numeric <a id="sthref278"></a>label tag value of a label, rather than using the CHAR_TO_LABEL function. For example, if the numeric label tag for SENSITIVE is 3000, it would look like this:</p>
<pre>
INSERT INTO emp (ename, empno, hr_label)
VALUES ('ESTANTON', 10, 3000);
</pre></div>
<!-- class="sect2" -->
<a id="i1008967"></a>
<div id="OLSAG3172" class="sect2">
<h3 class="sect2"><span class="secnum">5.5.3</span> Inserting Data Without Specifying a Label</h3>
<p>If <a id="sthref279"></a>LABEL_DEFAULT is set, or if there is a <a id="sthref280"></a>labeling function applied to the table, then you do not need to specify a label in your INSERT statements. The label will be provided automatically. You can enter the following command:</p>
<pre>
INSERT INTO emp (ename, empno)
VALUES ('ESTANTON', 10);
</pre>
<p>The resulting row label is set according to the default value (or by a labeling function).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="enforce.htm#i1010585">"Overview of Policy Enforcement Options"</a></p>
</li>
<li>
<p><a href="enforce.htm#i1010712">"The Label Management Enforcement Options"</a></p>
</li>
<li>
<p><a href="enforce.htm#i1010887">"Using a Labeling Function"</a></p>
</li>
<li>
<p><a href="admpolcy.htm#i1011390">"Applying a Policy with SA_POLICY_ADMIN.APPLY_TABLE_POLICY"</a></p>
</li>
<li>
<p><a href="creatpol.htm#i1009771">"Creating a Policy with SA_SYSDBA.CREATE_POLICY"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i1008976"></a>
<div id="OLSAG3173" class="sect2">
<h3 class="sect2"><span class="secnum">5.5.4</span> Inserting Data When the Policy Label Column Is Hidden</h3>
<p><a id="sthref281"></a>If the label column is hidden, then the existence of the column is transparent to the insertion of data. INSERT statements can be written that do not explicitly list the table columns and do not include a value for the label column. The session's row label is used to label the data, or a labeling function is used if one was specified when the policy was applied to the table or schema.</p>
<p>You can insert into a table without explicitly naming the columns, as long as you specify a value for each non-hidden column in the table. The following example shows how to insert a row into the table described in <a href="#i1008384">"Example 2: Numeric Column Data Type with Hidden Column"</a>:</p>
<pre>
INSERT INTO emp
VALUES ('196','ESTANTON',Technician,RSTOUT,50000,10);
</pre>
<p>Its label will be one of the following three possibilities:</p>
<ul>
<li>
<p>The label you specify</p>
</li>
<li>
<p>The label established by the LABEL_DEFAULT option of the policy being applied</p>
</li>
<li>
<p>The label created by a labeling function named by the policy being applied</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the <a id="sthref282"></a>policy label column is <span class="italic">not</span> hidden, then you must explicitly include a label value (possibly null, indicated by a comma) in the INSERT statement.</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1008992"></a>
<div id="OLSAG3174" class="sect2">
<h3 class="sect2"><span class="secnum">5.5.5</span> Inserting Labels Using TO_DATA_LABEL</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
When Oracle Label Security is installed to work with Oracle Internet Directory, dynamic label generation is not allowed, because labels are managed centrally in Oracle Internet Directory, using <code>olsadmintool</code> commands. Refer to <a href="appxb.htm#CJHBBFFB">Appendix B, "Command-line Tools for Label Security Using Oracle Internet Directory"</a>
<p>So, when Oracle Label Security is directory-enabled, this function, TO_DATA_LABEL, is not available and will generate an error message if used.</p>
</div>
<p>If you are generating new labels dynamically as you insert data, then you can use the <a id="sthref283"></a>TO_DATA_LABEL function to guarantee that this produces valid data labels. To do this, you must the have EXECUTE authority on the TO_DATA_LABEL function.</p>
<p>Whereas the <a id="sthref284"></a>CHAR_TO_LABEL function requires that the label already be an existing <span class="italic">data</span> label for the transaction to succeed, the TO_DATA_LABEL does not have this requirement. It will automatically create a valid data label.</p>
<p>For example:</p>
<pre>
INSERT INTO emp (ename, empno, hr_label)
VALUES ('ESTANTON', 10, to_data_label ('HR', 'SENSITIVE'));
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The TO_DATA_LABEL function must be explicitly granted to individuals, in order to be used. Its usage should be tightly controlled.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="admpolcy.htm#BGBGFGHH">Chapter 10, "Applying Policies to Tables and Schemas"</a> for more information about inserting, updating, and deleting labeled data</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1013397"></a>
<div id="OLSAG025" class="sect1">
<h2 class="sect1"><span class="secnum">5.6</span> Changing Your Session and Row Labels with SA_SESSION</h2>
<p>During a given session, a user can change his or her labels, within the authorizations set by the administrator.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#i1009044">SA_SESSION Functions to Change Session and Row Labels</a></p>
</li>
<li>
<p><a href="#i1009078">Changing the Session Label with SA_SESSION.SET_LABEL</a></p>
</li>
<li>
<p><a href="#i1009112">Changing the Row Label with SA_SESSION.SET_ROW_LABEL</a></p>
</li>
<li>
<p><a href="#i1009147">Restoring Label Defaults with SA_SESSION.RESTORE_DEFAULT_LABELS</a></p>
</li>
<li>
<p><a href="#i1009162">Saving Label Defaults with SA_SESSION.SAVE_DEFAULT_LABELS</a></p>
</li>
<li>
<p><a href="#i1009186">Viewing Session Attributes with SA_SESSION Functions</a></p>
</li>
</ul>
<a id="i1009044"></a>
<div id="OLSAG3175" class="sect2">
<h3 class="sect2"><span class="secnum">5.6.1</span> SA_SESSION Functions to Change Session and Row Labels</h3>
<p><a id="sthref285"></a>The following functions enable the user to change the session and row labels:</p>
<div id="OLSAG3176" class="tblformal">
<p class="titleintable"><a id="sthref286"></a><a id="g1014884"></a>Table 5-6 Functions to Change Session Labels</p>
<table class="cellalignment2269" title="Functions to Change Session Labels" summary="This table lists and describes the purpose for each of the functions available to change session labels." dir="ltr">
<thead>
<tr class="cellalignment2260">
<th class="cellalignment2267" id="r1c1-t23">Function</th>
<th class="cellalignment2267" id="r1c2-t23">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r2c1-t23" headers="r1c1-t23">
<p><a id="sthref287"></a>SA_SESSION.SET_LABEL</p>
</td>
<td class="cellalignment2268" headers="r2c1-t23 r1c2-t23">
<p>Lets the user set a new level and new compartments and groups to which he or she has read access</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r3c1-t23" headers="r1c1-t23">
<p><a id="sthref288"></a>SA_SESSION.SET_ROW_LABEL</p>
</td>
<td class="cellalignment2268" headers="r3c1-t23 r1c2-t23">
<p>Lets the user set the <a id="sthref289"></a>default row label that will be applied to new rows</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r4c1-t23" headers="r1c1-t23">
<p><a id="sthref290"></a>SA_SESSION.RESTORE_DEFAULT_LABELS</p>
</td>
<td class="cellalignment2268" headers="r4c1-t23 r1c2-t23">
<p>Lets the user reset the current session label and row label to the stored default settings</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r5c1-t23" headers="r1c1-t23">
<p><a id="sthref291"></a>SA_SESSION.SAVE_DEFAULT_LABELS</p>
</td>
<td class="cellalignment2268" headers="r5c1-t23 r1c2-t23">
<p>Lets the user store the current session label and row label as the default for future sessions</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="i1009078"></a>
<div id="OLSAG3177" class="sect2">
<h3 class="sect2"><span class="secnum">5.6.2</span> Changing the Session Label with SA_SESSION.SET_LABEL</h3>
<p><a id="sthref292"></a>Use the <a id="sthref293"></a>SET_LABEL procedure to set the label of the current database session.</p>
<p>Syntax:</p>
<pre>
PROCEDURE SET_LABEL (policy_name IN VARCHAR2,
                     label IN VARCHAR2); 
</pre>
<div class="inftblinformal">
<table class="cellalignment2266" title="Parameters used by this procedure" summary="This informal table lists the parameters used by this procedure and describes what each parameter specifies." dir="ltr">
<thead>
<tr class="cellalignment2260">
<th class="cellalignment2267" id="r1c1-t24">Parameter</th>
<th class="cellalignment2267" id="r1c2-t24">Specifies</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r2c1-t24" headers="r1c1-t24"><span class="italic">policy_name</span></td>
<td class="cellalignment2268" headers="r2c1-t24 r1c2-t24">The name of an existing policy.</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r3c1-t24" headers="r1c1-t24"><span class="italic">label</span></td>
<td class="cellalignment2268" headers="r3c1-t24 r1c2-t24">The value to set as the label</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p>A user can set the session label to:</p>
<ul>
<li>
<p>Any level equal to or less than the maximum, and equal to or greater than the minimum level</p>
</li>
<li>
<p>Include any compartments in the authorized compartment list</p>
</li>
<li>
<p>Include any groups in the authorized group list. (Subgroups of authorized groups are implicitly included in the authorized list.)</p>
</li>
</ul>
<p>Note that if you change the session label, this change may affect the value of the session's row label. The session's row label contains the subset of compartments and groups for which the user has write access. This may or may not be equivalent to the session label. For example, if you use the SA_SESSION.SET_LABEL command to set your current session label to C:A,B:US and you have write access only on the A compartment, then your row label would be set to C:A.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="admpriv.htm#i1017158">"SA_USER_ADMIN.SET_DEFAULT_LABEL"</a></div>
</div>
<!-- class="sect2" -->
<a id="i1009112"></a>
<div id="OLSAG3178" class="sect2">
<h3 class="sect2"><span class="secnum">5.6.3</span> Changing the Row Label with SA_SESSION.SET_ROW_LABEL</h3>
<p>Use the <a id="sthref294"></a>SET_ROW_LABEL procedure to set the <a id="sthref295"></a>default row label value for the current database session. The compartments and groups in the label must be a subset of the compartments and groups in the session label to which the user has write access. When the <a id="sthref296"></a>LABEL_DEFAULT option is set, this row label value is used on insert if the user does not explicitly specify the label.</p>
<p>Syntax:</p>
<pre>
PROCEDURE SET_ROW_LABEL (policy_name IN VARCHAR2,
                         row_label IN VARCHAR2); 
</pre>
<div class="inftblinformal">
<table class="cellalignment2266" title="Parameters used by this procedure" summary="This informal table lists the parameters used by this procedure and describes what each parameter specifies." dir="ltr">
<thead>
<tr class="cellalignment2260">
<th class="cellalignment2267" id="r1c1-t26">Parameter</th>
<th class="cellalignment2267" id="r1c2-t26">Specifies</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r2c1-t26" headers="r1c1-t26"><span class="italic">policy_name</span></td>
<td class="cellalignment2268" headers="r2c1-t26 r1c2-t26">The name of an existing policy</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r3c1-t26" headers="r1c1-t26"><span class="italic">label</span></td>
<td class="cellalignment2268" headers="r3c1-t26 r1c2-t26">The value to set as the <a id="sthref297"></a><a id="sthref298"></a>default row label</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p>If the SA_SESSION.SET_ROW_LABEL procedure is not used to set the default row label value, then this value is automatically derived from the session label. It contains the level of the session label and the subset of the compartments and groups in the session label for which the user has write authorization.</p>
<p>The row label is automatically reset if the session label changes. For example, if you change your session level from HIGHLY_SENSITIVE to SENSITIVE, then the level component of the row label automatically changes to SENSITIVE.</p>
<p>The user can set the row label independently, but only to include:</p>
<ul>
<li>
<p>A level that is less than or equal to the level of the session label, and greater than or equal to the user's minimum level</p>
</li>
<li>
<p>A subset of the compartments and groups from the session label, for which the user is authorized to have write access</p>
</li>
</ul>
<p>If the user tries to set the row label to an invalid value, then the operation is not permitted and the row label value is unchanged.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="admpriv.htm#i1012718">"SA_USER_ADMIN.SET_ROW_LABEL"</a></div>
</div>
<!-- class="sect2" -->
<a id="i1009147"></a>
<div id="OLSAG3179" class="sect2">
<h3 class="sect2"><span class="secnum">5.6.4</span> Restoring Label Defaults with SA_SESSION.RESTORE_DEFAULT_LABELS</h3>
<p>The <a id="sthref299"></a>RESTORE_DEFAULT_LABELS procedure restores the <a id="sthref300"></a>session label and <a id="sthref301"></a>row label to those stored in the data dictionary. This command is useful to reset values after a <a id="sthref302"></a>SA_SESSION.SET_LABEL command has been processed.</p>
<p>Syntax:</p>
<pre>
PROCEDURE RESTORE_DEFAULT_LABELS (policy_name in VARCHAR2); 
</pre>
<p>where <span class="italic">policy_name</span> provides the name of an existing policy.</p>
</div>
<!-- class="sect2" -->
<a id="i1009162"></a>
<div id="OLSAG3180" class="sect2">
<h3 class="sect2"><span class="secnum">5.6.5</span> Saving Label Defaults with SA_SESSION.SAVE_DEFAULT_LABELS</h3>
<p>The <a id="sthref303"></a>SAVE_DEFAULT_LABELS procedure stores the current <a id="sthref304"></a>session label and <a id="sthref305"></a>row label as your initial session label and default row label. It permits you to change your defaults to reflect your current session label and row label. The saved labels will be used as the initial default settings for future sessions.</p>
<p>Syntax:</p>
<pre>
PROCEDURE SAVE_DEFAULT_LABELS (policy_name in VARCHAR2); 
</pre>
<p>where <span class="italic">policy_name</span> provides the name of an existing policy.</p>
<p>When you log in to a database, your default session label and row label are used to initialize the session label and row label. When the administrator originally authorized your Oracle Label Security labels, he or she also defined your default level, default compartments, and default groups. If you change your session label and row label, and want to save these values as the default labels, you can use the SA_SESSION.SAVE_DEFAULT_LABELS procedure.</p>
<p>This procedure is useful if you have multiple sessions and want to be sure that all additional sessions have the same labels. You can save the current labels as the default, and all future sessions will have these as the initial labels.</p>
<p>Consider a situation in which you connect to the database through Oracle Forms and want to run a report. By saving the current session labels as the default before you call Oracle Reports, you ensure that Oracle Reports will initialize at the same labels as are being used by Oracle Forms.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The SA_SESSION.SAVE_DEFAULT_LABELS procedure overrides the settings established by the administrator.</div>
</div>
<!-- class="sect2" -->
<a id="i1009186"></a>
<div id="OLSAG3181" class="sect2">
<h3 class="sect2"><span class="secnum">5.6.6</span> Viewing Session Attributes with SA_SESSION Functions</h3>
<p>You can use SA_SESSION functions to view the policy attributes for a session.</p>
<ul>
<li>
<p><a href="#i1009203">USER_SA_SESSION View to Return All Security Attributes</a></p>
</li>
<li>
<p><a href="#i1009220">Functions to Return Individual Security Attributes</a></p>
</li>
</ul>
<a id="i1009203"></a>
<div id="OLSAG3182" class="sect3">
<h4 class="sect3"><span class="secnum">5.6.6.1</span> USER_SA_SESSION View to Return All Security Attributes</h4>
<p>You can display security attribute values by using the <a id="sthref306"></a><a id="sthref307"></a>USER_SA_SESSION view. Access to this view is PUBLIC. It lets you see the security attributes for your current session. For example:</p>
<div id="OLSAG3183" class="tblformal">
<p class="titleintable"><a id="sthref308"></a><a id="sthref309"></a>Table 5-7 Security Attribute Names and Types</p>
<table class="cellalignment2269" title="Security Attribute Names and Types" summary="This table lists the security attribute names and types in the USER_SA_SESSION view, also specifying which must not be null." dir="ltr">
<thead>
<tr class="cellalignment2260">
<th class="cellalignment2267" id="r1c1-t29">Name</th>
<th class="cellalignment2267" id="r1c2-t29">Null?</th>
<th class="cellalignment2267" id="r1c3-t29">Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r2c1-t29" headers="r1c1-t29">
<p>POLICY_NAME</p>
</td>
<td class="cellalignment2268" headers="r2c1-t29 r1c2-t29">
<p>NOT NULL</p>
</td>
<td class="cellalignment2268" headers="r2c1-t29 r1c3-t29">
<p>VARCHAR2(30)</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r3c1-t29" headers="r1c1-t29">
<p>SA_USER_NAME</p>
</td>
<td class="cellalignment2268" headers="r3c1-t29 r1c2-t29">&nbsp;</td>
<td class="cellalignment2268" headers="r3c1-t29 r1c3-t29">
<p>VARCHAR2(4000)</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r4c1-t29" headers="r1c1-t29">
<p>PRIVS</p>
</td>
<td class="cellalignment2268" headers="r4c1-t29 r1c2-t29">&nbsp;</td>
<td class="cellalignment2268" headers="r4c1-t29 r1c3-t29">
<p>VARCHAR2(4000)</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r5c1-t29" headers="r1c1-t29">
<p>MAX_READ_LABEL</p>
</td>
<td class="cellalignment2268" headers="r5c1-t29 r1c2-t29">&nbsp;</td>
<td class="cellalignment2268" headers="r5c1-t29 r1c3-t29">
<p>VARCHAR2(4000)</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r6c1-t29" headers="r1c1-t29">
<p>MAX_WRITE_LABEL</p>
</td>
<td class="cellalignment2268" headers="r6c1-t29 r1c2-t29">&nbsp;</td>
<td class="cellalignment2268" headers="r6c1-t29 r1c3-t29">
<p>VARCHAR2(4000)</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r7c1-t29" headers="r1c1-t29">
<p>MIN_LEVEL</p>
</td>
<td class="cellalignment2268" headers="r7c1-t29 r1c2-t29">&nbsp;</td>
<td class="cellalignment2268" headers="r7c1-t29 r1c3-t29">
<p>VARCHAR2(4000)</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r8c1-t29" headers="r1c1-t29">
<p>LABEL</p>
</td>
<td class="cellalignment2268" headers="r8c1-t29 r1c2-t29">&nbsp;</td>
<td class="cellalignment2268" headers="r8c1-t29 r1c3-t29">
<p>VARCHAR2(4000)</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r9c1-t29" headers="r1c1-t29">
<p>COMP_WRITE</p>
</td>
<td class="cellalignment2268" headers="r9c1-t29 r1c2-t29">&nbsp;</td>
<td class="cellalignment2268" headers="r9c1-t29 r1c3-t29">
<p>VARCHAR2(4000)</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r10c1-t29" headers="r1c1-t29">
<p>GROUP_WRITE</p>
</td>
<td class="cellalignment2268" headers="r10c1-t29 r1c2-t29">&nbsp;</td>
<td class="cellalignment2268" headers="r10c1-t29 r1c3-t29">
<p>VARCHAR2(4000)</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r11c1-t29" headers="r1c1-t29">
<p>ROW_LABEL</p>
</td>
<td class="cellalignment2268" headers="r11c1-t29 r1c2-t29">&nbsp;</td>
<td class="cellalignment2268" headers="r11c1-t29 r1c3-t29">
<p>VARCHAR2(4000)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<a id="i1009220"></a>
<div id="OLSAG3184" class="sect3">
<h4 class="sect3"><span class="secnum">5.6.6.2</span> Functions to Return Individual Security Attributes</h4>
<p>The <a id="sthref310"></a>SA_SESSION functions take a <span class="italic">policy_name</span> as the only input parameter. They return VARCHAR2 character string values for use in SQL statements.</p>
<div id="OLSAG3185" class="tblformalwide">
<p class="titleintable"><a id="sthref311"></a><a id="sthref312"></a>Table 5-8 SA_SESSION Functions to View Security Attributes</p>
<table class="cellalignment2266" title="SA_SESSION Functions to View Security Attributes" summary="This table lists the name and purpose for each function in SA_SESSION for viewing security attributes." dir="ltr">
<thead>
<tr class="cellalignment2260">
<th class="cellalignment2267" id="r1c1-t30">Function</th>
<th class="cellalignment2267" id="r1c2-t30">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r2c1-t30" headers="r1c1-t30">
<p><a id="sthref313"></a>SA_SESSION.PRIVS</p>
</td>
<td class="cellalignment2268" headers="r2c1-t30 r1c2-t30">
<p>Returns the set of current session privileges, in a comma-delimited list</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r3c1-t30" headers="r1c1-t30">
<p><a id="sthref314"></a>SA_SESSION.MIN_LEVEL</p>
</td>
<td class="cellalignment2268" headers="r3c1-t30 r1c2-t30">
<p>Returns the minimum level authorized for the session</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r4c1-t30" headers="r1c1-t30">
<p><a id="sthref315"></a>SA_SESSION.MAX_LEVEL</p>
</td>
<td class="cellalignment2268" headers="r4c1-t30 r1c2-t30">
<p>Returns the maximum level authorized for the session</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r5c1-t30" headers="r1c1-t30">
<p><a id="sthref316"></a>SA_SESSION.COMP_READ</p>
</td>
<td class="cellalignment2268" headers="r5c1-t30 r1c2-t30">
<p>Returns a comma-delimited list of compartments that the user is authorized to read</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r6c1-t30" headers="r1c1-t30">
<p><a id="sthref317"></a>SA_SESSION.COMP_WRITE</p>
</td>
<td class="cellalignment2268" headers="r6c1-t30 r1c2-t30">
<p>Returns a comma-delimited list of compartments that the user is authorized to write. This is a subset of SA_SESSION.COMP_READ.</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r7c1-t30" headers="r1c1-t30">
<p><a id="sthref318"></a>SA_SESSION.GROUP_READ</p>
</td>
<td class="cellalignment2268" headers="r7c1-t30 r1c2-t30">
<p>Returns a comma-delimited list of groups that the user is authorized to read</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r8c1-t30" headers="r1c1-t30">
<p><a id="sthref319"></a>SA_SESSION.GROUP_WRITE</p>
</td>
<td class="cellalignment2268" headers="r8c1-t30 r1c2-t30">
<p>Returns a comma-delimited list of groups that the user is authorized to write. This is a subset of SA_SESSION.GROUP_READ.</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r9c1-t30" headers="r1c1-t30">
<p><a id="sthref320"></a>SA_SESSION.LABEL</p>
</td>
<td class="cellalignment2268" headers="r9c1-t30 r1c2-t30">
<p>Returns the session label (the level, compartments, and groups) with which the user is currently working. The user can change this value with <a id="sthref321"></a>SA_SESSION.SET_LABEL. Refer to <a href="#i1009078">Changing the Session Label with SA_SESSION.SET_LABEL</a>.</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r10c1-t30" headers="r1c1-t30">
<p><a id="sthref322"></a>SA_SESSION.ROW_LABEL</p>
</td>
<td class="cellalignment2268" headers="r10c1-t30 r1c2-t30">
<p>Returns the session's default row label value. The user can change this value with <a id="sthref323"></a>SA_SESSION.SET_ROW_LABEL. Refer to <a href="#i1009112">Changing the Row Label with SA_SESSION.SET_ROW_LABEL</a>.</p>
</td>
</tr>
<tr class="cellalignment2260">
<td class="cellalignment2268" id="r11c1-t30" headers="r1c1-t30">
<p><a id="sthref324"></a>SA_SESSION.SA_USER_NAME</p>
</td>
<td class="cellalignment2268" headers="r11c1-t30 r1c2-t30">
<p>Returns the username associated with the current Oracle Label Security session</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p>For example, the following statement shows the current session label for the Human Resources policy:</p>
<pre>
SQL&gt; select sa_session.label ('human_resources')
  2  from dual;

SA_SESSION.LABEL('HUMAN_RESOURCES')                                                                 
---------------------------------------------
L3:M,E 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="storproc.htm#i1014407">"Using SA_UTL Functions to Set and Return Label Information"</a> for additional functions that return numeric label tags and BOOLEAN values</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2259">
<tr>
<td class="cellalignment2268">
<table class="cellalignment2264">
<tr>
<td class="cellalignment2263"><a href="getstrtd.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2263"><a href="olsoid.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2271">
<table class="cellalignment2262">
<tr>
<td class="cellalignment2263"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2263"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2263"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2263"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2263"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2263"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
