<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Managing Security for Application Developers</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1090" />
<meta name="dcterms.created" content="2017-01-17T12:37:47Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Security Guide" />
<meta name="dcterms.identifier" content="E36292-09" />
<meta name="dcterms.isVersionOf" content="DBSEG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="authorization.htm" title="Previous" type="text/html" />
<link rel="Next" href="app_context.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e36292.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">12/19</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='app_devs'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=100,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote&nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><div id="footnote"><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/div><\/body><\/html>');
    msg.document.close();
    setTimeout(function() { var height = msg.document.getElementById('footnote').offsetHeight; msg.resizeTo(598, height + 100); }, 100);
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="DBSEG005" class="chapter"><a id="CJAIEEDF"></a>
<h1 class="chapter"><span class="secnum">5</span> Managing Security for Application Developers</h1>
<p>This chapter contains:</p>
<ul>
<li>
<p><a href="#CHDGBGJA">About Application Security Policies</a></p>
</li>
<li>
<p><a href="#i1006157">Considerations for Using Application-Based Security</a></p>
</li>
<li>
<p><a href="#CJADABGG">Securing Passwords in Application Design</a></p>
</li>
<li>
<p><a href="#i1006229">Managing Application Privileges</a></p>
</li>
<li>
<p><a href="#i1006262">Creating Secure Application Roles to Control Access to Applications</a></p>
</li>
<li>
<p><a href="#i1006338">Associating Privileges with User Database Roles</a></p>
</li>
<li>
<p><a href="#i1006452">Protecting Database Objects by Using Schemas</a></p>
</li>
<li>
<p><a href="#i1006511">Managing Object Privileges in an Application</a></p>
</li>
<li>
<p><a href="#CJAHDAEI">Parameters for Enhanced Security of Database Communication</a></p>
</li>
</ul>
<a id="CHDGBGJA"></a>
<div id="DBSEG131" class="sect1">
<h2 class="sect1">About Application Security Policies</h2>
<p>Creating an application security policy is the first step to create a secure database application. An application security policy is a list of application security requirements and rules that regulate user access to database objects.</p>
<p><a id="sthref1042"></a>You should <a id="sthref1043"></a>draft security policies for each database application. For example, each database application should have one or more database roles that provide different levels of security when executing the application. You then can grant the database roles to other roles or directly to specific users.</p>
<p>Applications that can potentially allow unrestricted SQL statement processing (through tools such as SQL*Plus or SQL Developer) also need security policies that prevent malicious access to confidential or important schema objects. In particular, you must ensure that your applications handle passwords in a secure manner.</p>
<p>The following sections describe aspects of application security and the Oracle Database features that you can use to plan and develop secure database applications.</p>
</div>
<!-- class="sect1" -->
<a id="i1006157"></a>
<div id="DBSEG132" class="sect1">
<h2 class="sect1">Considerations for Using Application-Based Security</h2>
<p>Two main questions to consider when you formulate and implement <a id="sthref1044"></a>application security are covered in the following sections:</p>
<ul>
<li>
<p><a href="#i1006169">Are Application Users Also Database Users?</a></p>
</li>
<li>
<p><a href="#i1006203">Is Security Better Enforced in the Application or in the Database?</a></p>
</li>
</ul>
<a id="i1006169"></a>
<div id="DBSEG133" class="sect2">
<h3 class="sect2">Are Application Users Also Database Users?</h3>
<p><a id="sthref1045"></a><a id="sthref1046"></a>Where possible, you should build applications in which application users are database users. In this way, you can leverage the intrinsic security mechanisms of the database.</p>
<p>For many commercial packaged applications, application users are not database users. For these applications, multiple users authenticate themselves to the application, and the application then connects to the database as a single, highly-privileged user. This is called the <a id="sthref1047"></a><a id="sthref1048"></a><a id="sthref1049"></a><span class="italic">One Big Application User</span> model.</p>
<p>Applications built in this way generally cannot use many of the intrinsic security features of the database, because the identity of the user is not known to the database.</p>
<p><a href="#CJADGHFB">Table 5-1</a> describes how the One Big Application User model affects various Oracle Database security features:</p>
<div id="DBSEG134" class="tblhruleformal">
<p class="titleintable"><a id="sthref1050"></a><a id="CJADGHFB"></a>Table 5-1 Features Affected by the One Big Application User Model</p>
<table class="cellalignment2250" title="Features Affected by the One Big Application User Model" summary="Features Limited by Using &quot;One Big Application User&quot;" >
<thead>
<tr class="cellalignment2244">
<th class="cellalignment2251" id="r1c1-t2">Oracle Database Feature</th>
<th class="cellalignment2251" id="r1c2-t2">Limitations of One Big Application User Model</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r2c1-t2" headers="r1c1-t2">
<p>Auditing<a id="sthref1051"></a><a id="sthref1052"></a></p>
</td>
<td class="cellalignment2252" headers="r2c1-t2 r1c2-t2">
<p>A basic principle of security is accountability through auditing. If One Big Application User performs all actions in the database, then database auditing cannot hold individual users accountable for their actions. The application must implement its own auditing mechanisms to capture individual user actions.</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r3c1-t2" headers="r1c1-t2">
<p>Oracle Advanced Security enhanced authentication<a id="sthref1053"></a></p>
</td>
<td class="cellalignment2252" headers="r3c1-t2 r1c2-t2">
<p>Strong forms of authentication supported by Oracle Advanced Security (such as client authentication over SSL, tokens, and so on) cannot be used if the client authenticating to the database is the application, rather than an individual user.</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r4c1-t2" headers="r1c1-t2">
<p>Roles<a id="sthref1054"></a></p>
</td>
<td class="cellalignment2252" headers="r4c1-t2 r1c2-t2">
<p>Roles are assigned to database users. Enterprise roles are assigned to enterprise users who, though not created in the database, are known to the database. If application users are not database users, then the usefulness of roles is diminished. Applications must then craft their own mechanisms to distinguish between the privileges which various application users need to access data within the application.</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r5c1-t2" headers="r1c1-t2">
<p>Enterprise user management feature of Oracle Advanced Security<a id="sthref1055"></a></p>
</td>
<td class="cellalignment2252" headers="r5c1-t2 r1c2-t2">
<p><a id="sthref1056"></a>The Enterprise user management feature enables an Oracle database to use the Oracle Identity Management Infrastructure by securely storing and managing user information and authorizations in an LDAP-based directory such as Oracle Internet Directory. While enterprise users do not need to be created in the database, they do need to be known to the database. The One Big Application User model cannot take advantage of Oracle Identity Management.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" -->
<a id="i1006203"></a>
<div id="DBSEG135" class="sect2">
<h3 class="sect2">Is Security Better Enforced in the Application or in the Database?</h3>
<p><a id="sthref1057"></a><a id="sthref1058"></a><a id="sthref1059"></a>Applications, whose users are also database users, can either build security into the application, or rely on intrinsic database security mechanisms such as granular privileges, <a id="sthref1060"></a>virtual private databases (fine-grained access control with application context), roles, stored procedures, and auditing (including fine-grained auditing). Oracle recommends that applications use the security enforcement mechanisms of the database as much as possible.</p>
<p><a id="sthref1061"></a><a id="sthref1062"></a>When security is enforced in the database itself, rather than in the application, it cannot be bypassed. The main shortcoming of application-based security is that security is bypassed if the user bypasses the application to access data. For example, a user who has SQL*Plus access to the database can execute queries without going through the Human Resources application. The user, therefore, bypasses all of the security measures in the application.</p>
<p>Applications that use the <a id="sthref1063"></a>One Big Application User model must build security enforcement into the application rather than use database security mechanisms. Because it is the application, and not the database, that recognizes users; the application itself must enforce security measures for each user.</p>
<p>This approach means that each application that accesses data must reimplement security. Security becomes expensive, because organizations must implement the same security policies in multiple applications, and each new application requires an expensive reimplementation.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="authorization.htm#CIHGGHAJ">"Potential Security Problems of Using Ad Hoc Tools"</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CJADABGG"></a>
<div id="DBSEG50053" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Securing Passwords in Application Design</h2>
<p>This section <a id="sthref1064"></a><a id="sthref1065"></a><a id="sthref1066"></a>provides strategies for securely invoking password-protected services from a batch job, script, installation file, or application. In addition to password protection, most of these strategies can be applied to other sensitive data, such as cryptographic keys.</p>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CJAJIEHC">General Guidelines for Securing Passwords in Applications</a></p>
</li>
<li>
<p><a href="#CJACHGIB">Securing Passwords Using an External Password Store</a></p>
</li>
<li>
<p><a href="#CJADBBJH">Securing Passwords Using the orapwd Utility</a></p>
</li>
<li>
<p><a href="#CJAFCCEE">Example of Reading Passwords in Java</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="authentication.htm#CHDFDHAJ">"Minimum Requirements for Passwords"</a></p>
</li>
<li>
<p><a href="guidelines.htm#CHDCEBFA">Chapter 10, "Keeping Your Oracle Database Secure"</a> for general guidelines on securing an Oracle database</p>
</li>
</ul>
</div>
<a id="CJAJIEHC"></a>
<div id="DBSEG136" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">General Guidelines for Securing Passwords in Applications</h3>
<p>These guidelines are in the following categories:</p>
<ul>
<li>
<p><a href="#CJAGGFAI">Platform-Specific Security Threats</a></p>
</li>
<li>
<p><a href="#CJAGJHCB">Designing Applications to Handle Password Input</a></p>
</li>
<li>
<p><a href="#CJAHABAE">Configuring Password Formats and Behavior</a></p>
</li>
<li>
<p><a href="#CJADJFHJ">Handling Passwords in SQL*Plus and SQL Scripts</a></p>
</li>
</ul>
<a id="CJAGGFAI"></a>
<div id="DBSEG137" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Platform-Specific Security Threats</h4>
<p>Be aware of the following potential security threats, which may not be obvious:</p>
<ul>
<li>
<p><span class="bold">On UNIX and Linux platforms, command parameters are available for viewing by all operating system users on the same host computer.</span> As a result, passwords entered on the command line could be exposed to other users. However, do not assume that non-UNIX and Linux platforms are safe from this threat.</p>
</li>
<li>
<p><span class="bold">On some UNIX platforms, such as HP Tru64 and IBM AIX, environment variables for all processes are available for viewing by all operating system users.</span> However, do not assume that non-UNIX and Linux platforms are safe from this threat.</p>
</li>
<li>
<p><span class="bold">On Microsoft Windows, the <a id="sthref1067"></a><a id="sthref1068"></a>command recall feature (the Up arrow) remembers user input across command invocations.</span> For example, if you use the <code dir="ltr">CONNECT SYSTEM/</code><code dir="ltr"><span class="codeinlineitalic">password</span></code> notation in SQL*Plus, exit, and then press the Up arrow to repeat the <code dir="ltr">CONNECT</code> command, the command recall feature reveals the connect string and displays the password. In addition, do not assume that non-Microsoft Windows platforms are safe from this threat.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CJAGJHCB"></a>
<div id="DBSEG138" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Designing Applications to Handle Password Input</h4>
<p>Follow these guidelines:<a id="sthref1069"></a><a id="sthref1070"></a></p>
<ul>
<li>
<p><span class="bold">Design applications to interactively prompt for passwords.</span> For command-line utilities, do not force users to expose passwords at a command prompt.</p>
<p>Check the APIs for the programming language you use to design applications for the best way to handle passwords from users. For an example of Java code that handles this functionality, see <a href="#CJAFCCEE">"Example of Reading Passwords in Java"</a>.</p>
</li>
<li>
<p><span class="bold">Protect your database against SQL injection attacks.</span> <a id="sthref1071"></a><a id="sthref1072"></a>A SQL injection attack occurs when SQL statements are appended or altered in a manner not intended by the PL/SQL application. For example, an intruder can bypass password authentication by setting a <code dir="ltr">WHERE</code> clause to <code dir="ltr">TRUE</code>.</p>
<p>To address the problem of SQL injection attacks, use bind variable arguments or create validation checks. If you cannot use bind variables, then consider using the <code dir="ltr">DBMS_ASSERT</code> PL/SQL package to validate the properties of input values. <a class="olink ARPLS231" href="../../appdev.112/e40758/d_assert.htm#ARPLS231"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> describes the <code dir="ltr">DBMS_ASSERT</code> package in detail. You also should review any grants to roles such as <code dir="ltr">PUBLIC</code>.</p>
<p>See <a class="olink LNPLS01109" href="../../appdev.112/e25519/dynamic.htm#LNPLS01109"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about preventing SQL injection.</p>
</li>
<li>
<p><span class="bold">If possible, design your applications to defer authentication.</span> For example:</p>
<ul>
<li>
<p>Use certificates for logins.</p>
</li>
<li>
<p>Authenticate users by using facilities provided by the operating system. For example, applications on Microsoft Windows can use domain authentication.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Mask or encrypt passwords.</span> If you must store passwords, then mask or encrypt them. For example, you can mask passwords in log files and encrypt passwords in recovery files.</p>
</li>
<li>
<p><span class="bold">Authenticate each connection.</span> For example, if schema A exists in database 1, then do not assume that schema A in database 2 is the same user. Similarly, the local operating system user <code dir="ltr">psmith</code> is not necessarily the same person as remote user <code dir="ltr">psmith</code>.</p>
</li>
<li>
<p><span class="bold">Do not store clear text passwords in files or repositories.</span> Storing passwords in files increases the risk of an intruder accessing them.</p>
</li>
<li>
<p><span class="bold">Use a single master password.</span> For example:</p>
<ul>
<li>
<p>You can grant a single database user proxy authentication to act as other database users. In this case, only a single database password is needed. See <a href="authentication.htm#CHDEHGJJ">"Creating Proxy User Accounts and Authorizing Users to Connect Through Them"</a> for more information.</p>
</li>
<li>
<p>You can create a password wallet, which can be opened by the master password. The wallet then contains the other passwords. See <a class="olink ASOAG160" href="../../network.112/e40393/asowalet.htm#ASOAG160"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for more information about Wallet Manager.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CJAHABAE"></a>
<div id="DBSEG139" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Configuring Password Formats and Behavior</h4>
<p>Follow these guidelines:</p>
<ul>
<li>
<p><span class="bold">Limit the lifetime for passwords.</span> You can set a password lifetime, after which the password expires and must be changed before the user can log in to the account. See <a href="authentication.htm#i1007339">"Controlling Password Aging and Expiration"</a> for parameters you can use to control the lifetime of a password.</p>
</li>
<li>
<p><span class="bold">Limit the ability of users to reuse old passwords.</span> See <a href="authentication.htm#i1007340">"Controlling User Ability to Reuse Previous Passwords"</a> for more information.</p>
</li>
<li>
<p><span class="bold">Force users to create strong, secure passwords.</span> See <a href="guidelines.htm#CHDEGEIF">"Guidelines for Securing Passwords"</a> for advice on creating strong passwords. <a href="authentication.htm#i1007341">"Enforcing Password Complexity Verification"</a> explains how you can customize password requirements.</p>
</li>
<li>
<p><span class="bold">Enable case sensitivity in passwords.</span> See <a href="authentication.htm#CHDJDCGI">"Enabling or Disabling Password Case Sensitivity"</a> for more information.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="authentication.htm#CHDFDHAJ">"Minimum Requirements for Passwords"</a></p>
</li>
<li>
<p><a href="authentication.htm#i1007341">"Enforcing Password Complexity Verification"</a></p>
</li>
<li>
<p><a href="guidelines.htm#CHDEGEIF">"Guidelines for Securing Passwords"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="CJADJFHJ"></a>
<div id="DBSEG140" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Handling Passwords in SQL*Plus and SQL Scripts</h4>
<p>Follow these guidelines:</p>
<ul>
<li>
<p><span class="bold">Do not invoke SQL*Plus with a password on the <a id="sthref1073"></a>command line, either in programs or scripts.</span> If a password is required but omitted, SQL*Plus prompts the user for it and then automatically disables the echo feature so that the password is not displayed.</p>
<p>The following examples are secure because passwords are not exposed on the command line. Oracle Database also automatically encrypts these passwords over the network.</p>
<pre dir="ltr">
$ sqlplus system
Enter password: <span class="italic">password</span>

SQL&gt; connect system
Enter password: <span class="italic">password</span>
</pre>
<p>The following example exposes the password to other operating system users:</p>
<pre dir="ltr">
sqlplus system/<span class="italic">password</span>
</pre>
<p>The next example poses two security risks. <a id="sthref1074"></a><a id="sthref1075"></a><a id="sthref1076"></a><a id="sthref1077"></a>First, it exposes the password to other users who may be watching over your shoulder. Second, on some platforms, such as Microsoft Windows, it makes the password vulnerable to a command line recall attack.</p>
<pre dir="ltr">
$ sqlplus /nolog
SQL&gt; connect system/<span class="italic">password</span>
</pre></li>
<li>
<p><span class="bold">For SQL scripts that require passwords or secret keys, for example, to create an account or to log in as an account, do not use positional parameters, such as substitution variables &amp;1, &amp;2, and so on.</span> Instead, design the script to prompt the user for the value. You should also disable the echo feature, which displays output from a script or if you are using spool mode. To disable the echo feature, use the following setting:</p>
<pre dir="ltr">
SET ECHO OFF
</pre>
<p>A good practice is to ensure that the script makes the purpose of the value clear. For example, it should be clear whether or not the value will establish a new value, such as an account or a certificate, or if the value will authenticate, such as logging in to an existing account.</p>
<p>The following example is secure because it prevents users from invoking the script in a manner that poses security risks: It does not echo the password; it does not record the password in a spool file.</p>
<pre dir="ltr">
SET VERIFY OFF
 ACCEPT user CHAR PROMPT &amp;rsquor;Enter user to connect to: &amp;rsquor; 
 ACCEPT password CHAR PROMPT &amp;rsquor;Enter the password for that user: ' HIDE 
 CONNECT &amp;user/&amp;password 
</pre>
<p>In this example:</p>
<ul>
<li>
<p><code dir="ltr">SET VERIFY OFF</code>: Prevents the password from being displayed. (<code dir="ltr">SET VERIFY</code> lists each line of the script before and after substitution.) Combining the <code dir="ltr">SET VERIFY OFF</code> command with the <code dir="ltr">HIDE</code> command (in <span class="bold">Line 3</span>) is a useful technique for hiding passwords and other sensitive input data.</p>
</li>
<li>
<p><code dir="ltr">ACCEPT password</code>: Includes the <code dir="ltr">HIDE</code> option for the <code dir="ltr">ACCEPT password</code> prompt, which prevents the input password from being echoed.</p>
</li>
</ul>
<p>The next example, which uses <a id="sthref1078"></a><a id="sthref1079"></a>positional parameters, poses security risks because a user may invoke the script by passing the password on the command line. If the user does not enter a password and instead is prompted, the danger lies in that whatever the user types is echoed to the screen and to a spool file if spooling is enabled.</p>
<pre dir="ltr">
CONNECT &amp;1/&amp;2
</pre></li>
<li>
<p><span class="bold">Control the log in times for batch scripts.</span> For batch scripts that require passwords, configure the account so that the script can only log in during the time in which it is supposed to run. For example, suppose you have a batch script that runs for an hour each evening starting at 8 p.m. Set the account so that the script can only log in during this time. If an intruder manages to gain access, then he or she has less of a chance of exploiting any compromised accounts.</p>
</li>
<li>
<p><span class="bold">Be careful when using DML or DDL SQL statements that prompt for passwords.</span> In this case, sensitive information is passed in clear text over the network. You can remedy this problem by using Oracle Advanced Security. See <a class="olink ASOAG" href="../e40393/toc.htm"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for more information.</p>
<p>The following example of altering a password is secure because the password is not exposed:</p>
<pre dir="ltr">
password psmith
Changing password for psmith
New password: <span class="italic">password</span>
Retype new password: <span class="italic">password</span>
</pre>
<p>This example poses a security risk because the password is exposed both at the command line and on the network:</p>
<pre dir="ltr">
ALTER USER psmith IDENTIFIED BY <span class="italic">password</span> 
</pre></li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CJACHGIB"></a>
<div id="DBSEG141" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Securing Passwords Using an External Password Store</h3>
<p>You can store password credentials for connecting to a database by using a client-side Oracle wallet. An Oracle wallet is a secure software container that stores the authentication and signing credentials needed for a user to log in.</p>
<p>See <a href="authentication.htm#CHDHGAIJ">"Managing the Secure External Password Store for Password Credentials"</a> for more information about the secure external password store. See also <a class="olink ASOAG160" href="../../network.112/e40393/asowalet.htm#ASOAG160"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for information about using Oracle Wallet Manager to configure Oracle wallets.</p>
</div>
<!-- class="sect2" -->
<a id="CJADBBJH"></a>
<div id="DBSEG142" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Securing Passwords Using the orapwd Utility</h3>
<p>You can create a password file for users who need to connect to an application using the <code dir="ltr">SYSDBA</code> or <code dir="ltr">SYSOPER</code> privileges over a network. To create the password file, use the <code dir="ltr">ORAPWD</code> utility. See <a class="olink ADMIN10241" href="../../server.112/e25494/dba.htm#ADMIN10241"><span class="italic">Oracle Database Administrator's Guide</span></a> for more information about creating and maintaining a password file.</p>
</div>
<!-- class="sect2" -->
<a id="CJAFCCEE"></a>
<div id="DBSEG143" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Example of Reading Passwords in Java</h3>
<p><a href="#CJAGIFIG">Example 5-1</a> <a id="sthref1080"></a><a id="sthref1081"></a>demonstrates how to create a Java package that can be used to read passwords.</p>
<div id="DBSEG144" class="example">
<p class="titleinexample"><a id="CJAGIFIG"></a>Example 5-1 Java Code for Reading Passwords</p>
<pre dir="ltr">
// Change the following line to a name for your version of this package
package passwords.sysman.emSDK.util.signing;

import java.io.IOException;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.util.Arrays;
 
/**
 * The static readPassword method in this class issues a password prompt
 * on the console output and returns the char array password
 * entered by the user on the console input.
 */
public final class ReadPassword {
  //----------------------------------
  /**
   * Test driver for readPassword method.
   * @param args the command line args
   */
  public static void main(String[] args) {
    char[] pass = ReadPassword.readPassword("Enter password: ");
    System.out.println("The password just entered is \""
      + new String(pass) + "\"");
    System.out.println("The password length is " + pass.length);
  }
   * Issues a password prompt on the console output and returns
   * the char array password entered by the user on the console input.
   * The password is not displayed on the console (chars are not echoed).
   * As soon as the returned char array is not needed,
   * it should be erased for security reasons (Arrays.fill(charArr, ' '));
   * A password should never be stored as a java String.
   *
   * Note that Java 6 has a Console class with a readPassword method,
   * but there is no equivalent in Java 5 or Java 1.4.
   * The readPassword method here is based on Sun's suggestions at
   * http://java.sun.com/developer/technicalArticles/Security/pwordmask.
   *
   * @param prompt the password prompt to issue
   * @return new char array containing the password
   * @throws RuntimeException if some error occurs
   */
  public static final char[] readPassword(String prompt)
  throws RuntimeException {
    try {
      StreamMasker masker = new StreamMasker(System.out, prompt);
      Thread threadMasking = new Thread(masker);
      int firstByte = -1;
      PushbackInputStream inStream = null;
      try {
        threadMasking.start();
        inStream = new PushbackInputStream(System.in);
        firstByte = inStream.read();
      } finally {
        masker.stopMasking();
      }
      try {
        threadMasking.join();
      } catch (InterruptedException e) {
        throw new RuntimeException("Interrupt occurred when reading password");
      }
      if (firstByte == -1) {
        throw new RuntimeException("Console input ended unexpectedly");
      }
      if (System.out.checkError()) {
        throw new RuntimeException("Console password prompt output error");
      }
      inStream.unread(firstByte);
      return readLineSecure(inStream);
    }
    catch (IOException e) {
      throw new RuntimeException("I/O error occurred when reading password");
    }
  }
  //----------------------------------
  /**
   * Reads one line from an input stream into a char array in a secure way
   * suitable for reading a password.
   * The char array will never contain a '\n' or '\r'.
   *
   * @param inStream the pushback input stream
   * @return line as a char array, not including end-of-line-chars;
   *  never null, but may be zero length array
   * @throws RuntimeException if some error occurs
   */
  private static final char[] readLineSecure(PushbackInputStream inStream)
  throws RuntimeException {
    if (inStream == null) {
      throw new RuntimeException("readLineSecure inStream is null");
    }
    try {
      char[] buffer = null;
      try {
        buffer = new char[128];
        int offset = 0;
        // EOL is '\n' (unix), '\r\n' (windows), '\r' (mac)
        loop:
        while (true) {
          int c = inStream.read();
          switch (c) {
          case -1:
          case '\n':
            break loop;
          case '\r':
            int c2 = inStream.read();
            if ((c2 != '\n') &amp;&amp; (c2 != -1))
              inStream.unread(c2);
            break loop;
          default:
            buffer = checkBuffer(buffer, offset);
            buffer[offset++] = (char) c;
            break;
          }
        }
        char[] result = new char[offset];
        System.arraycopy(buffer, 0, result, 0, offset);
        return result;
      }
      finally {
        if (buffer != null)
          Arrays.fill(buffer, ' ');
      }
    }
    catch (IOException e) {
      throw new RuntimeException("I/O error occurred when reading password");
    }
  }
  //----------------------------------
  /**
   * This is a helper method for readLineSecure.
   *
   * @param buffer the current char buffer
   * @param offset the current position in the buffer
   * @return the current buffer if it is not yet full;
   *  otherwise return a larger buffer initialized with a copy
   *  of the current buffer and then erase the current buffer
   * @throws RuntimeException if some error occurs
   */
  private static final char[] checkBuffer(char[] buffer, int offset)
  throws RuntimeException
  {
    if (buffer == null)
      throw new RuntimeException("checkBuffer buffer is null");
    if (offset &lt; 0)
      throw new RuntimeException("checkBuffer offset is negative");
    if (offset &lt; buffer.length)
      return buffer;
    else {
      try {
        char[] bufferNew = new char[offset + 128];
        System.arraycopy(buffer, 0, bufferNew, 0, buffer.length);
        return bufferNew;
      } finally {
        Arrays.fill(buffer, ' ');
      }
    }
  }
  //----------------------------------
  /**
   * This private class prints a one line prompt
   * and erases reply chars echoed to the console.
   */
  private static final class StreamMasker
  extends Thread {
    private static final String BLANKS = StreamMasker.repeatChars(' ', 10);
    private String m_promptOverwrite;
    private String m_setCursorToStart;
    private PrintStream m_out;
    private volatile boolean m_doMasking;
    //----------------------------------
    /**
     * Constructor.
     * @throws RuntimeException if some error occurs
     */
    public StreamMasker(PrintStream outPrint, String prompt)
    throws RuntimeException {
      if (outPrint == null)
        throw new RuntimeException("StreamMasker outPrint is null");
      if (prompt == null)
        throw new RuntimeException("StreamMasker prompt is null");
      if (prompt.indexOf('\r') != -1)
        throw new RuntimeException("StreamMasker prompt contains a CR");
      if (prompt.indexOf('\n') != -1)
        throw new RuntimeException("StreamMasker prompt contains a NL");
      m_out = outPrint;
      m_setCursorToStart = StreamMasker.repeatChars('\010',
        prompt.length() + BLANKS.length());
      m_promptOverwrite = m_setCursorToStart + prompt + BLANKS
        + m_setCursorToStart + prompt;
    }
    //----------------------------------
    /**
     * Begin masking until asked to stop.
     * @throws RuntimeException if some error occurs
     */
    public void run()
    throws RuntimeException {
      int priorityOriginal = Thread.currentThread().getPriority();
      Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
      try {
        m_doMasking = true;
        while (m_doMasking) {
          m_out.print(m_promptOverwrite);
          if (m_out.checkError())
            throw new RuntimeException("Console output error writing prompt");
          try {
            Thread.currentThread().sleep(1);
          } catch (InterruptedException ie) {
            Thread.currentThread().interrupt();
            return;
          }
        }
        m_out.print(m_setCursorToStart);
      } finally {
        Thread.currentThread().setPriority(priorityOriginal);
      }
    }
    //----------------------------------
    /**
     * Instructs the thread to stop masking.
     */
    public void stopMasking() {
      m_doMasking = false;
    }
    //----------------------------------
    /**
     * Returns a repeated char string.
     *
     * @param c the char to repeat
     * @param length the number of times to repeat the char
     * @throws RuntimeException if some error occurs
     */
    private static String repeatChars(char c, int length)
    throws RuntimeException {
      if (length &lt; 0)
        throw new RuntimeException("repeatChars length is negative");
      StringBuffer sb = new StringBuffer(length);
      for (int i = 0; i &lt; length; i++)
        sb.append(c);
      return sb.toString();
    }
  }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006229"></a>
<div id="DBSEG145" class="sect1">
<h2 class="sect1">Managing Application Privileges</h2>
<p>Most database applications involve different <a id="sthref1082"></a><a id="sthref1083"></a>privileges on different schema objects. Keeping track of the privileges that are required for each application can be complex. In addition, authorizing users to run an application can involve many <code dir="ltr">GRANT</code> operations.</p>
<p>To simplify application privilege management, you can create a role for each application and grant that role all the privileges a user must run the application. In fact, an application can have several roles, each granted a specific subset of privileges that allow greater or lesser capabilities while running the application.</p>
<p>For example, suppose every administrative assistant uses the Vacation application to record the vacation taken by members of the department. To best manage this application, you should:</p>
<ol>
<li>
<p>Create a <code dir="ltr">VACATION</code> role.</p>
</li>
<li>
<p>Grant all privileges required by the Vacation application to the <code dir="ltr">VACATION</code> role.</p>
</li>
<li>
<p>Grant the <code dir="ltr">VACATION</code> role to all administrative assistants. Better yet, create a role that defines the privileges the administrative assistants have, and then grant the <code dir="ltr">VACATION</code> role to that role.</p>
</li>
</ol>
<p><a id="sthref1084"></a>Grouping application privileges in a role aids privilege management. Consider the following administrative options:<a id="sthref1085"></a><a id="sthref1086"></a></p>
<ul>
<li>
<p>You can grant the role, rather than many individual privileges, to those users who run the application. Then, as employees change jobs, you need to grant or revoke only one role, rather than many privileges.</p>
</li>
<li>
<p>You can change the privileges associated with an application by modifying only the privileges granted to the role, rather than the privileges held by all users of the application.</p>
</li>
<li>
<p>You can determine the privileges that are necessary to run a particular application by querying the <code dir="ltr">ROLE_TAB_PRIVS</code> and <code dir="ltr">ROLE_SYS_PRIVS</code> data dictionary views.<a id="sthref1087"></a><a id="sthref1088"></a><a id="sthref1089"></a></p>
</li>
<li>
<p>You can determine which users have privileges on which applications by querying the <code dir="ltr">DBA_ROLE_PRIVS</code> data dictionary view.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="authorization.htm#BABHFJFJ">Chapter 4, "Configuring Privilege and Role Authorization"</a> for a complete discussion of creating, enabling, and disabling roles, and granting and revoking privileges</p>
</li>
<li>
<p><a href="authorization.htm#BABFHBFH">"Finding Information About User Privileges and Roles"</a> for more information about the security uses of the <code dir="ltr">ROLE_TAB_PRIVS</code>, <code dir="ltr">ROLE_SYS_PRIVS</code>, and <code dir="ltr">DBA_ROLE_PRIVS</code> data dictionary views</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1006262"></a>
<div id="DBSEG30399" class="sect1">
<h2 class="sect1">Creating Secure Application Roles to Control Access to Applications</h2>
<p>As explained in <a href="authorization.htm#i1008520">"Securing Role Privileges by Using Secure Application Roles"</a>, a secure application role is a role that is only enabled through its associated PL/SQL package or procedure. This package defines the policy needed to control access to an application.</p>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CJACFHCJ">Step 1: Create the Secure Application Role</a></p>
</li>
<li>
<p><a href="#CJAGEIHD">Step 2: Create a PL/SQL Package to Define the Access Policy for the Application</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink TDPSG30032" href="../../server.112/e10575/tdpsg_privileges.htm#TDPSG30032"><span class="italic">Oracle Database 2 Day + Security Guide</span></a> for a tutorial on creating a secure application role</div>
<a id="CJACFHCJ"></a>
<div id="DBSEG146" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Step 1: Create the Secure Application Role</h3>
<p>You <a id="sthref1090"></a>create a secure application role by using the SQL statement <code dir="ltr">CREATE</code> <code dir="ltr">ROLE</code> with the <code dir="ltr">IDENTIFIED USING</code> clause. You must have the <code dir="ltr">CREATE</code> <code dir="ltr">ROLE</code> system privilege to execute this statement.</p>
<p>For example, to create a secure application role called <code dir="ltr">hr_admin</code> that is associated with the <code dir="ltr">sec_mgr.hr_admin</code> package, follow these steps:</p>
<ol>
<li>
<p>Create the security application role as follows:</p>
<pre dir="ltr">
CREATE ROLE hr_admin IDENTIFIED USING sec_mgr.hr_admin_role_check;
</pre>
<p>This statement indicates the following:</p>
<ul>
<li>
<p>The role <code dir="ltr">hr_admin</code> to be created is a secure application role.</p>
</li>
<li>
<p>The role can only be enabled by modules defined inside the PL/SQL procedure <code dir="ltr">sec_mgr</code>.<code dir="ltr">hr_admin_role_check</code>. At this stage, this procedure does not need to exist; <a href="#CJAGEIHD">"Step 2: Create a PL/SQL Package to Define the Access Policy for the Application"</a> explains how to create the package or procedure.</p>
</li>
</ul>
</li>
<li>
<p>Grant the security application role the privileges you would normally associate with this role.</p>
<p>For example, to grant the <code dir="ltr">hr_admin</code> role <code dir="ltr">SELECT</code>, <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, and <code dir="ltr">DELETE</code> privileges on the <code dir="ltr">HR.EMPLOYEES</code> table, you enter the following statement:</p>
<pre dir="ltr">
GRANT SELECT, INSERT, UPDATE, DELETE ON HR.EMPLOYEES TO hr_admin;
</pre>
<p>Do not grant the role directly to the user. The PL/SQL procedure or package does that for you, assuming the user passes its security policies.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CJAGEIHD"></a>
<div id="DBSEG147" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Step 2: Create a PL/SQL Package to Define the Access Policy for the Application</h3>
<p>To enable <a id="sthref1091"></a>or <a id="sthref1092"></a>disable the secure application role, you create the security policies of the role within a PL/SQL package. You also can create an individual procedure to do this, but a package lets you group a set of procedures together. This lets you group a set of policies that, used together, present a solid security strategy to protect your applications. For users (or potential intruders) who fail the security policies, you can add auditing checks to the package to record the failure. Typically, you create this package in the schema of the security administrator.</p>
<p>The package or procedure must accomplish the following:</p>
<ul>
<li>
<p><span class="bold">It must use invoker's rights to enable the role.</span><a id="sthref1093"></a><a id="sthref1094"></a>To create the package using <a id="sthref1095"></a><a id="sthref1096"></a>invoker's rights, you must set the <code dir="ltr">AUTHID</code> property to <code dir="ltr">CURRENT_USER</code>. You cannot create the package by using <a id="sthref1097"></a>definer's rights.</p>
<p>For more information about invoker's rights and definer's rights, see <a class="olink LNPLS00809" href="../../appdev.112/e25519/subprograms.htm#LNPLS00809"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
<li>
<p><span class="bold">It must include one or more security checks to validate the user.</span> One way to validate users is to use the <a id="sthref1098"></a><a id="sthref1099"></a><code dir="ltr">SYS_CONTEXT</code> SQL function. See <a class="olink SQLRF06117" href="../../server.112/e41084/functions184.htm#SQLRF06117"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code dir="ltr">SYS_CONTEXT</code>. To find session information for a user, you can use <code dir="ltr">SYS_CONTEXT</code> with an application context. See <a href="app_context.htm#CIHHBHEF">Chapter 6, "Using Application Contexts to&nbsp;Retrieve&nbsp;User&nbsp;Information"</a> for details.</p>
</li>
<li>
<p><span class="bold">It must issue a SET ROLE SQL statement or DBMS_SESSION.SET_ROLE procedure when the user passes the security checks.</span> Because you create the package using invoker's rights, you must set the role by issuing the <code dir="ltr">SET ROLE</code> SQL statement or the <code dir="ltr">DBMS_SESSION.SET_ROLE</code> procedure. (However, you cannot use the <code dir="ltr">SET ROLE ALL</code> statement for this type of role enablement.) The PL/SQL embedded SQL syntax does not support the <code dir="ltr">SET ROLE</code> statement, but you can invoke <code dir="ltr">SET ROLE</code> by using dynamic SQL (for example, with <code dir="ltr">EXECUTE IMMEDIATE</code>).</p>
<p>For more information about <code dir="ltr">EXECUTE IMMEDIATE</code>, see <a class="olink LNPLS01115" href="../../appdev.112/e25519/dynamic.htm#LNPLS01115"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.</p>
</li>
</ul>
<p>Because of the way that you must create this package or procedure, you cannot use a logon trigger to enable or disable a secure application role. Instead, invoke the package directly from the application when the user logs in, before the user must use the privileges granted by the secure application role.</p>
<p>For example, suppose you wanted to restrict anyone using the <code dir="ltr">hr_admin</code> role to employees who are on site (that is, using certain terminals) and between the hours of 8 a.m. and 5 p.m. As the system or security administrator, follow these steps. (You can copy and paste this text by positioning the cursor at the start of <code dir="ltr">CREATE OR REPLACE</code> in the first line.)</p>
<ol>
<li>
<p>Create the procedure as follows:</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE hr_admin_role_check
 AUTHID CURRENT_USER 
 AS 
 BEGIN 
  IF (SYS_CONTEXT ('userenv','ip_address') 
    BETWEEN '192.0.2.10' and '192.0.2.20'
     AND
    TO_CHAR (SYSDATE, 'HH24') BETWEEN 8 AND 17)
  THEN
    EXECUTE IMMEDIATE 'SET ROLE hr_admin'; 
  END IF;
 END;
/
</pre>
<p>In this example:</p>
<ul>
<li>
<p><code dir="ltr">AUTHID CURRENT_USER</code> sets the <code dir="ltr">AUTHID</code> property to <code dir="ltr">CURRENT_USER</code> so that invoker's rights can be used.</p>
</li>
<li>
<p><code dir="ltr">IF (SYS_CONTEXT ('userenv','ip_address')</code> validates the user by using the <a id="sthref1100"></a><code dir="ltr">SYS_CONTEXT</code> SQL function to retrieve the user session information.</p>
</li>
<li>
<p><code dir="ltr">BETWEEN ... TO_CHAR</code> ceates a test to grant or deny access. The test restricts access to users who are on site (that is, using certain terminals) and working between the hours of 8:00 a.m. and 5:00 p.m. If the user passes this check, the <code dir="ltr">hr_admin</code> role is granted.</p>
</li>
<li>
<p><code dir="ltr">THEN... EXECUTE</code> grants the role to the user by issuing the <code dir="ltr">SET ROLE</code> statement using the <code dir="ltr"><a id="sthref1101"></a><a id="sthref1102"></a>EXECUTE IMMEDIATE</code> command.</p>
</li>
</ul>
</li>
<li>
<p>Grant <code dir="ltr">EXECUTE</code> permissions for the <code dir="ltr">hr_admin_role_check</code> procedure to any user who was assigned it.</p>
<p>For example:</p>
<pre dir="ltr">
GRANT EXECUTE ON hr_admin_role_check TO psmith;
</pre></li>
</ol>
<p>To test the secure application role, log in to SQL*Plus as the user, try to enable the role, and then try to perform an action that requires the privileges the role grants.</p>
<p>For example:</p>
<pre dir="ltr">
CONNECT PSMITH 
Enter password: <span class="italic">password</span>

EXECUTE sec_admin.hr_admin_role_check;

-- <span class="italic">Actions requiring privileges granted by the role</span>
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006338"></a>
<div id="DBSEG148" class="sect1">
<h2 class="sect1">Associating Privileges with User Database Roles</h2>
<p><a id="sthref1103"></a><a id="sthref1104"></a><a id="sthref1105"></a><a id="sthref1106"></a><a id="sthref1107"></a><a id="sthref1108"></a>Ensure that users have only the privileges associated with the current database role.</p>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CJAIFIFD">Why Users Should Only Have the Privileges of the Current Database Role</a></p>
</li>
<li>
<p><a href="#CHDHAAJJ">Using the SET ROLE Statement to Automatically Enable or Disable Roles</a></p>
</li>
</ul>
<a id="CJAIFIFD"></a>
<div id="DBSEG149" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Why Users Should Only Have the Privileges of the Current Database Role</h3>
<p><a id="sthref1109"></a><a id="sthref1110"></a><a id="sthref1111"></a>A single user can use many applications and associated roles. However, you should ensure that the user has only the privileges associated with the current database role. Consider the following scenario:</p>
<ul>
<li>
<p>The <code dir="ltr">ORDER</code> role (for an application called Order) contains the <code dir="ltr">UPDATE</code> privilege for the <code dir="ltr">INVENTORY</code> table.</p>
</li>
<li>
<p>The <code dir="ltr">INVENTORY</code> role (for an application called Inventory) contains the <code dir="ltr">SELECT</code> privilege for the <code dir="ltr">INVENTORY</code> table.</p>
</li>
<li>
<p>Several order entry clerks were granted both the <code dir="ltr">ORDER</code> and <code dir="ltr">INVENTORY</code> roles.</p>
</li>
</ul>
<p><a id="sthref1112"></a>In this scenario, an order entry clerk who was granted both roles can use the privileges of the <code dir="ltr">ORDER</code> role when running the <code dir="ltr">INVENTORY</code> application to update the <code dir="ltr">INVENTORY</code> table. The problem is that updating the <code dir="ltr">INVENTORY</code> table is not an authorized action for the <code dir="ltr">INVENTORY</code> application. It is an authorized action for the <code dir="ltr">ORDER</code> application. <a id="sthref1113"></a>To avoid this problem, use the <code dir="ltr">SET</code> <code dir="ltr">ROLE</code> statement as explained in the following section.</p>
</div>
<!-- class="sect2" -->
<a id="CHDHAAJJ"></a>
<div id="DBSEG150" class="sect2">
<h3 class="sect2">Using the SET ROLE Statement to Automatically Enable or Disable Roles</h3>
<p><a id="sthref1114"></a>Use a <code dir="ltr">SET</code> <code dir="ltr">ROLE</code> statement at the beginning of each application to automatically enable its associated role and to disable all others. This way, each application dynamically enables particular privileges for a user only when required.</p>
<p>The <code dir="ltr">SET</code> <code dir="ltr">ROLE</code> statement simplifies privilege management. You control what information users can access and when they can access it. The <code dir="ltr">SET</code> <code dir="ltr">ROLE</code> statement also keeps users operating in a well-defined privilege domain. If a user obtains privileges only from roles, then the user cannot combine these privileges to perform unauthorized operations.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="authorization.htm#BABJEHFA">"When Do Grants and Revokes Take Effect?"</a> for information about enabling and disabling roles</p>
</li>
<li>
<p><a href="authorization.htm#i1008180">"How the SET ROLE Statement Affects Grants and Revokes"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006452"></a>
<div id="DBSEG151" class="sect1">
<h2 class="sect1">Protecting Database Objects by Using Schemas</h2>
<p><a id="sthref1115"></a><a id="sthref1116"></a><a id="sthref1117"></a>A <span class="italic">schema</span> is a security domain that can contain database objects. The privileges granted to each user or role control access to these database objects.</p>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#i1006466">Protecting Database Objects in a Unique Schema</a></p>
</li>
<li>
<p><a href="#i1006474">Protecting Database Objects in a Shared Schema</a></p>
</li>
</ul>
<a id="i1006466"></a>
<div id="DBSEG152" class="sect2">
<h3 class="sect2">Protecting Database Objects in a Unique Schema</h3>
<p><a id="sthref1118"></a><a id="sthref1119"></a>You can think of most schemas as user names: the accounts that enable users to connect to a database and access the database objects. However, a <span class="italic">unique schema</span> does not allow connections to the database, but is used to contain a related set of objects. Schemas of this sort are created as typical users, and yet are not granted the <code dir="ltr">CREATE</code> <code dir="ltr">SESSION</code> system privilege (either explicitly or through a role). However, you must temporarily grant the <code dir="ltr"><a id="sthref1120"></a>CREATE</code> <code dir="ltr">SESSION</code> and <code dir="ltr"><a id="sthref1121"></a>RESOURCE</code> privilege to a unique schema if you want to use the <code dir="ltr"><a id="sthref1122"></a>CREATE</code> <code dir="ltr">SCHEMA</code> statement to create multiple tables and views in a single transaction.</p>
<p>For example, a given schema might own the schema objects for a specific application. If application users have the privileges to do so, then they can connect to the database using typical database user names and use the application and the corresponding objects. However, no user can connect to the database using the schema set up for the application. This configuration prevents access to the associated objects through the schema, and provides another layer of protection for schema objects. In this case, the application could issue an <a id="sthref1123"></a><code dir="ltr">ALTER SESSION SET CURRENT_SCHEMA</code> statement to connect the user to the correct application schema.</p>
</div>
<!-- class="sect2" -->
<a id="i1006474"></a>
<div id="DBSEG153" class="sect2">
<h3 class="sect2">Protecting Database Objects in a Shared Schema</h3>
<p><a id="sthref1124"></a><a id="sthref1125"></a>For many applications, users do not need their own accounts or schemas in a database. These users only need to access an application schema. For example, users John, Firuzeh, and Jane are all users of the Payroll application, and they need access to the <code dir="ltr">payroll</code> schema on the <code dir="ltr">finance</code> database. None of them need to create their own objects in the database. They need to only access the <code dir="ltr">payroll</code> objects. To address this issue, <a id="sthref1126"></a>Oracle Advanced Security provides the <a id="sthref1127"></a><a id="sthref1128"></a>enterprise users, which are <a id="sthref1129"></a><a id="sthref1130"></a>schema-independent users.</p>
<p>Enterprise users, users managed in a directory service, do not need to be created as database users because they use a shared database schema. To reduce administration costs, you can create an enterprise user once in the directory, and point the user at a shared schema that many other enterprise users can also access.</p>
<p>For more information about managing enterprise users, see <a class="olink DBIMI" href="../e10744/toc.htm"><span class="italic">Oracle Database Enterprise User Security Administrator's Guide</span></a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006511"></a>
<div id="DBSEG154" class="sect1">
<h2 class="sect1">Managing Object Privileges in an Application</h2>
<p><a id="sthref1131"></a><a id="sthref1132"></a>As <a id="sthref1133"></a><a id="sthref1134"></a><a id="sthref1135"></a><a id="sthref1136"></a>part of designing your application, you need to determine the types of users who will be working with the application and the level of access that they need to accomplish their designated tasks. You must categorize these users into role groups, and then determine the privileges that must be granted to each role.</p>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#i1006526">What Application Developers Need to Know About Object Privileges</a></p>
</li>
<li>
<p><a href="#i1006641">SQL Statements Permitted by Object Privileges</a></p>
</li>
</ul>
<a id="i1006526"></a>
<div id="DBSEG155" class="sect2">
<h3 class="sect2">What Application Developers Need to Know About Object Privileges</h3>
<p>End users are typically granted <a id="sthref1137"></a>object privileges. An object privilege allows a user to perform a particular action on a specific table, view, sequence, procedure, function, or package.</p>
<p><a href="#g1009122">Table 5-2</a> summarizes the <a id="sthref1138"></a><a id="sthref1139"></a>object privileges available for each type of object.</p>
<div id="DBSEG156" class="tblhruleformal">
<p class="titleintable"><a id="sthref1140"></a><a id="g1009122"></a>Table 5-2 How Privileges Relate to Schema Objects</p>
<table class="cellalignment2250" title="How Privileges Relate to Schema Objects" summary="This table lists how object privileges (ALTER, DELETE, EXECUTE, INDEX, INSERT, REFERENCES, SELECT, and UPDATE) apply to tables, views, sequences, and procedures." dir="ltr">
<thead>
<tr class="cellalignment2244">
<th class="cellalignment2251" id="r1c1-t9">Object Privilege</th>
<th class="cellalignment2251" id="r1c2-t9">Applies to Table?</th>
<th class="cellalignment2251" id="r1c3-t9">Applies to View?</th>
<th class="cellalignment2251" id="r1c4-t9">Applies to Sequence?</th>
<th class="cellalignment2251" id="r1c5-t9">Applies to Procedure?<a id="sthref1141" href="#sthref1141" onclick='footdisplay(1,"Standalone stored procedures, functions, and public package constructs")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">ALTER</code></p>
</td>
<td class="cellalignment2252" headers="r2c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment2252" headers="r2c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r2c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment2252" headers="r2c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">DELETE</code></p>
</td>
<td class="cellalignment2252" headers="r3c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment2252" headers="r3c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment2252" headers="r3c1-t9 r1c4-t9">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r3c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r4c1-t9" headers="r1c1-t9">
<p><code dir="ltr">EXECUTE</code></p>
</td>
<td class="cellalignment2252" headers="r4c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r4c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r4c1-t9 r1c4-t9">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r4c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r5c1-t9" headers="r1c1-t9">
<p><code dir="ltr">INDEX</code></p>
</td>
<td class="cellalignment2252" headers="r5c1-t9 r1c2-t9">
<p><a id="g1010358"></a>Yes<a id="sthref1142" href="#sthref1142" onclick='footdisplay(2,"Privilege that cannot be granted to a role")'><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
<td class="cellalignment2252" headers="r5c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r5c1-t9 r1c4-t9">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r5c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r6c1-t9" headers="r1c1-t9">
<p><code dir="ltr">INSERT</code></p>
</td>
<td class="cellalignment2252" headers="r6c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment2252" headers="r6c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment2252" headers="r6c1-t9 r1c4-t9">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r6c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r7c1-t9" headers="r1c1-t9">
<p><code dir="ltr">REFERENCES</code></p>
</td>
<td class="cellalignment2252" headers="r7c1-t9 r1c2-t9">
<p>Yes<a id="sthref1143" href="#sthref1143" onclick='footdisplay(2,"Yes")'><sup class="footnotenumber">Footref&nbsp;2</sup></a></p>
</td>
<td class="cellalignment2252" headers="r7c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r7c1-t9 r1c4-t9">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r7c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r8c1-t9" headers="r1c1-t9">
<p><code dir="ltr">SELECT</code></p>
</td>
<td class="cellalignment2252" headers="r8c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment2252" headers="r8c1-t9 r1c3-t9">
<p>Yes<a id="sthref1144" href="#sthref1144" onclick='footdisplay(3,"Can also be granted for snapshots")'><sup class="tablefootnote">Foot&nbsp;3&nbsp;</sup></a></p>
</td>
<td class="cellalignment2252" headers="r8c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment2252" headers="r8c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r9c1-t9" headers="r1c1-t9">
<p><code dir="ltr">UPDATE</code></p>
</td>
<td class="cellalignment2252" headers="r9c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment2252" headers="r9c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment2252" headers="r9c1-t9 r1c4-t9">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r9c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>Standalone stored procedures, functions, and public package constructs</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>Privilege that cannot be granted to a role</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;3&nbsp;</sup>Can also be granted for snapshots</p>
<p>See also <a href="auditing.htm#CEGEGJJB">"Auditing Schema Objects"</a> for detailed information about how schema objects can be audited.</p>
</div>
<!-- class="sect2" -->
<a id="i1006641"></a>
<div id="DBSEG157" class="sect2">
<h3 class="sect2">SQL Statements Permitted by Object Privileges</h3>
<p><a id="sthref1145"></a><a id="sthref1146"></a><a id="sthref1147"></a><a id="sthref1148"></a>As you implement and test your application, you should create each necessary role. Test the usage scenario for each role to ensure that the users of your application will have proper access to the database. After completing your tests, coordinate with the administrator of the application to ensure that each user is assigned the proper roles.</p>
<p><a href="#g1009180">Table 5-3</a> lists the SQL statements permitted by the object <a id="sthref1149"></a>privileges shown in <a href="#g1009122">Table 5-2</a>. <a id="sthref1150"></a></p>
<div id="DBSEG158" class="tblhruleformal">
<p class="titleintable"><a id="sthref1151"></a><a id="g1009180"></a>Table 5-3 SQL Statements Permitted by Database Object Privileges</p>
<table class="cellalignment2250" title="SQL Statements Permitted by Database Object Privileges" summary="This table lists the SQL statements that are permitted by the following database object privileges: ALTER, DELETE, EXECUTE, INDEX, INSERT, REFERENCES, and SELECT." dir="ltr">
<thead>
<tr class="cellalignment2244">
<th class="cellalignment2251" id="r1c1-t10">Object Privilege</th>
<th class="cellalignment2251" id="r1c2-t10">SQL Statements Permitted</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr"><a id="sthref1152"></a>ALTER</code></p>
</td>
<td class="cellalignment2252" headers="r2c1-t10 r1c2-t10">
<p><code dir="ltr">ALTER</code> object (table or sequence)</p>
<p><code dir="ltr">CREATE</code> <code dir="ltr">TRIGGER</code> <code dir="ltr">ON</code> object (tables only)<a id="sthref1153"></a></p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r3c1-t10" headers="r1c1-t10">
<p><code dir="ltr"><a id="sthref1154"></a>DELETE</code></p>
</td>
<td class="cellalignment2252" headers="r3c1-t10 r1c2-t10">
<p><code dir="ltr">DELETE</code> <code dir="ltr">FROM</code> object (table, view, or synonym)</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r4c1-t10" headers="r1c1-t10">
<p><code dir="ltr"><a id="sthref1155"></a>EXECUTE</code></p>
</td>
<td class="cellalignment2252" headers="r4c1-t10 r1c2-t10">
<p><code dir="ltr">EXECUTE</code> object (procedure or function)</p>
<p>References to public package variables</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r5c1-t10" headers="r1c1-t10">
<p><code dir="ltr"><a id="sthref1156"></a>INDEX</code></p>
</td>
<td class="cellalignment2252" headers="r5c1-t10 r1c2-t10">
<p><code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> <code dir="ltr">ON</code> object (table, view, or synonym)</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r6c1-t10" headers="r1c1-t10">
<p><code dir="ltr"><a id="sthref1157"></a>INSERT</code></p>
</td>
<td class="cellalignment2252" headers="r6c1-t10 r1c2-t10">
<p><code dir="ltr">INSERT</code> <code dir="ltr">INTO</code> object (table, view, or synonym)</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r7c1-t10" headers="r1c1-t10">
<p><code dir="ltr"><a id="sthref1158"></a>REFERENCES</code></p>
</td>
<td class="cellalignment2252" headers="r7c1-t10 r1c2-t10">
<p><code dir="ltr">CREATE</code> or <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement defining a <code dir="ltr">FOREIGN</code> <code dir="ltr">KEY</code> integrity constraint on object (tables only)</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r8c1-t10" headers="r1c1-t10">
<p><code dir="ltr"><a id="sthref1159"></a>SELECT</code></p>
</td>
<td class="cellalignment2252" headers="r8c1-t10 r1c2-t10">
<p><code dir="ltr">SELECT</code>...<code dir="ltr">FROM</code> object (table, view, synonym, or snapshot)</p>
<p>SQL statements using a sequence</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>See <a href="authorization.htm#BABCHEJB">"About Privileges and Roles"</a> for a discussion of object privileges. See also <a href="auditing.htm#CEGEEBGE">"Auditing SQL Statements"</a> for detailed information about how SQL statements can be audited.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CJAHDAEI"></a>
<div id="DBSEG0058" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Parameters for Enhanced Security of Database Communication</h2>
<p>Database<a id="ABC1098456"></a> administrators <a id="sthref1160"></a>can <a id="ABC6370402"></a>manage security for their applications by following the procedures in this section.</p>
<ul>
<li>
<p><a href="#CJAFGIIH">Reporting Bad Packets Received on the Database from Protocol Errors</a></p>
</li>
<li>
<p><a href="#CJAGDCIF">Terminating or Resuming Server Execution After Receiving a Bad Packet</a></p>
</li>
<li>
<p><a href="#CJADEHID">Configuring the Maximum Number of Authentication Attempts</a></p>
</li>
<li>
<p><a href="#CJABGIHG">Controlling the Display of the Database Version Banner</a></p>
</li>
<li>
<p><a href="#CJAEGHDC">Configuring Banners for Unauthorized Access and Auditing User Actions</a></p>
</li>
</ul>
<a id="CJAFGIIH"></a>
<div id="DBSEG159" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Reporting Bad Packets Received on the Database from Protocol Errors</h3>
<p>Networking <a id="sthref1161"></a>communication utilities such as Oracle Call Interface (OCI) or Two-Task Common (TTC) can generate a large disk file containing the stack trace and heap dump when the server receives a bad packet, out-of-sequence packet, or a private or an unused remote procedure call. Typically, this disk file can grow quite large. An intruder can potentially cripple a system by <a id="sthref1162"></a>repeatedly sending bad packets to the server, which can result in disk flooding and <a id="sthref1163"></a><a id="sthref1164"></a>denial of service. An unauthenticated client can also mount this type of attack.</p>
<p>You can prevent these attacks by<a id="sthref1165"></a> setting the <code dir="ltr"><a id="sthref1166"></a><a id="sthref1167"></a>SEC_PROTOCOL_ERROR_TRACE_ACTION</code> initialization parameter to one of the following values:</p>
<ul>
<li>
<p><code dir="ltr">None</code>: Configures the server to ignore the bad packets and does not generate any trace files or log messages. Use this setting if the server availability is overwhelmingly more important than knowing that bad packets are being received.</p>
<p>For example:</p>
<pre dir="ltr">
SEC_PROTOCOL_ERROR_TRACE_ACTION = None
</pre></li>
<li>
<p><code dir="ltr">Trace</code> (default setting): Creates the trace files, but it is useful for debugging purposes, for example, when a network client is sending bad packets as a result of a bug.</p>
<p>For example:</p>
<pre dir="ltr">
SEC_PROTOCOL_ERROR_TRACE_ACTION = Trace
</pre></li>
<li>
<p><code dir="ltr">Log</code>: Writes a short, one-line message to the server trace file. This choice balances some level of auditing with system availability.</p>
<p>For example:</p>
<pre dir="ltr">
SEC_PROTOCOL_ERROR_TRACE_ACTION = Log
</pre></li>
<li>
<p><code dir="ltr">Alert</code>: Sends an alert message to a database administrator or monitoring console.</p>
<p>For example:</p>
<pre dir="ltr">
SEC_PROTOCOL_ERROR_TRACE_ACTION = Alert
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CJAGDCIF"></a>
<div id="DBSEG160" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Terminating or Resuming Server Execution After Receiving a Bad Packet</h3>
<p>After<a id="sthref1168"></a> Oracle Database detects a client or server protocol error, it must continue execution. However, this could subject the server to further bad packets, which could lead to disk flooding or denial-of-service attacks.</p>
<p>You can control the further execution of a server process when it is receiving bad packets from a potentially malicious client by setting the <code dir="ltr"><a id="sthref1169"></a><a id="sthref1170"></a>SEC_PROTOCOL_ERROR_FURTHER_ACTION</code> initialization parameter to one of the following values:</p>
<ul>
<li>
<p><code dir="ltr">Continue</code> (default setting): Continues the server execution. However, be aware that the server may be subject to further attacks.</p>
<p>For example:</p>
<pre dir="ltr">
SEC_PROTOCOL_ERROR_FURTHER_ACTION = Continue
</pre></li>
<li>
<p><code dir="ltr">Delay,</code><code dir="ltr"><span class="codeinlineitalic">m</span></code>: Delays the client <code dir="ltr"><span class="codeinlineitalic">m</span></code> seconds before the server can accept the next request from the same client connection. This setting prevents malicious clients from excessively using server resources while legitimate clients experience a degradation in performance but can continue to function.</p>
<p>For example:</p>
<pre dir="ltr">
SEC_PROTOCOL_ERROR_FURTHER_ACTION = Delay,3
</pre></li>
<li>
<p><code dir="ltr">Drop,</code><code dir="ltr"><span class="codeinlineitalic">n</span></code>: Forcefully terminates the client connection after <code dir="ltr"><span class="codeinlineitalic">n</span></code> bad packets. This setting enables the server to protect itself at the expense of the client, for example, loss of a transaction. However, the client can still reconnect, and attempt the same operation again.</p>
<p>For example:</p>
<pre dir="ltr">
SEC_PROTOCOL_ERROR_FURTHER_ACTION = Drop,10
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CJADEHID"></a>
<div id="DBSEG161" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Configuring the Maximum Number of Authentication Attempts</h3>
<p>With <a id="sthref1171"></a>Oracle Database, a server process is first started, and then the client authenticates with this server process. An intruder could start a server process first, and then issue an unlimited number of authenticated requests with different user names and passwords in an attempt to gain access to the database.</p>
<p>You can limit the number of failed login attempts for application connections by setting the <a id="sthref1172"></a><a id="sthref1173"></a><code dir="ltr">SEC_MAX_FAILED_LOGIN_ATTEMPTS</code> initialization parameter to restrict the number of authentication attempts on a connection. After the specified number of authentication attempts fail, the database process drops the connection. By default, <code dir="ltr">SEC_MAX_FAILED_LOGIN_ATTEMPTS</code> is set to 10.</p>
<p>Remember that the <code dir="ltr">SEC_MAX_FAILED_LOGIN_ATTEMPTS</code> initialization parameter is designed to prevent potential intruders from attacking your applications; it does not apply to valid users. The <code dir="ltr">sqlnet.ora</code> <code dir="ltr">INBOUND_CONNECT_TIMEOUT</code> parameter and the <code dir="ltr">FAILED_LOGIN_ATTEMPTS</code> initialization parameter also restrict failed logins, but the difference is that these two parameters only apply to valid user accounts.</p>
<p>For example, to limit the maximum attempts to 5, set <code dir="ltr">SEC_MAX_FAILED_LOGIN_ATTEMPTS</code> as follows in the <code dir="ltr">init</code><code dir="ltr"><span class="codeinlineitalic">sid</span></code><code dir="ltr">.ora</code> initialization parameter file:</p>
<pre dir="ltr">
SEC_MAX_FAILED_LOGIN_ATTEMPTS = 5
</pre></div>
<!-- class="sect2" -->
<a id="CJABGIHG"></a>
<div id="DBSEG162" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Controlling the Display of the Database Version Banner</h3>
<p>Detailed product version information <a id="sthref1174"></a>should not be accessible before a client connection (including an Oracle Call Interface client) is authenticated. An intruder could use the database version to find information about security vulnerabilities that may be present in the database software.</p>
<p>You can restrict the display of the database version banner to unauthenticated clients by setting the <a id="sthref1175"></a><a id="sthref1176"></a><code dir="ltr">SEC_RETURN_SERVER_RELEASE_BANNER</code> initialization parameter in the <code dir="ltr">init</code><code dir="ltr"><span class="codeinlineitalic">sid</span></code><code dir="ltr">.ora</code> initialization parameter file to either <code dir="ltr">TRUE</code> or <code dir="ltr">FALSE</code>. By default, <code dir="ltr">SEC_RETURN_SERVER_RELEASE_BANNER</code> is set to <code dir="ltr">FALSE</code>.</p>
<p>For example, if you set it to <code dir="ltr">TRUE</code>, the Oracle Database displays the full correct database version:</p>
<pre dir="ltr">
Oracle Database 11g Enterprise Edition Release 11.2.0.0 - Production
</pre>
<p>In the future, if you install Oracle Database 11.2.0.2, for example, it will display the following banner:</p>
<pre dir="ltr">
Oracle Database 11g Enterprise Edition Release 11.2.0.2 - Production
</pre>
<p>However, if in that same release, you set it to <code dir="ltr">FALSE</code>, then Oracle Database restricts the banner to display the following fixed text starting with Release 11.2:</p>
<pre dir="ltr">
Oracle Database 11g Release 11.2.0.0.0 - Production
</pre></div>
<!-- class="sect2" -->
<a id="CJAEGHDC"></a>
<div id="DBSEG163" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Configuring Banners for Unauthorized Access and Auditing User Actions</h3>
<p>You <a id="sthref1177"></a>should <a id="sthref1178"></a>create and configure banners to warn users against unauthorized access and possible auditing of user actions. The notices are available to the client application when it logs into the database.</p>
<p>To configure these banners to display, set the following <code dir="ltr">sqlnet.ora</code> parameters on the database server side to point to a text file that contains the banner information:</p>
<ul>
<li>
<p><a id="sthref1179"></a><a id="sthref1180"></a><code dir="ltr">SEC_USER_UNAUTHORIZED_ACCESS_BANNER</code>. For example:</p>
<pre dir="ltr">
SEC_USER_UNAUTHORIZED_ACCESS_BANNER = /opt/Oracle/11g/dbs/unauthaccess.txt
</pre></li>
<li>
<p><a id="sthref1181"></a><a id="sthref1182"></a><code dir="ltr">SEC_USER_AUDIT_ACTION_BANNER</code>. For example:</p>
<pre dir="ltr">
SEC_USER_AUDIT_ACTION_BANNER = /opt/Oracle/11g/dbs/auditactions.txt
</pre></li>
</ul>
<p>By default, these parameters are not set. In addition, be aware that there is a 512-byte limitation for the number of characters used for the banner text.</p>
<p>After you set these parameters, the Oracle Call Interface application must use the appropriate OCI APIs to retrieve these banners and present them to the end<a id="sthref1183"></a> user. <a id="sthref1184"></a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2243">
<tr>
<td class="cellalignment2252">
<table class="cellalignment2248">
<tr>
<td class="cellalignment2247"><a href="authorization.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2247"><a href="app_context.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2254">
<table class="cellalignment2246">
<tr>
<td class="cellalignment2247"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2247"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2247"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2247"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2247"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2247"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
