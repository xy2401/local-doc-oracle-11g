<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Configuring Authentication</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1090" />
<meta name="dcterms.created" content="2017-01-17T12:37:46Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Security Guide" />
<meta name="dcterms.identifier" content="E36292-09" />
<meta name="dcterms.isVersionOf" content="DBSEG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="users.htm" title="Previous" type="text/html" />
<link rel="Next" href="authorization.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e36292.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/19</span> <!-- End Header -->
<div id="DBSEG003" class="chapter"><a id="CHDDIFEC"></a>
<h1 class="chapter"><span class="secnum">3</span> Configuring Authentication</h1>
<p>This chapter contains:</p>
<ul>
<li>
<p><a href="#CHDDHBHG">About Authentication</a></p>
</li>
<li>
<p><a href="#CHDCJDHA">Configuring Password Protection</a></p>
</li>
<li>
<p><a href="#i1006595">Authenticating Database Administrators</a></p>
</li>
<li>
<p><a href="#i1006458">Using the Database to Authenticate Users</a></p>
</li>
<li>
<p><a href="#i1007520">Using the Operating System to Authenticate Users</a></p>
</li>
<li>
<p><a href="#i1007525">Using the Network to Authenticate Users</a></p>
</li>
<li>
<p><a href="#i1006269">Configuring Global User Authentication and Authorization</a></p>
</li>
<li>
<p><a href="#i1006459">Configuring an External Service to Authenticate Users and Passwords</a></p>
</li>
<li>
<p><a href="#i1007535">Using Multitier Authentication and Authorization</a></p>
</li>
<li>
<p><a href="#CHDBAHIB">Preserving User Identity in Multitiered Environments</a></p>
</li>
<li>
<p><a href="#CHDHBIDH">Finding Information About User Authentication</a></p>
</li>
</ul>
<a id="CHDDHBHG"></a>
<div id="DBSEG30031" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">About Authentication</h2>
<p><a id="sthref153"></a>Authentication means verifying the identity of someone (a user, device, or other entity) who wants to use data, resources, or applications. Validating that identity establishes a trust relationship for further interactions. Authentication also enables accountability by making it possible to link access and actions to specific identities. After authentication, authorization processes can allow or limit the levels of access and action permitted to that entity.</p>
<p>You can authenticate both database and nondatabase users for an Oracle database. For simplicity, the same authentication method is generally used for all database users, but Oracle Database allows a single database instance to use any or all methods. Oracle Database requires special authentication procedures for database administrators, because they perform special database operations. Oracle Database also encrypts passwords during transmission to ensure the security of network authentication.</p>
<p>After authentication, authorization processes can allow or limit the levels of access and action permitted to that entity. Authorization is described in <a href="authorization.htm#BABHFJFJ">Chapter 4, "Configuring Privilege and Role Authorization"</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHDCJDHA"></a>
<div id="DBSEG0032" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Configuring Password Protection</h2>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CHDBBGFG">What Are the Oracle Database Built-in Password Protections?</a></p>
</li>
<li>
<p><a href="#CHDFDHAJ">Minimum Requirements for Passwords</a></p>
</li>
<li>
<p><a href="#i1006575">Using a Password Management Policy</a></p>
</li>
<li>
<p><a href="#CHDEFIHB">Ensuring Against Password Security Threats by Using the SHA-1 Hashing Algorithm</a></p>
</li>
<li>
<p><a href="#CHDHGAIJ">Managing the Secure External Password Store for Password Credentials</a></p>
</li>
</ul>
<p>See also <a href="guidelines.htm#CHDEGEIF">"Guidelines for Securing Passwords"</a> for advice on securing passwords. If you want to configure Oracle XML DB to authenticate users by encrypting their passwords but you do not need to encrypt other data (for example, an Intranet email), see <a class="olink ADXDB2500" href="../../appdev.112/e23094/xdb22pro.htm#ADXDB2500"><span class="italic">Oracle XML DB Developer's Guide</span></a> for more information.</p>
<a id="CHDBBGFG"></a>
<div id="DBSEG30321" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">What Are the Oracle Database Built-in Password Protections?</h3>
<p>Oracle Database provides a set of built-in password<a id="sthref154"></a> protections designed to protect your users' passwords. These password protections are as follows:</p>
<ul>
<li>
<p><span class="bold">Password encryption.</span> <a id="sthref155"></a><a id="sthref156"></a><a id="sthref157"></a><a id="sthref158"></a>Oracle Database automatically and transparently encrypts passwords during network (client-to-server and server-to-server) connections, using Advanced Encryption Standard (AES) before sending them across the network.</p>
</li>
<li>
<p><span class="bold">Password complexity checking.</span> In a default installation, Oracle Database provides the <code dir="ltr">verify_function_11g</code> password verification function to ensure that new or changed passwords are sufficiently complex to prevent intruders who try to break into the system by guessing passwords. You must manually enable password complexity checking. You can further customize the complexity of your users' passwords. See <a href="#i1007341">"Enforcing Password Complexity Verification"</a> for more information.</p>
</li>
<li>
<p><span class="bold">Preventing passwords from being broken.</span> <a id="sthref159"></a>If a <a id="sthref160"></a><a id="sthref161"></a>user tries to log in to Oracle Database multiple times using an incorrect password, Oracle Database delays each login. This protection applies for attempts made from different IP addresses or multiple client connections. Afterwards, it gradually increases the time before the user can try another password, up to a maximum of about 10 seconds. If the user enters the correct password, he or she is able to log in successfully without any delay.</p>
<p>This feature significantly decreases the number of passwords that an <a id="sthref162"></a>intruder would be able to try within a fixed time period when attempting to log in. The failed logon delay slows down each failed logon attempt, increasing the overall time that is required to perform a password-guessing attack, because such attacks usually require a very large number of failed logon attempts.</p>
</li>
<li>
<p><span class="bold">Enforced case sensitivity for passwords.</span> Passwords are case sensitive. For example, the password <code dir="ltr">hPP5620qr</code> fails if it is entered as <code dir="ltr">hpp5620QR</code> or <code dir="ltr">hPp5620Qr</code>. In previous releases, passwords were not case sensitive. See <a href="#CHDJDCGI">"Enabling or Disabling Password Case Sensitivity"</a> for information about how case sensitivity works, and how it affects password files and database links.</p>
</li>
<li>
<p><span class="bold">Passwords hashed using the Secure Hash Algorithm (SHA) cryptographic hash function SHA-1.</span> Oracle Database uses the SHA-1 verifier is to authenticate the user password and establish the session of the user. In addition, it enforces case sensitivity and restricts passwords to 160 bits. The advantage of using the SHA-1 verifier is that it is commonly used by Oracle Database customers and provides much better security without forcing a network upgrade. It also adheres to compliance regulations that mandate the use of strong passwords being protected by a suitably strong password hashing algorithm. See <a href="#CHDEFIHB">"Ensuring Against Password Security Threats by Using the SHA-1 Hashing Algorithm"</a> for more information.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDFDHAJ"></a>
<div id="DBSEG33223" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Minimum Requirements for Passwords</h3>
<p>Passwords must not exceed 30 characters or 30 bytes<a id="sthref163"></a><a id="sthref164"></a>. For greater security, however, follow the additional guidelines described in <a href="guidelines.htm#CHDEGEIF">"Guidelines for Securing Passwords"</a>.</p>
<p>To create passwords for users, you can use the <code dir="ltr">CREATE USER</code> or <code dir="ltr">ALTER USER</code> SQL statements. SQL statements that accept the <code dir="ltr">IDENTIFIED BY</code> clause also enable you to create passwords. <a href="#CHDJFICJ">Example 3-1</a> shows several SQL statements that create passwords with the <code dir="ltr">IDENTIFIED BY</code> clause.</p>
<div id="DBSEG99802" class="example">
<p class="titleinexample"><a id="CHDJFICJ"></a>Example 3-1 Password Creation SQL Statements</p>
<pre dir="ltr">
CREATE USER psmith IDENTIFIED BY <span class="italic">password</span>;
GRANT CREATE SESSION TO psmith IDENTIFIED BY <span class="italic">password</span>;
ALTER USER psmith IDENTIFIED BY <span class="italic">password</span>;
CREATE DATABASE LINK AUTHENTICATED BY psmith IDENTIFIED BY <span class="italic">password</span>;
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1007341">"Enforcing Password Complexity Verification"</a> for ways that you can ensure that passwords are sufficiently complex for your site</p>
</li>
<li>
<p><a href="guidelines.htm#CHDEGEIF">"Guidelines for Securing Passwords"</a> for more ways to secure passwords</p>
</li>
<li>
<p><a href="app_devs.htm#CJADABGG">"Securing Passwords in Application Design"</a> for password protection guidelines application developers should follow</p>
</li>
<li>
<p><a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code dir="ltr">CREATE USER</code>, <code dir="ltr">ALTER USER</code>, <code dir="ltr">GRANT</code>, and <code dir="ltr">CREATE DATABASE LINK</code> SQL statements</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i1006575"></a>
<div id="DBSEG99803" class="sect2">
<h3 class="sect2">Using a Password Management Policy<a id="sthref165"></a><a id="sthref166"></a></h3>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CHDCJCBI">About Managing Passwords</a></p>
</li>
<li>
<p><a href="#CHDHCDFE">Finding User Accounts That Have Default Passwords</a></p>
</li>
<li>
<p><a href="#CHDCGJED">Configuring Password Settings in the Default Profile</a></p>
</li>
<li>
<p><a href="#CACFAEAJ">Disabling and Enabling the Default Password Security Settings</a></p>
</li>
<li>
<p><a href="#i1012688">Automatically Locking a User Account After a Failed Login</a></p>
</li>
<li>
<p><a href="#i1007339">Controlling Password Aging and Expiration</a></p>
</li>
<li>
<p><a href="#CACIAICJ">Password Change Life Cycle</a></p>
</li>
<li>
<p><a href="#CACHCJJH">Setting the PASSWORD_LIFE_TIME Profile Parameter to a Low Value</a></p>
</li>
<li>
<p><a href="#i1007340">Controlling User Ability to Reuse Previous Passwords</a></p>
</li>
<li>
<p><a href="#i1007341">Enforcing Password Complexity Verification</a></p>
</li>
<li>
<p><a href="#CHDJDCGI">Enabling or Disabling Password Case Sensitivity</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="users.htm#BABFBCHF">"Managing Resources with Profiles"</a></p>
</li>
<li>
<p><a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for syntax and specific information about SQL statements discussed in this section</p>
</li>
</ul>
</div>
<a id="CHDCJCBI"></a>
<div id="DBSEG99804" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About Managing Passwords</h4>
<p><a id="sthref167"></a>Database security systems that depend on passwords require that passwords be kept secret at all times. Because passwords are vulnerable to theft and misuse, Oracle Database uses a password management policy. Database administrators and security officers control this policy through user profiles, enabling greater control of database security.</p>
<p>Use the <code dir="ltr">CREATE PROFILE</code> statement to create a user profile. The profile is assigned to a user with the <code dir="ltr"><a id="sthref168"></a><a id="sthref169"></a><a id="sthref170"></a>CREATE USER</code> or <code dir="ltr">ALTER USER</code> statement. Details of creating and altering database users are not discussed in this section. This section describes password parameters that can be specified using the<a id="sthref171"></a><a id="sthref172"></a><a id="sthref173"></a><a id="sthref174"></a> <code dir="ltr">CREATE PROFILE</code> (or <code dir="ltr">ALTER PROFILE</code>) statement.</p>
</div>
<!-- class="sect3" -->
<a id="CHDHCDFE"></a>
<div id="DBSEG33222" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Finding User Accounts That Have Default Passwords</h4>
<p>When you create a database in Oracle Database 11<span class="italic">g</span> Release 2 (11.2), most of its default accounts are locked with the passwords expired. If<a id="sthref175"></a><a id="sthref176"></a><a id="sthref177"></a><a id="sthref178"></a> you have upgraded from an earlier release of Oracle Database, you may have user accounts that have default passwords. These are default accounts that are created when you create a database, such as the <code dir="ltr">HR</code>, <code dir="ltr">OE</code>, and <code dir="ltr">SCOTT</code> accounts.</p>
<p>For greater security, change the passwords for these accounts. Using a default password that is commonly known can make your database vulnerable to attacks by intruders. To find both locked and unlocked accounts that use default passwords, log onto SQL*Plus using the <code dir="ltr">SYSDBA</code> privilege and then query the <code dir="ltr">DBA_USERS_WITH_DEFPWD</code> data dictionary view.</p>
<p>For example, to find both the names of accounts that have default passwords and the status of the account:</p>
<pre dir="ltr">
SELECT d.username, u.account_status
FROM DBA_USERS_WITH_DEFPWD d, DBA_USERS u
WHERE d.username = u.username
ORDER BY 2,1;

USERNAME  ACCOUNT_STATUS
--------- ---------------------------
SCOTT     EXPIRED &amp; LOCKED
</pre>
<p>Then change the passwords for any accounts that the <code dir="ltr">DBA_USERS_WITH_DEFPWD</code> view lists. Oracle recommends that you do <span class="bold">not</span> assign these accounts passwords that they may have had in previous releases of Oracle Database.</p>
<pre dir="ltr">
ALTER USER SCOTT ACCOUNT UNLOCK IDENTIFIED BY <span class="italic">password</span>;
</pre>
<p>Replace <code dir="ltr"><span class="codeinlineitalic">password</span></code> with a password that is secure. <a href="#CHDFDHAJ">"Minimum Requirements for Passwords"</a> describes the minimum requirements for passwords.</p>
</div>
<!-- class="sect3" -->
<a id="CHDCGJED"></a>
<div id="DBSEG30323" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Configuring Password Settings in the Default Profile</h4>
<p><a id="sthref179"></a><a id="sthref180"></a>A profile is a collection of parameters that sets limits on database resources. If you assign the profile to a user, then that user cannot exceed these limits. You can use profiles to configure database settings such as sessions per user, logging and tracing features, and so on. Profiles can also control user passwords. To find information about the current password settings in the profile, you can query the <code dir="ltr">DBA_PROFILES</code> data dictionary view.</p>
<p><a href="#CHDEGBEG">Table 3-1</a> lists the password-specific parameter settings in the default profile.</p>
<div id="DBSEG99805" class="tblhruleformal">
<p class="titleintable"><a id="sthref181"></a><a id="CHDEGBEG"></a>Table 3-1 Password-Specific Settings in the Default Profile</p>
<table class="cellalignment2250" title="Password-Specific Settings in the Default Profile" summary="Password settings in default profile" dir="ltr">
<thead>
<tr class="cellalignment2244">
<th class="cellalignment2251" id="r1c1-t4">Parameter</th>
<th class="cellalignment2251" id="r1c2-t4">Default Setting</th>
<th class="cellalignment2251" id="r1c3-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r2c1-t4" headers="r1c1-t4">
<p><code dir="ltr">FAILED_LOGIN_ATTEMPTS</code><a id="sthref182"></a></p>
</td>
<td class="cellalignment2252" headers="r2c1-t4 r1c2-t4">
<p><code dir="ltr">10</code></p>
</td>
<td class="cellalignment2252" headers="r2c1-t4 r1c3-t4">
<p>Sets the maximum times a user try to log in and to fail before locking the account.</p>
<p><span class="bold">Notes:</span></p>
<ul>
<li>
<p>When you set this parameter, take into consideration users who may log in using the<a id="sthref183"></a> <code dir="ltr">CONNECT THROUGH</code> privilege.</p>
</li>
<li>
<p>You can set limits on the number of times an unauthorized user (possibly an intruder) attempts to log in to Oracle Call Interface (OCI) applications by using the <code dir="ltr">SEC_MAX_FAILED_LOGIN_ATTEMPTS</code> initialization parameter. See <a href="app_devs.htm#CJADEHID">"Configuring the Maximum Number of Authentication Attempts"</a> for more information about this parameter.</p>
<p>See also <a href="#i1012688">"Automatically Locking a User Account After a Failed Login"</a> for more information.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r3c1-t4" headers="r1c1-t4">
<p><code dir="ltr">PASSWORD_GRACE_TIME</code><a id="sthref184"></a></p>
</td>
<td class="cellalignment2252" headers="r3c1-t4 r1c2-t4">
<p><code dir="ltr">7</code></p>
</td>
<td class="cellalignment2252" headers="r3c1-t4 r1c3-t4">
<p>Sets the number of days that a user has to change his or her password before it expires.</p>
<p>See <a href="#i1007339">"Controlling Password Aging and Expiration"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r4c1-t4" headers="r1c1-t4">
<p><code dir="ltr">PASSWORD_LIFE_TIME</code><a id="sthref185"></a></p>
</td>
<td class="cellalignment2252" headers="r4c1-t4 r1c2-t4">
<p><code dir="ltr">180</code></p>
</td>
<td class="cellalignment2252" headers="r4c1-t4 r1c3-t4">
<p>Sets the number of days the user can use his or her current password.</p>
<p>See <a href="#i1007339">"Controlling Password Aging and Expiration"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r5c1-t4" headers="r1c1-t4">
<p><code dir="ltr">PASSWORD_LOCK_TIME</code><a id="sthref186"></a></p>
</td>
<td class="cellalignment2252" headers="r5c1-t4 r1c2-t4">
<p><code dir="ltr">1</code></p>
</td>
<td class="cellalignment2252" headers="r5c1-t4 r1c3-t4">
<p>Sets the number of days an account will be locked after the specified number of consecutive failed login attempts. After the time passes, then the account becomes unlocked. This user's profile parameter is useful to help prevent brute force attacks on user passwords but not to increase the maintenance burden on administrators.</p>
<p>See <a href="#i1012688">"Automatically Locking a User Account After a Failed Login"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r6c1-t4" headers="r1c1-t4">
<p><code dir="ltr">PASSWORD_REUSE_MAX</code><a id="sthref187"></a></p>
</td>
<td class="cellalignment2252" headers="r6c1-t4 r1c2-t4">
<p><code dir="ltr">UNLIMITED</code></p>
</td>
<td class="cellalignment2252" headers="r6c1-t4 r1c3-t4">
<p>Sets the number of password changes required before the current password can be reused.</p>
<p>See <a href="#i1007340">"Controlling User Ability to Reuse Previous Passwords"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r7c1-t4" headers="r1c1-t4">
<p><code dir="ltr">PASSWORD_REUSE_TIME</code><a id="sthref188"></a></p>
</td>
<td class="cellalignment2252" headers="r7c1-t4 r1c2-t4">
<p><code dir="ltr">UNLIMITED</code></p>
</td>
<td class="cellalignment2252" headers="r7c1-t4 r1c3-t4">
<p>Sets the number of days before which a password cannot be reused.</p>
<p>See <a href="#i1007340">"Controlling User Ability to Reuse Previous Passwords"</a> for more information.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>For greater security, use the default settings described in <a href="#CHDEGBEG">Table 3-1</a>, based on your needs. You can create or modify the password-specific parameters individually by using the <code dir="ltr">CREATE PROFILE</code> or <code dir="ltr">ALTER PROFILE</code> statement. For example:</p>
<pre dir="ltr">
ALTER PROFILE prof LIMIT
 FAILED_LOGIN_ATTEMPTS 9
 PASSWORD_LOCK_TIME 10;
</pre>
<p>See <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code dir="ltr">CREATE PROFILE</code>, <code dir="ltr">ALTER PROFILE</code>, and the password-related parameters described in this section.</p>
</div>
<!-- class="sect3" -->
<a id="CACFAEAJ"></a>
<div id="DBSEG33232" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Disabling and Enabling the Default Password Security Settings</h4>
<p>If your <a id="sthref189"></a>applications use the default password security settings from Oracle Database 10<span class="italic">g</span> Release 2 (10.2), then you can revert to these settings until you modify the applications to use the Release 11<span class="italic">g</span> password security settings. To do so, run the <code dir="ltr"><a id="sthref190"></a><a id="sthref191"></a>undopwd.sql</code> script.</p>
<p>After you have modified your applications to conform to the Release 11<span class="italic">g</span> password security settings, you can manually update your database to use the password security configuration that suits your business needs, or you can run the <a id="sthref192"></a><a id="sthref193"></a><code dir="ltr">secconf.sql</code> script to apply the Release 11<span class="italic">g</span> default password settings. You can customize this script to have different security settings if you like, but remember that the settings listed in the original script are Oracle-recommended settings.</p>
<p>If you <a id="sthref194"></a>created your database manually, then you should run the <code dir="ltr">secconf.sql</code> script to apply the Release 11<span class="italic">g</span> default password settings to the database. Databases that have been created with <a id="sthref195"></a>Database Configuration Assistant (DBCA) will have these settings, but manually created databases do not.</p>
<p>The <code dir="ltr">undopwd.sql</code> and <code dir="ltr">secconf.sql</code> scripts are in the <code dir="ltr">$ORACLE_HOME/rdbms/admin</code> directory. The <code dir="ltr">undopwd.sql</code> script affects password settings only, and the <code dir="ltr">secconf.sql</code> script affects both password and audit settings. They have no effect on other security settings.</p>
</div>
<!-- class="sect3" -->
<a id="i1012688"></a>
<div id="DBSEG33233" class="sect3">
<h4 class="sect3">Automatically Locking a User Account After a Failed Login</h4>
<p><a id="sthref196"></a>Oracle Database can lock a user's account <a id="sthref197"></a><a id="sthref198"></a>after a <a id="sthref199"></a><a id="sthref200"></a>specified number of consecutive failed log-in attempts. You can set the <code dir="ltr">PASSWORD_LOCK_TIME</code> user's profile parameter to configure the account to unlock automatically after a specified time interval or to require database administrator intervention to be unlocked. The database administrator also can lock accounts manually, so that they must be unlocked explicitly by the database administrator.</p>
<p>You can specify the permissible number of failed login attempts by using the <code dir="ltr"><a id="sthref201"></a><a id="sthref202"></a>CREATE PROFILE</code> statement. You can also specify the amount of time accounts remain locked.</p>
<p><a href="#CHDCCEII">Example 3-2</a> <a id="sthref203"></a>sets the maximum number of failed login attempts for the user <code dir="ltr">johndoe</code> to 10 (the default), and the amount of time the account locked to 30 days. The account will unlock automatically after <a id="sthref204"></a><a id="sthref205"></a>30 days.</p>
<div id="DBSEG99806" class="example">
<p class="titleinexample"><a id="CHDCCEII"></a>Example 3-2 Locking an Account with the CREATE PROFILE Statement</p>
<pre dir="ltr">
CREATE PROFILE prof LIMIT
 FAILED_LOGIN_ATTEMPTS 10
 PASSWORD_LOCK_TIME 30;
ALTER USER johndoe PROFILE prof;
</pre></div>
<!-- class="example" -->
<p>Each time the user unsuccessfully logs in, Oracle Database increases the delay exponentially with each login failure.</p>
<p>If you do not specify a time interval for unlocking the account, <a id="sthref206"></a>then <code dir="ltr"><a id="sthref207"></a><a id="sthref208"></a><a id="sthref209"></a><a id="sthref210"></a>PASSWORD_LOCK_TIME</code> assumes the value specified in a default profile. (The recommended value is 1 day.) If you specify <code dir="ltr">PASSWORD_LOCK_TIME</code> as <code dir="ltr">UNLIMITED</code>, then you must explicitly unlock the account by using an <code dir="ltr">ALTER USER</code> statement. For example, assuming that <code dir="ltr">PASSWORD_LOCK_TIME</code> <code dir="ltr">UNLIMITED</code> is specified for <code dir="ltr">johndoe</code>, then you use the following statement to unlock the <code dir="ltr">johndoe</code> account:</p>
<pre dir="ltr">
ALTER USER johndoe ACCOUNT UNLOCK;
</pre>
<p>After a user successfully logs into an account, Oracle Database resets the unsuccessful <a id="sthref211"></a><a id="sthref212"></a>login attempt count for the user, if it is non-zero, to zero.</p>
<p>The security officer can also explicitly <a id="sthref213"></a><a id="sthref214"></a><a id="sthref215"></a>lock user accounts. When this occurs, the account cannot be unlocked automatically, and only the security officer should unlock the account. The <code dir="ltr">CREATE USER</code> or <code dir="ltr">ALTER USER</code> statements explicitly lock or unlock user accounts. For example, the following statement locks the user account, <code dir="ltr">susan</code>:</p>
<pre dir="ltr">
ALTER USER susan ACCOUNT LOCK;
</pre></div>
<!-- class="sect3" -->
<a id="i1007340"></a>
<div id="DBSEG99807" class="sect3">
<h4 class="sect3">Controlling User Ability to Reuse Previous Passwords<a id="sthref216"></a><a id="sthref217"></a></h4>
<p><a id="sthref218"></a>You can ensure that users do not reuse their previous passwords for a specified amount of time or for a specified number of password changes. To do so, configure the rules for password reuse with <code dir="ltr">CREATE</code> <code dir="ltr">PROFILE</code> or <code dir="ltr">ALTER PROFILE</code> statements. For the complete syntax of these statements, see the <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p><a href="#CHDEFBCG">Table 3-2</a> lists the <code dir="ltr">CREATE PROFILE</code> and <code dir="ltr">ALTER PROFILE</code> parameters that control ability of a user to reuse a previous password.</p>
<div id="DBSEG99808" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref219"></a><a id="CHDEFBCG"></a>Table 3-2 Parameters Controlling Reuse of a Previous Password</p>
<table class="cellalignment2250" title="Parameters Controlling Reuse of a Previous Password " summary="This table lists and describes the password reuse parameters: PASSWORD_RESUSE_TIME and PASSWORD_REUSE_MAX." dir="ltr">
<thead>
<tr class="cellalignment2244">
<th class="cellalignment2251" id="r1c1-t5">Parameter Name</th>
<th class="cellalignment2251" id="r1c2-t5">Description and Use</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r2c1-t5" headers="r1c1-t5">
<p><a id="sthref220"></a><a id="sthref221"></a><a id="sthref222"></a><code dir="ltr">PASSWORD_REUSE_TIME</code></p>
</td>
<td class="cellalignment2252" headers="r2c1-t5 r1c2-t5">
<p>Requires either of the following:<a id="sthref223"></a></p>
<ul>
<li>
<p>A number specifying how many days (or a fraction of a day) between the earlier use of a password and its next use</p>
</li>
<li>
<p>The word <code dir="ltr">UNLIMITED</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r3c1-t5" headers="r1c1-t5">
<p><a id="sthref224"></a><a id="sthref225"></a><a id="sthref226"></a><code dir="ltr">PASSWORD_REUSE_MAX</code></p>
</td>
<td class="cellalignment2252" headers="r3c1-t5 r1c2-t5">
<p>Requires either of the following:<a id="sthref227"></a></p>
<ul>
<li>
<p>An integer to specify the number of password changes required before a password can be reused</p>
</li>
<li>
<p>The word <code dir="ltr">UNLIMITED</code></p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<p>If you do not specify a parameter, then the user can reuse passwords at any time, which is not a good security practice.</p>
<p>If neither parameter is <code dir="ltr">UNLIMITED</code>, then password reuse is allowed, but only after meeting both conditions. The user must have changed the password the specified number of times, and the specified number of days must have passed since the previous password was last used.</p>
<p>For example, suppose that the profile of user A had <code dir="ltr">PASSWORD_REUSE_MAX</code> set to <code dir="ltr">10</code> and <code dir="ltr">PASSWORD_REUSE_TIME</code> set to <code dir="ltr">30</code>. User A cannot reuse a password until he or she has reset the password 10 times, and until 30 days had passed since the password was last used.</p>
<p>If either parameter is specified as <code dir="ltr">UNLIMITED</code>, then the user can never reuse a password.</p>
<p>If you set both parameters to <code dir="ltr">UNLIMITED</code>, then Oracle Database ignores both, and the user can reuse any password at any time.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you specify <code dir="ltr">DEFAULT</code> for either parameter, then Oracle Database uses the value defined in the <code dir="ltr">DEFAULT</code> profile, which sets all parameters to <code dir="ltr">UNLIMITED</code>. Oracle Database thus uses <code dir="ltr">UNLIMITED</code> for any parameter specified as <code dir="ltr">DEFAULT</code>, unless you change the setting for that parameter in the <code dir="ltr">DEFAULT</code> profile.</div>
</div>
<!-- class="sect3" -->
<a id="i1007339"></a>
<div id="DBSEG33236" class="sect3">
<h4 class="sect3">Controlling Password Aging and Expiration</h4>
<p>You can specify a <a id="sthref228"></a>password lifetime, <a id="sthref229"></a><a id="sthref230"></a><a id="sthref231"></a><a id="sthref232"></a>after which the password expires. This means that the next time the user logs in with the current, correct password, he or she is prompted to change the password. By default, there are no complexity or password history checks, so users can still reuse any previous or weak passwords. You can control these factors by setting the <code dir="ltr">PASSWORD_REUSE_TIME</code>, <code dir="ltr">PASSWORD_REUSE_MAX</code>, and <code dir="ltr">PASSWORD_VERIFY_FUNCTION</code> parameters. (See <a href="#i1007340">"Controlling User Ability to Reuse Previous Passwords"</a> and <a href="#i1007341">"Enforcing Password Complexity Verification"</a> for more information.)</p>
<p>In addition, you can set a grace period, during which each attempt to log in to the database account receives a warning message to change the password. If the user does not change it by the end of that period, then Oracle Database expires the account.</p>
<p>As a database administrator, you can manually set the password state to be expired, which sets the account status to <code dir="ltr">EXPIRED</code>. The user must then follow the prompts to change the password before the logon can proceed.</p>
<p>For example, in SQL*Plus, suppose user <code dir="ltr">SCOTT</code> tries to log in with the correct credentials, but his password has expired. User <code dir="ltr">SCOTT</code> will then see the <code dir="ltr">ORA-28001: The password has expired</code> error and be prompted to change his password, as follows:</p>
<pre dir="ltr">
Changing password for scott
New password: <span class="italic">new_password</span>
Retype new password: <span class="italic">new_password</span>
Password changed.
</pre>
<p>Use the <code dir="ltr">CREATE PROFILE</code> or <code dir="ltr">ALTER PROFILE</code> statement to specify a lifetime for passwords. To understand the life cycle of passwords, see <a href="#CACIAICJ">"Password Change Life Cycle"</a>.</p>
<p><a href="#CHDGBCBD">Example 3-3</a> <a id="sthref233"></a>demonstrates how to create and assign a profile to user <code dir="ltr">johndoe</code>, and the <code dir="ltr">PASSWORD_LIFE_TIME</code> <a id="sthref234"></a>parameter specifies that <code dir="ltr">johndoe</code> can use the same password for 180 days before it expires.</p>
<div id="DBSEG99809" class="example">
<p class="titleinexample"><a id="CHDGBCBD"></a>Example 3-3 Setting Password Aging and Expiration with CREATE PROFILE</p>
<pre dir="ltr">
CREATE PROFILE prof LIMIT
 FAILED_LOGIN_ATTEMPTS 4
 PASSWORD_LOCK_TIME 30
 PASSWORD_LIFE_TIME 180;
ALTER USER johndoe PROFILE prof;
</pre></div>
<!-- class="example" -->
<p>You can check the status of any account, whether it is open, in grace, or expired, by running the following query:</p>
<pre dir="ltr">
SELECT ACCOUNT_STATUS FROM DBA_USERS WHERE USERNAME = '<span class="italic">username</span>';
</pre></div>
<!-- class="sect3" -->
<a id="CACIAICJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Password Change Life Cycle</h4>
<p><a href="#i1006685">Figure 3-1</a> shows <a id="sthref235"></a><a id="sthref236"></a>the lifecycle of the password lifetime and grace period.</p>
<ul>
<li>
<p><span class="bold">Phase 1:</span> After the user account is created, or the password of an existing account is changed, the password lifetime period begins.</p>
</li>
<li>
<p><span class="bold">Phase 2:</span> This phase represents the period of time <span class="italic">after</span> the password lifetime ends but <span class="italic">before</span> the user logs in again with the correct password. The correct credentials are needed for Oracle Database to update the account status. Otherwise, the account status will remain unchanged. Oracle Database does not have any background process to update the account status. All changes to the account status are driven by the Oracle Database server process on behalf of authenticated users.</p>
</li>
<li>
<p><span class="bold">Phase 3:</span> When the user finally does log in, the grace period begins. Oracle Database then updates the <code dir="ltr">DBA_USERS.EXPIRY_DATE</code> column to a new value using the current time plus the value of the <code dir="ltr">PASSWORD_GRACE_TIME</code> setting from the account's password profile. At this point, the user receives an <code dir="ltr">ORA-28002</code> warning message about the password expiring in the near future (for example, <code dir="ltr">ORA-28002 The password will expire within 7</code> <code dir="ltr">days</code> if <code dir="ltr">PASSWORD_GRACE_TIME</code> is set to <code dir="ltr">7</code> days), but the user can still log in without changing the password. The <code dir="ltr">DBA_USERS.EXPIRY_DATE</code> column shows the time in the future when the user will be prompted to change their password.</p>
</li>
<li>
<p><span class="bold">Phase 4:</span> After the grace period (Phase 3) ends, the <code dir="ltr">ORA-28001: The password has expired</code> error appears, and the user is prompted to change the password after entering the current, correct password before the authentication can proceed. If the user has an Oracle Active Data Guard configuration, where there is a primary and a stand-by database, and the authentication attempt is made on the standby database (which is a read-only database), then the <code dir="ltr">ORA-28032: Your password has expired and the database is set to read-only</code> error appears. The user should log into the primary database and change the password there.</p>
</li>
</ul>
<p>During any of these four phases, you can query the <code dir="ltr">DBA_USERS</code> data dictionary view to find the user's account status in the <code dir="ltr">DBA_USERS.ACCOUNT_STATUS</code> column.</p>
<div id="DBSEG99810" class="figure">
<p class="titleinfigure"><a id="i1006685"></a>Figure 3-1 Chronology of Password Lifetime and Grace Period</p>
<img width="662" height="341" src="img/admin107.png" alt="Description of Figure 3-1 follows" /><br />
<a id="sthref237" href="img_text/admin107.htm">Description of ''Figure 3-1 Chronology of Password Lifetime and Grace Period''</a><br />
<br /></div>
<!-- class="figure" -->
<p>In the following example, the profile assigned to <code dir="ltr">johndoe</code> includes the specification of a <a id="sthref238"></a><a id="sthref239"></a><a id="sthref240"></a>grace period:<a id="sthref241"></a> <code dir="ltr">PASSWORD_GRACE_TIME = 3</code> (the recommended value). The first time <code dir="ltr">johndoe</code> tries to log in to the database after 90 days (this can be <span class="italic">any</span> day after the 90th day, that is, the 91st day, 100th day, or another day), he receives a warning message that his password will expire in 3 days. If 3 days pass, and if he does not change his password, then the password expires. After this, he receives a prompt to change his password on any attempt to log in.</p>
<pre dir="ltr">
<a id="sthref242"></a>CREATE PROFILE prof LIMIT
 FAILED_LOGIN_ATTEMPTS 4
 PASSWORD_LIFE_TIME 90
 PASSWORD_GRACE_TIME 3;

<a id="sthref243"></a>ALTER USER johndoe PROFILE prof;
</pre>
<p>A database administrator or a user who has the <code dir="ltr">ALTER USER</code> system privilege can <a id="sthref244"></a><a id="sthref245"></a>explicitly expire a password by using the <code dir="ltr"><a id="sthref246"></a><a id="sthref247"></a>CREATE USER</code> and <code dir="ltr">ALTER USER</code> statements. The following statement creates a user with an expired password. This setting forces the user to change the password before the user can log in to the database.</p>
<pre dir="ltr">
CREATE USER jbrown 
 IDENTIFIED BY <span class="italic">password</span>
 ...
 PASSWORD EXPIRE;
</pre>
<p>There is no "password unexpire" clause for the <code dir="ltr">CREATE USER</code> statement, but an account can be "unexpired" by changing the password on the account.</p>
</div>
<!-- class="sect3" -->
<a id="CACHCJJH"></a>
<div id="DBSEG567" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Setting the PASSWORD_LIFE_TIME Profile Parameter to a Low Value</h4>
<p>Be careful<a id="sthref248"></a> if you plan to set the<a id="sthref249"></a> <code dir="ltr">PASSWORD_LIFE_TIME</code> parameter of <code dir="ltr">CREATE PROFILE</code> or <code dir="ltr">ALTER PROFILE</code> to a low value (for example, 1 day). The <code dir="ltr">PASSWORD_LIFE_TIME</code> limit of a profile is measured from the last time that an account's password is changed, or the account creation time if the password has never been changed. These dates are recorded in the <code dir="ltr">PTIME</code> (password change time) and <code dir="ltr">CTIME</code> (account creation time) columns of the <code dir="ltr">SYS.USER$</code> system table. The <code dir="ltr">PASSWORD_LIFE_TIME</code> limit is not measured starting from the timestamp of the last change to the <code dir="ltr">PASSWORD_LIFE_TIME</code> profile parameter, as may be initially thought. Therefore, any accounts affected by the changed profile whose last password change time was more than <code dir="ltr">PASSWORD_LIFE_TIME</code> days ago immediately expire and enter their grace period on their next connection, issuing the <code dir="ltr">ORA-28002: The password will expire within</code> <code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">days</code> warning.</p>
<p>As a database administrator, you can find an account's last password change time as follows:</p>
<pre dir="ltr">
ALTER SESSION SET NLS_DATE_FORMAT='DD-MON-YYYY HH24:MI:SS';
SELECT PTIME FROM SYS.USER$ WHERE NAME = '<span class="italic">user_name</span>'; <span class="italic">-- Password change time</span>
</pre>
<p>To find when the account was created and the password expiration date, issue the following query:</p>
<pre dir="ltr">
SELECT CREATED, EXPIRY_DATE FROM DBA_USERS WHERE USERNAME = '<span class="italic">user_name</span>';
</pre>
<p>If the user who is assigned this profile is currently logged in when you set the <code dir="ltr">PASSWORD_LIFE_TIME</code> parameter and remains logged in, then Oracle Database does not change the user's account status from <code dir="ltr">OPEN</code> to <code dir="ltr">EXPIRED(GRACE)</code> when the currently listed expiration date passes. The timing begins only when the user logs into the database.</p>
<p>When making changes to a password profile, a database administrator must be aware that if some of the users who are subject to this profile are currently logged in to the Oracle database while their password profile is being updated by the administrator, then those users could potentially remain logged in to the system even beyond the expiration date of their password. You can find the currently logged in users by querying the <code dir="ltr">USERNAME</code> column of the <code dir="ltr">V$SESSION</code> view.</p>
<p>This is because the expiration date of a user's password is based on the timestamp of the last password change on their account plus the value of the <code dir="ltr">PASSWORD_LIFE_TIME</code> password profile parameter set by the administrator. It is <span class="italic">not</span> based on the timestamp of the last change to the password profile itself.</p>
<p>Note the following:</p>
<ul>
<li>
<p>If the user is not logged in when you set <code dir="ltr">PASSWORD_LIFE_TIME</code> to a low value, then the user's account status does not change until the user logs in.</p>
</li>
<li>
<p>You can set the <code dir="ltr">PASSWORD_LIFE_TIME</code> parameter to <code dir="ltr">UNLIMITED</code>, but this only affects accounts that have not entered their grace period. After the grace period expires, the user must change the password.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1007341"></a>
<div id="DBSEG33224" class="sect3">
<h4 class="sect3">Enforcing Password <a id="sthref250"></a><a id="sthref251"></a><a id="sthref252"></a>Complexity Verification</h4>
<p>Complexity <a id="sthref253"></a>verification checks that each password is complex enough to provide reasonable protection against intruders who try to break into the system by guessing passwords. This forces users to create strong, secure passwords for database user accounts. You need to ensure that the passwords for your users are complex enough to provide reasonable protection against intruders who try to break into the system by guessing passwords.</p>
<p class="subhead2"><a id="CHDFJEEC"></a><a id="DBSEG33221"></a>How Oracle Database Checks the Complexity of Passwords</p>
<p>Oracle Database provides a sample password verification function entitled <code dir="ltr">verify_function_11G</code> in the PL/SQL script <code dir="ltr">utlpwdmg.sql</code> (located in <code dir="ltr">$ORACLE_HOME/rdbms/admin</code>) that, when enabled, checks whether users are correctly creating or modifying their passwords. The <code dir="ltr">utlpwdmg.sql</code> script provides two password verification functions: one for previous releases of Oracle Database and an updated version for Oracle Database Release 11<span class="italic">g</span>.</p>
<p>For better security of passwords, Oracle recommends that you associate the <code dir="ltr">verify_function_11G</code> function with the default profile. <a href="#CACDDFHI">"Customizing Password Complexity Verification"</a> provides an example of how to accomplish this.</p>
<p>The <code dir="ltr">utlpwdmg.sql</code> script checks for the following requirements when users create or modify passwords:</p>
<ul>
<li>
<p>The password contains no fewer than 8 characters and does not exceed 30 characters.</p>
</li>
<li>
<p>The password is not the same as the user name, nor is it the user name spelled backward or with the numbers 1&ndash;100 appended.</p>
</li>
<li>
<p>The password is not the same as the server name or the server name with the numbers 1&ndash;100 appended.</p>
</li>
<li>
<p>The password is not too simple, for example, <code dir="ltr">welcome1</code>, <code dir="ltr">database1</code>, <code dir="ltr">account1</code>, <code dir="ltr">user1234</code>, <code dir="ltr">password1</code>, <code dir="ltr">oracle</code>, <code dir="ltr">oracle123</code>, <code dir="ltr">computer1</code>, <code dir="ltr">abcdefg1</code>, or <code dir="ltr">change_on_install</code>.</p>
</li>
<li>
<p>The password is not <code dir="ltr">oracle</code> or <code dir="ltr">oracle</code> with the numbers 1&ndash;100 appended.</p>
</li>
<li>
<p>The password includes at least 1 numeric and 1 alphabetic character.</p>
</li>
<li>
<p>The password differs from the previous password by at least 3 letters.</p>
</li>
</ul>
<p class="subhead2"><a id="sthref254"></a>Who Can Use the Password Complexity Functions?</p>
<p>Before you can use the password complexity verification functions in the <code dir="ltr">CREATE PROFILE</code> or <code dir="ltr">ALTER PROFILE</code> statement, you must be granted the <code dir="ltr">EXECUTE</code> privilege on them. The password verification functions are located in the <code dir="ltr">SYS</code> schema.</p>
<p class="subhead2"><a id="CACDDFHI"></a><a id="DBSEG99811"></a>Customizing Password Complexity Verification</p>
<p>You can create your own password complexity verification function by backing up and customizing the <code dir="ltr">verify_function_11G</code> function in the <code dir="ltr">utlpwdmg.sql</code> script. In fact, Oracle recommends that you do so to further secure your site's passwords. See also Guideline <a href="guidelines.htm#CHDDCHAH">1</a> in <a href="guidelines.htm#CHDEGEIF">"Guidelines for Securing Passwords"</a> for general advice on creating passwords. However, be aware that the password complexity checking is not enforced for user <code dir="ltr">SYS</code>.</p>
<p>By default, password complexity verification is not enabled. To enable the password complexity verification:</p>
<ol>
<li>
<p>Log in to SQL*Plus with administrative privileges.</p>
<p>For example:</p>
<pre dir="ltr">
CONNECT SYS AS SYSDBA
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Run the <code dir="ltr">utlpwdmg.sql</code> script (or your modified version of this script) to create the password complexity functions in the SYS schema.</p>
<pre dir="ltr">
@$ORACLE_HOME/RDBMS/ADMIN/utlpwdmg.sql
</pre></li>
<li>
<p>Grant any users who must use this function the <code dir="ltr">EXECUTE</code> privilege on it.</p>
<p>For example:</p>
<pre dir="ltr">
GRANT pmsith EXECUTE ON verify_function_11G;
</pre></li>
<li>
<p>In the default profile or the user profile, set the <code dir="ltr">PASSWORD_VERIFY_FUNCTION</code> setting to either the sample password complexity function in the <code dir="ltr">utlpwdmg.sql</code> script, or to your customized function. Use one of the following methods:</p>
<ul>
<li>
<p>Log in to SQL*Plus with administrator privileges and use the <code dir="ltr">CREATE PROFILE</code> or <code dir="ltr">ALTER PROFILE</code> statement to enable the function. For example, to update the default profile to use the <code dir="ltr">verify_function_11G</code> function:</p>
<pre dir="ltr">
ALTER PROFILE default LIMIT
 PASSWORD_VERIFY_FUNCTION verify_function_11G;
</pre></li>
<li>
<p>In Oracle Enterprise Manager, go to the Edit Profiles page and then under Complexity, select the name of the password complexity function from the Complexity function list.</p>
</li>
</ul>
</li>
</ol>
<p>After you have enabled password complexity verification, it takes effect immediately.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<a id="i1012905"></a>The <code dir="ltr">ALTER USER</code> statement has a <code dir="ltr">REPLACE</code> clause. With this clause, users can change their own unexpired passwords by supplying the previous password to authenticate themselves.
<p><a id="i1012906"></a>If the password has expired, then the user cannot log in to SQL to issue the <code dir="ltr">ALTER USER</code> command. Instead, the <code dir="ltr">OCIPasswordChange()</code> function must be used, which also requires the previous password.</p>
<p><a id="i1012907"></a>A database administrator with <code dir="ltr">ALTER ANY USER</code> privilege can change any user password (force a new password) without supplying the old one.</p>
</div>
</div>
<!-- class="sect3" -->
<a id="CHDJDCGI"></a>
<div id="DBSEG3225" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Enabling or Disabling Password Case Sensitivity</h4>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CACGABCF">About Enabling or Disabling Password Case Sensitivity</a></p>
</li>
<li>
<p><a href="#CACFBFDH">Procedure for Enabling Password Case Sensitivity</a></p>
</li>
<li>
<p><a href="#CACDADAA">Finding the Password Versions of User Accounts</a></p>
</li>
<li>
<p><a href="#CHDBDIEB">How Case Sensitivity Affects Password Files</a></p>
</li>
<li>
<p><a href="#CACCFCFH">How Case Sensitivity Affects Accounts Created for Database Link Connections</a></p>
</li>
</ul>
<p class="subhead2"><a id="CACGABCF"></a><a id="DBSEG572"></a>About Enabling or Disabling Password Case Sensitivity</p>
<p>When <a id="sthref255"></a>you create or modify user accounts, by default, passwords are case sensitive. To control the use of case sensitivity in passwords, set the <code dir="ltr"><a id="sthref256"></a><a id="sthref257"></a><a id="sthref258"></a>SEC_CASE_SENSITIVE_LOGON</code> initialization parameter. Only users who have the <code dir="ltr">ALTER SYSTEM</code> privilege can set the <code dir="ltr">SEC_CASE_SENSITIVE_LOGON</code> parameter. Set it to <code dir="ltr">TRUE</code> to enable case sensitivity or <code dir="ltr">FALSE</code> to disable case sensitivity.</p>
<p>For greater security, Oracle recommends that you enable case sensitivity in passwords. However, if you have compatibility issues with your applications, you can use this parameter to disable password case sensitivity. Examples of application compatibility issues are passwords for your applications being hard-coded to be case insensitive, or different application modules being inconsistent about case sensitivity when sending credentials to start a database session.</p>
<p>Do <a id="sthref259"></a>not set the <code dir="ltr">SEC_CASE_SENSITIVE_LOGON</code> parameter to <code dir="ltr">FALSE</code> when exclusive mode is enabled (the<a id="sthref260"></a> <code dir="ltr">SQLNET.ALLOWED_LOGON_VERSION</code> parameter is set to <code dir="ltr">11)</code>, because the more secure verifiers used in exclusive mode only support case-sensitive password checking. For compatibility reasons, Oracle Database does not prevent the use of the <code dir="ltr">FALSE</code> setting for <code dir="ltr">SEC_CASE_SENSITIVE_LOGON</code> when the <code dir="ltr">SQLNET.ALLOWED_LOGON_VERSION</code> parameter is set to <code dir="ltr">11</code>. This can result in accounts becoming inaccessible if these settings are in effect when users change their passwords or you create new user accounts.</p>
<p class="subhead2"><a id="CACFBFDH"></a><a id="DBSEG573"></a>Procedure for Enabling Password Case Sensitivity</p>
<p>To enable case sensitivity in passwords:</p>
<ol>
<li>
<p>If you are using a password file, ensure that it was created with the <code dir="ltr">IGNORECASE</code> parameter set to <code dir="ltr">N</code>. <a id="sthref261"></a></p>
<p>The <code dir="ltr">IGNORECASE</code> parameter overrides the <code dir="ltr">SEC_CASE_SENSITIVE_LOGON</code> parameter. By default, <code dir="ltr">IGNORECASE</code> is set to <code dir="ltr">Y</code>, which means that passwords are treated as case-insensitive. For more information about password files, see <a class="olink ADMIN11059" href="../../server.112/e25494/dba.htm#ADMIN11059"><span class="italic">Oracle Database Administrator's Guide</span></a>.</p>
</li>
<li>
<p>Enter the following <code dir="ltr">ALTER SYSTEM</code> statement:</p>
<pre dir="ltr">
ALTER SYSTEM SET SEC_CASE_SENSITIVE_LOGON = TRUE
</pre></li>
</ol>
<p class="subhead2"><a id="CACDADAA"></a><a id="DBSEG574"></a>Finding the Password Versions of User Accounts</p>
<p>In <a id="sthref262"></a>previous releases of Oracle Database, passwords were not case sensitive. If you import user accounts from a previous release, for example, Release 10<span class="italic">g</span>, into the current database release, the case-insensitive passwords in these accounts remain case insensitive until the user changes his or her password. If the account was granted <code dir="ltr">SYSDBA</code> or <code dir="ltr">SYSOPER</code> privilege, it is imported to the password file. (See <a href="#CHDBDIEB">"How Case Sensitivity Affects Password Files"</a> for more information.) When a password from a user account from the previous release is changed, it then becomes case sensitive.</p>
<p>You can find users who have case sensitive or case insensitive passwords by querying the <code dir="ltr">DBA_USERS</code> view. The <code dir="ltr">PASSWORD_VERSIONS</code> column in this view indicates the release in which the password was created. For example:</p>
<pre dir="ltr">
SELECT USERNAME,PASSWORD_VERSIONS FROM DBA_USERS;

USERNAME                       PASSWORD_VERSIONS
------------------------------ -----------------
JONES                          10G 11G
ADAMS                          10G 11G
CLARK                          10G 11G
PRESTON                        11G
BLAKE                          10G
</pre>
<p>The passwords for accounts <code dir="ltr">jones</code>, <code dir="ltr">adams</code>, and <code dir="ltr">clark</code> were originally created in Release 10<span class="italic">g</span> and then reset in Release 11<span class="italic">g</span>. Their passwords, assuming case sensitivity has been enabled, are now case sensitive, as is the password for <code dir="ltr">preston</code>. However, the account for <code dir="ltr">blake</code> is still using the Release 10<span class="italic">g</span> standard, so it is case insensitive. Ask him to reset his password so that it will be case sensitive, and therefore more secure.</p>
<p>See <a class="olink REFRN23302" href="../../server.112/e40402/statviews_5081.htm#REFRN23302"><span class="italic">Oracle Database Reference</span></a> for more information about the <code dir="ltr">DBA_USERS</code> view.</p>
<p class="subhead2"><a id="CHDBDIEB"></a><a id="DBSEG99812"></a>How Case Sensitivity Affects Password Files</p>
<p>You can enable or disable case sensitivity for password files by using the <code dir="ltr">ignorecase</code> argument in the <code dir="ltr"><a id="sthref263"></a><a id="sthref264"></a>ORAPWD</code> command line utility. The default value for <code dir="ltr">ignorecase</code> is <code dir="ltr">n</code> (no), which enforces case sensitivity.</p>
<p><a href="#CHDGHHAD">Example 3-4</a> shows how to enable case sensitivity in password files.</p>
<div id="DBSEG99813" class="example">
<p class="titleinexample"><a id="CHDGHHAD"></a>Example 3-4 Enabling Password Case Sensitivity</p>
<pre dir="ltr">
orapwd file=orapw entries=100 ignorecase=n
Enter password for SYS: <span class="italic">password</span>
</pre></div>
<!-- class="example" -->
<p>This creates a password file called <code dir="ltr">orapwd</code>. Because <code dir="ltr">ignorecase</code> is set to n (no), the password entered for the <code dir="ltr">password</code> parameter will be case sensitive. Afterwards, if you connect using this password, it succeeds&mdash;as long as you enter it using the <span class="italic">exact</span> case sensitivity in which it was created. If you enter the same password but with <span class="italic">different</span> case sensitivity, it will fail.</p>
<p>If you set <code dir="ltr">ignorecase</code> to <code dir="ltr">y</code>, then the passwords in the password file are case insensitive, which means that you can enter the password using any capitalization that you want.</p>
<p>If you imported user accounts from a previous release and these accounts were created with <code dir="ltr">SYSDBA</code> or <code dir="ltr">SYSOPER</code> privileges, then they will be included in the password file. The passwords for these accounts are case insensitive. The next time these users change their passwords, and assuming case sensitivity is enabled, the passwords become case sensitive. For greater security, have these users change their passwords.</p>
<p>See <a class="olink ADMIN10241" href="../../server.112/e25494/dba.htm#ADMIN10241"><span class="italic">Oracle Database Administrator's Guide</span></a> for more information about password files.</p>
<p class="subhead2"><a id="CACCFCFH"></a><a id="DBSEG99814"></a>How Case Sensitivity Affects Accounts Created for Database Link Connections</p>
<p>When you create a database link connection, you must define a user name and password for the connection. When you create the database link connection, the password is case sensitive. How this user enters his or her password for connections depends on the release in which the database link was created:</p>
<ul>
<li>
<p>Users can connect from a pre-Release 11<span class="italic">g</span> database to a Release 11<span class="italic">g</span> database. If case sensitivity is disabled in the Release 11<span class="italic">g</span> database, then the user can enter the password using any case. If case sensitivity is enabled, however, then the user must enter the password using the case in which the password was created in the Release 11<span class="italic">g</span> database.</p>
</li>
<li>
<p>If the user connecting from a Release 11<span class="italic">g</span> database to a pre-Release 11<span class="italic">g</span> database, he or she can enter his or her password using any case, because the password is still case insensitive.</p>
</li>
</ul>
<p>You can find the user accounts for existing database links by running the <code dir="ltr">V$DBLINK</code> view. For example:</p>
<pre dir="ltr">
SELECT DB_LINK, OWNER_ID FROM V$DBLINK;
</pre>
<p>See <a class="olink REFRN30061" href="../../server.112/e40402/dynviews_1111.htm#REFRN30061"><span class="italic">Oracle Database Reference</span></a> for more information about the <code dir="ltr">V$DBLINK</code> view.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDEFIHB"></a>
<div id="DBSEG30324" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Ensuring Against Password Security Threats by Using the SHA-1 Hashing Algorithm</h3>
<p>The<a id="sthref265"></a> SHA-1 <a id="sthref266"></a><a id="sthref267"></a>cryptographic hashing algorithm protects against password-based security threats by including support for mixed case characters, special characters, and multibyte characters in passwords. In addition, the SHA-1 hashing algorithm adds a <a href="glossary.htm#BGBJABIG"><span class="xrefglossterm">salt</span></a> to the password when it is hashed, which provides additional protection. This enables your users to create far more complex passwords, and therefore, makes it more difficult for an intruder to gain access to these passwords. <a id="sthref268"></a>Oracle recommends that you use the SHA-1 hashing algorithm.</p>
<p>The password versions (also known as password hash values) are considered to be extremely sensitive, because they are used as a "shared secret" between the server and person who is logging in. If an intruder learns this secret, then the protection of the authentication is immediately and severely compromised. Remember that administrative users who have account management privileges, administrative users who have the <code dir="ltr">SYSDBA</code> system privilege, or even users who have the <code dir="ltr">EXP_FULL_DATABASE</code> role can immediately access the password hash values. Therefore, this type of administrative user must be trustworthy if the integrity of the database password-based authentication is to be preserved. If you cannot trust these administrators, then it is better to deploy a directory server (such as <a id="sthref269"></a>Oracle Database Enterprise User Security) so that the password versions remain within the Enterprise User Security directory and are never accessible to anyone except the Enterprise User Security administrator.</p>
<p>You optionally can configure Oracle Database to run in <a id="sthref270"></a>exclusive mode for Release 11 or later. When you enable exclusive mode, then Oracle Database uses the SHA-1 hashing algorithm exclusively. Oracle Database 11<span class="italic">g</span> exclusive mode is compatible with Oracle Database 10<span class="italic">g</span> and later products that use OCI-based drivers, including SQL*Plus, ODBC, Oracle .NET, Oracle Forms, and various third-party Oracle Database adapters. However, be aware that exclusive mode for Release 11<span class="italic">g</span> is not compatible with JDBC type-4 (thin) versions earlier than Oracle Database 11<span class="italic">g</span> or Oracle Database Client interface (OCI)-based drivers earlier than Oracle Database 10<span class="italic">g</span>. After you configure exclusive mode, Oracle recommends that you remove the previous password hash values from the data dictionary.</p>
<p>Follow these steps: <a id="sthref271"></a><a id="sthref272"></a></p>
<ol>
<li>
<p>Enable exclusive mode.</p>
<ol>
<li>
<p>Create a back up copy of the <code dir="ltr">sqlnet.ora</code> parameter file, by default located in the <code dir="ltr">$ORACLE_HOME/network/admin</code> directory on UNIX operating systems and the <code dir="ltr">%ORACLE_HOME%\network\admin</code> directory on Microsoft Windows operating systems.</p>
</li>
<li>
<p>Ensure that the <code dir="ltr">sqlnet.ora</code> file has the following line:</p>
<pre dir="ltr">
SQLNET.ALLOWED_LOGON_VERSION=12
</pre>
<p>If you have applied the October 2012 CPU or if you are using Oracle Database Release 11.2.0.3, then ensure that you set <code dir="ltr">SQLNET.ALLOWED_LOGON_VERSION</code> to 12, not <code dir="ltr">11</code>.</p>
</li>
<li>
<p>Save and exit the <code dir="ltr">sqlnet.ora</code> file.</p>
</li>
</ol>
</li>
<li>
<p>Verify that the passwords in test scripts or batch jobs are consistent in their use of mixed case and special characters.</p>
</li>
<li>
<p>Change all passwords to include mixed case and special characters.</p>
<p>Oracle recommends that you use random passwords with a length of at least twelve characters. See Guideline <a href="guidelines.htm#CHDDCHAH">1</a> under <a href="guidelines.htm#CHDEGEIF">"Guidelines for Securing Passwords"</a> for additional guidelines for creating passwords, and techniques for creating complex but easy to remember passwords.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="guidelines.htm#CHDBIFGA">"Downloading Security Patches and Contacting Oracle Regarding Vulnerabilities"</a></div>
</div>
<!-- class="sect2" -->
<a id="CHDHGAIJ"></a>
<div id="DBSEG99815" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Managing the Secure External Password Store for Password Credentials</h3>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CHDFIEEA">About the Secure External Password Store</a></p>
</li>
<li>
<p><a href="#CBHEHGCE">How Does the External Password Store Work?</a></p>
</li>
<li>
<p><a href="#CBHGEBEI">Configuring Clients to Use the External Password Store</a></p>
</li>
<li>
<p><a href="#CBHCAAAE">Managing External Password Store Credentials</a></p>
</li>
</ul>
<a id="CHDFIEEA"></a>
<div id="DBSEG99816" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About the Secure External Password Store</h4>
<p>You <a id="sthref273"></a><a id="sthref274"></a>can store password credentials for connecting to databases by using a client-side Oracle wallet. An Oracle wallet is a secure software container that stores authentication and signing credentials.</p>
<p>This wallet usage can simplify large-scale deployments that rely on password credentials for connecting to databases. When this feature is configured, application code, <a id="sthref275"></a>batch jobs, and <a id="sthref276"></a>scripts no longer need embedded user names and passwords. This reduces <a id="sthref277"></a>risk because the passwords are no longer exposed, and password management policies are more easily enforced without changing application code whenever user names or passwords change.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CHDCEFBA">"Using Proxy Authentication with the Secure External Password Store"</a></p>
</li>
<li>
<p><a class="olink ASOAG160" href="../../network.112/e40393/asowalet.htm#ASOAG160"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for general information about Oracle wallets</p>
</li>
</ul>
</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
The external password store of the wallet is separate from the area where public key infrastructure (PKI) credentials are stored. Consequently, you cannot use Oracle Wallet Manager to manage credentials in the external password store of the wallet. Instead, use the command-line utility <code dir="ltr">mkstore</code> to manage these credentials.</div>
</div>
<!-- class="sect3" -->
<a id="CBHEHGCE"></a>
<div id="DBSEG99817" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">How Does the External Password Store Work?</h4>
<p>Typically, <a id="sthref278"></a>users (and as applications, batch jobs, and scripts) connect to databases by using a standard <code dir="ltr">CONNECT</code> statement that specifies a database connection string. This string can include a user name and password, and an Oracle Net service name identifying the database on an Oracle Database network. If the password is omitted, the connection prompts the user for the password.</p>
<p>For example, the service name could be the URL that identifies that database, or a TNS alias you entered in the <code dir="ltr">tnsnames.ora</code> file in the database. Another possibility is a <code dir="ltr"><span class="codeinlineitalic">host:port:sid</span></code> string.</p>
<p>The <a id="sthref279"></a><a id="sthref280"></a>following examples are standard <code dir="ltr">CONNECT</code> statements that could be used for a client that is not configured to use the external password store:</p>
<pre dir="ltr">
CONNECT salesapp@sales_db.us.example.com
Enter password: <span class="italic">password</span>

CONNECT salesapp@orasales
Enter password: <span class="italic">password</span>

CONNECT salesapp@ourhost37:1527:DB17
Enter password: <span class="italic">password</span>
</pre>
<p>In these examples, <code dir="ltr">salesapp</code> is the user name, with the unique connection string for the database shown as specified in three different ways. You could use its URL <code dir="ltr">sales_db.us.example.com</code>, or its TNS alias <code dir="ltr">orasales</code> from the <code dir="ltr">tnsnames.ora</code> file, or its <code dir="ltr"><span class="codeinlineitalic">host:port:sid</span></code> string.</p>
<p>However, when clients are configured to use the secure external password store, applications can connect to a database with the following <code dir="ltr">CONNECT</code> statement syntax, without specifying database login credentials:</p>
<pre dir="ltr">
CONNECT /@<span class="italic">db_connect_string</span>

CONNECT /<span class="italic">@db_connect_string</span> AS SYSDBA

CONNECT /<span class="italic">@db_connect_string</span> AS SYSOPER
</pre>
<p>In this specification, <code dir="ltr"><span class="codeinlineitalic">db_connect_string</span></code> is a valid connection string to access the intended database, such as the service name, URL, or alias as shown in the earlier examples. Each user account must have its own unique connection string; you cannot create one connection string for multiple users.</p>
<p>In this case, the database credentials, user name and password, are securely stored in an Oracle wallet created for this purpose. The autologin feature of this wallet is turned on, so the system does not need a password to open the wallet. From the wallet, it gets the credentials to access the database for the user they represent.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ASOAG161" href="../../network.112/e40393/asowalet.htm#ASOAG161"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for information about autologin wallets</div>
</div>
<!-- class="sect3" -->
<a id="CBHGEBEI"></a>
<div id="DBSEG30253" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Configuring Clients to Use the External Password Store</h4>
<p>If your <a id="sthref281"></a><a id="sthref282"></a>client is already configured to use external authentication, such as Windows native authentication or Secure Sockets Layer (SSL), then Oracle Database uses that authentication method. The same credentials used for this type of authentication are typically also used to log in to the database.</p>
<p>For clients not using such authentication methods or wanting to override them for database authentication, you can set the <code dir="ltr">SQLNET.WALLET_OVERRIDE</code> parameter in <code dir="ltr">sqlnet.ora</code> to <code dir="ltr">TRUE</code>. The default value for <code dir="ltr">SQLNET.WALLET_OVERRIDE</code> is <code dir="ltr">FALSE</code>, allowing standard use of authentication credentials as before.</p>
<p>If you want a client to use the secure external password store feature, then perform the following configuration task:</p>
<ol>
<li id="CHDCAGGI">
<p>Create a wallet on the client by using the following syntax at the command line:</p>
<pre dir="ltr">
mkstore -wrl <span class="italic">wallet_location</span> -create
</pre>
<p>For example:</p>
<pre dir="ltr">
mkstore -wrl c:\oracle\product\11.2.0\db_1\wallets -create
Enter password: <span class="italic">password</span>
</pre>
<p><code dir="ltr"><span class="codeinlineitalic">wallet_location</span></code> is the path to the directory where you want to create and store the wallet. This command creates an Oracle wallet with the autologin feature enabled at the location you specify. The autologin feature enables the client to access the wallet contents without supplying a password. See <a class="olink ASOAG161" href="../../network.112/e40393/asowalet.htm#ASOAG161"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for information about autologin wallets.</p>
<p>The <code dir="ltr">mkstore</code> utility <code dir="ltr">-create</code> option uses password complexity verification. See <a href="#i1007341">"Enforcing Password Complexity Verification"</a> for more information.</p>
</li>
<li>
<p>Create database connection credentials in the wallet by using the following syntax at the command line:</p>
<pre dir="ltr">
mkstore -wrl <span class="italic">wallet_location</span> -createCredential <span class="italic">db_connect_string</span> <span class="italic">username</span>
Enter password: <span class="italic">password</span>
</pre>
<p>For example:</p>
<pre dir="ltr">
mkstore -wrl c:\oracle\product\11.2.0\db_1\wallets -createCredential orcl system
Enter password: <span class="italic">password</span>
</pre>
<p>In this specification:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">wallet_location</span></code> is the path to the directory where you created the wallet in Step <a href="#CHDCAGGI">1</a>.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">db_connect_string</span></code> is the TNS alias you use to specify the database in the <code dir="ltr">tnsnames.ora</code> file or any service name you use to identify the database on an Oracle network. By default, <code dir="ltr">tnsnames.ora</code> is located in the <code dir="ltr">$ORACLE_HOME/network/admin</code> directory on UNIX systems and in <code dir="ltr"><span class="codeinlineitalic">ORACLE_HOME</span></code><code dir="ltr">\network\admin</code> on Windows.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">username</span></code> is the database login credential. When prompted, enter the password for this user.</p>
</li>
</ul>
<p>Repeat this step for each database you want accessible using the <code dir="ltr">CONNECT /@</code><code dir="ltr"><span class="codeinlineitalic">db_connect_string</span></code> syntax.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr"><span class="codeinlineitalic">db_connect_string</span></code> used in the <code dir="ltr">CONNECT /@</code><code dir="ltr"><span class="codeinlineitalic">db_connect_string</span></code> statement must be identical to the <code dir="ltr"><span class="codeinlineitalic">db_connect_string</span></code> specified in the <code dir="ltr">-createCredential</code> command.</div>
</li>
<li>
<p>In the client <code dir="ltr">sqlnet.ora</code> file, enter the <code dir="ltr">WALLET_LOCATION</code> parameter and set it to the directory location of the wallet you created in Step <a href="#CHDCAGGI">1</a>.</p>
<p>For example, if you created the wallet in <code dir="ltr">$ORACLE_HOME/network/admin</code> and your Oracle home is set to <code dir="ltr">/private/ora11</code>, then you need to enter the following into your client <code dir="ltr">sqlnet.ora</code> file:</p>
<pre dir="ltr">
WALLET_LOCATION =
  (SOURCE =
    (METHOD = FILE)
    (METHOD_DATA =
  (DIRECTORY = <span class="italic">/private/ora11/network/admin</span>)
  )
 )
</pre></li>
<li>
<p>In the client <code dir="ltr">sqlnet.ora</code> file, enter the <code dir="ltr">SQLNET.WALLET_OVERRIDE</code> parameter and set it to <code dir="ltr">TRUE</code> as follows:</p>
<pre dir="ltr">
SQLNET.WALLET_OVERRIDE = TRUE
</pre>
<p>This setting causes all <code dir="ltr">CONNECT /@</code><code dir="ltr"><span class="codeinlineitalic">db_connect_string</span></code> statements to use the information in the wallet at the specified location to authenticate to databases.</p>
<p>When external authentication is in use, an authenticated user with such a wallet can use the <code dir="ltr">CONNECT /@</code><code dir="ltr"><span class="codeinlineitalic">db_connect_string</span></code> syntax to access the previously specified databases without providing a user name and password. However, if a user fails that external authentication, then these connect statements also fail.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If an application uses SSL for encryption, then the <code dir="ltr">sqlnet.ora</code> parameter, <code dir="ltr">SQLNET.AUTHENTICATION_SERVICES</code>, specifies SSL and an SSL wallet is created. If this application wants to use secret store credentials to authenticate to databases (instead of the SSL certificate), then those credentials must be stored in the SSL wallet. After SSL authentication, if <code dir="ltr">SQLNET.WALLET_OVERRIDE = TRUE</code>, then the user names and passwords from the wallet are used to authenticate to databases. If <code dir="ltr">SQLNET.WALLET_OVERRIDE = FALSE</code>, then the SSL certificate is used.</div>
</li>
</ol>
<p><a href="#CBHJIIAB">Example 3-5</a> shows a sample <code dir="ltr">sqlnet.ora</code> file with the <code dir="ltr">WALLET_LOCATION</code> and the <code dir="ltr">SQLNET.WALLET_OVERRIDE</code> parameters set as described in Steps 3 and 4.</p>
<div id="DBSEG99818" class="example">
<p class="titleinexample"><a id="CBHJIIAB"></a>Example 3-5 Sample SQLNET.ORA File with Wallet Parameters Set</p>
<pre dir="ltr">
WALLET_LOCATION =
   (SOURCE =
     (METHOD = FILE)
     (METHOD_DATA =
       (DIRECTORY = <span class="italic">/private/ora11/network/admin</span>)
     )
    )

SQLNET.WALLET_OVERRIDE = TRUE
SSL_CLIENT_AUTHENTICATION = FALSE
SSL_VERSION = 0
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CBHCAAAE"></a>
<div id="DBSEG99819" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Managing External Password Store Credentials</h4>
<p>This section summarizes the following tasks you can perform to manage credentials in the external password store by using the <code dir="ltr">mkstore</code> command-line utility:</p>
<ul>
<li>
<p><a href="#CBHJGFFF">Listing External Password Store Contents</a></p>
</li>
<li>
<p><a href="#CBHBGICA">Adding Credentials to an External Password Store</a></p>
</li>
<li>
<p><a href="#CBHEFAIJ">Modifying Credentials in an External Password Store</a></p>
</li>
<li>
<p><a href="#CBHDAJHF">Deleting Credentials from an External Password Store</a></p>
</li>
</ul>
<a id="CBHJGFFF"></a>
<div id="DBSEG99820" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Listing External Password Store Contents</h5>
<p>Periodically, you may want to view all contents of a client wallet external password store, or you may need to check specific credentials by viewing them. Listing the external password store contents provides information you can use to decide whether to add or delete credentials from the store.</p>
<p>To list the contents of the external password store, enter the following command at the command line:</p>
<pre dir="ltr">
mkstore -wrl <span class="italic">wallet_location</span> -listCredential
</pre>
<p>For example:</p>
<pre dir="ltr">
mkstore -wrl c:\oracle\product\11.2.0\db_1\wallets -listCredential
</pre>
<p><code dir="ltr"><span class="codeinlineitalic">wallet_location</span></code> specifies the path to the directory where the wallet, whose external password store contents you want to view, is located. This command lists all of the credential database service names (aliases) and the corresponding user name (schema) for that database. Passwords are not listed.</p>
</div>
<!-- class="sect4" -->
<a id="CBHBGICA"></a>
<div id="DBSEG99821" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Adding Credentials to an External Password Store</h5>
<p>You can store multiple credentials in one client wallet. For example, if a client batch job connects to <code dir="ltr">hr_database</code> and a script connects to <code dir="ltr">sales_database</code>, then you can store the login credentials in the same client wallet. You cannot, however, store multiple credentials (for logging in to multiple schemas) for the same database in the same wallet. If you have multiple login credentials for the same database, then they must be stored in separate wallets.</p>
<p>To add database login credentials to an existing client wallet, enter the following command at the command line:</p>
<pre dir="ltr">
mkstore -wrl <span class="italic">wallet_location</span> -createCredential <span class="italic">db_alias</span> <span class="italic">username</span>
</pre>
<p>For example:</p>
<pre dir="ltr">
mkstore -wrl c:\oracle\product\11.2.0\db_1\wallets -createCredential orcl system
Enter password: <span class="italic">password</span>
</pre>
<p>In this specification:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">wallet_location</span></code> is the path to the directory where the client wallet to which you want to add credentials is stored.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">db_alias</span></code> can be the TNS alias you use to specify the database in the <code dir="ltr">tnsnames.ora</code> file or any service name you use to identify the database on an Oracle network.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">username</span></code> is the database login credential for the schema to which your application connects. When prompted, enter the password for this user.</p>
</li>
</ul>
</div>
<!-- class="sect4" -->
<a id="CBHEFAIJ"></a>
<div id="DBSEG99822" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Modifying Credentials in an External Password Store</h5>
<p>If the database connection strings change, then you can modify the database login credentials that are stored in the wallet.</p>
<p>To modify database login credentials in a wallet, enter the following command at the command line:</p>
<pre dir="ltr">
mkstore -wrl <span class="italic">wallet_location</span> -modifyCredential <span class="italic">dbase_alias</span> <span class="italic">username</span>
</pre>
<p>For example:</p>
<pre dir="ltr">
mkstore -wrl c:\oracle\product\11.2.0\db_1\wallets -modifyCredential sales_db
Enter password: <span class="italic">password</span>
</pre>
<p>In this specification:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">wallet_location</span></code> is the path to the directory where the wallet is located.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">db_alias</span></code> is a new or different alias you want to use to identify the database. It can be a TNS alias you use to specify the database in the <code dir="ltr">tnsnames.ora</code> file or any service name you use to identify the database on an Oracle network.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">username</span></code> is the new or different database login credential. When prompted, enter the password for this user.</p>
</li>
</ul>
</div>
<!-- class="sect4" -->
<a id="CBHDAJHF"></a>
<div id="DBSEG99823" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Deleting Credentials from an External Password Store</h5>
<p>If a database no longer exists or if you want to disable connections to a specific database, then you can delete all login credentials for that database from the wallet.</p>
<p>To delete database login credentials from a wallet, enter the following command at the command line:</p>
<pre dir="ltr">
mkstore -wrl <span class="italic">wallet_location</span> -deleteCredential <span class="italic">db_alias</span>
</pre>
<p>For example:</p>
<pre dir="ltr">
mkstore -wrl c:\oracle\product\11.2.0\db_1\wallets -deleteCredential orcl
</pre>
<p>In this specification:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">wallet_location</span></code> is the path to the directory where the wallet is located.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">db_alias</span></code> is the TNS alias you use to specify the database in the <code dir="ltr">tnsnames.ora</code> file, or any service name you use to identify the database on an Oracle Database network.</p>
</li>
</ul>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006595"></a>
<div id="DBSEG30033" class="sect1"><a id="BABDEIII"></a>
<h2 class="sect1">Authenticating Database Administrators</h2>
<p><a id="sthref283"></a><a id="sthref284"></a>Database administrators perform special operations, such as shutting down or starting up a database, that should not be performed by non-administrative database users. Oracle Database provides the following methods to secure the authentication of database administrators who have either <code dir="ltr">SYSDBA</code> or <code dir="ltr">SYSOPER</code> privileges:</p>
<ul>
<li>
<p><a href="#CHDCADIA">Strong Authentication and Centralized Management for Database Administrators</a></p>
</li>
<li>
<p><a href="#CHDDFDFG">Authenticating Database Administrators by Using the Operating System</a></p>
</li>
<li>
<p><a href="#CHDIBDJA">Authenticating Database Administrators by Using Their Passwords</a></p>
</li>
</ul>
<a id="CHDCADIA"></a>
<div id="DBSEG33331" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Strong Authentication and Centralized Management for Database Administrators</h3>
<p>Strong authentication lets you <a id="sthref285"></a><a id="sthref286"></a>centrally <a id="sthref287"></a><a id="sthref288"></a>control <code dir="ltr">SYSDBA</code> and <code dir="ltr">SYSOPER</code> access to multiple databases. Consider using this type of authentication for database administration for the following situations:</p>
<ul>
<li>
<p>You have concerns about password file vulnerability.</p>
</li>
<li>
<p>Your site has very strict security requirements.</p>
</li>
<li>
<p>You want to separate the identity management from your database. By using a directory server such as <a id="sthref289"></a>Oracle Internet Directory (OID), for example, you can maintain, secure, and administer that server separately.</p>
</li>
</ul>
<p>To enable the Oracle Internet Directory server to authorize <code dir="ltr">SYSDBA</code> and <code dir="ltr">SYSOPER</code> connections, use one of the following methods, depending on your environment:</p>
<ul>
<li>
<p><a href="#CHDEGDEA">Configuring Directory Authentication for Administrative Users</a></p>
</li>
<li>
<p><a href="#CHDGIJJG">Configuring Kerberos Authentication for Administrative Users</a></p>
</li>
<li>
<p><a href="#CHDGCECF">Configuring Secure Sockets Layer Authentication for Administrative Users</a></p>
</li>
</ul>
<a id="CHDEGDEA"></a>
<div id="DBSEG99824" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Configuring Directory Authentication for Administrative Users</h4>
<p>To configure directory authentication for administrative users:<a id="sthref290"></a></p>
<ol>
<li>
<p>Configure the administrative user by using the same procedures you would use to configure a typical user.</p>
</li>
<li>
<p>In Oracle Internet Directory, grant the <code dir="ltr">SYSDBA</code> or <code dir="ltr">SYSOPER</code> privilege to the user for the database that this user will administer.</p>
<p>Grant <code dir="ltr">SYSDBA</code> or <code dir="ltr">SYSOPER</code> only to trusted users. See <a href="guidelines.htm#CHDHFIFG">"Guidelines for Securing User Accounts and Privileges"</a> for advice on this topic.</p>
</li>
<li>
<p>Set the <code dir="ltr">LDAP_DIRECTORY_SYSAUTH</code> initialization parameter to <code dir="ltr">YES</code>:</p>
<pre dir="ltr">
ALTER SYSTEM SET LDAP_DIRECTORY_SYSAUTH = YES;
</pre>
<p>When set to <code dir="ltr">YES</code>, the <code dir="ltr">LDAP_DIRECTORY_SYSAUTH</code> parameter enables <code dir="ltr">SYSDBA</code> and <code dir="ltr">SYSOPER</code> users to authenticate to the database by using a strong authentication method.</p>
<p>See <a class="olink REFRN10281" href="../../server.112/e40402/initparams115.htm#REFRN10281"><span class="italic">Oracle Database Reference</span></a> for more information about <code dir="ltr">LDAP_DIRECTORY_SYSAUTH</code>.</p>
</li>
<li>
<p>Set the <code dir="ltr">LDAP_DIRECTORY_ACCESS</code> parameter to either <code dir="ltr">PASSWORD</code> or <code dir="ltr">SSL</code>. For example:</p>
<pre dir="ltr">
ALTER SYSTEM SET LDAP_DIRECTORY_ACCESS = PASSWORD;
</pre>
<p>Ensure that the <code dir="ltr">LDAP_DIRECTORY_ACCESS</code> initialization parameter is not set to <code dir="ltr">NONE</code>. Setting this parameter to <code dir="ltr">PASSWORD</code> or <code dir="ltr">SSL</code> ensures that users can be authenticated using the <code dir="ltr">SYSDBA</code> or <code dir="ltr">SYSOPER</code> privileges through Oracle Internet Directory. See <a class="olink REFRN10251" href="../../server.112/e40402/initparams114.htm#REFRN10251"><span class="italic">Oracle Database Reference</span></a> for more information about <code dir="ltr">LDAP_DIRECTORY_ACCESS</code>.</p>
</li>
</ol>
<p>Afterward, this user can log in by including the net service name in the <code dir="ltr">CONNECT</code> statement in SQL*Plus. For example, to log on as <code dir="ltr">SYSDBA</code> if the net service name is <code dir="ltr">orcl</code>:</p>
<pre dir="ltr">
CONNECT SOMEUSER@ORCL AS SYSDBA
Enter password: <span class="italic">password</span>
</pre>
<p>If the database is configured to use a password file for remote authentication, Oracle Database checks the password file first.</p>
</div>
<!-- class="sect3" -->
<a id="CHDGIJJG"></a>
<div id="DBSEG99825" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Configuring Kerberos Authentication for Administrative Users</h4>
<p>To configure Kerberos authentication for administrative users:<a id="sthref291"></a></p>
<ol>
<li>
<p>Configure the administrative user by using the same procedures you would use to configure a typical user.</p>
<p>See <a class="olink ASOAG060" href="../../network.112/e40393/asokerb.htm#ASOAG060"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for more information.</p>
</li>
<li>
<p>Configure Oracle Internet Directory for Kerberos authentication.</p>
<p>See <a class="olink DBIMI123" href="../../network.112/e10744/configur.htm#DBIMI123"><span class="italic">Oracle Database Enterprise User Security Administrator's Guide</span></a> for more information.</p>
</li>
<li>
<p>In Oracle Internet Directory, grant the <code dir="ltr">SYSDBA</code> or <code dir="ltr">SYSOPER</code> privilege to the user for the database that this user will administer.</p>
<p>Grant <code dir="ltr">SYSDBA</code> or <code dir="ltr">SYSOPER</code> only to trusted users. See <a href="guidelines.htm#CHDHFIFG">"Guidelines for Securing User Accounts and Privileges"</a> for advice on this topic.</p>
</li>
<li>
<p>Set the <code dir="ltr">LDAP_DIRECTORY_SYSAUTH</code> initialization parameter to <code dir="ltr">YES</code>:</p>
<pre dir="ltr">
ALTER SYSTEM SET LDAP_DIRECTORY_SYSAUTH = YES;
</pre>
<p>When set to <code dir="ltr">YES</code>, the <code dir="ltr">LDAP_DIRECTORY_SYSAUTH</code> parameter enables <code dir="ltr">SYSDBA</code> and <code dir="ltr">SYSOPER</code> users to authenticate to the database by using strong authentication methods. See <a class="olink REFRN10281" href="../../server.112/e40402/initparams115.htm#REFRN10281"><span class="italic">Oracle Database Reference</span></a> for more information about <code dir="ltr">LDAP_DIRECTORY_SYSAUTH</code>.</p>
</li>
<li>
<p>Set the <code dir="ltr">LDAP_DIRECTORY_ACCESS</code> parameter to either <code dir="ltr">PASSWORD</code> or <code dir="ltr">SSL</code>. For example:</p>
<pre dir="ltr">
ALTER SYSTEM SET LDAP_DIRECTORY_ACCESS = SSL;
</pre>
<p>Ensure that the <code dir="ltr">LDAP_DIRECTORY_ACCESS</code> initialization parameter is not set to <code dir="ltr">NONE</code>. Setting this parameter to <code dir="ltr">PASSWORD</code> or <code dir="ltr">SSL</code> ensures that users can be authenticated using <code dir="ltr">SYSDBA</code> or <code dir="ltr">SYSOPER</code> through Oracle Internet Directory. See <a class="olink REFRN10251" href="../../server.112/e40402/initparams114.htm#REFRN10251"><span class="italic">Oracle Database Reference</span></a> for more information about <code dir="ltr">LDAP_DIRECTORY_ACCESS</code>.</p>
</li>
</ol>
<p>Afterward, this user can log in by including the net service name in the <code dir="ltr">CONNECT</code> statement in SQL*Plus. For example, to log on as <code dir="ltr">SYSDBA</code> if the net service name is <code dir="ltr">orcl</code>:</p>
<pre dir="ltr">
CONNECT /@orcl AS SYSDBA
</pre></div>
<!-- class="sect3" -->
<a id="CHDGCECF"></a>
<div id="DBSEG99826" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Configuring Secure Sockets Layer Authentication for Administrative Users</h4>
<p>To configure Secure Sockets Layer (SSL) authentication for administrative users:<a id="sthref292"></a></p>
<ol>
<li>
<p>Configure the client to use SSL:</p>
<ol>
<li>
<p>Configure the client wallet and user certificate. Update the wallet location in the <code dir="ltr">sqlnet.ora</code> configuration file.</p>
<p>You can use Wallet Manager to configure the client wallet and user certificate. See <a class="olink ASOAG160" href="../../network.112/e40393/asowalet.htm#ASOAG160"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for more information.</p>
</li>
<li>
<p>Configure the Oracle net service name to include server DNs and use TCP/IP with SSL in <code dir="ltr">tnsnames.ora</code>.</p>
</li>
<li>
<p>Configure TCP/IP with SSL in <code dir="ltr">listener.ora</code>.</p>
</li>
<li>
<p>Set the client SSL cipher suites and the required SSL version, and then set SSL as an authentication service in <code dir="ltr">sqlnet.ora</code>.</p>
</li>
</ol>
</li>
<li>
<p>Configure the server to use SSL:</p>
<ol>
<li>
<p>Enable SSL for your database listener on TCPS and provide a corresponding TNS name. You can use Net Configuration Assistant to configure the TNS name.</p>
</li>
<li>
<p>Store the database PKI credentials in the database wallet. You can use Wallet Manager do this.</p>
</li>
<li>
<p>Set the <code dir="ltr">LDAP_DIRECTORY_ACCESS</code> initialization parameter to <code dir="ltr">SSL</code>:</p>
<pre dir="ltr">
ALTER SYSTEM SET LDAP_DIRECTORY_ACCESS = SSL;
</pre>
<p>See <a class="olink REFRN10251" href="../../server.112/e40402/initparams114.htm#REFRN10251"><span class="italic">Oracle Database Reference</span></a> for more information about <code dir="ltr">LDAP_DIRECTORY_ACCESS</code>.</p>
</li>
</ol>
</li>
<li>
<p>Configure Oracle Internet Directory for SSL user authentications.</p>
<p>See <a class="olink DBIMI" href="../e10744/toc.htm"><span class="italic">Oracle Database Enterprise User Security Administrator's Guide</span></a> for information on configuring enterprise user security SSL authentication.</p>
</li>
<li>
<p>In Oracle Internet Directory, grant the <code dir="ltr">SYSDBA</code> or <code dir="ltr">SYSOPER</code> privilege to the user for the database that the user will administer.</p>
</li>
<li>
<p>On the server computer, set the <code dir="ltr">LDAP_DIRECTORY_SYSAUTH</code> initialization parameter to <code dir="ltr">YES</code>.</p>
<pre dir="ltr">
ALTER SYSTEM SET LDAP_DIRECTORY_SYSAUTH = YES;
</pre>
<p>When set to <code dir="ltr">YES</code>, the <code dir="ltr">LDAP_DIRECTORY_SYSAUTH</code> parameter enables <code dir="ltr">SYSDBA</code> and <code dir="ltr">SYSOPER</code> users to authenticate to the database by using a strong authentication method. See <a class="olink REFRN10281" href="../../server.112/e40402/initparams115.htm#REFRN10281"><span class="italic">Oracle Database Reference</span></a> for more information about <code dir="ltr">LDAP_DIRECTORY_SYSAUTH</code>.</p>
</li>
</ol>
<p>Afterward, this user can log in by including the net service name in the <code dir="ltr">CONNECT</code> statement in SQL*Plus. For example, to log on as <code dir="ltr">SYSDBA</code> if the net service name is <code dir="ltr">orcl</code>:</p>
<pre dir="ltr">
CONNECT /@orcl AS SYSDBA
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDDFDFG"></a>
<div id="DBSEG99827" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Authenticating Database Administrators by Using the Operating System</h3>
<p><a id="sthref293"></a><a id="sthref294"></a>Operating system authentication for a database administrator typically involves establishing a group on the operating system, granting <code dir="ltr">DBA</code> privileges to that group, and then adding the names of persons who should have those privileges to that group. (On UNIX systems, the group is the <span class="bold">dba</span> group.)</p>
<p>On <a id="sthref295"></a><a id="sthref296"></a><a id="sthref297"></a>Microsoft Windows systems, users who connect with the <code dir="ltr">SYSDBA</code> privilege can take advantage of the Windows native authentication. If these users work with Oracle Database using their domain accounts, then you must explicitly grant them local administrative privileges and <code dir="ltr">ORA_DBA</code> membership.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
Your Oracle Database operating system-specific documentation for information about configuring operating system authentication of database administrators</div>
</div>
<!-- class="sect2" -->
<a id="CHDIBDJA"></a>
<div id="DBSEG99828" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Authenticating Database Administrators by Using Their Passwords</h3>
<p>Oracle Database uses <a id="sthref298"></a><a id="sthref299"></a>database-specific password <a id="sthref300"></a><a id="sthref301"></a>files to keep track of database user names that have been granted the <code dir="ltr">SYSDBA</code> and <code dir="ltr">SYSOPER</code> privileges. These privileges enable the following activities:</p>
<ul>
<li>
<p>The <code dir="ltr">SYSOPER</code> system privilege lets database administrators perform <code dir="ltr">STARTUP</code>, <code dir="ltr">SHUTDOWN</code>, <code dir="ltr">ALTER DATABASE</code> <code dir="ltr">OPEN/MOUNT</code>, <code dir="ltr">ALTER</code> <code dir="ltr">DATABASE</code> <code dir="ltr">BACKUP</code>, <code dir="ltr">ARCHIVE</code> <code dir="ltr">LOG</code>, and <code dir="ltr">RECOVER</code> operations. <code dir="ltr">SYSOPER</code> also includes the <code dir="ltr">RESTRICTED</code> <code dir="ltr">SESSION</code> privilege.</p>
</li>
<li>
<p>The <code dir="ltr">SYSDBA</code> system privilege has all system privileges with <code dir="ltr">ADMIN</code> <code dir="ltr">OPTION</code>, including the <code dir="ltr">SYSOPER</code> system privilege, and permits <code dir="ltr">CREATE</code> <code dir="ltr">DATABASE</code> and time-based recovery.</p>
</li>
<li>
<p>A password file containing users with <code dir="ltr">SYSDBA</code> or <code dir="ltr">SYSOPER</code> privileges can be shared between different databases. You can have a shared password file that contains users in addition to the <code dir="ltr">SYS</code> user. To share a password file among different databases, set the <code dir="ltr">REMOTE_LOGIN_PASSWORDFILE</code> parameter in the <code dir="ltr">init.ora</code> file to <code dir="ltr">SHARED</code>.</p>
<p>If you set the <code dir="ltr">REMOTE_LOGIN_PASSWORDFILE</code> initialization parameter to <code dir="ltr">EXCLUSIVE</code> or <code dir="ltr">SHARED</code> from <code dir="ltr">NONE</code>, then ensure that the password file is in sync with the dictionary passwords. See <a class="olink ADMIN11060" href="../../server.112/e25494/dba.htm#ADMIN11060"><span class="italic">Oracle Database Administrator's Guide</span></a> for more information.</p>
</li>
<li>
<p>Password file-based authentication is enabled by default. This means that the database is ready to use a password file for authenticating users that have <code dir="ltr">SYSDBA</code> or <code dir="ltr">SYSOPER</code> system privileges. Password file based authentication is activated as soon as you create a password file using the <code dir="ltr"><a id="sthref302"></a>ORAPWD</code> utility.</p>
<p>Anyone who has <code dir="ltr">EXECUTE</code> privileges and write privileges to the <code dir="ltr">$ORACLE_HOME/dbs</code> directory can run the <code dir="ltr"><a id="sthref303"></a>ORAPWD</code> utility.</p>
</li>
</ul>
<p><a id="sthref304"></a><a id="sthref305"></a>However, be aware that using password files may pose security risks. For this reason, consider using the authentication methods described in <a href="#CHDCADIA">"Strong Authentication and Centralized Management for Database Administrators"</a>. <a id="sthref306"></a>Examples of password security risks are as follows:</p>
<ul>
<li>
<p>An intruder could steal or attack the password file.</p>
</li>
<li>
<p>Many users do not change the default password.</p>
</li>
<li>
<p>The password could be easily guessed.</p>
</li>
<li>
<p>The password is vulnerable if it can be found in a dictionary.</p>
</li>
<li>
<p>Passwords that are too short, chosen perhaps for ease of typing, are vulnerable if an intruder obtains the cryptographic hash of the password.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Connections requested <code dir="ltr">AS SYSDBA</code> or <code dir="ltr">AS SYSOPER</code> must use these phrases; without them, the connection fails. The Oracle Database parameter <code dir="ltr">O7_DICTIONARY_ACCESSIBILITY</code> is set to <code dir="ltr">FALSE</code> by default, to limit sensitive data dictionary access only to those authorized. The parameter also enforces the required <code dir="ltr">AS SYSDBA</code> or <code dir="ltr">AS SYSOPER</code> syntax.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN10241" href="../../server.112/e25494/dba.htm#ADMIN10241"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about creating and maintaining password files</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006458"></a>
<div id="DBSEG30034" class="sect1">
<h2 class="sect1">Using the Database to Authenticate Users</h2>
<p><a id="sthref307"></a><a id="sthref308"></a>This section contains:</p>
<ul>
<li>
<p><a href="#CHDBIDIB">About Database Authentication</a></p>
</li>
<li>
<p><a href="#CHDJAFGD">Advantages of Database Authentication</a></p>
</li>
<li>
<p><a href="#CHDBBBJF">Creating a User Who Is Authenticated by the Database</a></p>
</li>
</ul>
<a id="CHDBIDIB"></a>
<div id="DBSEG30341" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Database Authentication</h3>
<p><a id="sthref309"></a><a id="sthref310"></a>Oracle Database can authenticate users attempting to connect to a database by using information stored in that database itself. <a id="sthref311"></a>To configure Oracle Database to use database authentication, you must create each user with an associated password. User names can be multibyte, but each password must be composed of single-byte characters, even if your database uses a multibyte character set. The user must provide this user name and password when attempting to establish a connection. Oracle Database stores user passwords in the data dictionary in an encrypted format.</p>
<p>To identify the authentication protocols that are allowed by a client or a database, a database administrator can explicitly set the <code dir="ltr">SQLNET.ALLOWED_LOGON_VERSION</code> parameter in the server <code dir="ltr">sqlnet.ora</code> file. Each connection attempt is tested, and if the client or server does not meet the minimum version specified by its partner, authentication fails with an<a id="sthref312"></a><a id="sthref313"></a> <code dir="ltr">ORA-28040 No matching authentication protocol</code> error. The parameter can take the values 11, 10, 9, or 8. The default value is 8. These values represent database server versions. Oracle recommends the value 11 for the strongest protection. However, be aware that if you set <code dir="ltr">SQLNET.ALLOWED_LOGON_VERSION</code> to 11, then pre-Oracle Database Release 11.1 client applications or JDBC thin clients cannot authenticate to the Oracle database using password-based authentication.</p>
<p>To enhance security when using database authentication, Oracle recommends that you use password management, including account locking, password aging and expiration, password history, and password complexity verification. See <a href="#i1006575">"Using a Password Management Policy"</a> for more information about password management.</p>
</div>
<!-- class="sect2" -->
<a id="CHDJAFGD"></a>
<div id="DBSEG99829" class="sect2">
<h3 class="sect2">Advantages of Database Authentication</h3>
<p><a id="sthref314"></a>The advantages of database authentication are as follows:</p>
<ul>
<li>
<p>User accounts and all authentication are controlled by the database. There is no reliance on anything outside of the database.</p>
</li>
<li>
<p>Oracle Database provides strong password management features to enhance security when using database authentication.</p>
</li>
<li>
<p>It is easier to administer when there are small user communities.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDBBBJF"></a>
<div id="DBSEG99830" class="sect2">
<h3 class="sect2">Creating a User Who Is Authenticated by the Database</h3>
<p><a id="sthref315"></a>The following SQL statement creates a user who is identified and authenticated by Oracle Database. User <code dir="ltr">sebastian</code> must specify the assigned password whenever he connects to Oracle Database.</p>
<pre dir="ltr">
CREATE USER sebastian IDENTIFIED BY <span class="italic">password</span>;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007520"></a>
<div id="DBSEG30035" class="sect1">
<h2 class="sect1">Using the Operating System to Authenticate Users</h2>
<p><a id="sthref316"></a><a id="sthref317"></a><a id="sthref318"></a>Some operating systems permit Oracle Database to use information they maintain to authenticate users. <a id="sthref319"></a><a id="sthref320"></a>This has the following benefits:</p>
<ul>
<li>
<p>Once authenticated by the operating system, users can connect to Oracle Database more conveniently, without specifying a user name or password. <a id="sthref321"></a>For example, an operating system-authenticated user can invoke SQL*Plus and omit the user name and password prompts by entering the following command at the command line:</p>
<pre dir="ltr">
SQLPLUS / 
</pre>
<p>Within SQL*Plus, you enter:</p>
<pre dir="ltr">
CONNECT / 
</pre></li>
<li>
<p>With control over user authentication centralized in the operating system, Oracle Database need not store or manage user passwords, although it still maintains user names in the database.</p>
</li>
<li>
<p>Audit trails in the database and operating system can use the same <a id="sthref322"></a><a id="sthref323"></a>user names.</p>
</li>
<li>
<p>You can authenticate both operating system and non-operating system users in the same system. For example:</p>
<ul>
<li>
<p><span class="bold">Authenticate users by the operating system.</span> You create the user account using the <code dir="ltr">IDENTIFIED EXTERNALLY</code> clause of the <code dir="ltr">CREATE USER</code> statement, and then you set the <code dir="ltr">OS_AUTHENT_PREFIX</code> initialization parameter to specify a prefix that Oracle Database uses to authenticate users attempting to connect to the server.</p>
</li>
<li>
<p><span class="bold">Authenticate non-operating system users.</span> These are users who are assigned passwords and authenticated by the database.</p>
</li>
<li>
<p><span class="bold">Authenticate Oracle Database Enterprise User Security users.</span> These user accounts where created using the <code dir="ltr">IDENTIFIED GLOBALLY</code> clause of the <code dir="ltr">CREATE USER</code> statement, and then authenticated by Oracle Internet Directory (OID) currently in the same database.</p>
</li>
</ul>
</li>
</ul>
<p>However, <a id="sthref324"></a><a id="sthref325"></a>you should be aware of the following drawbacks to using the operating system to authenticate users:</p>
<ul>
<li>
<p>A user must have an operating system account on the computer that must be accessed. Not all users have operating system accounts, particularly non-administrative users.</p>
</li>
<li>
<p>If a user has logged in using this method and steps away from the terminal, another user could easily log in because this user does not need any passwords or credentials. This could pose a serious security problem.</p>
</li>
<li>
<p>When an operating system is used to authenticate database users, managing distributed database environments and <a id="sthref326"></a>database links requires special care. Operating system-authenticated database links can pose a security weakness. For this reason, Oracle recommends that you do not use them.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><a class="olink ADMIN" href="../../server.112/e25494/toc.htm"><span class="italic">Oracle Database Administrator's Guide</span></a> for more information about authentication, operating systems, distributed database concepts, and distributed data management</p>
</li>
<li>
<p>Operating system-specific documentation by Oracle Database for more information about authenticating by using your operating system</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1007525"></a>
<div id="DBSEG568" class="sect1">
<h2 class="sect1">Using the Network to Authenticate Users</h2>
<p>You can authenticate users over a network by using Secure Sockets Layer with third-party services.</p>
<ul>
<li>
<p><a href="#i1009722">Authentication Using Secure Sockets Layer</a></p>
</li>
<li>
<p><a href="#i1009853">Authentication Using Third-Party Services</a></p>
</li>
</ul>
<a id="i1009722"></a>
<div id="DBSEG99831" class="sect2">
<h3 class="sect2">Authentication Using Secure Sockets Layer</h3>
<p><a id="sthref327"></a>The Secure Sockets Layer (SSL) <a id="sthref328"></a><a id="sthref329"></a>protocol is an application layer protocol. You can use it for user authentication to a database, and it is independent of global user management in Oracle Internet Directory. That is, users can use SSL to authenticate to the database without a directory server in place.</p>
<p>See <a class="olink ASOAG070" href="../../network.112/e40393/asossl.htm#ASOAG070"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for instructions about configuring SSL.</p>
</div>
<!-- class="sect2" -->
<a id="i1009853"></a>
<div id="DBSEG30362" class="sect2">
<h3 class="sect2">Authentication Using Third-Party Services</h3>
<p><a id="sthref330"></a><a id="sthref331"></a>You need to use third-party network authentication services if you want to authenticate Oracle Database users over a network. Prominent examples include Kerberos, PKI (public key infrastructure), the RADIUS (Remote Authentication Dial-In User Service), and directory-based services, as described in the following sections.</p>
<p>If network authentication services are available to you, then Oracle Database can accept authentication from the network service. If you use a network authentication service, then some special considerations arise for network roles and <a id="sthref332"></a>database links.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To use a network authentication service with Oracle Database, you need Oracle Database Enterprise Edition with the Oracle Database Advanced Security option.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ASOAG" href="../e40393/toc.htm"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for information about Oracle Enterprise Edition with the Oracle Database Advanced Security option</div>
<p class="subhead2"><a id="CHDGFHDE"></a><a id="DBSEG99832"></a>Authenticating Using Kerberos</p>
<p>Kerberos is a trusted third-party authentication system that relies on shared secrets. It presumes that the third party is secure, and provides single sign-on capabilities, centralized password storage, <a id="sthref333"></a><a id="sthref334"></a>database link authentication, and enhanced PC security. It does this through a Kerberos authentication server, or through Cybersafe Active Trust, a commercial Kerberos-based authentication server.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ASOAG060" href="../../network.112/e40393/asokerb.htm#ASOAG060"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for more information about Kerberos</div>
<p class="subhead2"><a id="CHDCHGGB"></a><a id="DBSEG99833"></a>Authenticating Using RADIUS</p>
<p><a id="sthref335"></a><a id="sthref336"></a>Oracle Database supports remote authentication of users through the Remote Authentication Dial-In User Service (RADIUS), a standard lightweight protocol used for user authentication, authorization, and accounting. This feature also enables users to use the RSA One-Time Password Specifications (OTPS) to authenticate to the Oracle database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ASOAG040" href="../../network.112/e40393/asoradus.htm#ASOAG040"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for information about configuring RADIUS</p>
</li>
<li>
<p>RSA documentation about OTPS</p>
</li>
</ul>
</div>
<p class="subhead2"><a id="CHDBFCBF"></a><a id="DBSEG99834"></a>Authenticating Using Directory-Based Services</p>
<p><a id="sthref337"></a><a id="sthref338"></a>Using a central directory can make authentication and its administration efficient. Directory-based services include the following:</p>
<ul>
<li>
<p><a id="sthref339"></a><span class="bold">Oracle Internet Directory</span>, which uses the Lightweight Directory Access Protocol (LDAP), uses a central repository to store and manage information about users (called enterprise users) whose accounts were created in a distributed environment. Although database users must be created (with passwords) in each database that they need to access, enterprise user information is accessible centrally in the Oracle Internet Directory. You can also integrate this directory with Microsoft Active Directory and SunOne.</p>
<p>For more information about Oracle Internet Directory, see <a class="olink OIDAG" href="http://www.oracle.com/pls/topic/lookup?ctx=db112&amp;id=OIDAG"><span class="italic">Oracle Internet Directory Administrator's Guide</span></a>.</p>
</li>
<li>
<p><span class="bold"><a id="sthref340"></a>Oracle Enterprise Security Manager</span> lets you store and retrieve roles from Oracle Internet Directory, which provides centralized privilege management to make administration easier and increase security levels. For more information about Oracle Enterprise Security Manager, see <a class="olink OEMCG" href="http://www.oracle.com/pls/topic/lookup?ctx=db112&amp;id=OEMCG"><span class="italic">Oracle Enterprise Manager Advanced Configuration</span></a>.</p>
</li>
</ul>
<p class="subhead2"><a id="CHDJFIIB"></a><a id="DBSEG99835"></a>Authenticating Using Public Key Infrastructure</p>
<p><a id="sthref341"></a><a id="sthref342"></a>Authentication systems based on public key infrastructure (PKI) issue digital certificates to user clients, which use them to authenticate directly to servers in the enterprise without directly involving an authentication server. Oracle Database provides a PKI for using public keys and certificates, consisting of the following components:</p>
<ul>
<li>
<p><span class="bold">Authentication and secure session key management using SSL.</span> See <a href="#i1009722">"Authentication Using Secure Sockets Layer"</a> for more information.</p>
</li>
<li>
<p><span class="bold">Trusted certificates.</span> These are used to identify third-party entities that are trusted as signers of user certificates when an identity is being validated. When the user certificate is being validated, the signer is checked by using trust points or a trusted certificate chain of certificate authorities stored in the validating system. If there are several levels of trusted certificates in this chain, then a trusted certificate at a lower level is simply trusted without needing to have all its higher-level certificates reverified. For more information about trusted certificates, see <a class="olink ASOAG" href="../e40393/toc.htm"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a>.</p>
</li>
<li>
<p><span class="bold">OracleAS Certificate Authority.</span> This is a component of the Oracle Identity Management infrastructure, which provides an integrated solution for provisioning X.509 version 3 certificates for individuals, applications, and servers that require certificates for PKI-based operations such as authentication, SSL, S/MIME, and so on. For more information about OracleAS Certificate Authority, see <a class="olink OCAAG" href="http://www.oracle.com/pls/topic/lookup?ctx=db112&amp;id=OCAAG"><span class="italic">Oracle Application Server Certificate Authority Administrator's Guide</span></a>.</p>
</li>
<li>
<p><span class="bold"><a id="sthref343"></a>Oracle Wallet Manager.</span> <a id="sthref344"></a><a id="sthref345"></a>An Oracle wallet is a data structure that contains the private key of a user, a user certificate, and the set of trust points of a user (trusted certificate authorities). See <a class="olink ASOAG160" href="../../network.112/e40393/asowalet.htm#ASOAG160"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for information about managing Oracle wallets.</p>
<p>You can use Oracle Wallet Manager to manage Oracle wallets. This is a standalone Java application used to manage and edit the security credentials in Oracle wallets. It performs the following operations:</p>
<ul>
<li>
<p>Generates a public-private key pair and creates a certificate request for submission to a certificate authority, and creates wallets</p>
</li>
<li>
<p>Installs a certificate for the entity</p>
</li>
<li>
<p>Manages X.509 version 3 certificates on Oracle Database clients and servers</p>
</li>
<li>
<p>Configures trusted certificates for the entity</p>
</li>
<li>
<p>Opens a wallet to enable access to PKI-based services</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">X.509 version 3 certificates obtained from (and signed by) a trusted entity, a certificate authority.</span> Because the certificate authority is trusted, these certificates verify that the requesting entity's information is correct and that the public key on the certificate belongs to the identified entity. The certificate is loaded into an Oracle wallet to enable future authentication.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006269"></a>
<div class="sect1">
<h2 class="sect1">Configuring Global User Authentication and Authorization</h2>
<p><a id="sthref346"></a><a id="sthref347"></a><a id="sthref348"></a><a id="sthref349"></a>You can use Oracle Advanced Security to centralize the management of user-related information, including authorizations, in an LDAP-based directory service. This allows users and administrators to be identified in the database as global users<a id="sthref350"></a><a id="sthref351"></a>, meaning that they are authenticated by SSL and that the management of these users is handled outside of the database by the centralized directory service. Global roles<a id="sthref352"></a><a id="sthref353"></a> are defined in a database and are known only to that database, but the directory service handles authorizations for global roles.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can also have users authenticated by SSL, whose authorizations are not managed in a directory, that is, they have local database roles only. See <a class="olink ASOAG070" href="../../network.112/e40393/asossl.htm#ASOAG070"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for details.</div>
<p>This centralized management enables the creation of <a id="sthref354"></a><a id="sthref355"></a><span class="bold">enterprise users</span> and <a id="sthref356"></a><a id="sthref357"></a><span class="bold">enterprise roles</span>. Enterprise users are defined and managed in the directory. They have unique identities across the enterprise and can be assigned enterprise roles that determine their access privileges across multiple databases. An enterprise role consists of one or more global roles, and might be thought of as a container for global roles.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDCADIA">"Strong Authentication and Centralized Management for Database Administrators"</a> if you want to centralize the management of <code dir="ltr">SYSDBA</code> or <code dir="ltr">SYSOPER</code> access</div>
<div id="DBSEG99836" class="sect2"><a id="sthref358"></a>
<h3 class="sect2">Creating a User Who Is Authorized by a Directory Service<a id="sthref359"></a></h3>
<p>You have the following options to specify users who are authorized by a directory service:</p>
<ul>
<li>
<p><a href="#CHDJJDFE">Creating a Global User Who Has a Private Schema</a></p>
</li>
<li>
<p><a href="#CHDJHAIB">Creating Multiple Enterprise Users Who Share Schemas</a></p>
</li>
</ul>
<a id="CHDJJDFE"></a>
<div id="DBSEG99837" class="sect3">
<h4 class="sect3">Creating a Global User Who Has a Private Schema<a id="sthref360"></a><a id="sthref361"></a></h4>
<p><a id="sthref362"></a><a id="sthref363"></a>The following statement shows the creation of a global user with a private schema, authenticated by <a id="sthref364"></a><a id="sthref365"></a>SSL, and authorized by the enterprise directory service:</p>
<pre dir="ltr">
CREATE USER psmith IDENTIFIED GLOBALLY AS 'CN=psmith,OU=division1,O=oracle,C=US';
</pre>
<p>The string provided in the <code dir="ltr">AS</code> clause provides an identifier (<span class="bold">distinguished name,</span> or <span class="bold">DN</span>) meaningful to the enterprise directory.</p>
<p>In this case, <code dir="ltr">psmith</code> is a global user. But, the disadvantage here is that user <code dir="ltr">psmith</code> must then be created in every database that he must access, plus the directory.</p>
</div>
<!-- class="sect3" -->
<a id="CHDJHAIB"></a>
<div id="DBSEG99838" class="sect3">
<h4 class="sect3">Creating Multiple Enterprise Users Who Share Schemas<a id="sthref366"></a></h4>
<p><a id="sthref367"></a><a id="sthref368"></a>Multiple enterprise users can share a single schema in the database. These users are authorized by the enterprise directory service but do not own individual private schemas in the database. These users are not individually created in the database. They connect to a shared schema in the database.</p>
<p>To create a schema-independent user:</p>
<ol>
<li>
<p>Create a shared schema in the database using the following example:</p>
<pre dir="ltr">
CREATE USER appschema IDENTIFIED GLOBALLY AS '';
</pre></li>
<li>
<p>In the directory, create multiple enterprise users and a mapping object.</p>
<p>The mapping object tells the database how you want to map the DNs for the users to the shared schema. You can either create a full DN mapping (one directory entry for each unique DN), or you can map, for each user, multiple DN components to one schema. For example:</p>
<pre dir="ltr">
OU=division,O=Oracle,C=US 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DBIMI151" href="../../network.112/e10744/concepts.htm#DBIMI151"><span class="italic">Oracle Database Enterprise User Security Administrator's Guide</span></a> for an explanation of these mappings</div>
</li>
</ol>
<p>Most users do not need their own schemas, and implementing schema-independent users separates users from databases. You create multiple users who share the same schema in a database, and as enterprise users, they can also access shared schemas in other databases.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="DBSEG99839" class="sect2"><a id="sthref369"></a>
<h3 class="sect2">Advantages of Global Authentication and Global Authorization</h3>
<p><a id="sthref370"></a><a id="sthref371"></a><a id="sthref372"></a><a id="sthref373"></a>Some advantages of global user authentication and authorization are as follows:</p>
<ul>
<li>
<p>Provides strong authentication using SSL, Kerberos, or Windows native authentication.</p>
</li>
<li>
<p>Enables centralized management of users and privileges across the enterprise.</p>
</li>
<li>
<p>Is easy to administer: You do not have to create a schema for every user in every database in the enterprise.</p>
</li>
<li>
<p>Facilitates single sign-on: Users need to sign on once to only access multiple databases and services. Further, users using passwords can have a single password to access multiple databases accepting password-authenticated enterprise users.</p>
</li>
<li>
<p>Because global user authentication and authorization provide password-based access, you can migrate previously defined password-authenticated database users to the directory (using the User Migration Utility) to be centrally administered. This makes global authentication and authorization available for earlier Oracle Database release clients that are still supported.</p>
</li>
<li>
<p><code dir="ltr">CURRENT_USER</code> <a id="sthref374"></a>database links connect as a global user. A local user can connect as a global user in the context of a stored procedure, that is, without storing the global user password in a link definition.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The following manuals for additional information about global authentication and authorization and enterprise users and roles:
<ul>
<li>
<p><a class="olink ASOAG" href="../e40393/toc.htm"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a></p>
</li>
<li>
<p><a class="olink DBIMI" href="../e10744/toc.htm"><span class="italic">Oracle Database Enterprise User Security Administrator's Guide</span></a></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006459"></a>
<div id="DBSEG30038" class="sect1">
<h2 class="sect1">Configuring an External Service to Authenticate Users and Passwords</h2>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CHDBIHHA">About External Authentication</a></p>
</li>
<li>
<p><a href="#CHDEGIFB">Advantages of External Authentication</a></p>
</li>
<li>
<p><a href="#CHDBBFBF">Creating a User Who Is Authenticated Externally</a></p>
</li>
<li>
<p><a href="#CHDIDBDG">Authenticating User Logins Using the Operating System</a></p>
</li>
<li>
<p><a href="#CHDJIFHC">Authentication User Logins Using Network Authentication</a></p>
</li>
</ul>
<a id="CHDBIHHA"></a>
<div id="DBSEG99840" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About External Authentication</h3>
<p><a id="sthref375"></a><a id="sthref376"></a><a id="sthref377"></a>When you use external authentication for user accounts, Oracle Database maintains the user account, but an external service performs the password administration and user authentication. This external service can be the operating system or a network service, such as Oracle Net.</p>
<p>With external authentication, your database relies on the underlying operating system or network authentication service to restrict access to database accounts. A database password is not used for this type of login. If your operating system or network service permits, then it can authenticate users before they can log in to the database. To enable this feature, set the initialization parameter <code dir="ltr"><a id="sthref378"></a>OS_AUTHENT_PREFIX</code>, and use this prefix in Oracle Database user names. The <code dir="ltr">OS_AUTHENT_PREFIX</code> parameter defines a prefix that Oracle Database adds to the beginning of the operating system account name of every user. Oracle Database compares the prefixed user name with the Oracle Database user names in the database when a user attempts to connect.</p>
<p>You should set <code dir="ltr">OS_AUTHENT_PREFIX</code> to a null string (an empty set of double quotation marks: <code dir="ltr">""</code>). Using a null string eliminates the addition of any prefix to operating system account names, so that Oracle Database user names exactly match operating system user names.</p>
<pre dir="ltr">
OS_AUTHENT_PREFIX=" "
</pre>
<p>After you set <code dir="ltr">OS_AUTHENT_PREFIX</code>, it should remain the same for the life of a database. If you change the prefix, then any database user name that includes the old prefix cannot be used to establish a connection, unless you alter the user name to have it use password authentication.</p>
<p>The default value of this parameter is <code dir="ltr">OPS$</code> for backward compatibility with previous versions of Oracle Database. For example, assume that you set <code dir="ltr">OS_AUTHENT_PREFIX</code> as follows:</p>
<pre dir="ltr">
OS_AUTHENT_PREFIX=OPS$
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The text of the <code dir="ltr">OS_AUTHENT_PREFIX</code> initialization parameter is case-sensitive on some operating systems. See your operating system-specific Oracle Database documentation for more information about this initialization parameter.</div>
<p>If a user with an operating system account named <code dir="ltr">tsmith</code> is to connect to an Oracle database installation and be authenticated by the operating system, then Oracle Database checks that there is a corresponding database user <code dir="ltr">OPS$tsmith</code> and, if so, lets the user connect. All references to a user authenticated by the operating system must include the prefix, <code dir="ltr">OPS$</code>, as seen in <code dir="ltr">OPS$tsmith</code>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDEGIFB"></a>
<div id="DBSEG99841" class="sect2">
<h3 class="sect2">Advantages of External Authentication</h3>
<p><a id="sthref379"></a><a id="sthref380"></a><a id="sthref381"></a>The advantages of external authentication are as follows:</p>
<ul>
<li>
<p>More choices of authentication mechanisms are available, such as smart cards, fingerprints, Kerberos, or the operating system.</p>
</li>
<li>
<p>Many network authentication services, such as Kerberos support single sign-on, enabling users to have fewer passwords to remember.</p>
</li>
<li>
<p>If you are already using an external mechanism for authentication, such as one of those listed earlier, then there may be less administrative overhead to use that mechanism with the database.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDBBFBF"></a>
<div id="DBSEG99842" class="sect2">
<h3 class="sect2">Creating a User Who Is Authenticated Externally</h3>
<p><a id="sthref382"></a><a id="sthref383"></a><a id="sthref384"></a>The following statement creates a user who is identified by Oracle Database and authenticated by the operating system or a network service. This example assumes that the <code dir="ltr">OS_AUTHENT_PREFIX</code> parameter has been set to a blank space (<code dir="ltr">" "</code>).</p>
<pre dir="ltr">
CREATE USER psmith IDENTIFIED EXTERNALLY;
</pre>
<p>Using the <code dir="ltr">CREATE USER ... IDENTIFIED EXTERNALLY</code> statement, you create database accounts that must be authenticated by the operating system or network service. Oracle Database then relies on this external login authentication when it provides that specific operating system user with access to the database resources of a specific user.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ASOAG090" href="../../network.112/e40393/asoauth.htm#ASOAG090"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for more information about external authentication</div>
</div>
<!-- class="sect2" -->
<a id="CHDIDBDG"></a>
<div id="DBSEG99843" class="sect2">
<h3 class="sect2">Authenticating User Logins Using the Operating System<a id="sthref385"></a><a id="sthref386"></a><a id="sthref387"></a></h3>
<p><a id="sthref388"></a><a id="sthref389"></a><a id="sthref390"></a>By default, Oracle Database allows operating system-authenticated logins only over secure connections, which precludes using Oracle Net and a shared server configuration. This restriction prevents a remote user from impersonating another operating system user over a network connection.</p>
<p>Setting the <a id="sthref391"></a><code dir="ltr">REMOTE_OS_AUTHENT</code> parameter to <code dir="ltr">TRUE</code> in the database initialization parameter file forces the database to accept the client operating system user name received over an unsecure connection and use it for account access. Because clients, in general, such as PCs, are not trusted to perform operating system authentication properly, it is very poor security practice to turn on this feature.</p>
<p>The default setting, <code dir="ltr">REMOTE_OS_AUTHENT = FALSE</code>, creates a more secure configuration that enforces proper, server-based authentication of clients connecting to an Oracle database.</p>
<p>Any change to this parameter takes effect the next time you start the instance and mount the database. Generally, user authentication through the host operating system offers faster and more convenient connection to Oracle Database without specifying a separate database user name or password. Also, user entries correspond in the database and operating system audit trails.</p>
<p>Be aware that the <code dir="ltr">REMOTE_OS_AUTHENT</code> parameter was deprecated in Oracle Database 11<span class="italic">g</span> Release 1 (11.1), and is retained only for backward compatibility.</p>
</div>
<!-- class="sect2" -->
<a id="CHDJIFHC"></a>
<div id="DBSEG99844" class="sect2">
<h3 class="sect2">Authentication User Logins Using Network Authentication<a id="sthref392"></a><a id="sthref393"></a><a id="sthref394"></a></h3>
<p>Oracle Advanced Security performs network authentication, which you can configure to use a third-party service such as Kerberos. If you are using Oracle Advanced Security as your only external authentication service, then the <code dir="ltr">REMOTE_OS_AUTHENT</code> parameter setting is irrelevant, because Oracle Advanced Security allows only secure connections.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007535"></a>
<div id="DBSEG99845" class="sect1">
<h2 class="sect1">Using Multitier Authentication and Authorization</h2>
<p>In <a id="sthref395"></a><a id="sthref396"></a>a multitier environment, Oracle Database controls the security of middle-tier applications by limiting their privileges, preserving client identities through all tiers, and auditing actions taken on behalf of clients. In applications that use a very busy middle tier, such as a transaction processing monitor, the identity of the clients connecting to the middle tier must be preserved. One advantage of using a middle tier is <a id="sthref397"></a><span class="bold">connection pooling</span>, which allows multiple users to access a data server without each of them needing a separate connection. In such environments, you need to be able to set up and break down connections very quickly.</p>
<p>For these environments, you can use the Oracle Call Interface to create <span class="bold">lightweight sessions</span>, which enable database password authentication for each user. This method preserves the identity of the real user through the middle tier without the overhead of a separate database connection for each user.</p>
<p>You can create lightweight sessions with or without passwords. However, if a middle tier is outside of or on a firewall, then security is better when each lightweight session has its own password. For an internal application server, lightweight sessions without passwords might be appropriate.</p>
<a id="i1007704"></a>
<div id="DBSEG99846" class="sect2">
<h3 class="sect2">Administration and Security in Clients, Application Servers, and Database Servers</h3>
<p>In a multitier environment, an application server provides data for clients and serves as an interface from them to one or more database servers. The application server can validate the credentials of a client, such as a Web browser, and the database server can audit<a id="sthref398"></a> operations performed by the application server. These auditable operations include actions performed by the application server on behalf of clients, such as requests that information be displayed on the client. A request to connect to the database server is an example of an application server operation not related to a specific client.</p>
<p>Authentication in a multitier environment is based on trust regions. Client authentication is the domain of the application server. The application server itself is authenticated by the database server. The following operations are performed:</p>
<ul>
<li>
<p>The end user provides proof of authenticity to the application server, typically, by using a password or an X.509 certificate.</p>
</li>
<li>
<p>The application server authenticates the end user and then authenticates itself to the database server.</p>
</li>
<li>
<p>The database server authenticates the application server, verifies that the end user exists, and verifies that the application server has the privilege to connect for the end user.</p>
</li>
</ul>
<p>Application servers can also enable roles for an end user on whose behalf they connect. The application server can obtain these roles from a directory, which serves as an authorization repository. The application server can only request that these roles be enabled. The database verifies the following requirements:</p>
<ul>
<li>
<p>That the client has these roles by checking its internal role repository</p>
</li>
<li>
<p>That the application server has the privilege to connect on behalf of the user and thus to use these roles as the user could</p>
</li>
</ul>
<p><a href="#i1006483">Figure 3-2</a> shows an example of multitier authentication.</p>
<div id="DBSEG99847" class="figure">
<p class="titleinfigure"><a id="i1006483"></a>Figure 3-2 Multitier Authentication</p>
<img width="582" height="501" src="img/cncpt137.gif" alt="Description of Figure 3-2 follows" /><br />
<a id="sthref399" href="img_text/cncpt137.htm">Description of ''Figure 3-2 Multitier Authentication''</a><br />
<br /></div>
<!-- class="figure" -->
<p>The following actions take place:</p>
<ol>
<li>
<p>The user logs on using a password or Secure Sockets Layer. The authentication information is passed through Oracle Application Server.</p>
</li>
<li>
<p>Oracle Internet Directory authenticates the user, gets the roles associated with that user from the wallet, and then passes this information back to Oracle Application Server.</p>
</li>
<li>
<p>Oracle Application Server checks the identity of the user in Oracle Database, which contains a wallet that stores this information, and then sets the role for that user.</p>
</li>
</ol>
<p>Security for middle-tier applications must address the following key issues:</p>
<ul>
<li>
<p><span class="bold">Accountability.</span> The database server must be able to distinguish between the actions of the application and the actions an application takes on behalf of a client. It must be possible to audit both kinds of actions.</p>
</li>
<li>
<p><span class="bold">Least privilege.</span> Users and middle tiers should be given the fewest privileges necessary to perform their actions, to reduce the danger of inadvertent or malicious unauthorized activities.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDBAHIB"></a>
<div id="DBSEG99848" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Preserving User Identity in Multitiered Environments</h2>
<p>Many organizations want to know who the user is through all tiers of an application without sacrificing the benefits of a middle tier. Oracle Database supports the following ways to preserve user identity through the middle tier of an application:</p>
<ul>
<li>
<p><a href="#i1010326">Using a Middle Tier Server for Proxy Authentication</a></p>
</li>
<li>
<p><a href="#i1010372">Using Client Identifiers to Identify Application Users Not Known to the Database</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="auditing.htm#CEGDFFFE">"Auditing SQL Statements and Privileges in a Multitier Environment"</a></div>
<a id="i1010326"></a>
<div id="DBSEG33101" class="sect2">
<h3 class="sect2">Using a Middle Tier Server for Proxy Authentication</h3>
<p>The following sections explain how to use proxy authentication:</p>
<ul>
<li>
<p><a href="#CHDDDHIJ">About Proxy Authentication</a></p>
</li>
<li>
<p><a href="#i1009044">Advantages of Proxy Authentication</a></p>
</li>
<li>
<p><a href="#CACGGDIE">Who Can Create Proxy User Accounts?</a></p>
</li>
<li>
<p><a href="#CHDEHGJJ">Creating Proxy User Accounts and Authorizing Users to Connect Through Them</a></p>
</li>
<li>
<p><a href="#CHDCEFBA">Using Proxy Authentication with the Secure External Password Store</a></p>
</li>
<li>
<p><a href="#i1006473">Passing Through the Identity of the Real User by Using Proxy Authentication</a></p>
</li>
<li>
<p><a href="#CHDCFGFE">Limiting the Privilege of the Middle Tier</a></p>
</li>
<li>
<p><a href="#CHDCCAEI">Authorizing a Middle Tier to Proxy and Authenticate a User</a></p>
</li>
<li>
<p><a href="#CHDEDGFF">Authorizing a Middle Tier to Proxy a User Authenticated by Other Means</a></p>
</li>
<li>
<p><a href="#i1007059">Reauthenticating the User Through the Middle Tier to the Database</a></p>
</li>
</ul>
<a id="CHDDDHIJ"></a>
<div id="DBSEG99849" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About Proxy Authentication</h4>
<p>Oracle<a id="sthref400"></a><a id="sthref401"></a><a id="sthref402"></a> Database provides proxy authentication in <a id="sthref403"></a>Oracle Call Interface (OCI), JDBC/OCI, or <a id="sthref404"></a><a id="sthref405"></a>JDBC Thin Driver for database users or enterprise users. <a id="sthref406"></a>Enterprise users are those who are managed in Oracle Internet Directory and who access a shared schema in the database.</p>
<p>You <a id="sthref407"></a><a id="sthref408"></a>can design a middle-tier server to authenticate clients in a secure fashion by using the following three forms of proxy authentication:</p>
<ul>
<li>
<p>The middle-tier server authenticates itself with the database server and a client, in this case an application user or another application, authenticates itself with the middle-tier server. Client identities can be maintained all the way through to the database.</p>
</li>
<li>
<p>The client, in this case a database user, is not authenticated by the middle-tier server. The clients identity and database password are passed through the middle-tier server to the database server for authentication.</p>
</li>
<li>
<p>The client, in this case a global user, is authenticated by the middle-tier server, and passes one of the following through the middle tier for retrieving the client's user name.</p>
<ul>
<li>
<p>Distinguished name (DN)</p>
</li>
<li>
<p>Certificate</p>
</li>
</ul>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The use of certificates for proxy authentication may not be supported in future Oracle Database releases.</div>
<p>In all cases, an administrator must authorize the middle-tier server to act on behalf of the client.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNOCI" href="../../appdev.112/e10646/toc.htm"><span class="italic">Oracle Call Interface Programmer's Guide</span></a> and <a class="olink ADFNS" href="../../appdev.112/e41502/toc.htm"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> or details about designing a middle-tier server to proxy users</div>
</div>
<!-- class="sect3" -->
<a id="i1009044"></a>
<div id="DBSEG99850" class="sect3">
<h4 class="sect3">Advantages of Proxy Authentication</h4>
<p><a id="sthref409"></a>In multitier environments, proxy authentication controls the security of middle-tier applications by preserving client identities and privileges through all tiers and by auditing actions taken on behalf of clients. For example, this feature allows the identity of a user using a Web application (which acts as a proxy) to be passed through the application to the database server.</p>
<p>Three-tier systems provide the following benefits to organizations:</p>
<ul>
<li>
<p>Organizations can separate application logic from data storage, partitioning the former in application servers and the latter in databases.</p>
</li>
<li>
<p>Application servers and Web servers enable users to access data stored in databases.</p>
</li>
<li>
<p>Users like using a familiar, easy-to-use browser interface.</p>
</li>
<li>
<p>Organizations can also lower their cost of computing by replacing many <span class="italic">thick clients</span> with numerous <span class="italic">thin clients</span> and an application server.</p>
</li>
</ul>
<p><a id="sthref410"></a>In addition, Oracle Database proxy authentication provides the following security benefits:</p>
<ul>
<li>
<p>A limited trust model, by controlling the users on whose behalf middle tiers can connect and the roles that the middle tiers can assume for the user</p>
</li>
<li>
<p>Scalability, by supporting user sessions through OCI, JDBC/OCI, or JDBC Thin driver and eliminating the overhead of reauthenticating clients</p>
</li>
<li>
<p>Accountability, by preserving the identity of the real user through to the database, and enabling auditing of actions taken on behalf of the real user</p>
</li>
<li>
<p>Flexibility, by supporting environments in which users are known to the database, and in which users are merely application users of which the database has no awareness</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
Oracle Database supports this proxy authentication functionality in three tiers only. It does not support it across multiple middle tiers.</div>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CACGGDIE"></a>
<div id="DBSEG580" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Who Can Create Proxy User Accounts?</h4>
<p>To <a id="sthref411"></a>create <a id="sthref412"></a>proxy <a id="sthref413"></a><a id="sthref414"></a>user accounts, users must have the following minimum privileges:</p>
<ul>
<li>
<p>The <code dir="ltr">CREATE USER</code> system privilege to create a database user account that will be used as a proxy user account</p>
</li>
<li>
<p>The <code dir="ltr">DV_ACCTMGR</code> role if Oracle Database Vault is enabled, to create the proxy user account</p>
</li>
<li>
<p>The ability to grant the <code dir="ltr">CREATE SESSION</code> system privilege to the proxy user account</p>
</li>
<li>
<p>The <code dir="ltr">ALTER USER</code> system privilege to enable existing user accounts to connect to the database through the proxy account</p>
</li>
</ul>
<p>Follow these guidelines when you create proxy user accounts:</p>
<ul>
<li>
<p>For better security and to adhere to the principle of least privilege, only grant the proxy user account the <code dir="ltr">CREATE SESSION</code> privilege. Do not grant this user any other privileges. The proxy user account is designed to only enable another user to connect using the proxy account. Any privileges that must be exercised during the connection should belong to the connecting user, not to the proxy account.</p>
</li>
<li>
<p>As with all passwords, ensure that the password you create for the proxy user is strong and not easily guessed. Remember that multiple users will be connecting as the proxy user, so it is especially important that this password be strong. See <a href="guidelines.htm#CHDEGEIF">"Guidelines for Securing Passwords"</a> for advice about creating strong passwords.</p>
</li>
<li>
<p>Consider using the Advanced Security option network connection features, to prevent network eavesdropping.</p>
</li>
<li>
<p>For further fine-tuning of the amount of control that the connecting user has, consider restricting the roles used by the connecting user when he or she is connected through the proxy account. The <code dir="ltr">ALTER USER</code> statement enables you to configure the user to connect using specified roles, any role except a specified role, or with no roles at all.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CHDEHGJJ"></a>
<div id="DBSEG99851" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating Proxy User Accounts and Authorizing Users to Connect Through Them</h4>
<p>The <code dir="ltr">CREATE USER</code> statement enables you to create the following types of user accounts, all of which can be used as proxy accounts:</p>
<ul>
<li>
<p>Database user accounts, which are authenticated by passwords</p>
</li>
<li>
<p>External user accounts, which are authenticated by external sources, such as Secure Socket Layer (SSL) or Kerberos</p>
</li>
<li>
<p>Global user accounts, which are authenticated by an enterprise directory service (Oracle Internet Directory).</p>
</li>
</ul>
<p>To create a proxy user account and authorize users to connect through it:</p>
<ol>
<li>
<p>Use <a id="sthref415"></a><a id="sthref416"></a>the <code dir="ltr">CREATE USER</code> statement to create the proxy user account.</p>
<p>For example:</p>
<pre dir="ltr">
CREATE USER appuser IDENTIFIED BY <span class="italic">password</span>;
</pre></li>
<li>
<p>Use the <a id="sthref417"></a><code dir="ltr">GRANT CONNECT THROUGH</code> clause of the <code dir="ltr">ALTER USER<a id="sthref418"></a></code> statement to enable an existing user to connect through the proxy user account.</p>
<p>For example:</p>
<pre dir="ltr">
ALTER USER preston GRANT CONNECT THROUGH appuser;
</pre>
<p>Suppose user <code dir="ltr">preston</code> has a large number of roles, but you only want her to use one role (for example, the <code dir="ltr">appuser_role</code>) when she is connected to the database through the <code dir="ltr">appuser</code> proxy account. You can use the following <code dir="ltr">ALTER USER</code> statement:</p>
<pre dir="ltr">
ALTER USER preston GRANT CONNECT THROUGH appuser WITH ROLE appuser_role;
</pre>
<p>Any other roles that user <code dir="ltr">preston</code> will not be available to her as long as she is connecting as the <code dir="ltr">appuser</code> proxy.</p>
</li>
</ol>
<p>After you complete these steps, user <code dir="ltr">preston</code> can connect using the <code dir="ltr">appuser</code> proxy user as follows:</p>
<pre dir="ltr">
CONNECT appuser[preston]
Enter password: <span class="italic">appuser_password</span>
</pre>
<p>Note the following:</p>
<ul>
<li>
<p><span class="bold">The proxy user can only perform activities that user preston has privileges to perform.</span> Remember that the proxy user itself, <code dir="ltr">appuser</code>, only has the minimum privileges (<code dir="ltr">CREATE SESSION</code>).</p>
</li>
<li>
<p><span class="bold">Using roles with middle-tier clients.</span> You can also specify roles that the middle tier is permitted to activate when connecting as the client. Operations performed on behalf of a client by a middle-tier server can be audited.</p>
</li>
<li>
<p><span class="bold">Finding proxy users.</span> To find the users who are currently authorized to connect through a middle tier, query the <a id="sthref419"></a><code dir="ltr">PROXY_USERS</code> data dictionary view, for example:</p>
<pre dir="ltr">
SELECT * FROM PROXY_USERS;
</pre></li>
<li>
<p><span class="bold">Removing proxy connections.</span> Use the <a id="sthref420"></a><a id="sthref421"></a><code dir="ltr">REVOKE CONNECT THROUGH</code> clause of <code dir="ltr">ALTER USER</code> to disallow a proxy connection. For example, to revoke user <code dir="ltr">preston</code> from connecting through the proxy user <code dir="ltr">appuser</code>, enter the following statement:</p>
<pre dir="ltr">
ALTER USER preston REVOKE CONNECT THROUGH appuser
</pre></li>
<li>
<p><span class="bold">Password expiration and proxy connections.</span> Middle-tier <a id="sthref422"></a>use of <a id="sthref423"></a>password expiration does not apply to accounts that are authenticated through a proxy. Instead, lock the account rather than expire the password.<a id="sthref424"></a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF01503" href="../../server.112/e41084/statements_8003.htm#SQLRF01503"><span class="italic">Oracle Database SQL Language Reference</span></a> for detailed information about the <code dir="ltr">CREATE USER</code> statement</p>
</li>
<li>
<p><a class="olink SQLRF01103" href="../../server.112/e41084/statements_4003.htm#SQLRF01103"><span class="italic">Oracle Database SQL Language Reference</span></a> for detailed information about the <code dir="ltr">ALTER USER</code> statement</p>
</li>
<li>
<p><a class="olink DBIMI223" href="../../network.112/e10744/concepts.htm#DBIMI223"><span class="italic">Oracle Database Enterprise User Security Administrator's Guide</span></a> for information about managing proxy users in an enterprise user environment</p>
</li>
<li>
<p><a class="olink ASOAG002" href="../../network.112/e40393/asotools.htm#ASOAG002"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for more information about using network encryption and strong authentication</p>
</li>
<li>
<p><a href="auditing.htm#CEGDFFFE">"Auditing SQL Statements and Privileges in a Multitier Environment"</a> for details about auditing operations done on behalf of a user by a middle tier</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="CHDCEFBA"></a>
<div id="DBSEG99853" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using Proxy Authentication with the Secure External Password Store</h4>
<p>If you are <a id="sthref425"></a><a id="sthref426"></a>concerned <a id="sthref427"></a>about the password used in proxy authentication being obtained by a malicious user, then you can use the secure external password store with the proxy authentication to store the password credentials in a wallet. Connecting to Oracle Database using proxy authentication and the secure external password store is ideal for situations such as running batch files. When a proxy user connects to the database and authenticates using a secure external password, the password is not exposed in the event that a malicious user tries to obtain the password.</p>
<p>To use proxy authentication with the secure external password store:</p>
<ol>
<li>
<p>Configure the proxy authentication account, as shown in the procedure under <a href="#CHDEHGJJ">"Creating Proxy User Accounts and Authorizing Users to Connect Through Them"</a>.</p>
</li>
<li>
<p>Configure the secure external password store. See <a href="#CBHGEBEI">"Configuring Clients to Use the External Password Store"</a> for more information.</p>
</li>
</ol>
<p>Afterward, the user can connect using the proxy but without having to specify a password. For example:</p>
<pre dir="ltr">
sqlplus [preston]/@<span class="italic">db_alias</span>
</pre>
<p>When you use the secure external password store, the user logging in does not need to supply the user name and password. Only the <code dir="ltr">SERVICE_NAME</code> value (that is, <code dir="ltr">db_alias</code>) from the <code dir="ltr">tnsnames.ora</code> file must be specified.</p>
</div>
<!-- class="sect3" -->
<a id="i1006473"></a>
<div id="DBSEG99854" class="sect3">
<h4 class="sect3">Passing Through <a id="sthref428"></a>the Identity of the Real User by Using Proxy Authentication</h4>
<p>For enterprise users or database users, <a id="sthref429"></a>Oracle Call Interface, JDBC/OCI, or Thin driver <a id="sthref430"></a><a id="sthref431"></a>enables a middle tier to set up several user sessions within a single database connection, each of which uniquely identifies a connected user (<a id="sthref432"></a><a id="sthref433"></a>connection pooling). These sessions reduce the network overhead of creating separate network connections from the middle tier to the database.</p>
<p>If you want to authenticate from clients through a middle tier to the database, the full <a id="sthref434"></a>authentication <a id="sthref435"></a>sequence from the client to the middle tier to the database occurs as follows:</p>
<ol>
<li>
<p>The client authenticates to the middle tier, using whatever form of authentication the middle tier will accept. For example, the client could authenticate to the middle tier by using a user name and password or an X.509 certificate by means of SSL.</p>
</li>
<li>
<p>The middle tier authenticates itself to the database by using whatever form of authentication the database accepts. This could be a password or an authentication mechanism supported by Oracle Advanced Security, such as a <a href="glossary.htm#CBADHDDI"><span class="xrefglossterm">Kerberos ticket</span></a> or an X.509 certificate (SSL).</p>
</li>
<li>
<p>The middle tier then creates one or more sessions for users using OCI, JDBC/OCI, or Thin driver.</p>
<ul>
<li>
<p>If the user is a database user, then the session must, as a minimum, include the database user name. If the database requires it, then the session can include a password (which the database verifies against the password store in the database). The session can also include a list of database roles for the user.</p>
</li>
<li>
<p>If the user is an enterprise user, then the session may provide different information depending on how the user is authenticated.</p>
<p><span class="bold">Example 1:</span> If the user authenticates to the middle tier using SSL, then the middle tier can provide the DN from the X.509 certificate of the user, or the certificate itself in the session. The database uses the DN to look up the user in Oracle Internet Directory.</p>
<p><span class="bold">Example 2:</span> If the user is a password-authenticated enterprise user, then the middle tier must provide, as a minimum, a globally unique name for the user. The database uses this name to look up the user in Oracle Internet Directory. If the session also provides a password for the user, then the database will verify the password against Oracle Internet Directory. User roles are automatically retrieved from Oracle Internet Directory after the session is established.</p>
</li>
<li>
<p>The middle tier may optionally provide a list of database roles for the client. These roles are enabled if the proxy is authorized to use the roles on behalf of the client.</p>
</li>
</ul>
</li>
<li>
<p>The database verifies that the middle tier has the privilege to create sessions on behalf of the user.</p>
<p>The <code dir="ltr">OCISessionBegin</code> call fails if the application server cannot perform a proxy authentication on behalf of the client by the administrator, or if the application server is not allowed to activate the specified roles.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CHDCFGFE"></a>
<div id="DBSEG99855" class="sect3">
<h4 class="sect3">Limiting the Privilege of the Middle Tier</h4>
<p>Least privilege is the principle <a id="sthref436"></a>that users should have the fewest <a id="sthref437"></a><a id="sthref438"></a><a id="sthref439"></a><a id="sthref440"></a>privileges necessary to perform their duties and no more. As applied to middle tier applications, this means that the middle tier should not have more privileges than it needs. Oracle Database enables you to limit the middle tier such that it can connect only on behalf of certain database users, using only specific database roles. You can limit the privilege of the middle tier to connect on behalf of an enterprise user, stored in an LDAP directory, by granting to the middle tier the privilege to connect as the mapped database user. For instance, if the enterprise user is mapped to the <code dir="ltr">APPUSER</code> schema, then you must at least grant to the middle tier the ability to connect on behalf of <code dir="ltr">APPUSER</code>. Otherwise, attempts to create a session for the enterprise user will fail.</p>
<p>However, you cannot limit the ability of the middle tier to connect on behalf of enterprise users. For example, suppose that user Sarah wants to connect to the database through a middle tier, <code dir="ltr">appsrv</code> (which is also a database user). Sarah has multiple roles, but it is desirable to restrict the middle tier to use only the <code dir="ltr">clerk</code> role on her behalf.</p>
<p>An administrator could effectively grant permission for <code dir="ltr">appsrv</code> to initiate connections on behalf of Sarah using her <code dir="ltr">clerk</code> role only, using the following syntax:</p>
<pre dir="ltr">
ALTER USER sarah GRANT CONNECT THROUGH appsrv WITH ROLE clerk;
</pre>
<p>By default, the middle tier cannot create connections for any client. The permission must be granted for each user.</p>
<p>To allow <code dir="ltr">appsrv</code> to use all of the roles granted to the client Sarah, the following statement would be used:</p>
<pre dir="ltr">
ALTER USER sarah GRANT CONNECT THROUGH appsrv;
</pre>
<p>Each time a middle tier initiates an OCI, JDBC/OCI, or Thin driver session for another database user, the database verifies that the middle tier is authorized to connect for that user by using the role specified.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Instead of using default roles, create your own roles and assign only necessary privileges to them. Creating your own roles enables you to control the privileges granted by them and protects you if Oracle Database changes or removes default roles. For example, the <code dir="ltr">CONNECT</code> role now has only the <code dir="ltr">CREATE SESSION</code> privilege, the one most directly needed when connecting to a database.
<p>However, <code dir="ltr">CONNECT</code> formerly provided several additional privileges, often not needed or appropriate for most users. Extra privileges can endanger the security of your database and applications. These have now been removed from <code dir="ltr">CONNECT</code>.</p>
<p>See <a href="authorization.htm#BABHFJFJ">Chapter 4, "Configuring Privilege and Role Authorization"</a> for more information about roles.</p>
</div>
</div>
<!-- class="sect3" -->
<a id="CHDCCAEI"></a>
<div id="DBSEG99856" class="sect3">
<h4 class="sect3">Authorizing a Middle Tier to Proxy and Authenticate a User</h4>
<p><a id="sthref441"></a><a id="sthref442"></a>The following statement <a id="sthref443"></a>authorizes the middle-tier server <code dir="ltr">appserve</code> to connect as user <code dir="ltr">bill</code>. It uses the <code dir="ltr">WITH ROLE</code> clause to specify that <code dir="ltr">appserve</code> activate all roles associated with <code dir="ltr">bill</code>, except <code dir="ltr">payroll</code>.</p>
<pre dir="ltr">
ALTER USER bill
    GRANT CONNECT THROUGH appserve 
    WITH ROLE ALL EXCEPT payroll;
</pre>
<p>To revoke the middle-tier server (<code dir="ltr">appserve</code>) authorization to connect as user <code dir="ltr">bill</code>, the following statement is used:</p>
<pre dir="ltr">
ALTER USER bill REVOKE CONNECT THROUGH appserve;
</pre></div>
<!-- class="sect3" -->
<a id="CHDEDGFF"></a>
<div id="DBSEG99857" class="sect3">
<h4 class="sect3">Authorizing a Middle Tier to Proxy a User Authenticated by Other Means</h4>
<p>Use <a id="sthref444"></a>the<a id="sthref445"></a> <code dir="ltr">AUTHENTICATION REQURED</code> clause of the <code dir="ltr">ALTER USER ... GRANT CONNECT THROUGH</code> statement to authorize a user to be proxied, but not authenticated, by a middle tier. Currently, <code dir="ltr">PASSWORD</code> is the only means supported.</p>
<p>The following statement illustrates this form of authentication:</p>
<pre dir="ltr">
ALTER USER mary
    GRANT CONNECT THROUGH midtier
    AUTHENTICATION REQUIRED;
</pre>
<p>In the preceding statement, middle-tier server <code dir="ltr">midtier</code> is authorized to connect as user <code dir="ltr">mary</code>, and <code dir="ltr">midtier</code> must also pass the user password to the database server for authorization.</p>
</div>
<!-- class="sect3" -->
<a id="i1007059"></a>
<div id="DBSEG99858" class="sect3">
<h4 class="sect3">Reauthenticating the User Through the Middle Tier to the Database</h4>
<p><a id="sthref446"></a>Administrators can specify that <a id="sthref447"></a>authentication is required by using the <code dir="ltr">AUTHENTICATION REQUIRED</code> proxy clause with the <code dir="ltr">ALTER USER</code> SQL statement. In this case, the middle tier must provide user authentication credentials.</p>
<p><a id="i1006873"></a>For example, suppose that user Sarah wants to connect to the database through a middle tier, <code dir="ltr">appsrv</code>. An administrator could require that <code dir="ltr">appsrv</code> provides authentication credentials for Sarah by using the following syntax:</p>
<pre dir="ltr">
ALTER USER <span class="variable">sarah</span> GRANT CONNECT THROUGH <span class="variable">appsrv</span> AUTHENTICATION REQUIRED;
</pre>
<p>The <code dir="ltr">AUTHENTICATION REQUIRED</code> clause ensures that authentication credentials for the user must be presented when the user is authenticated through the specified proxy.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For backward compatibility, if you use the <code dir="ltr">AUTHENTICATED USING PASSWORD</code> proxy clause, then Oracle Database transforms it to <code dir="ltr">AUTHENTICATION REQUIRED</code>.</div>
<div id="DBSEG99859" class="sect4"><a id="sthref448"></a>
<h5 class="sect4">Using Password-Based Proxy Authentication</h5>
<p>When <a id="sthref449"></a><a id="sthref450"></a>you use password-based proxy authentication, Oracle Database passes the password of the client to the middle-tier server. The middle-tier server then passes the password as an attribute to the data server for verification. The main advantage to this is that the client computer does not have to have Oracle software installed on it to perform database operations.</p>
<p>To pass the password of the client, the middle-tier server calls the <code dir="ltr">OCIAttrSet()</code> function as follows, passing <code dir="ltr">OCI_ATTR_PASSWORD</code> as the type of the attribute being set.</p>
<pre dir="ltr">
OCIAttrSet(
  session_handle,    /* Pointer to a handle whose attribute gets modified. */
  OCI_HTYPE_SESSION, /* Handle type: OCI user session handle. */
  password_ptr,      /* Pointer to the value of the password attribute. */
  0,                 /* The size of the password attribute value is already
                        known by the OCI library. */
  OCI_ATTR_PASSWORD, /* The attribute type. */
  error_handle);     /* An error handle used to retrieve diagnostic
                        information in the event of an error. */ 
</pre></div>
<!-- class="sect4" -->
<div id="DBSEG99860" class="sect4"><a id="sthref451"></a>
<h5 class="sect4">Using Proxy Authentication with Enterprise Users</h5>
<p>If the middle tier <a id="sthref452"></a>connects to the database as a client who is an enterprise user, then either the distinguished name, or the X.509 certificate containing the distinguished name is passed over instead of the database user name. If the user is a password-authenticated enterprise user, then the middle tier must provide, as a minimum, a globally unique name for the user. The database uses this name to look up the user in Oracle Internet Directory.</p>
<p>To pass over the distinguished name of the client, the application server would call the Oracle Call Interface method <code dir="ltr">OCIAttrSet()</code> with <code dir="ltr">OCI_ATTR_DISTINGUISHED_NAME</code> as the attribute type, as follows:</p>
<pre dir="ltr">
OCIAttrSet(session_handle,
           OCI_HTYPE_SESSION,
           distinguished_name,
           0,
           OCI_ATTR_DISTINGUISHED_NAME,
           error_handle); 
</pre>
<p>To pass over the entire certificate, the middle tier would call <code dir="ltr">OCIAttrSet()</code> with <code dir="ltr">OCI_ATTR_CERTIFICATE</code> as the attribute type, as follows.</p>
<pre dir="ltr">
OCIAttrSet(session_handle,
           OCI_HTYPE_SESSION,
           certificate,
           certificate_length,
           OCI_ATTR_CERTIFICATE,
           error_handle);
</pre>
<p>If the type is not specified, then the database uses its default certificate type of X.509.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p><code dir="ltr">OCI_ATTR_CERTIFICATE</code> is Distinguished Encoding Rules (DER) encoded.</p>
</li>
<li>
<p>Certificate based proxy authentication using <code dir="ltr">OCI_ATTR_CERTIFICATE</code> will not be supported in future Oracle Database releases. Use the <code dir="ltr">OCI_ATTR_DISTINGUISHED_NAME</code> or <code dir="ltr">OCI_ATTR_USERNAME</code> attribute instead</p>
</li>
</ul>
</div>
<p>If you are using proxy authentication for password-authenticated enterprise users, then use the same OCI attributes as for database users authenticated by password (<code dir="ltr">OCI_ATTR_USERNAME</code>). Oracle Database first checks the user name against the database. If it finds no user, then the database checks the user name in the directory. This user name must be globally unique.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1010372"></a>
<div id="DBSEG99862" class="sect2">
<h3 class="sect2">Using Client Identifiers to Identify Application Users Not Known to the Database</h3>
<p>The following sections explain how to use client identifiers:</p>
<ul>
<li>
<p><a href="#CACDFAIA">About Client Identifiers</a></p>
</li>
<li>
<p><a href="#i1006477">How Client Identifiers Work in Middle Tier Systems</a></p>
</li>
<li>
<p><a href="#i1009003">Using the CLIENT_IDENTIFIER Attribute to Preserve User Identity</a></p>
</li>
<li>
<p><a href="#i1009001">Using CLIENT_IDENTIFIER Independent of Global Application Context</a></p>
</li>
<li>
<p><a href="#CHDBBEFF">Using the DBMS_SESSION PL/SQL Package to Set and Clear the Client Identifier</a></p>
</li>
</ul>
<a id="CACDFAIA"></a>
<div id="DBSEG581" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About Client Identifiers</h4>
<p>Oracle<a id="sthref453"></a><a id="sthref454"></a> Database provides the <code dir="ltr">CLIENT_IDENTIFIER</code> attribute of the built-in <code dir="ltr"><a id="sthref455"></a>USERENV</code> application context namespace for application users. These users are known to an application but unknown to the database. The <code dir="ltr">CLIENT_IDENTIFIER</code> attribute can capture any value that the application uses for identification or access control, and passes it to the database. The <code dir="ltr">CLIENT_IDENTIFIER</code> attribute is supported in OCI, JDBC/OCI, or Thin driver.</p>
</div>
<!-- class="sect3" -->
<a id="i1006477"></a>
<div id="DBSEG15003" class="sect3">
<h4 class="sect3">How Client Identifiers Work in Middle Tier Systems</h4>
<p><a id="sthref456"></a>Many applications use session pooling to set up several sessions to be reused by multiple application users. Users authenticate themselves to a middle-tier application, which uses a single identity to log in to the database and maintains all the user connections. In this model, application users are users who are authenticated to the middle tier of an application, but who are not known to the database. You can use a <code dir="ltr">CLIENT_IDENTIFIER</code> attribute, which acts like an application user proxy for these types of applications.</p>
<p>In this model, the middle tier passes a client identifier to the database upon the session establishment. The client identifier could actually be anything that represents a client connecting to the middle tier, for example, a cookie or an IP address. The client identifier, representing the application user, is available in user session information and can also be accessed with an application context (by using the <code dir="ltr">USERENV</code> naming context). In this way, applications can set up and reuse sessions, while still being able to keep track of the <span class="italic">application user</span> in the session. Applications can reset the client identifier and thus reuse the session for a different user, enabling high performance.</p>
</div>
<!-- class="sect3" -->
<a id="i1009003"></a>
<div id="DBSEG99863" class="sect3">
<h4 class="sect3">Using the CLIENT_IDENTIFIER Attribute to Preserve User Identity</h4>
<p>You can use the <code dir="ltr">CLIENT_IDENTIFIER</code> predefined attribute of the built-in application context namespace, <code dir="ltr">USERENV</code>, to capture the application user name for use with global application context. You also can use the <code dir="ltr">CLIENT_IDENTIFIER</code> attribute independently. When you use the <code dir="ltr">CLIENT_IDENTIFIER</code> attribute independently from a global application context, you can set <code dir="ltr">CLIENT_IDENTIFIER</code> with the <code dir="ltr">DBMS_SESSION</code> interface. The ability to pass a <code dir="ltr">CLIENT_IDENTIFIER</code> to the database is supported in Oracle Call Interface (OCI), JDBC/OCI, or Thin driver.</p>
<p>When you use the <code dir="ltr">CLIENT_IDENTIFIER</code> attribute with global application context, it provides flexibility and high performance for building applications. For example, suppose a Web-based application that provides information to business partners has three types of users: gold partner, silver partner, and bronze partner, representing different levels of information available. Instead of each user having his or her own session set up with individual application contexts, the application could set up global application contexts for gold partners, silver partners, and bronze partners. Then, use the <code dir="ltr">CLIENT_IDENTIFIER</code> to point the session at the correct context to retrieve the appropriate type of data. The application need only initialize the three global contexts once and use the <code dir="ltr">CLIENT_IDENTIFIER</code> to access the correct application context to limit data access. This provides performance benefits through session reuse and through accessing global application contexts set up once, instead of having to initialize application contexts for each session individually.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="app_context.htm#CIHFJHCG">"Using Global Application Contexts"</a> for how to implement global application contexts</p>
</li>
<li>
<p><a href="app_context.htm#CIHIABHH">"Tutorial: Creating a Global Application Context That Uses a Client Session ID"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="i1009001"></a>
<div id="DBSEG99864" class="sect3">
<h4 class="sect3">Using CLIENT_IDENTIFIER Independent of Global Application Context</h4>
<p><a id="sthref457"></a>Using the <code dir="ltr">CLIENT_IDENTIFIER</code> attribute is especially useful for those applications in which the users are unknown to the database. In these situations, the application typically connects as a single database user and all actions are taken as that user. Because all user sessions are created as the same user, this security model makes it difficult to achieve data separation for each user. These applications can use the <code dir="ltr">CLIENT_IDENTIFIER</code> attribute to preserve the real application user identity through to the database.</p>
<p>With this approach, sessions can be reused by multiple users by changing the value of the <code dir="ltr">CLIENT_IDENTIFIER</code> attribute, which captures the name of the real application user. This avoids the overhead of setting up a separate session and separate attributes for each user, and enables reuse of sessions by the application. When the <code dir="ltr">CLIENT_IDENTIFIER</code> attribute value changes, the change is added to the next OCI, JDBC/OCI, or Thin driver call for additional performance benefits.</p>
<p>For example, the user Daniel connects to a Web Expense application. Daniel is not a database user; he is a typical Web Expense application user. The application accesses the built-in application context namespace and sets <code dir="ltr">DANIEL</code> as the <code dir="ltr">CLIENT_IDENTIFIER</code> attribute value. Daniel completes his Web Expense form and exits the application. Then, Ajit connects to the Web Expense application. Instead of setting up a new session for Ajit, the application reuses the session that currently exists for Daniel, by changing the <code dir="ltr">CLIENT_IDENTIFIER</code> to <code dir="ltr">AJIT</code>. This avoids the overhead of setting up a new connection to the database and the overhead of setting up a global application context. The <code dir="ltr">CLIENT_IDENTIFIER</code> attribute can be set to any value on which the application bases access control. It does not have to be the application user name.</p>
<p><a id="sthref458"></a>To set the <code dir="ltr">CLIENT_IDENTIFIER</code> attribute with OCI, use the <code dir="ltr">OCI_ATTR_CLIENT_IDENTIFIER</code> attribute in the call to <code dir="ltr">OCIAttrSet()</code>. Then, on the next request to the server, the information is propagated and stored in the server sessions. For example:</p>
<pre dir="ltr">
OCIAttrSet (session,
</pre>
<pre dir="ltr">
OCI_HTYPE_SESSION,
(dvoid *) "appuser1",
(ub4)strlen("appuser1"),
OCI_ATTR_CLIENT_IDENTIFIER,
*error_handle);
</pre>
<p>For <a id="sthref459"></a>applications that use JDBC, be aware that JDBC does not set the client identifier. To set the client identifier in a connection pooling environment, use Dynamic Monitoring Service (DMS) metrics. If DMS is not available, then use the <code dir="ltr">connection.setClientInfo</code> method. For example:</p>
<pre dir="ltr">
connection.setClientInfo("E2E_CONTEXT.CLIENT_IDENTIFIER", "appuser"); 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNOCI080" href="../../appdev.112/e10646/oci08sca.htm#LNOCI080"><span class="italic">Oracle Call Interface Programmer's Guide</span></a> about how the <code dir="ltr">OCI_ATTR_CLIENT_IDENTIFIER</code> user session handle attribute is used in middle-tier applications</p>
</li>
<li>
<p><a class="olink JJDBC" href="../../java.112/e16548/toc.htm"><span class="italic">Oracle Database JDBC Developer's Guide</span></a> for more information about configuring client connections using JDBC</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="CHDBBEFF"></a>
<div id="DBSEG99865" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using the DBMS_SESSION PL/SQL Package to Set and Clear the Client Identifier</h4>
<p>To use<a id="sthref460"></a><a id="sthref461"></a> the <code dir="ltr">DBMS_SESSION</code> package to set and clear the <code dir="ltr">CLIENT_IDENTIFIER</code> value on the middle tier, use the following interfaces:</p>
<ul>
<li>
<p><code dir="ltr">SET_IDENTIFIER</code></p>
</li>
<li>
<p><code dir="ltr">CLEAR_IDENTIFIER</code></p>
</li>
</ul>
<p>The middle tier uses <code dir="ltr">SET_IDENTIFIER</code> to associate the database session with a particular user or group. Then, the <code dir="ltr">CLIENT_IDENTIFIER</code> is an attribute of the session and can be viewed in session information.</p>
<p>If you plan<a id="sthref462"></a> to use the <a id="sthref463"></a><code dir="ltr">DBMS_SESSION.SET_IDENTIFIER</code> procedure, be aware that the <code dir="ltr"><a id="sthref464"></a>DBMS_APPLICATION_INFO.SET_CLIENT_INFO</code> procedure can overwrite the value of the client identifier. Typically, these values should be the same, so if <code dir="ltr">SET_CLIENT_INFO</code> is set, its value can be automatically propagated to the value set by <code dir="ltr">SET_IDENTIFIER</code> if the <a id="sthref465"></a><code dir="ltr">CLIENTID_OVERWRITE</code> event is set to <code dir="ltr">ON</code>.</p>
<p>To check the status of the <code dir="ltr">CLIENTID_OVERWRITE</code> event, log in to SQL*Plus and then enter the <code dir="ltr">SHOW PARAMETER</code> command. For example, assuming that <code dir="ltr">CLIENTID_OVERWRITE</code> is enabled:</p>
<pre dir="ltr">
SHOW PARAMETER EVENT

NAME                           TYPE               VALUE
------------------------------ ------------------ ------------------
event                          string             clientid_overwrite
</pre>
<p>To enable the <code dir="ltr">CLIENTID_OVERWRITE</code> event system-wide, connect to SQL*Plus as <code dir="ltr">SYS</code> using the <code dir="ltr">SYSDBA</code> privilege, and then enter the following <code dir="ltr">ALTER SYSTEM</code> statement:</p>
<pre dir="ltr">
ALTER SYSTEM SET EVENTS 'CLIENTID_OVERWRITE';
</pre>
<p>Or, enter the following line in your <code dir="ltr">init.ora</code> file:</p>
<pre dir="ltr">
event="clientid_overwrite"
</pre>
<p>Then restart the database. To disable the <code dir="ltr">CLIENTID_OVERWRITE</code> event, log in to SQL*Plus as <code dir="ltr">SYS</code> with the <code dir="ltr">SYSDBA</code> privilege, and then run the following <code dir="ltr">ALTER SYSTEM</code> statement:</p>
<pre dir="ltr">
ALTER SYSTEM SET EVENTS 'CLIENTID_OVERWRITE OFF';
</pre>
<p>If you prefer to change the <code dir="ltr">CLIENTID_OVERWRITE</code> value for the session only, then use the <code dir="ltr">ALTER SESSION</code> statement.</p>
<p>Afterwards, if you set the client identifier using the <code dir="ltr">DBMS_APPLICATION_INFO.SET_CLIENT_INFO</code> procedure, you must then run <code dir="ltr">DBMS_SESSION.SET_IDENTIFIER</code> so that the client identifier settings are the same.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="app_context.htm#CIHFJHCG">"Using Global Application Contexts"</a> for information about using client identifiers in a global application context</p>
</li>
<li>
<p><a class="olink ARPLS054" href="../../appdev.112/e40758/d_sessio.htm#ARPLS054"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code dir="ltr">DBMS_SESSION</code> package</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDHBIDH"></a>
<div id="DBSEG99866" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Finding Information About User Authentication</h2>
<p><a href="#CHDEIHDA">Table 3-3</a> lists <a id="sthref466"></a>data <a id="sthref467"></a>dictionary views that contain information about user authentication. For detailed information about these views, see <a class="olink REFRN" href="../../server.112/e40402/toc.htm"><span class="italic">Oracle Database Reference</span></a>.</p>
<div id="DBSEG99867" class="tblhruleformal">
<p class="titleintable"><a id="sthref468"></a><a id="CHDEIHDA"></a>Table 3-3 Data Dictionary Views That Describe User Authentication</p>
<table class="cellalignment2250" title="Data Dictionary Views That Describe User Authentication" summary="Data dictionary views that describe authentication" dir="ltr">
<thead>
<tr class="cellalignment2244">
<th class="cellalignment2251" id="r1c1-t39">View</th>
<th class="cellalignment2251" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r2c1-t39" headers="r1c1-t39">
<p><code dir="ltr">DBA_PROFILES</code></p>
</td>
<td class="cellalignment2252" headers="r2c1-t39 r1c2-t39">
<p>Displays information about profiles, including their settings and limits.</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r3c1-t39" headers="r1c1-t39">
<p><code dir="ltr">DBA_ROLES</code></p>
</td>
<td class="cellalignment2252" headers="r3c1-t39 r1c2-t39">
<p>Displays the kind of authentication used for a database role to log in to the database, such as <code dir="ltr">NONE</code> or <code dir="ltr">GLOBAL</code> (query the <code dir="ltr">AUTHENTICATION_TYPE</code> column)</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r4c1-t39" headers="r1c1-t39">
<p><code dir="ltr">DBA_USERS</code></p>
</td>
<td class="cellalignment2252" headers="r4c1-t39 r1c2-t39">
<p>Among other user information, displays the following:</p>
<ul>
<li>
<p>The kind of authentication the user used to log in to the database, such as <code dir="ltr">PASSWORD</code> or <code dir="ltr">EXTERNAL</code> (<code dir="ltr">AUTHENTICATION_TYPE</code> column)</p>
</li>
<li>
<p>The release in which the user created his or her password (<code dir="ltr">PASSWORD_VERSIONS</code> column)</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r5c1-t39" headers="r1c1-t39">
<p><code dir="ltr">DBA_USERS_WITH_DEFPWD</code></p>
</td>
<td class="cellalignment2252" headers="r5c1-t39 r1c2-t39">
<p>Displays whether the user account password is a default password</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r6c1-t39" headers="r1c1-t39">
<p><code dir="ltr">PROXY_USERS</code></p>
</td>
<td class="cellalignment2252" headers="r6c1-t39 r1c2-t39">
<p>Displays users who are currently authorized to connect through a middle tier</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r7c1-t39" headers="r1c1-t39">
<p><code dir="ltr">V$DBLINK</code></p>
</td>
<td class="cellalignment2252" headers="r7c1-t39 r1c2-t39">
<p>Displays user accounts for existing database links (<code dir="ltr">DB_LINK</code>, <code dir="ltr">OWNER_ID</code> columns)</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r8c1-t39" headers="r1c1-t39">
<p><code dir="ltr">V$SESSION</code></p>
</td>
<td class="cellalignment2252" headers="r8c1-t39 r1c2-t39">
<p>Querying the <code dir="ltr">USERNAME</code> column displays the concurrently logged in users</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2243">
<tr>
<td class="cellalignment2252">
<table class="cellalignment2248">
<tr>
<td class="cellalignment2247"><a href="users.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2247"><a href="authorization.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2254">
<table class="cellalignment2246">
<tr>
<td class="cellalignment2247"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2247"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2247"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2247"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2247"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2247"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
