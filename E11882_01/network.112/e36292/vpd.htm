<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using Oracle Virtual Private Database to&nbsp;Control&nbsp;Data Access</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1090" />
<meta name="dcterms.created" content="2017-01-17T12:37:47Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Security Guide" />
<meta name="dcterms.identifier" content="E36292-09" />
<meta name="dcterms.isVersionOf" content="DBSEG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="app_context.htm" title="Previous" type="text/html" />
<link rel="Next" href="data_encryption.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e36292.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">14/19</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='vpd'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=100,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote&nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><div id="footnote"><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/div><\/body><\/html>');
    msg.document.close();
    setTimeout(function() { var height = msg.document.getElementById('footnote').offsetHeight; msg.resizeTo(598, height + 100); }, 100);
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="DBSEG007" class="chapter"><a id="CIHBAJGI"></a>
<h1 class="chapter"><span class="secnum">7</span> Using Oracle Virtual Private Database to&nbsp;Control&nbsp;Data Access</h1>
<p>This chapter contains:</p>
<ul>
<li>
<p><a href="#CIHHDHGD">About Oracle Virtual Private Database</a></p>
</li>
<li>
<p><a href="#i1009600">Components of an Oracle Virtual Private Database Policy</a></p>
</li>
<li>
<p><a href="#CIHHGFAD">Configuring an Oracle Virtual Private Database Policy</a></p>
</li>
<li>
<p><a href="#i1008294">Tutorials: Creating Oracle Virtual Private Database Policies</a></p>
</li>
<li>
<p><a href="#CIHIDHFC">How Oracle Virtual Private Database Works with Other Oracle Features</a></p>
</li>
<li>
<p><a href="#CIHJGHDE">Finding Information About Oracle Virtual Private Database Policies</a></p>
</li>
</ul>
<a id="CIHHDHGD"></a>
<div id="DBSEG80081" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">About Oracle Virtual Private Database</h2>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CIHCBCFJ">What Is Oracle Virtual Private Database?</a></p>
</li>
<li>
<p><a href="#CIHJECAH">Benefits of Using Oracle Virtual Private Database Policies</a></p>
</li>
<li>
<p><a href="#CIHGHGEF">Which Privileges Are Used to Run Oracle Virtual Private Database Policy Functions?</a></p>
</li>
<li>
<p><a href="#CIHDEEBI">Using Oracle Virtual Private Database with an Application Context</a></p>
</li>
</ul>
<a id="CIHCBCFJ"></a>
<div id="DBSEG235" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">What Is Oracle Virtual Private Database?</h3>
<p>Oracle Virtual Private Database (VPD) enables you to create security policies to control database access at the row and column level. Essentially, Oracle Virtual Private Database adds a dynamic <code >WHERE</code> clause to a SQL statement that is issued against the table, view, or synonym to which an Oracle Virtual Private Database security policy was applied.</p>
<p>Oracle<a id="sthref1329"></a> Virtual Private Database enforces security, to a fine level of granularity, directly on database tables, views, or synonyms. Because you attach security policies directly to these database objects, and the policies are automatically applied whenever a user accesses data, there is no way to bypass security.</p>
<p>When a user directly or indirectly accesses a table, view, or synonym that is protected with an Oracle Virtual Private Database policy, Oracle Database dynamically modifies the SQL statement of the user. This modification creates a <code dir="ltr">WHERE</code> condition (called a predicate) returned by a function implementing the security policy. Oracle Database modifies the statement dynamically, transparently to the user, using any condition that can be expressed in or returned by a function. You can apply Oracle Virtual Private Database policies to <code dir="ltr">SELECT</code>, <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, <code dir="ltr">INDEX</code>, and <code dir="ltr">DELETE</code> statements.</p>
<p>For example, suppose a user performs the following query:</p>
<pre dir="ltr">
SELECT * FROM OE.ORDERS;
</pre>
<p>The Oracle Virtual Private Database policy dynamically appends the statement with a <code dir="ltr">WHERE</code> clause. For example:</p>
<pre dir="ltr">
SELECT * FROM OE.ORDERS 
 WHERE SALES_REP_ID = 159;
</pre>
<p>In this example, the user can only view orders by Sales Representative 159.</p>
<p>If you want to filter the user based on the session information of that user, such as the ID of the user, then you can create the <code dir="ltr">WHERE</code> clause to use an application context. For example:</p>
<pre dir="ltr">
SELECT * FROM OE.ORDERS 
 WHERE SALES_REP_ID = SYS_CONTEXT('USERENV','SESSION_USER'); 
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle Virtual Private Database does not support filtering for DDLs, such as <code dir="ltr">TRUNCATE</code> or <code dir="ltr">ALTER TABLE</code> statements.</div>
</div>
<!-- class="sect2" -->
<a id="CIHJECAH"></a>
<div id="DBSEG236" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Benefits of Using Oracle Virtual Private Database Policies</h3>
<p><a id="sthref1330"></a>Oracle Virtual Private Database policies provide the following benefits:</p>
<ul>
<li>
<p><a href="#i1008336">Basing Security Policies on Database Objects Rather Than Applications</a></p>
</li>
<li>
<p><a href="#i1008361">Controlling How Oracle Database Evaluates Policy Functions</a></p>
</li>
</ul>
<a id="i1008336"></a>
<div id="DBSEG237" class="sect3">
<h4 class="sect3">Basing Security Policies on Database Objects Rather Than Applications</h4>
<p><a id="sthref1331"></a>Attaching Oracle Virtual Private Database <a id="sthref1332"></a>security policies to database tables, views, or synonyms, rather than implementing access controls in all your applications, provides the following benefits:</p>
<ul>
<li>
<p><span class="bold">Security.</span> Associating a policy with a database table, view, or synonym can solve a potentially serious application security problem. Suppose a user is authorized to use an application, and then drawing on the privileges associated with that application, wrongfully modifies the database by using an ad hoc query tool, such as SQL*Plus. By attaching security policies directly to tables, views, or synonyms, fine-grained access control ensures that the same security is in force, no matter how a user accesses the data.</p>
</li>
<li>
<p><span class="bold">Simplicity.</span> You add the security policy to a table, view, or synonym only once, rather than repeatedly adding it to each of your table-based, view-based, or synonym-based applications.</p>
</li>
<li>
<p><span class="bold">Flexibility.</span> You can have one security policy for <code dir="ltr">SELECT</code> statements, another for <code dir="ltr">INSERT</code> statements, and still others for <code dir="ltr">UPDATE</code> and <code dir="ltr">DELETE</code> statements. For example, you might want to enable Human Resources clerks to have <code dir="ltr">SELECT</code> privileges for all employee records in their division, but to update only salaries for those employees in their division whose last names begin with <code dir="ltr">A</code> through <code dir="ltr">F</code>. Furthermore, you can create multiple policies for each table, view, or synonym.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1008361"></a>
<div id="DBSEG238" class="sect3">
<h4 class="sect3">Controlling How Oracle Database Evaluates Policy Functions</h4>
<p>Running policy functions multiple times can affect performance. You <a id="sthref1333"></a>can <a id="sthref1334"></a>control the performance of policy functions by configuring how Oracle Database caches the Oracle Virtual Private Database predicates. The following options are available:</p>
<ul>
<li>
<p>Evaluate the policy once for each query (static policies).</p>
</li>
<li>
<p>Evaluate the policy only when an application context within the policy function changes (context-sensitive policies).</p>
</li>
<li>
<p>Evaluate the policy each time it is run (dynamic policies).</p>
</li>
</ul>
<p>See <a href="#CIHGDGAI">"Optimizing Performance by Using Oracle Virtual Private Database Policy Types"</a> for information configuring these policy types.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHGHGEF"></a>
<div id="DBSEG239" class="sect2">
<h3 class="sect2">Which Privileges Are Used to Run Oracle Virtual Private Database Policy Functions?</h3>
<p>For greater security, the <a id="sthref1335"></a>Oracle <a id="sthref1336"></a>Virtual <a id="sthref1337"></a>Private <a id="sthref1338"></a>Database <a id="sthref1339"></a>policy <a id="sthref1340"></a>function runs as if it had been declared with definer's rights. Do not declare it as invoker's rights because this can confuse yourself and other users who maintain the code.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS00809" href="../../appdev.112/e25519/subprograms.htm#LNPLS00809"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for detailed information about definer's rights</div>
</div>
<!-- class="sect2" -->
<a id="CIHDEEBI"></a>
<div id="DBSEG240" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using Oracle Virtual Private Database with an Application Context</h3>
<p>You can <a id="sthref1341"></a><a id="sthref1342"></a>use application contexts with Oracle Virtual Private Database policies. When you create an application context, it securely caches user information. Only the designated application package can set the cached environment. It cannot be changed by the user or outside the package. In addition, because the data is cached, performance is increased. <a href="app_context.htm#CIHHBHEF">Chapter 6, "Using Application Contexts to&nbsp;Retrieve&nbsp;User&nbsp;Information"</a> describes application contexts in detail.</p>
<p>For example, suppose you want to base access to the <code dir="ltr">ORDERS_TAB</code> table on the customer ID number. Rather than querying the customer ID number for a logged-in user each time you need it, you could store the number in the application context. Then, the customer number is available in the session when you need it.</p>
<p>Application contexts are especially helpful if your security policy is based on multiple security attributes. For example, if a policy function bases a <code dir="ltr">WHERE</code> predicate on four attributes (such as employee number, cost center, position, spending limit), then multiple subqueries must execute to retrieve this information. Instead, if this data is available through an application context, then performance is much faster.</p>
<p>You can use an <a id="sthref1343"></a>application context to return the correct security policy, enforced through a predicate. For example, consider an order entry application that enforces the following rules: customers only see their own orders, and clerks see all orders for all customers. These are two different policies. You could define an application context with a <code dir="ltr">position</code> attribute, and this attribute could be accessed within the policy function to return the correct predicate, depending on the value of the attribute. Thus, you can enable a user in the <code dir="ltr">clerk</code> position to retrieve all orders, but a user in the <code dir="ltr">customer</code> position can see only those records associated with that particular user.</p>
<p>To design a fine-grained access control policy that returns a specific predicate for an attribute, you need to access the application context within the function that implements the policy. For example, suppose you want to limit customers to seeing only their own records. The user performs the following query:</p>
<pre dir="ltr">
SELECT * FROM orders_tab
</pre>
<p>Fine-grained access control dynamically modifies this query to include the following <code dir="ltr">WHERE</code> predicate:</p>
<pre dir="ltr">
SELECT * FROM orders_tab 
  WHERE custno = SYS_CONTEXT ('order_entry', 'cust_num');
</pre>
<p>Continuing with the preceding example, suppose you have 50,000 customers, and you do not want to have a different predicate returned for each customer. Customers all share the same <code dir="ltr">WHERE</code> predicate, which prescribes that they can only see their own orders. It is merely their customer numbers that are different.</p>
<p>Using <a id="sthref1344"></a><a id="sthref1345"></a>application context, you can return one <code dir="ltr">WHERE</code> predicate within a policy function that applies to 50,000 customers. As a result, there is one shared <a id="sthref1346"></a><a id="sthref1347"></a>cursor that executes differently for each customer, because the customer number is evaluated at execution time. This value is different for every customer. Use of application context in this case provides optimum performance, and at row-level security.</p>
<p>The <code dir="ltr">SYS_CONTEXT</code> function works much like a bind variable; only the <code dir="ltr">SYS_CONTEXT</code> arguments are constants.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1009600"></a>
<div id="DBSEG241" class="sect1">
<h2 class="sect1">Components of an Oracle Virtual Private Database Policy</h2>
<p>To <a id="sthref1348"></a>implement Oracle Virtual Private Database, you must create a function to generate the dynamic <code dir="ltr">WHERE</code> clause, and a policy to attach this function to the objects that you want to protect.</p>
<ul>
<li>
<p><a href="#CIHBEIFC">Creating a Function to Generate the Dynamic WHERE Clause</a></p>
</li>
<li>
<p><a href="#CIHGGBBC">Creating a Policy to Attach the Function to the Objects You Want to Protect</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CIHGHGEF">"Which Privileges Are Used to Run Oracle Virtual Private Database Policy Functions?"</a></p>
</li>
<li>
<p><a href="#i1008294">"Tutorials: Creating Oracle Virtual Private Database Policies"</a></p>
</li>
</ul>
</div>
<a id="CIHBEIFC"></a>
<div id="DBSEG242" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating a Function to Generate the Dynamic WHERE Clause</h3>
<p><a id="sthref1349"></a>To generate the dynamic <code dir="ltr">WHERE</code> clause <a id="sthref1350"></a>(predicate), you must create a function (not a procedure) that defines the restrictions that you want to enforce. Usually, the security administrator creates this function in his or her own schema. For more complex behavior, such as including calls to other functions or adding checks to track failed logon attempts, create these functions within a package.</p>
<p>The function must have the following behavior:</p>
<ul>
<li>
<p><span class="bold">It must take as arguments a schema name and an object (table, view, or synonym) name as inputs.</span> Define input parameters to hold this information, but do not specify the schema and object name themselves within the function. The policy that you create with the <code dir="ltr">DBMS_RLS</code> package (described in <a href="#CIHGGBBC">"Creating a Policy to Attach the Function to the Objects You Want to Protect"</a>) provides the names of the schema, and object to which the policy will apply. You must create the parameter for the schema first, followed by the parameter for the object.</p>
</li>
<li>
<p><span class="bold">It must provide a return value for the WHERE clause predicate that will be generated.</span> The return value for the <code dir="ltr">WHERE</code> clause is always a <code dir="ltr">VARCHAR2</code> data type.</p>
</li>
<li>
<p><span class="bold">It must generate a valid WHERE clause.</span> This code can be as basic as the example in <a href="#CIHIFFDE">"Tutorial: Creating a Simple Oracle Virtual Private Database Policy"</a>, in that its <code dir="ltr">WHERE</code> clause is the same for all users who log on.</p>
<p>But in most cases, you may want to design the <code dir="ltr">WHERE</code> clause to be different for each user, each group of users, or each application that accesses the objects you want to protect. For example, if a manager logs in, the <code dir="ltr">WHERE</code> clause can be specific to the rights of that particular manager. You can do this by incorporating an application context, which accesses user session information, into the <code dir="ltr">WHERE</code> clause generation code. <a href="#i1006344">"Tutorial: Implementing a Policy with a Database Session-Based Application Context"</a> demonstrates how to create an Oracle Virtual Private Database policy that uses an application context.</p>
<p>You can create Oracle Virtual Private Database functions that do not use an application context, but an application context creates a much stronger Oracle Virtual Private Database policy, by securely basing user access on the session attributes of that user, such as the user ID. <a href="app_context.htm#CIHHBHEF">Chapter 6, "Using Application Contexts to&nbsp;Retrieve&nbsp;User&nbsp;Information"</a> discusses different types of application contexts in detail.</p>
<p>In addition, you can embed C or Java calls to access operating system information or to return <code dir="ltr"><a id="sthref1351"></a>WHERE</code> clauses from an operating system file or other source.</p>
</li>
<li>
<p><span class="bold">It must not select from a table within the associated policy function.</span> Although you can define a policy against a table, you cannot select that table from within the policy that was defined against the table.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you plan to run the function across different editions, you can control the results of the function: whether the results are uniform across all editions, or specific to the edition in which the function is run. See <a href="app_context.htm#CHDDFGJB">"How Editions Affects the Results of a Global Application Context PL/SQL Package"</a> for more information.</div>
</div>
<!-- class="sect2" -->
<a id="CIHGGBBC"></a>
<div id="DBSEG243" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating a Policy to Attach the Function to the Objects You Want to Protect</h3>
<p>After you create the function, you need to create an Oracle Virtual Private Database policy that associates the function with a table, view, or synonym. You create the policy by using the <code dir="ltr">DBMS_RLS</code> package. If you are not <code dir="ltr">SYS</code>, then you must be granted <code dir="ltr">EXECUTE</code> privileges to use the <code dir="ltr">DBMS_RLS</code> package. This package contains procedures that enable you to manage the policy and set fine-grained access control. For example, to attach the policy to a table, you use the <code dir="ltr">DBMS_RLS.ADD_POLICY</code> procedure. Within this setting, you set fine-grained access control, such as setting the policy to go into effect when a user issues a <code dir="ltr">SELECT</code> or <code dir="ltr">UPDATE</code> statement on the table or view.</p>
<p>The combination of creating the function and then applying it to a table or view is referred to as creating the Oracle Virtual Private Database policy.</p>
<p><a href="#i1008294">"Tutorials: Creating Oracle Virtual Private Database Policies"</a> provides examples of how to create Virtual Private Database policies. See <a href="#CIHHGFAD">"Configuring an Oracle Virtual Private Database Policy"</a> for detailed information.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHHGFAD"></a>
<div id="DBSEG244" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Configuring an Oracle Virtual Private Database Policy</h2>
<p><a id="ABC7960797"></a>This section contains:</p>
<ul>
<li>
<p><a href="#i1007660">About Oracle Virtual Private Database Policies</a></p>
</li>
<li>
<p><a href="#CIHGEBIB">Attaching a Policy to a Database Table, View, or Synonym</a></p>
</li>
<li>
<p><a href="#CIHFAJDC">Enforcing Policies on Specific SQL Statement Types</a></p>
</li>
<li>
<p><a href="#CIHDGJGD">Controlling the Display of Column Data with Policies</a></p>
</li>
<li>
<p><a href="#CIHCAEFA">Working with Oracle Virtual Private Database Policy Groups</a></p>
</li>
<li>
<p><a href="#CIHGDGAI">Optimizing Performance by Using Oracle Virtual Private Database Policy Types</a></p>
</li>
</ul>
<a id="i1007660"></a>
<div id="DBSEG245" class="sect2">
<h3 class="sect2">About Oracle Virtual Private Database Policies</h3>
<p><a id="sthref1352"></a>After you create a function that defines the actions of the Oracle Virtual Private Database <code dir="ltr">WHERE</code> clause, you need to associate this function with the database table to which the VPD action applies. You can do this by configuring an Oracle Virtual Private Database policy. The policy itself is a mechanism for managing the Virtual Private Database function. The policy also enables you to add fine-grained access control, such as specifying the types of SQL statements or particular table columns the policy affects. When a user tries to access the data in this database object, the policy goes into effect automatically.</p>
<p>This section describes commonly used ways of attaching policies to tables, views, and synonyms. To manage an Oracle Virtual Private Database policy, you use the <code dir="ltr"><a id="sthref1353"></a>DBMS_RLS</code> package, which is described in detail in <a class="olink ARPLS052" href="../../appdev.112/e40758/d_rls.htm#ARPLS052"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
<p><a href="#g1015641">Table 7-1</a> lists the procedures in the <code dir="ltr">DBMS_RLS</code> package.</p>
<div id="DBSEG246" class="tblhruleformal">
<p class="titleintable"><a id="sthref1354"></a><a id="g1015641"></a>Table 7-1 DBMS_RLS Procedures</p>
<table class="cellalignment2250" title="DBMS_RLS Procedures" summary="This table lists the procedures that have been defined for the DBMS_RLS package and their purpose." dir="ltr">
<thead>
<tr class="cellalignment2244">
<th class="cellalignment2251" id="r1c1-t6">Procedure</th>
<th class="cellalignment2251" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r2c1-t6" headers="r1c1-t6">
<p><span class="bold">For Handling Individual Policies</span></p>
</td>
<td class="cellalignment2252" headers="r2c1-t6 r1c2-t6">&nbsp;</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DBMS_RLS.<a id="sthref1355"></a>ADD_POLICY</code></p>
</td>
<td class="cellalignment2252" headers="r3c1-t6 r1c2-t6">
<p>Adds a policy to a table, view, or synonym</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DBMS_RLS.<a id="sthref1356"></a>ENABLE_POLICY</code></p>
</td>
<td class="cellalignment2252" headers="r4c1-t6 r1c2-t6">
<p>Enables (or disables) a policy you previously added to a table, view, or synonym</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r5c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DBMS_RLS.<a id="sthref1357"></a>REFRESH_POLICY</code></p>
</td>
<td class="cellalignment2252" headers="r5c1-t6 r1c2-t6">
<p>Invalidates cursors associated with nonstatic policies</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r6c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DBMS_RLS.<a id="sthref1358"></a>DROP_POLICY</code></p>
</td>
<td class="cellalignment2252" headers="r6c1-t6 r1c2-t6">
<p>To drop a policy from a table, view, or synonym</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r7c1-t6" headers="r1c1-t6">
<p><span class="bold">For Handling Grouped Policies</span></p>
</td>
<td class="cellalignment2252" headers="r7c1-t6 r1c2-t6">&nbsp;</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r8c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DBMS_RLS.<a id="sthref1359"></a>CREATE_POLICY_GROUP</code></p>
</td>
<td class="cellalignment2252" headers="r8c1-t6 r1c2-t6">
<p>Creates a policy group</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r9c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DBMS_RLS.<a id="sthref1360"></a>DELETE_POLICY_GROUP</code></p>
</td>
<td class="cellalignment2252" headers="r9c1-t6 r1c2-t6">
<p>Drops a policy group</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r10c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DBMS_RLS.<a id="sthref1361"></a>ADD_GROUPED_POLICY</code></p>
</td>
<td class="cellalignment2252" headers="r10c1-t6 r1c2-t6">
<p>Adds a policy to the specified policy group</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r11c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DBMS_RLS.<a id="sthref1362"></a>ENABLE_GROUPED_POLICY</code></p>
</td>
<td class="cellalignment2252" headers="r11c1-t6 r1c2-t6">
<p>Enables a policy within a group</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r12c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DBMS_RLS.<a id="sthref1363"></a>REFRESH_GROUPED_POLICY</code></p>
</td>
<td class="cellalignment2252" headers="r12c1-t6 r1c2-t6">
<p>Parses again the SQL statements associated with a refreshed policy</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r13c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DBMS_RLS.<a id="sthref1364"></a>DISABLE_GROUPED_POLICY</code></p>
</td>
<td class="cellalignment2252" headers="r13c1-t6 r1c2-t6">
<p>Disables a policy within a group</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r14c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DBMS_RLS.<a id="sthref1365"></a>DROP_GROUPED_POLICY</code></p>
</td>
<td class="cellalignment2252" headers="r14c1-t6 r1c2-t6">
<p>Drops a policy that is a member of the specified group</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r15c1-t6" headers="r1c1-t6">
<p><span class="bold">For Handling Application Contexts</span></p>
</td>
<td class="cellalignment2252" headers="r15c1-t6 r1c2-t6">&nbsp;</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r16c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DBMS_RLS.<a id="sthref1366"></a>ADD_POLICY_CONTEXT</code></p>
</td>
<td class="cellalignment2252" headers="r16c1-t6 r1c2-t6">
<p>Adds the context for the active application</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r17c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DBMS_RLS.<a id="sthref1367"></a>DROP_POLICY_CONTEXT</code></p>
</td>
<td class="cellalignment2252" headers="r17c1-t6 r1c2-t6">
<p>Drops the context for the application</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1009600">"Components of an Oracle Virtual Private Database Policy"</a> for a description of the type of function that you need to create to control user access to a database table, view, or synonym</p>
</li>
<li>
<p><a href="app_context.htm#CIHHBHEF">Chapter 6, "Using Application Contexts to&nbsp;Retrieve&nbsp;User&nbsp;Information"</a> if you plan to use application contexts in the Oracle Virtual Private Database policy (which in most cases, you would)</p>
</li>
<li>
<p><a href="#i1008294">"Tutorials: Creating Oracle Virtual Private Database Policies"</a> for examples of using application contexts in sample Oracle Virtual Private Database functions</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CIHGEBIB"></a>
<div id="DBSEG247" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Attaching a Policy to a Database Table, View, or Synonym</h3>
<p><a id="sthref1368"></a>To attach a policy to a table, view, or synonym, you use the <code dir="ltr">DBMS_RLS.ADD_POLICY</code> procedure. You need to specify the table, view, or synonym to which you are adding a policy, and a name for the policy. You can also specify other information, such as the types of statements the policy controls (<code dir="ltr">SELECT</code>, <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, <code dir="ltr">DELETE</code>, <code dir="ltr">CREATE INDEX</code>, or <code dir="ltr">ALTER INDEX</code>).</p>
<p><a href="#CIHDDEEA">Example 7-1</a> shows how to use <code dir="ltr">DBMS_RLS.ADD_POLICY</code> to attach an Oracle Virtual Private Database policy called <code dir="ltr">secure_update</code> to the <code dir="ltr">HR.EMPLOYEES</code> table. The function attached to the policy is <code dir="ltr">check_updates</code>.</p>
<div id="DBSEG248" class="example">
<p class="titleinexample"><a id="CIHDDEEA"></a>Example 7-1 Attaching a Simple Oracle Virtual Private Database Policy to a Table</p>
<pre dir="ltr">
BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; 'hr',
  object_name     =&gt; 'employees',
  policy_name     =&gt; 'secure_update',
  policy_function =&gt; 'check_updates',
...
</pre></div>
<!-- class="example" -->
<p>If the function was created inside a package, include the package name. For example:</p>
<pre dir="ltr">
 policy_function =&gt; 'pkg.check_updates',
...
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Although you can define a policy against a table, you cannot select that table from within the policy that was defined against the table.</div>
</div>
<!-- class="sect2" -->
<a id="CIHFAJDC"></a>
<div id="DBSEG249" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Enforcing Policies on Specific SQL Statement Types</h3>
<p>You <a id="sthref1369"></a><a id="sthref1370"></a>can enforce Oracle Virtual Private Database policies for <code dir="ltr">SELECT</code>, <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, <code dir="ltr">INDEX</code>, and <code dir="ltr">DELETE</code> statements. If you do not specify a statement type, by default, Oracle Database specifies <code dir="ltr">SELECT</code>, <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, and <code dir="ltr">DELETE</code>, but not <code dir="ltr">INDEX</code>. Enter any combination of these statement types by using the <code dir="ltr">statement_types</code> parameter in the <code dir="ltr">DBMS_RLS.ADD_POLICY</code> procedure. Enclose the list in a pair of single quotation marks.</p>
<p><a href="#CIHEBBHG">Example 7-2</a> shows an how to use the <code dir="ltr">statement_types</code> parameter to specify the <code dir="ltr">SELECT</code> and <code dir="ltr">INDEX</code> statements for a policy.</p>
<div id="DBSEG250" class="example">
<p class="titleinexample"><a id="CIHEBBHG"></a>Example 7-2 Specifying SQL Statement Types with DBMS_RLS.ADD_POLICY</p>
<pre dir="ltr">
BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; 'hr',
  object_name     =&gt; 'employees',
  policy_name     =&gt; 'secure_update',
  policy_function =&gt; 'check_updates',
  <span class="bold">statement_types =&gt; 'SELECT,INDEX'</span>);
END;
/
</pre></div>
<!-- class="example" -->
<p>When you specify the <code dir="ltr">statement_types</code> parameter, be aware of the following functionality:</p>
<ul>
<li>
<p><span class="bold">The application code affected by the Virtual Private Database policy can include the MERGE INTO statement.</span> <a id="sthref1371"></a>However, in the Virtual Private Database policy, you must ensure that the <code dir="ltr">statement_types</code> parameter includes all three of the <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, and <code dir="ltr">DELETE</code> statements for the policy to succeed. Alternatively, you can omit the <code dir="ltr">statement_types</code> parameter. (This functionality is available with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2).)</p>
</li>
<li>
<p><span class="bold">Be aware that a user who has privileges to maintain an index can see all the row data, even if the user does not have full table access under a regular query such as SELECT.</span> For example, a user can create a function-based index that contains a user-defined function with column values as its arguments. During index creation, Oracle Database passes column values of every row into the user function, making the row data available to the user who creates the index. You can enforce Oracle Virtual Private Database policies on index maintenance operations by specifying <code dir="ltr">INDEX</code> with the <code dir="ltr">statement_types</code> parameter.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIHDGJGD"></a>
<div id="DBSEG251" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Controlling the Display of Column Data with Policies</h3>
<p>You can create policies that enforce row-level security when a security-relevant column is referenced in a query.</p>
<ul>
<li>
<p><a href="#i1009519">Adding Policies for Column-Level Oracle Virtual Private Database</a></p>
</li>
<li>
<p><a href="#i1014678">Displaying Only the Column Rows Relevant to the Query</a></p>
</li>
<li>
<p><a href="#i1014682">Using Column Masking to Display Sensitive Columns as NULL Values</a></p>
</li>
</ul>
<a id="i1009519"></a>
<div id="DBSEG252" class="sect3">
<h4 class="sect3">Adding Policies for Column-Level Oracle Virtual Private Database</h4>
<p><a id="sthref1372"></a><a id="sthref1373"></a>Column-level <a id="sthref1374"></a><a id="sthref1375"></a>policies enforce row-level security when a query references a security-relevant column. You can apply a column-level Oracle Virtual Private Database policy to tables and views, but not to synonyms.</p>
<p>To apply the policy to a column, specify the security-relevant column by using the <code dir="ltr">SEC_RELEVANT_COLS</code> parameter of the <code dir="ltr">DBMS_RLS.ADD_POLICY</code> procedure. This parameter applies the security policy whenever the column is referenced, explicitly or implicitly, in a query.</p>
<p>For example, users who are not in a Human Resources department typically are allowed to view only their own Social Security numbers. A sales clerk initiates the following query:</p>
<pre dir="ltr">
SELECT fname, lname, ssn FROM emp;
</pre>
<p>The function implementing the security policy returns the predicate <code dir="ltr">ssn='my_ssn</code>'. Oracle Database rewrites the query and executes the following:</p>
<pre dir="ltr">
SELECT fname, lname, ssn FROM emp 
 WHERE ssn = 'my_ssn';
</pre>
<p><a href="#i1014790">Example 7-3</a> shows a Oracle Virtual Private Database policy in which sales department users cannot see the salaries of people outside the department (department number 30) of the sales department users. The relevant columns for this policy are <code dir="ltr">sal</code> and <code dir="ltr">comm</code>. First, the Oracle Virtual Private Database policy function is created, and then it is added by using the <code dir="ltr">DBMS_RLS</code> PL/SQL package.</p>
<div id="DBSEG253" class="example">
<p class="titleinexample"><a id="i1014790"></a>Example 7-3 Creating a Column-Level Oracle Virtual Private Database Policy</p>
<pre dir="ltr">
CREATE OR REPLACE FUNCTION hide_sal_comm (
 v_schema IN VARCHAR2, 
 v_objname IN VARCHAR2)

RETURN VARCHAR2 AS
con VARCHAR2 (200);

BEGIN
 con := 'deptno=30';
 RETURN (con);
END hide_sal_comm;
</pre>
<p>Then you configure the policy with the <code dir="ltr">DBMS_RLS.ADD_POLICY</code> procedure as follows:</p>
<pre dir="ltr">
BEGIN
 DBMS_RLS.ADD_POLICY (
  object_schema     =&gt; 'scott', 
  object_name       =&gt; 'emp',
  policy_name       =&gt; 'hide_sal_policy', 
  policy_function   =&gt; 'hide_sal_comm',
 <span class="bold"> sec_relevant_cols =&gt; 'sal,comm');</span>
END;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="i1014678"></a>
<div id="DBSEG254" class="sect3">
<h4 class="sect3">Displaying Only the Column Rows Relevant to the Query</h4>
<p>The <a id="sthref1376"></a>default behavior for column-level Oracle Virtual Private Database is to restrict the number of rows returned for a query that references columns containing sensitive information. You specify these security-relevant columns by using the <code dir="ltr">SEC_RELEVANT_COLUMNS</code> parameter of the <code dir="ltr">DBMS_RLS.ADD_POLICY</code> procedure, as shown in <a href="#i1014790">Example 7-3</a>.</p>
<p>For example, consider sales department users with the <code dir="ltr">SELECT</code> privilege on the <code dir="ltr">emp</code> table, which is protected with the column-level Oracle Virtual Private Database policy created in <a href="#i1014790">Example 7-3</a>. The user (for example, user <code dir="ltr">SCOTT</code>) runs the following query:</p>
<pre dir="ltr">
SELECT ENAME, d.dname, JOB, SAL, COMM 
 FROM emp e, dept d
 WHERE d.deptno = e.deptno;
</pre>
<p>The database returns the following rows:</p>
<pre dir="ltr">
ENAME      DNAME          JOB              SAL       COMM
---------- -------------- --------- ---------- ----------
ALLEN      SALES          SALESMAN        1600        300
WARD       SALES          SALESMAN        1250        500
MARTIN     SALES          SALESMAN        1250       1400
BLAKE      SALES          MANAGER         2850           
TURNER     SALES          SALESMAN        1500          0
JAMES      SALES          CLERK            950           
 
6 rows selected.
</pre>
<p>The only rows that are displayed are those that the user has privileges to access all columns in the row.</p>
</div>
<!-- class="sect3" -->
<a id="i1014682"></a>
<div id="DBSEG255" class="sect3">
<h4 class="sect3">Using Column Masking to Display Sensitive Columns as NULL Values</h4>
<p>If a query references a sensitive column, then the default action of column-level Oracle Virtual Private Database restricts the number of rows returned. With column-masking behavior, all rows display, even those that reference sensitive columns. However, the sensitive columns display as <code dir="ltr">NULL</code> values. To enable column-masking, set the <a id="sthref1377"></a><a id="sthref1378"></a><code dir="ltr">SEC_RELEVANT_COLS_opt</code> parameter of the <code dir="ltr">DBMS_RLS.ADD_POLICY</code> procedure.</p>
<p>For example, consider the results of the sales clerk query, described in the previous example. If column-masking is used, then instead of seeing only the row containing the details and Social Security number of the sales clerk, the clerk would see all rows from the <code dir="ltr">emp</code> table, but the <code dir="ltr">ssn</code> column values would be returned as <code dir="ltr">NULL</code>. Note that this behavior is fundamentally different from all other types of Oracle Virtual Private Database policies, which return only a subset of rows.</p>
<p>In contrast to the default action of column-level Oracle Virtual Private Database, column-masking displays all rows, but returns sensitive column values as <code dir="ltr">NULL</code>. To include column-masking in your policy, set the <code dir="ltr">SEC_RELEVANT_COLS_OPT</code> parameter of the <code dir="ltr">DBMS_RLS.ADD_POLICY</code> procedure to <code dir="ltr">DBMS_RLS.ALL_ROWS</code>.</p>
<p><a href="#i1014928">Example 7-4</a> shows column-level Oracle Virtual Private Database column-masking. It uses the same VPD policy as <a href="#i1014790">Example 7-3</a>, but with <a id="sthref1379"></a><a id="sthref1380"></a><a id="sthref1381"></a><code dir="ltr">sec_relevant_cols_opt</code> specified as <code dir="ltr">DBMS_RLS.ALL_ROWS</code>.</p>
<div id="DBSEG256" class="example">
<p class="titleinexample"><a id="i1014928"></a>Example 7-4 Adding a Column Masking to an Oracle Virtual Private Database Policy</p>
<pre dir="ltr">
BEGIN
 DBMS_RLS.ADD_POLICY(
   object_schema         =&gt; 'scott', 
   object_name           =&gt; 'emp',
   policy_name           =&gt; 'hide_sal_policy', 
   policy_function       =&gt; 'hide_sal_comm',
   sec_relevant_cols     =&gt;' sal,comm',
   sec_relevant_cols_opt =&gt; dbms_rls.ALL_ROWS);
END;
</pre>
<p>Assume that a sales department user with <code dir="ltr">SELECT</code> privilege on the <code dir="ltr">emp</code> table (such as user <code dir="ltr">SCOTT</code>) runs the following query:</p>
<pre dir="ltr">
SELECT ENAME, d.dname, job, sal, comm 
 FROM emp e, dept d
 WHERE d.deptno = e.deptno;
</pre>
<p>The database returns all rows specified in the query, but with certain values masked because of the Oracle Virtual Private Database policy:</p>
<pre dir="ltr">
ENAME      DNAME          JOB              SAL       COMM
---------- -------------- --------- ---------- ----------
CLARK      ACCOUNTING     MANAGER
KING       ACCOUNTING     PRESIDENT
MILLER     ACCOUNTING     CLERK
JONES      RESEARCH       MANAGER
FORD       RESEARCH       ANALYST
ADAMS      RESEARCH       CLERK
SMITH      RESEARCH       CLERK
SCOTT      RESEARCH       ANALYST
WARD       SALES          SALESMAN        1250        500
TURNER     SALES          SALESMAN        1500          0
ALLEN      SALES          SALESMAN        1600        300
JAMES      SALES          CLERK            950           
BLAKE      SALES          MANAGER         2850           
MARTIN     SALES          SALESMAN        1250       1400
 
14 rows selected.
</pre>
<p>The column-masking returned all rows requested by the sales user query, but made the <code dir="ltr">sal</code> and <code dir="ltr">comm</code> columns <code dir="ltr">NULL</code> for employees outside the sales department.</p>
<p><a id="sthref1382"></a><a id="sthref1383"></a>The following considerations apply to column-masking:</p>
</div>
<!-- class="example" -->
<ul>
<li>
<p>Column-masking applies only to <code dir="ltr">SELECT</code> statements.</p>
</li>
<li>
<p>Column-masking conditions generated by the policy function must be simple Boolean expressions, unlike regular Oracle Virtual Private Database predicates.</p>
</li>
<li>
<p>For applications that perform calculations, or do not expect <code dir="ltr">NULL</code> values, use standard column-level Oracle Virtual Private Database, specifying <code dir="ltr">SEC_RELEVANT_COLS</code> rather than the <code dir="ltr">SEC_RELEVANT_COLS_OPT</code> column-masking option.</p>
</li>
<li>
<p>Do not include columns of the object data type (including the <code dir="ltr">XMLtype</code>) in the <code dir="ltr">sec_relevant_cols</code> setting. This column type is not supported for the <code dir="ltr">sec_relevant_cols</code> setting.</p>
</li>
<li>
<p>Column-masking used with <code dir="ltr">UPDATE AS SELECT</code> updates only the columns that users are allowed to see.</p>
</li>
<li>
<p>For some queries, column-masking may prevent some rows from displaying. For example:</p>
<pre dir="ltr">
SELECT * FROM emp
 WHERE sal = 10;
</pre>
<p>Because the column-masking option was set, this query may not return rows if the <code dir="ltr">salary</code> column returns a <code dir="ltr">NULL</code> value.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHCAEFA"></a>
<div id="DBSEG257" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Working with Oracle Virtual Private Database Policy Groups</h3>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CIHFFIBD">About Oracle Virtual Private Database Policy Groups</a></p>
</li>
<li>
<p><a href="#i1007276">Creating a New Oracle Virtual Private Database Policy Group</a></p>
</li>
<li>
<p><a href="#i1007261">Designating a Default Policy Group with the SYS_DEFAULT Policy Group</a></p>
</li>
<li>
<p><a href="#CIHCDACJ">Establishing Multiple Policies for Each Table, View, or Synonym</a></p>
</li>
<li>
<p><a href="#i1007363">Validating the Application Used to Connect to the Database</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIHCIJAH">"Tutorial: Implementing an Oracle Virtual Private Database Policy Group"</a></div>
<a id="CIHFFIBD"></a>
<div id="DBSEG258" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About Oracle Virtual Private Database Policy Groups</h4>
<p>You can group multiple security policies together, and apply them to an application. <a id="sthref1384"></a>A policy group is a set of security policies that belong to an application. You can designate an <a id="sthref1385"></a>application context (known as a <span class="italic">driving context</span> or <span class="italic">policy context</span>) to indicate the policy group in effect. Then, when a user accesses the table, view, or synonym column, Oracle Database looks up the driving context to determine the policy group in effect. It enforces all the associated policies that belong to the policy group.</p>
<p><a id="sthref1386"></a>Policy groups are useful for situations where multiple applications with multiple security policies share the same table, view, or synonym. This enables you to identify those policies that should be in effect when the table, view, or synonym is accessed.</p>
<p>For example, in a hosting environment, Company A can host the <code dir="ltr">BENEFIT</code> table for Company B and Company C. The table is accessed by two different applications, Human Resources and Finance, with two different security policies. The Human Resources application authorizes users based on ranking in the company, and the Finance application authorizes users based on department. Integrating these two policies into the <code dir="ltr">BENEFIT</code> table requires joint development of policies between the two companies, which is not a feasible option. By defining an application context to drive the enforcement of a particular set of policies to the base objects, each application can implement a private set of security policies.</p>
<p>To do this, you organize security policies into groups. By referring to the application context, Oracle Database determines which group of policies should be in effect at run time. The server enforces all the policies that belong to that policy group.</p>
</div>
<!-- class="sect3" -->
<a id="i1007276"></a>
<div id="DBSEG259" class="sect3">
<h4 class="sect3">Creating a New Oracle Virtual Private Database Policy Group</h4>
<p><a id="sthref1387"></a>To add a policy to a table, view, or synonym, use the <code dir="ltr">DBMS_RLS.ADD_GROUPED_POLICY</code> procedure to specify the group to which the policy belongs. To specify which policies will be effective, you can add a driving context using the <code dir="ltr">DBMS_RLS.ADD_POLICY_CONTEXT</code> procedure. If the driving context returns an unknown policy group, then an error is returned.</p>
<p>If the driving context is not defined, then Oracle Database runs all policies. Likewise, if the driving context is <code dir="ltr">NULL</code>, then policies from all policy groups are enforced. An application accessing the data cannot bypass the security setup module (which sets up application context) to avoid any applicable policies.</p>
<p>You can apply multiple driving contexts to the same table, view, or synonym, and each of them will be processed individually. This enables you to configure multiple active sets of policies to be enforced.</p>
<p>Consider, for example, a hosting company that hosts Benefits and Financial applications, which share some database objects. Both applications are striped for hosting using a <code dir="ltr">SUBSCRIBER</code> policy in the <code dir="ltr">SYS_DEFAULT</code> policy group. Data access is partitioned first by subscriber ID, then by whether the user is accessing the Benefits or Financial applications (determined by a driving context). Suppose that Company A, which uses the hosting services, wants to apply a custom policy that relates only to its own data access. You could add an additional driving context (such as <code dir="ltr">COMPANY A SPECIAL</code>) to ensure that the additional, special policy group is applied for data access for Company A only. You would not apply this under the <code dir="ltr">SUBSCRIBER</code> policy, because the policy relates only to Company A, and it is more efficient to segregate the basic hosting policy from other policies.</p>
</div>
<!-- class="sect3" -->
<a id="i1007261"></a>
<div id="DBSEG260" class="sect3">
<h4 class="sect3">Designating a Default Policy Group with the SYS_DEFAULT Policy Group</h4>
<p><a id="sthref1388"></a><a id="sthref1389"></a>Within a group of security policies, you can designate one security policy to be the default security policy. <a id="sthref1390"></a>This is useful in situations where you partition security policies by application, so that they will be always be in effect. Default security policies allow developers to base security enforcement under all conditions, while partitioning security policies by application (using security groups) enables layering of additional, application-specific security on top of default security policies. To implement default security policies, you add the policy to the <code dir="ltr">SYS_DEFAULT</code> policy group.</p>
<p>Policies defined in this group for a particular table, view, or synonym are run with with the policy group specified by the driving context. As described earlier, a driving context is an application context that indicates the policy group in effect. The <code dir="ltr">SYS_DEFAULT</code> policy group may or may not contain policies. You cannot to drop the <code dir="ltr">SYS_DEFAULT</code> policy group. If you do, then Oracle Database displays an error.</p>
<p>If, to the <code dir="ltr">SYS_DEFAULT</code> policy group, you add policies associated with two or more objects, then each object will have a separate <code dir="ltr">SYS_DEFAULT</code> policy group associated with it. For example, the <code dir="ltr">emp</code> table in the <code dir="ltr">scott</code> schema has one <code dir="ltr">SYS_DEFAULT</code> policy group, and the <code dir="ltr">dept</code> table in the <code dir="ltr">scott</code> schema has a different <code dir="ltr">SYS_DEFAULT</code> policy group associated with it. Think of them as being organized in the tree structure as follows:</p>
<pre dir="ltr">
SYS_DEFAULT
  - policy1 (scott/emp)
  - policy3 (scott/emp)
SYS_DEFAULT
  - policy2 (scott/dept)
</pre>
<p>You can create policy groups with identical names. When you select a particular policy group, its associated schema and object name are displayed in the property sheet on the right side of the screen.</p>
</div>
<!-- class="sect3" -->
<a id="CIHCDACJ"></a>
<div id="DBSEG261" class="sect3">
<h4 class="sect3">Establishing Multiple Policies for Each Table, View, or Synonym</h4>
<p><a id="sthref1391"></a>You can establish several policies for the same table, view, or synonym. Suppose, for example, you have a base application for Order Entry, and each division of your company has its own rules for data access. You can add a division-specific policy function to a table without having to rewrite the policy function of the base application.</p>
<p>All policies applied to a table are enforced with <code dir="ltr">AND</code> syntax. If you have three policies applied to the <code dir="ltr">CUSTOMERS</code> table, then each policy is applied to the table. You can use policy groups and an application context to partition fine-grained access control enforcement so that different policies apply, depending upon which application is accessing data. This eliminates the requirement for development groups to collaborate on policies, and simplifies application development. You can also have a default policy group that is always applicable (for example, to enforce data separated by subscriber in a hosting environment).</p>
</div>
<!-- class="sect3" -->
<a id="i1007363"></a>
<div id="DBSEG262" class="sect3">
<h4 class="sect3">Validating the Application Used to Connect to the Database</h4>
<p><a id="sthref1392"></a>The <a id="sthref1393"></a>package implementing the driving context must correctly validate the application that is being used to connect to the database. Although Oracle Database checks the call stack to ensure that the package implementing the driving context sets context attributes, inadequate validation can still occur within the package.</p>
<p>For example, in applications where database users or enterprise users are known to the database, the user needs the <code dir="ltr">EXECUTE</code> privilege on the package that sets the driving context. Consider a user who knows that:</p>
<ul>
<li>
<p>The <code dir="ltr">BENEFITS</code> application enables more liberal access than the <code dir="ltr">HR</code> application.</p>
</li>
<li>
<p>The <code dir="ltr">setctx</code> procedure (which sets the correct policy group within the driving context) does not perform any validation to determine which application is actually connecting. That is, the procedure does not check either the IP address of the incoming connection (for a three-tier system) or the <code dir="ltr">proxy_user</code> attribute of the user session.</p>
</li>
</ul>
<p>This user could pass to the driving context package an argument setting the context to the more liberal <code dir="ltr">BENEFITS</code> policy group, and then access the <code dir="ltr">HR</code> application instead. Because the <code dir="ltr">setctx</code> does no further validation of the application, this user bypasses the more restrictive HR security policy.</p>
<p>By contrast, if you implement proxy authentication with Oracle Virtual Private Database, then you can determine the identity of the middle tier (and the application) that is connecting to the database on behalf of a user. The correct policy will be applied for each application to mediate data access.</p>
<p>For example, a developer using the proxy authentication feature could determine that the application (the middle tier) connecting to the database is <code dir="ltr">HRAPPSERVER</code>. The package that implements the driving context can thus verify whether the <code dir="ltr">proxy_user</code> in the user session is <code dir="ltr">HRAPPSERVER</code>. If so, then it can set the driving context to use the <code dir="ltr">HR</code> policy group. If <code dir="ltr">proxy_user</code> is not <code dir="ltr">HRAPPSERVER</code>, then it can deny access.</p>
<p>In this case, the following query is executed:</p>
<pre dir="ltr">
SELECT * FROM apps.benefit;
</pre>
<p>Oracle Database picks up policies from the default policy group (<code dir="ltr">SYS_DEFAULT</code>) and active namespace <code dir="ltr">HR</code>. The query is internally rewritten as follows:</p>
<pre dir="ltr">
SELECT * FROM apps.benefit 
 WHERE company = SYS_CONTEXT('ID','MY_COMPANY') 
 and SYS_CONTEXT('ID','TITLE') = 'MANAGER';
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHGDGAI"></a>
<div id="DBSEG14001" class="sect2">
<h3 class="sect2">Optimizing Performance by Using Oracle Virtual Private Database Policy Types</h3>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CIHIDAGH">About Oracle Virtual Private Database Policy Types</a></p>
</li>
<li>
<p><a href="#CIHJBICB">Using the Dynamic Policy Type to Automatically Rerun Policy Functions</a></p>
</li>
<li>
<p><a href="#CIHDAAAD">Using a Static Policy to Prevent Policy Functions from Rerunning for Each Query</a></p>
</li>
<li>
<p><a href="#CIHJFIHF">Using a Shared Static Policy to Share a Policy with Multiple Objects</a></p>
</li>
<li>
<p><a href="#CIHGECEA">When to Use Static and Shared Static Policies</a></p>
</li>
<li>
<p><a href="#CIHEJADF">Using a Context-Sensitive Policy for Predicates That Do Not Change After Parsing</a></p>
</li>
<li>
<p><a href="#CIHIDEJJ">Using a Shared Context Sensitive Policy to Share a Policy with Multiple Objects</a></p>
</li>
<li>
<p><a href="#CIHBIEGG">When to Use Context-Sensitive and Shared Context-Sensitive Policies</a></p>
</li>
<li>
<p><a href="#CIHHJFIF">Summary of the Five Oracle Virtual Private Database Policy Types</a></p>
</li>
</ul>
<a id="CIHIDAGH"></a>
<div id="DBSEG263" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About Oracle Virtual Private Database Policy Types</h4>
<p><a id="sthref1394"></a><a id="sthref1395"></a>You can optimize performance each time a policy runs by specifying a policy type for your policies. Policy types control how Oracle Database caches Oracle Virtual Private Database policy predicates. Consider setting a policy type for your policies, because the execution of policy functions can use a significant amount of system resources. Minimizing the number of times that a policy function can run optimizes database performance.</p>
<p>You can choose from five policy types: <code dir="ltr">DYNAMIC</code>, <code dir="ltr">STATIC</code>, <code dir="ltr">SHARED_STATIC</code>, <code dir="ltr">CONTEXT_SENSITIVE</code>, and <code dir="ltr">SHARED_CONTEXT_SENSITIVE</code>. These enable you to precisely specify how often a policy predicate should change. To specify the policy type, set the <code dir="ltr">policy_type</code> parameter of the <code dir="ltr">DBMS_RLS.ADD POLICY</code> procedure.</p>
</div>
<!-- class="sect3" -->
<a id="CIHJBICB"></a>
<div id="DBSEG264" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using the Dynamic Policy Type to Automatically Rerun Policy Functions</h4>
<p><a id="sthref1396"></a><a id="sthref1397"></a>The <code dir="ltr">DYNAMIC</code> policy type runs the policy function each time a user accesses the Virtual Private Database-protected database objects. If you do not specify a policy type in the <code dir="ltr">DBMS_RLS.ADD_POLICY</code> procedure, then, by default, your policy will be dynamic. You can specifically configure a policy to be dynamic by setting the <code dir="ltr">policy_type</code> parameter of the <code dir="ltr">DBMS_RLS.ADD_POLICY</code> procedure to <code dir="ltr">DYNAMIC</code>.</p>
<p>This policy type does not optimize database performance as the static and context sensitive policy types do. However, Oracle recommends that before you set policies as either static or context-sensitive, you should first test them as <a id="sthref1398"></a><a id="sthref1399"></a><code dir="ltr">DYNAMIC</code> policy types, which run every time. Testing policy functions as <code dir="ltr">DYNAMIC</code> policies first enables you to observe how the policy function affects each query, because nothing is cached. This ensures that the functions work properly before you enable them as static or context-sensitive policy types to optimize performance.</p>
<p>You can use the <code dir="ltr"><a id="sthref1400"></a><a id="sthref1401"></a>DBMS_UTILITY.GET_TIME</code> function to measure the start and end times for a statement to execute. For example:</p>
<pre dir="ltr">
<span class="bold">-- 1. Get the start time:</span>
SELECT DBMS_UTILITY.GET_TIME FROM DUAL;

  GET_TIME
----------
   2312721

<span class="bold">-- 2. Run the statement:</span>
SELECT COUNT(*) FROM HR.EMPLOYEES;

  COUNT(*)
----------
       107

<span class="bold">-- 3. Get the end time:</span>
SELECT DBMS_UTILITY.GET_TIME FROM DUAL;

  GET_TIME
----------
   2314319
</pre>
<p><a href="#CIHFIGFI">Example 7-5</a> shows how to create the <code dir="ltr">DYNAMIC</code> policy type.</p>
<div id="DBSEG265" class="example">
<p class="titleinexample"><a id="CIHFIGFI"></a>Example 7-5 Creating a DYNAMIC Policy with DBMS_RLS.ADD_POLICY</p>
<pre dir="ltr">
BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; 'hr',
  object_name     =&gt; 'employees',
  policy_name     =&gt; 'secure_update',
  policy_function =&gt; 'hide_fin',
  policy_type     =&gt; dbms_rls.DYNAMIC);
END;
/
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="auditing.htm#BCGEFJCD">"About Auditing Functions, Procedures, Packages, and Triggers"</a> for information about how Oracle Database audits the underlying policy function for dynamic policies</div>
</div>
<!-- class="sect3" -->
<a id="CIHDAAAD"></a>
<div id="DBSEG266" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using a Static Policy to Prevent Policy Functions from Rerunning for Each Query</h4>
<p><a id="sthref1402"></a>The static policy type enforces the same predicate for all users in the instance. Oracle Database stores static policy predicates in SGA, so policy functions do not rerun for each query. This results in faster performance.</p>
<p>You can enable static policies by setting the <code dir="ltr">policy_type</code> parameter of the <code dir="ltr">DBMS_RLS.ADD_POLICY</code> procedure to either <code dir="ltr">STATIC</code> or <code dir="ltr">SHARED_STATIC</code>, depending on whether or not you want the policy to be shared across multiple objects.</p>
<p><a href="#CIHHCGAH">Example 7-6</a> shows how to create the <code dir="ltr">STATIC</code> policy type.</p>
<div id="DBSEG267" class="example">
<p class="titleinexample"><a id="CIHHCGAH"></a>Example 7-6 Creating a STATIC Policy with DBMS_RLS.ADD_POLICY</p>
<pre dir="ltr">
BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; 'hr',
  object_name     =&gt; 'employees',
  policy_name     =&gt; 'secure_update',
  policy_function =&gt; 'hide_fin',
  policy_type     =&gt; dbms_rls.STATIC);
END;
/
</pre></div>
<!-- class="example" -->
<p>Each execution of the same cursor could produce a different row set for the same predicate, because the predicate may filter the data differently based on attributes such as <code dir="ltr">SYS_CONTEXT</code> or <code dir="ltr">SYSDATE</code>.</p>
<p>For example, suppose you enable a policy as either a <code dir="ltr">STATIC</code> or <code dir="ltr">SHARED_STATIC</code> policy type, which appends the following predicate to all queries made against policy protected database objects:</p>
<pre dir="ltr">
WHERE dept = SYS_CONTEXT ('hr_app','deptno')
</pre>
<p>Although the predicate does not change for each query, it applies to the query based on session attributes of the <code dir="ltr">SYS_CONTEXT</code>. In the case of the preceding example, the predicate returns only those rows where the department number matches the <code dir="ltr">deptno</code> attribute of the <code dir="ltr">SYS_CONTEXT</code>, which is the department number of the user who is querying the policy-protected database object.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When using shared static policies, ensure that the policy predicate does not contain attributes that are specific to a particular database object, such as a column name.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="auditing.htm#BCGEFJCD">"About Auditing Functions, Procedures, Packages, and Triggers"</a> for information about how Oracle Database audits the underlying policy function for static policies</div>
</div>
<!-- class="sect3" -->
<a id="CIHJFIHF"></a>
<div id="DBSEG268" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using a Shared Static Policy to Share a Policy with Multiple Objects</h4>
<p><a id="sthref1403"></a>If, for example, you wanted to apply the policy in <a href="#CIHHCGAH">Example 7-6</a> to a second table in the <code dir="ltr">HR</code> schema that may contain financial data that you want to side, you would use the <code dir="ltr">SHARED_STATIC</code> setting for both tables.</p>
<p><a href="#CIHCDAIF">Example 7-7</a> shows how to set the <code dir="ltr">SHARED_STATIC</code> policy type for two tables that share the same policy.</p>
<div id="DBSEG269" class="example">
<p class="titleinexample"><a id="CIHCDAIF"></a>Example 7-7 Creating a SHARED_STATIC Policy with DBMS_RLS.ADD_POLICY</p>
<pre dir="ltr">
<span class="bold">-- 1. Create a policy for the first table, employees:</span>
BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; 'hr',
  object_name     =&gt; 'employees',
  policy_name     =&gt; 'secure_update',
  policy_function =&gt; 'hide_fin',
  policy_type     =&gt; dbms_rls.SHARED_STATIC);
END;
/
<span class="bold">-- 2. Create a policy for the second table, fin_data:</span>
BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; 'hr',
  object_name     =&gt; 'fin_data',
  policy_name     =&gt; 'secure_update',
  policy_function =&gt; 'hide_fin',
  policy_type     =&gt; dbms_rls.SHARED_STATIC);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CIHGECEA"></a>
<div id="DBSEG270" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">When to Use Static and Shared Static Policies</h4>
<p><a id="sthref1404"></a><a id="sthref1405"></a>Static policies are ideal for environments where every query requires the same predicate and fast performance is essential, such as hosting environments. For these situations when the policy function appends the same predicate to every query, rerunning the policy function each time adds unnecessary overhead to the system. For example, consider a data warehouse that contains market research data for customer organizations that are competitors. The warehouse must enforce the policy that each organization can see only their own market research, which is expressed by the following predicate:</p>
<pre dir="ltr">
WHERE subscriber_id = SYS_CONTEXT('customer', 'cust_num')
</pre>
<p>Using <code dir="ltr"><a id="sthref1406"></a>SYS_CONTEXT</code> for the application context enables the database to dynamically change the rows that are returned. You do not need to rerun the function, so the predicate can be cached in the SGA, thus conserving system resources and improving performance.</p>
</div>
<!-- class="sect3" -->
<a id="CIHEJADF"></a>
<div id="DBSEG271" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using a Context-Sensitive Policy for Predicates That Do Not Change After Parsing</h4>
<p>In <a id="sthref1407"></a>contrast to static policies, context-sensitive policies do not always cache the predicate. With context-sensitive policies, the database assumes that the predicate will change after statement parse time. But if there is no change in local application context, Oracle Database does not rerun the policy function within the user session. If there was a change in context, then the database reruns the policy function to ensure that it captures any changes to the predicate since the initial parsing.</p>
<p>You can enable context-sensitive policies by setting the <code dir="ltr">policy_type</code> parameter of the <code dir="ltr">DBMS_RLS.ADD_POLICY</code> procedure to either <code dir="ltr">CONTEXT_SENSITIVE</code> or <code dir="ltr">SHARED_CONTEXT_SENSITIVE</code>.</p>
<p><a href="#CIHEAAEB">Example 7-8</a> shows how to create the <code dir="ltr">CONTEXT_SENSITIVE</code> policy type.</p>
<div id="DBSEG272" class="example">
<p class="titleinexample"><a id="CIHEAAEB"></a>Example 7-8 Creating a CONTEXT_SENSITIVE Policy with DBMS_RLS.ADD_POLICY</p>
<pre dir="ltr">
BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; 'hr',
  object_name     =&gt; 'employees',
  policy_name     =&gt; 'secure_update',
  policy_function =&gt; 'hide_fin',
  policy_type     =&gt; dbms_rls.CONTEXT_SENSITIVE);
END;
/
</pre></div>
<!-- class="example" -->
<p>Context-sensitive policies are useful when different predicates should apply depending on which user is executing the query. For example, consider the case where managers should have the predicate <code dir="ltr">WHERE group</code> set to <code dir="ltr">managers</code>, and employees should have the predicate <code dir="ltr">WHERE empno</code> set to <code dir="ltr">emp_id</code>.</p>
<p>Shared context-sensitive policies operate in the same way as regular context-sensitive policies, except they can be shared across multiple database objects. For this policy type, all objects can share the policy function from the UGA, where the predicate is cached until the local session context changes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When using shared context-sensitive policies, ensure that the policy predicate does not contain attributes that are specific to a particular database object, such as a column name.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="auditing.htm#BCGEFJCD">"About Auditing Functions, Procedures, Packages, and Triggers"</a> for information about how Oracle Database audits the underlying policy function for dynamic policies</div>
</div>
<!-- class="sect3" -->
<a id="CIHIDEJJ"></a>
<div id="DBSEG273" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using a Shared Context Sensitive Policy to Share a Policy with Multiple Objects</h4>
<p><a href="#CIHJJGGB">Example 7-9</a> <a id="sthref1408"></a>Ishows how to create two shared context sensitive policies that share a policy with multiple tables.</p>
<div id="DBSEG274" class="example">
<p class="titleinexample"><a id="CIHJJGGB"></a>Example 7-9 Creating a SHARED_CONTEXT_SENSITIVE Policy with DBMS_RLS.ADD_POLICY</p>
<pre dir="ltr">
<span class="bold">-- 1. Create a policy for the first table, employees:</span>
BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; 'hr',
  object_name     =&gt; 'employees',
  policy_name     =&gt; 'secure_update',
  policy_function =&gt; 'hide_fin',
  policy_type     =&gt; dbms_rls.SHARED_CONTEXT_SENSITIVE);
END;
/
<span class="bold">--2. Create a policy for the second table, fin_data:</span>
BEGIN
 DBMS_RLS.ADD_POLICY(
  object_schema   =&gt; 'hr',
  object_name     =&gt; 'fin_data',
  policy_name     =&gt; 'secure_update',
  policy_function =&gt; 'hide_fin',
  policy_type     =&gt; dbms_rls.SHARED_CONTEXT_SENSITIVE);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CIHBIEGG"></a>
<div id="DBSEG275" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">When to Use Context-Sensitive and Shared Context-Sensitive Policies</h4>
<p><a id="sthref1409"></a><a id="sthref1410"></a>Context-sensitive policies are useful when a predicate does not need to change for a user session, but the policy must enforce two or more different predicates for different users or groups. For example, consider a <code dir="ltr">sales_history</code> table with a single policy. This policy states that analysts can see only their own products and regional employees can see only their own region. In this case, the database must rerun the policy function each time the type of user changes. The performance gain is realized when a user can log in and issue several DML statements against the protected object without causing the server to rerun the policy function.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For session pooling where multiple clients share a database session, the middle tier must reset the context during client switches.<a id="sthref1411"></a></div>
</div>
<!-- class="sect3" -->
<a id="CIHHJFIF"></a>
<div id="DBSEG276" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Summary of the Five Oracle Virtual Private Database Policy Types</h4>
<p><a href="#CIHICBIE">Table 7-2</a> summarizes the types of policy types available. <a id="sthref1412"></a></p>
<div id="DBSEG277" class="tblhruleformalwidemax">
<p class="titleintable"><a id="sthref1413"></a><a id="CIHICBIE"></a>Table 7-2 DBMS_RLS.ADD_POLICY Policy Types</p>
<table class="cellalignment2250" title="DBMS_RLS.ADD_POLICY Policy Types" summary="This table lists the different policy types, explain when they execute, provide a usage example, and indicate whether they can be shared across multiple objects." dir="ltr">
<thead>
<tr class="cellalignment2244">
<th class="cellalignment2251" id="r1c1-t16">Policy Types</th>
<th class="cellalignment2251" id="r1c2-t16">When the Policy Function Executes</th>
<th class="cellalignment2251" id="r1c3-t16">Usage Example</th>
<th class="cellalignment2251" id="r1c4-t16">Shared Across Multiple Objects?</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r2c1-t16" headers="r1c1-t16">
<p><code dir="ltr">DYNAMIC</code></p>
</td>
<td class="cellalignment2252" headers="r2c1-t16 r1c2-t16">
<p>Policy function re-executes every time a policy-protected database object is accessed.</p>
</td>
<td class="cellalignment2252" headers="r2c1-t16 r1c3-t16">
<p>Applications where policy predicates must be generated for each query, such as time-dependent policies where users are denied access to database objects at certain times during the day</p>
</td>
<td class="cellalignment2252" headers="r2c1-t16 r1c4-t16">
<p>No</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r3c1-t16" headers="r1c1-t16">
<p><code dir="ltr">STATIC</code></p>
</td>
<td class="cellalignment2252" headers="r3c1-t16 r1c2-t16">
<p>Once, then the predicate is cached in the SGA<a id="sthref1414" href="#sthref1414" onclick='footdisplay(1,"Each execution of the same cursor could produce a different row set for the same predicate because the predicate may filter the data differently based on attributes such as \u003ccode dir=\"ltr\"\u003eSYS_CONTEXT\u003c/code\u003e or \u003ccode dir=\"ltr\"\u003eSYSDATE\u003c/code\u003e.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment2252" headers="r3c1-t16 r1c3-t16">
<p>View replacement</p>
</td>
<td class="cellalignment2252" headers="r3c1-t16 r1c4-t16">
<p>No</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r4c1-t16" headers="r1c1-t16">
<p><code dir="ltr">SHARED_STATIC</code></p>
</td>
<td class="cellalignment2252" headers="r4c1-t16 r1c2-t16">
<p>Same as <code dir="ltr">STATIC</code></p>
</td>
<td class="cellalignment2252" headers="r4c1-t16 r1c3-t16">
<p>Hosting environments, such as data warehouses where the same predicate must be applied to multiple database objects</p>
</td>
<td class="cellalignment2252" headers="r4c1-t16 r1c4-t16">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r5c1-t16" headers="r1c1-t16">
<p><code dir="ltr">CONTEXT_SENSITIVE</code></p>
</td>
<td class="cellalignment2252" headers="r5c1-t16 r1c2-t16">
<ul>
<li>
<p>At statement parse time</p>
</li>
<li>
<p>At statement execution time when the local application context changed since the last use of the cursor</p>
</li>
</ul>
</td>
<td class="cellalignment2252" headers="r5c1-t16 r1c3-t16">
<p>Three-tier, session pooling applications where policies enforce two or more predicates for different users or groups</p>
</td>
<td class="cellalignment2252" headers="r5c1-t16 r1c4-t16">
<p>No</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r6c1-t16" headers="r1c1-t16">
<p><code dir="ltr">SHARED_CONTEXT_SENSITIVE</code></p>
</td>
<td class="cellalignment2252" headers="r6c1-t16 r1c2-t16">
<p>First time the object is reference in a database session.</p>
<p>Predicates are cached in the private session memory UGA so policy functions can be shared among objects.</p>
</td>
<td class="cellalignment2252" headers="r6c1-t16 r1c3-t16">
<p>Same as <code dir="ltr">CONTEXT_SENSITIVE</code>, but multiple objects can share the policy function from the session UGA</p>
</td>
<td class="cellalignment2252" headers="r6c1-t16 r1c4-t16">
<p>Yes</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwidemax" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>Each execution of the same cursor could produce a different row set for the same predicate because the predicate may filter the data differently based on attributes such as <code dir="ltr">SYS_CONTEXT</code> or <code dir="ltr">SYSDATE</code>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008294"></a>
<div id="DBSEG278" class="sect1">
<h2 class="sect1">Tutorials: Creating Oracle Virtual Private Database Policies</h2>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CIHIFFDE">Tutorial: Creating a Simple Oracle Virtual Private Database Policy</a></p>
</li>
<li>
<p><a href="#i1006344">Tutorial: Implementing a Policy with a Database Session-Based Application Context</a></p>
</li>
<li>
<p><a href="#CIHCIJAH">Tutorial: Implementing an Oracle Virtual Private Database Policy Group</a></p>
</li>
</ul>
<a id="CIHIFFDE"></a>
<div id="DBSEG279" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Creating a Simple Oracle Virtual Private Database Policy</h3>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABIAEJI">About This Tutorial</a></p>
</li>
<li>
<p><a href="#CIHBBAHA">Step 1: Ensure That the OE User Account Is Active</a></p>
</li>
<li>
<p><a href="#CIHCAACD">Step 2: Create a Policy Function</a></p>
</li>
<li>
<p><a href="#CIHJDEDE">Step 3: Create the Oracle Virtual Private Database Policy</a></p>
</li>
<li>
<p><a href="#CIHEDHDJ">Step 4: Test the Policy</a></p>
</li>
<li>
<p><a href="#CIHEAJEB">Step 5: Remove the Components for This Tutorial</a></p>
</li>
</ul>
<a id="BABIAEJI"></a>
<div id="DBSEG562" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About This Tutorial</h4>
<p><a id="sthref1415"></a><a id="sthref1416"></a>Suppose you wanted to create a simple Oracle Virtual Private Database policy that limits access to all orders in the <code dir="ltr">OE.ORDERS</code> table that were created by Sales Representative 159. In essence, the policy translates the following statement:</p>
<pre dir="ltr">
SELECT * FROM OE.ORDERS;
</pre>
<p>To the following statement:</p>
<pre dir="ltr">
SELECT * FROM OE.ORDERS 
 WHERE SALES_REP_ID = 159;
</pre></div>
<!-- class="sect3" -->
<a id="CIHBBAHA"></a>
<div id="DBSEG280" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 1: Ensure That the OE User Account Is Active</h4>
<ol>
<li>
<p>Log on to SQL*Plus as user <code dir="ltr">SYSTEM</code> with the <code dir="ltr">SYSDBA</code> privilege.</p>
<pre dir="ltr">
sqlplus sys as sysdba
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Run the following <code dir="ltr">SELECT</code> statement on the <code dir="ltr">DBA_USERS</code> data dictionary view:</p>
<pre dir="ltr">
SELECT USERNAME, ACCOUNT_STATUS FROM DBA_USERS WHERE USERNAME = 'OE';
</pre>
<p>If the <code dir="ltr">DBA_USERS</code> view lists user <code dir="ltr">OE</code> as locked and expired, then enter the following statement to unlock the <code dir="ltr">OE</code> account and create a new password:</p>
<pre dir="ltr">
ALTER USER OE ACCOUNT UNLOCK IDENTIFIED BY <span class="italic">password</span>;
</pre>
<p>Replace <code dir="ltr"><span class="codeinlineitalic">password</span></code> with a password that is secure. For greater security, do not reuse the same password that was used in previous releases of Oracle Database. See <a href="authentication.htm#CHDFDHAJ">"Minimum Requirements for Passwords"</a> for more information.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHCAACD"></a>
<div id="DBSEG281" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 2: Create a Policy Function</h4>
<p>Create the following function, which will append the <code dir="ltr">WHERE SALES_REP_ID = 159</code> clause to any <code dir="ltr">SELECT</code> statement on the <code dir="ltr">OE.ORDERS</code> table. (You can copy and paste this text by positioning the cursor at the start of <code dir="ltr">CREATE OR REPLACE</code> in the first line.)</p>
<pre dir="ltr">
CREATE OR REPLACE FUNCTION auth_orders( 
  schema_var IN VARCHAR2,
  table_var  IN VARCHAR2
 )
 RETURN VARCHAR2
 IS
  return_val VARCHAR2 (400);
 BEGIN
  return_val := 'SALES_REP_ID = 159';
  RETURN return_val;
 END auth_orders;
/
</pre>
<p>In this example:</p>
<ul>
<li>
<p><code dir="ltr">schema_var</code> and <code dir="ltr">table_var</code> create input parameters to specify to store the schema name, <code dir="ltr">OE</code>, and table name, <code dir="ltr">ORDERS</code>. First, define the parameter for the schema, and then define the parameter for the object, in this case, a table. Always create them in this order. The Virtual Private Database policy you create will need these parameters to specify the <code dir="ltr">OE.ORDERS</code> table.</p>
</li>
<li>
<p><code dir="ltr">RETURN VARCHAR2</code> returns the string that will be used for the <code dir="ltr">WHERE</code> predicate clause. Remember that return value is always a <code dir="ltr">VARCHAR2</code> data type.</p>
</li>
<li>
<p><code dir="ltr">IS ... RETURN return_val</code> encompasses the creation of the <code dir="ltr">WHERE SALES_REP_ID = 159</code> predicate.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHJDEDE"></a>
<div id="DBSEG282" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 3: Create the Oracle Virtual Private Database Policy</h4>
<p>Next, create the following policy by using the <code dir="ltr">ADD_POLICY</code> procedure in the <code dir="ltr">DBMS_RLS</code> package. (You can copy and paste this text by positioning the cursor at the start of <code dir="ltr">BEGIN</code> in the first line.)</p>
<pre dir="ltr">
BEGIN
  DBMS_RLS.ADD_POLICY (
    object_schema    =&gt; 'oe',
    object_name      =&gt; 'orders',
    policy_name      =&gt; 'orders_policy',
    function_schema  =&gt; 'sys',
    policy_function  =&gt; 'auth_orders',
    statement_types  =&gt; 'select, insert, update, delete'
   );
 END;
/
</pre>
<p>In this example:</p>
<ul>
<li>
<p><code dir="ltr">object_schema =&gt; 'oe'</code> specifies the schema that you want to protect, that is, <code dir="ltr">OE</code>.</p>
</li>
<li>
<p><code dir="ltr">object_name =&gt; 'orders'</code> specifies the object within the schema to protect, that is, the <code dir="ltr">ORDERS</code> table.</p>
</li>
<li>
<p><code dir="ltr">policy_name =&gt; 'orders_policy'</code> names this policy <code dir="ltr">orders_policy</code>.</p>
</li>
<li>
<p><code dir="ltr">function_schema =&gt; 'sys'</code> specifies the schema in which the <code dir="ltr">auth_orders</code> function was created. In this example, <code dir="ltr">auth_orders</code> was created in the <code dir="ltr">SYS</code> schema. But typically, it should be created in the schema of a security administrator.</p>
</li>
<li>
<p><code dir="ltr">policy_function =&gt; 'auth_orders'</code> specifies a function to enforce the policy. Here, you specify the <code dir="ltr">auth_orders</code> function that you created in <a href="#CIHCAACD">Step 2: Create a Policy Function</a>.</p>
</li>
<li>
<p><code dir="ltr">statement_types =&gt; 'select'</code> specifies the operations to which the policy applies. In this example, the policy applies to all <code dir="ltr">SELECT</code>, <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, and <code dir="ltr">DELETE</code> statements the user may perform.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHEDHDJ"></a>
<div id="DBSEG283" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 4: Test the Policy</h4>
<p>After you create the Oracle Virtual Private Database policy, it goes into effect immediately. The next time a user, including the owner of the schema, performs a <code dir="ltr">SELECT</code> on <code dir="ltr">OE.ORDERS</code>, only the orders by Sales Representative 159 will be accessed.</p>
<ol>
<li>
<p>Log on as user <code dir="ltr">OE</code>.</p>
<pre dir="ltr">
CONNECT oe
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Enter the following <code dir="ltr">SELECT</code> statement:</p>
<pre dir="ltr">
SELECT COUNT(*) FROM ORDERS;
</pre>
<p>The following output should appear:</p>
<pre dir="ltr">
 COUNT(*)
---------
        7
</pre>
<p>The policy is in effect for user <code dir="ltr">OE</code>: As you can see, only 7 of the 105 rows in the orders table are returned.</p>
<p>But users with administrative privileges still have access to all the rows in the table.</p>
</li>
<li>
<p>Log back on as user <code dir="ltr">SYS</code>.</p>
<pre dir="ltr">
CONNECT sys/as sysdba
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Enter the following <code dir="ltr">SELECT</code> statement:</p>
<pre dir="ltr">
SELECT COUNT(*) FROM OE.ORDERS;
</pre>
<p>The following output should appear:</p>
<pre dir="ltr">
 COUNT(*)
---------
      105
</pre></li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHEAJEB"></a>
<div id="DBSEG284" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 5: Remove the Components for This Tutorial</h4>
<ol>
<li>
<p>As user <code dir="ltr">SYS</code>, remove the function and policy as follows:</p>
<pre dir="ltr">
DROP FUNCTION auth_orders;
EXEC DBMS_RLS.DROP_POLICY('OE','ORDERS','ORDERS_POLICY');
</pre></li>
<li>
<p>If you need to lock and expire the <code dir="ltr">OE</code> account, then enter the following statement:</p>
<pre dir="ltr">
ALTER USER OE ACCOUNT LOCK PASSWORD EXPIRE;
</pre></li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006344"></a>
<div id="DBSEG285" class="sect2">
<h3 class="sect2">Tutorial: Implementing a Policy with a Database Session-Based Application Context</h3>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABGEGHH">About This Tutorial</a></p>
</li>
<li>
<p><a href="#CIHFHAHI">Step 1: Create User Accounts and Sample Tables</a></p>
</li>
<li>
<p><a href="#i1006399">Step 2: Create a Database Session-Based Application Context</a></p>
</li>
<li>
<p><a href="#i1006368">Step 3: Create a PL/SQL Package to Set the Application Context</a></p>
</li>
<li>
<p><a href="#CIHDBBGJ">Step 4: Create a Logon Trigger to Run the Application Context PL/SQL Package</a></p>
</li>
<li>
<p><a href="#i1006406">Step 5: Create a PL/SQL Policy Function to Limit User Access to Their Orders</a></p>
</li>
<li>
<p><a href="#i1006431">Step 6: Create the New Security Policy</a></p>
</li>
<li>
<p><a href="#CIHHJIGJ">Step 7: Test the New Policy</a></p>
</li>
<li>
<p><a href="#CIHCGACD">Step 8: Remove the Components for This Tutorial</a></p>
</li>
</ul>
<a id="BABGEGHH"></a>
<div id="DBSEG563" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About This Tutorial</h4>
<p><a id="sthref1417"></a><a id="sthref1418"></a>This tutorial shows how you can use a database session-based application context to implement a policy in which customers can see only their own orders. You create the following layers of security:</p>
<ol>
<li>
<p>When a user logs on, a database session-based application context checks whether the user is a customer. If a user is not a customer, the user still can log on, but this user cannot access the orders entry table you will create for this example.</p>
</li>
<li>
<p>If the user is a customer, he or she can log on. After the customer has logged on, an Oracle Virtual Private Database policy restricts this user to see only his or her orders.</p>
</li>
<li>
<p>As a further restriction, the Oracle Virtual Private Database policy prevents users from adding, modifying, or removing orders.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHFHAHI"></a>
<div id="DBSEG286" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 1: Create User Accounts and Sample Tables</h4>
<ol>
<li>
<p>Start SQL*Plus and log on as a user who has administrative privileges.</p>
<pre dir="ltr">
sqlplus sys as sysdba
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Create the following administrative user, who will administer the Oracle Virtual Private Database policy.</p>
<p>The following SQL statements create this user and then grant the user the necessary privileges for completing this tutorial.</p>
<pre dir="ltr">
GRANT CREATE SESSION, CREATE ANY CONTEXT, CREATE PROCEDURE, CREATE TRIGGER, ADMINISTER DATABASE TRIGGER TO sysadmin_vpd IDENTIFIED BY <span class="italic">password</span>;
GRANT EXECUTE ON DBMS_SESSION TO sysadmin_vpd;
GRANT EXECUTE ON DBMS_RLS TO sysadmin_vpd;
</pre>
<p>Replace <code dir="ltr"><span class="codeinlineitalic">password</span></code> with a password that is secure. See <a href="authentication.htm#CHDFDHAJ">"Minimum Requirements for Passwords"</a> for more information.</p>
</li>
<li>
<p>Create the following user accounts:</p>
<pre dir="ltr">
GRANT CREATE SESSION TO tbrooke IDENTIFIED BY <span class="italic">password</span>;
GRANT CREATE SESSION TO owoods IDENTIFIED BY <span class="italic">password</span>;
</pre>
<p>Replace <code dir="ltr"><span class="codeinlineitalic">password</span></code> with a password that is secure. See <a href="authentication.htm#CHDFDHAJ">"Minimum Requirements for Passwords"</a> for more information.</p>
</li>
<li>
<p>Check the status of the sample user <code dir="ltr">SCOTT</code>, who you will use for this tutorial:</p>
<pre dir="ltr">
SELECT USERNAME, ACCOUNT_STATUS FROM DBA_USERS WHERE USERNAME = 'SCOTT';
</pre>
<p>If the <code dir="ltr">DBA_USERS</code> view lists user <code dir="ltr">SCOTT</code> as locked and expired, then enter the following statement to unlock the <code dir="ltr">SCOTT</code> account and create a new password for him:</p>
<pre dir="ltr">
ALTER USER SCOTT ACCOUNT UNLOCK IDENTIFIED BY <span class="italic">password</span>;
</pre>
<p>Replace <code dir="ltr"><span class="codeinlineitalic">password</span></code> with a password that is secure. For greater security, do not reuse the same password that was used in previous releases of Oracle Database. See <a href="authentication.htm#CHDFDHAJ">"Minimum Requirements for Passwords"</a> for more information.</p>
</li>
<li>
<p>Connect as user <code dir="ltr">SCOTT</code>, and then create and populate the <code dir="ltr">customers</code> table.</p>
<pre dir="ltr">
CONNECT scott
Enter password: <span class="italic">password</span>

CREATE TABLE customers (
 cust_no    NUMBER(4), 
 cust_email VARCHAR2(20),
 cust_name  VARCHAR2(20));

INSERT INTO customers VALUES (1234, 'TBROOKE', 'Thadeus Brooke');
INSERT INTO customers VALUES (5678, 'OWOODS', 'Oberon Woods');
</pre>
<p>When you enter the user email addresses, enter them in upper-case letters. Later on, when you create the application context PL/SQL package, the <code dir="ltr">SESSION_USER</code> parameter of the <code dir="ltr">SYS_CONTEXT</code> function expects the user names to be in upper case. Otherwise, you will be unable to set the application context for the user.</p>
</li>
<li>
<p>User <code dir="ltr">sysadmin_vpd</code> will need <code dir="ltr">SELECT</code> privileges for the customers table, so as user <code dir="ltr">SCOTT</code>, grant him this privilege.</p>
<pre dir="ltr">
GRANT SELECT ON customers TO sysadmin_vpd;
</pre></li>
<li>
<p>Create and populate the <code dir="ltr">orders_tab</code> table.</p>
<pre dir="ltr">
CREATE TABLE orders_tab (
  cust_no  NUMBER(4),
  order_no NUMBER(4));

INSERT INTO orders_tab VALUES (1234, 9876);
INSERT INTO orders_tab VALUES (5678, 5432);
INSERT INTO orders_tab VALUES (5678, 4592);
</pre></li>
<li>
<p>Users <code dir="ltr">tbrooke</code> and <code dir="ltr">owoods</code> need to query the <code dir="ltr">orders_tab</code> table, so grant them the <code dir="ltr">SELECT</code> privilege.</p>
<pre dir="ltr">
GRANT SELECT ON orders_tab TO tbrooke;
GRANT SELECT ON orders_tab TO owoods;
</pre></li>
</ol>
<p>At this stage, the two sample customers, <code dir="ltr">tbrooke</code> and <code dir="ltr">owoods</code>, have a record of purchases in the <code dir="ltr">orders_tab</code> order entry table, and if they tried right now, they can see all the orders in this table.</p>
</div>
<!-- class="sect3" -->
<a id="i1006399"></a>
<div id="DBSEG287" class="sect3">
<h4 class="sect3">Step 2: Create a Database Session-Based Application Context</h4>
<ol>
<li>
<p>Connect as user <code dir="ltr">sysadmin_vpd</code>.</p>
<pre dir="ltr">
CONNECT sysadmin_vpd
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Enter the following statement:</p>
<pre dir="ltr">
CREATE OR REPLACE CONTEXT orders_ctx USING orders_ctx_pkg;
</pre>
<p>This statement creates the <code dir="ltr">orders_ctx</code> application context. Remember that even though user <code dir="ltr">sysadmin_vpd</code> has created this context and it is associated with the <code dir="ltr">sysadmin_vpd</code> schema, the <code dir="ltr">SYS</code> schema owns the application context.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="i1006368"></a>
<div id="DBSEG288" class="sect3">
<h4 class="sect3">Step 3: Create a PL/SQL Package to Set the Application Context</h4>
<p>As user <code dir="ltr">sysadmin_vpd</code>, create the following PL/SQL package, which will set the database session-based application context when the customers <code dir="ltr">tbrooke</code> and <code dir="ltr">owoods</code> log onto their accounts. (You can copy and paste this text by positioning the cursor at the start of <code dir="ltr">CREATE OR REPLACE</code> in the first line.)</p>
<pre dir="ltr">
CREATE OR REPLACE PACKAGE orders_ctx_pkg IS 
  PROCEDURE set_custnum;
 END;
/
CREATE OR REPLACE PACKAGE BODY orders_ctx_pkg IS
  PROCEDURE set_custnum
  AS
    custnum NUMBER;
  BEGIN
     SELECT cust_no INTO custnum FROM SCOTT.CUSTOMERS
        WHERE cust_email = SYS_CONTEXT('USERENV', 'SESSION_USER');
     DBMS_SESSION.SET_CONTEXT('orders_ctx', 'cust_no', custnum);
  EXCEPTION
   WHEN NO_DATA_FOUND THEN NULL;
  END set_custnum;
END;
/
</pre>
<p>In this example:</p>
<ul>
<li>
<p><code dir="ltr">custnum NUMBER</code> creates the <code dir="ltr">custnum</code> variable, which will hold the customer ID.</p>
</li>
<li>
<p><code dir="ltr">SELECT cust_no INTO custnum</code> performs a <code dir="ltr">SELECT</code> statement to copy the customer ID that is stored in the <code dir="ltr">cust_no</code> column data from the <code dir="ltr">scott.customers</code> table into the <code dir="ltr">custnum</code> variable.</p>
</li>
<li>
<p><code dir="ltr">WHERE cust_email = SYS_CONTEXT('USERENV', 'SESSION_USER')</code> uses a <code dir="ltr">WHERE</code> clause to find all the customer IDs that match the user name of the user who is logging on.</p>
</li>
<li>
<p><code dir="ltr">DBMS_SESSION.SET_CONTEXT('orders_ctx', 'cust_no', custnum)</code> sets the <code dir="ltr">orders_ctx</code> application context values by creating the <code dir="ltr">cust_no</code> attribute and then setting it to the value stored in the <code dir="ltr">custnum</code> variable.</p>
</li>
<li>
<p><code dir="ltr">EXCEPTION ... WHEN</code> adds a <code dir="ltr">WHEN NO_DATA_FOUND</code> system exception to catch any <code dir="ltr">no data found</code> errors that may result from the <code dir="ltr">SELECT</code> statement in <span class="bold">Lines 10&ndash;11</span>.</p>
</li>
</ul>
<p>To summarize, the <code dir="ltr">sysadmin_vpd.set_cust_num</code> procedure identifies whether or not the session user is a registered customer by attempting to select the user's customer ID into the <code dir="ltr">custnum</code> variable. If the user is a registered customer, then Oracle Database sets an application context value for this user. As you will see in <a href="#i1006406">Step 5: Create a PL/SQL Policy Function to Limit User Access to Their Orders</a>, the policy function uses the context value to control the access a user has to data in the <code dir="ltr">orders_tab</code> table.</p>
</div>
<!-- class="sect3" -->
<a id="CIHDBBGJ"></a>
<div id="DBSEG289" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 4: Create a Logon Trigger to Run the Application Context PL/SQL Package</h4>
<p>The logon trigger runs the procedure in the PL/SQL package that you created in <a href="#i1006368">Step 3: Create a PL/SQL Package to Set the Application Context</a> the next time a user logs on, so that the application context can be set.</p>
<p>As user <code dir="ltr">sysadmin_vpd</code>, create the following trigger:</p>
<pre dir="ltr">
CREATE TRIGGER set_custno_ctx_trig AFTER LOGON ON DATABASE
 BEGIN
  sysadmin_vpd.orders_ctx_pkg.set_custnum;
 END;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="app_context.htm#i1006274">"Creating a Logon Trigger to Run a Database Session Application Context Package"</a></div>
<p>At this stage, if you log on as either <code dir="ltr">tbrooke</code> or <code dir="ltr">owoods</code>, the logon trigger should set the application context for the user when it fires the <code dir="ltr">sysadmin_vpd.orders_ctx_pkg.set_custnum</code> procedure. You can test it as follows:</p>
<pre dir="ltr">
CONNECT tbrooke
Enter password: <span class="italic">password</span>

SELECT SYS_CONTEXT('orders_ctx', 'cust_no') custnum FROM DUAL;
</pre>
<p>The following output should appear:</p>
<pre dir="ltr">
EMP_ID
-------------------------------------------------------------------
1234
</pre></div>
<!-- class="sect3" -->
<a id="i1006406"></a>
<div id="DBSEG290" class="sect3">
<h4 class="sect3">Step 5: Create a PL/SQL Policy Function to Limit User Access to Their Orders</h4>
<p>The next step is to create a PL/SQL function that, when the user who has logged in performs a <code dir="ltr">SELECT * FROM scott.orders_tab</code> query, displays only the orders of that user.</p>
<p>As user <code dir="ltr">sysadmin_vpd</code>, create the following function:</p>
<pre dir="ltr">
CREATE OR REPLACE FUNCTION get_user_orders(
  schema_p   IN VARCHAR2,
  table_p    IN VARCHAR2)
 RETURN VARCHAR2
 AS
  orders_pred VARCHAR2 (400);
 BEGIN
  orders_pred := 'cust_no = SYS_CONTEXT(''orders_ctx'', ''cust_no'')'; 
 RETURN orders_pred;
END;
/
</pre>
<p>This function creates and returns a <code dir="ltr">WHERE</code> predicate that translates to "where the orders displayed belong to the user who has logged in." It then appends this <code dir="ltr">WHERE</code> predicate to any queries this user may run against the <code dir="ltr">scott.orders_tab</code> table. Next, you are ready to create an Oracle Virtual Private Database policy that applies this function to the <code dir="ltr">orders_tab</code> table.</p>
</div>
<!-- class="sect3" -->
<a id="i1006431"></a>
<div id="DBSEG291" class="sect3">
<h4 class="sect3">Step 6: Create the New Security Policy</h4>
<p>As user <code dir="ltr">sysadmin_vpd</code>, create the policy as follows:</p>
<pre dir="ltr">
BEGIN
 DBMS_RLS.ADD_POLICY (
  object_schema    =&gt; 'scott', 
  object_name      =&gt; 'orders_tab', 
  policy_name      =&gt; 'orders_policy', 
  function_schema  =&gt; 'sysadmin_vpd',
  policy_function  =&gt; 'get_user_orders', 
  statement_types  =&gt; 'select');
END;
/
</pre>
<p>This statement creates a policy named <code dir="ltr">orders_policy</code> and applies it to the <code dir="ltr">orders_tab</code> table, which customers will query for their orders, in the <code dir="ltr">SCOTT</code> schema. The <code dir="ltr">get_user_orders</code> function implements the policy, which is stored in the <code dir="ltr">sysadmin_vpd</code> schema. The policy further restricts users to issuing <code dir="ltr">SELECT</code> statements only.</p>
</div>
<!-- class="sect3" -->
<a id="CIHHJIGJ"></a>
<div id="DBSEG292" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 7: Test the New Policy</h4>
<ol>
<li>
<p>Log on as user <code dir="ltr">tbrooke</code>.</p>
<pre dir="ltr">
CONNECT tbrooke
Enter password: <span class="italic">password</span>
</pre>
<p>User <code dir="ltr">tbrooke</code> can log on because he has passed the requirements you defined in the application context.</p>
</li>
<li>
<p>As user <code dir="ltr">tbrooke</code>, access your purchases.</p>
<pre dir="ltr">
SELECT * FROM scott.orders_tab;
</pre>
<p>The following output should appear:</p>
<pre dir="ltr">
   CUST_NO    ORDER_NO
----------  ----------
      1234        9876
</pre>
<p>User <code dir="ltr">tbrooke</code> has passed the second test. He can access his own orders in the <code dir="ltr">scott.orders_tab</code> table.</p>
</li>
<li>
<p>Log on as user <code dir="ltr">owoods</code>, and then access your purchases.</p>
<pre dir="ltr">
CONNECT owoods
Enter password: <span class="italic">passwords</span>

SELECT * FROM scott.orders_tab
</pre>
<p>The following output should appear:</p>
<pre dir="ltr">
   CUST_NO    ORDER_NO
----------  ----------
      5678        5432
      5678        4592
</pre>
<p>As with user <code dir="ltr">tbrooke</code>, user <code dir="ltr">owoods</code> can log on and see a listing of his own orders.</p>
</li>
</ol>
<p>Note the following:</p>
<ul>
<li>
<p>You can create several predicates based on the position of a user. For example, a sales representative would be able to see records only for his customers, and an order entry clerk would be able to see any customer order. You could expand the <code dir="ltr">custnum_sec</code> function to return different predicates based on the user position context value.</p>
</li>
<li>
<p>The use of an application context in a fine-grained access control package effectively gives you a bind variable in a parsed statement. For example:</p>
<pre dir="ltr">
SELECT * FROM scott.orders_tab 
   WHERE cust_no = SYS_CONTEXT('order_entry', 'cust_num');
</pre>
<p>This is fully parsed and optimized, but the evaluation of the <code dir="ltr">cust_num</code> attribute value of the user for the <code dir="ltr">order_entry</code> context takes place at run-time. This means that you get the benefit of an optimized statement that executes differently for each user who issues the statement.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can improve the <a id="sthref1419"></a>performance of the function in this tutorial by indexing <code dir="ltr">cust_no</code>.</div>
</li>
<li>
<p>You can set context attributes based on data from a database table or tables, or from a directory server using <a id="sthref1420"></a>Lightweight Directory Access Protocol (LDAP).</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS020" href="../../appdev.112/e25519/triggers.htm#LNPLS020"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about triggers</div>
<p>Compare and contrast this tutorial, which uses an application context within the dynamically generated predicate, with <a href="#i1007660">"About Oracle Virtual Private Database Policies"</a>, which uses a subquery in the predicate.</p>
</div>
<!-- class="sect3" -->
<a id="CIHCGACD"></a>
<div id="DBSEG293" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 8: Remove the Components for This Tutorial</h4>
<ol>
<li>
<p>Connect as user <code dir="ltr">OE</code> and remove the <code dir="ltr">orders_tab</code> and <code dir="ltr">customers</code> tables.</p>
<pre dir="ltr">
CONNNECT SCOTT
Enter password: <span class="italic">password</span>

DROP TABLE orders_tab;
DROP TABLE customers; 
</pre></li>
<li>
<p>Connect as user <code dir="ltr">SYS</code>, connecting with <code dir="ltr">AS SYSDBA</code>.</p>
<pre dir="ltr">
CONNECT sys/as sysdba
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Run the following statements to drop the components for this tutorial:</p>
<pre dir="ltr">
DROP CONTEXT orders_ctx;
DROP USER sysadmin_vpd CASCADE;
DROP USER tbrooke;
DROP USER owoods;
</pre></li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHCIJAH"></a>
<div id="DBSEG294" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Tutorial: Implementing an Oracle Virtual Private Database Policy Group</h3>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BABCDFGH">About This Tutorial</a></p>
</li>
<li>
<p><a href="#CIHFEBJJ">Step 1: Create User Accounts and Other Components for This Tutorial</a></p>
</li>
<li>
<p><a href="#CIHFCDBC">Step 2: Create the Two Policy Groups</a></p>
</li>
<li>
<p><a href="#CIHFHIJE">Step 3: Create PL/SQL Functions to Control the Policy Groups</a></p>
</li>
<li>
<p><a href="#CIHCDIBI">Step 4: Add the PL/SQL Functions to the Policy Groups</a></p>
</li>
<li>
<p><a href="#CIHGJDJE">Step 5: Create the Driving Application Context</a></p>
</li>
<li>
<p><a href="#CIHIFIGF">Step 6: Test the Policy Groups</a></p>
</li>
<li>
<p><a href="#CIHCEEBH">Step 7: Remove the Components for This Tutorial</a></p>
</li>
</ul>
<a id="BABCDFGH"></a>
<div id="DBSEG564" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About This Tutorial</h4>
<p><a href="#CIHCAEFA">"Working with Oracle Virtual Private Database Policy Groups"</a> <a id="sthref1421"></a><a id="sthref1422"></a>describes <a id="sthref1423"></a>how you can group a set of policies for use in an application. When a <a id="sthref1424"></a>nondatabase user logs onto the application, Oracle Database grants the user access based on the policies defined within the appropriate policy group.</p>
<p>For column-level access control, every column or set of hidden columns is controlled by one policy. In this tutorial, you must hide two sets of columns. So, you need to create two policies, one for each set of columns that you want to hide. You only want one policy for each user; the driving application context separates the policies for you.</p>
</div>
<!-- class="sect3" -->
<a id="CIHFEBJJ"></a>
<div id="DBSEG295" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 1: Create User Accounts and Other Components for This Tutorial</h4>
<ol>
<li>
<p>Log on as user <code dir="ltr">SYS</code> with the <code dir="ltr">SYSDBA</code> privilege.</p>
<pre dir="ltr">
sqlplus sys as sysdba
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Create the following users:</p>
<pre dir="ltr">
GRANT CREATE SESSION TO apps_user IDENTIFIED BY <span class="italic">password</span>;
GRANT CREATE SESSION, CREATE PROCEDURE, CREATE ANY CONTEXT TO sysadmin_pg IDENTIFIED BY <span class="italic">password</span>;
</pre>
<p>Replace <code dir="ltr"><span class="codeinlineitalic">password</span></code> with a password that is secure. See <a href="authentication.htm#CHDFDHAJ">"Minimum Requirements for Passwords"</a> for more information.</p>
</li>
<li>
<p>Grant the following additional privilege to user <code dir="ltr">sysadmin_pg</code>:</p>
<pre dir="ltr">
GRANT EXECUTE ON DBMS_RLS TO sysadmin_pg;
</pre></li>
<li>
<p>Log on as user <code dir="ltr">OE</code>.</p>
<pre dir="ltr">
CONNECT OE
Enter password: <span class="italic">password</span>
</pre>
<p>If the <code dir="ltr">OE</code> account is locked and expired, then reconnect as user <code dir="ltr">SYS</code> with the <code dir="ltr">SYSDBA</code> privilege and enter the following statement to unlock the account and give it s new password:</p>
<pre dir="ltr">
ALTER USER OE ACCOUNT UNLOCK IDENTIFIED BY <span class="italic">password</span>;
</pre>
<p>Replace <code dir="ltr"><span class="codeinlineitalic">password</span></code> with a password that is secure. For greater security, do not reuse the same password that was used in previous releases of Oracle Database. See <a href="authentication.htm#CHDFDHAJ">"Minimum Requirements for Passwords"</a> for more information.</p>
</li>
<li>
<p>Create the <code dir="ltr">product_code_names</code> table:</p>
<pre dir="ltr">
CREATE TABLE product_code_names(
group_a     varchar2(32),
year_a      varchar2(32),
group_b     varchar2(32),
year_b      varchar2(32));
</pre></li>
<li>
<p>Insert some values into the <code dir="ltr">product_code_names</code> table:</p>
<pre dir="ltr">
INSERT INTO product_code_names values('Biffo','2008','Beffo','2004');
INSERT INTO product_code_names values('Hortensia','2008','Bunko','2008');
INSERT INTO product_code_names values('Boppo','2006','Hortensia','2003');

COMMIT;
</pre></li>
<li>
<p>Grant the <code dir="ltr">apps_user</code> user <code dir="ltr">SELECT</code> privileges on the <code dir="ltr">product_code_names</code> table.</p>
<pre dir="ltr">
GRANT SELECT ON product_code_names TO apps_user;
</pre></li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHFCDBC"></a>
<div id="DBSEG296" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 2: Create the Two Policy Groups</h4>
<p>Next, you must create a policy group for each of the two nondatabase users, <code dir="ltr">provider_a</code> and <code dir="ltr">provider_b</code>.</p>
<ol>
<li>
<p>Connect as user <code dir="ltr">sysadmin_pg</code>.</p>
<pre dir="ltr">
CONNECT sysadmin_pg
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Create the <code dir="ltr">provider_a_group</code> policy group, to be used by user <code dir="ltr">provider_a</code>:</p>
<pre dir="ltr">
BEGIN
 DBMS_RLS.CREATE_POLICY_GROUP(
 object_schema   =&gt; 'oe',
 object_name     =&gt; 'product_code_names',
 policy_group    =&gt; 'provider_a_group');
END;
/
</pre></li>
<li>
<p>Create the <code dir="ltr">provider_b_group</code> policy group, to be used by user <code dir="ltr">provider_b</code>:</p>
<pre dir="ltr">
BEGIN
 DBMS_RLS.CREATE_POLICY_GROUP(
 object_schema   =&gt; 'oe',
 object_name     =&gt; 'product_code_names',
 policy_group    =&gt; 'provider_b_group');
END;
/
</pre></li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHFHIJE"></a>
<div id="DBSEG297" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 3: Create PL/SQL Functions to Control the Policy Groups</h4>
<p>Each of the policy groups that you created in <a href="#CIHFCDBC">Step 2: Create the Two Policy Groups</a> must have a function that defines how the application can control data access for users <code dir="ltr">provider_a</code> and <code dir="ltr">provider_b</code>.</p>
<ol>
<li>
<p>Create the <code dir="ltr">vpd_function_provider_a</code> function, which restricts the data accessed by user <code dir="ltr">provider_a</code>.</p>
<pre dir="ltr">
CREATE OR REPLACE FUNCTION vpd_function_provider_a 
 (schema in varchar2, tab in varchar2) return varchar2 as 
  predicate  varchar2(8) default NULL;
  BEGIN
   IF LOWER(SYS_CONTEXT('USERENV','CLIENT_IDENTIFIER')) = 'provider_a' 
    THEN predicate := '1=2';
   ELSE NULL;
  END IF;
  RETURN predicate;
END;
/
</pre>
<p>This function checks that the user logging in is really user <code dir="ltr">provider_a</code>. If this is true, then only the data in the <code dir="ltr">product_code_names</code> table columns <code dir="ltr">group_a</code> and <code dir="ltr">year_a</code> will be visible to <code dir="ltr">provider_a</code>. Data in columns <code dir="ltr">group_b</code> and <code dir="ltr">year_b</code> will not appear for <code dir="ltr">provider_a</code>. This works as follows: Setting <code dir="ltr">predicate := '1=2'</code> hides the relevant columns. In <a href="#CIHCDIBI">Step 4: Add the PL/SQL Functions to the Policy Groups</a>, you specify these columns in the <code dir="ltr">SEC_RELEVANT_COLS</code> parameter.</p>
<p>See <a href="#CIHBEIFC">"Creating a Function to Generate the Dynamic WHERE Clause"</a> for detailed information on the components of this type of function.</p>
</li>
<li>
<p>Create the <code dir="ltr">vpd_function_provider_b</code>, function, which restricts the data accessed by user <code dir="ltr">provider_a</code>.</p>
<pre dir="ltr">
CREATE OR REPLACE FUNCTION vpd_function_provider_b 
 (schema in varchar2, tab in varchar2) return varchar2 as 
  predicate  varchar2(8) default NULL;
  BEGIN
   IF LOWER(SYS_CONTEXT('USERENV','CLIENT_IDENTIFIER')) = 'provider_b' 
    THEN predicate := '1=2';
   ELSE NULL;
  END IF;
  RETURN predicate;
END;
/
</pre>
<p>Similar to the <code dir="ltr">vpd_function_provider_a</code> function, this function checks that the user logging in is really user <code dir="ltr">provider_b</code>. If this is true, then only the data in the columns <code dir="ltr">group_b</code> and <code dir="ltr">year_b</code> will be visible to <code dir="ltr">provider_b</code>, with data in the <code dir="ltr">group_a</code> and <code dir="ltr">year_a</code> not appearing for <code dir="ltr">provider_b</code>. Similar to the <code dir="ltr">vpd_function_provider_a</code> function, <code dir="ltr">predicate := '1=2'</code> hides the relevant columns specified <a href="#CIHCDIBI">Step 4: Add the PL/SQL Functions to the Policy Groups</a> in the <code dir="ltr">SEC_RELEVANT_COLS</code> parameter.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHCDIBI"></a>
<div id="DBSEG298" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 4: Add the PL/SQL Functions to the Policy Groups</h4>
<p>Now that you have created the necessary functions, you are ready to associate them with their appropriate policy groups.</p>
<ol>
<li>
<p>Add the <code dir="ltr">vpd_function_provider_a</code> function to the <code dir="ltr">provider_a_group</code> policy group.</p>
<pre dir="ltr">
BEGIN 
 DBMS_RLS.ADD_GROUPED_POLICY(
 object_schema         =&gt; 'oe',
 object_name           =&gt; 'product_code_names',
 policy_group          =&gt; 'provider_a_group',
 policy_name           =&gt; 'filter_provider_a',
 function_schema       =&gt; 'sysadmin_pg',
 policy_function       =&gt; 'vpd_function_provider_a',
 statement_types       =&gt; 'select',
 policy_type           =&gt; DBMS_RLS.CONTEXT_SENSITIVE,
 sec_relevant_cols     =&gt; 'group_b,year_b',
 sec_relevant_cols_opt =&gt; DBMS_RLS.ALL_ROWS);
END;
/
</pre>
<p>The <code dir="ltr">group_b</code> and <code dir="ltr">year_b</code> columns specified in the <code dir="ltr">sec_relevant_cols</code> parameter are hidden from user <code dir="ltr">provider_a</code>.</p>
</li>
<li>
<p>Add the <code dir="ltr">vpd_function_provider_b</code> function to the <code dir="ltr">provider_b_group</code> policy group.</p>
<pre dir="ltr">
BEGIN 
 DBMS_RLS.ADD_GROUPED_POLICY(
 object_schema         =&gt; 'oe',
 object_name           =&gt; 'product_code_names',
 policy_group          =&gt; 'provider_b_group',
 policy_name           =&gt; 'filter_provider_b',
 function_schema       =&gt; 'sysadmin_pg',
 policy_function       =&gt; 'vpd_function_provider_b',
 statement_types       =&gt; 'select',
 policy_type           =&gt; DBMS_RLS.CONTEXT_SENSITIVE,
 sec_relevant_cols     =&gt; 'group_a,year_a',
 sec_relevant_cols_opt =&gt; DBMS_RLS.ALL_ROWS);
END;
/
</pre>
<p>The <code dir="ltr">group_a</code> and <code dir="ltr">year_a</code> columns specified in the <code dir="ltr">sec_relevant_cols</code> parameter are hidden from user <code dir="ltr">provider_b</code>.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHGJDJE"></a>
<div id="DBSEG299" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 5: Create the Driving Application Context</h4>
<p>The application context determines which policy the nondatabase user who is the logging on should use.</p>
<ol>
<li>
<p>As user <code dir="ltr">sysadmin_pg</code>, create the driving application context as follows:</p>
<pre dir="ltr">
CREATE OR REPLACE CONTEXT provider_ctx USING provider_package;
</pre></li>
<li>
<p>Create the PL/SQL <code dir="ltr">provider_package</code> package for the application context.</p>
<pre dir="ltr">
CREATE OR REPLACE PACKAGE provider_package IS
 PROCEDURE set_provider_context (policy_group varchar2 default NULL);
END;
/
CREATE OR REPLACE PACKAGE BODY provider_package AS
 PROCEDURE set_provider_context (policy_group varchar2 default NULL) IS
 BEGIN
  CASE LOWER(SYS_CONTEXT('USERENV', 'CLIENT_IDENTIFIER'))
   WHEN 'provider_a' THEN
    DBMS_SESSION.SET_CONTEXT('provider_ctx','policy_group','PROVIDER_A_GROUP');
   WHEN 'provider_b' THEN
    DBMS_SESSION.SET_CONTEXT('provider_ctx','policy_group','PROVIDER_B_GROUP');
  END CASE;
 END set_provider_context;
END;
/
</pre></li>
<li>
<p>Associate the <code dir="ltr">provider_ctx</code> application context with the <code dir="ltr">product_code_names</code> table, and then provide a name.</p>
<pre dir="ltr">
BEGIN
 DBMS_RLS.ADD_POLICY_CONTEXT(
 object_schema  =&gt;'oe',
 object_name    =&gt;'product_code_names',
 namespace      =&gt;'provider_ctx',
 attribute      =&gt;'policy_group');
END;
/
</pre></li>
<li>
<p>Grant the <code dir="ltr">apps_user</code> account the <code dir="ltr">EXECUTE</code> privilege for the <code dir="ltr">provider_package</code> package.</p>
<pre dir="ltr">
GRANT EXECUTE ON provider_package TO apps_user;
</pre></li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHIFIGF"></a>
<div id="DBSEG300" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 6: Test the Policy Groups</h4>
<p>Now you are ready to test the two policy groups.</p>
<ol>
<li>
<p>Connect as user <code dir="ltr">apps_user</code> and then enter the following statements to ensure that the output you will create later on is nicely formatted.</p>
<pre dir="ltr">
CONNECT apps_user
Enter password: <span class="italic">password</span>

col group_a format a16
col group_b format a16;
col year_a format a16;
col year_b format a16;
</pre></li>
<li>
<p>Set the session identifier to <code dir="ltr">provider_a</code>.</p>
<pre dir="ltr">
EXEC DBMS_SESSION.SET_IDENTIFIER('provider_a');
</pre>
<p>Here, the application sets the identifier. Setting the identifier to <code dir="ltr">provider_a</code> sets the <code dir="ltr">apps_user</code> user to a user who should only see the products available to products in the <code dir="ltr">provider_a_group</code> policy group.</p>
</li>
<li>
<p>Run the <code dir="ltr">provider_package</code> to set the policy group based on the context.</p>
<pre dir="ltr">
EXEC sysadmin_pg.provider_package.set_provider_context;
</pre>
<p>At this stage, you can check the application context was set, as follows:</p>
<pre dir="ltr">
SELECT SYS_CONTEXT('USERENV', 'CLIENT_IDENTIFIER') AS END_USER FROM DUAL;
</pre>
<p>The following output should appear:</p>
<pre dir="ltr">
END_USER
-----------------
provider_a
</pre></li>
<li>
<p>Enter the following <code dir="ltr">SELECT</code> statement:</p>
<pre dir="ltr">
SELECT * FROM oe.product_code_names;
</pre>
<p>The following output should appear:</p>
<pre dir="ltr">
GROUP_A          YEAR_A           GROUP_B          YEAR_B
---------------- ---------------- ---------------- ----------------
Biffo            2008
Hortensia        2008
Boppo            2006
</pre></li>
<li>
<p>Set the client identifier to <code dir="ltr">provider_b</code> and then enter the following statements:</p>
<pre dir="ltr">
EXEC DBMS_SESSION.SET_IDENTIFIER('provider_b');
EXEC sysadmin_pg.provider_package.set_provider_context;
SELECT * FROM oe.product_code_names;
</pre>
<p>The following output should appear:</p>
<pre dir="ltr">
GROUP_A          YEAR_A           GROUP_B          YEAR_B
---------------- ---------------- ---------------- ----------------
                                  Beffo            2004
                                  Bunko            2008
                                  Hortensia        2003
</pre></li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHCEEBH"></a>
<div id="DBSEG301" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Step 7: Remove the Components for This Tutorial</h4>
<ol>
<li>
<p>Connect as user <code dir="ltr">OE</code> and drop the <code dir="ltr">product_code_names</code> table.</p>
<pre dir="ltr">
CONNECT OE
Enter password: <span class="italic">password</span>

DROP TABLE product_code_names;
</pre></li>
<li>
<p>Connect as user <code dir="ltr">SYS</code> and drop the application context and users for this tutorial.</p>
<pre dir="ltr">
CONNECT SYS/AS SYSDBA
Enter password: <span class="italic">password</span>

DROP CONTEXT provider_ctx;
DROP USER sysadmin_pg cascade;
DROP USER apps_user;
</pre></li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHIDHFC"></a>
<div id="DBSEG302" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">How Oracle Virtual Private Database Works with Other Oracle Features</h2>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CIHEJFAI">Using Oracle Virtual Private Database Policies with Editions</a></p>
</li>
<li>
<p><a href="#CIHGBBHC">Using SELECT FOR UPDATE in User Queries on VPD-Protected Tables</a></p>
</li>
<li>
<p><a href="#CIHHADGH">How Oracle Virtual Private Database Policies Affect Outer or ANSI Join Operations</a></p>
</li>
<li>
<p><a href="#CIHHJIDA">How Oracle Virtual Private Database Security Policies Work with Applications</a></p>
</li>
<li>
<p><a href="#CIHDGHFI">Using Automatic Reparsing for Fine-Grained Access Control Policy Functions</a></p>
</li>
<li>
<p><a href="#CIHFEGEJ">Using Oracle Virtual Private Database Policies and Flashback Query</a></p>
</li>
<li>
<p><a href="#CIHIJBCI">Using Oracle Virtual Private Database and Oracle Label Security</a></p>
</li>
<li>
<p><a href="#BABBGDIH">Exporting Data Using the EXPDP Utility access_method Parameter</a></p>
</li>
<li>
<p><a href="#CIHHIJGB">User Models and Oracle Virtual Private Database</a></p>
</li>
</ul>
<a id="CIHEJFAI"></a>
<div id="DBSEG303" class="sect2">
<h3 class="sect2">Using Oracle Virtual Private Database Policies with Editions</h3>
<p>If you are <a id="sthref1425"></a>preparing an application for edition-based redefinition, and you cover each table that the application uses with an editioning view, then you must move the Virtual Private Database polices that protect these tables to the editioning view.</p>
<p>When an editioned object has a Virtual Private Database t policy, then it applies in all editions in which the object is visible. When an editioned object is actualized, any VPD policies that are attached to it are newly attached to the new actual occurrence. When you newly apply a VPD policy to an inherited editioned object, this action will actualize it.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS020" href="../../appdev.112/e41502/adfns_editions.htm#ADFNS020"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for detailed information about editions</div>
</div>
<!-- class="sect2" -->
<a id="CIHGBBHC"></a>
<div id="DBSEG304" class="sect2">
<h3 class="sect2">Using SELECT FOR UPDATE in User Queries on VPD-Protected Tables</h3>
<p>As a general rule, users should not include the <code dir="ltr">FOR UPDATE</code> clause when querying Virtual Private Database-protected tables. The <a id="sthref1426"></a><a id="sthref1427"></a>Virtual Private Database technology depends on rewriting the user's query against an inline view that includes the VPD predicate generated by the VPD policy function. Because of this, the same limitations on views also apply to VPD-protected tables. If a user's query against a VPD-protected table includes the <code dir="ltr">FOR UPDATE</code> clause in a <code dir="ltr">SELECT</code> statement, in most cases, the query may not work. However, the user's query may work in some situations if the inline view generated by VPD is sufficiently simple.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF01706" href="../../server.112/e41084/statements_10002.htm#SQLRF01706"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the restrictions of the <code dir="ltr">FOR UPDATE</code> clause in the <code dir="ltr">SELECT</code> statement</div>
</div>
<!-- class="sect2" -->
<a id="CIHHADGH"></a>
<div id="DBSEG305" class="sect2">
<h3 class="sect2">How Oracle Virtual Private Database Policies Affect Outer or ANSI Join Operations</h3>
<p>Oracle Virtual Private Database <a id="sthref1428"></a><a id="sthref1429"></a>rewrites <a id="sthref1430"></a><a id="sthref1431"></a>SQL by using dynamic views. For SQL that contains outer join or ANSI operations, some views may not merge and some indexes may not be used. This problem is a known optimization limitation. To remedy this problem, rewrite the SQL to not use outer joins or ANSI operations.</p>
</div>
<!-- class="sect2" -->
<a id="CIHHJIDA"></a>
<div id="DBSEG306" class="sect2">
<h3 class="sect2">How Oracle Virtual Private Database Security Policies Work with Applications</h3>
<p>An Oracle Virtual Private Database <a id="sthref1432"></a><a id="sthref1433"></a>security policy is applied within the database itself, rather than within an application. Hence, a user trying to access data by using a different application cannot bypass the Oracle Virtual Private Database security policy. Another advantage of creating the security policy in the database is that you maintain it in one central place, rather than maintaining individual security policies in multiple applications. Oracle Virtual Private Database provides stronger security than<a id="sthref1434"></a> application-based security, at a lower cost of ownership.</p>
<p>You may want to enforce different security policies depending on the application that is accessing data. Consider a situation in which two applications, Order Entry and Inventory, both access the <code dir="ltr">orders</code> table. You may want to have the Inventory application use a policy that limits access based on type of product. At the same time, you may want to have the Order Entry application use a policy that limits access based on customer number.</p>
<p>In this case, you must partition the use of fine-grained access by application. Otherwise, both policies would be automatically concatenated together, which may not be the result that you want. You can specify two or more policy groups, and a driving application context that determines which policy group is in effect for a given transaction. You can also designate default policies that always apply to data access. In a hosted application, for example, data access should be limited by subscriber ID. See <a href="#CIHCIJAH">"Tutorial: Implementing an Oracle Virtual Private Database Policy Group"</a> for an example of how you can create policy groups that use an application context to determine which group should be used.</p>
</div>
<!-- class="sect2" -->
<a id="CIHDGHFI"></a>
<div id="DBSEG307" class="sect2">
<h3 class="sect2">Using Automatic Reparsing for Fine-Grained Access Control Policy Functions</h3>
<p>By <a id="sthref1435"></a><a id="sthref1436"></a>default, queries against objects enabled with fine-grained access control run the policy function to ensure that the most current predicate is used for each policy. For example, in the case of a time-based policy function, in which queries are only allowed between 8:00 a.m. and 5:00 p.m., a cursor execution parsed at noon runs the policy function at that time, ensuring that the policy is consulted again for the query. Even if the curser was parsed at 9 a.m., when it runs later on (for example, at noon), then the Virtual Private Database policy function runs again to ensure that the execution of the cursor is still permitted at the current time (noon). This ensures that the security check it must perform is the most recent.</p>
<p>Automatic re-execution of the Virtual Private Database policy function does not occur when you set the <code dir="ltr">DBMS_RLS.ADD_POLICY</code> setting <code dir="ltr">STATIC_POLICY</code> to <code dir="ltr">TRUE</code> while adding the policy. This setting causes the policy function to return the same predicate.</p>
</div>
<!-- class="sect2" -->
<a id="CIHFEGEJ"></a>
<div id="DBSEG308" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using Oracle Virtual Private Database Policies and Flashback Query</h3>
<p>By default, operations on the database use the most recently committed data available. The <a id="sthref1437"></a><a id="sthref1438"></a>flashback query feature enables you to query the database at some point in the past. To write an application that uses flashback query, you can use the <code dir="ltr">AS OF</code> clause in SQL queries to specify either a time or a system change number (SCN), and then query against the committed data from the specified time. You can also use the <code dir="ltr">DBMS_FLASHBACK</code> PL/SQL package, which requires more code, but enables you to perform multiple operations, all of which refer to the same point in time.</p>
<p>However, if you use flashback query against a database object that is protected with Oracle Virtual Private Database policies, then the current policies are applied to the old data. Applying the current Oracle Virtual Private Database policies to flashback query data is more secure because it reflects the most current business policy.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADFNS1008" href="../../appdev.112/e41502/adfns_flashback.htm#ADFNS1008"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for more information about the flashback query feature and how to write applications that use it</p>
</li>
<li>
<p><a class="olink ARPLS142" href="../../appdev.112/e40758/d_flashb.htm#ARPLS142"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code dir="ltr">DBMS_FLASHBACK</code> PL/SQL package</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CIHIJBCI"></a>
<div id="DBSEG80854" class="sect2">
<h3 class="sect2">Using Oracle Virtual Private Database and Oracle Label Security</h3>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CIHFABEG">Using Oracle Virtual Private Database to Enforce Oracle Label Security Policies</a></p>
</li>
<li>
<p><a href="#CIHEEAFJ">Oracle Virtual Private Database and Oracle Label Security Exceptions</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink OLSAG" href="../e10745/toc.htm"><span class="italic">Oracle Label Security Administrator's Guide</span></a></div>
<a id="CIHFABEG"></a>
<div id="DBSEG88541" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using Oracle Virtual Private Database to Enforce Oracle Label Security Policies</h4>
<p>You <a id="sthref1439"></a><a id="sthref1440"></a>can use Oracle Virtual Private Database policies to provide column or row-level access control based on Oracle Label Security user authorizations. In general, you need to perform the following steps:</p>
<ol>
<li>
<p>When you create the Oracle Label Security policy, do not apply the policy to the table that you want to protect. (The Virtual Private Database policy that you create handles this for you.) In the <code dir="ltr">SA_SYSDBA.CREATE_POLICY</code> procedure, set the <code dir="ltr">default_options</code> parameter to <code dir="ltr">NO_CONTROL</code>.</p>
</li>
<li id="CIHGJFFG">
<p>Create the Oracle Label Security label components and authorize users as you normally would.</p>
</li>
<li>
<p>When you create the Oracle Virtual Private Database policy, do the following:</p>
<ul>
<li>
<p>In the PL/SQL function that you create for the policy, use the Oracle Label Security <code dir="ltr">DOMINATES</code> function to compare the authorization of the user with the label that you created in Step <a href="#CIHGJFFG">2</a>. (See <a class="olink OLSAG3484" href="../../network.112/e10745/appxa.htm#OLSAG3484"><span class="italic">Oracle Label Security Administrator's Guide</span></a> for more information about the dominance functions.) The <code dir="ltr">DOMINATES</code> function determines if the user authorization is equal to, or if it is more sensitive than, the label used in the comparison. If the user authorization passes, then the user is granted access to the column. Otherwise, the user is denied access.</p>
</li>
<li>
<p>In the Virtual Private Database policy definition, apply this function to the table that you want to protect. In the <code dir="ltr">DBMS_RLS.ADD_POLICY</code> procedure, use the sensitive column (<code dir="ltr">SEC_RELEVANT_COLS</code> parameter) and column masking (<code dir="ltr">SEC_RELEVANT_COLS_OPT</code> parameter) functionality to show or hide columns based on Oracle Label Security user authorizations.</p>
</li>
</ul>
</li>
</ol>
<p>For an example of how to accomplish this, visit the following Oracle Technology Network site:</p>
<p><a href="http://www.oracle.com/technetwork/database/focus-areas/security/ols-cs1-099558.html"><code dir="ltr">http://www.oracle.com/technetwork/database/focus-areas/security/ols-cs1-099558.html"&gt;&gt;http://www.oracle.com/technetwork/database/focus-areas/security/ols-cs1-099558.html</code></a></p>
</div>
<!-- class="sect3" -->
<a id="CIHEEAFJ"></a>
<div id="DBSEG309" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Oracle Virtual Private Database and Oracle Label Security Exceptions</h4>
<p><a id="sthref1441"></a>Be aware of the following exceptions when you use Oracle Virtual Private Database and Oracle Label Security:</p>
<ul>
<li>
<p><span class="bold"><a id="sthref1442"></a>When <a id="sthref1443"></a>you are exporting data, <a id="sthref1444"></a>Oracle Virtual Private Database and Oracle Label Security policies are not enforced during a direct path export operation.</span> In a direct path export operation, Oracle Database reads data from disk into the buffer cache and transfers rows directly to the Export client. See <a class="olink SUTIL009" href="../../server.112/e22490/ldr_modes.htm#SUTIL009"><span class="italic">Oracle Database Utilities</span></a> for more information about direct path export operations.</p>
</li>
<li>
<p><a id="sthref1445"></a><span class="bold">You cannot apply Oracle Virtual Private Database policies and Oracle Label Security policies to objects in the SYS schema.</span> The <code dir="ltr">SYS</code> user and users making a DBA-privileged connection to the database (for example, <code dir="ltr">CONNECT/AS SYSDBA</code>) do not have Oracle Virtual Private Database or Oracle Label Security policies applied to their actions. The database user <code dir="ltr">SYS</code> is thus always exempt from Oracle Virtual Private Database or Oracle Label Security enforcement, regardless of the export mode, application, or utility used to extract data from the database.</p>
<p>However, you can audit <code dir="ltr">SYSDBA</code> actions by enabling auditing upon installation and specifying that this audit trail be stored in a secure location in the operating system. See <a href="auditing.htm#BCGEHHCA">"Auditing SYS Administrative Users"</a> for more information. You can also closely monitor the <code dir="ltr">SYS</code> user by using Oracle Database Vault.</p>
</li>
<li>
<p><span class="bold"><a id="sthref1446"></a>Database users who were granted the EXEMPT ACCESS POLICY privilege, either directly or through a database role, are exempt from Oracle Virtual Private Database enforcements.</span> The system privilege <code dir="ltr">EXEMPT ACCESS POLICY</code> allows a user to be exempted from all fine-grained access control policies on any <code dir="ltr">SELECT</code> or DML operation (<code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, and <code dir="ltr">DELETE</code>). This provides ease of use for administrative activities, such as installation and import and export of the database, through a non-<code dir="ltr">SYS</code> schema.</p>
<p>However, the following policy enforcement options remain in effect even when <code dir="ltr">EXEMPT ACCESS POLICY</code> is granted:</p>
<ul>
<li>
<p><code dir="ltr">INSERT_CONTROL</code>, <code dir="ltr">UPDATE_CONTROL</code>, <code dir="ltr">DELETE_CONTROL</code>, <code dir="ltr">WRITE_CONTROL</code>, <code dir="ltr">LABEL_UPDATE</code>, and <code dir="ltr">LABEL_DEFAULT</code></p>
</li>
<li>
<p>If the Oracle Label Security policy specifies the <code dir="ltr">ALL_CONTROL</code> option, then all enforcement controls are applied except <code dir="ltr">READ_CONTROL</code> and <code dir="ltr">CHECK_CONTROL</code>.</p>
</li>
</ul>
<p>Because <code dir="ltr">EXEMPT ACCESS POLICY</code> negates the effect of fine-grained access control, you should only grant this privilege to users who have legitimate reasons for bypassing fine-grained access control enforcement. Do not grant this privilege using the <code dir="ltr">WITH ADMIN OPTION</code>. If you do, users could pass the <code dir="ltr">EXEMPT ACCESS POLICY</code> privilege to other users, and thus propagate the ability to bypass fine-grained access control.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The <code dir="ltr">EXEMPT ACCESS POLICY</code> privilege does not affect the enforcement of object privileges such as <code dir="ltr">SELECT</code>, <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, and <code dir="ltr">DELETE</code>. These privileges are enforced even if a user was granted the <code dir="ltr">EXEMPT ACCESS POLICY</code> privilege.</p>
</li>
<li>
<p>The <code dir="ltr">SYS_CONTEXT</code> values that Oracle Virtual Private Database uses are not propagated to secondary databases for failover.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABBGDIH"></a>
<div id="DBSEG905" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Exporting Data Using the EXPDP Utility access_method Parameter</h3>
<p>If <a id="sthref1447"></a>you <a id="sthref1448"></a>try to use the Oracle Data Pump Export (<code dir="ltr">EXPDP</code>) utility with the <code dir="ltr">access_method</code> parameter set to <code dir="ltr">direct_path</code> to export data from a schema which contains an object that has a Virtual Private Database policy defined on it, then the following error message may appear and the export operation will fail:</p>
<pre dir="ltr">
ORA-31696: unable to export/import TABLE_DATA:"<span class="italic">schema.table</span>" using client specified DIRECT_PATH method
</pre>
<p>This problem only occurs when you perform a schema-level export as a user who has not been granted the <code dir="ltr">EXP_FULL_DATABASE</code> role. It does not occur during a full database export, which requires the <code dir="ltr">EXP_FULL_DATABASE</code> role. The <code dir="ltr">EXP_FULL_DATABASE</code> role includes the <code dir="ltr">EXEMPT ACCESS POLICY</code> system privilege, which bypasses Virtual Private Database policies.</p>
<p>To find the underlying problem, try the <code dir="ltr">EXPDP</code> invocation again, but do not set the <code dir="ltr">access_method</code> parameter to <code dir="ltr">direct_path</code>. Instead, use either <code dir="ltr">automatic</code> or <code dir="ltr">external_table</code>. The underlying problem could be a permissions problem, for example:</p>
<pre dir="ltr">
ORA-39181: Only partial table data may be exported due to fine grain access control on "<span class="italic">schema_name</span>"."<span class="italic">object_name</span>"
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SUTIL200" href="../../server.112/e22490/dp_export.htm#SUTIL200"><span class="italic">Oracle Database Utilities</span></a> for more information about using Data Pump Export.</div>
</div>
<!-- class="sect2" -->
<a id="CIHHIJGB"></a>
<div id="DBSEG310" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">User Models and Oracle Virtual Private Database</h3>
<p><a id="sthref1449"></a><a id="sthref1450"></a>You can use Oracle Virtual Private Database in the following types of user models:</p>
<ul>
<li>
<p><span class="bold">Application users who are also database users.</span> <a id="sthref1451"></a><a id="sthref1452"></a>Oracle Database enables applications to enforce fine-grained access control for each user, regardless of whether that user is a database user or an application user unknown to the database. When application users are also database users, Oracle Virtual Private Database enforcement works as follows: users connect to the database, and then the application sets up application contexts for each session. (You can use the default <code dir="ltr">USERENV</code> application context namespace, which provides many parameters for retrieve different types of user session data.) As each session is initiated under a different user name, it can enforce different fine-grained access control conditions for each user.</p>
</li>
<li>
<p><span class="bold">Proxy authentication using OCI or JDBC/OCI.</span> <a id="sthref1453"></a><a id="sthref1454"></a>Proxy <a id="sthref1455"></a><a id="sthref1456"></a>authentication permits different fine-grained access control for each user, because each session (OCI or JDBC/OCI) is a distinct database session with its own application context.</p>
</li>
<li>
<p><span class="bold">Proxy authentication integrated with Enterprise User Security.</span> <a id="sthref1457"></a><a id="sthref1458"></a>If you have integrated proxy authentication by using Enterprise User Security, you can retrieve user roles and other attributes from Oracle Internet Directory to enforce Oracle Virtual Private Database policies. (In addition, globally initialized application context can also be retrieved from the directory.)</p>
</li>
<li>
<p><span class="bold">Users connecting as One Big Application User.</span> <a id="sthref1459"></a>Applications <a id="sthref1460"></a><a id="sthref1461"></a>connecting to the database as a single user on behalf of all users can have fine-grained access control for each user. The user for that single session is often called <span class="italic">One Big Application User</span>. Within the context of that session, however, an application developer can create a <a id="sthref1462"></a>global application <a id="sthref1463"></a>context attribute to represent the individual application user (for example, <code dir="ltr">REALUSER</code>). Although all database sessions and audit records are created for One Big Application User, the attributes for each session can vary, depending on who the end user is. This model works best for applications with a limited number of users and no reuse of sessions. The scope of roles and database auditing is diminished because each session is created as the same database user. For more information about global application contexts, see <a href="app_context.htm#CIHFJHCG">"Using Global Application Contexts"</a>.</p>
</li>
<li>
<p><span class="bold">Web-based applications.</span> <a id="sthref1464"></a><a id="sthref1465"></a>Web-based applications typically have hundreds of users. Even when there are persistent connections to the database, supporting data retrieval for many user requests, these connections are not specific to particular Web-based users. Instead, Web-based applications typically set up and reuse connections, to provide scalability, rather than having different sessions for each user. For example, when Web users Jane and Ajit connect to a middle tier application, it may establish a single database session that it uses on behalf of both users. Typically, neither Jane nor Ajit is known to the database. The application is responsible for switching the user name on the connection, so that, at any given time, it is either Jane or Ajit using the session.</p>
<p>Oracle Virtual Private Database helps with connection pooling by allowing multiple connections to access more than one global application context. This ability makes it unnecessary to establish a separate application context for each distinct user session.</p>
</li>
</ul>
<p><a href="#CIHEFICI">Table 7-3</a> summarizes how Oracle Virtual Private Database applies to user models.</p>
<div id="DBSEG311" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref1466"></a><a id="CIHEFICI"></a>Table 7-3 Oracle Virtual Private Database in Different User Models</p>
<table class="cellalignment2250" title="Oracle Virtual Private Database in Different User Models" summary="This table summarizes how VPD works in certain user models." dir="ltr">
<thead>
<tr class="cellalignment2244">
<th class="cellalignment2251" id="r1c1-t26">User Model Scenario</th>
<th class="cellalignment2255" id="r1c2-t26">Individual Database Connection</th>
<th class="cellalignment2255" id="r1c3-t26">Separate Application Context per User</th>
<th class="cellalignment2251" id="r1c4-t26">Single Database Connection</th>
<th class="cellalignment2251" id="r1c5-t26">Application Must Switch User Name</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r2c1-t26" headers="r1c1-t26">
<p>Application users are also database users</p>
</td>
<td class="cellalignment2252" headers="r2c1-t26 r1c2-t26">
<p>Yes</p>
</td>
<td class="cellalignment2252" headers="r2c1-t26 r1c3-t26">
<p>Yes</p>
</td>
<td class="cellalignment2252" headers="r2c1-t26 r1c4-t26">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r2c1-t26 r1c5-t26">
<p>No</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r3c1-t26" headers="r1c1-t26">
<p>Proxy authentication using OCI or JDBC/OCI</p>
</td>
<td class="cellalignment2252" headers="r3c1-t26 r1c2-t26">
<p>Yes</p>
</td>
<td class="cellalignment2252" headers="r3c1-t26 r1c3-t26">
<p>Yes</p>
</td>
<td class="cellalignment2252" headers="r3c1-t26 r1c4-t26">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r3c1-t26 r1c5-t26">
<p>No</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r4c1-t26" headers="r1c1-t26">
<p>Proxy authentication integrated with Enterprise User Security<a id="sthref1467" href="#sthref1467" onclick='footdisplay(1,"User roles and other attributes, including globally initialized application context, can be retrieved from Oracle Internet Directory to enforce Oracle Virtual Private Database.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment2252" headers="r4c1-t26 r1c2-t26">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r4c1-t26 r1c3-t26">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r4c1-t26 r1c4-t26">
<p>Yes</p>
</td>
<td class="cellalignment2252" headers="r4c1-t26 r1c5-t26">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r5c1-t26" headers="r1c1-t26">
<p>One Big Application User</p>
</td>
<td class="cellalignment2252" headers="r5c1-t26 r1c2-t26">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r5c1-t26 r1c3-t26">
<p>No<a id="sthref1468" href="#sthref1468" onclick='footdisplay(2,"Application developers can create a global application context attribute representing individual application users (for example, \u003ccode dir=\"ltr\"\u003eREALUSER)\u003c/code\u003e, which can then be used for controlling each session attributes, or for auditing.")'><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
<td class="cellalignment2252" headers="r5c1-t26 r1c4-t26">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r5c1-t26 r1c5-t26">
<p>Yes<sup>2</sup></p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r6c1-t26" headers="r1c1-t26">
<p>Web-based applications</p>
</td>
<td class="cellalignment2252" headers="r6c1-t26 r1c2-t26">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r6c1-t26 r1c3-t26">
<p>No</p>
</td>
<td class="cellalignment2252" headers="r6c1-t26 r1c4-t26">
<p>Yes</p>
</td>
<td class="cellalignment2252" headers="r6c1-t26 r1c5-t26">
<p>Yes</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>User roles and other attributes, including globally initialized application context, can be retrieved from Oracle Internet Directory to enforce Oracle Virtual Private Database.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>Application developers can create a global application context attribute representing individual application users (for example, <code dir="ltr">REALUSER)</code>, which can then be used for controlling each session attributes, or for auditing.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHJGHDE"></a>
<div id="DBSEG312" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Finding Information About Oracle Virtual Private Database Policies</h2>
<p><a id="sthref1469"></a><a id="sthref1470"></a><a href="#CIHGIGID">Table 7-4</a> lists data dictionary views that you can use to find information about Oracle Virtual Private Database policies. See <a class="olink REFRN" href="../../server.112/e40402/toc.htm"><span class="italic">Oracle Database Reference</span></a> for more information about these views.</p>
<div id="DBSEG313" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref1471"></a><a id="CIHGIGID"></a>Table 7-4 Data Dictionary Views That Display Information about VPD Policies</p>
<table class="cellalignment2250" title="Data Dictionary Views That Display Information about VPD Policies" summary="VPD Policy Views" dir="ltr">
<thead>
<tr class="cellalignment2244">
<th class="cellalignment2251" id="r1c1-t27">View</th>
<th class="cellalignment2251" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r2c1-t27" headers="r1c1-t27">
<p><code dir="ltr">ALL_POLICIES</code></p>
</td>
<td class="cellalignment2252" headers="r2c1-t27 r1c2-t27">
<p>Describes all Oracle Virtual Private Database security policies for objects accessible to the current user.</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r3c1-t27" headers="r1c1-t27">
<p><code dir="ltr">ALL_POLICY_CONTEXTS</code></p>
</td>
<td class="cellalignment2252" headers="r3c1-t27 r1c2-t27">
<p>Describes the driving contexts defined for the synonyms, tables, and views accessible to the current user. A driving context is an application context used in an Oracle Virtual Private Database policy.</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r4c1-t27" headers="r1c1-t27">
<p><code dir="ltr">ALL_POLICY_GROUPS</code></p>
</td>
<td class="cellalignment2252" headers="r4c1-t27 r1c2-t27">
<p>Describes the Oracle Virtual Private Database policy groups defined for the synonyms, tables, and views accessible to the current user</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r5c1-t27" headers="r1c1-t27">
<p><code dir="ltr">ALL_SEC_RELEVANT_COLS</code></p>
</td>
<td class="cellalignment2252" headers="r5c1-t27 r1c2-t27">
<p>Describes the security relevant columns of the security policies for the tables and views accessible to the current user</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r6c1-t27" headers="r1c1-t27">
<p><code dir="ltr">DBA_POLICIES</code></p>
</td>
<td class="cellalignment2252" headers="r6c1-t27 r1c2-t27">
<p>Describes all Oracle Virtual Private Database security policies in the database.</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r7c1-t27" headers="r1c1-t27">
<p><code dir="ltr">DBA_POLICY_GROUPS</code></p>
</td>
<td class="cellalignment2252" headers="r7c1-t27 r1c2-t27">
<p>Describes all policy groups in the database.</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r8c1-t27" headers="r1c1-t27">
<p><code dir="ltr">DBA_POLICY_CONTEXTS</code></p>
</td>
<td class="cellalignment2252" headers="r8c1-t27 r1c2-t27">
<p>Describes all driving contexts in the database. Its columns are the same as those in <code dir="ltr">ALL_POLICY_CONTEXTS</code>.</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r9c1-t27" headers="r1c1-t27">
<p><code dir="ltr">DBA_SEC_RELEVANT_COLS</code></p>
</td>
<td class="cellalignment2252" headers="r9c1-t27 r1c2-t27">
<p>Describes the security relevant columns of all security policies in the database</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r10c1-t27" headers="r1c1-t27">
<p><code dir="ltr">USER_POLICIES</code></p>
</td>
<td class="cellalignment2252" headers="r10c1-t27 r1c2-t27">
<p>Describes all Oracle Virtual Private Database security policies associated with objects owned by the current user. This view does not display the <code dir="ltr">OBJECT_OWNER</code> column.</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r11c1-t27" headers="r1c1-t27">
<p><code dir="ltr">USER_POLICY_CONTEXTS</code></p>
</td>
<td class="cellalignment2252" headers="r11c1-t27 r1c2-t27">
<p>Describes the driving contexts defined for the synonyms, tables, and views owned by the current user. Its columns (except for <code dir="ltr">OBJECT_OWNER</code>) are the same as those in <code dir="ltr">ALL_POLICY_CONTEXTS</code>.</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r12c1-t27" headers="r1c1-t27">
<p><code dir="ltr">USER_SEC_RELEVANT_COLS</code></p>
</td>
<td class="cellalignment2252" headers="r12c1-t27 r1c2-t27">
<p>Describes the security relevant columns of the security policies for the tables and views owned by the current user. Its columns (except for <code dir="ltr">OBJECT_OWNER</code>) are the same as those in <code dir="ltr">ALL_SEC_RELEVANT_COLS</code>.</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r13c1-t27" headers="r1c1-t27">
<p><code dir="ltr">USER_POLICY_GROUPS</code></p>
</td>
<td class="cellalignment2252" headers="r13c1-t27 r1c2-t27">
<p>Describes the policy groups defined for the synonyms, tables, and views owned by the current user. This view does not display the <code dir="ltr">OBJECT_OWNER</code> column.</p>
</td>
</tr>
<tr class="cellalignment2244">
<td class="cellalignment2252" id="r14c1-t27" headers="r1c1-t27">
<p><code dir="ltr">V$VPD_POLICY</code></p>
</td>
<td class="cellalignment2252" headers="r14c1-t27 r1c2-t27">
<p>Displays all the fine-grained security policies and predicates associated with the cursors currently in the library cache. This view is useful for finding the policies that were applied to a SQL statement.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
In addition to these views, check the database trace file if you find errors in application that use Virtual Private Database policies. See <a class="olink PFGRF010" href="../../server.112/e41573/sqltrace.htm#PFGRF010"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for more information about trace files. The <code dir="ltr">USER_DUMP_DEST</code> initialization parameter specifies the current location of the trace files. You can find the value of this parameter by issuing <code dir="ltr">SHOW PARAMETER USER_DUMP_DEST</code> in SQL*Plus.</div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2243">
<tr>
<td class="cellalignment2252">
<table class="cellalignment2248">
<tr>
<td class="cellalignment2247"><a href="app_context.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2247"><a href="data_encryption.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2017,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2254">
<table class="cellalignment2246">
<tr>
<td class="cellalignment2247"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2247"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2247"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2247"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2247"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2247"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
