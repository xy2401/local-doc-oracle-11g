<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>OLAP_TABLE</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 742" />
<meta name="dcterms.created" content="2013-11-14T21:21:59Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="OLAP DML Reference" />
<meta name="dcterms.identifier" content="E17122-08" />
<meta name="dcterms.isVersionOf" content="OLADM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="dml_app_sqlfunc.htm" title="Previous" type="text/html" />
<link rel="Next" href="dml_app_sqlfunc002.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e17122.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">551/593</span> <!-- End Header --><a id="g1004021"></a>
<hr />
<div id="OLADM940" class="refsect1"><a id="i82152"></a>
<h1 class="refsect1">OLAP_TABLE</h1>
<p><a id="ABC996846"></a><code>OLAP_TABLE</code> is a SQL function that extracts multidimensional data from an analytic workspace and presents it in the two-dimensional format of a relational table.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_app_sqlfunc.htm#CIHIFEAD">"Creating Relational Views Using OLAP_TABLE"</a> and <a href="dml_app_sqlfunc.htm#CHDHDDDI">"Using OLAP DML Expressions in SELECT FROM OLAP_TABLE Statements"</a>.</div>
<p>The <code>OLAP_TABLE</code> function returns multidimensional data in an analytic workspace as a logical table.</p>
<p>The order in which <code>OLAP_TABLE</code> processes information specified in its input parameters is described in <a href="#CIHIHFHJ">"Order of Processing in OLAP_TABLE"</a>.</p>
<p><code>OLAP_TABLE</code> is the fundamental mechanism in the database for querying an analytic workspace. Within a SQL statement, you can specify an <code>OLAP_TABLE</code> function call wherever you would provide the name of a table or view.</p>
<p><code>OLAP_TABLE</code> returns a table of objects that can be joined to relational tables and views, and to other tables of objects populated by <code>OLAP_TABLE</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot execute this function from within the OLAP Worksheet. You must execute it in a SQL tool such as SQL Worksheet.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5365"></a>Returns</p>
<p>A table type whose rows are objects (ADTs) that identify the selected workspace data. See <a href="dml_app_sqlfunc.htm#CIHIFEAD">"Creating Relational Views Using OLAP_TABLE"</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5366"></a>Syntax</p>
<pre>
OLAP_TABLE(
        analytic_workspace    IN   VARCHAR2,
        table_object          IN   VARCHAR2,
        olap_command          IN   VARCHAR2,
        limit_map1            IN   VARCHAR2,
        limit_map2            IN   VARCHAR2,
              .
              .
              .
        limit_map8            IN   VARCHAR2)
     RETURN TYPE;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5367"></a>Parameters</p>
<dl>
<dt><span class="italic">analytic_workspace</span></dt>
<dd id="CHDDGCDD">
<p><a id="sthref5368"></a>Provides the name of the analytic workspace where the source data is stored. It also specifies how long the analytic workspace is attached to your OLAP session, which opens on your first call to <code>OLAP_TABLE</code>.</p>
<p>This parameter is always required by <code>OLAP_TABLE</code>.</p>
<p>The syntax of this parameter is:</p>
<pre>
'[<span class="italic">owner.</span>]<span class="italic">aw_name</span> DURATION QUERY | SESSION'
</pre>
<p>For example:</p>
<pre>
'olapuser.xademo DURATION SESSION'
</pre>
<ul>
<li>
<p><span class="bolditalic">owner</span></p>
<p>Specify <span class="italic">owner</span> whenever you are creating views to be accessed by other users. Otherwise, you can omit the <span class="italic">owner</span> if you own the analytic workspace. It is required only when you are logged in under a different user name than the owner.</p>
</li>
<li>
<p><span class="bold">QUERY</span></p>
<p>Attaches an analytic workspace for the duration of a single query. Use <code>QUERY</code> only when you must see updates to the analytic workspace made in other sessions.</p>
</li>
<li>
<p><span class="bold">SESSION</span></p>
<p>Attaches an analytic workspace and keeps it attached after the query. It provides better performance than <code>QUERY</code> because it keeps the OLAP session open. This performance difference is significant when the function is called without either a <span class="italic">table_object</span> parameter or <code>AS</code> clauses in the limit map; in this case, the <code>OLAP_TABLE</code> function must determine the appropriate table definition. See <a href="dml_app_sqlfunc.htm#CIHGDBCB">"Using OLAP_TABLE With Automatic ADTs"</a>.</p>
</li>
</ul>
</dd>
<dd><a id="CIHHHHCC"></a></dd>
<dt><span class="italic">table_object</span></dt>
<dd>
<p><a id="sthref5369"></a><a id="sthref5370"></a>The name of a predefined table of objects, as described in <a href="dml_app_sqlfunc.htm#CHDEIDBG">"Using OLAP_TABLE With Predefined ADTs"</a>.</p>
<p>This parameter is optional. Omit this parameter when you are using automatic ADTs.</p>
<p>The syntax of this parameter is:</p>
<pre>
'<span class="italic">table_name</span>'
</pre>
<p>For example:</p>
<pre>
'product_dim_tbl'
</pre>
<p>When you specify the <span class="italic">table_name</span> parameter, the column data types for the returned data are predefined. In this case you cannot use <code>AS</code> clauses in the limit map.</p>
<p>When you omit the <span class="italic">table_name</span> parameter, the column data types for the returned data are generated at run time. You can either provide the target data types with <code>AS</code> clauses in the limit map, or you can use the default data types described in <a href="#CIAFCIEA">Table A-1, "Default Data Type Conversions"</a>. See <a href="dml_app_sqlfunc.htm#CIHGDBCB">"Using OLAP_TABLE With Automatic ADTs"</a>.</p>
</dd>
<dd><a id="CIHFFIBI"></a></dd>
<dt><span class="italic">olap_command</span></dt>
<dd>
<p>A single OLAP DML command. To execute multiple commands, create a program in your analytic workspace and call the program in this parameter. The power and flexibility of this parameter comes from its ability to process virtually any data manipulation commands available in the OLAP DML.</p>
<p>The order in which <code>OLAP_TABLE</code> processes the <span class="italic">olap_command</span> parameter is specified in <a href="#CIHIHFHJ">"Order of Processing in OLAP_TABLE"</a>.</p>
<p>The syntax of this parameter is:</p>
<pre>
'<span class="italic">olap_command</span>'
</pre>
<p>There are two distinct ways of using the <span class="italic">olap_command</span> parameter:</p>
<ul>
<li>
<p>To make changes in the workspace session immediately before the data is fetched (after all the limits have been applied) as described in <a href="#CIHJADBF">"Using FETCH in the olap_command Parameter"</a>.</p>
</li>
<li>
<p>To specify the source data directly instead of using a limit map as described in <a href="#CIHICDGB">"Using olap_command with a Limit Map"</a>.</p>
</li>
</ul>
</dd>
<dd><a id="CIHCGCBF"></a></dd>
<dt><span class="italic">limit_map</span></dt>
<dd>
<p>Maps workspace objects to relational columns and identifies the role of each one. See <a href="dml_app_sqlfunc.htm#CIHIFEAD">"Creating Relational Views Using OLAP_TABLE"</a>.</p>
<p>The limit map can also specify special instructions to be executed by <code>OLAP_TABLE</code>. For example: It can cause an OLAP DML command to execute before or after the limit map is processed; it can specify a <code>ROW2CELL</code> column for the <code>OLAP_CONDITION</code> and <code>OLAP_EXPRESSION</code> functions. (See <a href="dml_app_sqlfunc002.htm#CIHJHDCH">"OLAP_CONDITION"</a> and <a href="dml_app_sqlfunc003.htm#BGBGDDDF">"OLAP_EXPRESSION"</a>.)</p>
<p>The order in which <code>OLAP_TABLE</code> processes information in the limit map is specified in <a href="#CIHIHFHJ">"Order of Processing in OLAP_TABLE"</a>.</p>
<p>The limit map parameter is generally a required parameter. It can only be omitted when you specify a <code>FETCH</code> command in the <span class="italic">olap_command</span> parameter. See the discussion of <a href="#CIHFFIBI"><span class="italic">olap_command</span></a>.</p>
<p>You can supply the entire text of the limit map as a parameter to <code>OLAP_TABLE</code>, or you can store all or part of the limit map in a text variable in the analytic workspace and reference it using ampersand substitution. For example, the following <code>OLAP_TABLE</code> query uses a limit map stored in a variable called <code>limitmapvar</code> in the <code>MYAW</code> analytic workspace of the <code>MYAW_AW</code> schema.</p>
<pre>
SELECT * FROM TABLE(OLAP_TABLE(
          'myaw_aw.myaw DURATION SESSION',
          '',
          '',
          '&amp;(myaw_aw.myaw!limitmapvar)');
</pre>
<p>If you supply the limit map as text within the call to <code>OLAP_TABLE</code>, then it has a maximum length of 4,000 characters, which is imposed by PL/SQL. If you store the limit map in the analytic workspace, then the limit map has no maximum length.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Several analytic workspace objects must be predefined within the workspace to support the mapping of dimension hierarchies in the limit map. For more information, see <a href="dml_app_sqlfunc.htm#CHDBIHFI">"Required OLAP DML Objects"</a>.</div>
<p><a id="sthref5371"></a>The syntax of the limit map has numerous clauses, primarily for defining dimension hierarchies. Pay close attention to the presence or absence of commas, because syntax errors prevents your limit map from being parsed.</p>
<pre>
'[MEASURE <span class="italic">column</span> [AS <span class="italic">datatype</span>] FROM {<span class="italic">measure</span> | AW_EXPR <span class="italic">expression</span>}]
           .
           .
 DIMENSION [<span class="italic">column </span>[AS <span class="italic">datatype</span>] FROM] <span class="italic">dimension</span> 
    [WITH
       [HIERARCHY [<span class="italic">column</span> [AS <span class="italic">datatype</span>] FROM] <span class="italic">parent_relation</span>
          [<span class="italic">(hierarchy_dimension</span> ''<span class="italic">hierarchy_name</span>'')]
          [INHIERARCHY <span class="italic">inhierarchy_obj</span>]
          [GID <span class="italic">column</span> [AS <span class="italic">datatype</span>] FROM <span class="italic">gid_relation</span>]
          [PARENTGID <span class="italic">column</span> [AS <span class="italic">datatype</span>] FROM <span class="italic">gid_relation</span>]
          [FAMILYREL <span class="italic">column1</span> [AS <span class="italic">datatype</span>],  
                     <span class="italic">column2</span> [AS <span class="italic">datatype</span>],
                      ... <span class="italic">column</span>n [AS <span class="italic">datatype</span>]
                     FROM {<span class="italic">expression1, expression2, ... expression</span>n | 
                           <span class="italic">family_relation</span> USING <span class="italic">level_dimension </span>}
                     [LABEL <span class="italic">label_variable</span>]]
          [HATTRIBUTE <span class="italic">column</span> [AS <span class="italic">datatype</span>] FROM <span class="italic">hier_attribute_variable]</span> 
           .
           .
       ]
       [ATTRIBUTE <span class="italic">column</span> [AS <span class="italic">datatype</span>] FROM <span class="italic">attribute_variable</span>]
           .
           .
    ]
 [ROW2CELL <span class="italic">column</span>] 
 [LOOP  <span class="italic">loop-clause</span>]
 [PREDMLCMD <span class="italic">olap_command</span>]
 [POSTDMLCMD <span class="italic">olap_command</span>]'
</pre>
<p>Where:</p>
<p><span class="italic">column</span> is the name of a column in the target table.</p>
<p><span class="italic">datatype</span> is the data type of <span class="italic">column</span>.</p>
<p><span class="italic">measure</span> is a variable, formula, or relation in the analytic workspace.</p>
<p><span class="italic">expression</span> is a formula or qualified data reference for objects in the analytic workspace.</p>
<p><span class="italic">dimension</span> is a dimension in the analytic workspace.</p>
<p><span class="italic">parent_relation</span> is a self-relation in the analytic workspace that defines the hierarchies for <span class="italic">dimension</span>. See <a href="dml_basics.htm#BABGGIEH">"Parentrel Relation"</a> for more information.</p>
<p><span class="italic">hierarchy_dimension</span> is a dimension in the analytic workspace that contains the names of the hierarchies for <span class="italic">dimension</span>. See <a href="dml_basics.htm#BABGAAEH">"Hierlist Dimension"</a> for more information</p>
<p><span class="italic">hierarchy_name</span> is a member of <span class="italic">hierarchy_dimension</span>.</p>
<p><span class="italic">inhierarchy_obj</span> is a variable or valueset in the analytic workspace that identifies which dimension members are in each level of the hierarchy. See <a href="dml_basics.htm#BABIJDJF">"Inhier Valueset or Variable"</a> for more information</p>
<p><span class="italic">gid_relation</span> is a relation in the analytic workspace that contains the grouping ID of each dimension member in the hierarchy. See <a href="dml_basics.htm#BABCGJHG">"Gidrel Relation"</a> for more information</p>
<p><span class="italic">family_relation</span> is a self-relation that provides the full parentage of each dimension member in the hierarchy. See <a href="dml_basics.htm#BABECBEE">"Familyrel Relation"</a> for more information</p>
<p><span class="italic">level_dimension</span> is a dimension in the analytic workspace that contains the names of the levels for the hierarchy. See <a href="dml_basics.htm#BABDJGCB">"Levellist Dimension"</a> for more information</p>
<p><span class="italic">label_variable</span> is a variable in the analytic workspace that contains descriptive text values for <span class="italic">dimension</span>.</p>
<p><span class="italic">hier_attribute_variable</span> is a variable in the analytic workspace that contains attribute values for <span class="italic">hierarchy_name</span>.</p>
<p><span class="italic">attribute_variable</span> is a variable in the analytic workspace that contains attribute values for <span class="italic">dimension</span>.</p>
<p><span class="italic">loop_clause</span> specifies how Oracle OLAP determines how it loops through data values and what rows to create in the relational table. When you exclude a LOOP clause, Oracle OLAP loops through all of the data values that are identified by the dimensions in the DIMENSION clauses in the limit map.</p>
<p>For the complete syntax of the LOOP clause see <a href="#CIHJHCFC">"<span class="bold">LOOP Clause</span>"</a>.</p>
<p><span class="italic">olap_command</span> is an OLAP DML command.</p>
<p>Detailed syntax for each of the clauses of the <span class="italic">limit-map</span> parameter follows.</p>
<ul>
<li id="CIHFHAGF">
<p><span class="bold">MEASURE Clause</span></p>
<p>The <code>MEASURE</code> clause maps a variable, formula, or relation in the analytic workspace to a column in the target table. You can list any number of <code>MEASURE</code> clauses. This clause is optional when, for example, you want to create a dimension view.</p>
<p>The <code>AS</code> subclause specifies the data type of the target column. You can specify an <code>AS</code> subclause when the table of objects has not been predefined. See <a href="dml_app_sqlfunc.htm#CIHGDBCB">"Using OLAP_TABLE With Automatic ADTs"</a>.</p>
<p>In the <code>FROM</code> subclause, you can either specify the name of a variable, formula, or relation or an OLAP expression that evaluates to one of these objects. For example:</p>
<pre>
AW_EXPR analytic_cube_sales - analytic_cube_cost
<span class="italic">or</span>
AW_EXPR LOGDIF(analytic_cube_sales, 1, time, LEVELREL time.lvlrel)
</pre></li>
<li id="CIHECIBG">
<p><span class="bold">DIMENSION Clause</span></p>
<p>The <code>DIMENSION</code> clause identifies a dimension or conjoint in the analytic workspace that dimensions one or more measures or attributes, or provides the dimension members for one or more hierarchies in the limit map.</p>
<p>The <span class="italic">column</span> subclause is optional when you do not want the dimension members themselves to be represented in the table. In this case, include a dimension attribute that can be used for data selection.</p>
<p>For a description of the <code>AS</code> subclause, see <a href="#CIHFHAGF">"<span class="bold">MEASURE Clause</span>"</a>.</p>
<p>Every limit map should have at least one <code>DIMENSION</code> clause. If the limit map contains <code>MEASURE</code> clauses, then it should also contain a single <code>DIMENSION</code> clause for each dimension of the measures, unless a dimension is being limited to a single value. If the measures are dimensioned by a composite, then you must identify each dimension in the composite with a <code>DIMENSION</code> clause. For the best performance when fetching a large result set, identify the composite in a <code>LOOP</code> clause. See <a href="#CIHJHCFC">"<span class="bold">LOOP Clause</span>"</a>.</p>
<p>A dimension can be named in only one <code>DIMENSION</code> clause. Subclauses of the <code>DIMENSION</code> clause identify the dimension hierarchies and attributes.</p>
<ul>
<li>
<p><span class="bold">WITH Subclause for Dimension Hierarchies and Attributes</span></p>
<p>The <code>WITH</code> subclause introduces a <code>HIERARCHY</code> or <code>ATTRIBUTE</code> subclause. If you do not specify hierarchies or attributes, then omit the <code>WITH</code> keyword. If you specify both hierarchies and attributes, then precede them with a single <code>WITH</code> keyword.</p>
</li>
<li id="CIHIABAB">
<p><span class="bold">WITH HIERARCHY Subclause</span></p>
<p>The <code>HIERARCHY</code> subclause identifies the parent self-relation in the analytic workspace that defines the hierarchies for the dimension. See <a href="dml_basics.htm#BABGGIEH">"Parentrel Relation"</a> for more information,</p>
<p>The <code>HIERARCHY</code> subclause is optional when the dimension does not have a hierarchy, or when the status of the dimension has been limited to a single level of the hierarchy. When a dimension has multiple hierarchies, specify a <code>HIERARCHY</code> subclause for each one and specify a <span class="italic">hierarchy_dimension</span> phrase. The <span class="italic">hierarchy_dimension</span> identifies a dimension in the analytic workspace which holds the names of the hierarchies for this dimension. See <a href="dml_basics.htm#BABGAAEH">"Hierlist Dimension"</a> for more information.</p>
<p><span class="italic">hierarchy_name</span> is a member of <span class="italic">hierarchy_dimension</span>. The hierarchy dimension is limited to <span class="italic">hierarchy_name</span> for all workspace objects that are referenced in subsequent subclauses for this hierarchy (that is, <code>INHIERARCHY</code>, <code>GID</code>, <code>PARENTGID</code>, <code>FAMILYREL</code>, and <code>HATTRIBUTE</code>).</p>
<p>For a description of the column subclause, see <a href="#CIHECIBG">"<span class="bold">DIMENSION Clause</span> "</a>.</p>
<p>The keywords in the <code>HIERARCHY</code> subclause are described as follows:</p>
<ul>
<li>
<p>The <code>INHIERARCHY</code> subclause identifies a boolean variable or a valueset in the analytic workspace that identifies the dimension members in each level of the hierarchy. See <a href="dml_basics.htm#BABIJDJF">"Inhier Valueset or Variable"</a> for more information.</p>
<p>It is good practice to include an <code>INHIERARCHY</code> subclause, because <code>OLAP_TABLE</code> saves the status of all dimensions with <code>INHIERARCHY</code> subclauses during the processing of the limit map. It is required when there are members of the dimension that are omitted from the hierarchy.</p>
</li>
<li>
<p>The <code>GID</code> subclause maps an integer variable in the analytic workspace, which contains the grouping ID for each dimension member, to a column in the target table. The grouping ID variable is populated by the OLAP DML <a href="dml_commands_1057.htm#i78871">GROUPINGID command</a> command. See <a href="dml_basics.htm#BABCGJHG">"Gidrel Relation"</a> for more information.</p>
<p>The <code>GID</code> subclause is required for Java applications that use the OLAP API.</p>
<p>For a description of the <code>AS</code> subclause, see <a href="#CIHFHAGF">"<span class="bold">MEASURE Clause</span>"</a>.</p>
</li>
<li>
<p>The <code>PARENTGID</code> subclause calculates the grouping IDs for the parent relation using the GID variable in the analytic workspace. The parent GIDs are not stored in an analytic workspace object. Instead, you specify the same GID variable for the <code>PARENTGID</code> clause that you used in the <code>GID</code> clause. The <code>PARENTGID</code> clause is recommended for Java applications that use the OLAP API.</p>
<p>For a description of the <code>AS</code> subclause, see <a href="#CIHFHAGF">"<span class="bold">MEASURE Clause</span>"</a>.</p>
</li>
<li>
<p>The <code>FAMILYREL</code> subclause is used primarily to map a family relation in the analytic workspace to multiple columns in the target table. See <a href="dml_basics.htm#BABECBEE">"Familyrel Relation"</a> for more information. You can use multiple <code>FAMILYREL</code> clauses for each hierarchy.</p>
<p>List the columns in the order of <span class="italic">level_dimension</span> which is a dimension in the analytic workspace that holds the names of all the levels for the dimension. See <a href="dml_basics.htm#BABDJGCB">"Levellist Dimension"</a> for more information.</p>
<p>If you do not want a particular level included, then specify null for the target column. For a description of the <code>AS</code> subclause, see <a href="#CIHFHAGF">"<span class="bold">MEASURE Clause</span>"</a>.</p>
<p>The <code>LABEL</code> keyword identifies a text attribute that provides more meaningful names for the dimension members.</p>
<p>The tabular data resulting from a <code>FAMILYREL</code> clause is in <span class="bold">rollup form</span>, in which each level of the hierarchy is represented in a separate column, and the full parentage of each dimension member is identified within the row. See <a href="#i82078">Example A-7, "Script for a Rollup View of Products Using OLAP_TABLE"</a>.</p>
</li>
<li>
<p>The <code>HATTRIBUTE</code> subclause maps a hierarchy-specific attribute variable, dimensioned by <span class="italic">hierarchy_dimension</span> in the analytic workspace, to a column in the target table.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">WITH ATTRIBUTE Subclause</span></p>
<p>The <code>ATTRIBUTE</code> subclause maps an attribute variable in the analytic workspace to a column in the target table.</p>
<p>If <span class="italic">attribute_variable</span> has multiple dimensions, then values are mapped for all members of <span class="italic">dimension</span>, but only for the first member in the current status of additional dimensions. For example, if your attributes have a language dimension, then you must set the status of that dimension to a particular language. You can set the status of dimensions in a <code>PREDMLCMD</code> clause.</p>
</li>
</ul>
</li>
<li id="CIHGCEGC">
<p><span class="bold">ROW2CELL Clause</span></p>
<p>The <code>ROW2CELL</code> clause<a id="sthref5372"></a><a id="sthref5373"></a> creates a <code>RAW</code> column, between 16 and 32 characters wide, in the target table and populates it with information that is used by the OLAP expression functions. The <code>OLAP_CONDITION</code> function also uses the <code>ROW2CELL</code> column. Specify a <code>ROW2CELL</code> column when creating a view to be used by these functions. See <a href="dml_app_sqlfunc.htm#CHDHDDDI">"Using OLAP DML Expressions in SELECT FROM OLAP_TABLE Statements"</a> and <a href="dml_app_sqlfunc.htm#CHDDACJH">"Adding Calculated Columns to the Relational View"</a>.</p>
</li>
<li id="CIHJHCFC">
<p><span class="bold">LOOP Clause</span></p>
<p>The <code>LOOP</code> clause specifies how Oracle OLAP loops through the data when retrieving values. When you omit a LOOP clause in a limit map, Oracle OLAP loops uses the DIMENSION clauses in that limit map to determine what values that Oracle OLAP loops over. Oracle OLAP loops over only those tuples that identify measure cells that do not contain NA or null.When you include a LOOP clause, you specify one of the following types of subclauses: the <span class="italic">optimized_subclause</span> or the <span class="italic">union_subclause</span>.</p>
<p>The <span class="bolditalic">optimized_subclause</span> specifies that Oracle OLAP automatically create the <span class="italic">union_subclause</span> by which it loops through the data. The <span class="italic">union_subclause</span> created never includes any DENSE phrases. Consequently, when you specify the <span class="italic">optimized_subclause</span>, Oracle OLAP loops over only those tuples that identify measure cells that do not contain NA or null. The <span class="italic">optimized_subclause</span> has the following syntax.</p>
<p class="synopsis">OPTIMIZED [MEASURES]</p>
<p>where the optional MEASURES keyword specifies that after identifying the tuples to loop through, Oracle OLAP remove any values that are dimension values that are not dimensions of the objects identified in the MEASURES clauses of the limit map.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
You can use the<a href="dml_properties012.htm#BCFFGCAG">$LOOP_AGGMAP</a>, <a href="dml_properties013.htm#BABHHFCB">$LOOP_DENSE</a>, and <a href="dml_properties015.htm#BABJIJAF">$LOOP_VAR</a> properties, to specify more information as to how OLAP_TABLE loops over a formula.</div>
<p>The <span class="bolditalic">union_subclause</span> specifies exactly how Oracle OLAP determines which base dimensions it uses to identify what data values to loop through. For a successful union to occur, the objects that are referenced in this subclause must have the same base dimensions. The <span class="italic">union_subclause</span> has the syntax show below.</p>
<p class="synopsis">[<span class="italic">ignore_phrase</span>] [<span class="italic">dense_phrase</span>] UNION ({<span class="italic">aggmap_phrase</span> | <span class="italic">list_phrase</span> }...)]</p>
<p>where:</p>
<p><span class="bolditalic">aggmap_phrase</span> has the following syntax which specifies how Oracle OLAP loops through the values of an aggregated variable.</p>
<p class="synopsis">AGGMAP (<span class="italic">ignore_phrase</span>] [<span class="italic">dense_phrase</span>] <span class="italic">aggmap</span> {<span class="italic">variable</span> | <span class="italic">dimension_list</span>})</p>
<p><span class="bolditalic">list_phrase</span> has the following syntax which specifies how Oracle OLAP loops through the values of a composite, partition template, or dimension. It has the following syntax.</p>
<p class="synopsis">LIST ([<span class="italic">ignore_phrase</span>] [<span class="italic">dense_phrase</span>] <span class="italic">dimension_list</span>)</p>
<ul>
<li>
<p><span class="bolditalic">ignore_phrase</span> &mdash; Specifies the dimension values that you do not want Oracle OLAP to loop over. It has the following syntax.</p>
<p class="synopsis">IGNORE (<span class="italic">ignore_list</span> )</p>
<p>For <span class="italic">ignore_list</span> you can specify one or more of the following separated by commas.</p>
<pre>
  <span class="italic">dimension_name</span>
  <span class="italic">valueset_name</span>
  COMPLEMENT (<span class="italic">valueset_name</span>)
</pre>
<p>Within a single <span class="italic">ignore_list</span> you cannot specify a dimension in multiple ways. In other words, you cannot specify both a dimension and a valueset for that same dimension; you cannot specify two valuesets for the same dimension.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The result of specifying IGNOR <span class="italic">valueset-name</span> is similar to specifying LIMIT REMOVE <span class="italic">valueset-name</span> (see <a href="dml_commands_2009.htm#i78802">LIMIT command</a>).</div>
</li>
<li>
<p><span class="bolditalic">dense_phrase</span> &mdash; Specifies values that Oracle OLAP loops over even when the measure cells identified by those values contain NA or null. In other words, specifying a dimension in a DENSE phrase is similar to requesting a relational outer join. Typically, you include dimension values in a DENSE phrase to perform time-series processing (for example, to lag over time). A DENSE phrase has the following syntax.</p>
<p class="synopsis">DENSE (<span class="italic">dense_list</span> )</p>
<p>For <span class="italic">dense_list</span> you can specify one or more of the following separated by commas.</p>
<pre>
  <span class="italic">dimension_name</span>
  <span class="italic">valueset_name</span>
  COMPLEMENT (<span class="italic">valueset_name</span>)
</pre>
<p>Within a single <span class="italic">dense_list</span> you cannot specify a dimension in multiple ways. In other words, you cannot specify both a dimension and a valueset for that same dimension; you cannot specify two valuesets for the same dimension.</p>
<p>However, you can have one valueset for a dimension in the outer <code>DENSE</code> phrase and another valueset for the same dimension in an inner <code>DENSE</code> phrase. If a dimension or a valueset of a dimension is specified in both an inner and outer <code>DENSE</code> phrase, Oracle OLAP loops densely over the union of the dense regions. If the dimension, itself, appears in either place, Oracle OLAP loops densely over the whole dimension.</p>
</li>
<li>
<p><span class="bolditalic">aggmap</span> &mdash; The name of an aggmap object. When you specify only the name of an aggmap object, Oracle OLAP uses the values in the PRECOMPUTE phrases of the aggmap to identify the values to loop</p>
</li>
<li>
<p><span class="bolditalic">variable</span> &mdash; The name of the variable aggregated by <span class="italic">aggmap_name</span>.</p>
</li>
<li>
<p><span class="bolditalic">dimension_list</span> &mdash; A list of one or more composites, partition templates, or dimensions.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">PREDMLCMD Clause</span></p>
<p>The <code>PREDMLCMD</code> clause <a id="sthref5374"></a>specifies an OLAP DML command that is executed before the data is fetched from the analytic workspace into the target table. It can be used, for example, to execute an OLAP model or forecast whose results will be fetched into the table. The results of the command are in effect during execution of the limit map, and continue into your session after execution of <code>OLAP_TABLE</code> is complete. See <a href="#CIHIHFHJ">"Order of Processing in OLAP_TABLE"</a>.</p>
</li>
<li>
<p><span class="bold">POSTDMLCMD Clause</span></p>
<p>The <code>POSTDMLCMD</code> clauses specifies an OLAP DML command that is executed after the data is fetched from the analytic workspace into the target table. It can be used, for example, to delete objects or data that were created by commands in the <code>PREDMLCMD</code> clause, or to restore the dimension status that was changed in a <code>PREDMLCMD</code> clause. See <a href="#CIHIHFHJ">"Order of Processing in OLAP_TABLE"</a> .</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5375"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2955"></a>Limit Maps</p>
<p><code>OLAP_TABLE</code> <a id="sthref5376"></a><a id="sthref5377"></a>uses a <span class="bold">limit map</span> to map dimensions and measures defined in an analytic workspace to columns in a logical table. The limit map combines with the <code>WHERE</code> clause of a SQL <code>SELECT</code> statement to generate a series of OLAP DML <a href="dml_commands_2009.htm#i78802">LIMIT command</a>s that are executed in the analytic workspace.</p>
<p><code>OLAP_TABLE</code> can use a limit map with a predefined logical table, or it can use the information in a limit map to dynamically generate a logical table at run time.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The discussion of the <a href="#CIHCGCBF"><span class="italic">limit_map</span></a> parameter.</div>
<p class="subhead2"><a id="OLADM2956"></a>Logical Tables</p>
<p>The logical table populated by <code>OLAP_TABLE</code> is actually a table type whose rows are user-defined object types, also known as <span class="bold"><a id="sthref5378"></a>Abstract Data Types</span> or <span class="bold">ADTs</span>.</p>
<p>A <a id="sthref5379"></a>user-defined object type is composed of attributes, which are equivalent to the columns of a table. The basic syntax for defining a row is as follows.</p>
<pre>
CREATE TYPE <span class="italic">object_name</span> AS OBJECT (
   <span class="italic">attribute1</span>      <span class="italic">datatype</span>,
   <span class="italic">attribute2</span>      <span class="italic">datatype</span>,
   <span class="italic">attribute</span>n      <span class="italic">datatype</span>);
</pre>
<p>A <a id="sthref5380"></a>table type is a collection of object types; this collection is equivalent to the rows of a table. The basic syntax for creating a table type is as follows.</p>
<pre>
CREATE TYPE <span class="italic">table_name</span> AS TABLE OF <span class="italic">object_name</span>;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADOBJ" href="../../appdev.112/e11822/toc.htm">Oracle Database Object-Relational Developer's Guide</a> for information about object types</p>
</li>
<li>
<p><a class="olink SQLRF01506" href="../../server.112/e41084/statements_8001.htm#SQLRF01506">CREATE TYPE</a> in <span class="italic">Oracle Database SQL Language Reference</span></p>
</li>
</ul>
</div>
<p class="subhead2"><a id="OLADM2957"></a>Using OLAP_TABLE With Predefined ADTs</p>
<p><a id="sthref5381"></a>You <a id="sthref5382"></a><a id="sthref5383"></a>can <a id="sthref5384"></a>predefine the table of objects or generate it dynamically. <a id="sthref5385"></a>When you create the table type in advance, it is available in the database for use by any invocation of <code>OLAP_TABLE</code>. Queries that use predefined objects typically perform better than queries that dynamically generate the objects. See <a href="dml_app_sqlfunc.htm#CHDEIDBG">"Using OLAP_TABLE With Predefined ADTs"</a>.</p>
<p class="subhead2"><a id="OLADM2958"></a>Using OLAP_TABLE With Automatic ADTs</p>
<p>If you <a id="sthref5386"></a>do not supply the name of a table type as an argument, <code>OLAP_TABLE</code> uses information in the limit map to generate the logical table automatically. In this case, the table type is only available at run time within the context of the calling SQL <code>SELECT</code> statement. See <a href="dml_app_sqlfunc.htm#CIHGDBCB">"Using OLAP_TABLE With Automatic ADTs"</a>.</p>
<p>When automatically generating ADTs, <code>OLAP_TABLE</code> uses default relational data types for the target columns unless you override them with <code>AS</code> clauses in the limit map. The default data type conversions used by <code>OLAP_TABLE</code> are described in <a href="#CIAFCIEA">Table A-1</a>.</p>
<div id="OLADM2959" class="tblformal">
<p class="titleintable"><a id="sthref5387"></a><a id="CIAFCIEA"></a>Table A-1 <a id="sthref5388"></a><a id="sthref5389"></a>Default Data Type Conversions</p>
<table class="cellalignment3098" title="Default Data Type Conversions" summary="OLAP_TABLE default data type conversions" dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t12">Analytic Workspace Data Type</th>
<th class="cellalignment3099" id="r1c2-t12">SQL Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t12" headers="r1c1-t12">
<p><code>ID</code></p>
</td>
<td class="cellalignment3095" headers="r2c1-t12 r1c2-t12">
<p><code>CHAR(8)</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t12" headers="r1c1-t12">
<p><code>TEXT</code></p>
</td>
<td class="cellalignment3095" headers="r3c1-t12 r1c2-t12">
<p><code>VARCHAR2(4000)</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t12" headers="r1c1-t12">
<p><code>TEXT</code><code><span class="codeinlineitalic">(n)</span></code></p>
</td>
<td class="cellalignment3095" headers="r4c1-t12 r1c2-t12">
<p><code>VARCHAR2</code><code><span class="codeinlineitalic">(n)</span></code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t12" headers="r1c1-t12">
<p><code>NTEXT</code></p>
</td>
<td class="cellalignment3095" headers="r5c1-t12 r1c2-t12">
<p><code>NVARCHAR2(4000)</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t12" headers="r1c1-t12">
<p><code>NTEXT</code><code><span class="codeinlineitalic">(n)</span></code></p>
</td>
<td class="cellalignment3095" headers="r6c1-t12 r1c2-t12">
<p><code>NVARCHAR2</code><code><span class="codeinlineitalic">(n)</span></code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t12" headers="r1c1-t12">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment3095" headers="r7c1-t12 r1c2-t12">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r8c1-t12" headers="r1c1-t12">
<p><code>NUMBER</code><code><span class="codeinlineitalic">(p,s)</span></code></p>
</td>
<td class="cellalignment3095" headers="r8c1-t12 r1c2-t12">
<p><code>NUMBER</code><code><span class="codeinlineitalic">(p,s)</span></code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r9c1-t12" headers="r1c1-t12">
<p><code>LONGINTEGER</code></p>
</td>
<td class="cellalignment3095" headers="r9c1-t12 r1c2-t12">
<p><code>NUMBER(19)</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r10c1-t12" headers="r1c1-t12">
<p><code>INTEGER</code></p>
</td>
<td class="cellalignment3095" headers="r10c1-t12 r1c2-t12">
<p><code>NUMBER(10)</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r11c1-t12" headers="r1c1-t12">
<p><code>SHORTINTEGER</code></p>
</td>
<td class="cellalignment3095" headers="r11c1-t12 r1c2-t12">
<p><code>NUMBER(5)</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r12c1-t12" headers="r1c1-t12">
<p><code>INTEGER WIDTH 1</code></p>
</td>
<td class="cellalignment3095" headers="r12c1-t12 r1c2-t12">
<p><code>NUMBER(3)</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r13c1-t12" headers="r1c1-t12">
<p><code>BOOLEAN</code></p>
</td>
<td class="cellalignment3095" headers="r13c1-t12 r1c2-t12">
<p><code>NUMBER(1)</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r14c1-t12" headers="r1c1-t12">
<p><code>DECIMAL</code></p>
</td>
<td class="cellalignment3095" headers="r14c1-t12 r1c2-t12">
<p><code>BINARY_DOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r15c1-t12" headers="r1c1-t12">
<p><code>SHORTDECIMAL</code></p>
</td>
<td class="cellalignment3095" headers="r15c1-t12 r1c2-t12">
<p><code>BINARY_FLOAT</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r16c1-t12" headers="r1c1-t12">
<p><code>DATE</code></p>
</td>
<td class="cellalignment3095" headers="r16c1-t12 r1c2-t12">
<p><code>DATE</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r17c1-t12" headers="r1c1-t12">
<p><code>DAY</code>, <code>WEEK</code>, <code>MONTH</code>, <code>QUARTER</code>, <code>YEAR</code></p>
</td>
<td class="cellalignment3095" headers="r17c1-t12 r1c2-t12">
<p><code>DATE</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r18c1-t12" headers="r1c1-t12">
<p><code>DATETIME</code></p>
</td>
<td class="cellalignment3095" headers="r18c1-t12 r1c2-t12">
<p><code>TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r19c1-t12" headers="r1c1-t12">
<p><code>COMPOSITE</code></p>
</td>
<td class="cellalignment3095" headers="r19c1-t12 r1c2-t12">
<p><code>VARCHAR2(4000)</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r20c1-t12" headers="r1c1-t12">
<p>Other</p>
</td>
<td class="cellalignment3095" headers="r20c1-t12 r1c2-t12">
<p><code>VARCHAR2(4000)</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="CIHICDGB"></a><a id="OLADM2960"></a>Using olap_command with a Limit Map</p>
<p><a id="sthref5390"></a><a id="sthref5391"></a>You may want your application to modify the analytic workspace on the fly during the execution of <code>OLAP_TABLE</code>.</p>
<p>A common use of the <span class="italic">olap_command</span> parameter is to limit one or more dimensions. If you limit any of the dimensions that have <code>INHIERARCHY</code> clauses in the limit map, then the status of those dimensions is changed only during execution of this call to <code>OLAP_TABLE</code>; the limits do not affect the rest of your OLAP session. However, other commands (for example, commands that limit dimensions <span class="italic">not</span> referenced with <code>INHIERARCHY</code> clauses) can affect your session.</p>
<p>If you want a limit on a dimension in the limit map to stay in effect for the rest of your session, and not just during the command, specify it in the <code>PREDMLCMD</code> clause of the limit map or specify <a id="sthref5392"></a>an <code>OLAP_CONDITION</code> function in the <code>SQL SELECT</code> statement.</p>
<p>The following is an example of a <code>LIMIT</code> command in the <span class="italic">olap_command</span> parameter.</p>
<pre>
'LIMIT product TO product_member_levelrel ''L2'''
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_app_sqlfunc002.htm#CIHJHDCH">"OLAP_CONDITION"</a></div>
<p class="subhead2"><a id="CIHJADBF"></a><a id="OLADM2961"></a>Using FETCH in the olap_command Parameter</p>
<p><a id="sthref5393"></a>If you specify an OLAP DML <a href="dml_commands_1042.htm#g1037946">FETCH</a> command in the <span class="italic">olap_command</span><a id="sthref5394"></a> parameter, <code>OLAP_TABLE</code> uses it, instead of the instructions in the limit map, to fetch the source data for the table object. Because of this usage, the <span class="italic">olap_command</span> parameter is sometimes referred to as the <span class="bold"><a id="sthref5395"></a>data map</span>. In general, do not specify a limit map if you specify a <code>FETCH</code> command.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Normally, use the <code>FETCH</code> command with <code>OLAP_TABLE</code> only if you are upgrading an Express application that used the <code>FETCH</code> command for SNAPI. If you are upgrading, note that the full syntax is the same in Oracle as in Express 6.3. You can use the same <code>FETCH</code> commands in <code>OLAP_TABLE</code> that you used previously in SNAPI. For the syntax of the <code>FETCH</code> command, see <a href="dml_commands_1042.htm#g1037946">"FETCH"</a>.</div>
<p><code>FETCH</code> specifies explicitly how analytic workspace data is mapped to a table object. The basic syntax is:</p>
<pre>
FETCH <span class="italic">expression</span>...
</pre>
<p>Enter one expression for each target column, listing the expressions in the same order they appear in the row definition. Separate expressions with spaces or commas.You must enter the entire statement on one line, without line breaks or continuation marks of any type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIHJADBF">"Using FETCH in the olap_command Parameter"</a>.</div>
<p class="subhead2"><a id="CIHIHFHJ"></a><a id="OLADM2962"></a>Order of Processing in OLAP_TABLE</p>
<p>The <a id="sthref5396"></a>following list identifies the order in which the <code>OLAP_TABLE</code> function processes instructions in the limit map that can change the status of dimensions in the analytic workspace.</p>
<ol>
<li id="CIAECJAA">
<p>Execute any OLAP DML command specified in the <code>PREDMLCMD</code> parameter of the limit map.</p>
</li>
<li id="CIAJBFFG">
<p>Save the current status of all dimensions in the limit map so that it can be restored later (<code>PUSH</code> status).</p>
</li>
<li id="CIAHDEIJ">
<p>Keep in status only those dimension members specified by <code>INHIERARCHY</code> subclauses in the limit map (<code>LIMIT KEEP</code>).</p>
</li>
<li id="CIAEHGAJ">
<p>Within the status set during step <a href="#CIAHDEIJ">3</a>, keep only those dimension members that satisfy the <code>WHERE</code> clause of the SQL <code>SELECT</code> statement containing the <code>OLAP_TABLE</code> function (<code>LIMIT KEEP</code>).</p>
</li>
<li id="CIABCEHE">
<p>Execute any OLAP DML command specified in the <span class="italic">olap_command</span> parameter of the <code>OLAP_TABLE</code> function. (If <span class="italic">olap_command</span> includes a <code>FETCH</code>, fetch the data.)</p>
</li>
<li>
<p>Fetch the data (unless an OLAP DML <code>FETCH</code> command was specified in the <span class="italic">olap_command</span> parameter).</p>
</li>
<li>
<p>Restore the status of all dimensions in the limit map (<code>POP</code> status).</p>
</li>
<li id="CIAGIIEA">
<p>Execute any OLAP DML command specified in the <code>POSTDMLCMD</code> parameter of the limit map.</p>
</li>
</ol>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i79406"></a>Examples</p>
<p>Because different applications have different requirements, several different formats are commonly used for fetching data into SQL from an analytic workspace. <a id="sthref5397"></a>The examples in this section show how to create views using a variety of different formats.</p>
<p>Although these examples are shown as views, the <code>SELECT</code> statements can be extracted from them and used directly to fetch data from an analytic workspace into an application.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The examples in this section use predefined ADTs. You could modify them to use automatic ADTs. See <a href="dml_app_sqlfunc.htm#CIHGDBCB">"Using OLAP_TABLE With Automatic ADTs"</a>.</div>
<div id="OLADM2963" class="example">
<p class="titleinexample"><a id="i81531"></a>Example A-5 Script for an Embedded Total Dimension View Using OLAP_TABLE</p>
<p><a id="sthref5398"></a><a id="sthref5399"></a>This example shows the PL/SQL script used to create an embedded total view of the <code>TIME</code> dimension in an analytic workspace named MYAW. This view is similar to the view in <a href="dml_app_sqlfunc.htm#CHDFJHHA">Example A-2, "Sample View of the TIME Dimension Using Predefined ADTs"</a>, but it specifies both a Calendar and a Fiscal hierarchy, and it includes <code>HATTRIBUTE</code> subclauses for hierarchy-specific End Date attributes.</p>
<p>The <code>INHIERARCHY</code> subclause identifies a valueset in the analytic workspace that lists all the dimension members in each hierarchy of a dimension. <code>OLAP_TABLE</code> saves the status of all dimensions in the limit map that have <code>INHIERARCHY</code> subclauses during the processing of the limit map. See <a href="#CIHIHFHJ">"Order of Processing in OLAP_TABLE"</a>.</p>
<pre>
CREATE TYPE awtime_row AS OBJECT (
             awtime_id               VARCHAR2(12),
             awtime_short_label      VARCHAR2(12),
             awtime_cal_end_date     DATE,
             awtime_fis_end_date     DATE);
/
CREATE TYPE awtime_table AS TABLE OF awtime_row;
/
CREATE OR REPLACE VIEW awtime_view AS
   SELECT awtime_id, awtime_short_label, 
          awtime_cal_end_date, awtime_fis_end_date
      FROM TABLE(OLAP_TABLE(
         'myaw DURATION SESSION',
         'awtime_table', 
         '',
         'DIMENSION awtime_id FROM time WITH 
             HIERARCHY time_parentrel 
                (time_hierlist ''CALENDAR'')
                INHIERARCHY time_inhier
                HATTRIBUTE awtime_cal_end_date  FROM time_cal_end_date
             HIERARCHY time_parentrel 
                (time_hierlist ''FISCAL'')
                INHIERARCHY time_inhier
                HATTRIBUTE awtime_fis_end_date  FROM time_fis_end_date
          ATTRIBUTE awtime_short_label  FROM time_short_description'));
/
SQL&gt;SELECT * FROM awtime_view;

AWTIME_ID  AWTIME_SHORT_LABEL  AWTIME_CAL_END_DATE  AWTIME_FIS_END_DATE
---------  ------------------  -------------------  -------------------  
19         Jan-98              31-JAN-98            31-JAN-98
20         Feb-98              28-FEB-98            28-FEB-98
21         Mar-98              31-MAR-98            31-MAR-98
22         Apr-98              30-APR-98            30-APR-98
23         May-98              31-MAY-98            31-MAY-98
24         Jun-98              30-JUN-98            30-JUN-98
.                                                            
.                                                            
.                                                            
.                                                            
98         Q1-03               31-MAR-03            30-SEP-03
99         Q2-03               30-JUN-03            31-DEC-03
1          1998                31-DEC-98            30-JUN-99
102        2003                31-DEC-03            30-JUN-04
119        2004                31-DEC-04            30-JUN-05
2          1999                31-DEC-99            30-JUN-00
3          2000                31-DEC-00            30-JUN-01
4          2001                31-DEC-01            30-JUN-02
85         2002                31-DEC-02            30-JUN-03
</pre>
<p>Note that you must be sure to verify that you have created the views correctly by issuing <code>SELECT</code> statements against them. Only at that time do any errors in the call to <code>OLAP_TABLE</code> appear.</p>
</div>
<!-- class="example" -->
<div id="OLADM2964" class="example">
<p class="titleinexample"><a id="i81942"></a>Example A-6 Creating a View of an Embedded Total Measure Using OLAP_TABLE</p>
<p><a id="sthref5400"></a>In <a id="sthref5401"></a>a star schema, a separate measure view is needed with columns that can be joined to each of the dimension views. This example shows the PL/SQL script used to create a measure view with a column populated by a <code>ROW2CELL</code> clause to support custom measures. For information on ROW2CELL, <a href="#CIHGCEGC">"<span class="bold">ROW2CELL Clause</span>"</a>.</p>
<pre>
CREATE TYPE awunits_row AS OBJECT (
             awtime                  VARCHAR2(12),
             awcustomer              VARCHAR2(30),
             awproduct               VARCHAR2(30),
             awchannel               VARCHAR2(30),
             awunits                 NUMBER(16),
             r2c                     RAW(32));
/
CREATE TYPE awunits_table AS TABLE OF awunits_row;
/
CREATE OR REPLACE VIEW awunits_view AS
   SELECT awunits,
          awtime, awcustomer, awproduct, awchannel, r2c 
      FROM TABLE(OLAP_TABLE(
         'myaw DURATION SESSION', 
         'awunits_table', 
         '',
         'MEASURE awunits FROM units_cube_units
          DIMENSION awtime FROM time WITH
             HIERARCHY time_parentrel
          DIMENSION awcustomer FROM customer WITH 
             HIERARCHY customer_parentrel
                       (customer_hierlist ''MARKET_ROLLUP'')
                INHIERARCHY customer_inhier
          DIMENSION awproduct FROM product WITH
             HIERARCHY product_parentrel
          DIMENSION channel WITH
             HIERARCHY channel_parentrel
             ATTRIBUTE  awchannel FROM channel_short_description
          ROW2CELL r2c'))
      WHERE awunits IS NOT NULL;

SQL&gt;SELECT awchannel, awunits FROM awunits_view 
     WHERE    awproduct = '1'
     AND      awcustomer = '7'
     AND      awtime = '4';

AWCHANNEL            AWUNITS
---------            -------
All Channels         415392
Direct Sales         43783 
Catalog              315737
Internet             55872 
</pre></div>
<!-- class="example" -->
<div id="OLADM2965" class="example">
<p class="titleinexample"><a id="i82078"></a>Example A-7 Script for a Rollup View of Products Using OLAP_TABLE</p>
<p><a id="sthref5402"></a>Rollup form uses a column for each hierarchy level to show the full parentage of each dimension member. The only difference between the syntax for rollup form and the syntax for embedded total form is the addition of a <code>FAMILYREL</code> clause in the definition of each dimension in the limit map. For information on <code>FAMILYREL</code>, see <a href="#CIHIABAB">"<span class="bold">WITH HIERARCHY Subclause</span>"</a>.</p>
<p>This example shows the PL/SQL script used to create a rollup view of the <code>PRODUCT</code> dimension. It shows a dimension view to highlight the differences in the syntax of the limit map from the one used for the embedded total form, as shown in <a href="#i81531">Example A-5, "Script for an Embedded Total Dimension View Using OLAP_TABLE"</a>. Note that the target columns for these levels are listed in the <code>FAMILYREL</code> clause from most aggregate (<code>CLASS</code>) to least aggregate (<code>ITEM</code>), which is the order they are listed in the level list dimension. The family relation returns four columns. The most aggregate level (all products) is omitted from the view by mapping it to null.</p>
<p><a href="#i84331">Example A-8, "Script Using QDRs in the FAMILYREL Clause of OLAP_TABLE"</a> shows the alternate syntax for the <code>FAMILYREL</code> clause, which uses QDRs to identify exactly which columns are mapped from the family relation.</p>
<p>The limit maps in <a href="#i82078">Example A-7</a> and <a href="#i84331">Example A-8</a> generate identical views.</p>
<pre>
CREATE TYPE awproduct_row AS OBJECT (  
            class       VARCHAR2(50),
            family      VARCHAR2(50),
            item        VARCHAR2(50));
/
CREATE TYPE awproduct_table AS TABLE OF awproduct_row;
/
CREATE OR REPLACE VIEW awproduct_view AS
   SELECT class, family, item
      FROM TABLE(OLAP_TABLE(
         'myaw DURATION QUERY',
         'awproduct_table', 
         '',
         'DIMENSION product WITH 
            HIERARCHY product_parentrel
               FAMILYREL null, class, family, item
                  FROM product_familyrel USING product_levellist
                  LABEL product_short_description')); 

SQL&gt; SELECT * FROM awproduct_view 
              ORDER BY class, family, item;

CLASS            FAMILY             ITEM
--------------   ----------------   ------------------------
Hardware          CD-ROM             Envoy External 6X CD-ROM  
Hardware          CD-ROM             Envoy External 8X CD-ROM  
Hardware          CD-ROM             External 6X CD-ROM  
Hardware          CD-ROM             External 8X CD-ROM  
Hardware          CD-ROM             Internal 6X CD-ROM  
Hardware          CD-ROM             Internal 8X CD-ROM  
Hardware          CD-ROM             
Hardware          Desktop PCs        Sentinel Financial  
Hardware          Desktop PCs        Sentinel Multimedia  
.
.
.
Software/Other   Operating Systems  UNIX/Windows 1-user pack  
Software/Other   Operating Systems  UNIX/Windows 5-user pack  
Software/Other   Operating Systems     
Software/Other
</pre></div>
<!-- class="example" -->
<div id="OLADM2966" class="example">
<p class="titleinexample"><a id="i84331"></a>Example A-8 Script Using QDRs in the FAMILYREL Clause of OLAP_TABLE</p>
<pre>
CREATE OR REPLACE TYPE awproduct_row AS OBJECT (
             class       VARCHAR2(50),
             family      VARCHAR2(50),
             item        VARCHAR2(50));
/
CREATE TYPE awproduct_table AS TABLE OF awproduct_row;
/
CREATE OR REPLACE VIEW awproduct_view AS
   SELECT class, family, item
      FROM TABLE(OLAP_TABLE(
         'myaw DURATION QUERY',
         'awproduct_table', 
         '',
         'DIMENSION product WITH 
            HIERARCHY product_parentrel
               FAMILYREL class, family, item FROM
                  product_familyrel(product_levellist ''CLASS''),
                  product_familyrel(product_levellist ''FAMILY''),
                  product_familyrel(product_levellist ''ITEM'')
                  LABEL product_short_description')); 

SQL&gt; SELECT * FROM awproduct_view 
              ORDER BY by class, family, item;

CLASS            FAMILY             ITEM
--------------   ----------------   ------------------------  
Hardware          CD-ROM             Envoy External 6X CD-ROM  
Hardware          CD-ROM             Envoy External 8X CD-ROM  
Hardware          CD-ROM             External 6X CD-ROM  
Hardware          CD-ROM             External 8X CD-ROM  
Hardware          CD-ROM             Internal 6X CD-ROM  
Hardware          CD-ROM             Internal 8X CD-ROM  
Hardware          CD-ROM             
Hardware          Desktop PCs        Sentinel Financial  
Hardware          Desktop PCs        Sentinel Multimedia  
.                                                 
.                                                 
.                                                 
Software/Other   Operating Systems  UNIX/Windows 1-user pack  
Software/Other   Operating Systems  UNIX/Windows 5-user pack  
Software/Other   Operating Systems     
Software/Other
</pre></div>
<!-- class="example" -->
<div id="OLADM2967" class="example">
<p class="titleinexample"><a id="CIAEAGIH"></a>Example A-9 Script Using FETCH with OLAP_TABLE</p>
<p><a id="sthref5403"></a><a id="sthref5404"></a>Oracle Express Server applications that are being revised for use with Oracle Database can use an OLAP DML <a href="dml_commands_1042.htm#g1037946">FETCH</a> command instead of a limit map to map workspace objects to relational columns.</p>
<p>The <code>FETCH</code> command is supplied in the third parameter of <code>OLAP_TABLE</code>, which specifies a single OLAP DML command. See <a href="#CIHFFIBI"><span class="italic">olap_command</span></a>.</p>
<p>The script that follows fetches data from two variables (<code>SALES</code> and <code>COST</code>) in an analytic workspace named <code>MYAW</code>, and calculates two custom measures (<code>COST_PRIOR_PERIOD</code> and <code>PROFIT</code>). This example also shows the use of <code>OLAP_TABLE</code> directly by an application, without creating a view.</p>
<p>Note that the <code>FETCH</code> statement in the following example is formatted with indentation for readability. In reality, the entire <code>FETCH</code> statement must be entered on one line, without line breaks or continuation characters</p>
<pre>
CREATE TYPE measure_row AS OBJECT (
             time                       VARCHAR2(20),
             geography                  VARCHAR2(30),
             product                    VARCHAR2(30),
             channel                    VARCHAR2(30),
             sales                      NUMBER(16),
             cost                       NUMBER(16),
             cost_prior_period          NUMBER(16),
             profit                     NUMBER(16));
/   
CREATE TYPE measure_table AS TABLE OF measure_row;
/
SELECT time, geography, product, channel, 
       sales, cost, cost_prior_period, profit
          FROM TABLE(OLAP_TABLE(
             'xademo DURATION SESSION', 
             'measure_table', 
             'FETCH time, geography, product, channel, analytic_cube_f.sales, 
                    analytic_cube_f.costs, 
                    LAG(analytic_cube_f.costs, 1, time, LEVELREL time_member_levelrel),
                    analytic_cube_f.sales - analytic_cube_f.costs',
             ''))
          WHERE channel =    'STANDARD_2.TOTALCHANNEL' AND
                product =    'L1.TOTALPROD' AND
                geography =  'L1.WORLD'
          ORDER BY time;
</pre>
<p>This SQL <code>SELECT</code> statement returns the following result set:<a id="sthref5405"></a></p>
<pre>
TIME      GEOGRAPHY PRODUCT      CHANNEL                 SALES       COST    COST_PRIOR_PERIOD    PROFIT
--------- --------- ------------ ----------------------- --------- --------- ------------------ --------
L1.1996   L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL 118247112   2490243                   115756869
L1.1997   L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL  46412113   1078031          2490243   45334082
L2.Q1.96  L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL  26084848    560379                    25524469
L2.Q1.97  L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL  26501765    615399           560379   25886367
L2.Q2.96  L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL  30468054    649004           615399   29819049
L2.Q2.97  L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL  19910347    462632           649004   19447715
L2.Q3.96  L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL  27781702    582693           462632   27199009
L2.Q4.96  L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL  33912508    698166           582693   33214342
L3.APR96  L1.WORLD  L1.TOTALPROD STANDARD_2.TOTALCHANNEL   8859808    188851                     8670957
                                              .
                                              .
                                              .
27 rows selected.
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3088">
<tr>
<td class="cellalignment3095">
<table class="cellalignment3093">
<tr>
<td class="cellalignment3092"><a href="dml_app_sqlfunc.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3092"><a href="dml_app_sqlfunc002.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3097">
<table class="cellalignment3091">
<tr>
<td class="cellalignment3092"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3092"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3092"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3092"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3092"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3092"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
