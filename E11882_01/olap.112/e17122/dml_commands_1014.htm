<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>ARGUMENT</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 742" />
<meta name="dcterms.created" content="2013-11-14T21:21:40Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="OLAP DML Reference" />
<meta name="dcterms.identifier" content="E17122-08" />
<meta name="dcterms.isVersionOf" content="OLADM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="dml_commands_1013.htm" title="Previous" type="text/html" />
<link rel="Next" href="dml_commands_1015.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e17122.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">430/593</span> <!-- End Header --><a id="i79082"></a>
<hr />
<div id="OLADM753" class="refsect1">
<h1 class="refsect1">ARGUMENT</h1>
<p><a id="ABC1135455"></a>Within an OLAP DML program, the ARGUMENT statement declares an argument that is expected by the program. Within the program, the argument is stored in a structure similar to a variable or valueset. The argument is initialized with the value that was passed when the program was invoked. An argument exists only while the program is running.</p>
<p>The ARGUMENT statement is used only in programs, and it must precede the first executable line in the program. Be careful to distinguish the ARG abbreviation of the ARGUMENT statement from the ARG function.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3696"></a>Syntax</p>
<p class="synopsis">ARGUMENT&nbsp;<span class="italic">name&nbsp;</span>{<span class="italic">datatype|dimension|</span>VALUESET&nbsp;<span class="italic">dim</span>}</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3697"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span></dt>
<dd>
<p>The name by which the argument is referenced in the program. An argument cannot have the same name as a local variable or valueset. You name an argument according to the rules for naming analytic workspace objects (see the <a href="dml_commands_1032.htm#i78478">DEFINE</a> command).</p>
</dd>
<dt><span class="italic">datatype</span></dt>
<dd>
<p>The data type of the argument, which indicates the kind of data to be stored. You can specify any of the data types that are listed and described in the DEFINE VARIABLE entry. Also, when you want to the program to be able to receive an argument without converting it to a specific data type, you can also specify <code>WORKSHEET</code> for the data type.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
When you declare an argument to be of type NTEXT, and a TEXT value is passed into the program, Oracle OLAP converts the TEXT value to NTEXT. Similarly, when you declare an argument to be of type TEXT, and an NTEXT value is passed into the program, Oracle OLAP converts the NTEXT value to TEXT. Data can be lost when NTEXT is converted to TEXT.</div>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The name of a dimension, whose value is contained in the argument. The argument holds a single value of the dimension. Assigning a value that does not currently exist in the dimension causes an error.</p>
</dd>
<dt>VALUESET <span class="italic">dim</span></dt>
<dd>
<p>Indicates that <span class="italic">name</span> is a valueset. The keyword <span class="italic">dim</span> specifies the dimension for which the valueset holds values. Argument valuesets can be used within the program in the same way you would use a valueset in the analytic workspace<span class="italic">.</span></p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3698"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2194"></a>The Life Span of an Argument</p>
<p>An argument exists only while the program in which it is declared is running. When the program terminates, the argument ceases to exist and its value is lost. Therefore, an argument is not an analytic workspace object.</p>
<p>A program can terminate when a RETURN or SIGNAL statement, or at the last line of the program executes. When the program calls a subprogram, the original program is temporarily suspended and the argument still exists when the subprogram ends and control returns to the original program. A program that calls itself recursively has separate arguments for each running copy of the program.</p>
<p class="subhead2"><a id="i1034808"></a><a id="OLADM2195"></a>Declaring Arguments that Are Passed Into a Program</p>
<p>When declaring arguments that are passed into a program special considerations apply.</p>
<p><a id="OLADM2196"></a><span class="subhead3">Arguments Passed by Value&nbsp;</span>Arguments are passed into a program by value. Consequently, the called program is given only the value of an argument, without access to any analytic workspace object to which it might be related. Therefore, you can change an argument value within the called program without affecting any value outside the program. You can think of an argument variable or valueset as a conveniently initialized local variable or local valueset.</p>
<p><a id="i1034640"></a><a id="OLADM2197"></a><span class="subhead3">Argument Processing for a Function&nbsp;</span>When a program is invoked either with a CALL statement or as a function, the following two-step process occurs:</p>
<ol>
<li>
<p>The specified data types are established. Argument expressions specified by the calling program are evaluated left to right, and their data types are identified. An expression representing a dimension value can be a text (<code>TEXT</code> or <code>ID</code>), numeric (<code>INTEGER</code>, <code>DECIMAL</code>, and so on), or RELATION value. An error in one argument expression stops the process<span class="italic">.</span></p>
</li>
<li>
<p>Each specified data type is matched with the declared data type. Argument expressions are matched positionally with the declared arguments. The first argument expression is matched with the first declared argument, the second argument expression with the second argument, and so on. Each expression is converted in turn to the declared data type of the declared argument.</p>
</li>
</ol>
<p>When an argument is declared as a dimension value, the matching value passed from the calling program can be <code>TEXT</code> or <code>ID</code> (representing a value of the specified dimension), numeric (representing a logical dimension position), or RELATION (representing a physical dimension position). The RELATION method is the way Oracle OLAP passes along dimension values that are the result of evaluating a dimension name or relation name used as the matching value. When the matching value is a noninteger numeric value (for example, <code>DECIMAL</code>), it is rounded to the nearest <code>INTEGER</code> value to represent a logical dimension position.</p>
<p>When an argument is declared as something other than a dimension value, and the matching value from the calling program is a RELATION value, an error occurs. When you want to pass a RELATION value and receive it as a <code>TEXT</code> argument, use CONVERT to convert the value in the program's argument list.</p>
<p>When an argument is declared as a valueset of a dimension, only the name of a valueset of that dimension is accepted as an argument.</p>
<p>When an error occurs in either the first or second step, the program is not executed.</p>
<p><a id="OLADM2198"></a><span class="subhead3">Argument Processing for a Command&nbsp;</span>When a program is invoked as a standalone command with its arguments not enclosed by parentheses, the arguments are matched positionally with the declared arguments. The called program can reference the specified arguments either as declared arguments or through the ARG (<span class="italic">n</span>), ARGS, and ARGFR (<span class="italic">n</span>) functions. In this situation, the arguments are passed as text strings, not by value.</p>
<p><a id="OLADM2199"></a><span class="subhead3">Extra Arguments&nbsp;</span>When the calling program specifies more arguments than there are declarations in the called program, the extra arguments are ignored. When the calling program specifies fewer arguments than there are declarations in the called program, the extra arguments are given <code>NA</code> values.</p>
<p class="subhead2"><a id="OLADM2200"></a>Argument Name that Duplicate the Names of Analytic Workspace Objects</p>
<p>Ordinarily, when you give an argument the same name as an analytic workspace object, the argument (not the analytic workspace object) is referenced within the program. Exceptions to this rule occur only when the statement in which the reference is made requires an analytic workspace object as an argument.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3699"></a>Examples</p>
<div id="OLADM2201" class="example">
<p class="titleinexample"><a id="BABIGFDB"></a>Example 9-44 Passing an Argument to a User-Defined Function</p>
<p>Sometimes verifying user input to the GET function can become complicated. The usual method involves a line of code such as the following one.</p>
<pre>
SHOW GET(INT VERIFY VALUE GT 0 AND VALUE LT 100 -
   IFNOT 'The value must be between 1 and 100')
</pre>
<p>You can create a user-defined function to make the GET expression simpler. For example, the following program can be used as a function to check for values between <code>0</code> and <code>100</code>.</p>
<pre>
DEFINE verit PROGRAM BOOLEAN
PROGRAM
  ARGUMENT uservalue INT
  TRAP ON haderror NOPRINT
  IF uservalue GT 100
     THEN SIGNAL toobig 'The value must be 100 or smaller.'
  ELSE IF uservalue LT 0
     THEN SIGNAL toosmall 'The value must be 0 or greater.'
  RETURN TRUE
haderror:
  RETURN FALSE
END
</pre>
<p>The following GET expression uses the <code>verit</code> function.</p>
<pre>
SHOW GET(INT VERIFY VERIT(VALUE) IFNOT ERRORTEXT) 
</pre></div>
<!-- class="example" -->
<div id="OLADM2202" class="example">
<p class="titleinexample"><a id="CHDEGHGE"></a><a id="i1033454"></a>Example 9-45 Passing Multiple Arguments</p>
<p>Suppose, in the <code>product.rpt</code> program, that you want to supply a second argument that specifies the column width for the data columns in the report. In the <code>product.rpt</code> program, you would add a second ARGUMENT statement to declare the <code>INTEGER</code> argument to be used in setting the value of the COLWIDTH option.</p>
<pre>
ARGUMENT natext TEXT
ARGUMENT widthamt INTEGER
NASPELL = natext
COLWIDTH = widthamt
</pre>
<p>To specify eight-character columns, you could run the <code>product.rpt</code> program with the following statement.</p>
<pre>
CALL product.rpt ('Missing' 8)
</pre>
<p>When the <code>product.rpt</code> program also requires the name of a product as a third argument, then in the <code>product.rpt</code> program you would add a third ARGUMENT statement to handle the product argument, and you would set the status of the <code>product</code> dimension using this argument.</p>
<pre>
ARGUMENT natext TEXT
ARGUMENT widthamt INTEGER
ARGUMENT rptprod PRODUCT
NASPELL = natext
COLWIDTH = widthamt
LIMIT product TO rptprod
</pre>
<p>You can run the <code>product.rpt</code> program with the following statement.</p>
<pre>
CALL product.rpt ('Missing' 8 'TENTS')
</pre>
<p>In this example, the third argument is specified in uppercase letters with the assumption that all the dimension values in the analytic workspace are in uppercase letters.</p>
</div>
<!-- class="example" -->
<div id="OLADM2203" class="example">
<p class="titleinexample"><a id="sthref3700"></a>Example 9-46 Using the ARGUMENT Statement</p>
<p><a id="sthref3701"></a>Suppose you are writing a program, called <code>product.rpt</code>. The <code>product.rpt</code> program produces a report, and you want to supply an argument to the report program that specifies the text that should appear for an NA value in the report. In the <code>product.rpt</code> program, you can use the declared argument <code>natext</code> in an ARGUMENT statement to set the NASPELL option to the value provided as an argument.</p>
<pre>
ARGUMENT natext TEXT
NASPELL = natext
</pre>
<p>To specify <code>Missing</code> as the text for NA values, you can execute the following statement.</p>
<pre>
CALL product.rpt ('Missing')
</pre>
<p>In this example, literal text enclosed in single quotes provides the value of the text argument. However, any other type of text expression works equally well, as shown in the next example.</p>
<pre>
DEFINE natemp VARIABLE TEXT TEMP
natemp = 'Missing'
CALL product.rpt (natemp)
</pre></div>
<!-- class="example" -->
<div id="OLADM2204" class="example">
<p class="titleinexample"><a id="CHDBIFDI"></a><a id="i1033540"></a>Example 9-47 Passing the Text of an Expression</p>
<p>Suppose you have a program named <code>custom.rpt</code> that includes a REPORT statement, but you want to be able to use the program to present the values of an expression, such as <code>sales - expense</code>, and individual variables.</p>
<pre>
custom.rpt 'sales - expense'
</pre>
<p>Note that you must enclose the expression in single quotation marks. Because the expression contains punctuation (the minus sign), the quotation marks are necessary to indicate that the entire expression is a single argument.</p>
</div>
<!-- class="example" -->
<p>In the <code>custom.rpt</code> program, you could use the following statements to produce a report of this expression.</p>
<pre>
ARGUMENT rptexp TEXT
REPORT &amp;rptexp
</pre>
<p>For an example of using ampersand substitution to pass multiple dimension values, see <a href="dml_commands_2009.htm#CHDFHBAJ">Example 10-18, "Using Ampersand Substitution with LIMIT"</a>.</p>
</div>
<!-- class="refsubsect" -->
<div id="OLADM2205" class="example">
<p class="titleinexample"><a id="CHDFCJBB"></a><a id="i1033557"></a>Example 9-48 Passing Workspace Object Names and Keywords</p>
<p>Suppose you design a program called <code>sales.rpt</code> that produces a report on a variable that is specified as an argument and sorts the <code>product</code> dimension in the order that is specified in another argument. You would run the <code>sales.rpt</code> program by executing a statement like the following one.</p>
<pre>
sales.rpt units d
</pre>
<p>In the <code>sales.rpt</code> program, you can use the following statements.</p>
<pre>
ARGUMENT varname TEXT
ARGUMENT sortkey TEXT
SORT product &amp;sortkey &amp;varname
REPORT &amp;varname
</pre>
<p>After substituting the arguments, these statements are executed in the <code>sales.rpt</code> program.<a id="sthref3702"></a></p>
<pre>
SORT product D units
REPORT units
</pre></div>
<!-- class="example" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3088">
<tr>
<td class="cellalignment3095">
<table class="cellalignment3093">
<tr>
<td class="cellalignment3092"><a href="dml_commands_1013.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3092"><a href="dml_commands_1015.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3097">
<table class="cellalignment3091">
<tr>
<td class="cellalignment3092"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3092"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3092"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3092"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3092"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3092"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
