<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>DEFINE</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 742" />
<meta name="dcterms.created" content="2013-11-14T21:21:43Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="OLAP DML Reference" />
<meta name="dcterms.identifier" content="E17122-08" />
<meta name="dcterms.isVersionOf" content="OLADM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="dml_commands_1031.htm" title="Previous" type="text/html" />
<link rel="Next" href="dml_commands_1033.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e17122.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">448/593</span> <!-- End Header --><a id="i78478"></a>
<hr />
<div id="OLADM782" class="refsect1">
<h1 class="refsect1">DEFINE</h1>
<p><a id="sthref3945"></a><a id="sthref3946"></a><a id="sthref3947"></a>T<a id="sthref3948"></a><a id="sthref3949"></a>he DEFINE command adds a new object to the analytic workspace. This entry describes the DEFINE command in general. The following entries discuss the use of the DEFINE command for creating specific types of object:</p>
<ul>
<li>
<p><a href="#i78488">DEFINE AGGMAP</a></p>
</li>
<li>
<p><a href="#i78493">DEFINE COMPOSITE</a></p>
</li>
<li>
<p><a href="#i78498">DEFINE DIMENSION</a></p>
<ul>
<li>
<p><a href="#i1010637">DEFINE DIMENSION (simple)</a></p>
</li>
<li>
<p><a href="#i1010931">DEFINE DIMENSION (conjoint)</a></p>
</li>
<li>
<p><a href="#i1010642">DEFINE DIMENSION CONCAT</a></p>
</li>
<li>
<p><a href="#i1010646">DEFINE DIMENSION ALIASOF</a></p>
</li>
</ul>
</li>
<li>
<p><a href="#i1010609">DEFINE FORMULA</a></p>
</li>
<li>
<p><a href="#i78508">DEFINE MODEL</a></p>
</li>
<li>
<p><a href="#i1007745">DEFINE PARTITION TEMPLATE</a></p>
</li>
<li>
<p><a href="#i78513">DEFINE PROGRAM</a></p>
</li>
<li>
<p><a href="#i78518">DEFINE RELATION</a></p>
</li>
<li>
<p><a href="#i78523">DEFINE SURROGATE</a></p>
</li>
<li>
<p><a href="#i78528">DEFINE VALUESET</a></p>
</li>
<li>
<p><a href="#i78533">DEFINE VARIABLE</a></p>
</li>
<li>
<p><a href="#i78538">DEFINE WORKSHEET</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a href="dml_objects.htm#BABDBIGI">Chapter 3, "Formulas, Models, Aggregations, and Allocations"</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3950"></a>Syntax</p>
<p class="synopsis">DEFINE&nbsp;<span class="italic">name&nbsp;object-type&nbsp;attributes&nbsp;</span>[AW&nbsp;<span class="italic">workspace</span>]&nbsp;[SESSION]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3951"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span></dt>
<dd>
<p>A <code>TEXT</code> expression that is the name for the new object. Follow these guidelines when specifying a value for name:</p>
<ul>
<li>
<p>The name must consist of 1 to 64 characters. When you are using a multibyte character set, you can still specify 64 characters even when this requires more than 64 bytes. Each character may be a letter (<code>A</code>-<code>Z</code>), a number (<code>0</code>-<code>9</code>), an underline (<code>_</code>), or a dot (<code>.</code>). However, the following restrictions apply to the use of these characters:</p>
<ul>
<li>
<p>The name cannot consist of a single dot (<code>.</code>) character or a single underscore (<code>_</code>) character.</p>
</li>
<li>
<p>The name cannot duplicate a reserved word. For more information on identifying reserved words, see the <a href="dml_functions_2081.htm#g1034721">RESERVED</a> function.</p>
</li>
<li>
<p>The first character in the name cannot be a number.</p>
</li>
<li>
<p>The first character cannot be a dot (<code>.</code>) when the second character is a number.</p>
</li>
</ul>
</li>
<li>
<p>By default Oracle OLAP creates the definition in the current workspace. To create the definition in a different attached workspace, you can specify a qualified object name for <span class="italic">name</span> or you can use the AW argument to specify the workspace. Do not use both.</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="infobox-note">
<p class="notep1">Caution:</p>
Oracle OLAP does not warn you when you create an object that has the same name as an existing object in another attached workspace.</div>
<dl>
<dt><span class="italic">object-type</span></dt>
<dd>
<p>The type of object being defined. The default is VARIABLE. The object types are discussed in the subsections for the DEFINE command.</p>
</dd>
<dt><span class="italic">attributes</span></dt>
<dd>
<p>Attributes are different for each type of object. The attributes are listed in the entry for each object type.</p>
</dd>
<dt>AW <span class="italic">workspace</span></dt>
<dd>
<p>The name of an attached workspace in which you want to define the object. You can also specify a noncurrent attached workspace using a qualified object name for <span class="italic">name</span>. Do not use this phrase when qualified object name for <span class="italic">name</span>.</p>
</dd>
<dt>SESSION</dt>
<dd>
<p>Specifies that the object exists only in the current session. The object is created in the EXPRESS analytic workspace to which you have read-only access. When you close the current session, the object no longer exists.</p>
</dd>
</dl>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3952"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2288"></a>Triggering Program Execution When DEFINE Executes</p>
<p>Using a TRIGGER_DEFINE program, you can make the DEFINE command an event that automatically executes an OLAP DML program. See <a href="dml_program.htm#CHDBDIIH">"Trigger Programs"</a> for more information.</p>
<p class="subhead2"><a id="OLADM2289"></a>Effect of DEFINE on the Status of the NAME Dimension</p>
<p>When you execute a DEFINE command with the NAME dimension limited to less than all its values, the status of NAME is automatically limited to <code>ALL</code>.</p>
<p class="subhead2"><a id="OLADM2290"></a>Viewing Session Objects</p>
<p>Objects created with the SESSION keyword are stored in the analytic workspace named <code>EXPRESS</code> instead of the current analytic workspace. Therefore, statements that operate against the current analytic workspace (such as LISTNAMES) do not list session objects unless you do one of the following:</p>
<ul>
<li>
<p>Specify the <code>EXPRESS</code> analytic workspace in the statement (such as <code>LISTNAMES AW EXPRESS</code>)</p>
</li>
<li>
<p>Make the <code>EXPRESS</code> analytic workspace the current analytic workspace by issuing an <code>AW ATTACH EXPRESS</code> statement.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div id="OLADM783" class="refsect2"><a id="i78488"></a>
<hr />
<h2 class="refsect2">DEFINE AGGMAP</h2>
<p><a id="sthref3953"></a><a id="sthref3954"></a>The <a id="ABC1081393"></a><a id="sthref3955"></a><a id="sthref3956"></a><a id="sthref3957"></a>DEFINE command with the AGGMAP keyword adds a new aggmap object to an analytic workspace. An aggmap object is a specification for how Oracle OLAP allocates or aggregates variable data.</p>
<p>Defining an aggmap merely creates an aggmap object in the analytic workspace; it does not define the calculation specification. The aggmap specification can either specify how to aggregate or how to allocate data:</p>
<ul>
<li>
<p>For information on coding an aggregation specification, see the <a href="dml_commands_1006.htm#i1032719">AGGMAP</a> command.</p>
</li>
<li>
<p>For information on coding an allocation specification, see the <a href="dml_commands_1012.htm#i78780">ALLOCMAP</a> command.</p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3958"></a>Syntax</p>
<p class="synopsis">DEFINE&nbsp;<span class="italic">aggname&nbsp;</span>AGGMAP&nbsp;[&lt;<span class="italic">dims</span>...&gt;][AW <span class="italic">workspace</span>][SESSION]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3959"></a>Parameters</p>
<dl>
<dt><span class="italic">aggname</span></dt>
<dd>
<p>The name of the object that you are defining. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>AGGMAP</dt>
<dd>
<p>The object type when you are defining an aggmap.</p>
</dd>
<dt><span class="italic">dims</span></dt>
<dd>
<p>(Optional; retained for compatibility with earlier software versions.) When defining an aggmap object for aggregation (that is, an AGGMAP-type aggmap), the names of the dimensions. You cannot specify a conjoint dimension as a base dimension in the definition or specification for the aggmap.</p>
</dd>
<dt>AW <span class="italic">workspace</span></dt>
<dd>
<p>The name of an attached workspace in which you want to define the object. For more about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>SESSION</dt>
<dd>
<p>Specifies that the object exists only in the current session. For more information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3960"></a>Examples</p>
<div id="OLADM2291" class="example">
<p class="titleinexample"><a id="sthref3961"></a>Example 9-78 Creating an Aggmap for Aggregation</p>
<p>Suppose you define a <code>sales</code> variable with the following statement.</p>
<pre>
DEFINE sales VARIABLE &lt;time, product, geography&gt;
</pre>
<p>Assume also that you have defined an aggmap named <code>sales.agg</code> with the following definition and specification.</p>
<pre>
DEFINE sales.agg AGGMAP &lt;time, product, geography&gt;
AGGMAP
RELATION time.r PRECOMPUTE (time NE 'Year99')
RELATION product.r PRECOMPUTE (product NE 'All')
RELATION geography.r
CACHE STORE
END
</pre>
<p>The <code>sales.agg</code> aggregation specification contains the preceding three RELATION statements and a CACHE statements. In this example, you are specifying that all of the data for the <code>time.r</code> hierarchy of the <code>time</code> dimension should be aggregated, except for any data that has a <code>time</code> dimension value of <code>Year9</code>9. All of the data for the <code>product.r</code> hierarchy of the <code>product</code> dimension should be aggregated, except for any data that has the <code>product</code> dimension value of <code>ALL</code>. (In this example, the <code>product</code> dimension has a dimension value named <code>ALL</code> that represents all products in the hierarchy.) All <code>geography</code> dimension values are aggregated. The CACHE STORE statement specifies that any data that is rolled up on the fly should be calculated just once and stored in the cache for other access requests during t&nbsp;he same session.</p>
<p>Note that users should not have write access to the analytic workspace when CACHE STORE is set, because the data calculated during the session may be saved inadvertently.</p>
<p>In this example, any data value that dimensioned by a <code>Year99</code> <code>time</code> value or an <code>ALL</code> <code>product</code> dimension value is calculated on the fly.</p>
<p>You can now use the <code>sales.agg</code> aggmap with an AGGREGATE command, such as the following.</p>
<pre>
AGGREGATE sales USING sales.agg
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" -->
<div id="OLADM2292" class="example">
<p class="titleinexample"><a id="CIHGCFJC"></a>Example 9-79 Creating an Aggmap for Allocation</p>
<p>Suppose you have a <code>sales</code> variable that you defined with the following statement.</p>
<pre>
DEFINE sales VARIABLE &lt;time, product, geography&gt;
</pre>
<p>To allocate data from a source to cells in the <code>sales</code> variable that are specified by the <code>time</code> and <code>product</code> dimension hierarchies, you have created an ASCII disk file called <code>salesalloc.txt</code>, which contains the following aggmap definition and specification.</p>
<pre>
DEFINE sales.alloc AGGMAP
ALLOCMAP
RELATION time.r OPERATOR EVEN
RELATION product.r operator EVEN NAOPERATOR HEVEN
SOURCEVAL ZERO
CHILDLOCK DETECT
END
</pre>
<p>To include the <code>sales.alloc</code> aggmap in your workspace, execute the following statement.</p>
<pre>
INFILE 'salesalloc.txt'
</pre>
<p>The <code>sales.alloc</code> aggmap is now defined, and it contains the preceding two RELATION statements, the SOURCEVAL statement and the CHILDLOCK statement. You end the entry of statements into the aggmap with the END statement. In this example, you are specifying that the first allocation of source values occurs down the <code>time</code> dimension hierarchy and that the source value is divided evenly between the target cells at each level of the allocation. The second allocation occurs down the <code>product</code> dimension hierarchy, with the source value again divided evenly between the target cells at each level of the allocation, and when the allocation encounters a deadlock, the source values is divided evenly between the target cells of the hierarchy including cells that have a basis value of <code>NA</code>. With the SOURCEVAL statement you specify that after the allocation, ALLOCATE sets the value of each source cell to zero. With the CHILDLOCK statement you specify that ALLOCATE detects the existence of locks on both a parent and a child element of a dimension hierarchy.</p>
<p>You can now use the <code>sales.alloc</code> aggmap with an ALLOCATE command, such as the following.</p>
<pre>
ALLOCATE sales USING sales.alloc
</pre>
<p>The preceding statement does not specify a basis or a target object so ALLOCATE uses the <code>sales</code> variable as the source, the basis, and the target of the allocation.<a id="sthref3962"></a></p>
</div>
<!-- class="example" --></div>
<!-- class="refsect2" -->
<div id="OLADM784" class="refsect2"><a id="i78493"></a>
<hr />
<h2 class="refsect2">DEFINE COMPOSITE</h2>
<p><a id="sthref3963"></a><a id="sthref3964"></a><a id="sthref3965"></a><a id="sthref3966"></a>The DEFINE command with the COMPOSITE keyword adds a new named composite to an analytic workspace. Conceptually, you can think of a composite consisting of two structures:</p>
<ul>
<li>
<p>The composite object itself. The composite contains the dimension-value combinations (that is, a composite tuples) that Oracle OLAP uses to determine the structure of any variables dimensioned by the composite.</p>
</li>
<li>
<p>An index between the composite values and its base dimension values.</p>
</li>
</ul>
<p>For a variable that is dimensioned by composite, Oracle OLAP creates array elements (that is, variable cells) only for those dimension values that are stored in the tuples of the composite; it does not create a cell for every value in the base dimensions. Data for the variable is stored in order, cell by cell, for each tuple in the composite. From the perspective of data storage, each combination of base dimension values in a composite is treated like the value of a regular dimension. Consequently, when you define a variable with one regular dimension and one composite, the data for the variable is stored as though it was a two-dimensional variable. Using composites to reduce the number of elements created for a variable results in more efficient data storage.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle OLAP also supports the use of unnamed composites as described in <a href="#CIHFIGCA">"Unnamed Composites"</a>.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3967"></a>Syntax</p>
<p class="synopsis">DEFINE&nbsp;<span class="italic">name&nbsp;</span>COMPOSITE&nbsp;&lt;<span class="italic">dims</span>...&gt;&nbsp;[AW&nbsp;<span class="italic">workspace</span>]&nbsp;[<span class="italic">index-algorithm</span>]&nbsp;[SESSION]</p>
<p>where <span class="syntaxinlineitalic">index-algorithm</span> specifies the algorithm that Oracle OLAP uses to create an index that relates the composite values to its base dimension values. When you omit this optional argument, Oracle OLAP uses the value specified by the SPARSEINDEX option. Valid values for <span class="syntaxinlineitalic">index-algorithm</span> are:</p>
<dl>
<dd><span class="syntaxinline">BTREE</span></dd>
<dd><span class="syntaxinline">BTREE64</span></dd>
<dd><span class="syntaxinline">COMPRESSED</span></dd>
<dd><span class="syntaxinline">HASH</span></dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3968"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span></dt>
<dd>
<p>The name of the object you are defining. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>COMPOSITE</dt>
<dd>
<p>The object type when you are defining a named composite.</p>
</dd>
<dt><span class="italic">dims</span></dt>
<dd>
<p>The names of two or more dimensions that you want to be the base dimensions of the composite. When you specify COMPRESSED as the value of <span class="italic">index-algorithm</span>, at least one dimension must be a hierarchal dimension.</p>
<p>The order of the dimensions in <span class="italic">dims</span> varies by the value you specify for <span class="italic">index-algorithm</span>:</p>
<ul>
<li>
<p>For b-tree or hash composites, specify the dimensions in fastest to slowest-varying order as discussed in <a href="#CHDIIBHF">"Effect of Dimension Order on Variable Storage and Statement Looping"</a>.</p>
</li>
<li>
<p>For compressed composites, it does not matter in which order you specify the dimensions. Oracle OLAP selects the order in which to store the values unless you override this optimization by specifying FORCEORDER in an AGGREGATE command or AGGREGATE function. To see the optimized order chosen by Oracle OLAP, view the cube operations log.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS72789" href="../../appdev.112/e40758/d_cube_log.htm#ARPLS72789"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the cube operations log and the DBMS_CUBE_LOG package</div>
</li>
</ul>
<p>You must define all the dimensions and named composites used in the list before defining the composite. DEFINE automatically creates any unnamed composites in the list for you.</p>
</dd>
<dt>AW <span class="italic">workspace</span></dt>
<dd>
<p>The name of an attached workspace in which you want to define the object. For more information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>BTREE</dt>
<dd>
<p>Specifies the creation of a b-tree index to relate composite values to base dimension values. BTREE is the standard indexing method for composites. For a variable that is dimensioned by a BTREE composite, Oracle OLAP creates array elements (that is, variable cells) only for those dimension values that are stored in the tuples of the composite; it does not create a cell for every value in the base dimensions.</p>
</dd>
<dt>BTREE64</dt>
<dd>
<p>Specifies the creation of a highly-scalable b-tree index to relate composite values to base dimension values. For a variable that is dimensioned by a BTREE64 composite, like a BTREE composite, Oracle OLAP creates array elements (that is, variable cells) only for those dimension values that are stored in the tuples of the composite; it does not create a cell for every value in the base dimensions. However, unlike a BTREE composite, a BTREE64 composite supports b-trees greater than 2 gigabytes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Typically, you define a BTREE64 composite when you want to use it to dimension a variable which you populate from a relational table that is larger than 2 gigabytes.</div>
</dd>
<dt>COMPRESSED</dt>
<dd>
<p>Specifies the creation of a compressed index to relate composite values to base dimension values. You specify COMPRESSED only when you want to create a composite for a variable that has at least one hierarchical dimension that is specified in <span class="italic">dims</span> and that is aggregated.</p>
<p>A compressed composite contains one composite tuple for each set of base dimension values that identifies non-NA detail data in the variables that use it. Additionally, for variables dimensioned by compressed composite Oracle OLAP reduces redundancy in the variable, composite, and composite index by creating a physical position in the composite <span class="italic">only</span> for those tuples that represent a parent with multiple descendants. Oracle OLAP then creates an index between this composite structure and the base dimensions and uses this composite structure as the dimension of the variable. Because the actual structure of a compressed composite is smaller than that of a b-tree or hash composite, a variable dimensioned by a compressed composite is also smaller than a variable dimensioned by a b-tree or hash composite. Also, because the index for a compressed composite only has nodes for parents with multiple descendants, the index of a compressed composite has fewer levels and is smaller than the index of a b-tree composite. Although performance varies depending on the depth of the hierarchies and the order of the dimensions in the composite, aggregating variables defined with compressed composites is typically much faster than aggregating variables defined with b-tree or hash composites.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle OLAP compresses the data in variables dimensioned by compressed composites using the "intelligence" of the AGGREGATE command or AGGREGATE function. Consequently, there are special considerations that apply when aggregating a variable dimensioned by one or more compressed composites. See <a href="dml_commands_1006.htm#CHDFGADE">"Aggregating Variables Dimensioned by Compressed Composites"</a> for more information.</div>
</dd>
<dt>HASH</dt>
<dd>
<p>Specifies the creation of a hash index to relate composite values to base dimension values. HASH is rarely used and, then, typically, only when the composite has two or three dimensions. For a variable that is dimensioned by a b-tree or hash composite, Oracle OLAP creates array elements (that is, variable cells) only for those dimension values that are stored in the tuples of the composite; it does not create a cell for every value in the base dimensions.</p>
</dd>
<dt>SESSION</dt>
<dd>
<p>Specifies that the object exists only in the current session. When you close the current session, the object no longer exists.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3969"></a>Usage Notes</p>
<p class="subhead1"><a id="CIHGDFDB"></a><a id="OLADM2293"></a>Shared Composites</p>
<p>You can use the same b-tree or hash composite to dimension several variables. (Compressed composites cannot be shared in this manner.) The actual sparsity of a variable dimensioned by a b-tree or hash composite varies depending on whether or not the composite is an unshared composite or a shared composite:</p>
<ul>
<li>
<p>An <span class="bold">unshared composite</span> is a composite that is used to dimension only one variable. All types of composites (that is, b-tree, hash, and compressed composites) can be unshared composites. An unshared composite is populated only when the variable that uses it is populated. Consequently, an unshared composite perfectly reflects the sparsity of the variable that it is used to dimension. It only has the dimension value combinations for each non-<code>NA</code> value in that variable.</p>
</li>
<li>
<p>A <span class="bold">shared composite</span> is a composite that is used to dimension multiple variables. A shared composite can be either a b-tree or hash composite; it cannot be a compressed composite. A shared composite is populated when <span class="italic">any</span> of the variables that use it are populated. A shared composite has <span class="italic">all</span> of the dimension value combinations for non-<code>NA</code> values for <span class="italic">all</span> of the variables that it dimensions. A shared composite reflects the sparsity of <span class="italic">all</span> of the variable that it is used to dimension. Typically, therefore, variables dimensioned by shared composites are not perfectly sparse variables.</p>
</li>
</ul>
<p>When the size of variables is important, or when you have variables that are sparse along the same dimensions but with significantly different patterns of sparsity, define different composites for the different variables.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3970"></a>Examples</p>
<p>This section contains a simple example of creating a named b-tree composite. For examples of using composites to dimension variables, see <a href="#CIHDIHJG">Example 9-99, "Defining a Variable Dimensioned by an Uncompressed Composite"</a> and <a href="#CIHCCEJI">Example 9-100, "Defining a Variable Dimensioned by a Compressed Composite"</a>.</p>
<div id="OLADM2294" class="example">
<p class="titleinexample"><a id="sthref3971"></a>Example 9-80 Creating a Named b-Tree Composite</p>
<p>Assume that the value of SPARSEINDEX is <code>BTREE</code>. The following statements define two objects: a named composite that has a b-tree index and base dimensions of <code>market</code> and a variable called <code>expenses</code> that is dimensioned by the <code>month</code> dimension and the <code>market.product</code> composite.</p>
<pre>
DEFINE market.product COMPOSITE &lt;market product&gt;
DEFINE expenses DECIMAL &lt;month market.product &lt;market product&gt;&gt; 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="OLADM785" class="refsect2"><a id="i78498"></a>
<hr />
<h2 class="refsect2">DEFINE DIMENSION</h2>
<p><a id="sthref3972"></a><a id="sthref3973"></a><a id="sthref3974"></a><a id="sthref3975"></a>The DEFINE command with the DIMENSION keyword adds a new dimension object to an analytic workspace. A dimension is a list of values that provides an index to the data.</p>
<p>Because the syntax of the DEFINE DIMENSION command is different depending on the type of the dimension that you are defining, four separate entries are provided:</p>
<ul>
<li>
<p><a href="#i1010637">DEFINE DIMENSION (simple)</a> for defining a dimension with unique values of the same data type.</p>
</li>
<li>
<p><a href="#CHDIDHBI">DEFINE DIMENSION (DWMQY)</a> for defining a non-hierarchical dimension whose values represent a time period (day, week, month, quarter, or year).</p>
</li>
<li>
<p><a href="#i1010931">DEFINE DIMENSION (conjoint)</a> for defining a dimension over two or more other base dimensions when the base dimensions do not contain duplicate values or have different data types and when you want to explicitly specify the dimension value combinations.</p>
</li>
<li>
<p><a href="#i1010642">DEFINE DIMENSION CONCAT</a> for defining a dimension over two or more other base dimension when the base dimensions contain duplicate values or different data types or when you want Oracle OLAP to automatically populate the dimension value combinations.</p>
</li>
<li>
<p><a href="#i1010646">DEFINE DIMENSION ALIASOF</a> for defining an alias for a simple dimension.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Defining a dimension in the analytic workspace merely adds the definition of the dimension to the analytic workspace; it does not populate the dimension. To populate dimensions using the OLAP DML, you can issue OLAP DML SQL, FILEREAD, or MAINTAIN statements.</div>
<div id="OLADM786" class="refsect3"><a id="i1010637"></a>
<h3 class="refsect3">DEFINE DIMENSION (simple)</h3>
<p>The DEFINE DIMENSION (simple) command defines a simple dimension. When a variable is dimensioned by regular dimensions, Oracle OLAP creates an array element for each set of its dimension values. The values of a simple dimension must be unique data values with the same data type. A simple dimension can be a flat dimension or a hierarchical dimension that contains values from different levels of a hierarchy.</p>
<div class="infobox-note">
<p class="notep1">Tip:</p>
To create a hierarchical dimension using duplicate values or values of different data types, use a concat dimension as described in <a href="#i1010642">DEFINE DIMENSION CONCAT</a>.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3976"></a>Syntax</p>
<p class="synopsis">DEFINE&nbsp;<span class="italic">name&nbsp;</span>DIMENSION&nbsp;<span class="italic">type&nbsp;</span>[TEMP] [AW&nbsp;<span class="italic">workspace</span>]&nbsp;[SESSION]</p>
<p>where <span class="syntaxinlineitalic">type</span> is the data type of the dimension. The syntax of <span class="syntaxinlineitalic">type</span> varies depending on the data type:</p>
<dl>
<dd><span class="syntaxinline">TEXT &nbsp;[WIDTH</span>&nbsp;<span class="syntaxinlineitalic">n</span><span class="syntaxinline">]</span></dd>
<dd><span class="syntaxinline">NTEXT &nbsp;[WIDTH&nbsp;</span><span class="syntaxinlineitalic">n</span><span class="syntaxinline">]</span></dd>
<dd><span class="syntaxinline">ID</span></dd>
<dd><span class="syntaxinline">INTEGER</span></dd>
<dd><span class="syntaxinline">NUMBER [(</span><span class="syntaxinlineitalic">precision</span> <span class="syntaxinline">,</span> <span class="syntaxinlineitalic">scale</span><span class="syntaxinline">)</span>]</dd>
<dd><span class="syntaxinline">DATETIME</span> <span class="syntaxinline">[(</span> <span class="syntaxinlineitalic">truncation-code</span> <span class="syntaxinline">)]</span></dd>
<dd><code>TIMESTAMP</code> <span class="syntaxinline">[(</span> <span class="syntaxinlineitalic">truncation-code</span> <span class="syntaxinline">)]</span></dd>
<dd><code>TIMESTAMP_TZ</code> <span class="syntaxinline">[(</span> <span class="syntaxinlineitalic">truncation-code</span> <span class="syntaxinline">)]</span></dd>
<dd><code>TIMESTAMP_LTZ</code> <span class="syntaxinline">[(</span> <span class="syntaxinlineitalic">truncation-code</span> <span class="syntaxinline">)]</span></dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3977"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span></dt>
<dd>
<p>The name of the object you are defining. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>DIMENSION</dt>
<dd>
<p>The object type when you are defining a dimension.</p>
</dd>
<dt>TEXT</dt>
<dd>
<p>Specifies that the values of the dimension have the TEXT data type which is equivalent to the CHAR and VARCHAR2 data types in Oracle Database. This data type stores up to 4,000 bytes for each line in the database character set.</p>
</dd>
<dt>NTEXT</dt>
<dd>
<p>Specifies that the values of the dimension have the NTEXT data type which is equivalent to the NCHAR and NVARCHAR2 data types in Oracle Database. This data type stores up to 4,000 bytes for each line in UTF-8 character encoding.</p>
</dd>
<dt>ID</dt>
<dd>
<p>Specifies a special text data type that stores up to 8 single-byte characters for each line in the database character set.</p>
</dd>
<dt>WIDTH <span class="italic">n</span></dt>
<dd>
<p>For TEXT or NTEXT dimensions, the width, in bytes, of the storage area of each value of an object. Valid width values are <code>1</code> through <code>4000</code>. Specify a fixed width only when you are certain that the values of a particular dimension are of similar size. When a value exceeds the specified width, it is truncated.</p>
</dd>
<dt>INTEGER</dt>
<dd>
<p>Specifies that the values of the dimension have the <code>INTEGER</code> data type. The data type for a dimension with values that are identified by their numeric position (1, 2, and so on). A data type of <code>INTEGER</code> means that the dimension has no character values. For ease of use, use a text or time period data type, when possible.</p>
</dd>
<dt>NUMBER</dt>
<dd>
<p>Specifies that the values of the dimension have the <code>NUMBER</code> data type. A <code>NUMBER</code> dimension differs from other dimensions in that its values cannot be specified by position, only by value. To specify the values of a <code>NUMBER</code> dimension by position, you can define an <code>INTEGER</code> type dimension surrogate for the <code>NUMBER</code> dimension.</p>
</dd>
<dt><span class="italic">precision</span></dt>
<dd>
<p>The total number of digits a value of type <code>NUMBER</code> can have.</p>
</dd>
<dt><span class="italic">scale</span></dt>
<dd>
<p>The number of digits a value of type <code>NUMBER</code> can have to the right of a decimal point. For example, when you specify a precision of 7 and a scale of 2, then the highest value that the dimension can have is 99999.99. When you specify a precision value, but do not specify a scale value, then the scale is 0.</p>
</dd>
<dt>DATETIME</dt>
<dd>
<p>Specifies that the values of the dimension have the <code>DATETIME</code> data type.</p>
</dd>
<dt>TIMESTAMP</dt>
<dd>
<p>Specifies that the values of the dimension have the <code>TIMESTAMP</code> data type.</p>
</dd>
<dt>TIMESTAMP_TZ</dt>
<dd>
<p>Specifies that the values of the dimension have the <code>TIMESTAMP_TZ</code> data type.</p>
</dd>
<dt>TIMESTAMP_LTZ</dt>
<dd>
<p>Specifies that the values of the dimension have the <code>TIMESTAMP_LTZ</code> data type.</p>
</dd>
<dt><span class="italic">truncation_code</span></dt>
<dd>
<p>A text expression that specifies a format model shown in <a href="dml_functions_2082.htm#CJAEFAIA">Table 8-13, "Datetime Format Templates for the ROUND and TRUNC Date Functions"</a>. A format model indicates how the date and time number should be truncated.</p>
</dd>
<dt>TEMP</dt>
<dd>
<p>Indicates that the dimension's values are only temporary and only for the current session. The dimension has a definition in the current workspace and can contain values during the current session. However, when you update and commit, only the definition of the dimension is saved. When you leave end your session or switch to another workspace, the data values are discarded. Each time you start the workspace, the values of a temporary dimension are <code>NA</code>.</p>
</dd>
<dt>AW <span class="italic">workspace</span></dt>
<dd>
<p>The name of an attached analytic workspace in which you want to define the dimension. Any objects dimensioned by the dimension must be defined in the same workspace. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>SESSION</dt>
<dd>
<p>Specifies that the object exists only in the current session. When you close the current session, the object no longer exists.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3978"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2295"></a>NA Values in Variables Dimensioned by Simple Dimensions</p>
<p>When a variable is dimensioned by regular dimensions, Oracle OLAP creates an array element for each set of its dimension values. When an array element is empty, then the element is said to contain an <code>NA</code> value. In some cases, this can result in a sparse variable&mdash;that is, a variable in which a relatively high percentage of array elements that are empty. There are two types of sparsity:</p>
<ul>
<li>
<p><span class="bold">Controlled sparsity<a id="sthref3979"></a><a id="sthref3980"></a></span> occurs when a range of one or more dimensions has no data; for example, a new variable dimensioned by <code>month</code> for which you do not have data for past months.</p>
</li>
<li>
<p><span class="bold">Random sparsity</span><a id="sthref3981"></a><a id="sthref3982"></a> occurs when some combinations of dimension values never have any data. For example, a district might only sell certain products and never have data for other products. Other districts might sell some of those products and other ones, too.</p>
</li>
</ul>
<p>When a sequence of array elements contain enough <code>NA</code> values to fill up an analytic workspace page, Oracle OLAP does not actually store any of the <code>NA</code> values and, instead, keeps tracks of the values internally. However, when an analytic workspace page contains both regular values and <code>NA</code> values, then Oracle OLAP stores all of the values. You can reduce the number of array elements with <code>NA</code> values by dimensioning a variable with one or more composites or conjoint dimensions. See the <a href="#i78493">DEFINE COMPOSITE</a> and <a href="#i1010931">DEFINE DIMENSION (conjoint)</a> commands.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3983"></a>Examples</p>
<div id="OLADM2296" class="example">
<p class="titleinexample"><a id="sthref3984"></a>Example 9-81 Defining a Simple Dimension</p>
<p>This example adds the dimension <code>city</code> to an analytic workspace. You can attach a description to the object immediately after defining it. (You can also add the description later when you use CONSIDER and LD statements.) After defining the dimension <code>city</code>, you can give it values with a MAINTAIN statement.</p>
<p>The statements</p>
<pre>
DEFINE city DIMENSION ID
LD List of cities
MAINTAIN city ADD 'Boston' 'Chicago' 'Dallas' 'Seattle'
DESCRIBE city
</pre>
<p>produce the following definition.</p>
<pre>
DEFINE city DIMENSION ID
LD List of cities
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect3" -->
<div id="OLADM787" class="refsect3"><a id="CHDIDHBI"></a>
<h3 class="refsect3">DEFINE DIMENSION (DWMQY)</h3>
<p>The DEFINE DIMENSION (DWMQY) command defines a DWMQY dimension (that is a dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR) whose values represent time periods. After defining a DWMQY dimension, you can use a <a href="dml_commands_2073.htm#i79244">VNF</a> statement to add a value name format to the dimension's definition. The VNF command controls the format for entering dimension values and the format for showing them in output.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
When you want to aggregate over time do not define the time dimension as a DWMQY dimension because you cannot aggregate over dimensions of this type. Instead, define the time dimension as a hierarchical dimension of type <code>TEXT</code> or <code>NTEXT</code>.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3985"></a>Syntax</p>
<p class="synopsis">DEFINE&nbsp;<span class="italic">name&nbsp;</span>DIMENSION&nbsp;<span class="italic">dwmqy&nbsp;</span>[TEMP] [AW&nbsp;<span class="italic">workspace</span>]&nbsp;[SESSION]</p>
<p>where <span class="syntaxinlineitalic">dwmqy</span> is the time period of the dimension. The valid types for <span class="italic">dwmqy</span> are DAY, WEEK, MONTH, QUARTER, and YEAR. Each type indicates the span of the time period represented by the individual dimension values of the dimension. The syntax of <span class="syntaxinlineitalic">dwmqy</span> varies depending on the type:</p>
<dl>
<dd>&nbsp;&nbsp;&nbsp;&nbsp;<span class="syntaxinline">&nbsp;DAY</span>&nbsp;</dd>
<dd>&nbsp;&nbsp;&nbsp;&nbsp;<span class="syntaxinline">&nbsp;[</span><span class="syntaxinlineitalic">multiple</span><span class="syntaxinline">]&nbsp;WEEK [BEGINNING phase</span> <span class="syntaxinline">] [ ENDING phase</span> <span class="syntaxinline">]</span>&nbsp;</dd>
<dd>&nbsp;&nbsp;&nbsp;&nbsp;<span class="syntaxinline">&nbsp;[</span><span class="syntaxinlineitalic">multiple</span><span class="syntaxinline">]&nbsp;MONTH [BEGINNING phase</span> <span class="syntaxinline">] [ ENDING phase</span> <span class="syntaxinline">]</span>&nbsp;</dd>
<dd>&nbsp;&nbsp;&nbsp;&nbsp;<span class="syntaxinline">&nbsp;QUARTER [BEGINNING phase</span> <span class="syntaxinline">] [ ENDING phase</span> <span class="syntaxinline">]</span>&nbsp;</dd>
<dd>&nbsp;&nbsp;&nbsp;&nbsp; <span class="syntaxinline">YEAR [BEGINNING phase</span> <span class="syntaxinline">] [ ENDING phase</span> <span class="syntaxinline">]</span>&nbsp;</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3986"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span></dt>
<dd>
<p>The name of the object you are defining. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>DIMENSION</dt>
<dd>
<p>The object type when you are defining a dimension.</p>
</dd>
<dt><span class="italic">multiple</span></dt>
<dd>
<p>For the WEEK and MONTH types, specifies time periods that span a multiple number of weeks or months. With the WEEK keyword, <span class="italic">multiple</span> can be an <code>INTEGER</code> from 2 to 52. With the MONTH keyword, <span class="italic">multiple</span> can be 2, 3, 4, or 6.</p>
</dd>
<dt>BEGINNING <span class="italic">phase</span></dt>
<dt>ENDING <span class="italic">phase</span></dt>
<dd>
<p>Specifies the beginning or ending phase of a WEEK, MONTH, QUARTER, or YEAR dimension:</p>
<ul>
<li>
<p>For single weeks, <span class="italic">phase</span> can be a day of the week (corresponding to a name in the DAYNAMES option) or a date.</p>
</li>
<li>
<p>For multiple weeks, <span class="italic">phase</span> must be a date.</p>
</li>
<li>
<p>For months, quarters, or years, <span class="italic">phase</span> must be a month, expressed as a month name (corresponding to a name in the MONTHNAMES option) or as a date.</p>
</li>
</ul>
<p>When you specify <span class="italic">phase</span> as a date, you give the month, day, and year, enclosed in single quotes, using any of the input styles that are valid for variable values with a data type of DATE. When you specify a date with an ambiguous meaning (such as <code>'03&nbsp;05&nbsp;97'</code>), the date is interpreted according to the current setting of the DATEORDER option.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you define a multiple-period dimension of type WEEK but you do not specify a BEGINNING or an ENDING argument, DEFINE automatically supplies a phase that begins with the date <code>'31DEC1899'</code>.</div>
</dd>
<dt>TEMP</dt>
<dd>
<p>Indicates that the dimension's values are only temporary and only for the current session. The dimension has a definition in the current workspace and can contain values during the current session. However, when you update and commit, only the definition of the dimension is saved. When you leave end your session or switch to another workspace, the data values are discarded. Each time you start the workspace, the values of a temporary dimension are <code>NA</code>.</p>
</dd>
<dt>AW <span class="italic">workspace</span></dt>
<dd>
<p>The name of an attached analytic workspace in which you want to define the dimension. Any objects dimensioned by the dimension must be defined in the same workspace. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>SESSION</dt>
<dd>
<p>Specifies that the object exists only in the current session. When you close the current session, the object no longer exists.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3987"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2297"></a>Implicit Relations Between DWMQY Dimensions</p>
<p>When you define two or more dimensions of type DAY, WEEK, MONTH, QUARTER, or YEAR, Oracle OLAP automatically defines implicit relations between the values of the dimensions. For example, when you define a dimension of type MONTH and a dimension of type YEAR, Oracle OLAP automatically defines a relation that associates all the MONTH values that fall within a particular year with the corresponding value of the YEAR dimension.</p>
<p class="subhead2"><a id="OLADM2298"></a>Using BEGINNING or ENDING Phase to Organize Data by Fiscal Calendar</p>
<p>For dimensions of type MONTH, QUARTER, and YEAR, the BEGINNING <span class="italic">phase</span> or ENDING <span class="italic">phase</span> argument is especially useful for data organized on a fiscal-year calendar.</p>
<p>By specifying a phase for a dimension of type MONTH or QUARTER, you identify the time period that is the first or last period within a year. For example, when you define a dimension of type MONTH with an ending phase of June, then June is identified as the twelfth month of the year. When a dimension of type QUARTER has an ending phase of June, the quarter ending in June is identified as the fourth quarter of the year. When you give a dimension a VNF that includes a period code, you can enter or report dimension values according to their period within the year.</p>
<p>By default, the single or multiple weeks in a dimension of type WEEK end on Saturday. The BEGINNING <span class="italic">phase</span> or ENDING <span class="italic">phase</span> argument lets you specify the day of the week on which each period begins or ends. For multiple-week periods, the phase argument also controls the starting or ending date for grouping the weeks into periods. By default, the starting point for grouping multiple weeks is December 31, 1899 (a Sunday).</p>
<p>However, the phase argument does not determine the period that is counted as the first period within a year. For dimensions of type WEEK, Period 1 in a given calendar year is always the first period that ends in that year. For example, suppose you specify a dimension of type WEEK with a four-week period ending on June&nbsp;7,&nbsp;1997. DEFINE works backward and forward from this date, forming weeks into four-week periods. For 1997, Period 1 is the period beginning on December&nbsp;22,&nbsp;1996 and ending on January&nbsp;18,&nbsp;1997.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3988"></a>Examples</p>
<div id="OLADM2299" class="example">
<p class="titleinexample"><a id="sthref3989"></a>Example 9-82 Defining a YEAR Dimension</p>
<p>The following statement defines a dimension of type YEAR that holds values for fiscal years that end on June 30.</p>
<pre>
DEFINE fyear DIMENSION YEAR ENDING june
</pre>
<p>After defining the dimension, you can give it a description and a VNF (value name format). You can use a MAINTAIN statement to give values to the dimension.</p>
<pre>
LD Fiscal years ending June 30
VNF 'FY&lt;ff&gt;'
MAINTAIN fyear ADD 'FY97' 'FY00' 
</pre></div>
<!-- class="example" -->
<div id="OLADM2300" class="example">
<p class="titleinexample"><a id="sthref3990"></a>Example 9-83 Using the Default Phrase for Date in an ENDING Phrase</p>
<p>This example illustrates how DEFINE automatically supplies a phase that begins with the date <code>'31DEC1899'</code> when you define a multiple-period dimension of type WEEK but you do not specify a BEGINNING <span class="italic">phase</span> or an ENDING <span class="italic">phase</span> argument. Assume that you issue the following statements</p>
<pre>
DEFINE twoweek DIMENSION 2 WEEK
DESCRIBE TWOWEEK
</pre>
<p>When you issue a DESCRIBE statement for <code>twoweek</code>, the following output is produced.</p>
<pre>
DEFINE twoweek DIMENSION 2 WEEK ENDING '13Jan1900'
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect3" -->
<div id="OLADM788" class="refsect3"><a id="i1010931"></a>
<h3 class="refsect3">DEFINE DIMENSION (conjoint)</h3>
<p><a id="sthref3991"></a>The DEFINE DIMENSION (conjoint) command defines a conjoint dimension.</p>
<p>Conceptually, you can think of a conjoint dimension consisting of two structures:</p>
<ul>
<li>
<p>The dimension object itself. The values of the dimension are combinations of values of two or more other dimensions (that is, a conjoint tuples) that Oracle OLAP uses to determine the structure of any variables dimensioned by the conjoint dimension.</p>
</li>
<li>
<p>An index between the conjoint dimension values and its base dimension values.</p>
</li>
</ul>
<p>Composites are another object that you can use to dimension a variable using a list of dimension value combinations. See <a href="#CHDGECEA">"Differences Between Conjoint Dimensions and Composites"</a> for a discussion of the major differences between composites and conjoint dimensions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3992"></a>Syntax</p>
<p class="synopsis">DEFINE&nbsp;<span class="italic">name&nbsp;</span>DIMENSION&nbsp;&lt;<span class="italic">dims</span>.&nbsp;.&nbsp;.&gt;&nbsp;<span class="italic">index-algorithm</span> &nbsp;[AW&nbsp;<span class="italic">workspace</span>]&nbsp;[SESSION]</p>
<p>where <span class="syntaxinlineitalic">index-algorithm</span> specifies the algorithm that Oracle OLAP uses to create the index into the conjoint dimension. Valid values for <span class="syntaxinlineitalic">index-algorithm</span> are:</p>
<dl>
<dd><span class="syntaxinline">BTREE</span></dd>
<dd><span class="syntaxinline">NOHASH</span></dd>
<dd><span class="syntaxinline">HASH</span></dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3993"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span></dt>
<dd>
<p>The name of the conjoint dimension you are defining. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>DIMENSION</dt>
<dd>
<p>The object type when you are defining a conjoint dimension.</p>
</dd>
<dt><span class="italic">dims</span></dt>
<dd>
<p>One or more previously defined dimensions that are the base dimensions of the conjoint dimension. Specify the dimensions in fastest to slowest-varying order as discussed in <a href="#CHDIIBHF">"Effect of Dimension Order on Variable Storage and Statement Looping"</a>. You must enclose the dimension list in angle brackets.</p>
<p>Typically, a base dimension of a conjoint dimension is a simple dimension, but it can also be another conjoint dimension. However, when you do have a simple dimension for one value of <span class="italic">dims</span>, you cannot also specify for <span class="italic">dims</span> a conjoint or concat dimension that has same simple dimension as one of its bases.</p>
</dd>
<dt>BTREE</dt>
<dd>
<p>Specifies the creation of a b-tree index to relate conjoint values to base dimension values. Typically, you specify BTREE as the index algorithm for a conjoint dimension.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When you are unsure whether to specify BTREE or NOHASH, use NOHASH, because you can always use a CHGDFN statement to change a NOHASH conjoint into a BTREE conjoint, while you can use a CHGDFN statement to change a BTREE conjoint into a NOHASH conjoint only when the conjoint was originally defined as a NOHASH conjoint</div>
</dd>
<dt>NOHASH</dt>
<dd>
<p>Specifies that Oracle OLAP does <span class="italic">not</span> create an index for the conjoint dimension, but instead uses internal structures to relate conjoint values to base dimension values. Because no index is created for NOHASH, NOHASH decreases the number of structures associated with the conjoint dimension; and, in many cases, decreases the time it takes to load and access conjoint dimension values. However, NOHASH is used infrequently, as it is a complicated algorithm that, on occasion, can result in unpredictable performance.</p>
</dd>
<dt>HASH</dt>
<dd>
<p>(Default, but not recommended.) Specifies the creation of a has index to relate conjoint values to base dimension values.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
Even though HASH is the default, typically, you specify BTREE as the index algorithm for a conjoint dimension. When your conjoint dimension has more than 3 base dimensions, for best performance, use BTREE instead of HASH.</div>
</dd>
<dt>AW <span class="italic">workspace</span></dt>
<dd>
<p>The name of an attached analytic workspace in which you want to define the dimension. Any objects dimensioned by the dimension must be defined in the same workspace. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>SESSION</dt>
<dd>
<p>Specifies that the object exists only in the current session. When you close the current session, the object no longer exists.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3994"></a>Usage Notes</p>
<p class="subhead2"><a id="CHDGECEA"></a><a id="OLADM2301"></a>Differences Between Conjoint Dimensions and Composites</p>
<p>You can use either a composite or a conjoint dimension to dimension a variable with a list of dimension value combinations. Keep the following points in mind when deciding on which type of object to use:</p>
<ul>
<li>
<p>Object population maintenance&mdash;Conjoint dimensions offer the most control, while composites provide the greatest ease of use:</p>
<ul>
<li>
<p>Oracle OLAP determines the dimension value combinations stored in a composite. Oracle OLAP populates a composite automatically when a variable dimensioned by composite is populated.</p>
</li>
<li>
<p>You determine the dimension value combinations that are stored in a composite. You must explicitly populate and maintain a conjoint dimension using MAINTAIN statements the same way you populate and maintain other dimensions.</p>
</li>
</ul>
</li>
<li>
<p>Dimension operations &mdash;You can perform dimension operations on conjoint dimensions, but not composites; however, you can only perform dimension operations on the base dimensions of composites. For example, you can LIMIT conjoint dimensions, but you must limit the base dimensions of a composite to limit your view to a subset of composite values; and you can define relations using conjoint dimensions, but not composites.</p>
</li>
</ul>
<p>For more information on composites, see the <a href="#i78493">DEFINE COMPOSITE</a> command.</p>
<p class="subhead2"><a id="OLADM2302"></a>Relationship of Conjoint Dimensions to Base Dimensions</p>
<p>The values of the conjoint dimension are related to the base dimensions. You can specify data in a variable dimensioned by the conjoint dimension using the conjoint value combinations, the individual values of the base dimensions, or other dimensions related to either of the base dimensions of the conjoint dimension.</p>
<p class="subhead2"><a id="OLADM2303"></a>Defining a Subset of a Dimension's Values</p>
<p>You can have a conjoint dimension with only one base dimension, which enables you to create a subset of that dimension's values. You must still enclose that one base dimension within angle brackets.</p>
<p class="subhead2"><a id="i1016589"></a><a id="OLADM2304"></a>Using Conjoint Dimension Values in Expressions</p>
<p>To refer to the value of a conjoint dimension in an expression, specify the value following these guidelines:</p>
<ul>
<li>
<p>Enclose the entire dimension value specification in angle brackets and then enclose this entire specification in single quotes; do not enclose the individual values in single quotes.</p>
</li>
<li>
<p>Use the exact upper- and lowercase spellings for the base dimension values.</p>
</li>
<li>
<p>When the specification includes a text value with an embedded blank, you must separate the dimension values with commas.</p>
</li>
</ul>
<p>For example, when <code>item.org</code> is a conjoint dimension with base dimensions <code>item</code> and <code>org</code>, use the following format to refer to values of <code>item.org</code>.</p>
<pre>
'&lt;Expenses, Direct Sales&gt;'
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3995"></a>Examples</p>
<div id="OLADM2305" class="example">
<p class="titleinexample"><a id="sthref3996"></a>Example 9-84 Defining a Conjoint Dimension</p>
<p>Assume that you have defined and populated the simple dimensions <code>city</code>, <code>state</code>, and <code>region</code> and that they have the following values.</p>
<pre>
CITY             STATE           REGION
---------       ----------       ------
Princeton       New Jersey       East
Newark          New Jersey       Central
Patterson       New York
New York        Illinois
Chicago         Indiana
</pre>
<p>To define a conjoint dimension named <code>cityandstate</code> and add values to it use the following OLAP DML statements.</p>
<pre>
DEFINE cityandstate DIMENSION &lt;city state&gt;
MAINTAIN cityandstate add &lt;'Princeton' 'New Jersey'&gt;
MAINTAIN cityandstate add &lt;'Newark' 'New Jersey'&gt;
MAINTAIN cityandstate add &lt;'Patterson' 'New Jersey'&gt;
MAINTAIN cityandstate add &lt;'New York' 'New York'&gt;
MAINTAIN cityandstate add &lt;'Chicago' 'Illinois'&gt;
MAINTAIN cityandstate add &lt;'Princeton' 'Indiana'&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect3" -->
<div id="OLADM789" class="refsect3"><a id="i1010642"></a>
<h3 class="refsect3">DEFINE DIMENSION CONCAT</h3>
<p><a id="sthref3997"></a>The DEFINE DIMENSION CONCAT commands defines a concat dimension. A concat dimension is a dimension that groups a set of base dimensions with duplicate values or different data types into one dimension.</p>
<p>When there are duplicate data values, you create a non-unique concat dimensions. For example, you would create a nonunique dimension for a geography hierarchy when "New York" is both the value at the city level and at the state level. When all of the data values in all of the base dimensions are unique, you can create a unique concat dimension.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
The way that you specify the values of concat dimension varies depending on whether the concat dimension is a unique or nonunique concat dimension. See <a href="dml_expression.htm#BABIAGDD">"Specifying a Value of a CONCAT Dimension"</a> for more information.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3998"></a>Syntax</p>
<p class="synopsis">DEFINE <span class="italic">name</span> DIMENSION CONCAT(<span class="italic">basedimlist</span>.&nbsp;.&nbsp;.)[UNIQUE] [TEMP] [AW <span class="italic">workspace</span>]&nbsp;[SESSION]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3999"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span></dt>
<dd>
<p>The name of the object you are defining. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>DIMENSION CONCAT</dt>
<dd>
<p>The object type when you are defining a concat dimension.</p>
</dd>
<dt><span class="italic">basedimlist</span></dt>
<dd>
<p>One or more previously-defined dimensions that are the base dimensions of the concat dimension. Specify the dimensions in fastest to slowest-varying order as discussed in <a href="#CHDIIBHF">"Effect of Dimension Order on Variable Storage and Statement Looping"</a>. You must enclose the dimension list in parenthesis.</p>
<p>The types of dimensions that can be base dimensions varies depending on whether you are defining a unique or nonunique concat dimension:</p>
<ul>
<li>
<p>When defining a non-unique concat dimension, a base dimension can be a simple dimension of any data type, a conjoint dimension, or another concat dimension.</p>
</li>
<li>
<p>When defining a unique concat dimension, a base dimension can be a simple dimension of type TEXT or ID, or another unique concat dimension if the data values of all of the base dimensions are unique and not duplicated in any of the base dimensions.</p>
</li>
</ul>
<p>A composite cannot be the base dimension of a concat dimension.</p>
<p>Simple dimensions and conjoint dimensions are the bottom-level components of a concat dimension. When you specify a concat dimension as a base dimension when defining a concat, then the base dimensions of that inner concat are <span class="italic">component</span> dimensions of the outer concat.</p>
<p>The same dimension cannot appear more than once in the component dimensions of a concat dimension. However, in a concat, a conjoint dimension is an indivisible unit and Oracle OLAP does not consider the base dimensions of a conjoint in the definition of the concat. Therefore, a simple dimension can be a base dimension of a conjoint and that conjoint and the same simple dimension can be base dimensions (or components) of a concat dimension.</p>
<p>For example, the following definitions are permissible.</p>
<pre>
DEFINE conjointdim.a DIMENSION &lt;simpledim.b, simpledim.c&gt;
DEFINE conjointdim.b DIMENSION &lt;simpledim.a, simpledim.b&gt;
DEFINE conjointdim.c DIMENSION &lt;simpledim.a, conjointdim.a&gt;
DEFINE concatdim.a DIMENSION CONCAT (simpledim.a, conjointdim.a)
DEFINE concatdim.b DIMENSION CONCAT (simpledim.a, conjointdim.b)
DEFINE concatdim.c DIMENSION CONCAT (simpledim.b, conjointdim.b)
DEFINE concatdim.d DIMENSION CONCAT (simpledim.a, concatdim.c)
</pre>
<pre>
</pre>
<p>In the definition of <code>concatdim.a</code>, the base dimensions are <code>simpledim.a</code> and <code>conjointdim.a</code>. In the definition of <code>concatdim.d</code>, the base dimensions are <code>simpledim.a</code> and <code>concatdim.c</code>. The component dimensions of <code>concatdim.d</code> are <code>simpledim.a</code>, <code>simpledim.b</code>, and <code>conjointdim.b</code>. <code>simpledim.a</code> and <code>simpledim.b</code> appear only once as component dimensions even though they are the base dimensions of <code>conjointdim.b</code> because the base dimensions of a conjoint are not component dimensions of a concat.</p>
<p>However, the following definition is <span class="italic">not</span> permitted because the same simple dimension is a base dimension of <code>concatdim.e</code> and a component of <code>concatdim.e</code> because it is a base dimension of <code>concatdim.b</code>.</p>
<pre>
DEFINE concatdim.e DIMENSION CONCAT (simpledim.a, concatdim.b)
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The simple dimensions in the <span class="italic">basedimlist</span> argument, and the simple dimensions that are base dimensions of any conjoint dimensions or concat dimensions in <span class="italic">basedimlist</span>, can<span class="italic">not</span> have an INTEGER data type.</div>
</dd>
<dt>UNIQUE</dt>
<dd>
<p>Specifies that the text values of the base dimensions are unique. When you specify this keyword, the dimensions listed in <span class="italic">basedimlist</span> must be either simple text or ID dimensions or unique concat dimensions.</p>
</dd>
<dt>TEMP</dt>
<dd>
<p>Indicates that the dimension's values are only temporary and only for the current session. The dimension has a definition in the current workspace and can contain values during the current session. However, when you update and commit, only the definition of the dimension is saved. When you leave end your session or switch to another workspace, the data values are discarded. Each time you start the workspace, the values of a temporary dimension are <code>NA</code>.</p>
</dd>
<dt>AW <span class="italic">workspace</span></dt>
<dd>
<p>The name of an attached analytic workspace in which you want to define the dimension. Any objects dimensioned by the dimension must be defined in the same workspace. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>SESSION</dt>
<dd>
<p>Specifies that the object exists only in the current session. When you close the current session, the object no longer exists.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4000"></a>Examples</p>
<div id="OLADM2306" class="example">
<p class="titleinexample"><a id="sthref4001"></a>Example 9-85 Defining a CONCAT Dimension</p>
<p>Assume that you have defined and populated the simple dimensions <code>city</code>, <code>state</code>, and <code>region</code> and that they have the following values.</p>
<pre>
CITY             STATE           REGION
---------       ----------       ------
Princeton       New Jersey       East
Newark          New Jersey       Central
Patterson       New York
New York        Illinois
Chicago         Indiana
</pre>
<p>You define a concat dimension based on these dimensions using the following OLAP DML statement.</p>
<pre>
DEFINE geog DIMENSION CONCAT(region cityandstate)
</pre>
<p>The values of <code>geog</code> are the following.</p>
<pre>
&lt;REGION: East&gt;
&lt;REGION: Central&gt;
&lt;CITYANDSTATE: &lt;Princeton New Jersey&gt;&gt;
&lt;CITYANDSTATE: &lt;Newark New Jersey&gt;&gt;
&lt;CITYANDSTATE: &lt;Patterson New Jersey&gt;&gt;
&lt;CITYANDSTATE: &lt;New York New York&gt;&gt;
&lt;CITYANDSTATE: &lt;Chicago Illinois&gt;&gt;
&lt;CITYANDSTATE: &lt;Princeton Indiana&gt;&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect3" -->
<div id="OLADM790" class="refsect3"><a id="i1010646"></a>
<h3 class="refsect3">DEFINE DIMENSION ALIASOF</h3>
<p><a id="sthref4002"></a><a id="ABC1485326"></a>The DEFINE DIMENSION ALIASOF command <a id="sthref4003"></a><a id="sthref4004"></a>defines a dimension alias for a simple dimension. An alias dimension has the same type and values as its base dimension. Typically, you define an alias dimension when you want to dimension a variable by the same dimension twice.</p>
<p>Additionally, You can use a LIMIT statement to limit alias dimensions and define variables and relations using an alias dimension. However, you cannot maintain an alias dimension directly; instead you maintain its base dimension using MAINTAIN.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4005"></a>Syntax</p>
<p class="synopsis">DEFINE <span class="italic">name</span> DIMENSION ALIASOF <span class="italic">dimension</span> [TEMP] [AW <span class="italic">workspace</span>]&nbsp;[SESSION]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4006"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span></dt>
<dd>
<p>The name of the object you are defining. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>DIMENSION ALIASOF</dt>
<dd>
<p>The object type when you are defining a dimension. Indicates that the dimension being defined is an alias for another dimension.</p>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The name of a simple dimension for which you want to define an alias. This dimension cannot be a concat or conjoint dimension, composite, or surrogate.</p>
</dd>
<dt>TEMP</dt>
<dd>
<p>Indicates that the dimension's values are only temporary and only for the current session. The dimension has a definition in the current workspace and can contain values during the current session. However, when you update and commit, only the definition of the dimension is saved. When you leave end your session or switch to another workspace, the data values are discarded. Each time you start the workspace, the values of a temporary dimension are <code>NA</code>.</p>
</dd>
<dt>AW workspace</dt>
<dd>
<p>The name of an attached analytic workspace in which you want to define the dimension. Any objects dimensioned by the dimension must be defined in the same workspace. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>SESSION</dt>
<dd>
<p>Specifies that the object exists only in the current session. When you close the current session, the object no longer exists.<a id="sthref4007"></a></p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4008"></a>Examples</p>
<div id="OLADM2307" class="example">
<p class="titleinexample"><a id="sthref4009"></a>Example 9-86 Defining an Alias Dimension</p>
<p>Assume that your department has multiple projects that employees participate in and that an employee may be a leader of one project and a participant in another. Assume also that you want to track the hours that each employee participates in a project as either a leader or a participant. To keep track of this information, you can design a variable that is dimensioned by the time you want to track by (in this example, <code>year</code>), <code>project</code>, and two dimensions for employee&mdash;one dimension named <code>employee</code> for employee as participant and another dimension named <code>leader</code> for employee as leader. The following definitions support this structure.</p>
<pre>
DEFINE year DIMENSION TEXT
DEFINE project DIMENSION TEXT
DEFINE employee DIMENSION TEXT
DEFINE leader DIMENSION ALIASOF employee
DEFINE hours VARIABLE INTEGER &lt;year project employee leader&gt;
</pre>
<p><a id="sthref4010"></a><a id="sthref4011"></a><a id="sthref4012"></a><a id="sthref4013"></a>The following statements populate all of the dimensions.</p>
<pre>
MAINTAIN year ADD '2001' '2002' '2003'
MAINTAIN project ADD 'projA' 'projB'
MAINTAIN employee add 'Adams' 'Baker' 'Charles'
</pre>
<p>Note that you do not have to explicitly populate the alias dimension (that is, <code>leader</code>). When you populate the <code>employee</code> dimension, Oracle OLAP also populates its alias dimension <code>leader</code>.</p>
<pre>
EMPLOYEE
--------------
Adams
Baker
Charles
 
LEADER
--------------
Adams
Baker
Charles
</pre>
<p><a id="sthref4014"></a><a id="sthref4015"></a><a id="sthref4016"></a>You can limit a dimension without limiting its alias; or limit an alias without limiting the dimension for which it is an alias. For example, when you issue the following statements to limit <code>employee</code> to Adams for <code>project</code> ProjA in <code>year</code> 2001, a report displays all of the leaders of the projects that Adams participates in.</p>
<pre>
LIMIT year TO '2001'
LIMIT employee TO 'Adams'
LIMIT project TO 'projA'
REPORT DOWN leader ACROSS employee: hours
 
PROJECT: projA
YEAR: 2001
               --HOURS---
               -EMPLOYEE-
LEADER           Adams
-------------- ----------
Adams                   1
Baker                   2
Charles                 1
</pre>
<p>On the other hand, when you limit <code>leader</code> to Adams for <code>project</code> ProjA in <code>year</code> 2001, a report displays all of the employees of the projects that Adams leads.</p>
<pre>
LIMIT employee TO ALL
LIMIT leader TO 'Adams'
LIMIT project TO 'projA'
REPORT DOWN leader ACROSS employee: hours
 
PROJECT: projA
YEAR: 2001
               -------------HOURS--------------
               ------------EMPLOYEE------------
LEADER           Adams      Baker     Charles
-------------- ---------- ---------- ----------
Adams                   1          3          3
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="OLADM791" class="refsect2"><a id="i1010609"></a>
<hr />
<h2 class="refsect2">DEFINE FORMULA</h2>
<p><a id="sthref4017"></a><a id="sthref4018"></a><a id="sthref4019"></a><a id="sthref4020"></a><a id="sthref4021"></a>The DEFINE command with the FORMULA keyword adds a new formula object to an analytic workspace. You define a formula to save an expression. A formula can take the place of an expression you use repeatedly. The name of the formula takes the place of the text of the expression. Oracle OLAP does not store the data for a formula in a variable; instead it is calculated at run time each time it is requested.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a href="dml_objects.htm#i1019576">"OLAP DML Formulas"</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4022"></a>Syntax</p>
<p class="synopsis">DEFINE&nbsp;<span class="italic">name&nbsp;</span>FORMULA&nbsp;{<span class="italic">expression</span> | [ <span class="italic">datatype</span>&nbsp;][&lt;<span class="italic">dimensions...</span>&gt;]}&nbsp;[AW&nbsp;<span class="italic">workspace</span>]&nbsp;[SESSION]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4023"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span></dt>
<dd>
<p>The name of the object you are defining. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>FORMULA</dt>
<dd>
<p>The object type when you are defining a formula.</p>
</dd>
<dt><span class="italic">expression</span></dt>
<dd>
<p>The calculation to be performed to produce values when you use the formula. It can be any valid expression, including a constant or the name of a variable as described in <a href="dml_expression.htm#g1031411">Chapter 2, "OLAP DML Expressions"</a>.</p>
<p>You can specify an expression for a formula when you define it or after you define using an EQ statement. When you define a formula without specify an expression, a formula returns <code>NA</code> with the specified data type.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle OLAP does not automatically convert text in a formula to uppercase.</div>
</dd>
<dt><span class="italic">datatype</span></dt>
<dd>
<p>The intended data type for the formula when you do not specify a value for <span class="italic">expression</span>. You can use any of the data types that apply to variables. If you do not specify a value, the data type is determined at run time.</p>
<p>When you include an <span class="italic">expression</span> in the formula definition, DEFINE automatically determines the data type for a formula defined using <span class="italic">expression</span>. Later, when you add the expression using an EQ statement, its data type should match the type you specify now. When it does not, DEFINE converts the output to the specified type.</p>
</dd>
<dt><span class="italic">dimensions</span></dt>
<dd>
<p>The dimensions of the formula. Enclose the list in angle brackets. The <span class="syntaxinlineitalic">dimensions</span> argument is optional. When the formula is a single-cell value, you do not specify any dimensions. Also, when you include an expression in the definition, you do not specify a value. DEFINE automatically determines the dimensions.</p>
<p>However, when you do <span class="italic">not</span> include an expression in the definition, you must specify the dimensions. When you add the expression later using an EQ statement, the expression must have the same dimensions as the formula definition. When it does not, DEFINE forces the output to have the specified dimensions.</p>
<div class="infobox-note">
<p class="notep1">Restriction:</p>
You cannot define a formula that is dimensioned by a composite.</div>
</dd>
<dt>AW <span class="italic">workspace</span></dt>
<dd>
<p>The name of an attached workspace in which you want to define the formula. When the formula is dimensioned, it must be defined in the same workspace as its dimensions. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>SESSION</dt>
<dd>
<p>Specifies that the object exists only in the current session. When you close the current session, the object no longer exists.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4024"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2308"></a>Effect of Changing the Characteristics of Objects Used by a Formula</p>
<p>When you change the name, data type, or dimensions of any of the objects used by a formula, the formula is <span class="italic">not</span> automatically updated. The formula causes an error when objects it refers to have been deleted or are now the wrong data type.</p>
<p class="subhead2"><a id="OLADM2309"></a>Storing Complex Expressions and Calculations</p>
<p>To define a very complex calculation, you can define a program that uses a RETURN statement to return a value. You can then use the program as a function wherever you would use an expression or formula.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4025"></a>Examples</p>
<div id="OLADM2310" class="example">
<p class="titleinexample"><a id="sthref4026"></a>Example 9-87 Defining a Formula</p>
<p>This example adds a formula named <code>sales.diff</code> to an analytic workspace. This formula calculates the percent difference between total sales for the current year and last year.</p>
<p>The statements</p>
<pre>
DEFINE sales.diff FORMULA LAGPCT(TOTAL(actual year) 1 year)
DESCRIBE sales.diff
</pre>
<p>produce the following definition.</p>
<pre>
DEFINE sales.diff FORMULA DECIMAL &lt;year&gt;
EQ lagpct(TOTAL(actual year) 1 year) 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="OLADM792" class="refsect2"><a id="i78508"></a>
<hr />
<h2 class="refsect2">DEFINE MODEL</h2>
<p><a id="sthref4027"></a><a id="sthref4028"></a><a id="sthref4029"></a>The DEFINE command with the MODEL keyword adds a new model object to an analytic workspace. A model is a set of interrelated equations. The calculations in an equation can be based either on variables or on dimension values. You can assign the results of the calculations directly to a variable or you can specify a dimension value for which data is being calculated. For example, in a financial application, all the equations might be based on the values of a line item dimension, and data would be calculated for line items such as total expenses and net income.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Defining a model merely creates a model object in the analytic workspace. You must also code a specification for the model, as described in MODEL.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4030"></a>Syntax</p>
<p class="synopsis">DEFINE&nbsp;<span class="italic">name&nbsp;</span>MODEL&nbsp;[AW&nbsp;<span class="italic">workspace</span>]&nbsp;[SESSION]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4031"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span></dt>
<dd>
<p>The name of the object you are defining. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>MODEL</dt>
<dd>
<p>The object type when you are defining a model.</p>
</dd>
<dt>AW <span class="italic">workspace</span></dt>
<dd>
<p>The name of an attached workspace in which you want to define the object. For more information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>SESSION</dt>
<dd>
<p>Specifies that the object exists only in the current session. When you close the current session, the object no longer exists.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4032"></a>Examples</p>
<div id="OLADM2311" class="example">
<p class="titleinexample"><a id="sthref4033"></a>Example 9-88 Defining a Simple Model</p>
<p>This example shows a simple model named <code>income.calc</code> that calculates the line items in an income statement. The model equations are based on the <code>line</code> dimension in the <code>demo</code> workspace. First, define the model and give it an LD.</p>
<pre>
DEFINE income.calc MODEL
LD Model for calculating Income Statement items
</pre>
<p>Then use a MODEL statement to enter the specification for the model. For this example, you can enter model lines such as the ones in the following model description.</p>
<pre>
DEFINE income.calc MODEL
LD Model for calculating Income Statement items
MODEL
dimension line
net.income = opr.income - taxes
opr.income = gross.margin - (marketing+selling+r.d)
gross.margin = revenue - cogs
END
</pre>
<p>To solve the model for the <code>actual</code> variable, enter data in <code>actual</code> for the input line items (<code>Revenue</code>, <code>Cogs</code>, <code>Marketing</code>, <code>Selling</code>, <code>R.D</code>, and <code>Taxes</code>). Then execute the following statement.</p>
<pre>
income.calc actual 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="OLADM793" class="refsect2"><a id="i1007745"></a>
<hr />
<h2 class="refsect2">DEFINE PARTITION TEMPLATE</h2>
<p><a id="sthref4034"></a><a id="sthref4035"></a><a id="sthref4036"></a><a id="sthref4037"></a><a id="sthref4038"></a><a id="sthref4039"></a><a id="sthref4040"></a><a id="sthref4041"></a><a id="sthref4042"></a>The DEFINE command with the <a id="sthref4043"></a><a id="sthref4044"></a><a id="sthref4045"></a><a id="sthref4046"></a><a id="sthref4047"></a><a id="sthref4048"></a>PARTITION TEMPLATE keywords adds a new partition template object to an analytic workspace. A partition template is a specification for the partitions of a partitioned variable. A partitioned variable is stored as multiple rows in the relational table of LOBs that is the analytic workspace&mdash;each partition is a row in the table. You define both partitioned and unpartitioned variables using DEFINE VARIABLE statements. Before you can define a partitioned variable you must first define a partition template object.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4049"></a>Syntax</p>
<p class="synopsis">DEFINE&nbsp;<span class="italic">name&nbsp;</span>PARTITION TEMPLATE &lt;<span class="italic">dimlist</span>&gt; &nbsp;PARTITION BY</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{RANGE|LIST} (<span class="italic">dims_partitioned_by</span>) &nbsp;([<span class="italic">partition_definition_statement...</span>]) [AW <span class="italic">workspace</span>]</p>
<p>where <span class="syntaxinlineitalic">partition_definition_statement</span> defines a partition. The syntax varies depending on whether you specify <span class="syntaxinline">RANGE</span> or <span class="syntaxinline">LIST</span>:</p>
<ul>
<li>
<p>For <span class="syntaxinline">RANGE</span>:</p>
<p class="synopsis">PARTITION <span class="italic">partition-name</span> VALUES LESS THAN <span class="italic">const-exp</span> &lt;<span class="italic">partition-dimlist</span>&gt;</p>
</li>
<li>
<p>For <span class="syntaxinline">LIST</span>:</p>
<p class="synopsis">PARTITION <span class="italic">partition-name</span> VALUES ([<span class="italic">valuelist</span>)] &lt;<span class="italic">partition-dimlist</span>&gt;</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4050"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span></dt>
<dd>
<p>The name of the object you are defining. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt><span class="italic">dimlist</span></dt>
<dd>
<p>A list of all of the logical dimensions for the variable that you are partitioning. You must enclose the names of the dimensions in a single set of angle brackets (<code>&lt;</code> <code>&gt;</code>). You must define a dimension before you can include it in the definition of a partition template.</p>
</dd>
<dt><span class="italic">dims_partitioned_by</span></dt>
<dd>
<p>The subset of dimensions specified by <span class="italic">dimlist</span> that actually specify the partitions of the variable. For range and list partitioning (that is, when you specify either the RANGE or LIST keywords), you can specify only one dimension for <span class="italic">dims_partitioned_by</span>. You cannot partition a variable along an <code>INTEGER</code> dimension.</p>
</dd>
<dt>PARTITION <span class="italic">partition-name</span></dt>
<dd>
<p>The name of the partition.</p>
</dd>
<dt>VALUES LESS THAN</dt>
<dd>
<p>Indicates that you are specifying a RANGE partition by comparing values.</p>
</dd>
<dt><span class="italic">constant-exp</span></dt>
<dd>
<p>A constant expression that has the same data type as the data type of the dimension specified for <span class="italic">dims_partitioned_by</span>.</p>
</dd>
<dt><span class="italic">partition-dimlist</span></dt>
<dd>
<p>A list of all of the dimensions of the partition template object (although the dimensions may be members of a composite). You must enclose the names of the dimensions in a single set of angle brackets (<code>&lt;</code> <code>&gt;</code>). Use this argument to specify the composite (if any) used to dimension the partitions that correspond to <span class="italic">partition-name</span>. When you do not specify a value then the partition is dimensioned densely by all of the dimensions of the partition template object.</p>
</dd>
<dt>VALUES</dt>
<dd>
<p>Indicates that you are specify a LIST partition by specifying values.</p>
</dd>
<dt><span class="italic">valuelist</span></dt>
<dd>
<p>A list of dimension values, separated by commas. You must surround text values with single quotes (for example, <code>'mytext'</code>). Specify values of conjoints by specify the values of the base dimensions, separated by a comma, in a single set of angle brackets (for example, <code>&lt;'Value1', 'Value2'&gt;</code>). Specify values of nonunique concat dimensions by specify the values of the base dimensions, separated by a colon, in a single set of angle brackets (for example, <code>&lt;'Value1': 'Value2'&gt;</code>).</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
I f you want to use a valueset object to specify values, do not specify values for <span class="italic">valuelist</span>. Instead, omit <span class="italic">valuelist</span> from the partition template definition and use a <a href="dml_commands_2016.htm#CIHCFGGE">MAINTAIN ADD TO PARTITION</a> statement to specify values for the partition.</div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4051"></a>Examples</p>
<p>See <a href="#CHDIBFDG">Example 9-101, "Defining a Variable with Partitions"</a>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="OLADM794" class="refsect2"><a id="i78513"></a>
<hr />
<h2 class="refsect2">DEFINE PROGRAM</h2>
<p><a id="sthref4052"></a><a id="sthref4053"></a><a id="sthref4054"></a>The DEFINE command with the PROGRAM keyword adds a new OLAP DML program object to an analytic workspace. An OLAP DML program is a collection of OLAP DML statements that helps you accomplish some workspace management or analysis task. Defining a program merely creates a program object in the analytic workspace. You must also code the actual lines of the program.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a href="dml_program.htm#CFHFJIHH">"Creating OLAP DML Programs"</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4055"></a>Syntax</p>
<p class="synopsis">DEFINE&nbsp;<span class="italic">name&nbsp;</span>PROGRAM&nbsp;[<span class="italic">datatype</span>|<span class="italic">dimension</span>]&nbsp;[AW&nbsp;<span class="italic">workspace</span>]&nbsp;[SESSION]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4056"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span></dt>
<dd>
<p>The name of the object you are defining. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>PROGRAM</dt>
<dd>
<p>The object type when you are defining a program.</p>
</dd>
<dt><span class="italic">datatype</span></dt>
<dd>
<p>The data type of the value to be returned by the program when it is called as a function. You can use any of the data types that apply to variables.</p>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The name of a dimension, whose value the program returns when it is called as a function. The return value is a single value of the dimension, not a position (<code>INTEGER</code>). The dimension must be defined in the same workspace as the program.</p>
</dd>
<dt>AW <span class="italic">workspace</span></dt>
<dd>
<p>The name of an attached workspace in which you want to define the program. When the program returns a dimension, the program must be defined in the same workspace as the dimension. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>SESSION</dt>
<dd>
<p>Specifies that the object exists only in the current session. When you close the current session, the object no longer exists.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4057"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2312"></a>Returning Values</p>
<p>Use a RETURN statement in a program when you want it to return a value. The argument to the RETURN statement is an expression that specifies the value to return. When the expression does not match the declared data type or dimension, the value is converted (if possible) to the declared data type or dimension value.</p>
<p>When you do not specify a data type or dimension in the definition of a program, its return value is treated as worksheet data and Oracle OLAP converts any return value to the data type required by the calling context which may lead to unexpected results.</p>
<p>For a program to return a value, you must call the program as a function. That is, you must use it as an expression in a statement. In the following example, the program <code>isrecent</code> is being treated as a function. It is an argument to the REPORT command.</p>
<pre>
REPORT isrecent(actual)
</pre>
<p>When the program returns values of a dimension, the program is in the output of the LISTBY function, and OBJ(ISBY) is <code>TRUE</code> for the dimension.</p>
<p>See the entries for the <a href="dml_commands_1014.htm#i79082">ARGUMENT</a>, <a href="dml_commands_1019.htm#i79175">CALL</a>, and <a href="dml_commands_2047.htm#i79191">RETURN</a> commands for more information about programs as user-defined functions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4058"></a>Examples</p>
<div id="OLADM2313" class="example">
<p class="titleinexample"><a id="sthref4059"></a>Example 9-89 Basing Program Flow on Test Results</p>
<p>The <code>saleseval</code> program tests whether total sales for a month exceeds total planned sales for the month. The program executes different statements based on the results of the test.</p>
<pre>
DEFINE SALESEVAL PROGRAM
PROGRAM
ARGUMENT onemonth MONTH
VARIABLE excess DECIMAL
ALLSTAT
LIMIT month TO onemonth
IF TOTAL(sales, month) GT TOTAL(sales.plan, month)
   THEN DO
     excess = (TOTAL(sales, month) - 
       - TOTAL(sales.plan, month)) -
       / TOTAL(sales.plan, month) * 100
     SHOW JOINCHARS('Sales exceeded plan by ' excess '%.') 
     DOEND
ELSE SHOW JOINCHARS('We\'re not meeting plan. ' -
   'Let\'s get working!')
REPORT DOWN product W 10 ACROSS district: sales - sales.plan
END
</pre>
<p>When total sales for the month exceeds total planned sales for the month, the THEN statement lines are executed. The program calculates the percentage by which actual sales exceeds planned sales and places the result in a numeric variable called <code>excess</code>. The program then sends the results to the current outfile. The JOINCHARS function is used to combine the calculated expression <code>excess</code> with the text expression "Sales exceeded plan by" in the output.</p>
<p>When total sales does not exceed planned sales, the ELSE statement line is executed and a different message is produced.</p>
<p>After the THEN or ELSE statement lines are executed, control flows to the next line in the program, and a report of sales in excess of plan is produced.</p>
</div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="OLADM795" class="refsect2"><a id="i78518"></a>
<hr />
<h2 class="refsect2">DEFINE RELATION</h2>
<p><a id="sthref4060"></a><a id="sthref4061"></a><a id="sthref4062"></a><a id="sthref4063"></a><a id="sthref4064"></a>The DEFINE command with the RELATION keyword adds a new relation object to an analytic workspace. A relation describes a correspondence between the values of two or more dimensions. It can have dimensions, just like a variable, but the values of the relation must be values from the related dimension.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Defining a relation merely adds the definition of the relation to the analytic workspace; it does not populate the relation. To populate relations using the OLAP DML, you can issue OLAP DML SQL, FILEREAD, SET, or SET1 statements.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4065"></a>Syntax</p>
<p class="synopsis">DEFINE&nbsp;<span class="italic">name&nbsp;</span>RELATION&nbsp;<span class="italic">related-dim&nbsp;</span>[&lt;<span class="italic">dimensions</span>...&gt;]&nbsp;[TEMP]&nbsp;[AW&nbsp;<span class="italic">workspace</span>]&nbsp;[SESSION]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4066"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span></dt>
<dd>
<p>The name of the object you are defining. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>RELATION</dt>
<dd>
<p>The object type when you are defining a relation.</p>
</dd>
<dt><span class="italic">related-dim</span></dt>
<dd>
<p>Specifies the dimension to which one or more <span class="italic">dimensions</span> are related. A relation is normally used to store information about the relationship between two dimensions; for example, the cities that belong in each region.</p>
<p>In the definition, the dimension having fewer values is normally specified as the related dimension (for example, regions). The dimension having more values is normally specified as a dimension of the relation (for example, cities).</p>
</dd>
<dt>&lt;<span class="italic">dimensions</span>...&gt;</dt>
<dd>
<p>The names of the dimensions of the relation. You must enclose the names of the dimensions in a single set of angle brackets (<code>&lt; &gt;</code>). You must define a dimension before including it in the definition of a relation. Do not include composites in the dimension list.</p>
<div class="infobox-note">
<p class="notep1">Restriction:</p>
Oracle OLAP does not support the use of composites as dimensions for relations. Do not attempt to define them.</div>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When defining two relations between the same dimensions, use the RELATION command to identify which relation is the default relation.</div>
</dd>
<dt>TEMP</dt>
<dd>
<p>Indicates that the values of the relation are only temporary. The relation is defined in the current workspace and can contain values during the current session. However, when you update and commit the workspace, only the definition of the relation is saved. When you end the session or switch to another workspace, the data values are discarded. Each time you start the workspace, the values of a temporary relation are <code>NA</code>.</p>
</dd>
<dt>AW <span class="italic">workspace</span></dt>
<dd>
<p>The name of an attached workspace in which you want to define the relation. The relation must be defined in the same workspace as its dimensions. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>SESSION</dt>
<dd>
<p>Specifies that the object exists only in the current session. When the session ends, the object no longer exists. The behavior specified by the SESSION keyword differs from the behavior specified by the TEMP keyword which is that the values are temporary, but the object definition remains in the workspace in which you create it.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4067"></a>Examples</p>
<div id="OLADM2314" class="example">
<p class="titleinexample"><a id="sthref4068"></a>Example 9-90 Creating, Populating, and Totaling by a Relation</p>
<p>The following example defines a relation between <code>division</code> and <code>product</code>, stores the values of the relation, and then totals <code>units</code> by <code>division</code>, even though <code>units</code> is dimensioned by <code>product</code>. The following statement defines the <code>div.prod</code> relation.</p>
<pre>
DEFINE div.prod RELATION division &lt;product&gt;
</pre>
<p>The following statements store values of <code>division</code> in <code>div.prod</code>.</p>
<pre>
LIMIT product TO 'Tents' 'Canoes'
div.prod = 'Camping'
LIMIT product TO 'Racquets'
div.prod = 'Sporting'
LIMIT product TO 'Sportswear' 'Footwear'
div.prod = 'Clothing'
</pre>
<p>You can use a REPORT statement to see the values stored in <code>div.prod</code>.</p>
<pre>
report div.prod
</pre>
<p>This statement produces the following output.</p>
<pre>
PRODUCT        DIV.PROD
------------- ----------
Tents         Camping
Canoes        Camping
Racquets      Sporting
Sportswear    Clothing
Footwear      Clothing
</pre>
<p>The <code>div.prod</code> relation lets you look at division totals in a report, even though the data is dimensioned by <code>product</code>.</p>
<pre>
REPORT TOTAL(units division) 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="OLADM796" class="refsect2"><a id="i78523"></a>
<hr />
<h2 class="refsect2">DEFINE SURROGATE</h2>
<p><a id="sthref4069"></a><a id="sthref4070"></a><a id="sthref4071"></a><a id="sthref4072"></a><a id="sthref4073"></a><a id="sthref4074"></a><a id="sthref4075"></a><a id="sthref4076"></a>The DEFINE command with the SURROGATE keyword adds a new dimension surrogate object to an analytic workspace. A surrogate provides an alternative set of values for a dimension. You can use a surrogate rather than a dimension in a model, in a LIMIT command, in a qualified data reference, or in data loading with statements such as FILEREAD, FILEVIEW, SQL FETCH, and SQL IMPORT.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Defining a surrogate merely adds the definition of the dimension surrogate to the analytic workspace; it does not populate the surrogate. To populate surrogates using the OLAP DML, you can issue OLAP DML SQL, FILEREAD, SET, or SET1 statements.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4077"></a>Syntax</p>
<p class="synopsis">DEFINE&nbsp;<span class="italic">name&nbsp;</span>SURROGATE&nbsp;<span class="italic">targetname&nbsp;type&nbsp;</span>[AW&nbsp;<span class="italic">workspace</span>]&nbsp;[SESSION]</p>
<p>where <span class="syntaxinlineitalic">type</span> has the following syntax:</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[TEXT|NTEXT] [WIDTH <span class="italic">n</span>]|ID|INTEGER|NUMBER (<span class="italic">precision</span>[, <span class="italic">scale</span>] | <span class="syntaxinlineitalic">datatime-datatype</span>)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4078"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span></dt>
<dd>
<p>The name of the object you are defining. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>SURROGATE</dt>
<dd>
<p>The object type when you are defining a dimension surrogate.</p>
</dd>
<dt><span class="italic">targetname</span></dt>
<dd>
<p>The name of the dimension for which you are creating a surrogate. See <a href="#CIHGFFCJ">"Restrictions on the Use of Surrogates"</a> for points to keep in mind when determining the target.</p>
</dd>
<dt>TEXT</dt>
<dt>NTEXT</dt>
<dt>ID</dt>
<dd>
<p>The data type for a dimension surrogate with text values. When all the values of a dimension surrogate are eight single-byte characters or less, give it a data type of ID. When one or more dimension values has more than eight single-byte characters, you must give it a data type of TEXT or NTEXT. For greater efficiency and ease of use, give dimensions a data type of ID whenever possible.</p>
</dd>
<dt>WIDTH <span class="italic">n</span></dt>
<dd>
<p>For TEXT or NTEXT dimension surrogate, the width, in bytes, of the storage area of each value of an object. Valid width values are 1 through 4000. Specify a fixed width only when you are certain that the values of a particular dimension surrogate are of similar size. When a value exceeds the specified width, Oracle OLAP truncates it.</p>
</dd>
<dt>INTEGER</dt>
<dd>
<p>The data type for a dimension surrogate with values that are the ordinal positions (1, 2, and so on) of the values in its dimension. You might create an INTEGER type dimension surrogate for a <code>NUMBER</code> type dimension so that you can specify dimension values by position instead of by the value of the dimension. When you define an INTEGER type dimension surrogate, Oracle OLAP automatically assigns an <code>INTEGER</code> value to the surrogate for each of the positions in the dimension.</p>
</dd>
<dt>NUMBER</dt>
<dd>
<p>Specifies that the dimension surrogate has a data type of <code>NUMBER</code>. See <a href="dml_expression.htm#CJACDECG">"Numeric Data Types"</a> for more information.</p>
</dd>
<dt><span class="italic">precision</span></dt>
<dd>
<p>Specifies the total number of characters in the value of a dimension surrogate of type <code>NUMBER</code>.</p>
</dd>
<dt><span class="italic">scale</span></dt>
<dd>
<p>Specifies the number of characters that can be to the right of a decimal point of a dimension surrogate of type <code>NUMBER</code>.</p>
</dd>
<dt><span class="italic">datetime_datatype</span></dt>
<dd>
<p>Specifies a datetime data type (that is, <code>DATETIME</code> , <code>TIMESTAMP</code>, <code>TIMESTAMP_TZ</code>, or <code>TIMESTAMP-LTZ</code>). See <a href="dml_expression.htm#BABJGJIH">"Datetime and Interval Data Types"</a> for more information.</p>
</dd>
<dt>AW <span class="italic">workspace</span></dt>
<dd>
<p>The name of an attached workspace in which you want to define the dimension surrogate. The dimension for which you define the surrogate must be defined in the same workspace. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>SESSION</dt>
<dd>
<p>Specifies that the object exists only in the current session. When you close the current session, the object no longer exists.&nbsp;Use this keyword when the definition of the <span class="italic">targetname</span> dimension includes SESSION.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4079"></a>Usage Notes</p>
<p class="subhead2"><a id="CIHGFFCJ"></a><a id="OLADM2315"></a>Restrictions on the Use of Surrogates</p>
<p>Keep the following restrictions in mind when determining a target for your surrogate:</p>
<ul>
<li>
<p>You cannot create a surrogate for a dimension that has a type of DAY, WEEK, MONTH, QUARTER, or YEAR or for a composite.</p>
</li>
<li>
<p>When you create a surrogate for a conjoint, you cannot convert the conjoint to a composite.</p>
</li>
</ul>
<p>You cannot specify a dimension surrogate as the dimension or related dimension argument when you define a concat dimension, a formula, a program, a relation, a valueset, or a variable. Additionally, in data loading you cannot create new dimension values using a dimension surrogate</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4080"></a>Examples</p>
<div id="OLADM2316" class="example">
<p class="titleinexample"><a id="sthref4081"></a>Example 9-91 Creating an INTEGER Dimension Surrogate</p>
<p>The following statement creates an INTEGER type dimension surrogate for the <code>store_id</code> dimension.</p>
<pre>
DEFINE storepos SURROGATE store_id INTEGER
</pre></div>
<!-- class="example" -->
<div id="OLADM2317" class="example">
<p class="titleinexample"><a id="sthref4082"></a>Example 9-92 Creating a NUMBER Dimension Surrogate</p>
<p>The following statement creates an <code>NUMBER</code> type dimension surrogate for the <code>product</code> dimension, which is a TEXT dimension that has product names as values. The <span class="italic">precision</span> argument to the NUMBER keyword specifies that a value in <code>prodnum</code> can have no more than seven characters and the scale argument specifies that no more than three characters can be to the right of the decimal point.</p>
<pre>
DEFINE prodnum SURROGATE product NUMBER(7, 3)
</pre>
<p>The following statement sets the first value of <code>prodnum</code> to <code>1083.375</code>.</p>
<pre>
prodnum(product 1) = 1083.375
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="OLADM797" class="refsect2"><a id="i78528"></a>
<hr />
<h2 class="refsect2">DEFINE VALUESET</h2>
<p><a id="sthref4083"></a><a id="sthref4084"></a><a id="sthref4085"></a>The DEFINE command with the VALUESET keyword <a id="sthref4086"></a><a id="sthref4087"></a>adds a new valueset object to an analytic workspace. A valueset is a list of dimension values for one or more dimensions. You use a valueset to save dimension status lists across sessions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Defining a valueset adds the definition of the valueset to the analytic workspace and sets all of its values to null (<code>NA</code>). To assign values to a valueset use the LIMIT command. You can also use a STATUS statement and the STATFIRST, INSTAT, and VALUES functions to work with a valueset.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4088"></a>Syntax</p>
<p class="synopsis">DEFINE&nbsp;<span class="italic">name&nbsp;</span>VALUESET&nbsp;<span class="italic">dimension&nbsp;</span>[&lt;<span class="italic">dims</span>...&gt;]&nbsp;[TEMP]&nbsp;[AW&nbsp;<span class="italic">workspace</span>]&nbsp;[SESSION]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4089"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span></dt>
<dd>
<p>The name of the object you are defining. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>VALUESET</dt>
<dd>
<p>The object type when you are defining a valueset.</p>
</dd>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>The name of the previously-defined dimension whose values you want to store in the valueset.</p>
</dd>
<dt><span class="italic">dims</span></dt>
<dd>
<p>When defining a multi-dimensional valueset, the names of the previously-defined dimensions by which you want the valueset dimensioned.</p>
</dd>
<dt>TEMP</dt>
<dd>
<p>Indicates that the values of the valueset are only temporary. The valueset has a definition in the current workspace and can contain values during the current session. However, when you update and commit, only the definition of the valueset is saved. When you end the session or switch to another workspace, the values are discarded. Each time you start the workspace, the value of a temporary valueset is null.</p>
</dd>
<dt>AW <span class="italic">workspace</span></dt>
<dd>
<p>The name of an attached workspace in which you want to define the valueset. The valueset must be defined in the same workspace as its dimensions. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>SESSION</dt>
<dd>
<p>Specifies that the object exists only in the current session. When the session ends, the object no longer exists. The behavior specified by SESSION is different from the behavior specified by the TEMP keyword which is that the values are temporary but the object definition remains in the workspace in which you create it.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4090"></a>Examples</p>
<div id="OLADM2318" class="example">
<p class="titleinexample"><a id="CIHCDBHJ"></a>Example 9-93 Creating and Assigning Values to a Valueset</p>
<p>This example adds the valueset named <code>lineset</code> to the demonstration workspace. The <code>lineset</code> valueset is dimensioned by <code>line</code>, and therefore it can be limited by the current values of the <code>line</code> dimension. The LD statement attaches a description to the object.</p>
<p>The following statements 1) limit the <code>line</code> dimension and display the values in status, 2) create a valueset named <code>lineset</code> by defining valueset and limiting the valueset to those values currently in status for the line dimension, and 3) display the values of the lineset.</p>
<pre>
LIMIT line TO FIRST 2
STATUS line
</pre>
<pre>
The current status of LINE is:
REVENUE, COGS

" Define the valueset and specify a long description for it
</pre>
<pre>
DEFINE lineset VALUESET line
LD Valueset for LINE dimension values
" Assign the values that are currently in status for line 
" as the values of valueset
LIMIT lineset TO line
UPDATE

SHOW lineset
</pre>
<pre>
Revenue
Cogs 
</pre></div>
<!-- class="example" -->
<div id="OLADM2319" class="example">
<p class="titleinexample"><a id="CIHFIGIB"></a>Example 9-94 Creating and Assigning Values to a Multidimensional Valueset</p>
<p><a id="sthref4091"></a><a id="sthref4092"></a><a id="sthref4093"></a><a id="sthref4094"></a><a id="sthref4095"></a>Assume that your analytic workspace has the variables and dimensions with the following definitions.</p>
<pre>
DEFINE geography DIMENSION TEXT
DEFINE product DIMENSION TEXT
DEFINE sales VARIABLE DECIMAL &lt;geography product&gt;
DEFINE salestax VARIABLE DECIMAL &lt;geography&gt;
</pre>
<p>Assume also that the analytic workspace contains the following dimensions whose values are the names of variables and dimensions within the workspace.</p>
<pre>
DEFINE all_variables DIMENSION TEXT
MAINTAIN all_variables ADD 'sales' 'salestax'
DEFINE all_dims DIMENSION TEXTMAINTAIN all_dims ADD 'geography' 'product'
</pre>
<p>The following statements create and populate a valueset for the values of <code>all_variables</code> and <code>all_dims</code>, and then report the values of that valueset.</p>
<pre>
DEFINE variables_dims VALUESET all_dims &lt;all_variables&gt;
" Assign all values of all_dims and all_variables to the valueset 
LIMIT variables_dims TO ALL
REPORT variables_dims
 
ALL_VARIABLES        VARIABLES_DIMS
---------------- ------------------------------
sales            geography
                 product
salestax         geography
                 product
 
</pre>
<p>To create a multidimensional valueset that has the correct dimensions related to the variables that use them, you issue the following statement that uses a QDR to limit the <code>all_dims</code> values for the <code>salestax</code> value of <code>all_variables</code>.</p>
<pre>
LIMIT variables_dims(all_variables  'salestax') TO 'geography'
REPORT variables_dims

ALL_VARIABLES        VARIABLES_DIMS
---------------- ------------------------------
sales            geography
                 product
salestax         geography
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="OLADM798" class="refsect2"><a id="i78533"></a>
<hr />
<h2 class="refsect2">DEFINE VARIABLE</h2>
<p><a id="sthref4096"></a><a id="sthref4097"></a><a id="sthref4098"></a><a id="sthref4099"></a><a id="sthref4100"></a><a id="sthref4101"></a><a id="sthref4102"></a><a id="sthref4103"></a><a id="sthref4104"></a>The DEFINE command with the VARIABLE keyword adds a new variable object to an analytic workspace. <a id="sthref4105"></a><a id="sthref4106"></a><a id="sthref4107"></a>Variables store one type of data, which can be numeric, text, Boolean, or dates. Beside the data type of a variable, the definition that you create for a variable also determines the following characteristics of the variable:</p>
<ul>
<li>
<p>The number of elements that are actually created in the array that is the variable.</p>
</li>
<li>
<p>The logical order of the variable's elements.</p>
</li>
<li>
<p>Whether the variable's data is stored permanently or is only available for the session.</p>
</li>
<li>
<p>The number of LOBs that Oracle OLAP creates for the variable's data.</p>
</li>
</ul>
<p>You can also define local program variables using a <a href="dml_commands_2072.htm#i79234">VARIABLE</a> command. These variables exist only when the program is running.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Defining a variable merely adds the definition of the variable to the analytic workspace; it does not populate the variable. To populate variables using the OLAP DML, you can issue OLAP DML SQL, FILEREAD, SET, or SET1 statements.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4108"></a>Syntax</p>
<p class="synopsis">DEFINE&nbsp;<span class="italic">name&nbsp;</span>[<span class="underline">VARIABLE</span>]&nbsp;<span class="italic">datatype&nbsp;</span>[&lt;<span class="italic">dims</span>...&gt;] [WITH NULLTRACKING] [WITH AGGCOUNT] -</p>
<p class="synopsis">[<span class="underline">PERMANENT</span> | TEMP ] -</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ RANSPACE64] [(<span class="italic">partition-instance...</span>)]&nbsp;[WIDTH&nbsp;<span class="italic">n</span>]&nbsp;[AW&nbsp;<span class="italic">workspace</span>]&nbsp;[SESSION]</p>
<p>where:</p>
<ul>
<li>
<p><span class="syntaxinlineitalic">dims</span> are the dimensions of the variable separated by commas. For a dimension of a variable you can specify a dimension object, a partition template object, a named uncompressed composite, a compressed composite, or an unnamed uncompressed composite using one of the following:</p>
<dl>
<dd><span class="syntaxinlineitalic">dimension_name</span></dd>
<dd><span class="syntaxinlineitalic">partition_template_name</span> <span class="syntaxinline">&lt;</span><span class="syntaxinlineitalic">dims</span><span class="syntaxinline">&gt;</span></dd>
<dd><span class="syntaxinlineitalic">uncompressed_composite_name</span> <span class="syntaxinline">&lt;[</span><span class="syntaxinlineitalic">basedims</span><span class="syntaxinline">...]&gt;</span></dd>
<dd><span class="syntaxinlineitalic">compressed_composite_name</span> <span class="syntaxinline">&lt;[</span><span class="syntaxinlineitalic">basedims</span><span class="syntaxinline">...]&gt;</span></dd>
<dd><span class="syntaxinline">SPARSE &lt;</span><span class="syntaxinlineitalic">basedims</span><span class="syntaxinline">...&gt;</span></dd>
</dl>
<div class="infobox-note">
<p class="notep1">Note:</p>
The order in which you list the <span class="italic">dims</span> of a variable is the default order of the dimensions and behavior of a variety of statements (such as REPORT and UNRAVEL) and affects how the data for the variable is stored (as discussed in <a href="#CHDIIBHF">"Effect of Dimension Order on Variable Storage and Statement Looping"</a>. Also, when you define multiple objects with the same dimensions, most operations work much more efficiently when you list the dimensions in the same order in each definition.</div>
</li>
<li>
<p><span class="syntaxinlineitalic">partition-instance</span> are the partitions of the variable separated by commas. Use the following syntax to specify a partition.</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PARTITION <span class="italic">partition-name</span> INTERNAL [TEMP | PERMANENT]</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4109"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span></dt>
<dd>
<p>The name of the variable you are defining. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>VARIABLE</dt>
<dd>
<p>The object type when you are defining a variable. You do not have to include the word VARIABLE, because it is the default.</p>
</dd>
<dt><span class="italic">datatype</span></dt>
<dd>
<p>The data type of the data to be stored in the variable. The data types, their abbreviations, and the range of acceptable values are shown in <a href="dml_expression.htm#CJADHGII">Table 2-1, "<span class="bolditalic">Summary of OLAP DML Data Types</span>"</a>.</p>
</dd>
<dt><span class="italic">dimension_name</span></dt>
<dd>
<p>The name of a simple, concat, conjoint, or alias dimension that you have previously defined using a DEFINE DIMENSION statement. In this case, you specify the name of the dimension.</p>
</dd>
<dt>RANSPACE64</dt>
<dd>
<p>When defining a <code>TEXT</code>, <code>NTEXT</code>, or <code>RAW</code> variable, specify this keyword to increase the maximum number of characters for the values of the variable from nearly <code>2**32</code> to nearly <code>2**64</code>.</p>
</dd>
<dt>&nbsp;<span class="italic">partition-template-name</span>&lt;<span class="italic">dims</span>&gt;</dt>
<dd>
<p>The name of a partition template object that you have previously defined using a DEFINE PARTITION TEMPLATE statement. For <span class="italic">dims</span>, specify the names of the dimensions of the partition template object. These dimensions must be the same dimensions as those used to define the partition template object.</p>
</dd>
<dt><span class="italic">uncompressed_composite_name</span> &lt;[<span class="italic">basedims</span>...]&gt;</dt>
<dd>
<p>The name of an uncompressed composite previously defined using a DEFINE COMPOSITE statement. For the optional <span class="italic">basedims</span> argument, specify the names, separated by commas, of the dimensions used to define the composite.</p>
</dd>
<dt><span class="italic">compressed_composite_name</span> &lt;<span class="italic">basedims</span>...&gt;</dt>
<dd>
<p>The name of a compressed composite previously defined using a DEFINE COMPOSITE statement. For the optional <span class="italic">basedims</span> argument, specify the names, separated by commas, of the dimensions used to define the composite.</p>
<p>When defining a variable that is dimensioned by a compressed composite, keep the following points in mind:</p>
<ul>
<li>
<p>A compressed composite can dimension only one variable or one partition of a variable. A compressed composite cannot be a shared composite.</p>
</li>
<li>
<p>The compressed composite must be the last dimension in the variable's dimension list of the DEFINE VARIABLE statement that defines the variable.</p>
</li>
</ul>
</dd>
<dt>SPARSE &lt;<span class="italic">basedims</span>...&gt;</dt>
<dd>
<p>Indicates that you want Oracle OLAP to create an unnamed composite and use it when dimensioning the variable. For the <span class="italic">basedims</span> argument, specify the names of the dimensions, separated by commas, for which the unnamed composite is created.</p>
</dd>
<dt>WITH NULLTRACKING</dt>
<dd>
<p>When the variable is dimensioned by a composite, specifies <a id="sthref4110"></a><a id="sthref4111"></a>that Oracle OLAP create NA2 bits for the cells of the variable.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<ul>
<li>
<p><a href="#BGECIBHD">"NA2 Bits and Null Tracking"</a></p>
</li>
</ul>
</div>
</dd>
<dt>WITH AGGCOUNT</dt>
<dd>
<p>Specifies <a id="sthref4112"></a><a id="sthref4113"></a>that Oracle OLAP automatically creates an <code>INTEGER</code> variable in which it stores the non-<code>NA</code> counts of the number of leaf nodes that contributed to aggregate values calculated for RELATION statements that have an AVERAGE, HWAVERAGE, or WAVERAGE operator. You <span class="italic">must</span> include this phrase to calculate average aggregations for a variable dimensioned by a compressed composite. For more information on Aggcount variables, see <a href="#CIHFEAGE">"Aggcount Variables"</a>.</p>
</dd>
<dt>PERMANENT</dt>
<dt>TEMP</dt>
<dd>
<p>Specifies that a variable or a partition of a variable is either permanent or temporary. After you update and commit, the definition of both permanent and temporary variables and partitions is always saved between sessions. Specifying permanent or temporary determines whether, after you update and commit, the values of a variable or a partition of a variable are saved or discarded when you end your session or switch to another workspace:</p>
<ul>
<li>
<p>Permanent variables and partitions&shy;&mdash;Oracle OLAP saves the data values or a permanent variable or permanent partitions. When you start the workspace, the data values or a permanent variable or permanent partitions are the same as they were at the last commit.</p>
</li>
<li>
<p>Temporary variables and partitions&shy;&mdash;Oracle OLAP discards the data values of a temporary variable or temporary partition. Each time you start the workspace, the values of a temporary variable or temporary partition are <code>NA</code>.</p>
</li>
</ul>
<p>Keep the following points in mind when specifying the PERMANENT and TEMP keywords:</p>
<ul>
<li>
<p>By default, a variable is permanent.</p>
</li>
<li>
<p>Temporary variables can be dimensioned by partition template objects or by temporary dimensions.</p>
</li>
<li>
<p>By default, a top-level partition of a variable has the same permanence as the variable that contains it. Specifically, a partition of a temporary variable is a temporary partition unless you use the PERMANENT keyword to make it a permanent partition, and a partition of a permanent variable is a permanent partition unless you use the TEMPORARY keyword to make it a temporary partition. To indicate different behavior, use either the PERMANENT or TEMP keyword.</p>
</li>
<li>
<p>By default, a subpartition has the same permanence as its parent partition. To indicate different behavior, use either the PERMANENT or TEMP keyword.</p>
</li>
</ul>
</dd>
<dt>WIDTH <span class="italic">n</span></dt>
<dd>
<p>(You can abbreviate WIDTH as W.) The width, in bytes, of the storage area for each value of a variable. When you are using a multibyte character set, be sure to specify the number of bytes, not characters.</p>
<p>You specify fixed widths to create faster and more compact data storage formats. You can specify fixed widths for dimensioned TEXT, NTEXT, and INTEGER variables only, as described in the following list:</p>
<ul>
<li>
<p>For dimensioned TEXT and NTEXT variables, you can specify a width from 1 byte through 4,000 bytes. Specify a fixed width for such variables only when you are certain that the values of a particular variable are of similar size. You cannot assign a width to a scalar variable.</p>
</li>
<li>
<p>For dimensioned INTEGER variables, you can specify a width of 1 byte only. Define a fixed width INTEGER variable only when you are certain that all the values for that variable are between -128 and 127.</p>
</li>
</ul>
<p>The default widths for variables are: 2 bytes for SHORTINTEGER, 4 bytes for DATE, INTEGER, and SHORTDECIMAL, and 8 bytes for DECIMAL and ID. TEXT and NTEXT variables that do not have fixed widths are stored on two sets of pages. The first set contains 4-byte cells, each of which points to the actual text value that is stored in the other set of pages. The default width of 4 bytes for TEXT and NTEXT variables is for these 4-byte cells.</p>
</dd>
<dt>PARTITION <span class="italic">partition-name</span> INTERNAL</dt>
<dd>
<p>Specifies a partition of the variable where <span class="italic">partition-name</span> is the name of the partition.</p>
<p>When defining the partitions of a variable dimensioned by a compressed composite, keep the following points in mind:</p>
<ul>
<li>
<p>A compressed composite can dimension only one partition.</p>
</li>
<li>
<p>The partitions of a variable dimensioned by a compressed composite must respect the parent-child relationships of the hierarchical dimensions. When an AGGREGATE command executes, data cannot be aggregated across partitions. To verify if a variable is partitioned correctly, use the <a href="dml_functions_2059.htm#BAJFFIHC">PARTITIONCHECK</a> function.</p>
</li>
</ul>
</dd>
<dt>AW <span class="italic">workspace</span></dt>
<dd>
<p>The name of an attached workspace in which you want to define the variable. When the variable is dimensioned, it must be defined in the same workspace as its dimensions. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>SESSION</dt>
<dd>
<p>Specifies that the object exists only in the current session. When the session ends, the object no longer exists. The behavior specified by SESSION is different than the behavior specified by the TEMP keyword which is that the values are temporary but the object definition remains in the workspace in which you create it.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4114"></a>Usage Notes</p>
<p class="subhead2"><a id="CIHFEAGE"></a><a id="OLADM2320"></a>Aggcount Variables</p>
<p>When <a id="sthref4115"></a><a id="sthref4116"></a>you include the WITH AGGCOUNT phrase in a DEFINE VARIABLE statement, Oracle OLAP automatically creates the variable specified in the DEFINE statement and a secondary variable (often called the Aggcount variable). The Aggcount variable is an <code>INTEGER</code> variable that Oracle OLAP uses when performing average aggregations for the defined variable. When resolving RELATION statements that have an AVERAGE, HAVERAGE, WAVERAGE, or HWAVERAGE operator and that do not have a COUNT NO phrase, Oracle OLAP stores the non-<code>NA</code> counts of the number of leaf nodes that contribute to the average aggregate values in the Aggcount variable.</p>
<p>Most statements that maintain a variable also automatically maintain an associated Aggcount variable. For example, an EXPORT statement exports both a variable and its associated Aggcount variable, and a CLEAR statement clears both the variable and the related portions of the associated Aggcount variable. Additionally, some OLAP DML statements are specific to the use of Aggcount objects. <a href="#CIHGHEFI">Table 9-6, "OLAP DML Statements for Aggcount Variables"</a> lists these statements.</p>
<div id="OLADM2321" class="tblformal">
<p class="titleintable"><a id="sthref4117"></a><a id="CIHGHEFI"></a>Table 9-6 OLAP DML Statements for Aggcount Variables</p>
<table class="cellalignment3098" title="OLAP DML Statements for Aggcount Variables" summary="This table lists the OLAP DML statements that apply to Aggcount variables." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t103">Statement</th>
<th class="cellalignment3099" id="r1c2-t103">Keywords</th>
<th class="cellalignment3099" id="r1c3-t103">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t103" headers="r1c1-t103">
<p><a href="#i78533">DEFINE VARIABLE</a></p>
</td>
<td class="cellalignment3095" headers="r2c1-t103 r1c2-t103">
<p>WITH AGGCOUNT</p>
</td>
<td class="cellalignment3095" headers="r2c1-t103 r1c3-t103">
<p>Defines a variable and an associated Aggcount variable.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t103" headers="r1c1-t103">
<p><a href="dml_functions_1003.htm#BCFGCEGE">AGGCOUNT</a></p>
</td>
<td class="cellalignment3095" headers="r3c1-t103 r1c2-t103">&nbsp;</td>
<td class="cellalignment3095" headers="r3c1-t103 r1c3-t103">
<p>Retrieves the values of the Aggcount variable associated with the specified variable.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t103" headers="r1c1-t103">
<p><a href="dml_commands_1021.htm#g1044782">CHGDFN</a></p>
</td>
<td class="cellalignment3095" headers="r4c1-t103 r1c2-t103">
<p>ADD|DROP AGGCOUNT</p>
</td>
<td class="cellalignment3095" headers="r4c1-t103 r1c3-t103">
<p>Adds or drops an Aggcount variable for the specified variable.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t103" headers="r1c1-t103">
<p><a href="dml_functions_2053.htm#g1054016">OBJ</a></p>
</td>
<td class="cellalignment3095" headers="r5c1-t103 r1c2-t103">
<p>HASAGGCOUNT</p>
</td>
<td class="cellalignment3095" headers="r5c1-t103 r1c3-t103">
<p>Returns a <code>BOOLEAN</code> value that indicates whether or not a specified variable has an Aggcount variable associated with it.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="BGECIBHD"></a><a id="OLADM2322"></a>NA2 Bits and Null Tracking</p>
<p>Relational fact tables sometimes have null facts (that is, facts that have a null value). Typically, when Oracle OLAP creates a variable dimensioned by a composite, it does not create a composite tuple for an NA (or null) value. Given this typical behavior, OLAP DML variables would not correspond to their base relational fact table because the variables would eliminate the null facts.</p>
<p>To support OLAP DML composite-dimensioned variables that correspond to relational fact tables with null facts, Oracle OLAP has a special NA bit called an <a id="sthref4118"></a><a id="sthref4119"></a>NA2 bit. These NA2 bits tracks whether or not each cell of the variable has null value because the underlying relational table has a null fact. When the corresponding fact table has a null fact, you want Oracle OLAP to intentionally include an NA value in the composite tuples for the variable and NA2 bits are used by Oracle OLAP to do just that. NA2 bits are used by Oracle OLAP when it populates variables using the <a href="dml_commands_2058.htm#i78693">SQL IMPORT</a> command, the <a href="dml_commands_1009.htm#i78745">AGGREGATE command</a>, and variables that were created as materialized views. They are also used by Oracle OLAP when it populates a relational table using the OLAP_TABLE SQL function. Additionally, Oracle OLAP recognizes NA2 values when evaluating expressions using arithmetic and Boolean operators.</p>
<p>The OLAP DML provides the following statements for working with variables that have NA2 bits:</p>
<ul>
<li>
<p>To create a variable with NA2 bits, use the DEFINE VARIABLE statement with the NULLTRACKING phrase.</p>
</li>
<li>
<p>To add NA2 bits to a variable that does not have NA2 bits, use the <a href="dml_commands_1021.htm#g1044782">CHGDFN</a> statement with the NULLTRACKING phrase.</p>
</li>
<li>
<p>To remove NA2 bits from a variable that has NA2 bits, use the CHGDFN statement with the DROP NULLTRACKING phrase.</p>
</li>
<li>
<p>For testing and debugging purposes, use the <a href="dml_functions_2034.htm#CHDBDHEC">NA2</a> function to set one or more of the NA2 bit of a variable to TRUE. Use the <a href="dml_functions_2036.htm#CHDCHAEF">NAFLAG</a> function to identify if one or more values of a variable are NA values and, if so, if the NA value is just the typical NA values that OLAP should ignore or both the typical NA value and also an NA2 value.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<ul>
<li>
<p><a class="olink OLAUG" href="../../olap.112/e17123/toc.htm"><span class="italic">Oracle OLAP User's Guide</span></a> for more information on creating materialized views using Oracle OLAP</p>
</li>
</ul>
</div>
</li>
</ul>
<p class="subhead2"><a id="OLADM2323"></a>Defining Very Large Variables</p>
<p>Theoretically, a variable can contain up to <code>2**63</code> cells and a TEXT or NTEXT variable can contain up to 2 billion bytes. However, the page size determines if a variable can be stored entirely on a page or how many variables can be stored on a page. To calculate the maximum number of values for a variable of a given width that fit on one page, use the VALSPERPAGE program.</p>
<p class="subhead1"><a id="CHDIIBHF"></a><a id="OLADM2324"></a>Effect of Dimension Order on Variable Storage and Statement Looping</p>
<p><a id="sthref4120"></a><a id="sthref4121"></a><a id="sthref4122"></a><a id="sthref4123"></a><a id="sthref4124"></a>The order in which you list the dimensions of a variable definition determines the order in which the elements of the variable are stored and, consequently, how the data is accessed. The first dimension in the variable definition is the <span class="bold">fastest-varying dimension</span>, and the last dimension is the <span class="bold">slowest-varying dimension</span>.</p>
<p>For example, assume your analytic workspace has an <code>opcosts</code> variable that contains the operating costs, by month, of each city in which you have offices. In the following definition for the <code>opcosts</code> variable, <code>month</code> is the fastest-varying dimension and <code>city</code> is the slowest-varying dimension.</p>
<pre>
DEFINE opcosts VARIABLE DECIMAL &lt;month city&gt;
</pre>
<pre>
</pre>
<p>The data for a multidimensional variable is stored as a linear stream of values, in which the values of the fastest-varying dimension are clustered. For example, for the <code>opcosts</code> variable, the values for Boston for all the months are stored in a sequence, and then it stores the values for Chicago for all the months in a sequence, and so on.</p>
<p>When you define variables and other dimensioned objects, and when you write programs that loop over multidimensional expressions in nested loops, always try to maximize performance by matching the fastest-varying dimension with the inner loop.</p>
<p class="subhead1"><a id="CIHFIGCA"></a><a id="OLADM2325"></a>Unnamed Composites</p>
<p>Oracle OLAP automatically defines an unnamed composite when a DEFINE VARIABLE statement with a <span class="syntaxinline">SPARSE &lt;</span><span class="syntaxinlineitalic">dimlist</span><span class="syntaxinline">&gt;</span> phrase executes. An unnamed composite can have either a b-tree or hash index. The type of index is determined by the value of the SPARSEINDEX option when Oracle OLAP defines an unnamed composite.</p>
<p>Once Oracle OLAP has created a definition for an unnamed composite for a certain dimension list, it uses that composite any time you define a variable with the same <span class="syntaxinline">SPARSE &lt;</span><span class="syntaxinlineitalic">dimlist</span><span class="syntaxinline">&gt;</span> phrase. Thus all variables that are defined with the same <span class="syntaxinline">SPARSE &lt;</span><span class="syntaxinlineitalic">dimlist</span><span class="syntaxinline">&gt;</span> phrase share the same unnamed composite. For more information on sharing composites, see <a href="#CIHGDFDB">"Shared Composites"</a>.</p>
<p class="subhead2"><a id="CIHFJHCI"></a><a id="OLADM2326"></a>Variable Segments</p>
<p>Within a partition, variable data is stored in analytic workspace segments. An analytic workspace segment is a group of logically contiguous analytic workspace pages. By default, the segment sizes of a variable are automatically determined by Oracle OLAP. Each segment is the exactly the number of analytic workspace pages needed to store the values assigned by the one OLAP DML statement. You can explicitly specify a segment size for a variable using the SEGWIDTH keyword of the CHGDFN command. In this case, when you assign values to a variable, Oracle OLAP stores the data assigned by multiple OLAP DML statements into a segment until the segment is full.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4125"></a>Examples</p>
<div id="OLADM2327" class="example">
<p class="titleinexample"><a id="sthref4126"></a>Example 9-95 Defining an INTEGER Variable with One Regular Dimension</p>
<p>This example adds the variable <code>population</code> to an analytic workspace. It is dimensioned by <code>city</code>, which has already been defined in the workspace. The LD Statement attaches a description to the object. The statements</p>
<pre>
DEFINE population INTEGER &lt;city&gt;
LD Population in each city
DESCRIBE population
</pre>
<p>produce the following description.</p>
<pre>
DEFINE POPULATION VARIABLE INTEGER &lt;CITY&gt;
LD Population in each city
</pre></div>
<!-- class="example" -->
<div id="OLADM2328" class="example">
<p class="titleinexample"><a id="sthref4127"></a>Example 9-96 Defining a Single-Cell Variable</p>
<p>The following is a definition for a variable named <code>newdata</code> which is a single Boolean value. It has no dimensions. An application might set it to <code>YES</code> when new data is added to the workspace and to <code>NO</code> after a user views the data.</p>
<pre>
DEFINE newdata BOOLEAN
newdata = YES
</pre></div>
<!-- class="example" -->
<div id="OLADM2329" class="example">
<p class="titleinexample"><a id="i79083"></a>Example 9-97 Defining NUMBER Variables</p>
<p>The following statement defines a <code>NUMBER</code> variable named <code>sales</code> that is dimensioned by <code>product</code> and <code>geography</code> with a precision of 16 digits and a scale of 4 digits.</p>
<pre>
DEFINE sales VARIABLE NUMBER (16,4) &lt;product, geography&gt;
</pre>
<p>The following statements define a <code>NUMBER</code> variable named <code>numvar</code> with 5 significant digits and 2 decimal places. The number 1234567 is out of its range.</p>
<pre>
DEFINE numvar VARIABLE NUMBER (5, 2)
numvar = 1234567
SHOW numvar
NA
</pre>
<p>A negative scale defines a <code>NUMBER</code> variable named <code>numnegvar</code> with 5 significant digits and 2 rounded digits to the left of the decimal point. The number 1,234,567 is rounded up.</p>
<pre>
DEFINE numnegvar VARIABLE NUMBER (5, -2)
numnegvar = 1234567
SHOW numnegvar
1,234,600.00
</pre></div>
<!-- class="example" -->
<div id="OLADM2330" class="example">
<p class="titleinexample"><a id="CIHFFJBF"></a>Example 9-98 Defining a Variable Dimensioned by Two Regular Dimensions</p>
<p>Assume that you have an analytic workspace that contains the following definitions for dimensions, relations, and aggmaps.</p>
<pre>
DEFINE GEOG_CITY DIMENSION TEXT
DEFINE GEOG_STATE DIMENSION TEXT
DEFINE GEOG_AREA DIMENSION TEXT
DEFINE GEOG_CONT DIMENSION TEXT
DEFINE GEOG DIMENSION CONCAT (GEOG_CITY GEOG_STATE GEOG_AREA GEOG_CONT)
DEFINE PROD_UPC DIMENSION TEXT
DEFINE PROD_FAMILY DIMENSION TEXT
DEFINE PROD_DIV DIMENSION TEXT
DEFINE PROD_TOP DIMENSION TEXT
DEFINE PROD DIMENSION CONCAT (PROD_UPC PROD_FAMILY PROD_DIV PROD_TOP)
DEFINE GEOGLEVEL DIMENSION TEXT
DEFINE PRODLEVEL DIMENSION TEXT
DEFINE GEOG.PARENT RELATION GEOG &lt;GEOG&gt;
DEFINE PROD.PARENT RELATION PROD &lt;PROD&gt;
DEFINE GEOG.LEVELREL RELATION GEOGLEVEL &lt;GEOG&gt;
DEFINE PROD.LEVELREL RELATION PRODLEVEL &lt;PROD&gt;
DEFINE GEOG.FAMILYREL RELATION GEOG &lt;GEOG GEOGLEVEL&gt;
DEFINE PROD.FAMILYREL RELATION PROD &lt;PROD PRODLEVEL&gt;
DEFINE SALES_DIMS_REG VARIABLE NUMBER (12,0) &lt;PROD GEOG&gt;
DEFINE SALES_AGGMAP AGGMAP
AGGMAP
  RELATION geog.parent
  RELATION prod.parent
END
</pre>
<p>The two parent relations (<code>prod.parent</code> and <code>geog.parent</code>) have the following values.</p>
<pre>
PROD                             PROD.PARENT
------------------------- -------------------------
&lt;PROD_UPC: ColorTV&gt;       &lt;PROD_FAMILY: TV&gt;
&lt;PROD_UPC: BWTV&gt;          &lt;PROD_FAMILY: TV&gt;
&lt;PROD_UPC: StndVCR&gt;       &lt;PROD_FAMILY: VCR&gt;
&lt;PROD_UPC: StrVCR&gt;        &lt;PROD_FAMILY: VCR&gt;
&lt;PROD_FAMILY: VCR&gt;        &lt;PROD_DIV: VideoDiv&gt;
&lt;PROD_FAMILY: TV&gt;         &lt;PROD_DIV: VideoDiv&gt;
&lt;PROD_DIV: VideoDiv&gt;      &lt;PROD_TOP: Total Prod&gt;
&lt;PROD_TOP: Total Prod&gt;    NA
GEOG                             GEOG.PARENT
------------------------- -------------------------
&lt;GEOG_CITY: Canberra&gt;     &lt;GEOG_STATE: ACT&gt;
&lt;GEOG_CITY: Sydney&gt;       &lt;GEOG_STATE: NSW&gt;
&lt;GEOG_CITY: Darwin&gt;       &lt;GEOG_STATE: NT&gt;
&lt;GEOG_CITY: Brisbane&gt;     &lt;GEOG_STATE: QLD&gt;
&lt;GEOG_CITY: Adelaide&gt;     &lt;GEOG_STATE: SA&gt;
&lt;GEOG_CITY: Hobart&gt;       &lt;GEOG_STATE: TAS&gt;
&lt;GEOG_CITY: Melbourne&gt;    &lt;GEOG_STATE: VIC&gt;
&lt;GEOG_CITY: Perth&gt;        &lt;GEOG_STATE: WA&gt;
&lt;GEOG_STATE: ACT&gt;         &lt;GEOG_AREA: Aust Terr&gt;
&lt;GEOG_STATE: NSW&gt;         &lt;GEOG_AREA: Aust State&gt;
&lt;GEOG_STATE: NT&gt;          &lt;GEOG_AREA: Aust Terr&gt;
&lt;GEOG_STATE: QLD&gt;         &lt;GEOG_AREA: Aust State&gt;
&lt;GEOG_STATE: SA&gt;          &lt;GEOG_AREA: Aust State&gt;
&lt;GEOG_STATE: TAS&gt;         &lt;GEOG_AREA: Aust State&gt;
&lt;GEOG_STATE: VIC&gt;         &lt;GEOG_AREA: Aust State&gt;
&lt;GEOG_STATE: WA&gt;          &lt;GEOG_AREA: Aust State&gt;
&lt;GEOG_AREA: Aust State&gt;   &lt;GEOG_CONT: Australia&gt;
&lt;GEOG_AREA: Aust Terr&gt;    &lt;GEOG_CONT: Australia&gt;
&lt;GEOG_CONT: Australia&gt;    NA
</pre>
<p>Assume that you aggregate <code>sales_dims_reg</code> using <code>sales_aggmap</code>. Now assume that you issue the following REPORT statement for a report of the <code>sales_dims_reg</code> variable.</p>
<pre>
REPORT sales_dims_reg-&gt;REPORT sales_dims_reg
 
</pre>
<p>As you can see from the output of the REPORT statement, the <code>sales_dims_reg</code> variable is a sparsely populated variable with 152 cells, many of which contain <code>NA</code> values.</p>
<pre>
                          ----------------------------SALES_DIMS_REG-----------------------------
                          ---------------------------------PROD----------------------------------
                                                                                &lt;PROD_DI
                          &lt;PROD_UP          &lt;PROD_UP &lt;PROD_UP &lt;PROD_FA &lt;PROD_FA    V:    &lt;PROD_TO
                             C:    &lt;PROD_UP    C:       C:     MILY:    MILY:   VideoDiv P: Total
GEOG                      ColorTV&gt; C: BWTV&gt; StndVCR&gt; StrVCR&gt;    VCR&gt;     TV&gt;       &gt;      Prod&gt;
------------------------- -------- -------- -------- -------- -------- -------- -------- --------
&lt;GEOG_CITY: Canberra&gt;     11,592.0       NA 38,356.0 3,444.00 41,800.0 11,592.0 53,392.0 53,392.0
&lt;GEOG_CITY: Sydney&gt;             NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_CITY: Darwin&gt;       24,868.0       NA 22,104.0 32,667.0 54,771.0 24,868.0 79,639.0 79,639.0
&lt;GEOG_CITY: Brisbane&gt;     49,556.0       NA 48,239.0 24,285.0 72,524.0 49,556.0  122,080  122,080
&lt;GEOG_CITY: Adelaide&gt;           NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_CITY: Hobart&gt;       17,223.0       NA 18,872.0 48,780.0 67,652.0 17,223.0 84,875.0 84,875.0
&lt;GEOG_CITY: Melbourne&gt;          NA 22,000.0       NA       NA       NA 22,000.0 22,000.0 22,000.0
&lt;GEOG_CITY: Perth&gt;              NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_STATE: ACT&gt;         11,592.0       NA 38,356.0 3,444.00 41,800.0 11,592.0 53,392.0 53,392.0
&lt;GEOG_STATE: NSW&gt;               NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_STATE: NT&gt;          24,868.0       NA 22,104.0 32,667.0 54,771.0 24,868.0 79,639.0 79,639.0
&lt;GEOG_STATE: QLD&gt;         49,556.0       NA 48,239.0 24,285.0 72,524.0 49,556.0  122,080  122,080
&lt;GEOG_STATE: SA&gt;                NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_STATE: TAS&gt;         17,223.0       NA 18,872.0 48,780.0 67,652.0 17,223.0 84,875.0 84,875.0
&lt;GEOG_STATE: VIC&gt;               NA 22,000.0       NA       NA       NA 22,000.0 22,000.0 22,000.0
&lt;GEOG_STATE: WA&gt;                NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_AREA: Aust State&gt;   66,779.0 22,000.0 67,111.0 73,065.0  140,176 88,779.0  228,955  228,955
&lt;GEOG_AREA: Aust Terr&gt;    36,460.0       NA 60,460.0 36,111.0 96,571.0 36,460.0  133,031  133,031
&lt;GEOG_CONT: Australia&gt;     103,239 22,000.0  127,571  109,176  236,747  125,239  361,986  361,986
</pre>
<p>Because the <code>sales_dims_reg</code> variable is dimensioned by two regular dimensions (rather than by composites or concat dimensions), the values of all of its cells (even those with an <code>NA</code> value) are stored in variable. You can confirm the number of physical values stored in the workspace by issuing the following statement.</p>
<pre>
SHOW OBJ(NUMVALS 'sales_dims_reg')
152.00
</pre>
<p>The result of the statement is that the value <code>152.00</code> displays which indicates that every value in the 152 cells of the <code>sales_dims_reg</code> variable (even the <code>NA</code> values) are stored as part of the variable.</p>
</div>
<!-- class="example" -->
<div id="OLADM2331" class="example">
<p class="titleinexample"><a id="CIHDIHJG"></a>Example 9-99 Defining a Variable Dimensioned by an Uncompressed Composite</p>
<p>Assume that you have created an analytic workspace with the same dimensions, relations, and aggmap as those in <a href="#CIHFFJBF">Example 9-98, "Defining a Variable Dimensioned by Two Regular Dimensions"</a>. Now assume that you define a composite and a variable dimensioned by that composite by issuing the following statements.</p>
<pre>
DEFINE COMP_PROD_GEOG COMPOSITE &lt;PROD GEOG&gt;
DEFINE SALES_DIMS_COMPOSITE VARIABLE NUMBER (12,2) &lt;COMP_PROD_GEOG &lt;PROD GEOG&gt;&gt;
</pre>
<p>Assume that you populate <code>sales_dims_composite</code> with the same base values as you did <code>sales_dims_reg</code> in <a href="#CIHFFJBF">Example 9-98, "Defining a Variable Dimensioned by Two Regular Dimensions"</a>, and that you aggregate <code>sales_dims_composite</code> using the same aggmap (that is, <code>sales_aggmap</code>) and issue the following. REPORT statement for the <code>sales_dims_composite</code> variable.</p>
<pre>
REPORT sales_dims_composite
 
</pre>
<p>A report for the <code>sales_dims_composite</code> variable displays the same 152 cells as the report for the <code>sales_dims_reg</code> variable.</p>
<pre>
                         -------------------------SALES_DIMS_COMPOSITE--------------------------
                          ---------------------------------PROD----------------------------------
                                                                                &lt;PROD_DI
                          &lt;PROD_UP          &lt;PROD_UP &lt;PROD_UP &lt;PROD_FA &lt;PROD_FA    V:    &lt;PROD_TO
                             C:    &lt;PROD_UP    C:       C:     MILY:    MILY:   VideoDiv P: Total
GEOG                      ColorTV&gt; C: BWTV&gt; StndVCR&gt; StrVCR&gt;    VCR&gt;     TV&gt;       &gt;      Prod&gt;
------------------------- -------- -------- -------- -------- -------- -------- -------- --------
&lt;GEOG_CITY: Canberra&gt;     11,592.0       NA 38,356.0 3,444.00 41,800.0 11,592.0 53,392.0 53,392.0
&lt;GEOG_CITY: Sydney&gt;             NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_CITY: Darwin&gt;       24,868.0       NA 22,104.0 32,667.0 54,771.0 24,868.0 79,639.0 79,639.0
&lt;GEOG_CITY: Brisbane&gt;     49,556.0       NA 48,239.0 24,285.0 72,524.0 49,556.0  122,080  122,080
&lt;GEOG_CITY: Adelaide&gt;           NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_CITY: Hobart&gt;       17,223.0       NA 18,872.0 48,780.0 67,652.0 17,223.0 84,875.0 84,875.0
&lt;GEOG_CITY: Melbourne&gt;          NA 22,000.0       NA       NA       NA 22,000.0 22,000.0 22,000.0
&lt;GEOG_CITY: Perth&gt;              NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_STATE: ACT&gt;         11,592.0       NA 38,356.0 3,444.00 41,800.0 11,592.0 53,392.0 53,392.0
&lt;GEOG_STATE: NSW&gt;               NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_STATE: NT&gt;          24,868.0       NA 22,104.0 32,667.0 54,771.0 24,868.0 79,639.0 79,639.0
&lt;GEOG_STATE: QLD&gt;         49,556.0       NA 48,239.0 24,285.0 72,524.0 49,556.0  122,080  122,080
&lt;GEOG_STATE: SA&gt;                NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_STATE: TAS&gt;         17,223.0       NA 18,872.0 48,780.0 67,652.0 17,223.0 84,875.0 84,875.0
&lt;GEOG_STATE: VIC&gt;               NA 22,000.0       NA       NA       NA 22,000.0 22,000.0 22,000.0
&lt;GEOG_STATE: WA&gt;                NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_AREA: Aust State&gt;   66,779.0 22,000.0 67,111.0 73,065.0  140,176 88,779.0  228,955  228,955
&lt;GEOG_AREA: Aust Terr&gt;    36,460.0       NA 60,460.0 36,111.0 96,571.0 36,460.0  133,031  133,031
&lt;GEOG_CONT: Australia&gt;     103,239 22,000.0  127,571  109,176  236,747  125,239  361,986  361,986
</pre>
<p>However, because the <code>sales_dims_comp</code> variable is dimensioned by a composite, the 65 cells that display as <code>NA</code> values are not stored in the variable. You can confirm the number of physical values that are stored in the workspace by issuing the following statement that calls the OBJ function with the NUMVALS keyword on <code>sales_dims_composite</code>.</p>
<pre>
SHOW OBJ(NUMVALS 'sales_dims_composite')
87.00
</pre>
<p>The result of the statement is that the value <code>87.00</code> displays which indicates that only the 87 non-<code>NA</code> values are stored as part of the <code>sales_dims_composite</code> variable.</p>
</div>
<!-- class="example" -->
<div id="OLADM2332" class="example">
<p class="titleinexample"><a id="CIHCCEJI"></a>Example 9-100 Defining a Variable Dimensioned by a Compressed Composite</p>
<p>Assume that you have created an analytic workspace with the same dimensions, relations, and aggmap as those in <a href="#CIHFFJBF">Example 9-98, "Defining a Variable Dimensioned by Two Regular Dimensions"</a>. Now assume that you define a composite and a variable dimensioned by that composite by issuing the following statements.</p>
<pre>
DEFINE CC_COMP_PROD_GEOG COMPOSITE &lt;PROD GEOG&gt; COMPRESSED
DEFINE SALES_DIMS_COMP_COMPOSITE VARIABLE NUMBER (12,0) &lt;CC_COMP_PROD_GEOG &lt;PROD GEOG&gt;&gt;
</pre>
<p>Assume that you populate <code>sales_dims_composite</code> with the same base values as you did <code>sales_dims_reg</code> in <a href="#CIHFFJBF">Example 9-98, "Defining a Variable Dimensioned by Two Regular Dimensions"</a>, and that you aggregate <code>sales_dims_comp_composite</code> using the same aggmap (that is, <code>sales_aggmap</code>). Now you issue the following statement.</p>
<pre>
REPORT sales_dims_comp_composite
 
</pre>
<p>A report for the <code>sales_dims_comp_comp_composite</code> variable displays the same 152 cells as the report for the <code>sales_dims_reg</code> variable.</p>
<pre>
                          -----------------------SALES_DIMS_COMP_COMPOSITE-----------------------
                          ---------------------------------PROD----------------------------------
                                                                                &lt;PROD_DI
                          &lt;PROD_UP          &lt;PROD_UP &lt;PROD_UP &lt;PROD_FA &lt;PROD_FA    V:    &lt;PROD_TO
                             C:    &lt;PROD_UP    C:       C:     MILY:    MILY:   VideoDiv P: Total
GEOG                      ColorTV&gt; C: BWTV&gt; StndVCR&gt; StrVCR&gt;    VCR&gt;     TV&gt;       &gt;      Prod&gt;
------------------------- -------- -------- -------- -------- -------- -------- -------- --------
&lt;GEOG_CITY: Canberra&gt;     11,592.0       NA 38,356.0 3,444.00 41,800.0 11,592.0 53,392.0 53,392.0
&lt;GEOG_CITY: Sydney&gt;             NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_CITY: Darwin&gt;       24,868.0       NA 22,104.0 32,667.0 54,771.0 24,868.0 79,639.0 79,639.0
&lt;GEOG_CITY: Brisbane&gt;     49,556.0       NA 48,239.0 24,285.0 72,524.0 49,556.0  122,080  122,080
&lt;GEOG_CITY: Adelaide&gt;           NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_CITY: Hobart&gt;       17,223.0       NA 18,872.0 48,780.0 67,652.0 17,223.0 84,875.0 84,875.0
&lt;GEOG_CITY: Melbourne&gt;          NA 22,000.0       NA       NA       NA 22,000.0 22,000.0 22,000.0
&lt;GEOG_CITY: Perth&gt;              NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_STATE: ACT&gt;         11,592.0       NA 38,356.0 3,444.00 41,800.0 11,592.0 53,392.0 53,392.0
&lt;GEOG_STATE: NSW&gt;               NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_STATE: NT&gt;          24,868.0       NA 22,104.0 32,667.0 54,771.0 24,868.0 79,639.0 79,639.0
&lt;GEOG_STATE: QLD&gt;         49,556.0       NA 48,239.0 24,285.0 72,524.0 49,556.0  122,080  122,080
&lt;GEOG_STATE: SA&gt;                NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_STATE: TAS&gt;         17,223.0       NA 18,872.0 48,780.0 67,652.0 17,223.0 84,875.0 84,875.0
&lt;GEOG_STATE: VIC&gt;               NA 22,000.0       NA       NA       NA 22,000.0 22,000.0 22,000.0
&lt;GEOG_STATE: WA&gt;                NA       NA       NA       NA       NA       NA       NA       NA
&lt;GEOG_AREA: Aust State&gt;   66,779.0 22,000.0 67,111.0 73,065.0  140,176 88,779.0  228,955  228,955
&lt;GEOG_AREA: Aust Terr&gt;    36,460.0       NA 60,460.0 36,111.0 96,571.0 36,460.0  133,031  133,031
&lt;GEOG_CONT: Australia&gt;     103,239 22,000.0  127,571  109,176  236,747  125,239  361,986  361,986
</pre>
<p>However, because the <code>sales_dims_comp_comp</code> variable is dimensioned by a compressed composite not all of values in all of the cells are stored in the variable. The 65 cells that display as <code>NA</code> values are not stored in variable, Also, the values that are "passed up" the hierarchy are stored only once &mdash; at the lowest level of the hierarchy.</p>
<p>You can confirm the number of physical values stored in the workspace by issuing the following statement that calls the OBJ function with the NUMVALS keyword on <code>sales_dims_comp_composite</code>.</p>
<pre>
SHOW OBJ(NUMVALS 'sales_dims_comp_composite')
38.00
</pre>
<p>The result of the statement is that the value <code>38.00</code> displays which indicates that only 38 values are stored as part of the <code>sales_dims_comp_composite</code> variable. These values are shown in the following table.</p>
<div class="inftblinformalwidemax">
<table class="cellalignment3100" title="Values actually stored as part of the sales_dims_comp_composite variable" summary="This table contains only those values of the sales_dims_comp_composite variable that are stored in the variable&rsquo;s cells." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t105">GEOG</th>
<th class="cellalignment3099" id="r1c2-t105">PROD_UPC:ColorTV</th>
<th class="cellalignment3099" id="r1c3-t105">PROD_UPC:BWTV</th>
<th class="cellalignment3099" id="r1c4-t105">PROD_UPC:StandVCR</th>
<th class="cellalignment3099" id="r1c5-t105">PROD_UPC:StrVCR</th>
<th class="cellalignment3099" id="r1c6-t105">PROD_FAMILY: VCR</th>
<th class="cellalignment3099" id="r1c7-t105">PROD_FAMILY: TV</th>
<th class="cellalignment3099" id="r1c8-t105">PROD_DIV: VideoDiv</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t105" headers="r1c1-t105">GEOG_CITY: Canberra</td>
<td class="cellalignment3095" headers="r2c1-t105 r1c2-t105">11,592.0</td>
<td class="cellalignment3095" headers="r2c1-t105 r1c3-t105">&nbsp;</td>
<td class="cellalignment3095" headers="r2c1-t105 r1c4-t105">38,356.0</td>
<td class="cellalignment3095" headers="r2c1-t105 r1c5-t105">3,444.00</td>
<td class="cellalignment3095" headers="r2c1-t105 r1c6-t105">41,800.0</td>
<td class="cellalignment3095" headers="r2c1-t105 r1c7-t105">&nbsp;</td>
<td class="cellalignment3095" headers="r2c1-t105 r1c8-t105">53,392.0</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t105" headers="r1c1-t105">GEOG_CITY: Darwin</td>
<td class="cellalignment3095" headers="r3c1-t105 r1c2-t105">24,868.0</td>
<td class="cellalignment3095" headers="r3c1-t105 r1c3-t105">&nbsp;</td>
<td class="cellalignment3095" headers="r3c1-t105 r1c4-t105">22,104.0</td>
<td class="cellalignment3095" headers="r3c1-t105 r1c5-t105">32,667.0</td>
<td class="cellalignment3095" headers="r3c1-t105 r1c6-t105">54,771.0</td>
<td class="cellalignment3095" headers="r3c1-t105 r1c7-t105">&nbsp;</td>
<td class="cellalignment3095" headers="r3c1-t105 r1c8-t105">79,639.0</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t105" headers="r1c1-t105">GEOG_CITY: Brisbane</td>
<td class="cellalignment3095" headers="r4c1-t105 r1c2-t105">49,556.0</td>
<td class="cellalignment3095" headers="r4c1-t105 r1c3-t105">&nbsp;</td>
<td class="cellalignment3095" headers="r4c1-t105 r1c4-t105">48,239.0</td>
<td class="cellalignment3095" headers="r4c1-t105 r1c5-t105">24,285.0</td>
<td class="cellalignment3095" headers="r4c1-t105 r1c6-t105">72,524.0</td>
<td class="cellalignment3095" headers="r4c1-t105 r1c7-t105">&nbsp;</td>
<td class="cellalignment3095" headers="r4c1-t105 r1c8-t105">122,080</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t105" headers="r1c1-t105">GEOG_CITY: Hobart</td>
<td class="cellalignment3095" headers="r5c1-t105 r1c2-t105">17,223.0</td>
<td class="cellalignment3095" headers="r5c1-t105 r1c3-t105">&nbsp;</td>
<td class="cellalignment3095" headers="r5c1-t105 r1c4-t105">18,872.0</td>
<td class="cellalignment3095" headers="r5c1-t105 r1c5-t105">48,780.0</td>
<td class="cellalignment3095" headers="r5c1-t105 r1c6-t105">67,652.0</td>
<td class="cellalignment3095" headers="r5c1-t105 r1c7-t105">&nbsp;</td>
<td class="cellalignment3095" headers="r5c1-t105 r1c8-t105">84,875.0</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t105" headers="r1c1-t105">GEOG_CITY: Melbourne</td>
<td class="cellalignment3095" headers="r6c1-t105 r1c2-t105">&nbsp;</td>
<td class="cellalignment3095" headers="r6c1-t105 r1c3-t105">22,000.0</td>
<td class="cellalignment3095" headers="r6c1-t105 r1c4-t105">&nbsp;</td>
<td class="cellalignment3095" headers="r6c1-t105 r1c5-t105">&nbsp;</td>
<td class="cellalignment3095" headers="r6c1-t105 r1c6-t105">&nbsp;</td>
<td class="cellalignment3095" headers="r6c1-t105 r1c7-t105">&nbsp;</td>
<td class="cellalignment3095" headers="r6c1-t105 r1c8-t105">&nbsp;</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t105" headers="r1c1-t105">GEOG_AREA: Aust State</td>
<td class="cellalignment3095" headers="r7c1-t105 r1c2-t105">66,779.0</td>
<td class="cellalignment3095" headers="r7c1-t105 r1c3-t105">&nbsp;</td>
<td class="cellalignment3095" headers="r7c1-t105 r1c4-t105">67,111.0</td>
<td class="cellalignment3095" headers="r7c1-t105 r1c5-t105">73,065.0</td>
<td class="cellalignment3095" headers="r7c1-t105 r1c6-t105">140,176</td>
<td class="cellalignment3095" headers="r7c1-t105 r1c7-t105">88,779.0</td>
<td class="cellalignment3095" headers="r7c1-t105 r1c8-t105">228,955</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r8c1-t105" headers="r1c1-t105">GEOG_AREA: Aust Terr</td>
<td class="cellalignment3095" headers="r8c1-t105 r1c2-t105">36,460.0</td>
<td class="cellalignment3095" headers="r8c1-t105 r1c3-t105">&nbsp;</td>
<td class="cellalignment3095" headers="r8c1-t105 r1c4-t105">60,460.0</td>
<td class="cellalignment3095" headers="r8c1-t105 r1c5-t105">36,111.0</td>
<td class="cellalignment3095" headers="r8c1-t105 r1c6-t105">96,571.0</td>
<td class="cellalignment3095" headers="r8c1-t105 r1c7-t105">&nbsp;</td>
<td class="cellalignment3095" headers="r8c1-t105 r1c8-t105">133,031</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r9c1-t105" headers="r1c1-t105">GEOG_Cont: Australia</td>
<td class="cellalignment3095" headers="r9c1-t105 r1c2-t105">103,239</td>
<td class="cellalignment3095" headers="r9c1-t105 r1c3-t105">&nbsp;</td>
<td class="cellalignment3095" headers="r9c1-t105 r1c4-t105">127,57</td>
<td class="cellalignment3095" headers="r9c1-t105 r1c5-t105">109,176</td>
<td class="cellalignment3095" headers="r9c1-t105 r1c6-t105">236,747</td>
<td class="cellalignment3095" headers="r9c1-t105 r1c7-t105">125,239</td>
<td class="cellalignment3095" headers="r9c1-t105 r1c8-t105">361,986</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformalwidemax" --></div>
<!-- class="example" -->
<div id="OLADM2333" class="example">
<p class="titleinexample"><a id="CHDIBFDG"></a>Example 9-101 Defining a Variable with Partitions</p>
<p>Assume that you want to define a <code>sales</code> variable that is dimensioned by product and time and that is partitioned so that each year's data is in a separate partition.</p>
<p>Assume that the analytic workspace contains a <code>products</code> dimension, a <code>time</code> dimension that is a simple hierarchical dimension with three levels of data (day, month, and year), and a <code>time_parentrel</code> relation that represents the child-parent relationships between the values of time.</p>
<pre>
DEFINE TIME DIMENSION TEXT
DEFINE PRODUCT DIMENSION TEXT
DEFINE TIME_PARENTREL RELATION TIME &lt;TIME&gt;
</pre>
<p>For simplicity's sake, in this example the <code>time</code> and <code>product</code> dimensions are only partially populated and have only the following values.</p>
<pre>
TIME
--------------
2003
2002
Dec2003
Jan2003
Dec2002
Jan2002
31Dec2003
01Dec2003
31Jan2003
01Jan2003
31Dec2002
01Dec2002
31Jan2002
01Jan2002

PRODUCT
-------
00001
00002
</pre>
<p>To create the partitioned variable, take the following steps:</p>
<ol>
<li>
<p>Define a partition template that defines one partition for each year's data.</p>
<pre>
DEFINE partition_sales_by_year PARTITION TEMPLATE &lt;time product&gt; -
PARTITION BY LIST (time)(-
PARTITION time_2003 VALUES ('2003', 'Dec2003', 'Jan2003', '31Dec2003', '01Dec2003', '31Jan2003', '01Jan2003') &lt;time product&gt;-
PARTITION time_2002 VALUES ('2002', 'Dec2002', 'Jan2002', '31Dec2002', '01Dec2002', '31Jan2002', '01Jan2002') &lt;time product&gt;)
</pre>
<p>(note that for simplicity's sake, only some of each year's dimension values are specified for each partition in this example. Typically, when you want to specify a large number of values for a partition, you do not do so within the DEFINE PARTITION STATEMENT statement. Instead, you define the partition without specifying any values, and then later specify the values using <a href="dml_commands_2016.htm#CIHCFGGE">MAINTAIN ADD TO PARTITION</a> or <a href="dml_commands_2016.htm#CIHBDFHF">MAINTAIN MOVE TO PARTITION</a> statements as illustrated in <a href="dml_commands_2016.htm#CCDDADAJ">Example 10-53, "Specifying the Values of a Partition Using Valuesets"</a>.)</p>
</li>
<li>
<p>Define a partitioned <code>sales</code> variable with the partitions defined by the partition template named <code>partition_sales_by_year</code>.</p>
<pre>
DEFINE sales DECIMAL &lt;partition_sales_by_year&lt;time product&gt;&gt;
</pre></li>
<li>
<p>After you populate sales with day values, you can issue the following REPORT statement to see which <code>sales</code> values are in which partition.</p>
<pre>
REPORT DOWN PARTITION(partition_sales_by_year) time product sales
 
PARTITION(PARTITION_SALES_BY_YEAR)     TIME     PRODUCT     SALES
----------------------------------- ---------- ---------- ----------
TIME_2003                           2003       00001              NA
TIME_2003                           Dec2003    00001              NA
TIME_2003                           Jan2003    00001              NA
TIME_2003                           31Dec2003  00001           14.78
TIME_2003                           01Dec2003  00001           15.52
TIME_2003                           31Jan2003  00001           13.61
TIME_2003                           01Jan2003  00001           10.39
TIME_2003                           2003       00002              NA
TIME_2003                           Dec2003    00002              NA
TIME_2003                           Jan2003    00002              NA
TIME_2003                           31Dec2003  00002           16.05
TIME_2003                           01Dec2003  00002           12.27
TIME_2003                           31Jan2003  00002           10.83
TIME_2003                           01Jan2003  00002           11.07
TIME_2002                           2002       00001              NA
TIME_2002                           Dec2002    00001              NA
TIME_2002                           Jan2002    00001              NA
TIME_2002                           31Dec2002  00001           18.80
TIME_2002                           01Dec2002  00001           13.64
TIME_2002                           31Jan2002  00001           12.41
TIME_2002                           01Jan2002  00001           16.97
TIME_2002                           2002       00002              NA
TIME_2002                           Dec2002    00002              NA
TIME_2002                           Jan2002    00002              NA
TIME_2002                           31Dec2002  00002           17.47
TIME_2002                           01Dec2002  00002           16.58
TIME_2002                           31Jan2002  00002           18.94
TIME_2002                           01Jan2002  00002           18.36
</pre></li>
</ol>
</div>
<!-- class="example" -->
<div id="OLADM2334" class="example">
<p class="titleinexample"><a id="sthref4128"></a>Example 9-102 Defining a Fixed-Width TEXT Variable</p>
<p>The following statement defines a TEXT variable named <code>lastname</code> dimensioned by <code>employee</code>. Values in <code>lastname</code> are limited to 20 characters, so that longer values are truncated.</p>
<pre>
DEFINE lastname TEXT &lt;employee&gt; WIDTH 20 
</pre></div>
<!-- class="example" -->
<div id="OLADM2335" class="example">
<p class="titleinexample"><a id="CHDHBDIF"></a><a id="i1015369"></a>Example 9-103 Defining a Variable That Uses a Named B-Tree Composite</p>
<p>Assume that you have the following dimensions in your analytic workspace.</p>
<pre>
DEFINE month DIMENSION TEXT
DEFINE product DIMENSION TEXT
DEFINE region DIMENSION TEXT
</pre>
<p><a id="sthref4129"></a><a id="sthref4130"></a><a id="sthref4131"></a><a id="sthref4132"></a><a id="sthref4133"></a><a id="sthref4134"></a>When your company does promotional marketing for certain products in some but not all regions, then your variable data is sparse along the <code>product</code> and <code>region</code> dimensions. Therefore, suppose you define a composite named <code>proddist</code>, whose base dimensions are <code>product</code> and <code>region</code>. There are dimension-value combinations in the composite only for those values that have data. For example, when you run a promotion for tents but not skis, then the composite includes the tents and region combinations, but not the skis and region combinations.</p>
<p>The following statement creates a b-tree composite named <code>proddist</code> whose base dimensions are <code>product</code> and <code>district</code>, and a variable called <code>promo</code> that is dimensioned by <code>month</code> and <code>proddist</code>.</p>
<pre>
DEFINE proddist COMPOSITE &lt;product region&gt;
DEFINE promo VARIABLE INTEGER &lt;month proddist &lt;product district&gt;&gt;
</pre>
<p>For simplicity's sake assume that you have only stored the following dimension data in your analytic workspace.</p>
<pre>
PRODUCT
--------------
Tents
Skis
 
REGION
--------------
Northeast
Southwest
 
MONTH
--------------
Jan2003
Feb2003
Mar2003
Apr2003
May2003
Jun2003
Jul2003
Aug2003
Sep2003
Oct2003
Nov2003
Dec2003
</pre>
<p>You decide to run a promotional sales for skis in the Northeast region in the month of September, 2003 at a cost of $5,000. Once you populate <code>promo</code> with this, <code>promo</code> contains only 12 cells&mdash;each cell is dimensioned by a value of <code>month</code> and the composite tuple value of <code>&lt;'Skis' 'Northeast'&gt;</code> for <code>proddist</code>. The cell for September 2003 contains the value $5,000, and all of the other cells contain <code>NA</code>. No other NA values are stored in promo; no cells are created for any other values of <code>product</code> or <code>region</code>.</p>
</div>
<!-- class="example" -->
<div id="OLADM2336" class="example">
<p class="titleinexample"><a id="BGEEHAEJ"></a>Example 9-104 Defining a Variable with Null Tracking</p>
<p>Assume that you have the following objects defined in your analytic workspace.</p>
<pre>
DEFINE GEOG DIMENSION TEXT
LD A dimension with a simple hierarchy for geography

DEFINE geog_levellist DIMENSION TEXT
LD List of Levels in in the hierarchy of the geog dimension

DEFINE GEOG_PARENTREL RELATION GEOG &lt;GEOG&gt;
LD Self-relation for geog showing parents of each value in the hierarchy

DEFINE GEOG_LEVELREL RELATION GEOG_LEVELLIST &lt;GEOG&gt;
LD Level of each dimension member for geog

DEFINE product DIMENSION TEXT
LD A nonhierarchical dimension

DEFINE time DIMENSION TEXT
LD A hierarchical text dimension for time

DEFINE time_levellist DIMENSION TEXT
LD List of Levels in hierarchy of the time dimension

DEFINE time_parentrel RELATION time &lt;time&gt;
LD A self-relation for time show parents of each value in the hierarchy

DEFINE TIME_LEVELREL RELATION TIME_LEVELLIST &lt;TIME&gt;
LD Level of each dimension member for time

DEFINE prod_geog COMPOSITE &lt;product geog&gt; COMPRESSED
</pre>
<p>Now assume that you define a <code>sales</code> variable that you want to have dimensioned by <code>time</code> and the <code>prod_geog</code> composite. You want this variable to have null tracking because you eventually populate it using SQL IMPORT and you know that some facts in the fact table have null values. To do this you issue the following statement that includes the WITH NULLTRACKING phrase.</p>
<pre>
DEFINE sales VARIABLE DECIMAL &lt;time prod_geog&lt;product geog&gt;&gt; WITH NULLTRACKING
</pre>
<p>For testing purposes, you populate the variable using the RANDOM function. After you populate the variable in this way, you issue a report on it that shows the NA values in the variable.</p>
<pre>
REPORT DOWN time ACROSS geog: sales
 
PRODUCT: TVs
               -----------------------SALES-----------------------
               -----------------------GEOG------------------------
TIME              Boston    Springfield    Hartford    All Places
-------------- ------------ ------------ ------------ ------------
2007                     NA           NA           NA           NA
2008                     NA           NA           NA           NA
All years                NA           NA           NA           NA
Jan07                    NA           NA           NA           NA
Feb07                    NA           NA           NA           NA
Mar07                    NA           NA           NA           NA
Apr07                    NA           NA           NA           NA
May07                    NA           NA           NA           NA
Jun07                    NA           NA           NA           NA
Jul07                    NA           NA           NA           NA
Aug07                    NA           NA           NA           NA
Sep07                    NA           NA           NA           NA
Oct07                    NA           NA           NA           NA
Nov07                    NA           NA           NA           NA
Dec07                    NA           NA           NA           NA
Jan08                    NA           NA           NA           NA
Feb08                    NA           NA           NA           NA
Mar08                    NA           NA           NA           NA
Apr08                    NA           NA           NA           NA
May08                    NA           NA           NA           NA
Jun08                    NA           NA           NA           NA
Jul08                    NA           NA           NA           NA
Aug08                    NA           NA           NA           NA
Sep08                    NA           NA           NA           NA
Oct08                    NA           NA           NA           NA
Nov08                    NA           NA           NA           NA
Dec08                    NA           NA           NA           NA
 
PRODUCT: Radios
               -----------------------SALES-----------------------
               -----------------------GEOG------------------------
TIME              Boston    Springfield    Hartford    All Places
-------------- ------------ ------------ ------------ ------------
2007                     NA           NA           NA           NA
2008                     NA           NA           NA           NA
All years                NA           NA           NA           NA
Jan07                 24.59        23.70        33.12        28.65
Feb07                 22.78        21.42        26.28        37.06
Mar07                 25.74        32.08        22.75        24.62
Apr07                 22.23        23.21        20.79        28.68
May07                 20.51        29.71        30.35        33.05
Jun07                 34.43        35.96        33.85        39.34
Jul07                 24.86        38.02        36.78        31.22
Aug07                 39.05        21.08        35.80        33.81
Sep07                 34.38        21.69        25.04        33.40
Oct07                 33.82        39.27        20.28        24.39
Nov07                 25.48        23.03        32.45        39.94
Dec07                 25.14        30.66        33.75        23.37
Jan08                    NA           NA           NA           NA
Feb08                    NA           NA           NA           NA
Mar08                    NA           NA           NA           NA
Apr08                    NA           NA           NA           NA
May08                    NA           NA           NA           NA
Jun08                    NA           NA           NA           NA
Jul08                    NA           NA           NA           NA
Aug08                    NA           NA           NA           NA
Sep08                    NA           NA           NA           NA
Oct08                    NA           NA           NA           NA
Nov08                    NA           NA           NA           NA
Dec08                    NA           NA           NA           NA
</pre>
<p>For testing purposes, you also generate a report using the NAFLAG function to retrieve the type of NAs that are in the variable. As the following report shows, because it was populated using RANDOM, all of the NAs are the typical NA values; they are not NA2 values.</p>
<pre>
REPORT DOWN time ACROSS geog: NAFLAG(sales)
 
PRODUCT: TVs
               -------------------NAFLAG(SALES)-------------------
               -----------------------GEOG------------------------
TIME              Boston    Springfield    Hartford    All Places
-------------- ------------ ------------ ------------ ------------
2007                      1            1            1            1
2008                      1            1            1            1
All years                 1            1            1            1
Jan07                     1            1            1            1
Feb07                     1            1            1            1
Mar07                     1            1            1            1
Apr07                     1            1            1            1
May07                     1            1            1            1
Jun07                     1            1            1            1
Jul07                     1            1            1            1
Aug07                     1            1            1            1
Sep07                     1            1            1            1
Oct07                     1            1            1            1
Nov07                     1            1            1            1
Dec07                     1            1            1            1
Jan08                     1            1            1            1
Feb08                     1            1            1            1
Mar08                     1            1            1            1
Apr08                     1            1            1            1
May08                     1            1            1            1
Jun08                     1            1            1            1
Jul08                     1            1            1            1
Aug08                     1            1            1            1
Sep08                     1            1            1            1
Oct08                     1            1            1            1
Nov08                     1            1            1            1
Dec08                     1            1            1            1
 
PRODUCT: Radios
               -------------------NAFLAG(SALES)-------------------
               -----------------------GEOG------------------------
TIME              Boston    Springfield    Hartford    All Places
-------------- ------------ ------------ ------------ ------------
2007                      1            1            1            1
2008                      1            1            1            1
All years                 1            1            1            1
Jan07                     0            0            0            0
Feb07                     0            0            0            0
Mar07                     0            0            0            0
Apr07                     0            0            0            0
May07                     0            0            0            0
Jun07                     0            0            0            0
Jul07                     0            0            0            0
Aug07                     0            0            0            0
Sep07                     0            0            0            0
Oct07                     0            0            0            0
Nov07                     0            0            0            0
Dec07                     0            0            0            0
Jan08                     1            1            1            1
Feb08                     1            1            1            1
Mar08                     1            1            1            1
Apr08                     1            1            1            1
May08                     1            1            1            1
Jun08                     1            1            1            1
Jul08                     1            1            1            1
Aug08                     1            1            1            1
Sep08                     1            1            1            1
Oct08                     1            1            1            1
Nov08                     1            1            1            1
Dec08                     1            1            1            1
</pre>
<p>Again, for testing purposes, you use the NA function to set an NA2 bit on the variable cells dimensioned by the months of 2008. The following code shows the result of issuing a SHOW of the NA2 function and using that function to set the NA2 bit on the cells dimensioned by the months in 2008.</p>
<pre>
SHOW NA2
NA

LIMIT time TO 'Jan08' 'Feb08' 'Mar08' 'Apr08' 'May08' 'Jun08' 'Jul08' 'Aug08' 'Sep08' 'Oct08' 'Nov08' 'Dec08'
saleswithnull= NA2
 
</pre>
<p>For brevity's sake assume that your test now issues the following three LIMIT statements and then reports on the sales variable and the NAFLAG function against the sales variable. As the NAFLAG report illustrate, the value <code>Jan08</code> which is a month to which an NA2 value was assigned returns the value of <code>2</code> for NAFLAG, while the NAFLAG report still returns the value of <code>1</code> for the year <code>2008</code>.</p>
<pre>
LIMIT product to 'Radios'
LIMIT time TO 'Jan08' '2008'
LIMIT geog TO 'Boston' 'All Places'

REPORT DOWN time ACROSS geog: sales
 
PRODUCT: Radios
               ----------SALES----------
               ----------GEOG-----------
TIME              Boston     All Places
-------------- ------------ ------------
Jan08                    NA           NA
2008                     NA           NA

REPORT DOWN time ACROSS geog: NAFLAG(sales)
 
</pre>
<pre>
PRODUCT: Radios
               ------NAFLAG(SALES)------
               ----------GEOG-----------
TIME              Boston     All Places
-------------- ------------ ------------
Jan08                     2            2
2008                      1            1
</pre>
<p>Now assume that you issue the following code to remove the NA2 bits from the sales variable.</p>
<pre>
CHGDFN sales DROP NULLTRACKING
</pre>
<p>A DESCRIBE of the sales variable shows that it no longer has the WITH NULLTRACKING phrase in its definition while a report of the results of NAFLAG show that the NA values are now just the typical NA values without an NA2 bit.</p>
<pre>
DESCRIBE sales
 
DEFINE SALES VARIABLE DECIMAL &lt;TIME PROD_GEOG &lt;PRODUCT GEOG&gt;&gt;

REPORT DOWN time ACROSS geog: sales
 
PRODUCT: Radios
               ----------SALES----------
               ----------GEOG-----------
TIME              Boston     All Places
-------------- ------------ ------------
Jan08                    NA           NA
2008                     NA           NA

"Report on the type of NA values in the sales variable
REPORT DOWN time ACROSS geog: NAFLAG(sales)
 
PRODUCT: Radios
               ------NAFLAG(SALES)------
               ----------GEOG-----------
TIME              Boston     All Places
-------------- ------------ ------------
Jan08                     1            1
2008                      1            1
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="OLADM799" class="refsect2"><a id="i78538"></a>
<hr />
<h2 class="refsect2">DEFINE WORKSHEET</h2>
<p><a id="sthref4135"></a><a id="sthref4136"></a><a id="sthref4137"></a><a id="sthref4138"></a><a id="sthref4139"></a>The DEFINE command with the WORKSHEET keyword adds a new worksheet <a id="sthref4140"></a>object to an analytic workspace. A worksheet, like a spreadsheet, is a two-dimensional object that is dimensioned by a worksheet row and a worksheet column. It can temporarily store data that you want to transfer between spreadsheet packages and workspace dimensions and variables.</p>
<p>When you first define a worksheet, it does not contain any values. You can populate a worksheet with values from an existing spreadsheet by using an <a href="dml_commands_2006.htm#i78926">IMPORT (spreadsheet)</a> statement or add or delete values from worksheet row and a worksheet column dimensions with a MAINTAIN statement.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4141"></a>Syntax</p>
<p class="synopsis">DEFINE&nbsp;<span class="italic">name&nbsp;</span>WORKSHEET&nbsp;[&lt;<span class="italic">column-dim&nbsp;row-dim</span>&gt;]&nbsp;[TEMP]&nbsp;[AW&nbsp;<span class="italic">workspace</span>]&nbsp;[SESSION]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4142"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span></dt>
<dd>
<p>The name of the object you are defining. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>WORKSHEET</dt>
<dd>
<p>The object type when you are defining a worksheet.</p>
</dd>
<dt>&lt;<span class="italic">column-dim row-dim</span>&gt;</dt>
<dd>
<p>The names of the dimensions of the worksheet. When you supply this argument, you must give the names of two <code>INTEGER</code> dimensions for <span class="italic">column-dim</span> and <span class="italic">row-dim.</span> When you omit this argument, the worksheet is dimensioned automatically by <code>WKSCOL</code> and <code>WKSROW</code>. See <a href="#i1014088">"Worksheet Dimensions"</a> for more information.</p>
</dd>
<dt>TEMP</dt>
<dd>
<p>Indicates that the worksheet is only temporary. The worksheet is defined in the specified workspace and can contain values during the current session. However, when you update and commit, only the definition of the worksheet is saved. When you end your session or switch to another workspace, the data values are discarded.</p>
</dd>
<dt>AW <span class="italic">workspace</span></dt>
<dd>
<p>The name of an attached workspace in which you want to define the worksheet. The worksheet must be defined in the same workspace as its dimensions. For general information about this argument, see the main entry for the <a href="#i78478">DEFINE</a> command.</p>
</dd>
<dt>SESSION</dt>
<dd>
<p>Specifies that the object exists only in the current session. When the session ends, the object no longer exists. The behavior specified by SESSION is different than the behavior specified by the TEMP keyword which is that the values are temporary but the object definition remains in the workspace in which you create it.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="g1053553"></a>Usage Notes</p>
<p class="subhead2"><a id="i1014088"></a><a id="OLADM2337"></a>Worksheet Dimensions</p>
<p><a id="sthref4143"></a><a id="sthref4144"></a>A worksheet must always be dimensioned by two dimensions that represent a worksheet row and a worksheet column. The worksheet row and worksheet column dimensions can either be automatically created by Oracle OLAP or explicitly created by you:</p>
<ul>
<li>
<p>If you have not created worksheet row and worksheet column dimensions and specified their names in the <span class="italic">column-dim</span> and <span class="italic">row-dim</span> arguments of DEFINE WORKSHEET, then Oracle OLAP automatically creates the following dimensions:</p>
<ul>
<li>
<p>For the worksheet row, an INTEGER dimension named <code>WKSROW</code> with values from 1 to 63.</p>
</li>
<li>
<p>For the worksheet column, an INTEGER dimension named <code>WKSROW</code> with values from 1 to 63.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
When <code>WKSCOL</code> and <code>WKSROW</code> already exist in any attached workspace, Oracle OLAP cannot create them in the current worksheet. In this case, the DEFINE WORKSHEET command fails to create a worksheet with these default dimensions. (Note, also, that <code>WKSCOL</code> and <code>WKSROW</code> do not appear in a worksheet description generated using DESCRIBE.)</div>
</li>
<li>
<p>You create worksheet row and a worksheet column dimensions the same way you create any other simple dimension by issuing the following statements:</p>
<ol>
<li>
<p>Create two simple INTEGER dimensions using a <a href="#i1010637">DEFINE DIMENSION (simple)</a> statement. One dimension is for row numbers and the other is for column numbers.</p>
</li>
<li>
<p>Using MAINTAIN statements, populate one dimension with integers that represent row numbers and populate the other with integers that represent column numbers.</p>
</li>
</ol>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4145"></a>Examples</p>
<div id="OLADM2338" class="example">
<p class="titleinexample"><a id="sthref4146"></a>Example 9-105 Defining a Worksheet</p>
<p>These statements define a temporary worksheet named <code>travelexp</code>, which is dimensioned by <code>columns</code> and <code>rows</code>.</p>
<pre>
DEFINE itemsheet WORKSHEET
DEFINE columns INT DIMENSION
MAINTAIN columns ADD 5
DEFINE rows INT DIMENSION
MAINTAIN rows ADD 10
DEFINE travelexp WORKSHEET &lt;columns rows&gt; TEMPORARY
</pre></div>
<!-- class="example" -->
<div id="OLADM2339" class="example">
<p class="titleinexample"><a id="sthref4147"></a>Example 9-106 Importing Spreadsheet Data</p>
<p>You can import data from a spreadsheet to a worksheet. When all the cells contain the same type of data, you can use UNRAVEL to transfer the data to a variable with one statement. You can also limit the worksheet dimensions to a smaller group of cells and use UNRAVEL to transfer each group to a separate variable. To transfer imported data from a worksheet named <code>itemsheet</code> to a variable named <code>items</code>, you might use the following statements.</p>
<pre>
DEFINE itemsheet WORKSHEET
IMPORT itemsheet FROM dif FILE 'file name'
LIMIT WKSCOL TO FIRST 3
LIMIT WKSROW TO FIRST 10
items = UNRAVEL(itemsheet) 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3088">
<tr>
<td class="cellalignment3095">
<table class="cellalignment3093">
<tr>
<td class="cellalignment3092"><a href="dml_commands_1031.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3092"><a href="dml_commands_1033.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3097">
<table class="cellalignment3091">
<tr>
<td class="cellalignment3092"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3092"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3092"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3092"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3092"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3092"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
