<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>FILEREAD</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 742" />
<meta name="dcterms.created" content="2013-11-14T21:21:46Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="OLAP DML Reference" />
<meta name="dcterms.identifier" content="E17122-08" />
<meta name="dcterms.isVersionOf" content="OLADM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="dml_commands_1048.htm" title="Previous" type="text/html" />
<link rel="Next" href="dml_commands_1050.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e17122.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">465/593</span> <!-- End Header --><a id="i79481"></a>
<hr />
<div id="OLADM818" class="refsect1">
<h1 class="refsect1">FILEREAD</h1>
<p><a id="sthref4306"></a><a id="sthref4307"></a><a id="sthref4308"></a><a id="sthref4309"></a><a id="sthref4310"></a><a id="sthref4311"></a>The FILEREAD command reads records from an input file and processes data according to action statements that you specify. FILEREAD handles binary data, packed decimal data, and text. It can handle decimal data written in E-notation (such as <code>.1E+9</code>) or M-notation (such as <code>10M</code>). It can convert the data to any appropriate data type before storing it in an Oracle OLAP variable, dimension, composite, or relation.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4312"></a>Syntax</p>
<p class="synopsis">FILEREAD&nbsp;<span class="italic">fileunit&nbsp;</span>[STOPAFTER&nbsp;<span class="italic">n</span>]&nbsp;[<span class="italic">file-format</span>]&nbsp;{[<span class="italic">attribute...</span>]&nbsp;<span class="italic">action-statement1</span>}</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[[<span class="italic">attribute...</span>]&nbsp;<span class="italic">action-statementN</span>...]</p>
<p>where:</p>
<ul>
<li>
<p><span class="syntaxinlineitalic">file-format</span> specifies the format of the records in the input file. Use one of the following:</p>
<dl>
<dd><span class="syntaxinline">RULED</span></dd>
<dd><span class="syntaxinline">CSV&nbsp;[DELIMITER</span><span class="syntaxinlineitalic">&nbsp;dchar</span><span class="syntaxinline">]</span></dd>
<dd><span class="syntaxinline">STRUCTURED&nbsp;[TEXTSTART&nbsp;</span><span class="syntaxinlineitalic">schar</span><span class="syntaxinline">]&nbsp;[TEXTEND</span> <span class="syntaxinlineitalic">echar</span><span class="syntaxinline">] [DELIMITER</span> <span class="syntaxinlineitalic">dchar</span><span class="syntaxinline">]&nbsp;</span></dd>
</dl>
</li>
<li>
<p><span class="syntaxinlineitalic">attribute</span> provide information that is used by action statements.</p>
<dl>
<dd>{COLUMN|COL}&nbsp;<span class="italic">n</span></dd>
<dd>{SPACE|SP}&nbsp;<span class="italic">n</span></dd>
<dd>{FIELD|FLD}&nbsp;<span class="italic">n</span></dd>
<dd>{WIDTH|W}&nbsp;<span class="italic">n</span></dd>
<dd><span class="italic">data-type</span></dd>
<dd><span class="italic">dimension-value-handling</span></dd>
<dd>BINARY | PACKED | <span class="underline">SYMBOLIC</span></dd>
<dd><span class="underline">TRANSLATE</span> | NOTRANSLATE</dd>
<dd>SCALE&nbsp;<span class="italic">n</span></dd>
<dd>ZPUNCH | ZPUNCHL</dd>
<dd>LSET&nbsp;'<span class="italic">text</span>'</dd>
<dd>RSET&nbsp;'<span class="italic">text</span>'</dd>
<dd><span class="italic">stripping</span></dd>
<dd>NAVALUE&nbsp;<span class="italic">val</span></dd>
<dd>NASPELL&nbsp;'<span class="italic">text</span>'</dd>
<dd>ZSPELL&nbsp;'<span class="italic">text</span>'</dd>
<dd>YESSPELL&nbsp;'<span class="italic">text</span>'</dd>
<dd>NOSPELL&nbsp;'<span class="italic">text</span>'</dd>
<dd>ZEROFILL</dd>
</dl>
<p>For information on the placement of attributes in action statements, see <a href="#i81345">"Placement of Field Attributes in FILEREAD"</a>.</p>
</li>
<li>
<p><span class="syntaxinlineitalic">action-statements</span> perform processing, such as assignment statements and IF statements. An <span class="italic">action-statement</span> can be one of the following:</p>
<dl>
<dd><span class="syntaxinlineitalic">assignment-statement</span></dd>
<dd>IF-<span class="syntaxinlineitalic">statement</span></dd>
<dd>&nbsp;<span class="syntaxinlineitalic">SELECT-statement</span></dd>
<dd>ACROSS-<span class="syntaxinlineitalic">statement</span><span class="syntaxinline">:</span> <span class="syntaxinlineitalic">action-statement</span></dd>
<dd><span class="syntaxinline">&lt;</span><span class="syntaxinlineitalic">action-statement-group</span><span class="syntaxinline">&gt;</span></dd>
</dl>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4313"></a>Parameters</p>
<dl>
<dt><span class="italic">fileunit</span></dt>
<dd>
<p>A fileunit number assigned to a file that is opened for reading (READ mode) by a previous call to the FILEOPEN function.</p>
</dd>
<dt>STOPAFTER <span class="italic">n</span></dt>
<dd>
<p>The number of records to read from the input file. When STOPAFTER is left out, or specified with a negative number or an <code>NA</code>, FILEREAD processes the whole file. See <a href="#i81332">"STOPAFTER Keyword"</a>.</p>
</dd>
<dt>RULED</dt>
<dd>
<p>Specifies that the record is organized in fixed-width columns, that is, character-by-character or byte-by-byte. All lines must have the same format. RULED is the default file format. Use the COLUMN, SPACE, and WIDTH attributes to specify the location of the data in the records.</p>
</dd>
<dt>CSV [DELIMITER <span class="italic">dchar</span>]</dt>
<dd>
<p>CSV specifies that the data is in CSV (comma-delimited values) format. You must use the FIELD and SPACE attributes to specify the location of the data in the record.</p>
<p><span class="italic">dchar</span> is a text expression that specifies a single character that you want Oracle OLAP to interpret as the general field delimiter in a structured file. Oracle OLAP uses the general field delimiter to identify both numeric and text fields. The default character is a comma (<code>,</code>).</p>
<p>CSV files are a common output format that is generated by spreadsheet programs. Each line of characters in a source file is treated as a single record. Each field in the record is separated by a comma by default. You can use the DELIMITER keyword to specify some other character as field delimiter.</p>
<p>When a group of characters in the input record is enclosed by double quotation marks, all of the following rules apply:</p>
<ul>
<li>
<p>When the group includes the delimiter character, it is treated as a literal instead of as a delimiter.</p>
</li>
<li>
<p>When a double quotation mark (<code>"</code>) is included in the group of characters, then it must be followed by another double quotation mark.</p>
</li>
<li>
<p>When a linefeed character (<code>\n</code>) is included in the group of characters, then it is ignored.</p>
</li>
<li>
<p>Any spaces or tabs that occur before or after the double quotation marks that enclose the group of characters is ignored.</p>
</li>
</ul>
</dd>
<dt>STRUCTURED</dt>
<dd>
<p>Specifies that the record is in "structured prn" format. You must use the FIELD and SPACE attributes to specify the location of the data in the record.</p>
<p>Structured files are a common output format for PC software. They are text files in which the fields are composed of groups of characters. A group of characters is defined by two conditions: text enclosed in double quotes<span class="italic">,</span> or a sequence of numbers that is uninterrupted except by a decimal point<span class="italic">.</span> Consequently, an unquoted sequence of numbers containing a decimal point is stored as a single value; however, an unquoted sequence of numbers containing commas or other delimiters to mark off thousands is split into several values rather than stored as a single value. Any unquoted, non-numeric characters are ignored, except a minus sign that immediately precedes a number is considered to be part of the number. A space cannot separate the minus sign from the number.</p>
<p>When your file format does not conform to the pattern described here, you can use the TEXTSTART, TEXTEND, and DELIMITER keywords that let you customize the delimiters FILEREAD uses to identify the start and end of each field.</p>
</dd>
<dt>TEXTSTART <span class="italic">schar</span></dt>
<dd>
<p>Specifies a single character that you want Oracle OLAP to interpret as the start of a text field in a structured file. <span class="italic">schar</span> is the value of the character. The default character is a double quote (<code>"</code>).</p>
</dd>
<dt>TEXTEND <span class="italic">echar</span></dt>
<dd>
<p>Specifies a single character that you want Oracle OLAP to interpret as the end of a text field in a structured file. <span class="italic">echarr</span> is the value of the character. The default character is a double quote (<code>"</code>).</p>
</dd>
<dt>DELIMITER <span class="italic">dchar</span></dt>
<dd>
<p>Specifies a single character that you want Oracle OLAP to interpret as the general field delimiter in a structured file. Oracle OLAP uses the general field delimiter to identify both numeric and text fields. <span class="italic">dchar</span> is the value of the character. The default character is a comma (<code>,</code>).</p>
</dd>
<dt>{COLUMN|COL} <span class="italic">n</span></dt>
<dd>
<p>The column in which the field starts in the input record. By default, field 1 begins in column 1 and subsequent fields begin in the column following the previous field. The current field's default column is the sum of the previous field's first column plus its width plus any spaces specified for the current field.</p>
<div id="OLADM2384" class="tblformalwidemax">
<p class="titleintable"><a id="sthref4314"></a><a id="sthref4315"></a>Table 9-7 File Attributes</p>
<table class="cellalignment3100" title="File Attributes" summary="This table provides the syntax and description of attributes of files." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t123">Syntax</th>
<th class="cellalignment3099" id="r1c2-t123">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t123" headers="r1c1-t123">
<p>{COLUMN|COL} <span class="italic">n</span></p>
</td>
<td class="cellalignment3095" headers="r2c1-t123 r1c2-t123">
<p>The column in which the field starts in the input record. By default, field 1 begins in column 1 and subsequent fields begin in the column following the previous field. The current field's default column is the sum of the previous field's first column plus its width plus any spaces specified for the current field.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t123" headers="r1c1-t123">
<p>{SPACE|SP} <span class="italic">n</span></p>
</td>
<td class="cellalignment3095" headers="r3c1-t123 r1c2-t123">
<p>The number of spaces between a field and the preceding field. In a structured PRN file, the number of fields between the preceding and current field. The default is <code>0</code>.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t123" headers="r1c1-t123">
<p>{FIELD|FLD} <span class="italic">n</span></p>
</td>
<td class="cellalignment3095" headers="r4c1-t123 r1c2-t123">
<p>In a structured PRN file only, the field from which to extract the data.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t123" headers="r1c1-t123">
<p>{WIDTH|W} <span class="italic">n</span></p>
</td>
<td class="cellalignment3095" headers="r5c1-t123 r1c2-t123">
<p>For unstructured records, the number of columns the field occupies in the input record. When there is no default, WIDTH must be included for ruled records or FILEREAD generates an error. The default is derived from the data type according to the following list:</p>
<ul>
<li>
<p>BINARY input format with <code>INTEGER</code>, <code>SHORTINTEGER</code>, or <code>SHORTDECIMAL</code> target data type has a default of 4 columns.</p>
</li>
<li>
<p>BINARY input format with <code>DECIMAL</code> or <code>NUMBER</code> target data type has a default of 8 columns.</p>
</li>
<li>
<p>BINARY input format with <code>BOOLEAN</code> target data type has a default of 2 columns.</p>
</li>
<li>
<p>PACKED input format with any type of target data type has no default.</p>
</li>
<li>
<p>SYMBOLIC input format with <code>ID</code> target data type has a default of 8 columns.</p>
</li>
<li>
<p>SYMBOLIC input format with a target data type that is not <code>ID</code> has no default.</p>
</li>
</ul>
<p>The maximum width is 4,000 characters for text input.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t123" headers="r1c1-t123">
<p><span class="italic">data-type</span></p>
</td>
<td class="cellalignment3095" headers="r6c1-t123 r1c2-t123">
<p>One of the following keywords: INTEGER, SHORTINTEGER, DECIMAL, SHORTDECIMAL, NUMBER, TEXT, ID, DATE, VNF, RAW DATE, BOOLEAN.</p>
<ul>
<li>
<p>For text data, the data type to which the input is converted before it is stored in your analytic workspace.</p>
</li>
<li>
<p>For binary data, the data type of the data in the input record.</p>
</li>
<li>
<p>Except for dimensions of type DAY, WEEK, MONTH, QUARTER, and YEAR, the default is the data type of the target object.</p>
</li>
<li>
<p>For dimensions of type DAY, WEEK, MONTH, QUARTER, and YEAR, the default is VNF.</p>
</li>
<li>
<p>For DATE variables and dimensions of type DAY, WEEK, MONTH, QUARTER, and YEAR, RAW DATE indicates the input values are positive <code>INTEGER</code> values that represent the number of days since December&nbsp;31, 1899, or negative <code>INTEGER</code> values that represent the number of days before December 31, 1899.</p>
</li>
</ul>
<p>See <a href="#i81376">"Specifying a Target Object that has NTEXT Values"</a>.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t123" headers="r1c1-t123">
<p><span class="italic">dimension-value-handling</span></p>
</td>
<td class="cellalignment3095" headers="r7c1-t123 r1c2-t123">
<p>When the target object is a dimension or dimension surrogate, one of the following keyword clauses that specifies whether or not to add new values to the target object:</p>
<ul>
<li>
<p>MATCH</p>
<p>Do not add new values to the dimension or dimension surrogate. Instead, when the target object is a dimension and then values in the input field must match current dimension values. For each record processed, the dimension is temporarily limited to the value in the record. When the value does not exist, FILEREAD generates an error. This attribute also applies when the target object is a dimension surrogate.</p>
</li>
<li>
<p>APPEND [<span class="underline">LAST</span> |FIRST | BEFORE&nbsp;<span class="italic">pos</span> | AFTER&nbsp;<span class="italic">pos</span>]</p>
<p>Add new values to the dimension by appending the values. The field contains new dimension values and may contain existing values as well. New values are added to the dimension list and the status is limited to the current value. The status is set to ALL after FILEREAD finishes. For time dimensions, Oracle OLAP automatically fills in any "missing" periods between the existing ones and the new ones. When the target object is a non-time dimension, you can specify how Oracle OLAP appends the value using one of the following keywords: <span class="underline">LAST</span> which adds the value to the end of the dimension list; FIRST which adds the value to the beginning of the list; BEFORE <span class="italic">pos</span> which adds the value before the specified value or <code>INTEGER</code> position; and AFTER <span class="italic">pos</span> which adds the value after the specified value or <code>INTEGER</code> position.</p>
</li>
<li>
<p>ASSIGN</p>
<p>Add new values to the dimension surrogate by assigning the values. This attribute applies only to a dimension surrogate. It assigns the new value to the surrogate.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r8c1-t123" headers="r1c1-t123">
<p><span class="italic">input-field-format</span></p>
</td>
<td class="cellalignment3095" headers="r8c1-t123 r1c2-t123">
<p>One of the following keywords that specifies the format of the input field:</p>
<ul>
<li>
<p>SYMBOLIC which specifies that the format of the input field is ASCII or EBCDIC text.</p>
</li>
<li>
<p>BINARY which specifies that the format of the input field is binary.</p>
</li>
<li>
<p>PACKED which specifies that the format of the input field is packed decimal.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r9c1-t123" headers="r1c1-t123">
<p>TRANSLATE|NOTRANSLATE</p>
</td>
<td class="cellalignment3095" headers="r9c1-t123 r1c2-t123">
<p>Whether or not Oracle OLAP translates the data from the format of the original operating system, as identified by a FILESET ORIGIN statement. Specify TRANSLATE when you want Oracle OLAP to translate the data; or specify NOTRANSLATE when you do not want Oracle OLAP to translate the data.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r10c1-t123" headers="r1c1-t123">
<p>SCALE <span class="italic">n</span></p>
</td>
<td class="cellalignment3095" headers="r10c1-t123 r1c2-t123">
<p>The number of digits to the right of the assumed decimal or binary point. The default is 0. When the input data is text, a decimal point in the input overrides the number specified by SCALE.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r11c1-t123" headers="r1c1-t123">
<p>ZPUNCH|ZPUNCHL</p>
</td>
<td class="cellalignment3095" headers="r11c1-t123 r1c2-t123">
<p>Provides information about how the input zone is overpunched. Specify ZPUNCH when the input is zone overpunched. Specify ZPUNCHL when the input is zone overpunched on the left.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r12c1-t123" headers="r1c1-t123">
<p>LSET '<span class="italic">text</span>'</p>
</td>
<td class="cellalignment3095" headers="r12c1-t123 r1c2-t123">
<p>For text input and TEXT or ID target objects, adds text to the left of the value before storing. When <span class="italic">text</span> is a multiline value, only the first line is used.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r13c1-t123" headers="r1c1-t123">
<p>RSET '<span class="italic">text</span>'</p>
</td>
<td class="cellalignment3095" headers="r13c1-t123 r1c2-t123">
<p>For text input and TEXT or ID target objects, adds text to the right of the value before storing. When <span class="italic">text</span> is a multiline value, only the first line is used.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r14c1-t123" headers="r1c1-t123">
<p><span class="italic">stripping</span></p>
</td>
<td class="cellalignment3095" headers="r14c1-t123 r1c2-t123">
<p>For text input, one of the following keywords that indicates if spaces or nulls are stripped from input value before storing in the target object:</p>
<ul>
<li>
<p><span class="syntaxinlinebold">NOSTRIP</span></p>
<p>No spaces or nulls are stripped from the input.</p>
</li>
<li>
<p><span class="syntaxinlinebold">STRIP</span></p>
<p>Spaces and nulls are stripped from both left and right of the input.</p>
</li>
<li>
<p><span class="syntaxinlinebold">LSTRIP</span></p>
<p>Spaces and nulls are stripped from the left of the input.</p>
</li>
<li>
<p><span class="syntaxinlinebold">RSTRIP</span></p>
<p>Spaces and nulls are stripped from the right of the input.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r15c1-t123" headers="r1c1-t123">&nbsp;</td>
<td class="cellalignment3095" headers="r15c1-t123 r1c2-t123">&nbsp;</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwidemax" --></dd>
<dt>NAVALUE <span class="italic">val</span></dt>
<dd>
<p>For binary or packed input, specifies that when the input is the specified numeric value, <code>NA</code> is assigned to the target object.</p>
</dd>
<dt>NASPELL '<span class="italic">text</span>'</dt>
<dd>
<p>For text input, specifies that Oracle OLAP stores text as NA. When the input is the specified text, NA is assigned to the target object. Text can be a multiline string listing several possible NA values. In addition to the values specified for text, when the input is NA, then NA is assigned to the target object.</p>
</dd>
<dt>ZSPELL '<span class="italic">text</span>'</dt>
<dd>
<p>For textual numeric input, specifies that Oracle OLAP stores text as 0. When the input is the specified text, zero is assigned to the target object. Text can be a multiline string that lists several possible zero values. In addition to the values specified for text, when the input is <code>0</code>, then <code>0</code> is assigned to the target object.</p>
</dd>
<dt>YESSPELL '<span class="italic">text</span>'</dt>
<dd>
<p>For text input that is BOOLEAN, specifies that Oracle OLAP stores text as YES. When the input is text then YES is assigned to the target object. Text can be a multiline string that lists several possible YES values. In addition to the values specified in <span class="italic">text,</span> when the input is <code>YES</code>, ON, or TRUE, <code>YES</code> is assigned to the target object.</p>
</dd>
<dt>NOSPELL '<span class="italic">text</span>'</dt>
<dd>
<p>For text input that is BOOLEAN, specifies that Oracle OLAP stores text as NO. When the input is text then NO is assigned to the target object. Text can be a multiline string that lists several possible NO values. In addition to the values specified in 'text,' when the input is NO, OFF, or FALSE, NO is assigned to the target object.</p>
</dd>
<dt>ZEROFILL</dt>
<dd>
<p>For text numeric input, specifies that Oracle OLAP fills any spaces in the resulting text with zeros. Any spaces in the input are replaced with zeros. The default is no filling with zeros.</p>
</dd>
<dt><span class="italic">action-statement</span></dt>
<dd>
<p>You may specify one or more action statements to be performed each time a record is retrieved from the input file. Typically, you use action statements to set dimension status and assign data retrieved from the input record to a target object in Oracle OLAP. However, you may specify action statements that do not reference the data in the input record. For example, one of your action statements might be an assignment statement that simply increments a counter. Alternatively, an action statement might use the input data in some kind of processing, but not actually assign it to a target object in Oracle OLAP.</p>
<p>In your list of action statements, <span class="italic">be sure to process dimensions before variables</span>. FILEREAD processes each action statement from left to right for each input record. When an action statement performs dimension processing, the resulting status remains in effect for subsequent action statements. When you do not first specify action statements that limit a variable's dimensions, FILEREAD uses the first value in status to target a cell in the variable. Unless you specify an ACROSS phrase, FILEREAD assigns a single value from a field in an input record to a single cell in an Oracle OLAP variable. By default, FILEREAD does <span class="italic">not</span> loop over a variable's dimensions when assigning data to the variable. See <a href="#i81388">"Field Order"</a>.</p>
<p>Use the VALUE keyword in FILEREAD action statements to represent the value in a particular field of the input record. VALUE represents this data, formatted according to the FILEREAD attributes you have specified. When the field in the record is blank, FILEREAD considers its value to be <code>NA</code>. By default, the data type of VALUE is the data type of the target object. However, you can specify a different data type with an attribute keyword.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you have already specified action statements for use with FILEREAD, you can reuse the code with SQL FETCH and SQL IMPORT by simply adjusting the assignment statements and eliminating the VALUE keyword (if necessary). Most of the FILEREAD attributes (except for the attributes that control dimension processing) are not meaningful for SQL loading and are ignored when executing within SQL FETCH and SQL IMPORT.</div>
</dd>
<dt><span class="italic">assignment-statement</span></dt>
<dd>
<p>An assignment statement lets you assign a value to an Oracle OLAP object. An assignment statement has the following form.</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="italic">object</span> [= <span class="italic">expression</span>]</p>
<p><span class="syntaxinlineitalic">object</span> is the target where the data is assigned and stored. The <span class="italic">object</span> can be an Oracle OLAP variable, dimension, dimension surrogate, composite, or relation.</p>
<p><span class="syntaxinlineitalic">expression</span> is the source of the data value to be assigned to the target.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
In a SQL FETCH or a SQL IMPORT assignment statement, the <span class="italic">expression</span> component is <span class="italic">not</span> optional. However, a FILEREAD assignment statement may consist only of an object name. In this case, the input data is assigned directly to <span class="italic">object</span>. An <span class="italic">expression</span> in a FILEREAD assignment statement may include the VALUE keyword.</div>
</dd>
<dt>IF<span class="italic">-statement</span></dt>
<dd>
<p>An IF statement lets you perform some action depending on whether a Boolean expression is <code>TRUE</code> or <code>FALSE</code>. An IF statement has the following form.</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IF <span class="italic">bool-exp</span></p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;THEN <span class="italic">action</span></p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ELSE <span class="italic">action</span>]</p>
<p>IF evaluates the Boolean expression. When it is TRUE, the THEN <span class="italic">action</span> occurs. When it is FALSE, the ELSE <span class="italic">action</span> (if specified) occurs. When the Boolean expression is <code>NA</code>, no <span class="italic">action</span> occurs.</p>
<p>An <span class="italic">action</span> can be one of the following:</p>
<ul>
<li>
<p>NULL (no action occurs)</p>
</li>
<li>
<p>An assignment statement</p>
</li>
<li>
<p>A SELECT statement</p>
</li>
<li>
<p>An IF statement</p>
</li>
<li>
<p>A DO &hellip; DOEND statement containing <span class="italic">action-statements</span></p>
</li>
</ul>
<p>A FILEREAD IF statement may contain invocations of the VALUE keyword. You can use a FILEREAD IF statement to process varying record types (such as records with different structures or different target objects) with one FILEREAD statement.</p>
<p>In FILEREAD, the VALUE keyword can be used more than once to represent different values from the same record. For each instance, specify the column from which to read each value.</p>
</dd>
<dt>SELECT <span class="italic">statement</span></dt>
<dd>
<p>A SELECT statement lets you perform some action based on the value of an expression. A SELECT statement has the following form.</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SELECT <span class="italic">select-expression</span></p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[WHEN <span class="italic">expression1 action</span></p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[WHEN <span class="italic">expression2 action</span> . . .]</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ELSE <span class="italic">action</span>]</p>
<p>SELECT evaluates the SELECT expression and then sequentially compares the result with the WHEN expressions. When the first match is found, the associated <span class="italic">action</span> occurs. When no match is found, the ELSE <span class="italic">action</span> (if specified) occurs.</p>
<p>An <span class="italic">action</span> for a SELECT statement is the same as an <span class="italic">action</span> for an IF statement.</p>
<p>A FILEREAD SELECT statement may contain invocations of the VALUE keyword. You can use a FILEREAD SELECT statement to process varying record types (such as records with different structures or different target objects) with one FILEREAD statement.</p>
</dd>
<dt>ACROSS-statement: <span class="italic">action-statement</span></dt>
<dd>
<p><a id="sthref4316"></a>An ACROSS statement causes the following action statement to execute once for every value in status of the ACROSS dimension. When you want the looping to apply to multiple action statements, enclose the action statements in angle brackets.</p>
<p>An ACROSS statement has the following syntax.</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ACROSS <span class="italic">dimension</span> [<span class="italic">limit-clause</span>]:</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="italic">action-statement</span></p>
<p>The syntax of <span class="italic">limit-clause</span> is the same syntax as any of the <span class="italic">limit-clause</span> arguments in the various forms of the LIMIT command (that is, the syntax of the LIMIT command after the <span class="italic">limit-type</span> argument such as "TO"). For the syntax of these arguments, see <a href="dml_commands_2009.htm#i1019733">LIMIT (using values) command</a>, <a href="dml_commands_2009.htm#i1019738">LIMIT using LEVELREL command</a>, <a href="dml_commands_2009.htm#i1019742">LIMIT (using parent relation)</a>, <a href="dml_commands_2009.htm#i1019747">LIMIT (using related dimension) command</a>, <a href="dml_commands_2009.htm#i1019753">LIMIT NOCONVERT command</a>, and <a href="dml_commands_2009.htm#i1019757">LIMIT command (using POSLIST)</a>.</p>
<p>The following example limits <code>month</code> to the last six values, no matter what the current status of <code>month</code> is.</p>
<pre>
ACROSS month last 6: units
</pre>
<p>In a FILEREAD ACROSS statement, you can specify attributes to indicate the position in the record where Oracle OLAP begins reading the fields specified by the ACROSS phrase. To specify the position, use the attributes FIELD, SPACE, and COLUMN. A position attribute is optional when the series of fields specified in the ACROSS phrase begins in the next field for structured records, or the next byte for ruled records.</p>
</dd>
<dt>&lt;<span class="italic">action-statement-group</span>&gt;</dt>
<dd>
<p>You can group several action statements by enclosing them in angle brackets. An <span class="italic">action-statement-group</span> has the following form.</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="italic">action-statement1</span> -</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span class="italic">action-statement2</span> . . .]&gt;</p>
<p>A typical use for action statement groups is after an ACROSS statement. With the angle bracket syntax, you can cause multiple action statements to execute for every value in status of the ACROSS dimension.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4317"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2385"></a>Reading One Record at a Time</p>
<p>As an alternative to FILEREAD, you can use the FILENEXT function to read one record at a time with one or more FILEVIEW statements to process the fields in the record.</p>
<p class="subhead2"><a id="i81388"></a><a id="OLADM2386"></a>Field Order</p>
<p>When an input record contains both dimension values and variable data, the dimension values must be the first fields that are read in the record, and the variable data values must be read after those dimension values. To do this, you can either order the fields in the input record itself or you can use FILEREAD attributes to specify the field positions explicitly. (See the description for the <span class="italic">attribute</span> argument.)</p>
<p>To organize the input records so that you do not have to use position attributes with FILEREAD, put all of the dimension values in the first fields of the record and put the variable data values in the last fields of the record. For example, suppose that you have data for two variables (<code>units</code> and <code>sales</code>) that share the same dimensions in the same order (<code>time</code>, <code>product</code>, and <code>geography</code>). In this case, the first three fields in the input record should contain dimension values, while the fourth and fifth fields should contain variable data, such as in the following sample input record.</p>
<pre>
Sep99    Snowshoes    Boston    35    5565.95
</pre>
<p class="subhead2"><a id="i81332"></a><a id="OLADM2387"></a>STOPAFTER Keyword</p>
<p>By default, FILEREAD automatically reads all the records in a file in sequential order. When you want to process only the first part of a file, use the STOPAFTER keyword. FILEREAD processes the number of records you specify, then stops. You can then close the file.</p>
<p>When you want to skip the first part of the file and process the remaining records, you can use the STOPAFTER keyword and omit the field descriptions. FILEREAD reads the number of records you specify without processing the data. Then you issue a second FILEREAD statement with field descriptions for processing the input. The following program lines illustrate this method.</p>
<pre>
LIMIT district TO 'Boston'
unit = FILEOPEN('bostdata' READ)
FILEREAD unit STOPAFTER 25
FILEREAD unit WIDTH 8 product SPACE 2 ACROSS month 13 TO 24:-
   WIDTH 4 PACKED sales
</pre>
<p class="subhead2"><a id="OLADM2388"></a>Dimension Maintenance</p>
<p>When the target object of a field description is a dimension, you can specify whether or not to use the data in the file to add values to the dimension. The dimension attributes are MATCH and APPEND. When you are adding values to a dimension with APPEND, you can specify a dimension position attribute (<code>LAST</code>, <code>FIRST</code>, <code>BEFORE</code> <code><span class="codeinlineitalic">pos</span></code>, <code>AFTER</code> <code><span class="codeinlineitalic">pos</span></code>) immediately after APPEND.</p>
<p>In an assignment statement of the form <code>object=expression</code>, dimension attributes cannot appear on the right side of the equal sign, but must be specified before the target object. The only exception is when dimensions as target objects also appear on the right side, such as when you are maintaining a conjoint dimension. See <a href="#i81413">Example 9-130, "Maintaining Conjoint Dimensions with File Data"</a>.</p>
<p class="subhead2"><a id="OLADM2389"></a>Dimension Position Numbers</p>
<p>When your input data consists of dimension position numbers, rather than dimension values, specify the conversion type as INTEGER in the field description, even though the dimension has a type of TEXT, ID, DAY, WEEK, MONTH, QUARTER, or YEAR.</p>
<pre>
FILEREAD unit COLUMN 1 WIDTH 8 INTEGER month
</pre>
<p>When the input contains position numbers, you cannot use the APPEND keyword to add new values to a dimension of type TEXT, ID, DAY, WEEK, MONTH, QUARTER, or YEAR, because the new position numbers have no associated value to be added.</p>
<p class="subhead2"><a id="OLADM2390"></a>Conjoint Dimension Maintenance</p>
<p>When a conjoint dimension is the target object, you can read its values using one of two methods:</p>
<ul>
<li>
<p><span class="bold">Method One</span>&mdash;When the input contains values or position numbers of the base dimensions, you must specify a dimension list surrounded by angle brackets after the equal sign, as shown in the following two sample lines.</p>
<pre>
FILEREAD unit proddist = &lt;COL 1 W 10 product COL 20 -
   W 8 district&gt;
FILEREAD unit proddist = &lt;COL 1 W 10 INTEGER product COL 20 -
   W 8 INTEGER district&gt;
</pre>
<p>The preceding examples show values of the <code>product</code> and <code>district</code> dimensions being used to designate a value of the <code>proddist</code> concat dimension You could also use the APPEND attribute when you needed to maintain any of the dimensions. However, when you needed to process the values of <code>product</code> or <code>district</code> first, so that the syntax would require an equal sign inside the angle brackets, you would have to use an alternative method. (Nested equal signs are not allowed.) For this method you would read and process the base dimension values first, and then use the dimensions, without any field attributes, in the dimension list for the conjoint dimension. For example, to convert the base dimension values of a conjoint dimension to uppercase, use a statement similar to the following.</p>
<pre>
FILEREAD unit COL 14 W 8 product = UPCASE(VALUE) -
   COL 5 W 8 district = UPCASE(VALUE) -
   proddist = &lt;product, district&gt;
</pre></li>
<li>
<p><span class="bold">Method Two</span>&mdash;When the input contains position numbers of the conjoint dimension itself, you must specify the INTEGER keyword.</p>
<pre>
FILEREAD unit INTEGER proddist
</pre></li>
</ul>
<p class="subhead2"><a id="i81434"></a><a id="OLADM2391"></a>FILEREAD with Variables Dimensioned by Composites</p>
<p>When reading data into a variable dimensioned by a composite, FILEREAD automatically creates any missing target cells that are being assigned non-<code>NA</code> values. This process also adds to the composite all the dimension value combinations that correspond to those new cells. Thus, both the target object and the composite might be larger after an assignment.</p>
<p class="subhead2"><a id="i81443"></a><a id="OLADM2392"></a>Variables Dimensioned by Composites and Efficiency</p>
<p>When you use the automatic composite maintenance feature of FILEREAD to load data into variables dimensioned by composites, be aware of potential performance problems that might later occur when you attempt to access the variables' data. The position of a composite in the dimension list of a variable indicates whether or not performance might later become an issue.</p>
<p>When the composite appears at the end of the dimension list in the variable's definition (the slowest-varying position), you can use FILEREAD just as you would for a variable whose dimension list does not include composites. For example, you could use the same FILEREAD statements to read data into the variables <code>newsales</code> and <code>newsales.cp</code> (with the following definitions) without sacrificing efficiency.</p>
<pre>
DEFINE newsales VARIABLE DECIMAL &lt;product district month&gt;
DEFINE newsales.cp VARIABLE DECIMAL &lt;product SPARSE&lt;district month&gt;&gt; 
</pre>
<p><code>newsales.cp</code> is dimensioned by three dimensions, the last two of which are in a composite. When, however, you have a variable like <code>newsales2.cp</code> (with the following definition) there can be performance implications for accessing data loaded with FILEREAD.</p>
<pre>
DEFINE newsales.cp VARIABLE DECIMAL &lt;SPARSE&lt;district month&gt; product &gt; 
</pre>
<p>In this case, you can use one of two methods to avoid performance problems:</p>
<ul>
<li>
<p>You can use CHGDFN with the SEGWIDTH keyword to change the segment size for the variable before using FILEREAD. CHGDFN SEGWIDTH lets you specify the size of a variable's segments. A segment is a portion of the total number of values a variable holds. The number of segments in a variable affects the performance of data loading and data accessing. The segment size that you specify with a CHGDFN SEGWIDTH statement is used not only for the variable you designate as <span class="italic">varname,</span> but also for all other variables and relations that are defined with the same combination of dimensions and composites in the same order.</p>
</li>
<li>
<p>You can explicitly add composite values just as you would for a conjoint dimension. You can use this method both for named and unnamed composites. See <a href="#i81424">"Composite Maintenance"</a>.</p>
</li>
</ul>
<p class="subhead2"><a id="i81424"></a><a id="OLADM2393"></a>Composite Maintenance</p>
<p>When you want to explicitly maintain composites with FILEREAD, use the same syntax that you use to maintain conjoint dimensions. When the composite is unnamed, refer to it with the form <code>SPARSE&lt;dim1 dim2 ...&gt;</code>. See <a href="#i81434">"FILEREAD with Variables Dimensioned by Composites"</a> and <a href="#i81443">"Variables Dimensioned by Composites and Efficiency"</a> to evaluate the advantages of explicit versus automatic composite maintenance with FILEREAD.</p>
<p class="subhead2"><a id="OLADM2394"></a>Using DWMQY Dimensions with FILEREAD</p>
<p>When the target object of a field is a dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR, the default conversion type is VNF. Therefore, you do not have to specify a conversion type when the input values are formatted according to the VNF of the target dimension (or the default VNF when the dimension does not have a VNF of its own).</p>
<p>When the target object of a field is a DATE variable or a dimension of type DAY, WEEK, MONTH, QUARTER, and YEAR, FILEREAD interprets the values correctly when they are in a valid input style for dates as described in DATEORDER. For dimensions of type DAY, WEEK, MONTH, QUARTER, and YEAR, you must specify DATE as the conversion type. For values of a DATE variable, DATE is the default conversion type, so the DATE keyword is optional.</p>
<p>FILEREAD also interprets values of a time dimension or a DATE variable correctly when they are <code>INTEGER</code> values that represent dates (<code>1</code> = <code>January</code> <code>1,</code> <code>1900</code>). In this case, you must specify RAW DATE as the conversion type.</p>
<p class="subhead2"><a id="OLADM2395"></a>Blank Fields</p>
<p>When a field is blank, its value is <code>NA</code> and <code>NA</code> is assigned to the target variable. Examples of blank fields are a text field filled with spaces, a field that begins beyond the end of the record, or a field in a structured file that has nothing, not even a space, between the field delimiters.</p>
<p class="subhead2"><a id="i81345"></a><a id="OLADM2396"></a>Placement of Field Attributes in FILEREAD</p>
<p>Normally, the field attributes immediately precede the target object or the expression on the right of the equal sign.</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="italic">attributes&nbsp;object</span></p>
<p>However, when you want an attribute to apply to several fields, specify the attribute followed by the list of target objects surrounded by angle brackets. You can also include attributes that apply to one object by typing them inside the brackets before the object to which they apply.</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="italic">attributes0</span>&nbsp;&lt;<span class="italic">attributes1&nbsp;object1</span>=<span class="italic">expression&nbsp;object2&nbsp;attributes3&nbsp;object3</span>&gt;</p>
<p>Angle brackets are also used to surround the base values of a conjoint dimension value.</p>
<p class="subhead2"><a id="OLADM2397"></a>Handling Errors When FILEREAD Encounters an Error</p>
<p>When FILEREAD encounters an error, you can control what happens with an error trap and appropriate processing. Errors can be caused by attempts to convert data to an incompatible data type or by encountering invalid dimension values. You can use the FILEERROR function to get more information about what caused the error. After processing the error, you can use a TRAP statement to turn error trapping back on and GOTO to branch back to the FILEREAD statement. Processing continues with the next record. See <a href="#i81454">Example 9-128, "Error Handling"</a>.</p>
<p class="subhead2"><a id="i81376"></a><a id="OLADM2398"></a>Specifying a Target Object that has NTEXT Values</p>
<p>When you specify a target object of type NTEXT for data from a structured or CSV file, FILEREAD translates the data from the file into the database character set before storing the values (even though they are assigned to an NTEXT object) which can result in data loss when the data from the file cannot be represented in the database character set. For data from a ruled file, which has fixed-width columns, FILEREAD does not translate into the database characters set, so there is no data loss.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="g1039420"></a>Examples</p>
<div id="OLADM2399" class="example">
<p class="titleinexample"><a id="sthref4318"></a>Example 9-126 Dimension Values and Data</p>
<p>Suppose your analytic workspace contains six-character product identification numbers. You must import both product names and a value for the number of units sold each month. The data file for the last quarter has the following format.</p>
<pre>
Jan951234aa00Chocolate Chip Cookies        123
Jan951099bb00Oatmeal Cookies               145
Jan952355cc00Sugar Cookies                 223
Jan955553ee00Ginger Snap Cookies           233
Feb951234aa00Chocolate Chip Cookies        123
Feb951099bb00Oatmeal Cookies               O145
Feb952355cc00Sugar Cookies                 SS223
Feb955553ee00Ginger Snap Cookies           G233
Mar952355cc00Sugar oCookies                 223
Mar955553ee00Ginger Snap Cookies           233
Mar953222dd00Brownies                      432
</pre>
<p>The dimension and variables have the following definitions.</p>
<pre>
DEFINE month DIMENSION MONTH
DEFINE productid DIMENSION ID
DEFINE productname VARIABLE TEXT &lt;productid&gt; 
DEFINE units.sold VARIABLE INTEGER &lt;month productid&gt; 
</pre>
<p>The following program uses FILEREAD to add any new values for <code>month</code> and <code>productid</code> to the analytic workspace and to put the data in the correct variables. Maintain dimensions in one FILEREAD statement, close the file, and process it again to get the associated data.</p>
<pre>
DEFINE read.product PROGRAM
PROGRAM
VARIABLE fi INT
fi = FILEOPEN('Dr.Dat' READ)
FILEREAD fi COLUMN 1 APPEND WIDTH 5 month -
   COLUMN 6 APPEND WIDTH 6 productid
FILECLOSE fi
 
fi = FILEOPEN('Dr.Dat' READ)
FILEREAD fi COLUMN 1 WIDTH 5 month -
   COLUMN 6 WIDTH 6 productid -
   COLUMN 12 WIDTH 30 productname -
   COLUMN 44 WIDTH 22 units.sold
FILECLOSE fi
END
</pre></div>
<!-- class="example" -->
<div id="OLADM2400" class="example">
<p class="titleinexample"><a id="sthref4319"></a>Example 9-127 Dimension Surrogate Values</p>
<p>This example uses one FILEREAD operation to add a value to the <code>product</code> dimension and assign a value to <code>prodnum</code>, which is a <code>NUMBER</code> dimension surrogate for the <code>product</code> dimension. It uses a second FILEREAD to assign a value to the <code>units</code> variable, which is dimensioned by <code>month</code>, <code>product</code>, and <code>district</code>. The data file for the dimension and surrogate values has the following format.</p>
<pre>
Kiyaks400
</pre>
<p>The following statements define a fileunit, open the file, read its contents and append a value to the <code>product</code> dimension and assign a value to the <code>prodnum</code> surrogate, and close the file.</p>
<pre>
DEFINE funit INT
funit = FILEOPEN('Ds.Dat' READ)
FILEREAD funit COL 1 APPEND W 6 product COL 7 ASSIGN W 3 prodnum
FILECLOSE funit
</pre>
<p>The data file for the variable value has the following format.</p>
<pre>
Jan02400Boston416
</pre>
<p>The following statements open the file, read its contents, match the value of the <code>prodnum</code> surrogate and assign a value to the <code>units</code> variable, and close the file.</p>
<pre>
funit = FILEOPEN('Var.Dat' READ)
FILEREAD funit COL 1 W 5 month COL 6 MATCH W 3 prodnum -
  COL 9 W 6 district COL 15 W 3 INTEGER units
FILECLOSE funit
</pre></div>
<!-- class="example" -->
<div id="OLADM2401" class="example">
<p class="titleinexample"><a id="i81454"></a>Example 9-128 Error Handling</p>
<p>When your input file has data that does not match the format specifications, or when it has a dimension value that is not part of the analytic workspace when you are using the default MATCH attribute, you get an error. You can use error processing at the trap label to check for that kind of error, skip the bad record, and continue processing the file. You can also use a FILEPUT statement to store the bad records in a separate file (see the <a href="dml_commands_1048.htm#i79471">FILEPUT</a> command).</p>
<p>In the following example, the statements at the trap label check whether the file was successfully opened (<code>fil.unit</code> has an <code>INTEGER</code> value) and whether the user interrupted the program. When these are not the reason for the error, the program assumes it encountered a bad record, resets the trap, and branches back to the FILEREAD statement to continue processing with the next record.</p>
<pre>
DEFINE read.price PROGRAM
PROGRAM
VARIABLE fil.unit INTEGER
TRAP ON ERROR
fil.unit = FILEOPEN( ARG(1) READ)
LIMIT month TO &amp;ARG(2)
NEXT:
FILEREAD fil.unit - 
  WIDTH 8 product -
  WIDTH 4 BINARY price
FILECLOSE fil.unit
RETURN
error:
IF fil.unit EQ NA
  THEN RETURN
IF ERRORNAME NE 'attn' AND ERRORNAME NE 'quit'
  THEN DO
    SHOW JOINCHARS('Record ' RECNO(fil.unit) ' is Invalid.')
    TRAP ON ERROR
    GOTO NEXT
  DOEND
FILECLOSE fil.unit
END
</pre></div>
<!-- class="example" -->
<div id="OLADM2402" class="example">
<p class="titleinexample"><a id="sthref4320"></a>Example 9-129 Preprocessing File Data Before Assigning to an analytic workspace Object</p>
<p>You can also process the data in each field before assigning it to a variable or dimension in the analytic workspace. Suppose your data file has product identifiers that are six-digit numbers, and your analytic workspace has a <code>product</code> dimension whose values are these same product numbers, preceded by a "P." You can process the identifiers in the file by adding a "P" at the beginning of each value.</p>
<pre>
FILEREAD unit COLUMN 1 WIDTH 6 APPEND LSET 'p' product
</pre></div>
<!-- class="example" -->
<div id="OLADM2403" class="example">
<p class="titleinexample"><a id="i81413"></a>Example 9-130 Maintaining Conjoint Dimensions with File Data</p>
<p>To maintain a conjoint dimension with FILEREAD, you first maintain its base dimensions by appending any new values from the input file. Then you assign the resulting combination of base dimension values to the conjoint dimension. The following example gets base dimension values from two separate fields, appends the values to the base dimensions, then appends the combination to the conjoint dimension.</p>
<pre>
FILEREAD unit APPEND proddist = &lt;W 8 product, W 8 district&gt;
</pre>
<p>In the preceding statement, the angle brackets automatically cause APPEND to apply to all three dimensions. When you do not want to add new values to the base dimensions, but want only to add new conjoint dimension values, you must explicitly state the keyword MATCH or change the order of the target objects, as shown in the two following statements.</p>
<pre>
fileread unit APPEND proddist = &lt;W 8 MATCH product,W 8 MATCH district&gt;
</pre>
<p><span class="bolditalic">or</span></p>
<pre>
FILEREAD unit W 8 product W 8 district APPEND proddist = &lt;product, district&gt;
</pre></div>
<!-- class="example" -->
<div id="OLADM2404" class="example">
<p class="titleinexample"><a id="sthref4321"></a>Example 9-131 Reading Data From a Structured PRN File</p>
<p>Suppose you want to read data from a structured PRN file with values of the <code>product</code> dimension in field two, values of the <code>district</code> dimension in field three, and several months of sales values beginning in field six. You could read the first 10 records in the file with the following statement.</p>
<pre>
FILEREAD unit STOPAFTER 10 STRUCTURED FIELD 2 product -
   district FIELD 6 ACROSS month: sales 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3088">
<tr>
<td class="cellalignment3095">
<table class="cellalignment3093">
<tr>
<td class="cellalignment3092"><a href="dml_commands_1048.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3092"><a href="dml_commands_1050.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3097">
<table class="cellalignment3091">
<tr>
<td class="cellalignment3092"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3092"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3092"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3092"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3092"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3092"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
