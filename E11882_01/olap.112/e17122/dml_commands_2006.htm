<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>IMPORT</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 742" />
<meta name="dcterms.created" content="2013-11-14T21:21:47Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="OLAP DML Reference" />
<meta name="dcterms.identifier" content="E17122-08" />
<meta name="dcterms.isVersionOf" content="OLADM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="dml_commands_2005.htm" title="Previous" type="text/html" />
<link rel="Next" href="dml_commands_2007.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e17122.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">480/593</span> <!-- End Header --><a id="i78911"></a>
<hr />
<div id="OLADM833" class="refsect1">
<h1 class="refsect1">IMPORT</h1>
<p><a id="sthref4431"></a><a id="sthref4432"></a><a id="sthref4433"></a><a id="sthref4434"></a>The IMPORT command<a id="ABC1419530"></a> transfers data to an analytic workspace from a text file, a spreadsheet, or another analytic workspace from an EIF file.</p>
<p>Because the syntax of the IMPORT command is different depending on where the data to be imported is located, separate topics are provided for different types of source files:</p>
<ul>
<li>
<p><a href="#i78916">IMPORT (EIF)</a></p>
</li>
<li>
<p><a href="#i78921">IMPORT (text)</a></p>
</li>
<li>
<p><a href="#i78926">IMPORT (spreadsheet)</a></p>
</li>
</ul>
<div id="OLADM834" class="refsect2"><a id="i78916"></a>
<hr />
<h2 class="refsect2">IMPORT (EIF)</h2>
<p><a id="sthref4435"></a><a id="sthref4436"></a>You can use the IMPORT (from EIF) command to copy data and definitions into your Oracle OLAP analytic workspace from an EIF file. IMPORT also copies any dimensions of the imported data that do not already exist in your workspace, even when you do not specify them in the command.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
Several options that determine how EIF files are imported and exported. These options are listed in <a href="dml_options.htm#CHDHFHDE">"EIF Options"</a>.</div>
<p>IMPORT (from EIF) is commonly used with <a href="dml_commands_1038.htm#i78783">EXPORT (EIF)</a> to copy parts of one Oracle OLAP analytic workspace to another; you export objects from the source workspace to an EIF file and then import the objects from the EIF file into the target workspace. The source and target workspaces can reside on the same platform or on different platforms. When you transfer an EIF file between computers, you use a binary transfer to overcome file-format incompatibilities between platforms. The EIF file must have been created with the EIFVERSION set to a version that is less than or equal to the version number of the target workspace. Use EVERSION to verify the target version number.</p>
<p>You can also use IMPORT to store information in the EIFNAMES and EIFTYPES options.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4437"></a>Syntax</p>
<p class="synopsis">IMPORT&nbsp;<span class="italic">import_item&nbsp;</span>FROM&nbsp;EIF&nbsp;FILE&nbsp;<span class="italic">file-id&nbsp;</span>[INTO&nbsp;<span class="italic">workspace</span>]&nbsp;-</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;[MATCH&nbsp;[STATUS]|<span class="underline">APPEND</span>|REPLACE&nbsp;[DELETE]]&nbsp;[LIST&nbsp;[ONLY]]&nbsp;[<span class="underline">DATA</span>]&nbsp;-</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;[DFNS]&nbsp;[UPDATE]&nbsp;[NOPROP]&nbsp;[NASKIP]&nbsp;[NLS_CHARSET&nbsp;<span class="italic">charset-exp</span>] -</p>
<p class="synopsis">[<span class="underline">API</span> | NOAPI]</p>
<p>where <span class="syntaxinlineitalic">import_item</span> is one of the following:</p>
<dl>
<dd><span class="syntaxinlineitalic">name&nbsp;</span><span class="syntaxinline">[AS&nbsp;</span><span class="syntaxinlineitalic">newname</span><span class="syntaxinline">]</span></dd>
<dd><span class="syntaxinline">ALL</span></dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4438"></a>Parameters</p>
<dl>
<dt><span class="italic">name</span> [AS <span class="italic">newname</span>]</dt>
<dd>
<p>The name of an analytic workspace object to be imported from an EIF file to an attached workspace. You cannot specify a qualified object name for the object, because the object is not yet in any workspace. You can list multiple names at a time. See the INTO <span class="italic">workspace</span> argument for information about where the object is imported.</p>
<p>AS <span class="italic">newname</span> can be used to rename any type of object being imported except dimensions.</p>
<p>When you have exported a multidimensional object as separate variables, list all the variable names. (See the SCATTER AS keyword in the <a href="dml_commands_1038.htm#i78783">EXPORT (EIF)</a>.)</p>
</dd>
<dt>ALL</dt>
<dd>
<p>(Default) Indicates that you want to import all the objects contained in the EIF file. See the INTO <span class="italic">workspace</span> argument for information about where the objects is imported.</p>
</dd>
<dt>INTO <span class="italic">workspace</span></dt>
<dd>
<p>an analytic workspace name that identifies the attached workspace into which objects is imported. When the objects exist in the specified workspace, then their data is overwritten by the imported data. When the objects do not already exist, IMPORT creates them it in the specified workspace. IMPORT ignores identically named objects when they exist in other attached workspaces.</p>
<p>When you do not specify this argument, then Oracle OLAP does the following:</p>
<ul>
<li>
<p>When you have not previously defined the objects being imported in an attached workspace, then IMPORT defines them automatically in the current workspace.</p>
</li>
<li>
<p>When the objects already exist in any attached workspace, then IMPORT overwrites the data they contain with the imported data.</p>
</li>
</ul>
</dd>
<dt>FROM EIF FILE <span class="italic">file-id</span></dt>
<dd>
<p>Identifies the file you want to import. <span class="italic">File-id</span> is a text expression that represents the name of the file. The name must be in a standard format for a file identifier.</p>
</dd>
<dt>MATCH [STATUS]</dt>
<dd>
<p>Indicates that the IMPORT command should bring in only the data associated with dimension values that match those already in the target workspace. For dimensions other than time dimensions, ensure that corresponding dimension values are spelled and capitalized identically in the EIF file and your target workspace when you want them to match; for example, <code>Tents</code> does not match <code>TENTS</code>. For time dimensions, Oracle OLAP identifies dimension values by the dates they represent rather than by the way they are displayed. Therefore, time dimension values in the EIF file automatically matches time dimension values in your workspace when they represent the same time periods. When you specify MATCH STATUS, IMPORT only imports data associated with the values included in the current status of that dimension. When the dimension is limited in the target workspace, Oracle OLAP ignores any data in the EIF file associated with the values excluded from the status.</p>
</dd>
<dt>APPEND</dt>
<dd>
<p>(Default) Indicates that the IMPORT command should bring in all the dimension values, along with associated data, regardless of whether or not the dimension values match those already present in the target workspace. APPEND adds those that do not match to those already present; it adds new values to the end of the list of dimension values. For time dimensions, APPEND also adds dimension values to fill in any gaps between the dimension values in your target workspace and the new ones.</p>
</dd>
<dt>REPLACE [DELETE]</dt>
<dd>
<p>Indicates that, for objects already defined in the workspace, IMPORT should keep the existing dimension values that match the dimension values in the EIF file. IMPORT deletes dimension values (and their data) that do <span class="italic">not</span> match dimension values in the EIF file. IMPORT replaces the associated data for the dimension values kept as part of the new dimension when the associated data variables are included in the EIF file. For text dimensions, the <span class="italic">order</span> of the dimension values in the EIF file is also adapted.</p>
<p>When you specify REPLACE DELETE, no matching takes place. Before importing a dimension, Oracle OLAP performs a MAINTAIN DELETE ALL, which discards all data associated with the existing dimension and the dimension values.</p>
<div class="infobox-note">
<p class="notep1">Important:</p>
Be careful when using the REPLACE keyword. When you replace the values of a dimension, all variables and relations in the target workspace dimensioned by it are affected. When a variable or relation is not being imported at the same time, replacing the values of one of its dimensions could result in the loss of its data.</div>
</dd>
<dt>LIST</dt>
<dt>LIST ONLY</dt>
<dd>
<p>Produces a list of the definitions. For dimensions, the output lists the number of values in each dimension, as they are imported into the target workspace. For composites, the output lists the number of dimension value combinations. IMPORT also indicates the number of bytes read and the elapsed time every two minutes or, in any case, after the import procedure.</p>
<p>When you define a conjoint or composite that uses an index type other than the default, the IMPORT LIST command displays the index type. When you use the default index type (HASH for conjoints, BTREE for composites), that information is not displayed.</p>
<p><a href="dml_commands_1038.htm#i78783">EXPORT (EIF)</a> sends the list to the current outfile. When you specify LIST ONLY, you get <span class="italic">only the listing</span> without actually importing anything.</p>
</dd>
<dt>ONLY</dt>
<dd>
<p>Causes Oracle OLAP to place the correct values in the EIFNAMES and EIFTYPES options without actually importing them. However, Oracle OLAP does not produce a full listing of the object definitions. To produce the list, specify the LIST keyword before the ONLY keyword.</p>
</dd>
<dt>DATA</dt>
<dd>
<p>Indicates that, for objects that already exist in the target workspace, IMPORT should update only the data associated with those objects. For formulas that already exist, IMPORT updates their EQ expressions. Objects that IMPORT creates in the target workspace are created with their full definitions and any associated data. You can specify both DATA and DFNS, but when neither is specified, the default is DATA.</p>
</dd>
<dt>DFNS</dt>
<dd>
<p>Indicates that, for objects that already exist in the target workspace, IMPORT should just update definitions and leave data unchanged. The components of the definition affected by IMPORT DFNS are: LD Command, VNF, and PROPERTY. Objects that IMPORT creates in the target workspace still get their data. You can specify both DATA and DFNS, but when neither is specified, the default is DATA.</p>
</dd>
<dt>UPDATE</dt>
<dd>
<p>Indicates that IMPORT should execute an UPDATE statement after importing each object which can be useful when importing large EIF files that would otherwise cause Oracle OLAP to run out of memory. To control the frequency of updates, use the EIFUPDBYTES option.</p>
</dd>
<dt>NOPROP</dt>
<dd>
<p>Prevents any properties that you have assigned to each object from being read from the EIF file.</p>
</dd>
<dt>NASKIP</dt>
<dd>
<p>Specifies that composite tuples (indexes) that contain only <code>NA</code> data should not be imported into the target workspace. This argument has no effect on tuples that already exist in the workspace.</p>
</dd>
<dt>NLS_CHARSET <span class="italic">charset-exp</span></dt>
<dd>
<p>Specifies the character set that Oracle OLAP uses when importing text data from the file specified by <span class="italic">file-id</span>. Normally, an EIF file contains its own specification of its character set, so that this argument is not needed. However, when the EIF file specifies the character set incorrectly or is missing the character set specification, then you must use this argument to specify the character set correctly.</p>
<p>For information about the character sets that you can specify, see <a class="olink NLSPG" href="../../server.112/e10729/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a>.</p>
<p>This argument must be the last one specified. When this argument is omitted, and Oracle OLAP cannot determine the character set from the EIF file itself, then Oracle OLAP imports the data using the database character set, which is recorded in the NLS_LANG option.</p>
</dd>
<dt>API</dt>
<dd>
<p>(Default) When the EIF file was created using an <a href="dml_commands_1038.htm#i78783">EXPORT (EIF)</a> command with the API keyword, import any cube metadata<a id="sthref4439"></a><a id="sthref4440"></a> defined for the specified items.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle OLAP automatically executes an UPDATE and a COMMIT after executing this type of import.</div>
</dd>
<dt>NOAPI</dt>
<dd>
<p>Even if the EIF file was created using an <a href="dml_commands_1038.htm#i78783">EXPORT (EIF)</a> command with the API keyword, do <span class="italic">not</span> import any cube metadata defined for the specified items. When you specify this keyword, Oracle OLAP does <span class="italic">not</span> automatically execute an UPDATE and a COMMIT after executing the IMPORT command.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4441"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2465"></a>Separate IMPORT Statements</p>
<p>The MATCH, APPEND, REPLACE, DATA, and DFNS arguments you specify affect all the objects you name to be imported. When you want to treat different objects in different ways, use separate IMPORT statements.</p>
<p>Importing and Exporting Hidden Programs</p>
<p class="subhead2"><a id="OLADM2466"></a>Importing Relations</p>
<p>When you are importing a relation, IMPORT also brings in the definition and values for the related dimension as well.</p>
<p class="subhead2"><a id="OLADM2467"></a>Importing Concat Dimensions</p>
<p>When you import a concat dimension into an analytic workspace and the concat dimension and none of its component dimensions already exist in the analytic workspace, then Oracle OLAP imports the concat dimension, its component dimensions, and the definitions of all of the dimensions.</p>
<p>When you import a concat dimension that does not already exist but one or more of its component dimensions already exist in the analytic workspace, then Oracle OLAP imports the concat dimension and any new component dimensions and their definitions. For the component dimensions that already exist in the analytic workspace, Oracle OLAP imports the component dimensions as it does other dimensions, obeying any MATCH, APPEND, REPLACE specifications in the IMPORT statement.</p>
<p>When you import a concat dimension with a name and a definition of a concat dimension that already exists in the analytic workspace, then Oracle OLAP imports the concat dimension as it does other dimension.</p>
<p>When you import a concat dimension with the same name as one that already exists in the analytic workspace but the definition of the imported concat dimension is different than the definition of the existing concat dimension, then the definition of the existing concat dimension does not change and the definitions of the component dimensions of the existing concat dimension do not change. Only the component dimensions of the imported concat dimension that are also component dimensions of the existing concat dimension are imported. When the imported concat dimension does not share any component dimensions with the existing concat dimension, an error condition occurs. When you are importing any objects that are dimensioned by the concat dimension, then Oracle OLAP imports only the values of the object that correspond to the values of the imported dimensions.</p>
<p class="subhead2"><a id="BABCJCHI"></a><a id="OLADM2468"></a>Importing and Exporting Dimension Surrogates</p>
<p>You can import or export a dimension surrogate to or from an Express Interchange File (EIF). In those operations, a dimension surrogate behaves like a variable that is dimensioned by the dimension of the surrogate. In an EXPORT operation, the dimension for which the surrogate is defined is also exported. In an IMPORT operation, the dimension for which the surrogate is defined is imported but you can use the MATCH, STATUS, DATA, DFNS, APPEND, and REPLACE keywords to affect which values are imported.</p>
<p>Importing a dimension surrogates also imports the definition and values for the dimension for which it is a surrogate. When a dimension with the same definition already exists in the current analytic workspace, then the effects of the IMPORT keywords such as MATCH, APPEND, REPLACE, DATA, and DFNS are the same for the surrogate as they would be for a variable dimensioned by the dimension. When the name and definition of the imported surrogate is the same as a dimension surrogate that already exists in the current analytic workspace and when the imported surrogate has a value that is identical to a value in the existing surrogate, an error condition occurs.</p>
<p>You can import an INTEGER dimension surrogate when no object of the same name exists in the current analytic workspace or when you use the DFNS keyword. Importing an INTEGER dimension surrogate affects existing INTEGER dimension surrogates when the implicit importing of the dimension of the imported surrogate changes the values of the existing dimension.</p>
<p class="subhead2"><a id="OLADM2469"></a>APPEND Versus REPLACE</p>
<p>When you are importing an INTEGER dimension that already exists in your target workspace, the following considerations apply.</p>
<ul>
<li>
<p>When the imported INTEGER dimension is larger than the existing one, APPEND and REPLACE have the same effect. The dimension ends up with the number of values in the larger, imported dimension.</p>
</li>
<li>
<p>When the imported INTEGER dimension is smaller, REPLACE drops the appropriate dimension values from the end of the dimension, <span class="italic">along with any associated data,</span> while APPEND leaves the existing dimension values alone.</p>
</li>
</ul>
<p class="subhead2"><a id="OLADM2470"></a>INTEGER and SHORTINTEGER Data Types</p>
<p>The IMPORT command translates between the INTEGER and SHORTINTEGER data types. When you are importing a variable with one of these data types from an EIF file and it already exists in your workspace as the other type, Oracle OLAP converts the data automatically. The maximum SHORTINTEGER value is <code>32,767</code> and the minimum is <code>-32,767</code>. When you import an INTEGER value that exceeds these limits into a SHORTINTEGER variable, the result is <code>NA</code>.</p>
<p class="subhead2"><a id="OLADM2471"></a>TEXT and ID Data Types</p>
<p>When the EIF file you are importing contains ID data that you want to import into TEXT dimensions, variables, relations, or valuesets, Oracle OLAP automatically converts the ID data to text during the import process.</p>
<p class="subhead2"><a id="OLADM2472"></a>Existing Programs and Models</p>
<p>When you are importing a program or model that already exists in your workspace, you must specify DFNS. A program or a model is a definition only; it does not have any data. The default option DATA does not import the source code when it already exists.</p>
<p>When you define a program, you may specify a data type or a dimension name, which is used when the program is called as a function. When you specify a data type, it determines the data type of the return value. When you specify a dimension name, the return value is a single value of that dimension. When you import an existing program, the data type or the dimension in the imported program definition and the existing program definition must match. Otherwise, Oracle OLAP produces an error message.</p>
<p class="subhead2"><a id="OLADM2473"></a>PERMIT Statements</p>
<p>The PERMIT statements associated with an object are imported with the object definition. You can see them when you describe the object. However, permission conditions are not evaluated when the object is imported.</p>
<p>When an object with the same name already exists in the target workspace and you specify the DFNS keyword, the PERMIT statements for the object are updated. However, you must execute a PERMITRESET to put the new permission into effect. When an object with the same name already exists in the target workspace and you do <span class="italic">not</span> specify the DFNS keyword, the PERMIT statements for the object are not updated. When there is no pre-existing object in the target workspace, and you import with or without the DFNS keyword, the PERMIT statements for the object are updated, but you must execute a PERMITRESET to put the new permission into effect. (See the <a href="dml_commands_2026.htm#i79588">PERMIT</a> command.)</p>
<p>When you export and import an entire workspace, then update, detach, and reattach the workspace, Oracle OLAP ensures that all the permissions that were in effect before exporting are in place in the target workspace.</p>
<p class="subhead2"><a id="OLADM2474"></a>Reducing Workspace Size</p>
<p>You can use IMPORT with an EXPORT statement to compact an entire workspace at once. To do this, first export the workspace and then import it under a different name. You can then delete the old workspace and rename the new one with the original name.</p>
<p class="subhead2"><a id="OLADM2475"></a>Preserving Conjoint Type</p>
<p>When you export a HASH, BTREE, or NOHASH conjoint dimension to an EIF file, the conjoint type is exported along with the definition in the EIF file. When you then import the conjoint dimension into an analytic workspace, Oracle OLAP preserves the conjoint type when you import into a new dimension or a dimension already using that conjoint type. When you import the dimension into an existing dimension that does not use the same conjoint type, Oracle OLAP does not preserve the original conjoint type that was saved in the EIF file.</p>
<p class="subhead2"><a id="OLADM2476"></a>EIFBYTES, EIFNAMES, and EIFTYPES</p>
<p>You can use the EIFBYTES option to learn the number of bytes read or written by the most recent IMPORT (EIF File) statement. You can use the EIFNAMES option to get a list of the names of all the objects imported by the most recent IMPORT statement and use the EIFTYPES option to learn the types of objects in that list.</p>
<p>The following format causes IMPORT to store information about the specified objects into the EIFNAMES and EIFTYPES options without actually importing the objects. IMPORT places a list of the object names specified by the IMPORT command in the EIFNAMES option. IMPORT also places a list of the type of each object listed in EIFNAMES into the EIFTYPES option. You may use the LIST keyword to send to the current outfile a full listing of the object definitions.</p>
<p class="synopsis">IMPORT&nbsp;<span class="italic">name&nbsp;</span>FROM&nbsp;EIF&nbsp;FILE&nbsp;<span class="italic">file-id&nbsp;</span>[LIST]&nbsp;ONLY</p>
<p>For more information, see the entries for <a href="dml_options022.htm#i80471">EIFBYTES</a>, <a href="dml_options024.htm#i80481">EIFNAMES</a>, and <a href="dml_options026.htm#i80491">EIFTYPES</a> options.</p>
<p class="subhead2"><a id="i79480"></a><a id="OLADM2477"></a>Importing Unnamed Composites</p>
<p>When you define variables or other objects with the SPARSE keyword in the dimension list, Oracle OLAP creates an unnamed composite that corresponds to the SPARSE dimension list. When you export or import an object with the unnamed composite in its definition, the composite is automatically exported or imported with the object. Because the unnamed composite is not a regular workspace object, you cannot import or export it independently.</p>
<p class="subhead2"><a id="OLADM2478"></a>Variable Segments Specified with SEGWIDTH</p>
<p>When you use a CHGDFN statement with the SEGWIDTH keyword to specify the length of variable segments, segment information cannot be exported and imported automatically. You can save your SEGWIDTH settings by exporting the entire workspace, creating a new workspace, importing only the workspace objects into the new workspace, specifying segmentation, and then importing the variable data into the new workspace.</p>
<p class="subhead2"><a id="OLADM2479"></a>Importing TEXT and NTEXT Values</p>
<p>You can export and import TEXT and NTEXT values. Both data types can be exported to a single EIF file.</p>
<ul>
<li>
<p>Exported TEXT values are stored in the EIF file using the character set specified for the file in the <a href="dml_commands_1038.htm#i78783">EXPORT (EIF)</a>.</p>
</li>
<li>
<p>Exported NTEXT values are stored in the EIF file as NTEXT (UTF8 Unicode).</p>
</li>
<li>
<p>NTEXT values imported into TEXT objects are converted into the database character set which can result in data loss when the NTEXT values cannot be represented in the database character set.</p>
</li>
<li>
<p>TEXT values imported into NTEXT objects are converted into the NTEXT (UTF8 Unicode) character set.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4442"></a>Examples</p>
<div id="OLADM2480" class="example">
<p class="titleinexample"><a id="sthref4443"></a>Example 10-7 Importing Dimensions from an EIF File</p>
<p>This example shows how to import the contents and dimensions of two variables into the current Oracle OLAP workspace from a disk file called <code>finance.eif</code> in the current directory object.</p>
<pre>
IMPORT actual budget FROM EIF FILE 'finance.eif'
</pre></div>
<!-- class="example" -->
<div id="OLADM2481" class="example">
<p class="titleinexample"><a id="sthref4444"></a>Example 10-8 IIMPORTING a Concat Dimension</p>
<p>This example shows the result of importing a concat dimension that has a definition that is different than a concat dimension that already exists in the current analytic workspace. Suppose that a DESCRIBE statement returns the following definitions for dimensions and variables in the current analytic workspace.</p>
<pre>
DEFINE city TEXT DIMENSION
DEFINE state TEXT DIMENSION
DEFINE country TEXT DIMENSION
DEFINE locality DIMENSION CONCAT (city, state)
DEFINE geog DIMENSION CONCAT (locality, country)
DEFINE sales INTEGER VARIABLE &lt;geog&gt;
</pre>
<p>The following statement reports the <code>sales</code> data.</p>
<pre>
REPORT sales
</pre>
<p>The preceding statement produces the following results.</p>
<pre>
GEOG                SALES
------------------- -----
&lt;city: Boston&gt;       1000
&lt;city: Springfield&gt;  2000
&lt;state: Ma&gt;          3000
&lt;country: Usa&gt;       4000
</pre>
<p>A DESCRIBE statement returns the following definitions for dimensions and variables in the <code>diffconcat.eif</code> file.</p>
<pre>
DEFINE CITY TEXT DIMENSION
DEFINE REGION TEXT DIMENSION
DEFINE COUNTRY TEXT DIMENSION
DEFINE GEOG DIMENSION CONCAT (CITY, REGION, COUNTRY)
DEFINE SALES INTEGER VARIABLE &lt;GEOG&gt;
</pre>
<p>The following statement reports the <code>sales</code> data for the dimension values in the analytic workspace from which you exported the concat dimension that is in the <code>diffconcat.eif</code> file.</p>
<pre>
REPORT sales
</pre>
<p>The preceding statement produces the following results.</p>
<pre>
GEOG               SALES
------------------ -----
&lt;city: Boston&gt;      1111
&lt;city: Worcester&gt;   2222
&lt;region: East&gt;      3333
&lt;country: Usa&gt;      4444
</pre>
<p>The following statement imports the <code>sales</code> variable from the <code>diffconcat.eif</code> file and implicitly imports the concat dimension <code>geog</code>. The APPEND keyword causes Oracle OLAP to add the value <code>Worcester</code> to the <code>city</code> dimension. After that, it imports new values for <code>sales</code> that correspond to <code>&lt;city: Boston&gt;</code>, <code>&lt;city:&nbsp;Worcester&gt;</code>, and <code>&lt;country: Usa&gt;</code>.</p>
<pre>
IMPORT sales FROM EIF FILE diffconcat.eif APPEND
</pre>
<p>After the import operation, reporting the SALES values produces the following results.</p>
<pre>
GEOG                SALES
------------------- -----
&lt;city: Boston&gt;       1111
&lt;city: Springfield&gt;  2000
&lt;city: Worcester&gt;    2222
&lt;state: Ma&gt;          3000
&lt;country: Usa&gt;       4444
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="OLADM835" class="refsect2"><a id="i78921"></a>
<hr />
<h2 class="refsect2">IMPORT (text)</h2>
<p><a id="sthref4445"></a><a id="sthref4446"></a>You can use the IMPORT (from text) command to copy data from a text file into an Oracle OLAP worksheet object. A worksheet's rows are similar to the lines of a text file.</p>
<p>IMPORT is commonly used to copy text files into an analytic workspace from other software products.</p>
<p>Typically, you use a FILEREAD statement for text files instead of IMPORT. FILEREAD is more efficient and does not require a worksheet object or separate handling of each column of data.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4447"></a>Syntax</p>
<p class="synopsis">IMPORT&nbsp;<span class="italic">worksheetname&nbsp;</span>FROM&nbsp;[<span class="underline">TEXT</span>|STRUCTURED|RULED&nbsp;[RULER&nbsp;<span class="italic">ruler-exp</span>]&nbsp;-&nbsp;</p>
<p class="synopsis">&nbsp;&nbsp;PRN&nbsp;FILE&nbsp;<span class="italic">file-id&nbsp;</span>[STOPAFTER&nbsp;<span class="italic">n</span>]&nbsp;[TEXTSTART&nbsp;<span class="italic">schar</span>]&nbsp;[TEXTEND&nbsp;<span class="italic">echar</span>]&nbsp;-</p>
<p class="synopsis">&nbsp;&nbsp;[DELIMITER&nbsp;<span class="italic">dchar</span>]&nbsp;[NLS_CHARSET&nbsp;<span class="italic">charset-exp</span>]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4448"></a>Parameters</p>
<dl>
<dt><span class="italic">worksheetname</span></dt>
<dd>
<p>A text expression that specifies the name of an Oracle OLAP worksheet object. When you have not previously defined <span class="italic">worksheetname</span> in your workspace, IMPORT defines it for you automatically, using the default dimensions <code>WKSCOL</code> and <code>WKSROW</code>. Any previous contents of <span class="italic">worksheetname</span> are overwritten. In any one IMPORT statement, you can import only one <span class="italic">worksheetname</span> from one text file.</p>
</dd>
<dt>FROM . . . PRN</dt>
<dd>
<p>Indicates that you want to import your Oracle OLAP worksheet from a text file.</p>
</dd>
<dt>TEXT</dt>
<dd>
<p>Imports a whole source file as-is into an Oracle OLAP worksheet on a line-by-line basis. The source file is copied into a single wide worksheet column with a data type of TEXT. The column is always column 1 of the worksheet. Each line in the source file is imported into a separate cell on a separate row in the first column, using as many rows as there are lines in the source file. A blank line in the source file produces a TEXT value with zero characters (a null) in the corresponding row of the worksheet's first column. (TEXT is the default.)</p>
</dd>
<dt>STRUCTURED</dt>
<dd>
<p>Imports a source file into a target worksheet on a cell-by-cell basis, automatically performing three functions:</p>
<ol>
<li>
<p>Each line of characters in the source file is copied into a single row of the target worksheet.</p>
</li>
<li>
<p>Each group of characters on a line in the source file is copied into a separate TEXT cell on the target worksheet row. A group of characters is defined by two conditions: an uninterrupted (except by a decimal point) sequence of <span class="italic">numbers</span>, or enclosure in <span class="italic">double quotes</span>. Consequently, numbers containing commas to mark off thousands are split up into different cells unless the commas are first removed.</p>
</li>
<li>
<p>Any non-numeric characters not enclosed in double quotes are ignored, except minus signs that immediately precede numbers and so are copied into the same TEXT cell along with the numbers. (Be sure there are no spaces between a minus sign and its number in the source file.)</p>
</li>
</ol>
<p>A blank line in the source file results in an <code>NA</code> in the first cell of the corresponding worksheet row.</p>
<p>When your file format does not conform to the pattern described here, you can use the TEXTSTART, TEXTEND, and DELIMITER keywords. These arguments let you customize the delimiters IMPORT uses to identify the start and end of each field.</p>
</dd>
<dt>RULED</dt>
<dd>
<p>Indicates import of a file on a column-by-column basis into worksheet cells of various data types. Every line in the source file must follow the same pattern of data along its length as every other line in the file. You describe this data pattern to Oracle OLAP in the one-line <span class="italic">ruler-exp</span> using the RULER keyword. IMPORT loops over each line in the source file and copies its contents into a corresponding pattern of cells on a row of the target worksheet, one row for each line. As <span class="italic">ruler-exp</span> loops over successive lines in the source file, it adds row after row to the target worksheet, building vertical <span class="italic">columns</span> of similar cells as it goes along. Status messages are sent to the current outfile every 20 rows, starting with the message <code>20 rows processed</code>.</p>
<p>When the source file contains records that follow several different patterns of character groups, use the less exacting options, STRUCTURED or TEXT, to import the data.</p>
</dd>
<dt>RULER <span class="italic">ruler-exp</span></dt>
<dd>
<p>Used only with the RULED keyword to specify the data type, length, and repeat count of each character group in the record pattern of the source file. <span class="italic">Ruler-exp</span> consists of a list of character-group specifications. Each character-group specification must be separated by a comma (<code>,</code>), by backslash N (<code>\n</code>), or by a space(<code>&nbsp;</code>). You do not have to include enough specifications to account for all the characters in the basic record pattern (or line pattern) of the source file; RULER steps to the next record as soon as it runs out of specifications on each line, regardless of how far it is from the end of the current record. Remember to enclose literal text in single quotes.</p>
<p>The specifications for groups of characters are of three types: <code>T</code> for TEXT, <code>A</code> for numeric (INTEGER or DECIMAL), and <code>S</code> for skip or ignore. The formats for these types are shown in <a href="#g1015802">Table 10-1, "Character-Group Specifications for IMPORT from Text"</a>.</p>
<div id="OLADM2482" class="tblformal">
<p class="titleintable"><a id="sthref4449"></a><a id="g1015802"></a>Table 10-1 Character-Group Specifications for IMPORT from Text</p>
<table class="cellalignment3098" title="Character-Group Specifications for IMPORT from Text" summary="The specifications for groups of characters are of three types: T for TEXT, A for numeric (INTEGER or DECIMAL), and S for skip or ignore. The complete formats for these types are shown in this table." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t10">Format</th>
<th class="cellalignment3099" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t10" headers="r1c1-t10">
<p>[<span class="italic">mm</span>]<code><span class="codeinlinebold">T</span></code><span class="italic">nn</span></p>
</td>
<td class="cellalignment3095" headers="r2c1-t10 r1c2-t10">
<p>Specifies that Oracle OLAP should copy <span class="italic">mm</span> groups (default&nbsp;=&nbsp;1) of <span class="italic">nn</span> characters (bytes) apiece as TEXT. Specifying a group (or groups) of 0 characters leaves an empty cell(s) in the corresponding position in the worksheet. Each group may consist of up to 498 characters. Trailing blanks are stripped.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t10" headers="r1c1-t10">
<p>[<span class="italic">mm</span>]<code><span class="codeinlinebold">A</span></code><span class="italic">nn</span></p>
</td>
<td class="cellalignment3095" headers="r3c1-t10 r1c2-t10">
<p>Specifies that Oracle OLAP should copy <span class="italic">mm</span> groups (default&nbsp;=&nbsp;<code>1</code>) of <span class="italic">nn</span> characters (bytes) apiece and try to convert each group to a number. When a character group cannot be converted to a number, it is copied into a TEXT cell and any trailing blanks are stripped. A valid <span class="italic">number</span> includes anything you can type for a GET(DECIMAL) function except <code>NA</code>.</p>
<p>Commas embedded in a number before a period (decimal point) are ignored. Consequently, multiple numbers separated only by commas or two numbers separated only by a single period are treated as parts of a single number (when you want the numbers treated separately, insert <span class="italic">spaces</span> between them in the source file). Leading dollar signs (<code>$</code>) and trailing percent signs (<code>%</code>) are ignored, and leading and trailing spaces are stripped. Multiple periods are treated as excess decimal points and ignored (to undo the effects of dotfill). For example,<code>...17...</code> is treated as though the field is <code>17</code>.</p>
<p>Numbers preceded by a hyphen, or a hyphen and spaces, and numbers enclosed in parentheses, are treated as negative. Specifying a group (or groups) of <code>0</code> (zero) characters leaves an empty cell (or cells) in the corresponding position in the worksheet. Each group may consist of up to 4,000 characters.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t10" headers="r1c1-t10">
<p>[<code><span class="codeinlineitalic">mm</span></code>]<code><span class="codeinlinebold">S</span></code><code><span class="codeinlineitalic">nn</span></code></p>
</td>
<td class="cellalignment3095" headers="r4c1-t10 r1c2-t10">
<p>Specifies that Oracle OLAP should skip or ignore <span class="italic">mm</span> groups of <span class="italic">nn</span> characters (bytes). The limit for <span class="italic">nn</span> is 32,767. (You would probably only use <span class="italic">mm</span> to expand this limit to handle a very long record.)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></dd>
<dt>FILE <span class="italic">file-id</span></dt>
<dd>
<p>Identifies the file you want to import. <span class="italic">File-id</span> is a text expression that represents the name of the file. The name must be in a standard format for a file identifier.</p>
</dd>
<dt>STOPAFTER <span class="italic">n</span></dt>
<dd>
<p>Specifies that no more than <span class="italic">n</span> records should be read from the file. When STOPAFTER is omitted, Oracle OLAP reads the whole file.</p>
</dd>
<dt>TEXTSTART <span class="italic">schar</span></dt>
<dd>
<p>The <span class="italic">schar</span> argument is a text expression that specifies a single character that you want Oracle OLAP to interpret as the start of a text field in a structured file. The default character is a double quote (<code>"</code>).</p>
</dd>
<dt>TEXTEND <span class="italic">echar</span></dt>
<dd>
<p>The <span class="italic">echar</span> argument is a text expression that specifies a single character that you want Oracle OLAP to interpret as the end of a text field in a structured file. The default character is a double quote (<code>"</code>).</p>
</dd>
<dt>DELIMITER <span class="italic">dchar</span></dt>
<dd>
<p>The <span class="italic">dchar</span> argument is a text expression that specifies a single character that you want Oracle OLAP to interpret as the general field delimiter in a structured file. Oracle OLAP uses the general field delimiter to identify both numeric and text fields. The default character is a comma (<code>,</code>).</p>
</dd>
<dt>NLS_CHARSET <span class="italic">charset-exp</span></dt>
<dd>
<p>Specifies the character set that Oracle OLAP uses when importing text data from the file specified by <span class="italic">file-id</span> which allows Oracle OLAP to convert the data accurately from that character set. This argument must be the last one specified. When this argument is omitted, and Oracle OLAP cannot determine the character set from the file itself, then Oracle OLAP imports the data in the database character set, which is recorded in the NLS_LANG option.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4450"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2483"></a>WKSROW and WKSCOL Dimensions</p>
<p>The <code>WKSROW</code> (the default worksheet row) dimension of an Oracle OLAP worksheet object corresponds to the lines of a text file. The <code>WKSCOL</code> (the default worksheet column) dimension of a worksheet divides each row into cells that can be used to separate data types when there are potentially several types on each line of the source file. <code>WKSROW</code> and <code>WKSCOL</code> are INTEGER dimensions with values of <code>1</code>, <code>2</code>, <code>3</code>, and so&nbsp;on.</p>
<p class="subhead2"><a id="OLADM2484"></a>Minimum Worksheet Size</p>
<p>Oracle OLAP sets up a minimum-size worksheet that is 63 cells square, regardless of whether or not all the cells are used. When the source text file requires an Oracle OLAP worksheet larger than the minimum, IMPORT automatically increases the dimension values of <code>WKSCOL</code> and <code>WKSROW</code> as needed.</p>
<p class="subhead2"><a id="OLADM2485"></a>Importing Numbers</p>
<p>When importing a number from a text file, IMPORT gives it an INTEGER data type.</p>
<p class="subhead2"><a id="OLADM2486"></a>File Transfer to Another Computer</p>
<p>When the file you are importing originated on another computer, ensure that its character set is appropriate. When you transfer a text file to another computer, the communications program handling the transfer makes any necessary character translations; for example, from ASCII to EBCDIC. Set the parameters of the transfer program so that the resulting file is in the correct character set for the receiving computer.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4451"></a>Examples</p>
<div id="OLADM2487" class="example">
<p class="titleinexample"><a id="sthref4452"></a>Example 10-9 Importing Columns Without the RULER Keyword</p>
<p>Suppose you have a file named <code>abctxt</code> in your current directory. It has 10 five-digit groups of <code>INTEGER</code> values, followed by a group of 20 characters of text. To import this file into an Oracle OLAP worksheet called <code>sheet1</code>, use the following statement.</p>
<pre>
IMPORT sheet1 FROM RULED PRN FILE 'abctxt' ruler '10a5, t20'
</pre>
<p>The actual format for the file name must follow the conventions for your operating system.</p>
</div>
<!-- class="example" -->
<div id="OLADM2488" class="example">
<p class="titleinexample"><a id="sthref4453"></a>Example 10-10 Importing Columns with the RULER Keyword</p>
<p>Suppose a file called <code>mix</code> has no line delimiters, with records containing 100 characters apiece. Each record has the character distribution illustrated in the following table.</p>
<div class="inftblinformal">
<table class="cellalignment3100" title="Character Distributions for Records in example" summary="This table describes the character distribution for each record in the example." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t11">Character</th>
<th class="cellalignment3099" id="r1c2-t11">Content</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t11" headers="r1c1-t11">1 - 10</td>
<td class="cellalignment3095" headers="r2c1-t11 r1c2-t11">To be ignored</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t11" headers="r1c1-t11">11 - 17</td>
<td class="cellalignment3095" headers="r3c1-t11 r1c2-t11">Decimal number</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t11" headers="r1c1-t11">18 - 28</td>
<td class="cellalignment3095" headers="r4c1-t11 r1c2-t11">To be ignored</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t11" headers="r1c1-t11">29 - 30</td>
<td class="cellalignment3095" headers="r5c1-t11 r1c2-t11">Two single-character code</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t11" headers="r1c1-t11">31 - 35</td>
<td class="cellalignment3095" headers="r6c1-t11 r1c2-t11">Integer</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t11" headers="r1c1-t11">36 - 100</td>
<td class="cellalignment3095" headers="r7c1-t11 r1c2-t11">To be ignored</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p>To import this file into an Oracle OLAP worksheet called <code>sheet2</code>, use the following statement.</p>
<pre>
DEFINE sheet2 WORKSHEET temp
IMPORT sheet2 FROM RULED PRN FILE 'mix' RULER -
   's10, a7, s11, 2t1, a5' 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="OLADM836" class="refsect2"><a id="i78926"></a>
<hr />
<h2 class="refsect2">IMPORT (spreadsheet)</h2>
<p><a id="sthref4454"></a><a id="sthref4455"></a><a id="sthref4456"></a>You can use the IMPORT (from spreadsheet) command to copy data (not formulas) from a spreadsheet file into an Oracle OLAP worksheet object. A worksheet's dimensions are similar to the columns and rows of a spreadsheet. IMPORT always copies an entire spreadsheet file at a time.</p>
<p>IMPORT is commonly used to copy data from other software products (for example, a Lotus spreadsheet) into an Oracle OLAP workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4457"></a>Syntax</p>
<p class="synopsis">IMPORT&nbsp;<span class="italic">worksheetname&nbsp;</span>FROM&nbsp;<span class="italic">source&nbsp;</span>[INTO&nbsp;<span class="italic">workspace</span>]</p>
<p>where <span class="syntaxinlineitalic">source</span> is one of the following:</p>
<dl>
<dd><span class="syntaxinline">WKS&nbsp;FILE&nbsp;</span><span class="syntaxinlineitalic">file-id&nbsp;</span><span class="syntaxinline">[NLS_CHARSET&nbsp;</span><span class="syntaxinlineitalic">charset-exp</span><span class="syntaxinline">]</span></dd>
<dd><span class="syntaxinline">WK1&nbsp;FILE&nbsp;</span><span class="syntaxinlineitalic">file-id&nbsp;</span><span class="syntaxinline">[NLS_CHARSET&nbsp;</span><span class="syntaxinlineitalic">charset-exp</span><span class="syntaxinline">]</span></dd>
<dd><span class="syntaxinline">WRK&nbsp;FILE&nbsp;</span><span class="syntaxinlineitalic">file-id&nbsp;</span><span class="syntaxinline">[NLS_CHARSET&nbsp;</span><span class="syntaxinlineitalic">charset-exp</span><span class="syntaxinline">]</span></dd>
<dd><span class="syntaxinline">WR1&nbsp;FILE&nbsp;</span><span class="syntaxinlineitalic">file-id&nbsp;</span><span class="syntaxinline">[NLS_CHARSET&nbsp;</span><span class="syntaxinlineitalic">charset-exp</span><span class="syntaxinline">]</span></dd>
<dd><span class="syntaxinline">DIF&nbsp;FILE&nbsp;</span><span class="syntaxinlineitalic">file-id&nbsp;</span><span class="syntaxinline">[NLS_CHARSET&nbsp;</span><span class="syntaxinlineitalic">charset-exp</span><span class="syntaxinline">]</span></dd>
<dd><span class="syntaxinline">CSV&nbsp;FILE&nbsp;</span><span class="syntaxinlineitalic">file-id&nbsp;</span><span class="syntaxinline">[STOPAFTER&nbsp;</span><span class="syntaxinlineitalic">n</span><span class="syntaxinline">|DELIMITER&nbsp;</span><span class="syntaxinlineitalic">dchar</span><span class="syntaxinline">|NLS_CHARSET&nbsp;</span><span class="syntaxinlineitalic">charset-exp</span><span class="syntaxinline">]</span></dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4458"></a>Parameters</p>
<dl>
<dt><span class="italic">worksheetname</span></dt>
<dd>
<p>An Oracle OLAP worksheet object. In any one IMPORT statement, you can import only one <span class="italic">worksheetname</span> from one spreadsheet file. You can specify a qualified object name for the worksheet; however, when you specify the INTO <span class="italic">worksheet</span> argument, the target workspace specified must be identical. See the INTO <span class="italic">workspace</span> argument for information about where the worksheet object is imported.</p>
</dd>
<dt>FROM WKS</dt>
<dt>FROM WK1</dt>
<dt>FROM WRK</dt>
<dt>FROM WR1</dt>
<dt>FROM DIF</dt>
<dd>
<p>Indicates that you want to import your Oracle OLAP worksheet from a 1-2-3 file, Version 1 (<code>WKS</code>) or Version 2 (<code>WK1</code>); a Symphony file, Version 1.0 (<code>WRK</code>) or Version 1.1 (<code>WR1</code>); or a data interchange format file (<code>DIF</code>).</p>
<p>Oracle OLAP does not recognize numbers in E format (exponential notation) in <code>DIF</code> files.</p>
</dd>
<dt>INTO <span class="italic">workspace</span></dt>
<dd>
<p>An analytic workspace name that identifies the attached workspace into which data is imported. When <span class="italic">worksheetname</span> exists in the specified workspace, then its data is overwritten by the imported data. When <span class="italic">worksheetname</span> does not already exist, IMPORT creates it in the specified workspace. IMPORT ignores an identically named worksheet when it exists in another attached workspace.</p>
<p>When you do not specify this argument, then Oracle OLAP does the following:</p>
<ul>
<li>
<p>When you have not previously defined <span class="italic">worksheetname</span> in an attached workspace, IMPORT defines it automatically in the current workspace using the default dimensions <code>WKSCOL</code> and WKSROW.</p>
</li>
<li>
<p>When <span class="italic">worksheetname</span> already exists in any attached workspace, IMPORT overwrites the data it contains with the imported data.</p>
</li>
</ul>
</dd>
<dt>FILE <span class="italic">file-id</span></dt>
<dd>
<p>Identifies the file you want to import. The <span class="italic">file-id</span> argument is a text expression that represents the name of the file. The name must be in a standard format for a file identifier.</p>
</dd>
<dt>NLS_CHARSET <span class="italic">charset-exp</span></dt>
<dd>
<p>Specifies the character set that Oracle OLAP uses when importing text data from the file specified by <span class="italic">file-id</span> which allows Oracle OLAP to convert the data accurately from that character set. This argument must be the last one specified. When this argument is omitted, and Oracle OLAP cannot determine the character set from the worksheet itself, then Oracle OLAP imports the data in the database character set, which is recorded in the NLS_LANG option.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The NTEXT data type is not supported in worksheets.</div>
</dd>
<dt>FROM CSV FILE <span class="italic">file-id</span> [STOPAFTER <span class="italic">n</span>] [DELIMITER <span class="italic">dchar</span>]</dt>
<dd>
<p>Indicates that you want to import from a source file on a cell-by-cell basis. See <a href="#i79503">"CSV Import"</a>.</p>
<p>STOPAFTER <span class="italic">n</span> specifies that no more than <span class="italic">n</span> records should be read from the file. When STOPAFTER is omitted, Oracle OLAP reads the whole file.</p>
<p>DELIMITER <span class="italic">dchar</span> identifies the single character (<span class="italic">dchar</span>) that you want Oracle OLAP to interpret as the general field delimiter. The default value is comma.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4459"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2489"></a>Default Dimensions of an Oracle OLAP worksheet object</p>
<p>The default dimensions of an Oracle OLAP worksheet are <code>WKSCOL</code> and WKSROW, which correspond to the columns and rows of a spreadsheet. <code>WKSCOL</code> and WKSROW are INTEGER dimensions with values of 1, 2, 3, and so on. When these dimensions already exist in an attached workspace but not in the current workspace, the IMPORT statement fails when it tries to create these dimensions. You can prevent this problem by first defining the worksheet with different dimensions. (See <a href="dml_commands_1032.htm#i1014088">"Worksheet Dimensions"</a> for more information.)</p>
<p class="subhead2"><a id="OLADM2490"></a>Addition of Cells when Needed</p>
<p>When the source spreadsheet contains more cells than are defined by the dimensions of the worksheet, IMPORT automatically adds dimension values to provide the required number of cells.</p>
<p class="subhead2"><a id="OLADM2491"></a>Empty and NA Cells</p>
<p>IMPORT merges the source file with the worksheet on a cell-by-cell basis. Cells from the source file that are not empty, even when they just contain <code>NA</code>, overwrite the contents of the corresponding cells in the worksheet; empty cells in the source file do not overwrite the worksheet; source-file cells beyond the end of the current worksheet are appended to it so that no data is discarded.</p>
<p class="subhead2"><a id="OLADM2492"></a>Numbers in DIF Files</p>
<p>When importing any number from DIF files, IMPORT gives it a DECIMAL data type.</p>
<p class="subhead2"><a id="i79503"></a><a id="OLADM2493"></a>CSV Import</p>
<p>The CSV import option automatically performs the following functions when importing from a source file into the cells of a worksheet:</p>
<ul>
<li>
<p>Each line of characters in the source file is copied into a single row in the target worksheet.</p>
</li>
<li>
<p>Each group of characters on a line in the source file is copied into a separate TEXT cell in the target worksheet row, and groups are separated by the delimiter character.</p>
</li>
</ul>
<p>When a group of characters is inside double quotation marks:</p>
<ul>
<li>
<p>A delimiter character found in this group is treated as a literal.</p>
</li>
<li>
<p>When a double quotation mark occurs <span class="italic">within</span> this group, it must be followed by another double quotation mark.</p>
</li>
<li>
<p>A linefeed (<code>\n</code>) found within the group is ignored.</p>
</li>
<li>
<p>Spaces or tabs found before a starting quotation mark and after an end quotation mark are ignored.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4460"></a>Examples</p>
<div id="OLADM2494" class="example">
<p class="titleinexample"><a id="sthref4461"></a>Example 10-11 Importing a DIF File</p>
<p>This example shows how to import a spreadsheet in DIF format in a file called <code>mortgage.dif</code>. We define the worksheet first as a temporary object, which saves memory and storage space. IMPORT would define the worksheet <span class="italic">sheet1</span> automatically when it did not already exist. When it had already been used in a previous IMPORT statement, any data in it would be overwritten with new data.<a id="sthref4462"></a></p>
<pre>
DEFINE sheet1 WORKSHEET TEMP
IMPORT sheet1 FROM DIF FILE 'mortgage.dif' 
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3088">
<tr>
<td class="cellalignment3095">
<table class="cellalignment3093">
<tr>
<td class="cellalignment3092"><a href="dml_commands_2005.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3092"><a href="dml_commands_2007.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3097">
<table class="cellalignment3091">
<tr>
<td class="cellalignment3092"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3092"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3092"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3092"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3092"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3092"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
