<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>MODEL</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 742" />
<meta name="dcterms.created" content="2013-11-14T21:21:53Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="OLAP DML Reference" />
<meta name="dcterms.identifier" content="E17122-08" />
<meta name="dcterms.isVersionOf" content="OLADM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="dml_commands_2016.htm" title="Previous" type="text/html" />
<link rel="Next" href="dml_commands_2018.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e17122.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">491/593</span> <!-- End Header --><a id="i1004861"></a>
<hr />
<div id="OLADM867" class="refsect1">
<h1 class="refsect1">MODEL</h1>
<p><a id="sthref4677"></a><a id="sthref4678"></a>The MODEL command enters a completely new specification into a new or existing model object. When the model already has a specification, Oracle OLAP overwrites it. To use MODEL to assign an model specification to a model object, the definition must be the one most recently defined or considered during the current session. When it is not, you must first use a CONSIDER statement to make it the current definition.</p>
<p>An alternative to a MODEL statement is an EDIT MODEL statement, which is available only in OLAP Worksheet. An EDIT MODEL statement opens an Edit window in which you can add, delete, or change the specification for a model object.</p>
<p>Adding a specification to a model object is just one step in modeling data. For more information on models, see <a href="dml_objects.htm#BEIDHDFI">"OLAP DML Model Objects"</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4679"></a>Syntax</p>
<p class="synopsis">MODEL&nbsp;<span class="italic">specification</span></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4680"></a>Parameters</p>
<dl>
<dt><span class="italic">specification</span></dt>
<dd>
<p>A multiline text expression that contains one or more of the following OLAP DML statements:</p>
<dl>
<dd><a href="dml_commands_2050.htm#CIHCEHEH">SET</a> (=) command&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</dd>
<dd><a href="#i80588">DIMENSION (in models)</a> statement</dd>
<dd><a href="#i78931">INCLUDE</a> statement</dd>
</dl>
<p>The maximum number of lines you can have in a model is 4,000. Each statement is a line of the multiline text expression. When coding an ALLOCMAP statement at the command line level, separate statements with newline delimiters (<code>\n</code>), or use JOINLINES.</p>
<p>For a discussion of designing a model specification, see <a href="#CIHDFIIF">"Model Specification"</a>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4681"></a>Usage Notes</p>
<p class="subhead2"><a id="CIHDFIIF"></a><a id="OLADM2577"></a>Model Specification</p>
<p>The model specification consists of the following OLAP DML statements:</p>
<ol>
<li>
<p>One of the following:</p>
<ul>
<li>
<p>Exactly one INCLUDE statement that specifies the name of another model to include. See <a href="dml_objects.htm#BEIGEBCH">"Nesting Models"</a> for more information.</p>
</li>
<li>
<p>One or more DIMENSION (in models) statements coded following the <a href="#i1010430">"Guidelines for Writing DIMENSION Statements in a Model"</a>.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
When a model contains an INCLUDE statement, then it cannot contain any DIMENSION statements. However, the model referenced in the INCLUDE statement or the root model in a hierarchy must contain the DIMENSION statements needed by the parent model(s).</div>
</li>
</ul>
</li>
<li>
<p>One or more SET commands or equations written following the <a href="dml_commands_2050.htm#i1027115">"Rules for Equations in Models"</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a href="dml_objects.htm#BEIHBBHH">"Dimension Status and Model Equations"</a> for information on how Oracle OLAP processes equations in a model.</div>
</li>
<li>
<p>A final END statement that indicates the end of the model specification. (Omit when coding the specification in an Edit window of the OLAP Worksheet.)</p>
</li>
</ol>
<p>The maximum number of lines you can have in a model is 32,000.</p>
<p class="subhead2"><a id="OLADM2578"></a>MODEL Statement in an Aggregation Specification</p>
<p>Within an aggmap, you can use a special MODEL statement to execute a predefined model. (See the <a href="dml_commands_1006.htm#i1010068">MODEL (in an aggregation)</a> statement under the AGGMAP command for more information.</p>
<p class="subhead2"><a id="OLADM2579"></a>Methods of Calculating Data Within a Variable</p>
<p>Both models and aggmap objects calculate data values within a variable based on relationships among dimension members. When a parent-child relationship exists among dimension members (that is, the dimension has a hierarchical structure) and all aggregate values can be calculated using the same method, then you can use a RELATION statement within an aggregation specification to calculate the values. However, when the dimension is not hierarchical and different equations are needed to calculate the values, then you must define a model. You can use a <a href="dml_commands_1006.htm#i1010068">MODEL (in an aggregation)</a> to execute the MODEL within an aggregation specification or you can run a model at the command line using the syntax shown in <a href="dml_objects.htm#BEIDEBCA">"Running a Model"</a>.</p>
<p class="subhead2"><a id="OLADM2580"></a>Deleting a Model Specification</p>
<p>You can remove the specification of a model without deleting the model definition. Consider the model with a CONSIDER statement. Then issue a MODEL statement and enter the word END as the model specification.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="g1066892"></a>Examples</p>
<div id="OLADM2581" class="example">
<p class="titleinexample"><a id="sthref4682"></a>Example 10-55 Model Specified in a Program</p>
<p>In the following example, a simple model is created (or overwritten) in a program called <code>myprog</code>. The first line in the program defines or considers the model. The second line contains the MODEL statement, which provides the lines of the model.</p>
<p>This model calculates the line items in a budget. The model equations are based on a <code>line</code> dimension.</p>
<pre>
DEFINE myprog PROGRAM
PROGRAM
IF NOT EXISTS('myModel')
  THEN DEFINE myModel
  ELSE CONSIDER myModel
MODEL JOINLINES(-
  'DIMENSION line month' -
  'Opr.Income = Gross.Margin - Marketing' -
  'Gross.Margin = Revenue - Cogs' -
  'Revenue = LAG(Revenue, 1, month) * 1.02' -
  'Cogs = LAG(Cogs, 1, MONTH) * 1.01' -
  'Marketing = LAG(Opr.Income, 1, month) * 0.20' -
  'END')
END
</pre></div>
<!-- class="example" -->
<div id="OLADM2582" class="example">
<p class="titleinexample"><a id="sthref4683"></a>Example 10-56 Model from an Input File</p>
<p>This example presents the text of the same simple model, but it is stored in an ASCII disk file called <code>budget.txt</code>.</p>
<pre>
DEFINE income.budget MODEL
MODEL
DIMENSION line month
Opr.Income = Gross.Margin - Marketing
Gross.Margin = Revenue - Cogs
Revenue = LAG(Revenue, 1, month) * 1.02
Cogs = LAG(Cogs, 1, month) * 1.01
Marketing = LAG(Opr.Income, 1, month) * 0.20
END
</pre>
<p>To include the <code>income.budget</code> model in your analytic workspace, execute the following statement in which <code>myinpfiles</code> is a directory object.</p>
<pre>
INFILE 'myinpfiles/budget.txt'
</pre></div>
<!-- class="example" -->
<div id="OLADM2583" class="example">
<p class="titleinexample"><a id="CHDBGACB"></a><a id="i1010678"></a>Example 10-57 Creating a Model</p>
<p><a id="sthref4684"></a>Suppose that you define a model, called <code>income.calc</code>, that calculates line items in the income statement.</p>
<pre>
define income.calc model
ld Calculate line items in income statement
</pre>
<p><a id="sthref4685"></a>After defining the model, you can use a <code>MODEL</code> statement or the OLAP Worksheet editor to enter the specification for the model. A model specification can contain <code>DIMENSION</code> commands, assignment statements and comments. All the <code>DIMENSION</code> commands must come before the first equation. For the current example, you can specify the lines shown in the following model.</p>
<pre>
DEFINE INCOME.CALC MODEL
LD Calculate line items in income statement
MODEL
DIMENSION line
net.income = opr.income - taxes
opr.income = gross.margin - (marketing + selling + r.d)
gross.margin = revenue - cogs
END
</pre>
<p><a id="sthref4686"></a>When you write the equations in a model, you can place them in any order. When you compile the model, either by issuing a <code>COMPILE</code> statement or by running the model, Oracle OLAP identifies the logical order in which the model equations are solved. When the calculated results of one equation are used as input to another equation, then the equations are solved in the order in which they are needed.</p>
<p><a id="sthref4687"></a>To run the <code>income.calc</code> model and use <code>actual</code> as the solution variable, you execute the following statement.</p>
<pre>
income.calc actual
</pre>
<p>When the solution variable has dimensions other than the dimensions on which model equations are based, then a loop is performed automatically over the current status list of each of those dimensions. For example, <code>actual</code> is dimensioned by <code>month</code> , <code>division</code>, and <code>line</code>. When <code>division</code> is limited to <code>ALL</code>, and <code>month</code> is limited to <code>OCT96</code> to <code>DEC96</code>, then the <code>income.calc</code> model is solved for the three months in the status for each of the divisions.</p>
</div>
<!-- class="example" -->
<div id="OLADM2584" class="example">
<p class="titleinexample"><a id="CHDGFCII"></a><a id="i1010772"></a>Example 10-58 Building a Scenario Model</p>
<p>Suppose, for example, you want to calculate profit figures based on optimistic, pessimistic, and best-guess revenue figures for each division. The steps for building this scenario model are explained in the following example.</p>
<p>You can call the scenario dimension <code>scenario</code> and give it values that represent the scenarios you want to calculate.</p>
<p>These commands give <code>scenario</code> the values <code>optimistic</code>, <code>pessimistic</code> and <code>bestguess</code>.</p>
<pre>
DEFINE scenario DIMENSION TEXT
LD Names of scenarios
MAINTAIN scenario ADD optimistic pessimistic bestguess
</pre>
<p><a id="sthref4688"></a>These commands create a variable named <code>plan</code> dimensioned by three other dimensions (<code>month</code>, <code>line</code>, and <code>division</code>) in addition to the <code>scenario</code> dimension.</p>
<pre>
DEFINE plan DECIMAL &lt;month line division scenario&gt;
LD Scenarios for financials
</pre>
<p>For this example, you must enter input data, such as revenue and cost of goods sold, into the <code>plan</code> variable.</p>
<p>For the best-guess data, you can use the data in the <code>budget</code> variable. Limit the <code>line</code> dimension to the input line items, and then copy the <code>budget</code> data into the <code>plan</code> variable.</p>
<pre>
LIMIT scenario TO 'BESTGUESS'
LIMIT line TO 'REVENUE' 'COGS' 'MARKETING' 'SELLING' 'R.D'
plan = budget
</pre>
<p>You might want to base the optimistic and pessimistic data on the best-guess data. For example, optimistic data might be fifteen percent higher than best-guess data, and pessimistic data might be twelve percent less than best-guess data. With <code>line</code> still limited to the input line items, execute the following commands.</p>
<pre>
plan(scenario 'OPTIMISTIC') = 1.15 * plan(scenario 'BESTGUESS')
plan(scenario 'PESSIMISTIC') = .88 * plan(scenario 'BESTGUESS')
</pre>
<p>The final step in building a scenario model is to write a model that calculates results based on input data. The model might contain calculations very similar to those in the <code>budget.calc</code> model shown earlier in this chapter.</p>
<p>You can use the same equations for each scenario or you can use different equations. For example, you might want to calculate the cost of goods sold and use a different constant factor in the calculation for each scenario. To use a different constant factor for each scenario, you can define a variable dimensioned by <code>scenario</code> and place the appropriate values in the variable. When the name of your variable is <code>cogsval</code>, then your model might include the following equation for calculating the <code>cogs</code> line item.</p>
<pre>
cogs = cogsval * revenue
</pre>
<p>By using variables dimensioned by <code>scenario</code>, you can introduce a great deal of flexibility into your scenario model.</p>
<p>Similarly, you might want to use a different constant factor for each division. You can define a variable dimensioned by <code>division</code> to hold the values for each division. For example, when labor costs vary from division to division, then you might dimension <code>cogsval</code> by <code>division</code> and by <code>scenario</code>.</p>
<p>When you run your model, you specify <code>plan</code> as the solution variable. For example, when your model is called <code>scenario.calc</code>, then you solve the model with this statement.</p>
<pre>
scenario.calc plan
</pre>
<p>A loop is performed automatically over the current status list of each of the dimensions of <code>plan</code>. Therefore, when the <code>scenario</code> dimension is limited to <code>ALL</code> when you run the <code>scenario.calc</code> model, then the model is solved for all three scenarios: <code>optimistic</code>, <code>pessimistic</code>, and <code>bestguess</code>.</p>
</div>
<!-- class="example" --></div>
<!-- class="refsubsect" -->
<div id="OLADM868" class="refsect2"><a id="i80588"></a>
<hr />
<h2 class="refsect2">DIMENSION (in models)</h2>
<p><a id="sthref4689"></a>The DIMENSION statement at the beginning of a model tells Oracle OLAP the names of one or more dimensions to which the model assigns data or to which it refers in dimension-based equations. A dimension-based equation assigns the results of a calculation to a target that is represented by one or more values of a dimension.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4690"></a>Syntax</p>
<p class="synopsis">DIMENSION&nbsp;<span class="italic">dimension1&nbsp;</span>[,&nbsp;<span class="italic">dimensionN</span>]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4691"></a>Parameters</p>
<dl>
<dt><span class="italic">dimension</span></dt>
<dd>
<p>One or more dimensions, including base dimensions of composites, on which model equations are based. You can specify the name of a dimension surrogate instead of the dimension for which is a surrogate. You can then use the values of the surrogate instead of the values of the dimension.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="g1031965"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2585"></a>Dimension-Based Equations in Models</p>
<p>When an equation (SET) assigns data to a dimension value or refers to dimension values in its calculations, it is called a <span class="italic">dimension-based</span> equation. Note that a dimension-based equation does not have to refer to the dimension itself, but only to the <span class="italic">values</span> of the dimension. Therefore, when the model contains any dimension-based equations, you must specify the name of each of these dimensions in a DIMENSION statement at the beginning of the model s that Oracle OLAP can determine the dimension to which each dimension value belongs. You can specify the name of a dimension surrogate instead of the dimension for which it is a surrogate. You can then use the values of the surrogate instead of the values of the dimension.</p>
<p>In addition, when a model contains any dimension-based equations, you must supply the name of a <span class="italic">solution variable</span> when you run the model. The solution variable is both the source and the target of data for the model. It holds the input data used in dimension-based calculations, and Oracle OLAP stores the calculation results in designated values of the solution variable. The solution variable is generally dimensioned by all the dimensions on which the model equations are based. For example, in a financial application, the model might be based on the <code>line</code> dimension, and the solution variable might be <code>actual</code>, which has <code>line</code> as one of its dimensions.</p>
<p>Dimension-based equations provide flexibility in modeling. Because you do not have to specify the modeling variable until you solve a model, you can run the same model with different solution variables. For example, you might run the same model with the <code>actual</code> variable, with a "best case" budget variable, and with a "worst case" budget variable.</p>
<p>A dimension must be specified in a DIMENSION statement when a dimension-based equation refers to a value of the dimension either as a source of the data used in the calculation or as the target to which the results are assigned. In the following example, <code>Gross.Margin</code>, <code>Revenue</code>, and <code>Cogs</code> are values of the <code>line</code> dimension, so <code>line</code> is specified in a DIMENSION statement.</p>
<pre>
DIMENSION line
Gross.Margin = Revenue - Cogs
</pre>
<p class="subhead2"><a id="OLADM2586"></a>Dimension is a Function Argument</p>
<p>A dimension must be specified in a DIMENSION statement when the dimension is an argument to a function that uses a dimension value as its data source. In the following example, <code>month</code> must be specified in a DIMENSION statement.</p>
<pre>
DIMENSION line, month
Revenue = lag(Revenue, 1, month) * 1.05
</pre>
<p>The writer of the preceding model expects to use a solution variable that is dimensioned by <code>line</code> and <code>month</code>. Therefore, when the model is run, the LAG function operates on a solution variable that has the specified time dimension (<code>month</code>) as one of its dimensions. However, because the model compiler cannot anticipate the time dimension of the solution variable, you must specify it in a DIMENSION statement. When you fail to include <code>month</code> in a DIMENSION statement, an error occurs when you attempt to compile the model.</p>
<p>In a function that operates on time-series data (such as MOVINGTOTAL or LAG), the <span class="italic">dimension</span> argument is optional when the dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR. For example, you can omit <code>month</code> from the LAG function in the preceding example. However, you must still specify the appropriate time dimension in a DIMENSION statement.</p>
<p class="subhead2"><a id="OLADM2587"></a>Solution Variable</p>
<p>When you run a model that contains dimension-based equations, you specify a solution variable, which is both the source and the target of data for the model. The solution variable is generally dimensioned by all the dimensions that are listed in the DIMENSION commands used in the model. Or, when a solution variable is dimensioned by a composite, the DIMENSION commands can list base dimensions of the composite. The DIMENSION commands can be explicit in the model or inherited through an included model. See <a href="#i81076">"Incompatibility with INCLUDE"</a>.</p>
<p class="subhead2"><a id="OLADM2588"></a>Working with Composites</p>
<p>When you expect to run a model with a solution variable that has a composite in its dimension list, you can specify a base dimension of the composite in a DIMENSION statement. Your model equations assign results to values of the base dimension. Oracle OLAP automatically creates any new values that are needed in the composite.</p>
<p class="subhead2"><a id="OLADM2589"></a>Multiple DIMENSION Commands</p>
<p>You can include a separate DIMENSION statement for every dimension referred to or used in dimension-based equations, or you can specify all the dimensions in a single DIMENSION statement.</p>
<p class="subhead2"><a id="OLADM2590"></a>Location of Commands</p>
<p>You must place all the DIMENSION commands at the beginning of the model, before any equations.</p>
<p class="subhead2"><a id="i81076"></a><a id="OLADM2591"></a>Incompatibility with INCLUDE</p>
<p>When a model contains an INCLUDE statement, it cannot contain any DIMENSION commands. The INCLUDE statement specifies another model to include in the current model. In this case, the current model inherits its DIMENSION commands, if any, from the included model. For more information in including models, see the <a href="#i78931">INCLUDE</a> statement under the MODEL command.</p>
<p>Inherited DIMENSION commands must satisfy all the requirements specified for explicit DIMENSION commands. See <a href="#i1010430">"Guidelines for Writing DIMENSION Statements in a Model"</a>.</p>
<p class="subhead2"><a id="OLADM2592"></a>Dimension Order</p>
<p>When multiple dimensions are specified by the DIMENSION commands in a model, the order in which the dimensions are listed is important:</p>
<ul>
<li>
<p>When a model equation contains a name that might be a dimension value, Oracle OLAP searches through the dimensions that appear in the model's explicit or inherited DIMENSION commands, in the order you list the dimensions, to determine whether the name matches a dimension value of a listed dimension. The search concludes as soon as a match is found. Therefore, when two or more listed dimensions have a dimension value with the same name, Oracle OLAP assumes that the value belongs to the dimension specified earliest in a DIMENSION statement. When the name does not match a value of a listed dimension, Oracle OLAP then searches through the variables in the attached workspaces to find a match.</p>
</li>
<li>
<p>When model equations assign results to values of a target dimension, Oracle OLAP constructs code that loops over the values of the other, non-target, dimensions listed in the DIMENSION commands. The non-target dimension listed first in the DIMENSION commands is treated as the slowest-varying dimension. For example, when MONTH is the first non-target dimension listed in a DIMENSION statement and DIVISION is the second, Oracle OLAP loops through all the divisions for the first month, then all the divisions for the second month, and so on.</p>
</li>
</ul>
<p class="subhead2"><a id="i1010430"></a><a id="OLADM2593"></a>Guidelines for Writing DIMENSION Statements in a Model</p>
<p>When you write <code>DIMENSION</code> statements, keep these points in mind:</p>
<ul>
<li>
<p>In the <code>DIMENSION</code> statements, you must list the names of all the dimensions on which model equations are based. In the following example, <code>gross.margin</code>, <code>revenue</code>, and <code>cogs</code> are values of the <code>line</code> dimension, so <code>line</code> is specified in a <code>DIMENSION</code> statement.</p>
<pre>
DIMENSION line
gross.margin = revenue - cogs
</pre></li>
</ul>
<ul>
<li>
<p><code>DIMENSION</code> statements must also list any dimension that is an argument to a function that refers to a dimension value. In the following example, <code>month</code> must be specified in a <code>DIMENSION</code> statement.</p>
<pre>
DIMENSION line, month
revenue = LAG(revenue, 1, month) * 1.05
</pre></li>
</ul>
<ul>
<li>
<p>When a model equation assigns results to a dimension value, then code is constructed that loops over the values of any of the other nontarget dimensions listed in the <code>DIMENSION</code> statements. The nontarget dimension listed first in the <code>DIMENSION</code> statements is treated as the slowest-varying dimension.</p>
</li>
<li>
<p><a id="sthref4692"></a>A model executes most efficiently when you observe the following guidelines for coordinating the dimensions in <code>DIMENSION</code> statements and the dimensions of the solution variable:</p>
<ul>
<li>
<p>List the target dimension of the model as the <span class="italic">first</span> dimension in the <code>DIMENSION</code> statements and as the <span class="italic">last</span> dimension in the definition of the solution variable.</p>
</li>
<li>
<p>In <code>DIMENSION</code> statements, list the nontarget dimensions in the <span class="italic">reverse</span> order of their appearance in the definition of the solution variable. Consequently, the fastest-varying and slowest-varying nontarget dimensions are in the same order in the model and in the solution variable.</p>
</li>
</ul>
</li>
<li>
<p>When the solution variable has dimensions that are not used or referred to in model equations, then do not include them in <code>DIMENSION</code> statements.</p>
</li>
<li>
<p>When your analytic workspace contains a variable whose name is the same as a dimension value, or when the same dimension value exists in two different dimensions, then there could be ambiguities in your model equations. Because you can use a variable and a dimension value in the same way in a model equation, a name might be the name of a variable, or it might be a value of any dimension in your analytic workspace.</p>
</li>
<li>
<p>Your <code>DIMENSION</code> statements are used to determine whether each name reference in an assignment statement is a variable or a dimension value. <a href="dml_objects.htm#BEIJAACH">"Compiling Models"</a> explains how the name references are resolved.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_objects.htm#BEIDHDFI">"OLAP DML Model Objects"</a>, SET, and MODEL for information on:
<ul>
<li>
<p>Entering statements in a model</p>
</li>
<li>
<p>How to refer to values of dimensions</p>
</li>
<li>
<p>Explanation of how Oracle OLAP constructs code from the statements</p>
</li>
<li>
<p>Explanation of how Oracle OLAP handles the situation in which the solution variable has more dimensions or fewer dimensions than are listed in DIMENSION commands</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4693"></a>Examples</p>
<div id="OLADM2594" class="example">
<p class="titleinexample"><a id="sthref4694"></a>Example 10-59 Simplified Model for Budget Estimates</p>
<p>The following statements define a simplified model that estimates budget values for the items on an income statement.</p>
<pre>
DEFINE income.budget MODEL
LD Model for estimating budget line items
MODEL
dimension line, month
Revenue = 1.05 * LAG(Revenue 1 month)
Gross.Margin = Revenue - Cogs
Opr.Income = Gross.Margin - (Marketing + Selling + R.D)
Net.Income = Opr.Income - Taxes
END
</pre>
<p>The model equations are based on the <code>line</code> dimension, so <code>line</code> is specified in the DIMENSION statement. The dimension <code>month</code> is the time dimension in the LAG function that operates on REVENUE values, so <code>month</code> is also specified in the DIMENSION statement.</p>
<p>When you run the model, Oracle OLAP loops over the values in the current status of the <code>month</code> dimension.</p>
</div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="OLADM869" class="refsect2"><a id="i78931"></a>
<hr />
<h2 class="refsect2">INCLUDE</h2>
<p><a id="sthref4695"></a><a id="sthref4696"></a><a id="sthref4697"></a>The INCLUDE statement includes one model within another model. You can use the INCLUDE statement only within models.</p>
<p>Use INCLUDE to create modular models by placing equations that are common to several models, in a separate model for inclusion on other models as needed. The INCLUDE statement also facilitates what-if analyses. An experimental model can draw equations from a base model and selectively replace them with new equations</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4698"></a>Syntax</p>
<p class="synopsis">INCLUDE&nbsp;<span class="italic">model</span></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4699"></a>Parameters</p>
<dl>
<dt><span class="italic">model</span></dt>
<dd>
<p>The name of a model to include in the current model. The current model is referred to as the parent model. The model that you include is referred to as the base model.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4700"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2595"></a>Guidelines for Coding INCLUDE Statements in a Model</p>
<p>Follow these guidelines for using INCLUDE statements in models:</p>
<ul>
<li>
<p>A model can contain only one INCLUDE statement.</p>
</li>
<li>
<p>The INCLUDE statement must be before any equations in the model.</p>
</li>
<li>
<p>A model that contains an INCLUDE statement cannot contain any DIMENSION statements.</p>
</li>
</ul>
<p class="subhead2"><a id="OLADM2596"></a>How to Nest Models</p>
<p>You can nest models by placing an INCLUDE statement in a base model. For example, model <code>myModel1</code> can include model <code>myModel2</code>, and model <code>myModel2</code> can include model <code>myModel3</code>. The nested models form a hierarchy. In this example, <code>myModel1</code> is at the top of the hierarchy, and <code>myModel3</code> is at the root. A base model cannot include a model at a higher level in the hierarchy. In the preceding example, <code>myModel2</code> cannot include <code>myModel1</code>, and <code>myModel3</code> cannot include <code>myModel1</code> or <code>myModel2</code>.</p>
<p class="subhead2"><a id="OLADM2597"></a>Dependencies Among Equations</p>
<p>When compiling a model that contains an INCLUDE statement, the compiler considers the dependencies among the equations from all the included models when it orders and blocks the equations. Therefore, when you run the <code>MODEL.COMPRPT</code> program to examine the results of the compilation or when you set the MODTRACE option to <code>YES</code> before running the parent model, you might find that equations from different levels in the hierarchy of included models are interspersed. See <a href="#i79514">Example 10-61, "Producing a Compilation Report"</a><span class="bold">.</span></p>
<p>When the compiler finds no dependencies among the equations from the included models, it executes the equations in the root model first and the equations in the parent model last.</p>
<p class="subhead2"><a id="OLADM2598"></a>Compiling a Parent Model</p>
<p>When you compile a parent model, the compiler compiles all the base models under it in the included hierarchy when compiled code does not already exist. When the compiler detects an error in an included model, neither it nor any model above it in the hierarchy is compiled. When the root model of the included hierarchy contains an error, the higher-level models are unable to inherit any DIMENSION statements from the root model. In this case, the compiler might report an error in a parent model when the source of the error is actually in the root model. For example, the compiler might report that a target dimension value does not exist in any attached analytic workspace. On the other hand, when the compiler detects an error in a parent model but finds no errors in the included models, the included models are compiled even though the parent model is not.</p>
<p class="subhead2"><a id="OLADM2599"></a>Masking Equations</p>
<p>To support what-if analyses, Oracle OLAP allows equations in a model to mask previous equations. The previous equations can come from the same model or from included models. A masked equation is not executed. When you run the <code>MODEL.COMPRPT</code> program after compiling the model, the masked equation is not shown in the report on the compiled model.</p>
<p>Masking can take place when an equation assigns a value to a variable or dimension value that is also the target of a previous equation. The masking rules are as follows:</p>
<ul>
<li>
<p>When the target in the earlier equation is qualified the same as the target in the later equation, the earlier equation is masked and the later equation is executed. The following example illustrates two equations with targets that are identically qualified.</p>
<pre>
Equation from a base model:      BUDGET(LINE REVENUE) = 5000
Equation from the parent model:  BUDGET(LINE REVENUE) = 3500
</pre>
<pre>
</pre>
<p>In this example, the equation from the base model is masked and the equation from the parent model is executed.</p>
</li>
<li>
<p>When the target in the earlier equation is more qualified than the target in the later equation, the earlier equation is masked. The later equation is executed.</p>
<p>The target that is more qualified is the one that affects the fewest dimension values. Consider the following equations from a base model and a parent model.</p>
<pre>
Equation from a base model:      BUDGET(LINE REVENUE) = 2500
Equation from the parent model:  BUDGET = 4000
</pre>
<pre>
</pre>
<p>The equation from the base model is more qualified because it assigns data only for the REVENUE value of the LINE dimension. The equation from the parent model assigns data to all the values of the LINE dimension. In this example, the equation from the base model is masked and the equation from the parent model is executed.</p>
</li>
<li>
<p>When the target in the earlier equation is less qualified than the target in the later equation, no masking takes place. Both equations are executed.</p>
<p>Consider the following equations from a base model and a parent model.</p>
<pre>
Equation from a base model:      BUDGET = LAG(ACTUAL, 1, MONTH)
Equation from the parent model:  BUDGET(LINE REVENUE) = 6500
Equation from the parent model:  BUDGET(LINE COGS) = 4000
</pre>
<pre>
</pre>
<p>The equation from the base model assigns data to all the values of the LINE dimension. The equations from the parent model are more qualified because each assigns data only for a single value of the LINE dimension. In this example, the equation from the base model is executed first, and then the equations from the parent model are executed.</p>
<p>This functionality enables you to assign a large number of values with one equation and use subsequent equations to replace or test individual values.</p>
</li>
<li>
<p>When the target in the earlier equation is qualified differently from the target in the later equation, no masking takes place. Both equations are executed. In the following example, both equations are executed.</p>
<pre>
Equation from a base model:      BUDGET(LINE REVENUE) = 5000
Equation from the parent model:  BUDGET(LINE COGS) = 4500
</pre></li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4701"></a>Examples</p>
<div id="OLADM2600" class="example">
<p class="titleinexample"><a id="sthref4702"></a>Example 10-60 Including a Model</p>
<p>This example shows a parent model named <code>income.plan</code> that includes a base model named <code>base.lines</code>.</p>
<pre>
DEFINE income.plan MODEL
MODEL
INCLUDE base.lines
revenue = LAG(revenue, 1, month) * 1.02
cogs = LAG(cogs, 1, month) * 1.01
taxes = 0.3 * opr.income
END
 
DEFINE BASE.LINES MODEL
MODEL
DIMENSION line month
net.income = opr.income - taxes
opr.income = gross.margin - marketing
gross.margin = revenue - cogs
END
</pre></div>
<!-- class="example" -->
<div id="OLADM2601" class="example">
<p class="titleinexample"><a id="i79514"></a>Example 10-61 Producing a Compilation Report</p>
<p>The following statements compile the parent model and produce a compilation report.</p>
<pre>
COMPILE income.plan
MODEL.COMPRPT income.plan
</pre>
<p>These statements produce the following output.</p>
<pre>
MODEL INCOME.PLAN &lt;LINE MONTH&gt;
                      BLOCK 1 (SIMPLE)
INCOME.PLAN     2:    revenue = lag(revenue, 1, month) * 1.02
INCOME.PLAN     3:    cogs = lag(cogs, 1, month) * 1.01
BASE.LINES      4:    gross.margin = revenue - cogs
BASE.LINES      3:    opr.income = gross.margin - marketing
INCOME.PLAN     4:    taxes = 0.3 * opr.income
BASE.LINES      2:    net.income = opr.income - taxes
                      END BLOCK 1
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3088">
<tr>
<td class="cellalignment3095">
<table class="cellalignment3093">
<tr>
<td class="cellalignment3092"><a href="dml_commands_2016.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3092"><a href="dml_commands_2018.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3097">
<table class="cellalignment3091">
<tr>
<td class="cellalignment3092"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3092"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3092"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3092"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3092"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3092"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
