<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>SET</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 742" />
<meta name="dcterms.created" content="2013-11-14T21:21:57Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="OLAP DML Reference" />
<meta name="dcterms.identifier" content="E17122-08" />
<meta name="dcterms.isVersionOf" content="OLADM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="dml_commands_2049.htm" title="Previous" type="text/html" />
<link rel="Next" href="dml_commands_2051.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e17122.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">524/593</span> <!-- End Header --><a id="CIHCEHEH"></a>
<hr />
<div id="OLADM899" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h1 class="refsect1">SET</h1>
<p><a id="sthref4975"></a><a id="sthref4976"></a><a id="sthref4977"></a>The SET command, <a id="sthref4978"></a>also called an assignment statement or the = command, assigns one or more values to a variable, option, relation, or dimension surrogate. When an object has one or more dimensions, the SET command loops over the values in status for each dimension of the target object and assigns a data value to the corresponding cell of the target object.</p>
<p>When the target is an object defined with a composite in its dimension list, Oracle OLAP automatically creates any missing target cells that are being assigned non-<code>NA</code> values. This step also adds to the composite all the dimension value combinations that correspond to those new cells. Thus, both the target object and the composite might be larger after an assignment. When you want to assign values only to cells that already exist in the target, use the ACROSS keyword.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can use UNRAVEL with SET to assign values of an expression into the cells of a variable when the dimensions of the expression are different from the dimensions of the variable</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4979"></a>Syntax</p>
<p class="synopsis">[SET]&nbsp;<span class="italic">target-name&nbsp;</span>[=]&nbsp;<span class="italic">expression&nbsp;</span>[ACROSS&nbsp;<span class="italic">composite</span>]</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4980"></a>Parameters</p>
<dl>
<dt>SET</dt>
<dd>
<p>SET is optional. It is an older command form of this functionality, and is included for compatibility.</p>
</dd>
<dt><span class="italic">target-name</span></dt>
<dd>
<p>The name of the target object where the data is assigned and stored. For a list of analytic workspace objects that can be a target object, see <a href="#g1042888">Table 10-9, "Using Objects in Assignment Statements"</a>.</p>
</dd>
<dt>=</dt>
<dd>
<p>The = (assignment or equal) operator assigns one or more values to a variable, option, or relation. See also <a href="dml_expression.htm#BABFDFEA">"Assignment Operator"</a>.</p>
</dd>
<dt><span class="italic">expression</span></dt>
<dd>
<p>The source of the data values to be assigned to the object, see <a href="#g1042888">Table 10-9, "Using Objects in Assignment Statements"</a></p>
</dd>
<dt>ACROSS <span class="italic">composite</span></dt>
<dd>
<p><a id="sthref4981"></a><a id="sthref4982"></a>When you are assigning data to a variable dimensioned by a composite the default behavior is to loop over all the values in status for each of the base dimensions of the object. Oracle OLAP automatically creates any missing target cells that are being assigned non-<code>NA</code> values, and it automatically adds the required dimension value combinations to the composite.</p>
<p>When you want to assign values only to existing cells of a variable defined with a composite, use the ACROSS keyword, which causes = to change the way it loops for those dimensions of the target that are part of the composite. Instead of looping over all possible combinations of the values in the status of those dimensions, = loops only over those combinations of the values in the status that already exist in the composite.</p>
<p>The ACROSS keyword is intended for specifying a composite. However, when you specify a base dimension of the composite instead, be aware that the assignment statement could add many values to your composite.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="g1064371"></a>Usage Notes</p>
<p class="subhead2"><a id="OLADM2736"></a>Triggering Program Execution When an Assignment Statement Executes</p>
<p>Using the TRIGGER command, you can make a SET statement an event that automatically executes an OLAP DML program. See <a href="dml_program.htm#CHDBDIIH">"Trigger Programs"</a> for more information</p>
<p class="subhead2"><a id="OLADM2737"></a>Dimensionality and Performance</p>
<p>When the target has multiple dimensions, the = statement&nbsp;loops over the dimension values in the order in which they were added, regardless of their logical order as reflected by the default status. In a multidimensional case, the looping is over the compound dimension. The first dimension listed in the definition varies the fastest. When you are setting the target to the values of an expression, Oracle OLAP performs much more efficiently when the source expression has the same dimensions, in the same order, as the target.</p>
<p class="subhead2"><a id="OLADM2738"></a>Differently Dimensioned Variables in an Expression</p>
<p>When an assignment statement involves several differently-dimensioned objects, the calculation can appear complicated. The following list outlines the process followed by a complicated assignment statement. When the statement is A&nbsp;=&nbsp;B<span class="italic">,</span> where A is the object being set to the expression B, Oracle OLAP first determines the dimensions of A. Then it determines the status of those dimensions. For each combination of dimension values in the status of those dimensions:</p>
<ol>
<li>
<p>Oracle OLAP determines which single value of A (sometimes called a cell) is going to be set.</p>
</li>
<li>
<p>For each component of the expression B (each variable, formula, function, qualified data reference, or literal), Oracle OLAP determines the single value that corresponds to the cell of A that is being set. When a component of the expression is not dimensioned or is a literal, Oracle OLAP simply uses its value. When a component of the expression has dimensions different from A, Oracle OLAP uses the first value in the status of these dimensions.</p>
</li>
<li>
<p>Oracle OLAP performs the specified calculation on the single values obtained in Step 2 and stores the result in the cell of A chosen in Step 1.</p>
</li>
</ol>
<p class="subhead2"><a id="i1015026"></a><a id="OLADM2739"></a>Using Objects in Assignment Statements</p>
<p><a href="#g1042888">Table 10-9, "Using Objects in Assignment Statements"</a> outlines the objects that you can use in assignment statements and indicates whether you can use them as a target or source expression.</p>
<div id="OLADM2740" class="tblformal">
<p class="titleintable"><a id="sthref4983"></a><a id="g1042888"></a>Table 10-9 Using Objects in Assignment Statements</p>
<table class="cellalignment3098" title="Using Objects in Assignment Statements" summary="This table outlines the objects that you can use in assignment statements and indicates whether you can use them as a target or source expression." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t99">Object</th>
<th class="cellalignment3099" id="r1c2-t99">Target</th>
<th class="cellalignment3099" id="r1c3-t99">Source</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t99" headers="r1c1-t99">
<p>Composite</p>
</td>
<td class="cellalignment3095" headers="r2c1-t99 r1c2-t99">
<p>No</p>
</td>
<td class="cellalignment3095" headers="r2c1-t99 r1c3-t99">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t99" headers="r1c1-t99">
<p>Dimension</p>
</td>
<td class="cellalignment3095" headers="r3c1-t99 r1c2-t99">
<p>Only in models</p>
</td>
<td class="cellalignment3095" headers="r3c1-t99 r1c3-t99">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t99" headers="r1c1-t99">
<p>Formula</p>
</td>
<td class="cellalignment3095" headers="r4c1-t99 r1c2-t99">
<p>Yes</p>
</td>
<td class="cellalignment3095" headers="r4c1-t99 r1c3-t99">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t99" headers="r1c1-t99">
<p>Function (including OLAP DML program as function)</p>
</td>
<td class="cellalignment3095" headers="r5c1-t99 r1c2-t99">
<p>No</p>
</td>
<td class="cellalignment3095" headers="r5c1-t99 r1c3-t99">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t99" headers="r1c1-t99">
<p>Relation</p>
</td>
<td class="cellalignment3095" headers="r6c1-t99 r1c2-t99">
<p>Yes</p>
</td>
<td class="cellalignment3095" headers="r6c1-t99 r1c3-t99">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t99" headers="r1c1-t99">
<p>Surrogate</p>
</td>
<td class="cellalignment3095" headers="r7c1-t99 r1c2-t99">
<p>Yes</p>
</td>
<td class="cellalignment3095" headers="r7c1-t99 r1c3-t99">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r8c1-t99" headers="r1c1-t99">
<p>Valueset</p>
</td>
<td class="cellalignment3095" headers="r8c1-t99 r1c2-t99">
<p>No</p>
</td>
<td class="cellalignment3095" headers="r8c1-t99 r1c3-t99">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r9c1-t99" headers="r1c1-t99">
<p>Variable</p>
</td>
<td class="cellalignment3095" headers="r9c1-t99 r1c2-t99">
<p>Yes</p>
</td>
<td class="cellalignment3095" headers="r9c1-t99 r1c3-t99">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r10c1-t99" headers="r1c1-t99">
<p>Worksheet</p>
</td>
<td class="cellalignment3095" headers="r10c1-t99 r1c2-t99">
<p>Yes</p>
</td>
<td class="cellalignment3095" headers="r10c1-t99 r1c3-t99">
<p>Yes</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a href="#CDFJFCDG">"Assigning Values to Variables"</a>, <a href="#CDFJEAEC">"Assigning Values to Relations"</a>, <a href="#i1027115">"Rules for Equations in Models"</a>, <a href="#CDFGJDHA">"Expressions Dimensioned Conjoint Dimensions"</a>, and <a href="#CDFJEIEC">"Assigning Values to Dimension Surrogates"</a>.</div>
<p class="subhead2"><a id="CDFJFCDG"></a><a id="OLADM2741"></a>Assigning Values to Variables</p>
<p>When you use an = (SET) statement to assign the value of a single-cell expression to a single cell, a single value is stored. However, when you use an = statement to assign the value of a single-cell expression to a target variable that has one or more dimensions, then the assignment loops over the values in status for each dimension of the target variable and assigns a data value to the corresponding cells of the variable.</p>
<p>When you assign a multiline value to a fixed-width text variable, then the variable is set to the first line only. To assign a multiline value to a fixed-width text variable, you use the JOINCHARS function to make the multiline value one line long. For example, suppose you have a non-fixed-width text variable called <code>textvar</code>. The statement</p>
<pre>
SHOW textvar
</pre>
<p>produces the following output, in which each line of the value in <code>textvar</code> is shown as a separate line.</p>
<pre>
This is a variable
that has a multiline
text value.
</pre>
<p>To assign this value to a variable called <code>fixedtext</code> with a fixed width of 60 bytes and show the value, you would use the following statements.</p>
<pre>
fixedtext = JOINCHARS(textvar)
SHOW fixedtext
</pre>
<p>These statements produce the following output, in which the value of <code>textvar</code> is shown as a single line.</p>
<pre>
This is a variable that has a multiline text value.
</pre>
<p>When the actual number of bytes in the <code>textvar</code> variable's value exceeds the width of the <code>fixedtext</code> variable, then the value of <code>textvar</code> is truncated when it is stored in <code>fixedtext</code>.</p>
<p class="subhead2"><a id="CDFJEAEC"></a><a id="OLADM2742"></a>Assigning Values to Relations</p>
<p><a id="sthref4984"></a>You can assign values to a relation using a SET statement as illustrated in <a href="#CIHDEBCJ">Example 10-114, "Assigning Values to a Relation"</a>. When executing the assignment statement, a loop is performed over the values in status for each dimension of the target relation and assigns a data value to the corresponding cell of the target relation.</p>
<p>You can assign values to a relation with a text dimension by assigning one of the following:</p>
<ul>
<li>
<p>A text value of the dimension.</p>
</li>
<li>
<p>An INTEGER that represents the position of the dimension value in the default status list of the dimension.</p>
</li>
</ul>
<p class="subhead2"><a id="OLADM2743"></a>Assigning Values to Dimensions</p>
<p>The only time you use an = statement to assign a value to a dimension is when the result of a calculation in a model equation is numeric. In this situation, you can use the =&nbsp;operator to assign the results to a dimension value. However, equations (that is, expressions) in models differ in several ways from expressions used in other contexts. See <a href="#i1027115">"Rules for Equations in Models"</a> for information on using the assignment statement within models. See the <a href="dml_commands_2016.htm#i1017721">MAINTAIN</a> command for information on how to add values to dimensions in all other cases.</p>
<p class="subhead2"><a id="CDFJEIEC"></a><a id="OLADM2744"></a>Assigning Values to Dimension Surrogates</p>
<p><a id="sthref4985"></a>You assign values to a dimension surrogate with an = (SET) statement. For example, the following statements define the dimension surrogate <code>storename</code>, which is a <code>TEXT</code> type surrogate for the <code>NUMBER</code> type dimension <code>store_id</code>, assign a value to the fourth position of <code>storename</code>, and then report the value of the surrogate for the fourth value of <code>store_id</code>, which is <code>100</code>.</p>
<pre>
DEFINE storename SURROGATE store_id TEXT
storename(storename 4) = 'Molly\'s Emporium'
REPORT W 25 storename(store_id 100)
 
STORENAME(STORE_ID 100)
-------------------------
Molly's Emporium
</pre>
<p>For example, when you define the INTEGER dimension surrogate <code>intsurr</code> for a <code>NUMBER</code> dimension <code>numdim</code> that has five values, then a report of <code>intsurr</code> produces the following.</p>
<pre>
INTSURR
-------
      1
      2
      3
      4
      5
</pre>
<p>Like a dimension, the values of a dimension surrogate must be unique. However, unlike a dimension, a dimension surrogate can have <code>NA</code> values, unless it is an INTEGER type. The same value can be a value of the dimension and of any of its surrogates.</p>
<p class="subhead2"><a id="OLADM2745"></a>Using QDRs with the Target of an Assignment Statement</p>
<p>You can use a QDR with the target of an = (SET) statement which lets you assign a value to specific cells in a variable or relation.</p>
<p>The following example assigns the value 10200 to the data cell of the <code>sales</code> variable that is specified in the qualified data reference. When the variable named <code>sales</code> does not already have a value in the cell associated with <code>Boston</code>, <code>Tents</code>, and <code>Jan99</code>, then the value is assigned to the cell and thus it is added to the variable. When a value already exists in the cell, the value 10200 overwrites the previous value.</p>
<pre>
sales(market 'Boston' product 'Tents' month 'Jan99')= 1020
</pre>
<p class="subhead2"><a id="CDFGJDHA"></a><a id="OLADM2746"></a>Expressions Dimensioned Conjoint Dimensions</p>
<p>When an expression is dimensioned by a conjoint dimension, Oracle OLAP uses the dimension's relationship to its base dimension values to assign data to the correct cells. You can set the values of a variable dimensioned by a conjoint dimension to an expression dimensioned by one of its base dimensions. The converse is also true. See <a href="#i1014942">"Compacting Your Data"</a>.</p>
<p class="subhead2"><a id="i1027115"></a><a id="OLADM2747"></a>Rules for Equations in Models</p>
<p>The equations in a model use an OLAP DML assignment statement to assign values to variables or dimension values. Equations in models differ in several ways from equations used in other contexts in Oracle OLAP:</p>
<ul>
<li>
<p>In a model equation, you can use the name of a dimension value anywhere you would normally use the name of a variable. You can base calculations on a dimension value, and you can assign the results of a calculation to a dimension value. When an equation refers directly to one or more dimension values, it is called a dimension-based equation.</p>
</li>
<li>
<p>You cannot use ampersand substitution in model equations.</p>
</li>
<li>
<p>You can include a program as a component in a calculation only when it is used as a function.</p>
</li>
<li>
<p>Within a single dimension-based equation, all the dimension values must belong to the same dimension.</p>
</li>
<li>
<p>When you assign the results of a calculation to a dimension value, the results must be numeric.</p>
</li>
<li>
<p>Each dimension on which the model equations are based must be listed in a DIMENSION statement. When the model contains an INCLUDE statement, the appropriate DIMENSION statements must be inherited from the included model. When the model does not contain an INCLUDE statement, it must contain the appropriate DIMENSION statements. When you compile or run the model, Oracle OLAP searches through the dimensions listed in explicit or inherited DIMENSION statement to identify the dimension to which each dimension value belongs.</p>
</li>
</ul>
<p><a id="OLADM2748"></a><span class="subhead3">Dimension Status and Model Equations&nbsp;</span>When a model contains an assignment statement to assigns data to a dimension value, then the dimension is limited temporarily to that value, performs the calculation, and then restores the initial status of the dimension.</p>
<p><a id="OLADM2749"></a><span class="subhead3">Formatting Conjoint Dimension Values&nbsp;</span>A special format is required when dimension-based equations refer to values of a conjoint dimension:</p>
<ul>
<li>
<p>Enclose the entire dimension value specification in angle brackets and then enclose this entire specification in single quotes; do not enclose the individual values in single quotes.</p>
</li>
<li>
<p>Use the exact upper- and lowercase spellings for the base dimension values.</p>
</li>
<li>
<p>When the specification includes a text value with an embedded blank, you must separate the dimension values with commas.</p>
</li>
</ul>
<p>For example, assume that <code>item.org</code> is a conjoint dimension with base dimensions <code>item</code> and <code>org</code>. In this case, you use the following format to refer to values of <code>item.org</code>.</p>
<pre>
'&lt;Expenses, Direct Sales&gt;'
</pre>
<p><a id="OLADM2750"></a><span class="subhead3">Formatting Text Dimension Values&nbsp;</span>When dimension-based equations refer to text dimension values with embedded blanks or mixed upper- and lowercase letters, enclose the dimension value in single quotes. Use the exact upper- and lowercase spelling for the value.</p>
<p>For example, assume that a text dimension named <code>lineitem</code> contains a value with an embedded blank. In this case, you use the following format.</p>
<pre>
'Software Revenue'
</pre>
<p><a id="OLADM2751"></a><span class="subhead3">Specifying DAY, WEEK, MONTH, QUARTER, YEAR Values for a Model Equation&nbsp;</span>When a model equation is based on a dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR, you must use the dimension's VNF (value name format), rather than a date format, to specify the dimension's values. In addition, the VNF must format dimension values as follows:</p>
<ul>
<li>
<p>The value must start with a letter.</p>
</li>
<li>
<p>The value can only contain letters, digits, underscores, and periods.</p>
</li>
</ul>
<p>When the WEEK, MONTH, QUARTER, YEAR dimension of type does not have a VNF assigned to it, you can use the default VNF for the dimension. The entry for the VNF command lists the default VNF for each of these dimension types, and it explains how to assign a VNF to a dimension.</p>
<p>The default VNF for DAY dimensions is not acceptable because it specifies a digit as the first character of each dimension value. For a DAY dimension, specify the dimension name and enclose the value in parentheses and single quotes.</p>
<p>For example, for a DAY dimension named <code>daydim</code>, you can use the following format.</p>
<pre>
daydim('01jul97')
</pre>
<p><a id="BCFEHABC"></a><a id="OLADM2752"></a><span class="subhead3">Formatting INTEGER Dimension Values&nbsp;</span>When dimension-based equations refer to values of an INTEGER dimension, enclose the dimension value in single quotes.</p>
<p>For example, for an INTEGER dimension named <code>intdim</code>, use the following format to refer to the first dimension value.</p>
<pre>
'1'
</pre>
<p>When the model is based on multiple dimensions, the model compiler might not be able to correctly identify the dimension to which a literal <code>INTEGER</code> value belongs. In this case, specify the name of the dimension and enclose the value in parentheses and single quotes as described in <a href="#i1027570">"Formatting Ambiguous Dimension Values"</a>.</p>
<p><a id="i1027570"></a><a id="OLADM2753"></a><span class="subhead3">Formatting Ambiguous Dimension Values&nbsp;</span>In some cases the model compiler might be unable to correctly identify the dimension to which a dimension value belongs. For instance, this can happen under the following circumstances:</p>
<ul>
<li>
<p>Two or more dimensions have a dimension value with the same name.</p>
</li>
<li>
<p>A DAY dimension uses the default VNF (which starts with a digit).</p>
</li>
<li>
<p>An <code>INTEGER</code> value could be interpreted either as a position within a dimension or as a literal <code>INTEGER</code> value of a dimension.</p>
</li>
</ul>
<p>In cases such as these, you can avoid ambiguity in model-based equations by following these rules:</p>
<ul>
<li>
<p>Enclose the dimension value in single quotes.</p>
</li>
<li>
<p>Enclose the quoted value in parentheses.</p>
</li>
<li>
<p>Precede the parentheses with the name of the dimension.</p>
</li>
</ul>
<p>For example, for an INTEGER dimension named <code>intdim</code>, use the following format to refer to the first dimension value.</p>
<pre>
intdim('1')
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="g1064445"></a>Examples</p>
<div id="OLADM2754" class="example">
<p class="titleinexample"><a id="sthref4986"></a>Example 10-113 Assigning Values to a Variable</p>
<p>For the first example, suppose you have defined two variables, <code>units</code> and <code>price</code>, that are both dimensioned by <code>product</code>. The following example calculates dollar sales (<code>units</code> times <code>price</code>) for each value in the <code>product</code> dimension. Using an assignment statement, it stores the result in the variable <code>sales</code>, which is also dimensioned by <code>product</code>.</p>
<pre>
sales = units*price
</pre>
<p>For another example, assume the <code>choicedesc</code> variable is dimensioned by <code>choice</code>. Before you enter data for the variable, the cells of the variable contain only NA values.</p>
<pre>
CHOICE           CHOICEDESC
-------------- --------------------
Report         NA
Graph          NA
Analyze        NA
Data           NA
Quit           NA
</pre>
<p>Suppose you initialize the <code>choicedesc</code> variable using the following statement.</p>
<pre>
choicedesc =  JOINCHARS ('Description for ' choice)
</pre>
<p>Now all of the <code>choicedesc</code> cells of the variable contain the appropriate values.</p>
<pre>
CHOICE             CHOICEDESC
-------------- -------------------------
Report         Description for Report
Graph          Description for Graph
Analyze        Description for Analyze
Data           Description for Data
Quit           Description for Quit
</pre>
<p>The next example shows an expression that is dimensioned by <code>time</code>, <code>product</code>, and <code>district</code> and is assigned to a new variable. The expression calculates a 2002 sales plan based on unit sales in 2001.</p>
<pre>
DEFINE units.plan INTEGER &lt;month product district&gt;
LIMIT month TO 'DEC02'
units.plan = LAG(units 12 month) * 1.15
</pre></div>
<!-- class="example" -->
<div id="OLADM2755" class="example">
<p class="titleinexample"><a id="CIHDEBCJ"></a>Example 10-114 Assigning Values to a Relation</p>
<p><a id="sthref4987"></a>Assume that your analytic workspace contains the following definitions for a hierarchical dimension for Geography named <code>geog</code> and a relation named <code>geog_parentrel</code> that contains values that represent the child-parent relationships in the Geography hierarchy.</p>
<pre>
DEFINE geog DIMENSION TEXT
DEFINE geog_parentrel RELATION geog &lt;geog&gt;
 
</pre>
<p>You can use the following MAINTAIN ADD statements to populate the hierarchical dimension.</p>
<pre>
" Populate the geog dimension with values for all levels
MAINTAIN geog ADD 'North America' 'Europe' 'United States' 'Canada' 'France' 'Germany'
MAINTAIN geog ADD 'Massachusetts' 'California' 'Quebec' 'Ontario' 
MAINTAIN geog ADD 'Boston''Springfield' 'San Francisco''Los Angeles' 'Toronto' 'Ottawa' 
MAINTAIN geog ADD 'Montreal''Quebec City' 'Paris' 'Marseilles' 'Bonn' 'Berlin'
 
</pre>
<p>You can use the following assignments statements to populate <code>geog_parentrel</code>. Note that you must limit <code>geog</code> to the appropriate values before you assign values to <code>geog_parentrel</code>.</p>
<pre>
"  Limit geog (and therefore geog_parentrel) to countries and assign 
"   parent value (continent name) to those countries in geog_parentrel
LIMIT geog to 'United States' 'Canada'
geog_parentrel = 'North America'
LIMIT geog to ALL
LIMIT geog to 'France' 'Germany'
geog_parentrel = 'Europe'
 
"  Limit geog (and therefore geog_parentrel) to states or provinces and assign 
"   parent value (country name) to those states or provinces in geog_parentrel
LIMIT geog to ALL
LIMIT geog to 'Massachusetts' 'California'
geog_parentrel = 'United States'
LIMIT geog to ALL
LIMIT geog to 'Quebec' 'Ontario'
geog_<a href="dml_commands_1.htm#BGEEAEAB">Chapter 9, "OLAP DML Commands: A-G"</a> = 'Canada'
 
"  Limit geog (and therefore geog_parentrel) to cities and assign
"   parent value (state, province, or country) to those cities in geog_parentrel
LIMIT geog to ALL
LIMIT geog to 'Boston' 'Springfield' 
geog_parentrel = 'Massachusetts'
LIMIT geog to ALL
LIMIT geog to 'San Francisco' 'Los Angeles' 
geog_parentrel = 'California'
LIMIT geog to ALL
LIMIT geog to 'Montreal' 'Quebec City'
geog_parentrel = 'Quebec'
LIMIT geog to ALL
LIMIT geog to 'Toronto' 'Ottawa' 
geog_parentrel = 'Ontario'
LIMIT geog to ALL
LIMIT geog to 'Paris' 'Marseilles' 
geog_parentrel = 'France'
LIMIT geog to ALL
LIMIT geog to 'Bonn' 'Berlin'
geog_parentrel = 'Germany'
LIMIT geog to ALL
 
</pre>
<p>A report of <code>geog_parentrel</code> shows the values have been assigned.</p>
<pre>
COLWIDTH = 20
REPORT geog_parentrel
REPORT geog_parentrel
 
GEOG                GEOG_PARENTREL
---------------- --------------------
North America    NA
Europe           NA
United States    North America
Canada           North America
France           Europe
Germany          Europe
Massachusetts    United States
California       United States
Quebec           Canada
Ontario          Canada
Boston           Massachusetts
Springfield      Massachusetts
San Francisco    California
Los Angeles      California
Toronto          Ontario
Ottawa           Ontario
Montreal         Quebec
Quebec City      Quebec
Paris            France
Marseilles       France
Bonn             Germany
Berlin           Germany
</pre></div>
<!-- class="example" -->
<div id="OLADM2756" class="example">
<p class="titleinexample"><a id="sthref4988"></a>Example 10-115 Using a Qualified Data Reference</p>
<p>This example uses an assignment statement with a qualified data reference to assign values to the variable <code>budget</code>. The values assigned to one budget line item (<code>Net.Income</code>) are calculated as the difference between two other line items (<code>Opr.Income</code> and <code>Taxes</code>), so you have to use a qualified data reference to obtain the correct data values.</p>
<pre>
budget(line Net.Income)= budget(line Opr.Income) - budget(line Taxes)
</pre></div>
<!-- class="example" -->
<div id="OLADM2757" class="example">
<p class="titleinexample"><a id="sthref4989"></a>Example 10-116 Assigning Values to Variables with Composites</p>
<p>To have data assigned from <code>sales</code> only into existing data cells of <code>sparse_sales</code>, whose associated dimension values are in status, use the following statement.</p>
<pre>
sparse_sales = sales ACROSS SPARSE&lt;product market&gt;
</pre>
<pre>
</pre>
<p>The <code>ACROSS</code> keyword is particularly helpful when the source expression is a single value. When there are no limits on the dimensions of <code>sparse_sales</code>, then an assignment statement like the following creates cells for every combination of dimension values because there are no cases where the source expression is NA.</p>
<pre>
sparse_sales = 0
</pre>
<pre>
</pre>
<p>This defeats the purpose of a dimensioning a variable with a composite.</p>
<p>In contrast, the following statement sets only existing cells of <code>sparse_sales</code> to 0 (zero).</p>
<pre>
sparse_sales = 0 ACROSS SPARSE&lt;product market&gt;
</pre></div>
<!-- class="example" -->
<div id="OLADM2758" class="example">
<p class="titleinexample"><a id="i1014942"></a>Example 10-117 Compacting Your Data</p>
<p>Suppose you only sell some of your products in each district. You currently have a variable <code>sales</code> that has data for certain combinations of districts and products and <code>NA</code> values for the rest. You can create a dense array of <code>sales</code> data by defining a composite or a conjoint dimension and using it as a dimension of a new variable. Use an assignment statement to assign the data directly to the new variable. When the values of the composite or conjoint dimension include all the combinations with data, you can then delete the original variable and save space in the analytic workspace.</p>
<pre>
DEFINE proddist DIMENSION &lt;product district&gt;
MAINTAIN proddist ADD &lt;'Tents' 'Boston'&gt; &lt;'Canoes' 'Seattle'&gt; -
   &lt;'Sportswear' 'Atlanta'&gt;
DEFINE sales.dense DECIMAL &lt;month proddist&gt;
sales.dense = sales
LIMIT month TO FIRST 4
</pre>
<p>Issuing a <code>REPORT</code> <code>sales.dense</code> statement produces the following output.</p>
<pre>
                    ----------------SALES.DENSE----------------
-----PRODDIST------ -------------------MONTH-------------------
PRODUCT    DISTRICT   Jan95      Feb95      Mar95      Apr95
-------- ---------- ---------- ---------- ---------- ----------
Tents      Boston    32,153.52  32,536.30  43,062.75  57,608.39
Canoes     Seattle   64,111.50  71,899.23  83,943.86  14,383.90
Sportswear Atlanta  114,446.26 123,164.92 138,601.64 141,365.66
</pre>
<p>An alternative method would be to use a composite instead of a conjoint dimension. In this case, you could use the following statements.</p>
<pre>
DEFINE sales.compact DECIMAL &lt;month SPARSE &lt;product district&gt;&gt;
sales.compact = sales
</pre>
<p>Oracle OLAP automatically creates the unnamed composite when you define <code>sales.compact</code>, and it automatically adds dimension value combinations to the composite when you use an assignment statement. Oracle OLAP creates dimension value combinations only for the non-<code>NA</code> values of <code>sales</code>.</p>
</div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3088">
<tr>
<td class="cellalignment3095">
<table class="cellalignment3093">
<tr>
<td class="cellalignment3092"><a href="dml_commands_2049.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3092"><a href="dml_commands_2051.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3097">
<table class="cellalignment3091">
<tr>
<td class="cellalignment3092"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3092"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3092"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3092"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3092"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3092"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
