<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Data Types, Operators, and Expressions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 742" />
<meta name="dcterms.created" content="2013-11-14T21:21:0Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="OLAP DML Reference" />
<meta name="dcterms.identifier" content="E17122-08" />
<meta name="dcterms.isVersionOf" content="OLADM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="dml_basics.htm" title="Previous" type="text/html" />
<link rel="Next" href="dml_objects.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e17122.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/593</span> <!-- End Header -->
<div id="OLADM137" class="chapter"><a id="sthref27"></a>
<h1 class="chapter"><span class="secnum">2</span> Data Types, Operators, and Expressions</h1>
<p>This chapter contains information about the following:</p>
<ul>
<li>
<p><a href="#i1020862">OLAP DML Data Types</a></p>
</li>
<li>
<p><a href="#BABGBDCJ">OLAP DML Operators</a></p>
</li>
<li>
<p><a href="#g1031411">OLAP DML Expressions</a></p>
</li>
</ul>
<a id="i1020862"></a>
<div id="OLADM138" class="sect1">
<h2 class="sect1">OLAP DML Data Types</h2>
<p>In the OLAP DML, as in other languages, a data type is a collection of values and the definition of one or more operations on those values.</p>
<p>The Oracle OLAP DML supports the data types outlined in <a href="#CJADHGII">Table 2-1, "<span class="bolditalic">Summary of OLAP DML Data Types</span>"</a>.</p>
<div id="OLADM1069" class="tblformal">
<p class="titleintable"><a id="sthref28"></a><a id="CJADHGII"></a>Table 2-1 <span class="bolditalic">Summary of OLAP DML Data Types</span></p>
<table class="cellalignment3098" title="Summary of OLAP DML Data Types" summary="This table lists data types available in the OLAP DML" dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t2">Data Type</th>
<th class="cellalignment3099" id="r1c2-t2">Abbreviation</th>
<th class="cellalignment3099" id="r1c3-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t2" headers="r1c1-t2">
<p><code>BOOLEAN</code></p>
</td>
<td class="cellalignment3095" headers="r2c1-t2 r1c2-t2">
<p>BOOL</p>
</td>
<td class="cellalignment3095" headers="r2c1-t2 r1c3-t2">
<p>Represents the logical <code>TRUE</code> and <code>FALSE</code> values.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t2" headers="r1c1-t2">
<p><code>DATE</code></p>
</td>
<td class="cellalignment3095" headers="r3c1-t2 r1c2-t2">
<p>None</p>
</td>
<td class="cellalignment3095" headers="r3c1-t2 r1c3-t2">
<p>Does <span class="italic">not</span> correspond to the SQL data type of the same name; but, instead, is an older data type that is unique to the OLAP DML.</p>
<p>Day, month, and year data (but <span class="italic">not</span> hour and minute data) between January 1, 1000 A.D. and December 31, 9999 A.D.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t2" headers="r1c1-t2">
<p><code>DATETIME</code></p>
</td>
<td class="cellalignment3095" headers="r4c1-t2 r1c2-t2">
<p>None</p>
</td>
<td class="cellalignment3095" headers="r4c1-t2 r1c3-t2">
<p>Corresponds to the SQL <code>DATE</code> data type.</p>
<p>Valid date range from January 1, 4712 BC to December 31, 9999 AD. The default format is determined explicitly by the <code>NLS_DATE_FORMAT</code> parameter or implicitly by the <code>NLS_TERRITORY</code> parameter. The size is fixed at 7 bytes. This data type contains the datetime fields <code>YEAR</code>, <code>MONTH</code>, <code>DAY</code>, <code>HOUR</code>, <code>MINUTE</code>, and <code>SECOND</code>. It does not have fractional seconds or a time zone.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t2" headers="r1c1-t2">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment3095" headers="r5c1-t2 r1c2-t2">
<p>None</p>
</td>
<td class="cellalignment3095" headers="r5c1-t2 r1c3-t2">
<p>Corresponds to the SQL <code>TIMESTAMP</code> data type.</p>
<p>Year, month, and day values of date, and hour, minute, and second values of time up to a precision of 9 places for the fractional part of the <code>SECOND</code> datetime field. The default format is determined explicitly by the <code>NLS_DATE_FORMAT</code> parameter or implicitly by the <code>NLS_TERRITORY</code> parameter. The size is 11 bytes. This data type contains the datetime fields <code>YEAR</code>, <code>MONTH</code>, <code>DAY</code>, <code>HOUR</code>, <code>MINUTE</code>, and <code>SECOND</code>. It contains fractional seconds but does not have a time zone.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t2" headers="r1c1-t2">
<p><code>TIMESTAMP_TZ</code></p>
</td>
<td class="cellalignment3095" headers="r6c1-t2 r1c2-t2">
<p>None</p>
</td>
<td class="cellalignment3095" headers="r6c1-t2 r1c3-t2">
<p>Corresponds to the SQL <code>TIMESTAMP WITH TIME ZONE</code> data type.</p>
<p>All values of <code>TIMESTAMP</code> as well as time zone displacement value, with a precision of 9 places for the fractional part of the <code>SECOND</code> datetime field. The default format is determined explicitly by the <code>NLS_DATE_FORMAT</code> parameter or implicitly by the <code>NLS_TERRITORY</code> parameter. The size is fixed at 13 bytes. This data type contains the datetime fields <code>YEAR</code>, <code>MONTH</code>, <code>DAY</code>, <code>HOUR</code>, <code>MINUTE</code>, <code>SECOND</code>, <code>TIMEZONE_HOUR</code>, and <code>TIMEZONE_MINUTE</code>. It has fractional seconds and an explicit time zone.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t2" headers="r1c1-t2">
<p><code>TIMESTAMP_LTZ</code></p>
</td>
<td class="cellalignment3095" headers="r7c1-t2 r1c2-t2">&nbsp;</td>
<td class="cellalignment3095" headers="r7c1-t2 r1c3-t2">
<p>Corresponds to the SQL <code>TIMESTAMP WITH LOCAL TIME ZONE</code> data type.</p>
<p>All values of <code>TIMESTAMP_TZ</code>, with the following exceptions:</p>
<ul>
<li>
<p>Data is normalized to the database time zone when it is stored in the database.</p>
</li>
<li>
<p>When the data is retrieved, users see the data in the session time zone.</p>
</li>
</ul>
<p>The default format is determined explicitly by the <code>NLS_DATE_FORMAT</code> parameter or implicitly by the <code>NLS_TERRITORY</code> parameter. The size is 11 bytes.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r8c1-t2" headers="r1c1-t2">
<p><code>DSINTERVAL</code></p>
</td>
<td class="cellalignment3095" headers="r8c1-t2 r1c2-t2">
<p>None</p>
</td>
<td class="cellalignment3095" headers="r8c1-t2 r1c3-t2">
<p>Corresponds to the SQL <code>INTERVAL DAY TO SECOND</code> data type.</p>
<p>Stores a period of time in days, hours, minutes, and seconds.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r9c1-t2" headers="r1c1-t2">
<p><code>YMINTERVAL</code></p>
</td>
<td class="cellalignment3095" headers="r9c1-t2 r1c2-t2">
<p>None</p>
</td>
<td class="cellalignment3095" headers="r9c1-t2 r1c3-t2">
<p>Corresponds to the SQL <code>INTERVAL YEAR TO MONTH</code> data type.</p>
<p>Stores a period of time in years and months.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r10c1-t2" headers="r1c1-t2">
<p><code>INTEGER</code></p>
</td>
<td class="cellalignment3095" headers="r10c1-t2 r1c2-t2">
<p>INT</p>
</td>
<td class="cellalignment3095" headers="r10c1-t2 r1c3-t2">
<p>A whole number in the range of (-2**31) to (2**31)-1.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r11c1-t2" headers="r1c1-t2">
<p><code>SHORTINTEGER</code></p>
</td>
<td class="cellalignment3095" headers="r11c1-t2 r1c2-t2">
<p>SHORTINT</p>
</td>
<td class="cellalignment3095" headers="r11c1-t2 r1c3-t2">
<p>A whole number in the range of (-2**15) to (2**15)-1.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r12c1-t2" headers="r1c1-t2">
<p><code>LONGINTEGER</code></p>
</td>
<td class="cellalignment3095" headers="r12c1-t2 r1c2-t2">
<p>LONGINT</p>
</td>
<td class="cellalignment3095" headers="r12c1-t2 r1c3-t2">
<p>A whole number in the range of (-2**63) to (2**63)-1.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r13c1-t2" headers="r1c1-t2">
<p><code>DECIMAL</code></p>
</td>
<td class="cellalignment3095" headers="r13c1-t2 r1c2-t2">
<p>DEC</p>
</td>
<td class="cellalignment3095" headers="r13c1-t2 r1c3-t2">
<p>A decimal number with up to 15 significant digits in the range of -(10**308) to +(10**308).</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r14c1-t2" headers="r1c1-t2">
<p><code>SHORTDECIMAL</code></p>
</td>
<td class="cellalignment3095" headers="r14c1-t2 r1c2-t2">
<p>SHORT</p>
</td>
<td class="cellalignment3095" headers="r14c1-t2 r1c3-t2">
<p>A decimal number with up to 7 significant digits in the range of -(10**38) to +(10**38).</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r15c1-t2" headers="r1c1-t2">
<p><code>NUMBER [(</code><code><span class="codeinlineitalic">p</span></code><code>,[</code><code><span class="codeinlineitalic">s</span></code><code>])]</code></p>
</td>
<td class="cellalignment3095" headers="r15c1-t2 r1c2-t2">
<p>None</p>
</td>
<td class="cellalignment3095" headers="r15c1-t2 r1c3-t2">
<p>A decimal number with up to 38 significant digits in the range of -(10**125) to +(10**125).</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r16c1-t2" headers="r1c1-t2">
<p><code>TEXT</code></p>
</td>
<td class="cellalignment3095" headers="r16c1-t2 r1c2-t2">
<p>None</p>
</td>
<td class="cellalignment3095" headers="r16c1-t2 r1c3-t2">
<p>Up to 4,000 bytes for each line in the database character set. This data type is equivalent to the <code>CHAR</code> and <code>VARCHAR2</code> data types in the database. (Note that when defining a variable of this data type you specify the RANSPACE64 keyword in the DEFINE VARIABLE statement to increase the maximum number of characters for the values of the variable from nearly <code>2**32</code> to nearly <code>2**64</code>.)</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r17c1-t2" headers="r1c1-t2">
<p><code>NTEXT</code></p>
</td>
<td class="cellalignment3095" headers="r17c1-t2 r1c2-t2">
<p>None</p>
</td>
<td class="cellalignment3095" headers="r17c1-t2 r1c3-t2">
<p>Up to 4,000 bytes for each line in UTF-8 character encoding. This data type is equivalent to the <code>NCHAR</code> and <code>NVARCHAR2</code> data types in the database. (Note that when defining a variable of this data type you specify the RANSPACE64 keyword in the DEFINE VARIABLE statement to increase the maximum number of characters for the values of the variable from nearly <code>2**32</code> to nearly <code>2**64</code>.)</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r18c1-t2" headers="r1c1-t2">
<p><code>ID</code></p>
</td>
<td class="cellalignment3095" headers="r18c1-t2 r1c2-t2">
<p>None</p>
</td>
<td class="cellalignment3095" headers="r18c1-t2 r1c3-t2">
<p>Up to 8 single-byte characters for each line in the database character set. (<code>ID</code> is valid only for values of simple dimensions, see <a href="dml_commands_1032.htm#i1010637">DEFINE DIMENSION (simple)</a>.)</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r19c1-t2" headers="r1c1-t2">
<p><code>RAW (</code><code><span class="codeinlineitalic">size</span></code><code>)</code></p>
</td>
<td class="cellalignment3095" headers="r19c1-t2 r1c2-t2">
<p>None</p>
</td>
<td class="cellalignment3095" headers="r19c1-t2 r1c3-t2">
<p>Raw binary data of length size bytes. Maximum size is 2000 bytes. You must specify size for a RAW value. (Note that when defining a variable of this data type you specify the RANSPACE64 keyword in the DEFINE VARIABLE statement to increase the maximum number of characters for the values of the variable from nearly <code>2**32</code> to nearly <code>2**64</code>.)</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r20c1-t2" headers="r1c1-t2">
<p><code>ROWID</code></p>
</td>
<td class="cellalignment3095" headers="r20c1-t2 r1c2-t2">
<p>None.</p>
</td>
<td class="cellalignment3095" headers="r20c1-t2 r1c3-t2">
<p>Base 64 string representing the unique address of a row in its table. This data type is primarily for values returned by the ROWID pseudocolumn.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r21c1-t2" headers="r1c1-t2">
<p><code>UROWID</code></p>
</td>
<td class="cellalignment3095" headers="r21c1-t2 r1c2-t2">
<p>None</p>
</td>
<td class="cellalignment3095" headers="r21c1-t2 r1c3-t2">
<p>Base 64 string representing the logical address of a row of an index-organized table. The optional size is the size of a column of type UROWID. The maximum size and default is 4,000 bytes.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r22c1-t2" headers="r1c1-t2">
<p><code>WORKSHEET</code></p>
</td>
<td class="cellalignment3095" headers="r22c1-t2 r1c2-t2">&nbsp;</td>
<td class="cellalignment3095" headers="r22c1-t2 r1c3-t2">
<p>Specified for arguments and temporary variables in an OLAP DML program when you want to handle arguments without converting values to a specific data type. Use the WKSDATA function to retrieve the data type of an argument with a <code>WORKSHEET</code> data type.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="OLADM1070"></a>Categories of Data Types</p>
<p>Frequently, these data types are thought of as belonging to the following categories:</p>
<ul>
<li>
<p><a href="#CJACDECG">Numeric Data Types</a> which are <code>INTEGER</code>, <code>SHORTINTEGER</code>, <code>LONGINTEGER</code>, <code>DECIMAL</code>, <code>SHORTDECIMAL</code>, and <code>NUMBER</code></p>
</li>
<li>
<p><a href="#i1012270">Text Data Types</a> which are <code>TEXT</code>, <code>NTEXT</code> and <code>ID</code>.</p>
</li>
<li>
<p><a href="#BABJGJIH">Datetime and Interval Data Types</a> which include the datetime data types of <code>DATETIME</code>, <code>TIMESTAMP</code>, <code>TIMESTAMP_TZ</code>, and <code>TIMESTAMP-LTZ</code> and the interval data types of <code>DSINTERVAL</code> and <code>YMINTERVAL</code>.</p>
</li>
<li>
<p><a href="#CJAIFGIC">Date-only Data Type</a> which is the <code>DATE</code> data type that is unique to the OLAP DML.</p>
</li>
<li>
<p><a href="#CJACGBGE">Boolean Data Type</a> which is BOOLEAN.</p>
</li>
<li>
<p><a href="#BABBDCFA">Row Identifier Data Types</a> which are ROWID and UROWID.</p>
</li>
</ul>
<p class="subhead2"><a id="OLADM1071"></a>Which OLAP DML Data Objects Can Have Which Data Type?</p>
<p>Different objects support the use of different data types for their values:</p>
<ul>
<li>
<p>For variables, all of the data types are supported.</p>
</li>
<li>
<p>For dimensions and surrogates, the <code>INTEGER</code>, <code>NUMBER</code>, <code>TEXT</code>, <code>ID</code> (simple dimensions only), <code>NTEXT</code>, <code>DATETIME</code>, <code>TIMESTAMP</code>, <code>TIMESTAMP_TZ</code>, <code>TIMESTAMP-LTZ</code>, <code>DSINTERVAL</code>, and <code>YMINTERVAL</code> data types are supported. Additionally, when you define a dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR using a <a href="dml_commands_1032.htm#CHDIDHBI">DEFINE DIMENSION (DWMQY)</a> statement, the data type of the values of that dimension are <code>DATE</code>-only.</p>
</li>
</ul>
<a id="CJACDECG"></a>
<div id="OLADM139" class="sect2">
<h3 class="sect2">Numeric Data Types</h3>
<p><a id="sthref29"></a><a id="sthref30"></a><a id="sthref31"></a>The numeric data types described in <a href="#g1022512">Table 2-2, "OLAP DML Numeric Data Types"</a> are supported.</p>
<div id="OLADM1072" class="tblformal">
<p class="titleintable"><a id="sthref32"></a><a id="g1022512"></a>Table 2-2 OLAP DML Numeric Data Types</p>
<table class="cellalignment3098" title="OLAP DML Numeric Data Types" summary="This table describes the OLAP DML numeric data types." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t3">Data Type</th>
<th class="cellalignment3099" id="r1c2-t3">Data Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t3" headers="r1c1-t3">
<p><code>INTEGER</code></p>
</td>
<td class="cellalignment3095" headers="r2c1-t3 r1c2-t3">
<p>A whole number in the range of (-2**31) to (2**31)-1.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t3" headers="r1c1-t3">
<p><code>SHORTINTEGER</code></p>
</td>
<td class="cellalignment3095" headers="r3c1-t3 r1c2-t3">
<p>A whole number in the range of (-2**15) to (2**15)-1.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t3" headers="r1c1-t3">
<p><code>LONGINTEGER</code></p>
</td>
<td class="cellalignment3095" headers="r4c1-t3 r1c2-t3">
<p>A whole number in the range of (-2**63) to (2**63)-1.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t3" headers="r1c1-t3">
<p><code>DECIMAL</code></p>
</td>
<td class="cellalignment3095" headers="r5c1-t3 r1c2-t3">
<p>A decimal number with up to 15 significant digits in the range of -(10**308) to +(10**308).</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t3" headers="r1c1-t3">
<p><code>SHORTDECIMAL</code></p>
</td>
<td class="cellalignment3095" headers="r6c1-t3 r1c2-t3">
<p>A decimal number with up to 7 significant digits in the range of -(10**38) to +(10**38).</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t3" headers="r1c1-t3">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment3095" headers="r7c1-t3 r1c2-t3">
<p>A decimal number with up to 38 significant digits in the range of -(10**125) to +(10**125).</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>For data entry, a value for any of these data types can begin with a plus (+) or minus (-) sign; it cannot contain commas. Note, however, that a comma is required <span class="italic">before</span> a negative number that follows another numeric expression, or the minus sign is interpreted as a subtraction operator. Additionally, a decimal value can contain a decimal point. For data display, thousands and decimal markers are controlled by the NLS_NUMERIC_CHARACTERS option.</p>
<div id="OLADM140" class="sect3"><a id="sthref33"></a>
<h4 class="sect3">Using LONGINTEGER Values</h4>
<p>Most of the numeric data types return <code>NA</code> when a value is outside its range. However, the <code>LONGINTEGER</code> data type does not have overflow protection and returns an incorrect value when, for example, a calculation produces a number that exceeds its range. Use the <code>NUMBER</code> data type instead of <code>LONGINTEGER</code> when this is likely to be a problem.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM141" class="sect3"><a id="sthref34"></a>
<h4 class="sect3">Using NUMBER Values</h4>
<p>When you define a <code>NUMBER</code> variable, you can specify its precision (<span class="italic">p</span>) and scale (<span class="italic">s</span>) so that it is sufficiently, but not unnecessarily, large. Precision is the number of significant digits. Scale can be positive or negative. Positive scale identifies the number of digits to the right of the decimal point; negative scale identifies the number of digits to the left of the decimal point that can be rounded up or down.</p>
<p>The <code>NUMBER</code> data type is supported by Oracle Database standard libraries and operates the same way as it does in SQL. It is used for dimensions and surrogates when a text or <code>INTEGER</code> data type is not appropriate. It is typically assigned to variables that are not used for calculations (like forecasts and aggregations), and it is used for variables that must match the rounding behavior of the database or require a high degree of precision. When deciding whether to assign the <code>NUMBER</code> data type to a variable, keep the following facts in mind to maximize performance:</p>
<ul>
<li>
<p>Analytic workspace calculations on <code>NUMBER</code> variables is slower than other numeric data types because <code>NUMBER</code> values are calculated in software (for accuracy) rather than in hardware (for speed).</p>
</li>
<li>
<p>When data is fetched from an analytic workspace to a relational column that has the <code>NUMBER</code> data type, performance is best when the data has the <code>NUMBER</code> data type in the analytic workspace because a conversion step is not required.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1012270"></a>
<div id="OLADM142" class="sect2">
<h3 class="sect2">Text Data Types</h3>
<p><a id="sthref35"></a><a id="sthref36"></a>The text data types described in <a href="#g1022561">Table 2-3, "OLAP DML Text Data Types"</a> are supported by Oracle OLAP.</p>
<div id="OLADM1073" class="tblformal">
<p class="titleintable"><a id="sthref37"></a><a id="g1022561"></a>Table 2-3 OLAP DML Text Data Types</p>
<table class="cellalignment3098" title="OLAP DML Text Data Types" summary="This table describes the OLAP DML text data types." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t4">Data Type</th>
<th class="cellalignment3099" id="r1c2-t4">Data Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t4" headers="r1c1-t4">
<p><code>TEXT</code></p>
</td>
<td class="cellalignment3095" headers="r2c1-t4 r1c2-t4">
<p>Up to 4,000 bytes for each line in the database character set. This data type is equivalent to the <code>CHAR</code> and <code>VARCHAR2</code> data types in the database.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t4" headers="r1c1-t4">
<p><code>NTEXT</code></p>
</td>
<td class="cellalignment3095" headers="r3c1-t4 r1c2-t4">
<p>Up to 4,000 bytes for each line in UTF-8 character encoding. This data type is equivalent to the <code>NCHAR</code> and <code>NVARCHAR2</code> data types in the database.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t4" headers="r1c1-t4">
<p><code>ID</code></p>
</td>
<td class="cellalignment3095" headers="r4c1-t4 r1c2-t4">
<p>Up to 8 single-byte characters for each line in the database character set. (<code>ID</code> is valid only for values of simple dimensions, see <a href="dml_commands_1032.htm#i1010637">DEFINE DIMENSION (simple)</a>.)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="CJAJJIJG"></a>
<div id="OLADM143" class="sect3">
<h4 class="sect3">Text Literals</h4>
<p>Enclose text literals in single quotes. Oracle OLAP recognizes unquoted alpha-numeric values as object names and double quotes<a id="sthref38"></a><a id="sthref39"></a><a id="sthref40"></a><a id="sthref41"></a> as the beginning of a comment.</p>
<p>You can embed quoted strings within a quoted string, which is necessary when you want to specify the base dimension value of a composite or conjoint dimension or when a value includes an apostrophe. Because a single quotation mark is used in Oracle OLAP to indicate a text string, it is considered a special character when used within such a string. Consequently, to specify the literal value of a single quotation mark within a text string, precede the quotation mark with a backslash.</p>
<p>For example, suppose you want to find out if <code>New</code> <code>York</code> and <code>Apple</code> <code>Sauce</code> are a valid combination of base dimension values in the <code>markprod</code> conjoint dimension. The following statement produces the answer YES or <code>NO</code>.</p>
<pre>
SHOW ISVALUE(markprod, '&lt;\'New York\' \'Apple Sauce\'&gt;')
</pre>
<p>When embedded quoted strings have a further level of embedding, you must use backslashes before each special character, such as the apostrophe and the backslash that must precede it in "Joe's Deli," as shown in the following statement.</p>
<pre>
SHOW ISVALUE(markprod, '&lt;\'Joe\\\'s Deli\' \'Apple Sauce\'&gt;')
</pre></div>
<!-- class="sect3" -->
<a id="i1012296"></a>
<div id="OLADM144" class="sect3">
<h4 class="sect3">Escape Sequences</h4>
<p><a id="sthref42"></a><a id="sthref43"></a><a id="sthref44"></a><a id="sthref45"></a><a id="sthref46"></a><a id="sthref47"></a><a id="sthref48"></a><a id="sthref49"></a><a href="#g1022641">Table 2-4, "Recognized Escape Sequences"</a> shows escape sequences that are recognized by Oracle OLAP.</p>
<div id="OLADM1074" class="tblformal">
<p class="titleintable"><a id="sthref50"></a><a id="g1022641"></a>Table 2-4 Recognized Escape Sequences</p>
<table class="cellalignment3098" title="Recognized Escape Sequences" summary="This table describes the escape sequences recognized in OLAP DML text expressions." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t5">Sequence</th>
<th class="cellalignment3099" id="r1c2-t5">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t5" headers="r1c1-t5">
<p><code>\b</code></p>
</td>
<td class="cellalignment3095" headers="r2c1-t5 r1c2-t5">
<p>Backspace</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t5" headers="r1c1-t5">
<p><code>\f</code></p>
</td>
<td class="cellalignment3095" headers="r3c1-t5 r1c2-t5">
<p>Form feed</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t5" headers="r1c1-t5">
<p><code>\n</code></p>
</td>
<td class="cellalignment3095" headers="r4c1-t5 r1c2-t5">
<p>Line feed</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t5" headers="r1c1-t5">
<p><code>\r</code></p>
</td>
<td class="cellalignment3095" headers="r5c1-t5 r1c2-t5">
<p>Carriage return</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t5" headers="r1c1-t5">
<p><code>\t</code></p>
</td>
<td class="cellalignment3095" headers="r6c1-t5 r1c2-t5">
<p>Horizontal tab</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t5" headers="r1c1-t5">
<p><code>\"</code></p>
</td>
<td class="cellalignment3095" headers="r7c1-t5 r1c2-t5">
<p>Double quote</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r8c1-t5" headers="r1c1-t5">
<p><code>\'</code></p>
</td>
<td class="cellalignment3095" headers="r8c1-t5 r1c2-t5">
<p>Single quote</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r9c1-t5" headers="r1c1-t5">
<p><code>\\</code></p>
</td>
<td class="cellalignment3095" headers="r9c1-t5 r1c2-t5">
<p>Backslash</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r10c1-t5" headers="r1c1-t5">
<p><code>\d</code><span class="italic">nnn</span></p>
</td>
<td class="cellalignment3095" headers="r10c1-t5 r1c2-t5">
<p>Character with ASCII code <span class="italic">nnn</span> decimal, where \<code>d</code> indicates a decimal escape and <span class="italic">nnn</span> is the decimal value for the character</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r11c1-t5" headers="r1c1-t5">
<p><code>\x</code><span class="italic">nn</span></p>
</td>
<td class="cellalignment3095" headers="r11c1-t5 r1c2-t5">
<p>Character with ASCII code <span class="italic">nn</span> hexadecimal, where <code>\x</code> indicates a hexadecimal escape and <span class="italic">nn</span> is the hexadecimal value for the character</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r12c1-t5" headers="r1c1-t5">
<p><code>\U</code><span class="italic">nnnn</span></p>
</td>
<td class="cellalignment3095" headers="r12c1-t5 r1c2-t5">
<p>Character with Unicode <span class="italic">nnnn</span>, where <code>\U</code> indicates a Unicode escape and <span class="italic">nnnn</span> is a four-digit hexadecimal <code>INTEGER</code> that represents the Unicode codepoint with the value <code>U</code>+<span class="italic">nnnn</span>. The <code>U</code> must be a capital letter.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CJAIFGIC"></a>
<div id="OLADM145" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Date-only Data Type</h3>
<p>The <a id="sthref51"></a><a id="sthref52"></a>Oracle OLAP DML DATE data type does <span class="italic">not</span> correspond to the SQL data type of the same name. It is, instead, is an older data type that is unique to the OLAP DML. The OLAP DML <code>DATE</code> data type is a valid data type for variables and for dimensions of type DAY, WEEK, MONTH, QUARTER, and YEAR as discussed in the <a href="dml_commands_1032.htm#CHDIDHBI">DEFINE DIMENSION (DWMQY)</a> command topic. It is used to store day, month, and year data (but not hour and minute data) between January 1, 1000 A.D. and December 31, 9999 A.D. Because the OLAP DML <code>DATE</code> data type does <span class="italic">not</span> include hour and minute data, it is often referred to as the DATE-only data type.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
The Oracle OLAP DML data type that corresponds to the SQL DATE data type is named <code>DATETIME</code>. See <a href="#CJAHJAJH">DATETIME Data Type</a> for more information.</div>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a href="dml_options.htm#CHDEHCCI">"Date-only Data Type Options"</a>.</div>
<a id="CJAHHBAH"></a>
<div id="OLADM146" class="sect3">
<h4 class="sect3">Date-only Input Values</h4>
<p>A valid input literal value of type DATE must conform to one of three styles: numeric, packed numeric, or month name. You can mix these styles throughout a session.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
To determine whether a text expression (such as an expression with a data type of TEXT or ID) represents a valid DATE-only value, use the <a href="dml_functions_1106.htm#i79562">ISDATE</a> program</div>
<p class="subhead2"><a id="OLADM1075"></a>Numeric style</p>
<p>Specify the day, month, and year as three <code>INTEGER</code> values with one or more separators between them, using these rules:</p>
<ul>
<li>
<p>The day and month components can have one digit or two digits.</p>
</li>
<li>
<p>For any year, the year component can have four digits (for example, 1997). For years in the range 1950 to 2049, the year component can, alternatively, have two digits (50 represents 1950, and so on).</p>
</li>
<li>
<p>To separate the components, you can use a space, dash (<code>-</code>), slash (<code>/</code>), colon (<code>:</code>), or comma (<code>,</code>).</p>
</li>
</ul>
<p>Examples: <code>'24/4/97'</code> or <code>'24-04-1997'</code></p>
<p class="subhead2"><a id="OLADM1076"></a>Packed numeric style</p>
<p>Specify the day, month, and year as three <code>INTEGER</code> values with no separators between them, using these rules:</p>
<ul>
<li>
<p>The day and month components must have two digits. When the day or month is less than 10, it must be preceded by a zero.</p>
</li>
<li>
<p>For any year, the year component can have four digits (for example, 1997). For years in the range 1950 to 2049, the year component can, alternatively, have two digits (50 represents 1950, and so on).</p>
</li>
<li>
<p>You cannot use any separators between the date components.</p>
</li>
</ul>
<p>Examples: <code>'240497'</code> or <code>'04241997'</code></p>
<p class="subhead2"><a id="OLADM1077"></a>Month name style</p>
<p>Specify the day and year as <code>INTEGER</code> values and the month as text, using these rules:</p>
<ul>
<li>
<p>The month component must match one name listed in the MONTHNAMES option. You can abbreviate the month name to one letter or more, when you supply enough letters to uniquely match the beginning of a name in MONTHNAMES. The case of the letters in the month component (uppercase or lowercase) does not need to match the case in MONTHNAMES.</p>
</li>
<li>
<p>The day component can have one digit or two digits.</p>
</li>
<li>
<p>For any year, the year component can have four digits (for example, 1997). For years in the range 1950 to 2049, the year component can, alternatively, have two digits (50 represents 1950, and so on).</p>
</li>
<li>
<p>When the day and year components are adjacent, they must have at least one separator between them. As separators, you can use a space, dash (<code>-</code>), slash (<code>/</code>), colon (<code>:</code>), or comma (<code>,</code>). When you want, you can place one or more separators between the day and month or between the year and month.</p>
</li>
</ul>
<p>Examples: <code>'24APR97'</code> or <code>'24 ap 97'</code> or <code>'April 24, 1997'</code></p>
</div>
<!-- class="sect3" -->
<a id="BABJCEEG"></a>
<div id="OLADM147" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Date-only Dimension Values</h4>
<p><a id="sthref53"></a>The format of a <code>DATE</code> -only value of a dimension of type DAY, WEEK, MONTH, QUARTER, or YEAR is determined by the value name format (VNF) associated with the object. A VNF is a template that controls the input and display format for <code>DATE</code> -only values. The template can include format specifications for any of the components that identify a time period (day, month, calendar year, fiscal year, and period within a fiscal year). You associate a VNF with an object by adding a VNF statement to its definition. When you do not add a VNF to the definition of an object, the object uses the default VNF shown in <a href="#g1022167">Table 2-5, "Default VNFs for DWMQY Dimensions"</a>.</p>
<div id="OLADM1078" class="tblruleformal">
<p class="titleintable"><a id="sthref54"></a><a id="g1022167"></a>Table 2-5 Default VNFs for DWMQY Dimensions</p>
<table class="cellalignment3100" title="Default VNFs for DWMQY Dimensions" summary="This table outlines default VNFs for dimensions of type DAY, WEEK, MONTH, QUARTER, and YEAR." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t9">Type of Dimension</th>
<th class="cellalignment3099" id="r1c2-t9">Default VNF</th>
<th class="cellalignment3099" id="r1c3-t9">Example</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t9" headers="r1c1-t9">
<p>DAY</p>
</td>
<td class="cellalignment3095" headers="r2c1-t9 r1c2-t9">
<p>&lt;DD&gt;&lt;MTXT&gt;&lt;YY&gt;</p>
</td>
<td class="cellalignment3095" headers="r2c1-t9 r1c3-t9">
<p>01JAN95</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t9" headers="r1c1-t9">
<p>WEEK</p>
</td>
<td class="cellalignment3095" headers="r3c1-t9 r1c2-t9">
<p>W&lt;P&gt;.&lt;FF&gt;</p>
</td>
<td class="cellalignment3095" headers="r3c1-t9 r1c3-t9">
<p>W1.95</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t9" headers="r1c1-t9">
<p>Multiple WEEK</p>
</td>
<td class="cellalignment3095" headers="r4c1-t9 r1c2-t9">
<p>&lt;NAME&gt;&lt;P&gt;.&lt;FF&gt;</p>
</td>
<td class="cellalignment3095" headers="r4c1-t9 r1c3-t9">
<p>MYWEEK1.95</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t9" headers="r1c1-t9">
<p>MONTH</p>
</td>
<td class="cellalignment3095" headers="r5c1-t9 r1c2-t9">
<p>&lt;MTXT&gt;&lt;YY&gt;</p>
</td>
<td class="cellalignment3095" headers="r5c1-t9 r1c3-t9">
<p>JAN95</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t9" headers="r1c1-t9">
<p>Multiple MONTH</p>
</td>
<td class="cellalignment3095" headers="r6c1-t9 r1c2-t9">
<p>&lt;NAME&gt;&lt;P&gt;.&lt;FF&gt;</p>
</td>
<td class="cellalignment3095" headers="r6c1-t9 r1c3-t9">
<p>MYMONTH1.95</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t9" headers="r1c1-t9">
<p>QUARTER</p>
</td>
<td class="cellalignment3095" headers="r7c1-t9 r1c2-t9">
<p>Q&lt;P&gt;.&lt;FF&gt;</p>
</td>
<td class="cellalignment3095" headers="r7c1-t9 r1c3-t9">
<p>Q1.95</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r8c1-t9" headers="r1c1-t9">
<p>YEAR</p>
</td>
<td class="cellalignment3095" headers="r8c1-t9 r1c2-t9">
<p>YR&lt;YY&gt;&nbsp;</p>
</td>
<td class="cellalignment3095" headers="r8c1-t9 r1c3-t9">
<p>YR95</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformal" -->
<p><code>DATE</code>-only values have independent input and output formats. You can enter <code>DATE</code>-only values in one style and report them in a different style.</p>
</div>
<!-- class="sect3" -->
<a id="BABEBJJA"></a>
<div id="OLADM148" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">DATE-only Variable Display Styles</h4>
<p>When you show a <code>DATE</code>-only variable value in output, the format depends on the DATEFORMAT option. The default format is a 2-digit day, a 3-letter month, and a 2-digit year; for example, <code>03MAR97</code>. The text for the month names depends on the MONTHNAMES option. To change the order of the month, day, and year components, see the <a href="dml_options012.htm#i79233">DATEORDER</a> option.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABJGJIH"></a>
<div id="OLADM149" class="sect2">
<h3 class="sect2">Datetime and Interval Data Types</h3>
<p><a id="sthref55"></a><a id="sthref56"></a><a id="sthref57"></a><a id="sthref58"></a>The OLAP DML has data types that correspond to SQL datetime and interval data types. As outlined in <a href="#g1022681">Table 2-6, "OLAP DML Datetime and Interval Data Types and the Corresponding SQL Data Types"</a>, the names of the data types are different in OLAP DML than they are in SQL.</p>
<div id="OLADM1079" class="tblformal">
<p class="titleintable"><a id="sthref59"></a><a id="g1022681"></a>Table 2-6 OLAP DML Datetime and Interval Data Types and the Corresponding SQL Data Types</p>
<table class="cellalignment3098" title="OLAP DML Datetime and Interval Data Types and the Corresponding SQL Data Types" summary="This table describes the OLAP DML data types for dates and time." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t10">OLAP DML Data Type</th>
<th class="cellalignment3099" id="r1c2-t10">Corresponding SQL Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t10" headers="r1c1-t10">
<p><code>DATETIME</code></p>
</td>
<td class="cellalignment3095" headers="r2c1-t10 r1c2-t10">
<p><code>DATE</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t10" headers="r1c1-t10">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment3095" headers="r3c1-t10 r1c2-t10">
<p><code>TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t10" headers="r1c1-t10">
<p><code>TIMESTAMP_TZ</code></p>
</td>
<td class="cellalignment3095" headers="r4c1-t10 r1c2-t10">
<p><code>TIMESTAMP WITH TIMEZONE</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t10" headers="r1c1-t10">
<p><code>TIMESTAMP_LTZ</code></p>
</td>
<td class="cellalignment3095" headers="r5c1-t10 r1c2-t10">
<p><code>TIMESTAMP WITH LOCAL TIME ZONE</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t10" headers="r1c1-t10">
<p><code>DSINTERVAL</code></p>
</td>
<td class="cellalignment3095" headers="r6c1-t10 r1c2-t10">
<p><code>INTERVAL DAY TO SECOND</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t10" headers="r1c1-t10">
<p><code>YMINTERVAL</code></p>
</td>
<td class="cellalignment3095" headers="r7c1-t10 r1c2-t10">
<p><code>INTERVAL YEAR TO MONTH</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>In the OLAP DML, the datetime data types are <code>DATETIME</code>, <code>TIMESTAMP</code>, <code>TIMESTAMP</code>_TZ, and <code>TIMESTAMP</code>_LTZ. The interval data types are <code>YMINTERVAL</code> and <code>DSINTERVAL</code>. Both datetimes and intervals are made up of fields as discussed in <a href="#CJAFCGGF">"Datetime and Interval Fields"</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <a id="sthref60"></a><a id="sthref61"></a>Oracle OLAP DML has a date data type named <code>DATE</code> that does <span class="italic">not</span> correspond to the SQL data type of that name. (The OLAP DML DATE data type was implement before the SQL datetime and interval data types were implemented in the OLAP DML.) The OLAP DML DATE data type stores only date values (no time values) and is therefore sometimes referred to as the DATE-only data type.</div>
<a id="CJAFCGGF"></a>
<div id="OLADM150" class="sect3">
<h4 class="sect3">Datetime and Interval Fields</h4>
<p>Both datetimes and intervals are made up of fields. The values of these fields determine the value of the data type. <a href="#BABFDAEI">Table 2-7, "Datetime Fields and Values"</a> lists the datetime fields and their possible values for datetimes and intervals.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
To avoid unexpected results in your operations on datetime data, you can verify the database and session time zones using DBTIMEZONE and SESSIONTIMEZONE If the time zones have not been set manually, Oracle Database uses the operating system time zone by default. If the operating system time zone is not a valid Oracle time zone, then Oracle uses UTC as the default value.</div>
<div id="OLADM1080" class="tblhruleformalwidekey">
<p class="titleintable"><a id="sthref62"></a><a id="BABFDAEI"></a>Table 2-7 Datetime Fields and Values</p>
<table class="cellalignment3100" title="Datetime Fields and Values" summary="The first column holds the datetime fields. The second and third columns show the valid values for those fields in datetimes and intervals, respectively." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t13">Datetime Field</th>
<th class="cellalignment3099" id="r1c2-t13">Valid Values for Datetime Data Types</th>
<th class="cellalignment3099" id="r1c3-t13">Valid Values for Interval Data Types</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t13" headers="r1c1-t13">
<p><code>YEAR</code></p>
</td>
<td class="cellalignment3095" headers="r2c1-t13 r1c2-t13">
<p>-4712 to 9999 (excluding year 0)</p>
</td>
<td class="cellalignment3095" headers="r2c1-t13 r1c3-t13">
<p>Any positive or negative integer</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t13" headers="r1c1-t13">
<p><code>MONTH</code></p>
</td>
<td class="cellalignment3095" headers="r3c1-t13 r1c2-t13">
<p>01 to 12</p>
</td>
<td class="cellalignment3095" headers="r3c1-t13 r1c3-t13">
<p>0 to 11</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t13" headers="r1c1-t13">
<p><code>DAY</code></p>
</td>
<td class="cellalignment3095" headers="r4c1-t13 r1c2-t13">
<p>01 to 31 (limited by the values of <code>MONTH</code> and <code>YEAR</code>, according to the rules of the current NLS calendar parameter)</p>
</td>
<td class="cellalignment3095" headers="r4c1-t13 r1c3-t13">
<p>Any positive or negative integer</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t13" headers="r1c1-t13">
<p><code>HOUR</code></p>
</td>
<td class="cellalignment3095" headers="r5c1-t13 r1c2-t13">
<p>00 to 23</p>
</td>
<td class="cellalignment3095" headers="r5c1-t13 r1c3-t13">
<p>0 to 23</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t13" headers="r1c1-t13">
<p><code>MINUTE</code></p>
</td>
<td class="cellalignment3095" headers="r6c1-t13 r1c2-t13">
<p>00 to 59</p>
</td>
<td class="cellalignment3095" headers="r6c1-t13 r1c3-t13">
<p>0 to 59</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t13" headers="r1c1-t13">
<p><code>SECOND</code></p>
</td>
<td class="cellalignment3095" headers="r7c1-t13 r1c2-t13">
<p>00 to 59.9(n), where 9(n) is the precision of time fractional seconds. The 9(n) portion is not applicable for <code>DATETIME</code>.</p>
</td>
<td class="cellalignment3095" headers="r7c1-t13 r1c3-t13">
<p>0 to 59.9(n), where 9(n) is the precision of interval fractional seconds</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r8c1-t13" headers="r1c1-t13">
<p><code>TIMEZONE_HOUR</code></p>
</td>
<td class="cellalignment3095" headers="r8c1-t13 r1c2-t13">
<p>-12 to 14 (This range accommodates daylight saving time changes.) Not applicable for <code>DATETIME</code> or <code>TIMESTAMP</code>.</p>
</td>
<td class="cellalignment3095" headers="r8c1-t13 r1c3-t13">
<p>Not applicable</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r9c1-t13" headers="r1c1-t13">
<p><code>TIMEZONE_MINUTE</code></p>
<p>(See note at end of table)</p>
</td>
<td class="cellalignment3095" headers="r9c1-t13 r1c2-t13">
<p>00 to 59. Not applicable for <code>DATETIME</code> or <code>TIMESTAMP</code>.</p>
</td>
<td class="cellalignment3095" headers="r9c1-t13 r1c3-t13">
<p>Not applicable</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r10c1-t13" headers="r1c1-t13">
<p><code>TIMEZONE_REGION</code></p>
</td>
<td class="cellalignment3095" headers="r10c1-t13 r1c2-t13">
<p>Query the <code>TZNAME</code> column of the <code>V$TIMEZONE_NAMES</code> data dictionary view. Not applicable for <code>DATETIME</code> or <code>TIMESTAMP</code>.</p>
<p>For a complete listing of all time zone regions, refer to <a class="olink NLSPG" href="../../server.112/e10729/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a>.</p>
</td>
<td class="cellalignment3095" headers="r10c1-t13 r1c3-t13">
<p>Not applicable</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r11c1-t13" headers="r1c1-t13">
<p><code>TIMEZONE_ABBR</code></p>
</td>
<td class="cellalignment3095" headers="r11c1-t13 r1c2-t13">
<p>Query the <code>TZABBREV</code> column of the <code>V$TIMEZONE_NAMES</code> data dictionary view. Not applicable for <code>DATETIME</code> or <code>TIMESTAMP</code>.</p>
</td>
<td class="cellalignment3095" headers="r11c1-t13 r1c3-t13">
<p>Not applicable</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwidekey" -->
<p><span class="bold">Note:</span> <code>TIMEZONE_HOUR</code> and <code>TIMEZONE_MINUTE</code> are specified together and interpreted as an entity in the format +|- hh:mm, with values ranging from -12:59 to +14:00.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABFFDGC">"Datetime and Interval Expressions"</a></div>
</div>
<!-- class="sect3" -->
<a id="i34510"></a>
<div id="OLADM151" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Datetime Format Templates <a id="sthref63"></a><a id="sthref64"></a><a id="sthref65"></a><a id="sthref66"></a></h4>
<p>A datetime format template is a template that describes the format of datetime data stored in a character string. A format model does not change the internal representation of the value in the database. When you convert a character string into a date, a format model determines how Oracle Database interprets the string. In OLAP DML statements, you can use a format model as an argument of the <code>TO_CHAR</code> and <code>TO_DATE</code> functions to specify:</p>
<ul>
<li>
<p>The format for Oracle to use to return a value from the database</p>
</li>
<li>
<p>The format for a value you have specified for Oracle to store in the database</p>
</li>
</ul>
<p>You can use datetime format templates in the following functions:</p>
<ul>
<li>
<p>In the <code>TO_*</code> datetime functions to translate a character value that is in a format other than the default format into a datetime value. (The <code>TO_</code>* datetime functions are <code>TO_CHAR</code>, <code>TO_DATE</code>, <code>TO_TIMESTAMP</code>, <code>TO_TIMESTAMP_TZ</code>, <code>TO_YMINTERVAL</code>, and <code>TO_DSINTERVAL</code>.)</p>
</li>
<li>
<p>In the <code>TO_CHAR</code> function to translate a datetime value that is in a format other than the default format into a string (for example, to print the date from an application)</p>
</li>
</ul>
<p><a id="sthref67"></a><a id="sthref68"></a>The default datetime formats are specified either explicitly with the initialization parameter <code>NLS_DATE_FORMAT</code> or implicitly with the initialization parameter <code>NLS_TERRITORY</code>. You can change the default datetime formats for your session with the <code>ALTER</code> <code>SESSION</code> statement. You can override this default and specify a datetime format for use with a particular OLAP DML object by using the <a href="dml_commands_1030.htm#CACIIBBF">DATE_FORMAT</a> command to add a datetime format to the definition of the object.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM152" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref69"></a>
<h4 class="sect3">String-to-Date Conversion Rules <a id="sthref70"></a></h4>
<p>The following additional formatting rules apply when converting string values to datetime values (unless you have used the <code>FX</code> or <code>FXFM</code> modifiers in the format model to control exact format checking):</p>
<ul>
<li>
<p>You can omit punctuation included in the format string from the date string if all the digits of the numeric format elements, including leading zeros, are specified. In other words, specify 02 and not 2 for two-digit format elements such as MM, DD, and YY.</p>
</li>
<li>
<p>You can omit time fields found at the end of a format string from the date string.</p>
</li>
<li>
<p>If a match fails between a datetime format element and the corresponding characters in the date string, then Oracle attempts alternative format elements, as shown in <a href="#g195479">Table 2-8, "Oracle Format Matching"</a>.</p>
</li>
</ul>
<div id="OLADM1081" class="tblhruleformal">
<p class="titleintable"><a id="sthref71"></a><a id="g195479"></a>Table 2-8 Oracle Format Matching</p>
<table class="cellalignment3100" title="Oracle Format Matching " summary="The first column lists some string format elements, and the second lists datetime elements that Oracle Database might use in place of the string." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t15">Original Format Element</th>
<th class="cellalignment3099" id="r1c2-t15">Additional Format Elements to Try instead Of the Original</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t15" headers="r1c1-t15">
<pre>
'MM'
</pre></td>
<td class="cellalignment3095" headers="r2c1-t15 r1c2-t15">
<p><code>'MON'</code> and <code>'MONTH'</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t15" headers="r1c1-t15">
<p><code>'MON</code></p>
</td>
<td class="cellalignment3095" headers="r3c1-t15 r1c2-t15">
<p><code>'MONTH'</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t15" headers="r1c1-t15">
<p><code>'MONTH'</code></p>
</td>
<td class="cellalignment3095" headers="r4c1-t15 r1c2-t15">
<p><code>'MON'</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t15" headers="r1c1-t15">
<p><code>'YY'</code></p>
</td>
<td class="cellalignment3095" headers="r5c1-t15 r1c2-t15">
<p><code>'YYYY'</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t15" headers="r1c1-t15">
<p><code>'RR'</code></p>
</td>
<td class="cellalignment3095" headers="r6c1-t15 r1c2-t15">
<p><code>'RRRR'</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect3" -->
<a id="CJAHJAJH"></a>
<div id="OLADM153" class="sect3">
<h4 class="sect3">DATETIME Data Type</h4>
<p>The OLAP DML DATETIME data type corresponds to the SQL <code>DATE</code> data type. As such, the format and language of <code>DATETIME</code> values are controlled by the settings of the NLS_DATE_FORMAT and NLS_DATE_LANGUAGE options. The <code>DATETIME</code> data type is supported by Oracle Database standard libraries and operates the same way in the OLAP DML as it does the <code>DATE</code> data type in SQL.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <a id="sthref72"></a><a id="sthref73"></a>Oracle OLAP DML has a date data type named <code>DATE</code> that does <span class="italic">not</span> correspond to the SQL data type of that name. The OLAP DML DATE data type stores only date values (no time values) and is therefore sometimes referred to as the DATE-only data type. The DATEORDER, DATEFORMAT, and MONTHNAMES options, which control the formatting of <code>DATE</code> values, have no effect on <code>DATETIME</code> values. However, <code>DATETIME</code> and <code>DATE</code> values can be used interchangeably in most DML statements.</div>
<p>You can specify a <code>DATETIME</code> value as a string literal, or you can convert a character or numeric value to a date value with the <code>TO_DATE</code> function.</p>
<p>To specify a <code>DATETIME</code> value as a literal, you must use the Gregorian calendar. You can specify an ANSI literal, as shown in this example:</p>
<pre>
DATETIME '1998-12-25'
</pre>
<p>The ANSI date literal contains no time portion, and must be specified in exactly this format ('<code>YYYY-MM-DD</code>').</p>
<p>Alternatively you can specify a DATETIME value us the TO_DATE function and include, as in the following example:</p>
<pre>
TO_DATE('98-DEC-25 17:30','YY-MON-DD HH24:MI')
</pre>
<p>The default date format template for an Oracle <code>DATETIME</code> value is specified by the initialization parameter <code>NLS_DATE_FORMAT</code>. This example date format includes a two-digit number for the day of the month, an abbreviation of the month name, the last two digits of the year, and a 24-hour time designation.</p>
<p>Oracle automatically converts character values that are in the default datetime format into datetime values when they are used in datetime expressions.</p>
<p>If you specify a datetime value without a time component, then the default time is midnight (00:00:00 or 12:00:00 for 24-hour and 12-hour clock time, respectively). If you specify a datetime value without a date, then the default date is the first day of the current month.</p>
<p>Values of <code>DATETIME</code> always contain both the date and time fields. Therefore, if you use <code>DATETIME</code> values in an expression, you must either specify the time field in your query or ensure that the time fields in the <code>DATETIME</code> values are set to midnight. Otherwise, Oracle may not return the results you expect. You can use the <code>TRUNC</code> (date) function to set the time field to midnight, or you can include a greater-than or less-than condition in the query instead of an equality or inequality condition. However, if the expression contains DATETIME values other than midnight, then you must filter out the time fields in the query to get the correct result.</p>
<p>The date function <code>SYSDATE</code> returns the current system date and time. The function <code>CURRENT_DATE</code> returns the current session date. For information on <code>SYSDATE</code>, the <code>TO_*</code> datetime functions, and the default date format, see <a href="dml_functions_1.htm#CJAEDBFF">"Datetime functions"</a> and the <a href="dml_commands_1030.htm#CACIIBBF">DATE_FORMAT</a> command.</p>
</div>
<!-- class="sect3" -->
<a id="i53219"></a>
<div id="OLADM154" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">TIMESTAMP Data Type <a id="sthref74"></a><a id="sthref75"></a></h4>
<p>The <code>TIMESTAMP</code> data type is an extension of the <code>DATETIME</code> data type. It stores the year, month, and day of the <code>DATETIME</code> data type, plus hour, minute, and second values. This data type is useful for storing precise time values.</p>
<pre>
SHOW SYSDATE
26-JUL-06
 
DEFINE mytimestamp VARIABLE TIMESTAMP
mytimestamp = SYSDATE
COLWIDTH = 30
REPORT mytimestamp
MYTIMESTAMP
------------------------------
         26-JUL-06 10.44.42 AM
</pre>
<p>The <code>TIMESTAMP</code> data type stores year, month, day, hour, minute, and second, and fractional second values. When you specify <code>TIMESTAMP</code> as a literal, the fractional seconds precision value can be any number of digits up to 9, as follows:</p>
<pre>
TIMESTAMP '1997-01-31 09:26:50.124'
</pre></div>
<!-- class="sect3" -->
<div id="OLADM155" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref76"></a>
<h4 class="sect3">TIMESTAMP_TZ Data Type <a id="sthref77"></a><a id="sthref78"></a></h4>
<p><code>TIMESTAMP_TZ</code> corresponds to the SQL <code>TIMESTAMP WITH TIMEZONE</code> data type. It is a variant of <code>TIMESTAMP</code> that includes a time zone offset in its value. The time zone offset is the difference (in hours and minutes) between local time and UTC (Coordinated Universal Time&mdash;formerly Greenwich Mean Time). This data type is useful for collecting and evaluating date information across geographic regions.</p>
<p>Oracle from the public domain information available at <code><a href="http://www.iana.org/time-zones">http://www.iana.org/time-zones</a></code>. Oracle time zone data may not reflect the most recent data available at this site.</p>
<p>The <code>TIMESTAMP_TZ</code> data type is a variant of <code>TIMESTAMP</code> that includes a time zone offset. When you specify <code>TIMESTAMP_TZ</code> as a literal, the fractional seconds precision value can be any number of digits up to 9. For example:</p>
<pre>
TIMESTAMP '1997-01-31 09:26:56.66 +02:00'
</pre>
<p>Two TIMESTAMP_TZ values are considered identical if they represent the same instant in UTC, regardless of the <code>TIME</code> <code>ZONE</code> offsets stored in the data. For example,</p>
<pre>
TIMESTAMP '1999-04-15 8:00:00 -8:00'
</pre>
<p>equals</p>
<pre>
TIMESTAMP '1999-04-15 11:00:00 -5:00'
</pre>
<p>That is, 8:00 a.m. Pacific Standard Time equals 11:00 a.m. Eastern Standard Time.</p>
<p><a id="sthref79"></a>You can replace the UTC offset with the <code>TZR</code> (time zone region) format element. For example, the following example has the same value as the preceding example:</p>
<pre>
TIMESTAMP '1999-04-15 8:00:00 US/Pacific'
</pre>
<p>To eliminate the ambiguity of boundary cases when the daylight saving time switches, use both the <code>TZR</code> and a corresponding <code>TZD</code> format element. The following example ensures that the preceding example returns a daylight saving time value:</p>
<pre>
TIMESTAMP '1999-10-29 01:30:00 US/Pacific PDT'
</pre>
<p>You can also express the time zone offset using a datetime expression.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABFFDGC">"Datetime and Interval Expressions"</a></div>
<p>If you do not add the <code>TZD</code> format element, and the datetime value is ambiguous, then Oracle returns an error if you have the <code>ERROR_ON_OVERLAP_TIME</code> session parameter set to <code>TRUE</code>. If that parameter is set to <code>FALSE</code>, then Oracle interprets the ambiguous datetime as standard time in the specified region.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM156" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref80"></a>
<h4 class="sect3">TIMESTAMP_LTZ Data Type <a id="sthref81"></a><a id="sthref82"></a></h4>
<p><code>TIMESTAMP_LTZ</code> corresponds to the SQL <code>TIMESTAMP WITH LOCAL TIMEZONE</code> data type. It is another variant of <code>TIMESTAMP</code> that includes a time zone offset in its value. It differs from <code>TIMESTAMP_LTZ</code> in that data stored in the database is normalized to the database time zone, and the time zone offset is not stored as part of the column data. When a user retrieves the data, Oracle returns it in the user's local session time zone. The time zone offset is the difference (in hours and minutes) between local time and UTC (Coordinated Universal Time&mdash;formerly Greenwich Mean Time). This data type is useful for displaying date information in the time zone of the client system in a two-tier application.</p>
<p>Oracle time zone data is derived from the public domain information available at <code><a href="http://www.iana.org/time-zones">http://www.iana.org/time-zones</a></code>. Oracle time zone data may not reflect the most recent data available at this site.</p>
<p>The <code>TIMESTAMP_LTZ</code> data type differs from <code>TIMESTAMP_TZ</code> in that data stored in the database is normalized to the database time zone. The time zone offset is not stored as part of the column data. There is no literal for <code>TIMESTAMP_LTZ</code>. Rather, you represent values of this data type using any of the other valid datetime literals. The table that follows shows some formats you can use to add a <code>TIMESTAMP_LTZ</code> value into object, along with the corresponding value returned by an OLAP DML statement such as a <a href="dml_commands_2054.htm#i79246">SHOW</a> command.</p>
<div class="inftblinformal">
<table class="cellalignment3100" title="Specifying Values for a TIMESTAMP WITH LOCAL TIME ZONE Column" summary="This table shows TIMESTAMP WITH TIME ZONE literals and their equivalent values returned by a query." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t18">Value Specified When Adding Value</th>
<th class="cellalignment3099" id="r1c2-t18">Value Returned</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t18" headers="r1c1-t18"><code>'19-FEB-2004'</code></td>
<td class="cellalignment3095" headers="r2c1-t18 r1c2-t18">19-FEB-2004.00.00.000000 AM</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t18" headers="r1c1-t18"><code>SYSTIMESTAMP</code></td>
<td class="cellalignment3095" headers="r3c1-t18 r1c2-t18">19-FEB-04 02.54.36.497659 PM</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t18" headers="r1c1-t18"><code>TO_TIMESTAMP('19-FEB-2004', 'DD-MON-YYYY'));</code></td>
<td class="cellalignment3095" headers="r4c1-t18 r1c2-t18">19-FEB-04 12.00.00.000000 AM</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t18" headers="r1c1-t18"><code>SYSDATE</code></td>
<td class="cellalignment3095" headers="r5c1-t18 r1c2-t18">19-FEB-04 02.55.29.000000 PM</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t18" headers="r1c1-t18"><code>TO_DATE('19-FEB-2004', 'DD-MON-YYYY'));</code></td>
<td class="cellalignment3095" headers="r6c1-t18 r1c2-t18">19-FEB-04 12.00.00.000000 AM</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t18" headers="r1c1-t18"><code>TIMESTAMP'2004-02-19 8:00:00 US/Pacific');</code></td>
<td class="cellalignment3095" headers="r7c1-t18 r1c2-t18">19-FEB-04 08.00.00.000000 AM</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p>Notice that if the value specified does not include a time component (either explicitly or implicitly), then the value returned defaults to midnight.</p>
</div>
<!-- class="sect3" -->
<a id="i128552"></a>
<div id="OLADM157" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">YMINTERVAL Data Type <a id="sthref83"></a><a id="sthref84"></a></h4>
<p><code>YMINTERVAL</code> corresponds to the SQL <code>INTERVAL YEAR TO MONTH</code> data type. It stores a period of time using the <code>YEAR</code> and <code>MONTH</code> datetime fields. This data type is useful for representing the difference between two datetime values when only the year and month values are significant.</p>
<p>Specify <code>YMINTERVAL</code> interval literals using the following syntax.</p>
<p class="synopsis">INTERVAL '<span class="italic">integer</span> [- <span class="italic">integer</span> ]' YEAR|MONTH [(<span class="italic">precision</span>) ] [TO YEAR | MONTH ]</p>
<p>where</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">'integer [-integer]'</span></code> specifies integer values for the leading and optional trailing field of the literal. If the leading field is <code>YEAR</code> and the trailing field is <code>MONTH</code>, then the range of integer values for the month field is 0 to 11.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">precision</span></code> is the maximum number of digits in the leading field. The valid range of the leading field precision is 0 to 9 and its default value is 2.</p>
</li>
</ul>
<p>If you specify a trailing field, it must be less significant than the leading field. For example, <code>INTERVAL</code> '<code>0-1</code>' <code>MONTH</code> <code>TO</code> <code>YEAR</code> is not valid.</p>
<p>The following <code>YMINTERVAL</code> literal indicates an interval of 123 years, 2 months:</p>
<pre>
INTERVAL '123-2' YEAR(3) TO MONTH
</pre>
<p>Examples of the other forms of the literal follow, including some abbreviated versions:</p>
<div class="inftblhruleinformal">
<table class="cellalignment3100" title="INTERVAL YEAR TO MONTH Literals" summary="The first column shows various forms of interval literal and the second column explains how the database interprets that literal." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t19">Form of Interval Literal</th>
<th class="cellalignment3099" id="r1c2-t19">Interpretation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t19" headers="r1c1-t19"><code>INTERVAL '123-2' YEAR(3) TO MONTH</code></td>
<td class="cellalignment3095" headers="r2c1-t19 r1c2-t19">An interval of 123 years, 2 months. You must specify the leading field precision if it is greater than the default of 2 digits.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t19" headers="r1c1-t19"><code>INTERVAL '123' YEAR(3)</code></td>
<td class="cellalignment3095" headers="r3c1-t19 r1c2-t19">An interval of 123 years 0 months.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t19" headers="r1c1-t19"><code>INTERVAL '300' MONTH(3)</code></td>
<td class="cellalignment3095" headers="r4c1-t19 r1c2-t19">An interval of 300 months.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t19" headers="r1c1-t19"><code>INTERVAL '4' YEAR</code></td>
<td class="cellalignment3095" headers="r5c1-t19 r1c2-t19">Maps to <code>INTERVAL '4-0' YEAR TO MONTH</code> and indicates 4 years.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t19" headers="r1c1-t19"><code>INTERVAL '50' MONTH</code></td>
<td class="cellalignment3095" headers="r6c1-t19 r1c2-t19">Maps to <code>INTERVAL '4-2' YEAR TO MONTH</code> and indicates 50 months or 4 years 2 months.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t19" headers="r1c1-t19"><code>INTERVAL '123' YEAR</code></td>
<td class="cellalignment3095" headers="r7c1-t19 r1c2-t19">Returns an error, because the default precision is 2, and '123' has 3 digits.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblhruleinformal" -->
<p>You can add or subtract one <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> literal to or from another to yield another <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> literal. For example:</p>
<pre>
INTERVAL '5-3' YEAR TO MONTH + INTERVAL'20' MONTH = 
INTERVAL '6-11' YEAR TO MONTH
</pre></div>
<!-- class="sect3" -->
<a id="i78291"></a>
<div id="OLADM158" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">DSINTERVAL Data Type <a id="sthref85"></a><a id="sthref86"></a></h4>
<p>DSINTERVAL corresponds to the SQL <code>INTERVAL DAY TO SECOND</code> data type. It stores a period of time in terms of days, hours, minutes, and seconds. This data type is useful for representing the precise difference between two datetime values.</p>
<p>Specify <code>DSINTERVAL</code> interval literals using the following syntax.</p>
<p class="synopsis">INTERVAL '<span class="italic">integer</span>|<span class="italic">integer time_expr</span>|<span class="italic">time_exp</span>r</p>
<p class="synopsis">DAY|HOUR|MINUTE [(l<span class="italic">eading_precision</span>)] | SECOND [<span class="italic">leading_precision</span>[, <span class="italic">fractional_seconds_precision</span> ])]</p>
<p class="synopsis">[ TO DAY|HOUR|MINUTE|SECOND [(<span class="italic">fractional_seconds_precision</span>) ]]</p>
<p>where</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">integer</span></code> specifies the number of days. If this value contains more digits than the number specified by the leading precision, then Oracle returns an error.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">time_expr</span></code> specifies a time in the format <code>HH[:MI[:SS[.n]]]</code> or <code>MI[:SS[.n]]</code> or <code>SS[.n]</code>, where <code><span class="codeinlineitalic">n</span></code> specifies the fractional part of a second. If <code><span class="codeinlineitalic">n</span></code> contains more digits than the number specified by <code><span class="codeinlineitalic">fractional_seconds_precision</span></code>, then <code><span class="codeinlineitalic">n</span></code> is rounded to the number of digits specified by the <code><span class="codeinlineitalic">fractional_seconds_precision</span></code> value. You can specify <code><span class="codeinlineitalic">time_expr</span></code> following an integer and a space only if the leading field is <code>DAY</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">leading_precision</span></code> is the number of digits in the leading field. Accepted values are 0 to 9. The default is 2.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">fractional_seconds_precision</span></code> is the number of digits in the fractional part of the <code>SECOND</code> datetime field. Accepted values are 1 to 9. The default is 6.</p>
</li>
</ul>
<p>If you specify a trailing field, it must be less significant than the leading field. For example, <code>INTERVAL</code> <code>MINUTE</code> <code>TO</code> <code>DAY</code> is not valid. Because of this restriction, if <code>SECOND</code> is the leading field, the interval literal cannot have any trailing field.</p>
<p>The valid range of values for the trailing field are as follows:</p>
<ul>
<li>
<p><code>HOUR</code>: 0 to 23</p>
</li>
<li>
<p><code>MINUTE</code>: 0 to 59</p>
</li>
<li>
<p><code>SECOND</code>: 0 to 59.999999999</p>
</li>
</ul>
<p>Examples of the various forms of <code>DSINTERVAL</code> literals follow, including some abbreviated versions:</p>
<div class="inftblhruleinformal">
<table class="cellalignment3100" title="INTERVAL DAY TO SECOND Literals" summary="The first column shows various forms of interval literal and the second column explains how the database interprets that literal." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t20">Form of Interval Literal</th>
<th class="cellalignment3099" id="r1c2-t20">Interpretation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t20" headers="r1c1-t20"><code>INTERVAL '4 5:12:10.222' DAY TO SECOND(3)</code></td>
<td class="cellalignment3095" headers="r2c1-t20 r1c2-t20">4 days, 5 hours, 12 minutes, 10 seconds, and 222 thousandths of a second.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t20" headers="r1c1-t20"><code>INTERVAL '4 5:12' DAY TO MINUTE</code></td>
<td class="cellalignment3095" headers="r3c1-t20 r1c2-t20">4 days, 5 hours and 12 minutes.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t20" headers="r1c1-t20"><code>INTERVAL '400 5' DAY(3) TO HOUR</code></td>
<td class="cellalignment3095" headers="r4c1-t20 r1c2-t20">400 days 5 hours.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t20" headers="r1c1-t20"><code>INTERVAL '400' DAY(3)</code></td>
<td class="cellalignment3095" headers="r5c1-t20 r1c2-t20">400 days.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t20" headers="r1c1-t20"><code>INTERVAL '11:12:10.2222222' HOUR TO SECOND(7)</code></td>
<td class="cellalignment3095" headers="r6c1-t20 r1c2-t20">11 hours, 12 minutes, and 10.2222222 seconds.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t20" headers="r1c1-t20"><code>INTERVAL '11:20' HOUR TO MINUTE</code></td>
<td class="cellalignment3095" headers="r7c1-t20 r1c2-t20">11 hours and 20 minutes.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r8c1-t20" headers="r1c1-t20"><code>INTERVAL '10' HOUR</code></td>
<td class="cellalignment3095" headers="r8c1-t20 r1c2-t20">10 hours.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r9c1-t20" headers="r1c1-t20"><code>INTERVAL '10:22' MINUTE TO SECOND</code></td>
<td class="cellalignment3095" headers="r9c1-t20 r1c2-t20">10 minutes 22 seconds.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r10c1-t20" headers="r1c1-t20"><code>INTERVAL '10' MINUTE</code></td>
<td class="cellalignment3095" headers="r10c1-t20 r1c2-t20">10 minutes.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r11c1-t20" headers="r1c1-t20"><code>INTERVAL '4' DAY</code></td>
<td class="cellalignment3095" headers="r11c1-t20 r1c2-t20">4 days.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r12c1-t20" headers="r1c1-t20"><code>INTERVAL '25' HOUR</code></td>
<td class="cellalignment3095" headers="r12c1-t20 r1c2-t20">25 hours.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r13c1-t20" headers="r1c1-t20"><code>INTERVAL '40' MINUTE</code></td>
<td class="cellalignment3095" headers="r13c1-t20 r1c2-t20">40 minutes.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r14c1-t20" headers="r1c1-t20"><code>INTERVAL '120' HOUR(3)</code></td>
<td class="cellalignment3095" headers="r14c1-t20 r1c2-t20">120 hours.</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r15c1-t20" headers="r1c1-t20"><code>INTERVAL '30.12345' SECOND(2,4)</code></td>
<td class="cellalignment3095" headers="r15c1-t20 r1c2-t20">30.1235 seconds. The fractional second '12345' is rounded to '1235' because the precision is 4.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblhruleinformal" -->
<p>You can add or subtract one <code>DAY</code> <code>TO</code> <code>SECOND</code> interval literal from another <code>DAY</code> <code>TO</code> <code>SECOND</code> literal. For example.</p>
<pre>
INTERVAL'20' DAY - INTERVAL'240' HOUR = INTERVAL'10-0' DAY TO SECOND
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CJACGBGE"></a>
<div id="OLADM159" class="sect2">
<h3 class="sect2">Boolean Data Type</h3>
<p><a id="sthref87"></a><a id="sthref88"></a>A <code>BOOLEAN</code> data type enables you to represent logical values. In code, <code>BOOLEAN</code> values are represented by values for "no" and "yes" (in any combination of uppercase and lowercase characters). The actual values that are recognized in your version of Oracle OLAP are determined by the language identified by the NLS_LANGUAGE option. You can use the read-only NOSPELL and YESSPELL options to obtain the values represent <code>BOOLEAN</code> values. In English language code, you can represent <code>BOOLEAN</code> values, using:</p>
<ul>
<li>
<p><code>YES</code>, <code>TRUE</code>, <code>ON</code></p>
</li>
<li>
<p><code>NO</code>, <code>FALSE</code>, <code>OFF</code></p>
</li>
</ul>
<p>Working with <code>BOOLEAN</code> expressions is discussed in <a href="#i1010516">"Boolean Expressions"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABHJEGH"></a>
<div id="OLADM160" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">RAW Data Type</h3>
<p>The<a id="sthref89"></a><a id="sthref90"></a><a id="sthref91"></a><a id="sthref92"></a><a id="sthref93"></a><a id="sthref94"></a> <code>RAW</code> data type stores data that is not to be interpreted (that is, not explicitly converted when moving data between different systems) by Oracle Database. The<a id="sthref95"></a><a id="sthref96"></a><a id="sthref97"></a><a id="sthref98"></a><a id="sthref99"></a><a id="sthref100"></a> <code>RAW</code> data type is intended for binary data or byte strings.</p>
<p>The syntax for specifying <code>RAW</code> data is as follows:</p>
<p class="synopsis">RAW (<span class="italic">size</span>)</p>
<p>where you must specify a size up to the maximum of 2000 bytes</p>
<p><code>RAW</code> is a variable-length data type, however Oracle Net (which connects user sessions to the instance) and Oracle Database utilities do not perform character conversion when transmitting <code>RAW</code> data.</p>
<p>When Oracle automatically converts <code>RAW</code> data to and from text data, the binary data is represented in hexadecimal form, with one hexadecimal character representing every four bits of RAW data. For example, one byte of RAW data with bits <code>11001011</code> is displayed and entered as <code>CB</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a href="dml_functions_1091.htm#CHDDAHJE">HEXTORAW</a> and <a href="dml_functions_2064.htm#CHDGBJIA">RAWTOHEX</a> functions</div>
</div>
<!-- class="sect2" -->
<a id="BABBDCFA"></a>
<div id="OLADM161" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Row Identifier Data Types</h3>
<p>The row identifier data types are used to store an address of a row in a relational table. The OLAP DML supports two different data types that you can use to copy this data from a relational table into objects in an analytic workspace:</p>
<ul>
<li>
<p><a href="#BABJFEAJ">ROWID Data Type</a></p>
</li>
<li>
<p><a href="#BABDDDCI">UROWID Data Type</a></p>
</li>
</ul>
<a id="BABJFEAJ"></a>
<div id="OLADM162" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">ROWID Data Type</h4>
<p><a id="sthref101"></a><a id="sthref102"></a>You can examine a row address of a relational table by querying the pseudocolumn ROWID. Values of this pseudocolumn are strings representing the address of each row. These strings have the data type ROWID.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Although you can create relational tables and clusters that contain actual columns having the ROWID data type. Oracle Database does not guarantee that the values of such columns are valid rowids</div>
<p>The extended ROWID data type stored in a user column includes the data in the restricted rowid plus a data object number. The data object number is an identification number assigned to every database segment. You can retrieve the data object number from the data dictionary views USER_OBJECTS, DBA_OBJECTS, and ALL_OBJECTS. Objects that share the same segment (clustered tables in the same cluster, for example) have the same object number.</p>
<p>Extended rowids are stored as base 64 values that can contain the characters A-Z, a-z, 0-9, and the plus sign (+) and forward slash (/). Extended rowids are not available directly. You can use a supplied package, DBMS_ROWID, to interpret extended rowid contents. The package functions extract and provide information that would be available directly from a restricted rowid as well as information specific to extended rowids.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a class="olink SQLRF00254" href="../../server.112/e41084/pseudocolumns008.htm#SQLRF00254">"ROWID Pseudocolumn</a>" in <span class="italic">Oracle Database SQL Language Reference</span>.</div>
</div>
<!-- class="sect3" -->
<a id="BABDDDCI"></a>
<div id="OLADM163" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">UROWID Data Type</h4>
<p><a id="sthref103"></a><a id="sthref104"></a>The rows of some relational tables have addresses that are not physical or permanent or were not generated by Oracle Database. For example, the row addresses of index-organized tables are stored in index leaves, which can move. Rowids of foreign tables (such as DB2 tables accessed through a gateway) are not standard Oracle rowids.</p>
<p>Oracle uses universal rowids (urowids) to store the addresses of index-organized and foreign tables. Index-organized tables have logical urowids and foreign tables have foreign urowids. Both types of urowid are stored in the ROWID pseudocolumn (as are the physical rowids of heap-organized tables).</p>
<p>Oracle creates logical rowids based on the primary key of the table. The logical rowids do not change if the primary key does not change. The ROWID pseudocolumn of an index-organized table has a data type of UROWID. You can access this pseudocolumn as you would the ROWID pseudocolumn of a heap-organized table (that is, using a SELECT ... ROWID statement). To store the rowids of an index-organized table, then define a column of type UROWID for the table and retrieve the value of the ROWID pseudocolumn into that column.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a class="olink SQLRF51000" href="../../server.112/e41084/sql_elements001.htm#SQLRF51000">UROWID</a> in <span class="italic">Oracle Database SQL Language Reference</span>.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CJAIEJDD"></a>
<div id="OLADM164" class="sect2">
<h3 class="sect2">Converting from One Data Type to Another</h3>
<p>In<a id="sthref105"></a> many cases, <a id="sthref106"></a>Oracle OLAP performs automatic data type conversion for you as discussed in <a href="#CJAHDFIC">"Automatic Conversion of Textual Data Types"</a> and <a href="#CJACHBEA">"Automatic Conversion of Numeric Data Types"</a>. Additionally there are a number of OLAP DML functions that you can use to convert values from one data type to another.</p>
<a id="CJAHDFIC"></a>
<div id="OLADM165" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Automatic Conversion of Textual Data Types</h4>
<p>Oracle OLAP automatically converts <code>NTEXT</code> values to <code>TEXT</code> when they are specified as arguments to OLAP DML statements. This can result in data loss when the <code>NTEXT</code> values cannot be represented in the database character set</p>
</div>
<!-- class="sect3" -->
<a id="CJACHBEA"></a>
<div id="OLADM166" class="sect3">
<h4 class="sect3">Automatic Conversion of Numeric Data Types</h4>
<p>Oracle OLAP automatically converts <code>SHORTINTEGER</code> variables and <code>INTEGER</code> variables (with a fixed width of 1 byte to <code>INTEGER</code> (with a width of 4 bytes) for calculations. When you calculate a total of <code>SHORTINTEGER</code> variables, then you can obtain and report a result greater than 32,767 or less than -32,768. When you calculate a total of 1-byte <code>INTEGER</code> variables, then you can obtain and report a result greater than 127 or less than -128. However, when you try to assign the result to a <code>SHORTINTEGER</code> variable or a 1-byte <code>INTEGER</code> variable respectively, then the variable is set to <code>NA</code>.</p>
<p>Oracle OLAP automatically converts numeric data types according to the following rules:</p>
<ul>
<li>
<p>When you use a value with the <code>SHORTINTEGER</code> or <code>SHORTDECIMAL</code> data type in an expression, then the value is converted to its long counterpart before using it. See <a href="#i1010516">"Boolean Expressions"</a> for information about problems that can occur when you mix <code>SHORTDECIMAL</code> and <code>DECIMAL</code> data types in a comparison expression.</p>
</li>
<li>
<p>When you save the results of a calculation as a value with the <code>SHORTINTEGER</code> data type, then NA is stored when the result is outside the range of a <code>SHORTINTEGER</code> (-32768 to 32767).</p>
</li>
<li>
<p>When you assign the value of a <code>DECIMAL</code> expression to an object with the <code>INTEGER</code> data type, then the value is rounded before storing or using it.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When a <code>DECIMAL</code> value is outside the range of an <code>INTEGER</code>, then an NA is stored.</div>
</li>
<li>
<p>When you use a decimal value where a value with the <code>INTEGER</code> data type is required, then the value is rounded before storing or using it.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When the DECIMAL value is outside the range of an INTEGER, then an NA is stored.</div>
</li>
<li>
<p>When you assign the value of a decimal expression to a variable with the <code>SHORTDECIMAL</code> data type, then only the first 7 significant digits are stored.</p>
</li>
<li>
<p>When you combine <code>NUMBER</code> values with other numeric data types, then all values are converted to <code>NUMBER</code>.</p>
</li>
</ul>
<p>When these conversion are not what you want, then you can use the CONVERT, TO_CHAR, TO_NCHAR, TO_NUMBER, or TO_DATE functions to get different results.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABGBDCJ"></a>
<div id="OLADM167" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">OLAP DML Operators</h2>
<p><a id="sthref107"></a>An operator is a symbol that transforms a value or combines it in some way with another value. <a href="#BABJCEGH">Table 2-9, "OLAP DML Operators"</a> describes the categories of OLAP DML operators.</p>
<div id="OLADM1082" class="tblformal">
<p class="titleintable"><a id="sthref108"></a><a id="BABJCEGH"></a>Table 2-9 OLAP DML Operators</p>
<table class="cellalignment3098" title="OLAP DML Operators" summary="This table describes the general categories of OLAP DML operators." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t27">Category</th>
<th class="cellalignment3099" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t27" headers="r1c1-t27">
<p>Arithmetic</p>
</td>
<td class="cellalignment3095" headers="r2c1-t27 r1c2-t27">
<p>Operators that you can use in numeric expressions with numeric data to produce a numeric result. You can also use some arithmetic operators in date expressions with a mix of date and numeric data, which returns either a date or numeric result. For a list of arithmetic operators, see <a href="#BABCDBHJ">"Arithmetic Operators"</a>. For more information on numeric expressions, see <a href="#i1012610">"Numeric Expressions"</a></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t27" headers="r1c1-t27">
<p>Comparison</p>
</td>
<td class="cellalignment3095" headers="r3c1-t27 r1c2-t27">
<p>Operators that you can use to compare two values of the same basic type (numeric, text, date, or, in rare cases, Boolean), which returns a <code>BOOLEAN</code> result. For a list of comparison operators, see <a href="#BABCIEED">"Comparison and Logical Operators"</a>. For more information on <code>BOOLEAN</code> expressions, see <a href="#i1010516">"Boolean Expressions"</a>.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t27" headers="r1c1-t27">
<p>Logical</p>
</td>
<td class="cellalignment3095" headers="r4c1-t27 r1c2-t27">
<p>The <code>AND</code>, <code>OR</code>, and <code>NOT</code> operators that you can use to transform <code>BOOLEAN</code> values using logical operations, which returns a <code>BOOLEAN</code> result. For a list of logical operators, see <a href="#BABCIEED">"Comparison and Logical Operators"</a>. For more information on <code>BOOLEAN</code> expressions, see <a href="#i1010516">"Boolean Expressions"</a>.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t27" headers="r1c1-t27">
<p>Assignment</p>
</td>
<td class="cellalignment3095" headers="r5c1-t27 r1c2-t27">
<p>An operator that you use to assign the results of an expression into an object or to assign a value to an OLAP DML option. For more information on using assignment statements, see the <a href="dml_commands_2050.htm#CIHCEHEH">SET</a>, and <a href="dml_commands_2051.htm#CIHBHFFD">SET1</a> commands, and <a href="#BABFDFEA">"Assignment Operator"</a>.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t27" headers="r1c1-t27">
<p>Conditional</p>
</td>
<td class="cellalignment3095" headers="r6c1-t27 r1c2-t27">
<p>The <code>IF...THEN...ELSE</code>, <code>SWITCH</code>, and <code>CASE</code> operators that you can use to use to select between values based on a condition. For more information, see <a href="#i1019543">"Conditional Expressions"</a>.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t27" headers="r1c1-t27">
<p>Substitution</p>
</td>
<td class="cellalignment3095" headers="r7c1-t27 r1c2-t27">
<p>The <code>&amp;</code> (ampersand) operator that you can use to evaluate an expression and substitute the resulting value. For more information, see <a href="#i1007199">"Substitution Expressions"</a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="BABCDBHJ"></a>
<div id="OLADM168" class="sect2">
<h3 class="sect2">Arithmetic Operators</h3>
<p><a href="#BABFJAAF">Table 2-10, "Arithmetic Operators"</a> shows the OLAP DML arithmetic operators, their operations, and priority where priority is the order in which that operator is evaluated. Operators of the same priority are evaluated from left to right. When you use two or more operators in a numeric expression, the expression is evaluated according to standard rules of arithmetic. You must code a comma before a negative number that follows another numeric expression, or the minus sign is interpreted as a subtraction operator. For example, <code>intvar,-4</code></p>
<div id="OLADM1083" class="tblformal">
<p class="titleintable"><a id="sthref109"></a><a id="BABFJAAF"></a>Table 2-10 Arithmetic Operators</p>
<table class="cellalignment3098" title="Arithmetic Operators" summary="This table shows the OLAP DML arithmetic operators, th This table shows the Oracle OLAP DML Arithmetic opertors, operations, and priority where priority is the order in which that operator is evaluated." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t28">Operator</th>
<th class="cellalignment3099" id="r1c2-t28">Operation</th>
<th class="cellalignment3099" id="r1c3-t28">Priority</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t28" headers="r1c1-t28">
<p><code>-</code></p>
</td>
<td class="cellalignment3095" headers="r2c1-t28 r1c2-t28">
<p>Sign reversal</p>
</td>
<td class="cellalignment3095" headers="r2c1-t28 r1c3-t28">
<p>1</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t28" headers="r1c1-t28">
<p><code>**</code></p>
</td>
<td class="cellalignment3095" headers="r3c1-t28 r1c2-t28">
<p>Exponentiation</p>
</td>
<td class="cellalignment3095" headers="r3c1-t28 r1c3-t28">
<p>2</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t28" headers="r1c1-t28">
<p><code>*</code></p>
</td>
<td class="cellalignment3095" headers="r4c1-t28 r1c2-t28">
<p>Multiplication</p>
</td>
<td class="cellalignment3095" headers="r4c1-t28 r1c3-t28">
<p>3</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t28" headers="r1c1-t28">
<p><code>/</code></p>
</td>
<td class="cellalignment3095" headers="r5c1-t28 r1c2-t28">
<p>Division</p>
</td>
<td class="cellalignment3095" headers="r5c1-t28 r1c3-t28">
<p>3</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t28" headers="r1c1-t28">
<p>*</p>
</td>
<td class="cellalignment3095" headers="r6c1-t28 r1c2-t28">
<p>Addition</p>
</td>
<td class="cellalignment3095" headers="r6c1-t28 r1c3-t28">
<p>4</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t28" headers="r1c1-t28">
<p><code>-</code></p>
</td>
<td class="cellalignment3095" headers="r7c1-t28 r1c2-t28">
<p>Subtraction</p>
</td>
<td class="cellalignment3095" headers="r7c1-t28 r1c3-t28">
<p>4</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="BABCIEED"></a>
<div id="OLADM169" class="sect2">
<h3 class="sect2">Comparison and Logical Operators</h3>
<p>You use comparison and logical operators to make expressions in much the same way as arithmetic operators. Each operator has a priority that determines its order of evaluation. Operators of equal priority are evaluated left to right, unless parentheses change the order of evaluation. However, the evaluation is halted when the truth value is decided.</p>
<p><a id="sthref110"></a><a id="sthref111"></a><a id="sthref112"></a><a id="sthref113"></a><a id="sthref114"></a><a id="sthref115"></a><a href="#BABDJJJB">Table 2-11, "Comparison and Logical Operators"</a> shows the OLAP DML comparison operators and logical operators (<code>AND</code>, <code>OR</code>, and <code>NOT</code>). It lists the operator, the operations, example, and priority where priority is the order in which that operator is evaluated. Operators of the same priority are evaluated from left to right.</p>
<div id="OLADM1084" class="tblformal">
<p class="titleintable"><a id="sthref116"></a><a id="BABDJJJB"></a>Table 2-11 Comparison and Logical Operators</p>
<table class="cellalignment3098" title="Comparison and Logical Operators" summary="This table shows the OLAP DML comparison operators and logical operators, the operations, example, and priority where priority is the order in which that operator is evaluated." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t29">Operator</th>
<th class="cellalignment3099" id="r1c2-t29">Operation</th>
<th class="cellalignment3099" id="r1c3-t29">Example</th>
<th class="cellalignment3099" id="r1c4-t29">Priority</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t29" headers="r1c1-t29">
<p><code>NOT</code></p>
</td>
<td class="cellalignment3095" headers="r2c1-t29 r1c2-t29">
<p>Returns opposite of <code>BOOLEAN</code> expression</p>
</td>
<td class="cellalignment3095" headers="r2c1-t29 r1c3-t29">
<p><code>NOT(YES) = NO</code></p>
</td>
<td class="cellalignment3095" headers="r2c1-t29 r1c4-t29">
<p>1</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t29" headers="r1c1-t29">
<p><code>EQ</code></p>
</td>
<td class="cellalignment3095" headers="r3c1-t29 r1c2-t29">
<p>Equal to</p>
</td>
<td class="cellalignment3095" headers="r3c1-t29 r1c3-t29">
<p><code>4 EQ 4 = YES</code></p>
</td>
<td class="cellalignment3095" headers="r3c1-t29 r1c4-t29">
<p>2</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t29" headers="r1c1-t29">
<p><code>NE</code></p>
</td>
<td class="cellalignment3095" headers="r4c1-t29 r1c2-t29">
<p>Not equal to</p>
</td>
<td class="cellalignment3095" headers="r4c1-t29 r1c3-t29">
<p><code>5 NE 2 = YES</code></p>
</td>
<td class="cellalignment3095" headers="r4c1-t29 r1c4-t29">
<p>2</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t29" headers="r1c1-t29">
<p><code>GT</code></p>
</td>
<td class="cellalignment3095" headers="r5c1-t29 r1c2-t29">
<p>Greater than</p>
</td>
<td class="cellalignment3095" headers="r5c1-t29 r1c3-t29">
<p><code>5 GT 7 = NO</code></p>
</td>
<td class="cellalignment3095" headers="r5c1-t29 r1c4-t29">
<p>2</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t29" headers="r1c1-t29">
<p><code>LT</code></p>
</td>
<td class="cellalignment3095" headers="r6c1-t29 r1c2-t29">
<p>Less than</p>
</td>
<td class="cellalignment3095" headers="r6c1-t29 r1c3-t29">
<p><code>5 LT 7 = YES</code></p>
</td>
<td class="cellalignment3095" headers="r6c1-t29 r1c4-t29">
<p>2</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t29" headers="r1c1-t29">
<p><code>GE</code></p>
</td>
<td class="cellalignment3095" headers="r7c1-t29 r1c2-t29">
<p>Greater than or equal to</p>
</td>
<td class="cellalignment3095" headers="r7c1-t29 r1c3-t29">
<p><code>8 GE 8 = YES</code></p>
</td>
<td class="cellalignment3095" headers="r7c1-t29 r1c4-t29">
<p>2</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r8c1-t29" headers="r1c1-t29">
<p><code>LE</code></p>
</td>
<td class="cellalignment3095" headers="r8c1-t29 r1c2-t29">
<p>Less than or equal to</p>
</td>
<td class="cellalignment3095" headers="r8c1-t29 r1c3-t29">
<p><code>8 LE 9 = YES</code></p>
</td>
<td class="cellalignment3095" headers="r8c1-t29 r1c4-t29">
<p>2</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r9c1-t29" headers="r1c1-t29">
<p><code>IN</code></p>
</td>
<td class="cellalignment3095" headers="r9c1-t29 r1c2-t29">
<p>Is a date in a time period?</p>
</td>
<td class="cellalignment3095" headers="r9c1-t29 r1c3-t29">
<p><code>'1Jan02' IN myDimension = YES</code></p>
</td>
<td class="cellalignment3095" headers="r9c1-t29 r1c4-t29">
<p>2</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r10c1-t29" headers="r1c1-t29">
<p><code>LIKE</code></p>
</td>
<td class="cellalignment3095" headers="r10c1-t29 r1c2-t29">
<p>Does a text value match a specified text pattern?</p>
</td>
<td class="cellalignment3095" headers="r10c1-t29 r1c3-t29">
<p><code>'Finance' LIKE '%nan%' = YES</code></p>
</td>
<td class="cellalignment3095" headers="r10c1-t29 r1c4-t29">
<p>2</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r11c1-t29" headers="r1c1-t29">
<p><code>AND</code></p>
</td>
<td class="cellalignment3095" headers="r11c1-t29 r1c2-t29">
<p>Both expressions are true</p>
</td>
<td class="cellalignment3095" headers="r11c1-t29 r1c3-t29">
<p><code>8 GE 8 AND 5 LT 7 = YES</code></p>
</td>
<td class="cellalignment3095" headers="r11c1-t29 r1c4-t29">
<p>3</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r12c1-t29" headers="r1c1-t29">
<p><code>OR</code></p>
</td>
<td class="cellalignment3095" headers="r12c1-t29 r1c2-t29">
<p>Either expression is true</p>
</td>
<td class="cellalignment3095" headers="r12c1-t29 r1c3-t29">
<p><code>8 GE 8 OR 5 GT 7 = YES</code></p>
</td>
<td class="cellalignment3095" headers="r12c1-t29 r1c4-t29">
<p>4</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="BABFDFEA"></a>
<div id="OLADM170" class="sect2">
<h3 class="sect2">Assignment Operator</h3>
<p>In the OLAP DML, as in many other programming languages, the = (equal) sign is used as an assignment operator.</p>
<p>An expression creates temporary data; you can display the resulting values, but these values are not automatically stored in your analytic workspace for future reference during a session. You use an assignment statement to store the result of an expression in an object that has the same data type and dimensions as the expression. If you update and commit the object, then the values are available to you in future sessions.</p>
<p>Like other programming languages, an assignment statement in the OLAP DML sets the value of the target expression equal to the results of the source expression. However, an OLAP DML assignment statement does not work exactly as it does in other programming languages. Like many other OLAP DML statements it does not assign a value to a single cell, instead, when the target-expression is a multidimensional object, Oracle OLAP loops through the cells of the target object setting each one to the results of the source-expression. Additionally, you can use UNRAVEL to copy the values of an expression into the cells of a target object when the dimensions of the expression are different from the dimensions of the target object.</p>
<p>For more information on using assignment statements in the OLAP DML, see <a href="dml_commands_2050.htm#CIHCEHEH">SET</a> and <a href="dml_commands_2051.htm#CIHBHFFD">SET1</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="g1031411"></a>
<div id="OLADM171" class="sect1">
<h2 class="sect1">OLAP DML Expressions</h2>
<p><a id="sthref117"></a>Expressions represent data values in the syntax of the OLAP DML. This section provides the following information about OLAP DML expressions:</p>
<ul>
<li>
<p><a href="#BABIBCBG">"About OLAP DML Expressions"</a></p>
</li>
<li>
<p><a href="#i1010537">"Using Workspace Objects in Expressions"</a>.</p>
</li>
<li>
<p><a href="#BABEAFCF">"Working with Empty Cells in Expressions"</a></p>
</li>
<li>
<p>Detailed information about the various types of OLAP DML expressions:</p>
<dl>
<dd><a href="#i1012610">Numeric Expressions</a></dd>
<dd><a href="#i1010546">Text Expressions</a></dd>
<dd><a href="#BABFFDGC">Datetime and Interval Expressions</a></dd>
<dd><a href="#BABBIEFG">Date-only Expressions</a></dd>
<dd><a href="#i1010516">Boolean Expressions</a></dd>
<dd><a href="#i1019543">Conditional Expressions</a></dd>
<dd><a href="#i1007199">Substitution Expressions</a></dd>
</dl>
</li>
</ul>
<a id="BABIBCBG"></a>
<div id="OLADM172" class="sect2">
<h3 class="sect2">About OLAP DML Expressions</h3>
<p>An OLAP DML expression has a data type and can also have dimensions. You can use expressions as arguments in statements. An expression often performs a mathematical or logical operation. It always evaluates to a result in a workspace data type.</p>
<p>An expression can be:</p>
<ul>
<li>
<p>A literal value. For example, <code>10</code> or <code>'East'</code></p>
</li>
<li>
<p>An analytic workspace object that contains multiple values. For example, the variable <code>sales</code></p>
</li>
<li>
<p>A function that returns one or more values. For example, TOTAL or JOINLINES</p>
</li>
<li>
<p>Another expression that combines literal values, dimensions, variables, formulas, and functions with operators. For example, <code>inflation*1.02</code></p>
</li>
</ul>
<p>You can save an expression as a formula as described in <a href="dml_objects.htm#i1019576">"OLAP DML Formulas"</a></p>
<a id="BABICEIH"></a>
<div id="OLADM173" class="sect3">
<h4 class="sect3">How the Data Type of an Expression is Determined</h4>
<p><a id="sthref118"></a><a id="sthref119"></a>The data type of an expression is the data type of the resulting value. It might not be the same as the data type of the data objects that constitute the expression; it depends on the data and on the operators and functions that are involved.</p>
<p>In addition, a conditional expression that is indicated by an <code>IF</code>... <code>THEN</code>...<code>ELSE</code> operator is supported. A conditional expression returns a value whose data type depends on the expressions in the <code>THEN</code> and <code>ELSE</code> clauses, not on the expression in the <code>IF</code> clause, which must be <code>BOOLEAN</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not confuse a conditional expression with the IF...THEN...ELSE command in a program, which has similar syntax but a different purpose. The <code>IF</code> statement does not have a data type and is not evaluated like an expression.</div>
</div>
<!-- class="sect3" -->
<a id="i1020081"></a>
<div id="OLADM174" class="sect3">
<h4 class="sect3">How the Dimensionality of an Expression is Determined</h4>
<p><a id="sthref120"></a><a id="sthref121"></a>An expression is dimensioned by a union of the dimensions of all of the variables, dimensions, relations, formulas, qualified data references, and functions in the expression:</p>
<ul>
<li>
<p>Variables, relations, and formulas are dimensioned by the dimensions listed in the definition of the object.</p>
<p><span class="bold">Example 1:</span> When the <code>price</code> variable is dimensioned by <code>month</code> and <code>product</code>, then the expression <code>price</code>&nbsp;<code>*</code>&nbsp;<code>1.2</code> is also dimensioned by <code>month</code> and <code>product</code>.</p>
<p><span class="bold">Example 2:</span> When the <code>units</code> variable is dimensioned by <code>month</code>, <code>product</code>, and <code>district</code>, then the expression <code>units</code>&nbsp;<code>*</code>&nbsp;<code>price</code> is dimensioned by <code>month</code>, <code>product</code>, and <code>district</code> (even though the dimensions of the <code>price</code> variable are <code>month</code> and <code>product</code> only).</p>
</li>
<li>
<p>Qualified data references (QDRs) are dimensioned by all of the dimensions of the associated object, except for the dimensions being qualified. (For more information about qualified data references, see <a href="#i1013949">"Limiting a Dimension to a Single Value Without Changing Status"</a>.)</p>
</li>
<li>
<p>The return values of most OLAP DML functions are, in most cases, dimensioned by the union of the dimensions of the input arguments. However, some functions (such as aggregation functions) have fewer dimensions than the input arguments. In these cases, the dimensionality of the return value is documented in the topic for the function in <a href="dml_functions_1.htm#CJAGEFHJ">Chapter 7, "OLAP DML Functions: A - K"</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Unless otherwise noted, when you specify breakout dimensions or relations in an aggregation function, you change the dimensionality of the expression. The first dimension that you specify as a breakout dimension is the slowest varying and the last dimension that you specify is the fastest varying.</div>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can change the dimensionality of an expression or subexpression using the CHGDIMS function</div>
<div id="OLADM175" class="sect4"><a id="sthref122"></a>
<h5 class="sect4">Determining the Dimensions of an Expression</h5>
<p><a id="sthref123"></a>You can find out the dimensions of an expression by issuing a PARSE statement, followed by the INFO function. PARSE evaluates the text of an expression; the INFO indicates how the expression is interpreted.</p>
<p><a id="sthref124"></a><a id="sthref125"></a>This example illustrates the use of the DIMENSION keyword with the INFO function to retrieve the dimensions of the expression just analyzed by PARSE. Assume that you issue the following statement.</p>
<pre>
PARSE 'TOTAL(sales region)'
</pre>
<p>The statement produces the following output.</p>
<pre>
SHOW INFO(PARSE DIMENSION)
REGION
</pre></div>
<!-- class="sect4" -->
<div id="OLADM176" class="sect4"><a id="sthref126"></a>
<h5 class="sect4">How Dimension Status Affects the Number of Values in the Results of Expressions</h5>
<p><a id="sthref127"></a><a id="sthref128"></a>The number of values an expression yields depends on the dimensions of the expression and the status of those dimensions. An expression yields one data value for each combination of dimension values in the current status. For example, when three dimension values are in status for <code>month</code>, and two for <code>product</code>, then the expression <code>price</code> GT <code>100</code> results in six values (3&nbsp;times&nbsp;2).</p>
<p>Thus, to get the desired results, you must ensure that the dimensions of an expression are limited to the range of data you want to consider. In addition, you must consider any PERMIT statements that might limit access to the dimensions of the data.</p>
<p>When you want to specify a single value without changing the current status you can use a qualified data reference (QDR). Using a QDR, you can qualify a dimension (which enables you to specify one dimension value in an expression) or one or more dimensions of a variable or relation. For more information on dimension status, see <a href="dml_basics.htm#BABICBHE">"How to Specify the Set of Data that OLAP DML Operations Work Against"</a>; for more information on QDRs, see <a href="#i1013949">"Limiting a Dimension to a Single Value Without Changing Status"</a>.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1010537"></a>
<div id="OLADM177" class="sect2">
<h3 class="sect2">Using Workspace Objects in Expressions</h3>
<p><a id="ABC1527196"></a><a id="ABC1527198"></a>You can use an analytic workspace data object in an expression by specifying its name as described in <a href="#i1012619">"Syntax for Specifying an Object in an Expression"</a>. When calculating the expression, Oracle OLAP uses the data in the specified object as described in <a href="#CACFDBGH">"How OLAP DML Data Objects Behave in Expressions"</a>.</p>
<a id="CACFDBGH"></a>
<div id="OLADM178" class="sect3">
<h4 class="sect3">How OLAP DML Data Objects Behave in Expressions</h4>
<p><a href="#CACBEJJF">Table 2-12</a> summarizes how Oracle OLAP uses the data in an object used as an argument in an expression.</p>
<div id="OLADM1085" class="tblformal">
<p class="titleintable"><a id="sthref129"></a><a id="CACBEJJF"></a>Table 2-12 Objects in Expressions</p>
<table class="cellalignment3098" title="Objects in Expressions" summary="This table outlines how you can use analytic workspace data objects in OLAP DML expresssions." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t33">Object</th>
<th class="cellalignment3099" id="r1c2-t33">Use in Expressions</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t33" headers="r1c1-t33">
<p>Variables</p>
</td>
<td class="cellalignment3095" headers="r2c1-t33 r1c2-t33">
<p>As a one-dimensional or multi-dimensional array of data, depending on its definition. For example, as the target or source expression in an assignment statement.</p>
<p><span class="bold">See also:</span> <a href="#BABFBIGA">"Using Variables and Relations in Expressions"</a> and <a href="dml_commands_2050.htm#i1015026">"Using Objects in Assignment Statements"</a>.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t33" headers="r1c1-t33">
<p>Relations</p>
</td>
<td class="cellalignment3095" headers="r3c1-t33 r1c2-t33">
<p>As a one-dimensional or multi-dimensional of data, depending on its definition. For example, as the target or source expression in an assignment statement as outlined in <a href="dml_commands_2050.htm#i1015026">"Using Objects in Assignment Statements"</a>.</p>
<ul>
<li>
<p>When you use a relation in a text expression, the relation value is referenced as a text value. The values of the related dimension that is contained in the relation are converted into text, and you can use these values in an expression. You can also compare a text literal to a relation.</p>
</li>
<li>
<p>When you use a relation in a numeric expression, the relation value is referenced by its position (an <code>INTEGER</code>) in its related dimension array. You can use this numeric value in an expression. The position number is based on the default status list of the dimension, not the current status list of the dimension.</p>
</li>
</ul>
<p><span class="bold">See also:</span> <a href="#BABFBIGA">"Using Variables and Relations in Expressions"</a> , <a href="#BABFAJGI">"Using Related Dimensions in Expressions"</a>.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t33" headers="r1c1-t33">
<p>Dimensions</p>
</td>
<td class="cellalignment3095" headers="r4c1-t33 r1c2-t33">
<p>As a one-dimensional array of data. When you use a <code>TEXT</code> dimension value in a numeric expression or compare values in a non-numeric dimension, Oracle OLAP uses the <code>INTEGER</code> position number of the value in the array (as based on the default status list) rather than the value itself.</p>
<p><span class="bold">See also:</span> <a href="#BABIAGDD">"Specifying a Value of a CONCAT Dimension"</a> and <a href="#BABFAJGI">"Using Related Dimensions in Expressions"</a>.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t33" headers="r1c1-t33">
<p>Composites</p>
</td>
<td class="cellalignment3095" headers="r5c1-t33 r1c2-t33">
<p>You can use a composite wherever you can use a dimension.</p>
<p><span class="bold">See also:</span> <a href="#BABCACFA">"Specifying a Value of a Composite"</a> .</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t33" headers="r1c1-t33">
<p>Valuesets</p>
</td>
<td class="cellalignment3095" headers="r6c1-t33 r1c2-t33">
<p>As a list of dimension values.</p>
<p><span class="bold">See also:</span> <a href="#BABFBIGA">"Using Variables and Relations in Expressions"</a> and the <a href="dml_commands_1032.htm#i78528">DEFINE VALUESET</a> command.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t33" headers="r1c1-t33">
<p>Dimension surrogates</p>
</td>
<td class="cellalignment3095" headers="r7c1-t33 r1c2-t33">
<p>As a one-dimensional array. A surrogate provides an alternative set of values for a dimension. When you use a <code>TEXT</code> surrogate value in a numeric expression or compare values in a non-numeric surrogate, Oracle OLAP uses the <code>INTEGER</code> position number of the value in the array (as based on the default status list) rather than the value itself.</p>
<p><span class="bold">Note:</span> You can use a surrogate rather than a dimension in a model, in a LIMIT command, in a qualified data reference, or in data loading with statements such as FILEREAD, FILEVIEW, SQL FETCH, and SQL IMPORT. A surrogate cannot be a participant object in any argument in a DEFINE statement that defines another object.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r8c1-t33" headers="r1c1-t33">
<p>Formulas</p>
</td>
<td class="cellalignment3095" headers="r8c1-t33 r1c2-t33">
<p>As a sub-expression or as an expression in a statement.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r9c1-t33" headers="r1c1-t33">
<p>Programs</p>
</td>
<td class="cellalignment3095" headers="r9c1-t33 r1c2-t33">
<p>For a program that does not return a value, use the program name as you would an OLAP DML command. For a program that returns a value, invoke the program the same way that you invoke an OLAP DML function: use the program name in the expression and enclose the program arguments, if any, in parentheses.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<a id="i1012619"></a>
<div id="OLADM179" class="sect3">
<h4 class="sect3">Syntax for Specifying an Object in an Expression</h4>
<p>You can specify an analytic workspace object in an expression using the following syntax.</p>
<p class="synopsis">[[<span class="italic">schema-name</span>.]<span class="italic">analytic-workspace-name</span>!]<span class="italic">object-name</span></p>
<dl>
<dt><span class="italic">schema-name</span></dt>
<dd>
<p>The name of the schema in which the analytic workspace was defined when it was created. By default, an analytic workspace is created in the schema for the database user ID of the user issuing the AW CREATE statement. In almost any DML statement, you can specify the full name of an analytic workspace (for example, <code>Scott.demo</code>).</p>
</dd>
<dt><span class="italic">analytic-workspace-name</span></dt>
<dd>
<p>The name of the workspace that contains the desired object. By specify the analytic workspace name along with the object name you create a<a id="sthref130"></a><a id="sthref131"></a><a id="sthref132"></a> <span class="bold">qualified object name</span> (QON) for the object. Using a qualified object name for an object is recommended except in those situations described in <a href="#BABIDDAE">"When Not to Use Qualified Object Names"</a>.</p>
<p>You can specify the value for <span class="italic">analytic-workspace-name</span> in any of the following ways:</p>
<ul>
<li>
<p><a id="sthref133"></a>The name of an analytic workspace. A <span class="bold">workspace name</span> is assigned when an analytic workspace is created with an AW CREATE statement.</p>
</li>
<li>
<p>The alias name of an analytic workspace. An <span class="bold">analytic workspace alias</span> is <a id="sthref134"></a>an<a id="sthref135"></a> alternative name for an attached analytic workspace. You can assign or delete an alias with an AW ALIAS LIST statement. An alias is in effect from the time it is assigned to the time that the workspace is detached (or until the alias is deleted). Therefore, each time you attach an unattached workspace, you must reassign its aliases.</p>
<p>One reason for assigning an alias is to have a short way to reference an analytic workspace that belongs to a schema that is not yours. For example, you can use the alias in qualified object names and statements that reference such an analytic workspace. Another reason for assigning an alias is to write generic code that includes a reference to an analytic workspace but does not hard-code its name. With the alias providing a generic reference, you can assign the alias and run the code on different workspaces at different times.</p>
</li>
<li>
<p>Within an aggregation specification, model, or program, you can use <code>THIS_AW</code> to qualify an object name. When Oracle OLAP compiles an object, it interprets any occurrence of <code>THIS_AW</code> as the name of the workspace in which the object is being compiled. Thus if you have an analytic workspace named <code>myworkspace</code> that contains a program named <code>myprog</code> and a variable named <code>myvar</code>, Oracle OLAP interprets a statement myvar=1 as though it was written <code>myworkspace!myvar=1</code>. Within a program, you can retrieve the value of <code>THIS_AW</code> using the THIS_AW option.</p>
</li>
</ul>
<p>When you do not specify a value for <span class="italic">analytic-workspace-name</span>, Oracle OLAP assumes that the specified object is in the current analytic workspace. <a id="sthref136"></a>The <span class="bold"><a id="sthref137"></a>current analytic workspace</span> is the first analytic workspace in the list of the active analytic workspaces that you view with an AW LIST statement. You can retrieve the name of the current analytic workspace by using the AW function with the NAME keyword.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Your session does not have to have a current analytic workspace. When you start Oracle OLAP without specifying an analytic workspace name, then the <code>EXPRESS</code> analytic workspace is first on the list. However, in this case, the <code>EXPRESS</code> analytic workspace is not current; there is no current analytic workspace until you specify one with the AW command.</div>
</dd>
<dt><span class="italic">object-name</span></dt>
<dd>
<p>The name of the object unless the object is an unnamed composite. When the object is an unnamed composite, use the following syntax.</p>
<p class="synopsis">SPARSE &lt;<span class="italic">basedims.</span>...&gt;</p>
<p>For the <span class="italic">basedims</span> argument, specify the names of the dimensions, separated by spaces, for which the unnamed composite was created. For an example of using an unnamed composite in an OLAP DML statement, see <a href="dml_commands_2045.htm#CACGJEBD">Example 10-104, "Reporting Data Dimensioned by Composites"</a>.</p>
<p>Objects with the same name in different workspaces are treated as completely separate objects, and no similarity or relationship is assumed to exist between them. Any OLAP DML language restrictions that apply between objects in different workspaces apply even when the objects have the same name. For example, you cannot dimension an object in one workspace by a dimension that resides in another workspace, even when both workspaces have dimensions with the same name.</p>
</dd>
</dl>
<div id="OLADM180" class="sect4"><a id="sthref138"></a>
<h5 class="sect4">Considerations When Creating and Using Qualified Object Names</h5>
<p>Although the use of qualified object names for objects is typical, there are several considerations to keep in mind:</p>
<ul>
<li>
<p>There are some situations where you cannot use a qualified object name or do not need to use a qualified object name. See <a href="#BABIDDAE">"When Not to Use Qualified Object Names"</a> for more information</p>
</li>
<li>
<p>Before you use ampersand substitution when creating a qualified object name you must understand how and when the substitution occurs. See <a href="#BABEGEDI">"Using Ampersand Substitution for Workspace and Object Names"</a> for more information.</p>
</li>
<li>
<p>Special considerations apply when passing a qualified object name as an argument to a program. See <a href="#BABGCJFG">"Passing Qualified Object Names to Programs"</a> for more information.</p>
</li>
</ul>
<p class="subhead2"><a id="BABIDDAE"></a><a id="OLADM1086"></a>When Not to Use Qualified Object Names</p>
<p>Generally it is good practice to use a qualified object name in an expression. However, there are some situations where you cannot use a qualified object name or when a qualified object name is not necessary:</p>
<ul>
<li>
<p>The following objects cannot have qualified object names:</p>
<ul>
<li>
<p>An object that is local to a particular program because it was created by an ARGUMENT or VARIABLE statement.</p>
</li>
<li>
<p>The NAME dimension of any given workspace. When you reference the NAME dimension, Oracle OLAP always uses the NAME dimension of the current workspace.</p>
</li>
</ul>
</li>
<li>
<p>You do not need to use a qualified object name in the following circumstances:</p>
<ul>
<li>
<p>In the qualifiers of a qualified data reference (QDR). Only the object being qualified needs to be named with a qualified object name. Any unqualified names are assumed to apply to objects in the same workspace as the object being qualified.</p>
</li>
<li>
<p>In an unnamed composite, when you specify one base dimension as a qualified object name, then all the others are assumed to come from the same workspace.</p>
</li>
<li>
<p>In a named composite, when the name is a qualified object name then its base dimensions are assumed to come from the same workspace.</p>
</li>
<li>
<p>In a model, when you specify the solution variable as a qualified object name, then all the dimensions named in DIMENSION statements are assumed to come from the same workspace.</p>
</li>
</ul>
</li>
</ul>
<p class="subhead2"><a id="BABEGEDI"></a><a id="OLADM1087"></a>Using Ampersand Substitution for Workspace and Object Names</p>
<p>The workspace name, or the object name, or both can be supplied using ampersand substitution. However, take care when using a qualified object name with ampersand substitution because Oracle OLAP parses the qualified object name (with its exclamation point) before it resolves the ampersand reference. For example, in the expression <code>&amp;awname!objname</code>, the ampersand (<code>&amp;</code>) applies to the entire qualified object name, not just to the workspace name.</p>
<p class="subhead2"><a id="BABGCJFG"></a><a id="OLADM1088"></a>Passing Qualified Object Names to Programs</p>
<p>When you pass a qualified object name as an argument to a program and you use an ARGUMENT statement and the ARG, ARGFR, and ARGS functions, the entire qualified object name is considered to be a single argument. Its component parts are not passed separately.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div id="OLADM181" class="sect3"><a id="sthref139"></a>
<h4 class="sect3">Specifying Values of Dimensions and Composites in Expressions</h4>
<p>In most cases, you refer to the value of a dimension by specifying the value following the conventions for the data type of the value. For example, assume that you have a <code>TEXT</code> dimension named <code>geog</code>. You can add the value "World" to the dimension by issuing the following statement.</p>
<pre>
MAINTAIN geog ADD 'World'
</pre>
<p>Note, however, that when you use a <code>TEXT</code> dimension value in a numeric expression or compare values in a non-numeric dimension, Oracle OLAP uses the <code>INTEGER</code> position number of the value in the array (as based on the default status list) rather than the value itself.</p>
<p>Special considerations apply to specifying the values of composites and concat dimensions.</p>
<a id="BABCACFA"></a>
<div id="OLADM182" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Specifying a Value of a Composite</h5>
<p><a id="sthref140"></a>You can specify a value of a composite in <a id="sthref141"></a>the following ways:</p>
<ul>
<li>
<p>By specifying a set of values of the base dimensions of the composite using the following syntax.</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="italic">{composite_name</span> | SPARSE} {&lt;<span class="italic">base_dimension_name base_dimension_value</span> }, ...&gt;</p>
</li>
<li>
<p>(Named composites only) By specifying just the values of the composite using the following syntax.</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="italic">composite_name</span> &lt;<span class="italic">base_dimension_value</span> ...&gt;</p>
<p>where <span class="italic">base_dimension_value</span> is a set of values of the base dimensions, in the order in which they were defined in the composite, separated by spaces.</p>
</li>
</ul>
</div>
<!-- class="sect4" -->
<a id="BABIAGDD"></a>
<div id="OLADM183" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Specifying a Value of a CONCAT Dimension</h5>
<p><a id="sthref142"></a>Once you have defined a unique CONCAT dimension, <a id="sthref143"></a><a id="sthref144"></a>you can refer to its values simply by specifying the values of the base dimensions.</p>
<p>However, you must specify a value of a nonunique CONCAT dimension as a concatenation of the name of the base dimension and the base dimension value separated by a colon (:) and a space and enclosed in angle brackets(&lt;&gt;). In an expression, use the following format.</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="italic">BASE_DIMENSION_NAME</span>: <span class="italic">base_dimension value</span>&gt;</p>
<p>For example, assume that you have defined the base dimensions named <code>city</code> and <code>state</code> and, a CONCAT dimension for them named <code>geog</code>. When you report on the <code>geog</code> dimension, the values of <code>geog</code> include the names of the base dimensions along with the values.</p>
<pre>
DEFINE city DIMENSION TEXT
DEFINE state DIMENSION TEXT
DEFINE geog DIMENSION CONCAT(city state)
MAINTAIN city ADD 'New York'
MAINTAIN state ADD 'New York'
REPORT geog

 GEOG
-----------------------------------
&lt;CITY: New York&gt;
&lt;STATE: New York&gt;
</pre></div>
<!-- class="sect4" -->
<a id="BABFAJGI"></a>
<div id="OLADM184" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Using Related Dimensions in Expressions</h5>
<p><a id="sthref145"></a><a id="sthref146"></a><a id="sthref147"></a><a id="sthref148"></a>The syntax of some OLAP DML statements (for example, some variations of the LIMIT command) include two dimension arguments referred to as a dimension, and a related dimension. Other OLAP DML statements (for example, AVERAGE, ANY, COUNT, CUMSUM, NONE, LARGEST, SMALLEST, and TOTAL) allow you to specify the dimensionality of the result in terms of a related dimension. In these contexts, the related dimension is any dimension that shares a relation with another dimension.</p>
<p>Even though the value that you specify for the arguments in these statements is the name of a dimension, in actuality Oracle OLAP uses a relation <span class="italic">between</span> the dimensions to perform its calculations. When the two dimensions share only one relation, the behavior is clear. Oracle OLAP performs the calculation based on the values in that relation.</p>
<p>However, when two dimensions share multiple relations, then the behavior is less clear. In some cases, as with a LIMIT using LEVELREL command, you can specify the shared relation you want Oracle OLAP to use. In other cases, the statement syntax does not allow you to specify the name of a relation. In this case, Oracle OLAP chooses among the multiple relations as described in <a href="dml_commands_2039.htm#i1020453">"How Oracle OLAP Chooses Between Multiple Relations"</a>.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="BABFBIGA"></a>
<div id="OLADM185" class="sect3">
<h4 class="sect3">Using Variables and Relations in Expressions</h4>
<p>In expressions, a variable is referenced as an array containing values of the specified data type. A relation is referenced as an array containing values of the specified dimension. In most other respects, variables and relations (both typically multidimensional objects) share the same characteristics.</p>
<p><a id="sthref149"></a><a id="sthref150"></a>In most cases, when you use OLAP DML statements with variables that are defined with composites, the statements treat those variables as if they were defined with base dimensions:</p>
<ul>
<li>
<p>You can access a variable that is dimensioned by a composite by requesting any of the base dimension values.</p>
</li>
<li>
<p>The values of a composite that are in status are determined by the status of the base dimensions of the composite. Composites are not dimensions, and therefore, they do not have any independent status.</p>
</li>
</ul>
<p>When you use a REPORT statement or any other statement that loops over a variable that uses a composite, the default behavior is to evaluate all the combinations of the values of the base dimensions of the composite that are in status. Any combinations that do not exist in the composite display NA for their associated data.</p>
<p>For example, the following statements create a report for the East region that shows the number of coupons issued for sportswear from January through March 2002. Because no coupons were issued in March 2002, the report displays NA in that column.</p>
<pre>
LIMIT month TO 'Jan02' 'Feb02' 'Mar02'
LIMIT market TO 'East'
LIMIT product TO 'Sportswear'
REPORT coupons
  
MARKET: EAST
               ------------COUPONS-------------
               -------------MONTH--------------
PRODUCT          Jan02      Feb02      Mar02
-------------- ---------- ---------- ----------
Sportswear          1,000      1,000         NA
</pre>
<p>However, for performance reasons, you can change the default looping behavior for statements such as REPORT, ROW, and the assignment statement (SET) so that they loop over the values in the composite rather than all of the base dimension values.<a id="sthref151"></a><a id="sthref152"></a></p>
</div>
<!-- class="sect3" -->
<a id="i1013949"></a>
<div id="OLADM186" class="sect3">
<h4 class="sect3">Limiting a Dimension to a Single Value Without Changing Status</h4>
<p><a id="sthref153"></a><a id="sthref154"></a><a id="sthref155"></a><a id="sthref156"></a><a id="sthref157"></a>A qualified data reference (QDR) is a way of limiting one or more dimensions of a data object to a single value. QDRs are useful when you want to specify a single value of a data object without changing the current status. Using a QDR, you can qualify a dimension (which enables you to specify one dimension value in an expression) or one or more dimensions of a variable or relation.</p>
<p><a id="sthref158"></a>Sometimes the syntax of a QDR is ambiguous and could either be misinterpreted or cause a syntax error. In this case, you can use the <a href="dml_functions_2061.htm#i79643">QUAL</a> function to explicitly specify a qualified data reference (QDR).</p>
<a id="i1014895"></a>
<div id="OLADM187" class="sect4">
<h5 class="sect4">Syntax of a Qualified Data Reference</h5>
<p>You specify a qualified data reference using the following syntax</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="italic">expression</span>(<span class="italic">dimname1 dimexp1</span> [, <span class="italic">dimname2 dimexp2</span>. . .])</p>
<p>The <span class="syntaxinlineitalic">dimname</span> argument is the name of a dimension or a dimension surrogate of the dimension, of the expression and the <span class="italic">dimexp</span> argument is one of the following:</p>
<ul>
<li>
<p>A value of <span class="italic">dimname.</span></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The setting of the <a href="dml_options040.htm#CIHIBDDI">LIMITSTRICT</a> option determines how Oracle OLAP behaves when a QDR specifies a nonexistent value. By default, when you specify a nonexistent value, Oracle OLAP treats the nonexistent value as an invalid value and issues an error. If, instead, you want Oracle OLAP to treat a nonexistent value as an <code>NA</code> value, set the value of LIMITSTRICT to <code>NO</code>.</div>
</li>
<li>
<p>A text expression whose result is a value of <span class="italic">dimname.</span></p>
</li>
<li>
<p>A numeric expression whose result is the logical position of a value of <span class="italic">dimname.</span></p>
</li>
<li>
<p>A relation of <span class="syntaxinlineitalic">dimname.</span></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When syntax of a QDR is ambiguous and could either be misinterpreted or cause a syntax error, use the <a href="dml_functions_2061.htm#i79643">QUAL</a> function to explicitly specify a qualified data reference (QDR).</div>
</li>
</ul>
</div>
<!-- class="sect4" -->
<div id="OLADM188" class="sect4"><a id="sthref159"></a>
<h5 class="sect4">Qualifying a Variable</h5>
<p><a id="sthref160"></a><a id="sthref161"></a><a id="sthref162"></a>You can qualify any or all of the dimensions of a variable using either of the following techniques:</p>
<ul>
<li>
<p>The QDR can temporarily limit a dimension of the variable by selecting one specified value of the dimension. This value can be outside the current status.</p>
</li>
<li>
<p>The QDR can replace a dimension of the variable with a less aggregate related dimension when you supply the name of an appropriate relation as the qualifier. The dimension is temporarily replaced by the dimension(s) of the relation.</p>
</li>
</ul>
<p>For example, the variable <code>sales</code> has three dimensions, <code>month</code>, <code>product</code>, and <code>district</code>. You might want to compare total sales in Boston to the total sales in all cities. In a single statement, you want <code>district</code> to be limited to <span class="italic">two</span> different values:</p>
<ul>
<li>
<p>For the numerator of the expression, you want the status of <code>district</code> to be <code>Boston</code>.</p>
</li>
<li>
<p>For the denominator of the expression, you want the status of <code>district</code> to be <code>ALL</code>.</p>
</li>
</ul>
<p>The following statement lets you calculate this result by using a QDR.</p>
<pre>
SHOW sales(district 'Boston')/TOTAL(sales)
</pre>
<p><a id="sthref163"></a><a id="sthref164"></a><a id="sthref165"></a><a id="sthref166"></a><a id="sthref167"></a>You can qualify multiple dimensions of a variable. For example, when you qualify all the dimensions of the <code>sales</code> variable by specifying one dimension value of each dimension, then you narrow <code>sales</code> down to a single&ndash;cell value.</p>
<p>To fetch sales for <code>Jun02</code>, <code>Tents</code>, and <code>Seattle</code>, use the following QDR.</p>
<pre>
SHOW sales(month 'Jun02', product 'Tents', district 'Seattle')
</pre>
<p>This statement fetches a single value.</p>
<p><a id="sthref168"></a><a id="sthref169"></a>You can use a qualified data reference with the target expression of an assignment (<a href="dml_commands_2050.htm#CIHCEHEH">SET</a>) statement. This lets you assign a value to a specific cell in a data object.</p>
<p>The following example assigns the value 10200 to the data cell of the <code>sales</code> composite that is specified in the qualified data reference. When the composite named <code>sales</code> does not have a value for the combination <code>Boston</code> and <code>Tents</code>, then this value combination is added to the composite, thus adding the data cell.</p>
<pre>
sales(market 'Boston' product 'Tents' month 'Jan99')= 10200
</pre></div>
<!-- class="sect4" -->
<div id="OLADM189" class="sect4"><a id="sthref170"></a>
<h5 class="sect4">Replacing a Dimension in a Variable</h5>
<p><a id="sthref171"></a><a id="sthref172"></a><a id="sthref173"></a><a id="sthref174"></a><a id="sthref175"></a>When you use a relation as the qualifier in the QDR, you replace a dimension of the variable with the dimension or dimensions of the relation. The relation must be related to the dimension that you are qualifying, and it must be dimensioned by the replacement dimension.</p>
<div id="OLADM1089" class="example">
<p class="titleinexample"><a id="sthref176"></a>Example 2-1 Replacing a Dimension in a Variable</p>
<p>Suppose you have two variables, <code>sales</code> and <code>quota</code>, which are dimensioned by <code>month</code>, <code>product</code>, and <code>district</code>. A third variable, <code>division</code>.<code>mgr</code>, is dimensioned by <code>month</code> and <code>division</code>. You also have a relation between <code>division</code> and <code>product</code>, called <code>division</code>.<code>product</code>. These objects have the following definitions.</p>
<pre>
DEFINE sales VARIABLE DECIMAL &lt;month product district&gt;
LD Sales Revenue
DEFINE quota VARIABLE DECIMAL &lt;month product district&gt;
DEFINE division.mgr VARIABLE TEXT &lt;month division&gt;
DEFINE division.product RELATION division &lt;product&gt;
LD Division for each product 
</pre>
<p>The following statement produces the report following it.</p>
<pre>
REPORT division.mgr

-------------------DIVISION.MGR----------------------
          ----------------------MONTH--------------------------
DIVISION  JAn02    Feb02    Mar02    Apr02    May02    Jun02   
--------  -------- -------- -------- -------- -------- --------
Camping   Hawley   Hawley   Jones    Jones    Jones    Jones   
Sporting  Carey    Carey    Carey    Carey    Carey    Musgrave
Clothing  Musgrave Musgrave Musgrave Musgrave Musgrave Wong    
</pre>
<p>Suppose you want to obtain a report that shows the fraction by which sales have exceeded quota and you want to include the appropriate division manager for each product. You can show the division manager for each product by using the relation <code>division</code>.<code>product</code>, which is related to <code>division</code> and dimensioned by <code>product</code>, as the qualifier. The QDR replaces the <code>division</code> dimension with <code>product</code>, so that it has the same dimensions as the other expression in the report <code>sales</code>&nbsp;/&nbsp;<code>quota</code>. The following statement produces the report following it.</p>
<pre>
REPORT DOWN month sales W 6 sales/quota W 8 HEADING -
   'MANAGER' division.mgr(division division.product)

DISTRICT: BOSTON
        -----------------------------PRODUCT------------------------------------
        ----TEnts---- ---canoes---- --racquets---  --sportswear-- ---footwear---
        Sales/        Sales/        Sales/         Sales/         Sales/
Month   Quota Manager Quota Manager Quota Manager  Quota Manager  Quota  Manager
------  ----- ------- ----- ------- ----- -------  ----- -------- ----- --------
Jan02   1.00  Hawley  0.82  Hawley  1.02  Carey    0.91  Musgrave 0.92  Musgrave
Feb02   0.84  Hawley  0.96  Hawley  1.00  Carey    0.80  Musgrave 1.07  Musgrave
Mar02   0.87  Jones   0.95  Jones   0.87  Carey    0.88  Musgrave 0.91  Musgrave
Apr02   0.91  Jones   0.93  Jones   0.99  Carey    0.94  Musgrave 0.95  Musgrave
...
</pre></div>
<!-- class="example" --></div>
<!-- class="sect4" -->
<div id="OLADM190" class="sect4"><a id="sthref177"></a>
<h5 class="sect4">Qualifying a Relation</h5>
<p><a id="sthref178"></a><a id="sthref179"></a><a id="sthref180"></a><a id="sthref181"></a><a id="sthref182"></a>You can also use a QDR to qualify a relation (which is really a special kind of variable).</p>
<p><a id="sthref183"></a>Suppose the <code>region</code>.<code>district</code> relation is dimensioned by <code>district</code>. When you qualify <code>district</code> with the value <code>Seattle</code>, then the value of the expression is the value of the relation for <code>Seattle</code>. Because the QDR specifies one value of <code>district</code>, the expression has a single&ndash;cell result.</p>
<p>The definition of <code>region</code>.<code>district</code> is as follows.</p>
<pre>
DEFINE region.district RELATION region &lt;district&gt;
LD The region for each district
</pre>
<p>The following statement displays the value <code>WEST</code>.</p>
<pre>
SHOW region.district(district 'Seattle')
</pre></div>
<!-- class="sect4" -->
<div id="OLADM191" class="sect4"><a id="sthref184"></a>
<h5 class="sect4">Qualifying a Dimension</h5>
<p><a id="sthref185"></a><a id="sthref186"></a>You can use a QDR to qualify the dimension itself, which enables you to specify one dimension value in an expression. The following expression specifies one value of <code>district</code>, the one contained in the single-cell variable <code>mydistrict</code>.</p>
<pre>
district(district mydistrict)
</pre>
<p>For a concat dimension, you can use a QDR to qualify the dimension by specifying a value from a base dimension of the concat dimension. The following expression specifies one value of <code>reg.dist.ccdim</code>, a concat dimension that has <code>region</code> and <code>district</code> as its base dimensions. The costs variable is dimensioned by the <code>division</code> and <code>reg.dist.ccdim</code> dimensions.</p>
<pre>
SHOW reg.dist.ccdim(district 'Boston')
</pre>
<p>The preceding expression produces the following result.</p>
<pre>
&lt;DISTRICT: Boston&gt;
</pre></div>
<!-- class="sect4" -->
<div id="OLADM192" class="sect4"><a id="sthref187"></a>
<h5 class="sect4">Using Ampersand Substitution with QDRs</h5>
<p><a id="sthref188"></a><a id="sthref189"></a>An ampersand character (<code>&amp;</code>) at the beginning of an expression substitutes the value of the expression for the expression itself in a statement. When you use an ampersand with a QDR, you must enclose the whole expression in parentheses when you want the variable to be qualified before the substitution is made.</p>
<p>Suppose you have a text variable named <code>myvar</code> that is dimensioned by <code>reptype</code> and that contains the names of variables. Remember that it is <code>myvar</code> that is dimensioned by <code>reptype</code>, not the variables named by <code>myvar</code>. Therefore, you must use parentheses so that <code>myvar</code> is qualified and the resulting value is used in a REPORT statement.</p>
<pre>
REPORT &amp;(myvar(reptype 'actual'))
</pre>
<p>When you do not use parentheses and the variable that is specified in <code>myvar</code> is <code>sales</code>, then you get an error message that <code>sales</code> is not dimensioned by <code>reptype</code>.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABEAFCF"></a>
<div id="OLADM193" class="sect2">
<h3 class="sect2">Working with Empty Cells in Expressions</h3>
<p><a id="sthref190"></a><a id="sthref191"></a><a id="sthref192"></a><a id="sthref193"></a>At any given time, some cells of an analytic workspace data object may be empty. An empty cell occurs when a specific data value has not been assigned to it or when a data value cannot be calculated for the cell. The value of any empty cell in an object is <code>NA</code>. An <code>NA</code> value has no specific data type. Certain functions (for example, the aggregation functions) return NA when the requested information is not available or cannot be calculated. Similarly, an expression whose value cannot be calculated has <code>NA</code> as its value.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To support OLAP DML composite-dimensioned variables that correspond to relational fact tables with null facts, OLAP has a special NA value which is controlled by an <a id="sthref194"></a><a id="sthref195"></a>NA2 bit. For more information on how Oracle OLAP manages NA values controlled by NA2 bits, see <a href="dml_commands_1032.htm#BGECIBHD">"NA2 Bits and Null Tracking"</a>.</div>
<div id="OLADM194" class="sect3"><a id="sthref196"></a>
<h4 class="sect3">Specifying a Value of NA</h4>
<p>There are cases in which you might specify an operation for which no data is available. For example, there might be no appropriate value for a given cell in a variable, for the return value of a function, or for the value of an expression that includes an arithmetic operator. In these cases, an <code>NA</code> (Not Available) value is automatically supplied.</p>
<p>To set the values of a variable or relation to <code>NA</code>, you can use an assignment statement (SET), as shown in the following example.</p>
<pre>
sales = NA
</pre></div>
<!-- class="sect3" -->
<div id="OLADM195" class="sect3"><a id="sthref197"></a>
<h4 class="sect3">Controlling how NA values are treated</h4>
<p><a id="sthref198"></a>Several options and functions control how <code>NA</code> values are treated. For example:</p>
<ul>
<li>
<p><a id="sthref199"></a>The NA options listed in <a href="dml_options.htm#CHDICGHC">"Options by Category"</a>.</p>
</li>
<li>
<p>The NAFILL function returns the values of the source expression with any <code>NA</code> values appearing as the specified fill expression. You can include this function in an expression to control the format of its value.</p>
</li>
<li>
<p>System properties listed in <a href="dml_properties.htm#BABIGDDG">Chapter 4, "OLAP DML Properties"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1012610"></a>
<div id="OLADM196" class="sect2">
<h3 class="sect2">Numeric Expressions</h3>
<p><a id="ABC1529839"></a><a id="ABC1529841"></a>A numeric expression evaluates to any of the numeric data types. The data in a numeric expression can be any combination of the following:</p>
<ul>
<li>
<p>Numeric literals as discussed in <a href="#CJACDECG">"Numeric Data Types"</a>.</p>
</li>
<li>
<p>Numeric variables or formulas</p>
</li>
<li>
<p>Dimensions</p>
</li>
<li>
<p>Functions that yield numeric results</p>
</li>
<li>
<p>Date literals, variables, formulas, or functions</p>
</li>
</ul>
<p>In addition, you can join any of these expressions with the arithmetic operators for a more complex numeric expression. You use arithmetic operators in numeric expressions with numeric data, which returns a numeric result. You can also use some arithmetic operators in date expressions with a mix of date and numeric data, to retrieve either a date or numeric result.</p>
<p>Several options determine how Oracle OLAP handles numeric expressions.</p>
<div id="OLADM197" class="sect3"><a id="sthref200"></a>
<h4 class="sect3">Mixing Numeric Data Types</h4>
<p><a id="sthref201"></a>You can include any type of numeric data in the same numeric expression.</p>
<p><a id="sthref202"></a><a id="sthref203"></a><a id="sthref204"></a>The data type of the result is determined according to the following rules:</p>
<ul>
<li>
<p>When all the data in the expression is <code>INTEGER</code> or <code>SHORTINTEGER</code>, and the only operations are addition, subtraction, and multiplication, then the result is <code>INTEGER</code>.</p>
</li>
<li>
<p>When any of the data is <code>NUMBER</code>, then the result is <code>NUMBER</code>.</p>
</li>
<li>
<p>When any of the data is <code>DECIMAL</code> or <code>SHORTDECIMAL</code>, and no data is <code>NUMBER</code>, then the result is <code>DECIMAL</code>.</p>
</li>
<li>
<p>When you perform any division or exponentiation operations, then the result is <code>DECIMAL</code>.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="OLADM198" class="sect3"><a id="sthref205"></a>
<h4 class="sect3">Using Text Dimensions in Arithmetic Expressions</h4>
<p><a id="sthref206"></a><a id="sthref207"></a><a id="sthref208"></a>When you use a dimension with a data type of <code>TEXT</code> in a numeric expression, the dimension value is treated as a position (an <code>INTEGER</code>) and is used as a numeric. The position number is based on the default status list, not on current status.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM199" class="sect3"><a id="sthref209"></a>
<h4 class="sect3">Limitations of Floating Point Calculations</h4>
<p><a id="sthref210"></a><a id="sthref211"></a>All decimal data is converted to floating point format, both for storing and for calculations. In floating point format, a number is represented by means of a mantissa and an exponent. The mantissa and the exponent are stored as binary numbers. The mantissa is a binary fraction which, when multiplied by a number equal to 2 raised to the exponent, produces a number that equals or closely approximates the original decimal number.</p>
<p>Because there is not always an exact binary representation for a fractional decimal number, just as there is not an exact representation for the decimal value of 1/3, fractional parts of decimal numbers cannot always be represented exactly as binary fractions. Arithmetic operations on floating point numbers can result in further approximations, and the inaccuracy gradually increases with the number of operations. In addition to the approximation factor, the available number of significant digits affects the exactness of the result.</p>
<p>For all of these reasons, a result computed by the TOTAL, AVERAGE, or other aggregation functions on a <code>DECIMAL</code> or <code>SHORTDECIMAL</code> variable can differ in the least significant digits from a result you compute by hand. Because the <code>SHORTDECIMAL</code> data type provides a maximum of only seven significant digits, you see more of these differences with <code>SHORTDECIMAL</code> data. Therefore, you might want to use the <code>NUMBER</code> data type when accuracy is more important than computational speed, such as variables that contain currency amounts.</p>
<p>Another result of the fact that some fractional decimal numbers cannot be exactly represented by binary fractions is that for such numbers, the <code>DECIMAL</code> data type offers a different and closer approximation than the <code>SHORTDECIMAL</code> data type, because it has more significant digits. This can lead to problems when <code>SHORTDECIMAL</code> and <code>DECIMAL</code> data types are mixed in a comparison expression. For information on how to handle such comparisons, see <a href="#i1010516">"Boolean Expressions"</a> .</p>
</div>
<!-- class="sect3" -->
<div id="OLADM200" class="sect3"><a id="sthref212"></a>
<h4 class="sect3">Controlling Errors During Calculations</h4>
<p><a id="sthref213"></a><a id="sthref214"></a>You can control the following types of errors:</p>
<ul>
<li>
<p>Division by zero. When you divide an NA value by zero, then the result is NA; no error occurs. Dividing a non-NA value by zero normally produces an error. When a divide-by-zero error occurs when you are making a calculation on dimensioned data, then you can end up with partial results. When you use REPORT or an assignment statement (SET), values are reported or stored as they are calculated, so the division by zero halts the loop before it has gone through all the values.</p>
<p>When you want to suppress the divide-by-zero error, then you can change the value of the DIVIDEBYZERO option to <code>YES</code>. Consequently, the result of any division by zero is NA and no error occurs. This allows the calculation of the other values of a dimensioned expression to continue.</p>
</li>
<li>
<p>Root of negative numbers. It is normally an error to try to take the root of a negative number (which includes raising a number to a non-integer power). When you want to suppress the error message and allow the calculation of roots for non-negative values of the expression to continue, then set the ROOTOFNEGATIVE option to <code>YES</code>.</p>
</li>
<li>
<p>Overflow errors. The DECIMALOVERFLOW option works in a similar manner to DIVIDEBYZERO. It lets you control whether an error is generated when a calculation produces a decimal result larger than it can handle.<a id="sthref215"></a><a id="sthref216"></a></p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1010546"></a>
<div id="OLADM201" class="sect2">
<h3 class="sect2">Text Expressions</h3>
<p><a id="sthref217"></a><a id="sthref218"></a><a id="sthref219"></a><a id="sthref220"></a>A text expression evaluates to data with the <code>TEXT,</code> <code>NTEXT,</code> or <code>ID</code> data type. Text expressions can be any combination of the following:</p>
<ul>
<li>
<p>Text literals. For example, <code>'Boston'</code> or <code>'Current</code> <code>Sales</code> <code>Report'</code></p>
</li>
<li>
<p>Text dimensions. For example, <code>district</code> or <code>month</code></p>
</li>
<li>
<p>Text variables or formulas. For example, <code>product.name</code></p>
</li>
<li>
<p>Functions that yield text results. For example, <code>JOINLINES('Product:</code> ' <code>product.name)</code></p>
</li>
</ul>
<div id="OLADM202" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref221"></a>
<h4 class="sect3">Language of Text Expressions</h4>
<p>Oracle OLAP supports text expressions in all languages that you can identify using the <a href="dml_options068.htm#CHDCAFGD">NLS_LANGUAGE</a> option. It also supports multi-language programs and applications using a language dimension.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a href="dml_properties008.htm#CIHEFCBF">"Working with Language Dimension Status"</a></div>
</div>
<!-- class="sect3" -->
<div id="OLADM203" class="sect3"><a id="sthref222"></a>
<h4 class="sect3">Working with DATETIME Values in Text Expressions</h4>
<p><a id="sthref223"></a><a id="sthref224"></a>When you use a <code>DATETIME</code> value where a text value (<code>TEXT,</code> <code>NTEXT,</code> or <code>ID</code>) is expected, or when you store a <code>DATETIME</code> value in a text variable, then the <code>DATETIME</code> value is automatically converted to a text value.</p>
<p>The format of a <code>DATETIME</code> value is controlled by the NLS_DATE_FORMAT option. Once a <code>DATETIME</code> value is stored in a text variable, the NLS_DATE_FORMAT setting has no impact.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM204" class="sect3"><a id="sthref225"></a>
<h4 class="sect3">Working with NTEXT Data</h4>
<p><code>TEXT</code> and <code>NTEXT</code> data are interchangeable in most cases. However, implicit conversion can occur, such as when an <code>NTEXT</code> value is assigned to a <code>TEXT</code> variable. When <code>TEXT</code> is converted to <code>NTEXT</code>, no data loss occurs because the UTF-8 character encoding of the <code>NTEXT</code> data type encompasses most other data types. However, when <code>NTEXT</code> is converted to <code>TEXT</code>, data loss occurs when <code>NTEXT</code> characters are not represented in the workspace character set.</p>
<p>When <code>TEXT</code> and <code>NTEXT</code> values are used together, for example in a call to the <code>JOINCHARS</code> function, the <code>TEXT</code> value is converted to <code>NTEXT</code> and an <code>NTEXT</code> value is returned.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABFFDGC"></a>
<div id="OLADM205" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Datetime and Interval Expressions</h3>
<p>As discussed in <a href="#BABJGJIH">"Datetime and Interval Data Types"</a>, the OLAP DML supports the same datetime and interval data types that are supported by SQL. This section discusses:</p>
<ul>
<li>
<p><a href="#i1047500">"Datetime Expressions"</a></p>
</li>
<li>
<p><a href="#i1033523">"Interval Expressions"</a></p>
</li>
<li>
<p><a href="#BABIIHBC">"Datetime/Interval Arithmetic"</a></p>
</li>
</ul>
<a id="i1047500"></a>
<div id="OLADM206" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Datetime Expressions <a id="sthref226"></a><a id="sthref227"></a><a id="sthref228"></a><a id="sthref229"></a></h4>
<p>A datetime expression yields a value of a datetime data type. A datetime expression has the following syntax.</p>
<p class="synopsis"><span class="italic">datetime_value_expr</span> AT LOCAL |</p>
<p class="synopsis">TIME ZONE { ' [ + | - ] hh:mm' | DBTIMEZONE | '<span class="italic">time_zone_name</span>' | <span class="italic">expr</span> }</p>
<p>A <code><span class="codeinlineitalic">datetime_value_expr</span></code> can be a datetime value or a compound expression that yields a datetime value. Datetimes and intervals can be combined according to the rules defined in <a href="#BABFDAEI">Table 2-7, "Datetime Fields and Values"</a>. The three combinations that yield datetime values are valid in a datetime expression.</p>
<p>If you specify <code>AT</code> <code>LOCAL</code>, Oracle uses the current session time zone.</p>
<p>The settings for <code>AT</code> <code>TIME</code> <code>ZONE</code> are interpreted as follows:</p>
<ul>
<li>
<p>The string <code>'(+|-)HH:MM'</code> specifies a time zone as an offset from UTC.</p>
</li>
<li>
<p><code>DBTIMEZONE</code>: Oracle uses the database time zone established (explicitly or by default) during database creation.</p>
</li>
<li>
<p><code>SESSIONTIMEZONE</code>: Oracle uses the session time zone established by default or in the most recent <code>ALTER</code> <code>SESSION</code> statement.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">time_zone_name</span></code>: Oracle returns the <code><span class="codeinlineitalic">datetime_value_expr</span></code> in the time zone indicated by <code><span class="codeinlineitalic">time_zone_name</span></code>. For a listing of valid time zone names, query the <code>V$TIMEZONE_NAMES</code> dynamic performance view.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Timezone region names are needed by the daylight savings feature. The region names are stored in the time zone files under <code>oracore/zoneinfo</code>. The server always uses the large time zone file corresponding to the version number recorded in <code>sys.props$</code>.</div>
</li>
</ul>
<ul>
<li>
<p><code><span class="codeinlineitalic">expr</span></code>: If <code><span class="codeinlineitalic">expr</span></code> returns a character string with a valid time zone format, Oracle returns the input in that time zone. Otherwise, Oracle returns an error.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1033523"></a>
<div id="OLADM207" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Interval Expressions <a id="sthref230"></a><a id="sthref231"></a></h4>
<p>An interval expression yields a value of <code>DSNTERVAL</code> or <code>MYINTERVAL</code> where the expression has the following syntax.</p>
<p class="synopsis"><span class="italic">interval_value_expr</span> DAY [(<span class="italic">leading_field_precision</span>)] TO</p>
<p class="synopsis">SECOND [(<span class="italic">fractional_second_precision</span>)]| YEAR [(l<span class="italic">eading_field_precision</span>)] TO MONTH</p>
<p>The <code><span class="codeinlineitalic">interval_value_expr</span></code> can be a <code>DSNTERVAL</code> or <code>MYINTERVAL</code> value or a compound expression that yields a <code>DSNTERVAL</code> or <code>MYINTERVAL</code> value. Datetimes and intervals can be combined according to the rules defined in <a href="#BABFDAEI">Table 2-7, "Datetime Fields and Values"</a> . The six combinations that yield interval values are valid in an interval expression.</p>
<p>Both <code><span class="codeinlineitalic">leading_field_precision</span></code> and <code><span class="codeinlineitalic">fractional_second_precision</span></code> can be any integer from 0 to 9. If you omit the <code><span class="codeinlineitalic">leading_field_precision</span></code> for either <code>DAY</code> or <code>YEAR</code>, then Oracle Database uses the default value of 2. If you omit the <code><span class="codeinlineitalic">fractional_second_precision</span></code> for second, then the database uses the default value of 6. If the value returned by a query contains more digits that the default precision, then Oracle Database returns an error. Therefore, it is good practice to specify a precision that you know is at least as large as any value returned by the query.</p>
</div>
<!-- class="sect3" -->
<a id="BABIIHBC"></a>
<div id="OLADM208" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Datetime/Interval Arithmetic <a id="sthref232"></a><a id="sthref233"></a></h4>
<p><a id="sthref234"></a><a id="sthref235"></a>You can perform several arithmetic operations on date (<code>DATETIME</code>), timestamp (<code>TIMESTAMP</code>, <code>TIMESTAMP_TZ</code>, and <code>TIMESTAMP_LTZ</code>) and interval (<code>DSINTERVAL</code> and <code>YMINTERVAL</code>) data. Oracle calculates the results based on the following rules:</p>
<ul>
<li>
<p>You can use <code>NUMBER</code> constants in arithmetic operations on date and timestamp values, but not interval values. Oracle internally converts timestamp values to date values and interprets <code>NUMBER</code> constants in arithmetic datetime and interval expressions as numbers of days. For example, <code>SYSDATE</code> + 1 is tomorrow. <code>SYSDATE</code> - 7 is one week ago. <code>SYSDATE</code> + (10/1440) is ten minutes from now. Subtracting the <code>hire_date</code> column of the sample table <code>employees</code> from <code>SYSDATE</code> returns the number of days since each employee was hired. You cannot multiply or divide date or timestamp values.</p>
</li>
<li>
<p>Oracle implicitly converts <code>BINARY_FLOAT</code> and <code>BINARY_DOUBLE</code> operands to <code>NUMBER</code>.</p>
</li>
<li>
<p>Each <code>DATETIME</code> value contains a time component, and the result of many date operations include a fraction. This fraction means a portion of one day. For example, 1.5 days is 36 hours. These fractions are also returned by Oracle built-in functions for common operations on <code>DATETIME</code> data. For example, the <code>MONTHS_BETWEEN</code> function returns the number of months between two dates. The fractional portion of the result represents that portion of a 31-day month.</p>
</li>
<li>
<p>If one operand is a <code>DATETIME</code> value or a numeric value (neither of which contains time zone or fractional seconds components), then:</p>
<ul>
<li>
<p>Oracle implicitly converts the other operand to <code>DATETIME</code> data. (The exception is multiplication of a numeric value times an interval, which returns an interval.)</p>
</li>
<li>
<p>If the other operand has a time zone value, then Oracle uses the session time zone in the returned value.</p>
</li>
<li>
<p>If the other operand has a fractional seconds value, then the fractional seconds value is lost.</p>
</li>
</ul>
</li>
<li>
<p>When you pass a timestamp, interval, or numeric value to a built-in function that was designed only for the <code>DATETIME</code> data type, Oracle implicitly converts the non-<code>DATETIME</code> value to a <code>DATETIME</code> value.</p>
</li>
<li>
<p>When interval calculations return a datetime value, the result must be an actual datetime value or the database returns an error.</p>
</li>
<li>
<p>Oracle performs all timestamp arithmetic in UTC time. For <code>TIMESTAMP_LTZ</code>, Oracle converts the datetime value from the database time zone to UTC and converts back to the database time zone after performing the arithmetic. For <code>TIMESTAMP_TZ</code>, the datetime value is always in UTC, so no conversion is necessary.</p>
</li>
</ul>
<p><a href="#BABHHIDC">Table 2-13, "Matrix of Datetime Arithmetic"</a> is a matrix of datetime arithmetic operations. Dashes represent operations that are not supported.</p>
<div id="OLADM1090" class="tblhruleformal">
<p class="titleintable"><a id="sthref236"></a><a id="BABHHIDC"></a>Table 2-13 Matrix of Datetime Arithmetic</p>
<table class="cellalignment3100" title="Matrix of Datetime Arithmetic" summary="This table is a matrix that shows the result of combining each two datetime values (DATE, TIMESTAMP, INTERVAL, or other numeric value) using addition, subtraction, multiplication, and division." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t40">Operand &amp; Operator</th>
<th class="cellalignment3099" id="r1c2-t40">DATETIME</th>
<th class="cellalignment3099" id="r1c3-t40">TIMESTAMP</th>
<th class="cellalignment3099" id="r1c4-t40">INTERVAL</th>
<th class="cellalignment3099" id="r1c5-t40">Numeric</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">DATETIME</span></p>
</td>
<td class="cellalignment3095" headers="r2c1-t40 r1c2-t40">
<p>&mdash;</p>
</td>
<td class="cellalignment3095" headers="r2c1-t40 r1c3-t40">
<p>&mdash;</p>
</td>
<td class="cellalignment3095" headers="r2c1-t40 r1c4-t40">
<p>&mdash;</p>
</td>
<td class="cellalignment3095" headers="r2c1-t40 r1c5-t40">
<p>&mdash;</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">+</span></p>
</td>
<td class="cellalignment3095" headers="r3c1-t40 r1c2-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r3c1-t40 r1c3-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r3c1-t40 r1c4-t40">
<p><code>DATETIME</code></p>
</td>
<td class="cellalignment3095" headers="r3c1-t40 r1c5-t40">
<p><code>DATETIME</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">-</span></p>
</td>
<td class="cellalignment3095" headers="r4c1-t40 r1c2-t40">
<p><code>DATETIME</code></p>
</td>
<td class="cellalignment3095" headers="r4c1-t40 r1c3-t40">
<p><code>DATETIME</code></p>
</td>
<td class="cellalignment3095" headers="r4c1-t40 r1c4-t40">
<p><code>DATETIME</code></p>
</td>
<td class="cellalignment3095" headers="r4c1-t40 r1c5-t40">
<p><code>DATETIME</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">*</span></p>
</td>
<td class="cellalignment3095" headers="r5c1-t40 r1c2-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r5c1-t40 r1c3-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r5c1-t40 r1c4-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r5c1-t40 r1c5-t40">
<p><code>&mdash;</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">/</span></p>
</td>
<td class="cellalignment3095" headers="r6c1-t40 r1c2-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r6c1-t40 r1c3-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r6c1-t40 r1c4-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r6c1-t40 r1c5-t40">
<p><code>&mdash;</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">TIMESTAMP</span></p>
</td>
<td class="cellalignment3095" headers="r7c1-t40 r1c2-t40">
<p>&mdash;</p>
</td>
<td class="cellalignment3095" headers="r7c1-t40 r1c3-t40">
<p>&mdash;</p>
</td>
<td class="cellalignment3095" headers="r7c1-t40 r1c4-t40">
<p>&mdash;</p>
</td>
<td class="cellalignment3095" headers="r7c1-t40 r1c5-t40">
<p>&mdash;</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r8c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">+</span></p>
</td>
<td class="cellalignment3095" headers="r8c1-t40 r1c2-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r8c1-t40 r1c3-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r8c1-t40 r1c4-t40">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment3095" headers="r8c1-t40 r1c5-t40">
<p><code>&mdash;</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r9c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">-</span></p>
</td>
<td class="cellalignment3095" headers="r9c1-t40 r1c2-t40">
<p><code>INTERVAL</code></p>
</td>
<td class="cellalignment3095" headers="r9c1-t40 r1c3-t40">
<p><code>INTERVAL</code></p>
</td>
<td class="cellalignment3095" headers="r9c1-t40 r1c4-t40">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment3095" headers="r9c1-t40 r1c5-t40">
<p><code>TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r10c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">*</span></p>
</td>
<td class="cellalignment3095" headers="r10c1-t40 r1c2-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r10c1-t40 r1c3-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r10c1-t40 r1c4-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r10c1-t40 r1c5-t40">
<p><code>&mdash;</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r11c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">/</span></p>
</td>
<td class="cellalignment3095" headers="r11c1-t40 r1c2-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r11c1-t40 r1c3-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r11c1-t40 r1c4-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r11c1-t40 r1c5-t40">
<p><code>&mdash;</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r12c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">INTERVAL</span></p>
</td>
<td class="cellalignment3095" headers="r12c1-t40 r1c2-t40">
<p>&mdash;</p>
</td>
<td class="cellalignment3095" headers="r12c1-t40 r1c3-t40">
<p>&mdash;</p>
</td>
<td class="cellalignment3095" headers="r12c1-t40 r1c4-t40">
<p>&mdash;</p>
</td>
<td class="cellalignment3095" headers="r12c1-t40 r1c5-t40">
<p>&mdash;</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r13c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">+</span></p>
</td>
<td class="cellalignment3095" headers="r13c1-t40 r1c2-t40">
<p><code>DATETIME</code></p>
</td>
<td class="cellalignment3095" headers="r13c1-t40 r1c3-t40">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment3095" headers="r13c1-t40 r1c4-t40">
<p><code>INTERVAL</code></p>
</td>
<td class="cellalignment3095" headers="r13c1-t40 r1c5-t40">
<p><code>&mdash;</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r14c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">-</span></p>
</td>
<td class="cellalignment3095" headers="r14c1-t40 r1c2-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r14c1-t40 r1c3-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r14c1-t40 r1c4-t40">
<p><code>INTERVAL</code></p>
</td>
<td class="cellalignment3095" headers="r14c1-t40 r1c5-t40">
<p><code>&mdash;</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r15c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">*</span></p>
</td>
<td class="cellalignment3095" headers="r15c1-t40 r1c2-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r15c1-t40 r1c3-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r15c1-t40 r1c4-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r15c1-t40 r1c5-t40">
<p><code>INTERVAL</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r16c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">/</span></p>
</td>
<td class="cellalignment3095" headers="r16c1-t40 r1c2-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r16c1-t40 r1c3-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r16c1-t40 r1c4-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r16c1-t40 r1c5-t40">
<p><code>INTERVAL</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r17c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">Numeric</span></p>
</td>
<td class="cellalignment3095" headers="r17c1-t40 r1c2-t40">
<p>&mdash;</p>
</td>
<td class="cellalignment3095" headers="r17c1-t40 r1c3-t40">
<p>&mdash;</p>
</td>
<td class="cellalignment3095" headers="r17c1-t40 r1c4-t40">
<p>&mdash;</p>
</td>
<td class="cellalignment3095" headers="r17c1-t40 r1c5-t40">
<p>&mdash;</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r18c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">+</span></p>
</td>
<td class="cellalignment3095" headers="r18c1-t40 r1c2-t40">
<p><code>DATETIME</code></p>
</td>
<td class="cellalignment3095" headers="r18c1-t40 r1c3-t40">
<p><code>DATETIME</code></p>
</td>
<td class="cellalignment3095" headers="r18c1-t40 r1c4-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r18c1-t40 r1c5-t40">
<p><code>NA</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r19c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">-</span></p>
</td>
<td class="cellalignment3095" headers="r19c1-t40 r1c2-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r19c1-t40 r1c3-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r19c1-t40 r1c4-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r19c1-t40 r1c5-t40">
<p><code>NA</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r20c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">*</span></p>
</td>
<td class="cellalignment3095" headers="r20c1-t40 r1c2-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r20c1-t40 r1c3-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r20c1-t40 r1c4-t40">
<p><code>INTERVAL</code></p>
</td>
<td class="cellalignment3095" headers="r20c1-t40 r1c5-t40">
<p><code>NA</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r21c1-t40" headers="r1c1-t40">
<p><span class="syntaxinlinebold">/</span></p>
</td>
<td class="cellalignment3095" headers="r21c1-t40 r1c2-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r21c1-t40 r1c3-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r21c1-t40 r1c4-t40">
<p><code>&mdash;</code></p>
</td>
<td class="cellalignment3095" headers="r21c1-t40 r1c5-t40">
<p><code>NA</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p><a id="OLADM1091"></a><span class="subhead3">Examples&nbsp;</span>You can add an interval value expression to a start time. Consider the sample table <code>oe.orders</code> with a column <code>order_date</code>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABBIEFG"></a>
<div id="OLADM209" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Date-only Expressions</h3>
<p>A date-only expression is an expression that evaluates to the OLAP DML <code>DATE</code> data type as discussed in <a href="#CJAIFGIC">"Date-only Data Type"</a>. The expression might be a function that returns a date-only value, a date-only literal, or a more complex expression.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a href="#CJAHHBAH">"Date-only Input Values"</a>, <a href="#BABJCEEG">"Date-only Dimension Values"</a>, and <a href="#BABEBJJA">"DATE-only Variable Display Styles"</a>.</div>
<p class="subhead2"><a id="OLADM1092"></a>Calculating DATE-only Values</p>
<p>You can add numbers to a <code>DATE</code> value, or subtract numbers from them. Whole numbers are calculated as days, and decimal values are calculated as fractions of a day. For example, <code>SYSDATE+1.5</code> adds 1 day and 12 hours to the current date and time. You cannot divide or multiply <code>DATE</code> values, and you cannot subtract them from numbers. For example, <code>1-SYSDATE</code> and <code>1*SYSDATE</code> return errors.</p>
<p class="subhead2"><a id="OLADM1093"></a>Using DATE-only Values in Arithmetic Expressions</p>
<p><a id="sthref237"></a><a id="sthref238"></a><a id="sthref239"></a>When you use DATE values in arithmetic expressions, the result can be numeric or it can be a date. The legal operations for dates and the data type of the result are outlined in <a href="#BABDBDEH">Table 2-14, "Legal Operations for DATE Values"</a>.</p>
<div id="OLADM1094" class="tblformal">
<p class="titleintable"><a id="sthref240"></a><a id="BABDBDEH"></a>Table 2-14 Legal Operations for DATE Values</p>
<table class="cellalignment3098" title="Legal Operations for DATE Values" summary="This table outlines the legal operations for dates and the data type of the results." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t42">Operation</th>
<th class="cellalignment3099" id="r1c2-t42">Result</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t42" headers="r1c1-t42">
<p>Add or subtract a number from a date</p>
</td>
<td class="cellalignment3095" headers="r2c1-t42 r1c2-t42">
<p>Future or prior date</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t42" headers="r1c1-t42">
<p>Subtract a date from a date</p>
</td>
<td class="cellalignment3095" headers="r3c1-t42 r1c2-t42">
<p>The number of days between the dates.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t42" headers="r1c1-t42">
<p>Add or subtract a number from a time period.</p>
</td>
<td class="cellalignment3095" headers="r4c1-t42 r1c2-t42">
<p>The time period at the appropriate interval in the future or the past, similar to the return values of the LEAD or LAG function. The result is NA when there is no dimension value that corresponds to the result. The calculation is made based on the positions of the values in the default status list of the dimension.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="i1010516"></a>
<div id="OLADM210" class="sect2">
<h3 class="sect2">Boolean Expressions</h3>
<p><a id="ABC1521885"></a><a id="ABC1521888"></a>A Boolean expression is a logical statement that is either <code>TRUE</code> or <code>FALSE</code>. Boolean expressions can compare data of any type if both parts of the expression have the same basic data type. You can test data to see if it is equal to, greater than, or less than other data.</p>
<p>A Boolean expression can consist of Boolean data, such as the following:</p>
<ul>
<li>
<p><code>BOOLEAN</code> values (<code>YES</code> and <code>NO</code>, and their synonyms, <code>ON</code> and <code>OFF</code>, and <code>TRUE</code> and <code>FALSE</code>)</p>
</li>
<li>
<p><code>BOOLEAN</code> variables or formulas</p>
</li>
<li>
<p>Functions that yield <code>BOOLEAN</code> results</p>
</li>
<li>
<p><code>BOOLEAN</code> values calculated by comparison operators</p>
</li>
</ul>
<p>For example, assume that your code contains the following Boolean expression.</p>
<pre>
   actual GT 20000
</pre>
<p>When processing this expression, Oracle OLAP compares each value of the variable <code>actual</code> to the constant 20,000. When the value is greater than 20,000, then the statement is <code>TRUE</code>; when the value is less than or equal to 20,000, then the statement is <code>FALSE</code>.</p>
<p>When you are supplying a Boolean value, you can type either <code>YES</code>, <code>ON</code>, or <code>TRUE</code> for a true value, and <code>NO</code>, <code>OFF</code>, or <code>FALSE</code> for a false value. When the result of a Boolean calculation is produced, the defaults are <code>YES</code> and <code>NO</code> in the language specified by the NLS_LANGUAGE option. The read-only YESSPELL and NOSPELL options record the <code>YES</code> and <code>NO</code> values.</p>
<p><a href="#BABDJJJB">Table 2-11, "Comparison and Logical Operators"</a> shows the comparison and logical operators. Each operator has a priority that determines its order of evaluation. Operators of equal priority are evaluated left to right, unless parentheses change the order of evaluation. However, the evaluation is halted when the truth value is decided. For example, in the following expression, the TOTAL function is never executed because the first phrase determines that the whole expression is true.</p>
<pre>
      yes EQ yes OR TOTAL(sales) GT 20000
</pre>
<div id="OLADM211" class="sect3"><a id="sthref241"></a>
<h4 class="sect3">Creating Boolean Expressions</h4>
<p>A Boolean expression is a three-part clause that consists of two items to be compared, separated by a comparison operator. You can create a more complex Boolean expression by joining any of these three-part expressions with the <code>AND</code> and <code>OR</code> logical operators. Each expression that is connected by <code>AND</code> or <code>OR</code> must be a complete Boolean expression in itself, even when it means specifying the same variable several times.</p>
<p>For example, the following expression is not valid because the second part is incomplete.</p>
<pre>
   sales GT 50000 AND LE 20000
</pre>
<p>In the next expression, both parts are complete so the expression is valid.</p>
<pre>
   sales GT 50000 AND sales LE 20000
</pre>
<p>When you combine several Boolean expressions, the whole expression must be valid even when the truth value can be determined by the first part of the expression. The whole expression is compiled before it is evaluated, so when there are undefined variables in the second part of a Boolean expression, you get an error.</p>
<p>Use the <code>NOT</code> operator, with parentheses around the expression, to reverse the sense of a Boolean expression.</p>
<p>The following two expressions are equivalent.</p>
<pre>
   district NE 'BOSTON'
   NOT(district EQ 'BOSTON')
</pre>
<div id="OLADM1095" class="example">
<p class="titleinexample"><a id="sthref242"></a>Example 2-2 Using Boolean Comparisons</p>
<p>The following example shows a report that displays whether sales in Boston for each product were greater than a literal amount.</p>
<pre>
LIMIT time TO FIRST 2
LIMIT geography TO 'BOSTON'
REPORT DOWN product ACROSS time: f.sales GT 7500
</pre>
<p>This <code>REPORT</code> statement returns the following data.</p>
<pre>
CHANNEL: TOTALCHANNEL
GEOGRAPHY: BOSTON
               ---F.SALES GT 7500---
               --------TIME---------
PRODUCT          Jan02      Feb02
-------------- ---------- ----------
Portaudio              NO         NO
Audiocomp             YES        YES
TV                     NO         NO
VCR                    NO         NO
Camcorder             YES        YES
Audiotape              NO         NO
Videotape             YES        YES
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<div id="OLADM212" class="sect3"><a id="sthref243"></a>
<h4 class="sect3">Comparing NA Values in Boolean Expressions</h4>
<p><a id="sthref244"></a><a id="sthref245"></a>When<a id="sthref246"></a><a id="sthref247"></a> the data you are comparing in a Boolean expression involves an NA value, a <code>YES</code> or <code>NO</code> result is returned when that makes sense. For example, when you test whether an NA value equals a non-NA value, then the result is <code>NO</code>. However, when the result would be misleading, then <code>NA</code> is returned. For example, testing whether an NA value is less than or greater than a non&ndash;NA value gives a result of <code>NA</code>.</p>
<p><a href="#g1023057">Table 2-15, "Boolean Expressions with NA Values that Result in non-NA Values"</a> shows the results of Boolean expressions involving NA values, which yield non-NA values.</p>
<div id="OLADM1096" class="tblformal">
<p class="titleintable"><a id="sthref248"></a><a id="g1023057"></a>Table 2-15 Boolean Expressions with NA Values that Result in non-NA Values</p>
<table class="cellalignment3098" title="Boolean Expressions with NA Values that Result in non-NA Values" summary="This table shows the results of Boolean expressions involving NA values, which yield non-NA values." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t43">Expressions</th>
<th class="cellalignment3099" id="r1c2-t43">Result</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t43" headers="r1c1-t43">
<p><code>NA EQ NA</code></p>
</td>
<td class="cellalignment3095" headers="r2c1-t43 r1c2-t43">
<p><code>YES</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t43" headers="r1c1-t43">
<p><code>NA NE NA</code></p>
</td>
<td class="cellalignment3095" headers="r3c1-t43 r1c2-t43">
<p><code>NO</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t43" headers="r1c1-t43">
<p><code>NA EQ</code> non-<code>NA</code></p>
</td>
<td class="cellalignment3095" headers="r4c1-t43 r1c2-t43">
<p><code>NO</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t43" headers="r1c1-t43">
<p><code>NA NE n</code>on-<code>NA</code></p>
</td>
<td class="cellalignment3095" headers="r5c1-t43 r1c2-t43">
<p><code>YES</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t43" headers="r1c1-t43">
<p><code>NA AND NO</code></p>
</td>
<td class="cellalignment3095" headers="r6c1-t43 r1c2-t43">
<p><code>NO</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t43" headers="r1c1-t43">
<p><code>NA OR YES</code></p>
</td>
<td class="cellalignment3095" headers="r7c1-t43 r1c2-t43">
<p><code>YES</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<div id="OLADM213" class="sect3"><a id="sthref249"></a>
<h4 class="sect3">Controlling Errors When Comparing Numeric Data</h4>
<p><a id="sthref250"></a><a id="sthref251"></a>When you get unexpected results when comparing numeric data, then there are several possible causes to consider:</p>
<ul>
<li>
<p>A number you are comparing might have a small decimal part that does not show in output because of the setting of the DECIMALS option.</p>
</li>
<li>
<p>You are comparing two floating point numbers and at least one number is the result of an arithmetic operation.</p>
</li>
<li>
<p>You have mixed <code>SHORTDECIMAL</code> and <code>DECIMAL</code> data types in a comparison.</p>
</li>
</ul>
<p>Oracle recommends that you use the ABS and ROUND functions to do approximate tests for equality and avoid all three causes of unexpected comparison failure. When using ABS or ROUND, you can adjust the absolute difference or the rounding factor to values you feel are appropriate for your application. When speed of calculation is important, then you probably want to use the ABS rather than the ROUND function.</p>
<div id="OLADM214" class="sect4"><a id="sthref252"></a>
<h5 class="sect4">Controlling Errors Due to Numerical Precision</h5>
<p>Suppose <code>expense</code> is a decimal variable whose value is set by a calculation. When the result of the calculation is 100.000001 and the number of decimal places is two, then the value appears in output as 100.00. However, the output of the following statement returns <code>NO</code>.</p>
<pre>
SHOW expense EQ 100.00
</pre>
<p>You can use the <code>ABS</code> or the <code>ROUND</code> function to ignore these slight differences when making comparisons.</p>
</div>
<!-- class="sect4" -->
<div id="OLADM215" class="sect4"><a id="sthref253"></a>
<h5 class="sect4">Controlling Errors When Comparing Floating Point Numbers</h5>
<p><a id="sthref254"></a><a id="sthref255"></a>A standard restriction on the use of floating point numbers in a computer language is that you cannot expect exact equality in a comparison of two floating point numbers when either number is the result of an arithmetic operation. For example, on some systems, the following statement returns a <code>NO</code> instead of the expected <code>YES</code>.</p>
<pre>
SHOW .1 + .2 EQ .3
</pre>
<p>When you deal with decimal data, do not code direct comparisons. Instead, use the ABS or the ROUND function to allow a tolerance for approximate equality. For example, either of the following two statements produce the desired <code>YES</code>.</p>
<pre>
SHOW ABS((.1 + .2) - .3) LT .00001
SHOW ROUND(.1 + .2) EQ ROUND(.3, .00001)
</pre></div>
<!-- class="sect4" -->
<div id="OLADM216" class="sect4"><a id="sthref256"></a>
<h5 class="sect4">Controlling Errors When Comparing Different Numeric Data Types</h5>
<p><a id="sthref257"></a><a id="sthref258"></a><a id="sthref259"></a>You cannot expect exact equality between <code>SHORTDECIMAL</code> and <code>DECIMAL</code> or <code>NUMBER</code> representations of a decimal number with a fractional component, because the <code>DECIMAL</code> and <code>NUMBER</code> data types have more significant digits to approximate fractional components that cannot be represented exactly.</p>
<p>Suppose you define a variable with a <code>SHORTDECIMAL</code> data type and set it to a fractional decimal number, then compare the <code>SHORTDECIMAL</code> number to the fractional decimal number, as shown here.</p>
<pre>
DEFINE sdvar SHORTDECIMAL
sdvar = 1.3
SHOW sdvar EQ 1.3
</pre>
<p>The comparison is likely to return <code>NO</code>. What happens in this situation is that the literal is automatically typed as <code>DECIMAL</code> and converts the <code>SHORTDECIMAL</code> variable <code>sdvar</code> to <code>DECIMAL</code>, which extends the decimal places with zeros. A bit-by-bit comparison is then performed, which fails. The same comparison using a variable with a <code>DECIMAL</code> or a <code>NUMBER</code> data type is likely to return <code>YES</code>.</p>
<p>There are several ways to avoid this type of comparison failure:</p>
<ul>
<li>
<p>Do not mix the <code>SHORTDECIMAL</code> with <code>DECIMAL</code> or <code>NUMBER</code> types in comparisons. To avoid mixing these two data types, generally avoid defining variables with decimal components as <code>SHORTDECIMAL</code>.</p>
</li>
<li>
<p>Use the <code>ABS</code> or <code>ROUND</code> function to allow for approximate equality. The following statements both produce <code>YES</code>.</p>
<pre>
SHOW ABS(sdvar - 1.3) LT .00001
SHOW ROUND(sdvar, .00001) EQ ROUND(.3, .00001)
</pre></li>
</ul>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div id="OLADM217" class="sect3"><a id="sthref260"></a>
<h4 class="sect3">Comparing Dimension Values</h4>
<p><a id="sthref261"></a><a id="sthref262"></a>Values are not compared in the <a id="sthref263"></a>same dimension based on their textual values. Instead, Oracle OLAP compares the positions of the values in the default status of the dimension. This enables you to specify statements like the following statement.</p>
<pre>
REPORT district LT 'Seattle'
</pre>
<p>Statements are interpreted such as these using the following process:</p>
<ol>
<li>
<p>The text literal <code>'Seattle'</code> is converted to its position in the <code>district</code> default status list of the dimension.</p>
</li>
<li>
<p>That position is compared to the position of all other values in the <code>district</code> dimension.</p>
</li>
<li>
<p>As shown by the following report, the value <code>YES</code> is returned for districts that are positioned before <code>Seattle</code> in the <code>district</code> default status list of the dimension, and <code>NO</code> for <code>Seattle</code> itself.</p>
<pre>
REPORT 22 WIDTH district LT 'Seattle'

District       DISTRICT LT 'Seattle'
-------------- ----------------------
Boston                            YES
Atlanta                           YES
Chicago                           YES
Dallas                            YES
Denver                            YES
Seattle                            NO
</pre></li>
</ol>
<p>A more complex example assigns increasing values to the variable <code>quota</code> based on initial values assigned to the first six months. The comparison depends on the position of the values in the <code>month</code> dimension. Because it is a time dimension, the values are in chronological order.</p>
<pre>
quota = IF month LE 'Jun02' THEN 100 ELSE LAG(quota, 1, month)* 1.15
</pre>
<p>However, when you compare values from different dimensions, such as in the expression <code>region</code> <code>lt</code> <code>district</code>, then the only common denominator is <code>TEXT</code>, and text values are compared, not dimension positions.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM218" class="sect3"><a id="sthref264"></a>
<h4 class="sect3">Comparing Dates</h4>
<p><a id="sthref265"></a><a id="sthref266"></a>You can compare two dates with <a id="sthref267"></a>any of the Boolean comparison operators. For dates, "less" means before and "greater" means after. The expressions being compared can include any of the date calculations discussed in <a href="#BABDJJJB">Table 2-11, "Comparison and Logical Operators"</a>. For example, in a billing application, you can determine whether today is 60 or more days after the billing date to send out a more strongly worded bill.</p>
<pre>
bill.date + 60 LE SYSDATE
</pre>
<p>Dates also have a numeric value. You can use the TO_NUMBER and TO_DATE functions to change a value from a <code>DATE</code> to an I<code>NTEGER</code> or an <code>INTEGER</code> to a <code>DATE</code> for comparison.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM219" class="sect3"><a id="sthref268"></a>
<h4 class="sect3">Comparing Text Data</h4>
<p><a id="sthref269"></a>When <a id="sthref270"></a>you compare text data, you must specify the text exactly as it appears, with punctuation, spaces, and uppercase or lowercase letters. A text literal must be enclosed in single quotes. For example, this expression tests whether the first letter of each employee's name is greater than the letter "M."</p>
<pre>
EXTCHARS(employee.name, 1, 1) GT 'M'
</pre>
<p>You can compare <code>TEXT</code> and <code>ID</code> values, but they can only be equal when they are the same length. When you test whether a text value is greater or less than another, the ordering is based on the setting of the NLS_SORT option.</p>
<p>You can compare numbers with text by first converting the number to text. Ordering is based on the values of the characters. This can produce unexpected results because the text is evaluated from left to right. For example, the text literal <code>1234</code> is greater than <code>100,999.00</code> because <code>2</code>, the second character in the first text literal, is greater than <code>0</code>, the second character in the second text literal.</p>
<p>Suppose <code>name.label</code> is an <code>ID</code> variable whose value is <code>3-Person</code> and <code>name.desc</code> is a <code>TEXT</code> variable whose value is <code>3-Person&nbsp;Tents</code>.</p>
<p>The result of the following <code>SHOW</code> statement is <code>NO</code>.</p>
<pre>
SHOW name.desc EQ name.label
</pre>
<p>The result of the following statements is <code>YES</code>.</p>
<pre>
name.desc = '3-Person'
SHOW name.desc EQ name.label
</pre>
<div id="OLADM220" class="sect4"><a id="sthref271"></a>
<h5 class="sect4">Comparing a Text Value to a Text Pattern</h5>
<p><a id="sthref272"></a>The Boolean operator <code>LIKE</code> is designed for comparing a text value to a text pattern. A text value is <span class="italic">like</span> another text value or pattern when corresponding characters match.</p>
<p><a id="sthref273"></a><a id="sthref274"></a><a id="sthref275"></a><a id="sthref276"></a>Besides literal matching, <code>LIKE</code> lets you use wildcard characters to match multiple characters in a string:</p>
<ul>
<li>
<p>An underscore (_) character in a pattern matches any single character.</p>
</li>
<li>
<p>A percent (%) character in a pattern matches zero or more characters in the first string.</p>
</li>
</ul>
<p>For example, a pattern of <code>%AT_</code> matches any text that contains zero or more characters, followed by the characters <code>AT</code>, followed by any other single character. Both <code>DATA</code> and <code>ERRATA</code> return <code>YES</code> when <code>LIKE</code> is used to compare them with the pattern <code>%AT_</code>.</p>
<p>The results of expressions using the LIKE operator are affected by the settings of the LIKECASE and LIKENL options.</p>
<p>No negation operator exists for LIKE. To accomplish negation, you must negate the entire expression. For example, the result of the following statement is <code>NO</code>.</p>
<pre>
SHOW NOT ('Boston' LIKE 'Bo%')
</pre></div>
<!-- class="sect4" -->
<div id="OLADM221" class="sect4"><a id="sthref277"></a>
<h5 class="sect4">Comparing Text Literals to Relations</h5>
<p><a id="sthref278"></a><a id="sthref279"></a><a id="sthref280"></a>You can also compare a text literal to a relation. A relation contains values of the related dimension and the text literal is compared to a value of that dimension. For example, <code>region</code>.<code>district</code> holds values of <code>region</code>, so you can do the following comparison.<a id="sthref281"></a></p>
<pre>
region.district EQ 'West'
</pre></div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1019543"></a>
<div id="OLADM222" class="sect2">
<h3 class="sect2">Conditional Expressions</h3>
<p><a id="sthref282"></a><a id="sthref283"></a><a id="sthref284"></a><a id="sthref285"></a>A <a id="ABC1521895"></a><a id="ABC1521899"></a><a id="sthref286"></a><a id="sthref287"></a><a id="sthref288"></a>conditional expression is an expression you can use to select between values based on a condition. You can use conditional expression as part of any other expression if the data type is appropriate. Oracle OLAP supports the use of the following conditional expressions:</p>
<ul>
<li>
<p><a href="#BABGJIIJ">IF...THEN...ELSE expression</a></p>
</li>
<li>
<p><a href="#BABDADAA">SWITCH Expressions</a></p>
</li>
</ul>
<a id="BABGJIIJ"></a>
<div id="OLADM223" class="sect3">
<h4 class="sect3">IF...THEN...ELSE expression</h4>
<p>An<a id="sthref289"></a><a id="sthref290"></a><a id="sthref291"></a> IF expression is an expression you can use to select one of two values based on a Boolean condition.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not confuse the IF expression with the IF...THEN...ELSE command, which has similar syntax but a different purpose, and which must be used in an Oracle OLAP program. The IF...THEN...ELSE command does not have a data type and is not evaluated like an expression.</div>
<p>An IF expression has the following syntax.</p>
<p class="synopsis">IF <span class="italic">Boolean-expression</span> THEN <span class="italic">expression1</span> ELSE <span class="italic">expression2</span></p>
<p>In most cases, <span class="italic">expression1</span> and <span class="italic">expression2</span> must be of the same basic data type (numeric, text, or Boolean) and the data type of the whole expression is determined using the same rules as those for the binary operators. However, when the data type of either <span class="italic">expression1</span> or <span class="italic">expression2</span> is DATE, it is possible for the other expression to have a numeric or text data type. Because Oracle OLAP expects both data types to be DATE, it converts the numeric or text value to a DATE. Also, when the value of one expression is a dimension value then the value of the other expression is converted to a dimension value as it is for QDRs.</p>
<p>You can nest IF expressions; however, in this case, you might want to use a SWITCH expression instead as discussed in <a href="#BABDADAA">"SWITCH Expressions"</a>.</p>
<p>An IF expression is processed by first evaluating the Boolean expression; then:</p>
<ul>
<li>
<p>When the result of the Boolean expression is <code>TRUE</code>, then <span class="italic">expression1</span> is evaluated and returns that value.</p>
</li>
<li>
<p>When the result of the Boolean expression is <code>FALSE</code>, then <span class="italic">expression2</span> is evaluated and returns that value.</p>
</li>
</ul>
<p>The <code><span class="codeinlineitalic">expression1</span></code> and <code><span class="codeinlineitalic">expression2</span></code> arguments are any valid OLAP DML expressions that evaluate to the same basic data type. However, when the data type of either value is <code>DATE</code>, it is possible for the other value to have a numeric or text data type. Because both data types are expected to be <code>DATE</code>, Oracle OLAP converts the numeric or text value to a <code>DATE</code>. The data type of the whole expression is the same as the two expressions. When the result of the Boolean expression is <code>NA</code>, then <code>NA</code> is returned.</p>
<div id="OLADM1097" class="example">
<p class="titleinexample"><a id="sthref292"></a>Example 2-3 Using an IF Expression</p>
<p>This example shows a sales bonus report. The bonus is 5 percent of the amount that sales exceeded budget, but when sales in the district are below budget, then the bonus<a id="sthref293"></a> is zero.</p>
<pre>
LIMIT month TO 'Jan02' TO 'Jun02'
LIMIT product TO 'Tents'
REPORT DOWN district IF sales-sales.plan LT 0 THEN 0 
       ELSE .05*(sales-sales.plan)

PRODUCT: TENTS
        ---IF SALES-SALES.PLAN LT 0 THEN 0 ELSE .05*(SALES-SALES.PLAN)---
          ----------------------MONTH------------------------------
DISTRICT   Jan02    Feb02    Mar02     Apr02    May02    Jun02
--------- -------- -------- -------- ------- --------- ----------
Boston      229.53     0.00     0.00    0.00    584.51     749.13
Atlanta       0.00     0.00     0.00  190.34    837.62   1,154.87
Chicago       0.00     0.00     0.00   84.06    504.95     786.81
...
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABDADAA"></a>
<div id="OLADM224" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">SWITCH Expressions</h4>
<p>A SWITCH expression consists of a series of CASE expressions. You can use a SWITCH expression as an alternative to a complicated, nested IF ... THEN ... ELSE expression when all the conditions are equality comparisons with a single value.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not confuse the SWTICH expression with the SWITCH command, which has similar syntax but a different purpose, and which must be used in an Oracle OLAP program. The SWITCH command is not evaluated like an expression.</div>
<p>A SWITCH expression has the following syntax.</p>
<p class="synopsis">SWITCH <span class="italic">expression</span> DO { <span class="italic">case-label</span> ... <span class="italic">exp</span> [,] } ... DOEND</p>
<p>where <span class="syntaxinlineitalic">case-label</span> has the following syntax:</p>
<p class="synopsis">CASE <span class="italic">exp</span>: | DEFAULT:</p>
<p>When processing a SWITCH expression, Oracle OLAP compares each CASE expression in succession until it finds a match. When a match is found, it returns the value specified after the last label of the current case group. When no match is found and a DEFAULT label is specified, it returns the value specified for the DEFAULT case; otherwise it returns <code>NA</code>.</p>
<div id="OLADM1098" class="example">
<p class="titleinexample"><a id="sthref294"></a>Example 2-4 Using a SWITCH Expression Instead of an IF Expression</p>
<p><a id="sthref295"></a><a id="sthref296"></a>Assume that you have coded the following OLAP DML statement which includes nested IF...THEN...ELSE statements.</p>
<pre>
   testprogram = IF testtype EQ 0 -
                THEN 'program0' -
                ELSE IF testtype EQ 1 -
                  THEN 'program1' -
                  ELSE IF testtype EQ 2 OR testtype EQ 3 -
                    THEN 'program2'
                    ELSE NA
 
</pre>
<p>You could, instead, code the same behavior using a SWITCH expression as shown below.</p>
<pre>
   testprogram = SWITCH testtype DO -
                CASE 0: 'program0', -
                CASE 1: 'program1', -
                CASE 2: -
                CASE 3: 'program2', -
                DEFAULT: NA -
                DOEND
</pre>
<p><a id="sthref297"></a>You could also code the same behavior using a SWITCH statement that spans fewer lines, omits commas, and omits the DEFAULT case because <code>NA</code> is the default return value when a match is not found.</p>
<pre>
   testprogram = SWITCH testtype DO CASE 0: 'program0' CASE 1: 'program1' -
              CASE 2: CASE 3: 'program2' DOEND
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1007199"></a>
<div id="OLADM225" class="sect2">
<h3 class="sect2">Substitution Expressions</h3>
<p>To construct <a id="ABC1521909"></a><a id="ABC1521913"></a>a substitution expression, use an ampersand character (<code>&amp;</code>) at the beginning of an expression. Using an ampersand (that is, the substitution operator) this way is also called ampersand substitution. The ampersand specifies that Oracle OLAP evaluates an expression containing a substitution expression as follows:</p>
<ol>
<li>
<p>Evaluate the expression following the ampersand (the substitution expression).</p>
</li>
<li>
<p>Evaluate the rest of the expression using the result of step 1 (that is, the result of the substitution expression).</p>
</li>
</ol>
<p>Ampersand substitution gives you a level of indirection when you are specifying an expression. For example, when you specify an ampersand followed by a variable that holds the name of another variable, the value of the expression becomes the data in the second variable. Ampersand substitution lets you write more general programs that can operate on data that is chosen when the program is run. Note, however, that, Oracle OLAP does not compile program lines with ampersand substitution; instead these lines are interpreted when the program runs. To avoid ampersand substitution in a program, you can often use an IF or SWITCH command instead.</p>
<p>You cannot use ampersand substitution in model equations.</p>
<div id="OLADM1099" class="example">
<p class="titleinexample"><a id="sthref298"></a>Example 2-5 Using Ampersand Substitution</p>
<p><a id="sthref299"></a><a id="sthref300"></a><a id="sthref301"></a><a id="sthref302"></a><a id="sthref303"></a><a id="sthref304"></a>Suppose you have a variable called <code>curname</code> that holds the name of a dimension in the analytic workspace (<code>product</code>). When you execute the following statement, then REPORT produces the single value, <code>product</code>, which is the actual value stored in the <code>curname</code> variable.</p>
<pre>
REPORT curname

CURNAME
----------
PRODUCT
</pre>
<p>However, when you execute the following statement, then REPORT produces the values of the dimension <code>product</code>.<a id="sthref305"></a><a id="sthref306"></a></p>
<pre>
REPORT &amp;curname

PRODUCT
--------------
Tents
Canoes
Racquets
Sportswear
Footwear
</pre></div>
<!-- class="example" -->
<p class="subhead2"><a id="OLADM1100"></a>Using Ampersand Substitution with QDRs</p>
<p><a id="sthref307"></a><a id="sthref308"></a>When you use an ampersand with a QDR, you must enclose the whole expression in parentheses if you want the variable to be qualified before the substitution is made.</p>
<p>Suppose you have a text variable named <code>myvar</code> that is dimensioned by <code>reptype</code> and that contains the names of variables. Remember that it is <code>myvar</code> that is dimensioned by <code>reptype</code>, not the variables named by <code>myvar</code>. Therefore, you must use parentheses so that <code>myvar</code> is qualified and the resulting value is used in a REPORT statement.</p>
<pre>
REPORT &amp;(myvar(reptype 'actual'))
</pre>
<p>When you do not use parentheses and the variable that is specified in <code>myvar</code> is <code>sales</code>, then you get an error message that <code>sales</code> is not dimensioned by <code>reptyp</code></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3088">
<tr>
<td class="cellalignment3095">
<table class="cellalignment3093">
<tr>
<td class="cellalignment3092"><a href="dml_basics.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3092"><a href="dml_objects.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3097">
<table class="cellalignment3091">
<tr>
<td class="cellalignment3092"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3092"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3092"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3092"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3092"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3092"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
