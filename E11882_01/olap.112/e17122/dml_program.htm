<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>OLAP DML Programs</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 742" />
<meta name="dcterms.created" content="2013-11-14T21:21:8Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="OLAP DML Reference" />
<meta name="dcterms.identifier" content="E17122-08" />
<meta name="dcterms.isVersionOf" content="OLADM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="dml_options111.htm" title="Previous" type="text/html" />
<link rel="Next" href="dml_program001.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e17122.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">139/593</span> <!-- End Header -->
<div id="OLADM260" class="chapter"><a id="CFHFFAFB"></a>
<h1 class="chapter"><span class="secnum">6</span> OLAP DML Programs</h1>
<p>This chapter provides information about creating OLAP DML programs. It includes the following topics:</p>
<ul>
<li>
<p><a href="#CHDIEHDH">Programs Provided With the OLAP DML</a></p>
<p><a href="#CFHFJIHH">Creating OLAP DML Programs</a></p>
</li>
<li>
<p><a href="#BABFDEFF">Specifying Program Contents</a></p>
</li>
<li>
<p><a href="#i1018966">Compiling Programs</a></p>
</li>
<li>
<p><a href="#i1008035">Testing and Debugging Programs</a></p>
</li>
<li>
<p><a href="#i1009207">Executing Programs</a></p>
</li>
<li>
<p><a href="#BGBFJICI">Common Types of OLAP DML Programs</a></p>
</li>
<li>
<p><a href="dml_program001.htm#CHDFGIHF">User-Written Programs Looked For by Oracle OLAP</a></p>
</li>
</ul>
<a id="CHDIEHDH"></a>
<div id="OLADM261" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Programs Provided With the OLAP DML</h2>
<p>The OLAP DML provides a number of programs that you can use to work with OLAP cubes and cube dimensions as previously defined in the Oracle data dictionary. These programs are listed in <a href="dml_basics.htm#BABIAIGI">"Cube-Aware OLAP DML Statements"</a>.</p>
<p>It also provides the following programs that work directly on the analyhtic workspace:</p>
<ul>
<li>
<p><a href="dml_commands_1010.htm#i78760">ALLCOMPILE</a> which uses the COMPILE command to compile every compilable object in your current analytic workspace, one at a time.</p>
</li>
<li>
<p><a href="dml_commands_1013.htm#i78785">ALLSTAT</a> sets the status of all dimensions in the current analytic workspace to the default status list of the dimension.</p>
</li>
<li>
<p><a href="dml_commands_1016.htm#i79102">AWDESCRIBE</a> sends information about the current analytic workspace to the current outfile. After a summary page, it provides a report in two parts: An alphabetic list of analytic workspace objects showing name, type, and description; and a DESCRIBE of each object by object type.</p>
</li>
<li>
<p><a href="dml_commands_1028.htm#i79194">COPYDFN</a> defines a new object in the analytical workspace by copying the definition from an already-defined object in the current workspace or in an attached workspace.</p>
</li>
<li>
<p><a href="dml_commands_1054.htm#i1006493">FORECAST.REPORT</a> produces a standard report of a forecast created using the FORECAST command. The report shows the parameters of the forecast, including the forecast formula and Mean Absolute Percent Error, followed by a display of the forecasted values.</p>
</li>
<li>
<p><a href="dml_commands_1055.htm#i79541">FULLDSC</a> produces a report that lists the definition of one or more workspace objects, including the properties and triggers of the object(s).</p>
</li>
<li>
<p><a href="dml_functions_1106.htm#i79562">ISDATE</a> determines whether a text expression to see if it can be converted to a DATE value It returns YES when the text expression represents a valid date; NO when it does not. (Note that, ISDATE does not actually make the conversion. You must use CONVERT to make the conversion.)</p>
</li>
<li>
<p><a href="dml_commands_2011.htm#i78827">LISTBY</a> produces a report of the names of all objects in an analytic workspace that are dimensioned by or related to one or more specified dimensions or composites. You can use LISTBY with a dimension or composite in any attached workspace.</p>
</li>
<li>
<p><a href="dml_commands_2013.htm#i78837">LISTNAMES</a> produces a report that lists the names of the objects in an analytic workspace. You can limit the list to particular types of objects, and you can have the names for each type of object listed in alphabetical order.</p>
</li>
<li>
<p><a href="dml_commands_2018.htm#i1004377">MODEL.COMPRPT</a> produces a report that shows how model equations are grouped into blocks. For step blocks and for simultaneous blocks with a cross<span class="italic">-</span>dimensional dependence, the report lists the dimensions involved in the dependence.</p>
</li>
<li>
<p><a href="dml_commands_2019.htm#g1068375">MODEL.DEPRT</a> produces a report that lists the variables and dimension values on which each model equation depends. When a dependence is dimensional, the report gives the name of the dimension.</p>
</li>
<li>
<p><a href="dml_commands_2020.htm#i1004462">MODEL.XEQRPT</a> produces a report about the execution of the model. The report specifies the block where the solution failed and shows the values of the model options that were used in solving simultaneous blocks.</p>
</li>
<li>
<p><a href="dml_commands_2024.htm#i79548">PAGE</a>, commonly used in report programs or with LISTNAMES, forces a page break in output when PAGING is set to <code>YES</code>. An optional argument to PAGE specifies a conditional page break based on how many lines are left on the page.</p>
</li>
<li>
<p><a href="dml_commands_2038.htm#i1010396">REGRESS.REPORT</a> produces a standard report of a regression performed using the REGRESS command.</p>
</li>
<li>
<p><a href="dml_commands_2059.htm#i78669">STATUS</a> sends to the current outfile the status of one or more dimensions, dimension surrogates, or valuesets, or the status of all dimensions in an analytic workspace.</p>
</li>
<li>
<p><a href="dml_commands_2060.htm#i78568">STDHDR</a> generates the standard Oracle OLAP heading at the top of every page of report output.</p>
</li>
<li>
<p><a href="dml_functions_2148.htm#i79219">VALSPERPAGE</a> calculates the maximum number of values for a variable of a specified width that fits on one page. Pages are units of storage in the workspace.</p>
</li>
</ul>
<p>Because the ISDATE and VALSPERPAGE programs are like simple functions, they are documented in alphabetical sequence along with OLAP DML functions in <a href="dml_functions_1.htm#CJAGEFHJ">Chapter 7, "OLAP DML Functions: A - K"</a> and <a href="dml_functions_2.htm#CHDBBGJA">Chapter 8, "OLAP DML Functions: L - Z"</a>. The other programs provided with the OLAP DML are documented in alphabetical sequence along with the OLAP DML commands in <a href="dml_commands_1.htm#BGEEAEAB">Chapter 9, "OLAP DML Commands: A-G"</a> and <a href="dml_commands_2.htm#CCHCECAG">Chapter 10, "OLAP DML Commands: H-Z"</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CFHFJIHH"></a>
<div id="OLADM262" class="sect1">
<h2 class="sect1">Creating OLAP DML Programs</h2>
<p>An OLAP DML program is written in the OLAP DML. It acts on data in the analytic workspace and helps you accomplish some workspace management or analysis task. You can write OLAP DML programs to perform tasks that you must do repeatedly in the analytic workspace, or you can write them as part of an application that you are developing.</p>
<p>To create an OLAP DML program, take the following steps:</p>
<ol>
<li>
<p>Issue a DEFINE PROGRAM statement to define the program object. When the program that you are defining is used is a function, include the <span class="syntaxinlineitalic">datatype</span> or the <span class="syntaxinlineitalic">dimension</span> argument.</p>
</li>
<li>
<p>Add contents to the program that specify the processing that you want performed as described in <a href="#BABFDEFF">"Specifying Program Contents"</a>.</p>
</li>
<li>
<p>Compile the program as described in <a href="#i1018966">"Compiling Programs"</a>.</p>
</li>
<li>
<p>Test and debug the program as described in <a href="#i1008035">"Testing and Debugging Programs"</a>.</p>
</li>
<li>
<p>Execute the program as described in <a href="#i1009207">"Executing Programs"</a>.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="BABFDEFF"></a>
<div id="OLADM263" class="sect1">
<h2 class="sect1">Specifying Program Contents</h2>
<p>The content of a program consists of the following OLAP DML statements:</p>
<ol>
<li>
<p>A PROGRAM statement that indicates the beginning of the program contents. (Omit when coding the specification in an Edit window of the OLAP Worksheet.)</p>
</li>
<li>
<p>(Optional) VARIABLE statements that define any local variables.</p>
</li>
<li>
<p>(Optional) ARGUMENT statements that declare arguments. (See <a href="#i1017050">"Passing Arguments"</a> for more information.)</p>
</li>
<li>
<p>Additional OLAP DML statements that specify the processing you want performed. You can use almost any of the OLAP DML statements in a program. There are also some OLAP DML statements, such as flow-of-control statements, that are only used in programs.</p>
<p>Use the following formatting guidelines as you add lines to your program:</p>
<ul>
<li>
<p>Each line of code can have a maximum of 4,000 bytes.</p>
</li>
<li>
<p>To continue a single statement on the next line, place a hyphen&nbsp;(<code>-</code>) at the end of the line to be broken. The hyphen is called a continuation character.</p>
</li>
<li>
<p>You cannot use a continuation character in the middle of a text literal.</p>
</li>
<li>
<p>To write multiple statements on a single line, separate the statements with semicolon (<code>;</code>).</p>
</li>
<li>
<p>Enclose literal text in single quotation marks (<code>'</code>). To include a single quotation mark within literal text, precede it with a backslash (<code>\</code>). To specify escape sequences, see <a href="dml_expression.htm#i1012296">"Escape Sequences"</a>.</p>
</li>
<li>
<p><a id="sthref1231"></a><a id="sthref1232"></a>Precede comments with double quotation marks (<code>"</code>). You can place a comment, preceded by double quotation marks, either at the beginning of a line or at the end of a line, after some statements.</p>
</li>
</ul>
</li>
<li>
<p>A final END statement that indicates the end of the contents of the program. (Omit when coding the specification in an Edit window of the OLAP Worksheet.)</p>
</li>
</ol>
<a id="i1020197"></a>
<div id="OLADM264" class="sect2">
<h3 class="sect2">Creating User-Defined Functions</h3>
<p>One type of program that is commonly written is a user-define function that you can use in OLAP DML statements in much the same way as you use an OLAP DML function. A user-defined function is simply an OLAP DML program that returns a value. For an example of a user-defined function, see <a href="dml_commands_1014.htm#BABIGFDB">Example 9-44, "Passing an Argument to a User-Defined Function"</a>.</p>
<p><a id="sthref1233"></a><a id="sthref1234"></a><a id="sthref1235"></a>When you create a user-defined function, you use a DEFINE PROGRAM statement that includes the <span class="syntaxinlineitalic">datatype</span> and <span class="syntaxinlineitalic">dimension</span> arguments. Within the program, you include a RETURN statement that returns a value. The return expression in the program should match the data type that is specified in its definition. When the data type of the return value does not match the data type that is specified in its definition, then the value is converted to the data type in the definition.</p>
<p><a id="sthref1236"></a><a id="sthref1237"></a><a id="sthref1238"></a>User-defined functions can accept arguments. A user-defined function returns only a single value. However, when you supply an argument to a user-defined function in a context that loops over a dimension (for example, in a REPORT statement), then the function returns results with the same dimensions as its argument.</p>
<p>You must declare the arguments using an ARGUMENT statement within the program, and you must specify the arguments in parentheses following the name of the program.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1017050">"Passing Arguments"</a> for more information about using arguments with programs.</div>
</div>
<!-- class="sect2" -->
<a id="i1017050"></a>
<div id="OLADM265" class="sect2">
<h3 class="sect2">Passing Arguments</h3>
<p>Use ARGUMENT statements to declare both simple and complex arguments (such as expressions). ARGUMENT statement also make it convenient to pass arguments from one program to another, or to create your own user-defined functions because by using these statements you can declare an argument of any data type, dimension, or valueset. Any ARGUMENT statements must precede the first executable line in the program. When you run the program, these declared arguments are initialized with the values you provided as arguments to the program. The program can then use these arguments in the same way it would use local variables.</p>
<div id="OLADM266" class="sect3"><a id="sthref1239"></a>
<h4 class="sect3">Using Multiple Arguments</h4>
<p><a id="sthref1240"></a>A program can declare as many arguments as needed. When the program is executed with arguments specified, the arguments are matched positionally with the declared arguments in the program. When you run the program, you must separate arguments with spaces rather than with commas or other punctuation. Punctuation is treated as part of the arguments. For an example of passing multiple arguments, see <a href="dml_commands_1014.htm#CHDEGHGE">Example 9-45, "Passing Multiple Arguments"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CHDBHFJC"></a>
<div id="OLADM267" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Handling Arguments Without Converting Values to a Specific Data Type</h4>
<p>Sometimes you want your OLAP DML program to be able to handle arguments without converting values to a specific data type. In this case, you can specify a data type of <code>WORKSHEET</code> in the ARGUMENT and VARIABLE statements that define the arguments and temporary variables for the program. You can use WKSDATA to determine the actual data type of the argument or variable.</p>
</div>
<!-- class="sect3" -->
<a id="i1007402"></a>
<div id="OLADM268" class="sect3">
<h4 class="sect3">Passing Arguments as Text with Ampersand Substitution</h4>
<p><a id="sthref1241"></a><a id="sthref1242"></a><a id="sthref1243"></a><a id="sthref1244"></a><a id="sthref1245"></a>It is very common to pass a simple text argument to a program. However, there are some situations in which you might want to write more general programs or pass a more complicated text argument, such as an argument that is all of the data in an analytic workspace object or the results of an expression. In these cases, you can pass the argument using a substitution expression. Passing an argument in this way is called <span class="bold">ampersand substitution</span>.</p>
<p>For the following types of arguments, you must <span class="italic">always</span> use an ampersand to make the appropriate substitution:</p>
<ul>
<li>
<p>Names of workspace objects, such as <code>units</code> or <code>product</code></p>
</li>
<li>
<p>Statement keywords, such as <code>COMMA</code> or <code>NOCOMMA</code> in the REPORT statement, or <code>A</code> or <code>D</code> in the SORT command</p>
</li>
</ul>
<p>When you use ampersand substitution to pass the names rather than the values of workspace objects to a program, the program has access to the objects themselves. This feature is useful when the program must manipulate the objects in several operations.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot compile and save any program line that contains an ampersand. Instead, the line is evaluated at run time, which can reduce the speed of your programs. Therefore, to maximize performance, avoid using ampersand substitution when another technique is available.</div>
<p>For an example of using ampersand substitution to pass multiple dimension values, see <a href="dml_commands_2009.htm#CHDFHBAJ">Example 10-18, "Using Ampersand Substitution with LIMIT"</a>. For an example of using ampersand substitution to pass the text of an expression, see <a href="dml_commands_1014.htm#CHDBIFDI">Example 9-47, "Passing the Text of an Expression"</a>. For an example of using ampersand substitution to pass object names and keywords, see <a href="dml_commands_1014.htm#CHDFCJBB">Example 9-48, "Passing Workspace Object Names and Keywords"</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dml_expression.htm#i1007199">"Substitution Expressions"</a> for more information about ampersand substitution.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDJGIII"></a>
<div id="OLADM269" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Program Flow-of-Control</h3>
<p>Like most programming languages, the OLAP DML has several statements that you can use to determine the flow-of-control within a program. However, you must code explicit loops less frequently in an OLAP DML program because of the intrinsic looping nature of many OLAP DML statements.</p>
<p><a href="#g679844">Table 6-1, "Statements For Determining Flow-of-Control"</a> lists OLAP DML flow-of-control statements. The looping characteristic of OLAP DML statements is discussed in <a href="dml_basics.htm#BABHFFFI">"OLAP DML Statements Apply to All of the Values of a Data Object"</a>.</p>
<p>The OLAP DML contains the flow-of-control statements typically found in a programming language. <a href="#g679844">Table 6-1, "Statements For Determining Flow-of-Control"</a> lists these statements.</p>
<div id="OLADM1428" class="tblformal">
<p class="titleintable"><a id="sthref1246"></a><a id="g679844"></a>Table 6-1 Statements For Determining Flow-of-Control</p>
<table class="cellalignment3098" title="Statements For Determining Flow-of-Control" summary="This table lists the OLAP DML statements that you only use within an OLAP DML program." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t5">Statement</th>
<th class="cellalignment3099" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t5" headers="r1c1-t5">
<p><a href="dml_commands_1018.htm#i79160">BREAK</a></p>
</td>
<td class="cellalignment3095" headers="r2c1-t5 r1c2-t5">
<p>Transfers program control from within a SWITCH, FOR, or WHILE statement to the statement immediately following the DOEND associated with SWITCH, FOR, or WHILE.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t5" headers="r1c1-t5">
<p><a href="dml_commands_1027.htm#i1007920">CONTINUE</a></p>
</td>
<td class="cellalignment3095" headers="r3c1-t5 r1c2-t5">
<p>Transfers program control to the end of a FOR or WHILE loop (just before the DO/DOEND statement), allowing the loop to repeat. You can use CONTINUE only within programs and only with FOR or WHILE.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t5" headers="r1c1-t5">
<p><a href="dml_commands_1035.htm#i80451">DO ... DOEND</a></p>
</td>
<td class="cellalignment3095" headers="r4c1-t5 r1c2-t5">
<p>Brackets a group of one or more statements. DO and DOEND are normally used to bracket a group of statements that are to be executed under a condition specified by an IF statement, a group of statements in a repeating loop introduced by FOR or WHILE, or the CASE labels for a SWITCH statement.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t5" headers="r1c1-t5">
<p><a href="dml_commands_1052.htm#i79526">FOR</a></p>
</td>
<td class="cellalignment3095" headers="r5c1-t5 r1c2-t5">
<p>Specifies one or more dimensions whose status controls the repetition of one or more statements.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t5" headers="r1c1-t5">
<p><a href="dml_commands_1056.htm#i78866">GOTO</a></p>
</td>
<td class="cellalignment3095" headers="r6c1-t5 r1c2-t5">
<p>Alters the sequence of statement execution within the program by indicating the next program statement to execute.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t5" headers="r1c1-t5">
<p><a href="dml_commands_2005.htm#i78906">IF...THEN...ELSE command</a></p>
</td>
<td class="cellalignment3095" headers="r7c1-t5 r1c2-t5">
<p>Executes one or more statements in a program if a specified condition is met. Optionally, it also executes an alternative statement or group of statements when the condition is not met.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r8c1-t5" headers="r1c1-t5">
<p><a href="dml_options073.htm#i79528">OKFORLIMIT</a></p>
</td>
<td class="cellalignment3095" headers="r8c1-t5 r1c2-t5">
<p>An option that determines whether you can limit the dimension you are looping over within an explicit FOR loop.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r9c1-t5" headers="r1c1-t5">
<p><a href="dml_commands_2047.htm#i79191">RETURN</a></p>
</td>
<td class="cellalignment3095" headers="r9c1-t5 r1c2-t5">
<p>Terminates execution of a program before its last line. You can optionally specify a value that the program returns.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r10c1-t5" headers="r1c1-t5">
<p><a href="dml_commands_2055.htm#i1010075">SIGNAL</a></p>
</td>
<td class="cellalignment3095" headers="r10c1-t5 r1c2-t5">
<p>Produces an error message and halts normal execution of the program. When the program contains an active trap label, execution branches to the label. Without a trap label, execution of the program terminates and, if the program was called by another program, execution control returns to the calling program.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r11c1-t5" headers="r1c1-t5">
<p><a href="dml_commands_2061.htm#i78578">SWITCH command</a></p>
</td>
<td class="cellalignment3095" headers="r11c1-t5 r1c2-t5">
<p>Provides a multipath branch in a program. The specific path taken during program execution depends on the value of the control expression that is specified with SWITCH.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r12c1-t5" headers="r1c1-t5">
<p><a href="dml_commands_2062.htm#i78618">TEMPSTAT</a></p>
</td>
<td class="cellalignment3095" headers="r12c1-t5 r1c2-t5">
<p>Limits the dimension you are looping over, inside a FOR loop or inside a loop that is generated by a REPORT statement. Status is restored after the statement following TEMPSTAT. If a DO ... DOEND phrase follows TEMPSTAT, status is restored when the matched DOEND or a BREAK or GOTO statement is encountered.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r13c1-t5" headers="r1c1-t5">
<p><a href="dml_commands_2065.htm#g1037686">TRAP</a></p>
</td>
<td class="cellalignment3095" headers="r13c1-t5 r1c2-t5">
<p>Causes program execution to branch to a label when an error occurs in a program or when the user interrupts the program. When execution branches to the trap label, that label is deactivated.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r14c1-t5" headers="r1c1-t5">
<p><a href="dml_commands_2074.htm#i79264">WHILE</a></p>
</td>
<td class="cellalignment3095" headers="r14c1-t5 r1c2-t5">
<p>Repeatedly executes a statement while the value of a Boolean expression remains TRUE.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="i1007424"></a>
<div id="OLADM270" class="sect2">
<h3 class="sect2">Preserving the Environment Settings</h3>
<p>There are two types of environments:</p>
<ul>
<li>
<p><a id="sthref1247"></a><a id="sthref1248"></a>Session environment. The dimension status, option values, and output destination that are in effect before a program is run constitute the session environment.</p>
</li>
<li>
<p><a id="sthref1249"></a><a id="sthref1250"></a>Program environment. The dimension status, option values, and output destination that you use in a program constitute the program environment.</p>
</li>
</ul>
<div id="OLADM271" class="sect3"><a id="sthref1251"></a>
<h4 class="sect3">Changing the Program Environment</h4>
<p>To perform a task within a program, you often must change the output destination or some dimension and option values. For example, you might run a monthly sales report that always shows the last six months of sales data. You might want to show the data without decimal places, include the text "No Sales" where the sales figure is zero, and send the report to a file. To set up this program environment, you can use the following statements in your program.</p>
<pre>
LIMIT month TO LAST 6
DECIMALS = 0
ZSPELL = 'No Sales'
OUTFILE monsales.txt
</pre>
<pre>
</pre>
<p>To avoid disrupting the session environment, the initialization section of a program should save the values of the dimensions and options that are set in the program. After the program executes, you can restore the saved environment, so that other programs do not need to be concerned about whether any values have been changed. In addition, when you have sent output to a file, then the exit sections should return the output destination to the default outfile.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM272" class="sect3"><a id="sthref1252"></a>
<h4 class="sect3">Ways to Save and Restore Environments</h4>
<p><a id="sthref1253"></a><a id="sthref1254"></a>The following suggestions let you save the environment of a program or a session:</p>
<ul>
<li>
<p>When you want to save the current status or value of a dimension, a valueset, an option, or a single-cell variable that is changed in the current program, then use PUSHLEVEL and PUSH statements. You can restore the current status values using POPLEVEL and POP statements.</p>
</li>
<li>
<p>When you want to save, access, or update the current status or value of a dimension, a valueset, an option, a single-cell variable, or a single-cell relation for use in the current session, then use a named context. Use the CONTEXT command to define the context.</p>
</li>
</ul>
<p>Contexts are the most sophisticated way to save object values for use during a session. With contexts, you can access, update, and commit the saved object values. In contrast, PUSH and POP simply allow you to save and restore values. Typically, you use PUSH and POP statements within a program to make changes that apply only during the execution of the program.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM273" class="sect3"><a id="sthref1255"></a>
<h4 class="sect3">Saving the Status of a Dimension or the Value of an Option</h4>
<p><a id="sthref1256"></a><a id="sthref1257"></a><a id="sthref1258"></a><a id="sthref1259"></a><a id="sthref1260"></a>A PUSH statement saves the current status of a dimension, the value of an option, or the value of a single-cell variable. For example, to save the current value of the <code>DECIMALS</code> option so you can set it to a different value for the duration of the program, use the following statement in the initialization section.</p>
<pre>
PUSH DECIMALS
</pre>
<pre>
</pre>
<p><a id="sthref1261"></a><a id="sthref1262"></a><a id="sthref1263"></a><a id="sthref1264"></a><a id="sthref1265"></a><a id="sthref1266"></a>You do not need to know the original value of the option to save it or to restore it later. You can restore the saved value with a POP statement.</p>
<pre>
POP DECIMALS
</pre>
<pre>
</pre>
<p>You must make sure a POP statement is executed when errors cause abnormal termination of the program and when the program ends normally. Therefore, place the POP statement in the normal and abnormal exit sections of the program.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM274" class="sect3"><a id="sthref1267"></a>
<h4 class="sect3">Saving Several Values at Once</h4>
<p><a id="sthref1268"></a><a id="sthref1269"></a>You can save the status of one or more dimensions and the values of any number of options and variables in a single PUSH statement, and you can restore the values with a single POP statement, as shown in the following example.</p>
<pre>
PUSH month DECIMALS ZSPELL
       ...
POP month DECIMALS ZSPELL
</pre></div>
<!-- class="sect3" -->
<div id="OLADM275" class="sect3"><a id="sthref1270"></a>
<h4 class="sect3">Using Level Markers</h4>
<p>When you are saving the values of several dimensions and options, then PUSHLEVEL and POPLEVEL statements provide a convenient way to save and restore the session environment.</p>
<p>You first use a PUSHLEVEL statement to establish a level marker. Once the level marker is established, you use a PUSH statement to save the status of dimensions and the values of options or single-cell variables.</p>
<p><a id="sthref1271"></a>When you place multiple PUSH statements between the PUSHLEVEL and POPLEVEL statements, then all the objects that are specified in those PUSH statements are restored with a single POPLEVEL statement.</p>
<p>By using PUSHLEVEL and POPLEVEL, you save some typing as you write your program because you must only type the list of objects once. You also reduce the risk of omitting an object from the list or misspelling the name of an object.</p>
<p>For an example of creating level markers, see <a href="dml_commands_2033.htm#CHDGEDJB">Example 10-85, "Creating Level Markers"</a>. <a href="dml_commands_2033.htm#CHDGJFIG">Example 10-86, "Nesting PUSHLEVEL and POPLEVEL Commands"</a> illustrates nesting PUSHLEVEL and POPLEVEL statements.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM276" class="sect3"><a id="sthref1272"></a>
<h4 class="sect3">Using CONTEXT to Save Several Values at Once</h4>
<p><a id="sthref1273"></a><a id="sthref1274"></a>As an alternative to using PUSHLEVEL and POPLEVEL, you can use the CONTEXT command. After you create a context, you can save the current status of dimensions and the values of options, single-cell variables, valuesets, and single-cell relations in the context. You can then restore some or all of the object values from the context. The CONTEXT function returns information about objects in a context.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1008019"></a>
<div id="OLADM277" class="sect2">
<h3 class="sect2">Handling Errors</h3>
<p><a id="sthref1275"></a><a id="sthref1276"></a><a id="sthref1277"></a><a id="sthref1278"></a>When an error occurs anywhere in a program, Oracle OLAP performs the following actions:</p>
<ol>
<li>
<p>Stores the name of the error in the ERRORNAME option, and the text of the error message in the ERRORTEXT option.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When the ERRNAMES option is set to the default value of <code>YES</code>, the ERRORTEXT option contains the name of the error (that is, the value of the ERRORNAME option) and the text of the error message.</div>
</li>
<li>
<p>When ECHOPROMPT is <code>YES</code>, then Oracle OLAP echoes input lines, error messages, and output lines, to the current outfile. When you use the OUTFILE or DBGOUTFILE statement, you can capture the error messages in a file. See <a href="dml_commands_2023.htm#CHDGDBEH">Example 10-69, "Directing Output to a File"</a> for an example of directing output to a file.</p>
</li>
<li>
<p>When error trapping is off, then the execution of the program is halted. When error trapping is on, then the error is trapped.</p>
</li>
</ol>
<div id="OLADM278" class="sect3"><a id="sthref1279"></a>
<h4 class="sect3">Trapping an Error</h4>
<p><a id="sthref1280"></a><a id="sthref1281"></a>To make sure the program works correctly, anticipate errors and set up a system for handling them. You can use a TRAP statement to turn on an error-trapping mechanism in a program. When error trapping is on and an error is signaled, then the execution of the program is not halted. Instead, error trapping does the following:</p>
<ol>
<li>
<p>Turns off the error-trapping mechanism to prevent endless looping in case additional errors occur during the error-handling process</p>
</li>
<li>
<p>Branches to the label that is specified in the <code>TRAP</code> statement</p>
</li>
<li>
<p>Executes the statements following the label</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div id="OLADM279" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1282"></a>
<h4 class="sect3">Passing an Error to a Calling Program</h4>
<p>To pass an error to a calling program, you can use one of two methods. The method you use depends on when you want the error message to be produced. With the first method, Oracle OLAP produces the message immediately and then the error condition is passed through the chain of programs. With the second method, Oracle OLAP passes the error through the chain of programs first and then produces the message. See <a href="#i81049">"Passing an Error: Method One"</a> and <a href="#i81058">"Passing an Error: Method Two"</a> for details.</p>
<p>With both methods, the appropriate error handling happens in each program in the chain, and at some point Oracle OLAP sends an error message to the current outfile.</p>
<div id="OLADM280" class="sect4"><a id="i81049"></a>
<h5 class="sect4">Passing an Error: Method One</h5>
<p>Using this method, Oracle OLAP produces the message immediately and then the error condition is passed through the chain of programs.</p>
<p>Use a TRAP statement with the (default) PRINT option. When an error occurs, Oracle OLAP produces an error message, and execution branches to the trap label. After the trap label, perform whatever cleanup you want, and then execute the following statement.</p>
<pre>
SIGNAL PRGERR
</pre>
<pre>
</pre>
<p>Using this statement creates an error condition that is passed up to the program from which the current program was run. However, PRGERR does not produce an error message. PRGERR sets the ERRORNAME option to a blank value.</p>
<p>When the calling program contains a trap label, execution branches to the label. When each of the programs in a sequence of nested programs uses TRAP and SIGNAL in this way, you can pass the error condition up through the entire sequence of programs.</p>
</div>
<!-- class="sect4" -->
<div id="OLADM281" class="sect4"><a id="i81058"></a>
<h5 class="sect4">Passing an Error: Method Two</h5>
<p>Using this method, Oracle OLAP passes the error through the chain of programs first and then produces the message.</p>
<p>Use a TRAP statement with the NOPRINT option. When an error occurs, execution branches to the trap label, but the error message is suppressed. After the trap label, perform whatever cleanup you want, then execute the following statement.</p>
<pre>
SIGNAL ERRORNAME ERRORTEXT
</pre>
<pre>
</pre>
<p>The options ERRORNAME and ERRORTEXT contain the name and message of the original error, so this SIGNAL statement reproduces the original error. The error is then passed up to the program from which the current program was run.</p>
<p>When the calling program also contains a trap label, execution branches to its label. When each of the programs in a sequence of nested programs uses <code>TRAP...NOPRINT</code> and <code>SIGNAL</code>&nbsp;<code>ERRORNAME</code>&nbsp;<code>ERRORTEXT</code> in this way, you can pass the error condition up through the entire sequence of programs. Oracle OLAP produces the error message at the end of the chain.</p>
<p>When you reach a level where you want to handle the error and continue the application, omit the SIGNAL statement. You can display your own message with a SHOW statement.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div id="OLADM282" class="sect3"><a id="sthref1283"></a>
<h4 class="sect3">Suppressing Error Messages</h4>
<p><a id="sthref1284"></a>When you do not want to produce the error message that is normally provided for a given error, then you can use TRAP statement with a <code>NOPRINT</code> keyword.</p>
<pre>
TRAP ON error NOPRINT
</pre>
<pre>
</pre>
<p>When you use the <code>NOPRINT</code> keyword with <code>TRAP</code>, control branches to the <code>error</code> label, and an error message is not issued when an error occurs. The statements following the <code>error</code> label are then executed.</p>
<p>When you suppress the error message, you might want to produce your own message in the abnormal exit section. A <code>SHOW</code> statement produces the text you specify but does not signal an error.</p>
<pre>
TRAP ON error NOPRINT
        ...
error:
        ...
SHOW 'The report will not be produced.'
</pre>
<p>The program continues with the next statement after producing the message.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM283" class="sect3"><a id="sthref1285"></a>
<h4 class="sect3">Creating Your Own Error Messages</h4>
<p><a id="sthref1286"></a><a id="sthref1287"></a><a id="sthref1288"></a>All errors that occur when a statement or statement sequence does not conform to its requirements are signaled automatically. In your program, you can establish additional requirements for your own application. When a requirement is not met, you can execute a <code>SIGNAL</code> statement to signal an error.</p>
<p>You can give the error any name. When a <code>SIGNAL</code> statement is executed, the error name you specify is stored in the <code>ERRORNAME</code> option, just as an OLAP DML error name is automatically stored. When you specify your own error message in a <code>SIGNAL</code> statement, then your message is produced just as an OLAP DML error message is produced. When you are using a <code>TRAP</code> statement to trap errors, a <code>SIGNAL</code> statement branches to the <code>TRAP</code> label after the error message is produced.</p>
<p>For an example of signaling an error, see <a href="dml_commands_2055.htm#CHDCDDAI">Example 10-123, "Signaling an Error"</a>.</p>
<p>When you want to produce a warning message without branching to an error label, then you can use a <code>SHOW</code> statement as illustrated in <a href="dml_commands_2054.htm#CHDDCAAA">Example 10-121, "Creating Error Messages Using SHOW"</a>.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM284" class="sect3"><a id="sthref1289"></a>
<h4 class="sect3">Handling Errors in Nested Programs</h4>
<p>When handling errors in nested programs, the error-handling section in each program should restore the environment. It can also handle any special error conditions that are particular to that program. For example, when your program signals its own error, then you can include statements that test for that error.</p>
<p>Any other errors that occur in a nested program should be passed up through the chain of programs and handled in each program. To pass errors through a chain of nested programs, you can use one of two methods, depending on when you want the error message to be produced:</p>
<ul>
<li>
<p>The error message is produced immediately, and the error condition is then passed through the chain of programs as illustrated in <a href="dml_commands_2065.htm#CHDBJGHD">Example 10-157, "Producing a Program Error Message Immediately"</a>.</p>
</li>
<li>
<p>The error is passed through the chain of programs first, and the error message is produced at the end of the chain as illustrated in<a href="dml_commands_2065.htm#CHDDHFCC">Example 10-158, "Producing a Program Error Message at the End of the Chain"</a>.</p>
</li>
</ul>
<p>A <code>SIGNAL</code> statement is used in both methods.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM285" class="sect3"><a id="sthref1290"></a>
<h4 class="sect3">Handling Errors While Saving the Session Environment</h4>
<p><a id="sthref1291"></a><a id="sthref1292"></a>To correctly handle errors that might occur while you are saving the session environment, place your <code>PUSHLEVEL</code> statement before the <code>TRAP</code> statement and your <code>PUSH</code> statements after the <code>TRAP</code> statement.</p>
<pre>
PUSHLEVEL 'firstlevel'
TRAP ON error
PUSH 
 ...
</pre>
<pre>
</pre>
<p><a id="sthref1293"></a>In the abnormal exit section of your program, place the error label (followed by a colon) and the statements that restore the session environment and handle errors. The abnormal exit section might look like this.</p>
<pre>
error:
POPLEVEL 'firstlevel'
OUTFILE EOF
</pre>
<pre>
</pre>
<p>These statements restore saved dimension status and option values and reroute output to the default outfile.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1018966"></a>
<div id="OLADM286" class="sect1">
<h2 class="sect1">Compiling Programs</h2>
<p>You can explicitly compile a program by using a <code>COMPILE</code> statement. If you do not explicitly compile a program, then it is compiled when you run the program for the first time.</p>
<p><a id="sthref1294"></a><a id="sthref1295"></a>When a program is compiled, it translates the program statements into efficient processed code that executes much more rapidly than the original text of the program. When errors are encountered in the program, then the compilation is not completed, and the program is considered to be uncompiled.</p>
<p><a id="sthref1296"></a><a id="sthref1297"></a>After you compile a program, the compiled code is used each time you run the program in the current session. When you update and commit your analytic workspace after compiling a program, the compiled code is saved in your analytic workspace and used to run the program in future sessions. Therefore, be sure to update and commit after compiling a program. Issuing an update and commit after program compilation is particularly critical when the program is part of an application that is run by many users. Unless the compiled version of the program is saved in the analytic workspace, the program is recompiled individually in each user session.</p>
<p><a href="dml_commands_1024.htm#CHDGDAFC">Example 9-69, "Compiling a Program"</a> illustrates using COMPILE to compile a program</p>
<div id="OLADM287" class="sect2"><a id="sthref1298"></a>
<h3 class="sect2">Finding Out If a Program Has Been Compiled</h3>
<p>You can use the <code>ISCOMPILED</code> choice of the <code>OBJ</code> function to determine whether a specific program in your analytic workspace has been compiled since the last time it was modified. The function returns a Boolean value.</p>
<pre>
SHOW OBJ(ISCOMPILED 'myprogram')
</pre></div>
<!-- class="sect2" -->
<div id="OLADM288" class="sect2"><a id="sthref1299"></a>
<h3 class="sect2">Programming Methods That Prevent Compilation</h3>
<p>Program lines that include ampersand substitution are <span class="italic">not</span> compiled. Any syntax errors are not caught until the program is run. A program whose other lines compiled correctly is considered to be a compiled program.</p>
<p>When your program defines an object and then uses the object in the program, the program cannot be compiled. <code>COMPILE</code> treats the reference to the object as a misspelling because the object does not yet exist in the analytic workspace.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008035"></a>
<div id="OLADM289" class="sect1">
<h2 class="sect1">Testing and Debugging Programs</h2>
<p><a id="ABC1053794"></a><a id="ABC1053794SRI1"></a>Even when your program compiles cleanly, you must also test the program by running it. Running a program helps you detect errors in statements with ampersand substitution, errors in logic, and errors in any nested programs.</p>
<p>To test a program by running it, use a full set of test data that is typical of the data that the program processes. To confirm that you test all the features of the program, including error-handling mechanisms, run the program several times, using different data and responses. Use test data that:</p>
<ul>
<li>
<p>Falls within the expected range</p>
</li>
<li>
<p>Falls outside the expected range</p>
</li>
<li>
<p>Causes each section of a program to execute</p>
</li>
</ul>
<div id="OLADM290" class="sect2"><a id="sthref1300"></a>
<h3 class="sect2">Generating Diagnostic Messages</h3>
<p>Each time you run the program, confirm that the program executes its statements in the correct sequence and that the output is correct. As an aid in analyzing the execution of your program, you can include <code>SHOW</code> or TRACE statements in the program to produce diagnostic or status messages. Then delete the <code>these</code> statements after your tests are complete.</p>
<p>When you detect or suspect an error in your program or a nested program, you can track down the error by using the debugging techniques that are described in the rest of this section.</p>
</div>
<!-- class="sect2" -->
<div id="OLADM291" class="sect2"><a id="sthref1301"></a>
<h3 class="sect2">Identifying Bad Lines of Code</h3>
<p><a id="sthref1302"></a>When you set the BADLINE option to <code>YES</code>, additional information is produced, along with any error message when a bad line of code is encountered. When the error occurs, the error message, the name of the program, and the program line that triggered the error are sent to the current outfile. You can edit the specified program to correct the error and then run the original program. See <a href="dml_options004.htm#CHDHEFID">Example 5-4, "Using the BADLINE Option"</a> for an example of using BADLINE.</p>
</div>
<!-- class="sect2" -->
<a id="i1008347"></a>
<div id="OLADM292" class="sect2">
<h3 class="sect2">Sending Output to a Debugging File</h3>
<p>When your program contains an error in logic, then the program might execute without producing an error message, but it executes the wrong set of statements or produces incorrect results. For example, suppose you write a Boolean expression incorrectly in an <code>IF</code> statement (for example, you use <code>NE</code> instead of <code>EQ</code>). The program executes the statements you specified, but it does so under the wrong conditions.</p>
<p>To find an error in program logic, you must often see the order in which the statements are being executed. One way you can do this is to create a debugging file and then examine the file to diagnose any problems in your programs by issuing the following DML statements:</p>
<ol>
<li>
<p>C<a id="sthref1303"></a>reate a debugging file, by issuing an DBGOUTFILE statement.</p>
</li>
<li>
<p>Specify that you want each program line to be sent to the debugging file when a line executes by setting the PRGTRACE option to <code>YES</code>.</p>
</li>
<li>
<p><a id="sthref1304"></a>(Optional) When you want the debugging file to interweave the program lines with both the program input and error messages, set the ECHOPROMPT option to <code>YES</code>.<a id="sthref1305"></a><a id="sthref1306"></a></p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The following examples of using a debugging file:
<ul>
<li>
<p><a href="dml_commands_1031.htm#CHDBDJGH">Example 9-76, "Debugging with a Debugging File"</a></p>
</li>
<li>
<p><a href="dml_commands_1031.htm#CHDIAHIB">Example 9-77, "Sending Debugging Information to a File"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1009207"></a>
<div id="OLADM293" class="sect1">
<h2 class="sect1">Executing Programs</h2>
<p><a id="sthref1307"></a>You can invoke a program that does not return a value by using a CALL statement. You enclose arguments in parentheses, and they are passed by value. For example, suppose you create a simple program named <code>addit</code> to add two <code>INTEGER</code> values. You can use a CALL statement in the main program of your application to invoke the program.</p>
<p>You can also invoke programs in much the same way as you issue OLAP DML statements. You invoke user-defined functions in the same way as you use built-in functions. You use the program name in an expression and enclose the program arguments, if any, in parentheses. For a program that does not return a value (a user-defined command), you use the program name as you would an OLAP DML command. When you invoke a user-defined program as a function, the program returns <code>NA</code>.</p>
<p><a id="i1017045"></a>You can also create programs that execute automatically when Oracle OLAP:</p>
<ul>
<li>
<p>Executes an AW ATTACH. AW CREATE, AW DELETE, AW DETACH, DEFINE, MAINTAIN, PROPERTY, UPDATE, or SET statement as described in <a href="#CHDBDIIH">"Trigger Programs"</a>.</p>
</li>
<li>
<p>Encounters an <code>NA</code> value as described in $NATRIGGER.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BGBFJICI"></a>
<div id="OLADM294" class="sect1">
<h2 class="sect1">Common Types of OLAP DML Programs</h2>
<p>This section provides overview information about the following types of programs:</p>
<ul>
<li>
<p><a href="#i1020273">Startup Programs</a></p>
</li>
<li>
<p><a href="#CIHBCFGJ">Data Import and Export Programs</a></p>
</li>
<li>
<p><a href="#CHDBDIIH">Trigger Programs</a></p>
</li>
<li>
<p><a href="#CIHHIBEE">Aggregation, Allocation, and Modeling Programs</a></p>
</li>
<li>
<p><a href="#i1017424">Forecasting Programs</a></p>
</li>
<li>
<p><a href="#CIHECDAH">Programs to Export and Import Workspace Objects</a></p>
</li>
</ul>
<a id="i1020273"></a>
<div id="OLADM295" class="sect2">
<h3 class="sect2">Startup Programs</h3>
<p><a id="sthref1308"></a>Startup programs are programs that you write and that Oracle OLAP checks for by name when an AW ATTACH statement executes. Startup programs do not exist within an analytic workspace unless you define and write them. In a startup program you can execute any OLAP DML statements, or run any of your own programs. For example, a startup program might set options to values appropriate to your application.</p>
<p>When you first attach an analytic workspace, Oracle OLAP looks for and executes the Oracle OLAP startup programs (if they exist) in the order indicated:</p>
<ol>
<li>
<p>Permission programs. The execution of a permission program is determined by the attachment mode specified in the AW ATTACH statement and whether or not a related permission program exists in the analytic workspace you are attaching. For more information, see <a href="#CHDGGBGH">"Permission Programs"</a>.</p>
</li>
<li>
<p>OnAttach programs. The execution of an OnAttach program is determined by how you code the ONATTACH and NOONATTACH clauses of the AW ATTACH statement and whether or not a program named ONATTACH exists in the analytic workspace you are attaching. For more information, see <a href="#CHDIGDIJ">"OnAttach Programs"</a>.</p>
</li>
<li>
<p>Autogo programs. The execution of an Autogo program is determined by how you code the AUTOGO and NOAUTOGO clauses of the AW ATTACH statement and whether or not a program named AUTOGO exists in the analytic workspace you are attaching. For more information, see <a href="#CHDGIGCE">"Autogo Programs"</a>.</p>
</li>
<li>
<p>Trigger program. The execution of a Trigger program is determined by whether or not a program named TRIGGER_AW exists in an already attached analytic workspace. When a TRIGGER_AW program exists in one attached analytic workspace, it is executed whenever you create, attach, detach, or delete any other analytic workspace. For more information, see <a href="#CHDBDIIH">"Trigger Programs"</a> and <a href="dml_program001.htm#CEGEHJCD">TRIGGER_AW</a>.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
Within a session, when you:
<ul>
<li>
<p>Reattach an attached workspace, Oracle OLAP does <span class="italic">not</span> look for and execute permission programs and OnAttach programs.</p>
</li>
<li>
<p>Reattach a previously detached workspace, Oracle OLAP does not execute permission programs, OnAttach programs, or Autogo programs, <span class="italic">unless</span> you detached that workspace using an AW DETACH statement that included the NOCACHE keyword .</p>
</li>
</ul>
</div>
<a id="CHDGGBGH"></a>
<div id="OLADM296" class="sect3">
<h4 class="sect3">Permission Programs</h4>
<p><a id="sthref1309"></a>Permission programs are programs that you write that give permission to users to access workspace data. <a id="sthref1310"></a><a id="sthref1311"></a><a id="sthref1312"></a><a id="sthref1313"></a>When a user first attaches an analytic workspace, Oracle OLAP checks to see if a permission program that is appropriate for the attachment mode exists.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you reattach an attached workspace, Oracle OLAP does <span class="italic">not</span> look for and execute permission programs.</div>
<p>The permission program for each attachment mode must have a particular name as outlined in <a href="#CHDHEDEJ">Table 6-2, "Names of Permission Programs for Different Attachment Modes"</a>.</p>
<div id="OLADM1429" class="tblformal">
<p class="titleintable"><a id="sthref1314"></a><a id="CHDHEDEJ"></a>Table 6-2 Names of Permission Programs for Different Attachment Modes</p>
<table class="cellalignment3098" title="Names of Permission Programs for Different Attachment Modes" summary="This table lists the program names that you need to use to create a permission program for the various analytic workspace attachment modes." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t10">Attachment Modes</th>
<th class="cellalignment3099" id="r1c2-t10">Name of Program</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t10" headers="r1c1-t10">
<p>Read-only</p>
</td>
<td class="cellalignment3095" headers="r2c1-t10 r1c2-t10">
<p><a href="dml_program001.htm#i1015611">PERMIT_READ</a></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t10" headers="r1c1-t10">
<p>Multiwriter, Read/write</p>
</td>
<td class="cellalignment3095" headers="r3c1-t10 r1c2-t10">
<p><a href="dml_program001.htm#i1015926">PERMIT_WRITE</a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>When an appropriate permission program exists, Oracle OLAP executes the program. When a user specifies a password when attaching the analytic workspace, then the password is passed as an argument to the permission program for processing.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A dimension surrogate has the access permissions of its dimension. Use a PERMIT on a dimension to grant or deny permission to access the values of a dimension surrogate for that dimension.</div>
<p>Permission programs allow you to control two levels of access to the analytic workspace in which they reside.</p>
<ul>
<li>
<p>Access at the analytic workspace level&mdash;Depending on the return value of the permission program, the user is or is not granted access to the entire analytic workspace. You can use the return value to indicate to Oracle OLAP whether or not the user has the right to attach the workspace.</p>
</li>
<li>
<p>Access at the object level&mdash;Within a permission program for read-only or read/write attachment, you can specify PERMIT statements that grant or restrict access to individual workspace objects. PERMIT programs must be in the same workspace as the objects for which they issue PERMIT statements.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
All of the objects referred to in a given permission program must exist in the same analytic workspace.</div>
</li>
</ul>
<p>To create a permission program, define a user-defined function (as described in <a href="#i1020197">"Creating User-Defined Functions"</a>) with a recognized name, then define the contents for the program as described in <a href="#BABFDEFF">"Specifying Program Contents"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CHDIGDIJ"></a>
<div id="OLADM297" class="sect3">
<h4 class="sect3">OnAttach Programs</h4>
<p><a id="sthref1315"></a>An OnAttach program can have any name or it can explicitly be named <code>ONATTACH</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When an analytic workspace is created as an OLAP cube using the OLAP API, the OLAP API may also create a program named <code>ONATTACH</code>. You cannot modify an <code>ONATTACH</code> program that is automatically created in this way. Additionally, overriding the execution of <code>ONATTACH</code> is not recommended.
<p>Consequently, when this type of <code>ONATTACH</code> program exists in an analytic workspace, create a different type of startup program to specify behavior that you want performed when that analytic workspace is attached.</p>
</div>
<p>How you specify the execution of an OnAttach program varies depending on its name:</p>
<ul>
<li>
<p>When a program named <code><a href="dml_program001.htm#i1015357">ONATTACH</a></code>. exists in an analytic workspace, each time you attach the workspace, that program executes automatically unless you include a NOOTTACH keyword in the AW ATTACH statement, or unless you include an ONATTACH clause that specifies a different program name.</p>
</li>
<li>
<p>To execute an OnAttach program that is not named <code>ONATTACH</code>, specify the name of the program within the ONATTACH clause of <a href="dml_commands_1015.htm#i1016126">AW ATTACH</a> statement.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you reattach an attached cached workspace, Oracle OLAP does <span class="italic">not</span> look for and execute OnAttach programs. To force an analytic worksapce to be fully detached so that Oracle OLAP will look for and execute OnAttach programs when you retach the workspace, specify the NOCACHE keyword in the DETACH statement that detaches the analytic workspace.</div>
</div>
<!-- class="sect3" -->
<a id="CHDGIGCE"></a>
<div id="OLADM1430" class="sect3">
<h4 class="sect3">Autogo Programs</h4>
<p><a id="sthref1316"></a>An Autogo program can have any name or it can explicitly be named <code>AUTOGO</code>.</p>
<p>How you specify the execution of an Autogo program varies depending on its name:</p>
<ul>
<li>
<p>When a program named <a href="dml_program001.htm#CHDIHFFD">AUTOGO</a> exists in an analytic workspace, each time you attach the workspace, that program executes automatically unless you include a NOAUTOGO keyword in the AW ATTACH statement, or unless you include an AUTOGO clause that specifies a different program name.</p>
</li>
<li>
<p>To execute an Autogo program that is not named <code>AUTOGO</code>, specify the name of the program within the AUTOGO clause of <a href="dml_commands_1015.htm#i1016126">AW ATTACH</a> statement.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHBCFGJ"></a>
<div id="OLADM298" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Data Import and Export Programs</h3>
<p><a id="sthref1317"></a><a id="sthref1318"></a><a id="sthref1319"></a><a id="sthref1320"></a>The OLAP DML provides support for importing data from relational tables, flat files, and spreadsheets into analytic workspace objects; and for exporting data from analytic workspace objects to relational tables, flat files, and spreadsheets.</p>
<div id="OLADM299" class="sect3"><a id="sthref1321"></a>
<h4 class="sect3">Importing Data to and Exporting Data from Relational Tables</h4>
<p>You can embed SQL statements in OLAP DML programs using the OLAP DML SQL statement. Using the OLAP DML SQL statement you can import data from relational tables into analytic workspace objects and export data from analytic workspace objects to relational tables.</p>
<a id="i1017378"></a>
<div id="OLADM300" class="sect4">
<h5 class="sect4">Importing Data From Relational Tables to Workspace Objects</h5>
<p><a id="sthref1322"></a>Using the OLAP DML SQL statement within an OLAP DML program you can copy relational data into analytic workspace objects using either an implicit cursor or an explicit cursor:</p>
<ul>
<li>
<p>To copy data from relational tables into analytic workspace objects using an implicit cursor, use the SQL SELECT statement. You can use this OLAP DML statement interactively in the OLAP Worksheet or within an OLAP DML program.</p>
</li>
<li>
<p>To copy data from relational tables into analytic workspace objects using an explicit cursor, use the following statements in the order indicated. You can only use these statements within an OLAP DML program. You cannot use them interactively in the OLAP Worksheet.</p>
<ol>
<li>
<p>SQL DECLARE CURSOR defines a SQL cursor by associating it with a SELECT statement or procedure.</p>
</li>
<li>
<p>SQL OPEN activates a SQL cursor.</p>
</li>
<li>
<p>SQL FETCH and SQL IMPORT retrieve and process data specified by a cursor.</p>
</li>
<li>
<p>SQL CLOSE closes a SQL cursor.</p>
</li>
<li>
<p>SQL CLEANUP cancels a SQL cursor declaration and frees the memory resources of an SQL cursor.</p>
</li>
</ol>
</li>
</ul>
<p>For examples of programs that copy table data into workspace objects, see <a href="dml_commands_2058.htm#i78689">SQL FETCH</a> and <a href="dml_commands_2058.htm#i78693">SQL IMPORT</a>.</p>
</div>
<!-- class="sect4" -->
<div id="OLADM301" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref1323"></a>
<h5 class="sect4">Exporting Data from OLAP DML Objects to Relational Tables</h5>
<p>Within a program, you can use an OLAP DML SQL statement with the INSERT keyword to copy data from analytic workspace objects into relational tables. Typically, you do this by issuing the following statements in your OLAP DML program:</p>
<ol>
<li>
<p>SQL PREPARE statements, to precompile the INSERT and UPDATE statements.</p>
</li>
<li>
<p>SQL EXECUTE statements, to execute the statements that you precompiled in Step 1.</p>
</li>
</ol>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div id="OLADM302" class="sect3"><a id="sthref1324"></a>
<h4 class="sect3">Importing Data to and Exporting Data from Flat Files</h4>
<p>Oracle OLAP provides several statements that you can use to read data from flat files or to write data to flat files. These statements are frequently used together in a special program.</p>
</div>
<!-- class="sect3" -->
<div id="OLADM303" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1325"></a>
<h4 class="sect3">Importing Data to and Exporting Data from Spreadsheets</h4>
<p>Within an OLAP DML program you can use an IMPORT statement to import data from a spreadsheet into analytic workspace objects. You can use an EXPORT statement to export data from analytic workspace objects into a spreadsheet.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDBDIIH"></a>
<div id="OLADM304" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Trigger Programs</h3>
<p>DEFINE, MAINTAIN, PROPERTY, SET (=) UPDATE, and AW commands are recognized by Oracle OLAP as events that can trigger the execution of OLAP DML programs.</p>
<ul>
<li>
<p>Programs triggered by DEFINE, MAINTAIN, PROPERTY, UPDATE, or SET commands, are called object trigger programs and are discussed in this section and in the topic for the <a href="dml_commands_2066.htm#BABGJHJH">TRIGGER command</a>.</p>
</li>
<li>
<p>A program named <a href="dml_program001.htm#CEGEHJCD">TRIGGER_AW</a> that is defined within one analytic workspace and which is triggered when another analytic workspace is created, attached, detached or deleted. See the discussion of the <a href="dml_program001.htm#CEGEHJCD">"TRIGGER_AW"</a> for more information.</p>
</li>
</ul>
<p>Trigger programs are frequently written to maintain application-specific metadata. Trigger programs have certain characteristics depending on the statement that triggers them. Some trigger programs execute before the triggering statement executes; some after. Oracle OLAP passes arguments to programs triggered by some statements, but not others. Oracle OLAP does not change dimension status before most trigger programs execute, but does change dimension status before some MAINTAIN statements trigger program execution. In most cases, you can give a trigger program any name that you choose, but some events require a program with a specific name. <a href="#BGBDACDC">"Characteristics of Object Trigger Programs"</a> discusses these characteristics.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
The following statements:
<ul>
<li>
<p><a href="dml_functions_2140.htm#BABCJEAD">TRIGGER function</a>, <a href="dml_commands_1034.htm#i80436">DESCRIBE</a> command, and <a href="dml_functions_2053.htm#g1054016">OBJ</a> function that retrieve information about triggers.</p>
</li>
<li>
<p><a href="dml_options104.htm#BABHEIJA">USETRIGGERS</a> option that you can use to disable all triggers.</p>
</li>
</ul>
</div>
<div id="OLADM305" class="sect3"><a id="sthref1326"></a>
<h4 class="sect3">Creating an Object Trigger Program</h4>
<p>Once an object is defined in an analytic workspace, you can create a trigger program for that object by following the following procedure:</p>
<ol>
<li>
<p>Define the program as described in DEFINE PROGRAM.</p>
</li>
<li>
<p>Determine what to name the program and whether the program can be a user-defined program. (See <a href="#CEGIDBAB">Table 6-3, "Object Trigger Program Characteristics"</a>.) If the program can be a user-defined program, decide whether or not you want to define the trigger program as a user-defined function.</p>
</li>
<li>
<p>Code the actual program as described in<a href="#BABFDEFF">"Specifying Program Contents"</a>.</p>
</li>
<li>
<p>Keep the following points in mind when coding trigger programs:</p>
<ul>
<li>
<p>Use <a href="#CEGIDBAB">Table 6-3, "Object Trigger Program Characteristics"</a> to determine if Oracle OLAP passes values to the program. If it does, use an ARGUMENT statement to declare these arguments in your program and the VARIABLE statement to define program variables for the values. (See <a href="#CEGIIFJI">Table 6-4, "Arguments Passed to Trigger Programs"</a> for specific information about the arguments.)</p>
</li>
<li>
<p>A program that is triggered by an Assign event is executed each time Oracle OLAP assigns a value to the object for which the event was defined. Thus, a program triggered by an Assign event is often executed over and over again as the assignment statements loops through an object assigning values. You can use TRIGGERASSIGN to assign a value that is different from the value specified by the assignment statement that triggered the execution of the program.</p>
</li>
<li>
<p>In some cases, Oracle OLAP changes the status of the dimension being maintained when a Maintain event triggers the execution of a program. See <a href="#CEGCCCAI">Table 6-5, "How Programs Triggered by Maintain Events Effect Dimension Status"</a> for details</p>
</li>
<li>
<p>Use the CALLTYPE function within a program to identify that the program was invoked as a trigger.</p>
</li>
</ul>
</li>
<li>
<p>When the trigger program is <span class="italic">not</span> a TRIGGER_AFTER_UPDATE, TRIGGER_BEFORE_UPDATE, or TRIGGER_DEFINE program, associate the program with the desired object and event using the TRIGGER command.</p>
</li>
<li>
<p>There is no support for recursive triggers. You must set the USETRIGGERS option to <code>NO</code> before you issue the same DML statement <span class="italic">within</span> a trigger program that triggered the program itself. For example, assume that you have written a program named <code>TRIGGER_MAINTAIN_ADD</code> that is triggered by MAINTAIN ADD statements. Within the <code>TRIGGER_MAINTAIN_ADD</code> program, you must set the USETRIGGERS option to <code>NO</code> before you issue a MAINTAIN statement.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BGBDACDC"></a>
<div id="OLADM306" class="sect3">
<h4 class="sect3">Characteristics of Object Trigger Programs</h4>
<p>Object t<a id="sthref1327"></a><a id="sthref1328"></a>rigger programs have certain characteristics depending on the statement that triggers them. Some trigger programs execute before the triggering statement executes; some after. Oracle OLAP passes arguments to programs triggered by some statements, but not others. Oracle OLAP does not change dimension status before most trigger programs execute, but does change dimension status before some MAINTAIN statements trigger program execution. In most cases, you can give a trigger program any name that you choose, but some events require a program with a specific name.</p>
<p><a href="#CEGIDBAB">Table 6-3, "Object Trigger Program Characteristics"</a> lists the OLAP DML statements that trigger programs, the required name of the program (if any), whether or not Oracle OLAP uses values returned by the program, and whether or not Oracle OLAP passes arguments to the program.</p>
<p>Keep the following points in mind when designing trigger programs:</p>
<ul>
<li>
<p>Triggers that execute <span class="italic">before</span> the DML statement&mdash;For trigger programs that execute before the triggering OLAP DML statement executes, you can define the trigger program as a user-defined function that returns a <code>BOOLEAN</code> value. The value returned by the program determines if Oracle OLAP executes the statement that triggered the execution of the trigger program. When the program returns <code>FALSE</code>, Oracle OLAP does not execute the triggering statement; when it returns <code>TRUE</code> or <code>NA</code>, the triggering statement executes.</p>
</li>
<li>
<p>Arguments passed to trigger programs&mdash;Oracle OLAP passes arguments to some trigger programs. These programs are identified in <a href="#CEGIDBAB">Table 6-3, "Object Trigger Program Characteristics"</a>. Descriptions of these arguments are provided in <a href="#CEGIIFJI">Table 6-4, "Arguments Passed to Trigger Programs"</a>. Use the ARGUMENT statement to declare these arguments in your program. Use VARIABLE to define program variables for the values. Use the WKSDATA function to retrieve the data type of an argument with a <code>WORKSHEET</code> data type.</p>
</li>
<li>
<p>Assign trigger programs&mdash;Oracle OLAP executes a program triggered by an Assign event each time it assigns a value to the object for which the event was defined. Thus, a program triggered by an Assign event is often executed over and over again as the assignment statements loops through an object assigning values. With each execution, the value to be assigned is passed as argument1 to the Assign trigger program. (See <a href="#CEGIIFJI">Table 6-4, "Arguments Passed to Trigger Programs"</a> for more information and <a href="dml_commands_2066.htm#CEGCIIGC">Example 10-163, "An ASSIGN Trigger on a Variable"</a> for an example.) Within the Assign trigger program, you can use a TRIGGER ASSIGN statement to assign a different value than that specified by the assignment statement that triggered the execution of the Assign trigger program.</p>
<p>You can <span class="italic">only</span> assign values to a formula when the formula has an Assign trigger defined for it. When you assign a value to a formula with an Assign event, Oracle OLAP executes the trigger program for the event for assigned value and passes the assigned value to the trigger program. The Assign trigger does <code>not</code> change the definition of the formula itself. See <a href="dml_commands_2066.htm#CEGCIBAE">Example 10-165, "An ASSIGN Trigger on a Formula"</a> for an example of an Assign trigger on a formula.</p>
</li>
<li>
<p>Maintain trigger programs and dimension status &mdash;In some cases, Oracle OLAP changes the status of the dimension being maintained when a Maintain event triggers the execution of a program. See <a href="#CEGCCCAI">Table 6-5, "How Programs Triggered by Maintain Events Effect Dimension Status"</a> for details.</p>
</li>
<li>
<p>Maintain triggers and dimension surrogates&mdash;Maintain triggers for dimension surrogates are different than Maintain triggers for other objects. You can only successfully issue a MAINTAIN statement against a dimension surrogate, when the dimension surrogate has a Maintain trigger. Issuing a MAINTAIN statement for a surrogate dimension that does <span class="italic">not</span> have a Maintain trigger, returns an error. Also, for Maintain Add and Maintain Merge triggers, whether or not an argument is passed to the program depends on the object on which the trigger is defined:</p>
<ul>
<li>
<p>For dimension surrogates with a Maintain trigger, Oracle OLAP executes the trigger program one time for each value added or merged and passes that value into the program.</p>
</li>
<li>
<p>For other objects with a Maintain trigger, Oracle OLAP executes the trigger program only once after the MAINTAIN statement executes and no values are passed into the program</p>
</li>
</ul>
</li>
</ul>
<div id="OLADM1431" class="tblformal">
<p class="titleintable"><a id="sthref1329"></a><a id="CEGIDBAB"></a>Table 6-3 Object Trigger Program Characteristics</p>
<table class="cellalignment3098" title="Object Trigger Program Characteristics " summary="This table lists the OLAP DML statements that trigger programs, the required name of the program (if any), whether or not you can define the program as a function, and whether or not the program requires arguments." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t16">Triggering Statement (event)</th>
<th class="cellalignment3099" id="r1c2-t16">Program Name</th>
<th class="cellalignment3099" id="r1c3-t16">Return Values</th>
<th class="cellalignment3099" id="r1c4-t16">Passed Arguments</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t16" headers="r1c1-t16">
<p>= (assignment) statement (SET)</p>
</td>
<td class="cellalignment3095" headers="r2c1-t16 r1c2-t16">
<p>No required name</p>
</td>
<td class="cellalignment3095" headers="r2c1-t16 r1c3-t16">
<p>No</p>
</td>
<td class="cellalignment3095" headers="r2c1-t16 r1c4-t16">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t16" headers="r1c1-t16">
<p>DEFINE</p>
</td>
<td class="cellalignment3095" headers="r3c1-t16 r1c2-t16">
<p><a href="dml_program001.htm#BABIJHCI">TRIGGER_DEFINE</a></p>
</td>
<td class="cellalignment3095" headers="r3c1-t16 r1c3-t16">
<p>No</p>
</td>
<td class="cellalignment3095" headers="r3c1-t16 r1c4-t16">
<p>No</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t16" headers="r1c1-t16">
<p>MAINTAIN ADD</p>
</td>
<td class="cellalignment3095" headers="r4c1-t16 r1c2-t16">
<p>No required name</p>
</td>
<td class="cellalignment3095" headers="r4c1-t16 r1c3-t16">
<p>No</p>
</td>
<td class="cellalignment3095" headers="r4c1-t16 r1c4-t16">
<p>No</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t16" headers="r1c1-t16">
<p>MAINTAIN DELETE (<span class="italic">not</span> ALL)</p>
</td>
<td class="cellalignment3095" headers="r5c1-t16 r1c2-t16">
<p>No required name</p>
</td>
<td class="cellalignment3095" headers="r5c1-t16 r1c3-t16">
<p>Yes</p>
</td>
<td class="cellalignment3095" headers="r5c1-t16 r1c4-t16">
<p>No</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t16" headers="r1c1-t16">
<p>MAINTAIN DELETE ALL</p>
</td>
<td class="cellalignment3095" headers="r6c1-t16 r1c2-t16">
<p>No required name</p>
</td>
<td class="cellalignment3095" headers="r6c1-t16 r1c3-t16">
<p>Yes</p>
</td>
<td class="cellalignment3095" headers="r6c1-t16 r1c4-t16">
<p>No</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t16" headers="r1c1-t16">
<p>MAINTAIN MERGE</p>
</td>
<td class="cellalignment3095" headers="r7c1-t16 r1c2-t16">
<p>No required name</p>
</td>
<td class="cellalignment3095" headers="r7c1-t16 r1c3-t16">
<p>No</p>
</td>
<td class="cellalignment3095" headers="r7c1-t16 r1c4-t16">
<p>No</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r8c1-t16" headers="r1c1-t16">
<p>MAINTAIN MOVE</p>
</td>
<td class="cellalignment3095" headers="r8c1-t16 r1c2-t16">
<p>No required name</p>
</td>
<td class="cellalignment3095" headers="r8c1-t16 r1c3-t16">
<p>Yes</p>
</td>
<td class="cellalignment3095" headers="r8c1-t16 r1c4-t16">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r9c1-t16" headers="r1c1-t16">
<p>MAINTAIN RENAME</p>
</td>
<td class="cellalignment3095" headers="r9c1-t16 r1c2-t16">
<p>No required name</p>
</td>
<td class="cellalignment3095" headers="r9c1-t16 r1c3-t16">
<p>Yes</p>
</td>
<td class="cellalignment3095" headers="r9c1-t16 r1c4-t16">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r10c1-t16" headers="r1c1-t16">
<p>PROPERTY</p>
</td>
<td class="cellalignment3095" headers="r10c1-t16 r1c2-t16">
<p>No required name</p>
</td>
<td class="cellalignment3095" headers="r10c1-t16 r1c3-t16">
<p>Yes</p>
</td>
<td class="cellalignment3095" headers="r10c1-t16 r1c4-t16">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r11c1-t16" headers="r1c1-t16">
<p>UPDATE (Update AW)</p>
</td>
<td class="cellalignment3095" headers="r11c1-t16 r1c2-t16">
<p><a href="dml_program001.htm#CEGFHIJE">TRIGGER_AFTER_UPDATE</a></p>
</td>
<td class="cellalignment3095" headers="r11c1-t16 r1c3-t16">
<p>No</p>
</td>
<td class="cellalignment3095" headers="r11c1-t16 r1c4-t16">
<p>No</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r12c1-t16" headers="r1c1-t16">
<p>UPDATE (Update AW)</p>
</td>
<td class="cellalignment3095" headers="r12c1-t16 r1c2-t16">
<p><a href="dml_program001.htm#CEGEHCCI">TRIGGER_BEFORE_UPDATE</a></p>
</td>
<td class="cellalignment3095" headers="r12c1-t16 r1c3-t16">
<p>Yes</p>
</td>
<td class="cellalignment3095" headers="r12c1-t16 r1c4-t16">
<p>No</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r13c1-t16" headers="r1c1-t16">
<p>UPDATE (Update Multi)</p>
</td>
<td class="cellalignment3095" headers="r13c1-t16 r1c2-t16">
<p>No required name</p>
</td>
<td class="cellalignment3095" headers="r13c1-t16 r1c3-t16">
<p>No</p>
</td>
<td class="cellalignment3095" headers="r13c1-t16 r1c4-t16">
<p>No</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div id="OLADM1432" class="tblformal">
<p class="titleintable"><a id="sthref1330"></a><a id="CEGIIFJI"></a>Table 6-4 Arguments Passed to Trigger Programs</p>
<table class="cellalignment3098" title="Arguments Passed to Trigger Programs" summary="This table describes the arguments of trigger programs that require arguments." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t17">Event</th>
<th class="cellalignment3099" id="r1c2-t17">Argument1</th>
<th class="cellalignment3099" id="r1c3-t17">Argument2</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t17" headers="r1c1-t17">
<p>Property</p>
</td>
<td class="cellalignment3095" headers="r2c1-t17 r1c2-t17">
<p>When the PROPERTY statement is assigning a property to an object, the name of the property. When the PROPERTY statement is deleting one or more properties, <code>the literal DELETE</code>. (<code>TEXT</code> data type)</p>
</td>
<td class="cellalignment3095" headers="r2c1-t17 r1c3-t17">
<p>When the value of <span class="italic">argument1</span> is <code>DELETE</code>, the name of the property or the literal <code>ALL</code>. In all other cases, the name of the property. (<code>WORKSHEET</code> data type)</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t17" headers="r1c1-t17">
<p>Assignment</p>
</td>
<td class="cellalignment3095" headers="r3c1-t17 r1c2-t17">
<p>The value to assign. When you know the data type of the object to which the value is assigned, specify that data type for the argument. When you do not know the actual data type, specify <code>WORKSHEET</code> as the data type of the argument.</p>
</td>
<td class="cellalignment3095" headers="r3c1-t17 r1c3-t17">
<p>None. Oracle OLAP passes only one argument to the program.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t17" headers="r1c1-t17">
<p>Maintain Add</p>
</td>
<td class="cellalignment3095" headers="r4c1-t17 r1c2-t17">&nbsp;</td>
<td class="cellalignment3095" headers="r4c1-t17 r1c3-t17">
<p>(Dimension surrogates only) The value added. (<code>WORKSHEET data type)</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t17" headers="r1c1-t17">
<p>Maintain Rename</p>
</td>
<td class="cellalignment3095" headers="r5c1-t17 r1c2-t17">
<p>The dimension value to rename. (<code>TEXT</code> data type)</p>
</td>
<td class="cellalignment3095" headers="r5c1-t17 r1c3-t17">
<p>The new name of the dimension member. (<code>WORKSHEET</code> data type)</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t17" headers="r1c1-t17">
<p>Maintain Merge</p>
</td>
<td class="cellalignment3095" headers="r6c1-t17 r1c2-t17">&nbsp;</td>
<td class="cellalignment3095" headers="r6c1-t17 r1c3-t17">
<p>(Dimension surrogates only) The value merged. (<code>WORKSHEET data type)</code></p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t17" headers="r1c1-t17">
<p>Maintain Move</p>
</td>
<td class="cellalignment3095" headers="r7c1-t17 r1c2-t17">
<p>The position of the dimension value to move. (<code>TEXT</code> data type)</p>
</td>
<td class="cellalignment3095" headers="r7c1-t17 r1c3-t17">
<p>The literal <code>BEFORE</code> or <code>AFTER</code>. (<code>WORKSHEET</code> data type)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div id="OLADM1433" class="tblformal">
<p class="titleintable"><a id="sthref1331"></a><a id="CEGCCCAI"></a>Table 6-5 How Programs Triggered by Maintain Events Effect Dimension Status</p>
<table class="cellalignment3098" title="How Programs Triggered by Maintain Events Effect Dimension Status" summary="This table explains how Oracle OLAP changes the status of the dimension being maintained when a Maintain event triggeres the execution of a program." dir="ltr">
<thead>
<tr class="cellalignment3089">
<th class="cellalignment3099" id="r1c1-t18">Event Subevent</th>
<th class="cellalignment3099" id="r1c2-t18">Dimension Status Before Program Execution</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r2c1-t18" headers="r1c1-t18">
<p>Maintain Add</p>
</td>
<td class="cellalignment3095" headers="r2c1-t18 r1c2-t18">
<p>Status set to dimension values just added.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r3c1-t18" headers="r1c1-t18">
<p>Maintain Delete</p>
</td>
<td class="cellalignment3095" headers="r3c1-t18 r1c2-t18">
<p>Status set to dimension values about to be deleted.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r4c1-t18" headers="r1c1-t18">
<p>Maintain Delete All</p>
</td>
<td class="cellalignment3095" headers="r4c1-t18 r1c2-t18">
<p>Current status is not changed.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r5c1-t18" headers="r1c1-t18">
<p>Maintain Merge</p>
</td>
<td class="cellalignment3095" headers="r5c1-t18 r1c2-t18">
<p>Status set to dimension values just merged.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r6c1-t18" headers="r1c1-t18">
<p>Maintain Move</p>
</td>
<td class="cellalignment3095" headers="r6c1-t18 r1c2-t18">
<p>Status set to dimension values about to be moved.</p>
</td>
</tr>
<tr class="cellalignment3089">
<td class="cellalignment3095" id="r7c1-t18" headers="r1c1-t18">
<p>Maintain Rename</p>
</td>
<td class="cellalignment3095" headers="r7c1-t18 r1c2-t18">
<p>Current status is not changed.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHHIBEE"></a>
<div id="OLADM307" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Aggregation, Allocation, and Modeling Programs</h3>
<p>To aggregate, allocate, or model data using the OLAP DML, you first specify the calculation that you want performed by defining a calculation specification as outlined in <a href="dml_objects.htm#BABIIBDB">"Creating Calculation Objects"</a>. Later, to populate variables with aggregated, allocated or modeled values as a database maintenance procedure, write a program to execute the calculation object. For more information on the OLAP DML statements that you use in these programs, see <a href="dml_objects.htm#BEIDEBCA">"Running a Model"</a>, <a href="dml_objects.htm#i1021434">"Executing the Aggregation"</a>, and <a href="dml_objects.htm#BABCJFHG">"Allocating Data"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i1017424"></a>
<div id="OLADM308" class="sect2">
<h3 class="sect2">Forecasting Programs</h3>
<p>The OLAP DML has several related statements that allow you to forecast data using the Geneva Forecasting engine which is a statistical forecasting engine from Roadmap Technologies that is used extensively in demand planning applications.</p>
<p>To forecast using the Geneva Forecasting engine, take the following steps:</p>
<ol>
<li>
<p>Add the future time values to the time dimension.</p>
</li>
<li>
<p>Create a variable to hold the results of the forecast.</p>
</li>
<li>
<p>Write a forecasting program. Within the program, issue the following statements in the order indicated:</p>
<ol>
<li>
<p>FCOPEN function -- Creates a forecasting context.</p>
</li>
<li>
<p>FCSET command -- Specifies the forecast characteristics.</p>
</li>
<li>
<p>FCEXEC command -- Executes a forecast and populates Oracle OLAP variables with forecasting data.</p>
</li>
<li>
<p>FCQUERY function -- Retrieves information about the characteristics of a forecast or a trial of a forecast.</p>
</li>
<li>
<p>FCCLOSE command -- Closes a forecasting context.</p>
</li>
</ol>
</li>
</ol>
<p>For examples of using these statements to forecast data see <a href="dml_commands_1040.htm#CIHFBEEF">Example 9-119, "A Forecasting Program"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CIHECDAH"></a>
<div id="OLADM309" class="sect2">
<h3 class="sect2">Programs to Export and Import Workspace Objects</h3>
<p><a id="sthref1332"></a><a id="sthref1333"></a><a id="sthref1334"></a><a id="sthref1335"></a><a id="sthref1336"></a>You can export an entire workspace, several workspace objects, a single workspace object, or a portion of an analytic workspace object to a specially formatted EIF file. Then you can import the information into a different workspace within the same schema or a different one.</p>
<p>One reason for exporting and importing is to move your data to a new location. Another purpose is to remove extra space from your analytic workspace after you have added and then deleted many objects or dimension values. To do this, issue an EXPORT statement to put all the data in an EIF file, create another workspace with a different name, and then use an IMPORT statement to import the EIF file into the new workspace. When you have imported into the same database, you can delete the old workspace and refer to the new one with the same workspace alias that you used for the original one.</p>
<p>The following statement copies all the data and definitions from the current analytic workspace to an EIF file called <code>reorg.eif</code> in a directory object called <code>mydir</code>.</p>
<pre>
EXPORT ALL TO EIF FILE 'mydir/reorg.eif'
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<div class="refentry"></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
</div>
</div>
<footer><!--
<hr />
<table class="cellalignment3088">
<tr>
<td class="cellalignment3095">
<table class="cellalignment3093">
<tr>
<td class="cellalignment3092"><a href="dml_options111.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3092"><a href="dml_program001.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3097">
<table class="cellalignment3091">
<tr>
<td class="cellalignment3092"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3092"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3092"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3092"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3092"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3092"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>

<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
