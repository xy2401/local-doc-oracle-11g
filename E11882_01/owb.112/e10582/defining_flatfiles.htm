<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using Flat Files as Sources or Targets</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-07-16T0:40:0Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Warehouse Builder Sources and Targets Guide" />
<meta name="dcterms.identifier" content="E10582-06" />
<meta name="dcterms.isVersionOf" content="WBDOD" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="importing_metadata.htm" title="Previous" type="text/html" />
<link rel="Next" href="gateways_connection.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10582.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/17</span> <!-- End Header -->
<div id="WBDOD10503" class="chapter"><a id="BABICCDG"></a>
<h1 class="chapter"><span class="secnum">3</span> Using Flat Files as Sources or Targets</h1>
<p><a id="ABC1636559"></a><a id="ABC1636559SRI1"></a><a id="ABC1636559SRI12"></a>You can use flat files as either source files or target files within mappings in Oracle Warehouse Builder.</p>
<p>This chapter describes the use of flat files as sources and targets in Oracle Warehouse Builder. It contains the following topics:</p>
<ul>
<li>
<p><a href="#BABBHHBB">"About Flat Files"</a></p>
</li>
<li>
<p><a href="#CHDHHEBF">"Using the Create Flat File Wizard"</a></p>
</li>
<li>
<p><a href="#i1076108">"Importing Definitions from Flat Files Using Sampling"</a></p>
</li>
<li>
<p><a href="#BABGGBJG">"Importing Metadata Definitions from COBOL Copybooks"</a></p>
</li>
<li>
<p><a href="#i1076537">"Viewing and Editing a File Definition"</a></p>
</li>
<li>
<p><a href="#i113670">"Using External Tables"</a></p>
</li>
</ul>
<a id="BABBHHBB"></a>
<div id="WBDOD10539" class="sect1">
<h2 class="sect1">About Flat Files</h2>
<p>When using flat files as sources:</p>
<ul>
<li>
<p>You can read from character data set files or binary flat files.</p>
</li>
<li>
<p>You can read from delimited files, fixed length files, or XML files.</p>
</li>
<li>
<p>You can use flat file operators in SQL*Loader mappings to read from flat files directly, or you can add an external table and access the flat file data in a mapping using SQL and PL/SQL.</p>
</li>
<li>
<p>You can also add flat file operators in code template based mappings and leverage code templates that are specifically constructed for files or the generic SQL code templates which leverages a built-in JDBC driver for files.</p>
</li>
</ul>
<p>When using flat files as targets:</p>
<ul>
<li>
<p>You can use only character data set files. Binary flat files are not supported as targets.</p>
</li>
<li>
<p>You can write to delimited files and fixed length files.</p>
</li>
<li>
<p>You can use flat file operators to write data to flat files.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The same flat file can act as a source and a target file.</div>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref68"></a>
<h3 class="sect2">About Metadata for Flat Files</h3>
<p>File metadata describes the structure of data records in the file, including column names and data types. Before you use a flat file as source, it is desirable to define the metadata of that flat file.</p>
<p>You can import flat file metadata from several sources:</p>
<ul>
<li>
<p>For character files with displayable data, you can use the Flat File Sample Wizard to view and analyze the flat file contents and deduce metadata from them.</p>
</li>
<li>
<p>For COBOL copybooks, you can import metadata definitions directly from the copybook file.</p>
</li>
<li>
<p>For binary files, files that are too complex for the Flat File Sample Wizard, and for target files for which no sample is available yet, you can explicitly define metadata for your flat file using the Create Flat File Wizard.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref69"></a>
<h3 class="sect2">About Flat File Modules and Locations</h3>
<p>You can create flat file modules in your project that store metadata for source and target files. Each flat file module must be associated with a metadata and data location. When you specify a location for a module, both metadata location and data location point to the same location. You can specify different locations for the metadata and the data by editing the module.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref70"></a>
<h3 class="sect2">Working with Flat Files as Sources or Targets</h3>
<p>The usual cycle, when working with a flat file as a source or target, is to:</p>
<ol>
<li>
<p>Ensure that the location where the flat file stored is accessible from the host on which the mappings accessing the flat file is deployed.</p>
</li>
<li>
<p>Create a flat file module and associate it with the flat file module location. See <a href="#i1075978">"Creating Flat File Modules"</a>.</p>
</li>
<li>
<p>Define the flat file and specify its structure, based on whether its a character file, binary file, or a COBOL copybook. See <a href="#CHDDJHDG">"Using the Flat File Sample Wizard"</a> for details of Flat File wizard. See <a href="#CHDHHEBF">"Using the Create Flat File Wizard"</a> for details of creating a flat file for a binary file. See <a href="#BABGGBJG">"Importing Metadata Definitions from COBOL Copybooks"</a> for details of importing metadata from COBOL copybooks.</p>
</li>
<li>
<p>Select the type of mapping to use to extract data from the file. Consider whether you want to use flat file operators or external tables. See <a href="#BABJEBEH">"Choosing Between External Table and Flat File Operators"</a>. If using a PL/SQL mapping, create external tables to represent the file contents as database tables.</p>
</li>
<li>
<p>Design your PL/SQL or SQL*Loader ETL mapping using the flat files as a source or target. See <a class="olink WBETL" href="../e10935/toc.htm"><span class="italic">Oracle Warehouse Builder Data Modeling, ETL, and Data Quality Guide</span></a> for details of creating mappings.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref71"></a>
<h3 class="sect2">Flat Files as Sources</h3>
<p><a id="sthref72"></a><a id="ABC2069229"></a>To use a flat file as a source, first define the metadata structure of the flat file and then import metadata into it.</p>
<a id="BABDEJDJ"></a>
<div class="sect3">
<h4 class="sect3">Defining Character Data Files</h4>
<p>You can import metadata from various types of files including character data set files and COBOL copybooks.</p>
<p><span class="bold">To define flat file metadata, complete the following steps:</span></p>
<ol>
<li>
<p>Create a flat file module.</p>
<p>Create a module for each unique directory or path in your file system from which you want to import file metadata. See <a href="#i1075978">"Creating Flat File Modules"</a>.</p>
</li>
<li>
<p>Define the structure of the file.</p>
<p>The Flat File Sample Wizard enables you to view a sample of the flat file and to define record organization and file properties. The wizard enables you to sample and define common flat file formats such as string and ASCII. See <a href="#CHDDJHDG">"Using the Flat File Sample Wizard"</a>.</p>
<p>For files with complex record structures, the Flat File Sample Wizard may not be suitable for sampling the data. In such cases, you must create a flat file and define its structure accordingly. See <a href="#BABFACGD">"Using the Create Flat File Wizard"</a> for creating and defining the structure of a flat file.</p>
<p>For COBOL copybooks, use the COBOL import dialog box to import metadata from copybooks. You can also set the import options depending on the copybook. See <a href="#BABGGBJG">"Importing Metadata Definitions from COBOL Copybooks"</a> for more details.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref73"></a>
<h4 class="sect3">About External Tables</h4>
<p><a id="sthref74"></a>An external table is a read-only table that is associated with a single record type in a flat file. External tables represent data from a non-relational source in a relational table format. When you use an external table in a mapping, column properties are based on the SQL properties defined when importing the flat file. For more information about SQL properties for flat files, see <a href="#CHDDGGIE">"SQL Properties"</a>.</p>
<p>When you use an external table as a source table in a mapping, you can use it as a regular source table. Oracle Warehouse Builder generates PL/SQL code to select rows from the external table. You can also get parallel access to the file through the table. You also have access to additional relational function operators.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can use external tables only for source tables.</div>
<p>You can either import an existing external table from another database as described in<a href="#BABJAEDH">"Importing an External Table"</a> or define a new external table as described in <a href="#i84705">"Creating a New External Table Definition"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="BABJEBEH"></a>
<div class="sect3">
<h4 class="sect3">Choosing Between External Table and Flat File Operators</h4>
<p>You can introduce source data from a flat file into a mapping either through an external table or a flat file operator. In general, external tables are the preferred method of loading large volumes of data from flat files.</p>
<p>Note the following details when comparing external tables and flat files:</p>
<ul>
<li>
<p>External table operators and PL/SQL mappings provide for maximum performance, including exploitation of database parallelism during load. The full range of transformation operators is available, because the mappings are PL/SQL mappings. Over time, ETL mappings built with external tables takes advantage of further performance improvements at the database level.</p>
</li>
<li>
<p>Flat file operators and SQL*Loader mappings are a fully supported method of loading flat files. Oracle Warehouse Builder generates native SQL*Loader code for a SQL*Loader mapping. A more limited range of operators is supported in SQL*Loader mappings. You must stage data in an intermediate table and then use a PL/SQL mapping to transform it further before loading into a final target.</p>
</li>
</ul>
<p>For more information about differences between external tables and SQL*Loader (flat file operators), see <a class="olink SUTIL" href="../../server.112/e22490/toc.htm"><span class="italic">Oracle Database Utilities</span></a>.</p>
<p>For more information about different types of mappings, see <a class="olink WBETL05003" href="../../owb.112/e10935/mappings.htm#WBETL05003"><span class="italic">Oracle Warehouse Builder Data Modeling, ETL, and Data Quality Guide</span></a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="WBDOD10545" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref75"></a>
<h3 class="sect2">Flat Files as Targets</h3>
<p><a id="sthref76"></a><a id="ABC1597259"></a>When you use a flat file as a target, it is desirable to define the metadata but is not necessary. For example, while using unbound flat file operators in mappings, the metadata for the flat file might not be defined before using it in the mapping. However, in practice, it might be more convenient to define the metadata definitions of a target file rather than to use an existing file as a target.</p>
<p class="subhead2"><a id="WBDOD90708"></a>Creating a New Flat File as a Target</p>
<p>Create a flat file and define its structure before loading data into it.</p>
<p><span class="bold">To design a new flat file, complete the following steps:</span></p>
<ol>
<li>
<p>Create a module for the flat file. See <a href="#i1075978">"Creating Flat File Modules"</a>.</p>
</li>
<li>
<p>Use the Create Flat File Wizard to design the metadata structure of the flat file. See <a href="#CHDHHEBF">"Using the Create Flat File Wizard"</a>.</p>
</li>
<li>
<p>Use the newly created flat file as a target.<a id="sthref77"></a></p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can also create a target flat file in a mapping. Add an unbound flat file operator to a mapping, then map from the source table or operator to the flat file. Finally, do a Create and Bind for the flat file operator. For more information about mappings, see <a class="olink WBETL" href="../e10935/toc.htm"><span class="italic">Oracle Warehouse Builder Data Modeling, ETL, and Data Quality Guide.</span></a></div>
</div>
<!-- class="sect2" -->
<a id="i1075978"></a>
<div id="WBDOD10546" class="sect2">
<h3 class="sect2">Creating Flat File Modules</h3>
<p><a id="ABC1597270"></a>Flat files are stored within modules that enable you to group multiple flat files.</p>
<p><span class="bold">To create a flat file module:</span></p>
<ol>
<li>
<p>Right-click the <span class="bold">Files</span> node in the Projects Navigator and select <span class="bold">New Flat File Module</span>.</p>
<p>Oracle Warehouse Builder displays the Welcome page for the Create Module Wizard.</p>
</li>
<li>
<p>Define the module in the following steps:</p>
<ol>
<li>
<p><a href="#CHDFAAFC">"Describing the Flat File Module"</a></p>
</li>
<li>
<p><a href="#CHDHBECD">"Defining Locations for Flat File Modules"</a></p>
</li>
</ol>
</li>
<li id="CHDDHICJ">
<p>The Finish page summarizes the information you provided on each of the wizard pages. When you click <span class="bold">Finish,</span> the wizard creates the flat file module and inserts it under Files in the Projects Navigator.</p>
<p>After creating a flat file module, you can either define a new flat file, as described in <a href="#CHDHHEBF">"Using the Create Flat File Wizard"</a>, import existing flat files into this module as described in <a href="#CHDDJHDG">"Using the Flat File Sample Wizard"</a>, or import a COBOL file as described in <a href="#BABIBDBC">"Importing a Copybook"</a>.</p>
</li>
</ol>
<a id="CHDFAAFC"></a>
<div id="WBDOD10547" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Describing the Flat File Module</h4>
<p>Enter a name and an optional description for the flat file module on the Name and Description page.</p>
</div>
<!-- class="sect3" -->
<a id="CHDHBECD"></a>
<div id="WBDOD10548" class="sect3"><a id="CHDIJAJC"></a>
<h4 class="sect3">Defining Locations for Flat File Modules</h4>
<p>Locations for flat file modules identify the paths in the file system from which you sample existing files or to which you create new files. You can define a new location or select an existing location on the Connection Information page.</p>
<p>Flat file modules have metadata and data locations. When you specify a location for a module, both metadata location and data location point to the same location. You can specify different locations for the metadata and the data by editing the module.</p>
<p>To import metadata from flat files located in different directories or paths in the system then for ease of use, create separate Oracle Warehouse Builder modules for each path. For example, suppose the files are located at the following paths, <code>c:\folder1</code> and <code>c:\folder1\subfolder</code>. You can create two file modules <span class="italic">C_FOLDER1</span> and <span class="italic">C_FOLDER1_SUBFOLDER</span> and associate them with the corresponding paths. However, associating a module with a path does not restrict you from importing metadata definitions of files residing in a different path. You can define a path as the default, and later import files from a different path.</p>
<p>A data location identifies only a folder in the file system and does not include subfolders.</p>
</div>
<!-- class="sect3" -->
<a id="CHDGEDAA"></a>
<div id="WBDOD10549" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Connection Information Page</h4>
<p>The Connection page is displayed with a default location name that is based on the module name that you entered in the Name and Description page. If you do not want to create a location, then select from the list of existing locations.</p>
<p>On the Connection Information page, click <span class="bold">Edit</span> to open the <a href="#CHDCACAG">"Edit File System Location Dialog Box"</a> and specify the location details. This location becomes the metadata and data location.</p>
</div>
<!-- class="sect3" -->
<a id="CHDCACAG"></a>
<div id="WBDOD10550" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Edit File System Location Dialog Box</h4>
<p><a id="sthref78"></a>On the Edit File System Location dialog box, enter the fully qualified directory, including the drive letter.</p>
<p><a href="#BABJCJFH">Figure 3-1</a> shows the Edit Location dialog box.</p>
<div class="figure">
<p class="titleinfigure"><a id="BABJCJFH"></a>Figure 3-1 Edit File System Location Dialog Box</p>
<img width="716" height="436" src="img/flatfile_location.gif" alt="Description of Figure 3-1 follows" /><br />
<a id="sthref79" href="img_text/flatfile_location.htm">Description of "Figure 3-1 Edit File System Location Dialog Box"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDHHEBF"></a>
<div id="WBDOD10551" class="sect1"><!-- infolevel="all" infotype="General" --><a id="BABFACGD"></a>
<h2 class="sect1">Using the Create Flat File Wizard<a id="ABC1597289"></a><a id="ABC1606862"></a></h2>
<p><a id="ABC1597283"></a>Use the Create Flat File Wizard to design the structure of a new flat file in Oracle Warehouse Builder. This could be the case when you must define binary files and using the Flat File Sample wizard is not a viable solution. You can also use this wizard to create a flat file for use as a target in a mapping.</p>
<p>To use the Create Flat File wizard, right-click the flat file module and select <span class="bold">New Flat File</span>.</p>
<p>The Create Flat File Wizard guides you in completing the following steps:</p>
<ul>
<li>
<p><a href="#CJAGDHBA">"Describing a Flat File"</a></p>
</li>
<li>
<p><a href="#CJAEJFJE">"Defining File Properties for a Flat File"</a></p>
</li>
<li>
<p><a href="#CHDJFCAB">"Defining the Record Type for a Flat File"</a></p>
</li>
<li>
<p><a href="#CHDBADGH">"Defining Field Properties for a Flat File"</a></p>
</li>
</ul>
<a id="CJAGDHBA"></a>
<div id="WBDOD10552" class="sect2">
<h3 class="sect2">Describing a Flat File</h3>
<p><a id="sthref80"></a>Use the Name and Description page to provide a name for the flat file and to specify general properties associated with it.</p>
<ul>
<li>
<p><span class="bold">Name</span>: This name uniquely identifies the file within the module. Enter a name that does not include a space or any punctuation. You can include an underscore. You can use uppercase and lowercase letters. Do not start the name with a digit. Do not start a name with the reserved prefix <code>OWB$</code>.</p>
</li>
<li>
<p><span class="bold">Default Physical File Name</span>: A physical file name may be specified. This name can be altered at any time using configuration properties. If you are creating a new file, you can leave this name blank. If you are defining an existing binary file, enter the name of the file. Do not include the file path.</p>
</li>
<li>
<p><span class="bold">Character set</span>: Select a character set or accept the default character set defined for the system on which Oracle Warehouse Builder resides. For complete information about NLS character sets, see <a class="olink NLSPG" href="../../server.112/e10729/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a><span class="italic">.</span></p>
</li>
<li>
<p><span class="bold">Description</span>: You can enter an optional description for the file.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CJAEJFJE"></a>
<div id="WBDOD10553" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Defining File Properties for a Flat File</h3>
<p>Use the File Properties page to specify <a href="#CJAEGFDE">Record Organization</a>, <a href="#CJAFIJCC">Logical Record Definition</a>, <a href="#CJAHHHJH">Number of Rows to Skip</a>, and the <a href="#CJAEAFGI">Field Format</a> for the flat file as shown in <a href="#BABBJJAH">Figure 3-2</a>.</p>
<p>Use the file properties page to specify Record Organization, Logical Record Definition, Number of Rows to Skip, and the Field Format for the flat file.</p>
<a id="CJAEGFDE"></a>
<div id="WBDOD10554" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Record Organization</h4>
<p>Indicate how to organize the records in the file. Select between the two options to indicate how the length of each record in the file is determined:</p>
<ul>
<li>
<p><span class="bold">Records delimited by:</span> Select this option to designate the end of each record by a delimiter. Then specify that record delimiter. You can accept the default record delimiter, new line (\n), or you can enter a new value. You can provide multiple characters and hexadecimal characters as a record delimiter. The hexadecimal character format is <code>x'&lt;hexadecimal string&gt;'</code> or <code>X'&lt;hexadecimal string&gt;'</code>. Using hexadecimal characters is useful if the delimiter character is not a new line character (\n) or carriage return&lt;CR&gt;. For example, to specify the pipe symbol (|) as the delimiter, use its hexadecimal value <code>x'7C'</code>.</p>
</li>
<li>
<p><span class="bold">Record length (in characters):</span> Select this option to create a file with all records having the same length. Then specify the number of characters in each record. For files with multibyte characters, count a multibyte character as one character.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CJAFIJCC"></a>
<div id="WBDOD10555" class="sect3">
<h4 class="sect3">Logical Record Definition</h4>
<p>By default, the wizard creates a file in which each physical record corresponds to one logical record. You can override the default to create a file composed of logical records that correspond to multiple physical records.</p>
<ul>
<li>
<p><span class="bold">Number of physical records for each logical record</span>: The data file contains a fixed number of physical records for each logical record.</p>
<pre>
PHYSICAL_RECORD1
PHYSICAL_RECORD2
PHYSICAL_RECORD3
PHYSICAL_RECORD4
</pre>
<p>In the preceding example, if the number of physical records for each logical record is 2, then <code>PHYSICAL_RECORD1</code> and <code>PHYSICAL_RECORD2</code> form one logical record and <code>PHYSICAL_RECORD3</code> and <code>PHYSICAL_RECORD4</code> form the second logical record.</p>
</li>
<li>
<p><span class="bold">End character of the current physical record</span>: The data file contains a variable number of physical records with a continuation character at the end that signifies that the record is continued in the next physical record.</p>
<p>In the following example, the continuation character is a percentage sign (<span class="italic">%</span>) after the record.</p>
<pre>
PHYSICAL_RECORD1%
PHYSICAL_RECORD2       end log rec 1
PHYSICAL_RECORD3%
PHYSICAL_RECORD4       end log rec 2
</pre></li>
<li>
<p><span class="bold">Start character of the next physical record</span>: The data file contains a variable number of physical records with a continuation character at the beginning of each physical record that signifies that the record continues from the previous physical record.</p>
<p>The following example shows two logical records with a continuation character at beginning of the record.</p>
<pre>
PHYSICAL_RECORD1
%PHYSICAL_RECORD2      end log rec 1
PHYSICAL_RECORD3
%PHYSICAL_RECORD4      end log rec 2
</pre>
<p>More than two records can be joined with this technique. The following example shows four physical records for each logical record using continuation at beginning.</p>
<pre>
PHYSICAL_RECORD1
%PHYSICAL_RECORD2
%PHYSICAL_RECORD25
%PHYSICAL_RECORD26   end log record 1
PHYSICAL_RECORD3
%PHYSICAL_RECORD4
%PHYSICAL_RECORD45
%PHYSICAL_RECORD46 end log record 2
</pre></li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CJAHHHJH"></a>
<div id="WBDOD10556" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Number of Rows to Skip</h4>
<p>When defining an existing file, indicate the number of records to skip at execution time in <span class="bold">Skip rows.</span> This is useful for skipping over header and field name records.</p>
<p>When creating a new target file, you can leave this value blank.</p>
</div>
<!-- class="sect3" -->
<a id="CJAEAFGI"></a>
<div id="WBDOD10557" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Field Format</h4>
<p>Select between <span class="bold">Fixed Length</span> and <span class="bold">Delimited</span> formats for the file.</p>
<p>To create a delimited file, specify the following properties:</p>
<ul>
<li>
<p><span class="bold">Field delimiter</span>: Field delimiters designate where one field ends and another begins. You can enter a field delimiter or select one from the list. The list displays common field delimiters. However, you may enter any character as a delimiter except the ones used for enclosures. The default is the comma (,). You can provide multiple characters and hexadecimal characters as a delimiter. The hexadecimal character format is <code>x'&lt;hexadecimal string&gt;'</code> or <code>X'&lt;hexadecimal string&gt;'</code>. For example, to specify the pipe symbol (|) as the delimiter, use its hexadecimal value <code>x'7C'</code>.</p>
</li>
<li>
<p><span class="bold">Enclosures (Left and Right)</span>: Some delimited files contain enclosures that denote text strings within a field. If the file contains enclosures, enter an enclosure character in the text box or select one from the list. The list displays common enclosures. However, you may enter any character. The default for both the left and right enclosure is the double quotation mark ("). You can specify multiple characters and hexadecimal characters as field enclosures.</p>
</li>
</ul>
<div class="figure">
<p class="titleinfigure"><a id="BABBJJAH"></a>Figure 3-2 File Properties Page</p>
<img width="643" height="537" src="img/createflatfile_properties.gif" alt="Description of Figure 3-2 follows" /><br />
<a id="sthref81" href="img_text/createflatfile_properties.htm">Description of "Figure 3-2 File Properties Page"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDJFCAB"></a>
<div id="WBDOD10558" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Defining the Record Type for a Flat File</h3>
<p>Indicate whether the file you create is to contain a single record type or multiple record types. The default is set to <span class="bold">Single Record.</span></p>
<p>If the file contains multiple record types, select <span class="bold">Multi Record</span>. For each record type you want to create, specify values under <span class="bold">Record Type Location</span> and then its type value and record name.</p>
<p>Valid entries for Record Type Location depend on the field format you selected on the File Properties page, fixed length or delimited fields.</p>
<p>For example, if you specify the fields as delimited, then indicate the field position as shown in <a href="#BABFEIAC">Figure 3-3</a>.</p>
<p>For fixed-length files, the page displays two fields, Start Position and Length, under Record Type Location. Indicate the start position and the length of the field.</p>
<div class="figure">
<p class="titleinfigure"><a id="BABFEIAC"></a>Figure 3-3 Record Type Properties Page</p>
<img width="698" height="537" src="img/createflatfile_record.gif" alt="Description of Figure 3-3 follows" /><br />
<a id="sthref82" href="img_text/createflatfile_record.htm">Description of "Figure 3-3 Record Type Properties Page"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="CHDBADGH"></a>
<div id="WBDOD10559" class="sect2">
<h3 class="sect2">Defining Field Properties for a Flat File</h3>
<p>Use the Field Properties page to define properties for each field.</p>
<p>Since you can use a flat file in a mapping either directly as a source or a target, or indirectly through an external table, the Field Properties page shows both <a href="#CJAHGGIA">"SQL*Loader Properties"</a> and <a href="#i1076496">"SQL Properties"</a>. Use the scroll bar to scroll to the right and view all the properties.</p>
<a id="BABEAAJG"></a>
<div id="WBDOD10560" class="sect3">
<h4 class="sect3">SQL*Loader Properties</h4>
<p><a id="sthref83"></a><a id="sthref84"></a>The first set of properties the wizard displays are for the SQL*Loader utility. When you use the flat file directly as a source in a mapping, SQL*Loader and the properties you set here are used. SQL*Loader properties include details of how the following are mapped to a relational table: <a href="#BABIIHBB">"Type"</a>, <a href="#BABHAEFE">"Length"</a>, <a href="#BABEBGCE">"Precision"</a>, <a href="#BABDDHJJ">"Scale"</a>, <a href="#BABCDGGC">"Mask"</a>, <a href="#BABGEBJG">"NULLIF"</a>, and <a href="#BABHFFFB">"DEFAULTIF"</a>. See <a class="olink CNCPT" href="../../server.112/e40540/toc.htm"><span class="italic">Oracle Database Concepts</span> for more details.</a></p>
<p class="subhead2"><a id="BABIIHBB"></a><a id="WBDOD90709"></a>Type</p>
<p>Describes the data type of the field for SQL*Loader. You can use the wizard to import many data types such as <code>CHAR</code>, <code>DATE</code>, <code>DECIMAL</code> <code>EXTERNAL</code>, <code>FLOAT EXTERNAL</code>, <code>INTEGER EXTERNAL</code>, <code>ZONED</code>, and <code>ZONED EXTERNAL</code>. For complete information about SQL*Loader field and data types, see <a class="olink SUTIL" href="../../server.112/e22490/toc.htm"><span class="italic">Oracle Database Utilities</span></a>.</p>
<p class="subhead2"><a id="BABHAEFE"></a><a id="WBDOD90710"></a>Length</p>
<p>For delimited files, specifies the maximum field length to be used by SQL* Loader.</p>
<p class="subhead2"><a id="BABEBGCE"></a><a id="WBDOD90711"></a>Precision</p>
<p>Specifies the number of digits for certain data types such as Zoned and Float. See <a class="olink SUTIL1151" href="../../server.112/e22490/ldr_field_list.htm#SUTIL1151"><span class="italic">Oracle Database Utilities</span></a> for more details.</p>
<p class="subhead2"><a id="BABDDHJJ"></a><a id="WBDOD90712"></a>Scale</p>
<p>Specifies the number of decimal digits for certain data types such as Zoned and Float. See <a class="olink SUTIL1511" href="../../server.112/e22490/adrci.htm#SUTIL1511"><span class="italic">Oracle Database Utilities</span></a> for more details.</p>
<p class="subhead2"><a id="BABCDGGC"></a><a id="WBDOD90713"></a>Mask</p>
<p>SQL*Loader uses DD-Mon-YY as its default date mask. You can override this default by entering a valid date mask when you describe the file. For example, if the input data has the format DD-Mon-YYYY rather than SQL*Loader default, you can enter the true format as a mask.</p>
<p class="subhead2"><a id="BABGEBJG"></a><a id="WBDOD90714"></a>NULLIF</p>
<p>You can override the default action of SQL*Loader by placing a NULLIF condition on a field. For example, when a character field contains all blanks, you can direct SQL*Loader to mark the field as null rather than storing the blanks. Valid syntax for this field includes <span class="italic">=BLANKS, ='quoted string', =X'ff'</span> to indicate hexadecimal values, and <span class="italic">!=</span> for 'not equal to' logic.</p>
<p class="subhead2"><a id="BABHFFFB"></a><a id="WBDOD90715"></a>DEFAULTIF</p>
<p>You can override the default action of SQL*Loader by placing a DEFAULTIF condition on a field. For example, when a numeric or DATE field contains all blanks, SQL*Loader rejects the entire record. To override this action, type <span class="italic">=BLANKS</span> in the DEFAULTIF property. When SQL*Loader evaluates this condition, it sets the numeric field to zeros and loads the record. Valid syntax for this field includes <span class="italic">=BLANKS, ='quoted string', =X'ff'</span> to indicate hexadecimal values, and <span class="italic">!=</span> for 'not equal to' logic.</p>
</div>
<!-- class="sect3" -->
<a id="CHDDGGIE"></a>
<div id="WBDOD10561" class="sect3">
<h4 class="sect3">SQL Properties</h4>
<p>These properties specify how the fields in a flat file translate to the columns in a relational table. They are used to define the characteristics of an external table. They are also used to automatically generate fields for mapping to relational operators. Similarly, if the flat file is used as a target, then these properties are used to generate the PL/SQL code.</p>
<p>The SQL properties you set here have the following implications for mapping design, validation, and generation:</p>
<ul>
<li>
<p><span class="bold">External table</span>: If you create an external table based on a single flat file record type, the columns properties are based on the SQL properties you defined for the flat file. For more information about external tables, see <a href="#i113670">"Using External Tables"</a>.</p>
</li>
<li>
<p><span class="bold">Populating an Empty Mapping Object</span>: In a mapping, if you populate an empty relational object with the metadata, then the object inherits the SQL properties you defined for the flat file source.</p>
</li>
<li>
<p><span class="bold">Flat file target</span>: If you use the flat file as a target in a mapping, the target does not inherit the SQL properties. Instead, all fields inherit the default SQL*Loader data type.</p>
</li>
</ul>
<p class="subhead2"><a id="BABDFHDA"></a><a id="WBDOD90716"></a>SQL Type</p>
<p>Oracle Warehouse Builder supports many SQL data types such as <code>CHAR</code>, <code>DATE</code>, <code>FLOAT</code>, and <code>BLOB</code>.</p>
<p>The wizard assigns a default value for the SQL type based on SQL*Loader properties you set. If you accept the default SQL type, the type is updated if you later change SQL*Loader properties. However, if you override the SQL type by selecting a new SQL type from the list, it then becomes independent of the flat file SQL*Loader data type.</p>
<p class="subhead2"><a id="BABBJEAB"></a><a id="WBDOD90717"></a>SQL Length</p>
<p>This property defines the length for the SQL column, if appropriate.</p>
<p class="subhead2"><a id="BABGJGGD"></a><a id="WBDOD90718"></a>SQL Precision</p>
<p>This property defines the precision for the SQL column, if appropriate. For example, when defining <code>NUMBER</code> and <code>FLOAT</code> fields, the precision may be set.</p>
<p class="subhead2"><a id="BABGGICH"></a><a id="WBDOD90719"></a>SQL Scale</p>
<p>This property defines the scale for the SQL column, if appropriate. For example, when defining <code>NUMBER</code> and <code>FLOAT</code> fields, the scale may be set.<a id="sthref85"></a><a id="sthref86"></a><a id="sthref87"></a></p>
<p>Select <span class="bold">Automatically update start and end positions for all fields</span> if you want all the field positions to be automatically recalculated based on changes made to any field.</p>
<p>Once you define the metadata of the new flat file, you can use it as a source or target file, or create an external table using a record from the file.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1076108"></a>
<div id="WBDOD10562" class="sect1">
<h2 class="sect1">Importing Definitions from <a id="sthref88"></a><a id="sthref89"></a><a id="sthref90"></a>Flat Files Using Sampling</h2>
<p><a id="sthref91"></a>If you have existing flat files to use as sources, then you can import and sample the metadata from these flat files. Use the File Import dialog box to import metadata from flat files. This metadata must be imported into an existing file module.</p>
<p><span class="bold">To use the Flat File Sampling Wizard:</span></p>
<ol>
<li>
<p>Establish connectivity to the files you want to import.</p>
<p>Because the Flat File Sample Wizard runs on the host running the Design Center client, ensure that the files to be sampled are accessible from that host. You can either mount a remote file system across your network using a method such as network file system (NFS) or Windows file sharing, or copy the files, or a representative section of the files, to a file system on or accessible from the Design Center client host.</p>
</li>
<li>
<p>Create a flat file module that contains the imported flat file definitions. See <a href="#i1075978">"Creating Flat File Modules"</a> for details.</p>
<p>Either create a module for each folder in the file system from which you want to import files or use the same module to import file definitions from multiple folders.</p>
<p>When you create a flat file module, the location corresponding to this module is a path in the file system which acts as the metadata and data location. Use the Connection Information Page of the Create Module Wizard to specify this path.</p>
<p>A flat file location does not include subfolders of the specified folder.</p>
</li>
<li>
<p>Right-click the flat file module and select <span class="bold">Import</span>, <span class="bold">Flat File</span>. Alternatively, select the flat file module, and then from the main menu, select <span class="bold">File</span>, <span class="bold">Import</span>, <span class="bold">Flat File</span>.</p>
<p>The File Import dialog box is displayed.</p>
</li>
<li>
<p>Click <span class="bold">Add Sample File</span>, and select the files to import.</p>
<p>You can add single or multiple files into a module. All the files you add are listed under <span class="bold">Sample File</span>. If you specify a file in the <span class="bold">Same As</span> field, then the definition of the sampled file is based on the definition of the file specified in the <span class="bold">Same As</span> field.</p>
</li>
<li>
<p>Click <span class="bold">Import</span>. The Flat File Sample wizard is started. The files are sampled in the order they were listed under Sample File.</p>
</li>
<li>
<p>The Flat File Sample wizard enables you to view a sample of the flat file while you are defining it. Each step of the wizard enables you to design the definition and verify that the definition is correct. See <a href="#CHDDJHDG">"Using the Flat File Sample Wizard"</a> for more information.</p>
<p>For binary files, you may prefer using the Create Flat File wizard. See <a href="#CHDHHEBF">"Using the Create Flat File Wizard"</a>.</p>
<p>The wizard creates definitions for the files, stores the definitions in the flat file module, and inserts the file names under the flat file module in the Projects Navigator.</p>
</li>
</ol>
<a id="CHDDJHDG"></a>
<div id="WBDOD10563" class="sect2">
<h3 class="sect2">Using the Flat File Sample Wizard</h3>
<p>Use the Flat File Sample Wizard as an aid in defining metadata for flat files.</p>
<p>This wizard samples delimited and fixed format files. It does not sample multibyte character file with a fixed record format. For these and other files containing non-displayable data, such as binary files, see <a href="#CHDHHEBF">"Using the Create Flat File Wizard"</a>.</p>
<p>After you complete the Flat File Sample Wizard, the metadata is defined in the workspace and you can use the flat files as source or target operators in a mapping. For more information about mappings, see the <a class="olink WBETL" href="../e10935/toc.htm"><span class="italic">Oracle Warehouse Builder Data Modeling, ETL, and Data Quality Guide</span></a>.</p>
<div id="WBDOD90579" class="sect3"><a id="sthref92"></a>
<h4 class="sect3">Flat File Wizard for Simple Flat Files</h4>
<p>For simple flat files that are delimited and contain a single record type, the Flat File wizard guides you through the following tasks:</p>
<ul>
<li>
<p><a href="#i1076211">"Describing the Flat File"</a></p>
</li>
<li>
<p><a href="#BABCFABE">"Specifying the Record Organization"</a></p>
</li>
<li>
<p><a href="#BABGIEDG">"Specifying Field Properties"</a></p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1076211"></a>
<div id="WBDOD10564" class="sect3">
<h4 class="sect3">Describing the Flat File</h4>
<p>Use the Name page to describe the flat file you are sampling.</p>
<ul>
<li>
<p><span class="bold">Name</span>: This name uniquely identifies the file in the module. By default, the wizard creates a name based on the name of the source file by replacing invalid characters with an underscore. For example, if the file name is <code>myfile.dat,</code> the wizard assign the workspace name <code>myfile_dat.</code></p>
<p>If you rename the file, do not include a space or any punctuation in the name. You can include an underscore. You can use uppercase and lowercase letters. Do not start the name with a digit. Do not start a name with the reserved prefix <code>OWB$</code>.</p>
</li>
<li>
<p><span class="bold">Description</span>: You can enter an optional description for the file.</p>
</li>
<li>
<p><span class="bold">Character set</span>: Character sets determine what languages can be represented in database objects and files. The default Globalization Support character set matches the character set defined for the computer hosting Oracle Warehouse Builder. If the character set differs from that of the source file, the data sample might appear unintelligible. You can display the data sample in the character set native to the source by selecting it from the list. For complete information about NLS character sets, see <a class="olink NLSPG" href="../../server.112/e10729/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a><span class="italic">.</span></p>
</li>
<li>
<p><span class="bold">Number of characters to sample</span>: This value specifies the number of characters that is read and displayed. The number of characters that is read cannot be canceled, so ensure that you pick a reasonable number of characters. If you are sampling a multi-record file, then ensure that the sample is large enough to include at least one of each type. By default, the wizard samples the first 10000 characters. To determine an optimum value for this field, see <a href="#i1085399">"Example: Flat File with Multiple Record Types"</a>.</p>
</li>
<li>
<p><span class="bold">Advanced</span>: Do not click the <span class="bold">Advanced</span> button for simple flat files. The advanced option is required only for complex flat files as described in <a href="#BABGBBFB">"Flat File Wizard For Complex Flat Files"</a>.</p>
</li>
</ul>
<p>Click <span class="bold">Next</span> to continue with <a href="#BABCFABE">"Specifying the Record Organization"</a>. At all steps, the wizard updates the sample displayed at the bottom of the wizard page. You can use the scroll bars to see the sample data.</p>
</div>
<!-- class="sect3" -->
<a id="BABCFABE"></a>
<div id="WBDOD90580" class="sect3">
<h4 class="sect3">Specifying the Record Organization</h4>
<p>Specify the following properties:</p>
<ul>
<li>
<p><span class="bold">Records delimited by</span>: Select this option if the end of each record is designated by a delimiter. Then specify that record delimiter. You can accept the default record delimiter, carriage return (&lt;CR&gt;), or you can enter a new value. For symbols other than \n and &lt;CR&gt;, specify the hexadecimal value of the character used as the delimiter.</p>
</li>
<li>
<p><span class="bold">Record length (in characters)</span>: Select this option if each record in the file is the same length. Then specify the number of characters in each record. For files with multibyte characters, count a multibyte character as one character.</p>
</li>
<li>
<p><span class="bold">Field delimiter</span>: Field delimiters designate where one field ends and another begins. You can enter a field delimiter or select one from the list. The list displays common field delimiters. However, you may enter any character as a delimiter except the ones used for enclosures. The default is the comma (,). You can also specify multiple characters and hexadecimal characters as a field delimiter.</p>
</li>
<li>
<p><span class="bold">Enclosures (Left and Right)</span>: Some delimited files contain enclosures that denote text strings within a field. If the file contains enclosures, enter an enclosure character in the text box or select one from the list. The list displays common enclosures. However, you may enter any character. The default for both the left and right enclosure is the double quotation mark ("). Multiple characters and hexadecimal characters can be specified as field enclosures.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BABGIEDG"></a>
<div id="WBDOD90575" class="sect3">
<h4 class="sect3">Specifying Field Properties</h4>
<p>Use the Field Properties page in the Flat File Sample Wizard to define properties for each field. The wizard assigns a name to each field. It assigns 'C1'to the first field, 'C2' to the second, and so on. To rename fields, click a field and enter a new name.</p>
<p>For single record file types, you can instruct the wizard to use the first record to name the fields. Indicate this by selecting the <span class="bold">Use the first record as the field names</span> box.</p>
<p>The Field Properties page shows both <a href="#CJAHGGIA">"SQL*Loader Properties"</a> and <a href="#i1076496">"SQL Properties"</a>. Use the scroll bar to scroll to the right and view all the properties.</p>
<p>The wizard deactivates properties that do not apply to a given data type. For example, you can edit the length for a <code>CHAR</code>, but precision and scale are not available. Deactivated properties are grayed out.</p>
<a id="BABCFEBE"></a>
<div id="WBDOD10576" class="sect4">
<h5 class="sect4">SQL*Loader Properties</h5>
<p>The first set of properties the wizard displays are for the SQL*Loader utility. When you use the flat file directly as a source in a mapping, SQL*Loader and the properties you set here are used. SQL*Loader properties include details of how the following are mapped to a relational table: <a href="#BABIIHBB">"Type"</a>, <a href="#BABHAEFE">"Length"</a>, <a href="#BABEBGCE">"Precision"</a>, <a href="#BABDDHJJ">"Scale"</a>, <a href="#BABCDGGC">"Mask"</a>, <a href="#BABGEBJG">"NULLIF"</a>, and <a href="#BABHFFFB">"DEFAULTIF"</a>. See <a class="olink CNCPT" href="../../server.112/e40540/toc.htm"><span class="italic">Oracle Database Concepts</span></a> for more details.</p>
</div>
<!-- class="sect4" -->
<a id="BABJFCFH"></a>
<div id="WBDOD10577" class="sect4">
<h5 class="sect4">SQL Properties</h5>
<p>The second set of properties are the SQL properties that include mapping details for <a href="#BABDFHDA">"SQL Type"</a>, <a href="#BABBJEAB">"SQL Length"</a>, <a href="#BABGJGGD">"SQL Precision"</a>, and <a href="#BABGGICH">"SQL Scale"</a>. These properties specify how the fields in a flat file translate to the columns in a relational table. See <a href="#CHDDGGIE">"SQL Properties"</a> for more details.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="BABGBBFB"></a>
<div id="WBDOD90581" class="sect3">
<h4 class="sect3">Flat File Wizard For Complex Flat Files</h4>
<p>For complex files, the Flat File wizard guides you through the following tasks. The advanced mode enables you to define files with fixed length fields (in addition to delimited), files that contain multiple record types, or files that use logical records (multiple physical records per logical record).</p>
<ul>
<li>
<p><a href="#i1076211">"Describing the Flat File"</a></p>
</li>
<li>
<p><a href="#i1076241">"Selecting the Record Organization"</a></p>
</li>
<li>
<p><a href="#i1076288">"Selecting the File Format"</a></p>
</li>
<li>
<p><a href="#i1076265">"Selecting the File Layout"</a></p>
</li>
<li>
<p><a href="#i1076308">"Selecting Record Types (Multiple Record Type Files Only)"</a></p>
</li>
<li>
<p><a href="#i1076383">"Specifying Field Lengths (Fixed-Length Files Only)"</a></p>
</li>
<li>
<p><a href="#i1076434">"Specifying Field Properties"</a></p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="WBDOD90564" class="sect3"><a id="sthref93"></a>
<h4 class="sect3">Describing the Flat File</h4>
<p>Use the Name page to describe the flat file you are sampling.</p>
<ul>
<li>
<p><span class="bold">Name</span>: This name uniquely identifies the file in the workspace. By default, the wizard creates a name based on the name of the source file by replacing invalid characters with an underscore. For example, if the file name is <code>myfile.dat,</code> the wizard assign the workspace name <code>myfile_dat.</code></p>
<p>If you rename the file, do not include a space or any punctuation in the name. You can include an underscore. You can use uppercase and lowercase letters. Do not start the name with a digit. Do not start a name with the reserved prefix <code>OWB$</code>.</p>
</li>
<li>
<p><span class="bold">Description</span>: You can enter an optional description for the file.</p>
</li>
<li>
<p><span class="bold">Character set</span>: Character sets determine what languages can be represented in database objects and files. The default Globalization Support character set matches the character set defined for the computer hosting Oracle Warehouse Builder. If the character set differs from that of the source file, the data sample might appear unintelligible. You can display the data sample in the character set native to the source by selecting it from the list. For complete information about NLS character sets, see <a class="olink NLSPG" href="../../server.112/e10729/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a><span class="italic">.</span></p>
</li>
<li>
<p><span class="bold">Number of characters to sample</span>: You can indicate the number of characters for the wizard to sample from the data file. By default, the wizard samples the first 10000 characters. To determine an optimum value for this field, see <a href="#i1085399">"Example: Flat File with Multiple Record Types"</a>.</p>
</li>
</ul>
<p>Click <span class="bold">Advanced</span> to continue with <a href="#i1076241">"Selecting the Record Organization"</a>. At all steps, the wizard updates the sample displayed at the bottom of the wizard page. You can use the scroll bars to see the sample data.</p>
</div>
<!-- class="sect3" -->
<a id="i1076241"></a>
<div id="WBDOD10565" class="sect3">
<h4 class="sect3">Selecting the Record Organization</h4>
<p>Use the Record Organization page to indicate how records are organized in the file you are sampling. Select between the two options to indicate how the length of each record in the file is determined:</p>
<ul>
<li>
<p><span class="bold">Records delimited by:</span> If the end of each record is designated by a delimiter, then specify that record delimiter. You can accept the default record delimiter, carriage return (&lt;CR&gt;), or enter a new value. You can specify multiple characters and hexadecimal characters as a record delimiter. If the delimiter is a symbol other than <code>\n</code> or <code>&lt;CR&gt;</code>, then specify the hexadecimal character of the symbol. The hexadecimal character format is <code>x'&lt;hexadecimal string&gt;'</code> or <code>X'&lt;hexadecimal string&gt;'</code>.</p>
</li>
<li>
<p><span class="bold">Record length (in characters):</span> Select this option if each record in the file is the same length. Then specify the number of characters in each record. For files with multibyte characters, count a multibyte character as one character.</p>
</li>
</ul>
<div id="WBDOD10566" class="sect4"><a id="sthref94"></a>
<h5 class="sect4">Specifying Logical Records</h5>
<p>The Flat File Sample Wizard enables you to sample files composed of logical records that correspond to multiple physical records. If the file contains logical records, select <span class="bold">File contains logical records</span>. Then select one of the options to describe the file.</p>
<p>The wizard updates the display of the logical record in the lower panel to reflect your selection. The default selection is one physical record for each logical record.</p>
<ul>
<li>
<p><span class="bold">Number of physical records for each logical record:</span> The data file contains a fixed number of physical records for each logical record.</p>
<pre>
PHYSICAL_RECORD1
PHYSICAL_RECORD2
PHYSICAL_RECORD3
PHYSICAL_RECORD4
</pre>
<p>In the preceding example, if the number of physical records for each logical record is 2, then <code>PHYSICAL_RECORD1</code> and <code>PHYSICAL_RECORD2</code> form one logical record and <code>PHYSICAL_RECORD3</code> and <code>PHYSICAL_RECORD4</code> form a second logical record.</p>
</li>
<li>
<p><span class="bold">End character of the current physical record</span>: The data file contains a variable number of physical records with a continuation character at the end that signifies that the record is continued in the next physical record.</p>
<p>In the following example, the continuation character is a percentage sign (<span class="italic">%</span>) after the record.</p>
<pre>
PHYSICAL_RECORD1%
PHYSICAL_RECORD2       end log rec 1
PHYSICAL_RECORD3%
PHYSICAL_RECORD4       end log rec 2
</pre></li>
<li>
<p><span class="bold">Start character of the next physical record</span>: The data file contains a variable number of physical records with a continuation character at the beginning of each physical record that signifies that the record is a continuation of the previous physical record.</p>
<p>The following example shows two logical records with a continuation character at beginning of the record.</p>
<pre>
PHYSICAL_RECORD1
%PHYSICAL_RECORD2      end log rec1
PHYSICAL_RECORD3
%PHYSICAL_RECORD4      end log rec 2
</pre>
<p>More than two records can be joined with this technique. The following example shows four physical records for each logical record using continuation at beginning.</p>
<pre>
PHYSICAL_RECORD1
%PHYSICAL_RECORD2
%PHYSICAL_RECORD25
%PHYSICAL_RECORD26   (end log record 1)
PHYSICAL_RECORD3
%PHYSICAL_RECORD4
%PHYSICAL_RECORD45
%PHYSICAL_RECORD46 (end log record 2)
</pre>
<p>After you complete the logical record information, click <span class="bold">Next</span> to continue with the wizard.</p>
</li>
</ul>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="i1076288"></a>
<div id="WBDOD10567" class="sect3">
<h4 class="sect3">Selecting the File Format</h4>
<p>Use the File Format page to select between <span class="bold">Fixed Length</span> and <span class="bold">Delimited</span> formats for the fields in the file. The Flat File Sample Wizard does not sample multibyte character files with a fixed record format. For such files, use the Create Flat File wizard. For more details, see <a href="#CHDHHEBF">"Using the Create Flat File Wizard"</a>.</p>
<p>When you select a file format, the wizard updates the sample displayed at the bottom of the wizard page. You can use the scroll bars to navigate the sample data.</p>
<p>Fields in a file can either be of fixed length or delimited.</p>
<p>For fixed length fields, select <span class="bold">Fixed Length</span>. If you select this option then you must define the field lengths in the Field Lengths page. See <a href="#i1076383">"Specifying Field Lengths (Fixed-Length Files Only)"</a>.</p>
<p>When the fields are delimited, specify the following properties:</p>
<ul>
<li>
<p><span class="bold">Field delimiter</span>: Field delimiters designate where one field ends and another begins. You can enter a field delimiter or select one from the list. The list displays common field delimiters. However, you may enter any character as a delimiter except the ones used for enclosures. The default is the comma (,). You can also specify multiple characters and hexadecimal characters as a field delimiter. The hexadecimal character format is <code>x'&lt;hexadecimal string&gt;'</code> or <code>X'&lt;hexadecimal string&gt;'</code>.</p>
</li>
<li>
<p><span class="bold">Enclosures (Left and Right)</span>: Some delimited files contain enclosures that denote text strings within a field. If the file contains enclosures, enter an enclosure character in the text box or select one from the list. The list displays common enclosures. However, you may enter any character. The default for both the left and right enclosure is the double quotation mark ("). Multiple characters and hexadecimal characters can be specified as field enclosures.</p>
</li>
</ul>
<p>Click <span class="bold">Next</span> to continue with the wizard.</p>
</div>
<!-- class="sect3" -->
<a id="i1076265"></a>
<div id="WBDOD10568" class="sect3">
<h4 class="sect3">Selecting the File Layout</h4>
<p>Use the File Layout page to specify the number of rows to skip and to select between a single record type versus multiple record types.</p>
<p>Indicate the number of records to skip in <span class="bold">Skip rows</span>. This is useful for skipping over unwanted header information. If one of the records includes field names, skip the preceding header records so that the record containing field names is displayed as the first record in the file. Later in the wizard, on the Field Properties page, you can instruct the wizard to use that record for field names if you are defining a single record file type.</p>
<p>Indicate whether the file contains a single record type or multiple record types. Later in the wizard you can instruct the wizard to scan the file for the record types. For more information about multiple record types, see <a href="#i1076308">"Selecting Record Types (Multiple Record Type Files Only)"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="i1076308"></a>
<div id="WBDOD10569" class="sect3">
<h4 class="sect3">Selecting Record Types (Multiple Record Type Files Only)</h4>
<p>Use the Record Types wizard page to scan the flat file for record types, add or delete record types, and assign type values to the record types.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This step in not used for files with a single record type. If the data file has a single record type and fixed length file format, proceed to <a href="#i1076383">"Specifying Field Lengths (Fixed-Length Files Only)"</a> . If the data file has a single record type and delimited file format, proceed to <a href="#i1076434">"Specifying Field Properties"</a>.</div>
<a id="i1085399"></a>
<div id="WBDOD10570" class="sect4">
<h5 class="sect4">Example: Flat File with Multiple Record Types</h5>
<p>In files with multiple record types, one of the fields distinguishes one record type from the next. When you use the Flat File Sample Wizard, you instruct the wizard to scan a specified field of every record for the record type values.</p>
<p><a href="#i1076334">Figure 3-4</a> shows an example of a comma delimited file with two record types, "<code>m</code>" and "<code>f</code>". In this case, instruct the wizard to scan the third field. The wizard returns "<code>m</code>" and "<code>f</code>" as the type values.</p>
<div id="WBDOD90720" class="figure">
<p class="titleinfigure"><a id="i1076334"></a>Figure 3-4 Example of a File with Multiple Record Types</p>
<img width="216" height="244" src="img/multirecex.gif" alt="This illustration is described in the surrounding text." /><br /></div>
<!-- class="figure" -->
<p>When you use the wizard to sample flat files with multiple record types, ensure that the sample size you specified on the Name page is large enough to include each record type at least once. The default is 10000 characters.</p>
<p>If you do not see all of the required record types in the display area, you must specify a larger sample size on the Name page. Ensure that the sample size is large enough to include all record types. If all record types do not appear within a reasonable number of characters, you can mock up a sample file with rows selected from different parts of the master file to provide a representative set of data. If you know the record layout well, you can scan a representative sample and then manually add new record types.</p>
</div>
<!-- class="sect4" -->
<a id="i1076341"></a>
<div id="WBDOD10571" class="sect4">
<h5 class="sect4">Defining Multiple Record Organization in a Delimited File</h5>
<p>When a delimited flat file contains several different types of records, you can use the scanning feature within the Flat File Sample Wizard to search and label record types.</p>
<p><span class="bold">To complete the Records Type page for a delimited file:</span></p>
<ol>
<li>
<p>Select the one field that identifies the record types in the file.</p>
<p>The wizard displays all the fields in a sample in the lower panel of the page. In the Field position, you can enter the position as it appears in the sample. Unless you specify otherwise, the wizard defaults to the first field in the file.</p>
<p>If you click <span class="bold">Scan</span>, then the wizard scans the file for the field and displays the type values. The wizard assigns default record names (RECORD1, RECORD2...) to each type value.</p>
</li>
<li>
<p>You can edit the record names and the type value.</p>
<p>Click a record name to rename it or select a different record name from the list. You cannot associate a record name with multiple record type values.</p>
</li>
<li>
<p>Click <span class="bold">Next</span> to continue with the wizard.</p>
</li>
</ol>
</div>
<!-- class="sect4" -->
<a id="i1076361"></a>
<div id="WBDOD10572" class="sect4">
<h5 class="sect4">Defining Multiple Record Organization in a Fixed-Length File</h5>
<p>When a fixed-length flat file contains several different types of records, you can use the scanning feature within the Flat File Sample Wizard to search for record types and assign a type value to each record type.</p>
<p><span class="bold">To complete the Records Type page for a fixed-length file:</span></p>
<ol>
<li>
<p>Specify the one field that identifies the record types in the file. Use the ruler or enter values for the <span class="bold">Start position</span> and <span class="bold">End position.</span> To scan for records based on the first field, enter 0 for <span class="bold">Start Position</span><span class="bolditalic">.</span></p>
<p>The wizard indicates the selected field with a red check mark in the ruler in the file sample in the lower panel of the page.</p>
</li>
<li>
<p>Click <span class="bold">Scan.</span></p>
<p>The wizard scans the file field and displays the type values. The wizard assigns default record names (RECORD1, RECORD2...) to each type value.</p>
</li>
<li>
<p>You can edit the record names and type value.</p>
<p>Click a record name to rename it or select a different record name from the list. You cannot associate a record name with multiple record type values.</p>
</li>
<li>
<p>Click <span class="bold">Next</span> to continue with the wizard.</p>
</li>
</ol>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="i1076383"></a>
<div id="WBDOD10573" class="sect3">
<h4 class="sect3">Specifying Field Lengths (Fixed-Length Files Only)</h4>
<p>When you use the Flat File Sample Wizard to define a fixed-length flat file, you must define the length of each field in the file.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This step is not necessary for delimited files. Proceed to <a href="#i1076434">"Specifying Field Properties"</a>.</div>
<p>You can define field lengths by entering in the field lengths or by using the ruler.</p>
<p>If you know the length of each field, enter the field length in <span class="bold">Field Lengths</span>. Separate each length by commas. The wizard displays the changes to the sample at the bottom of the wizard page.</p>
<p>To use the ruler, click any number or hash mark on the ruler. The wizard displays a red check mark on top of the ruler and marks the boundary with a red line. If you make a mistake, double-click the marker to delete it or move the marker to another position. Use the ruler to create markers for each field in the file.</p>
<div id="WBDOD10574" class="sect4"><a id="sthref95"></a>
<h5 class="sect4">Specifying Field Lengths for Multiple Record Files</h5>
<p>You can select the record type by name from <span class="bold">Record Name</span>. Or, you can select <span class="bold">Next Record Type</span> from the lower right corner of the wizard page. The number of records with unspecified field lengths is indicated on the lower left corner of the wizard page.</p>
<p>If the flat file contains multiple record types, the wizard prompts you to specify field lengths for each record type before continuing.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="i1076434"></a>
<div id="WBDOD10575" class="sect3">
<h4 class="sect3">Specifying Field Properties</h4>
<p>Use the Field Properties page in the Flat File Sample Wizard to define properties for each field. The wizard assigns a name to each field. It assigns 'C1'to the first field, 'C2' to the second, and so on. To rename fields, click a field and enter a new name.</p>
<p>For single record file types, you can instruct the wizard to use the first record in the file to name the fields. Indicate this by selecting the <span class="bold">Use the first record as the field names</span> box.</p>
<p>The Field Properties page shows both <a href="#CJAHGGIA">"SQL*Loader Properties"</a> and <a href="#i1076496">"SQL Properties"</a>. Use the scroll bar to scroll to the right and view all the properties.</p>
<p>The wizard deactivates properties that do not apply to a given data type. For example, you can edit the length for a <code>CHAR</code>, but precision and scale are not available. Deactivated properties are grayed out.</p>
<a id="CJAHGGIA"></a>
<div id="WBDOD90576" class="sect4">
<h5 class="sect4">SQL*Loader Properties</h5>
<p>The first set of properties the wizard displays are for the SQL*Loader utility. When you use the flat file directly as a source in a mapping, SQL*Loader and the properties you set here are used. SQL*Loader properties include <a href="#BABIIHBB">"Type"</a>, <a href="#BABHAEFE">"Length"</a>, <a href="#BABEBGCE">"Precision"</a>, <a href="#BABDDHJJ">"Scale"</a>, <a href="#BABCDGGC">"Mask"</a>, <a href="#BABGEBJG">"NULLIF"</a>, and <a href="#BABHFFFB">"DEFAULTIF"</a>. See <a href="#BABCFEBE">"SQL*Loader Properties"</a> for more details.</p>
</div>
<!-- class="sect4" -->
<a id="i1076496"></a>
<div id="WBDOD90577" class="sect4">
<h5 class="sect4">SQL Properties</h5>
<p>The second set of properties are the SQL properties that include <a href="#BABDFHDA">"SQL Type"</a>, <a href="#BABBJEAB">"SQL Length"</a>, <a href="#BABGJGGD">"SQL Precision"</a>, and <a href="#BABGGICH">"SQL Scale"</a>. These properties specify how the fields in a flat file translate to the columns in a relational table. See <a href="#BABJFCFH">"SQL Properties"</a> for more details.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABGGBJG"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Importing Metadata Definitions from COBOL Copybooks</h2>
<p>COBOL programmers create files by defining the physical files and the logical records that is used to build those files. The records may be defined within the COBOL program itself, but are usually defined in separate files, called copybooks. These copybooks specify the layout and format of the user data, but do not specify the physical characteristics of the file itself. The physical characteristics of the file identify how the file is organized and accessed. For example, whether records are terminated with CR or CR/LF, is not part of the user data definition and is therefore not included in the record definition.</p>
<p>With Oracle Warehouse Builder, you can import metadata from COBOL copybooks. Oracle Warehouse Builder automatically manages the following operations:</p>
<ul>
<li>
<p>Defining the fields for data storage</p>
</li>
<li>
<p>Calculating the data positions</p>
</li>
<li>
<p>Transforming COBOL data characteristics to the appropriate data type definitions in SQL*Loader</p>
</li>
</ul>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref96"></a>
<h3 class="sect2">Understanding Data Hierarchy in COBOL Applications</h3>
<p>COBOL records are defined as a set of data elements and groups. A data element is an atomic data item. A group is a container for data elements. Each item defined in a COBOL record is called a field whether it is a group or an elementary item. Each field definition contains a level number which reflects the hierarchy of the data within the record. Groups can contain other groups or elementary items. Items contained in a group are called subordinate elements. Field definitions for elementary items contain complete metadata for the item primarily specified in picture and usage clauses. A group inherits characteristics from its subordinate elements and does not generally contain metadata specification details. An example of a simple copybook is given in <a href="#BABFHDAG">Example 3-1</a>.</p>
<div class="example">
<p class="titleinexample"><a id="BABFHDAG"></a>Example 3-1 COBOL Copybook</p>
<pre>
01 EMPLOYEE-RECORD.
   05 EMP-ID PIC 9(6).
   05 EMP-REGION PIC 9.
   05 EMP-DEPT PIC 999.
   05 EMP-HIRE-DATE.
      10 EMP-HIRE-DATE-MM PIC 99.
      10 EMP-HIRE-DATE-DD PIC 99.
      10 EMP-HIRE-DATE-YYYY PIC 9999.
   05 EMP-SALARY PIC 9(9).
   05 EMP-NAME PIC X(15).
</pre></div>
<!-- class="example" -->
<p>The above example shows the definition of EMPLOYEE-RECORD. It contains 6 fields defined at the 05 Level. All of the fields except EMP-HIRE-DATE are elementary items. The elementary items contain picture clauses that define their data-characteristics. EMP-HIRE-DATE is a group field with subordinate elements at the 10 level. Each 10 level field is an elementary item that contains a picture clause defining its data characteristics. The date can be referenced as a whole by using the EMP-HIRE-DATE group field. This field includes the month, day, and year elements. Each subordinate field can also be referenced individually, allowing access to just the year for example.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref97"></a>
<h4 class="sect3">COBOL Data Types</h4>
<p>The USAGE and PICTURE clauses are used to define the format and characteristics of data elements. If a USAGE clause is not specified, the data is in DISPLAY format, either external numeric or external character. When considered, the picture and usage identify the data type. Detailed information concerning COBOL data types and how they are mapped to relational data types is described in<a href="#BABHICEJ">Table 3-1</a>.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref98"></a>
<h4 class="sect3">Arrays Defined on Fields</h4>
<p>COBOL provides support for both arrays and varying arrays. These complex structures are identified by the use of an OCCURS clause. Varying arrays are defined with the additional specification of a DEPENDING ON clause. For arrays, the OCCURS clause indicates the number of elements in the array. For varying arrays, the occurs specification includes a range of elements from <code>x</code> TO <code>y</code> and the DEPENDING ON clause identifies a field that contains the actual number of elements in the array. An array or a varying array can be defined on an elementary field or a group. <a href="#BABGBFGI">Example 3-2</a> provides an example of an array defined on elementary fields.</p>
<div class="example">
<p class="titleinexample"><a id="BABGBFGI"></a>Example 3-2 Arrays Defined on Elementary Fields</p>
<pre>
01 EMPLOYEE-RECORD.
   05 EMP-ID PIC 9(6).
   05 EMP-REGION PIC 9.
   05 EMP-DEPT PIC 999.
   05 EMP-HIRE-DATE.
      10 EMP-HIRE-DATE-MM PIC 99.
      10 EMP-HIRE-DATE-DD PIC 99.
      10 EMP-HIRE-DATE-YYYY PIC 9999.
   05 EMP-SALARY PIC 9(9).
   05 EMP-NAME PIC X(15).
   05 EMP-SKILL-LEVEL PIC 99 OCCURS 4 TIMES.
   05 EMP-SKILL-ID PIC 9(4) OCCURS 4 TIMES.
</pre></div>
<!-- class="example" -->
<p>Two independent arrays are defined, one on EMP-SKILL_LEVEL and one on EMP-SKILL_ID. In this example, the record contains four occurrences of EMP-SKILL-LEVEL, followed by four occurrences of EMP-SKILL-ID. In the file, each record is constructed as: EMP_SKILL_LEVEL, EMP_SKILL_LEVEL, EMP_SKILL_LEVEL, EMP_SKILL_LEVEL, EMP_SKILL_ID, EMP_SKILL_ID, EMP_SKILL_ID, EMP_SKILL_ID.</p>
<p><a href="#BABIAEDJ">Example 3-3</a> provides an example of a varying array defined on elementary fields.</p>
<div class="example">
<p class="titleinexample"><a id="BABIAEDJ"></a>Example 3-3 Varying Array Defined on Elementary Fields</p>
<pre>
01 EMPLOYEE-RECORD.
   05 EMP-ID PIC 9(6).
   05 EMP-REGION PIC 9.
   05 EMP-DEPT PIC 999.
   05 EMP-HIRE-DATE.
      10 EMP-HIRE-DATE-MM PIC 99.
      10 EMP-HIRE-DATE-DD PIC 99.
      10 EMP-HIRE-DATE-YYYY PIC 9999.
   05 EMP-SALARY PIC 9(9).
   05 EMP-NAME PIC X(15).
   05 EMP-SKILL-COUNT PIC 99.
   05 EMP-SKILL-LEVEL PIC 99 OCCURS 1 TO 4 TIMES.
      DEPENDING ON EMP-SKILL-COUNT.
   05 EMP-SKILL-ID PIC 9(4) OCCURS 1 TO 4 TIMES.
      DEPENDING ON EMP-SKILL-COUNT.
</pre></div>
<!-- class="example" -->
<p>Two independent arrays are defined, one on EMP-SKILL_LEVEL and one on EMP-SKILL_ID. In this example, the value in EMP-SKILL-COUNT determines the number of occurrences in both arrays. In the file, a record with EMP_SKILL_COUNT equal to one is constructed as: EMP_SKILL_LEVEL, EMP_SKILL_ID. If the value of EMP-SKILL-COUNT is two, then two occurrences of EMP-SKILL-LEVEL are followed by two occurrences of EMP-SKILL-ID. In the file, a record with EMP_SKILL_COUNT equal to two is constructed as: EMP_SKILL_LEVEL, EMP_SKILL_LEVEL, EMP_SKILL_ID, EMP_SKILL_ID.</p>
<p><a href="#BABEDCJD">Example 3-4</a> provides an example of an array defined on a group field.</p>
<div class="example">
<p class="titleinexample"><a id="BABEDCJD"></a>Example 3-4 Array Defined on a Group Field</p>
<pre>
01 EMPLOYEE-RECORD.
   05 EMP-ID PIC 9(6).
   05 EMP-REGION PIC 9.
   05 EMP-DEPT PIC 999.
   05 EMP-HIRE-DATE.
      10 EMP-HIRE-DATE-MM PIC 99.
      10 EMP-HIRE-DATE-DD PIC 99.
      10 EMP-HIRE-DATE-YYYY PIC 9999.
   05 EMP-SALARY PIC 9(9).
   05 EMP-NAME PIC X(15).
   05 EMP-SKILLS OCCURS 4 TIMES.
      10 EMP-SKILL-LEVEL PIC 99.
      10 EMP-SKILL-ID PIC 9(4).
</pre></div>
<!-- class="example" -->
<p>In this example an array is defined with four elements. Each element contains one occurrence of each field: EMP_SKILL_LEVEL and EMP_SKILL_ID. In the file, each record is constructed as: EMP_SKILL_LEVEL, EMP_SKILL_ID, EMP_SKILL_LEVEL, EMP_SKILL_ID, EMP_SKILL_LEVEL, EMP_SKILL_ID, EMP_SKILL_LEVEL, EMP_SKILL_ID.</p>
<p><a href="#BABHAABB">Example 3-5</a> provides an example of a varying array defined on a group field.</p>
<div class="example">
<p class="titleinexample"><a id="BABHAABB"></a>Example 3-5 Varying Array Defined on a Group Field</p>
<pre>
01 EMPLOYEE-RECORD.
   05 EMP-ID PIC 9(6).
   05 EMP-REGION PIC 9.
   05 EMP-DEPT PIC 999.
   05 EMP-HIRE-DATE.
      10 EMP-HIRE-DATE-MM PIC 99.
      10 EMP-HIRE-DATE-DD PIC 99.
      10 EMP-HIRE-DATE-YYYY PIC 9999.
   05 EMP-SALARY PIC 9(9).
   05 EMP-NAME PIC X(15).
   05 EMP-SKILL-COUNT PIC 99.
   05 EMP-SKILLS OCCURS 4 TIMES DEPENDING ON EMP-SKILL-COUNT.
     10 EMP-SKILL-LEVEL PIC 99.
     10 EMP-SKILL-ID PIC 9(4).
</pre></div>
<!-- class="example" -->
<p>In this example, one array is defined with up to four elements. The value in EMP-SKILL-COUNT defines the number of occurrences of the array. Therefore, if the value of EMP-SKILL-COUNT is set as one, then there is one occurrence of EMP_SKILLS. In the file, a record with EMP_SKILL_COUNT equal to one is constructed as: EMP_SKILL_LEVEL, EMP_SKILL_ID.</p>
<p>If the value of EMP-SKILL-COUNT is two, then there are two occurrences of EMP-SKILLS. In the file, a record with EMP_SKILL_COUNT equal to two is constructed as: EMP_SKILL_LEVEL, EMP_SKILL_ID, EMP_SKILL_LEVEL, EMP_SKILL_ID.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref99"></a>
<h3 class="sect2">Multiple Definitions</h3>
<p>In COBOL, data in a record may have multiple definitions. You can use any one of these definitions to access the data. There are three methods for getting multiple definitions:</p>
<ul>
<li>
<p><a href="#BABJHFAF">"Defining Multiple Records"</a></p>
</li>
<li>
<p><a href="#BABECJIB">"Defining Group Fields"</a></p>
</li>
<li>
<p><a href="#BABDCDGE">"Redefining Fields and Groups"</a></p>
</li>
</ul>
<a id="BABJHFAF"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Defining Multiple Records</h4>
<p>COBOL generated files can contain multiple record types. Whenever there is multiple level 01 item in a file definition, each level 01 provides a separate definition of the data record area. Only one record is kept in the data record area at a time, so only one level 01 definition is used at a time. For example, a file may contain two types of records, department records and employee records. Level 01 items are defined for both department and employee records. The hierarchy for each record immediately follows the level 01 item for that record and provides the definitions for the entire record. Each record contains a field that identifies the record type. This record type is at the same position for all record definitions.</p>
<p>In the following example, the record type is in the first position:</p>
<div class="example">
<p class="titleinexample"><a id="sthref100"></a>Example 3-6 Copybook With Multiple Records</p>
<pre>
01   DEPARTMENT-RECORD. 
      05 DEPT-RECORD-TYPE PIC X. 
      05 DEPT-ID PIC 999. 
      05 DEPT-NAME PIC X(30). 
      05 DEPT-DESCRIPTION PIC X(160). 
01   EMPLOYEE-RECORD.
      05 EMP-RECORD-TYPE PIC X. 
      05 EMP-ID PIC 9(6). 
      05 EMP-NAME PIC X(30). 
      05 EMP-REGION PIC 9. 
      05 EMP-DEPT PIC 999.  
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABECJIB"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Defining Group Fields</h4>
<p>As seen in the section on Data Hierarchy, fields can be organized in groups. These groups actually provide an additional definition of the fields and are used to access the data.</p>
</div>
<!-- class="sect3" -->
<a id="BABDCDGE"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Redefining Fields and Groups</h4>
<p>COBOL provides the ability to redefine a field or a group. Redefinition does not define data at a new location, but instead provides an additional definition of data characters that have been previously defined.</p>
<div class="example">
<p class="titleinexample"><a id="sthref101"></a>Example 3-7 Redefining a Field</p>
<pre>
01  EMPLOYEE-RECORD. 
   05 EMP-ID PIC 9(6). 
   05 EMP-ID-R REDEFINES EMP-ID. 
      10 EMP-ID-GROUP PIC 99. 
      10 EMP-ID-NUM PIC 9999. 
   05 EMP-REGION PIC 9. 
   05 EMP-DEPT PIC 999.
</pre></div>
<!-- class="example" -->
<p>In the above example, the EMP-ID field is defined as a 6 digit numeric field. A redefinition is provided dividing the field into two fields: EMP-ID-GROUP is defined as the first two digits of the EMP-ID field. EMP-ID-NUM is defined as the last four digits of the EMP-ID field. EMP-ID-NUM and EMP-ID-GROUP both begin at position 1 in the record.</p>
<div class="example">
<p class="titleinexample"><a id="sthref102"></a>Example 3-8 Redefining a Group</p>
<pre>
01 EMPLOYEE-RECORD.
05 EMP-ID PIC 9(6).
05 EMP-ID-R REDEFINES EMP-ID.
10 EMP-ID-GROUP PIC 99.
10 EMP-ID-NUM PIC 9999.
05 EMP-REGION PIC 9.
05 EMP-DEPT PIC 999.
05 EMP-HIRE-DATE.
10 EMP-HIRE-DATE-MM PIC 99.
10 EMP-HIRE-DATE-DD PIC 99.
10 EMP-HIRE-DATE-YYYY PIC 9999.
05 EMP-SALARY PIC 9(9).
05 EMP-NAME PIC X(15).
05 EMP-SKILLS OCCURS 4 TIMES.
10 EMP-SKILL-LEVEL PIC 99.
10 EMP-SKILL-ID PIC 9(4).
05 EMP-SKILLS-R REDEFINES EMP-SKILLS.
10 EMP-SKILL-LEVEL1 PIC 99.
10 EMP-SKILL-ID1 PIC 9(4).
10 EMP-SKILL-LEVEL2 PIC 99.
10 EMP-SKILL-ID2 PIC 9(4).
10 EMP-SKILL-LEVEL3 PIC 99.
10 EMP-SKILL-ID3 PIC 9(4).
</pre></div>
<!-- class="example" -->
<p>In the above example, the EMP-SKILL array has been redefined so that each element is expanded providing a field for each element. As in the previous example, the definitions for EMP-SKILLS-R is defining the same data area as EMP-SKILLS. The first occurrence of EMP-SKILL-LEVEL is at the same position in the record as EMP-SKILL-LEVEL1.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref103"></a>
<h4 class="sect3">COBOL File Formats</h4>
<p>COBOL programs can create files of different organization. These include the following:</p>
<ul>
<li>
<p><span class="bold">Line Sequential</span>: Line sequential files are generally known as text files because the primary use of this file type is for display data. The records in these files can only be accessed in the order they were written. Line sequential files contain variable length records. A record delimiter separates each record in the file. The record delimiter that is used is operating system dependent and is inserted after the last character in each record.</p>
</li>
<li>
<p><span class="bold">Record Sequential</span>: Record sequential files are also accessed in the order they were written. This file organization is more flexible than line sequential. Records can be of fixed or variable length. The record sequential organization is used for sequential files that contain binary or packed data, or any data that may have other non-printable characters. In fixed length files, every record that is written to the file is the same length. If necessary, the record is padded with blanks to ensure uniform length. With variable length records, each record is written based on the actual size of the record. A Record Descriptor Word (RDW) is inserted at the beginning of each record. The RDW contains the actual length of the record. It is not considered part of the record and is not included in the data definition. In general, variable length records are used when there are many small records and few large records. Variable length records must be converted before they can be imported.</p>
</li>
<li>
<p><span class="bold">Relative Files</span>: Relative files can be accessed randomly in the order they are written. Records can be declared as variable, but they are written as fixed. The random access is not by key, but is instead by relative record number. Relative files must be converted to sequential before they can be imported.</p>
</li>
<li>
<p><span class="bold">Indexed Files</span>: Indexed files can be accessed by key field(s) in the order they are written. Records in indexed files can be fixed or variable. Indexed files consist of two physical files, one containing the data and the other containing the index. Indexed files are converted to sequential before they are imported.</p>
</li>
</ul>
<p>The file format used for data storage is determined by the COBOL application. This information is not defined in the copybook.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref104"></a>
<h3 class="sect2">Reinterpreting COBOL Data Structures Into Relational Data Structures</h3>
<p>As you consider importing COBOL files into a relational database, you must plan how the data should be mapped into the relational database.</p>
<p class="subhead2"><a id="sthref105"></a>Records</p>
<p>At the highest level, each record type, level 01 structure, is considered mapping to a table. Records in files are often designed to be independent sources of information. This is a large difference between files and tables. Tables are generally designed to hold information that is closely related. When you consider the records in your file, you should consider if it would be better to define multiple tables for the information. Groups that are used to organize related information are often good candidates for independent tables. For example, you may have a group that is defined for address information, which might naturally fit into a name and address table. Similarly, arrays, whether varying or not, are also often good candidates for independent tables.</p>
<p class="subhead2"><a id="sthref106"></a>Arrays</p>
<p>In order to define arrays, Oracle Warehouse Builder normalizes the array by specifying each element in the array independently. This technique is also used for defining varying arrays. Not all varying arrays can be loaded using SQL*Loader. When the varying array is after the record, SQL*Loader may be able to load it. Records with embedded varying arrays are not necessarily physically stored as variable, therefore you may be able to use this technique for loading these records also. See <a href="#BABDAAHF">"Example: Extracting Data from a Single Record Type Varying Array COBOL File"</a>.</p>
<p class="subhead2"><a id="sthref107"></a>Mapping COBOL Data Types to SQL Data Types</p>
<p>The <code>USAGE</code> and <code>PICTURE</code> clauses are used to define the format and characteristics of data elements. Together the picture and usage identify the scalar data type, length, precision and scale. <a href="#BABHICEJ">Table 3-1</a> shows data element definitions that apply to COBOL files. It describes the representation of each data type and identifies how that data type is mapped to SQL*Loader data type definitions. The PICTURE represents a mask that describes the data. The values identified within the parentheses are multiplication factors for the preceding picture element. So when n = 5, X(n) indicates that there are 5 characters of type X (alphanumeric data).</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref108"></a><a id="BABHICEJ"></a>Table 3-1 COBOL Data Types and the Equivalent SQL *Loader Data Types</p>
<table class="cellalignment3020" title="COBOL Data Types and the Equivalent SQL *Loader Data Types" summary="Cobol data types and their equalent in SQL" dir="ltr">
<thead>
<tr class="cellalignment3014">
<th class="cellalignment3021" id="r1c1-t7">COBOL Data Type</th>
<th class="cellalignment3021" id="r1c2-t7">SQL Loader Data Type</th>
<th class="cellalignment3021" id="r1c3-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3014">
<td class="cellalignment3022" id="r2c1-t7" headers="r1c1-t7">
<p>X(n)</p>
</td>
<td class="cellalignment3022" headers="r2c1-t7 r1c2-t7">
<ul>
<li>
<p>CHAR(n)</p>
</li>
<li>
<p>DATE(n) 'mask' when data contains valid date</p>
</li>
<li>
<p>TIME</p>
</li>
<li>
<p>TIMESTAMP</p>
</li>
<li>
<p>INTERVAL</p>
</li>
</ul>
</td>
<td class="cellalignment3022" headers="r2c1-t7 r1c3-t7">
<p>Alphanumeric data. Each X identifies one allowable character from the specified character set.</p>
</td>
</tr>
<tr class="cellalignment3014">
<td class="cellalignment3022" id="r3c1-t7" headers="r1c1-t7">
<p>A(n)</p>
</td>
<td class="cellalignment3022" headers="r3c1-t7 r1c2-t7">
<p>CHAR(n)</p>
</td>
<td class="cellalignment3022" headers="r3c1-t7 r1c3-t7">
<p>Alphabetic data. Each A identifies any letter of the alphabet or space.</p>
</td>
</tr>
<tr class="cellalignment3014">
<td class="cellalignment3022" id="r4c1-t7" headers="r1c1-t7">
<p>9(n)</p>
</td>
<td class="cellalignment3022" headers="r4c1-t7 r1c2-t7">
<ul>
<li>
<p>INTEGER EXTERNAL(n)</p>
</li>
<li>
<p>DECIMAL EXTERNAL(n)</p>
</li>
<li>
<p>ZONED EXTERNAL(n)</p>
</li>
<li>
<p>DATE(n) 'mask' when data contains valid date</p>
</li>
</ul>
</td>
<td class="cellalignment3022" headers="r4c1-t7 r1c3-t7">
<p>Numeric data. Each 9 identifies one digit.</p>
</td>
</tr>
<tr class="cellalignment3014">
<td class="cellalignment3022" id="r5c1-t7" headers="r1c1-t7">
<p>+- mantissa +- exponent</p>
</td>
<td class="cellalignment3022" headers="r5c1-t7 r1c2-t7">
<p>FLOAT EXTERNAL (length)</p>
</td>
<td class="cellalignment3022" headers="r5c1-t7 r1c3-t7">
<p>External floating point data.</p>
</td>
</tr>
<tr class="cellalignment3014">
<td class="cellalignment3022" id="r6c1-t7" headers="r1c1-t7">
<p>S9(n)v9(m) SIGN TRAILING</p>
</td>
<td class="cellalignment3022" headers="r6c1-t7 r1c2-t7">
<p>ZONED(precision, scale) where precision = n+m and scale = m</p>
</td>
<td class="cellalignment3022" headers="r6c1-t7 r1c3-t7">
<p>Numeric data. Each 9 identifies one digit. The v indicates the implied decimal position. The sign is carried in the last byte.</p>
</td>
</tr>
<tr class="cellalignment3014">
<td class="cellalignment3022" id="r7c1-t7" headers="r1c1-t7">
<p>9(n)v9(m)</p>
</td>
<td class="cellalignment3022" headers="r7c1-t7 r1c2-t7">
<p>ZONED(precision, scale) where precision = n+m and scale = m</p>
</td>
<td class="cellalignment3022" headers="r7c1-t7 r1c3-t7">
<p>Numeric data. Each 9 identifies one digit. The v indicates the implied decimal position.</p>
</td>
</tr>
<tr class="cellalignment3014">
<td class="cellalignment3022" id="r8c1-t7" headers="r1c1-t7">
<p>9(n)v9(m)</p>
<p>S9(n)v9(m)</p>
</td>
<td class="cellalignment3022" headers="r8c1-t7 r1c2-t7">
<p>SMALLINT</p>
<p>INTEGER(length 2,4,or 8)</p>
<p>May use SIGNED|</p>
<p>UNSIGNED</p>
<p>May require BYTEORDER clause</p>
<p>Scale handled with an expression</p>
</td>
<td class="cellalignment3022" headers="r8c1-t7 r1c3-t7">
<p>Internal format data with a radix of 2.</p>
<p>The size of the field varies with the value m.</p>
<p>n+m = 1-4, length = 2</p>
<p>n+m = 5-9, length = 4</p>
<p>n+m = 10-18, length =8</p>
</td>
</tr>
<tr class="cellalignment3014">
<td class="cellalignment3022" id="r9c1-t7" headers="r1c1-t7">
<p>Not allowed</p>
</td>
<td class="cellalignment3022" headers="r9c1-t7 r1c2-t7">
<p>FLOAT</p>
<p>May require BYTEORDER clause.</p>
</td>
<td class="cellalignment3022" headers="r9c1-t7 r1c3-t7">
<p>Single-precision floating point number, 4 bytes long</p>
</td>
</tr>
<tr class="cellalignment3014">
<td class="cellalignment3022" id="r10c1-t7" headers="r1c1-t7">
<p>Not allowed</p>
</td>
<td class="cellalignment3022" headers="r10c1-t7 r1c2-t7">
<p>DOUBLE</p>
<p>May require BYTEORDER clause.</p>
</td>
<td class="cellalignment3022" headers="r10c1-t7 r1c3-t7">
<p>Double-precision floating point number, 8 bytes long</p>
</td>
</tr>
<tr class="cellalignment3014">
<td class="cellalignment3022" id="r11c1-t7" headers="r1c1-t7">
<p>9(n)v9(m)</p>
<p>S9(n)v9(m)</p>
</td>
<td class="cellalignment3022" headers="r11c1-t7 r1c2-t7">
<p>DECIMAL (precision, scale) where precision = n+m and scale = m</p>
</td>
<td class="cellalignment3022" headers="r11c1-t7 r1c3-t7">
<p>Internal format numeric data with a radix of 10. The clause indicates that each digit must use the minimum storage possible. Generally, each byte contains two digits with the last half-byte containing the sign.</p>
</td>
</tr>
<tr class="cellalignment3014">
<td class="cellalignment3022" id="r12c1-t7" headers="r1c1-t7">
<p>X(n)</p>
<p>9(n)v9(m)</p>
<p>S9(n)v9(m)</p>
</td>
<td class="cellalignment3022" headers="r12c1-t7 r1c2-t7">
<p>Not commonly used</p>
</td>
<td class="cellalignment3022" headers="r12c1-t7 r1c3-t7">
<p>The internal format of the data is not defined. It is often stored the same as BINARY, however the radix may be reversed.</p>
</td>
</tr>
<tr class="cellalignment3014">
<td class="cellalignment3022" id="r13c1-t7" headers="r1c1-t7">
<p>G(n)</p>
</td>
<td class="cellalignment3022" headers="r13c1-t7 r1c2-t7">
<p>GRAPHIC(n)</p>
</td>
<td class="cellalignment3022" headers="r13c1-t7 r1c3-t7">
<p>Graphic data that does not contain Shift In and Shift Out characters</p>
</td>
</tr>
<tr class="cellalignment3014">
<td class="cellalignment3022" id="r14c1-t7" headers="r1c1-t7">
<p>05 V</p>
<p>49 V-LN PIC S9(4)</p>
<p>COMP</p>
<p>05 V-DATA PIC X(n)</p>
</td>
<td class="cellalignment3022" headers="r14c1-t7 r1c2-t7">
<p>VARCHAR(max length), can only be loaded correctly between systems where SMALLINT is the same size</p>
</td>
<td class="cellalignment3022" headers="r14c1-t7 r1c3-t7">
<p>Variable length character field</p>
</td>
</tr>
<tr class="cellalignment3014">
<td class="cellalignment3022" id="r15c1-t7" headers="r1c1-t7">
<p>05 V</p>
<p>49 V-LN PIC S9(4)</p>
<p>COMP</p>
<p>05 V-DATA PIC G(n)</p>
</td>
<td class="cellalignment3022" headers="r15c1-t7 r1c2-t7">
<p>VARGRAPHIC(max length), can only be loaded correctly between systems where SMALLINT is the same size.</p>
</td>
<td class="cellalignment3022" headers="r15c1-t7 r1c3-t7">
<p>Variable length Graphic data that does not contain Shift In and Shift Out characters</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref109"></a>
<h3 class="sect2">Importing Metadata</h3>
<p>To import metadata from COBOL, you must create a flat file module and then import the metadata definitions from a Cobol copybook.</p>
<p class="subhead2"><a id="BABIBDBC"></a>Importing a Copybook</p>
<p>To import metadata from a COBOL copybook:</p>
<ol>
<li>
<p>Create a flat file module as described in <a href="#i1075978">"Creating Flat File Modules"</a>. Provide the location details of the COBOL copybook.</p>
</li>
<li>
<p>Right-click the newly created module and select <span class="bold">Import</span>, <span class="bold">Cobol</span>.</p>
<p>The Cobol Import dialog box is displayed.</p>
<p>An alternative way to open the Cobol Import dialog box is to select the newly created module and then select <span class="bold">File</span>, <span class="bold">Import</span>, <span class="bold">Cobol</span>.</p>
</li>
<li>
<p>Click <span class="bold">Add Copybook</span> to browse for the copybook you must import.</p>
<p>You can add multiple copybooks simultaneously. When you add a copybook, the <span class="bold">Copybook</span> field of the Import Copybooks spread table displays the directory path of the copybook. Use the <span class="bold">File</span> field to edit the name of the imported copybook. Use the <span class="bold">Description</span> field to add an optional description for the imported copybook.</p>
</li>
<li>
<p>Click <span class="bold">View Copybook</span> to view the metadata structure of the copybook being imported.</p>
</li>
<li>
<p>Click <span class="bold">Session Options</span> to open the Import Cobol Session Options dialog box. For details of values to be specified in this dialog box, see <a href="#BABCIAGF">"Import Cobol Session Options"</a>.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> and on the Cobol Import window, click <span class="bold">Import</span>.</p>
</li>
</ol>
<a id="BABCIAGF"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Import Cobol Session Options</h4>
<p>You can use this dialog box to specify a template file and other properties. Based on the copybook you are importing, determine if the default physical file properties are acceptable. Or else, select a template file from which the physical characteristics are imported. You can edit some physical properties of the file after the import as well.</p>
<p>To specify a template file, select a file from the <span class="bold">Copy Flat File Properties From</span> list.</p>
<p>If you retain the Default Properties option from the <span class="bold">Copy Flat File Properties From</span> list, the file is defined as fixed format (not delimited) with the following properties:</p>
<ul>
<li>
<p>Skip 0 records</p>
</li>
<li>
<p>Use first row as column name set to false</p>
</li>
<li>
<p>Record delimiter set to <code>\n</code></p>
</li>
<li>
<p>One physical record for each logical record</p>
</li>
</ul>
<p>If you import a multi-record copybook, then it is set to multi record.</p>
<p>If you select a file from the Copy Flat File Properties From list, then the physical characteristics of this file are used for the newly imported copybook.</p>
<p><span class="bold">Do Not Import Groups</span>: To suppress the definition of group items. This ensures that only the subordinate items get imported. For example, if you have the following fields:</p>
<pre>
05  EMP-HIRE-DATE.
    10 EMP-HIRE-MONTH PIC 99.
    10 EMP-HIRE-DAY PIC 99.
    10 EMP-HIRE-YEAR PIC 9999.
</pre>
<p>When you select the Do Not Import Groups option, only three fields are created, EMP-HIRE-MONTH, EMP-HIRE-DAY, and EMP-HIRE-YEAR. When the option is not selected, then four fields, EMP-HIRE-DATE, EMP-HIRE-MONTH, EMP-HIRE-DAY, EMP-HIRE-YEAR are created at the time of import.</p>
<p><span class="bold">Do Not Import Redefines</span>: To avoid import of redundant redefined fields. For example, if you have the following copybook definition:</p>
<pre>
05 HIRE_DATE.
10 HIRE_MONTH PIC 99.
10 HIRE_DAY PIC 99.
10 HIRE_YEAR PIC 9999.
05 HIRE_DATE_ALPHA REDEFINES HIRE_DATE.
10 HIRE_MONTH PIC XX.
10 HIRE_DAY PIC XX.
10 HIRE_YEAR PIC XXXX.
</pre>
<p>To import all the fields, clear the <span class="bold">Do Not Import Redefinitions</span> option. When the option is selected, only the first four fields, HIRE_DATE, HIRE_MONTH, HIRE_DAY, HIRE_YEAR are imported.</p>
<p>At the time of importing the metadata, it is recommended that you inspect the copybook for unnecessary metadata including grouped fields and redefined fields. You can also edit the file later to remove unnecessary definitions.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABDAAHF"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Example: Extracting Data from a Single Record Type Varying Array COBOL File</h3>
<p>To extract data from a COBOL data file, you must first import the corresponding copybook. Consider the following copybook for import:</p>
<pre>
01  EMPLOYEE-RECORD. 
    05  EMP-RECORD-LENGTH PIC 9(4). 
    05  EMP-ID PIC 9(6). 
    05  EMP-REGION PIC 9.
    05  EMP-DEPT PIC 999. 
    05  EMP-HIRE-DATE. 
        10 EMP-HIRE-MM PIC 99.
        10 EMP-HIRE-DD PIC 99.
        10 EMP-HIRE-YEAR PIC 9999.
    05  EMP-SALARY PIC 9(9). 
    05  EMP-NAME PIC X(15). 
    05  EMP-SKILLS OCCURS 4 TIMES.
        10 EMP-SKILL-LEVEL PIC 99. 
        10 EMP-SKILL-ID PIC 9999. 
</pre>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref110"></a>
<h4 class="sect3">Importing The COBOL Copybook</h4>
<p>Import the copybook as described in <a href="#BABIBDBC">"Importing a Copybook"</a>.</p>
<p>To set the file properties of the imported copybook, right-click the file on the Projects Navigator and click <span class="bold">Open</span>. On the Edit Flat File dialog box, define the file properties as given in <a href="#BABHDGGC">"Defining the File Properties"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="BABHDGGC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Defining the File Properties</h4>
<p>Use the Name, General, and Structure tabs to specify the file properties.</p>
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref111"></a>
<h5 class="sect4">Name Tab</h5>
<p>Use the Name tab to specify the character set. This is an EBCDIC file, so the character must be set to <code>WE8EBCDIC500</code>.</p>
</div>
<!-- class="sect4" -->
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref112"></a>
<h5 class="sect4">General Tab</h5>
<p>Use the General tab to set the following file properties.</p>
<ul>
<li>
<p><span class="bold">Record Delimiter</span>: The record delimiter for this file must be set to the binary value <code>X'0D0A'</code>.</p>
</li>
<li>
<p><span class="bold">Logical Record Definition</span>: In this example, there is one logical record per physical record.</p>
</li>
<li>
<p><span class="bold">Field Format</span>: Each field in this record is at a constant position. Therefore, the Fixed Length Fields option is selected by default.</p>
</li>
<li>
<p><span class="bold">Record Type</span>: This copybook contains a single type of record. Therefore, the Single Record option is selected by default.</p>
</li>
</ul>
<p>The field properties are as shown in <a href="#BABCIGDC">Figure 3-5</a>.</p>
<div class="figure">
<p class="titleinfigure"><a id="BABCIGDC"></a>Figure 3-5 The Field Properties of the Imported Cobol File</p>
<img width="643" height="537" src="img/cobol_eg_general.gif" alt="Description of Figure 3-5 follows" /><br />
<a id="sthref113" href="img_text/cobol_eg_general.htm">Description of "Figure 3-5 The Field Properties of the Imported Cobol File"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect4" -->
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref114"></a>
<h5 class="sect4">Structure Tab</h5>
<p>Use the Structure tab to review the field properties and make changes if required.</p>
<p>The structure of the imported file is as shown in <a href="#BABDJFDI">Figure 3-6</a>.</p>
<div class="figure">
<p class="titleinfigure"><a id="BABDJFDI"></a>Figure 3-6 Structure of the Imported Cobol File</p>
<img width="803" height="502" src="img/cobol_samplefile.gif" alt="Description of Figure 3-6 follows" /><br />
<a id="sthref115" href="img_text/cobol_samplefile.htm">Description of "Figure 3-6 Structure of the Imported Cobol File"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref116"></a>
<h4 class="sect3">Creating a Mapping to Load Data</h4>
<p>Create a mapping with the imported COBOL file as the source. Insert an unbound table operator in the mapping and map the desired fields from the COBOL file to the table operator.</p>
<div class="figure">
<p class="titleinfigure"><a id="sthref117"></a>Figure 3-7 Mapping a Flat File to a Table</p>
<img width="647" height="469" src="img/cobol_map.gif" alt="Description of Figure 3-7 follows" /><br />
<a id="sthref118" href="img_text/cobol_map.htm">Description of "Figure 3-7 Mapping a Flat File to a Table"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref119"></a>
<h4 class="sect3">Configuring The Mapping</h4>
<p>Right-click the mapping and click <span class="bold">Configure</span> to open the Configuration Properties dialog box. Select <span class="bold">SQL*LOADER</span> as the language for code generation. Tune any of the other SQL*Loader settings.</p>
<div class="figure">
<p class="titleinfigure"><a id="sthref120"></a>Figure 3-8 Configuration Properties Dialog Box</p>
<img width="486" height="476" src="img/cobolmap_config_new.gif" alt="Description of Figure 3-8 follows" /><br />
<a id="sthref121" href="img_text/cobolmap_config_new.htm">Description of "Figure 3-8 Configuration Properties Dialog Box"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref122"></a>
<h4 class="sect3">Specifying the Data File</h4>
<p>Click <span class="bold">Sql Loader Data Files</span> and then click the ellipsis as shown in <a href="#BABHBJDA">Figure 3-9</a> to open the SQL Loader Data Files dialog box.</p>
<div class="figure">
<p class="titleinfigure"><a id="BABHBJDA"></a>Figure 3-9 Configuration Properties for the Mapping</p>
<img width="669" height="194" src="img/cobol_sqlloaderfiles.gif" alt="Description of Figure 3-9 follows" /><br />
<a id="sthref123" href="img_text/cobol_sqlloaderfiles.htm">Description of "Figure 3-9 Configuration Properties for the Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<p>On the SQL Loader Data Files dialog box, right-click SQL Loader Data Files and select <span class="bold">Create</span>. A new data file node is added under Sql Loader Data Files.</p>
<p>Provide the data file name and select the data file location from where data is to be loaded. Specify a bad file to store those records that are not loaded into the target table due to error in the data. Specify a discard file to store those records that are not loaded due to SQL*Loader loading checks.</p>
<div class="figure">
<p class="titleinfigure"><a id="sthref124"></a>Figure 3-10 SQL Loader Data Files Dialog Box</p>
<img width="694" height="535" src="img/cobolmap_datafile.gif" alt="Description of Figure 3-10 follows" /><br />
<a id="sthref125" href="img_text/cobolmap_datafile.htm">Description of "Figure 3-10 SQL Loader Data Files Dialog Box"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref126"></a>
<h4 class="sect3">Executing the Mapping</h4>
<p>After you have defined the configuration properties for the mapping, you can deploy the table and the mapping and then start the mapping to load the COBOL data into the target table.</p>
<p>To deploy the mapping, right-click the mapping and select <span class="bold">Deploy</span>. After deploying the mapping, start the mapping. Right-click the mapping and select <span class="bold">Start</span>. When you run the mapping, the data is read from the data file you provided while configuring the mapping, and loaded into the target table.</p>
<p>To view the data in the target table, right-click the table, and select <span class="bold">Data</span>. <a href="#BABIGBBF">Figure 3-11</a> shows the data in the table.</p>
<div class="figure">
<p class="titleinfigure"><a id="BABIGBBF"></a>Figure 3-11 Data in the Target Table</p>
<img width="711" height="358" src="img/cobol_datatable.gif" alt="Description of Figure 3-11 follows" /><br />
<a id="sthref127" href="img_text/cobol_datatable.htm">Description of "Figure 3-11 Data in the Target Table"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1076537"></a>
<div id="WBDOD10578" class="sect1">
<h2 class="sect1">Viewing and Editing a File Definition</h2>
<p>You can view and edit the definition of a file by using the Edit Flat File dialog box.</p>
<p><span class="bold">To update a file definition:</span></p>
<ol>
<li>
<p>Select the file definition in the Projects Navigator.</p>
</li>
<li>
<p>Right-click the file and select <span class="bold">Open</span>.</p>
<p>Oracle Warehouse Builder displays the Edit Flat File dialog box with the following tabs:</p>
<p><a href="#CACGCGFD"><span class="xreftitlebold">Name Tab</span></a>: Use this tab to edit the name and descriptive for the file.</p>
<p><a href="#CACJICGA"><span class="xreftitlebold">General Tab</span></a>: Use this tab to change the general file properties, such as the physical record size, the number of physical records for each logical record, and the delimiter and enclosure characters.</p>
<p><a href="#CACEDHEF"><span class="xreftitlebold">Record Tab</span></a>: This tab is available only for flat files with multiple record types. Use this tab to change the record type position or add, delete, or edit record types.</p>
<p><a href="#CACFIHFG"><span class="xreftitlebold">Structure Tab</span></a>: Use this tab to edit field level attributes, SQL Loader and SQL Properties.</p>
</li>
</ol>
<a id="CACGCGFD"></a>
<div id="WBDOD10579" class="sect2">
<h3 class="sect2">Name Tab</h3>
<p>Use this tab to edit the name, default physical file name, description, and character set for the file. See <a href="#CJAGDHBA">"Describing a Flat File"</a> for more details.</p>
</div>
<!-- class="sect2" -->
<a id="CACJICGA"></a>
<div id="WBDOD10580" class="sect2">
<h3 class="sect2">General Tab</h3>
<p>Use this tab to change the general properties, such as the physical record size, the number of physical records for each logical record, the delimiter and enclosure characters, the number of rows to skip, and the field format. See <a href="#CJAEJFJE">"Defining File Properties for a Flat File"</a> for more details about the general properties.</p>
</div>
<!-- class="sect2" -->
<a id="CACEDHEF"></a>
<div id="WBDOD10581" class="sect2">
<h3 class="sect2">Record Tab</h3>
<p>If the file contains multiple record types, then specify the field position that determines the record type in Record Type Location.</p>
<p><span class="bold">Field Position</span>: This field displays the column that contains the record type indicator. You can change this value. For example, if you have a flat file with two record types that are distinguished from each other by the content of the third column as shown in the following list, then the value in this field is 3.</p>
<ul>
<li>
<p>Record Type 1: <code>2002 0115</code> <code><span class="codeinlinebold">E</span></code> <code>4564564</code></p>
</li>
<li>
<p>Record Type 2: <code>2003 1231</code> <code><span class="codeinlinebold">D</span></code> <code>659871 Q HKLIH</code></p>
</li>
</ul>
<p><span class="bold">Record type values:</span> This table displays each record type, the value that distinguishes it from the other record types, and the name you have given to the record type. <a href="#g1106573">Table 3-2</a> shows an example of what the record type values for the two sample records earlier might be:</p>
<div id="WBDOD90721" class="tblformal">
<p class="titleintable"><a id="sthref128"></a><a id="g1106573"></a>Table 3-2 Example of Record Type Values</p>
<table class="cellalignment3020" title="Example of Record Type Values " summary="Contains data from an example of record type values." dir="ltr">
<thead>
<tr class="cellalignment3014">
<th class="cellalignment3021" id="r1c1-t8">Type Value</th>
<th class="cellalignment3021" id="r1c2-t8">Record Name</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment3014">
<td class="cellalignment3022" id="r2c1-t8" headers="r1c1-t8">
<p>E</p>
</td>
<td class="cellalignment3022" headers="r2c1-t8 r1c2-t8">
<p>Employee</p>
</td>
</tr>
<tr class="cellalignment3014">
<td class="cellalignment3022" id="r3c1-t8" headers="r1c1-t8">
<p>D</p>
</td>
<td class="cellalignment3022" headers="r3c1-t8 r1c2-t8">
<p>Department</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<ul>
<li>
<p>To add new record types, click <span class="bold">New</span> and enter a Type Value and a Record Name describing the record type.</p>
</li>
<li>
<p>To delete record types, select the field to the left of each record type you want to remove and click <span class="bold">Delete</span>.</p>
</li>
</ul>
<p>For fixed length files containing multiple record types, Record Type Location consists of two fields to determine the record type indicator:</p>
<p><span class="bold">Start Position</span>: The starting position of the field that specifies the record type.</p>
<p><span class="bold">Length</span>: The length of the field.</p>
</div>
<!-- class="sect2" -->
<a id="CACFIHFG"></a>
<div id="WBDOD10582" class="sect2">
<h3 class="sect2">Structure Tab</h3>
<p>Use the Structure tab to edit a field name, data type, mask, <a href="#CJAHGGIA">"SQL*Loader Properties"</a> and <a href="#i1076496">"SQL Properties"</a>. You can add or delete a field. You can also add a field mask, NULLIF condition, or DEFAULTIF condition.</p>
<p>If the file contains multiple record types, you can select each record type from the <span class="bold">Record Name</span> field. Oracle Warehouse Builder displays the field properties for the selected record. See <a href="#CHDBADGH">"Defining Field Properties for a Flat File"</a> for more details.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i113670"></a>
<div id="WBDOD10583" class="sect1">
<h2 class="sect1">Using External Tables</h2>
<p><a id="sthref129"></a>External tables are database objects available in Oracle Database9<span class="italic">i,</span> and higher.</p>
<p>External tables are tables that represent data from flat files in a relational format. They are read-only tables that act like regular source tables. When you create and define an external table, the metadata for the external table is saved in the workspace. You can load data from flat files to external tables, transform the data using mappings, and load the transformed data to target tables.</p>
<p>The following sections provide information about external tables:</p>
<ul>
<li>
<p><a href="#i84705">"Creating a New External Table Definition"</a></p>
</li>
<li>
<p><a href="#BABJAEDH">"Importing an External Table"</a></p>
</li>
<li>
<p><a href="#i101872">"Synchronizing an External Table Definition with a Record in a File"</a></p>
</li>
<li>
<p><a href="#i101877">"Editing External Table Definitions"</a></p>
</li>
<li>
<p><a href="#i1119289">"Configuring External Tables"</a></p>
</li>
</ul>
<a id="i84705"></a>
<div id="WBDOD10584" class="sect2">
<h3 class="sect2">Creating a New External Table Definition</h3>
<p class="subhead2"><a id="WBDOD90722"></a>Before you begin</p>
<p><a id="sthref130"></a>Each external table you create corresponds to a single record type in an existing flat file. Before you begin, first define the file within the workspace as described in <a href="#BABDEJDJ">"Defining Character Data Files"</a>.</p>
<p><span class="bold">To create a new external table definition:</span></p>
<ol>
<li>
<p>From the Projects Navigator, expand the <span class="bold">Databases</span> node and then the <span class="bold">Oracle</span> node.</p>
</li>
<li>
<p>Expand the module where you want to create the external table.</p>
</li>
<li>
<p>Right-click <span class="bold">External Tables</span> and select <span class="bold">New External Table.</span></p>
<p>Oracle Warehouse Builder displays the Welcome page of the <a id="sthref131"></a><a id="sthref132"></a><a id="sthref133"></a>Create External Table Wizard. Use the wizard to complete the following pages:</p>
<ul>
<li>
<p><a href="#CIHEBJJE">"Name Page"</a></p>
</li>
<li>
<p><a href="#BABJGCCH">"File Selection Page"</a></p>
</li>
<li>
<p><a href="#BABBCEAJ">"Locations Page"</a></p>
</li>
</ul>
</li>
</ol>
<a id="CIHEBJJE"></a>
<div id="WBDOD10585" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Name Page</h4>
<p>Use the Name page to define a name and an optional description for the external table. Enter the name in the Name field. In the physical naming mode, you must enter a name between 1 and 200 valid characters. Spaces are not allowed in physical mode. In the logical mode, you can enter a unique name up to 4000 characters in length. The external table name must be unique within the module. Spaces are allowed in the logical naming mode.</p>
<p>Use the Description field to enter an optional description for the external table.</p>
</div>
<!-- class="sect3" -->
<a id="BABJGCCH"></a>
<div id="WBDOD10586" class="sect3">
<h4 class="sect3">File Selection Page</h4>
<p>The wizard displays the File Selection page. The wizard lists all the flat files available in the workspace. Select a file on which to base the external table. To search through long lists of files, type the first few letters of the file name and click <span class="bold">Go.</span></p>
<p>If you select a file that contains multiple record types, you must also select the record type name at the bottom of the File Selection page. An external table can represent only one record type.</p>
<p>You have the option of not specifying the file at this stage. If you do not specify a file in the wizard, you can later specify information such as record type, access parameters, and data files on the external table properties sheet.</p>
</div>
<!-- class="sect3" -->
<a id="BABBCEAJ"></a>
<div id="WBDOD10587" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Locations Page</h4>
<p>You can select a location from the list of flat file locations. Alternatively, you can leave the location unspecified. If you do not specify a location in the wizard, you can later specify a location on the external table properties sheet.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The location associated with an external table must be deployed before the external table itself can be deployed.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABJAEDH"></a>
<div id="WBDOD90723" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Importing an External Table</h3>
<p>You can create an external table from a flat file, or import an existing external table into Oracle Warehouse Builder.</p>
<p>To import an external table:</p>
<ol>
<li>
<p>On the Projects Navigator, right-click <span class="bold">External Tables</span>, and select <span class="bold">Import</span>.</p>
</li>
<li>
<p>Specify to import a database object or an Oracle Warehouse Builder metadata file.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i101877"></a>
<div id="WBDOD10589" class="sect2">
<h3 class="sect2">Editing External Table Definitions</h3>
<p>Use the External Table editor <a id="sthref134"></a><a id="sthref135"></a>to edit an external table definition. To open the editor, right-click the name of the external table from the Projects Navigator and select <span class="bold">Open Editor</span>. The Edit External Table dialog box is displayed. The tabs and properties that you can edit depend on how you defined the external table in the workspace.</p>
<p>The External Table Properties window displays with the following tabs:</p>
<ul>
<li>
<p><a href="#CJABIJJI">"Name Tab"</a></p>
</li>
<li>
<p><a href="#CJAHHCIF">"Columns Tab"</a></p>
</li>
<li>
<p><a href="#CJAIFCDC">"File Tab"</a></p>
</li>
<li>
<p><a href="#CJAGFEFB">"Locations Tab"</a></p>
</li>
<li>
<p><a href="#CJADICIB">"Data Rules Tab"</a></p>
</li>
<li>
<p><a href="#CJACEHAJ">"Access Parameters Tab"</a></p>
</li>
</ul>
<a id="CJABIJJI"></a>
<div id="WBDOD10590" class="sect3">
<h4 class="sect3">Name Tab</h4>
<p>Use the Name tab to rename the external table. The same rules for renaming tables apply to external tables. For more information, see <a class="olink WBETL01001" href="../../owb.112/e10935/orcl_data_objx.htm#WBETL01001"><span class="italic">Oracle Warehouse Builder Data Modeling, ETL, and Data Quality Guide</span></a>.</p>
</div>
<!-- class="sect3" -->
<a id="CJAHHCIF"></a>
<div id="WBDOD10591" class="sect3">
<h4 class="sect3">Columns Tab</h4>
<p>Use the Columns tab to add or edit columns. The same rules for adding columns to tables apply to external tables. For more information, see <a class="olink WBETL03005" href="../../owb.112/e10935/orcl_data_objx.htm#WBETL03005"><span class="italic">Oracle Warehouse Builder Data Modeling, ETL, and Data Quality Guide</span></a>.</p>
</div>
<!-- class="sect3" -->
<a id="CJAIFCDC"></a>
<div id="WBDOD10592" class="sect3">
<h4 class="sect3">File Tab</h4>
<p>Use the File tab to view the name of the flat file that provides the metadata for the external table. If the source flat file has multiple record types, the File tab also displays the record name associated with the external table. You can update this relationship or change it to a different file and record by reconciling the external table. For more information, see <a href="#i101872">"Synchronizing an External Table Definition with a Record in a File"</a>.</p>
<p>The File tab displays under the following conditions:</p>
<ul>
<li>
<p>You used the New External Table Wizard to create the external table and you specified a file name.</p>
</li>
<li>
<p>You did not specify a file name in the New External Table Wizard, but you reconciled the external table definition with a file and record.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CJAGFEFB"></a>
<div id="WBDOD10593" class="sect3">
<h4 class="sect3">Locations Tab</h4>
<p>Use the Location tab to view or change the flat file location. The <span class="bold">Location</span> list displays the available locations. Select a location from this list.</p>
</div>
<!-- class="sect3" -->
<a id="CJADICIB"></a>
<div id="WBDOD10594" class="sect3">
<h4 class="sect3">Data Rules Tab</h4>
<p>Use the Data Rules tab to define data rules for the external table. For more information about using data rules, see <a class="olink WBETL18002" href="../../owb.112/e10935/data_rules.htm#WBETL18002"><span class="italic">Oracle Warehouse Builder Data Modeling, ETL, and Data Quality Guide</span></a>.</p>
</div>
<!-- class="sect3" -->
<a id="CJACEHAJ"></a>
<div id="WBDOD10595" class="sect3">
<h4 class="sect3">Access Parameters Tab</h4>
<p>Access parameters define how to read from the flat file when a file has not been specified for the external table. In some cases, the External Table editor displays the Access Parameters tab instead of the File tab.</p>
<p>The tab for the access parameters displays under the following conditions:</p>
<ul>
<li>
<p>You imported an external table from another workspace. In this case, you can view and edit the access parameters.</p>
</li>
<li>
<p>You created an external table in an Oracle Database and imported its definition. In this case, you can view and edit the access parameters.</p>
</li>
<li>
<p>You use the Create External Table Wizard to create an external table and do not specify a reference file. The access parameters are empty. Before generating the external table, you must reconcile the external table definition with a flat file record or manually enter your own access specifications.</p>
</li>
</ul>
<p>The access parameters describe how fields in the source data file are represented in the external table as columns. For example, if the data file contained a field <code>emp_id</code> with a data type of INTEGER(2), the access parameters could indicate that the field be converted to a character string column in the external table.</p>
<p>Although you can make changes to the access parameters that affect how the external table is generated and deployed, it is not recommended. Oracle Warehouse Builder does not validate the changes. For more information about external tables and the access parameters, see <a class="olink SUTIL011" href="../../server.112/e22490/et_concepts.htm#SUTIL011"><span class="italic">Oracle Database Utilities</span></a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When an external table is imported into Oracle Warehouse Builder, the access parameter definition of the table is truncated to 4000 characters. This can potentially cause DDL generation errors.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i101872"></a>
<div id="WBDOD10588" class="sect2">
<h3 class="sect2">Synchronizing an External Table Definition with a Record in a File</h3>
<p><a id="sthref136"></a>Oracle Warehouse Builder enables you to update the external table definition with the metadata changes made to the file associated with the external table. You do this by synchronizing the external table with the source file.</p>
<p><span class="bold">To synchronize an external table definition with a record in a file:</span></p>
<ol>
<li>
<p>In the Projects Navigator, right-click the external table to synchronize and select <span class="bold">Synchronize</span>.</p>
<p>Oracle Warehouse Builder displays the Synchronize dialog box.</p>
</li>
<li>
<p>Use the Select the Object to synchronize list to specify the flat file with which the external table is to be synchronized.</p>
<p>By default, the flat file that was used to create the external table is displayed in this list. Expand the list to see a list of flat file modules and the flat files they contain.</p>
</li>
<li>
<p>Use the <span class="bold">Matching Strategy</span> list to specify how the search is performed for matches and the external table with the information from the flat file is updated. The options for match strategy are:</p>
<p><span class="bold">Match By Object ID</span>: This strategy compares the field IDs of that the external table columns references with the field IDs in the flat file.</p>
<p><span class="bold">Match By Object Name</span>: This strategy compares the physical names in the external table with the physical names in the flat file.</p>
<p><span class="bold">Match By Object Position</span>: This strategy matches by position, regardless of physical names and IDs. The first external table attribute is reconciled with the first record in the file, the second with the second, and so on. Use this strategy when you want to reconcile the external table with a new record.</p>
</li>
<li>
<p>Use the <span class="bold">Synchronize Strategy</span> list to indicate how differences in metadata between the existing external table definition and the record you specified are handled:</p>
<p><span class="bold">Merge:</span> The metadata from the existing external table definition and the record you specified is combined.</p>
<p><span class="bold">Replace:</span> Existing record metadata is deleted from the external table definition and the new file record metadata is added to the external table.</p>
</li>
<li>
<p>Click <span class="bold">View Synchronization Plan</span> to open the Synchronization Plan dialog box.</p>
<p>You can view the actions performed during synchronization.</p>
</li>
<li>
<p>Select a new strategy and then click <span class="bold">Refresh Plan</span>.</p>
<p>On the spread table, expand the Source node to view the action performed on each column.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to complete synchronizing the external table definition.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1119289"></a>
<div id="WBDOD10596" class="sect2">
<h3 class="sect2">Configuring External Tables</h3>
<p><a id="sthref137"></a>Configure the following properties for an external table:</p>
<ul>
<li>
<p><a href="#i1119332">"Access Specification"</a></p>
</li>
<li>
<p><a href="#i1119364">"Reject"</a></p>
</li>
<li>
<p><a href="#i1119367">"Data Characteristics"</a></p>
</li>
<li>
<p><a href="#CIHCIFDF">"Parallel"</a></p>
</li>
<li>
<p><a href="#i1119385">"Field Editing"</a></p>
</li>
<li>
<p><a href="#CIHDBFIA">"Identification"</a></p>
</li>
<li>
<p><a href="#i1126304">"Data Files"</a></p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
When you import an external table into the workspace and when you manually define access parameters for an external table, some external table configuration properties are overruled by settings on the Access Parameters tab in the External Table Properties window.</div>
</li>
</ul>
<p><span class="bold">To configure the physical properties for an external table:</span></p>
<ol>
<li>
<p>Select an external table from the Projects Navigator.</p>
</li>
<li>
<p>From the Edit menu, select <span class="bold">Configure</span>. You can also click the <span class="bold">Configure</span> icon from the toolbar.</p>
<p>The Configuration Property window is displayed.</p>
</li>
<li>
<p>To configure a property, click the white space and make a selection from the list.</p>
</li>
</ol>
<a id="i1119332"></a>
<div id="WBDOD10597" class="sect3">
<h4 class="sect3">Access Specification</h4>
<p>Under <span class="bold">Access Specification</span>, you can indicate the following file names and locations that Oracle Warehouse Builder uses to load the external table through SQL*Loader.</p>
<ul>
<li>
<p><span class="bold">Bad File</span>: If you specify a name and location for a bad file, Oracle Database is directed to write to that file all records that were not loaded due to errors. For example, records written to the bad file include those not loaded due to a data type error in converting a field into a column in the external table. If you specify a bad file that exists, the existing file is overwritten.</p>
</li>
<li>
<p><span class="bold">Discard File</span>: If you specify a name and location for a discard file, Oracle Database is directed to write to that file all records that were not loaded based on a SQL*Loader load condition placed on the file. If you specify a discard file that exists, the existing file is overwritten.</p>
</li>
<li>
<p><span class="bold">Log File</span>: If you specify a name and location for a log file, then Oracle Database is directed to log messages related to the external table to that file. If you specify a log file that exists, new messages are appended.</p>
</li>
</ul>
<p>For each of these files, you can either specify a file name and location, select <span class="bold">Do not use</span>, or select <span class="bold">Use default location.</span></p>
</div>
<!-- class="sect3" -->
<a id="i1119364"></a>
<div id="WBDOD10598" class="sect3">
<h4 class="sect3">Reject</h4>
<p>Under <span class="bold">Reject,</span> you can indicate how many rejected rows to allow. By default, the number of rejected rows allowed is unlimited. If you set <span class="bold">Rejects are unlimited</span> to false, enter a number in <span class="bold">Number of rejects allowed.</span></p>
</div>
<!-- class="sect3" -->
<a id="CIHCIFDF"></a>
<div id="WBDOD10599" class="sect3">
<h4 class="sect3">Parallel</h4>
<p><span class="bold">Parallel</span>: Enables parallel processing. If you are using a single system, set the value to <code>NONPARALLEL</code> to improve performance. If you are using multiple systems, accept the default <code>PARALLEL.</code>The access driver attempts to divide data files into chunks that can be processed separately. The following file, record, and data characteristics make it impossible for a file to be processed in parallel:</p>
<ul>
<li>
<p>Sequential data sources (such as a tape drive or pipe).</p>
</li>
<li>
<p>Data in any multibyte character set whose character boundaries cannot be determined starting at an arbitrary byte in the middle of a string. This restriction does not apply to any data file with a fixed number of bytes for each record.</p>
</li>
<li>
<p>Records with the VAR format</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1119367"></a>
<div id="WBDOD10600" class="sect3">
<h4 class="sect3">Data Characteristics</h4>
<p>If you imported the external table into the workspace or created the external table without specifying a source file, do not configure these properties. Data characteristics properties are overruled by settings on the Access Parameters tab in the External Table Properties window.</p>
<p>Under <span class="bold">Data Characteristics</span> you can set the following properties:</p>
<ul>
<li>
<p><span class="bold">Endian</span>: The default for the Endian property is Platform. This indicates that it is assumed that the endian of the flat file matches the endian of the platform on which it resides. If the file resides on a Windows platform, the data is handled as little-endian data. If the file resides on Sun Solaris or IBM MVS, the data is handled as big-endian. If you know the endian value for the flat file, you can select big or little-endian. If the file is UTF16 and contains a mark at the beginning of the file indicating the endian, then that endian is used.</p>
</li>
<li>
<p><span class="bold">String Sizes in</span>: This property indicates how data with multibyte character sets, such as UTF16, is handled. By default, the lengths for character strings in the data file are assumed to be in bytes. You can change the selection to indicate that strings sizes are specified in characters.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1119385"></a>
<div id="WBDOD10601" class="sect3">
<h4 class="sect3">Field Editing</h4>
<p>If you imported the external table into the workspace or created the external table without specifying a source file, do not configure these properties. Field editing properties are overruled by settings on the Access Parameters tab in the External Table Properties window.</p>
<p>Under <span class="bold">Field Editing</span>, you can indicate the type of whitespace trimming to be performed on character fields in the data file. The default setting is to perform no trim. All other trim options can reduce performance. You can also set the trim option to trim blanks to the left, right, or both sides of a character field.</p>
<p>Another option is to set the trim to perform according to SQL*Loader trim function. If you select SQL*Loader trim, fixed-length files are right trimmed and delimited files specified to have enclosures are left trimmed only when a field is missing an enclosure.</p>
<p>You can indicate how to handle missing fields in a record. If you set the option Trim Missing Values Null to true, fields with missing values are set to NULL. If you set the property to false, fields with missing values are rejected and written into the specified bad file.</p>
</div>
<!-- class="sect3" -->
<a id="CIHDBFIA"></a>
<div id="WBDOD10602" class="sect3">
<h4 class="sect3">Identification</h4>
<p>See <a class="olink WBETL02016" href="../../owb.112/e10935/orcl_data_objx.htm#WBETL02016"><span class="italic">Oracle Warehouse Builder Data Modeling, ETL, and Data Quality Guide</span></a> for details.</p>
</div>
<!-- class="sect3" -->
<a id="i1126304"></a>
<div id="WBDOD10603" class="sect3">
<h4 class="sect3">Data Files</h4>
<p><a id="sthref138"></a><a id="sthref139"></a><a id="sthref140"></a>If a file is associated with an external table, and it has a file name specified, that name is used. The user can configure if a different file must be specified or if multiple files must be specified.</p>
<p><span class="bold">To add a data file:</span></p>
<ol>
<li>
<p>Right-click the <span class="bold">Data Files</span> node and select <span class="bold">Create.</span></p>
<p>Enter a name for the data file such as <code>DATAFILE1.</code> Your entry displays as a new node in the right panel of the Configuration Properties dialog box.</p>
</li>
<li>
<p>Enter the following values for each data file you define:</p>
<p><span class="bold">Data File Location</span>: Location for the flat file.</p>
<p><span class="bold">Data File Name</span>: The name of the flat file including its extension. For example, enter <code>myflatfile.dat</code>.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment3013">
<tr>
<td class="cellalignment3022">
<table class="cellalignment3018">
<tr>
<td class="cellalignment3017"><a href="importing_metadata.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment3017"><a href="gateways_connection.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment3024">
<table class="cellalignment3016">
<tr>
<td class="cellalignment3017"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment3017"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment3017"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment3017"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment3017"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment3017"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
