<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Data Flow Operators</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 037" />
<meta name="dcterms.created" content="2011-09-21T18:21:42Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Warehouse Builder Data Modeling, ETL, and Data Quality Guide" />
<meta name="dcterms.identifier" content="E10935-05" />
<meta name="dcterms.isVersionOf" content="WBETL" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="src_tgt_opers.htm" title="Previous" type="text/html" />
<link rel="Next" href="activities_in_pf.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10935.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">33/37</span> <!-- End Header --><a id="CIHBEEAC"></a><a id="WBETL26000"></a>
<h1 class="chapter"><span class="secnum">26</span> Data Flow Operators</h1>
<p>The Mapping Editor provides a set of pre-built mapping operators. These operators enable you to define common transformations that specify how data moves from the source to the target.</p>
<p>This chapter provides details on how to use operators in a mapping to transform data. Some operators have wizards that assist you in designing the mapping. And some operators enable you to start the Expression Builder as an aide to writing SQL expressions.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHIHGCG">"List of Data Flow Operators"</a></p>
</li>
<li>
<p><a href="#BABJJHHD">"About Operator Wizards"</a></p>
</li>
<li>
<p><a href="#i1145941">"About the Expression Builder"</a></p>
</li>
</ul>
<a id="CIHIHGCG"></a><a id="WBETL26001"></a>
<div class="sect1">
<h2 class="sect1">List of Data Flow Operators</h2>
<p><a id="sthref2137"></a><a id="sthref2138"></a>The list of data flow operators is as follows:</p>
<ul>
<li>
<p><a href="#i1175617">"Aggregator Operator"</a></p>
</li>
<li>
<p><a href="#BACHDHHC">"Anydata Cast Operator"</a></p>
</li>
<li>
<p><a href="#i1183782">"Deduplicator Operator"</a></p>
</li>
<li>
<p><a href="#i1175750">"Expression Operator"</a></p>
</li>
<li>
<p><a href="#i1175751">"Filter Operator"</a></p>
</li>
<li>
<p><a href="#i1175752">"Joiner Operator"</a></p>
</li>
<li>
<p><a href="#BABHFCHB">"LCR Cast Operator"</a></p>
</li>
<li>
<p><a href="#BABCDGGJ">"LCR Splitter Operator"</a></p>
</li>
<li>
<p><a href="#i1175753">"Lookup Operator"</a></p>
</li>
<li>
<p><a href="#i1175501">"Pivot Operator"</a></p>
</li>
<li>
<p><a href="#i1136847">"Post-Mapping Process Operator"</a></p>
</li>
<li>
<p><a href="#i1175523">"Pre-Mapping Process Operator"</a></p>
</li>
<li>
<p><a href="#i1175545">"Set Operation Operator"</a></p>
</li>
<li>
<p><a href="#i1175568">"Sorter Operator"</a></p>
</li>
<li>
<p><a href="#i1136850">"Splitter Operator"</a></p>
</li>
<li>
<p><a href="#CIHCHECC">"Subquery Filter Operator"</a></p>
</li>
<li>
<p><a href="#i1150770">"Table Function Operator"</a></p>
</li>
<li>
<p><a href="#i1175595">"Transformation Operator"</a></p>
</li>
<li>
<p><a href="#i1136431">"Unpivot Operator"</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BABJJHHD"></a><a id="WBETL26002"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">About Operator Wizards</h2>
<p>For operators that require you to make numerous design decisions, wizards guide you in defining the operator. Each wizard begins with a welcome page that provides an overview of the steps you must perform. And each wizard concludes with a summary page listing your selections. Use <span class="bold">Next</span> and <span class="bold">Back</span> to navigate through the wizard. To close an operator wizard, click <span class="bold">Finish</span> on any of the wizard pages.</p>
<p>The following operators have wizards to assist you:</p>
<ul>
<li>
<p><a href="#i1175753">"Lookup Operator"</a></p>
</li>
<li>
<p>Match Merge operator, see <a href="match_merge.htm#BGBDHCFG">"Using the Match Merge Operator to Eliminate Duplicate Source Records"</a></p>
</li>
<li>
<p>Name and Address operator, see <a href="name_address.htm#BGBGDBHH">"Using the Name and Address Operator to Cleanse and Correct Name and Address Data"</a></p>
</li>
<li>
<p><a href="src_tgt_opers.htm#CHDBHCEI">"Queue Operator"</a></p>
</li>
<li>
<p><a href="#i1175501">"Pivot Operator"</a></p>
</li>
<li>
<p><a href="#i1136431">"Unpivot Operator"</a></p>
</li>
</ul>
<p>Once you become proficient with defining an operator, you may prefer to disable the wizard and use the operator editor instead. To start the operator editor, right-click the operator on the Mapping Editor and select <span class="bold">Open Details</span>. The operator editor displays the same content as the wizard except in a tab format rather than wizard pages.</p>
<p>Whether you are using an operator wizard or the operator editor, you must complete the following pages for each operator:</p>
<ul>
<li>
<p><a href="#i1049627">"Operator Wizard General Page"</a></p>
</li>
<li>
<p><a href="#BABCHFAA">"Operator Wizard Groups Page"</a></p>
</li>
<li>
<p><a href="#BABCDIAE">"Operator Wizard Input and Output Pages"</a></p>
</li>
<li>
<p><a href="#BCFHFBDF">"Operator Wizard Input Connections"</a></p>
</li>
</ul>
<a id="i1049627"></a>
<div class="sect2">
<h3 class="sect2">Operator Wizard General Page</h3>
<p><a id="sthref2139"></a><a id="sthref2140"></a>Use the General page to specify a name and optional description for the operator. By default, the wizard assigns the operator type as the name. For example, the default name for a new pivot operator is "Pivot".</p>
</div>
<!-- class="sect2" -->
<a id="BABCHFAA"></a>
<div class="sect2">
<h3 class="sect2">Operator Wizard Groups Page</h3>
<p>Edit group information on the Groups tab.</p>
<p>Each group has a name, direction, and optional description. You can rename groups for most operators but cannot change group direction for any of the operators. A group can have one of these directions: Input, <a id="sthref2141"></a>Output<a id="sthref2142"></a>, I/O<a id="sthref2143"></a>.</p>
<p>Depending on the operator, you can add and remove groups from the <a id="sthref2144"></a><a id="sthref2145"></a><a id="sthref2146"></a><a id="sthref2147"></a><a id="sthref2148"></a>Groups tab. For example, you add input groups to Joiners and output groups to Splitters.</p>
</div>
<!-- class="sect2" -->
<a id="BABCDIAE"></a>
<div class="sect2">
<h3 class="sect2">Operator Wizard Input and Output Pages</h3>
<p>The operator editor displays a tab for each type of group displayed on the Groups tab. Each of these tabs displays the attribute name, data type, length, precision, scale and optional description.</p>
<p>Depending on the operator, you may be able to add, remove, and edit attributes. The Mapping Editor grays out properties that you cannot edit. For example, if the data type is <code>NUMBER</code>, you can edit the precision and scale but not the length.</p>
</div>
<!-- class="sect2" -->
<a id="BCFHFBDF"></a>
<div class="sect2">
<h3 class="sect2">Operator Wizard Input Connections</h3>
<p>Use the Input Connections page to copy and map attributes into the operator. The attributes you select become mapped members in the input group. The Available Attributes panel displays a list of all the operators in the mapping.</p>
<p><span class="bold">To complete the Input Connections page for an operator:</span></p>
<ol>
<li>
<p>Select complete groups or individual attributes from the Available Attributes panel.</p>
<p>To search for a specific attribute or group by name, type the text in <span class="bold">Search for</span> and select <span class="bold">Go.</span> To find the next match, select <span class="bold">Go</span> again.</p>
<p>Hold the <span class="bold">Shift</span> key down to select multiple groups or attributes. To select attributes from different groups, then you must first combine the groups with a Joiner or Set operator.</p>
</li>
<li>
<p>Use the right arrow button between the two panels to move your selections to the Mapped Attributes panel.</p>
<p>You can use the left arrow to remove groups or attributes from the input connections list. Oracle Warehouse Builder removes the selection from the input group and removes the data flow connection between the source operator and the current operator.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1145941"></a><a id="WBETL22001"></a>
<div class="sect1">
<h2 class="sect1">About the Expression Builder</h2>
<p><a id="i1145944"></a><a id="sthref2149"></a><a id="sthref2150"></a><a id="sthref2151"></a><a id="sthref2152"></a>Some of the data flow operators require that you create expressions. An expression is a statement or clause that transforms data or specifies a restriction. These expressions are portions of SQL that are used inline as part of a SQL statement. Each expression belongs to a type that is determined by the role of the data flow operator. You can create expressions using Expression Builder, or by typing them into the expression field located in the Property Inspector of the operator or operator attributes.</p>
<div class="sect2"><a id="sthref2153"></a>
<h3 class="sect2">Opening the Expression Builder</h3>
<p><a id="sthref2154"></a><a id="sthref2155"></a>You can open the Expression Builder from the Property Inspector of the operator for operators such as filters, joiners, and aggregators. For operators such as expressions, data generators, splitters, and constants, you can open the Expression Builder from the Property Inspector of the operator attribute.</p>
<p><a id="i1146056"></a><span class="bold">To open the Expression Builder:</span></p>
<ol>
<li>
<p>On the Mapping Editor, select the operator or the attribute for which you want to open the Expression Builder.</p>
<p>The Property Inspector displays the properties of the selected operator or operator attribute.</p>
</li>
<li>
<p>In the Property Inspector, click the Ellipsis button in the property to set using the Expression Builder.</p>
<p>The Expression Builder displays as shown in <a href="#i1178143">Figure 26-1</a>.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1178143"></a>Figure 26-1 Expression Builder Interface</p>
<img width="703" height="393" src="img/expressionbuilder.gif" alt="Description of Figure 26-1 follows" /><br />
<a id="sthref2156" href="img_text/expressionbuilder.htm">Description of "Figure 26-1 Expression Builder Interface"</a><br />
<br /></div>
<!-- class="figure" --></li>
<li>
<p>Create an expression by:</p>
<ul>
<li>
<p>Typing text into the Expression field on the right of the Expression Builder.</p>
</li>
<li>
<p>Dragging items from the Inputs and Transformations tabs on the left panel and dropping them into the <span class="bold">Expression</span> field on the right.</p>
</li>
<li>
<p>Double clicking on items from the Inputs and Transformations tabs on the left panel.</p>
</li>
<li>
<p>Clicking arithmetic operator buttons available under the <span class="bold">Expression</span> field.</p>
</li>
</ul>
</li>
<li>
<p>Click <span class="bold">Validate.</span></p>
<p>This verifies the accuracy of the Expression syntax.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to save the expression and close the Expression Builder.</p>
</li>
</ol>
<a id="CFAGCHGF"></a>
<div class="sect3">
<h4 class="sect3">The Expression Builder User Interface</h4>
<p>The Expression Builder contains the following parts:</p>
<ul>
<li>
<p>In the left panel, the navigation tree displays two tabs:</p>
<ul>
<li>
<p><span class="bold">Inputs Tab:</span> A list of input parameters.</p>
</li>
<li>
<p><span class="bold">Transformations Tab:</span> A list of predefined functions and procedures located in the public Oracle Predefined library, the public Oracle Custom library, and a private Oracle library.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Expression Field:</span> At the top of the right panel is the <span class="bold">Expression</span> field. Use this field to type and edit expressions.</p>
</li>
<li>
<p><span class="bold">Arithmetic Operator Buttons:</span> Below the <span class="bold">Expression</span> field are buttons for arithmetic operators. Use these buttons to build an expression without typing. The arithmetic operators available vary by the type of data flow operator that is active.</p>
</li>
<li>
<p><span class="bold">Others:</span> A list of available SQL clauses that are appropriate for the active expression type.</p>
<p>Beginning in Oracle9<span class="italic">i</span>, the <code>CASE</code> function is recommended over the <code>DECODE</code> function because the <code>CASE</code> function generates both SQL and PL/SQL while <code>DECODE</code> is limited to SQL. If you use the <code>DECODE</code> function in an expression, then it is promoted to <code>CASE</code> where appropriate during code generation. It enables you to deploy the <code>DECODE</code> functionality in all operating modes (such as setbased or rowbased) and transparently across Oracle Database releases (8.1, 9.0 and higher).</p>
<p>For example, the function</p>
<pre>
DECODE (T1.A, 1, 'ABC', 2, 'DEF', 3, 'GHI', 'JKL')
</pre>
<p>is converted to the following:</p>
<pre>
CASE T1.A WHEN 1 THEN 'ABC'
WHEN 2 THEN 'DEF'
WHEN 3 THEN 'GHI'
ELSE 'JKL'
</pre></li>
<li>
<p><span class="bold">Validate Button:</span> Use this button to validate the current expression in the Expression Builder. Validation ensures that all mapping objects referred to by the expression have associated workspace objects. The expressions you create with the Expression Builder are limited to the operator inputs and to any transformations available in a project. This limitation protects the expression from becoming invalid because of changes external to the operator. If the deployment database is different from the design workspace, then it may not accept the expression. If this happens, then the expression may be valid but incorrect against the database. In this case, expression errors can only be found at deployment time.</p>
</li>
<li>
<p><span class="bold">Validation Results Field:</span> At the bottom of the right panel is the <span class="bold">Validation Results</span> field. After you select the <span class="bold">Validate</span> button to the right of this field, this field displays the validation results.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1175617"></a><a id="WBETL26003"></a>
<div class="sect1">
<h2 class="sect1">Aggregator Operator<a id="sthref2157"></a><a id="sthref2158"></a><a id="sthref2159"></a><a id="sthref2160"></a></h2>
<p><a id="sthref2161"></a><a id="sthref2162"></a><a id="sthref2163"></a>The Aggregator operator calculates data aggregations, such as summations and averages, on the input data. It provides an output row set that contains the aggregated data.</p>
<img width="20" height="20" src="img/aggregator.gif" alt="Description of aggregator.gif follows" /><br />
<a id="sthref2164" href="img_text/aggregator.htm">Description of the illustration aggregator.gif</a><br />
<br />
<p>The Aggregator operator has one input group and one output group. For the output group, define a GROUP BY clause that specifies the attributes over which the aggregation is performed. You can optionally specify a HAVING clause that restricts the aggregated data. Each attribute in the output group has the same cardinality. The number of rows in the output row set is less than or equal to the number of input rows.</p>
<p>You can use a single Aggregator operator to perform multiple aggregations. Although you can specify a different aggregation function for each attribute in the output group of an Aggregator, each Aggregator supports only one GROUP BY and one HAVING clause.</p>
<p><a href="#BCFFAFHI">Figure 26-2</a> shows a mapping that uses the Aggregator operator to aggregate the total sales over channels and products. Use the Expression property of the output attribute to specify that the aggregate function to be applied to the attribute <code>TOTAL_SALES</code> is SUM. Use the Group By property of the Aggregator operator to specify that the sales are aggregated over channel ID and product ID. The output of the Aggregator operator is mapped to the target table <code>SALES_FACT</code>.</p>
<div class="figure">
<p class="titleinfigure"><a id="BCFFAFHI"></a>Figure 26-2 Aggregator Operator in a Mapping</p>
<img width="705" height="185" src="img/aggregator_mapping.gif" alt="Description of Figure 26-2 follows" /><br />
<a id="sthref2165" href="img_text/aggregator_mapping.htm">Description of "Figure 26-2 Aggregator Operator in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<p><span class="bold">To define an Aggregator operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop an <span class="bold">Aggregator</span> operator onto the Mapping Editor canvas.</p>
</li>
<li>
<p>On the canvas, connect source attributes to the input group of the Aggregator operator.</p>
</li>
<li>
<p>Right-click the Aggregator operator and select <span class="bold">Open Details</span>.</p>
<p>Oracle Warehouse Builder displays the Aggregator Editor.</p>
</li>
<li>
<p>On the Output Attributes tab, create the output attributes that store the aggregated data.</p>
<p>To create an output attribute, click the empty cell under the Attribute column and enter the attribute name. The default data type assigned to the attribute is <code>NUMBER</code>. You can change the data type and other parameters related to the data type such as length, precision, and so on.</p>
<p>If the output attribute refers to an input attribute (from the Input group), the Group By Clause is automatically set.</p>
<p>In the example displayed in <a href="#BCFFAFHI">Figure 26-2</a>, you add an output attribute and rename it to TOTAL_SALES.</p>
</li>
<li>
<p>Define an expression for each output attribute. You can directly enter the expression in the Expression column associated with the attribute. Or, click the Ellipsis button to the right of the Expression field to display the Expression Builder. For detailed instructions on using the Expression Builder, see <a href="#BABGHDAE">"Aggregate Function Expression"</a>.</p>
<p>In the example displayed in <a href="#BCFFAFHI">Figure 26-2</a>, you define the expression as SUM(amount_sold).</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to close the Aggregator Editor.</p>
</li>
<li>
<p>Define a Group By clause and an optional Having clause for the operator. For detailed instructions, see <a href="#BABHGDFI">"Group By Clause"</a> and <a href="#BABFGHBE">"Having Clause"</a>.</p>
</li>
<li>
<p>Map the attributes in the output group of the Aggregator operator to the input group of the target.</p>
</li>
</ol>
<a id="BABHGDFI"></a>
<div class="sect2">
<h3 class="sect2">Group By Clause</h3>
<p><a id="sthref2166"></a>The Group By clause defines how to group the incoming row set to return a single summary row for each group. An ordered list of attributes in the input group specifies how this grouping is performed. The default GROUP BY clause is NONE.</p>
<p><span class="bold">To define the Group By Clause:</span></p>
<ol>
<li>
<p>Select the Aggregator operator on the Mapping Editor canvas.</p>
<p>The Property Inspector displays the properties of the Aggregator operator.</p>
</li>
<li>
<p>Click the Ellipsis button to the right of the Group By Clause property.</p>
<p>The Expression Builder is displayed.</p>
</li>
<li>
<p>Move the attributes to use to group source data from the Inputs tab to the Group By Clause for Aggregator section. When you select multiple attribute, separate attributes using a comma.</p>
</li>
<li>
<p>Click <span class="bold">OK.</span></p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BABFGHBE"></a>
<div class="sect2">
<h3 class="sect2">Having Clause</h3>
<p><a id="sthref2167"></a>The Having clause is a boolean condition that restricts the groups of rows returned in the output group to those groups for which this condition is true. If this clause is not specified, then all summary rows for all groups are returned in the output group.</p>
<p><span class="bold">To define the Having Clause:</span></p>
<ol>
<li>
<p>Select the Aggregator operator on the mapping canvas.</p>
<p>The Property Inspector displays the properties of the Aggregator operator.</p>
</li>
<li>
<p>Click the Ellipsis button to the right of the Having Clause property.</p>
<p>The Expression Builder dialog box for the Having Clause displays as shown in <a href="#BCFEDHHB">Figure 26-3</a>.</p>
<div class="figure">
<p class="titleinfigure"><a id="BCFEDHHB"></a>Figure 26-3 Having Clause Dialog Box</p>
<img width="618" height="390" src="img/aggr_havingclause.gif" alt="Description of Figure 26-3 follows" /><br />
<a id="sthref2168" href="img_text/aggr_havingclause.htm">Description of "Figure 26-3 Having Clause Dialog Box"</a><br />
<br /></div>
<!-- class="figure" --></li>
<li>
<p>Create an expression for the Having Clause of the Aggregator operator.</p>
<p>For example, <a href="#BCFEDHHB">Figure 26-3</a> shows a sample Having Clause expression.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to close the Expression Builder.</p>
</li>
<li>
<p>Map the attributes you edited from the output group of the Aggregator operator to the attributes in the target.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BABGHDAE"></a>
<div class="sect2">
<h3 class="sect2">Aggregate Function Expression</h3>
<p><a id="sthref2169"></a><a id="sthref2170"></a>The Expression property of an attribute defines the aggregation functions to be performed on the attribute. For each ungrouped output attribute, select whether the aggregation expression should be a DISTINCT or ALL result. ALL is the default setting. For example,</p>
<ul>
<li>
<p><a id="sthref2171"></a><a id="sthref2172"></a><a id="sthref2173"></a>ALL: <code>Select AVG(ALL sal) from emp;</code></p>
</li>
<li>
<p>DISTINCT: <code>Select AVG(DISTINCT sal) from emp;</code></p>
</li>
</ul>
<p>A DISTINCT result removes all duplicate rows before the average is calculated.</p>
<p>An ALL result returns an average value on all rows.</p>
<p>If no aggregation function is necessary, specify NONE for the function. Specifying NONE on the attribute aggregation automatically adds the attribute to the resulting GROUP BY function.</p>
<p><span class="bold">To define expressions for output attributes:</span></p>
<ol>
<li>
<p>In the Aggregator operator on the mapping canvas, select the output attribute for which you want to define an aggregate function.</p>
<p>The Property Inspector displays the properties of the selected output attribute.</p>
</li>
<li>
<p>Click the Ellipsis button to the right of the <span class="bold">Expression</span> property.</p>
<p>The Expression dialog box displays as shown in <a href="#i1184480">Figure 26-4</a>.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1184480"></a>Figure 26-4 Expression Dialog Box</p>
<img width="498" height="565" src="img/aggr_expression.gif" alt="Description of Figure 26-4 follows" /><br />
<a id="sthref2174" href="img_text/aggr_expression.htm">Description of "Figure 26-4 Expression Dialog Box"</a><br />
<br /></div>
<!-- class="figure" --></li>
<li>
<p>Select an aggregate function from the <span class="bold">Function</span> list.</p>
<p>The aggregate functions you can select are as follows: AVG, COUNT, GROUP_ID, GROUPING, GROUPING_ID, MAX, MEDIAN, MIN, None, STDDEV, STDDEV_POP, STDDEV_SAMP, SUM, VAR_POP, VAR_SAMP, VARIANCE, and WB_RT_CONCAT.</p>
<p>In the example displayed in <a href="#BCFFAFHI">Figure 26-2</a>, you select SUM as the aggregate function.</p>
</li>
<li>
<p>Select either ALL or DISTINCT as the aggregation expression.</p>
</li>
<li>
<p>Select the attribute that should be aggregated from the <span class="bold">Attribute</span> list.</p>
<p>In the example displayed in <a href="#BCFFAFHI">Figure 26-2</a>, you select the attribute <code>amount_sold</code> from the list.</p>
</li>
<li>
<p>Click <span class="bold">Use Above Values</span> to display the aggregate expression in the Expression field.</p>
</li>
<li>
<p>Click <span class="bold">OK.</span></p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BACHDHHC"></a><a id="WBETL26004"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Anydata <a id="sthref2175"></a><a id="sthref2176"></a><a id="sthref2177"></a>Cast Operator</h2>
<p><a id="sthref2178"></a><a id="sthref2179"></a>Anydata Cast operator enables you to convert an object of type Sys.AnyData to either a primary type or to a user-defined type. The Anydata Cast operator accepts an Anydata attribute as a source and transforms the object to the desired type.</p>
<img width="21" height="21" src="img/anydatacast.gif" alt="Description of anydatacast.gif follows" /><br />
<a id="sthref2180" href="img_text/anydatacast.htm">Description of the illustration anydatacast.gif</a><br />
<br />
<p>The Anydata Cast operator is used with user-defined data types and primitive data types. This operator acts as a filter. The number of attributes in the output group is <code><span class="codeinlineitalic">n</span></code>+1 where <code><span class="codeinlineitalic">n</span></code> is the number of attributes in the input group. This operator has one input group and one output group. The input group is editable. The output group is not editable. In an output group, you can only rename the attributes and change the data type of only the cast target. You cannot change the data type of any other output group attribute.</p>
<p>You can connect attributes to the input group. Each output group gets a copy of the input group attributes, including the Anydata attributes. You must choose an Anydata attribute of the input group as the source of the Cast operation.</p>
<p>If you change the data type to which you are going to cast the Anydata attribute, then you must:</p>
<ol>
<li>
<p>Edit the output group attribute that is the target of the Cast operation</p>
</li>
<li>
<p>Change the data type of the attribute.</p>
</li>
</ol>
<p>Because the Anydata Cast operator is unbound, it does not support any synchronization operations.</p>
<p><a href="#CHDJEFCJ">Figure 26-5</a> displays a mapping that uses an Anydata Cast operator.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDJEFCJ"></a>Figure 26-5 Anydata Cast in a Mapping</p>
<img width="656" height="297" src="img/anydatacast_map.gif" alt="Description of Figure 26-5 follows" /><br />
<a id="sthref2181" href="img_text/anydatacast_map.htm">Description of "Figure 26-5 Anydata Cast in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<p><span class="bold">To define a Anydata Cast operator in a mapping:</span></p>
<ol>
<li>
<p>Drop an Anydata Cast operator onto the Mapping Editor canvas.</p>
<p>The AnyData Cast dialog box is displayed. The tree inside the dialog box has one parent node that opens to display the primary data types (other than Anydata). Each of the other parent nodes corresponds to the modules.</p>
</li>
<li>
<p>Select the target type for casting and click <span class="bold">Finish</span>.</p>
</li>
<li>
<p>Right-click the ANYDATA CAST operator and select <span class="bold">Open Details</span>.</p>
<p>Oracle Warehouse Builder displays the ANYDATA_CAST Editor.</p>
</li>
<li>
<p>On the Input Attributes tab, click <span class="bold">Add</span> and specify the attribute name, data type, and other properties.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to close the operator editor.</p>
</li>
<li>
<p>Map the attributes of the output group of the Anydata Cast operator to the target.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="i1183782"></a><a id="WBETL26005"></a>
<div class="sect1">
<h2 class="sect1">Deduplicator Operator<a id="sthref2182"></a><a id="sthref2183"></a><a id="sthref2184"></a></h2>
<p><a id="sthref2185"></a><a id="sthref2186"></a>The Deduplicator operator enables you to remove duplicate data in a source by placing a <a id="sthref2187"></a><a id="sthref2188"></a>DISTINCT clause in the select code represented by the mapping.</p>
<img width="21" height="21" src="img/deduplicator.gif" alt="Description of deduplicator.gif follows" /><br />
<a id="sthref2189" href="img_text/deduplicator.htm">Description of the illustration deduplicator.gif</a><br />
<br />
<p>For example, when you load data from a source table into a dimension, the higher levels within a dimension may be duplicated in the source.</p>
<p>All attributes from a source rowset must pass through the Deduplicator operator. You cannot map part of the output from a source rowset and part of the output from the Deduplicator operator to the same target table.</p>
<p><a href="#BCFCIAIB">Figure 26-6</a> displays a mapping that uses the Deduplicator operator to remove duplicate values in the source while loading data into the <code>PRODUCTS</code> dimension. The source table contains duplicate values for category ID because more than one products may belong to the same category. The Deduplicator operator removes these duplicates and loads distinct values of category ID into the <code>PRODUCTS</code> dimension.</p>
<div class="figure">
<p class="titleinfigure"><a id="BCFCIAIB"></a>Figure 26-6 Deduplicator in a Mapping</p>
<img width="592" height="176" src="img/deduplicator_map.gif" alt="Description of Figure 26-6 follows" /><br />
<a id="sthref2190" href="img_text/deduplicator_map.htm">Description of "Figure 26-6 Deduplicator in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<p><span class="bold">To remove duplicates:</span></p>
<ol>
<li>
<p>Drop the Deduplicator operator onto the Mapping Editor canvas.</p>
</li>
<li>
<p>Connect the attributes from the source operator to the I/O group of the Deduplicator operator.</p>
</li>
<li>
<p>Connect the attributes from the Deduplicator operator group to the attributes of the target operator.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="i1175750"></a><a id="WBETL26006"></a>
<div class="sect1">
<h2 class="sect1">Expression Operator<a id="sthref2191"></a><a id="sthref2192"></a><a id="sthref2193"></a></h2>
<p><a id="sthref2194"></a><a id="sthref2195"></a><a id="sthref2196"></a><a id="sthref2197"></a>Use the Expression operator to write SQL expressions that define nonprocedural algorithms for one output parameter of the operator.</p>
<img width="20" height="20" src="img/expression.gif" alt="Description of expression.gif follows" /><br />
<a id="sthref2198" href="img_text/expression.htm">Description of the illustration expression.gif</a><br />
<br />
<p>The expression text can contain combinations of input parameter names, variable names, and library functions. Use the Expression operator to transform the column value data of rows within a row set using SQL-type expressions, while preserving the cardinality of the input row set. To create these expressions, open the Attribute properties window for the output attribute and then open the Expression Builder.</p>
<p>By default, the Expression operator contains one input group and one output group.</p>
<p><a href="#BCFIBIFB">Figure 26-7</a> shows a mapping that uses the Expression operator. The transaction table <code>ORACLE_ORDERS</code> contains order details such as product ID, unit price, and quantity sold. The <code>ORDERS_FACT</code> table contains an aggregation of the total sales amount across channels, products, and orders. The Expression operator is used to compute the amount of sale for each product by multiplying the unit price by the quantity sold. The Aggregator operator aggregates the sale amounts over channel code, product ID, and order ID before loading the target table.</p>
<div class="figure">
<p class="titleinfigure"><a id="BCFIBIFB"></a>Figure 26-7 Expression Operator in a Mapping</p>
<img width="738" height="323" src="img/expression_map.gif" alt="Description of Figure 26-7 follows" /><br />
<a id="sthref2199" href="img_text/expression_map.htm">Description of "Figure 26-7 Expression Operator in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Do not use the Expression operator to write aggregation functions. Use the Aggregator operator. See <a href="#i1175617">"Aggregator Operator"</a> for more information about the Aggregator operator.</p>
<p>Also, do not use a line-end or double-dash comment (<code>--</code>) after an expression in an expression operator if the expression is connected to an aggregation operator, as this causes a deployment compile error. This is because an aggregation operator in this scenario adds parenthesis, and the commenting removes one of them, creating unbalanced parenthesis.</p>
<p><span class="bold">To define an Expression operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop an Expression operator onto the Mapping Editor canvas.</p>
</li>
<li>
<p>Right-click the Expression operator and select <span class="bold">Open Details</span>.</p>
<p>Oracle Warehouse Builder displays the Expression Editor.</p>
</li>
<li>
<p>On the Output Attributes tab, create an output attribute by clicking on a blank cell under the Attribute column. The default data type assigned is NUMERIC. You can modify the data type and other parameters associated with the data type.</p>
</li>
<li>
<p>Define the expression used for the output attribute.</p>
<p>Enter the expression directly in the Expression field of the output attribute. Or click the Ellipsis button to the right of the Expression field to display the Expression builder dialog box that enables you to specify the expression.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to close the Expression Editor.</p>
</li>
<li>
<p>Connect the Expression output attribute to the appropriate target attribute.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="i1175751"></a><a id="WBETL26007"></a>
<div class="sect1">
<h2 class="sect1">Filter Operator<a id="sthref2200"></a><a id="sthref2201"></a><a id="sthref2202"></a></h2>
<p>You can conditionally filter out rows using the Filter operator. <a id="sthref2203"></a><a id="sthref2204"></a><a id="sthref2205"></a></p>
<img width="20" height="20" src="img/filter.gif" alt="Description of filter.gif follows" /><br />
<a id="sthref2206" href="img_text/filter.htm">Description of the illustration filter.gif</a><br />
<br />
<p>You connect a source operator to the Filter operator, apply a filter condition, and send a subset of rows to the next operator. The Filter operator filters data from a source to a target by placing a <a id="sthref2207"></a><a id="sthref2208"></a>WHERE clause in SQL statement or a IF statement of the generated PL/SQL code. You specify the filter condition using the Expression Builder. The filter condition can be based on all supported data types and can contain constants.</p>
<p>A Filter operator has only one I/O group that can be connected to both a source and target row set. The resulting row set is a filtered subset of the source row set-based on a boolean filter condition expression. All rows that are required at the target must pass through the Filter operator. No row set can bypass the filter and be directly inserted in the target.</p>
<p>For a mapping that contains a Filter operator, code that displays the filter condition expression as a WHERE clause for set-based view mode is generated. The filter input names in the original filter condition are replaced by actual column names from the source table, qualified by the source table alias.</p>
<p><a href="#BCFCHCJG">Figure 26-8</a> shows the mapping that uses the Filter operator to move selected data to the target table. The <code>ORACLE_ORDERS</code> table contains orders data. Use the Filter Condition property of the Filter operator to move only the booked orders which were last updated on the current system date into the <code>ORDERS</code> table.</p>
<div class="figure">
<p class="titleinfigure"><a id="BCFCHCJG"></a>Figure 26-8 Filter in a Mapping</p>
<img width="675" height="229" src="img/filter_map.gif" alt="Description of Figure 26-8 follows" /><br />
<a id="sthref2209" href="img_text/filter_map.htm">Description of "Figure 26-8 Filter in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<p><span class="bold">To define a Filter operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop the <span class="bold">Filter</span> operator onto the Mapping Editor canvas.</p>
</li>
<li>
<p>Connect source attributes to the I/O group of the Filter operator.</p>
</li>
<li>
<p>Select the Filter operator header.</p>
<p>The Property Inspector displays the properties of the Filter operator.</p>
</li>
<li>
<p>Click the Ellipsis button to the right of the Filter Condition property.</p>
<p>Oracle Warehouse Builder displays the Expression Builder dialog box for the filter condition.</p>
</li>
<li>
<p>Define a filter condition expression using the Expression Builder.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to close the Expression Builder.</p>
</li>
<li>
<p>Connect the Filter operator outputs to the I/O group in the target.</p>
</li>
</ol>
<a id="CHDIJHHB"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Adding <a id="sthref2210"></a><a id="sthref2211"></a>Self Joins in a Mapping</h3>
<p>The Mapping Editor enables you to recursively join a table, view, or other source data operators onto itself.</p>
<p>Also known as <span class="italic"><a id="sthref2212"></a>tree walking</span>, recursively joining a table back onto itself enables you to retrieve records in a hierarchy. For example, consider a table that contains employee data including the manager for each employee. Using tree walking, you could determine the hierarchy of employees reporting up to a given manager.</p>
<p>To perform tree walking:</p>
<ol>
<li>
<p>Create a mapping and add the desired source data operator such as a Table, View, or a Materialized View operator, which contains the hierarchal definition.</p>
</li>
<li>
<p>Connect that source data operator to a Filter operator.</p>
</li>
<li>
<p>In the Filter operator, define the filter condition with CONNECT BY as the first two words. Make sure that you include only the connect by logic in the Filter operator. That is, do not include any AND or OR logic in the filter.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1175752"></a><a id="WBETL26008"></a>
<div class="sect1">
<h2 class="sect1">Joiner Operator<a id="sthref2213"></a><a id="sthref2214"></a><a id="sthref2215"></a></h2>
<p><a id="sthref2216"></a><a id="sthref2217"></a><a id="sthref2218"></a>The Joiner operator joins multiple row sets from different sources with different cardinalities, and produces a single output row set.</p>
<img width="20" height="20" src="img/joiner.gif" alt="Description of joiner.gif follows" /><br />
<a id="sthref2219" href="img_text/joiner.htm">Description of the illustration joiner.gif</a><br />
<br />
<p>In general, a Joiner operator corresponds to a SQL <code>JOIN</code> clause. For more information about SQL joins, see <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>The Joiner operator uses a boolean condition called the join condition that relates column values in each source row set to at least one other row set. The Joiner operator results in a <code>WHERE</code> clause in the generated SQL query. When run on Oracle9<span class="italic">i</span> or higher, ANSI full outer joins are supported.</p>
<p>You can use the Joiner operator to create inner joins, outer joins, equijoins, and non- equijoins. You can also create self joins by using a Filter operator as described in <a href="#CHDIJHHB">"Adding Self Joins in a Mapping"</a>.</p>
<p>For all Joiners, you must set a join condition, as described in <a href="#BABIEIDF">"Join Conditions"</a>.</p>
<p>For Joiners that define outer joins, you must use one of two methods to specify the outer join type:</p>
<ul>
<li>
<p>Insert Oracle SQL outer join operators (+) in the join condition, as described in <a href="#BABIEIDF">"Join Conditions"</a>.</p>
</li>
<li>
<p>Set joiner input roles on the input groups, as described in <a href="#BABFCDDG">"Join Input Roles and Inner and Outer Joins"</a>.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>You cannot use both joiner input role settings and join conditions to specify outer joins.</p>
</li>
<li>
<p>Operators placed between data sources and a Joiner can generate complex SQL or PL/SQL.</p>
</li>
<li>
<p>Nested Joiners with no intervening operators that generate a subquery (for example, an aggregator) are generally consolidated into a single join in the generated code. You may notice this in reviewing generated code for a mapping that uses multiple nested join operators.</p>
</li>
</ul>
</div>
<a id="BABIEIDF"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Join Conditions</h3>
<p>The Join Condition property of a Joiner determines the join condition in the generated code for the Joiner. By inserting the outer join operator (+), you can also use the join condition to create inner, left outer, right outer, or full outer joins.</p>
<p>The relational operator in a join condition is not restricted to equality. You can also use other operators such as, &gt;, &lt;, !=, &gt;=, &lt;= . Aggregation functions are not supported in join conditions.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2220"></a>
<h4 class="sect3"><a id="sthref2221"></a>Join Conditions and Cartesian Products</h4>
<p>If two tables in a join query do not have a join condition specified, the Cartesian product of the two tables is returned.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2222"></a>
<h4 class="sect3">Default Join Conditions and Foreign Keys<a id="sthref2223"></a><a id="sthref2224"></a><a id="sthref2225"></a></h4>
<p>If the input row sets are related through foreign keys, that relationship can be used to form a default join condition.</p>
<div class="infoboxnotealso">
<p class="notep1">Note:</p>
Oracle Warehouse Builder can only create a default join condition for you if you have mapped your sources to the input groups of the Joiner operator before editing the join condition.</div>
<p>You can use this default condition or you can modify it further. If the sources are not related through foreign keys, then you must define a join condition manually.</p>
<p>If the default foreign keys result in duplicate WHERE clauses, the Joiner operator removes the duplicate clauses when creating the default join condition. This can happen if the join condition references several foreign keys. For example, if table T1 has a foreign key FK1 pointing to unique key UK1 in table T2 and table T2 has a foreign key FK2 pointing to unique key UK2 in T1, the resulting join condition</p>
<pre>
T1.A = T2.A AND T1.B = T2.B 
        /*All instances of FK1 -&gt; UK1 are reduced to one WHERE clause*/ 
      AND T2.B = T1.B AND T2.C = T1.C 
        /*All instances of FK2 -&gt; UK2 are reduced to one WHERE clause */
</pre>
<p>is generated by the Joiner operator as</p>
<pre>
T2.A = T2.A AND T1.B = T2.B AND T2.C = T1.C
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2226"></a>
<h4 class="sect3">Using <a id="sthref2227"></a><a id="sthref2228"></a><a id="sthref2229"></a>Join Conditions for Outer Joins</h4>
<p><a id="sthref2230"></a>In a join condition using Oracle SQL, you can use the outer join operator (+) to create an outer join in the generated SQL.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Join input roles provide an alternative to use of outer join operators for controlling outer join behavior in a Joiner, and may be more maintainable than using outer join operators in a complex join expression with multiple input groups.
<p>See <a href="#BABFCDDG">"Join Input Roles and Inner and Outer Joins"</a> for details.</p>
</div>
<p>For example:</p>
<pre>
SELECT ...
FROM A, B
WHERE A.key = B.key (+); 
</pre>
<p>This example creates a left outer join.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2231"></a>
<h4 class="sect3">Using<a id="sthref2232"></a><a id="sthref2233"></a><a id="sthref2234"></a> Join Conditions for Full Outer Joins</h4>
<p><a id="sthref2235"></a>If your target is based on Oracle9<span class="italic">i</span> or later, the Joiner operator also supports full outer joins using the join condition. To specify a full outer join condition, you must place the outer join operator on both sides of a relational operator. For example:</p>
<pre>
T1.A (+) = T2.B (+)
</pre>
<p>The code generated for the above join expression is:</p>
<pre>
SELECT ...
FROM T1 FULL OUTER JOIN T2 ON (T1.A = T2.B);
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Although Oracle Warehouse Builder enables a full outer join to be specified by using the "(+)" notation on both sides of the condition predicate, this construct is actually invalid Oracle SQL syntax. Therefore, during code generation, Oracle Warehouse Builder translates any such join condition into ANSI SQL syntax.</div>
<p>When creating a full outer join from the join condition, note the following:</p>
<ul>
<li>
<p>The ANSI join syntax is generated only if you specify a full outer join condition in the joiner. Otherwise, the following Oracle SQL join syntax is generated:</p>
<pre>
SELECT ...
FROM T1, T2
WHERE T1.A = T2.B;
</pre></li>
</ul>
<ul>
<li>
<p>You can specify both full outer join and join conditions in the same joiner. However, if both conditions are specified for the same sources, the more restrictive join type is used for generating code. For example, if you specify:</p>
<pre>
T1.A(+) = T2.A(+) and T1.B = T2.B
</pre>
<p>Oracle Warehouse Builder generates an inner join statement instead of a full outer join because <code>T1.B = T2.B</code> is more restrictive than the full outer join condition between T1 and T2.</p>
</li>
<li>
<p>You cannot specify a full outer join and partial outer join condition in the same joiner. If you specify a full outer join, then you cannot specify a partial outer join anywhere in the join condition. For example, <code>T1.A (+) = T2.A (+) and T2.B = T3.B (+)</code> is not valid.</p>
</li>
<li>
<p>To create a full outer join in Oracle8<span class="italic">i</span>, you must use multiple SQL statements.</p>
<p>The Expression Builder enables the following syntax for a full outer join:</p>
<pre>
TABLE1.COL1 (+) = TABLE2.COL2 (+) 
</pre>
<p>The code generator translates the preceding expression into an ANSI SQL 1999 full outer join statement, similar to:</p>
<pre>
SELECT ... 
FROM table1 FULL OUTER JOIN table2 ON (table1.col1 = table2.col2) 
</pre>
<p>This syntax is not supported in Oracle8<span class="italic">i</span>. Specifying a full outer join to an Oracle8<span class="italic">i</span> database results in a validation error.</p>
<p>Oracle Warehouse Builder 10.2 uses the ANSI syntax to convert the full outer join whereas, Oracle Warehouse Builder 11.2 omits the condition clause and forms a cross join giving the following validation error message.</p>
<p>VLD - 1526: A predicate in the join condition of operator {0} has two columns from different tables with "(+)". This is only supported when using ANSI SQL syntax. When ANSI SQL Syntax configuration is set to false, a predicate may reference only one outer-joined table. Either change the join condition or set ANSI SQL Syntax to true.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref2236"></a>
<h4 class="sect3">Grouping Join Conditions</h4>
<p>When you create a join between more than two tables containing multiple conditions, you must clearly indicate which conditions should be grouped.</p>
<p>Follow these guidelines while defining joins that contain multiple conditions:</p>
<ul>
<li>
<p>Use parentheses in the join condition to force clauses to be combined into one single condition.</p>
<p>For example, if the join condition is specified as:</p>
<pre>
A.ID = B.ID AND (B.ID (+) = C.ID (+) AND B.ID &gt; 10)
</pre>
<p>Oracle Warehouse Builder generates the following code (in this example assume ANSI code generation is specified):</p>
<pre>
SELECT ...
FROM
    "A"  "A"  
 JOIN   "B"  "B" ON ( ( "A"."ID" = "B"."ID" ) )
 FULL OUTER JOIN   "C"  "C" ON ( "B"."ID" = "C"."ID"  )  WHERE
  ( "B"."ID" &gt; 10 )
</pre>
<p>The last clause, <code>B.ID (+) &gt; 10</code>, is not included in any join condition but is treated as a WHERE clause.</p>
<p>If you use parentheses to group the clauses as follows:</p>
<pre>
A.ID = B.ID AND (B.ID (+) = C.ID (+) AND B.ID &gt; 10)
</pre>
<p>Oracle Warehouse Builder generates the following code:</p>
<pre>
SELECT ...
FROM
    "A"  "A"  
 JOIN   "B"  "B" ON ( ( "A"."ID" = "B"."ID" ) )
 FULL OUTER JOIN   "C"  "C" ON ( ( "B"."ID" = "C"."ID" and "B"."ID"  &gt; 10 )/*
OPERATOR JOINER JOIN CONDITION */ )
</pre>
<p>The clause <code>B.ID (+) &gt; 10</code> is now included in the <code>FULL OUTER JOIN</code> condition.</p>
</li>
<li>
<p>You can use the outer join condition sign (+) to force Warehouse Builder to generate a condition within the join.</p>
<p>For example, in the join condition</p>
<pre>
A.ID = B.ID AND B.ID (+) = C.ID (+) AND B.ID (+) &gt; 10 
</pre>
<p>the presence of the outer join operator in the clause <code>B.ID (+) &gt; 10</code> forces Oracle Warehouse Builder to include the condition <code>B.ID &gt; 10</code> in the join, instead of generating a separate WHERE clause.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The use of the (+) operator to force grouping in this manner is a behavior specific to Oracle Warehouse Builder code generation and may not yield the same results as the same expression in standard Oracle SQL in some cases.</div>
<p>The generated code is:</p>
<pre>
SELECT ...
FROM
    "A"  "A"  
 JOIN  ( SELECT
/* B.INOUTGRP1 */
  "B"."ID" "ID",
  "B"."NAME" "NAME",
  "B"."ATTR" "ATTR"
FROM
  "B"  "B" ) "B" ON ( ( ( "A"."ID" = "B"."ID" ) ) AND ( ( "B"."ID" &gt; 10 ) ) )
 FULL OUTER JOIN   "C"  "C" ON ( "B"."ID" = "C"."ID"  ) 
</pre>
<p>In this case, since parenthesis is not used, the single condition B.ID (+) &gt; 10 is moved into the first ON clause.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you configure ANSI SQL code generation for a mapping containing a Joiner operator, it is recommended that you inspect the generated code to verify that the conditions are grouped as intended. Sometimes, because of ambiguous conditions, the generated code may group conditions differently from what you expected.
<p>You can force grouping of join conditions using one of the following techniques:</p>
<ul>
<li>
<p>You can use multiple nested Joiner operators in a mapping, with each operator having two input groups. This makes explicit the handling of join conditions and grouping.</p>
</li>
<li>
<p>Alternatively, you can set the ANSI SQL Syntax parameter to false. This generates the <code>WHERE</code> clause exactly as specified by the Join Condition property.</p>
</li>
</ul>
</div>
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref2237"></a>
<h5 class="sect4">Code Template Mappings and Grouping Join Conditions</h5>
<p>For code template mappings, if you do not follow either of the guidelines listed above, a validation warning is displayed and one of the following actions is performed:</p>
<ul>
<li>
<p>If the condition listed last cannot be combined with the condition adjacent to it, the last condition is moved to the WHERE clause.</p>
<p>Consider the condition C.ENAME = A.ENAME AND A.DEPTNO = B.DEPTNO AND C.SAL (+) &gt; 1000. The condition C.SAL (+) &gt; 1000 can be paired with C.ENAME = A.ENAME. However, its placement is not consistent with such a pairing and so a validation warning is displayed.</p>
</li>
<li>
<p>If the condition listed last can be combined with the condition adjacent to it, a combined group condition is formed.</p>
<p>Consider the condition A.DEPTNO = B.DEPTNO AND C.ENAME = A.ENAME AND C.SAL (+) &gt; 1000. The condition C.SAL (+) &gt; 1000 can be paired with C.ENAME = A.ENAME. Thus it is included as part of the combined condition C.ENAME = A.ENAME AND C.SAL (+) &gt; 1000.</p>
</li>
</ul>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2238"></a>
<h4 class="sect3">Join Conditions and Join Order</h4>
<p>By default, the order of input groups in a joiner is used as the join order.</p>
<p>When generating ANSI SQL syntax, you can force a different join order by using a specific order in the join condition. Consider the following example:</p>
<pre>
SELECT ...
      FROM T1 FULL OUTER JOIN T2 ON (T1.A=T2.A) 
                         JOIN T3 ON (T2.A=T3.A);
</pre>
<pre>
</pre>
<p>If you create input groups in another order, such as T1, T3, T2. Oracle Warehouse Builder generates the following:</p>
<pre>
      SELECT ...
      FROM T1 JOIN T3 ON (1=1) 
              JOIN T2 ON (T1.A=T2.A and T2.A=T3.A);
</pre>
<p>When T1 and T3 are joined, there is no join condition specified. Oracle Warehouse Builder fills in a condition 1=1 (essentially a boolean true) and the two conditions you specified are used to join (T1 JOIN T3) with T2.</p>
<p>Now consider an example where the input groups are created in the order T1, T3, T2, but you want the generated FROM clause order to be T1, T2, T3 as in the first example. Then create the join condition so that the sources appear in the order that they should appear in the generated code, like this:</p>
<pre>
T1.A(+) = T2.A(+) AND T2.A = T3.A
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2239"></a>
<h4 class="sect3">Filters in Join Conditions</h4>
<p>The filter condition is applied after join. For example, consider the following join:</p>
<pre>
Input1.c --- + 
Input2.c --- +---&gt; Joiner 
Input3.c --- +    
</pre>
<p>with the following conditions:</p>
<ul>
<li>
<p><span class="bold">Condition 1:</span> Input1.c (+) = Input2.c (+)</p>
</li>
<li>
<p><span class="bold">Condition 2:</span> Input2.c = Input3.c</p>
</li>
<li>
<p><span class="bold">Condition 3:</span> Input1.c is not null</p>
</li>
</ul>
<p>The first two conditions are true joins while the third is a filter condition. If ANSI code is to be generated, then the join condition is interpreted as</p>
<pre>
SELECT ... 
FROM Input1 FULL OUTER JOIN Input2 ON (Input1.c = Input2.c) 
JOIN Input3 ON (Input2.c = Input3.c) 
WHERE Input1.c IS NOT NULL; 
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2240"></a>
<h4 class="sect3">Join <a id="sthref2241"></a><a id="sthref2242"></a>Conditions and SAP Sources</h4>
<p>The join condition is defined in a SQL context. For SAP sources, ABAP code can be generated by interpreting the SQL join condition in the ABAP context. ABAP can only join over defined foreign key relationships.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABFCDDG"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Join Input Roles and Inner and Outer Joins</h3>
<p><a id="sthref2243"></a><a id="sthref2244"></a><a id="sthref2245"></a><a id="sthref2246"></a>Join input roles on joiner input groups provide flexible control of the use of inner and outer joins on the input data flows.</p>
<p>Possible join input roles for an input group are: Standard (the default), Outer Join and Full Outer Join. Oracle Warehouse Builder can generate ANSI SQL or Oracle SQL for inner joins, left and right outer joins, and full outer joins based on these settings. Use the order of input groups and the input role settings on each input group to specify the type of join to create.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If using outer join operators in join expression to control outer joins, set the join input roles for all groups to Standard.</div>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2247"></a>
<h4 class="sect3">Specifying Inner and Outer Join Types Using Join Input Roles</h4>
<p><a id="sthref2248"></a><a id="sthref2249"></a><a id="sthref2250"></a><a id="sthref2251"></a>When considering two adjacent input groups, the join relationship between them in the generated code is determined by the join role property setting of the two groups. Assume that input group INGRP1 is connected to source table T1 and input group INGRP2 is connected to source table T2. The join relationship is determined by the following rules (in order of precedence):</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref2252"></a><a id="CIHFCFGC"></a>Table 26-1 Join Input Roles and Resulting Join Types</p>
<table class="cellalignment2975" title="Join Input Roles and Resulting Join Types" summary="This table summarizes combinations of join input roles and the resulting join types." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t9">Input Roles</th>
<th class="cellalignment2976" id="r1c2-t9">Resulting Join Operation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t9" headers="r1c1-t9">
<p>Both roles set to Standard (default)</p>
</td>
<td class="cellalignment2977" headers="r2c1-t9 r1c2-t9">
<p>Inner join</p>
<pre>
T1 JOIN T2
</pre></td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t9" headers="r1c1-t9">
<p>Either role set to Full Outer</p>
</td>
<td class="cellalignment2977" headers="r3c1-t9 r1c2-t9">
<p>Full outer join</p>
<pre>
T1 FULL OUTER JOIN T2
</pre></td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t9" headers="r1c1-t9">
<p>INGRP1 role set to Standard</p>
<p>INGRP2 role set to Outer</p>
</td>
<td class="cellalignment2977" headers="r4c1-t9 r1c2-t9">
<p>Left outer join</p>
<pre>
T1 LEFT OUTER JOIN T2
</pre></td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t9" headers="r1c1-t9">
<p>INGRP1 role set to Outer</p>
<p>INGRP2 role set to Standard</p>
</td>
<td class="cellalignment2977" headers="r5c1-t9 r1c2-t9">
<p>Right outer join</p>
<pre>
T1 RIGHT OUTER JOIN T2
</pre></td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r6c1-t9" headers="r1c1-t9">
<p>Both roles set to Outer</p>
</td>
<td class="cellalignment2977" headers="r6c1-t9 r1c2-t9">
<p>See <a href="#CIHGBCFB">"Outer Join Input Roles with More than Two Input Groups"</a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<a id="CIHGBCFB"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Outer Join Input Roles with More than Two Input Groups</h4>
<p>When there are more than two input groups, Oracle Warehouse Builder iterates over the input groups, and generates a series of joins linking the input tables.</p>
<p>If one or the other input group has the input role Standard or Full Outer Join, then the join generated is determined using the rules described in <a href="#CIHFCFGC">Table 26-1, "Join Input Roles and Resulting Join Types"</a>.</p>
<p>However, if two consecutive input groups both have the input role Outer Join, then the join generated may be a left outer join or a right outer join, depending upon the previous join generated. The rules for determining the join type to generated are in <a href="#CIHDIIDA">Table 26-2, "Join Generated for Consecutive Outer Join Input Roles"</a>. In this table, assume that INGRP1, INGRP2 and INGRP3 are associated with tables T1, T2 and T3 respectively.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref2253"></a><a id="CIHDIIDA"></a>Table 26-2 Join Generated for Consecutive Outer Join Input Roles</p>
<table class="cellalignment2975" title="Join Generated for Consecutive Outer Join Input Roles" summary="This table summarizes combinations of join input roles and the resulting join types." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t10">Input Roles</th>
<th class="cellalignment2976" id="r1c2-t10">Resulting Join Operation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t10" headers="r1c1-t10">
<p>The two input groups are the first two input groups</p>
<p>INGRP1 = Outer</p>
<p>INGRP2 = Outer</p>
</td>
<td class="cellalignment2977" headers="r2c1-t10 r1c2-t10">
<p>Right outer join</p>
<pre>
T1 RIGHT OUTER JOIN T2
</pre></td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t10" headers="r1c1-t10">
<p>The preceding join generated was a Left Outer Join</p>
<p>INGRP1 = Standard</p>
<p>INGRP2 = Outer</p>
<p>INGRP3 = Outer</p>
</td>
<td class="cellalignment2977" headers="r3c1-t10 r1c2-t10">
<p>Left outer join</p>
<pre>
T1 LEFT OUTER JOIN T2 
   LEFT OUTER JOIN T3
</pre></td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t10" headers="r1c1-t10">
<p>The preceding join generated was not a Left Outer Join</p>
<p>INGRP1 = Outer</p>
<p>INGRP2 = Outer</p>
<p>INGRP3 = Outer</p>
</td>
<td class="cellalignment2977" headers="r4c1-t10 r1c2-t10">
<p>Right outer join</p>
<pre>
T1 RIGHT OUTER JOIN T2 
   RIGHT OUTER JOIN T3
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABDDECG"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Steps to Use a Joiner Operator in a Mapping</h3>
<p><a id="i1190885"></a><a id="BABICAJE"></a><span class="bold">To add a Joiner operator to a mapping:</span></p>
<ol>
<li>
<p>Drag and drop the Joiner operator onto the Mapping Editor canvas.</p>
</li>
<li>
<p>You must join more than two sources, right-click the Joiner operator and select <span class="bold">Open Details</span>.</p>
<p>Oracle Warehouse Builder displays the Joiner Editor.</p>
<p>On the Groups tab, create more input groups as needed.</p>
<p>To create an input group, click the empty cell under the Group column and enter the new group name. The default direction assigned to the new group is <code>Input</code>.</p>
<p>Click <span class="bold">OK</span> after adding your input groups.</p>
</li>
<li>
<p>For each input group, connect an output group from a source to the desired Joiner input group.</p>
<p>Output attributes are created with data types matching the corresponding input data types.</p>
</li>
<li>
<p>If necessary, change the Input Role for each source.</p>
<p>See <a href="#BABFCDDG">"Join Input Roles and Inner and Outer Joins"</a>.</p>
</li>
<li>
<p>Select the Joiner operator header.</p>
<p>The Property Inspector displays the properties of the Joiner operator.</p>
</li>
<li>
<p>Click the Ellipsis button to the right of the Join Condition property.</p>
<p>The Expression Builder dialog box is displayed.</p>
</li>
<li>
<p>Define the join condition.</p>
<p>See <a href="#BABIEIDF">"Join Conditions"</a>.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to close the Expression Builder.</p>
</li>
<li>
<p>Map the attributes of the output group of the Joiner operator to the target.</p>
</li>
</ol>
<p class="subhead1"><a id="sthref2254"></a>Example: Using the Joiner Operator</p>
<p><a href="#BCFDEADA">Figure 26-9</a> shows a mapping that contains a Joiner operator. The two source tables <code>ORACLE_ORDERS</code> and <code>ORACLE_ORDER_LINES</code> are joined to combine the data from these tables into one table. The output of the Joiner operator is passed to the target table <code>DAILY_ORDERS</code>.</p>
<div class="figure">
<p class="titleinfigure"><a id="BCFDEADA"></a>Figure 26-9 Joiner in a Mapping</p>
<img width="689" height="370" src="img/join_map.gif" alt="Description of Figure 26-9 follows" /><br />
<a id="sthref2255" href="img_text/join_map.htm">Description of "Figure 26-9 Joiner in a Mapping"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABHFCHB"></a><a id="WBETL26009"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">LCR Cast <a id="sthref2256"></a><a id="sthref2257"></a><a id="sthref2258"></a>Operator</h2>
<p>Use the LCR Cast operator to expand an LCR (Logical Change Record) object into its constituent columns. It enables you to update the target object with insert, update, or delete operations contained in the LCR. Typically, the LCR Cast operator is used just after a Queue operator in a real-time mapping that publishes source changes to target objects.</p>
<img width="22" height="22" src="img/lcr_cast_oper.gif" alt="Description of lcr_cast_oper.gif follows" /><br />
<a id="sthref2259" href="img_text/lcr_cast_oper.htm">Description of the illustration lcr_cast_oper.gif</a><br />
<br />
<p>The LCR Cast operator must be bound to the table for which it stores change records. It contains one input group and one output group, both of which are non-editable. You cannot add groups to this operator, but you can rename the existing input or output group. The input group contains an attribute Event, of type SYS.LCR$_ROW_RECORD, that stores the LCRs. You must connect a <code>SYS.ANYDATA</code> attribute to the input group. The output group contains the columns of the tables to which the LCR Cast operator is bound.</p>
<p><span class="bold">To add an LCR Cast operator to a mapping:</span></p>
<ol>
<li>
<p>Drag and drop a LCR Cast operator onto the Mapping Editor canvas.</p>
<p>Oracle Warehouse Builder displays the Add LCR Cast dialog box.</p>
</li>
<li>
<p>Select the table to which the LCR Cast operator must be bound.</p>
</li>
<li>
<p>Connect the output attribute of a source operator to the input group of the LCR Cast operator.</p>
</li>
<li>
<p>Connect the attributes of the output group in the LCR Cast operator to the target table to which you want to publish the changes contained in the LCR.</p>
</li>
</ol>
<p><a href="#BABDEIEI">Figure 26-10</a> describes an example of using the LCR Cast operator in a mapping. The Queue operator ADVANCED_QUEUE represents the advanced queue that stores the change records for the source table. The LCR Cast operator is bound to the target table into which the changed records from the source should be transferred.</p>
<p>The AQ contains a payload that is represented by the PAYLOAD attribute. The payload stores change data in the form of LCRs. Map the PAYLOAD attribute the LCR Cast operator to expand the LCR into the columns contained in the target table that is bound to the LCR Cast operator. You then map the output attributes of the LCR Cast operator to the target table <code>ORDERS</code>.</p>
<div class="figure">
<p class="titleinfigure"><a id="BABDEIEI"></a>Figure 26-10 Mapping that Uses an LCR Cast Operator</p>
<img width="668" height="163" src="img/lcr_cast_map.gif" alt="Description of Figure 26-10 follows" /><br />
<a id="sthref2260" href="img_text/lcr_cast_map.htm">Description of "Figure 26-10 Mapping that Uses an LCR Cast Operator"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect1" -->
<a id="BABCDGGJ"></a><a id="WBETL26010"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">LCR Splitter <a id="sthref2261"></a><a id="sthref2262"></a><a id="sthref2263"></a>Operator</h2>
<p>Use the LCR Splitter operator to direct changes to different tables along data flow paths.</p>
<img width="22" height="22" src="img/lcr_splitter_oper.gif" alt="Description of lcr_splitter_oper.gif follows" /><br />
<a id="sthref2264" href="img_text/lcr_splitter_oper.htm">Description of the illustration lcr_splitter_oper.gif</a><br />
<br />
<p>The LCR Splitter contains one input group and one output group. Both groups contain one attribute called Event of type SYS.LCR$_ROW_RECORD. The input group represents the represents the LCR object. You cannot add input or output groups.</p>
</div>
<!-- class="sect1" -->
<a id="i1175753"></a><a id="WBETL26011"></a>
<div class="sect1">
<h2 class="sect1">Lookup Operator<a id="sthref2265"></a><a id="sthref2266"></a><a id="sthref2267"></a></h2>
<p>Use the Lookup operator to lookup data from a table, view, cube, or dimension. For example, use the Lookup operator when you define a mapping that loads a cube or when you define surrogate<a id="sthref2268"></a><a id="sthref2269"></a> keys on the dimension.</p>
<p>You can use the same Lookup operator to lookup data from multiple objects.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink WBCON" href="../e10581/toc.htm"><span class="italic">Oracle Warehouse Builder Concepts</span></a> for information about surrogate identifiers.</div>
<img width="20" height="20" src="img/key_lookup.gif" alt="Description of key_lookup.gif follows" /><br />
<a id="sthref2270" href="img_text/key_lookup.htm">Description of the illustration key_lookup.gif</a><br />
<br />
<p>The key that you look up can be any unique value. It need not be a primary or unique key, as defined in an RDBMS. The Lookup operator reads data from a lookup table using the key input you supply and returns exactly one matching row. This operator returns a row for each input key. You can have multiple Lookup operators in the same mapping.</p>
<p>The output of the Lookup operator corresponds to the columns in the lookup object. In case multiple records are returned by the lookup operation, you can specify which of these records is selected.</p>
<p>The Lookup Wizard contains one input group and one output group. You can create additional input and output groups. The attributes in each input group must be connected from the same data source. Each output group is bound to one lookup object. Each lookup uses attributes from only one input group as search values. That is, each output group is associated with only one input group. The tooltip for each output group displays the input group associated with it and the lookup condition used.</p>
<p>Since an output group is bound to an object, its attributes are the columns in the object. You can create additional output attributes, that are derived from the object columns, by using the Expression property of the output attribute.</p>
<p>Each output attribute for the lookup has a property called DEFAULT VALUE. The DEFAULT VALUE property is used instead of NULL in the outgoing row set if no value is found in the lookup table for an input value. The generated code uses the NVL function. The Lookup always results in an outer-join statement.</p>
<p>The table, view, or dimension from which the data is being looked up is bound to the Lookup operator. You can synchronize a Lookup operator with the workspace object to which it is bound. But you cannot synchronize the workspace object with the Lookup operator. For more information about synchronizing operators, see <a href="mappings.htm#i1139074">"Synchronizing Operators and Workspace Objects"</a>.</p>
<p class="subhead2"><a id="sthref2271"></a>Points to Keep In Mind while Using the Lookup Operator</p>
<p>The Lookup operator returns only one row. When the result of the lookup returns multiple rows, you must specify which of the rows must be used as the return value. You can select either the first row or the last row from the returned rows.</p>
<p>Since you are selecting the first or last row, the order in which the lookup results are returned is important. Since SQL queries do not guarantee repeatable order, you must specify the appropriate ORDER BY clause to sort lookup results. To eliminate non-determinism, ensure that you specify a detailed ordering clause that ensures that the desired record is picked as the lookup result.</p>
<p><a href="#BCFDAFGC">Figure 26-11</a> shows a mapping that is used to load a cube. Data from four source tables is joined using a Joiner operator. But the data in the source tables only contains a channel name. To load the cube, we need the value of the surrogate identifier. A Lookup operator is used to lookup the surrogate identifier of the <code>CHANNELS</code> dimension and then load this value into the cube.</p>
<div class="figure">
<p class="titleinfigure"><a id="BCFDAFGC"></a>Figure 26-11 Lookup Operator in a Mapping</p>
<img width="684" height="427" src="img/keylookup_map.gif" alt="Description of Figure 26-11 follows" /><br />
<a id="sthref2272" href="img_text/keylookup_map.htm">Description of "Figure 26-11 Lookup Operator in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2273"></a>
<h3 class="sect2">Using the Lookup Operator</h3>
<p>You have the following options for using a Lookup operator:</p>
<ul>
<li>
<p><span class="bold">Define a new Lookup operator:</span> Drag a Lookup operator from the Palette onto the mapping. The Mapping Editor displays a wizard.</p>
</li>
<li>
<p><span class="bold">Edit an existing Lookup operator:</span> Right-click the Lookup operator and select <span class="bold">Open Details</span>.</p>
</li>
</ul>
<p>Whether you are using the operator wizard or the operator editor, complete the following pages:</p>
<ul>
<li>
<p><a href="#CHDJDIJE">"Name"</a></p>
</li>
<li>
<p><a href="#CHDGBIBI">"Groups"</a></p>
</li>
<li>
<p><a href="#CHDCBCGG">"Lookup Tables"</a></p>
</li>
<li>
<p><a href="#CHDBCGFC">"Input Attributes"</a></p>
</li>
<li>
<p><a href="#CHDHHEAI">"Output Attributes"</a></p>
</li>
<li>
<p><a href="#BABBEJAI">"Lookup Conditions"</a></p>
</li>
<li>
<p><a href="#CHDJCCAI">"Multiple Match Rows"</a></p>
</li>
<li>
<p><a href="#BABBICGH">"Type 2 History Lookup"</a></p>
</li>
<li>
<p><a href="#BABHFGHJ">"No-match Rows"</a></p>
</li>
</ul>
<a id="CHDJDIJE"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Name</h4>
<p>Use the Name page or Name tab to specify a name and optional description for the Lookup operator.</p>
</div>
<!-- class="sect3" -->
<a id="CHDGBIBI"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Groups</h4>
<p>Use the Groups page to specify one input and one output group.</p>
<p>In a Lookup operator, the input group represents the data from the source that is contained across multiple attributes. The output group represents that data transformed into rows.</p>
<p>You can rename and add descriptions to the default input and output groups. You can also create additional input and output groups that you require. To create an input or output group, specify a name for the group, select the direction (Input or Output), and provide an optional description.</p>
</div>
<!-- class="sect3" -->
<a id="CHDCBCGG"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Lookup Tables</h4>
<p>Every output group is associated with a lookup table. Use the Lookup Tables page or the Lookup Tables tab to select the lookup table that must be associated with each output group.</p>
<p>The Group field displays all the output groups defined for the Lookup operator. Select an output group and specify the lookup table to which the output group is bound. To select the lookup table, click the list in the section below the Group field. The objects from which you can perform a lookup are listed in the tree displayed. Select the lookup object.</p>
<p>Repeat this step for all the output groups in the Lookup operator.</p>
</div>
<!-- class="sect3" -->
<a id="CHDBCGFC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Input Attributes</h4>
<p>Use the Input Attributes page to define the input attributes of each input group.</p>
<p>The Group field lists all the input groups defined for the Lookup operator. Select an input group, and create the attributes for that group. Each input attribute contains a field called Default Value. Use this field to specify a default value for the input attribute.</p>
</div>
<!-- class="sect3" -->
<a id="CHDHHEAI"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Output Attributes</h4>
<p>Use the Output Attributes field to create output attributes in each output group. Since each output group is bound to a lookup object, the columns from the bound lookup object are automatically listed as output attributes for the group. Create any additional output attributes that are required. These could be values that are derived from the existing attributes using expressions.</p>
<p>The Groups list lists the output groups defined for the Lookup operator. Select an output group to display the attributes in this group. To create an output attribute, click a blank cell in the Name field and enter the attribute name. Then specify the additional parameters of the attribute such as data type, default values, description, and so on.</p>
<p>Output attributes have an additional parameter called Expression. Use this column to specify the expression used to determine the value of the output attribute. You can enter the expression directly in the Expression column. Or, click the Ellipsis button to the right of the Expression column to display the Expression Builder interface. Use this interface to define the expression.</p>
</div>
<!-- class="sect3" -->
<a id="BABBEJAI"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Lookup Conditions</h4>
<p>Use the Lookup page to provide details about the object on which the lookup is being performed. This object is referred to as the lookup result. You can perform a lookup on any table, view, or dimension that belongs to the current project.</p>
<p>On the Lookup page, also associate each output group with its corresponding input group. Each output group must be bound to one input group. This input group provides the values that are searched for in the lookup table represented by the output group.</p>
<p>The Output field lists the output groups and the Input field lists the input groups of the Lookup operator. Select and output group and from the Input list, select the input group to which it is bound. Repeat this process for all output groups.</p>
<p>Once the output groups are bound to the corresponding input groups, you must map the output attributes and the input attributes that must be compared to perform the lookup. Select the output group in the Output field and use the area at the bottom of this page to specify the lookup condition. The contents displayed in this area depend on whether you choose Simple Editing or Freestyle Editing.</p>
<p>If you selected Simple Editing, a table with two columns is displayed. Use the Lookup Table Column to select the column from the lookup table with which the attribute selected in the Input Attribute column is compared.</p>
<p>If you select Freestyle Editing, an interface similar to the Expression Builder is displayed. Use this to define the condition that is used as the lookup condition. You can use an equality or a non-equality condition as the lookup condition.</p>
<p>If you select a dimension level for the lookup, the options displayed are the surrogate and business identifier of the dimension level and the primary key of the database table that stores the dimension data.</p>
</div>
<!-- class="sect3" -->
<a id="CHDJCCAI"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Multiple Match Rows</h4>
<p>Use the Multiple Match Rows page to define which row from the lookup result should be selected as the lookup result if the lookup returns multiple rows. Multiple rows are returned if the lookup condition specified matched multiple record.</p>
<p>For each output group, you must define the action to be taken if multiple rows are returned by the lookup operation.</p>
<p>Select an output group in the Output Group field and then specify values for this group as described in the following sections.</p>
<p class="subhead2"><a id="sthref2274"></a>Selecting the Action to Perform When Multiple Rows are Returned</p>
<p>Select one of the following options:</p>
<ul>
<li>
<p><span class="bold">Error: multiple rows cause mapping to fail</span></p>
<p>Select this option to indicate that when the mapping that contains this Lookup operator is run, if the lookup operation for the selected output group returns multiple row, the mapping execution fails.</p>
</li>
<li>
<p><span class="bold">All Rows (number of result rows may differ from the number of input rows)</span></p>
<p>Select this option to indicate that when the Lookup operator returns multiple rows for the selected output group, all the rows should be returned as the lookup result.</p>
</li>
<li>
<p><span class="bold">Select single row</span></p>
<p>Select this option to specify that when the Lookup operator returns multiple rows for the selected output group, only one row from the returned rows must be selected as the lookup result. When you select this option, the fields contained in the section below this option are enabled. Use these fields to specify which row from the lookup result set should be selected as the lookup result.</p>
</li>
</ul>
<p class="subhead2"><a id="sthref2275"></a>Specifying the Row to Select as the Lookup Result</p>
<p>You must select the one row that should be selected from the multiple rows produced by the lookup operation only if you selected the Select single row option in the previous section.</p>
<p>For each output group, specify the following information about the row that must be selected from the multiple rows returned from the lookup operation.</p>
<p><span class="bold">Row Position:</span> Select one of the following options:</p>
<ul>
<li>
<p>Any row</p>
<p>Any one row among the result set returned by the Lookup operator is selected as the lookup result.</p>
</li>
<li>
<p>First row</p>
<p>The first row from the result set returned by the Lookup operator is selected as the lookup result.</p>
</li>
<li>
<p>Last row</p>
<p>The first row from the result set returned by the Lookup operator is selected as the lookup result.</p>
</li>
<li>
<p>Nth row</p>
<p>The <span class="italic">n</span>th row from the result set returned by the Lookup operator is selected as the lookup result. Click the list on the <span class="bold">Nth Row</span> field to specify the values of <span class="italic">n</span>.</p>
</li>
</ul>
<p><span class="bold">Order Result Set By</span></p>
<p>Use this section to specify how the rows in the result set (containing multiple rows) should be ordered. Ordering columns is important when you select the first, last, or <span class="italic">n</span>th row from the result set as the lookup result. Ensure that you specify ordering conditions such that the row you want returned is selected.</p>
<p>The Available section lists the lookup table columns for the output group selected in the Output Group field. Select the columns to use to order rows in the lookup result set and use the arrow to move them to the Selected section. In the Selected section, ensure that the columns are listed in the same order (from top to bottom) in which you want the result set to be ordered. For example, to implement an ordering such as ORDER BY attr2, attr3, and then attr1, the attributes should be listed in the same order in the Selected section. You can use the arrows to the right of the Selected section to change the position of selected columns.</p>
</div>
<!-- class="sect3" -->
<a id="BABHFGHJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">No-match Rows</h4>
<p>Use the No-match Rows page to indicate the action to be taken when there are no rows that satisfy the lookup condition specified on the Lookup page. You must specify an action for all the output groups.</p>
<p>Select an output group in the Output Group field and then choose one of the following options:</p>
<ul>
<li>
<p><span class="bold">Return no row</span></p>
<p>This option does not return any row when no row in the lookup result satisfies the matching condition.</p>
</li>
<li>
<p><span class="bold">Return a row with the following default values</span></p>
<p>This option returns a row that contains default values when the lookup condition is not satisfied by the lookup result. Use the table below this option to specify the default values for each lookup column.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BABBICGH"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Type 2 History Lookup</h4>
<p>Use this page only if you selected a Type 2 SCD as the lookup result on the Lookup page. When the lookup result is a Type 2 SCD, you must specify which version of a particular record is to be used as a lookup.</p>
<p>For each output group that you bound to a Type 2 SCD, select the group in the Output Group field and then choose one of the following options:</p>
<ul>
<li>
<p><span class="bold">Use the most current record</span></p>
<p>This option returns the current record that corresponds to the attribute being looked up using the lookup condition. The current record is the one with the latest timestamp.</p>
</li>
<li>
<p><span class="bold">Specify the historic date as a constant value</span></p>
<p>This option returns the record that contains the constant value that is specified using the <span class="bold">Date</span> and <span class="bold">Time</span> lists.</p>
</li>
<li>
<p><span class="bold">Choose an input attribute that holds the historic value</span></p>
<p>This option enables you return records that pertain to a date and time that is contained in one of the input attributes. Use the <span class="bold">Input Attribute</span> list to select the attribute that contains the historic value.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1175501"></a><a id="WBETL26012"></a>
<div class="sect1">
<h2 class="sect1">Pivot Operator<a id="sthref2276"></a><a id="sthref2277"></a><a id="sthref2278"></a></h2>
<p>The Pivot operator enables you to transform a single row of attributes into multiple rows.</p>
<img width="20" height="20" src="img/pivot_icon.gif" alt="Description of pivot_icon.gif follows" /><br />
<a id="sthref2279" href="img_text/pivot_icon.htm">Description of the illustration pivot_icon.gif</a><br />
<br />
<p>Use this operator in a mapping when you want to transform data that is contained across attributes instead of rows. This situation can arise when you extract data from non-relational data sources such as data in a crosstab format.</p>
<a id="i1135501"></a>
<div class="sect2">
<h3 class="sect2">Example: Pivoting Sales Data<a id="sthref2280"></a></h3>
<p>The external table <code>SALES_DAT</code> contains data from a flat file. There is a row for each sales representative and separate columns for each month.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink WBDOD" href="../e10582/toc.htm"><span class="italic">Oracle Warehouse Builder Sources and Targets Guide</span></a> for more information about external tables.</div>
<p><a href="#i1135514">Figure 26-12</a> displays the flat file <code>SALES_DAT</code>.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1135514"></a>Figure 26-12 SALES_DAT</p>
<img width="701" height="137" src="img/pivot_ff.gif" alt="Description of Figure 26-12 follows" /><br />
<a id="sthref2281" href="img_text/pivot_ff.htm">Description of "Figure 26-12 SALES_DAT"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a href="#g1251740">Table 26-3</a> shows a sample of the data after a pivot operation is performed. The data that was formerly contained across multiple columns (M1, M2, M3...) is now contained in a single attribute (Monthly_Sales). A single ID row in <code>SALES_DAT</code> corresponds to 12 rows in pivoted data.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref2282"></a><a id="g1251740"></a>Table 26-3 Pivoted Data</p>
<table class="cellalignment2975" title="Pivoted Data " summary="This table shows sample data after a pivot operation. The table contains four columns describing the Rep, Month, monthly sales, and region records." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t13">REP</th>
<th class="cellalignment2976" id="r1c2-t13">MONTH</th>
<th class="cellalignment2976" id="r1c3-t13">MONTHLY_SALES</th>
<th class="cellalignment2976" id="r1c4-t13">REGION</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t13" headers="r1c1-t13">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r2c1-t13 r1c2-t13">
<p>Jan</p>
</td>
<td class="cellalignment2977" headers="r2c1-t13 r1c3-t13">
<p>10.5</p>
</td>
<td class="cellalignment2977" headers="r2c1-t13 r1c4-t13">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t13" headers="r1c1-t13">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r3c1-t13 r1c2-t13">
<p>Feb</p>
</td>
<td class="cellalignment2977" headers="r3c1-t13 r1c3-t13">
<p>11.4</p>
</td>
<td class="cellalignment2977" headers="r3c1-t13 r1c4-t13">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t13" headers="r1c1-t13">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r4c1-t13 r1c2-t13">
<p>Mar</p>
</td>
<td class="cellalignment2977" headers="r4c1-t13 r1c3-t13">
<p>9.5</p>
</td>
<td class="cellalignment2977" headers="r4c1-t13 r1c4-t13">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t13" headers="r1c1-t13">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r5c1-t13 r1c2-t13">
<p>Apr</p>
</td>
<td class="cellalignment2977" headers="r5c1-t13 r1c3-t13">
<p>8.7</p>
</td>
<td class="cellalignment2977" headers="r5c1-t13 r1c4-t13">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r6c1-t13" headers="r1c1-t13">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r6c1-t13 r1c2-t13">
<p>May</p>
</td>
<td class="cellalignment2977" headers="r6c1-t13 r1c3-t13">
<p>7.4</p>
</td>
<td class="cellalignment2977" headers="r6c1-t13 r1c4-t13">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r7c1-t13" headers="r1c1-t13">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r7c1-t13 r1c2-t13">
<p>Jun</p>
</td>
<td class="cellalignment2977" headers="r7c1-t13 r1c3-t13">
<p>7.5</p>
</td>
<td class="cellalignment2977" headers="r7c1-t13 r1c4-t13">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r8c1-t13" headers="r1c1-t13">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r8c1-t13 r1c2-t13">
<p>Jul</p>
</td>
<td class="cellalignment2977" headers="r8c1-t13 r1c3-t13">
<p>7.8</p>
</td>
<td class="cellalignment2977" headers="r8c1-t13 r1c4-t13">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r9c1-t13" headers="r1c1-t13">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r9c1-t13 r1c2-t13">
<p>Aug</p>
</td>
<td class="cellalignment2977" headers="r9c1-t13 r1c3-t13">
<p>9.7</p>
</td>
<td class="cellalignment2977" headers="r9c1-t13 r1c4-t13">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r10c1-t13" headers="r1c1-t13">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r10c1-t13 r1c2-t13">
<p>Sep</p>
</td>
<td class="cellalignment2977" headers="r10c1-t13 r1c3-t13">
<p>NULL</p>
</td>
<td class="cellalignment2977" headers="r10c1-t13 r1c4-t13">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r11c1-t13" headers="r1c1-t13">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r11c1-t13 r1c2-t13">
<p>Oct</p>
</td>
<td class="cellalignment2977" headers="r11c1-t13 r1c3-t13">
<p>NULL</p>
</td>
<td class="cellalignment2977" headers="r11c1-t13 r1c4-t13">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r12c1-t13" headers="r1c1-t13">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r12c1-t13 r1c2-t13">
<p>Nov</p>
</td>
<td class="cellalignment2977" headers="r12c1-t13 r1c3-t13">
<p>NULL</p>
</td>
<td class="cellalignment2977" headers="r12c1-t13 r1c4-t13">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r13c1-t13" headers="r1c1-t13">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r13c1-t13 r1c2-t13">
<p>Dec</p>
</td>
<td class="cellalignment2977" headers="r13c1-t13 r1c3-t13">
<p>NULL</p>
</td>
<td class="cellalignment2977" headers="r13c1-t13 r1c4-t13">
<p>4</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>To perform the pivot transformation in this example, create a mapping like the one shown in <a href="#i1135637">Figure 26-13</a>.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1135637"></a>Figure 26-13 Pivot Operator in a Mapping</p>
<img width="491" height="103" src="img/pivot_map.gif" alt="Description of Figure 26-13 follows" /><br />
<a id="sthref2283" href="img_text/pivot_map.htm">Description of "Figure 26-13 Pivot Operator in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In this mapping that performs the pivot transformation, the data is read from the external table once, pivoted, aggregated, and written it to a target in set-based mode. It is not necessary to load the data to a target directly after pivoting it. You can use the Pivot operator in a series of operators before and after directing data into the target operator. You can place operators such as filter, joiner, and set operation before the Pivot operator. Since pivoted data is not a row-by-row operation, you can also run the mapping in set-based mode.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2284"></a>
<h3 class="sect2">The Row Locator<a id="sthref2285"></a><a id="sthref2286"></a></h3>
<p>In the Pivot operator, the row locator is an output attribute that you create to correspond to the repeated set of data from the source. When you use the Pivot operator, a single input attribute is transformed into multiple rows and generates values for a row locator. In this example, since the source contains attributes for each month, you can create an output attribute named '<code>MONTH</code>' and designate it as the row locator. Each row from <code>SALES_DAT</code> then yields 12 rows of pivoted data in the output.</p>
<p><a href="#BABCICDG">Table 26-4</a> shows the data from the first row from <code>SALES_DAT</code> after the data is pivoted with '<code>MONTH</code>' as the row indicator.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref2287"></a><a id="BABCICDG"></a>Table 26-4 Data Pivoted By Row Indicator</p>
<table class="cellalignment2975" title="Data Pivoted By Row Indicator" summary="This table shows data from the first row from SALES_DAT after the data is pivoted with MONTH as the row indicator." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t14">REP</th>
<th class="cellalignment2976" id="r1c2-t14">MONTH</th>
<th class="cellalignment2976" id="r1c3-t14">MONTHLY_SALES</th>
<th class="cellalignment2976" id="r1c4-t14">REGION</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t14" headers="r1c1-t14">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r2c1-t14 r1c2-t14">
<p>Jan</p>
</td>
<td class="cellalignment2977" headers="r2c1-t14 r1c3-t14">
<p>10.5</p>
</td>
<td class="cellalignment2977" headers="r2c1-t14 r1c4-t14">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t14" headers="r1c1-t14">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r3c1-t14 r1c2-t14">
<p>Feb</p>
</td>
<td class="cellalignment2977" headers="r3c1-t14 r1c3-t14">
<p>11.4</p>
</td>
<td class="cellalignment2977" headers="r3c1-t14 r1c4-t14">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t14" headers="r1c1-t14">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r4c1-t14 r1c2-t14">
<p>Mar</p>
</td>
<td class="cellalignment2977" headers="r4c1-t14 r1c3-t14">
<p>9.5</p>
</td>
<td class="cellalignment2977" headers="r4c1-t14 r1c4-t14">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t14" headers="r1c1-t14">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r5c1-t14 r1c2-t14">
<p>Apr</p>
</td>
<td class="cellalignment2977" headers="r5c1-t14 r1c3-t14">
<p>8.7</p>
</td>
<td class="cellalignment2977" headers="r5c1-t14 r1c4-t14">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r6c1-t14" headers="r1c1-t14">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r6c1-t14 r1c2-t14">
<p>May</p>
</td>
<td class="cellalignment2977" headers="r6c1-t14 r1c3-t14">
<p>7.4</p>
</td>
<td class="cellalignment2977" headers="r6c1-t14 r1c4-t14">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r7c1-t14" headers="r1c1-t14">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r7c1-t14 r1c2-t14">
<p>Jun</p>
</td>
<td class="cellalignment2977" headers="r7c1-t14 r1c3-t14">
<p>7.5</p>
</td>
<td class="cellalignment2977" headers="r7c1-t14 r1c4-t14">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r8c1-t14" headers="r1c1-t14">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r8c1-t14 r1c2-t14">
<p>Jul</p>
</td>
<td class="cellalignment2977" headers="r8c1-t14 r1c3-t14">
<p>7.8</p>
</td>
<td class="cellalignment2977" headers="r8c1-t14 r1c4-t14">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r9c1-t14" headers="r1c1-t14">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r9c1-t14 r1c2-t14">
<p>Aug</p>
</td>
<td class="cellalignment2977" headers="r9c1-t14 r1c3-t14">
<p>9.7</p>
</td>
<td class="cellalignment2977" headers="r9c1-t14 r1c4-t14">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r10c1-t14" headers="r1c1-t14">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r10c1-t14 r1c2-t14">
<p>Sep</p>
</td>
<td class="cellalignment2977" headers="r10c1-t14 r1c3-t14">
<p>NULL</p>
</td>
<td class="cellalignment2977" headers="r10c1-t14 r1c4-t14">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r11c1-t14" headers="r1c1-t14">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r11c1-t14 r1c2-t14">
<p>Oct</p>
</td>
<td class="cellalignment2977" headers="r11c1-t14 r1c3-t14">
<p>NULL</p>
</td>
<td class="cellalignment2977" headers="r11c1-t14 r1c4-t14">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r12c1-t14" headers="r1c1-t14">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r12c1-t14 r1c2-t14">
<p>Nov</p>
</td>
<td class="cellalignment2977" headers="r12c1-t14 r1c3-t14">
<p>NULL</p>
</td>
<td class="cellalignment2977" headers="r12c1-t14 r1c4-t14">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r13c1-t14" headers="r1c1-t14">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r13c1-t14 r1c2-t14">
<p>Dec</p>
</td>
<td class="cellalignment2977" headers="r13c1-t14 r1c3-t14">
<p>NULL</p>
</td>
<td class="cellalignment2977" headers="r13c1-t14 r1c4-t14">
<p>4</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="i1135777"></a>
<div class="sect2">
<h3 class="sect2">Using the Pivot Operator<a id="sthref2288"></a><a id="sthref2289"></a><a id="sthref2290"></a></h3>
<p>You have the following options for using a Pivot operator:</p>
<ul>
<li>
<p><span class="bold">Define a new Pivot operator:</span> Use the Pivot Wizard to add a new Pivot operator to a mapping. Drag a Pivot operator from the Palette onto the mapping. The Mapping Editor displays the Pivot Wizard.</p>
</li>
<li>
<p><span class="bold">Edit an existing Pivot operator:</span> Use the Pivot Editor to edit a Pivot operator you previously created. Right-click the Pivot operator and select <span class="bold">Open Details</span>. The Mapping Editor opens the Pivot Editor.</p>
</li>
</ul>
<p>Whether you are using the Pivot Wizard or the Pivot Editor, complete the following pages:</p>
<ul>
<li>
<p><a href="#i1135808">"General"</a></p>
</li>
<li>
<p><a href="#i1165985">"Groups"</a></p>
</li>
<li>
<p><a href="#i1135836">"Input Connections"</a></p>
</li>
<li>
<p><a href="#i1135868">"Input Attributes"</a></p>
</li>
<li>
<p><a href="#i1135886">"Output Attributes"</a></p>
</li>
<li>
<p><a href="#i1135909">"Pivot Transform"</a></p>
</li>
</ul>
<a id="i1135808"></a>
<div class="sect3">
<h4 class="sect3">General</h4>
<p>Use the General page to specify a name and optional description for the Pivot operator. By default, the wizard names the operator "Pivot".</p>
</div>
<!-- class="sect3" -->
<a id="i1165985"></a>
<div class="sect3">
<h4 class="sect3">Groups<a id="sthref2291"></a></h4>
<p>Use the Groups page to specify one input and one output group.</p>
<p>In a Pivot operator, the input group represents the data from the source that is contained across multiple attributes. The output group represents that data transformed into rows.</p>
<p>You can rename and add descriptions to the input and output groups. Since each Pivot operator must have exactly one input and one output group, the wizard prevents you from adding or removing groups or changing group direction.</p>
</div>
<!-- class="sect3" -->
<a id="i1135836"></a>
<div class="sect3">
<h4 class="sect3">Input Connections</h4>
<p>Use the Input Connections page to copy and map attributes into the Pivot operator. The attributes you select become mapped to the pivot input group. The left side of the page displays a list of all the operators in the mapping.</p>
<p><a href="#i1135843">Figure 26-14</a> shows a group from the external table <code>SALES_DAT</code> selected as input for the Pivot operator.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1135843"></a>Figure 26-14 Pivot Operator Input Connections Tab</p>
<img width="679" height="511" src="img/pivot_inputconn.gif" alt="Description of Figure 26-14 follows" /><br />
<a id="sthref2292" href="img_text/pivot_inputconn.htm">Description of "Figure 26-14 Pivot Operator Input Connections Tab"</a><br />
<br /></div>
<!-- class="figure" -->
<p><span class="bold">To complete the Input Connections page for a Pivot operator:</span></p>
<ol>
<li>
<p>Select complete groups or individual attributes from the left panel.</p>
<p>To search for a specific attribute or group by name, type the text in <span class="bold">Search for</span> and select <span class="bold">Go.</span> To find the next match, select <span class="bold">Go</span> again.</p>
<p>Press the Shift key to select multiple attributes. To select attributes from different groups, then you must first combine the groups with a Joiner or Set operator.</p>
</li>
<li>
<p>Use the right arrow button in the middle of the page to move your selections to the right side of the wizard page.</p>
<p>Use the left arrow to remove groups or attributes from the input connections list. Oracle Warehouse Builder removes the selection from the input group and removes the data flow connection between the source operator and the Pivot operator.</p>
<p><a href="#i1135862">Figure 26-15</a> shows a group from <code>SALES_DAT</code> copied and mapped into the <code>PIVOTSALES</code> operator.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1135862"></a>Figure 26-15 Attributes Copied and Mapped into Pivot In Group</p>
<img width="452" height="316" src="img/pivot_input_map.gif" alt="Description of Figure 26-15 follows" /><br />
<a id="sthref2293" href="img_text/pivot_input_map.htm">Description of "Figure 26-15 Attributes Copied and Mapped into Pivot In Group"</a><br />
<br /></div>
<!-- class="figure" --></li>
</ol>
</div>
<!-- class="sect3" -->
<a id="i1135868"></a>
<div class="sect3">
<h4 class="sect3">Input Attributes<a id="sthref2294"></a></h4>
<p>Use the Input Attributes page to modify the attributes you selected in the Input Connections tab or wizard page.</p>
<p>You can perform the following tasks from the Input Attributes page:</p>
<ul>
<li>
<p><span class="bold">Add attributes:</span> Enter the attribute name and other attribute details in an empty row on this page.</p>
</li>
<li>
<p><span class="bold">Change attribute properties:</span> You can change the attribute name, data type, length, precision, and scale.</p>
</li>
<li>
<p><span class="bold">Add an optional description:</span> Type a description for the input attributes.</p>
</li>
<li>
<p><span class="bold">Designate attribute keys:</span> As an option, use the <span class="bold">Key</span> check box to indicate an attribute that uniquely identifies the input group.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1135886"></a>
<div class="sect3">
<h4 class="sect3">Output Attributes<a id="sthref2295"></a></h4>
<p>Use the Output Attributes page to create the output attributes for the Pivot operator. If you designated any input attributes as keys on the Input Attributes tab or wizard page, then those input attributes are displayed as output attributes that you cannot edit or delete.</p>
<p><a href="#i1135897">Figure 26-16</a> displays the output attributes with <code>MONTH</code> selected as the row locator.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1135897"></a>Figure 26-16 Pivot Output Attributes Tab</p>
<img width="680" height="511" src="img/pivot_output.gif" alt="Description of Figure 26-16 follows" /><br />
<a id="sthref2296" href="img_text/pivot_output.htm">Description of "Figure 26-16 Pivot Output Attributes Tab"</a><br />
<br /></div>
<!-- class="figure" -->
<p>You can perform the following tasks from the pivot Output Attributes Page:</p>
<ul>
<li>
<p><span class="bold">Change attribute properties:</span> Except for attributes you designated as keys on the previous tab or wizard page, you can change the attribute name, data type, length, precision, and scale.</p>
</li>
<li>
<p><span class="bold">Add an optional description:</span> Type a description for the output attributes.</p>
</li>
<li>
<p><span class="bold">Designate a row locator:</span> Although you are not required to designate a row locator for the Pivot operator, it is recommended. When you identify the row locator on the Output Attributes page or tab, it is easier for you to match your output data to the input data.</p>
<p>In the Pivot operator, the row locator<a id="sthref2297"></a><a id="sthref2298"></a> is an output attribute that corresponds to the repeated set of data from the source. For example, if the source data contains separate attributes for each month, create an output attribute '<code>MONTH</code>' and designate it as the row locator.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1135909"></a>
<div class="sect3">
<h4 class="sect3">Pivot Transform<a id="sthref2299"></a></h4>
<p>Use the Pivot Transform page to write expressions for each output attribute.</p>
<p>By default, two rows are displayed. Use <span class="bold">Add</span> to specify how many rows of output you want from a single row in the source. For example, if your source contains an attribute for each quarter in a year, you can specify 4 rows of output for each row in the source. If the source data contains an attribute for each month in the year, then you can specify 12 rows of output for each row in the source.</p>
<p><a href="#i1135921">Figure 26-17</a> shows the Pivot Transform tab with the pivot expressions defined for a source with an attribute for each month.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1135921"></a>Figure 26-17 Pivot Transform Tab</p>
<img width="679" height="515" src="img/pivot_transform.gif" alt="Description of Figure 26-17 follows" /><br />
<a id="sthref2300" href="img_text/pivot_transform.htm">Description of "Figure 26-17 Pivot Transform Tab"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Write pivot expressions based on the following types of output:</p>
<ul>
<li>
<p><span class="bold">Row locator:</span> Specify a name for each row where the name is a value you want to load into the table. For example, if the row locator is 'MONTH', type 'Jan' for the first row.</p>
</li>
<li>
<p><span class="bold">Pivoted output data:</span> Select the appropriate expression from the list box. For example, for the row you define as 'Jan', select the expression that returns the set of values for January.</p>
</li>
<li>
<p><span class="bold">Attributes previously specified as keys:</span> Defines the expression for you.</p>
</li>
<li>
<p><span class="bold">Unnecessary data:</span> If the Pivot Transform page contains data that you do not want as output, use the expression 'NULL'. Oracle Warehouse Builder outputs a repeated set of rows with no data for attributes you define as 'NULL'.</p>
</li>
</ul>
<p>When using the wizard to create a Pivot operator, click <span class="bold">Finish</span> when you want to close the wizard. The Mapping Editor displays the operator you defined.</p>
<p>When using the Pivot Editor to edit an existing Pivot operator, click <span class="bold">OK</span> when you have finished editing the operator. The Mapping Editor updates the operator with the changes you made.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1136847"></a><a id="WBETL26013"></a>
<div class="sect1">
<h2 class="sect1">Post-Mapping Process Operator<a id="sthref2301"></a><a id="sthref2302"></a><a id="sthref2303"></a></h2>
<p>Use a Post-Mapping Process operator to define a procedure to be run after running a PL/SQL mapping. For example, you can use a Post-Mapping Process operator to reenable and build indexes after a mapping completes successfully and loads data into the target.</p>
<img width="20" height="20" src="img/post_map.gif" alt="Description of post_map.gif follows" /><br />
<a id="sthref2304" href="img_text/post_map.htm">Description of the illustration post_map.gif</a><br />
<br />
<p>The Post-Mapping Process operator calls a function or procedure after the mapping is run. The output parameter group provides the connection point for the returned value (if implemented through a function) and the output parameters of the function or procedure. There are no restrictions on the connections of these output attributes</p>
<p>The Post-Mapping Process operator contains groups corresponding to the number and direction of the parameters associated with the selected PL/SQL procedure or function. This list of groups and attributes can only be modified through synchronization with workspace objects.</p>
<p>You can map constants, data generators, mapping input parameters, and output from a Pre-Mapping Process into a Post-Mapping Process operator. The Post-Mapping Process operator is not valid for an SQL*Loader mapping.</p>
<p>After you add a Post-Mapping Process operator to the Mapping Editor, use the operator properties dialog box to specify run conditions in which to run the process.</p>
<p><span class="bold">To use a Post-Mapping Process operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop a Post-Mapping Process operator onto the Mapping Editor canvas.</p>
<p>Oracle Warehouse Builder displays the Add Post-Mapping Process dialog box.</p>
</li>
<li>
<p>Use the Add Post-Mapping Process dialog box to select or create a transformation. For more information about how to use the Add Post-Mapping Process dialog box, see <a href="mappings.htm#CHDEJAAD">"Using the Add Operator Dialog Box to Add Operators"</a>.</p>
</li>
<li>
<p>Connect the output attribute of a source operator to the I/O group of the Post-Mapping Process operator.</p>
</li>
<li>
<p>Set the run conditions for the operator.</p>
</li>
</ol>
<p><span class="bold">To set run conditions for a Post-Mapping Process operator:</span></p>
<ol>
<li>
<p>From the mapping canvas, select a Post-Mapping Process operator.</p>
<p>The Property Inspector displays the properties of the Post-Mapping Process operator.</p>
</li>
<li>
<p>Click <span class="bold">Post-Mapping Process Run Condition</span> and select one of the following run conditions:</p>
<p><span class="bold">Always:</span> The process runs regardless of errors from the mapping.</p>
<p><span class="bold">On Success:</span> The process runs only if the mapping completes without errors.</p>
<p><span class="bold">On Error:</span> The process runs only if the mapping completes with errors exceeding the number of enabled errors set for the mapping.</p>
<p><span class="bold">On Warning:</span> The process runs only if the mapping completes with errors that are less than the number of enabled errors set for the mapping.</p>
<p>If you select <span class="bold">On Error</span> or <span class="bold">On Warning</span> and the mapping runs in row-based mode, you must verify the <a href="ref_maps_processflows.htm#i1118043"><span class="xreftitlebold">Maximum Number of Errors</span></a> set for the mapping. To view the number of enabled errors, right-click the mapping in the Projects Navigator, select <span class="bold">Configure,</span> and expand <span class="bold">Runtime Parameters.</span></p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="i1175523"></a><a id="WBETL26014"></a>
<div class="sect1">
<h2 class="sect1">Pre-Mapping Process Operator<a id="sthref2305"></a><a id="sthref2306"></a><a id="sthref2307"></a></h2>
<p>Use a Pre-Mapping Process operator to define a procedure to be run before running a mapping.</p>
<img width="20" height="20" src="img/pre_map.gif" alt="Description of pre_map.gif follows" /><br />
<a id="sthref2308" href="img_text/pre_map.htm">Description of the illustration pre_map.gif</a><br />
<br />
<p>For example, you can use a Pre-Mapping Process operator to truncate tables in a staging area before running a mapping that loads tables to that staging area. You can also use a Pre-Mapping Process operator to disable indexes before running a mapping that loads data to a target. You can then use a Post-Mapping Process operator to reenable and build the indexes after running the mapping that loads data to the target.</p>
<p>The Pre-Mapping Process operator calls a function or procedure whose metadata is defined before executing a mapping. The output attribute group provides the return value (if implemented as a function) and the output parameters of the function or procedure. You can connect these attributes to any other operators downstream, and they do not have the connection restrictions that apply to the Post-Mapping Process operator.</p>
<p>When you drop a Pre-Mapping Process operator onto the Mapping Editor canvas, a dialog box opens displaying the available libraries, categories, functions, and procedures. After you select a function or procedure from the tree, the operator displays the attributes that correspond to the selected function or procedure.</p>
<p>The Pre-Mapping Process operator contains groups corresponding to the number and direction of the parameters associated with the selected PL/SQL procedure or function.</p>
<p>After you add a Pre-Mapping Process operator to the Mapping Editor, use the Property Inspector to specify the Run condition of the mapping.</p>
<p><span class="bold">To use a Pre-Mapping Process operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop a <span class="bold">Pre-Mapping Process</span> operator onto the Mapping Editor canvas.</p>
<p>The Add Pre-Mapping Process dialog box is displayed.</p>
</li>
<li>
<p>Use the Add Pre-Mapping Process dialog box to select or create a transformation. For more information about how to use this dialog box, see <a href="mappings.htm#CHDEJAAD">"Using the Add Operator Dialog Box to Add Operators"</a>.</p>
</li>
<li>
<p>Connect the output attribute of the Pre-Mapping Process operator to the input group of a target operator.</p>
</li>
<li>
<p>Set the run conditions for the operator.</p>
</li>
</ol>
<p><span class="bold">To set run conditions for a mapping with a Pre-Mapping Process operator:</span></p>
<ol>
<li>
<p>In the mapping canvas, select the Pre-Mapping Process operator.</p>
<p>The Property Inspector displays the properties of the Pre-Mapping Process operator.</p>
</li>
<li>
<p>Click <span class="bold">Mapping Run Condition</span> and select one of the following run conditions:</p>
<p><span class="bold">Always:</span> Runs the mapping after the process completes, regardless of the errors.</p>
<p><span class="bold">On Success:</span> Runs the mapping only if the process completes without errors.</p>
<p><span class="bold">On Error:</span> Runs the mapping only if the process completes with errors.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="i1175545"></a><a id="WBETL26015"></a>
<div class="sect1">
<h2 class="sect1">Set Operation Operator<a id="sthref2309"></a><a id="sthref2310"></a><a id="sthref2311"></a></h2>
<p>Set operations combine the results of two component queries into a single result.</p>
<img width="20" height="20" src="img/set.gif" alt="Description of set.gif follows" /><br />
<a id="sthref2312" href="img_text/set.htm">Description of the illustration set.gif</a><br />
<br />
<p>While a Joiner operator combines separate rows into one row, Set Operation operators combine all data rows into one output rowset using one of the various set operation conditions. In Set Operation operators, although the data is added to one output, the column lists are not mixed to form one combined column list.</p>
<p>The Set Operation operator enables you to use following set operations in a mapping:</p>
<ul>
<li>
<p><a id="sthref2313"></a><a id="sthref2314"></a>Union (default)</p>
</li>
<li>
<p><a id="sthref2315"></a><a id="sthref2316"></a>Union All</p>
</li>
<li>
<p><a id="sthref2317"></a>Intersect</p>
</li>
<li>
<p><a id="sthref2318"></a><a id="sthref2319"></a>Minus</p>
</li>
</ul>
<p>By default, the Set Operation operator contains two input groups and one output group. You can add input groups by using the operator editor. The number of attributes in the output group matches the number of attributes in the input group containing the most number of attributes.</p>
<p>To use the Set Operation operator, all sets must have the same number of attributes and the data types of corresponding attributes must match. Corresponding attributes are determined by the order of the attributes within an input group. For example, attribute 1 in input group 1 corresponds to attribute 1 in input group 2.</p>
<p>You must apply the set operation in top-down order. The order of the input groups determines the execution order of the set operation. This order only affects the minus operation. For example, A minus B is different from B minus A. The order of the attributes within the first input group determines the structure of a set. For example, {empno, ename} is different from {ename, empno}.</p>
<p><span class="bold">To use the Set Operation operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop a <span class="bold">Set Operation</span> operator onto the Mapping Editor canvas.</p>
</li>
<li>
<p>Connect source attributes to the Set Operation operator groups.</p>
</li>
<li>
<p>Select the Set Operation operator header.</p>
<p>The Property Inspector displays the properties of the Set Operation operator.</p>
</li>
<li>
<p>Click the list on the <span class="bold">Set Operation</span> property and select an operation from the list.</p>
</li>
<li>
<p>Connect the Set Operation output group to a target input group.</p>
</li>
</ol>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2320"></a>
<h3 class="sect2">Synchronizing the Attributes in a Set Operation Operator</h3>
<p>The Set Operation operator in the Mapping Editor assists you in matching attributes between two data streams. To match attributes from two data streams in a mapping, define the data streams as input groups into the Set Operation operator. On the Input Attributes tab, click <span class="bold">Synchronize from &lt;Input Group Name&gt;</span>. The synchronize operation rearranges and adds attributes to the target group such that the target group most closely matches the source group. The synchronize operation uses the following rules to find or create a match in the target:</p>
<ol>
<li>
<p>Looks for an existing attribute in the target that matches name and data type.</p>
</li>
<li>
<p>Looks for an existing attribute in the target whose description matches the source name, and the data type matches source data type.</p>
</li>
<li>
<p>If (1) and (2) fail, then a new attribute is created with the source name and data type, and is inserted in the correct matching position. Any unmatched target group attributes are indicated by <code>UNMATCHED</code> in the attribute description.</p>
<p>To force a target attribute to match a specified source attribute, type the source group attribute as the target attribute description.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1175568"></a><a id="WBETL26016"></a>
<div class="sect1">
<h2 class="sect1">Sorter Operator<a id="sthref2321"></a><a id="sthref2322"></a><a id="sthref2323"></a></h2>
<p>You can produce a sorted row set using the Sorter operator.</p>
<img width="20" height="20" src="img/sorter.gif" alt="Description of sorter.gif follows" /><br />
<a id="sthref2324" href="img_text/sorter.htm">Description of the illustration sorter.gif</a><br />
<br />
<p>The Sorter operator enables you to specify which input attributes are sorted and whether the sorting is performed in ascending or descending order. Oracle Warehouse Builder sorts data by placing an <a id="sthref2325"></a><a id="sthref2326"></a>ORDER BY clause in the code generated by the mapping.</p>
<p>The Sorter operator has one I/O group. You can use the Sorter operator to sort data from any relational database source. You can place any operator after the Sorter operator.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2327"></a>
<h3 class="sect2">Order By Clause</h3>
<p>The Sorter operator contains the Order By clause. This clause is an ordered list of attributes in the I/O group to specify that sorting is performed in the same order as the ordered attribute list. You can set ascending or descending sorting for each attribute.</p>
<p>Most data in warehouses is loaded in batches. There can be some problems with the loading routines. For example, a batch of orders might contain a single order number multiple times with each order line representing a different state of the order. The order might have gone from status 'CREATED' to 'UPDATED' to 'BOOKED' during the day.</p>
<p>Because a SQL statement does not guarantee any ordering by default, the inserts and updates on the target table can take place in the wrong order. If the 'UPDATED' row is processed last, then it becomes the final value for the day although the result should be status 'BOOKED'. Oracle Warehouse Builder enables you to solve this problem by creating an ordered extraction query using the Sorter operator. The ORDER BY clause can use the last updated attribute. This ensures that the records appear in the order in which they were created.</p>
<p><a href="#BCFEEDFA">Figure 26-18</a> shows a mapping that uses the Sorter operator to sort the records from the <code>ORACLE_ORDERS</code> table. Use the Order By Clause property of the Sorter operator to sort the input records on the <code>ORDER_ID</code> and the <code>LAST_UPDATED</code> attributes.</p>
<div class="figure">
<p class="titleinfigure"><a id="BCFEEDFA"></a>Figure 26-18 Sorter Operator in a Mapping</p>
<img width="693" height="228" src="img/sorter_map.gif" alt="Description of Figure 26-18 follows" /><br />
<a id="sthref2328" href="img_text/sorter_map.htm">Description of "Figure 26-18 Sorter Operator in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<p><span class="bold">To use the Sorter operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop the <span class="bold">Sorter</span> operator onto the Mapping Editor canvas.</p>
</li>
<li>
<p>Connect a source operator group to the Sorter I/O group.</p>
</li>
<li>
<p>Select the Sorter operator header.</p>
<p>The Property Inspector displays the properties of the operator.</p>
</li>
<li>
<p>Click the Ellipsis button in the Order By Clause field.</p>
<p>The Order By Clause dialog box is displayed.</p>
</li>
<li>
<p>Select the attributes you want to sort.</p>
<p>Select an attribute from the Available Attributes list and click the right arrow button. Or, click the double right arrow button to select all of the Available Attributes.</p>
</li>
<li>
<p>Apply an ORDER BY clause to the attribute.</p>
<p>Select the attribute in the ORDER BY Attributes list and select <span class="bold">ASC</span> (ascending) or <span class="bold">DESC</span> (descending) from the <span class="bold">ASC/DESC</span> list.</p>
</li>
<li>
<p>Click <span class="bold">OK.</span></p>
</li>
<li>
<p>Connect the output of the Sorter operator to the target.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1136850"></a><a id="WBETL26017"></a>
<div class="sect1">
<h2 class="sect1">Splitter Operator<a id="sthref2329"></a><a id="sthref2330"></a><a id="sthref2331"></a></h2>
<p>You can use the Splitter operator to split data from one source to several targets.</p>
<img width="20" height="20" src="img/splitter.gif" alt="Description of splitter.gif follows" /><br />
<a id="sthref2332" href="img_text/splitter.htm">Description of the illustration splitter.gif</a><br />
<br />
<p>The Splitter operator splits a single input row set into several output row sets using a boolean split condition. Each output row set has a cardinality less than or equal to the input cardinality. This is useful when you want to move data to different targets based on a data driven condition. Instead of moving the data through multiple filters, you can use a splitter.</p>
<p><a id="sthref2333"></a>As an option, you can optimize mappings that split data from one source to multiple targets for improved performance. For more information, see <a href="#i1243165">"Example: Creating Mappings with Multiple Targets"</a>.</p>
<p>The Splitter operator contains one input group and three output groups. The output groups are OUTGRP1, OUTGRP2, and REMAINING_ROWS. You can create additional output groups, if required. You can delete the REMAINING_ROWS output group, but you cannot edit it.</p>
<p>In most cases, the output group <a id="sthref2334"></a><a id="sthref2335"></a>REMAINING_ROWS contains all input rows that are not included in any output group. However, when the split condition contains an attribute whose value is null, the corresponding rows are not moved to the REMAINING_ROWS output group.</p>
<p>The Splitter operator contains the split condition. For code generation, the source columns are substituted by the input attribute names in the expression template. The expression is a valid SQL expression that can be used in a WHERE clause.</p>
<p><a href="#BABDHDHD">Figure 26-19</a> shows the mapping that uses the Splitter operator to split customer data from the source table <code>CUSTOMERS</code> into two separate tables. One table contains only the customer addresses and the other table contains the remaining customer details. Use the Split Condition property of each output group in the Splitter operator to specify which data should be moved to a particular target table.</p>
<div class="figure">
<p class="titleinfigure"><a id="BABDHDHD"></a>Figure 26-19 Splitter Operator in a Mapping</p>
<img width="709" height="432" src="img/splitter_map.gif" alt="Description of Figure 26-19 follows" /><br />
<a id="sthref2336" href="img_text/splitter_map.htm">Description of "Figure 26-19 Splitter Operator in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<p><span class="bold">To use the Splitter operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop the <span class="bold">Splitter</span> operator onto the Mapping Editor canvas.</p>
</li>
<li>
<p>Connect a group from a source operator to the input group of the Splitter operator.</p>
<p>The output attributes are created with data types matching the corresponding input data types.</p>
</li>
<li>
<p>Select the output group of the Splitter operator.</p>
<p>The Property Inspector displays the properties of the output group.</p>
</li>
<li>
<p>Click the Ellipsis button to the right of the Split Condition field.</p>
<p>The Expression Builder dialog box is displayed.</p>
</li>
<li>
<p>Define the split condition.</p>
<p>For example, the split condition can be UPPER(INGRP1.OR_CHANNEL) = 'DIRECT'.</p>
</li>
<li>
<p>Define expressions for the split condition of each output group except the REMAINING ROWS group.</p>
</li>
<li>
<p>Connect the output groups to the targets.</p>
</li>
</ol>
<a id="i1243165"></a>
<div class="sect2">
<h3 class="sect2">Example: Creating Mappings with Multiple Targets<a id="sthref2337"></a></h3>
<p>When you design a mapping with multiple targets, you have the option to optimize for improved performance. You may decide to not optimize if you require accurate auditing details for the mapping. If you decide to not optimize, then separate insert statements for each target are generated.</p>
<p>To optimize a multiple target mapping, you must take additional steps to generate a single insert statement for all targets combined. In this case, a <a id="sthref2338"></a>multitable INSERT SQL statement is generated that takes advantage of parallel query and parallel DML services available in versions Oracle9<span class="italic">i</span> and higher of the Oracle Database server.</p>
<p><span class="bold">To optimize a mapping with multiple targets:</span></p>
<ol>
<li>
<p>Define a mapping in an Oracle target module configured to generate Oracle9<span class="italic">i</span> or higher SQL.</p>
<p>Right-click the target module on the Projects Navigator and select <span class="bold">Configure.</span> Under <a href="orcl_data_objx.htm#BABFDAFH"><span class="xreftitlebold">Deployment System Type</span></a> and <span class="bold">PL/SQL Generation Mode,</span> select Oracle9<span class="italic">i</span> or higher.</p>
</li>
<li>
<p>In the Mapping Editor, design a mapping with a single source, a Splitter operator, and multiple targets.</p>
<p>For the mapping to be optimized, the targets must be tables, not views or materialized views. Each target table must have less than 999 columns. Between the Splitter operator and the targets, do not include any operators that change the cardinality.</p>
<p>For example, you can place a Filter between the Splitter and the targets as shown in <a href="#i1166159">Figure 26-20</a>, but not a Joiner or Aggregator operator. These restrictions only apply if you choose to optimize the mapping.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1166159"></a>Figure 26-20 Example Mapping with Multiple Targets</p>
<img width="643" height="248" src="img/multitableinsert_map.gif" alt="Description of Figure 26-20 follows" /><br />
<a id="sthref2339" href="img_text/multitableinsert_map.htm">Description of "Figure 26-20 Example Mapping with Multiple Targets"</a><br />
<br /></div>
<!-- class="figure" --></li>
<li>
<p>From the Projects Navigator, select the mapping and select <span class="bold">Design</span> from the menu bar, and select <span class="bold">Configure.</span> You can also right-click the mapping you want to configure and select <span class="bold">Configure.</span></p>
<p>Oracle Warehouse Builder displays the configuration properties dialog box for a mapping.</p>
</li>
<li>
<p>Expand <span class="bold">Runtime Parameters</span> and set <a href="ref_maps_processflows.htm#i1130206"><span class="xreftitlebold">Default Operating Mode</span></a> to <span class="bold">Set based</span>.</p>
</li>
<li>
<p>Expand <span class="bold">Code Generation Options</span> and set <a href="ref_maps_processflows.htm#i1124213"><span class="xreftitlebold">Optimized Code</span></a> to <span class="bold">True</span>.</p>
</li>
</ol>
<p><a id="i1150779"></a>When you run this mapping and view the generation results, one total SELECT and INSERT count for all targets is returned. <a id="sthref2340"></a><a id="sthref2341"></a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHCHECC"></a><a id="WBETL26018"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Subquery Filter <a id="sthref2342"></a><a id="sthref2343"></a><a id="sthref2344"></a>Operator</h2>
<p>The Subquery Filter operator enables you to filter rows based on the results of a subquery. The conditions that you can use to filter rows are EXISTS, NOT EXISTS, IN, and NOT IN.</p>
<img width="20" height="21" src="img/subquery_filter_oper.gif" alt="This illustration is described in the surrounding text." /><br />
<a id="sthref2345" href="img_text/subquery_filter_oper.htm">Description of the illustration subquery_filter_oper.gif</a><br />
<br />
<p>For example, the EMP table contains employee data. You can use a subquery to fetch a set of records from another table and then filter rows from the EMP table by using one of the conditions EXISTS, NOT EXISTS, IN, or NOT IN.</p>
<p>The Subquery Filter operator contains one input group INGRP1 and one I/O group INOUTGRP1. INGRP1 is mapped from the object that represents the subquery used to filter source data. The default condition used for filtering data is EXISTS, which is indicated by an "E" displayed to the left of INGRP1. You can change this condition based on your requirement. The group INOUTGRP1 is mapped from the source data set that must be filtered. The filtered data is available as an output of this group.</p>
<p><span class="bold">To create a mapping with a Subquery Filter operator:</span></p>
<ol>
<li>
<p>Drag and drop a Subquery Filter operator onto the mapping canvas.</p>
</li>
<li>
<p>Connect the source attributes to filter to the I/O group INOUTGRP1 of the Subquery Filter operator.</p>
</li>
<li>
<p>Connect the required attributes from the object to use as a subquery to the group INGRP1 of the Subquery Filter operator.</p>
</li>
<li>
<p>Select the Subquery Filter operator header.</p>
<p>The Property Inspector displays the properties of the Subquery Filter operator.</p>
<p>If the Property Inspector is not visible in the Design Center, select <span class="bold">Property Inspector</span> from the View menu.</p>
</li>
<li>
<p>In Subquery Filter Input Role field, select the condition to use to filter input rows. The available options are: Exists, In, Not Exists, or Not In.</p>
</li>
<li>
<p>If a filter condition is required, click the Ellipsis button on the Subquery Filter Condition field to display the Expression Builder. Use this interface to specify the filter condition used to compare the input rowset and the rowset returned by the subquery.</p>
<p>A filter condition is not required if the input role is IN or NOT IN. For filter roles EXISTS and NOT EXISTS, you must specify a filter condition that relates the source query to EXISTS filtering subquery.</p>
</li>
<li>
<p>If the input role is IN or NOT IN, edit the properties of each input attribute and select the matching attribute from the I/O group of the subquery. This relates an input attribute from the source input query to each subquery group attribute, thus relating the source query to the filtering subquery.</p>
</li>
<li>
<p>Connect the I/O group of the Subquery Filter operator to the target.</p>
</li>
</ol>
<p><a href="#CHDFBDEE">Figure 26-21</a> displays a simple example of a Subquery Filter operator. In this mapping, orders data relating to customers whose credit limit is above a certain value is loaded into a target table called CUST_TGT. Order data is stored in the ORDERS and ORDERS_ITEMS tables. A Joiner operator is used to combine orders data from these tables. Use a Subquery Filter operator to filter order data based on the results of a subquery on the CUSTOMERS table.</p>
<p>The attributes, in the CUSTOMERS table, required for comparison are mapped to the input group of the Subquery Filter operator. The orders data, represented by the result of the Joiner operator, are mapped to the Input/Output group of the Subquery Filter operator. The Subquery Filter Condition property of the Subquery Filter operator is set to represent the condition used compare rows. In this example, the following condition was specified for the Subquery Filter Condition:</p>
<pre>
INGRP1.CUSTOMER_ID  =  INOUTGRP1.CUSTOMER_ID  AND  INGRP1.CREDIT_LIMIT  &gt;= 75000
</pre>
<div class="figure">
<p class="titleinfigure"><a id="CHDFBDEE"></a>Figure 26-21 Subquery Filter Operator in a Mapping</p>
<img width="667" height="267" src="img/subquery_map.gif" alt="Description of Figure 26-21 follows" /><br />
<a id="sthref2346" href="img_text/subquery_map.htm">Description of "Figure 26-21 Subquery Filter Operator in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Following is the code generated by Oracle Warehouse Builder for the Subquery Filter operator used in the mapping displayed in <a href="#CHDFBDEE">Figure 26-21</a>.</p>
<pre>
SELECT
 "ORDERS"."ORDER_ID" "ORDER_ID",
  "ORDERS"."CUSTOMER_ID" "CUSTOMER_ID",
  "ORDERS"."ORDER_DATE" "ORDER_DATE"
FROM
     "OE"."ORDERS"@"ORA11@OE_SRC_LOCATION"  "ORDERS"   
   JOIN 
     "OE"."ORDER_ITEMS"@"ORA11@OE_SRC_LOCATION"  "ORDER_ITEMS" ON 
          ( ( "ORDERS"."ORDER_ID" = "ORDER_ITEMS"."ORDER_ID" ) )
WHERE 
  (EXISTS 
    (SELECT  1 
     FROM "OE"."CUSTOMERS"@"ORA11@OE_SRC_LOCATION"  "CUSTOMERS"
     WHERE 
       ( "CUSTOMERS"."CUSTOMER_ID"  =  "ORDERS"."CUSTOMER_ID" )  AND
          ( "CUSTOMERS"."CREDIT_LIMIT"  &gt;= 75000)
    )
  );
</pre></div>
<!-- class="sect1" -->
<a id="i1150770"></a><a id="WBETL26019"></a>
<div class="sect1">
<h2 class="sect1">Table Function Operator<a id="sthref2347"></a><a id="sthref2348"></a><a id="sthref2349"></a></h2>
<p>Use Table Function operators to represent a table function in a mapping. Table function operators enable you to manipulate a set of input rows and return another set of rows of the same or different cardinality.</p>
<img width="20" height="20" src="img/table_function_icon.gif" alt="Description of table_function_icon.gif follows" /><br />
<a id="sthref2350" href="img_text/table_function_icon.htm">Description of the illustration table_function_icon.gif</a><br />
<br />
<p>While a regular function only works on one row at a time, a table function enables you to apply the same complex PL/SQL logic on a set of rows and increase your performance. Unlike conventional functions, table functions can return a set of output rows that can be queried like a physical table.</p>
<p>The execution of the table function can also be parallelized where the returned rows are streamed directly to the next process without intermediate staging. Rows from a collection returned by a table function can also be pipelined or output one by one, as they are produced, instead of being output in a batch after processing of the entire table function input is completed.</p>
<p>Using table functions can greatly improve performance when loading your data warehouse.</p>
<p>A Table Function operator contains one input group and one output group.</p>
<p><span class="bold">To <a id="sthref2351"></a>define a Table Function operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop a Table Function operator onto the canvas.</p>
<p>The Add Table Function Operator dialog box is displayed.</p>
</li>
<li>
<p>Use an existing table function to transform data by choosing <span class="bold">Select from existing repository object and bind</span> and then selecting the table function from the tree.</p>
<p>The Table Function operator is added to the canvas. The input group INGRP1 contains the input parameters defined for the table function.</p>
</li>
<li>
<p>Map the operator that contains the input to the used by the table function to the parameters in the input group.</p>
<p>Typically one or more of the input parameters are collection types. In such cases, if the source object does not contain collection types, use a Construct Object operator to create a collection type using the individual source attributes.</p>
</li>
<li>
<p>Map the Return group of the Table Function operator to the operator representing the transformation target.</p>
</li>
</ol>
<p><a href="#BCFIHEDF">Figure 26-22</a> shows a mapping that uses a Table Function operator to load data into a table.</p>
<div class="figure">
<p class="titleinfigure"><a id="BCFIHEDF"></a>Figure 26-22 Table Function Operator in a Mapping</p>
<img width="661" height="399" src="img/tablefx_map.gif" alt="Description of Figure 26-22 follows" /><br />
<a id="sthref2352" href="img_text/tablefx_map.htm">Description of "Figure 26-22 Table Function Operator in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<p class="subhead2"><a id="sthref2353"></a>Characteristics of Table Functions</p>
<ul>
<li>
<p>They do not support the passing of parameters by name.</p>
</li>
<li>
<p>If the return type is TABLE of PLS Record, the name you select must match the name of PLS Record field. It is possible to select only one subset of the fields of the PLS Record in the select list.</p>
</li>
<li>
<p>If the return type is TABLE of T1%ROWTYPE, the name you select must match the name of the columns of the table T1.</p>
</li>
<li>
<p>If the return type is TABLE of Object Type, the name you select list must match the name of Object Type attribute.</p>
</li>
<li>
<p>If the return type is TABLE of Scalar (like TABLE of <code>NUMBER</code>), only Select COLUMN_VALUE can be used to retrieve the scalar values returned by the table function.</p>
</li>
</ul>
<div class="sect2"><a id="sthref2354"></a>
<h3 class="sect2">Prerequisites for Using the Table Function Operator<a id="sthref2355"></a></h3>
<p>Before you can use the Table Function operator in a mapping, create the table function in your target schema, external to Oracle Warehouse Builder. The table functions in the database that are supported by the unbound Table Function operator must meet the following requirements:</p>
<div class="sect3"><a id="sthref2356"></a>
<h4 class="sect3">Input</h4>
<ul>
<li>
<p>Ref Cursor returning PLS Record (the fields of the PLS Record) must be supported scalar data types (0..n).</p>
</li>
<li>
<p>There must be at least one input parameter.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref2357"></a>
<h4 class="sect3">Output</h4>
<ul>
<li>
<p>PLS Record (the fields of the PLS Record should be scalar data types supported by Oracle Warehouse Builder.</p>
</li>
<li>
<p>Object Type (the attributes of the Object Type should be supported scalar data types).</p>
</li>
<li>
<p>Supported scalar data types.</p>
</li>
<li>
<p>ROWTYPE</p>
</li>
</ul>
<p>For a Table Function operator in a mapping:</p>
<ul>
<li>
<p>You must add one parameter group for each ref cursor type parameter.</p>
</li>
<li>
<p>Multiple scalar parameters can be part of a single scalar type parameter group.</p>
</li>
<li>
<p>The parameter groups and the parameters in a group can be entered in any order.</p>
</li>
<li>
<p>The positioning of the parameters in the Table Function operator must be the same as the positioning of the parameters in the table function created in your target warehouse.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2358"></a>
<h3 class="sect2">Table Function Operator Properties</h3>
<p>You access the Table Function operator properties using the Property Inspector. The Property Inspector displays the properties of the object selected on the canvas. For example, when you select the input group of the Table Function operator, the Property Inspector displays the properties of the input parameter group.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2359"></a>
<h4 class="sect3">Table Function Operator Properties</h4>
<p>The Table Function operator has the following properties.</p>
<p><span class="bold">Table Function Name:</span> Represents the name of the table function. The name specified here must match the actual name of the table function.</p>
<p><span class="bold">Table Function is Target:</span> Select this option to indicate that the table function is a target. By default, this property is selected.</p>
<p><span class="bold">Bound Name:</span> Name of the table function in the repository to which the Table Function operator is bound.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref2360"></a>
<h4 class="sect3">Input Parameter Properties</h4>
<ul>
<li>
<p><span class="bold">Parameter Position:</span> The position of the parameter in the table function signature. This property is only applicable to scalar parameters.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref2361"></a>
<h4 class="sect3">Output Parameter Group Properties</h4>
<ul>
<li>
<p><span class="bold">Return Table of Scalar:</span> This property specifies whether the return of the table function is a TABLE of SCALAR or not. This information is required because the select list item for TABLE of SCALAR must be Select COLUMN_VALUE while in the other cases it should be an appropriate name.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref2362"></a>
<h4 class="sect3">Output Parameter</h4>
<ul>
<li>
<p><span class="bold">Type Attribute Name:</span> The name of the field of the PLS Record, attribute of the Object Type, or column of the ROWTYPE. This property is not applicable if the return type is TABLE of SCALAR. This name is used to call the table function.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1175595"></a><a id="WBETL26020"></a>
<div class="sect1">
<h2 class="sect1">Transformation Operator<a id="sthref2363"></a><a id="sthref2364"></a><a id="sthref2365"></a></h2>
<p>Use the Transformation operator to transform the column value data of rows within a row set using a PL/SQL function, while preserving the cardinality of the input row set.</p>
<img width="23" height="20" src="img/transform.gif" alt="Description of transform.gif follows" /><br />
<a id="sthref2366" href="img_text/transform.htm">Description of the illustration transform.gif</a><br />
<br />
<p>The Transformation operator must be bound to a function or procedure contained by one of the modules in the workspace. The inputs and outputs of the Transformation operator correspond to the input and output parameters of the bound workspace function or procedure. If the Transformation operator is bound to a function, then a result output is added to the operator that corresponds to the result of the function. The bound function or procedure must be generated and deployed before the mapping can be deployed, unless the function or procedure exists in the target system.</p>
<p>Oracle Warehouse Builder provides pre-defined PL/SQL library functions in the run time schema that can be selected as a bound function when adding a Transformation operator onto a mapping. In addition, you can choose a function or procedure from the public Oracle Custom library.</p>
<p>The Transformation operator contains the following properties:</p>
<ul>
<li>
<p><span class="bold">Function Call:</span> The text template for the function call that is generated by the code generator with the attribute names listed as the calling parameters. For the actual call, the attribute names are replaced with the actual source or target columns that are connected to the attributes.</p>
</li>
<li>
<p><span class="bold">Function Name:</span> The name of the function or procedure, to which this operator is bound.</p>
</li>
<li>
<p><span class="bold">Procedure:</span> A boolean value indicating, if true, that the bound transformation is a procedure rather than a function with no returned value.</p>
</li>
<li>
<p><span class="bold"><a id="sthref2367"></a><a id="sthref2368"></a><a id="sthref2369"></a><a id="sthref2370"></a>Data Type:</span> Indicates the data type of the input, output, or result parameter of the bound function that corresponds to the given attribute. If the output of a mapping transformation is of <a id="sthref2371"></a><a id="sthref2372"></a><code>CHAR</code> data type, then an <a id="sthref2373"></a><a id="sthref2374"></a>RTRIM is applied on the result before moving the data to a target. This ensures that no extra spaces are contained in the output result.</p>
</li>
<li>
<p><span class="bold">Default Value:</span> The default value (blank if none) for the given attribute.</p>
</li>
<li>
<p><span class="bold">Optional Input:</span> A boolean value indicating, if true, that the given attribute is optional. If the attribute is optional, then it need not be connected in the mapping.</p>
</li>
<li>
<p><span class="bold">Function Return:</span> A boolean value indicating, if true, that the given output attribute is the result attribute for the function. The result attribute is a named result. Use this property if another output is a named result, or if you change the name of the result output.</p>
</li>
</ul>
<p><span class="bold">To use a Transformation operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop a Transformation operator onto the Mapping Editor canvas.</p>
<p>The Add Mapping Transformation dialog box is displayed.</p>
</li>
<li>
<p>Use the Add Mapping Transformation dialog box to create a transformation or select one or more transformations. For more information about these options, see <a href="mappings.htm#CHDEJAAD">"Using the Add Operator Dialog Box to Add Operators"</a>.</p>
</li>
<li>
<p>Connect the source attributes to the inputs of the Transformation operator.</p>
</li>
<li>
<p>Select an input attribute. If the Procedure property is set to True<span class="bold">,</span> then do not connect the input parameter.</p>
</li>
<li>
<p>Connect the Transformation operator output attributes to the target attributes.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the signature of a transformation is very long (exceeds the length of the Design Center window), you may not be able to drag and drop this transformation from the Projects Navigator onto the Mapping Editor canvas. In such cases, you can add the transformation to your mapping by using the Component Palette.</div>
</div>
<!-- class="sect1" -->
<a id="i1136431"></a><a id="WBETL26021"></a>
<div class="sect1">
<h2 class="sect1">Unpivot Operator<a id="sthref2375"></a><a id="sthref2376"></a><a id="sthref2377"></a></h2>
<p>The Unpivot operator converts multiple input rows into one output row.</p>
<img width="20" height="20" src="img/unpivot_icon.gif" alt="Description of unpivot_icon.gif follows" /><br />
<a id="sthref2378" href="img_text/unpivot_icon.htm">Description of the illustration unpivot_icon.gif</a><br />
<br />
<p>The Unpivot operator enables you to extract from a source once and produce one row from a set of source rows that are grouped by attributes in the source data. Like the Pivot operator, the Unpivot operator can be placed anywhere in a mapping.</p>
<a id="i1136436"></a>
<div class="sect2">
<h3 class="sect2">Example: Unpivoting Sales Data<a id="sthref2379"></a></h3>
<p><a href="#g1251878">Table 26-5</a> shows a sample of data from the <code>SALES</code> relational table. In the crosstab format, the <code>MONTH</code> column has 12 possible character values, one for each month of the year. All sales figures are contained in one column, <code>MONTHLY_SALES</code>.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref2380"></a><a id="g1251878"></a>Table 26-5 Data in a Crosstab Format</p>
<table class="cellalignment2975" title="Data in a Crosstab Format " summary="This table shows sample data from the SALES relational table. The table contains four columns describing the Rep, Month, Monthly Sales, and Region." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t16">REP</th>
<th class="cellalignment2976" id="r1c2-t16">MONTH</th>
<th class="cellalignment2976" id="r1c3-t16">MONTHLY_SALES</th>
<th class="cellalignment2976" id="r1c4-t16">REGION</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t16" headers="r1c1-t16">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r2c1-t16 r1c2-t16">
<p>Jan</p>
</td>
<td class="cellalignment2977" headers="r2c1-t16 r1c3-t16">
<p>10.5</p>
</td>
<td class="cellalignment2977" headers="r2c1-t16 r1c4-t16">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t16" headers="r1c1-t16">
<p>0676</p>
</td>
<td class="cellalignment2977" headers="r3c1-t16 r1c2-t16">
<p>Jan</p>
</td>
<td class="cellalignment2977" headers="r3c1-t16 r1c3-t16">
<p>9.5</p>
</td>
<td class="cellalignment2977" headers="r3c1-t16 r1c4-t16">
<p>3</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t16" headers="r1c1-t16">
<p>0679</p>
</td>
<td class="cellalignment2977" headers="r4c1-t16 r1c2-t16">
<p>Jan</p>
</td>
<td class="cellalignment2977" headers="r4c1-t16 r1c3-t16">
<p>8.7</p>
</td>
<td class="cellalignment2977" headers="r4c1-t16 r1c4-t16">
<p>3</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t16" headers="r1c1-t16">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r5c1-t16 r1c2-t16">
<p>Feb</p>
</td>
<td class="cellalignment2977" headers="r5c1-t16 r1c3-t16">
<p>11.4</p>
</td>
<td class="cellalignment2977" headers="r5c1-t16 r1c4-t16">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r6c1-t16" headers="r1c1-t16">
<p>0676</p>
</td>
<td class="cellalignment2977" headers="r6c1-t16 r1c2-t16">
<p>Feb</p>
</td>
<td class="cellalignment2977" headers="r6c1-t16 r1c3-t16">
<p>10.5</p>
</td>
<td class="cellalignment2977" headers="r6c1-t16 r1c4-t16">
<p>3</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r7c1-t16" headers="r1c1-t16">
<p>0679</p>
</td>
<td class="cellalignment2977" headers="r7c1-t16 r1c2-t16">
<p>Feb</p>
</td>
<td class="cellalignment2977" headers="r7c1-t16 r1c3-t16">
<p>7.4</p>
</td>
<td class="cellalignment2977" headers="r7c1-t16 r1c4-t16">
<p>3</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r8c1-t16" headers="r1c1-t16">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r8c1-t16 r1c2-t16">
<p>Mar</p>
</td>
<td class="cellalignment2977" headers="r8c1-t16 r1c3-t16">
<p>9.5</p>
</td>
<td class="cellalignment2977" headers="r8c1-t16 r1c4-t16">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r9c1-t16" headers="r1c1-t16">
<p>0676</p>
</td>
<td class="cellalignment2977" headers="r9c1-t16 r1c2-t16">
<p>Mar</p>
</td>
<td class="cellalignment2977" headers="r9c1-t16 r1c3-t16">
<p>10.3</p>
</td>
<td class="cellalignment2977" headers="r9c1-t16 r1c4-t16">
<p>3</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r10c1-t16" headers="r1c1-t16">
<p>0679</p>
</td>
<td class="cellalignment2977" headers="r10c1-t16 r1c2-t16">
<p>Mar</p>
</td>
<td class="cellalignment2977" headers="r10c1-t16 r1c3-t16">
<p>7.5</p>
</td>
<td class="cellalignment2977" headers="r10c1-t16 r1c4-t16">
<p>3</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r11c1-t16" headers="r1c1-t16">
<p>0675</p>
</td>
<td class="cellalignment2977" headers="r11c1-t16 r1c2-t16">
<p>Apr</p>
</td>
<td class="cellalignment2977" headers="r11c1-t16 r1c3-t16">
<p>8.7</p>
</td>
<td class="cellalignment2977" headers="r11c1-t16 r1c4-t16">
<p>4</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r12c1-t16" headers="r1c1-t16">
<p>0676</p>
</td>
<td class="cellalignment2977" headers="r12c1-t16 r1c2-t16">
<p>Apr</p>
</td>
<td class="cellalignment2977" headers="r12c1-t16 r1c3-t16">
<p>7.6</p>
</td>
<td class="cellalignment2977" headers="r12c1-t16 r1c4-t16">
<p>3</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r13c1-t16" headers="r1c1-t16">
<p>0679</p>
</td>
<td class="cellalignment2977" headers="r13c1-t16 r1c2-t16">
<p>Apr</p>
</td>
<td class="cellalignment2977" headers="r13c1-t16 r1c3-t16">
<p>7.8</p>
</td>
<td class="cellalignment2977" headers="r13c1-t16 r1c4-t16">
<p>3</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#i1136557">Figure 26-23</a> depicts data from the relational table <code>SALES</code> after unpivoting the table. The data formerly contained in the <code>MONTH</code> column (Jan, Feb, Mar...) corresponds to12 separate attributes (M1, M2, M3...). The sales figures formerly contained in the <code>MONTHLY_SALES</code> are now distributed across the 12 attributes for each month.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1136557"></a>Figure 26-23 Data Unpivoted from Crosstab Format</p>
<img width="701" height="137" src="img/pivot_ff.gif" alt="Description of Figure 26-23 follows" /><br />
<a id="sthref2381" href="img_text/pivot_ff.htm">Description of "Figure 26-23 Data Unpivoted from Crosstab Format"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2382"></a>
<h3 class="sect2">The Row Locator<a id="sthref2383"></a><a id="sthref2384"></a></h3>
<p>When you use the Unpivot operator, multiple input rows are transformed into a single row based on the row locator. In the Unpivot operator, the row locator is an attribute that you must select from the source to correspond with a set of output attributes that you define. A row locator is required in an Unpivot operator. In this example, the row locator is the <code>MONTH</code> column from the <code>SALES</code> table and it corresponds to attributes M1, M2, M3... M12 in the unpivoted output.</p>
</div>
<!-- class="sect2" -->
<a id="i1136569"></a>
<div class="sect2">
<h3 class="sect2">Using the Unpivot Operator<a id="sthref2385"></a><a id="sthref2386"></a><a id="sthref2387"></a></h3>
<p>You have the following options for using an Unpivot operator:</p>
<ul>
<li>
<p><span class="bold">Define a new Unpivot operator:</span> Drag an Unpivot operator from the Palette onto the mapping. The Mapping Editor displays a wizard.</p>
</li>
<li>
<p><span class="bold">Edit an existing Unpivot operator:</span> Right-click the Unpivot operator and select <span class="bold">Open Details.</span> The Mapping Editor opens the Unpivot Editor.</p>
</li>
</ul>
<p>Whether you are using the Unpivot Wizard or the Unpivot Editor, complete the following pages:</p>
<ul>
<li>
<p><a href="#i1136604">"General"</a></p>
</li>
<li>
<p><a href="#i1136616">"Groups"</a></p>
</li>
<li>
<p><a href="#i1136631">"Input Connections"</a></p>
</li>
<li>
<p><a href="#i1136653">"Input Attributes"</a></p>
</li>
<li>
<p><a href="#i1136671">"Row Locator"</a></p>
</li>
<li>
<p><a href="#i1136695">"Output Attributes"</a></p>
</li>
<li>
<p><a href="#i1136717">"Unpivot Transform"</a></p>
</li>
</ul>
<a id="i1136604"></a>
<div class="sect3">
<h4 class="sect3">General</h4>
<p>Use the General page to specify a name and optional description for the Unpivot operator. By default, the wizard names the operator "Unpivot".</p>
</div>
<!-- class="sect3" -->
<a id="i1136616"></a>
<div class="sect3">
<h4 class="sect3">Groups <a id="sthref2388"></a></h4>
<p>Use the Groups page to specify one input and one output group.</p>
<p>In an Unpivot operator, the input group represents the source data in crosstab format. The output group represents the target data distributed across multiple attributes.</p>
<p>You can rename and add descriptions to the input and output groups. Since each Unpivot operator must have exactly one input and one output group, the wizard prevents you from adding or removing groups or changing group direction.</p>
</div>
<!-- class="sect3" -->
<a id="i1136631"></a>
<div class="sect3">
<h4 class="sect3">Input Connections <a id="sthref2389"></a></h4>
<p>Use the Input Connections page to select attributes to copy and map into the Unpivot operator.</p>
<p><span class="bold">To complete the Input connections page for an Unpivot operator:</span></p>
<ol>
<li>
<p>Select complete groups or individual attributes from the left panel.</p>
<p>To search for a specific attribute or group by name, type the text in <span class="bold">Search for</span> and click <span class="bold">Go.</span> To find the next match, click <span class="bold">Go</span> again.</p>
<p>Hold the Shift key down to select multiple groups or attributes. To select attributes from different groups, then you must first combine the groups with a Joiner or Set operator.</p>
</li>
<li>
<p>Use the left to right arrow button in the middle of the page to move your selections to the right side of the wizard page.</p>
<p>You can use the right to left arrow to move groups or attributes from the input connections list. Oracle Warehouse Builder removes the selection from the input group and removes the data flow connection between the source operator and the Unpivot operator.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="i1136653"></a>
<div class="sect3">
<h4 class="sect3">Input Attributes<a id="sthref2390"></a></h4>
<p>Use the Input Attributes page to modify the attributes you selected in the Input Connections tab or wizard page.</p>
<p>You can perform the following tasks from the Unpivot Input Attributes page:</p>
<ul>
<li>
<p><span class="bold">Add attributes:</span> Enter the attribute name and other attribute details in an empty row on the page.</p>
</li>
<li>
<p><span class="bold">Change attribute properties:</span> You can change the attribute name, data type, length, precision and scale.</p>
</li>
<li>
<p><span class="bold">Add an optional description:</span> Type a description for the input attributes.</p>
</li>
<li>
<p><span class="bold">Designate key attribute(s):</span> You must designate one or more key attributes for Unpivot operators. Use the <span class="bold">Key</span> check box to indicate the attribute(s) that uniquely identifies the input group. Input rows with the same value in their key attribute(s) produce one unpivoted output row.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1136671"></a>
<div class="sect3">
<h4 class="sect3">Row Locator <a id="sthref2391"></a><a id="sthref2392"></a></h4>
<p>Use the Row locator page to select a row locator and assign values to the distinct values contained in the row locator.</p>
<p><a href="#i1136679">Figure 26-24</a> shows the attribute <code>MONTH</code> selected as the row locator with values such as 'Jan', 'Feb', or 'Mar'.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1136679"></a>Figure 26-24 Unpivot Row Locator Page</p>
<img width="680" height="510" src="img/unpivot_rowindicator.gif" alt="Description of Figure 26-24 follows" /><br />
<a id="sthref2393" href="img_text/unpivot_rowindicator.htm">Description of "Figure 26-24 Unpivot Row Locator Page"</a><br />
<br /></div>
<!-- class="figure" -->
<p><span class="bold">To complete the Unpivot Row Locator page:</span></p>
<ol>
<li>
<p>Select an attribute from the Row locator list box.</p>
<p>In the Unpivot operator, the row locator is the attribute from the source data that corresponds to a set of output attributes.</p>
</li>
<li>
<p>Use <span class="bold">Add</span> to specify the number of distinct values that exist in the row locator.</p>
</li>
<li>
<p>For each row locator value, type in the value as it appears in your source data set.</p>
<p>For string values, enclose the text in single quotes. For example, if the row locator is <code>MONTH</code>, there would be a total of 12 distinct values for that attribute. Click <span class="bold">Add</span> to add a row for each distinct value. For row locator values, type values exactly as they appear in the source data set. For instance, the row locator values as shown in <a href="#g1251878">Table 26-5</a> are 'Jan', 'Feb', and 'Mar.'</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="i1136695"></a>
<div class="sect3">
<h4 class="sect3">Output Attributes<a id="sthref2394"></a></h4>
<p><a id="i1136702"></a>Use the Output Attributes tab to create the output attributes for the Unpivot operator.</p>
<p><a href="#i1136703">Figure 26-25</a> displays the Output Attributes tab.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1136703"></a>Figure 26-25 Unpivot Output Attributes Page</p>
<img width="680" height="510" src="img/unpivot_output.gif" alt="Description of Figure 26-25 follows" /><br />
<a id="sthref2395" href="img_text/unpivot_output.htm">Description of "Figure 26-25 Unpivot Output Attributes Page"</a><br />
<br /></div>
<!-- class="figure" -->
<p>If you designated any input attributes as keys on the Input Attributes tab or wizard page, those input attributes are displayed as output attributes that you cannot edit or remove.</p>
<p>You can perform the following tasks from the Unpivot Output Attributes page:</p>
<ul>
<li>
<p><span class="bold">Add attributes:</span> To increase the number of output attributes to accommodate the rows you specified on the Row locator tab or wizard page, enter the attribute details in an empty cell of the page. If you specified 12 rows, then specify 12 output attributes plus attributes for any other input attributes that you did not designate as a key.</p>
</li>
<li>
<p><span class="bold">Change attribute properties:</span> Except for attributes you designated as keys on the Input Attributes tab or wizard page, you can change the attribute name, data type, length, precision, and scale.</p>
</li>
<li>
<p><span class="bold">Add an optional description:</span> Type a description for the output attributes.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1136717"></a>
<div class="sect3">
<h4 class="sect3">Unpivot Transform <a id="sthref2396"></a></h4>
<p>Use the Unpivot Transform tab to write expressions for each output attribute.</p>
<p><a href="#i1136724">Figure 26-26</a> displays the Unpivot Transform tab.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1136724"></a>Figure 26-26 Unpivot Transform Page</p>
<img width="680" height="510" src="img/unpivot_transform.gif" alt="Description of Figure 26-26 follows" /><br />
<a id="sthref2397" href="img_text/unpivot_transform.htm">Description of "Figure 26-26 Unpivot Transform Page"</a><br />
<br /></div>
<!-- class="figure" -->
<p>For attributes you designated as keys, the matching row and expression is defined for you. Oracle Warehouse Builder displays the first row as the match for a key attribute. For all other output attributes, specify the matching row and the expression.</p>
<ul>
<li>
<p><span class="bold">Matching row:</span> Select the appropriate option from the list box. For example, for the attribute you define as the first month of the year, 'M1', select 'Jan' from the list box.</p>
</li>
<li>
<p><span class="bold">Expression:</span> Select the appropriate expression from the list box. For all the new attributes you created to unpivot the data, select the same input attribute that contains the corresponding data. For example, the unpivot attributes M1, M2, M3... M12 would all share the same expression, INGRP1.MONTHLY_SALES. For all other output attributes, select the corresponding attribute from the list of input attributes.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2968">
<tr>
<td class="cellalignment2977">
<table class="cellalignment2973">
<tr>
<td class="cellalignment2972"><a href="src_tgt_opers.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2972"><a href="activities_in_pf.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2980">
<table class="cellalignment2971">
<tr>
<td class="cellalignment2972"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2972"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2972"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2972"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2972"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2972"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
