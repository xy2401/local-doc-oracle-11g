<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Designing Process Flows</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 037" />
<meta name="dcterms.created" content="2011-09-21T18:21:30Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Warehouse Builder Data Modeling, ETL, and Data Quality Guide" />
<meta name="dcterms.identifier" content="E10935-05" />
<meta name="dcterms.isVersionOf" content="WBETL" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="sap_km_mappings.htm" title="Previous" type="text/html" />
<link rel="Next" href="custom_transforms.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10935.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">13/37</span> <!-- End Header --><a id="CHDHGEAA"></a><a id="WBETL08000"></a>
<h1 class="chapter"><span class="secnum">8</span> Designing Process Flows</h1>
<p><a id="sthref1165"></a><a id="sthref1166"></a>After you design mappings that define the operations for moving data from sources to targets, you can create and define process flows. A process flow enable activities to be linked to define flow of control among different activities. Supported flow of control constructs include conditional branches, loops, parallel flows or serial dependencies. Activities can be mappings, transformations, or external commands such as e-mail, FTP commands, and operating system executables.</p>
<p>You can use process flows to manage dependencies between mappings. To schedule mappings, process flows, and other executable objects, see <a href="scheduling_etl.htm#BIHDCJCD">"Defining Schedules"</a>.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#i1190812">"Overview of Process Flows"</a></p>
</li>
<li>
<p><a href="#BABIHBJH">"Example: Creating a Basic Process Flow"</a></p>
</li>
<li>
<p><a href="#i1171059">"Steps for Defining Process Flows"</a></p>
</li>
<li>
<p><a href="#CHDGAEIC">"Adding Activities to Process Flows"</a></p>
</li>
<li>
<p><a href="#BACDHJEB">"Creating and Using Activity Templates"</a></p>
</li>
<li>
<p><a href="#CHDHIEGD">"About Transitions"</a></p>
</li>
<li>
<p><a href="#CHDEJBGF">"About Expressions"</a></p>
</li>
<li>
<p><a href="#BACCCDAD">"Defining Transition Conditions"</a></p>
</li>
<li>
<p><a href="#BABJCFHA">"Example: Using Process Flows to Access Flat Files with Variable Names"</a></p>
</li>
<li>
<p><a href="#BABCJDBB">"Example: Using Process Flows to Transfer Remote Files"</a></p>
</li>
</ul>
<a id="i1190812"></a><a id="WBETL08001"></a>
<div class="sect1">
<h2 class="sect1">Overview of Process Flows</h2>
<p><a id="sthref1167"></a>A process flow describes dependencies between Oracle Warehouse Builder mappings and external activities such as e-mail, FTP, and operating system commands. Use process flows to sequence individual steps in the ETL process. The individual steps often include mappings, but can also include manual activities or external activities such as FTP or e-mail.</p>
<p>Each process flow begins with a Start activity and concludes with an End activity for each stream in the flow. A process flow is considered as a type of activity, so a process flow can start other process flows.</p>
<p><a href="#i1155302">Figure 8-1</a> shows an example of a process flow that starts a mapping (MAP1). If the mapping completes successfully, then Oracle Warehouse Builder sends an e-mail notification (EMAIL_SUCCEED) and starts another process flow (SUBPROC1). If the mapping fails, then Oracle Warehouse Builder sends an email (EMAIL_FAIL) and ends the process flow.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1155302"></a>Figure 8-1 Sample Process Flow</p>
<img width="592" height="172" src="img/pflow_intro.gif" alt="This illustration is described in the surrounding text." /><br />
<a id="sthref1168" href="img_text/pflow_intro.htm">Description of "Figure 8-1 Sample Process Flow"</a><br />
<br /></div>
<!-- class="figure" -->
<p>When you design a process flow in Oracle Warehouse Builder, you use an interface known as the Process Flow Editor. Alternatively, you can create and define process flows using Oracle Warehouse Builder scripting language, OMB*Plus, as described in <a class="olink WBSCR" href="../e10584/toc.htm"><span class="italic">Oracle Warehouse Builder API and Scripting Reference</span></a>.</p>
<div class="sect2"><a id="sthref1169"></a>
<h3 class="sect2">About Process Flow Modules and Packages</h3>
<p><a id="sthref1170"></a><a id="sthref1171"></a><a id="sthref1172"></a><a id="sthref1173"></a>Process flows must be grouped into process flow packages, which in turn are grouped in process flow modules. The process flow modules and packages provide two levels to manage and deploy process flows. You can validate, generate, and deploy process flows at either the module or the package level.</p>
<p>You can design a process flow that starts other process flows because they are in the same module. You can copy process flows from one package to another package in the same or a different module, and you can copy packages to a different module. To do so, use the Copy and Paste commands available under <span class="bold">Edit</span> on the Design Center main menu.</p>
<p>For example, <a href="#i1155302">Figure 8-1</a> shows a process flow PROC1 that includes process flow SUBPROC1. For PROC1 to run successfully, SUBPROC1 and PROC1 can be in the same or separate process flow modules, but they must be deployed to the same location.</p>
<p class="subhead2"><a id="sthref1174"></a>Deploying Process Flows to Workflow Engines</p>
<p>Oracle Warehouse Builder process flows follows with the XML Process Definition Language (XPDL) standard set forth by the Workflow Management Coalition (WfMC). When you generate a process flow, Oracle Warehouse Builder generates an XML file in the XPDL format. You can use the generated XPDL to integrate with any workflow engine that supports the WfMC standard.</p>
<p><a id="sthref1175"></a><a id="sthref1176"></a>Oracle Warehouse Builder provides integration with Oracle Workflow. From Oracle Warehouse Builder Control Center, you can deploy process flow packages or modules to Oracle Workflow.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABIHBJH"></a><a id="WBETL08002"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Example: Creating a Basic Process Flow</h2>
<p>The cube <code>SALES_CUBE</code> is loaded using data in the <code>PRODUCTS</code>, <code>CATEGORIES</code>, and <code>CUSTOMERS</code> dimensions. These dimensions, in turn, are loaded using one or more transaction tables. Data must be loaded into the cube only if all the dimensions are loaded successfully.</p>
<p>You create separate mappings to load the cube and dimensions. However, you want a sequential flow in which the three dimensions <code>PRODUCTS</code>, <code>CATEGORIES</code>, and <code>CUSTOMERS</code> are loaded first and, if these dimensions are loaded successfully, the cube <code>SALES_CUBE</code> is loaded. Use a process flow to link these mappings and create a sequential flow.</p>
<p><a href="#BABGBDII">Figure 8-2</a> displays the process flow that loads the SALES_CUBE. This process flow is created after you complete the steps listed in <a href="#BABBGAHH">"Steps to Define the Process Flow"</a>.</p>
<div class="figure">
<p class="titleinfigure"><a id="BABGBDII"></a>Figure 8-2 Process Flow that Loads a Cube</p>
<img width="599" height="223" src="img/process_flow_ex.gif" alt="Description of Figure 8-2 follows" /><br />
<a id="sthref1177" href="img_text/process_flow_ex.htm">Description of "Figure 8-2 Process Flow that Loads a Cube"</a><br />
<br /></div>
<!-- class="figure" -->
<p class="subhead2"><a id="sthref1178"></a>Before You Begin</p>
<p>Create the following mappings:</p>
<ul>
<li>
<p><code>LOAD_PRODUCTS</code>: This mapping transforms source data stored in transaction tables and loads transformed data into the <code>PRODUCTS</code> dimension.</p>
</li>
<li>
<p><code>LOAD_CATEGORIES</code>: This mapping transforms source data stored in transaction tables and loads transformed data into the <code>CATEGORIES</code> dimension</p>
</li>
<li>
<p><code>LOAD_CUSTOMERS</code>: This mapping transforms source data stored in transaction tables and loads transformed data into the <code>CUSTOMERS</code> dimension</p>
</li>
<li>
<p><code>LOAD_SALES_CUBE</code>: This mapping loads data into the cube <code>SALES_CUBE</code>, using the dimensions <code>PRODUCTS</code>, <code>CATEGORIES</code>, and <code>CUSTOMERS</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="BABBGAHH"></a>Steps to Define the Process Flow</p>
<ol>
<li>
<p>Create an Oracle Workflow location to which the process flows are deployed.</p>
<p>See <a href="#BABJEAAB">"Creating Oracle Workflow Locations"</a> for information about creating Oracle Workflow locations.</p>
</li>
<li>
<p>In the Projects Navigator, expand the project node under which you want to create the process flow and then expand the Process Flows node.</p>
</li>
<li>
<p>Right-click the Process Flow Modules node and select <span class="bold">New Process Flow Module</span>.</p>
<p>The Create Process Flow Module wizard is displayed.</p>
</li>
<li>
<p>On the Name and Description page, provide a name and an optional description for the process flow.</p>
</li>
<li>
<p>On the Connection Information page, in the Location field, select the location created in step 1. Click <span class="bold">Finish</span> to create the process flow module.</p>
<p>The Create Process Flow Package dialog box is displayed.</p>
</li>
<li>
<p>Enter a name and an optional description for the process flow package and click <span class="bold">OK</span>.</p>
<p>The Create Process Flow dialog box is displayed.</p>
</li>
<li>
<p>Enter the name and an optional description for the process flow and click <span class="bold">OK</span>.</p>
<p>The Process Flow Editor is displayed. The editor canvas contains the Start activity named START1 and a Stop activity called End_success. Use the editor to add other activities that are part of your process flow and to define relationships between them.</p>
</li>
<li>
<p>From the Component Palette, drag a Fork activity and drop it on to the editor canvas.</p>
</li>
<li>
<p>From the Projects Navigator, drag the following mappings and drop them on to the editor canvas: <code>LOAD_PRODUCTS</code>, <code>LOAD_CATEGORIES</code>, and <code>LOAD_CUSTOMERS</code>.</p>
<p>When you drag a mapping and drop it onto the canvas, the mapping activity is displayed on the canvas with a default name such as MAPPING_<span class="italic">n</span>. The activity name highlighted in blue so that you can change the name, if required. For each activity, enter the same name as the mapping. For example, for the <code>LOAD_PRODUCTS</code> mapping, enter the name of the activity as <code>LOAD_PRODUCTS</code>.</p>
<p>Position these activities in a vertical line, one below the other, to the right of the Fork activity.</p>
</li>
<li>
<p>Create the following transitions:</p>
<ul>
<li>
<p>From the Fork activity to the <code>LOAD_PRODUCTS</code> activity</p>
</li>
<li>
<p>From the Fork activity to the <code>LOAD_CATEGORIES</code> activity</p>
</li>
<li>
<p>From the Fork activity to the <code>LOAD_CUSTOMERS</code> activity</p>
</li>
</ul>
<p>To create a transition, select the source activity. The cursor is displayed as a small horizontal arrow on the activity. Drag and drop on the target activity.</p>
</li>
<li>
<p>From the Component Palette, drag and drop an AND activity on to the editor.</p>
</li>
<li>
<p>Define a conditional transition, with the condition defined as SUCCESS, from the <code>LOAD_PRODUCTS</code> activity to the And activity.</p>
<p>A conditional transition is one that is based on a predefined condition. To define a condition for the transition:</p>
<ol>
<li>
<p>On the editor canvas, select the transition.</p>
<p>The Property Inspector displays the properties of the selected transition.</p>
</li>
<li>
<p>Click the Ellipsis button on the Condition property.</p>
<p>The Edit Property dialog box is displayed.</p>
</li>
<li>
<p>Select Enumerated Condition. In the list below this option, select Success and click <span class="bold">OK</span>.</p>
</li>
</ol>
</li>
<li>
<p>Define a conditional transition, with the condition defined as SUCCESS, from the LOAD_CATEGORIES activity to the And activity.</p>
</li>
<li>
<p>Define a conditional transition, with the condition defined as SUCCESS, from the <code>LOAD_CUSTOMERS</code> activity to the And activity.</p>
</li>
<li>
<p>From the Projects Navigator, drag and drop the mapping <code>LOAD_SALES_CUBE</code> onto the editor canvas. Enter the name of the activity as <code>LOAD_SALES_CUBE</code>.</p>
</li>
<li>
<p>Create a transition from the AND activity to the <code>LOAD_SALES_CUBE</code> activity. Select the AND activity to display a small horizontal arrow. Drag and drop on to the <code>LOAD_SALES_CUBE</code> activity.</p>
</li>
<li>
<p>Create a conditional transition, with the condition defined as SUCCESS, from the LOAD_SALES_CUBE activity to the End_success activity.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="i1171059"></a><a id="WBETL08003"></a>
<div class="sect1">
<h2 class="sect1">Steps for Defining Process Flows</h2>
<p class="subhead2"><a id="sthref1179"></a>Before You Begin</p>
<p>To enable deployment of process flows, install Oracle Workflow as described in the <a class="olink WBINS" href="../e17130/toc.htm"><span class="italic">Oracle Warehouse Builder Installation and Administration Guide</span></a>.</p>
<p><a id="sthref1180"></a><a id="sthref1181"></a>To define a process flow, refer to the following sections:</p>
<ol>
<li>
<p>(Optional) <a href="#BABJEAAB">"Creating Oracle Workflow Locations"</a></p>
</li>
<li>
<p><a href="#i1170910">"Creating Process Flow Modules"</a></p>
</li>
<li>
<p><a href="#i1170935">"Creating Process Flow Packages"</a></p>
</li>
<li>
<p><a href="#i1170949">"Creating Process Flows"</a></p>
</li>
<li>
<p><a href="#BACDHJEB">"Creating and Using Activity Templates"</a></p>
</li>
<li>
<p><a href="#BEIEHHEG">"Adding Activities"</a></p>
</li>
<li>
<p><a href="#i1158939">"Connecting Activities"</a></p>
</li>
<li>
<p><a href="activities_in_pf.htm#BACJCADB">"Activities in Process Flows"</a></p>
</li>
<li>
<p><a href="#CHDJADED">"Using Parameters and Variables"</a></p>
</li>
<li>
<p><a href="ref_maps_processflows.htm#i1130147">"Configuring Process Flows Reference"</a></p>
</li>
<li>
<p>Validating and Generating Process Flows</p>
</li>
<li>
<p>Scheduling Process Flows (optional)</p>
<p>When you are satisfied that the process flow runs as expected, you can schedule the process flow to run on a single day or multiple days as described in <a href="scheduling_etl.htm#BIHDCJCD">"Defining Schedules"</a>.</p>
</li>
<li>
<p>Deploying Process Flows, see <a href="deploy.htm#BABJIIGC">"Steps in the Deployment and Execution Process"</a>.</p>
</li>
</ol>
<a id="BABJEAAB"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating Oracle Workflow Locations</h3>
<p>Use an Oracle Workflow location to deploy process flows. This location corresponds to the Oracle Workflow schema.</p>
<p><span class="bold">To create an Oracle Workflow location:</span></p>
<ol>
<li>
<p>In the Locations Navigator, expand the Locations node and then the Process Flows and Schedules node.</p>
</li>
<li>
<p>Right-click the Oracle Workflow node and select <span class="bold">New Oracle Workflow Location</span>.</p>
<p>The Create Oracle Workflow Location dialog box is displayed.</p>
</li>
<li>
<p>On the Details page, provide information in the following fields:</p>
<ul>
<li>
<p><span class="bold">Name:</span> Represents the name of the Oracle Workflow location.</p>
</li>
<li>
<p><span class="bold">Description:</span> Represents the description of the location. Providing a description is optional.</p>
</li>
<li>
<p><span class="bold">Connection Type:</span> Represents the type of connection to Oracle Workflow. Select one of the following options:</p>
<ul>
<li>
<p><span class="bold">Host:Port:Service:</span> Makes a connection using the Easy Connect Naming method, which requires no prior setup. Enter the following additional information.</p>
<p><span class="bold">Host:</span> The name of the system where Oracle Database is installed with Oracle Workflow Manager. If the client software is installed on the same system as Oracle Database, you can enter localhost instead of the computer name.</p>
<p><span class="bold">Port:</span> The SQL port number for the Oracle Database.</p>
<p><span class="bold">Service:</span> The service name of the Oracle Database.</p>
<p><span class="bold">SQL*NET Connection:</span> Defining workflow connections with SQL*Net is not supported and results in a RTC-5336 error when testing the connection.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Schema:</span> Represents the user name for the Workflow schema.</p>
</li>
<li>
<p><span class="bold">Password:</span> Represents the password for the user specified in the Schema field.</p>
</li>
<li>
<p><span class="bold">Version:</span> Represents the version of Oracle Workflow.</p>
</li>
</ul>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1170910"></a>
<div class="sect2">
<h3 class="sect2">Creating Process Flow Modules</h3>
<p><a id="sthref1182"></a><a id="sthref1183"></a>Before working with process flows, create a process flow module. The module is a container using which you can validate, generate, and deploy a group of process flows. Process flow modules include process flow packages which include process flows.</p>
<p><span class="bold">To create a process flow module:</span></p>
<ol>
<li>
<p>Right-click the <span class="bold">Process Flow Modules</span> node in the Projects Navigator and select <span class="bold">New Process Flow Module.</span></p>
<p>Oracle Warehouse Builder displays the Welcome page for the Create Module Wizard.</p>
</li>
<li>
<p>Click <span class="bold">Next.</span></p>
<p>On the Name and Description page, type a module name that is unique within the project. Enter an optional text description.</p>
</li>
<li>
<p>Click <span class="bold">Next.</span></p>
<p>The wizard displays the Connection Information page.</p>
<p>You can accept the default location that the wizard creates for you based on the module name. Alternatively, select an existing location from the list. Click <span class="bold">Edit</span> to enter the connection information and test the connection.</p>
</li>
<li>
<p>Click <span class="bold">Next.</span></p>
<p>The wizard displays the Finish page. Verify the name and deployment location of the new process flow module.</p>
<p>When you click <span class="bold">Finish,</span> Oracle Warehouse Builder stores the definition for the module, inserts its name in the Projects Navigator, and prompts you to create a process flow package.</p>
</li>
</ol>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1184"></a>
<h4 class="sect3">Creating User Folders Within a Process Flow Module</h4>
<p>Within a process flow module, you can create user folders to group process flow packages based on criteria such as product line, functional groupings, or application-specific categories.</p>
<p>User folders can contain other user folders and other process flow packages. There is no limit on the level of nesting of user folders. You can also move, delete, edit, or rename user folders. To move a user folder, select the user folder in the Projects Navigator and click <span class="bold">Cut</span> on the toolbar. Then, select the process flow module into which the user folder is to be moved and click <span class="bold">Paste</span>.</p>
<p>You can move process flow packages that are contained in a user folder either to the corresponding parent process flow module or to another process flow module.</p>
<p>Deleting a user folder removes the user folder and all its contained objects from the repository.</p>
<p><span class="bold">To create a user folder within a process flow module:</span></p>
<ol>
<li>
<p>In the Projects Navigator, expand the Process Flows node. Right-click the Process Flow module or user folder under which you want to create a user folder and select <span class="bold">New</span>.</p>
<p>The New Gallery dialog box is displayed.</p>
</li>
<li>
<p>In the Items section, select <span class="bold">User Folder</span>.</p>
<p>The Create User Folder dialog box is displayed.</p>
</li>
<li>
<p>Specify a name for the user folder and click <span class="bold">OK</span>.</p>
</li>
</ol>
<p>The user folder is created and added to the tree under the Process Flow module.</p>
<p><span class="bold">To create a process flow package within a user folder:</span></p>
<ol>
<li>
<p>In the Projects Navigator, expand the Process Flows node. Right-click the user folder and select <span class="bold">New</span>.</p>
<p>The New Gallery dialog box is displayed.</p>
</li>
<li>
<p>In the Items section, select <span class="bold">Process Flow Package</span>.</p>
</li>
<li>
<p>Click <span class="bold">OK</span>.</p>
</li>
</ol>
<p>The Create Process Flow Package dialog box is displayed. Use this dialog box to create a process flow. Subsequently, create the required process flows within this process flow package.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1170935"></a>
<div class="sect2">
<h3 class="sect2">Creating Process Flow Packages</h3>
<p><a id="sthref1185"></a><a id="sthref1186"></a>After you create a Process Flow module, you can create a process flow package. The process flow package is an additional grouping mechanism from which you can deploy process flows.</p>
<p><span class="bold">To create a process flow package:</span></p>
<ol>
<li>
<p>Right-click a process flow module in the Projects Navigator and click <span class="bold">New Process Flow Package</span>.</p>
<p>Oracle Warehouse Builder displays the Create Process Flow Package dialog box.</p>
</li>
<li>
<p>Type a name and optional description for the process flow package.</p>
<p>If you intend to integrate with Oracle Workflow, Oracle Workflow restricts package names to 8 bytes.</p>
</li>
<li>
<p>Click <span class="bold">OK.</span></p>
<p>Oracle Warehouse Builder prompts you to create a process flow.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1170949"></a>
<div class="sect2">
<h3 class="sect2">Creating Process Flows</h3>
<p><a id="sthref1187"></a><a id="sthref1188"></a>After you create a module and package for process flows, you can create a process flow.</p>
<p><span class="bold">To create a process flow:</span></p>
<ol>
<li>
<p>Right-click a process flow package in the Projects Navigator and click <span class="bold">New Process Flow</span>.</p>
<p>Oracle Warehouse Builder displays the Create Process Flow dialog box.</p>
</li>
<li>
<p>Type a name and optional description for the process flow.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you intend to schedule a process flow, there is an additional consideration. For any ETL object to schedule, the limit is 25 characters for physical names and 1,995 characters for business names. Follow this additional restriction to enable Oracle Warehouse Builder to append to the process flow name the suffix _job and other internal characters required for deployment and running the process flow.</div>
</li>
<li>
<p>Click <span class="bold">OK.</span></p>
<p>Oracle Warehouse Builder runs the Process Flow Editor and displays the process flow with a Start activity and an End_Success activity.</p>
</li>
<li>
<p>You can now model the process flow with activities and transitions.</p>
</li>
<li>
<p>Continue with the steps listed in <a href="#i1171059">"Steps for Defining Process Flows"</a>.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDGAEIC"></a><a id="WBETL08004"></a>
<div class="sect1">
<h2 class="sect1">Adding Activities to Process Flows</h2>
<p>You can add activities in a process flow by using the Projects Navigator.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1189"></a>
<h3 class="sect2">About Activities</h3>
<p><a id="sthref1190"></a><a id="sthref1191"></a>Activities represent units of work for the process flow, such as starting a mapping or verifying the existence of a file on a drive or directory. When you design a process flow in Oracle Warehouse Builder, you select activities from the Component Palette, drag them onto the canvas, and set their parameters. Oracle Warehouse Builder includes the following types of activities:</p>
<ul>
<li>
<p><span class="bold">Oracle Warehouse Builder Specific Activities:</span> These activities enable you to start Oracle Warehouse Builder objects such as mappings, transformations, or other process flows. The process flow runs the object and provides a commit statement.</p>
</li>
<li>
<p><span class="bold">Utility Activities:</span> These activities enable you to perform services such as sending e-mails and transferring files.</p>
</li>
<li>
<p><span class="bold">Control Activities:</span> These activities enable you to control the progress and direction of the process flow. For instance, use the Fork activity to run multiple activities concurrently.</p>
</li>
</ul>
<p>For the utility and control type activities, you can reuse their parameters by defining activity templates as described in <a href="#BACDHJEB">"Creating and Using Activity Templates"</a>. For e-mail, for example, use an e-mail template to specify the SMTP server name and port number, the list of addresses, and the priority. Then you can reuse that template when you add email activities to a process flow.</p>
<p>For a description of each activity, see <a href="activities_in_pf.htm#i1166452">"Using Activities in Process Flows"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BEIEHHEG"></a>
<div class="sect2">
<h3 class="sect2">Adding Activities</h3>
<p><span class="bold">To add an activity to a process flow:</span></p>
<ol>
<li>
<p>Open the process flow by right-clicking the process flow in the Projects Navigator and selecting <span class="bold">Open</span>.</p>
</li>
<li>
<p>View the activities listed in the Component Palette.</p>
<p>By default, the palette lists all activities. To find a particular activity, use the list box on the palette to narrow the displayed list to one of the following types of activities: Oracle Warehouse Builder Specific activities, Utility activities, and Control activities.</p>
</li>
<li>
<p>Select an activity from the palette and drag it onto the canvas.</p>
<p>The editor displays the activity on the canvas with the name highlighted in blue.</p>
</li>
<li>
<p>To accept the default name, press <span class="bold">Enter.</span> To change the name, type in the new name.</p>
<p>The editor lists the activity in the Structure panel. The properties of this activity are displayed in the Property Inspector.</p>
</li>
<li>
<p>In the Property Inspector<span class="bold">,</span> add parameters for the activity by clicking <span class="bold">New Process Activity Parameter</span> at the top of the Structure panel.</p>
<p>The parameters for an activity vary according to the type of activity. For each activity, Oracle Warehouse Builder defines read-only parameters <a href="#BIHGEABA">"Name"</a>, <a href="#BIHCEGHJ">"Direction"</a>, and <a href="#BIHCBCAI">"Data Type"</a>. And for each parameter, you can specify values for <a href="#BIHCIAFB">"Binding"</a>, <a href="#BIHDDCGD">"Literal"</a>, <a href="#BIHFGCAF">"Value"</a>, and <a href="#BIHDCDHG">"Description"</a> in the Property Inspector.</p>
<p>For example, <a href="#CHDCBFAD">Figure 8-3</a> shows the parameters for a Notification activity. The parameters include DEFAULT_RESPONSE, EXPAND_ROLES, HTML_BODY, PERFORMER, PRIORITY, RESPONSE_PROCESSOR, RESPONSE_TYPE, SUBJECT, TEXT_BODY, and TIMEOUT.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDCBFAD"></a>Figure 8-3 Parameters for a Notification Activity</p>
<img width="356" height="259" src="img/structure_process_flow.gif" alt="Description of Figure 8-3 follows" /><br />
<a id="sthref1192" href="img_text/structure_process_flow.htm">Description of "Figure 8-3 Parameters for a Notification Activity"</a><br />
<br /></div>
<!-- class="figure" --></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1147440"></a>
<div class="sect2">
<h3 class="sect2">Parameters for Activities</h3>
<p>Each parameter has the following properties:</p>
<p class="subhead2"><a id="BIHGEABA"></a>Name</p>
<p>This is a name property of the activity parameter. For information about a specific parameter, look up the activity by name under <a href="activities_in_pf.htm#BACJCADB">Example 27-0, "Activities in Process Flows"</a>.</p>
<p class="subhead2"><a id="BIHCEGHJ"></a>Direction</p>
<p>The direction property is read-only for parameters that are not created by the user. A direction of IN indicates that the parameter is an input parameter for the activity.</p>
<p class="subhead2"><a id="BIHCBCAI"></a>Data Type</p>
<p>The data type property is read-only for parameters that are not created by the user. Oracle Warehouse Builder assigns the appropriate data type for all default parameters.</p>
<p class="subhead2"><a id="BIHCIAFB"></a>Binding</p>
<p>Use the binding property to pass in parameters from outside the process flow for parameters that are not created by the user. If you assign a parameter in <span class="bold">Binding,</span> then it overrides any text you assign to <span class="bold">Value.</span></p>
<p class="subhead2"><a id="BIHDDCGD"></a>Literal</p>
<p>If you enter a value for the parameter in the field <span class="bold">Value,</span> then indicate whether the value is a literal or an expression. The literal data types follow the PL/SQL literal value specification except for calendar data types. These data types are represented in a standard format as the process flow interacts with data sources from different locations.</p>
<p>The values you can select for Literal are True or False. When you set Literal to False, then the value entered for the Value property must be a valid PL/SQL expression which is evaluated at the Control Center. When you set Literal to True, then the value depends on the type of activity. If the activity is a PL/SQL object, such as a mapping or process flow, then the Value is a PL/SQL snippet. If the activity is not a PL/SQL object, then the Value is language-dependent.</p>
<p><a href="#CHDEBIGE">Table 8-1</a> provides the Literal value type, format, and some examples.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref1193"></a><a id="CHDEBIGE"></a>Table 8-1 Example of Literal Value Types</p>
<table class="cellalignment2975" title="Example of Literal Value Types" summary="Example of Literal Value Types" dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t3">Literal Value Type</th>
<th class="cellalignment2976" id="r1c2-t3">Format</th>
<th class="cellalignment2976" id="r1c3-t3">Example</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t3" headers="r1c1-t3">
<p>DATE</p>
</td>
<td class="cellalignment2977" headers="r2c1-t3 r1c2-t3">
<p>YYYY-MM-DD</p>
</td>
<td class="cellalignment2977" headers="r2c1-t3 r1c3-t3">
<p>2006-03-21</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t3" headers="r1c1-t3">
<p>DATE</p>
</td>
<td class="cellalignment2977" headers="r3c1-t3 r1c2-t3">
<p>YYYY-MM-DD HH24:MI:SS</p>
</td>
<td class="cellalignment2977" headers="r3c1-t3 r1c3-t3">
<p>2006-03-21 15:45:00</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t3" headers="r1c1-t3">
<p>TIMESTAMP</p>
</td>
<td class="cellalignment2977" headers="r4c1-t3 r1c2-t3">
<p>YYYY-MM-DD HH24:MI:SS.FF9</p>
</td>
<td class="cellalignment2977" headers="r4c1-t3 r1c3-t3">
<p>2006-03-21 15:45:00.000000000</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t3" headers="r1c1-t3">
<p>TIMESTAMP_TZ</p>
</td>
<td class="cellalignment2977" headers="r5c1-t3 r1c2-t3">
<p>YYYY-MM-DD HH24:MI:SS.FF9 TZH:TZM</p>
</td>
<td class="cellalignment2977" headers="r5c1-t3 r1c3-t3">
<p>2006-03-21 15:45:00.000000000 +01:00</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r6c1-t3" headers="r1c1-t3">
<p>YMINTERVAL</p>
</td>
<td class="cellalignment2977" headers="r6c1-t3 r1c2-t3">
<p>[+-]YYYYYYYYY-MM</p>
</td>
<td class="cellalignment2977" headers="r6c1-t3 r1c3-t3">
<p>+000000001-01</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r7c1-t3" headers="r1c1-t3">
<p>DMINVERVAL</p>
</td>
<td class="cellalignment2977" headers="r7c1-t3 r1c2-t3">
<p>[+-]DDDDDDDDD HH24:MI.SS.FF9</p>
</td>
<td class="cellalignment2977" headers="r7c1-t3 r1c3-t3">
<p>+000000001 01:01:01.000000001</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="BIHFGCAF"></a>Value</p>
<p>This is the value of the parameter. For some parameters, Oracle Warehouse Builder enables you to select from a list of values. For other parameters, Oracle Warehouse Builder assigns default values that you can override by entering a new value or using the field <span class="bold">Binding</span><span class="bold">.</span> In the absence of a list of possible values or a default value, you must enter a value.</p>
<p class="subhead2"><a id="BIHDCDHG"></a>Description</p>
<p>You can enter an optional description for each property.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BACDHJEB"></a><a id="WBETL08005"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating and Using Activity Templates</h2>
<p><a id="sthref1194"></a><a id="sthref1195"></a>In designing process flows, you may want to reuse existing activities. For example, each time a mapping fails in a process flow, you may want to send an e-mail to the same group of administrators. You create a template for the Email activity, and then use and edit the activity in many process flows.</p>
<p><span class="bold">To create an activity template:</span></p>
<ol>
<li>
<p>In the Projects Navigator, navigate to the Activity Templates node under the Process Flows node.</p>
</li>
<li>
<p>To create a folder for containing templates, right-click the Activity Templates node and select <span class="bold">New Activity Template Folder</span>.</p>
</li>
<li>
<p>Assign a name to the activity template folder and click <span class="bold">OK</span>.</p>
<p>Consider creating a folder for each type of template that you plan to create. For instance, you could create separate folders to contain Email and Ftp templates.</p>
</li>
<li>
<p>The Create Activity Template Wizard is displayed.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the wizard does not appear automatically, then right-click a folder and select <span class="bold">New Activity Template</span>.</div>
<p>Follow the prompts in the Create Activity Template Wizard to complete the <a href="#BIHDHHID">"Name and Description Page"</a>, the <a href="#BIHGEHIJ">"Parameters Page"</a>, and the Summary page.</p>
</li>
<li>
<p>See <a href="#BIHDEDCG">"Using Activity Templates"</a> for instructions about how to use the template in a process flow.</p>
</li>
</ol>
<a id="BIHDHHID"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Name and Description Page</h3>
<p><a id="sthref1196"></a>The rules for naming objects in the activity template depend on the naming mode that you select in that Naming Preferences section of the Preferences dialog box. Oracle Warehouse Builder maintains a business and a physical name for each object in the workspace. The business name is its descriptive business name. The physical name is the name that Oracle Warehouse Builder uses when generating code.</p>
<p>When you name objects while working in one naming mode, Oracle Warehouse Builder creates a default name for the other mode. So, when working in the business name mode, if you assign an activity template name that includes mixed cases, special characters, and spaces, then Oracle Warehouse Builder creates a default physical name for the objects.</p>
<p>Assign a name and select the type of activity template to create. Also, write an optional description for the template.</p>
<p class="subhead2"><a id="sthref1197"></a>Naming Activities</p>
<p>In the physical naming mode, an activity name can be from 1 to 30 alphanumeric characters and blank spaces are not enabled. In the business naming mode, the limit is 200 characters and blank spaces and special characters are enabled. In both naming modes, the name should be unique across the project.</p>
<p class="subhead2"><a id="sthref1198"></a>Describing Activities</p>
<p>The description can be up to 4,000 alphanumeric characters and can contain blank spaces. Specifying a description for an activity template is optional.</p>
<p class="subhead2"><a id="CHDDEECJ"></a>Activity Templates</p>
<p>The following activity templates are available from the list.</p>
<ul>
<li>
<p>Assign</p>
</li>
<li>
<p>Email</p>
</li>
<li>
<p>Enterprise Java Bean</p>
</li>
<li>
<p>FTP</p>
</li>
<li>
<p>File Exists</p>
</li>
<li>
<p>Java Class</p>
</li>
<li>
<p>Manual</p>
</li>
<li>
<p>Notification</p>
</li>
<li>
<p>OMBPlus</p>
</li>
<li>
<p>Set Status</p>
</li>
<li>
<p>Sqlplus</p>
</li>
<li>
<p>User Defined</p>
</li>
<li>
<p>Wait</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BIHGEHIJ"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Parameters Page</h3>
<p>The wizard displays parameters based on the type of activity that you previously selected in the <a href="#CHDDEECJ">"Activity Templates"</a> list.</p>
<p>Enter default values for the activity. When you use the activity template in a process flow, you can retain or edit the default values. For example, an Email activity template contains the parameters FROM_ADDRESS and REPLY_TO_ADDRESS. When you use an Email activity template in a process flow, you can overwrite the default values of these parameters with different values.</p>
</div>
<!-- class="sect2" -->
<a id="BIHDEDCG"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using Activity Templates</h3>
<p>Complete the following steps to use an activity template:</p>
<ol>
<li>
<p>In the Projects Navigator, navigate to the process flow module under the Process Flows node.</p>
</li>
<li>
<p>To open the Process Flow Editor, right-click the Process Flow and select <span class="bold">Open</span>.</p>
</li>
<li>
<p>From the Graph menu, select <span class="bold">Add</span>, then <span class="bold">Available Objects.</span></p>
<p>The Add Available Objects dialog box is displayed.</p>
</li>
<li>
<p>Select the activity template you want to use and click <span class="bold">OK</span>.</p>
<p>The activity template is added to the Process Flow Editor canvas. Activity templates in a process flow acts like regular activities.</p>
</li>
</ol>
<p>Alternatively, instead of Steps 3 and 4, you can drag and drop an activity template from the Projects Navigator on to the Process Flow Editor canvas.</p>
<p>To edit the activity, select the activity on the canvas and use the Structure tab to modify the activity details.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDHIEGD"></a><a id="WBETL08006"></a>
<div class="sect1">
<h2 class="sect1">About Transitions</h2>
<p><a id="sthref1199"></a><a id="sthref1200"></a>Use transitions to indicate the sequence and conditions in which activities occur in the process flow. You can use transitions to run an activity based on the completion state of the preceding activity.</p>
<img width="81" height="41" src="img/trans_not_specified.gif" alt="Description of trans_not_specified.gif follows" /><br />
<a id="sthref1201" href="img_text/trans_not_specified.htm">Description of the illustration trans_not_specified.gif</a><br />
<br />
<p>When you add a transition to the canvas, by default, the transition has no condition applied to it. The process flow continues after the preceding activity completes, regardless of the ending state of the previous activity.</p>
<p>A transition with no condition applied to it has different semantics depending on the source activity type. If the activity type is FORK, then it may have multiple unconditional transitions in which each transition begins a new flow in the process flow. If the source activity type is not FORK, then there may be only one unconditional transition which is used when no other conditional transition is activated (for example, the final <code>ELSE</code> condition in an <code>IF...THEN...ELSIF...ELSE...END</code> PL/SQL statement).</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1202"></a>
<h3 class="sect2">Rules for Valid Transitions</h3>
<p>For a transition to be valid, it must conform to the following rules:</p>
<ul>
<li>
<p>All activities, apart from START and END, must have at least one incoming transition.</p>
</li>
<li>
<p>Only the AND and OR activities can have multiple incoming transition.</p>
</li>
<li>
<p>Only a FORK activity can have multiple unconditional outgoing transition.</p>
</li>
<li>
<p>A FORK activity can have only unconditional outgoing transitions.</p>
</li>
<li>
<p>An activity that has an enumerated set of outcomes must have either an outgoing transition for each possible outcome or an unconditional outgoing transition.</p>
</li>
<li>
<p>An activity can have zero or more outgoing complex expression transitions.</p>
</li>
<li>
<p>An activity, with an outgoing complex expression transition, must have an unconditional outgoing transition.</p>
</li>
<li>
<p>An END_LOOP transition must have only one unconditional transition to its associated FOR_LOOP or WHILE_LOOP activity.</p>
</li>
<li>
<p>The transition taken by the <code>exit</code> outcome of a FOR_LOOP or WHILE_LOOP must not connect to an activity that could be carried because of the "loop."</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1158939"></a>
<div class="sect2">
<h3 class="sect2">Connecting Activities</h3>
<p><span class="bold">To create dependencies using transitions:</span></p>
<ol>
<li>
<p>When working in the Select mode in the Process Flow Editor, place your mouse pointer along the right border of the activity icon along its center line.</p>
<p>The editor displays the cursor as a small horizontal arrow, indicating that you can now use the mouse button to connect activities.</p>
</li>
<li>
<p>Press the left mouse button and scroll toward the next activity. As you begin to scroll, the cursor appears as an arrow with a plus sign under it. Continue to scroll toward the next activity until the plus sign under the cursor arrow changes to a circle. Release the mouse button to connect the two activities.</p>
<p>The editor displays an arrow between the two activities, assigns a default name to the transition, and displays the transition in the Structure panel. The properties of the transition are displayed in the Property Inspector.</p>
</li>
<li>
<p>In the Property Inspector, view or edit the following attributes for the transition:</p>
<p><span class="bold">Name:</span> The editor assigns a default name that you can change.</p>
<p><span class="bold">Description:</span> You can enter an optional description for the transition.</p>
<p><span class="bold">Condition:</span> Transitions that you initially draw on the canvas are unconditional by default. To override the default and apply new conditions, select the transition. The Property Inspector displays the transition properties. Click the Ellipsis button to the right of the Condition field and, in the Edit Property dialog box, select the condition to apply to the transition. When you select a condition, then the editor displays the associated icon imposed onto the transition line on the canvas.</p>
<p><span class="bold">Source:</span> This property is read-only and indicates the first activity in the connection.</p>
<p><span class="bold">Target:</span> This property is read-only and indicates the second activity in the connection.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1203"></a>
<h3 class="sect2">Configuring Activities</h3>
<p>Some activities, such as Sqlplus, require additional configuration. These configuration details for a given activity are listed in <a href="activities_in_pf.htm#BACJCADB">Chapter 27, "Activities in Process Flows"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDJADED"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using Parameters and Variables</h3>
<p>Process flows and activities support the PL/SQL parameter passing concept, enabling data to be passed and reused through parameterization. This is accomplished through data stores, which are implemented as either parameters or variables. The process flow enables the data to be passed between data stores.</p>
<ul>
<li>
<p>Parameters enable passing of data between a process flow and its activities or subprocesses.</p>
</li>
<li>
<p>Variables enable the storage of transient data, which is then maintained for the lifetime of running the process flow. Variables are used to pass data between activities.</p>
</li>
</ul>
<p><a href="#CHDIEIJJ">Figure 8-4</a> shows the direction in which the data is passed.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDIEIJJ"></a>Figure 8-4 Relationship Between the Scope and the Direction in Which the Data is Passed</p>
<img width="445" height="291" src="img/parameter_var1.gif" alt="Description of Figure 8-4 follows" /><br />
<a id="sthref1204" href="img_text/parameter_var1.htm">Description of "Figure 8-4 Relationship Between the Scope and the Direction in Which the Data is Passed"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Process flows adhere to the following rules for enabling the data to be passed between data stores:</p>
<ol>
<li>
<p>Process flow variables can be initialized from process flow parameters, but the reverse is not enabled.</p>
</li>
<li>
<p>Activity parameters can pass data bidirectionally between process flow variables and process flow parameters.</p>
</li>
<li>
<p>Transition expressions can be evaluated against their source activity parameters, process flow parameters, and process flow variables.</p>
</li>
<li>
<p>A data store cannot be accessed from another data store within the same scope.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1205"></a>
<h3 class="sect2">Using a Namespace</h3>
<p>The namespace enables a data store of an inner scope to hide the data store of an outer scope, similar to PL/SQL. By qualifying the data store name with the process flow name or activity, you can reference the hidden data store name. For example:</p>
<pre>
My_PROC.VAR1
</pre>
<p>The namespace does not enable referencing of data from another data store within the same scope.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1206"></a>
<h3 class="sect2">Using Bindings</h3>
<p>A data store may be bound to another data store in an outer scope, which supports the passing of data in both directions.</p>
<p>Process flow bindings follow the same semantics as PL/SQL with the following rules:</p>
<ol>
<li>
<p>All the data is passed within the process flow by value.</p>
</li>
<li>
<p>Variables can be initialized through a binding. They cannot return a value.</p>
</li>
<li>
<p>An INOUT parameter can be bound to an IN parameter in an outer scope. The output value, which is passed by value, is audited and then discarded.</p>
</li>
</ol>
<p>Because a variable cannot pass data out to a process flow parameter, this is accomplished by the use of an Assign operator, which can be bound to the variable and the parameter.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDEJBGF"></a><a id="WBETL08007"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">About Expressions</h2>
<p>Oracle Warehouse Builder supports the use of PL/SQL expressions for the derivation of parameter values and the use of 'complex expression' transitions.</p>
<p>The expression must produce a correctly typed value for data store. Automatic conversion from <code>VARCHAR</code> is supported. When the expression is associated with a transition a Boolean result is expected.</p>
<p>During evaluation, an expression has access to the outer scope that encloses it. So, an expression for an activity parameter can use process flow variables and process flow parameters in its evaluation.</p>
<p>The PL/SQL expression is run for of the Control Center user who requested the process of the activity. However, if the Oracle Workflow schema is hosted in a remote database instance, the effective user of the generated database link is used instead. A different Control Center user may be selected by configuring the process flow and specifying an evaluation location. Thus, the expression may reference any PL/SQL function that is accessible to the Control Center user.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1207"></a>
<h3 class="sect2">Global Expression Values</h3>
<p>Oracle Warehouse Builder makes additional data values available to the expression from the current activity and the owning process flow.</p>
<p><a href="#CHDEHDBB">Table 8-2</a> lists these global expression values.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref1208"></a><a id="CHDEHDBB"></a>Table 8-2 Global Expression Values</p>
<table class="cellalignment2975" title="Global Expression Values" summary="Global Expression Values" dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t5">Identifier</th>
<th class="cellalignment2976" id="r1c2-t5">Type</th>
<th class="cellalignment2976" id="r1c3-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t5" headers="r1c1-t5">
<p>NUMBER_OF_ERRORS</p>
</td>
<td class="cellalignment2977" headers="r2c1-t5 r1c2-t5">
<p>NUMBER</p>
</td>
<td class="cellalignment2977" headers="r2c1-t5 r1c3-t5">
<p>Number of errors reported on completion of activity execution</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t5" headers="r1c1-t5">
<p>NUMBER_OF_WARNINGS</p>
</td>
<td class="cellalignment2977" headers="r3c1-t5 r1c2-t5">
<p>NUMBER</p>
</td>
<td class="cellalignment2977" headers="r3c1-t5 r1c3-t5">
<p>Number of warnings reported on completion of activity execution</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t5" headers="r1c1-t5">
<p>RETURN_RESULT</p>
</td>
<td class="cellalignment2977" headers="r4c1-t5 r1c2-t5">
<p>VARCHAR2(64)</p>
</td>
<td class="cellalignment2977" headers="r4c1-t5 r1c3-t5">
<p>Textual representation of result. For example, 'SUCCESS,' 'WARNING,' 'ERROR'</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t5" headers="r1c1-t5">
<p>RETURN_RESULT_NUMBER</p>
</td>
<td class="cellalignment2977" headers="r5c1-t5 r1c2-t5">
<p>NUMBER</p>
</td>
<td class="cellalignment2977" headers="r5c1-t5 r1c3-t5">
<p>Enumeration of RESULT_RESULT1 = SUCCESS2 = WARNING3 = ERROR</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r6c1-t5" headers="r1c1-t5">
<p>RETURN_CODE</p>
</td>
<td class="cellalignment2977" headers="r6c1-t5 r1c2-t5">
<p>NUMBER</p>
</td>
<td class="cellalignment2977" headers="r6c1-t5 r1c3-t5">
<p>An integer, 0 to 255, specific to the activity, synonymous with an Operating System return code</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r7c1-t5" headers="r1c1-t5">
<p>PARENT_AUDIT_ID</p>
</td>
<td class="cellalignment2977" headers="r7c1-t5 r1c2-t5">
<p>NUMBER</p>
</td>
<td class="cellalignment2977" headers="r7c1-t5 r1c3-t5">
<p>The audit ID of the calling Process Flow</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r8c1-t5" headers="r1c1-t5">
<p>AUDIT_ID</p>
</td>
<td class="cellalignment2977" headers="r8c1-t5 r1c2-t5">
<p>NUMBER</p>
</td>
<td class="cellalignment2977" headers="r8c1-t5 r1c3-t5">
<p>The audit ID of the activity</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#BABIEJAF">Table 8-3</a> lists the additional constants provided.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref1209"></a><a id="BABIEJAF"></a>Table 8-3 Additional Constants</p>
<table class="cellalignment2975" title="Additional Constants" summary="This table lists the additional constants." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t6">Identifier</th>
<th class="cellalignment2976" id="r1c2-t6">Type</th>
<th class="cellalignment2976" id="r1c3-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t6" headers="r1c1-t6">
<p>SUCCESS</p>
</td>
<td class="cellalignment2977" headers="r2c1-t6 r1c2-t6">
<p>NUMBER</p>
</td>
<td class="cellalignment2977" headers="r2c1-t6 r1c3-t6">
<p>SUCCESS enumerated value</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t6" headers="r1c1-t6">
<p>WARNING</p>
</td>
<td class="cellalignment2977" headers="r3c1-t6 r1c2-t6">
<p>NUMBER</p>
</td>
<td class="cellalignment2977" headers="r3c1-t6 r1c3-t6">
<p>WARNING enumerated value</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t6" headers="r1c1-t6">
<p>ERROR</p>
</td>
<td class="cellalignment2977" headers="r4c1-t6 r1c2-t6">
<p>NUMBER</p>
</td>
<td class="cellalignment2977" headers="r4c1-t6 r1c3-t6">
<p>ERROR enumerated value</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BACCCDAD"></a><a id="WBETL08008"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Defining Transition Conditions</h2>
<p><a id="sthref1210"></a><a id="sthref1211"></a><a id="sthref1212"></a><a id="sthref1213"></a>Use the Transition Editor to specify one of the enumerated conditions or to write an expression for a complex condition. The enumerated conditions include success, warning, and error. These are displayed on the canvas as shown in <a href="#g1191138">Table 8-4</a>.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref1214"></a><a id="g1191138"></a>Table 8-4 Types of Conditions for Transitions</p>
<table class="cellalignment2975" title="Types of Conditions for Transitions " summary="Lists and describes types of conditions used in transitions. The first column displays an image for each type." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t7">Icon</th>
<th class="cellalignment2976" id="r1c2-t7">Transition Condition</th>
<th class="cellalignment2976" id="r1c3-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t7" headers="r1c1-t7"><img width="81" height="41" src="img/trans_success.gif" alt="This illustration is described in the surrounding text." /></td>
<td class="cellalignment2977" headers="r2c1-t7 r1c2-t7">
<p>Success</p>
</td>
<td class="cellalignment2977" headers="r2c1-t7 r1c3-t7">
<p>The process flow continues only if the preceding activity ends in success.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t7" headers="r1c1-t7"><img width="81" height="41" src="img/trans_warning.gif" alt="This illustration is described in the surrounding text." /></td>
<td class="cellalignment2977" headers="r3c1-t7 r1c2-t7">
<p>Warning</p>
</td>
<td class="cellalignment2977" headers="r3c1-t7 r1c3-t7">
<p>The process flow continues only if the preceding activity ends with warnings.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t7" headers="r1c1-t7"><img width="81" height="41" src="img/trans_error.gif" alt="This illustration is described in the surrounding text." /></td>
<td class="cellalignment2977" headers="r4c1-t7 r1c2-t7">
<p>Error</p>
</td>
<td class="cellalignment2977" headers="r4c1-t7 r1c3-t7">
<p>The process flow continues only if the preceding activity ends in error.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t7" headers="r1c1-t7"><img width="53" height="36" src="img/trans_custom.gif" alt="This illustration is described in the surrounding text." /></td>
<td class="cellalignment2977" headers="r5c1-t7 r1c2-t7">
<p>Complex</p>
</td>
<td class="cellalignment2977" headers="r5c1-t7 r1c3-t7">
<p>The process flow continues only if the preceding activity returns a value that meets the criteria you specify in an expression.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r6c1-t7" headers="r1c1-t7"><img width="103" height="70" src="img/ntrasition_type.gif" alt="This illustration is described in the surrounding text." /></td>
<td class="cellalignment2977" headers="r6c1-t7 r1c2-t7">
<p>Extended</p>
</td>
<td class="cellalignment2977" headers="r6c1-t7 r1c3-t7">
<p>The process flow continues only if the preceding notification activity ends with an extended result.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>The extended transition condition is valid only for Notification activities, because this is the only type of activity that returns an extended result. The activity acquires this icon when it is set to an outcome of <code>#MAIL, #NOMATCH, #TIE, or #TIMEOUT</code>.</p>
<p><a href="#CHDCAJBE">Table 8-5</a> lists the output and the description of the Extended transition.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref1215"></a><a id="CHDCAJBE"></a>Table 8-5 Output and Description of the Extended Transition</p>
<table class="cellalignment2975" title="Output and Description of the Extended Transition" summary="Output and Description of Extended Transition" dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t8">Output</th>
<th class="cellalignment2976" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t8" headers="r1c1-t8">
<p>#NOMATCH</p>
</td>
<td class="cellalignment2977" headers="r2c1-t8 r1c2-t8">
<p>Result of a voting notification where no candidate acquired the minimum number of votes to win.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t8" headers="r1c1-t8">
<p>#TIE</p>
</td>
<td class="cellalignment2977" headers="r3c1-t8 r1c2-t8">
<p>Result of a voting notification where the result was a tie.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t8" headers="r1c1-t8">
<p>#MAIL</p>
</td>
<td class="cellalignment2977" headers="r4c1-t8 r1c2-t8">
<p>A mail error occurred for the notification. Some recipients did not receive an e-mail notification, so it was canceled.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t8" headers="r1c1-t8">
<p>#TIMEOUT</p>
</td>
<td class="cellalignment2977" headers="r5c1-t8 r1c2-t8">
<p>The notification did not receive a response within the configured amount of time.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>If the activity has only one outgoing activity, then you can specify any of the conditions listed in <a href="#g1191138">Table 8-4</a> or leave the transition as unconditional.</p>
<p>The rules for using multiple outgoing transitions depend on the type of activity. The general rule is that you can use an unlimited number of complex conditions in addition to one of each of the following: SUCCESS, WARNING, ERROR, and UNCONDITIONAL. The exception to this rule is when you use control activities such as AND, FORK, and OR.</p>
<p>When you add multiple outgoing transitions from an activity, ensure that the conditions do not conflict. A conflict occurs when the process flow logic evaluates that multiple outgoing transition is true.</p>
<p><a href="#i1158952">Figure 8-5</a> shows a portion of a process flow in which different activities are triggered based on the three possible completion states of MAP1. Because only one of these conditions can be satisfied at a time, there is no conflict. If you attempt to add an unconditional transition or another conditional transition, then two transition conditions would be true and the process flow would be invalid.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1158952"></a>Figure 8-5 Outgoing Transition Conditions</p>
<img width="488" height="241" src="img/trans_cond_ex.gif" alt="This illustration is described in the surrounding text." /><br />
<a id="sthref1216" href="img_text/trans_cond_ex.htm">Description of "Figure 8-5 Outgoing Transition Conditions"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect1" -->
<a id="BABJCFHA"></a><a id="WBETL08009"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Example: <a id="sthref1217"></a><a id="sthref1218"></a><a id="sthref1219"></a>Using Process Flows to Access Flat Files with Variable Names</h2>
<p class="subhead2"><a id="sthref1220"></a>Scenario</p>
<p>Your company relies on a legacy system that writes data to a flat file on a daily basis and assigns a unique name to the file based on the date and time of its creation. You would like to create a mapping that uses the generated flat files as a source, and transforms and loads the data to a relational database. However, mappings require files to have permanent names and, in this situation, the name of the source file changes each time the file is created.</p>
<p class="subhead2"><a id="sthref1221"></a>Solution</p>
<p>In Oracle Warehouse Builder, you can design a process flow that locates the generated file in a specific directory, renames it to a permanent name that you designate, and starts a dependent mapping. You can now use the permanent flat file name as the source for your mapping.</p>
<p class="subhead2"><a id="sthref1222"></a>Case Study</p>
<p>This case study describes how to create a process flow and a mapping to extract data from a legacy system that generates flat files with variable names. The process flow relies on the use of a User Defined activity. Assume the following information for the purposes of this case study:</p>
<ul>
<li>
<p><span class="bold">Generated Flat File:</span> The legacy system generates a flat file containing sales data on a daily basis. It saves the file to the <code>c:\staging_files</code> directory and names the file based on the time and date, such as <code>sales010520041154.dat.</code> Every generated file is saved to the same directory and begins with the word <code>sales</code>, followed by the timestamp information.</p>
</li>
<li>
<p><span class="bold">Permanent Flat File Name:</span> You decide to rename the generated file name to <code>s_data.dat.</code> This is the name that you reference as the flat file source in the mapping.</p>
</li>
<li>
<p><span class="bold">Process Activity:</span> You design a process flow named <code>OWF_EXT</code> to run batch commands in DOS to copy the generated file, save it as <code>s_data.dat</code>, and delete the originally generated file.</p>
</li>
</ul>
<p>Your objective is to create logic that ensures the generated flat file is renamed appropriately before it triggers the execution of a mapping.</p>
<p><span class="bold">To extract data from a generated flat file with a name that varies with each generation, refer to the following sections:</span></p>
<ol>
<li>
<p><a href="#CDDCGAEH">"Creating the Process Flow"</a></p>
</li>
<li>
<p><a href="#CDDHFJFJ">"Setting Parameters for the User Defined Activity"</a></p>
</li>
<li>
<p><a href="#CHDJCHJF">"Configuring the User Defined Activity"</a></p>
</li>
<li>
<p><a href="#CDDIIDHE">"Designing the Mapping"</a></p>
</li>
<li>
<p><a href="#CHDJIBIH">"Deploying and Executing"</a></p>
</li>
</ol>
<a id="CDDCGAEH"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating the Process Flow</h3>
<p>Create a process flow that starts a mapping on the condition that the User Defined activity completes successfully. For more information about creating the process flow, see <a href="#i1171059">"Steps for Defining Process Flows"</a>.</p>
<p><a href="#BABHBFDA">Figure 8-6</a> displays the process flow you create to extract data from a generated flat file.</p>
<div class="figure">
<p class="titleinfigure"><a id="BABHBFDA"></a>Figure 8-6 Process Flow with User Defined Activity Transitioning to a Mapping</p>
<img width="595" height="274" src="img/ex_proc_pflow.gif" alt="Description of Figure 8-6 follows" /><br />
<a id="sthref1223" href="img_text/ex_proc_pflow.htm">Description of "Figure 8-6 Process Flow with User Defined Activity Transitioning to a Mapping"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="CDDHFJFJ"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Setting Parameters for the User Defined Activity</h3>
<p>This section describes how to specify the DOS commands for renaming the generated file. The DOS commands that you issue from the User Defined activity should be similar to the following:</p>
<pre>
copy c:\staging_files\sales*.* c:\staging_files\s_data.dat
del c:\staging_files\sales*.*
</pre>
<p>The first command copies the temporary file into a file with a fixed name <code>s_data.dat.</code> The second command deletes the originally generated file.</p>
<p>You can either direct Oracle Warehouse Builder to a file containing the script of commands or you can store the commands in Oracle Warehouse Builder user interface. Choose one of the following methods:</p>
<ul>
<li>
<p><a href="#CHDHFEHD">"<span class="bold">Method 1: Write a script Within Oracle Warehouse Builder</span>"</a></p>
</li>
<li>
<p><a href="#CHDEDHHE">"<span class="bold">Method 2: Call a script maintained outside of Oracle Warehouse Builder</span>"</a></p>
</li>
</ul>
<a id="CHDHFEHD"></a>
<div class="sect3">
<h4 class="sect3"><span class="bold">Method 1: Write a script Within Oracle Warehouse Builder</span></h4>
<p>Choose this method when you want to maintain the script in Oracle Warehouse Builder. Consider using this method when the script is small and need not be very flexible.</p>
<p>For this method, write or copy and paste the script into the Value column of the SCRIPT parameter. In the COMMAND parameter, enter the path to the DOS shell command, such as <code>c:\winnt\system32\cmd.exe</code>. Also, type the <code>${Task.Input}</code> variable into the Value column of the PARAMETER_LIST parameter.</p>
<p>Although this case study does not illustrate it, you can use substitution variables in the script when you maintain it in Oracle Warehouse Builder. This prevents you from having to update activities when server files, accounts, and passwords change.</p>
<p><a href="#CHDDDFED">Table 8-6</a> lists the substitute variables that you can type for the User Defined activity. <span class="italic">Working</span> refers to the computer hosting the Runtime Service, the <span class="italic">local</span> computer in this case study. <span class="italic">Remote</span> refers to a server other than the Runtime Service host. You designate which server is remote and which is local when you configure the activity, as described in <a href="#CHDJCHJF">"Configuring the User Defined Activity"</a>. These values are set when you register the locations at deployment.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref1224"></a><a id="CHDDDFED"></a>Table 8-6 Substitute Variables for the User Defined Activity</p>
<table class="cellalignment2975" title="Substitute Variables for the User Defined Activity " summary="Lists the substitute variables and values for FTP activities." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t9">Variable</th>
<th class="cellalignment2976" id="r1c2-t9">Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t9" headers="r1c1-t9">
<p>${Working.Host}</p>
</td>
<td class="cellalignment2977" headers="r2c1-t9 r1c2-t9">
<p>The host value for the location of the Runtime Service host</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t9" headers="r1c1-t9">
<p>${Working.User}</p>
</td>
<td class="cellalignment2977" headers="r3c1-t9 r1c2-t9">
<p>The user value for the location of the Runtime Service host</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t9" headers="r1c1-t9">
<p>${Working.Password}</p>
</td>
<td class="cellalignment2977" headers="r4c1-t9 r1c2-t9">
<p>The password value for the location of the Runtime Service host</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t9" headers="r1c1-t9">
<p>${Working.RootPath}</p>
</td>
<td class="cellalignment2977" headers="r5c1-t9 r1c2-t9">
<p>The root path value for the location of the Runtime Service host</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r6c1-t9" headers="r1c1-t9">
<p>${Remote.Host}</p>
</td>
<td class="cellalignment2977" headers="r6c1-t9 r1c2-t9">
<p>The host value for a location other than the Runtime Service host</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r7c1-t9" headers="r1c1-t9">
<p>${Remote.User}</p>
</td>
<td class="cellalignment2977" headers="r7c1-t9 r1c2-t9">
<p>The user value for a location other than the Runtime Service host</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r8c1-t9" headers="r1c1-t9">
<p>${Remote.Password}</p>
</td>
<td class="cellalignment2977" headers="r8c1-t9 r1c2-t9">
<p>The password value for a location other than the Runtime Service host</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r9c1-t9" headers="r1c1-t9">
<p>${Remote.RootPath}</p>
</td>
<td class="cellalignment2977" headers="r9c1-t9 r1c2-t9">
<p>The root path value for a location other than the Runtime Service host</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r10c1-t9" headers="r1c1-t9">
<p>${Deployment.Location}</p>
</td>
<td class="cellalignment2977" headers="r10c1-t9 r1c2-t9">
<p>The deployment location</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<a id="CHDEDHHE"></a>
<div class="sect3">
<h4 class="sect3"><span class="bold">Method 2: Call a script maintained outside of Oracle Warehouse Builder</span></h4>
<p>If extra maintenance is not an issue, you can point Oracle Warehouse Builder to a file containing a script including the necessary commands. This method is more flexible, as it enables you to pass in parameters during execution of the process flow.</p>
<p>The following example shows how to call an external process script outside of Oracle Warehouse Builder and illustrates how to pass parameters into the script during execution of the process flow. This example assumes a Windows operating system. For other operating systems, issue the appropriate equivalent commands.</p>
<p class="subhead2"><a id="sthref1225"></a><span class="bold">To call a script outside the User Defined activity:</span></p>
<ol>
<li>
<p>Write the script and save it to the file directory. For example, you can write the following script and save it as <code>c:\staging_files\rename_file.bat:</code></p>
<p><code>copy c:\staging_files\%1*.dat c:\staging_files\s_data.dat</code></p>
<p><code>del c:\staging_files\%1*.dat</code></p>
<p>This sample script passes a parameter %1 to the script during the execution of the process flow. This parameter represents a string containing the first characters of the temporary file name, such as <code>sales010520041154.</code></p>
</li>
<li>
<p>Select the Start activity on the canvas to view and edit activity parameters in the Structure view.</p>
<p>To add a start parameter, select the Start activity on the canvas, and click <span class="bold">Add New Activity Parameter</span> on the Structure tab. Create a start parameter named <code>FILE_STRING</code>. During execution, Oracle Warehouse Builder prompts you to type a value for <code>FILE_STRING</code> to pass on to the <code>%1</code> parameter in the <code>rename_file.bat</code> script.</p>
</li>
<li>
<p>Select the User Defined activity on the canvas and edit its parameters.</p>
<p>For the COMMAND parameter, enter the path to the script in the column labeled Value. If necessary, use the scroll bar to scroll down and reveal the column. For this example, enter <code>c:\staging_files\rename_file.bat.</code></p>
<p>For PARAMETER_LIST, click the row labeled Binding and select the parameter that you defined for the start activity, FILE_STRING.</p>
<p>Accept the defaults for all other parameters for the external process.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDJCHJF"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Configuring the User Defined Activity</h3>
<p>When you apply conditions to the outgoing transitions of a User Defined activity, you must define the meaning of those conditions when you configure the User Defined activity.</p>
<p><span class="bold">To configure the User Defined activity:</span></p>
<ol>
<li>
<p>Right-click the process flow on the navigation tree and select <span class="bold">Configure.</span></p>
<p>The configuration properties for the process flow are displayed in a new tab.</p>
</li>
<li>
<p>Expand the User Defined Activities node, then the User Defined activity, and the Path Settings node. Oracle Warehouse Builder displays the configuration settings.</p>
</li>
<li>
<p>Complete this step if you wrote the script in Oracle Warehouse Builder user interface using the substitution variables related to Remote Location, Working Location, and Deployment Location. Use the list to select the values.</p>
<p>Because this case study does not use substitution variables, accept the default values.</p>
</li>
<li>
<p>Set the Deployed Location to the computer where you deploy the process flow.</p>
</li>
<li>
<p>Under the Execution Settings node, set <span class="bold">Use Return as Status</span> to true.</p>
<p>This ensures that the process flow uses the external process return codes for determining which outgoing transition to activate. For the process flow in this case study, if the external process returns a success value, the process flow continues down the success transition and runs the downstream mapping.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CDDIIDHE"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Designing the Mapping</h3>
<p>Now you can design a mapping with <code>s_data.dat</code> as the source. You can create a PL/SQL mapping or a SQL*Loader mapping. For PL/SQL, map the flat file source to an external table and design the rest of the mapping with all the operators available for a PL/SQL mapping. For SQL*Loader, map the flat file source to a staging table and limit the mapping to those operators permitted in SQL*Loader mappings.</p>
</div>
<!-- class="sect2" -->
<a id="CHDJIBIH"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Deploying and Executing</h3>
<p>Deploy the mapping. Also, deploy the process flow package or module containing the process flow <code>OWF_EXT.</code></p>
<p>Run the process flow manually. When you run the process flow, Oracle Warehouse Builder prompts you to enter values for the parameter that you created to pass into the script, FILE_STRING. For this case study, enter <code>?sales</code> where the question mark is the separator. The external activity then runs the command <code>rename_file.bat sales.</code></p>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1226"></a>
<h3 class="sect2">Subsequent Steps</h3>
<p>After you successfully run the process flow manually, consider creating a schedule.You can define a daily schedule to run the process flow and, therefore, the mapping. Use schedules to plan when and how often to run operations such as mappings and process flows that you deploy through Oracle Warehouse Builder.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="scheduling_etl.htm#BIHDCJCD">"Defining Schedules"</a> for information about defining schedules.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCJDBB"></a><a id="WBETL08010"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Example: Using Process Flows to <a id="sthref1227"></a><a id="sthref1228"></a><a id="sthref1229"></a><a id="sthref1230"></a><a id="sthref1231"></a>Transfer Remote Files</h2>
<p class="subhead2"><a id="sthref1232"></a>Scenario</p>
<p>Developers at your company designed mappings that extract, transform, and load data. The source data for the mapping resides on a server separate from the server that performs the ETL processing. You would like to create logic that transfers the files from the remote computer and triggers the dependent mappings.</p>
<p class="subhead2"><a id="sthref1233"></a>Solution</p>
<p>In Oracle Warehouse Builder, you can design a process flow that runs file transfer protocol (FTP) commands and then starts a mapping. For the process flow to be valid, the FTP commands must involve transferring data either from or to the server with the Runtime Service installed. To move data between two computers, neither of which hosts the Runtime Service, first transfer the data to the Runtime Service host computer and then transfer the data to the second computer.</p>
<p>You can design the process flow to start different activities depending upon the success or failure of the FTP commands.</p>
<p class="subhead2"><a id="sthref1234"></a>Case Study</p>
<p>This case study describes how to transfer files from one computer to another and start a dependent mapping. The case study provides examples of all the necessary servers, files, and user accounts.</p>
<ul>
<li>
<p><span class="bold">Data host computer:</span> For the computer hosting the source data, you need a user name and password, host name, and the directory containing the data. In this case study, the computer hosting the data is a UNIX server named <code>salessrv1.</code> The source data is a flat file named <code>salesdata.txt</code> located in the <code>/usr/stage</code> directory.</p>
</li>
<li>
<p><span class="bold">Runtime Service host computer:</span> In this case study, Oracle Warehouse Builder and the Runtime Service are installed on a computer called <code>local</code> with a Windows operating system. <code>local</code> runs the mapping and the process flow.</p>
</li>
<li>
<p><span class="bold">Mapping:</span> This case study includes a mapping called <code>salesresults</code> that uses a copy of <code>salesdata.txt</code> stored on <code>local</code> at <code>c:\temp</code> as its source.</p>
</li>
<li>
<p><span class="bold">FTP Commands:</span> This case study illustrates the use of a few basic FTP commands on the Windows operating system.</p>
</li>
</ul>
<p>Your objective is to create logic that ensures the flat file on <code>salessrv1</code> is copied to the <code>local</code> computer, and then, trigger the execution of the <code>salesresults</code> mapping.</p>
<p><span class="bold">To transfer files and start a dependent mapping, see the following sections:</span></p>
<ol>
<li>
<p><a href="#BABJCJCJ">"Defining Locations"</a>.</p>
</li>
<li>
<p><a href="#CHDDICFA">"Creating the Process Flow"</a></p>
</li>
<li>
<p><a href="#CHDCIFIA">"Setting Parameters for the FTP Activity"</a></p>
</li>
<li>
<p><a href="#CHDJJDFD">"Configuring the FTP Activity"</a></p>
</li>
<li>
<p><a href="#CDDDFFHC">"Registering the Process Flow for Deployment"</a></p>
</li>
</ol>
<p>After you complete the instructions in the above sections, you can run the process flow.</p>
<a id="BABJCJCJ"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Defining Locations</h3>
<p>Locations are logical representations of the various data sources and destinations in the warehouse environment. In this scenario, the locations are the logical representations of the host and path name information required to access a flat file. Oracle Warehouse Builder requires these definitions for deploying and running the process flow. When you deploy the process flow, Oracle Warehouse Builder prompts you to type the host and path name information associated with each location. You must define locations for each computer involved in the data transfer.</p>
<p>To define locations, right-click the appropriate Locations node in the Locations Navigator and select <span class="bold">New</span>. For salessrv1, right-click Files under the Locations node and create a location named <code>REMOTE_FILES</code>. Repeat the step for local and create the location <code>LOCAL_FILES</code>.</p>
<p>For the remote location, enter the host name, root path to the file, user name, and password. Oracle Warehouse Builder keeps the password secure. For the local location, only the host name is necessary.</p>
</div>
<!-- class="sect2" -->
<a id="CHDDICFA"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating the Process Flow</h3>
<p>Use the Process Flow Editor to create a process flow with an FTP activity that transitions to the <code>salesresults</code> mapping on the condition of success.</p>
<p>Your process flow should appear similar to <a href="#CHDFHAHI">Figure 8-7</a>.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDFHAHI"></a>Figure 8-7 Process Flow with FTP Transitioning to a Mapping</p>
<img width="657" height="210" src="img/ftp_pflow.gif" alt="Description of Figure 8-7 follows" /><br />
<a id="sthref1235" href="img_text/ftp_pflow.htm">Description of "Figure 8-7 Process Flow with FTP Transitioning to a Mapping"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="CHDCIFIA"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Setting Parameters for the FTP Activity</h3>
<p>This section describes how to specify the commands for transferring data from the remote server <code>salessrv1</code> to the <code>local</code> computer. You specify the FTP parameters by entering values for the FTP activity parameters on the Activity View.</p>
<p>Oracle Warehouse Builder offers you flexibility on how you specify the FTP commands. Choose one of the following methods:</p>
<ul>
<li>
<p><span class="bold">Method 1: Write a script in Oracle Warehouse Builder:</span> Choose this method when you want to maintain the script in Oracle Warehouse Builder or when password security to servers is a requirement.</p>
<p>For this method, write or copy and paste the script into the Value column of the SCRIPT parameter. In the COMMAND parameter, enter the path to the FTP executable, such as <code>c:\winnt\system32\ftp.exe.</code> Also, enter the <code>Task.Input</code> variable into the Value column of the PARAMETER_LIST parameter.</p>
</li>
<li>
<p><span class="bold">Method 2: Call a script maintained outside of Oracle Warehouse Builder:</span> If password security is not an issue, you can direct Oracle Warehouse Builder to a file containing a script including the FTP commands and the user name and password.</p>
<p>To call a file on the file system, enter the appropriate command in PARAMETER_LIST to direct Oracle Warehouse Builder to the file. For a Windows operating system, enter the following:</p>
<p><code>?"-s:&lt;file path\file name&gt;"?</code></p>
<p>For example, to call a file named <code>move.ftp</code> located in a temp directory on the C drive, enter the following:</p>
<p><code>?"-s:c:\temp\move.ftp"?</code></p>
<p>Leave the SCRIPT parameter blank for this method.</p>
</li>
</ul>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1236"></a>
<h4 class="sect3">Example: Writing a Script in Oracle Warehouse Builder for the FTP Activity</h4>
<p>The following example illustrates Method 1. It relies on a script and the use of substitution variables. The script navigates to the correct directory on <code>salessrv1</code> and the substitution variables are used for security and convenience.</p>
<p>This example assumes a Windows operating system. For other operating systems, issue the appropriate equivalent commands.</p>
<p><span class="bold">To define a script within the FTP activity:</span></p>
<ol>
<li>
<p>Select the FTP activity on the canvas to view and edit activity parameters in the Property Inspector.</p>
</li>
<li>
<p>For the COMMAND parameter, enter the path to the FTP executable in the column labeled Value. If necessary, use the scroll bar to scroll to the right and reveal the column labeled Value.</p>
<p>For Windows operating systems, the FTP executable is often stored at <code>c:\winnt\system32\ftp.exe</code>.</p>
</li>
<li>
<p>For the PARAMETER_LIST parameter, enter the <code>Task.Input</code> variable.</p>
<p>When defining a script in Oracle Warehouse Builder and using Windows FTP, you must enter <code>?"-s:${Task.Input}"?</code> into PARAMETER_LIST.</p>
<p>For UNIX, enter the following: <code>?"${Task.Input}"?</code>.</p>
</li>
<li>
<p>Navigate to and highlight the SCRIPT parameter in the Structure tab.</p>
<p>The Property Inspector displays the properties of the SCRIPT parameter.</p>
</li>
<li>
<p>Click the Ellipsis button to the right of the Value field displayed in the Property Inspector.</p>
<p>Oracle Warehouse Builder displays the SCRIPT Value editor. Write or copy and paste FTP commands into the editor.</p>
<p>Notice that the script in <a href="#CHDCBCGE">Figure 8-8</a> includes <code>${Remote.User}</code> and <code>${Remote.Password}</code>. These are substitution variables. See <a href="#CDDFHFFB">"Using Substitution Variables"</a> for more details.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDCBCGE"></a>Figure 8-8 SCRIPT Value Editor Using Substitution Variables</p>
<img width="300" height="250" src="img/case_trns_script_value.gif" alt="Description of Figure 8-8 follows" /><br />
<a id="sthref1237" href="img_text/case_trns_script_value.htm">Description of "Figure 8-8 SCRIPT Value Editor Using Substitution Variables"</a><br />
<br /></div>
<!-- class="figure" --></li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CDDFHFFB"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using Substitution Variables</h4>
<p>Substitution variables are available only when you choose to write and store the FTP script in Oracle Warehouse Builder.</p>
<p>Use substitution variables to prevent having to update FTP activities when server files, accounts, and passwords change. For example, suppose that you create 10 process flows that use FTP activities to access a file on <code>salessrv1</code> under a specific directory. If the file is moved, then, without the use of substitution variables, you must update each FTP activity individually. With the use of substitution variables, you need only update the location information as described in <a href="#BABJCJCJ">"Defining Locations"</a>.</p>
<p>Substitution variables are also important for maintaining password security. When Oracle Warehouse Builder runs an FTP activity with substitution variables for the server passwords, it resolves the variable to the secure password that you provided for the associated location.</p>
<p><a href="#g1191433">Table 8-7</a> lists the substitute variables that you can provide for the FTP activity. <code>Working</code> refers to the computer hosting the Runtime Service, the <span class="italic">local</span> computer in this case study. <code>Remote</code> refers to the other server involved in the data transfer. You designate which server is remote and which is local when you configure the FTP activity. For more information, see <a href="#CHDJJDFD">"Configuring the FTP Activity"</a>.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref1238"></a><a id="g1191433"></a>Table 8-7 Substitute Variables for the FTP Activity</p>
<table class="cellalignment2975" title="Substitute Variables for the FTP Activity " summary="Lists the substitute variables and values for FTP activities." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t11">Variable</th>
<th class="cellalignment2976" id="r1c2-t11">Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t11" headers="r1c1-t11">
<p>${Working.RootPath}</p>
</td>
<td class="cellalignment2977" headers="r2c1-t11 r1c2-t11">
<p>The root path value for the location of the Runtime Service host</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t11" headers="r1c1-t11">
<p>${Remote.Host}</p>
</td>
<td class="cellalignment2977" headers="r3c1-t11 r1c2-t11">
<p>The host value for the location involved in transferring data to or from the Runtime Service host</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t11" headers="r1c1-t11">
<p>${Remote.User}</p>
</td>
<td class="cellalignment2977" headers="r4c1-t11 r1c2-t11">
<p>The user value for the location involved in transferring data to or from the Runtime Service host</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t11" headers="r1c1-t11">
<p>${Remote.Password}</p>
</td>
<td class="cellalignment2977" headers="r5c1-t11 r1c2-t11">
<p>The password value for the location involved in transferring data to or from the Runtime Service host</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r6c1-t11" headers="r1c1-t11">
<p>${Remote.RootPath}</p>
</td>
<td class="cellalignment2977" headers="r6c1-t11 r1c2-t11">
<p>The root path value for the location involved in transferring data to or from the Runtime Service host</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDJJDFD"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Configuring the FTP Activity</h3>
<p>As part of configuring the complete process flow, configure the FTP activity.</p>
<p><span class="bold">To configure the FTP activity:</span></p>
<ol>
<li>
<p>Right-click the process flow on the navigation tree and select <span class="bold">Configure.</span></p>
</li>
<li>
<p>Expand the FTP activity and the Path Settings. Oracle Warehouse Builder displays the configuration settings.</p>
</li>
<li>
<p>Set Remote Location to REMOTE_LOCATION and Working Location to LOCAL_LOCATION.</p>
</li>
<li>
<p>Click to select the <span class="bold">Use Return as Status</span>. This ensures that the process flow uses the FTP return codes for determining which outgoing transition to activate. For the process flow in this case study, if FTP returns a success value of 1, the process flow continues down the success transition and runs the <code>salesresults</code> mapping.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CDDDFFHC"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Registering the Process Flow for Deployment</h3>
<p>After you complete these instructions, you can deploy and run the process flow. To deploy the process flow, start the Deployment Manager by right-clicking and selecting <span class="bold">Deploy</span> from either the process flow module or package on the navigation tree. The Deployment Manager prompts you to register the REMOTE_LOCATION and the LOCAL_LOCATION.</p>
<p>Now you can run the process flow.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2968">
<tr>
<td class="cellalignment2977">
<table class="cellalignment2973">
<tr>
<td class="cellalignment2972"><a href="sap_km_mappings.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2972"><a href="custom_transforms.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2980">
<table class="cellalignment2971">
<tr>
<td class="cellalignment2972"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2972"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2972"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2972"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2972"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2972"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
