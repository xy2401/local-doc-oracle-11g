<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Creating PL/SQL Mappings</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 037" />
<meta name="dcterms.created" content="2011-09-21T18:21:27Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Warehouse Builder Data Modeling, ETL, and Data Quality Guide" />
<meta name="dcterms.identifier" content="E10935-05" />
<meta name="dcterms.isVersionOf" content="WBETL" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="transformdata_intro.htm" title="Previous" type="text/html" />
<link rel="Next" href="dim_mappings.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10935.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/37</span> <!-- End Header --><a id="BEIGDJAE"></a><a id="WBETL05000"></a>
<h1 class="chapter"><span class="secnum">5</span> Creating PL/SQL Mappings</h1>
<p><a id="sthref786"></a><a id="sthref787"></a><a id="sthref788"></a><a id="sthref789"></a>After you create data object definitions in Oracle Warehouse Builder, you can design extract, transform, and load (ETL) operations that move data from sources to targets. In Oracle Warehouse Builder, you design these operations in a mapping.</p>
<p>You can also use the Mapping Debugger to debug data flows created in mappings.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDIFJGA">"Overview of Oracle Warehouse Builder Mappings"</a></p>
</li>
<li>
<p><a href="#CHDIFFFG">"Example: Defining a Simple PL/SQL Mapping"</a></p>
</li>
<li>
<p><a href="#CHDDCJIE">"Steps to Perform Extraction, Transformation, and Loading (ETL) Using Mappings"</a></p>
</li>
<li>
<p><a href="#i1170011">"Defining Mappings"</a></p>
</li>
<li>
<p><a href="#i1171414">"Adding Operators to Mappings"</a></p>
</li>
<li>
<p><a href="#i1126489">"Connecting Operators, Groups, and Attributes"</a></p>
</li>
<li>
<p><a href="#i1159210">"Editing Operators"</a></p>
</li>
<li>
<p><a href="#BEICHEHF">"Setting Mapping Properties"</a></p>
</li>
<li>
<p><a href="#BEIGHHAE">"Configuring Mappings"</a></p>
</li>
<li>
<p><a href="#i1139074">"Synchronizing Operators and Workspace Objects"</a></p>
</li>
<li>
<p><a href="#CIHEICFB">"Example: Using a Mapping to Load Transaction Data"</a></p>
</li>
<li>
<p><a href="#i1158750">"Example: Using the Mapping Editor to Create Staging Area Tables"</a></p>
</li>
<li>
<p><a href="#CIHDGAHA">"Using Pluggable Mappings"</a></p>
</li>
<li>
<p><a href="#BEIDFDJC">"Copying Operators Across Mappings and Pluggable Mappings"</a></p>
</li>
<li>
<p><a href="#CIHHGCBD">"Grouping Operators in Mappings and Pluggable Mappings"</a></p>
</li>
<li>
<p><a href="#BEIEAFAJ">"Locating Operators, Groups, and Attributes in Mappings and Pluggable Mappings"</a></p>
</li>
<li>
<p><a href="#BEICEJFD">"Debugging Mappings"</a></p>
</li>
</ul>
<a id="CHDIFJGA"></a><a id="WBETL05003"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Overview of Oracle Warehouse Builder <a id="sthref790"></a>Mappings</h2>
<p>A mapping is an Oracle Warehouse Builder object that you use to perform extract, transform, and load (ETL). A mapping defines the data flows for moving data from disparate sources to your data warehouse.</p>
<p>You can extract data from sources that include, but are not limited to, flat files, Oracle databases, SAP, or other heterogeneous databases such as SQL Server and IBM DB2. Use mapping operators or transformations to transform the data, according to your requirements, and to load the transformed data into the target objects.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1170011">"Defining Mappings"</a> for information about defining mappings.</p>
</li>
<li>
<p><a href="data_flow_opers.htm#CIHBEEAC">Chapter 26, "Data Flow Operators"</a> for information about mapping transformation operators and how to use them.</p>
</li>
<li>
<p><a href="ref_sqltransforms.htm#BHCIEAHE">Chapter 28, "Oracle Warehouse BuilderTransformations Reference"</a> for more information about predefined Oracle Warehouse Builder transformations.</p>
</li>
</ul>
</div>
<p>As with other Oracle Warehouse Builder objects, after you define a mapping, you must validate, generate, and deploy the mapping. Once you define and deploy a mapping, you can run the mapping using the Control Center Manager, schedule it for later execution, or incorporate it in a process flow.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="deploy.htm#i1088602">"Deploying Objects"</a> for information about deploying mappings.</p>
</li>
<li>
<p><a href="scheduling_etl.htm#CHDGEGJF">"Scheduling ETL Jobs"</a> for information about scheduling ETL objects.</p>
</li>
<li>
<p><a href="design_processflows.htm#CHDHGEAA">"Designing Process Flows"</a> for information about defining process flows.</p>
</li>
</ul>
</div>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref791"></a>
<h3 class="sect2">Types of <a id="sthref792"></a><a id="sthref793"></a>Mappings</h3>
<p>Oracle Warehouse Builder mappings can be classified according to the supported data extraction technologies used in the mapping. The code generated by Oracle Warehouse Builder depends on the sources and targets used in the mapping.</p>
<p>The different types of mappings include:</p>
<ul>
<li>
<p><a href="#BEICGDID">"PL/SQL Mappings"</a></p>
</li>
<li>
<p><a href="#BEIJBEJA">"SQL*Loader Mappings"</a></p>
</li>
<li>
<p><a href="#BEICFGAI">"SAP ABAP Mappings"</a></p>
</li>
<li>
<p><a href="#BEIEBAHG">"Code Template (CT) Mappings"</a></p>
</li>
</ul>
<p>Oracle Warehouse Builder generates ETL code in different languages for the different mapping types. The generated code is deployed to a target location, where it runs. By selecting the appropriate data extraction technology for each mapping, you can access a wide range of data source types, and satisfy different technical requirements, such as performance and security.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Mappings other than PL/SQL mappings do not support all Oracle Warehouse Builder data transformation capabilities. If you use one of the non-PL/SQL mapping types, you must perform complex transformations supported only in PL/SQL mappings, use the non-PL/SQL mapping to load a staging table, and then use a PL/SQL mapping to perform the rest of the required transformation.</div>
<a id="BEICGDID"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref794"></a><a id="sthref795"></a>PL/SQL Mappings</h4>
<p>PL/SQL mappings are the default mapping type in Oracle Warehouse Builder and is necessary in most situations. For PL/SQL mappings, Oracle Warehouse Builder generates PL/SQL code that is deployed to an Oracle Database location, where it runs.</p>
<p>Data extraction from other locations is primarily performed through database links to other Oracle Databases or through Oracle Database gateways for non-Oracle data sources. PL/SQL mappings offer the full range of Oracle Warehouse Builder data transformation capabilities.</p>
</div>
<!-- class="sect3" -->
<a id="BEIJBEJA"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref796"></a><a id="sthref797"></a>SQL*Loader Mappings</h4>
<p>For SQL*Loader mappings, Oracle Warehouse Builder generates SQL*Loader control files. The control file is deployed to the target database, where SQL*Loader runs, loading the source data into the database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
SQL*Loader mappings support only a subset of transformations available in PL/SQL mappings. For information about the limitations on the transformations available in SQL*Loader mappings, see <a href="data_flow_opers.htm#CIHBEEAC">Chapter 26, "Data Flow Operators"</a>.</div>
</div>
<!-- class="sect3" -->
<a id="BEICFGAI"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref798"></a><a id="sthref799"></a>SAP ABAP Mappings</h4>
<p>ABAP mappings are the only supported method of extracting data from SAP R/3 source systems. For ABAP mappings, Oracle Warehouse Builder generates ABAP code. This code can then be deployed to an SAP R/3 instance automatically or manually by an administrator, depending upon security and other administrative requirements specific to the SAP environment. The ABAP code runs, generating a flat file as output, which is then transparently moved to the target database system and loaded into the Oracle target database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
ABAP mappings support only a subset of transformations available in PL/SQL mappings. For information about the limitations on the transformations available in ABAP mappings, see <a href="data_flow_opers.htm#CIHBEEAC">Chapter 26, "Data Flow Operators"</a>.</div>
</div>
<!-- class="sect3" -->
<a id="BEIEBAHG"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref800"></a><a id="sthref801"></a>Code Template (CT) Mappings</h4>
<p>Code templates provide a general framework for implementing data extraction, movement, and loading mechanisms. For Code Template (CT) mappings, Oracle Warehouse Builder generates data extraction or other mapping code based on the contents of a code template. This code is then deployed to a remote agent on a target system, where it runs. The technology used to load data into the target database depends upon the contents of the code template. Oracle Warehouse Builder provides a collection of code templates that implement common data extraction methods. Other code templates use bulk data extraction and loading tools for faster and more flexible data movement.</p>
<p>Choose <a id="sthref802"></a>CT mappings when you must:</p>
<ul>
<li>
<p>Access a data source without using Oracle Database gateways or ODBC, or you have a specific need for JDBC connectivity. Oracle Warehouse Builder provides code templates that support access to any JDBC data source or target.</p>
</li>
<li>
<p>Load data from an XML source file.</p>
</li>
<li>
<p>Perform bulk data unloads and loads for maximum data movement performance. Oracle Warehouse Builder provides code templates to support bulk data movement from some common databases. You can write your own code templates for sources not supported by Oracle Warehouse Builder-provided code templates.</p>
</li>
<li>
<p>Implement ETL processes where data moves from a non-Oracle database source directly to a non-Oracle database target. For example, you can define an ETL process that extracts from an IBM DB2 source and loads a Microsoft SQL Server target directly.</p>
</li>
<li>
<p>Implement new data integration patterns without requiring changes to Oracle Warehouse Builder itself. Code templates provide maximum data integration flexibility for business and technical requirements beyond those supported by Oracle Warehouse Builder out of the box.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
CT mappings support only a subset of transformations available in PL/SQL mappings. For information about the limitations on the transformations available in CT mappings, see <a href="sap_km_mappings.htm#BABBIFHB">"Mapping Operators Only Supported in Oracle Target CT Execution Units"</a>.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BEIJBDDE"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Chunking for PL/SQL Mappings</h3>
<p>Chunking enables you to parallelize the processing of large updates by dividing the source data in a mapping into smaller chunks. The chunks are defined by user-defined chunking criteria. At run time, the chunks are run in parallel and each chunk is loaded separately into the target object.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Chunking can be performed for PL/SQL mappings only.</div>
<p>When you define chunking, Oracle Warehouse Builder creates a chunking task in the target schema at deployment time. During execution, the DML represented by each chunk is run in parallel.</p>
<p>For a PL/SQL mapping that uses chunking, you can configure the following parameters using the Mapping Configuration Editor:</p>
<ul>
<li>
<p>Code Generation Parameters</p>
<p>You can set code generation parameters for chunking either while defining the mapping or later, by editing the mapping. Use the Mapping Configuration Editor to set code generation parameters. These parameters are used to generate the code required to run the logic defined in the mapping.</p>
</li>
<li>
<p>Runtime Parameters</p>
<p>Runtime chunking parameters can be configured at design-time, by using the Mapping Configuration Editor, or while executing the mapping. When you set run-time chunking parameters both at design-time and execution time, the values set at execution time override the ones defined at design-time.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="ref_maps_processflows.htm#CHDHDDJG">"Chunking Options"</a></p>
</li>
<li>
<p><a href="ref_maps_processflows.htm#CHDBAABI">"SCD Updates"</a></p>
</li>
</ul>
</div>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref803"></a>
<h4 class="sect3">Types of Chunking</h4>
<p>Oracle Warehouse Builder enables you to perform the following types of chunking:</p>
<ul>
<li>
<p>Serial chunking</p>
<p>Serial chunking is useful in scenarios where it is not possible to process all source data in one set. The primary use case for serial chunking is loading Type 2 SCDs, where multiple updates to a single target row must be processed separately.</p>
<p>To configure serial chunking parameters for a mapping, use the <a href="ref_maps_processflows.htm#CHDBAABI">"SCD Updates"</a> and <a href="ref_maps_processflows.htm#i1134262">"Runtime Parameters"</a> nodes in the Mapping Configuration Editor.</p>
</li>
<li>
<p>Parallel chunking</p>
<p>Parallel chunking enables you to update table data in parallel with incremental commit in two high-level steps. In the first step, the rows in a table are grouped into smaller sized chunks. In the second step, a user-specified statement is run in parallel on these chunks and a commit is issued after the processing is complete.</p>
<p>Parallel chunking is used for parallel DML operations. To configure parallel chunking parameters for a mapping, use the <a href="ref_maps_processflows.htm#CHDHDDJG">"Chunking Options"</a> and <a href="ref_maps_processflows.htm#i1134262">"Runtime Parameters"</a> nodes in the Mapping Configuration Editor.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref804"></a>
<h4 class="sect3">Methods of Performing Parallel Chunking</h4>
<p>You can perform parallel chunking in one of the following ways:</p>
<ul>
<li>
<p>Chunking by number column</p>
<p>The data in the source table is divided into chunks by defining the size of each chunk.</p>
</li>
<li>
<p>Chunking by ROWID</p>
<p>The data in the source table is divided into chunks based on the <code>ROWID</code> value of each row in the table.</p>
</li>
<li>
<p>Chunking by SQL statement</p>
<p>Uses a SQL statement to return two columns that define the range of each chunk, either by <code>ROWID</code> or column number.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref805"></a>
<h2 class="sect1">About Operators</h2>
<p>Operators are the basic design elements for mapping. Operators are used to represent sources and targets in the data flow, and to define the method to transform the data from source to target.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li><a href="transformdata_intro.htm#BHCIJEDG">Chapter 4, "Overview of Transforming Data,"</a></li>
<li>
<p><a class="olink WBCON4591" href="../../owb.112/e10581/datatransform.htm#WBCON4591"><span class="italic">Oracle Warehouse Builder Concepts</span></a> for more information about operators.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="WBETL05004"></a>
<div class="sect1"><a id="sthref806"></a>
<h2 class="sect1">Overview of the Mapping Editor</h2>
<p>The Mapping Editor is built around the Mapping Editor canvas, on which the operators and connections in a mapping are displayed graphically and can be manipulated. Several other Design Center panels are context-sensitive and display mapping-related items when a mapping is open in the Mapping Editor. These include the following:</p>
<ul>
<li>
<p><span class="bold">Component Palette:</span> Displays operators that you can use in a mapping. Select an object, either from the canvas or Projects Navigator, and Oracle Warehouse Builder displays the object properties in the Property Inspector.</p>
<p>Use the filter at the top of the palette to limit the display of operators to a particular type. For example, select Transformation Operators in the filter to display only operators that transform data.</p>
</li>
<li>
<p><span class="bold">Structure View:</span> Displays a hierarchical view of the operators, attribute groups, and attributes in the mapping.</p>
</li>
<li>
<p><span class="bold">Bird's Eye View:</span> Displays the layout of the entire mapping. Enables you to move the view of the canvas with a single mouse dragging operation. You can thus reposition your view of the canvas without using the scroll bars.</p>
<p>The Bird's Eye View displays a miniature version of the entire canvas. It contains a blue box that represents the portion of the canvas that is currently in focus. For mappings that span more than the canvas size, click the blue box and drag it to the portion of the canvas to focus on.</p>
</li>
<li>
<p><span class="bold">Property Inspector:</span> Displays the properties of the mapping, operators, attribute groups, or attributes currently selected in the Mapping Editor canvas.</p>
</li>
<li>
<p><span class="bold">Mapping Debug Toolbar:</span> Displays icons for each command used in debugging mappings. When you are debugging mappings, the Debug toolbar is displayed at the top of the Mapping Editor canvas.</p>
</li>
<li>
<p><span class="bold">Diagram Toolbar:</span> Displays icons for each command used to navigate the canvas and change the magnification of objects on the canvas.</p>
</li>
</ul>
<div class="sect2"><a id="sthref807"></a>
<h3 class="sect2">Mapping Editor Canvas</h3>
<p>The Mapping Editor canvas is the area that you use to graphically design your mappings. Mappings define how data extracted from the source is transformed before being loaded into the targets.</p>
<p>The Mapping Editor canvas contains two tabs: <a href="#CHDCAGAD">"Logical View"</a> and <a href="#CHDCHAGG">"Execution View"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDCAGAD"></a>
<div class="sect2">
<h3 class="sect2">Logical <a id="sthref808"></a>View</h3>
<p>The Logical view of the Mapping Editor enables you to design the data flows that define your mapping. You first drag and drop operators representing the source objects, the target objects, and the transformations. Next you establish a data flow between these operators that represents the data transformation by drawing data flow connections between operators.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1171414">"Adding Operators to Mappings"</a> for information about adding source, target, and transformation operators</p>
</li>
<li>
<p><a href="#i1126489">"Connecting Operators, Groups, and Attributes"</a> for information about connecting operators in the mapping</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDCHAGG"></a>
<div class="sect2">
<h3 class="sect2">Execution <a id="sthref809"></a><a id="sthref810"></a>View</h3>
<p>Use the Execution View of the Mapping Editor to define execution units for Code Template (CT) mappings. The Execution View is available only when you create CT mappings.</p>
<p>An <span class="italic">execution unit</span> represents the set of related tasks that are to be performed using a code template. A code template contains the logic to perform a particular ETL processing on a particular platform during run time, such as moving data between two Oracle Database instances, or unloading data from a DB2 database into a flat file. An execution unit can be implemented by a single generated script such as a PL/SQL package or by a code template.</p>
<p>Execution units enable you to break up your mapping execution into smaller related units. Each execution unit may be associated with a code template that contains the template to perform the required data integration task on the specified platform. An execution unit can be implemented by a single generated script such as a PL/SQL package or by a code template.</p>
<p>The Execution View tab of the Mapping Editor displays the operators and data flows from the Logical View in an iconized form. You cannot edit operators or create data flows in the Execution View. You can only perform these tasks using the Logical View.</p>
<p>The contents of the Execution Unit view are based on the selected configuration. Thus, you can use different code templates for different configurations. For example, if you have two configurations, Development and QA, you can use one set of code templates for Development and another for QA.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref811"></a>
<h3 class="sect2">Execution View Menu and Toolbars</h3>
<p>When you select the Execution View tab, the Execution menu is displayed in the Design Center and an Execution toolbar is displayed at the top of the Mapping Editor canvas. Use the options in the Execution menu or the Execution toolbar to:</p>
<ul>
<li>
<p>Create and delete execution units</p>
</li>
<li>
<p>Define default execution units</p>
</li>
<li>
<p>Associate code templates with execution units</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref812"></a>
<h3 class="sect2">Mapping Editor Display Options</h3>
<p>You can control how the editor displays the mappings on the canvas by selecting <span class="bold">Graph</span> from the menu bar and then selecting <span class="bold">Options</span>. Oracle Warehouse Builder displays the Options dialog box that enables you to set display options for the Mapping Editor canvas.</p>
<p>The Options dialog box contains the following options. You can either select or deselect any of these options.</p>
<ul>
<li>
<p><span class="bold">Input Connector:</span> Select this option to display an arrow icon on the left of attributes that you can use as input attributes.</p>
</li>
<li>
<p><span class="bold">Key Indicator:</span> Select this option to display a key icon to the left of the attribute that is a foreign key attribute in an operator.</p>
</li>
<li>
<p><span class="bold">Data Type:</span> Select this option to display the data type of attributes in all operators.</p>
</li>
<li>
<p><span class="bold">Output Connector:</span> Select this option to display an arrow icon on the right of attributes that you can use as output attributes.</p>
</li>
<li>
<p><span class="bold">Enable Horizontal Scrolling:</span> Select this option to enable horizontal scrolling for operators.</p>
</li>
<li>
<p><span class="bold">Automatic Layout:</span> Select this option to use an automatic layout for the mapping.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDIFFFG"></a><a id="WBETL05005"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Example: <a id="sthref813"></a><a id="sthref814"></a>Defining a Simple PL/SQL Mapping</h2>
<p>This section describes the creation of a basic PL/SQL mapping that loads data from a source table to a target table. The purpose of this example is to illustrate the use of mappings and help you understand the objective achieved by creating mappings. Because the example is very basic, it does not perform any transformation on the source data. However, in a typical data warehousing environment, transformations are an integral part of mappings.</p>
<p>The <code>SALES</code> table contains the sales data of an organization. This table is located in the <code>SRC</code> schema in an Oracle Database. You must load this sales data into the target table <code>SALES_TGT</code>, located in the <code>TGT</code> schema in your data warehouse. Both source and target tables contain the same number of columns with the same column names.</p>
<p>You define a PL/SQL mapping that defines how data from the source table is loaded into the target table.</p>
<p><span class="bold">To define a mapping that loads data from a source Oracle Database table to a target Oracle Database table:</span></p>
<ol>
<li>
<p>If you have not done so, in the Projects Navigator, create an Oracle module corresponding to the source. This module, called <code>SRC_MOD</code>, is associated with a location <code>SRC_LOC</code> that corresponds to the <code>SRC</code> schema. Also, import the <code>SALES</code> table into the <code>SRC_MOD</code> module.</p>
</li>
<li>
<p>In the Projects Navigator, create the target module whose location corresponds to the data warehouse schema in which your target table is located.</p>
<p>Create the <code>WH_TGT</code> Oracle module, with its associated location <code>TGT_LOC</code> corresponding with the <code>TGT</code> schema.</p>
</li>
<li>
<p>In the Projects Navigator, expand the <code>WH_TGT</code> module.</p>
</li>
<li>
<p>Right-click the Mappings node and select <span class="bold">New Mapping</span>.</p>
<p>The Create Mapping dialog box is displayed.</p>
</li>
<li>
<p>Provide the following information about the mapping and click <span class="bold">OK</span>.</p>
<ul>
<li>
<p><span class="bold">Name:</span> Enter the name of the mapping.</p>
</li>
<li>
<p><span class="bold">Description:</span> Enter an optional description for the mapping.</p>
</li>
</ul>
<p>The Mapping Editor is displayed. Use this interface to define the data flow between source and target objects.</p>
</li>
<li>
<p>Expand the Tables node under the <code>SRC_MOD</code> module.</p>
</li>
<li>
<p>Drag and drop the <code>SALES</code> table from the Projects Navigator to the Mapping Editor canvas.</p>
<p>The operator representing the <code>SALES</code> table is added to the canvas. The operator name appears in the upper-left corner. Below the operator name is the name of the group. The name and number of groups depend on the type of operator. Table operators have one group called INOUTGRP1. Below the group, the attribute names and their data types are listed.</p>
</li>
<li>
<p>From the Projects Navigator, drag and drop the <code>SALES_TGT</code> table, under the <code>WH_TGT</code> module, to the Mapping Editor canvas.</p>
<p>The operator representing the <code>SALES_TGT</code> table is added to the canvas. You can view each attribute name and data type.</p>
</li>
<li>
<p>Connect the attributes of the source table <code>SALES</code> to the corresponding attributes in the target table <code>SALES_TGT</code>.</p>
<p>To connect all attributes in the operator, click and hold down your left mouse button on the group INOUTGRP1 of the <code>SALES</code> operator, drag, and release the mouse button on the group INOUTGRP1 of the <code>SALES_TGT</code> operator.</p>
<p>The Connect dialog box is displayed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1126489">"Connecting Operators, Groups, and Attributes"</a> for details about connecting attributes.</div>
</li>
<li>
<p>In the Connection Options section, select <span class="bold">Match by name of source and target operators</span> and click <span class="bold">Preview</span>.</p>
<p>The Connections section displays the association between the source and target attributes. The Source Attribute column lists the source table attributes and the Target Attribute column lists the attributes in the target table to which the source attributes are loaded.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to close the Connect dialog box.</p>
<p>The completed mapping looks as shown in <a href="#CHDDAFAC">Figure 5-1</a>.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDDAFAC"></a>Figure 5-1 Mapping that Loads Data from Source Table to Target Table</p>
<img width="434" height="184" src="img/simple_map.gif" alt="Description of Figure 5-1 follows" /><br />
<a id="sthref815" href="img_text/simple_map.htm">Description of "Figure 5-1 Mapping that Loads Data from Source Table to Target Table"</a><br />
<br /></div>
<!-- class="figure" --></li>
<li>
<p>Validate the mapping by selecting the mapping in the Projects Navigator and clicking <span class="bold">Validate</span>. Or, right-click the mapping in the Projects Navigator and select <span class="bold">Validate</span>.</p>
<p>Validation runs tests to verify the metadata definitions and configuration parameters in the mapping. Resolve validation errors, if any.</p>
</li>
<li>
<p>Generate the mapping by selecting the mapping in the Projects Navigator and clicking <span class="bold">Generate</span>. Or, right-click the mapping in the Projects Navigator and select <span class="bold">Generate</span>.</p>
<p>Generation creates the scripts that must be used to create the mapping in the target schema. Resolve generation errors, if any, and regenerate the mapping. Oracle Warehouse Builder creates the scripts for this mapping.</p>
</li>
</ol>
<p>You have now defined a mapping that extracts data from a source table called <code>SALES</code> and loads it into a target table called <code>SALES_TGT</code>. The metadata for this mapping is stored in the repository. And, after successful generation, the scripts to create this mapping in the target schema are ready.</p>
<p>To perform ETL and transfer the data from the source table to the target table, you must first deploy the mapping to the target schema, and then run the mapping as defined in <a href="deploy.htm#BEIDEDIG">"Starting ETL Jobs"</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHDDCJIE"></a><a id="WBETL05006"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Steps to <a id="sthref816"></a><a id="sthref817"></a><a id="sthref818"></a>Perform Extraction, Transformation, and Loading (ETL) Using Mappings</h2>
<p class="subhead2"><a id="sthref819"></a>Before You Begin</p>
<p>First verify that your project contains a target module or a Template Mappings module with a defined location. You must create your mapping in this module.</p>
<p>Also import any existing data you intend to use as sources or targets in the mapping.</p>
<p><span class="bold">To define mappings that perform ETL:</span></p>
<ol>
<li>
<p>In the Projects Navigator, define the mapping that contains the logic for performing ETL.</p>
<p>See <a href="#i1170011">"Defining Mappings"</a> for more information about defining mappings and <a href="sap_km_mappings.htm#BABIFJIA">"Creating Code Template (CT) Mappings"</a> for information about creating CT mappings.</p>
</li>
<li>
<p>In the Mapping Editor, add the required operators to the mapping. Operators enable you to perform ETL.</p>
<p>See <a href="#i1171414">"Adding Operators to Mappings"</a> for more information about adding operators.</p>
</li>
<li>
<p>Connect the operators in the mapping to define how data from the source objects should be transformed before loading it into the target objects.</p>
<p>See <a href="#i1126489">"Connecting Operators, Groups, and Attributes"</a> for information about establishing connections between operators.</p>
</li>
<li>
<p>(Optional) Edit the operators in the mapping to set operator, group, or attribute properties. You must edit operators to specify how a certain transformation is to be performed. For example, if you use the Filter operator to restrict the rows loaded into the target, edit the Filter operator and specify the condition that is necessary to filter rows.</p>
<p>See <a href="#i1159210">"Editing Operators"</a> for more information about editing operators in mappings.</p>
</li>
<li>
<p>Configure the mapping.</p>
<p>For PL/SQL mappings, see <a href="#BEIGHHAE">"Configuring Mappings"</a>. For CT mappings, see <a href="sap_km_mappings.htm#BABJHFHI">"Setting Options for Code Templates in Code Template Mappings"</a>.</p>
</li>
<li>
<p>Validate the mapping by right-clicking the mapping in the Projects Navigator and selecting <span class="bold">Validate</span>.</p>
<p>Validation verifies the metadata definitions and configuration parameters of the mapping to check if they conform to the rules defined by Oracle Warehouse Builder for mappings.</p>
</li>
<li>
<p>Generate the mapping by right-clicking the mapping in the Projects Navigator and selecting <span class="bold">Generate</span>.</p>
<p>Generation uses the metadata definitions and configuration settings to create the code that is used to create the mapping in the target schema.</p>
<p>When you generate a mapping, the generated code contains comments that help you identify the operator for which the code is generated. It enables you to debug errors that you may encounter when you deploy the mapping.</p>
</li>
<li>
<p>Deploy the mapping to the target schema to create the PL/SQL code generated for the mapping to the target schema.</p>
<p>For more information about deployment, see <a href="deploy.htm#i1088602">"Deploying Objects"</a>.</p>
</li>
<li>
<p>Run the mapping to extract data from the source table and load it into the target table.</p>
<p>For more information about executing ETL objects, see <a href="deploy.htm#BEIDEDIG">"Starting ETL Jobs"</a>.</p>
</li>
</ol>
<p class="subhead2"><a id="sthref820"></a>Subsequent Steps</p>
<p>After you design a mapping and generate its code, you can create a process flow or proceed directly with deployment followed by execution.</p>
<p>Use process flows to interrelate mappings. For example, you can design a process flow such that the completion of one mapping triggers an email notification and starts another mapping. For more information, see <a href="design_processflows.htm#CHDHGEAA">Chapter 8, "Designing Process Flows"</a>.</p>
<p>After you design mappings, generate code for them, and deploy them to their targets, you can:</p>
<ul>
<li>
<p>Run the mappings immediately as described in <a href="deploy.htm#BEIDEDIG">"Starting ETL Jobs"</a>.</p>
</li>
<li>
<p>Schedule the mappings for later execution as described in <a href="scheduling_etl.htm#CHDGEGJF">"Scheduling ETL Jobs"</a>.</p>
</li>
<li>
<p>Create process flows, to orchestrate the execution of one or more mappings, along with other activities as described in <a href="design_processflows.htm#CHDHGEAA">"Designing Process Flows"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1170011"></a><a id="WBETL05007"></a>
<div class="sect1">
<h2 class="sect1">Defining Mappings</h2>
<p>A mapping is an Oracle Warehouse Builder object that contains the metadata regarding the transformation performed by the mapping. The metadata includes details of the sources from which data is extracted, the targets into which the transformed data is loaded, and the settings used to perform these operations.</p>
<p class="subhead2"><a id="BEIIJICH"></a>Steps to Define a Mapping</p>
<ol>
<li>
<p>In the Projects Navigator, expand the project, the Databases node, the Oracle node, and then the Oracle module in which you want to define the mapping.</p>
</li>
<li>
<p>Right-click the Mappings node and select <span class="bold">New Mapping.</span></p>
<p>Oracle Warehouse Builder opens the Create Mapping dialog box.</p>
</li>
<li>
<p>Enter a name and an optional description for the new mapping.</p>
<p>For rules on naming and describing mappings, see <a href="#i1161987">"Rules for Naming Mappings"</a>.</p>
</li>
<li>
<p>Click <span class="bold">OK.</span></p>
<p>Oracle Warehouse Builder stores the definition for the mapping and inserts its name in the Projects Navigator. Oracle Warehouse Builder opens a Mapping Editor for the mapping and displays the name of the mapping in the title bar.</p>
</li>
</ol>
<p class="subhead2"><a id="BEICGHEA"></a>Steps to Open a Previously Created Mapping</p>
<ol>
<li>
<p>In the Projects Navigator, expand the project, the Databases node, the Oracle node, and then the Oracle module in which the mapping is defined.</p>
</li>
<li>
<p>Expand the Mappings node.</p>
</li>
<li>
<p>Open the Mapping Editor in one of the following ways:</p>
<ul>
<li>
<p>Double-click a mapping.</p>
</li>
<li>
<p>Select a mapping and then from the <span class="bold">File</span> menu, select <span class="bold">Open.</span></p>
</li>
<li>
<p>Select a mapping and press <span class="bold">Ctrl + O</span>.</p>
</li>
<li>
<p><a id="i1142815"></a>Right-click a mapping, and select <span class="bold">Open.</span></p>
</li>
</ul>
<p>Oracle Warehouse Builder displays the Mapping Editor.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you open a mapping that was created using OMB*Plus, although the mapping has multiple operators, it may appear to contain only one operator. To view all the operators, click <span class="bold">Auto Layout</span> on the toolbar.</div>
<a id="i1161987"></a>
<div class="sect2">
<h3 class="sect2">Rules for Naming Mappings</h3>
<p><a id="sthref821"></a>The rules for naming mappings depend on the naming mode that you select in the Naming Preferences section of the Preferences dialog box. Oracle Warehouse Builder maintains a business and a physical name for each object in the workspace. The business name is a unique descriptive name that makes sense to a business-level user of the data. The physical name is the name Oracle Warehouse Builder uses when generating code.</p>
<p>When you name objects while working in one naming mode, Oracle Warehouse Builder creates a default name for the other mode. Therefore, when working in the business name mode, if you assign a name to a mapping that includes mixed cases, special characters and spaces, Oracle Warehouse Builder creates a default physical name for you. For example, if you save a mapping with the business name <span class="italic">My Mapping (refer to doc#12345),</span> the default physical name is <span class="italic">MY_MAPPING_REFER_TO_DOC#12345</span>.</p>
<p>When you name or rename objects in the Mapping Editor, use the following naming rules.</p>
<p class="subhead2"><a id="sthref822"></a>Naming and Describing Mappings</p>
<p>In the physical naming mode, a mapping name can be from 1 to 30 alphanumeric characters, and blank spaces are not enabled. In the business naming mode, the limit is 200 characters and blank spaces and special characters are enabled. In both naming modes, the name should be unique across the project.</p>
<p><span class="bold">Note for scheduling mappings:</span> If you intend to schedule the execution of the mapping, there is an additional consideration. For any ETL object to schedule, the limit is 25 characters for physical names and 1995 characters for business names. Follow this additional restriction to enable Oracle Warehouse Builder to append, to the mapping name, the suffix <span class="italic">_job</span> and other internal characters required for deployment and execution.</p>
<p>After you create the mapping definition, you can view its physical and business name in the Property Inspector.</p>
<p>Edit the description of the mapping as necessary. The description can be up to 4,000 alphanumeric characters and can contain blank spaces.</p>
<p class="subhead2"><a id="sthref823"></a>Rules for Naming Attributes and Groups</p>
<p>You can rename groups and attributes independent of their sources. Attribute and group names are logical. Although attribute names of the object are often the same as the attribute names of the operator to which they are bound, their properties remain independent of each other.</p>
<p class="subhead2"><a id="sthref824"></a>Rules for Naming Operators</p>
<p>Business names for the operators must meet the following requirements:</p>
<ul>
<li>
<p>The length of the operator name can be any string of 200 characters.</p>
</li>
<li>
<p>The operator name must be unique within its parent group. The parent group could be either a mapping or its parent pluggable mapping container.</p>
</li>
</ul>
<p>Physical names for operators must meet the following requirements:</p>
<ul>
<li>
<p>The length of the operator name must be between 1 and 30 characters.</p>
</li>
<li>
<p>The operator name must be unique within its parent group. The parent group could be either a mapping or its parent pluggable mapping container.</p>
</li>
<li>
<p>The operator name must conform to the syntax rules for basic elements as defined in the <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</li>
</ul>
<p>In addition to physical and business names, some operators also have bound names. Every operator associated with a workspace object has a bound name. During code generation, Oracle Warehouse Builder uses the bound name to reference the operator to its workspace object. Bound names have the following characteristics:</p>
<ul>
<li>
<p>Bound names need not be unique.</p>
</li>
<li>
<p>Bound names must conform to the general Oracle Warehouse Builder physical naming rules, except if the object was imported and contains restricted characters such as spaces.</p>
</li>
<li>
<p>Typically, you do not change bound names directly. Instead, you change these by synchronizing with a workspace object outside the mapping.</p>
</li>
<li>
<p>In physical naming mode, when you modify the physical name of an operator attribute, Oracle Warehouse Builder propagates the new physical name as the bound name when you synchronize.</p>
</li>
</ul>
<p>Binding is the process of associating an operator with an object in the workspace.For more information about binding and methods of binding, see <a href="dim_objects.htm#BABFIACA">"Binding"</a> in <a href="dim_objects.htm#BABEJGDC">Chapter 3, "Defining Dimensional Objects."</a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1171414"></a><a id="WBETL05008"></a>
<div class="sect1">
<h2 class="sect1">Adding Operators to Mappings</h2>
<p><a id="sthref825"></a><a id="sthref826"></a><a id="sthref827"></a>Operators enable you to perform data transformations. Some operators are bound to workspace objects while others are not. Many operators that represent built-in transformations (such as Joiner, Filter, and Aggregator) do not directly refer to underlying workspace objects, and therefore are not bound. Other operators, such as Table, View, Dimension, and Cube, do refer to objects in the workspace, and therefore can be bound.</p>
<p>As a general rule, when you add a data source or target operator such as a Table operator to a mapping, that operator refers to a table defined in the workspace, although it is a different object as the table itself. Source and target operators in mappings are said to be <span class="italic">bound</span> to underlying objects in the workspace. It is possible for multiple operators in a single mapping to be bound to the same underlying object. For example, to use a table <code>EMP</code> as a source for two different operations in a mapping, you can add two table operators named EMP_1 and EMP_2 to the mapping and bind them to the same underlying <code>EMP</code> table in the workspace.</p>
<p>To distinguish between the two versions of operators, this chapter refers to objects in the workspace either generically as <span class="italic">workspace objects</span> or specifically as <span class="italic">workspace tables,</span> <span class="italic">workspace views,</span> and so on. This chapter refers to operators in the mapping as <span class="italic">Table</span> <span class="italic">operators, View operators,</span> and so on. Therefore, when you add a dimension to a mapping, refer to the dimension in the mapping as the <span class="italic">Dimension operator</span> and refer to the dimension in the workspace as the <span class="italic">workspace dimension.</span></p>
<p><a id="i1170648"></a>Oracle Warehouse Builder maintains separate workspace objects for some operators. It enables you to work on these objects independently. You can modify the workspace object without affecting the logic of the mapping. After modification, you can decide how to synchronize the discrepancy between the workspace object and its corresponding operator. This provides maximum flexibility during your warehouse design.</p>
<p>For example, when you reimport a new metadata definition for the workspace table, you may want to propagate those changes to the Table operator in the mapping. Conversely, as you make changes to a Table operator in a mapping, you may want to propagate those changes back to its associated workspace table. You can accomplish these tasks by a process known as <span class="italic">synchronizing</span>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1139074">"Synchronizing Operators and Workspace Objects"</a> for more information about synchronizing mapping operators and workspace objects</div>
<p class="subhead2"><a id="sthref828"></a>Operators that Bind to Workspace Objects</p>
<p>The operators that you can bind to associated objects in the workspace are as follows:</p>
<br />
Construct Object<br />
Cube<br />
Dimension<br />
Expand Object<br />
External Table<br />
Flat File<br />
Lookup<br />
Materialized View<br />
Pluggable Mapping<br />
Pre-Mapping Process<br />
Post-Mapping Process<br />
Queue<br />
Sequence<br />
Table Function<br />
Table<br />
Transformation<br />
Varray Iterator<br />
View<br />
<br />
<p><span class="bold">To add an operator to a mapping:</span></p>
<ol>
<li>
<p>Open the Mapping Editor.</p>
</li>
<li>
<p>From the Component Palette, drag an operator icon and drop it onto the canvas. Alternatively, from the Graph menu, select <span class="bold">Add</span>, the type of operator you want to add, and then the operator.</p>
<p>If the Component Palette is not displayed, select <span class="bold">Component Palette</span> from the View menu.</p>
<p>If you select an operator that you can bind to a workspace object, the Mapping Editor displays the <span class="bold">Add</span> <span class="bolditalic">operator_name</span> <span class="bold">Operator</span> dialog box. For details on how to use this dialog box, see <a href="#CHDEJAAD">"Using the Add Operator Dialog Box to Add Operators"</a>.</p>
<p>If you select an operator that you cannot bind to a workspace object, Oracle Warehouse Builder may display a wizard or dialog box to help you create the operator.</p>
</li>
<li>
<p>Follow any prompts that are displayed by Oracle Warehouse Builder and click <span class="bold">OK.</span></p>
<p>The Mapping Editor displays the operator maximized on the canvas. The operator name appears in the upper-left corner. You can view each attribute name and data type.</p>
<p>To minimize the operator, click the arrow in the upper-right corner and the Mapping Editor displays the operator as an icon on the canvas. To maximize the operator, double-click the operator on the canvas.</p>
</li>
</ol>
<a id="CHDEJAAD"></a>
<div class="sect2">
<h3 class="sect2">Using the <a id="sthref829"></a>Add Operator Dialog Box to Add Operators</h3>
<p>The Add Operator dialog box enables you to add operators to a mapping. When you add an operator that you can bind to a workspace object, the Mapping Editor displays the <span class="bold">Add</span> <span class="bolditalic">operator_name</span> <span class="bold">Operator</span> dialog box.</p>
<p>Select one of the following options on this dialog box:</p>
<ul>
<li>
<p><a href="#i1170985">"Create Unbound Operator with No Attributes"</a></p>
</li>
<li>
<p><a href="#i1171012">"Select from Existing Repository Object and Bind"</a></p>
</li>
</ul>
<a id="i1170985"></a>
<div class="sect3">
<h4 class="sect3">Create Unbound Operator with No Attributes</h4>
<p>Select <span class="bold">Create unbound operator with no attributes</span> to define a new workspace object that is not bound to a workspace object, such as a new staging area table or a new target table.</p>
<p>In the New Operator Name field, enter a name for the new operator. Oracle Warehouse Builder displays the operator on the canvas without any attributes.</p>
<p>You can now add and define attributes for the operator as described in <a href="#i1159210">"Editing Operators"</a>. Next, to create the new workspace object in a target module, right-click the operator and select <span class="bold">Create and Bind</span>.</p>
<p>For an example of how to use this option in a mapping design, see <a href="#i1158750">"Example: Using the Mapping Editor to Create Staging Area Tables"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="i1171012"></a>
<div class="sect3">
<h4 class="sect3">Select from Existing Repository Object and Bind</h4>
<p>Click <span class="bold">Select from existing repository object and bind</span> to add an operator based on an existing workspace object. The object may have been previously defined or imported into the workspace.</p>
<p>Either type the prefix to search for the object or select from the displayed list of objects within the selected module.</p>
<p>To select multiple items, press the Ctrl key as you click each item. To select a group of items located in a series, click the first object in your selection range, press the Shift key, and then click the last object.</p>
<p>You can add operators based on workspace objects within the same module as the mapping or from other modules. If you select a workspace object from another module, then the Mapping Editor creates a connector, if one does not exist. The connector establishes a path for moving data between the mapping location and the location of the workspace object.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CACBGHBH"></a><a id="WBETL15004"></a>
<div class="sect2">
<h3 class="sect2">Using Pseudocolumns ROWID and ROWNUM in Mappings</h3>
<p>You can use the pseudocolumns <code>ROWID</code> and <code>ROWNUM</code> in mappings. The <code>ROWNUM</code> pseudocolumn returns a number indicating the order in which a row was selected from a table. The <code>ROWID</code> pseudocolumn returns the rowid (binary address) of a row in a database table.</p>
<p>You can use the <code>ROWID</code> and <code>ROWNUM</code> pseudocolumns in Table, View, and Materialized View operators in a mapping. These operators contain an additional column called COLUMN USAGE that is used to identify attributes used as <code>ROWID</code> or <code>ROWNUM</code>. For normal attributes, this column defaults to TABLE USAGE. To use an attribute for <code>ROWID</code> or <code>ROWNUM</code> values, set the COLUMN USAGE to ROWID or ROWNUM respectively.</p>
<p>You can map a ROWID column to any attribute of data type <code>ROWID</code>, <code>UROWID</code>, or <code>VARCHAR2</code>. You can map ROWNUM column to an attribute of data type <code>NUMBER</code> or to any other data type that enables implicit conversion from <code>NUMBER</code>.</p>
<p><code>ROWID</code> and <code>ROWNUM</code> pseudocolumns are not displayed in the object editors since they are not real columns.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1126489"></a><a id="WBETL05009"></a>
<div class="sect1">
<h2 class="sect1">Connecting Operators, Groups, and Attributes</h2>
<p><a id="sthref830"></a><a id="sthref831"></a><a id="sthref832"></a><a id="sthref833"></a>After you select mapping source operators, operators that transform data, and target operators, you are ready to connect them. Data flow connections graphically represent how the data flows from a source, through operators, and to a target. The Mapping Connection dialog box assists you in creating data flows between operators.</p>
<p>You can connect operators by any of the following methods:</p>
<ul>
<li>
<p><a href="#BEIEIGCG">"Connecting Operators"</a>: Define criteria for connecting groups between two operators.</p>
</li>
<li>
<p><a href="#i1138050">"Connecting Groups"</a>: Define criteria for connecting all the attributes between two groups.</p>
</li>
<li>
<p><a href="#i1147144">"Connecting Attributes"</a>: Connect individual operator attributes to each other, one at a time.</p>
</li>
<li>
<p><span class="bold">Using an Operator Wizard:</span> For operators such as the Pivot operator and Name and Address operator, you can use the wizard to define data flow connections.</p>
</li>
<li>
<p><span class="bold"><a href="#i1169090">"Using the Mapping Connection Dialog Box"</a>:</span> Define criteria for connecting operators, groups, or attributes.</p>
<p>To display the Mapping Connection dialog box, right-click an operator, group, or attribute, select <span class="bold">Connect To</span> and then the name of the operator to which you want to establish a connection. The Mapping Connections dialog box is displayed.</p>
<p>For more information about using this dialog box, see <a href="#i1169090">"Using the Mapping Connection Dialog Box"</a>.</p>
</li>
</ul>
<p>After you connect operators, data flow connections are displayed between the connected attributes.</p>
<p><a href="#i1182733">Figure 5-2</a> displays a mapping with attributes connected.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1182733"></a>Figure 5-2 Connected Operators in a Mapping</p>
<img width="481" height="177" src="img/mappings_conn_operators.gif" alt="This illustration is described in the surrounding text." /><br />
<a id="sthref834" href="img_text/mappings_conn_operators.htm">Description of "Figure 5-2 Connected Operators in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<a id="BEIEIGCG"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Connecting Operators</h3>
<p>You can connect one operator to another if there are no existing connections between the operators. Both of the operators to connect must be displayed in their icon form.</p>
<p>You can also connect from a group to an operator. Hold down the left-mouse button on the group, drag and then drop on the title of the operator.</p>
<p><span class="bold">To connect one operator to another:</span></p>
<ol>
<li>
<p>Select the operator from which you want to establish a connection.</p>
</li>
<li>
<p>Click and hold down the left mouse button while the pointer is positioned over the operator icon.</p>
</li>
<li>
<p>Drag the mouse away from the operator and toward the operator icon to which you want to establish a connection.</p>
<p>As you drag, a line appears indicating the connection.</p>
</li>
<li>
<p>Release the mouse button over the target operator.</p>
<p>The Mapping Connection dialog box is displayed. Use this dialog box to specify connections between groups and attributes within these groups as described in <a href="#i1169090">"Using the Mapping Connection Dialog Box"</a>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1138050"></a>
<div class="sect2">
<h3 class="sect2">Connecting Groups</h3>
<p><a id="sthref835"></a><a id="sthref836"></a>When you connect groups, the Mapping Editor assists you by either automatically copying the attributes or prompts you for more information as described in <a href="#i1169090">"Using the Mapping Connection Dialog Box"</a>.</p>
<p><span class="bold">To connect one group to another:</span></p>
<ol>
<li>
<p>Select the group from which you want to establish a connection.</p>
</li>
<li>
<p>Click and hold down the left mouse button while the pointer is positioned over the group.</p>
</li>
<li>
<p>Drag the mouse away from the group and toward the group to which you want to establish a connection.</p>
<p>As you drag, a line appears indicating the connection.</p>
</li>
<li>
<p>Release the mouse button over the target group.</p>
<p>If you connect from an operator group to a target group containing attributes, the Mapping Connection Dialog Box is displayed. Use this dialog box to specify connections between attributes as described in <a href="#i1169090">"Using the Mapping Connection Dialog Box"</a>.</p>
<p>If you connect from one operator group to a target group with no existing attributes, the Mapping Editor automatically copies the attributes and connects the attributes. This is useful for designing mappings such as the one shown in <a href="#i1158750">"Example: Using the Mapping Editor to Create Staging Area Tables"</a>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1147144"></a>
<div class="sect2">
<h3 class="sect2">Connecting Attributes</h3>
<p><a id="sthref837"></a><a id="sthref838"></a><a id="sthref839"></a>You can draw a line from a single output attribute of one operator to a single input attribute of another operator.</p>
<p><span class="bold">To connect attributes:</span></p>
<ol>
<li>
<p>Click and hold down the left mouse button while the pointer is positioned over an output attribute.</p>
</li>
<li>
<p>Drag the mouse away from the output attribute and toward the input attribute to which you want data to flow.</p>
<p>As you drag the mouse, a line appears on the Mapping Editor canvas to indicate a connection.</p>
</li>
<li>
<p>Release the mouse over the input attribute.</p>
</li>
<li>
<p>Repeat Steps 1 through 3 until you create all the required data flow connections.</p>
</li>
</ol>
<p>You can also select multiple attribute in Step 1. To select multiple attribute, hold down the Ctrl key and select attributes by clicking them. If you select multiple source attributes, then you can only release the mouse over a group and not over an output attribute. The Mapping Connection dialog box is displayed. Use this dialog box to define the data flow between the source attributes and target attributes.</p>
<p>As you connect attributes, remember the following rules:</p>
<ul>
<li>
<p>You cannot connect to the same input or inout attribute twice.</p>
</li>
<li>
<p>You cannot connect attributes within the same operator.</p>
</li>
<li>
<p>You cannot connect out of an input-only attribute nor can you connect into an output-only attribute.</p>
</li>
<li>
<p>You cannot connect operators in such a way about contradicting an established cardinality. Instead, use a Joiner operator.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1169090"></a><a id="WBETL05019"></a>
<div class="sect2">
<h3 class="sect2">Using the Mapping <a id="sthref840"></a><a id="sthref841"></a>Connection Dialog Box</h3>
<p>The Mapping Connection dialog box enables you to define connections between operators in the mapping. Typically, mappings contain numerous operators that implement the complex transformation logic required for your data loading process. The operators to connect may be situated far away from each other on the mapping and thus require scrolling. Oracle Warehouse Builder provides an efficient method to connect operators, groups, and attributes by using the Mapping Connection dialog box.</p>
<p><a href="#BEIGAGGJ">Figure 5-3</a> displays the Mapping Connection Dialog box.</p>
<div class="figure">
<p class="titleinfigure"><a id="BEIGAGGJ"></a>Figure 5-3 Mapping Connection Dialog Box</p>
<img width="750" height="500" src="img/map_conn_dlg.gif" alt="Description of Figure 5-3 follows" /><br />
<a id="sthref842" href="img_text/map_conn_dlg.htm">Description of "Figure 5-3 Mapping Connection Dialog Box"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Complete the following sections to define connections between operators:</p>
<ul>
<li>
<p>(Optional) <a href="#BEIDJJGJ">"Attribute Group to Connect"</a></p>
</li>
<li>
<p><a href="#BEICBFGG">"Connection Options"</a></p>
</li>
<li>
<p><a href="#BEIGDJFE">"Messages"</a></p>
</li>
<li>
<p><a href="#BEIDBHED">"Connections"</a></p>
</li>
</ul>
<a id="BEIDJJGJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Attribute Group to Connect</h4>
<p>Use this section to select the source and target groups between which you want to establish connections. This section is displayed only if you try to connect a source operator to a target group, a source group to a target operator, or a source operator to a target operator.</p>
<p><a id="BEIHIIAC"></a><span class="subhead3">Source Group&nbsp;</span>The Source Group corresponds to the group on the source operator from which data flows. The Source Group list contains all the output groups and I/O groups in the source operator. Select the group from which you want to create a data flow.</p>
<p><a id="BEIIJDED"></a><span class="subhead3">Target Group&nbsp;</span>The Target Group corresponds to the group on the operator to which data flows. The Target Group list contains the input groups and I/O groups in the target operator. Select the group to which you want to create a data flow.</p>
<p>Once you select the Source Group and Target Group, you can specify connections between attributes in the source and target groups. Thus, you can establish data flows between all groups of the source and target operators at the same time.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you have created any connections for the selected source or target group, when you select a different group, Oracle Warehouse Builder displays a warning asking to save the current changes.</div>
</div>
<!-- class="sect3" -->
<a id="BEICBFGG"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Connection <a id="sthref843"></a><a id="sthref844"></a>Options</h4>
<p>The Connection Options section enables you to use different criteria to automatically connect all the source attributes to the target attributes.</p>
<p>Select one of the following options for connecting attributes:</p>
<ul>
<li>
<p><a href="#BEIFHAID">"Copy Source Attributes to Target Group and Match"</a></p>
</li>
<li>
<p><a href="#BEIIDHHI">"Match By Position of Source and Target Attributes"</a></p>
</li>
<li>
<p><a href="#BEIHDCEE">"Match By Name of Source and Target Attributes"</a></p>
</li>
</ul>
<p>After you select the option that you use to connect attributes in the groups, click <span class="bold">Preview</span> to view the mapping between the source and target attributes in the Connections section. Review the mappings and click <span class="bold">OK</span> after you are satisfied that the mappings are what you wanted.</p>
<p><a id="BEIFHAID"></a><span class="subhead3">Copy Source Attributes to Target Group and Match&nbsp;</span></p>
<p>Use this option to copy source attributes to a target group that contains attributes. The Mapping Editor connects from the source attributes to the new target attributes based on the selections that you make in the Connect Operators dialog box. Oracle Warehouse Builder does not perform this operation on target groups that do not accept new input attributes, such as dimension and cube target operators.</p>
<p><a id="BEIIDHHI"></a><span class="subhead3">Match By Position of Source and Target Attributes&nbsp;</span></p>
<p>Use this option to connect existing attributes based on the position of the attributes in their respective groups. The Mapping Editor connects all attributes in order until all attributes of the target are matched. If the source operator contains more attributes than the target, then the remaining source attributes are left unconnected.</p>
<p><a id="BEIHDCEE"></a><span class="subhead3">Match By Name of Source and Target Attributes&nbsp;</span></p>
<p>Use this option to connect attributes with matching names. By selecting from the list of options, you connect between names that do not match. You can combine the following options:</p>
<ul>
<li>
<p><span class="bold">Ignore case differences:</span> Considers the same character in lower-case and upper-case a match. For example, the attributes FIRST_NAME and First_Name match.</p>
</li>
<li>
<p><span class="bold">Ignore special characters:</span> Specify characters to ignore during the matching process. For example, if you specify a hyphen and underscore, the attributes FIRST_NAME, FIRST-NAME, and FIRSTNAME all match.</p>
</li>
<li>
<p><span class="bold">Ignore source prefix, Ignore source suffix, Ignore target prefix, Ignore target suffix:</span> Specify prefixes and suffixes to ignore during matching. For example, if you select Ignore source prefix and enter USER_ into the text field, then the source attribute USER_FIRST_NAME matches the target attribute FIRST_NAME.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BEIGDJFE"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Messages</h4>
<p>This section displays any informational messages that result from previewing the connection options. Information such as certain source or target attributes not connected due to unresolved conflicts is displayed in this section.</p>
</div>
<!-- class="sect3" -->
<a id="BEIDBHED"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Connections</h4>
<p>The Connections section displays the connections between the source attributes belonging to the Source Group and the target attributes belonging to the Target Group. Any existing connections between attributes of the Source Group and Target Group are displayed in this section.</p>
<p>This section contains two tabs: Source Connections and Target Connections. Both tabs display a spreadsheet containing the Source Attribute and Target Attribute columns. The Source Attribute column lists all attributes, or the attributes selected on the canvas, for the group selected as the Source Group. The Target Attribute column lists all the attributes of the group selected as the Target Group. Any changes that you make on the Source Connections tab or the Target Connections tab are immediately reflected in the other tab.</p>
<p><a id="sthref845"></a><span class="subhead3">Source Connections Tab&nbsp;</span></p>
<p>The Source Connections tab enables you to quickly establish connections from the <a href="#BEIHIIAC">"Source Group"</a>. The Target Attribute column on this tab lists the attributes from the <a href="#BEIIJDED">"Target Group"</a>. Use this tab to specify the source attribute from which each target attribute is connected. For each target attribute, map zero or one source attribute. To connect a particular source attribute to the listed target attribute, for each target attribute, enter the name of the source attribute in the corresponding Source Attribute column.</p>
<p>As you begin typing an attribute name, Oracle Warehouse Builder displays a list containing the source attributes whose names begin with the letters you type. If you see the source attribute to connect in this list, then select the attribute by clicking it. You can use wild cards such as * and ? to search for the source attributes from which you want to create a data flow. You can also sort the columns listed under Target Attribute column. When the attribute name contains the space or comma characters, use double quotes to quote the name of the source attribute.</p>
<p><a id="sthref846"></a><span class="subhead3">Target Connections Tab&nbsp;</span></p>
<p>The Target Connections tab enables you to quickly establish connections to the <a href="#BEIIJDED">"Target Group"</a>. The Source Attribute column displays the list of attributes from the <a href="#BEIHIIAC">"Source Group"</a>. Use this tab to specify the source attributes from which each target attribute is connected. For each source attribute, enter the name of one or more target attributes in the corresponding Target Attribute column. To connect a source attribute to multiple target attributes, type the names of the source attributes separated by a comma in the Target Attribute column.</p>
<p>As you begin typing an attribute name, Oracle Warehouse Builder displays a list containing the target attributes whose names begin with the letters you type. If the target attribute to connect to is displayed in this list, then select the attribute by clicking it. You can also use wild cards such as * and ? to search for target attributes to which you want to create a data flow. You can sort the columns listed under Source Attribute column.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1159210"></a><a id="WBETL05010"></a>
<div class="sect1">
<h2 class="sect1">Editing Operators</h2>
<p><a id="sthref847"></a><a id="sthref848"></a><a id="sthref849"></a>Each operator has an editor associated with it. Use the operator editor to specify general and structural information for operators, groups, and attributes. In the operator editor you can add, remove, or rename groups and attributes. You can also rename an operator.</p>
<p>For attributes that can have an expression associated with them, such as attributes in the output group of a Constant, Expression, or Aggregator operator, you can also edit the expression specified.</p>
<p>Editing operators is different from assigning loading properties and conditional behaviors. To specify loading properties and conditional behaviors, use the properties windows as described in <a href="#BEIGHHAE">"Configuring Mappings"</a>.</p>
<p><span class="bold">To edit an operator, group, or attribute:</span></p>
<ol>
<li>
<p>Select an operator from the Mapping Editor canvas.</p>
<p>Or select any group or attribute within an operator.</p>
</li>
<li>
<p>Right-click and select <span class="bold">Open Details.</span></p>
<p>The Mapping Editor displays the operator editor with the <a href="#CHDDFEBF">"Name Tab"</a>, <a href="#CHDBECIB">"Groups Tab"</a>, and <a href="#CHDDIFBD">"Input and Output Tabs"</a> for each type of group in the operator.</p>
<p>Some operators include additional tabs. For example, the Match Merge operator includes tabs for defining Match rules and Merge rules.</p>
</li>
<li>
<p>Follow the prompts on each tab and click <span class="bold">OK</span> when you are finished.</p>
</li>
</ol>
<a id="CHDDFEBF"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Name Tab</h3>
<p>The Name tab displays the operator name and an optional description. You can rename the operator and add a description. Name the operator according to the conventions listed in <a href="#i1161987">"Rules for Naming Mappings"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDBECIB"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Groups Tab</h3>
<p>Edit group information on the Groups tab.</p>
<p>Each group has a name, direction, and optional description. You can rename groups for most operators but cannot change group direction for any of the operators. A group can have one of these directions: Input, Output, I/O.</p>
<p>Depending on the operator, you can add and remove groups from the Groups tab. For example, you add input groups to Joiners and output groups to Splitters.</p>
</div>
<!-- class="sect2" -->
<a id="CHDDIFBD"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Input and Output Tabs</h3>
<p>The operator editor displays a tab for each type of group displayed on the Groups tab. Each of these tabs displays the attribute name, data type, length, precision, scale, seconds precision, and optional description. Certain operators such as the Table or View operators have only the I/O tab, instead of separate Input and Output tabs. Edit attribute information on these tabs.</p>
<p><a href="#i1159269">Figure 5-4</a> shows an Output Attributes tab on the operator editor. In this example, the operator is an Aggregator, with separate Input and Output tabs.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1159269"></a>Figure 5-4 Output Tab on the Operator Editor</p>
<img width="680" height="510" src="img/op_ed_inout.gif" alt="This illustration is described in the surrounding text." /><br />
<a id="sthref850" href="img_text/op_ed_inout.htm">Description of "Figure 5-4 Output Tab on the Operator Editor"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The tab contains a table that you can use to define output attributes. Each row on this tab represents an attribute. The Mapping Editor disables properties that you cannot edit. For example, if the data type is <code>NUMBER</code>, you can edit the precision and scale but not the length.</p>
<p>You can add, remove, and edit attributes. To add an attribute, click Attribute column of an empty row, enter the attribute name and then provide the other attribute details such as data type, length, and description. To delete an attribute, right-click the gray cell to the left of the attribute and select <span class="bold">Remove</span>.</p>
<p>To assign correct values for data type, length, precision, and scale in an attribute, follow PL/SQL rules. When you synchronize the operator, Oracle Warehouse Builder checks the attributes based on SQL rules.</p>
<p>You can also change the order of the attributes listed in the Input and Output tabs. Select the row representing the attribute and use the arrow buttons to the left of the attributes to reorder attributes in a group. Alternatively, hold down the left-mouse button until you see a cross-hair and then drag the row to the position you want.</p>
<p class="subhead2"><a id="sthref851"></a>Associating Expressions with Operator Attributes</p>
<p>Attributes in certain operators such as Expression, Joiner, Aggregator, and Lookup can have an expression associated with them. For such attributes, use the Expression column of the attribute to specify the expression used to create the attribute value. You can directly enter the expression in the Expression column. <a href="#i1159269">Figure 5-4</a> displays the Expression column for an output attribute in the Aggregator operator. To use the Expression Builder interface to define your expression, click the Ellipsis button to the right of the Expression column.</p>
<p>For example, in an Aggregator operator, you create output attributes that store the aggregated source columns. Use the Expression column for an output attribute to specify the expression used to create the attribute value.</p>
</div>
<!-- class="sect2" -->
<a id="i1159398"></a>
<div class="sect2">
<h3 class="sect2">Using Display Sets</h3>
<p><a id="sthref852"></a>A display set is a graphical representation of a subset of attributes. Use display sets to limit the number of attributes visible in an operator and simplify the display of a complex mapping.</p>
<p>By default, operators contain three predefined display sets: ALL, MAPPED, and UNMAPPED. <a href="#g1206264">Table 5-1</a> describes the default display sets.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref853"></a><a id="g1206264"></a>Table 5-1 Default Sets</p>
<table class="cellalignment2975" title="Default Sets " summary="Lists and describes the default display sets." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t16">Display Set</th>
<th class="cellalignment2976" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t16" headers="r1c1-t16">
<p>ALL</p>
</td>
<td class="cellalignment2977" headers="r2c1-t16 r1c2-t16">
<p>Includes all attributes in an operator</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t16" headers="r1c1-t16">
<p>MAPPED</p>
</td>
<td class="cellalignment2977" headers="r3c1-t16 r1c2-t16">
<p>Includes only those attributes in an operator that are connected to another operator</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t16" headers="r1c1-t16">
<p>UNMAPPED</p>
</td>
<td class="cellalignment2977" headers="r4c1-t16 r1c2-t16">
<p>Includes only those attributes that are not connected to other attributes</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="sect3"><a id="sthref854"></a>
<h4 class="sect3">Defining <a id="sthref855"></a><a id="sthref856"></a>Display Sets</h4>
<p>You can define display sets for any operator in a mapping.</p>
<p><span class="bold">To define a display set:</span></p>
<ol>
<li>
<p>Right-click an operator, and select <span class="bold">Define Display Set</span>.</p>
<p>The Display Set dialog box is displayed as shown in <a href="#i1182706">Figure 5-5</a>.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1182706"></a>Figure 5-5 Display Set Dialog Box</p>
<img width="508" height="540" src="img/display_set1.gif" alt="This illustration is described in the surrounding text." /><br />
<a id="sthref857" href="img_text/display_set1.htm">Description of "Figure 5-5 Display Set Dialog Box"</a><br />
<br /></div>
<!-- class="figure" --></li>
<li>
<p>Click the row below UNMAPPED and enter a name and description for the new display set.</p>
</li>
<li>
<p>All available attributes for the operator appear in section called Attributes of selected display set. The Type column is automatically set to User defined.</p>
<p>You cannot edit or delete a Predefined attribute set.</p>
</li>
<li>
<p>In the Include column, select each attribute to include in the display set.</p>
<p>Click <span class="bold">Select All</span> to include all attributes and <span class="bold">Deselect All</span> to exclude all the attributes.</p>
</li>
<li>
<p>Click <span class="bold">OK.</span></p>
<p>The group for the operator now lists only those attributes contained within the Attribute Set selected for display.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref858"></a>
<h4 class="sect3">Selecting a Display Set</h4>
<p>If a group contains multiple display set, you can select a different display set from a list using the Graph menu.</p>
<p><span class="bold">To select a display set:</span></p>
<ol>
<li>
<p>Right-click a group in an operator.</p>
</li>
<li>
<p>Click <span class="bold">Select Display Set</span> and select the desired display set.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEICHEHF"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Setting Mapping Properties</h2>
<p>After you define a mapping, you can use the Property Inspector to set properties for the mapping.</p>
<p>You can set the following properties:</p>
<ul>
<li>
<p><span class="bold">Mapping Properties:</span> Properties that affect the entire mapping. For example, you can set the Target Load Order parameter defines the order in which targets are loaded when the mapping is run.</p>
</li>
<li>
<p><span class="bold">Operator Properties:</span> Properties that affect the operator as a whole. The properties you can set depend upon the operator type. For example, the steps for using Oracle source and target operators differ from the steps for using flat file source and target operators.</p>
</li>
<li>
<p><span class="bold">Group Properties:</span> Properties that affect a group of attributes. Most operators do not have properties for their groups. Examples of operators that do have group properties include the Splitter operator and the Deduplicator operator.</p>
</li>
<li>
<p><span class="bold">Attribute Properties:</span> Properties that pertain to attributes in source and target operators. Examples of attribute properties are data type, precision, and scale.</p>
</li>
</ul>
<p class="subhead1"><a id="sthref859"></a>Setting Operator, Group, and Attribute Properties</p>
<p>When you select an operator, group, or attribute on the Mapping Editor canvas, its associated properties are displayed in the Property Inspector. Set values for the required properties using the Property Inspector. The properties that you can set are documented in the chapters that discuss the operators.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="src_tgt_opers.htm#BABCHAEI">"Source and Target Operators"</a></p>
</li>
<li>
<p><a href="data_flow_opers.htm#CIHBEEAC">"Data Flow Operators"</a></p>
</li>
<li>
<p><a href="name_address.htm#BGBGDBHH">"Using the Name and Address Operator to Cleanse and Correct Name and Address Data"</a></p>
</li>
<li>
<p><a href="match_merge.htm#BGBDHCFG">"Using the Match Merge Operator to Eliminate Duplicate Source Records"</a></p>
</li>
</ul>
</div>
<p class="subhead1"><a id="sthref860"></a>Setting Mapping Properties</p>
<p>To set properties for a mapping, select the Mapping in the Projects Navigator. The Property Inspector displays the properties of the mapping.</p>
<p>You can set values for the following properties: Business Name, Physical Name, Description, Execution Type, and Target Load Order.</p>
<p>Use the Target Load Order configuration parameter to specify the order in which targets in the mapping are loaded as described in <a href="#BEIHJBIG">"Specifying the Order in Which Target Objects in a Mapping Are Loaded"</a>.</p>
<a id="BEIHJBIG"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Specifying the Order in Which <a id="sthref861"></a><a id="sthref862"></a>Target Objects in a Mapping Are Loaded</h3>
<p>If your mapping includes only one target or is a SQL*Loader or ABAP mapping, target load ordering does not apply. Accept the default settings and continue with your mapping design.</p>
<p>When you design a PL/SQL mapping with multiple targets, Oracle Warehouse Builder calculates a default ordering for loading the targets. If you define foreign key relationships between targets, then Oracle Warehouse Builder creates a default order that loads the parent and then the child. If you do not create foreign key relationships or if a target table has a recursive relationship, then Oracle Warehouse Builder assigns a random ordering as the default.</p>
<p>You can override the default load ordering by setting the mapping property Target Load Order. If you make a mistake when reordering the targets, then you can restore the default ordering by selecting the <a href="#BEICGFHI">"Reset to Default"</a> option. Or you can select <span class="bold">Cancel</span> to discard your changes to the target order.</p>
<p><span class="bold">To specify the loading order for multiple targets:</span></p>
<ol>
<li>
<p>Click whitespace in the mapping canvas to view the mapping properties in the Property Inspector.</p>
<p>If the Property Inspector is not displayed, select <span class="bold">Property Inspector</span> from the View menu.</p>
</li>
<li>
<p>Go to the Target Load Order property and click the Ellipsis button on the right of this property.</p>
<p>Oracle Warehouse Builder displays the Target Load Order dialog box in which TARGET2 is listed before TARGET1.</p>
</li>
<li>
<p>To change the loading order, select a target and use the buttons to move the target up or down on the list.</p>
</li>
</ol>
<a id="BEICGFHI"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Reset to Default</h4>
<p>Use the Reset to Default button to instruct Oracle Warehouse Builder to recalculate the target loading order. You may want to recalculate if you made an error reordering the targets or if you assigned an order and later changed the mapping design such that the original order became invalid.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEIGHHAE"></a><a id="WBETL05011"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Configuring <a id="sthref863"></a><a id="sthref864"></a>Mappings</h2>
<p>After you define mappings, you can configure them to specify the physical properties of the mapping and the operators contained in the mapping. Configuring a mapping enables you to control the code generation, so that Oracle Warehouse Builder produces optimized code for the mapping and for your particular environment.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref865"></a>
<h3 class="sect2">Steps to Configure Mappings</h3>
<p>Use the following steps to configure mappings.</p>
<ol>
<li>
<p>In the Projects Navigator, right-click the mapping and select <span class="bold">Configure</span>.</p>
<p>Oracle Warehouse Builder displays the Configuration tab that contains configuration parameters for the mapping.</p>
<p>This tab contains the Deployable, Language, Generation Comments, and Referred Calendar parameters. It also contains the Run time Parameters and Code Generation Options nodes. Additionally, each operator on the mapping is listed under the node representing the object or operator type. For example, if your mapping contains two tables and a Filter operator, the Table Operators node displays the configuration parameters for the two tables and the Filter Operator node displays the configuration parameters for the Filter operator.</p>
</li>
<li>
<p>Set the <span class="bold">Deployable</span> parameter to True.</p>
</li>
<li>
<p>Set <span class="bold">Language</span> to the type of code to generate for the selected mapping.</p>
<p>The options from which you can choose depend upon the design and use of the operators in the mapping. Oracle Warehouse Builder provides the following options: PL/SQL, SQL*PLUS, SQL*Loader, and ABAP (for an SAP source mapping).</p>
</li>
<li>
<p>To schedule the mapping to run based on a previously defined schedule, click the Ellipsis button on the Referred Calendar parameter.</p>
<p>The Referred Calendar dialog box is displayed. Any schedules created are listed here. Select the schedule to associate with the current mapping.</p>
<p>For instructions on creating and using schedules, see <a href="scheduling_etl.htm#CHDGEGJF">Chapter 11, "Scheduling ETL Jobs"</a>.</p>
</li>
<li>
<p>Expand <a href="ref_maps_processflows.htm#i1112962">"Code Generation Options"</a> to enable performance options that optimize the code generated for the mapping.</p>
<p>For a description of each option, see <a href="ref_maps_processflows.htm#i1112962">"Code Generation Options"</a>.</p>
</li>
<li>
<p>(Optional) To define chunking for a PL/SQL mapping, use one of the following:</p>
<ul>
<li>
<p>To configure serial chunking, expand <a href="ref_maps_processflows.htm#CHDBAABI">"SCD Updates"</a> and set the parameters described in <a href="ref_maps_processflows.htm#CHDBAABI">"SCD Updates"</a>.</p>
</li>
<li>
<p>To configure parallel chunking, expand <a href="ref_maps_processflows.htm#CHDHDDJG">"Chunking Options"</a>, then <span class="bold">Details</span>, and set the parameters depending upon the method of parallel chunking you plan to use. Also, ensure that serial chunking is not enabled for this mapping.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="ref_maps_processflows.htm#CHDHDDJG">"Chunking Options"</a> for a description of the parallel chunking parameters.</div>
<p>To set Run time parameters corresponding to parallel chunking, after you set values under Chunking Options, close the Mapping Configuration Editor and reopen it to display the parallel chunking-related Run time parameters.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can perform chunking for PL/SQL mappings only.</div>
</li>
<li>
<p>Expand <a href="ref_maps_processflows.htm#i1134262">"Runtime Parameters"</a> to configure your mapping for deployment.</p>
<p>For a description of each run time parameter, see <a href="ref_maps_processflows.htm#i1134262">"Runtime Parameters"</a>.</p>
</li>
<li>
<p>Go to the node for each operator in the mapping to set their physical properties. The properties displayed under a particular node depend on the type of object. For example, for tables listed under the Table Operators node, you can configure the table parameters listed in <a href="orcl_data_objx.htm#i1110821">"Configuring Tables"</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="ref_maps_processflows.htm#i1128311">"Sources and Targets Reference"</a> for information about configuring sources and targets in a mapping.</p>
</li>
<li>
<p><a href="ref_maps_processflows.htm#i1113194">"Configuring Flat File Operators"</a> for information about configuring mappings with flat file sources and targets.</p>
</li>
</ul>
</div>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
In some environments, changing the location to host name instead of IP address causes performance downgrade.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1139074"></a><a id="WBETL05012"></a>
<div class="sect1">
<h2 class="sect1">Synchronizing Operators and Workspace Objects</h2>
<p><a id="sthref866"></a><a id="sthref867"></a>Many of the operators that you use in a mapping have corresponding definitions in Oracle Warehouse Builder workspace. This is true of source and target operators such as table and view operators. This is also true of other operators, such as sequence and transformation operators, whose definitions you may want to use across multiple mappings. As you make changes to these operators, you may want to propagate those changes back to the workspace object.</p>
<p>You have the following choices in deciding the direction in which to propagate changes:</p>
<ul>
<li>
<p><span class="bold"><a href="#CHDBBJCH"><span class="xreftitlebold">Synchronizing a Mapping Operator with its Associated Workspace Object</span></a></span></p>
<p>It enables you to propagate changes in the definition of a workspace object to the mapping operator that is bound to the workspace object.</p>
<p>You can also synchronize all the operators in a mapping with their corresponding definitions in the workspace as described in <a href="#CIHGFCCG">"Synchronizing All Operators in a Mapping"</a>.</p>
</li>
<li>
<p><span class="bold"><a href="#i1146545"><span class="xreftitlebold">Synchronizing a Workspace Object with a Mapping Operator</span></a></span></p>
<p>It enables you to propagate changes made to a mapping operator to its corresponding workspace definition. You can select a single operator and synchronize it with the definition of a specified workspace object.</p>
</li>
</ul>
<p>Synchronizing is different from refreshing. The refresh command ensures that you are up-to-date with changes made by other users in a multiuser environment. Synchronizing matches operators with their corresponding workspace objects.</p>
<a id="CHDBBJCH"></a>
<div class="sect2">
<h3 class="sect2">Synchronizing a Mapping Operator with its Associated Workspace Object</h3>
<p>After you begin using mappings in a production environment, changes may be made to the sources or targets that affect your ETL designs. Typically, the best way to manage these changes is through the Metadata Dependency Manager described in <a href="lineage_impact_mdm.htm#CIACJGCB">Chapter 14, "Managing Metadata Dependencies"</a>. Use the Metadata Dependency Manager to automatically evaluate the impact of changes and to synchronize all affected mappings .</p>
<p>The Mapping Editor enables you to manually synchronize objects as described in this section.</p>
<p class="subhead2"><a id="sthref868"></a>When Do You Synchronize from a Workspace Object to an Operator?</p>
<p>In the Mapping Editor, you can synchronize from a workspace object to an operator for any of the following reasons:</p>
<ul>
<li>
<p><span class="bold">To manually propagate changes:</span> Propagate changes you made in a workspace object to its associated operator. Changes to the workspace object can include structural changes, attribute name changes, or attribute data type changes.</p>
<p>To automatically propagate changes in a workspace object across multiple mappings, see <a href="lineage_impact_mdm.htm#CIACJGCB">Chapter 14, "Managing Metadata Dependencies"</a>.</p>
</li>
<li>
<p><span class="bold">To synchronize an operator with a new workspace object:</span> You can synchronize an operator with a new workspace object if, for example, you migrate mappings from one version of a data warehouse to a newer version and maintain different object definitions for each version.</p>
</li>
<li>
<p><span class="bold">To create a prototype mapping using tables:</span> When working in the design environment, you could choose to design the ETL logic using tables. However, for production, you may want to the mappings to source other workspace object types such as views, materialized views, or cubes.</p>
</li>
</ul>
<p class="subhead2"><a id="sthref869"></a>Synchronizing Physical and Business Names</p>
<p>While synchronizing from a workspace object to an operator, you can specify if the physical and business names of the operator, groups, and attributes should be synchronized. By default, the bound name of the operator, groups and attributes must be derived from the physical name of the corresponding workspace object. Synchronize Name Changes listed under the Naming node of the Preferences dialog box controls the synchronization behavior.</p>
<p>If you select the Synchronize Name Changes preference under the Naming node of the Preferences dialog box, a synchronize operation on any operator synchronizes the physical and business names of the operator, groups, and attributes. If you deselect the Synchronize Name Changes preference, then the physical and business names of the operator, groups, and attributes are not synchronized.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink WBCON4704" href="http://www.oracle.com/pls/topic/lookup?ctx=db112&amp;id=WBCON4704"><span class="italic">Oracle Warehouse Builder Concepts</span></a> for more information about Oracle Warehouse Builder preferences.</div>
<p class="subhead2"><a id="sthref870"></a>Steps to Synchronize from a Workspace Object to an Operator</p>
<p>Use the following steps to synchronize an operator with the workspace object to which it is bound.</p>
<ol>
<li>
<p>On the Mapping Editor canvas, select the operator to synchronize. When the operator is displayed in maximized form, select the operator by clicking the operator name.</p>
</li>
<li>
<p>Right-click and select <span class="bold">Synchronize</span>.</p>
<p>The Synchronize dialog box is displayed.</p>
</li>
<li>
<p>In the Repository Object with which to Synchronize field, select the workspace object with which you want to synchronize the mapping operator.</p>
<p>By default, the workspace object to which the mapping operator was originally bound is displayed in this field.</p>
</li>
<li>
<p>Under Direction of Synchronization, select <span class="bold">Inbound</span>.</p>
</li>
<li>
<p>In the Matching Strategy field, select the matching strategy to be used during synchronization.</p>
<p>For more information about the matching strategy, see <a href="#i1151149">"Matching Strategies"</a>.</p>
</li>
<li>
<p>In the Synchronize strategy field, select the synchronization strategy.</p>
<p>Select Replace to replace the mapping operator definition with the workspace object definition. Select Merge to add any new metadata definitions and overwrite existing metadata definitions if they differ from the ones in the workspace object.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to complete the synchronization.</p>
</li>
</ol>
<a id="CIHGFCCG"></a>
<div class="sect3">
<h4 class="sect3">Synchronizing All Operators in a Mapping</h4>
<p>You can synchronize all operators in a mapping with their bound workspace objects using a single step. To synchronize the operators, open the mapping containing the operators to be synchronized. With the Mapping Editor canvas as the active panel, from the Edit menu, select <span class="bold">Synchronize All</span>. The Synchronize All panel is displayed. Use this panel to define synchronization options.</p>
<p>The Synchronize All panel displays one row for each mapping operator that is bound to a workspace object. Select the box to the left of all the object names which you want to synchronize with their bound workspace objects. For each operator, specify values in the following columns:</p>
<ul>
<li>
<p><span class="bold">From Repository:</span> Displays the workspace object to which the mapping operator is bound.</p>
<p>To modify the workspace object to which an operator is bound, click the Ellipsis button to the right of the workspace object name. The Source dialog box is displayed. Click the list on this page to select the new workspace object and click <span class="bold">OK</span>.</p>
</li>
<li>
<p><span class="bold">To Mapping:</span> Displays the name of the mapping operator. This field is not editable.</p>
</li>
<li>
<p><span class="bold">Matching Strategy:</span> Select the matching strategy used while synchronizing operators. For more information about matching strategies, see <a href="#i1151149">"Matching Strategies"</a>.</p>
</li>
<li>
<p><span class="bold">Synchronize Strategy:</span> Select the synchronization strategy used while synchronizing operators. You can select Replace or Merge as the synchronize strategy.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1146545"></a>
<div class="sect2">
<h3 class="sect2">Synchronizing a Workspace Object with a Mapping Operator</h3>
<p>As you make changes to operators in a mapping, you may want to propagate those changes to a workspace object. By synchronizing, you can propagate changes from the following operators: Table, View, Materialized View, Transformation, and Flat File.</p>
<p>Synchronize from the operator to a workspace object for any of the following reasons:</p>
<ul>
<li>
<p><span class="bold">To propagate changes:</span> Propagate changes that you made in an operator to its associated workspace object. When you rename the business name for an operator or attribute, Oracle Warehouse Builder propagates the first 30 characters of the business name as the bound name.</p>
</li>
<li>
<p><span class="bold">To replace workspace objects:</span> Synchronize to replace an existing workspace object.</p>
</li>
</ul>
<p>Synchronizing from an operator has no impact on the dependent relationship between other operators and the workspace object. <a href="#g1206094">Table 5-2</a> lists the operators from which you can synchronize.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref871"></a><a id="g1206094"></a>Table 5-2 Outbound Synchronize Operators</p>
<table class="cellalignment2975" title="Outbound Synchronize Operators " summary="List mapping objects and corresponding information about outbound reconciliation using these operators." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t23">Mapping Object</th>
<th class="cellalignment2976" id="r1c2-t23">Create Workspace Objects</th>
<th class="cellalignment2976" id="r1c3-t23">Propagate Changes</th>
<th class="cellalignment2976" id="r1c4-t23">Replace Workspace Objects</th>
<th class="cellalignment2976" id="r1c5-t23">Notes</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t23" headers="r1c1-t23">
<p>External Table</p>
</td>
<td class="cellalignment2977" headers="r2c1-t23 r1c2-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r2c1-t23 r1c3-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r2c1-t23 r1c4-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r2c1-t23 r1c5-t23">
<p>Updates the workspace external table only and not the flat file associated with the external table. See <a class="olink WBDOD" href="../e10582/toc.htm"><span class="italic">Oracle Warehouse Builder Sources and Targets Guide</span></a> for details.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t23" headers="r1c1-t23">
<p>Flat File</p>
</td>
<td class="cellalignment2977" headers="r3c1-t23 r1c2-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r3c1-t23 r1c3-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r3c1-t23 r1c4-t23">
<p>No</p>
</td>
<td class="cellalignment2977" headers="r3c1-t23 r1c5-t23">
<p>Creates a new, comma-delimited flat file for single record type flat files only.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t23" headers="r1c1-t23">
<p>Mapping Input Parameter</p>
</td>
<td class="cellalignment2977" headers="r4c1-t23 r1c2-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r4c1-t23 r1c3-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r4c1-t23 r1c4-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r4c1-t23 r1c5-t23">
<p>Copies input attributes and data types as input parameters</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t23" headers="r1c1-t23">
<p>Mapping Output Parameter</p>
</td>
<td class="cellalignment2977" headers="r5c1-t23 r1c2-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r5c1-t23 r1c3-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r5c1-t23 r1c4-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r5c1-t23 r1c5-t23">
<p>Copies output attributes and data types as return specification for the function</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r6c1-t23" headers="r1c1-t23">
<p>Materialized View</p>
</td>
<td class="cellalignment2977" headers="r6c1-t23 r1c2-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r6c1-t23 r1c3-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r6c1-t23 r1c4-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r6c1-t23 r1c5-t23">
<p>Copies attributes and data types as columns</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r7c1-t23" headers="r1c1-t23">
<p>Table</p>
</td>
<td class="cellalignment2977" headers="r7c1-t23 r1c2-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r7c1-t23 r1c3-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r7c1-t23 r1c4-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r7c1-t23 r1c5-t23">
<p>Copies attributes and data types as columns. Constraint properties are not copied</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r8c1-t23" headers="r1c1-t23">
<p>Transformation</p>
</td>
<td class="cellalignment2977" headers="r8c1-t23 r1c2-t23">
<p>No</p>
</td>
<td class="cellalignment2977" headers="r8c1-t23 r1c3-t23">
<p>No</p>
</td>
<td class="cellalignment2977" headers="r8c1-t23 r1c4-t23">
<p>No</p>
</td>
<td class="cellalignment2977" headers="r8c1-t23 r1c5-t23">
<p>Not applicable.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r9c1-t23" headers="r1c1-t23">
<p>View</p>
</td>
<td class="cellalignment2977" headers="r9c1-t23 r1c2-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r9c1-t23 r1c3-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r9c1-t23 r1c4-t23">
<p>Yes</p>
</td>
<td class="cellalignment2977" headers="r9c1-t23 r1c5-t23">
<p>Copies attributes and data types as columns</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="i1138367"></a>
<div class="sect3">
<h4 class="sect3">Steps to Synchronize a Workspace Object with a Mapping Operator</h4>
<p>Use the following steps to synchronize from a mapping operator to a workspace object. Synchronization causes the workspace object to be updated with changes made to the mapping operator after the mapping was created.</p>
<ol>
<li>
<p>On the Mapping Editor canvas, select the operator whose changes you want to propagate to the bound workspace object.</p>
</li>
<li>
<p>From the <span class="bold">Edit</span> menu, select <span class="bold">Synchronize.</span> Or, right-click the header of the operator and select <span class="bold">Synchronize.</span></p>
<p>The Synchronize Operator dialog box is displayed.</p>
</li>
<li>
<p>In the Repository Object with which to Synchronize field, select the workspace object that should be updated with the mapping operator definition changes.</p>
<p>By default, Oracle Warehouse Builder displays the workspace object to which the mapping operator was initially bound.</p>
</li>
<li>
<p>In the Direction of Synchronization field, select <span class="bold">Outbound</span>.</p>
</li>
<li>
<p>(Optional) In the Matching strategy field, select the matching strategy used during synchronization. See <a href="#i1151149">"Matching Strategies"</a>.</p>
</li>
<li>
<p>(Optional) In the Synchronize Strategy field select the synchronization strategy.</p>
<p>Select Replace to replace the workspace object definition with the mapping operator definition. Select Merge to add any new metadata definitions and overwrite existing metadata definitions if they differ from the ones in the mapping operator.</p>
</li>
<li>
<p>Click <span class="bold">OK.</span></p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref872"></a>
<h3 class="sect2">Advanced Options for <a id="sthref873"></a>Synchronizing</h3>
<p>Use the Synchronization Plan dialog box to view and edit the details of how Oracle Warehouse Builder synchronizes your selected objects. After you select from the <a href="#i1151149">"Matching Strategies"</a>, click <span class="bold">Refresh Plan</span> to view the actions that Oracle Warehouse Builder takes.</p>
<p>In the context of synchronizing, <span class="italic">source</span> refers to the object from which to inherit differences and <span class="italic">target</span> refers to the object to be changed.</p>
<p>For example, in <a href="#CHDGBHDJ">Figure 5-6</a>, the flat file <code>PAYROLL_WEST</code> is the source and the Flat File operator <code>PAYROLL</code> is the target. Therefore, Oracle Warehouse Builder creates new attributes for the <code>PAYROLL</code> operator to correspond to fields in the flat file <code>PAYROLL_WEST</code>.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDGBHDJ"></a>Figure 5-6 Advanced Synchronizing Options</p>
<img width="469" height="400" src="img/synch_adv.gif" alt="This illustration is described in the surrounding text." /><br />
<a id="sthref874" href="img_text/synch_adv.htm">Description of "Figure 5-6 Advanced Synchronizing Options "</a><br />
<br /></div>
<!-- class="figure" -->
<a id="i1151149"></a>
<div class="sect3">
<h4 class="sect3">Matching <a id="sthref875"></a>Strategies</h4>
<p>Set the matching strategy that determines how Oracle Warehouse Builder compares an operator to a workspace object. If synchronization introduces changes such as adding or deleting attributes in an operator, then Oracle Warehouse Builder refreshes the Mapping Editor. If synchronization removes an operator attribute, then data flow connections to or from the attribute are also removed. If synchronization adds an operator attribute, then the Mapping Editor displays the new attributes after the operator. Data flow connections between matched attributes are preserved. If you rename an attribute in the source object, then this is interpreted as if the attribute were deleted and a new attribute added.</p>
<p>You can specify the following strategies for synchronizing an object in a mapping:</p>
<ul>
<li>
<p><a href="#CIHJGCIG">"Match by Object Identifier"</a></p>
</li>
<li>
<p><a href="#CIHGEFDH">"Match by Bound Name"</a></p>
</li>
<li>
<p><a href="#CIHFJHGI">"Match by Position"</a></p>
</li>
</ul>
<a id="CIHJGCIG"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Match by Object Identifier</h5>
<p>This strategy compares the unique object identifier of an operator attribute with that of a workspace object. The Match by object identifier is not available for synchronizing an operator and workspace object of different types, such as a View operator and a workspace table.</p>
<p>Use this strategy if you want the target object to be consistent with changes to the source object and to maintain separate business names despite changes to physical names in the target object.</p>
<p>Oracle Warehouse Builder removes attributes from the target object that do not correspond to attributes in the source object. This can occur when an attribute is added to or removed from the source object.</p>
</div>
<!-- class="sect4" -->
<a id="CIHGEFDH"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Match by Bound Name</h5>
<p>This strategy matches the bound names of the operator attributes to the physical names of the workspace object attributes. Matching is case-sensitive.</p>
<p>Use this strategy if you want bound names to be consistent with physical names in the workspace object. You can also use this strategy with a different workspace object if there are changes in the workspace object that would change the structure of the operator.</p>
<p>Oracle Warehouse Builder removes attributes of the operator that cannot be matched with those of the workspace object. Attributes of the selected workspace object that cannot be matched with those of the operator are added as new attributes to the operator. Because bound names are read-only after you have bound an operator to a workspace object, you cannot manipulate the bound names to achieve a different match result.</p>
</div>
<!-- class="sect4" -->
<a id="CIHFJHGI"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Match by Position</h5>
<p><a id="i1129707"></a>This strategy matches operator attributes with columns, fields, or parameters of the selected workspace object by position. The first attribute of the operator is synchronized with the first attribute of the workspace object, the second with the second, and so on.</p>
<p>Use this strategy to synchronize an operator with a different workspace object and to preserve the names of the attributes in the operator. This strategy is most effective when the only changes to the workspace object are the addition of extra columns, fields, or parameters after the object.</p>
<p>If the target object has more attributes than the source object, then Oracle Warehouse Builder removes the excess attributes. If the source object has more attributes than the target object, then Oracle Warehouse Builder adds the excess attributes as new attributes.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHEICFB"></a><a id="WBETL05013"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Example: Using a Mapping to Load Transaction Data<a id="sthref876"></a><a id="sthref877"></a><a id="sthref878"></a><a id="sthref879"></a><a id="sthref880"></a></h2>
<p class="subhead2"><a id="sthref881"></a>Scenario</p>
<p>Your company records all its transactions as they occur, resulting in inserts, updates, and deletes, in a flat file called <code>record.csv.</code> These transactions must be processed in the exact order they were stored. For example, if an order was first placed, then updated, then canceled and reentered, this transaction must be processed exactly in the same order.</p>
<p>An example data set of the source file <code>record.csv</code> is defined as:</p>
<pre>
Action,DateTime,Key,Name,Desc
I,71520031200,ABC,ProdABC,Product ABC
I,71520031201,CDE,ProdCDE,Product CDE
I,71520031202,XYZ,ProdXYZ,Product XYZ
U,71620031200,ABC,ProdABC,Product ABC with option
D,71620032300,ABC,ProdABC,Product ABC with option
I,71720031200,ABC,ProdABC,Former ProdABC reintroduced
U,71720031201,XYZ,ProdXYZ,Rename XYZ
</pre>
<p>You want to load the data into a target table such as the following:</p>
<pre>
SRC_TIMESTA KEY NAME    DESCRIPTION
----------- --- ------- ---------------------------
71520031201 CDE ProdCDE Product CDE
71720031201 XYZ ProdXYZ Rename XYZ
71720031200 ABC ProdABC Former ProdABC reintroduced
</pre>
<p>You must create ETL logic to load transaction data in a particular order using Oracle Warehouse Builder.</p>
<p class="subhead2"><a id="sthref882"></a>Solution</p>
<p>Oracle Warehouse Builder enables you to design ETL logic and load the data in the exact temporal order in which the transactions were stored at the source. To achieve this result, you design a mapping that orders and conditionally splits the data before loading it into the target. Then, you configure the mapping to generate code in row-based operating mode. In row-based operating mode, Oracle Warehouse Builder generates code to process the data row by row using if-then-else constructions, as shown in the following example.</p>
<pre>
CURSOR
   SELECT
       "DATETIME$1"
   FROM
       "JOURNAL_EXT"
   ORDER BY "JOURNAL_EXT"."DATETIME" ASC
LOOP
  IF "ACTION" = 'I' THEN
      INSERT this row
  ELSE
   IF "ACTION" = 'U' THEN
      UPDATE this row
  ELSE
          DELETE FROM
                "TARGET_FOR_JOURNAL_EXT"
END LOOP;
</pre>
<p>This ensures that all consecutive actions are implemented in sequential order and the data is loaded in the order in which the transaction was recorded.</p>
<p class="subhead2"><a id="BEIBHIEJ"></a>Step 1: Import and Sample the Source Flat File, record.csv</p>
<p>In this example, the flat file <code>record.csv</code> stores all transaction records and a timestamp. Import this flat file from your source system using the Metadata Import Wizard. Define the metadata for the flat file in Oracle Warehouse Builder using the Flat File Sample Wizard.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can replace this flat file with a regular table if your system is sourced from a table. In this case, skip to <a href="#BEIIAGGE">"Step 3: Design the Mapping"</a>.</div>
<p class="subhead2"><a id="sthref883"></a>Step 2: Create an External Table</p>
<p>To simplify the use of a sampled flat file object in a mapping, create an external table (<code>JOURNAL_EXT</code>) using the Create External Table Wizard, based on the flat file imported and sampled in <a href="#BEIBHIEJ">"Step 1: Import and Sample the Source Flat File, record.csv"</a>.</p>
<p>The advantage of using an external table instead of a flat file is that it provides you direct SQL access to the data in your flat file. Hence, it is not required to stage the data.</p>
<p class="subhead2"><a id="BEIIAGGE"></a>Step 3: Design the Mapping</p>
<p>In this mapping, you move the transaction data from an external source, through an operator that orders the data, followed by an operator that conditionally splits the data before loading it into the target table.</p>
<p><a href="#CDDBBGJB">Figure 5-7</a> shows you how the source is ordered and split.</p>
<div class="figure">
<p class="titleinfigure"><a id="CDDBBGJB"></a>Figure 5-7 ETL Design</p>
<img width="499" height="240" src="img/mapdiagram.gif" alt="Description of Figure 5-7 follows" /><br />
<a id="sthref884" href="img_text/mapdiagram.htm">Description of "Figure 5-7 ETL Design"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The Sorter operator enables you to order the data and process the transactions in the exact order in which they were recorded at the source. The Splitter operator enables you to conditionally handle all the inserts, updates, and deletes recorded in the source data by defining a split condition that acts as the if-then-else constraint in the generated code. The data is conditionally split and loaded into the target table. In this mapping, the same target table is used three times to demonstrate this conditional loading. The mapping tables TARGET1, TARGET2, and TARGET3 are all bound to the same workspace table <code>TARGET</code>. All the data goes into a single target table.</p>
<p>The following steps show you how to build this mapping.</p>
<p class="subhead2"><a id="sthref885"></a>Step 4: Create the Mapping</p>
<p>Create a mapping called <code>LOAD_JOURNAL_EXT</code> using the Create Mapping dialog box. Oracle Warehouse Builder then opens the Mapping Editor where you can build your mapping.</p>
<p class="subhead2"><a id="sthref886"></a>Step 5: Add an External Table Operator</p>
<p>Drag and drop a mapping external table operator onto the Mapping Editor canvas and bind it to the external table <code>JOURNAL_EXT</code>.</p>
<p class="subhead2"><a id="sthref887"></a>Step 6: Order the Data</p>
<p>Add the Sorter operator to define an order-by clause that specifies the order in which the transaction data must be loaded into the target.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="data_flow_opers.htm#i1175568">"Sorter Operator"</a> for more information about using the Sorter operator.</div>
<p><a href="#BEICAJGI">Figure 5-8</a> shows you how to order the table based on the timestamp of the transaction data in ascending order.</p>
<div class="figure">
<p class="titleinfigure"><a id="BEICAJGI"></a>Figure 5-8 Order By Clause Dialog Box</p>
<img width="698" height="522" src="img/orderby.gif" alt="Description of Figure 5-8 follows" /><br />
<a id="sthref888" href="img_text/orderby.htm">Description of "Figure 5-8 Order By Clause Dialog Box"</a><br />
<br /></div>
<!-- class="figure" -->
<p class="subhead2"><a id="sthref889"></a>Step 7: Define a Split Condition</p>
<p>Add the Splitter operator to conditionally split the inserts, updates, and deletes stored in the transaction data. This split condition acts as the if-then-else constraint in the generated code.</p>
<p><a href="#BABGDJJI">Figure 5-9</a> shows how to join the SOURCE operator with the ORDERBY operator that is linked to the Splitter operator.</p>
<div class="figure">
<p class="titleinfigure"><a id="BABGDJJI"></a>Figure 5-9 Adding the Splitter Operator</p>
<img width="480" height="127" src="img/case_transact_splitter.gif" alt="Description of Figure 5-9 follows" /><br />
<a id="sthref890" href="img_text/case_transact_splitter.htm">Description of "Figure 5-9 Adding the Splitter Operator"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Define the split condition for each type of transaction. For outgroup INSERT_DATA, define the split condition as <code>INGRP1.ACTION = 'I'</code>. For UPGRADE_DATA, define the split condition as <code>INGRP1.ACTION = 'U'</code>. In Oracle Warehouse Builder, the Splitter operator contains a default group called REMAINING_ROWS that automatically handles all Delete ('D') records.</p>
<p class="subhead2"><a id="sthref891"></a>Step 8: Define the Target Tables</p>
<p>Use the same workspace target table three times for each type of transaction: for INSERT_DATA, once for UPDGRADE_DATA, and once for REMAINING_ROWS.</p>
<p class="subhead2"><a id="sthref892"></a>Step 9: Configure the Mapping LOAD_JOURNAL_EXT</p>
<p>After you define the mapping, you must configure the mapping to generate code. Because the objective of this example is to process the data strictly in the order in which it was stored, you must select row-based as the default operating mode. In this mode, the data is processed row by row and the insert, update, and delete actions on the target tables occur in the exact order in which the transaction was recorded at the source.</p>
<p>Do not select set-based mode as Oracle Warehouse Builder then generates code that creates one statement for all insert transactions, one statement for all update transactions, and a third one for all delete transactions. The code then calls these procedures one after the other, completing one action completely before following up with the next action. For example, it first handles all inserts, then all updates, and then all deletes.</p>
<p><a id="sthref893"></a><span class="subhead3">To configure a mapping for loading transaction data:&nbsp;</span></p>
<ol>
<li>
<p>From the Projects Navigator, right-click the <code>LOAD_JOURNAL_EXT</code> mapping and select <span class="bold">Configure</span>.</p>
</li>
<li>
<p>Expand the Run time parameters node and set the Default Operating Mode parameter to <span class="bold">Row based</span>.</p>
</li>
</ol>
<p>In this example, accept the default value for all other parameters. Validate the mapping before generating the code.</p>
<p class="subhead2"><a id="sthref894"></a>Step 10: Generate Code</p>
<p>After you generate the mapping, Oracle Warehouse Builder displays the results in the Log window.</p>
<p>When you inspect the code, you see that Oracle Warehouse Builder implements all consecutive actions in row-based mode. It means that the data is processed row by row and Oracle Warehouse Builder evaluates all conditions in sequential order using if-then-else constructions. The resulting target table thus maintains the sequential integrity of the transactions recorded at source.</p>
</div>
<!-- class="sect1" -->
<a id="i1158750"></a><a id="WBETL05014"></a>
<div class="sect1">
<h2 class="sect1">Example: Using the Mapping Editor to Create Staging Area Tables</h2>
<p>You can use the Mapping Editor with an unbound table operator to quickly create staging area tables.</p>
<p>The following instructions describe how to create a staging table based on an existing source table. You can also use these instructions to create views, materialized views, flat files, and transformations.</p>
<p><span class="bold">To map a source table to a staging table:</span></p>
<ol>
<li>
<p>In the Mapping Editor, add a source table.</p>
<p>From the menu bar, select <span class="bold">Graph</span>, then <span class="bold">Add</span>, then <span class="bold">Data Sources/Targets,</span> and then <span class="bold">Table Operator.</span> Alternatively, drag and drop the source table from the Projects Navigator onto the Mapping Editor canvas.</p>
</li>
<li>
<p>Use the <span class="bold">Add Table Operator</span> dialog box to select and bind the source table operator in the mapping. From the Add Table Operator dialog box, select <span class="bold">Create unbound operator with no attributes.</span></p>
<p>The mapping should now resemble <a href="#i1159778">Figure 5-10</a>, with one source table and one staging area table without attributes.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1159778"></a>Figure 5-10 Unbound Staging Table without Attributes and Source Table</p>
<img width="436" height="132" src="img/mappings_unbound_table.gif" alt="This illustration is described in the surrounding text." /><br />
<a id="sthref895" href="img_text/mappings_unbound_table.htm">Description of "Figure 5-10 Unbound Staging Table without Attributes and Source Table"</a><br />
<br /></div>
<!-- class="figure" --></li>
<li>
<p>With the mouse pointer positioned over the group in the source operator, click and hold down the mouse button.</p>
</li>
<li>
<p>Drag the mouse to the staging area table group.</p>
<p>Oracle Warehouse Builder copies the source attributes to the staging area table and connects the two operators.</p>
</li>
<li>
<p>In the Mapping Editor, select the unbound table that you added to the mapping. Right-click and select <span class="bold">Create and Bind.</span></p>
<p>Oracle Warehouse Builder displays the Create And Bind dialog box.</p>
</li>
<li>
<p>In the Create in field, specify the target module in which to create the table.</p>
<p>Oracle Warehouse Builder creates the new table in the target module that you specify.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="CIHDGAHA"></a><a id="WBETL05015"></a>
<div class="sect1">
<h2 class="sect1">Using Pluggable Mappings<a id="sthref896"></a></h2>
<p>You can reuse the data flow of a mapping by creating a pluggable mapping around the portion of the flow to reuse. A <span class="italic">pluggable mapping</span> is a reusable grouping of mapping operators that works as a single operator. It is similar to the concept of a function in a programming language and is a graphical way to define a function.</p>
<p>When defined, a pluggable mapping appears as a single mapping operator, nested inside a mapping. You can reuse a pluggable mapping more than once in the same mapping, or in other mappings. You can include pluggable mappings within other pluggable mappings.</p>
<p>Like any operator, a pluggable mapping has a <span class="italic">signature</span> consisting of input and output attributes that enable you to connect it to other operators in various mappings. The signature is similar to the input and output requirements of a function in a programming language.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink WBCON" href="../e10581/toc.htm"><span class="italic">Oracle Warehouse Builder Concepts</span></a> for more information about pluggable mappings.</div>
<p>A pluggable mapping can be either <span class="italic">reusable</span> or <span class="italic">embedded</span>:</p>
<ul>
<li>
<p><a id="sthref897"></a><span class="bold">Reusable pluggable mapping:</span> A pluggable mapping is reusable if the metadata it references can exist outside of the mapping in question. You can store reusable pluggable mappings either as standalone pluggable mappings, which are private for your use, or in folders (libraries). Users who have access to these folders can use the pluggable mappings as templates for their work.</p>
</li>
<li>
<p><a id="sthref898"></a><span class="bold">Embedded pluggable mapping:</span> A pluggable mapping is embedded if the metadata it references is owned only by the mapping or pluggable mapping in question. An embedded pluggable mapping is not stored as either a standalone mapping or in libraries on the Globals Navigator. It is stored only within the mapping or the pluggable mapping that owns it, and you can access it only by editing the object that owns it. To validate or generate the code for an embedded pluggable mapping, you must validate or generate the code for the object that owns it.</p>
</li>
</ul>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref899"></a>
<h3 class="sect2">Creating Pluggable Mappings</h3>
<p>Pluggable mappings are usually predefined and used when required. <a id="sthref900"></a><a id="sthref901"></a>You can create pluggable mappings either from within a mapping by using the Mapping Editor, or from the navigation tree by using the wizard. The wizard is the faster way to create a pluggable mapping because it makes some default choices and guides you through fewer choices. You can make additional choices later in the Pluggable Mapping Editor. The editor presents you with all the settings in a series of tabs.</p>
<p>The Pluggable Mappings node in the navigation tree contains the following two nodes:</p>
<ul>
<li>
<p><span class="bold">Standalone:</span> Contains standalone pluggable mappings</p>
</li>
<li>
<p><span class="bold">Pluggable Mapping Libraries:</span> Contains a set of pluggable mappings providing related functionality that you would like to publish as a library.</p>
</li>
</ul>
<p>You can create pluggable mappings under either of these nodes.</p>
<a id="CIHBAEAG"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating Standalone Pluggable Mappings</h4>
<ol>
<li>
<p>In the Projects Navigator, expand the project node and then the Pluggable Mappings node.</p>
</li>
<li>
<p>Right-click <span class="bold">Standalone</span>, and select <span class="bold">New Pluggable Mapping</span>.</p>
<p>The Create Pluggable Mapping Wizard is displayed.</p>
</li>
<li>
<p>On the Name and Description page, enter a name and an optional description for the pluggable mapping. Click <span class="bold">Next</span>.</p>
</li>
<li>
<p>On the Signature Groups page, one input signature group INGRP1 and one output signature group OUTGRP1 are displayed. Create any additional input or output signature groups as described in <a href="#CIHBAJBH">"Signature Groups"</a>. Click <span class="bold">Next</span>.</p>
</li>
<li>
<p>On the Input Signature page, define the input signature attributes for the pluggable mapping as described in <a href="#CIHIHGJJ">"Input Signature"</a>. Click <span class="bold">Next</span>.</p>
</li>
<li>
<p>On the Output Signature page, define the output signature attributes for the pluggable mapping as described in <a href="#CIHIDDBD">"Output Signature"</a>. Click <span class="bold">Next</span>.</p>
</li>
<li>
<p>On the Summary page, review the options that you entered using the wizard. Click <span class="bold">Back</span> to modify an option. Click <span class="bold">Finish</span> to create the pluggable mapping.</p>
<p>Oracle Warehouse Builder opens the Pluggable Mapping Editor and displays the name of the pluggable mapping on the title bar.</p>
</li>
<li>
<p>Use the Pluggable Mapping Editor to add the required operators and create a data flow between the operators. For more information, see <a href="#i1171414">"Adding Operators to Mappings"</a>.</p>
</li>
</ol>
<p>A pluggable mapping is considered as an operator by Oracle Warehouse Builder when it is used in a mapping. You can insert a pluggable mapping into any mapping. To use a pluggable mapping within a mapping, drag and drop the Pluggable Mapping operator from the Component Palette onto the canvas. The Add Pluggable Mapping dialog box is displayed. Select the required pluggable mapping and add it to the mapping.</p>
</div>
<!-- class="sect3" -->
<a id="CIHBAJBH"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Signature Groups</h4>
<p>The signature is a combination of input and output attributes flowing to and from the pluggable mapping. Signature groups are a mechanism for grouping the input and output attributes.</p>
<p>A pluggable mapping must have at least one input or output signature group. Most pluggable mappings are used in the middle of a logic flow and have input and output groups.</p>
<ul>
<li>
<p>To create an additional signature group, click an empty cell in the Group column, enter the name of the group, and specify whether the group is an input or output group using the Direction column. You can enter an optional description for the column in the Description column.</p>
</li>
<li>
<p>To remove a signature group, right-click the gray cell to the left of the group name and select <span class="bold">Delete</span>.</p>
</li>
</ul>
<p>Click <span class="bold">Next</span> to continue with the wizard.</p>
</div>
<!-- class="sect3" -->
<a id="CIHIHGJJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Input Signature</h4>
<p><a id="sthref902"></a><a id="sthref903"></a>The input signature is the combination of input attributes that flow into the pluggable mapping. Define the input attributes for each input signature group that you created.</p>
<p>If you defined multiple input signature groups, select the group to which you want to add attributes from the Group list box. To add an attribute, click an empty cell in the Attribute column and enter an attribute name. Use the Data Type field to specify the data type of the attribute. Also specify other details for the attribute such as length, precision, scale, and seconds precision by clicking the corresponding field and using the arrows on the field or typing in a value. Some of these fields are disabled depending on the data type you specify.</p>
<p>To remove an attribute, right-click the gray cell to the left of the attribute and select <span class="bold">Delete</span>.</p>
<p>Click <span class="bold">Next</span> to continue with the wizard.</p>
</div>
<!-- class="sect3" -->
<a id="CIHIDDBD"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Output Signature</h4>
<p><a id="sthref904"></a><a id="sthref905"></a>The output signature is the combination of output attributes that flow out of the pluggable mapping. Define the output attributes for each output signature group that you created.</p>
<p>If you defined multiple output signature groups, select the group to which you want to add attributes from the Group list box. To add an attribute, click an empty cell in the Attribute column and enter the attribute name. Use the Data Type field to specify the data type of the attribute. Provide additional details about the attribute such as length, precision, and scale by clicking the corresponding field and using the arrows or typing the values. Some of these fields are disabled depending on the data type you specify.</p>
<p>To remove an attribute, right-click the gray cell to the left of the attribute name and select <span class="bold">Delete</span>.</p>
<p>Click <span class="bold">Next</span> to continue with the wizard.</p>
<p>You can also add an Input Signature or an Output Signature from the palette of the Pluggable Mapping Editor. A pluggable mapping can have only one Input Signature and one Output Signature. Also, pluggable mapping Input and Output signatures can only be added within pluggable mappings. They cannot be added to normal mappings.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref906"></a>
<h4 class="sect3">Creating <a id="sthref907"></a><a id="sthref908"></a>Pluggable Mapping Folders</h4>
<p>A pluggable mapping folder is a container for a set of related pluggable mappings. You can keep your pluggable mappings private, or you can place them into folders and then publish the folders so that others can access them for their design work.</p>
<p><span class="bold">To create a pluggable mapping folder:</span></p>
<ol>
<li>
<p>In the Projects Navigator, expand the project node and then the Pluggable Mappings node.</p>
</li>
<li>
<p>Right-click the Pluggable Mapping Folders node and select <span class="bold">New Pluggable Mapping Folder</span>.</p>
<p>The Create Pluggable Mapping Folder dialog box is displayed.</p>
</li>
<li>
<p>Enter a name and an optional description for the pluggable mapping folder.</p>
<p>To start the Create Pluggable Mapping wizard to create a pluggable mapping immediately after you create this pluggable mapping folder, select <span class="bold">Proceed to Pluggable Mapping Wizard</span>.</p>
</li>
<li>
<p>Click <span class="bold">OK</span>.</p>
</li>
</ol>
<p>The library is displayed in the Projects Navigator. Create individual pluggable mappings within this library as described in <a href="#CIHBAEAG">"Creating Standalone Pluggable Mappings"</a>.</p>
<p>You can also move a pluggable mapping to any library on the tree.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref909"></a>
<h4 class="sect3">Creating User Folders Within Pluggable Mapping Libraries</h4>
<p>Within a pluggable mapping library, you can create user folders to group pluggable mappings using criteria such as product line, functional groupings, or application-specific categories.</p>
<p>User folders can contain user folders and other pluggable mappings. There is no limit on the level of nesting of user folders. You can also move, delete, edit, or rename user folders.</p>
<p>You can move or copy a user folder and its contained objects to the same pluggable mapping library, to any user folder belonging to the same library, or to a user folder belonging to a different library.</p>
<p>Deleting a user folder removes the user folder and all its contained objects from the repository.</p>
<p><a id="sthref910"></a><span class="subhead3">To create a user folder within a pluggable mapping library:&nbsp;</span></p>
<ol>
<li>
<p>Right-click the pluggable mapping library or the user folder under which you want to create the user folder and select <span class="bold">New</span>.</p>
<p>The New Gallery dialog box is displayed.</p>
</li>
<li>
<p>In the Items section, select <span class="bold">User Folder</span>.</p>
<p>The Create User Folder dialog box is displayed.</p>
</li>
<li>
<p>Enter a name for the user folder and click <span class="bold">OK</span>.</p>
</li>
</ol>
<p>The user folder is created and added to the tree.</p>
<p><span class="bold">To create a pluggable mapping within a user folder:</span></p>
<ol>
<li>
<p>Right-click the user folder and select <span class="bold">New</span>.</p>
<p>The New Gallery dialog box is displayed.</p>
</li>
<li>
<p>In the Items section, select <span class="bold">Pluggable Mapping</span>.</p>
<p>To create a new user folder within this user folder, select <span class="bold">User Folder</span>.</p>
</li>
<li>
<p>Click <span class="bold">OK</span>.</p>
</li>
</ol>
<p>If you selected Pluggable Mapping in Step 2, the Create Pluggable Mapping Wizard is displayed. If you selected User Folder in Step 2, then the Create User Folder dialog box is displayed.</p>
<p>You can move pluggable mappings from within a user folder or a pluggable mapping library to the Standalone node or to a different user folder or library. To move, right-click the pluggable mapping, select <span class="bold">Cut</span>. Right-click the user folder or pluggable mapping library to which you want to copy the pluggable mapping and select <span class="bold">Paste</span>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEIDFDJC"></a><a id="WBETL05016"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Copying Operators Across Mappings and Pluggable Mappings</h2>
<p>Operators enable you to create user-defined transformation logic in a mapping or pluggable mapping. Sometimes, you may want to reuse an operator that you previously defined in another mapping or pluggable mapping. Oracle Warehouse Builder supports copy-and-paste reuse of existing transformation logic, defined using operators or operator attributes, in other mappings or pluggable mappings. In the remainder of this section, the term <span class="italic">mappings</span> includes both mappings and pluggable mappings.</p>
<p>You can reuse transformation logic by copying the operator or operator attributes from the source mapping and pasting them into the required mapping. You can also copy and paste operator groups (input, output, and I/O).</p>
<p class="subhead2"><a id="sthref911"></a>Steps to Copy Operators, Groups, or Attributes</p>
<p>Use the following steps to copy operators, groups, and attributes defined in a mapping to other mappings within the same project.</p>
<ol>
<li>
<p>Open the mapping containing the operator, group, or attributes to copy. This is your source mapping.</p>
<p>See <a href="#BEICGHEA">"Steps to Open a Previously Created Mapping"</a> .</p>
</li>
<li>
<p>Open the mapping into which you want to copy the operator, group, or attributes. This is your target mapping.</p>
</li>
<li>
<p>In the source mapping, select the operator, group, or attribute. From the Edit menu, select <span class="bold">Copy</span>. To select multiple attributes, hold down the Ctrl key while selecting attributes.</p>
<p><span class="italic">or</span></p>
<p>Right-click the operator, group, or attribute and select <span class="bold">Copy</span>. If you selected multiple attributes, then ensure that you hold down the Ctrl key while right-clicking.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you do not require the operator, group, or attributes in the source mapping, you can choose <span class="bold">Cut</span> instead of <span class="bold">Copy</span>. Cutting removes the object from the source mapping.
<p>Cut objects can be pasted only once, whereas copied objects can be pasted multiple times.</p>
</div>
</li>
<li>
<p>In the target mapping, paste the operator, group, or attributes.</p>
<ul>
<li>
<p>To paste an operator, select <span class="bold">Paste</span> from the Edit menu. Or, right-click any blank space on the canvas and select <span class="bold">Paste</span> from the shortcut menu.</p>
</li>
<li>
<p>To paste a group, first select the operator into which you want to paste the group and then select <span class="bold">Paste</span> from the Edit menu. Or, right-click the operator into which you want to paste the group and select <span class="bold">Paste</span> from the shortcut menu.</p>
</li>
<li>
<p>To paste attributes, select the group into which you want to paste the attribute and then select <span class="bold">Paste</span> from the Edit menu. Or, right-click the group into which you want to paste the group and select <span class="bold">Paste</span> from the shortcut menu.</p>
</li>
</ul>
</li>
</ol>
<p>When you copy and paste an operator, the new operator has a UOID that is different from the source operator.</p>
<p>If the target mapping contains an operator with the same name as the one that is being copied, an <span class="italic">_n</span> is appended to the name of the new operator. Here, <span class="italic">n</span> represents a sequence number that begins with 1.</p>
<p class="subhead2"><a id="sthref912"></a>Information Copied Across Mappings</p>
<p>When you copy an operator, group, or attribute to a target mapping, the following information is copied.</p>
<ul>
<li>
<p>Object binding details</p>
</li>
<li>
<p>Display sets details</p>
</li>
<li>
<p>Physical and logical properties of operators and attributes</p>
<p>If there are multiple configurations defined for the object, details of all configurations are copied.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you copy an attribute and paste it into an operator that is of a different type than the source operator, only the name and data type of the operator are copied. No other details are copied.</div>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref913"></a>
<h3 class="sect2">Limitations of Copying Operators, Groups, and Attributes</h3>
<p>Following are the limitations of copying operators, groups, and attributes:</p>
<ul>
<li>
<p>You can copy operators, groups, or attributes from a mapping and paste them into another mapping within the same project only.</p>
</li>
<li>
<p>Any connections that existed between the operator, group, or attributes in the source mapping are not copied to the target mapping. Only the operator, group, or attributes are pasted into the target mapping.</p>
</li>
<li>
<p>For pluggable mappings, the connections between child operators within the source pluggable mapping are copied to the target mapping.</p>
</li>
<li>
<p>Group properties of the source operator are not copied to the group in the target operator. However, all the attributes contained in the group are copied.</p>
</li>
<li>
<p>Before you copy and paste a group from a source operator to a target operator, you must create the group in the target operator. The group is not created when you perform a paste operation.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Copying and pasting a large number of operators may take a considerable amount of time.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHHGCBD"></a><a id="WBETL05001"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Grouping Operators in Mappings and Pluggable Mappings</h2>
<p>Complex mappings and pluggable mappings contain many operators that are used to perform the required ETL task. Typically, each data transformation task may use one or more operators, which results in mappings that look cluttered and are difficult to comprehend. Trying to view all the operators at once means that each operator appears very small and the names are unreadable. Thus, grouping operators that perform related transformation tasks into separate folders helps reveal the overall transformation logic performed in the mapping. Oracle Warehouse Builder provides a method to group a set of operators into a folder so that unnecessary operators are hidden from the mapping canvas. In the remainder of this section, the term <span class="italic">mappings</span> refers to both mappings and pluggable mappings.</p>
<p>Grouping less interesting operators into a collapsible folder enables you to focus on the components that are important at a given time. It also uses less space on the canvas, thus enabling you to easily work on the mapping. When required, you can ungroup the folder to view or edit the operators that it contains.</p>
<p>Mappings can contain multiple grouped folder. You can also create nested folders in which one folder contains a set of mapping operators and one or more folders.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref914"></a>
<h3 class="sect2">Steps to Group Operators in Mappings and Pluggable Mappings</h3>
<p>Use the following steps to group operators in mappings and pluggable mappings.</p>
<ol>
<li>
<p>Open the mapping in which you want to group operators.</p>
<p>See <a href="#BEICGHEA">"Steps to Open a Previously Created Mapping"</a> .</p>
</li>
<li>
<p>Select the operators to group.</p>
<p>To select multiple objects, hold down the Ctrl key while selecting objects. Or, hold down the left-mouse button and draw a rectangle that includes the objects you want to select.</p>
</li>
<li>
<p>In the toolbar at the top of the Mapping Editor canvas, click <span class="bold">Group Selected Objects</span>. Or, from the Graph menu, select <span class="bold">Group Selected Objects</span>.</p>
<p>The selected operators are grouped into a folder, and the collapsed folder is displayed in the Mapping Editor. A default name, such as Folder1, is used for the folder.</p>
</li>
<li>
<p>(Optional) Rename the folder so that the name is more intuitive and reflects the task that the group of operators performs.</p>
<p><span class="bold">To rename the folder:</span></p>
<ol>
<li>
<p>Right-click the folder and select <span class="bold">Open Details</span>.</p>
</li>
<li>
<p>In the Edit Folder dialog box, enter the name of the folder in the Name field and click <span class="bold">OK</span>.</p>
</li>
</ol>
</li>
</ol>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref915"></a>
<h4 class="sect3">Viewing the Contents of a Folder</h4>
<p>When you group operators to create a folder for the selected operators, you can view the operators contained in the folder using one of the following methods.</p>
<ul>
<li>
<p>Use the tooltip for the folder</p>
<p>Position your mouse over the folder. The tooltip displays the operators contained in the folder.</p>
</li>
<li>
<p>Use Spotlighting to view folder contents</p>
<p>Select the folder and click <span class="bold">Spotlight Selected Objects</span> on the toolbar. Or, select the folder and choose <span class="bold">Spotlight Selected Objects</span> from the Graph menu. The folder is expanded, and the operators it contains are displayed. All other operators in the mapping are hidden. This is called spotlighting. For more information about spotlighting, see <a href="#BEIGABBD">"Spotlighting Selected Operators"</a>.</p>
</li>
<li>
<p>Double-click the folder</p>
<p>Double-click the folder to expand it. All operators contained in the folder are displayed and the surrounding operators in the mapping are moved to accommodate the folder contents.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref916"></a>
<h3 class="sect2">Steps to <a id="sthref917"></a><a id="sthref918"></a><a id="sthref919"></a><a id="sthref920"></a>Ungroup Operators in Mappings and Pluggable Mappings</h3>
<p>Use the following steps to ungroup operators.</p>
<ol>
<li>
<p>Open the mapping in which you want to ungroup operators.</p>
<p>See <a href="#BEICGHEA">"Steps to Open a Previously Created Mapping"</a> .</p>
</li>
<li>
<p>Select the folder to ungroup.</p>
<p>You can select multiple folders by holding down the Ctrl key and selecting all the folders.</p>
</li>
<li>
<p>In the toolbar, click <span class="bold">Ungroup Selected Objects</span>. Or, from the Graph menu, select <span class="bold">Ungroup Selected Objects</span>.</p>
<p>The operators that were grouped are now displayed individually on the Mapping Editor.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BEIGABBD"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Spotlighting <a id="sthref921"></a><a id="sthref922"></a><a id="sthref923"></a><a id="sthref924"></a>Selected Operators</h3>
<p>Spotlighting enables you to view only selected operators and their connections. All other operators and their connections are temporarily hidden. You can perform spotlighting on a single operator, a group of operators, a single folder, a group of folders, or any combination of folders and operators. When you select objects for spotlighting, the Mapping Editor layout is redisplayed such that the relationships between the selected objects are displayed clearly. The edges between spotlighted components are visible. However, edges between spotlighted components and other nonselected components are hidden.</p>
<p>To spotlight a folder containing grouped operators, in the Mapping Editor, select the folder and click <span class="bold">Spotlight Selected Items</span> on the toolbar. The folder is expanded and all the operators it contains are displayed. Click <span class="bold">Spotlight Selected Objects</span> again to toggle the spotlighting mode. The folder appears collapsed again and the operators it contains are hidden.</p>
<p>When in Spotlight mode, you can perform all normal mapping operations, such as moving or resizing operators, modifying operator properties, deleting spotlighted operators, creating new operators, and creating connections between operators. You can perform any operation that does not affect temporarily hidden operators.</p>
<p>If you create an operator in Spotlight mode, the operator must remain visible in the Mapping Editor when you toggle out of Spotlight mode.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEIEAFAJ"></a><a id="WBETL05017"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Locating <a id="sthref925"></a><a id="sthref926"></a><a id="sthref927"></a><a id="sthref928"></a><a id="sthref929"></a>Operators, Groups, and Attributes in Mappings and Pluggable Mappings</h2>
<p>Mappings and pluggable mappings contain numerous operators that are used to perform the required data transformation. Oracle Warehouse Builder provides a quick method of locating operators, groups, and attributes within mappings and pluggable mappings. When you search for objects, you can define the scope of the search and the search criteria. In the remainder of this section, the term <span class="italic">mapping</span> refers to both mappings and pluggable mappings.</p>
<p class="subhead1"><a id="sthref930"></a>Types of Search</p>
<p>You can perform the following types of search:</p>
<ul>
<li>
<p>Regular Search</p>
<p>Oracle Warehouse Builder searches for the search string in all the operators within the mapping. The search string is matched with the display name of operators, group names, and attribute names.</p>
</li>
<li>
<p>Advanced Search</p>
<p>This is a more sophisticated method of locating objects in mappings. You can locate operators, groups, and attributes by specifying which objects should be searched, and the search criteria.</p>
</li>
</ul>
<p>Use the Advanced Find dialog box to perform both regular and advanced searches.</p>
<p class="subhead1"><a id="sthref931"></a>Searching for Objects in Mappings and Pluggable Mappings</p>
<p><span class="bold">To locate an operator, group, or attribute in a mapping or pluggable mapping:</span></p>
<ol>
<li>
<p>Open the mapping using the steps described in <a href="#BEICGHEA">"Steps to Open a Previously Created Mapping"</a>.</p>
</li>
<li>
<p>From the Search menu, select <span class="bold">Find</span>.</p>
<p>The Advanced Find dialog box is displayed. Depending on the type of search to perform, use one of the following sets of instructions.</p>
<ul>
<li>
<p><a href="#BEIBJFGI">"Steps to Perform a Regular Search"</a></p>
</li>
<li>
<p><a href="#BEIJICEC">"Steps to Perform an Advanced Search"</a></p>
</li>
</ul>
</li>
</ol>
<a id="BEIBJFGI"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Steps to Perform a Regular Search</h3>
<p>Performing regular search involves the following steps:</p>
<ol>
<li>
<p><a href="#BEIGGIIJ">"Specifying the Object to Locate"</a></p>
</li>
<li>
<p><a href="#BEIEIGBC">"Specifying the Method Used to Display Search Results"</a></p>
</li>
<li>
<p>Clicking <span class="bold">Find</span>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BEIJICEC"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Steps to Perform an Advanced Search</h3>
<p>Performing an advanced search involves the following steps:</p>
<ol>
<li>
<p><a href="#BEIGGIIJ">"Specifying the Object to Locate"</a></p>
</li>
<li>
<p><a href="#BEIEIGBC">"Specifying the Method Used to Display Search Results"</a></p>
</li>
<li>
<p><a href="#BEIHEJHI">"Specifying the Search Scope"</a></p>
</li>
<li>
<p><a href="#BEIDAFHD">"Specifying the Search Criteria"</a></p>
</li>
<li>
<p>Clicking <span class="bold">Find</span>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BEIFACFI"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Advanced Find Dialog Box</h3>
<p>The Advanced Find dialog box enables you to search for operators, groups, or attributes within a mapping or pluggable mapping. By default, this dialog box displays the options required to perform a regular search. In a regular search, you search for an operator, group, or attribute using its display name. You can also specify how the search results should be displayed.</p>
<p>An advanced search provides techniques to define the scope of the search and the search criteria. To perform an advanced search, click <span class="bold">Show Advanced</span>. The additional parameters that you must define for an advanced search are displayed.</p>
<p class="subhead2"><a id="BEIGGIIJ"></a>Specifying the Object to Locate</p>
<p>Use the Find field to specify the object to locate. A regular search locates objects containing the same display name as the one specified in the Find field.</p>
<p>While performing an advanced search, in addition to the display name, you can specify a string that you provided in the Description property, physical name, business name, or name of the workspace object to which an operator is bound.</p>
<p>You can use wildcards in the search criteria. For example, specifying "C*" in the Find field searches for an object whose name begins with C or c.</p>
<p class="subhead2"><a id="BEIEIGBC"></a>Specifying the Method Used to Display Search Results</p>
<p>Use the Turn On Highlighting button on the Advanced Find dialog box to specify the method used to display the search results. This is a toggle button, and you can turn highlighting on or off.</p>
<p><a id="sthref932"></a><span class="subhead3">Turn on Highlighting&nbsp;</span></p>
<p>When you turn highlighting on, all objects located because of the search operation are highlighted in yellow in the Mapping Editor. Highlighting enables you to easily spot objects that are part of the search results.</p>
<p><a id="sthref933"></a><span class="subhead3">Turn off Highlighting&nbsp;</span></p>
<p>This is the default behavior. When you turn off highlighting, objects located because of the search operation are identified by the control being moved to these objects. When control is on a particular object, the border around the object is blue. When highlighting is off, the search results are presented one at a time.</p>
<p>For example, if an operator is found because of the search, the borders of the node representing the operator are blue.</p>
<p class="subhead2"><a id="BEIHEJHI"></a>Specifying the Search Scope</p>
<p>You can restrict the objects searched by specifying the scope of the search. The In Selected field in the Scope section enables you to limit the scope of the search to within the objects selected on the canvas.</p>
<p>To locate an object within a specific set of operators, you first select all the operators on the canvas and then choose <span class="bold">In Selected</span>. You can select multiple operators by holding down the Shift key while selecting operators.</p>
<p class="subhead2"><a id="BEIDAFHD"></a>Specifying the Search Criteria</p>
<p>To perform an advanced search, you must specify additional search criteria that further refines the search.</p>
<p><span class="bold">Find By</span></p>
<p>Use the Find By list to specify which name is necessary to search for an object. The options you can select are:</p>
<ul>
<li>
<p><span class="bold">Display Name:</span> Search either the physical names or the business names, depending on the Naming Mode set.</p>
</li>
<li>
<p><span class="bold">Physical Name:</span> Search for an object containing the same physical name as the one specified in the Find field.</p>
</li>
<li>
<p><span class="bold">Business Name:</span> Search for an object containing the same business name as the one specified in the Find field.</p>
</li>
<li>
<p><span class="bold">Bound Name:</span> Search for an object containing the same bound name as the one specified in the Find field, if this property is available for the object.</p>
</li>
<li>
<p><span class="bold">Description:</span> Search for an object containing the same description as the one specified in the Find field, if this property is defined for the object.</p>
</li>
</ul>
<p class="subhead2"><a id="BEIHJEBE"></a>Match Options</p>
<p>Use the Match Options section to specify the matching options used while finding the object. The options that you can select are:</p>
<ul>
<li>
<p><span class="bold">Match Case:</span> Locates objects whose name and case match the search string specified in the Find field.</p>
<p>When searching by physical name, match case is set to false by default.</p>
<p>In physical name mode, everything a user creates must be in uppercase, but the imported objects may be in mixed case.</p>
<p>When searching by logical name, match case is set to true by default.</p>
</li>
<li>
<p><span class="bold">Whole Word Only:</span> Restricts matches to exclude those objects that do not match the entire search string, unless specifically overridden by a wildcard.</p>
</li>
<li>
<p><span class="bold">Regular Expression:</span> Supports the specification of a pattern, used for a Java regular expression as the search string. If Regular Expression is combined with Whole Word Only, then a boundary matcher "$" is appended to the search string pattern.</p>
<p>For more information about regular expression support, see <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</li>
</ul>
<p class="subhead2"><a id="BEIEBDFD"></a>Find Options</p>
<p>Specifies options for managing the search operation. Select one of the following options:</p>
<ul>
<li>
<p><span class="bold">Incremental:</span> Performs a search after any character is typed or if characters are removed from the search string. Use the Find button to find additional objects that match the search string</p>
</li>
<li>
<p><span class="bold">Wrap Find:</span> Continues the search operation with the first object when the last object in the set has been reached.</p>
</li>
<li>
<p><span class="bold">Find from Beginning:</span> Continues the search with the first object in the set.</p>
</li>
</ul>
<p class="subhead2"><a id="BEIBAHEJ"></a>Scope</p>
<p>Use this section to restrict the scope of the search.</p>
<p><span class="bold">In Selected:</span> Select this option to locate the search string only among the objects currently selected in the Mapping Editor.</p>
<p class="subhead2"><a id="BEICAFFD"></a>Direction</p>
<p>Use the Direction section to step through the objects in the search result set either forward or backward. Select <span class="bold">Next</span> to step forward through the result set and <span class="bold">Previous</span> to step backward through the result set.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEICEJFD"></a><a id="WBETL05018"></a>
<div class="sect1">
<h2 class="sect1">Debugging Mappings</h2>
<p><a id="sthref934"></a><a id="sthref935"></a>You can use the Mapping Editor to debug complex data flows that you design in mappings. Once you begin a debug session and connect to a valid target schema, the debugging functions appear on the Mapping Editor toolbar and under Log window. You can run a debugging session using a defined set of test data, and follow the flow of data as it is extracted, transformed, and loaded to ensure that the designed data flow performs as expected. If you find problems, then you can correct them and restart the debug session to ensure that the problems have been fixed before proceeding to deployment.</p>
<p>When you modify a mapping that is being debugged, the mapping properties are changed. Unless display sets in operators are modified, the Mapping Debugger reinitializes to reflect the changes to the mapping.</p>
<p><a id="sthref936"></a><span class="subhead3">Before You Begin&nbsp;</span></p>
<p>Ensure that you are connected to a Control Center and that the Control Center is running.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref937"></a>
<h3 class="sect2">General Restrictions in the <a id="sthref938"></a><a id="sthref939"></a>Mapping Debugger</h3>
<p>The following restrictions and limitations apply to the Mapping Debugger.</p>
<ul>
<li>
<p>Mappings run using the debug mode in the Mapping Editor are intended to be used for debug purposes only. Mappings run from the Mapping Editor do not perform and mappings that are run from the Control Center. This is attributed to the setup of temporary objects necessary to support the debugging capabilities. Use the Control Center to run mappings.</p>
</li>
<li>
<p>You cannot pause an active debug run using the Pause button on the toolbar or the associated item in the debug menu.</p>
</li>
<li>
<p>You cannot use the Repository Browser to view the results of a mapping run in debug mode.</p>
</li>
<li>
<p>Only mappings that can be implemented as a PL/SQL package can currently be run in debug mode. ABAP mappings are not supported in the debugger.</p>
</li>
<li>
<p>The Advanced Queue operator is not supported when you run mappings in debug mode.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1006054"></a>
<div class="sect2">
<h3 class="sect2">Starting a Debug Session</h3>
<p>To start a debug session, open the mapping to debug in the Mapping Editor. From the Debug menu, select <span class="bold">Start</span>. Or, click <span class="bold">Start</span> on the Mapping Editor toolbar. The Mapping Editor switches to debug mode with the debug panels appearing in the Log window, and the debugger connects to the appropriate Control Center for the project. The debug-generated code is deployed to the target schema specified by the location of the module that contains the map being debugged.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
When the connection cannot be made, an error message is displayed and you have an option to edit the connection information and retry.</div>
<p>After the connection has been established, a message appears, indicating that you may want to define test data. When you have previously defined test data, then you are asked to continue with initialization.</p>
<p>To debug a mapping, each source or target operator must be bound to a database object. Defining test data for the source and target operators is optional. By default, the debugger uses the same source and target data that is currently defined for the non-debug deployment of the map.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref940"></a>
<h3 class="sect2">Debug Panels of the Design Center</h3>
<p>When the Mapping Editor is opened in Debug mode, the Log window displays two new panels: <a href="#CIHDCJGC">"Info Panel"</a> and <a href="#CIHJEAFA">"Data Panel"</a>.</p>
<a id="CIHDCJGC"></a>
<div class="sect3">
<h4 class="sect3">Info Panel</h4>
<p>When the Mapping Editor is in Debug mode, the Info panel in the Log window contains the following tabs:</p>
<ul>
<li>
<p><span class="bold">Messages:</span> Displays all debugger operation messages. These messages let you know the status of the debug session. This includes any error messages that occur while running the mapping in debug mode.</p>
</li>
<li>
<p><span class="bold">Breakpoints:</span> Displays a list of all breakpoints that you have set in the mapping. You can use the check boxes to activate and deactivate breakpoints. For more information, see <a href="#i1006052">"Setting Breakpoints"</a>.</p>
</li>
<li>
<p><span class="bold">Test Data:</span> Displays a list of all data objects used in the mapping. The list also indicates which data objects have test data defined.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHJEAFA"></a>
<div class="sect3">
<h4 class="sect3">Data Panel</h4>
<p>When the Mapping Editor is in Debug mode, the Data panel is displayed in the Log window. The Data panel includes Step Data and watch point tabs, that contain input and output information for the operators being debugged. The Step Data tab contains information about the current step in the debug session. Additional tabs can be added for each watch that you set. These watch tabs enable you to keep track of and view data that has passed or should pass through an operator regardless of the currently active operator in the debug session. Operators that have multiple input group or multiple output group display an additional list that enables you to select a specific group.</p>
<p>If an operator has multiple input or output group then the debugger must have a list in the upper-right corner, above the input or output groups. Use this list to select the group you are interested in. This applies both to the step data and to a watch.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006053"></a>
<div class="sect2">
<h3 class="sect2">Defining Test Data</h3>
<p><a id="sthref941"></a><a id="sthref942"></a><a id="sthref943"></a>Every source or target operator in the mapping is listed on the Test Data tab in the lower Info tab panel. It also contains the object type, the source, and a check mark that indicates whether the database object has been bound to the source or target operator.</p>
<p>The object type listed on the tab is determined by whether the column names in the data source that you select (for example, a table) matches the columns in the mapping operators. There are two possible types:</p>
<ul>
<li>
<p><span class="bold">Direct Access</span>. When there is an exact match, the type is listed as Direct Access.</p>
</li>
<li>
<p><span class="bold">Deployed as View</span>. When you choose a data source with columns that do not match the mapping operator columns, you can choose how you want the columns mapped. This object is deployed as a view when you run the mapping and the type is listed as Deployed as View.</p>
</li>
</ul>
<p>Click <span class="bold">Edit</span> to add or change the binding of an operator and the test data in the bound database objects. Before you can run the mapping in debug mode, each listed source or target operator must be bound and have a check mark. The requirement to have test data defined and available in the bound database object depends on what aspect of the data flow you are interested in focusing on when running the debug session. Typically, you should need test data for all source operators. Test data for target operators is usually necessary to debug loading scenarios that involve updates or target constraints.</p>
<p><span class="bold">To define or edit test data:</span></p>
<ol>
<li>
<p>From the Test Data tab in the Mapping Editor, select an operator from the list and click <span class="bold">Edit</span>. The Define Test Data dialog box is displayed.</p>
</li>
<li>
<p>In the Define Test Data dialog box, specify the characteristics of the test data Oracle Warehouse Builder to use when it debugs. There are many characteristics that you can specify. For example, you can specify that the test data be from a new or existing database object or that you can or cannot manually edit the test data. Click <span class="bold">Help</span> on the Define Test Data dialog box for more information.</p>
</li>
</ol>
<a id="i1006875"></a><a id="WBETL05002"></a>
<div class="sect3">
<h4 class="sect3">Creating New Tables to Use as Test Data</h4>
<p>When you create a new table using the Define Test Data dialog box, Oracle Warehouse Builder creates the table in the target schema that you specified when you started the debug run. Because the debugger does not automatically drop this table when you end the debug session, you can reuse it for other sessions. Constraints are not carried over for the new table. However, all other staging tables created by the debug session are dropped when the debug session ends.</p>
<p>When you create a new table, Oracle Warehouse Builder creates the new table in the connected run time schema. The new table has an automatically generated name, and the value of the Debug Binding name changes to reflect the new table name. The new table has columns defined for it that exactly match the names and data types of the mapping source or target attributes. In addition, any data that is displayed in the grid at the time the table is created is copied into the newly created table.</p>
<p>You can use both scalar and user-defined data types in tables that you create using the Define Test Data dialog box.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref944"></a>
<h4 class="sect3">Editing the Test Data</h4>
<p>You can edit test data at any time using the Define Test Data dialog box. Editing test data is applicable for scalar data types only.</p>
<p>If you change the binding of the operator to another database object, you must reinitialize the debug session to implement the change before running the mapping again in debug mode.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
The data loaded in the target definitions are implicitly committed. If you do not want the target objects updated, then you should create copies of target objects by clicking <span class="bold">Create New Table</span>.</div>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref945"></a>
<h4 class="sect3">Cleaning Up Debug Objects in the Runtime Schema</h4>
<p>Debug tables, with names prefixed with <code>DBG$</code>, are created in the run time schema when you debug mappings. Because multiple users, using multiple instances, can debug the same mapping, debug objects are created separately for each debug session. The debug objects for a session are automatically dropped after the session. However, if the user abruptly exits the Design Center without exiting the mapping debugger, the debug objects for the debug session in progress are not dropped, and become stale objects.</p>
<p>However, you can clean up all debug objects in the run time schema by using the <code><span class="codeinlineitalic">OWB_HOME</span></code><code>/bin/admin/cleanupalldebugobjects.sql</code> script. This script drops all the stale objects prefixed by <code>DBG$</code> in the run time repository user schema.</p>
<p>This script should be run by an Oracle Warehouse Builder user with administrator privileges. Before you run this script, determine if all the objects that are prefixed by <code>DBG$</code> in the run time user schema are stale. Because the same mapping can be debugged using multiple instances, running this script causes disruptions for other users debugging the same mapping.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006052"></a>
<div class="sect2">
<h3 class="sect2">Setting Breakpoints</h3>
<p>If you are interested in how a specific operator is processing data, you can set a breakpoint on that operator to cause a break in the debug session. It enables you to proceed quickly to a specific operator in the data flow without having to go through all the operators step by step. When the debug session gets to the breakpoint, you can run data through the operator step by step to ensure that it is functioning as expected.</p>
<p><span class="bold">To set or remove a breakpoint:</span></p>
<ol>
<li>
<p>From the Mapping Editor, click an operator, select <span class="bold">Debug</span>, and then select <span class="bold">Set Breakpoint.</span> You can also click <span class="bold">Set Breakpoint</span> on the toolbar to toggle the breakpoint on and off for the currently highlighted operator.</p>
<p>If you are setting the breakpoint, the name of the operator set as a breakpoint appears in the list on the Breakpoints tab on the Info panel. If you are removing the breakpoint, then the name is removed. Use the <span class="bold">Clear</span> button on the Breakpoint tab to remove breakpoints.</p>
</li>
<li>
<p>Deselect or select the breakpoints on the Breakpoint tab to disable or enable them.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1006051"></a>
<div class="sect2">
<h3 class="sect2">Setting Watches</h3>
<p>The Step Data tab on the <a href="#CIHJEAFA">"Data Panel"</a> always shows the data for the current operator. To keep track of data that has passed through any other operator irrespective of the active operator, you can set a watch.</p>
<p>Use watches to track data that has passed through an operator or for sources and targets, the data that currently resides in the bound database objects. You can also set watches on operators after the debug run has passed the operator and look back to see how the data was processed by an operator in the data flow.</p>
<p><span class="bold">To set a watch:</span></p>
<p>From the Mapping Editor, select an operator. From the Debug menu, select <span class="bold">Set Watch.</span> You can also select the operator and click <span class="bold">Set Watch</span> on the Mapping Editor toolbar to toggle the watch on and off.</p>
<p>A separate Watch panel is displayed to view data for Constant, Mapping Input, Mapping Output, Pre Mapping, Post Mapping, and Sequence operators. Since these operators contain lesser information than other operators, information regarding multiple of these operators is displayed in the Watch panel. Thus, only one instance of Watch panel is displayed for these operators if you choose to watch values.</p>
<p><span class="bold">To remove a watch:</span></p>
<p>To remove a watch, select the operator on the Mapping Editor canvas. Then, click <span class="bold">Set Watch</span> on the Mapping Editor toolbar or select <span class="bold">Set Watch</span> from the Debug menu.</p>
<p>If a watch panel consists of non-data based operators such as Constant, Mapping Input, Mapping Output, Pre Mapping, Post Mapping, and Sequence, you can remove these operators by right-clicking the operator and selecting <span class="bold">Remove</span>. You can remove all these operators by closing the Watch panel.</p>
<p class="subhead2"><a id="sthref946"></a>Saving Watches</p>
<p>When you set a watch for an operator, Oracle Warehouse Builder automatically saves the watch points for this operator, unless you close the watch panels. When you end the debug session and start again, the tabs for operator watches that you created are displayed.</p>
<p>If you do not want to save watch points, click <span class="bold">Set Watch</span> in the Mapping Debugger toolbar or close the tab related to the Watch point.</p>
</div>
<!-- class="sect2" -->
<a id="i1006050"></a>
<div class="sect2">
<h3 class="sect2">Running the Mapping</h3>
<p>After you have defined the test data connections for each of the data operators, you can initially generate the debug code by selecting <span class="bold">Reinitialize</span> from the Debug menu, or by clicking <span class="bold">Reinitialize</span> on the Mapping Editor toolbar. Oracle Warehouse Builder generates the debug code and deploys the package to the target schema that you specified.</p>
<p>You can run the debug session in one of the following modes:</p>
<ul>
<li>
<p>Continue processing until the next breakpoint or until the debug run finishes by using the Resume button on the toolbar or the associated menu item.</p>
</li>
<li>
<p>Process row by row using the Step button on the toolbar or the associated menu item.</p>
</li>
<li>
<p>Process all remaining rows for the current operator by using the Skip button on the toolbar or the associated menu item.</p>
</li>
<li>
<p>Reset the debug run and go back to the beginning by using the Reset button or the associated item from the Debug menu.</p>
</li>
</ul>
<div class="sect3"><a id="sthref947"></a>
<h4 class="sect3">Selecting the First Source and Path to Debug</h4>
<p>A mapping may have multiple source and multiple path to debug:</p>
<ul>
<li>
<p>When a mapping has multiple source, Oracle Warehouse Builder prompts you to designate the source with which to begin. For example, when two tables are mapped to a joiner, you must select the first source table to use when debugging.</p>
</li>
<li>
<p>There may be multiple paths that the debugger can walk through after it has finished one path. For example, this is the case when you use a splitter. Having finished one path, the debugger asks you whether you would like to complete the other paths as well.</p>
</li>
</ul>
<p>The mapping finishes if all target operators have been processed or if the maximum number of errors as configured for the mapping has been reached. The debug connection and test data definitions are stored when you commit changes to Oracle Warehouse Builder workspace. Breakpoint and watch settings are stored when you save the project.</p>
<p>As the debugger runs, it generates debug messages whenever applicable. You can follow the data flow through the operators. A red dashed box surrounds the active operator.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref948"></a>
<h4 class="sect3">Debugging Mappings with Correlated Commit</h4>
<p>How a mapping is debugged depends on whether the mapping has the Correlated Commit parameter set to ON or OFF:</p>
<ul>
<li>
<p>When you begin a debug session for a mapping that has the Correlated Commit parameter set to ON, the mapping is not debugged using paths. Instead, all paths are run and all targets are loaded during the initial stepping through the mapping regardless of what path is chosen. Also, if one of the targets has a constraint violation for the step, then none of the targets are loaded for that step.</p>
</li>
<li>
<p>When you begin a debug session for a mapping that has the Correlated Commit parameter set to OFF, the mapping is debugged using one path at a time. All other paths are left unexecuted and all other targets are not loaded unless you reach the end of the original path and return to run another path in the mapping.</p>
</li>
</ul>
<p>For example, you have a mapping that has a source, S1, connected to a splitter that goes to two targets, T1 and T2:</p>
<ul>
<li>
<p>If Correlated Commit is OFF, then the mapping is debugged starting with S1. You can then choose either the path going to T1 or the path going to T2. If you choose the path to T1, then the data going to T1 is processed and displayed, and the target T1 is loaded. After T1 is completely loaded, you are given the option to go back, run the other path, and load target T2.</p>
</li>
<li>
<p>If Correlated Commit is ON, then the mapping is also debugged starting with S1, and you are given the option of choosing a path however in this case, the path you choose only determines the path that gets displayed in the Mapping Editor as you step through the data. All paths are run simultaneously. This is also how a mapping using Correlated Commit is run when the deployable code is run.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref949"></a>
<h4 class="sect3">Setting a Starting Point</h4>
<p><a id="sthref950"></a><a id="sthref951"></a><a id="sthref952"></a>You can select an operator as a starting point, even if it is not a source. To set an operator as a starting point, start a debug session, then select the operator and click <span class="bold">Set as Starting Point</span> on the Mapping Editor toolbar. Or, from the Debug menu, select <span class="bold">Set as Starting Point</span>.</p>
<p>When an operator is set as a starting point, Oracle Warehouse Builder combines all the upstream operators and sources into a single query, which is used as a source, and the operator is automatically used as the first source when stepping through the map. The operators that are upstream of the starting point operator are not steppable, and do not have displayable data, even if a watch point is set.</p>
<p>A good use of "set as starting point" would be for a mapping with three source tables that were all connected to a single Joiner operator. Each source table contains a large number of rows (more than 50000 rows), too many rows to efficiently step through in the debugger. In this case, set the Joiner operator as a starting point, and limit the row count for one of the source tables to a more manageable number of rows (500) by using the Test Data Editor. It would be best to limit the row count of the source table that is effectively driving the joiner (that is, the source with which all the other sources are joined in the join condition).</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref953"></a>
<h4 class="sect3">Debugging Pluggable Submap Operators</h4>
<p>You can also debug a map which contains one or more pluggable submap operators. This could include a user-defined pluggable submap operator from the pluggable folder, or a system-defined submap operator. When the debug session is started, the mapping passes through debug initialization and start stepping at the first executable operator, just as usual.</p>
<p>While stepping through the operator, the debugger reaches a pluggable submap operator, then that operator is highlighted as the current step operator just like any other operator. If you click <span class="bold">Step</span> at this point, then the debugger steps through all of the operators contained by the pluggable submap without changing the graphical context of the map to show the implementation of the pluggable map. If you click <span class="bold">Step Into</span>, then the graphical context of the map changes to the pluggable mapping implementation, and the current step operator is set to the first executable source operator inside the pluggable mapping. The first executable source operator for the pluggable submap is one of the operators connected from the input signature operator.</p>
<p>You can now step through the pluggable mapping just as you would any other type of map. When the pluggable submap operator contains targets, the debugger loads theses just as it does for a top-level map. When the final executable operator is done executing, then the next time you click <span class="bold">Step</span>, the context changes back to the top-level map and begins execution at the next executable operator following the pluggable submap that was just run. When the pluggable submap has no output connections, and it is the final executable operator in the top-level map, then stepping is done.</p>
<p>You can set breakpoints and watch points on operators inside of a pluggable submap. Additionally, during normal editing, you can change the graphical context as you do in normal editing, by clicking <span class="bold">Visit Child Graph</span> and <span class="bold">Return to Parent Graph</span>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006049"></a>
<div class="sect2">
<h3 class="sect2">ReInitializing a Debug Session</h3>
<p>When you have made changes to the mapping, or have bound source or target operators to different database objects, then you must reinitialize the debug session to continue debugging the mapping with the new changes. To reinitialize, click <span class="bold">Reinitialize</span> on the toolbar or select Reinitialize from the Debug menu. Reinitializing both regenerates and redeploys the debug code. After reinitialization, the mapping debug session starts from the beginning.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref954"></a>
<h3 class="sect2">Scalability</h3>
<p>Scalability when debugging a mapping applies both to the amount of data that is passed and to the number of columns displayed in the Step Data panel. The Define Test Data dialog box provides a row limit that you can use to limit the amount of data that flows through the mapping. Also, you can define your own data set by creating your own table and manipulating the records manually.</p>
<p>To restrict the number of columns displayed on the Step Data tab, or on a watch tab, you can use display sets. By default, every operator has a display set ALL and a display set MAPPED (to display only the mapped attributes). You can manually add display sets on sources by using the Mapping Editor directly. Select the Use Display Set option under the right mouse button on an input or output group to select the display set.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2968">
<tr>
<td class="cellalignment2977">
<table class="cellalignment2973">
<tr>
<td class="cellalignment2972"><a href="transformdata_intro.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2972"><a href="dim_mappings.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2980">
<table class="cellalignment2971">
<tr>
<td class="cellalignment2972"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2972"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2972"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2972"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2972"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2972"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
