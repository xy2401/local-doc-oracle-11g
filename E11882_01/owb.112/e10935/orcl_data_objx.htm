<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Creating Relational Data Objects</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 037" />
<meta name="dcterms.created" content="2011-09-21T18:21:21Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Warehouse Builder Data Modeling, ETL, and Data Quality Guide" />
<meta name="dcterms.identifier" content="E10935-05" />
<meta name="dcterms.isVersionOf" content="WBETL" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="design_tgt_schemas.htm" title="Previous" type="text/html" />
<link rel="Next" href="dim_objects.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10935.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/37</span> <!-- End Header --><a id="BEHHJAIC"></a><a id="WBETL02000"></a><a id="i85798"></a>
<h1 class="chapter"><span class="secnum">2</span> Creating Relational Data Objects</h1>
<p><a id="ABC1672340"></a><a id="ABC1672340SRI1"></a>After you finish designing your data warehouse or data mart, you are ready to design your target system. This chapter shows you how to create relational data objects.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#BCGEIAHA">"Overview of Data Objects"</a></p>
</li>
<li>
<p><a href="#i113698">"Defining Tables"</a></p>
</li>
<li>
<p><a href="#i113733">"Defining Views"</a></p>
</li>
<li>
<p><a href="#i99426">"Defining Materialized Views"</a></p>
</li>
<li>
<p><a href="#BEHHFADI">"Defining Constraints"</a></p>
</li>
<li>
<p><a href="#BABCJDBD">"Defining Indexes"</a></p>
</li>
<li>
<p><a href="#BEHGEGGI">"Defining Partitions"</a></p>
</li>
<li>
<p><a href="#BEHCCAGI">"Defining Attribute Sets"</a></p>
</li>
<li>
<p><a href="#i99577">"Defining Sequences"</a></p>
</li>
<li>
<p><a href="#CEGJJIJG">"Defining User-Defined Types"</a></p>
</li>
<li>
<p><a href="#BEHGGGAI">"Defining Queues"</a></p>
</li>
<li>
<p><a href="#CHDHFJEA">"Configuring Relational Data Objects"</a></p>
</li>
<li>
<p><a href="#BABBGJHF">"Creating Relational Data Objects in Microsoft SQL Server and IBM DB2 UDB"</a></p>
</li>
</ul>
<a id="BCGEIAHA"></a><a id="WBETL02017"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Overview of Data <a id="sthref40"></a>Objects</h2>
<p>Oracle Warehouse Builder supports relational and dimensional data objects. Relational objects, like relational databases, rely on tables and table-derived objects to store and link all of their data. The relational objects you define are physical containers in the database that are used to store data. It is from these relational objects that you run queries after the warehouse has been created. Relational objects include tables, views, materialized views, sequences, user-defined types, and queues. You can also create optional structures associated with relational objects such as constraints, indexes, partitions, and attribute sets.</p>
<p>Dimensional objects contain additional metadata to identify and categorize your data. When you define dimensional objects, you describe the logical relationships that help store the data in a more structured format. Dimensional objects include dimensions and cubes.</p>
<p><a id="sthref41"></a>The Oracle module contains nodes for each type of relational and dimensional data object that you can define in Oracle Warehouse Builder. In the Projects Navigator, expand the module to view nodes for all the supported data objects.</p>
<p>In addition to relational and dimensional objects, Oracle Warehouse Builder supports intelligence objects. Intelligence objects are not part of Oracle modules. They are displayed under the Business Intelligence node in the Projects Navigator. Intelligence objects enable you to store definitions of business views. You can deploy these definitions to analytical tools such as Oracle Discoverer and perform ad hoc queries on the warehouse.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink WBDOD" href="../e10582/toc.htm"><span class="italic">Oracle Warehouse Builder Sources and Targets Guide</span></a> for more information about creating business definitions for Oracle BI Discoverer</div>
<p class="subhead2"><a id="sthref42"></a>List of Oracle Warehouse Builder <a id="sthref43"></a>Data Objects</p>
<p><a href="#BCGGEDBB">Table 2-1</a> describes the types of data objects that you can use in Oracle Warehouse Builder.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref44"></a><a id="BCGGEDBB"></a>Table 2-1 Data Objects in Oracle Warehouse Builder</p>
<table class="cellalignment2975" title="Data Objects in Oracle Warehouse Builder" summary="Lists and describes the types of data objects you can use in Warehouse Builder." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t3">Data Object</th>
<th class="cellalignment2976" id="r1c2-t3">Type</th>
<th class="cellalignment2976" id="r1c3-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t3" headers="r1c1-t3">
<p>Tables</p>
</td>
<td class="cellalignment2977" headers="r2c1-t3 r1c2-t3">
<p>Relational</p>
</td>
<td class="cellalignment2977" headers="r2c1-t3 r1c3-t3">
<p>The basic unit of storage in a relational database management system. a table is created, valid rows of data can be inserted into it. Table information can then be queried, deleted, or updated. To enforce defined business rules on its data, define integrity constraints for a table.</p>
<p>See <a href="#i113698">"Defining Tables"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t3" headers="r1c1-t3">
<p>External Tables</p>
</td>
<td class="cellalignment2977" headers="r3c1-t3 r1c2-t3">
<p>Relational</p>
</td>
<td class="cellalignment2977" headers="r3c1-t3 r1c3-t3">
<p>External tables are tables that represent data from non-relational flat files in a relational format. Use an external table as an alternative to using a Flat File operator and SQL*Loader.</p>
<p>See <a class="olink WBDOD10584" href="../../owb.112/e10582/defining_flatfiles.htm#WBDOD10584"><span class="italic">Oracle Warehouse Builder Sources and Targets Guide</span></a> for more information about external tables.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t3" headers="r1c1-t3">
<p>Views</p>
</td>
<td class="cellalignment2977" headers="r4c1-t3 r1c2-t3">
<p>Relational</p>
</td>
<td class="cellalignment2977" headers="r4c1-t3 r1c3-t3">
<p>A view is a custom-tailored presentation of data in one or more tables. Views do not actually contain or store data; they derive their data from the tables on which they are based. Like tables, views can be queried, updated, inserted into, and deleted from, with some restrictions. All operations performed on a view affect the base tables of the view. Use views to simplify the presentation of data or to restrict access to data.</p>
<p>See <a href="#i113733">"Defining Views"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t3" headers="r1c1-t3">
<p>Materialized Views</p>
</td>
<td class="cellalignment2977" headers="r5c1-t3 r1c2-t3">
<p>Relational</p>
</td>
<td class="cellalignment2977" headers="r5c1-t3 r1c3-t3">
<p>Materialized views are precomputed tables comprising aggregated or joined data from fact and possibly dimension tables. Also known as a summary or aggregate table. Use materialized views to improve query performance.</p>
<p>See <a href="#i99426">"Defining Materialized Views"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r6c1-t3" headers="r1c1-t3">
<p>Sequences</p>
</td>
<td class="cellalignment2977" headers="r6c1-t3 r1c2-t3">
<p>Relational</p>
</td>
<td class="cellalignment2977" headers="r6c1-t3 r1c3-t3">
<p>Sequences are database objects that generate lists of unique numbers. You can use sequences to generate unique surrogate key values.</p>
<p>See <a href="#i99577">"Defining Sequences"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r7c1-t3" headers="r1c1-t3">
<p>Dimensions</p>
</td>
<td class="cellalignment2977" headers="r7c1-t3 r1c2-t3">
<p>Dimensional</p>
</td>
<td class="cellalignment2977" headers="r7c1-t3 r1c3-t3">
<p>A general term for any characteristic that is used to specify the members of a data set. The three most common dimensions in sales-oriented data warehouses are time, geography, and product. Most dimensions have hierarchies.</p>
<p>See <a href="dim_objects.htm#BABBDDCA">"Overview of Dimensions"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r8c1-t3" headers="r1c1-t3">
<p>Cubes</p>
</td>
<td class="cellalignment2977" headers="r8c1-t3 r1c2-t3">
<p>Dimensional</p>
</td>
<td class="cellalignment2977" headers="r8c1-t3 r1c3-t3">
<p>Cubes contain measures and links to one or more dimension tables. They are also known as facts.</p>
<p>See <a href="dim_objects.htm#BABHDFIG">"Overview of Cubes"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r9c1-t3" headers="r1c1-t3">
<p>Advanced Queues</p>
</td>
<td class="cellalignment2977" headers="r9c1-t3 r1c2-t3">
<p>Relational</p>
</td>
<td class="cellalignment2977" headers="r9c1-t3 r1c3-t3">
<p>Advanced queues enable message management and communication required for application integration.</p>
<p>See <a href="#BEHBGIEG">"Creating Advanced Queue Definitions"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r10c1-t3" headers="r1c1-t3">
<p>Queue Tables</p>
</td>
<td class="cellalignment2977" headers="r10c1-t3 r1c2-t3">
<p>Relational</p>
</td>
<td class="cellalignment2977" headers="r10c1-t3 r1c3-t3">
<p>Queue tables are tables that store queues. Each queue table contains a payload, whose data type is specified at the time of creating the queue table.</p>
<p>See <a href="#BEHFBCBG">"Creating Queue Table Definitions"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r11c1-t3" headers="r1c1-t3">
<p>Object Types</p>
</td>
<td class="cellalignment2977" headers="r11c1-t3 r1c2-t3">
<p>Relational</p>
</td>
<td class="cellalignment2977" headers="r11c1-t3 r1c3-t3">
<p>An object type is composed of one or more user-defined types or scalar types.</p>
<p>See <a href="#BABEGJEG">"About Object Types"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r12c1-t3" headers="r1c1-t3">
<p>Varrays</p>
</td>
<td class="cellalignment2977" headers="r12c1-t3 r1c2-t3">
<p>Relational</p>
</td>
<td class="cellalignment2977" headers="r12c1-t3 r1c3-t3">
<p>A Varray is an ordered collection of elements.</p>
<p>See <a href="#BABDGFEE">"About Varrays"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r13c1-t3" headers="r1c1-t3">
<p>Nested Tables</p>
</td>
<td class="cellalignment2977" headers="r13c1-t3 r1c2-t3">
<p>Relational</p>
</td>
<td class="cellalignment2977" headers="r13c1-t3 r1c3-t3">
<p>A nested table complements the functionality of the Varray data type. A nested table permits a row to have multiple "mini-rows" of related data contained within one object.</p>
<p>See <a href="#BABIDJAG">"About Nested Tables"</a> for more information.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="CHDFIADI"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Supported Data Types<a id="sthref45"></a></h3>
<p>The metadata for the data objects that you create is stored in the repository. The metadata consists of details such as the attribute or column names, data types, and level names.</p>
<p><a id="sthref46"></a><a href="#CHDBACFH">Table 2-2</a> displays the data types that you can use to define columns or attributes.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref47"></a><a id="CHDBACFH"></a>Table 2-2 Oracle Warehouse Builder Supported Data Types</p>
<table class="cellalignment2975" title="Oracle Warehouse Builder Supported Data Types" summary="Table of data types supported in Warehouse Builder." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t4">Data Type</th>
<th class="cellalignment2976" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t4" headers="r1c1-t4">
<p><code>BINARY_DOUBLE</code><a id="sthref48"></a></p>
</td>
<td class="cellalignment2977" headers="r2c1-t4 r1c2-t4">
<p>Stores double-precision IEEE 754-format single-precision floating-point numbers. Used primarily for high-speed scientific computation. Literals of this type end with <code>d</code>. For example, 3.0235<code>d</code>.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t4" headers="r1c1-t4">
<p><code>BINARY_FLOAT</code><a id="sthref49"></a></p>
</td>
<td class="cellalignment2977" headers="r3c1-t4 r1c2-t4">
<p>Stores single-precision IEEE 754-format single-precision floating-point numbers. Used primarily for high-speed scientific computation. Literals of this type end with <code>f</code>. For example, 2.07<code>f</code>.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t4" headers="r1c1-t4">
<p><code>BLOB</code><a id="sthref50"></a></p>
</td>
<td class="cellalignment2977" headers="r4c1-t4 r1c2-t4">
<p>Stores large binary objects in the database, inline or out-of-line. Every <code>BLOB</code> variable stores a locator, which points to a large binary object. The size of a <code>BLOB</code> cannot exceed 4 gigabytes.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t4" headers="r1c1-t4">
<p><a id="sthref51"></a><code>CHAR</code></p>
</td>
<td class="cellalignment2977" headers="r5c1-t4 r1c2-t4">
<p>Stores fixed-length character data to a maximum size of 4,000 characters. How the data is represented internally depends on the database character set. You can specify the size in terms of bytes or characters, where each character contains one or more bytes, depending on the character set encoding.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r6c1-t4" headers="r1c1-t4">
<p><code>CLOB</code><a id="sthref52"></a></p>
</td>
<td class="cellalignment2977" headers="r6c1-t4 r1c2-t4">
<p>Stores large blocks of character data in the database, inline or out-of-line. Both fixed-width and variable-width character sets are supported. Every <code>CLOB</code> variable stores a locator that points to a large block of character data. The size of a <code>CLOB</code> cannot exceed four gigabytes.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r7c1-t4" headers="r1c1-t4">
<p><a id="sthref53"></a><code>DATE</code></p>
</td>
<td class="cellalignment2977" headers="r7c1-t4 r1c2-t4">
<p>Stores fixed-length date times, which include the time of day in seconds since midnight. The date defaults to the first day of the current month; the time defaults to midnight. The date function <code>SYSDATE</code> returns the current date and time.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r8c1-t4" headers="r1c1-t4">
<p><code>FLOAT</code><a id="sthref54"></a></p>
</td>
<td class="cellalignment2977" headers="r8c1-t4 r1c2-t4">
<p>Stores a single-precision, floating-point number. <code>FLOAT</code> can be loaded with correct results only between systems where the representation of a <code>FLOAT</code> is compatible and of the same length.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r9c1-t4" headers="r1c1-t4">
<p><code>INTEGER</code><a id="sthref55"></a></p>
</td>
<td class="cellalignment2977" headers="r9c1-t4 r1c2-t4">
<p>A <code>NUMBER</code> subtype that stores integer values with a maximum precision of 38 decimal digits.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r10c1-t4" headers="r1c1-t4">
<p><code>INTERVAL DAY TO SECOND</code><a id="sthref56"></a></p>
</td>
<td class="cellalignment2977" headers="r10c1-t4 r1c2-t4">
<p>Stores intervals of days, hours, minutes, and seconds.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r11c1-t4" headers="r1c1-t4">
<p><code>INTERVAL YEAR TO MONTH</code><a id="sthref57"></a></p>
</td>
<td class="cellalignment2977" headers="r11c1-t4 r1c2-t4">
<p>Stores intervals of years and months.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r12c1-t4" headers="r1c1-t4">
<p><code>LONG</code><a id="sthref58"></a></p>
</td>
<td class="cellalignment2977" headers="r12c1-t4 r1c2-t4">
<p>Stores fixed-length character strings. The <code>LONG</code> data type is like the <code>VARCHAR2</code> data type, except that the maximum length of a <code>LONG</code> value is 2147483647 bytes (2 gigabytes).</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r13c1-t4" headers="r1c1-t4">
<p><code>LONG RAW</code><a id="sthref59"></a></p>
</td>
<td class="cellalignment2977" headers="r13c1-t4 r1c2-t4">
<p>Stores binary data or byte strings. Use this data type to store graphics, sounds, documents, or arrays of binary data.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r14c1-t4" headers="r1c1-t4">
<p><code>MDSYS.SDOAGGRTYPE</code><a id="sthref60"></a></p>
</td>
<td class="cellalignment2977" headers="r14c1-t4 r1c2-t4">
<p>Stores the geometric description of a spatial object and the tolerance. Tolerance is used to determine when two points are close enough to be considered as the same point.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r15c1-t4" headers="r1c1-t4">
<p><code>MDSYS.SDO_DIM_ARRAY</code><a id="sthref61"></a></p>
</td>
<td class="cellalignment2977" headers="r15c1-t4 r1c2-t4">
<p>Stores an array of type <code>MDSYS.SDO_DIM_ELEMENT</code>.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r16c1-t4" headers="r1c1-t4">
<p><code>MDSYS.SDO_DIM_ELEMENT</code><a id="sthref62"></a></p>
</td>
<td class="cellalignment2977" headers="r16c1-t4 r1c2-t4">
<p>Stores the dimension name, lower boundary, upper boundary, and tolerance.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r17c1-t4" headers="r1c1-t4">
<p><code>MDSYS.SDO_ELEM_INFO_ARRAY</code><a id="sthref63"></a></p>
</td>
<td class="cellalignment2977" headers="r17c1-t4 r1c2-t4">
<p>Stores an array of type <code>MDSYS.SDO_ORDINATE_ARRAY</code>.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r18c1-t4" headers="r1c1-t4">
<p><code>MDSYS.SDO_GEOMETRY</code><a id="sthref64"></a></p>
</td>
<td class="cellalignment2977" headers="r18c1-t4 r1c2-t4">
<p>Stores Geographical Information System (GIS) or spatial data in the database. For more information, see <a class="olink SPATL" href="../../appdev.112/e11830/toc.htm"><span class="italic">Oracle Spatial Developer's Guide</span></a>.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r19c1-t4" headers="r1c1-t4">
<p><code>MDSYS.SDO_ORDINATE_ARRAY</code><a id="sthref65"></a></p>
</td>
<td class="cellalignment2977" headers="r19c1-t4 r1c2-t4">
<p>Stores the list of all vertices that define the geometry.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r20c1-t4" headers="r1c1-t4">
<p><code>MDSYS.SDO_POINT_TYPE</code><a id="sthref66"></a></p>
</td>
<td class="cellalignment2977" headers="r20c1-t4 r1c2-t4">
<p>Stores two-dimensional and three-dimensional points.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r21c1-t4" headers="r1c1-t4">
<p><code>NCHAR</code><a id="sthref67"></a></p>
</td>
<td class="cellalignment2977" headers="r21c1-t4 r1c2-t4">
<p>Stores fixed-length (blank-padded, if necessary) national character data. Because this type can always accommodate multibyte characters, you can use it to hold any Unicode character data. How the data is represented internally depends on the national character set specified when the database was created, which might use a variable-width encoding (UTF8) or a fixed-width encoding (AL16UTF16).</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r22c1-t4" headers="r1c1-t4">
<p><code>NCLOB</code><a id="sthref68"></a></p>
</td>
<td class="cellalignment2977" headers="r22c1-t4 r1c2-t4">
<p>Stores large blocks of <code>NCHAR</code> data in the database, inline or out-of-line.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r23c1-t4" headers="r1c1-t4">
<p><code>NUMBER</code><a id="sthref69"></a></p>
</td>
<td class="cellalignment2977" headers="r23c1-t4 r1c2-t4">
<p>Stores real numbers in a fixed-point or floating-point format. Numbers using this data type are guaranteed to be portable among different Oracle platforms, and offer up to 38 decimal digits of precision. You can store positive and negative numbers, and zero, in a <code>NUMBER</code> column.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r24c1-t4" headers="r1c1-t4">
<p><code>NVARCHAR2</code><a id="sthref70"></a></p>
</td>
<td class="cellalignment2977" headers="r24c1-t4 r1c2-t4">
<p>Stores variable-length Unicode character data. Because this type can always accommodate multibyte characters, you can use it to hold any Unicode character data. How the data is represented internally depends on the national character set specified when the database was created, which might use a variable-width encoding (UTF8) or a fixed-width encoding (AL16UTF16).</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r25c1-t4" headers="r1c1-t4">
<p><a id="BEHGFFDF"></a><code>RAW</code><a id="sthref71"></a></p>
</td>
<td class="cellalignment2977" headers="r25c1-t4 r1c2-t4">
<p>Stores binary data or byte strings. For example, a <code>RAW</code> variable might store a sequence of graphics characters or a digitized picture. Raw data is like <code>VARCHAR2</code> data, except that PL/SQL does not interpret raw data.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r26c1-t4" headers="r1c1-t4">
<p><code>ROWID</code></p>
</td>
<td class="cellalignment2977" headers="r26c1-t4 r1c2-t4">
<p>Base 64 string representing the unique address of a row in its table. This data type is primarily for values returned by the <code>ROWID</code> pseudocolumn.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r27c1-t4" headers="r1c1-t4">
<p><a id="BEHFEEIJ"></a><code>SYS.ANYDATA</code><a id="sthref72"></a></p>
</td>
<td class="cellalignment2977" headers="r27c1-t4 r1c2-t4">
<p>An Oracle-supplied type that can contain an instance of a given type, with data, plus a description of the type. <code>ANYDATA</code> can be used as a table column data type and lets you store heterogeneous values in a single column. The values can be of SQL built-in types and user-defined types.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r28c1-t4" headers="r1c1-t4">
<p><a id="BEHIEHDD"></a><code>SYS.AQ$_JMS_BYTES_MESSAGE</code></p>
</td>
<td class="cellalignment2977" headers="r28c1-t4 r1c2-t4">
<p>A type that is the ADT (Abstract Data Type) used to store a <code>BytesMessage</code> in an Oracle Streams AQ queue.</p>
<p>A <code>BytesMessage</code> object is used to send a message containing a stream of uninterrupted bytes.</p>
<p>For more information about this data type, see:</p>
<ul>
<li>
<p><a class="olink ARPLS" href="../../appdev.112/e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
</li>
<li>
<p><a class="olink ADQUE" href="../../server.112/e11013/toc.htm"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r29c1-t4" headers="r1c1-t4">
<p><a id="BEHGJDCG"></a><code>SYS.AQ$_JMS_MAP_MESSAGE</code></p>
</td>
<td class="cellalignment2977" headers="r29c1-t4 r1c2-t4">
<p>A type that is the ADT used to store a <code>MapMessage</code> in an Oracle Streams AQ queue.</p>
<p>A <code>MapMessage</code> object is used to send a set of name-value pairs where the names are String types, and the values are Java primitive types.</p>
<p>For more information about this data type, see:</p>
<ul>
<li>
<p><a class="olink ARPLS" href="../../appdev.112/e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
</li>
<li>
<p><a class="olink ADQUE" href="../../server.112/e11013/toc.htm"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r30c1-t4" headers="r1c1-t4">
<p><a id="BEHFHCGC"></a><code>SYS.AQ$_JMS_MESSAGE</code></p>
</td>
<td class="cellalignment2977" headers="r30c1-t4 r1c2-t4">
<p>An ADT type that can represent any of five different JMS message types: text message, bytes message, stream message, map message, or object message. Queues created using this ADT can therefore store all five types of JMS messages.</p>
<p>For more information about this data type, see <a class="olink ARPLS" href="../../appdev.112/e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>:</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r31c1-t4" headers="r1c1-t4">
<p><a id="BEHFBFHE"></a><code>SYS.AQ$_JMS_STREAM_MESSAGE</code></p>
</td>
<td class="cellalignment2977" headers="r31c1-t4 r1c2-t4">
<p>A type that is the ADT used to store a <code>StreamMessage</code> in an Oracle Streams AQ queue. A <code>StreamMessage</code> object is used to send a stream of Java primitives. It is filled and read sequentially.</p>
<p>For more information about this data type, see:</p>
<ul>
<li>
<p><a class="olink ARPLS" href="../../appdev.112/e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
</li>
<li>
<p><a class="olink ADQUE" href="../../server.112/e11013/toc.htm"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r32c1-t4" headers="r1c1-t4">
<p><a id="BEHEFDIE"></a><code>SYS.AQ$_JMS_TEXT_MESSAGE</code></p>
</td>
<td class="cellalignment2977" headers="r32c1-t4 r1c2-t4">
<p>A type that is the ADT used to store a <code>TextMessage</code> in an Oracle Streams AQ queue. A <code>TextMessage</code> object is used to send a message containing a java.lang.StringBuffer.</p>
<p>For more information about this data type, see:</p>
<ul>
<li>
<p><a class="olink ARPLS" href="../../appdev.112/e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
</li>
<li>
<p><a class="olink ADQUE" href="../../server.112/e11013/toc.htm"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r33c1-t4" headers="r1c1-t4">
<p><code>SYS.LCR$_ROW_RECORD</code><a id="sthref73"></a></p>
</td>
<td class="cellalignment2977" headers="r33c1-t4 r1c2-t4">
<p>A type that represents a data manipulation language (DML) change to a row in a table. This type uses the <code>LCR$_ROW_LIST</code> type.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r34c1-t4" headers="r1c1-t4">
<p><code>TIMESTAMP<a id="sthref74"></a></code></p>
</td>
<td class="cellalignment2977" headers="r34c1-t4 r1c2-t4">
<p>Extends the <code>DATE</code> data type and stores the year, month, day, hour, minute, and second. The default timestamp format is set by the Oracle Database initialization parameter <code>NLS_TIMESTAMP_FORMAT</code>.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r35c1-t4" headers="r1c1-t4">
<p><code>TIMESTAMP WITH LOCAL TIME ZONE</code><a id="sthref75"></a></p>
</td>
<td class="cellalignment2977" headers="r35c1-t4 r1c2-t4">
<p>Extends the <code>TIMESTAMP</code> data type and includes a time-zone displacement. The time-zone displacement is the difference (in hours and minutes) between local time and Coordinated Universal Time (UTC)&mdash;formerly Greenwich Mean Time. You can also use named time zones, as with <code>TIMESTAMP WITH TIME ZONE</code>.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r36c1-t4" headers="r1c1-t4">
<p><code>TIMESTAMP WITH TIME ZONE</code><a id="sthref76"></a></p>
</td>
<td class="cellalignment2977" headers="r36c1-t4 r1c2-t4">
<p>Extends the <code>TIMESTAMP</code> data type and includes a time-zone displacement. The time-zone displacement is the difference (in hours and minutes) between local time and Coordinated Universal Time (UTC)&mdash;formerly Greenwich Mean Time.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r37c1-t4" headers="r1c1-t4">
<p><code>UROWID</code><a id="sthref77"></a></p>
</td>
<td class="cellalignment2977" headers="r37c1-t4 r1c2-t4">
<p>Represents the address of certain rows in relational tables that are not physical or are not generated by Oracle Database. For example, row address of an index-organized table and row IDs of non-Oracle foreign tables (such as DB2 accessed using a gateway). The maximum size is 4,000 bytes.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r38c1-t4" headers="r1c1-t4">
<p><a id="sthref78"></a><code>VARCHAR</code></p>
</td>
<td class="cellalignment2977" headers="r38c1-t4 r1c2-t4">
<p>Stores a length-value data type consisting of a binary length subfield followed by a character string of the specified length. The length is in bytes, unless character-length semantics are used for the data file. In that case, the length is in characters.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r39c1-t4" headers="r1c1-t4">
<p><a id="sthref79"></a><code>VARCHAR2</code></p>
</td>
<td class="cellalignment2977" headers="r39c1-t4 r1c2-t4">
<p>Stores variable-length character data. How the data is represented internally depends on the database character set. The <code>VARCHAR2</code> data type takes a required parameter that specifies a maximum size up to 4,000 characters.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r40c1-t4" headers="r1c1-t4">
<p><code>XMLFORMAT</code><a id="sthref80"></a></p>
</td>
<td class="cellalignment2977" headers="r40c1-t4 r1c2-t4">
<p>An object type that is used to specify formatting arguments for <code>SYS_XMLGEN()</code> and <code>SYS_XMLAGG()</code> functions.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r41c1-t4" headers="r1c1-t4">
<p><a id="BEHCDJHJ"></a><code>XMLTYPE</code><a id="sthref81"></a></p>
</td>
<td class="cellalignment2977" headers="r41c1-t4 r1c2-t4">
<p>You can use an Oracle-supplied type to store and query XML data in the database. It has member functions that you can use to access, extract, and query the XML data by using XPath expressions. XPath is a standard developed by the W3C committee to traverse XML documents.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r42c1-t4" headers="r1c1-t4">
<p>User-defined Types</p>
</td>
<td class="cellalignment2977" headers="r42c1-t4 r1c2-t4">
<p>Use Oracle built-in data types and other user-defined data types as the building blocks of object types that model the structure and behavior of data in applications.</p>
<p>User-defined types include Object Types, Varrays, and Nested tables.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref82"></a>
<h3 class="sect2">About <a id="sthref83"></a>Object Class Definition</h3>
<p>Oracle Warehouse Builder architecture comprises several classes of objects, such as First Class Objects, Second Class Objects, and Third Class Objects. This section describes these classes of objects.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref84"></a>
<h4 class="sect3">About <a id="sthref85"></a>First Class Objects (FCOs)</h4>
<p>A First Class Object (FCO) represents a component in the metadata repository that can be manipulated through the Oracle Warehouse Builder interface. FCOs often, but not always, own other objects. For example, a TABLE is an FCO that may own the following Second Class Objects: TABLE_COLUMN, UNIQUE_KEY, FOREIGN_KEY, and CHECK_CONSTRAINT.</p>
<p>For those accessing Oracle Warehouse Builder using the Design Center, FCOs generally appear on the navigation tree. Similarly, users who access Oracle Warehouse Builder through OMB*Plus can generalize FCOs as objects of OMBCREATE, OMBALTER, OMBRETRIEVE, and OMBDROP commands.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref86"></a>
<h4 class="sect3">About <a id="sthref87"></a>Second Class Objects (SCOs)</h4>
<p>A Second Class Object (SCO) represents a dependent object component. An SCO is always owned by another object, and can, in turn, own objects itself. For example, the FCO called MAPPING contains the SCO MAPPING_OPERATOR, which in turn contains ATTRIBUTES.</p>
<p>For those accessing Oracle Warehouse Builder through the Design Center, SCOs can only be manipulated through an FCO. Similarly, users who access Oracle Warehouse Builder through OMB*Plus can only manipulate SCO definitions through a command against an FCO.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref88"></a>
<h4 class="sect3">About Third Class and Fourth Class Objects</h4>
<p>Third Class and Fourth Class objects are relative rankings of objects owned by other objects. These refer only to objects whose ownership spans several layers. For example, INDEX_COLUMN is an SCO in the scenario where a DIMENSION_TABLE (which is a FCO) owns INDEX_COLUMN. However, INDEX_COLUMN becomes a Third Class Object in the scenario where the FCO CUBE_TABLE owns the SCO INDEX, which in turn owns INDEX_COLUMN.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDEAEAD"></a><a id="WBETL01001"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Naming <a id="sthref89"></a><a id="sthref90"></a>Conventions for Data Objects</h3>
<p>The rules for naming data objects depend on the naming mode that you set for Oracle Warehouse Builder. Oracle Warehouse Builder maintains a business and a physical name for each object stored in a workspace. The business name for an object is its descriptive logical name and the physical name is the name used when Oracle Warehouse Builder generates code.</p>
<p>You set the naming mode using the Naming Preferences section of the Preferences dialog box.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink WBCON" href="../e10581/toc.htm"><span class="italic">Oracle Warehouse Builder Concepts</span></a> for more information about naming preferences.</div>
<p>When you name or rename data objects, use the following naming conventions.</p>
<p class="subhead2"><a id="sthref91"></a>Naming Oracle Data Objects</p>
<p>In the physical naming mode, the name for an Oracle data object can be between 1 and 30 alphanumeric characters. The name must be unique across the object category that owns the object. Blank spaces are not enabled. Data object names cannot begin with <code>OWB$</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For information about the length of physical names on other platforms, see:
<ul>
<li>
<p><a href="#BEHIDBBJ">"Rules for Naming Objects in IBM DB2 UDB"</a></p>
</li>
<li>
<p><a href="#BEHEIGHD">"Rules for Naming Objects in Microsoft SQL Server"</a></p>
</li>
</ul>
</div>
<p>In the business naming mode, the limit is 200 characters. The name must be unique across the object category that owns the object. For example, because all tables belong to a module, table names must be unique across the module to which they belong. Similarly, module names must be unique across the project to which they belong.</p>
<p class="subhead2"><a id="sthref92"></a>Describing Data Objects</p>
<p>Edit the description of the data object as necessary. The description can be between 1 and 4,000 alphanumeric characters and can contain blank spaces. Specifying a description for a data object is optional.</p>
<p class="subhead2"><a id="sthref93"></a>Best Practices for <a id="sthref94"></a><a id="sthref95"></a>Naming Data Objects</p>
<p>Data object names or FCO names should be unique across the object category that owns the FCO. Additionally, it is a good practice to ensure that SCO names are unique across the object category that owns the FCO and are different from those of the FCO containing the SCO.</p>
<p>For example, a table contains constraints. The table is an FCO and constraints are SCOs. When you define the table, provide a table name that is unique across the module in which it is defined. Additionally, Oracle recommends that you provide constraint names that are unique across all the FCOs and SCOs in that module.</p>
</div>
<!-- class="sect2" -->
<a id="CIHCIGCE"></a><a id="WBETL01002"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using the Data Viewer to View <a id="sthref96"></a><a id="sthref97"></a><a id="sthref98"></a>Data Stored in Data Objects</h3>
<p><a id="sthref99"></a><a id="sthref100"></a><a id="sthref101"></a><a id="sthref102"></a><a id="sthref103"></a>The Data Viewer enables you to view the data stored in relational and dimensional data objects. For example, the data viewer for a table enables you to view the table data. Similarly, the data viewer for a cube enables you to view data stored in a cube.</p>
<p>To access the Data Viewer for a data object, from the Projects Navigator, right-click the data object and select <span class="bold">Data</span>. The Data Viewer containing the data stored in the data object is displayed in a separate tab.</p>
<p>The Data Viewer tab contains the following buttons: Execute Query, Get More, Where Clause, and More. The More button is displayed at the bottom of the tab.</p>
<p>Click <span class="bold">Execute Query</span> to run a query on the data object and fetch its data.</p>
<p>By default, the Data Viewer displays the first hundred rows of data. To retrieve the next set of rows, click <span class="bold">Get More</span>. Alternatively, you can click <span class="bold">More</span> to perform the same action.</p>
<p>Click <span class="bold">Where Clause</span> to specify a condition that is used to restrict the data displayed by the Data Viewer. Clicking this button displays the Where Clause dialog box. Use this dialog box to specify the condition used to filter data. You can use this option for tables and views only.</p>
<p>The columns and column names displayed in the Data Viewer are taken directly from the location in which the actual table is deployed.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For columns with the data type <code>LONG</code>, the Data Viewer displays "&lt;UNSUPPORTED DATATYPE&gt;" instead of the actual value stored in the column.</div>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref104"></a>
<h3 class="sect2">About <a id="sthref105"></a>Error Tables</h3>
<p>Oracle Warehouse Builder enables you to create error tables to store logical errors that may occur while loading data into Oracle data objects such as tables, views, materialized view, dimensions, and cubes.</p>
<p>Use error tables to:</p>
<ul>
<li>
<p>Capture logical errors when data rules are applied to tables, views, or materialized views.</p>
</li>
<li>
<p>Capture physical errors using DML error logging.</p>
</li>
<li>
<p>Store errors caused by orphan records when an orphan management policy is enabled for dimensional objects.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dim_objects.htm#BCGBJCDG">"Orphan Management for Dimensional Objects"</a> for more information about orphan management</div>
</li>
</ul>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref106"></a>
<h4 class="sect3">Defining <a id="sthref107"></a><a id="sthref108"></a>Error Tables for Data Objects</h4>
<p>An error table is created for a data object only if you set the Error Table Name configuration parameter for the data object. If you do not specify an error table name for a data object, then logical errors are not logged for that object. However, when a data object has data rules associated with it, even if you do not specify an error table name for the object, Oracle Warehouse Builder creates an error table using a default name. For example, if the name of the table for which you specified data rules is <code>EMP</code>, then the error table is called <code>EMP_ERR</code>.</p>
<p><span class="bold">To create an error table for a data object:</span></p>
<ol>
<li>
<p>In the Projects Navigator, right-click the data object for which you want to create an error table, and select <span class="bold">Configure</span>.</p>
<p>The Configuration tab containing the configuration parameters for the data object is displayed.</p>
</li>
<li>
<p>In the Configuration tab, expand the Error Tables node.</p>
</li>
<li>
<p>Set the value of the Error Table Name parameter to the name of the error table for the data object.</p>
</li>
</ol>
<p>If you modify the value of the Error Table Name parameter after the data object is deployed, then you must drop the data object and redeploy it. If this data object was used in mappings, then ensure that you synchronize all operators that are bound to this data object and then redeploy the mappings.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Error Table Name and Truncate Error Table configuration parameters of the Table, View, or Materialized View operators are not used for row-based code.</div>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref109"></a>
<h4 class="sect3">Error <a id="sthref110"></a>Table Columns</h4>
<p>In addition to the columns contained in the data object, error tables for a data object contain the columns listed in <a href="#CIHDIIED">Table 2-3</a>.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref111"></a><a id="CIHDIIED"></a>Table 2-3 Error Table Columns</p>
<table class="cellalignment2975" title="Error Table Columns" summary="This table contains two columns that contain the column name and description of errrors tables." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t10">Column Name</th>
<th class="cellalignment2976" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t10" headers="r1c1-t10">
<p><code>ORA_ERR_NUMBER$</code></p>
</td>
<td class="cellalignment2977" headers="r2c1-t10 r1c2-t10">
<p>Oracle Database error number</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t10" headers="r1c1-t10">
<p><code>ORA_ERR_MESG$</code></p>
</td>
<td class="cellalignment2977" headers="r3c1-t10 r1c2-t10">
<p>Oracle Database error message text</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t10" headers="r1c1-t10">
<p><code>ORA_ERR_ROWID$</code></p>
</td>
<td class="cellalignment2977" headers="r4c1-t10 r1c2-t10">
<p>Row ID of the row in error (for update and delete)</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t10" headers="r1c1-t10">
<p><code>ORA_ERR_OPTYPE$</code></p>
</td>
<td class="cellalignment2977" headers="r5c1-t10 r1c2-t10">
<p>Type of operation: insert (I), update (U), delete (D)</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r6c1-t10" headers="r1c1-t10">
<p><code>ORA_ERR_TAG$</code></p>
</td>
<td class="cellalignment2977" headers="r6c1-t10 r1c2-t10">
<p>Step or detail audit ID from the run time audit data. This is the <code>STEP_ID</code> column in the run time view <code>ALL_RT_AUDIT_STEP_RUNS</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>For scalar data types, if no data rules are applied to the data object, then the columns in the error table are of data type <code>VARCHAR2(4000)</code>. It enables physical data errors such as ORA-12899: value too large for column, to be captured. If data rules are applied, then the columns in the error table are of the same data type as the columns in the data object.</p>
<p>For example, the table <code>TEST</code> has two columns <code>C1</code>, of data type <code>NUMBER</code>, and <code>C2</code>, of data type <code>VARCHAR2(10)</code>. The error table generated for <code>TEST</code> contains the DML error columns <code>C1</code> and <code>C2</code>. If no data rules are applied to <code>TEST</code>, then the data type for both <code>C1</code> and <code>C2</code> should be <code>VARCHAR2(4000)</code>. If data rules are applied to <code>TEST</code>, then <code>C1</code> should be <code>NUMBER</code> and <code>C2</code> of data type <code>VARCHAR2(10)</code>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i113698"></a><a id="WBETL02018"></a>
<div class="sect1">
<h2 class="sect1">Defining Tables</h2>
<p><a id="sthref112"></a>Tables are metadata representations of relational storage objects. They can be tables from a database system such as Oracle Database or even an SAP system.</p>
<p>The following sections provide information about defining tables:</p>
<ul>
<li>
<p><a href="#i80520">"Creating Table Definitions"</a></p>
</li>
<li>
<p><a href="#i80453">"Editing Table Definitions"</a></p>
</li>
</ul>
<a id="i80520"></a><a id="WBETL02009"></a>
<div class="sect2">
<h3 class="sect2">Creating <a id="sthref113"></a><a id="sthref114"></a>Table Definitions</h3>
<p><a id="sthref115"></a><a id="sthref116"></a><a id="sthref117"></a>Tables capture the metadata used to model your target schema. Table definitions specify the table constraints, indexes, partitions, attribute sets, and metadata about the columns and data types used in the table. This information is stored in the workspace. You can later use these definitions to generate.ddl scripts that can be deployed to create physical tables in your target database. These tables can then be loaded with data from chosen source tables.</p>
<p class="subhead2"><a id="sthref118"></a>Before You Begin</p>
<p>Ensure that you create the target schema that contains your table as described in <a href="design_tgt_schemas.htm#BCGEDFEJ">"Designing Target Schemas"</a>.</p>
<p><span class="bold">To create a table in an Oracle module:</span></p>
<ol>
<li>
<p>From the Projects Navigator, expand the Databases node and then the Oracle node.</p>
</li>
<li>
<p>Expand the module where you want to create the table, right-click Tables, and select <span class="bold">New Table</span>.</p>
<p><span class="italic">or</span></p>
<p>Right-click the module where you want to create a table and select <span class="bold">New</span>. The New Gallery dialog box is displayed. From the Items section, select <span class="bold">Table</span> and click <span class="bold">OK</span>.</p>
</li>
<li>
<p>In the Create Table dialog box, enter a name and an optional description for the table and click <span class="bold">OK</span>. Alternatively, you can accept the autogenerated unique name for the table and click <span class="bold">OK</span>.</p>
<p>The Table Editor is displayed. Define the table using the following tabs:</p>
<ul>
<li>
<p><a href="#CHDCFJJG">"Columns Tab"</a></p>
</li>
<li>
<p><a href="#CHDHDBHB">"Keys Tab"</a></p>
</li>
<li>
<p><a href="#CHDCGAFI">"Indexes Tab"</a></p>
</li>
<li>
<p><a href="#CHDHHDBA">"Partitions Tab"</a></p>
</li>
<li>
<p><a href="#CHDEIBFD">"Attribute Sets Tab"</a></p>
</li>
<li>
<p><a href="#CHDJCFHJ">"Data Rules Tab"</a></p>
</li>
</ul>
<p>After you define the table using these tabs, the table definitions are created and stored in the workspace. The new table name is also added to the Projects Navigator. At this stage, only the metadata for the table is created in the workspace. To create the table in your target schema, you must deploy the table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can also create a table from the Graphical Navigator.</div>
</li>
</ol>
<a id="CHDFHFBE"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref119"></a>Name Tab</h4>
<p>Use the Name tab to specify the name and description of a table. This tab contains the following fields:</p>
<ul>
<li>
<p><span class="bold">Name:</span> Represents the name for the table. The name should be unique within the module in which the table is defined.</p>
</li>
<li>
<p><span class="bold">Description:</span> Specify an optional description for the table.</p>
</li>
</ul>
<p>Follow the rules in <a href="#CHDEAEAD">"Naming Conventions for Data Objects"</a> to specify a name and an optional description.</p>
</div>
<!-- class="sect3" -->
<a id="CHDCFJJG"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref120"></a>Columns Tab</h4>
<p>Use the Columns tab to define the columns in the table. This tab displays a table that you use to define columns. Each row in the table corresponds to the definition of one table column. Oracle Warehouse Builder generates the column position in the order in which you type in the columns. To reorder columns, see <a href="#CIHHBAEJ">"Reordering Columns in a Table"</a>.</p>
<p>Enter the following details for each column:</p>
<ul>
<li>
<p><span class="bold">Name:</span> Enter the name of the column. The column name should be unique within the table.</p>
</li>
<li>
<p><span class="bold">Data Type:</span> Select the data type of the column from the Data Type list. A default data type is assigned based on the column name. For example, if you create a column named start_date, then the data type assigned is <code>DATE</code>. You can change the default assignment if it does not suit your data requirement.</p>
<p>For a list of supported Oracle Database data types, see <a href="#CHDFIADI">"Supported Data Types"</a>.</p>
</li>
<li>
<p><span class="bold">Length:</span> Specify the length of the column. Length is applicable to character data types only.</p>
</li>
<li>
<p><span class="bold">Precision:</span> Specify the total number of digits enabled for the column. Precision is applicable for numeric data types only.</p>
</li>
<li>
<p><span class="bold">Scale:</span> Specify the total number of digits to the right of the decimal point. Scale is applicable to numeric data types only.</p>
</li>
<li>
<p><span class="bold">Seconds Precision:</span> Used for <code>TIMESTAMP</code>, <code>TIMESTAMP WITH TIME ZONE</code>, and <code>TIMESTAMP WITH LOCAL TIME ZONE</code> data types only. Specify the number of digits in the fractional part of the datetime field.</p>
</li>
<li>
<p><span class="bold">Not Null:</span> Select this field to specify that the column should not contain null values. By default, all columns in a table enable nulls.</p>
</li>
<li>
<p><span class="bold">Default Value:</span> Specify the default value for this column. If no value is entered for this column while you are loading data into the table, then the default value is used. If you specify a value for this column while loading data, then the default value is overridden and the specified value is stored in the column.</p>
</li>
<li>
<p><span class="bold">Virtual:</span> Select this option to indicate that the column is a virtual column.</p>
<p>Virtual columns are not stored in the database. They are computed using the expression specified in the Expression field. You can refer to virtual columns just like any other column in the table, except that you cannot explicitly write to a virtual column.</p>
</li>
<li>
<p><span class="bold">Expression:</span> Specify the expression that is used to compute the value of the virtual column. The expression can include columns from the same table, constants, SQL functions, and user-defined PL/SQL functions.</p>
</li>
<li>
<p><span class="bold">Description:</span> Enter an optional description for the column.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CHDHDBHB"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref121"></a>Keys Tab</h4>
<p>Use the Keys tab to create constraints on the table columns. You can create primary keys, foreign keys, unique keys, and check constraints. For more information about creating constraints, see <a href="#CIHDGGFE">"Creating Constraints"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CHDCGAFI"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref122"></a><a id="sthref123"></a><a id="sthref124"></a><a id="sthref125"></a>Indexes Tab</h4>
<p>Use the Indexes tab to create indexes on the table. Indexes enable faster retrieval of data stored in your data warehouse. You can create the following types of indexes: unique, nonunique, bitmap, function-based, composite, and reverse. For more information about creating these indexes, see <a href="#CHDCDFAJ">"Creating Indexes"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CHDHHDBA"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref126"></a><a id="sthref127"></a>Partitions Tab</h4>
<p>Use the Partitions tab to create partitions for the table. Partitions enable better manageability of larger tables. They also improve query and load performance. You can create the following types of partitions: range, hash, hash by quantity, list, range-hash, range-hash by quantity and range-list. For more information about partitions and how to create each type of partition, see <a href="#BEHGEGGI">"Defining Partitions"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CHDEIBFD"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref128"></a><a id="sthref129"></a><a id="sthref130"></a>Attribute Sets Tab</h4>
<p>Use the Attribute Sets tab to create attribute sets for the table. For more information about creating attribute sets for a table, see <a href="#BEHCCAGI">"Defining Attribute Sets"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CHDJCFHJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref131"></a><a id="sthref132"></a><a id="sthref133"></a>Data Rules Tab</h4>
<p>Use the Data Rules tab to apply data rules to a table. Data rules enable you to determine legal data within a table and legal relationships between tables. When you apply a data rule to a table, Oracle Warehouse Builder ensures that the data in the table conforms to the specified data rule.</p>
<p>Oracle Warehouse Builder provides a set of predefined data rules that are listed in the DERIVED_DATA_RULES node under the Data Rules node of the Projects Navigator. You can define your own data rules by creating data rules under the Data Rules node.</p>
<p>Click <span class="bold">Apply Rule</span> to apply a data rule to a table. The Apply Data Rule Wizard is displayed. Use this wizard to select the data rule and the column to which the data rule should be applied.</p>
<p>After you apply a data rule to a table, it is listed on the Data rules tab. For the data rule to be applied to a table, ensure that the check box to the left of the data rule name is selected. Deselect this option if you do not want the data rule to be applied to the table.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="data_rules.htm#BGBEFJCA">"Overview of Data Rules"</a></p>
</li>
<li>
<p><a href="data_rules.htm#BGBIEGBE">"Applying Data Rules to Data Objects"</a></p>
</li>
<li>
<p><a href="data_rules.htm#BGBHEDCC">"Creating Data Rules Using the Create Data Rule Wizard"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i80453"></a><a id="WBETL03005"></a>
<div class="sect2">
<h3 class="sect2">Editing Table Definitions</h3>
<p><a id="sthref134"></a><a id="sthref135"></a>Use the Table Editor to edit table definitions. To open the editor, right-click the name of the table in the Projects Navigator and select <span class="bold">Open</span>. Alternatively, you can double-click the name of the table in the Projects Navigator. This section describes the table definitions that you can edit.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref136"></a>
<h4 class="sect3"><a id="sthref137"></a><a id="sthref138"></a>Renaming Tables</h4>
<p>Use one of the following methods to rename a table:</p>
<ul>
<li>
<p>On the Name tab of the table editor, click the <span class="bold">Name</span> field and enter the new name for the table. You can also modify the description stored in the <span class="bold">Description</span> field.</p>
<p>Alternatively, select the table in the Projects Navigator to display the properties of the table in the Property Inspector. Edit the values of the Physical Name and Description properties.</p>
</li>
<li>
<p>In the Projects Navigator, select the table you want to rename and press the <span class="bold">F2</span> key. The table name is highlighted. Enter the new table name and press the <span class="bold">Enter</span> key.</p>
</li>
<li>
<p>In the Projects Navigator, right-click the table name and select <span class="bold">Rename</span>. The table name is highlighted. Enter the new name for the table and press the <span class="bold">Enter</span> key.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref139"></a>
<h4 class="sect3"><a id="sthref140"></a><a id="sthref141"></a><a id="sthref142"></a>Adding, Modifying, and Deleting Table Columns</h4>
<p>Use the Columns tab of the Table Editor to add, modify, and remove table columns.</p>
<p><a id="sthref143"></a><span class="subhead3">Adding Columns&nbsp;</span></p>
<p>Navigate to the Columns tab. Click the <span class="bold">Name</span> field in an empty row and enter the details that define the new column. For more information, see <a href="#CHDCFJJG">"Columns Tab"</a>.</p>
<p><a id="sthref144"></a><span class="subhead3">Modifying Columns&nbsp;</span></p>
<p>Use the Columns tab of the Table Editor to modify column definitions. You can modify any of the attributes of the column definition either by entering the new value or selecting the new value from a list. For more information, see <a href="#CHDCFJJG">"Columns Tab"</a>.</p>
<p><a id="sthref145"></a><span class="subhead3">Deleting Columns&nbsp;</span></p>
<p>Navigate to the Columns tab. Right-click the gray cell to the left of the column name to remove and select <span class="bold">Delete</span>.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref146"></a>
<h4 class="sect3"><a id="sthref147"></a><a id="sthref148"></a><a id="sthref149"></a>Adding, Modifying, and Deleting Table Constraints</h4>
<p>Navigate to the Keys tab of the Table Editor.</p>
<p>For details on adding and editing constraints, see <a href="#CIHDGGFE">"Creating Constraints"</a> and <a href="#CIHHCEEJ">"Editing Constraints"</a> respectively.</p>
<p>To delete a constraint, select the row that represents the constraint by clicking the gray cell to the left of the column name. Click <span class="bold">Delete</span> at the bottom of the tab.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref150"></a>
<h4 class="sect3"><a id="sthref151"></a><a id="sthref152"></a><a id="sthref153"></a>Adding, Modifying, and Deleting Attribute Sets</h4>
<p>Use the Attribute Sets tab of the Table Editor to add, modify, or delete attribute sets in a table.</p>
<p>For details about adding attribute sets, see <a href="#CIHDJAHF">"Creating Attribute Sets"</a>. See <a href="#CIHCAFCH">"Editing Attribute Sets"</a> for instructions on how to edit an attribute set.</p>
<p>To delete an attribute set, navigate to the Attribute Sets tab. Right-click the cell to the left of the attribute set to remove and select <span class="bold">Delete</span>.</p>
</div>
<!-- class="sect3" -->
<a id="CIHHBAEJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref154"></a><a id="sthref155"></a>Reordering Columns in a Table</h4>
<p>By default, columns in a table are displayed in the order in which they are created. This order is also propagated to the DDL script generated to create the table. If this default ordering does not suit your application needs, or to further optimize query performance, then you can reorder the columns.</p>
<p><span class="bold">To change the position of a column:</span></p>
<ol>
<li>
<p>If the Table Editor is not open for the table, then open the editor.</p>
<p>You can do this by double-clicking the name of the table in the Projects Navigator. Alternatively, you can right-click the name of the table in the Projects Navigator and select <span class="bold">Open</span>.</p>
</li>
<li>
<p>On the Columns tab, select the gray square located to the left of the column name.</p>
<p>The entire row is highlighted.</p>
</li>
<li>
<p>Use the buttons on the left of the Columns tab to move the column to the required position.</p>
<p>The position of the column is now updated.</p>
</li>
<li>
<p>Close the Table Editor<span class="bold">.</span></p>
</li>
</ol>
<p>You must deploy the changed table definition in order for the new column position in the table to be saved in the workspace.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i113733"></a><a id="WBETL02010"></a>
<div class="sect1">
<h2 class="sect1">Defining Views</h2>
<p>You can define views and materialized views in Oracle Warehouse Builder. This section describes views. <a id="sthref156"></a>Views are used to simplify the presentation of data or restrict access to data. Often the data that users are interested in is stored across multiple tables with many columns. When you create a view, you create a stored query to retrieve only the relevant data or only data that the user has permission to access.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i99426">"Defining Materialized Views"</a> for information about materialized views</div>
<p>A view can be defined to model a query on your target data. This query information is stored in the workspace. You can later use these definitions to generate.ddl scripts that can be deployed to create views in your target system.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#i99330">"Creating View Definitions"</a></p>
</li>
<li>
<p><a href="#i99406">"Editing View Definitions"</a></p>
</li>
</ul>
<a id="i99330"></a>
<div class="sect2">
<h3 class="sect2">Creating View Definitions</h3>
<p><a id="sthref157"></a><a id="sthref158"></a>A view definition specifies the query used to create the view, constraints, attribute sets, data rules, and metadata about the columns and data types used in the view. This information is stored in the workspace. You can generate the view definition to create.ddl scripts. These scripts can be deployed to create the physical views in your database.</p>
<p class="subhead2"><a id="sthref159"></a>Before You Begin</p>
<p>Ensure that you create the target schema that contains your view as described in <a href="design_tgt_schemas.htm#CIHBAIHE">"Creating Target Modules"</a>.</p>
<p><span class="bold">To define a view:</span></p>
<ol>
<li>
<p>From the Projects Navigator, expand the Databases node and then the Oracle node.</p>
</li>
<li>
<p>Expand the target module where you want to create the view, right-click <span class="bold">Views</span>, and select <span class="bold">New View</span>.</p>
<p><span class="italic">or</span></p>
<p>Right-click the target module where you want to create the view and select <span class="bold">New</span>. In the New Gallery dialog box, select <span class="bold">View</span> and click <span class="bold">OK</span>.</p>
</li>
<li>
<p>In the Create View dialog box, enter a name and an optional description for the view and click <span class="bold">OK</span>.</p>
<p>The View Editor is displayed.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The name and description must follow the naming conventions listed in <a href="#CHDEAEAD">"Naming Conventions for Data Objects"</a>.</div>
</li>
<li>
<p>Provide information on the following tabs of the View Editor:</p>
<ul>
<li>
<p><a href="#CIHGHBGC">"Columns Tab"</a></p>
</li>
<li>
<p><a href="#CIHJAIBC">"Query Tab"</a></p>
</li>
<li>
<p><a href="#CIHDHJAJ">"Keys Tab"</a></p>
</li>
<li>
<p><a href="#CIHEDHFC">"Attribute Sets Tab"</a></p>
</li>
<li>
<p><a href="#CIHGJABE">"Data Rules Tab"</a></p>
</li>
</ul>
<p>Oracle Warehouse Builder creates a definition for the view, stores this definition in the workspace, and adds this view name in the Projects Navigator.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can also define a view from the Graphical Navigator.</div>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref160"></a>
<h4 class="sect3">Name Tab</h4>
<p>Use the Name tab to modify the name and description that you provided in the Create View dialog box. Ensure that the name and description follow the rules listed in <a href="#CHDEAEAD">"Naming Conventions for Data Objects"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CIHGHBGC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Columns <a id="sthref161"></a>Tab</h4>
<p>Use the Columns tab to define the columns in the view. For each view column, enter the following details: Name, Data Type, Length, Precision, Scale, Seconds Precision, Not Null, Default Value, Virtual, Expression, and Description. For more information about each detail, see <a href="#CHDCFJJG">"Columns Tab"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CIHJAIBC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Query Tab</h4>
<p>Use the Query tab to define the query used to create the view. A view can contain data from tables that belongs to a different module than the one to which the view belongs. You can also combine data from multiple table using joins. Ensure that the query statement you type is valid. Oracle Warehouse Builder does not validate the text in the Query tab and attempts to deploy a view even if the syntax is invalid.</p>
</div>
<!-- class="sect3" -->
<a id="CIHDHJAJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Keys Tab</h4>
<p>Use the Keys tab to define logical constraints for a view. Although these constraints are not used when enumerating DDL for the view, they can be useful when the view serves as a data source in a mapping. The Mapping Editor can use the logical foreign key constraints to include the referenced dimensions as secondary sources in the mapping. For more information about creating constraints, see <a href="#CIHDGGFE">"Creating Constraints"</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot create check constraints for views.</div>
</div>
<!-- class="sect3" -->
<a id="CIHEDHFC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Attribute Sets Tab</h4>
<p>Use the Attribute Sets tab to define attribute sets for the view. For more information about attribute sets and how to create them, see <a href="#BEHCCAGI">"Defining Attribute Sets"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CIHGJABE"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Data Rules Tab</h4>
<p>Use the Data Rules tab to specify the data rules that are applied to the view. Data rules help ensure data quality by defining the legal data within a table, or legal relationships between tables. For more information about the Data Rules tab, see <a href="#CHDJCFHJ">"Data Rules Tab"</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i99406"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref162"></a>Editing View <a id="sthref163"></a><a id="sthref164"></a>Definitions</h3>
<p>Use the View Editor to edit view definitions. To open the View Editor, right-click the view in the Projects Navigator and select <span class="bold">Open</span>. The following sections describe the view definitions that you can edit.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref165"></a>
<h4 class="sect3"><a id="sthref166"></a><a id="sthref167"></a>Renaming Views</h4>
<p>Use the Name tab of the View Editor to rename views. Click the <span class="bold">Name</span> field and enter the new name for the view. You can also modify the description stored in the <span class="bold">Description</span> field. Enter the new name over the highlighted object name. Alternatively, select the view in the Projects Navigator to display the view properties in the Property Inspector. Edit the values of the Physical Name and Description properties.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref168"></a>
<h4 class="sect3"><a id="sthref169"></a><a id="sthref170"></a><a id="sthref171"></a>Adding, Modifying, and Deleting View Columns</h4>
<p>Use the Columns tab to add, modify, or delete view columns. For more information, see <a href="#CIHGHBGC">"Columns Tab"</a>.</p>
<p><span class="bold">Adding columns:</span> On the Columns tab, click the <span class="bold">Name</span> field in an empty row and enter the details that define a column.</p>
<p><span class="bold">Editing columns:</span> Use the Columns tab of the Table Editor to modify column definitions. You can modify any of the attributes of the column definition.</p>
<p><span class="bold">Removing columns:</span> On the Columns tab, right-click the gray cell to the left of the column name to remove and select <span class="bold">Delete</span>.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref172"></a>
<h4 class="sect3"><a id="sthref173"></a><a id="sthref174"></a><a id="sthref175"></a>Adding, Modifying, and Deleting View Constraints</h4>
<p>Use the Keys tab of the View Editor to add, modify, or delete view constraints. For details on adding and editing constraints, see <a href="#CIHDGGFE">"Creating Constraints"</a> and <a href="#CIHHCEEJ">"Editing Constraints"</a> respectively.</p>
<p>To delete constraints, on the Keys tab, select the row that represents the constraint. Click <span class="bold">Delete</span> at the bottom of the tab.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref176"></a>
<h4 class="sect3"><a id="sthref177"></a><a id="sthref178"></a><a id="sthref179"></a>Adding, Modifying, and Deleting Attribute Sets</h4>
<p>Use the Attribute Sets tab of the View Editor to add, modify, or delete attribute sets. For details about adding attribute sets, see <a href="#CIHDJAHF">"Creating Attribute Sets"</a>. See <a href="#CIHCAFCH">"Editing Attribute Sets"</a> for instructions on how to edit an attribute set.</p>
<p>To delete an attribute set, navigate to the Attribute Sets tab. Right-click the cell to the left of the attribute set to remove and select <span class="bold">Delete</span>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i99426"></a><a id="WBETL02011"></a>
<div class="sect1">
<h2 class="sect1">Defining Materialized Views</h2>
<p><a id="sthref180"></a>Materialized views improve query performance. When you create a materialized view, you create a set of query commands that aggregate or join data from multiple tables. Materialized views provide precalculated data that can be reused or replicated to remote data marts. For example, data about company sales is widely sought throughout an organization.</p>
<p>When you create a materialized view, you can configure it to take advantage of the query rewrite and fast refresh features available in Oracle Database. For information about query rewrite and fast refresh, see <a href="#i1125686">"Fast Refresh for Materialized Views"</a>.</p>
<a id="i99487"></a>
<div class="sect2">
<h3 class="sect2">Creating Materialized View <a id="sthref181"></a><a id="sthref182"></a>Definitions</h3>
<p>A materialized view definition specifies the query used to create the materialized view, constraints, indexes, partitions, attribute sets, data rules, and metadata about the columns and data types used in the materialized view. You can generate the view definition to obtain.ddl scripts that are used to deploy the materialized view.</p>
<p class="subhead2"><a id="sthref183"></a>Before You Begin</p>
<p>Create the target schema that contains your materialized view, as described in <a href="design_tgt_schemas.htm#CIHBAIHE">"Creating Target Modules"</a>.</p>
<p><span class="bold">To define materialized views:</span></p>
<ol>
<li>
<p>From the Projects Navigator, expand the Databases node and then the Oracle node.</p>
</li>
<li>
<p>Expand the target module where you want to create the materialized view, right-click <span class="bold">Materialized Views</span>, and select <span class="bold">New Materialized View</span>.</p>
<p><span class="italic">or</span></p>
<p>Right-click the target module where you want to create the view and select <span class="bold">New</span>. In the New Gallery dialog box, select <span class="bold">Materialized View</span> and click <span class="bold">OK</span>.</p>
</li>
<li>
<p>In the Create Materialized View dialog box, enter a name and an optional description for the materialized view and click <span class="bold">OK</span>.</p>
<p>The name and description must follow the naming conventions listed in <a href="#CHDEAEAD">"Naming Conventions for Data Objects"</a>.</p>
</li>
<li>
<p>Provide information on the following tabs of the Materialized View Editor:</p>
<ul>
<li>
<p><a href="#CIHDJEHJ">"Columns Tab"</a></p>
</li>
<li>
<p><a href="#CIHGBCFI">"Query Tab"</a></p>
</li>
<li>
<p><a href="#CIHFBIHB">"Keys Tab"</a></p>
</li>
<li>
<p><a href="#CIHDGDHG">"Indexes Tab"</a></p>
</li>
<li>
<p><a href="#CIHBCHCJ">"Partitions Tab"</a></p>
</li>
<li>
<p><a href="#CIHIHBBH">"Attribute Sets Tab"</a></p>
</li>
<li>
<p><a href="#CIHEABAA">"Data Rules Tab"</a></p>
</li>
</ul>
<p>Oracle Warehouse Builder creates a definition for the materialized view, stores this definition in the workspace, and inserts its name in the Projects Navigator.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can also define a materialized view from the Graphical Navigator.</div>
</li>
</ol>
<a id="CIHDJEHJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref184"></a>Columns Tab</h4>
<p>Use the Columns tab to define the materialized view columns. For each column, specify the following details: Name, Data Type, Length, Precision, Scale, Seconds Precision, Not Null, Default Value, and Description. For more information about the details to be provided for each materialized view column, see <a href="#CHDCFJJG">"Columns Tab"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CIHGBCFI"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref185"></a>Query Tab</h4>
<p>Use the Query tab to define the query used to create the materialized view. Ensure that you type a valid query in the <span class="bold">Select Statement</span> field. For column names, use the same names that you specified on the <a href="#CIHDJEHJ">"Columns Tab"</a>. If you change a column name on the columns page, then you must manually change the name in the Query tab. Oracle Warehouse Builder does not validate the text in the Query tab and attempts to deploy a materialized view even if the syntax is invalid.</p>
</div>
<!-- class="sect3" -->
<a id="CIHFBIHB"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref186"></a>Keys Tab</h4>
<p>Use the Keys tab to define constraints for the materialized view. Defining constraints is optional. These constraints are for logical design purposes only and are not used when enumerating DDL for the materialized view. You can create primary keys, foreign keys, and unique keys. For information about creating constraints, see <a href="#CIHDGGFE">"Creating Constraints"</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot create check constraints for materialized views.</div>
</div>
<!-- class="sect3" -->
<a id="CIHDGDHG"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref187"></a>Indexes Tab</h4>
<p>Use the Indexes tab to define indexes on the materialized view. Defining indexes is optional. You can create the following types of indexes: Unique, non-Unique, Bitmap, Function-based, Composite, and Reverse. For information about creating indexes, see <a href="#CHDCDFAJ">"Creating Indexes"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CIHBCHCJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref188"></a>Partitions Tab</h4>
<p>Use the Partitions tab to define partitions on the materialized view. Partitioning a materialized view is optional. You can perform <a href="#i1128207">"Index Partitioning"</a>, <a href="#CIHFCHAF">"Range Partitioning"</a>, <a href="#CIHIEEAG">"Hash Partitioning"</a>, <a href="#CHDCEHDH">"Hash by Quantity Partitioning"</a>, <a href="#CIHHFIIA">"List Partitioning"</a>, or <a href="#CHDBBJGH">"Composite Partitioning"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CIHIHBBH"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref189"></a>Attribute Sets Tab</h4>
<p>Use the Attribute Sets tab to define attribute sets for the materialized view. Defining attribute sets is optional. For information about how to define attribute sets, see <a href="#CIHDJAHF">"Creating Attribute Sets"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CIHEABAA"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref190"></a>Data Rules Tab</h4>
<p>Use the Data Rules tab to specify data rules that must be applied to the materialized view data. For more information, see <a href="#CHDJCFHJ">"Data Rules Tab"</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i99560"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref191"></a>Editing Materialized View <a id="sthref192"></a><a id="sthref193"></a>Definitions</h3>
<p>Use the Materialized View Editor to edit a materialized view definition. To open the Materialized View Editor, right-click the materialized view and select <span class="bold">Open</span>. The following sections describe the type of editing operations that you can perform on a materialized view.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref194"></a>
<h4 class="sect3"><a id="sthref195"></a><a id="sthref196"></a>Renaming Materialized Views</h4>
<p>Double-click the <span class="bold">Name</span> field on the Name tab of the editor. This selects the name. Type the new name.</p>
<p>Alternatively, select the materialized view in the Projects Navigator to display the materialized view properties in the Property Inspector. Edit the values of the Physical Name and Description properties.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref197"></a>
<h4 class="sect3"><a id="sthref198"></a><a id="sthref199"></a><a id="sthref200"></a>Adding, Modifying, and Deleting Materialized View Columns</h4>
<p>Use the Columns tab to add, modify, or delete materialized view columns.</p>
<p><span class="bold">Adding columns:</span> On the Columns tab, click the Name field in an empty row and enter the details for the column. For more information about these details, see <a href="#CIHGHBGC">"Columns Tab"</a>.</p>
<p><span class="bold">Removing columns:</span> On the Columns tab, right-click the gray cell to the left of the column name to remove and select <span class="bold">Delete</span>.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref201"></a>
<h4 class="sect3"><a id="sthref202"></a><a id="sthref203"></a><a id="sthref204"></a>Adding, Modifying, and Deleting Materialized View Constraints</h4>
<p>Use the Keys tab of the Materialized View Editor to add, modify, or delete materialized view constraints. For details on adding and editing constraints, see <a href="#CIHDGGFE">"Creating Constraints"</a> and <a href="#CIHHCEEJ">"Editing Constraints"</a> respectively.</p>
<p>To delete a constraint, on the Keys tab, select the row that represents the constraint. Click <span class="bold">Delete</span> at the bottom of the tab.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref205"></a>
<h4 class="sect3"><a id="sthref206"></a><a id="sthref207"></a><a id="sthref208"></a>Adding, Modifying, and Deleting Attribute Sets</h4>
<p>Use the Attribute Sets tab to add, modify, or delete attribute sets in a materialized view. For details about adding attribute sets, see <a href="#CIHDJAHF">"Creating Attribute Sets"</a>. See <a href="#CIHCAFCH">"Editing Attribute Sets"</a> for instructions on how to edit an attribute set.</p>
<p>To delete an attribute set, on the Attribute Sets tab, right-click the cell to the left of the attribute set to remove and select <span class="bold">Delete</span>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEHHFADI"></a><a id="WBETL02015"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Defining Constraints</h2>
<p>You can optionally create constraints on relational data objects such as tables, views, and materialized views.</p>
<a id="CHDCCEGE"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About <a id="sthref209"></a>Constraints</h3>
<p>Constraints are used to enforce the business rules to associate with the information in a database. Constraints prevent the entry of invalid data into tables. Business rules specify conditions and relationships that must always be true, or must always be false.</p>
<p>For example, if you define a constraint for the <code>salary</code> column of the <code>employees</code> table as Salary &lt; 10000, then this constraint enforces the rule that no row in this table can contain a numeric value greater than 10000 in this column. If an <code>INSERT</code> or <code>UPDATE</code> statement attempts to violate this integrity constraint, then an error message is displayed. Remember that constraints slow down load performance.</p>
<p>You can define the following <a id="sthref210"></a>constraints for tables, views, and materialized views:</p>
<ul>
<li>
<p><span class="bold"><a id="sthref211"></a><a id="sthref212"></a>Unique Key (UK):</span> A UK constraint requires that every value in a column or set of columns (key) be unique. No two rows of a table can have duplicate values in a specified column or set of columns. A UK column can also contain a null value.</p>
</li>
<li>
<p><span class="bold"><a id="sthref213"></a><a id="sthref214"></a>Primary Key (PK):</span> A value defined on a key (column or set of columns) specifying that each row in the table can be uniquely identified by the values in the key (column or set of columns). No two rows of a table can have duplicate values in the specified column or set of columns. Each table in the database can have only one PK constraint. A PK column cannot contain a null value.</p>
</li>
<li>
<p><span class="bold"><a id="sthref215"></a><a id="sthref216"></a>Foreign Key (FK):</span> A rule defined on a key (column or set of columns) in one table that guarantees that the values in that key match the values in a PK or UK key (column or set of columns) of a referenced table.</p>
</li>
<li>
<p><span class="bold"><a id="sthref217"></a><a id="sthref218"></a>Check Constraint:</span> A user-defined rule for a column (or set of columns) that restricts inserts and updates of a row based on the value it contains for the column (or set of columns). A Check condition must be a Boolean expression that is evaluated using the values in the row being inserted or updated.</p>
<p>For example, the condition <span class="italic">Order Date &lt; Ship Date</span> checks that the value of the Order Date column is always less than that of the Ship Date column. If not, there is an error when the table is loaded and the record is rejected. A check condition cannot contain subqueries and sequences or <code>SYSDATE</code>, <code>UID</code>, <code>USER</code>, or <code>USERENV</code> SQL functions. Although check constraints are useful for data validation, they slow load performance.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIHDGGFE"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating Constraints</h3>
<p>Use the Keys tab of the object editors to create constraints. You can create the following types of constraints: primary key, foreign key, unique key, and check constraints.</p>
<p><span class="bold">To create constraints on a table, view, or materialized view:</span></p>
<ol>
<li>
<p>Open the editor for the data object to which you want to add constraints.</p>
<p>In the Projects Navigator, double-click the data object on which you want to define a constraint. Alternatively, you can right-click the data object in the Projects Navigator and select <span class="bold">Open</span>.</p>
</li>
<li>
<p>Navigate to the <span class="bold">Keys</span> tab.</p>
</li>
<li>
<p>Depending on the type of constraint to define, see one of the following sections:</p>
<ul>
<li>
<p><a href="#CIHDICEC">"Defining Primary Key Constraints"</a></p>
</li>
<li>
<p><a href="#CIHJGDHG">"Defining Foreign Key Constraints"</a></p>
</li>
<li>
<p><a href="#CIHECJHD">"Defining Unique Key Constraints"</a></p>
</li>
<li>
<p><a href="#CIHCEFJC">"Defining Check Constraints"</a></p>
</li>
</ul>
</li>
</ol>
<a id="CIHDICEC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Defining <a id="sthref219"></a><a id="sthref220"></a>Primary Key Constraints</h4>
<p><span class="bold">To define a primary key constraint:</span></p>
<ol>
<li>
<p>On the Keys tab, click the <span class="bold">Add Constraint</span> button.</p>
<p>A blank row is displayed with the cursor positioned in the Name column.</p>
</li>
<li>
<p>Enter the name of the constraint in the <span class="bold">Name</span> column.</p>
<p>Constraint names must be unique within the module that contains the data object on which the constraint is defined.</p>
</li>
<li>
<p>In the <span class="bold">Type</span> column, select <span class="bold">Primary Key</span>.</p>
<p>Press the Tab key to exit from the Type column or use the mouse and click the empty space in the Keys tab.</p>
</li>
<li>
<p>Click <span class="bold">Add Local Column</span>.</p>
<p>A new row is added below the current row that contains the constraint name and constraint type. This new row displays a list in the Local Columns column.</p>
</li>
<li>
<p>In the <span class="bold">Local Columns</span> list of the new row, select the name of the column that represents the primary key.</p>
</li>
<li>
<p>(Optional) To create a composite primary key, repeat Steps 4 and 5 for each column to add to the primary key.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHJGDHG"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Defining <a id="sthref221"></a><a id="sthref222"></a>Foreign Key Constraints</h4>
<p><span class="bold">To define a foreign key constraint:</span></p>
<ol>
<li>
<p>On the Keys tab, click the <span class="bold">Add Constraint</span> button.</p>
<p>A blank row is displayed with the cursor positioned in the Name field.</p>
</li>
<li>
<p>Enter the name of the constraint in the <span class="bold">Name</span> column.</p>
<p>Constraint names must be unique within the module that contains the data object on which the constraint is defined.</p>
</li>
<li>
<p>In the <span class="bold">Type</span> column, select <span class="bold">Foreign Key</span>.</p>
<p>Press the tab key to navigate out of the Type column or use the mouse and click the empty space in the Keys tab.</p>
</li>
<li>
<p>In the References column, click the Ellipsis button.</p>
<p>The Key Selector dialog box is displayed.</p>
</li>
<li>
<p>In the Key Selector dialog box, select the primary key constraint that the foreign key being created references.</p>
<p>For example, the <code>DEPARTMENTS</code> table has a primary key called <code>DEPT_PK</code> defined on the <code>department_id</code> column. To specify that the column <code>department_id</code> of the <code>EMPLOYEES</code> table is a foreign key that references the primary key <code>DEPT_FK</code>, select <code>DEPT_FK</code> under the node that represents the <code>DEPARTMETNS</code> table in the Key Selector dialog box.</p>
</li>
<li>
<p>Click <span class="bold">OK</span>.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHECJHD"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Defining <a id="sthref223"></a><a id="sthref224"></a>Unique Key Constraints</h4>
<p><span class="bold">To define a unique key constraint:</span></p>
<ol>
<li>
<p>On the Keys tab, click the <span class="bold">Add Constraint</span> button.</p>
<p>A blank row is displayed with the cursor positioned in the Name field.</p>
</li>
<li>
<p>Enter the name of the constraint in the <span class="bold">Name</span> column and press the <span class="bold">Enter</span> key.</p>
<p>You can also press the Tab key or click any other location in the editor.</p>
<p>Constraint names must be unique within the module that contains the data object on which the constraint is defined.</p>
</li>
<li>
<p>In the <span class="bold">Type</span> column, select <span class="bold">Unique Key</span>.</p>
<p>Press the tab key to navigate out of the Type column or use the mouse and click the empty space in the Keys tab.</p>
</li>
<li>
<p>Click <span class="bold">Add Local Column</span>.</p>
<p>A new row is added below the current row that contains the constraint name and constraint type. This new row displays a list in the Local Columns column.</p>
</li>
<li>
<p>In the <span class="bold">Local Columns</span> list of the new row, select the name of the column on which a unique key should be created.</p>
</li>
<li>
<p>(Optional) To create a composite unique key, repeat steps 4 and 5 for each column to add to the unique key.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHCEFJC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Defining <a id="sthref225"></a><a id="sthref226"></a>Check Constraints</h4>
<p><span class="bold">To define a check constraint:</span></p>
<ol>
<li>
<p>On the Keys tab, click the <span class="bold">Add Constraint</span> button.</p>
<p>A blank row is displayed with the cursor positioned in the Name field.</p>
</li>
<li>
<p>Enter the name of the constraint in the <span class="bold">Name</span> column and press the <span class="bold">Enter</span> key.</p>
<p>You can also press the Tab key or click any other location in the editor.</p>
<p>Constraint names must be unique within the module that contains the data object on which the constraint is defined.</p>
</li>
<li>
<p>In the <span class="bold">Type</span> column, select <span class="bold">Check Constraint</span>.</p>
<p>Press the tab key to exit from the Type column or use the mouse and click the empty space in the Keys tab.</p>
</li>
<li>
<p>In the Check Condition column, enter the condition to be applied for the check constraint. For example, salary &gt; 2000. If you leave this field blank, then an error is generated during validation and you cannot generate valid code for this constraint.</p>
<p>The column name referenced in the check condition must exactly match the physical column name defined in the table. Oracle Warehouse Builder does not check the syntax of the condition during validation. This may result in errors during deployment. If this happens, then check the Repository Browser for details.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHHCEEJ"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Editing <a id="sthref227"></a><a id="sthref228"></a>Constraints</h3>
<p>You can edit constraints using the Keys tab of the object editors to accomplish the following tasks:</p>
<ul>
<li>
<p>Rename a constraint</p>
</li>
<li>
<p>Change the constraint type</p>
</li>
<li>
<p>Modify the check condition</p>
</li>
<li>
<p>Modify the referenced column for a foreign key constraint</p>
</li>
<li>
<p>Modify the primary key column for a primary key</p>
</li>
</ul>
<p>After editing constraint definitions, ensure that you regenerate and redeploy the data object containing the modified constraints.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCJDBD"></a><a id="WBETL02019"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Defining Indexes</h2>
<p><a id="sthref229"></a>Use indexes to enhance query performance of your data warehouse. In Oracle Warehouse Builder, you can define indexes for tables and materialized views. In the following sections, the word <span class="italic">table</span> refers to all objects for which you can define indexes.</p>
<p>Indexes are important for speeding queries by quickly accessing data processed in a warehouse. You can create indexes on one or more columns of a table to speed SQL statement execution on that table. Indexes have the following characteristics:</p>
<ul>
<li>
<p>Indexes provide pointers to the rows in a table that contain a given key value.</p>
</li>
<li>
<p>Index column values are stored presorted.</p>
</li>
<li>
<p>Because the database stores indexes in a separate area of the database, you can create and drop indexes at any time without affecting the underlying table.</p>
</li>
<li>
<p>Indexes are independent of the data in the table. When you delete, add, or update data, the indexes are maintained automatically.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DWHSG" href="../../server.112/e25554/toc.htm"><span class="italic">Oracle Database Data Warehousing Guide</span></a> for more information about indexing strategies</div>
<a id="CHDCDFAJ"></a>
<div class="sect2">
<h3 class="sect2">Creating Indexes</h3>
<p><a id="sthref230"></a><a id="sthref231"></a>You create indexes by using the Indexes tab in the editor. To start the editor, navigate to the table or other data object on the Projects Navigator and double-click it, or right-click and select <span class="bold">Open.</span> When you select an index type, Oracle Warehouse Builder displays the appropriate template enabling you to create the index. Index names must be unique within the module that contains the data object on which the indexes are defined.</p>
<p><a id="sthref232"></a><a id="sthref233"></a>For all types of indexes except bitmap indexes, you can determine whether the index inherits the partitioning method of the underlying table. An index that inherits its partitioning method is known as a <span class="italic">local index</span> whereas an index with its own partitioning method is known as a <span class="italic">global index.</span> For additional information, see <a href="#i1128207">"Index Partitioning"</a>.</p>
<p>You can create the following <a id="sthref234"></a>types of indexes in Oracle Warehouse Builder:</p>
<ul>
<li>
<p><span class="bold">Unique:</span> These indexes ensure that no two rows of a table have duplicate values in the key column or composite key columns.</p>
</li>
<li>
<p><span class="bold">Non-Unique:</span> These are B-tree type indexes that do not impose restrictions against duplicate values in the key column or composite key columns.</p>
</li>
<li>
<p><span class="bold">Bitmap:</span> These indexes are primarily used for data warehousing applications to enable the querying of large amounts of data. These indexes use bitmaps as key values instead of a list of row IDs. Bitmaps are effective when the values for the index key comprise a small list. For example, <code>AGE_GROUP</code> could be a good index key but <code>AGE</code> would not.</p>
<p>Bitmaps enable star query transformations, which are cost-based query transformations aimed at efficiently executing star queries. A prerequisite of the star transformation is that a bitmap index must be built on each of the foreign key columns of the cube or cubes.</p>
<p>When you define a bitmap index in Oracle Warehouse Builder, set its scope to LOCAL and partitioning to NONE.</p>
</li>
<li>
<p><span class="bold">Function-based:</span> These indexes compute and store the value of a function or expression that you define on one or more columns in a table. The function can be an arithmetic expression that contains a PL/SQL function, package function, C callout, or SQL function.</p>
</li>
<li>
<p><span class="bold">Composite:</span> Also known as concatenated indexes, these are indexes on multiple columns. The columns can be in any order in the table and need not be adjacent to each other.</p>
<p>To define a composite index in Oracle Warehouse Builder, create the index as you would any other index and assign between 2 and 32 index columns.</p>
</li>
<li>
<p><span class="bold">Reverse:</span> For each indexed column except for the row ID column, this index reverses the bytes in the columns. Because the row ID is not reversed, this index maintains the column order.</p>
<p>To define a reverse index in Oracle Warehouse Builder, create the index as you would any other index and then go to the Configurations tab of the data object and set the Index Sorting parameter listed under the Performance Parameters to REVERSE.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEHGEGGI"></a><a id="WBETL02020"></a>
<div class="sect1">
<h2 class="sect1">Defining Partitions</h2>
<p><a id="sthref235"></a>Partitions enable you to efficiently manage very large tables and indexes by dividing them into smaller, more manageable parts. Partitions improve query and load performance because operations work on subsets of data. Use partitions to enhance data access and improve overall application performance, especially for applications that access tables and indexes with millions of rows and many gigabytes of data.</p>
<p>In Oracle Warehouse Builder, you can define partitions for tables, indexes, materialized views, and MOLAP cubes. For brevity, in the following sections, the word <span class="italic">table</span> is used to refer to all objects for which you can define partitions. The following sections discuss partitioning for all the objects previously listed except partitioning MOLAP cubes, which is described separately.</p>
<p>You define partitions for these objects by using the Partitions tab in the object editors. Depending on the type of partition that you create, you must configure tablespaces for the partitions in the Configuration tab.</p>
<p>You can perform the following <a id="sthref236"></a>types of partitioning:</p>
<ul>
<li>
<p><a href="#CIHFCHAF">"Range Partitioning"</a>: Use range partitioning to create partitions based on a range of values in a column. When you use range partitioning with a date column as the partition key, you can design mappings that instantly update target tables, as described in <a href="etl_performance.htm#i1131648">"Improved Performance through Partition Exchange Loading"</a>.</p>
</li>
<li>
<p><a href="#CIHIEEAG">"Hash Partitioning"</a>: Use hash partitioning to direct Oracle Database to evenly divide the data across a recommended even number of partitions. This type of partitioning is useful when data is not historical and there is no obvious column or column list.</p>
</li>
<li>
<p><a href="#CHDCEHDH">"Hash by Quantity Partitioning"</a>: To quickly define hash partitioning, use Hash by quantity partitioning. This equals hash partitioning except that you specify only a partition key and the number of partitions. The partitions are created and named automatically. You can then configure the partitions to share the same tablespace list.</p>
</li>
<li>
<p><a href="#CIHHFIIA">"List Partitioning"</a>: Use list partitioning to explicitly assign rows to partitions based on a partition key that you select. It enables you to organize the data in a structure not available in the table.</p>
</li>
<li>
<p><a href="#CHDBBJGH">"Composite Partitioning"</a>: You can use Oracle Warehouse Builder to specify a composite of either range-hash, range-hash by quantity, or range-list partitioning. Oracle Database first performs the range partitioning and then further divides the data using the second partitioning that you select. For example, in range-list partitioning, you can base partitions on the sales transaction date and then further divide the data based on lists of states where transactions occurred.</p>
</li>
<li>
<p><a href="#i1128207">"Index Partitioning"</a>: You can define an index that inherits the partitioning method of its underlying table. Or, you can partition an index with its own partitioning strategy.</p>
</li>
</ul>
<p>Depending on the partition type that you create, the Partitions tab is dynamically altered to display only the relevant information. Columns or rows on this tab that are not required for a particular partition type are hidden.</p>
<p>For example, when you create a range or list partition, since you cannot create subpartitions, the rows Subpartition Key and Subpartition Template are hidden. When you create a range-hash partition, the Subpartition Template row contains an entry for Hash Subpartition Quantity with the condition "=".</p>
<p>The conditions that define the upper bound for subpartitions depend on the type of partitioning method used. For example, for a range-list partition, the condition enabled for determining the upper bound for a partition must be based on equality. Thus, the column that contains the condition (the column between the Partition and Value columns) contains "=" and is disabled. However, the condition for determining the upper bound for the subpartition is displayed as "&lt;" and you cannot edit this field.</p>
<a id="CIHFCHAF"></a>
<div class="sect2">
<h3 class="sect2">Range <a id="sthref237"></a><a id="sthref238"></a><a id="sthref239"></a>Partitioning</h3>
<p>Range partitioning is the most common type of partitioning and is often used to partition data based on date ranges. For example, you can partition sales data into monthly partitions.</p>
<p>To use range partitioning, go to the Partitions tab in the editor to specify a partition key and assign a name and value range for each partition you want to create.</p>
<p><span class="bold">To partition data by range:</span></p>
<ol>
<li>
<p>On the Partitions tab in the object editor, click the cell under <span class="bold">Type</span> and select <span class="bold">Range.</span></p>
<p>If necessary, click the plus sign to the left of Type to expand the template for the range partition.</p>
</li>
<li>
<p>Select a partition key under the Partition Key node.</p>
<p>Oracle Warehouse Builder lists all the columns for the object you selected under Key Columns. You can select a column of any data type; however, <code>DATE</code> is the most common partition key for range partitioning.</p>
<p>You can base the partition key on multiple key columns. To add another key column, select the partition key node and click <span class="bold">Add</span>.</p>
</li>
<li>
<p>Define the partitions under the Partitions node.</p>
<p>To assist you in defining the partitions, the template offers two partitions that you can edit but not delete. P1 represents the first partition and PDEFAULT represents the last partition. To partition data based on month, then you can rename P1 to <span class="italic">Jan</span> and PDEFAULT to <span class="italic">Dec.</span></p>
<p>The last partition is set to the keyword MAXVALUE, which represents a virtual infinite value that sorts higher than any other value for the data type, including the null value.</p>
<p>To add more partitions between the first and last partitions, click the Partitions node and select <span class="bold">Add.</span></p>
<p>In <span class="bold">Values,</span> specify the greatest value for the first range and all the additional ranges that you create. These values are the less than values.</p>
</li>
</ol>
<div class="sect3"><a id="sthref240"></a>
<h4 class="sect3">Example of <a id="sthref241"></a>Range Partitioning</h4>
<p><a href="#CIHGFIDA">Figure 2-1</a> shows how to define a partition for each quarter of a calendar year.</p>
<div class="figure">
<p class="titleinfigure"><a id="CIHGFIDA"></a>Figure 2-1 Example Table with Range Partitioning</p>
<img width="578" height="235" src="img/partition_tab_range_ex.gif" alt="Description of Figure 2-1 follows" /><br />
<a id="sthref242" href="img_text/partition_tab_range_ex.htm">Description of "Figure 2-1 Example Table with Range Partitioning"</a><br />
<br /></div>
<!-- class="figure" -->
<p>You can also partition data for each month or week. When you design mappings using such a table, consider enabling Partition Exchange Loading (PEL). PEL is a data definition language (DDL) operation that swaps existing partitions on the target table with new partitions. Because it is not a data manipulation language (DML) operation, the exchange of partitions occurs instantaneously.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHIEEAG"></a>
<div class="sect2">
<h3 class="sect2">Hash Partitioning</h3>
<p><a id="sthref243"></a><a id="sthref244"></a>Hash partitioning assigns data to partitions based on a hashing algorithm that Oracle Database applies to a partitioning key you identify. The hashing algorithm evenly distributes rows among partitions, giving partitions approximately the same size. Hash partitioning is a good and easy-to-use alternative to range partitioning when data is not historical and there is no obvious column or column list where logical range partition pruning can be advantageous.</p>
<p><span class="bold">To partition <a id="sthref245"></a><a id="sthref246"></a>data based on the hash algorithm:</span></p>
<ol>
<li>
<p>On the Partitions tab in the object editor, click the cell below <span class="bold">Type</span> and select <span class="bold">Hash.</span></p>
<p>If necessary, click the plus sign to the left of Type to expand the template for defining hash partitions.</p>
</li>
<li>
<p>Select a partition key in the Key Columns column under the Partition Key node.</p>
<p>Oracle Warehouse Builder lists all the columns for the object you selected. You can select a column of any data type.</p>
</li>
<li>
<p>Define the partitions under the Partitions node.</p>
<p>Oracle Warehouse Builder provides two partitions that you can rename. Click the Partitions node and select <span class="bold">Add</span> to add as many partitions as necessary.</p>
<p>Oracle Database uses a linear hashing algorithm. To prevent data from clustering within specific partitions, you should define the number of partitions by a power of two (for example, 2, 4, 8).</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDCEHDH"></a>
<div class="sect2">
<h3 class="sect2">Hash <a id="sthref247"></a><a id="sthref248"></a>by Quantity Partitioning</h3>
<p>Use hash by quantity partitioning to quickly define hash partitioning. When you define a partition key and specify the number of partitions, the partitions are automatically created and named. You can then configure the partitions to share the same tablespace list.</p>
<p><span class="bold">To partition <a id="sthref249"></a><a id="sthref250"></a><a id="sthref251"></a>data based on the hash by quantity algorithm:</span></p>
<ol>
<li>
<p>On the Partitions tab in the object editor, click the cell below <span class="bold">Type</span> and select <span class="bold">Hash by Quantity.</span></p>
<p>If necessary, click the plus sign to the left of Type to expand the template for defining hash by quantity partitions.</p>
</li>
<li>
<p>Define the partition key using the Partition Key column under the Partition Key node.</p>
</li>
<li>
<p>Define the number of partitions in the Values column under the Partitions node. The default value is two partitions.</p>
<p>Oracle Database uses a linear hashing algorithm and, to prevent data from clustering within specific partitions, you should define the number of partitions by a power of two (for example, 2, 4, 8).</p>
</li>
<li>
<p>In the Configuration tab, define the <a href="#CHDCACGD">"Partition Tablespace List"</a> and <a href="#CHDHHBAB">"Overflow Tablespace List"</a>.</p>
<p>To display the Configuration tab for a data object, right-click the data object and select <span class="bold">Configure</span>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHHFIIA"></a>
<div class="sect2">
<h3 class="sect2">List <a id="sthref252"></a><a id="sthref253"></a>Partitioning</h3>
<p>List partitioning enables you to explicitly assign rows to partitions. You can achieve this by specifying a list of discrete values for each partition. The advantage of list partitioning is that you can group and organize unordered and unrelated sets of data in a natural way.</p>
<p><a href="#CIHIAHGJ">Figure 2-2</a> shows an example of a table partitioned into list partitions based on the instructions described below.</p>
<p><span class="bold">To <a id="sthref254"></a><a id="sthref255"></a><a id="sthref256"></a>partition data based on a list of values:</span></p>
<ol>
<li>
<p>On the Partitions tab in the object editor, click the cell below <span class="bold">Type</span> and select <span class="bold">List.</span></p>
<p>If necessary, click the plus sign to the left of Type to expand the template for defining list partitions.</p>
</li>
<li>
<p>Select a partition key using the Key Columns column under the Partition Key node.</p>
<p>Oracle Warehouse Builder lists all the columns for the object you selected. You can select a column of any data type.</p>
</li>
<li>
<p>Define the partitions under the Partitions node.</p>
<p>PDEFAULT is set to the keyword DEFAULT and includes all rows not assigned to any other partition. A partition that captures all unassigned rows is essential for maintaining the integrity of the data.</p>
<p>To assist you in defining the partitions, the template offers two partitions that you can edit but not delete. P1 represents the first partition and PDEFAULT represents the last partition.</p>
<p>To add more partitions between the first and last partitions, click the Partitions node and select <span class="bold">Add.</span></p>
<p>In <span class="bold">Values,</span> enter a comma-delimited list of values for each partition that corresponds to data in the partition key you previously selected. For example, if the partition key is <code>COUNTRY_ID</code>, then you can create partitions for Asia, Eastern Europe, Western Europe, and so on. Then, for the values for each partition, list the corresponding COUNTRY_IDs for each country in the region.</p>
</li>
</ol>
<p class="subhead2"><a id="sthref257"></a>Example of <a id="sthref258"></a>List Partitioning</p>
<p><a href="#CIHIAHGJ">Figure 2-2</a> shows a table with data partitioned into different regions by using list partitioning based on the <code>COUNTRY_ID</code> column. Each partition has a single comma-separated list.</p>
<div class="figure">
<p class="titleinfigure"><a id="CIHIAHGJ"></a>Figure 2-2 List Partitioning Based on a Single Key Column</p>
<img width="514" height="242" src="img/partition_tab_list_ex.gif" alt="Description of Figure 2-2 follows" /><br />
<a id="sthref259" href="img_text/partition_tab_list_ex.htm">Description of "Figure 2-2 List Partitioning Based on a Single Key Column"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a href="#CIHCCFFJ">Figure 2-3</a> shows a table with data partitioned based on key columns REGION and SALES_DIVISION. Each partition includes two comma-separated lists enclosed by single quotation marks. In this example, N, NE, S, SW, W, and NW correspond to REGION while PRD1, PRD2, PRD3, and so on correspond to SALES_DIVISION.</p>
<div class="figure">
<p class="titleinfigure"><a id="CIHCCFFJ"></a>Figure 2-3 List Partitioning Based on Multiple Key Columns</p>
<img width="556" height="215" src="img/partition_tab_list_ex2.gif" alt="Description of Figure 2-3 follows" /><br />
<a id="sthref260" href="img_text/partition_tab_list_ex2.htm">Description of "Figure 2-3 List Partitioning Based on Multiple Key Columns"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="CHDBBJGH"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Composite<a id="sthref261"></a><a id="sthref262"></a> Partitioning</h3>
<p>Composite partitioning methods include range-hash, range-hash by quantity, and range-list partitioning. Oracle Database first performs the range partitioning and then further divides the data using the second partitioning that you select.</p>
<p>The steps for defining composite partition methods are similar to those used to define simple partition methods such as (range, hash, and list) but include additional options.</p>
<p><span class="bold">To partition data based on range and then subpartition based on list, hash, or hash by quantity:</span></p>
<ol>
<li>
<p>On the Partitions tab in the object editor, click the cell below <span class="bold">Type</span> and select one of the composite partitioning methods.</p>
<p>If necessary, click the plus sign to the left of Type to expand the template.</p>
</li>
<li>
<p>Select a partition key and define partitions as described in <a href="#CIHFCHAF">"Range Partitioning"</a>.</p>
<p>In <a href="#CHDDCJEE">Figure 2-4</a>, the partition key is <code>SALE_DATE</code> and its associated range partitions are QTR_1, QTR_2, QTR_3, and QTR_4.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDDCJEE"></a>Figure 2-4 Range-List Partitioning with List Defined Under a Subpartition Template</p>
<img width="759" height="447" src="img/partition_tab_composite.gif" alt="Description of Figure 2-4 follows" /><br />
<a id="sthref263" href="img_text/partition_tab_composite.htm">Description of "Figure 2-4 Range-List Partitioning with List Defined Under a Subpartition Template"</a><br />
<br /></div>
<!-- class="figure" --></li>
<li>
<p>Select a column for the subpartition key in the Key Columns list under the Subpartition Key node.</p>
</li>
<li>
<p>Under the Subpartition Template node, define the values for the second partitioning method as described in <a href="#CHDCJECF">"About the Subpartition Template"</a>.</p>
</li>
<li>
<p>(Optional) Define custom subpartitions.</p>
<p>For range-list partitions, you can specify custom subpartitions that override the defaults you defined under the subpartition node. For details, see <a href="#CHDEBJAD">"Creating Custom Subpartitions"</a>.</p>
</li>
<li>
<p>Configure the <a href="#CHDCACGD">"Partition Tablespace List"</a> and <a href="#CHDHHBAB">"Overflow Tablespace List"</a> in the Configuration tab.</p>
<p>To display the Configuration tab for a data object, right-click the data object and select <span class="bold">Configure</span>.</p>
</li>
</ol>
<a id="CHDCJECF"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About the Subpartition Template</h4>
<p>Use the subpartition template to specify the second partitioning method in composite partitioning. The steps you take depend on the type of composite partition you select.</p>
<p>For range-hash by quantity, enter the number of subpartitions only.</p>
<p>For range-hash, the subpartition template enables you to enter names for the subpartitions only.</p>
<p>For range-list, name the lists and enter comma-delimited values. Be sure to preserve the last subpartition as set to DEFAULT.</p>
<p><a href="#CHDDCJEE">Figure 2-4</a> shows a list subpartition based on the <code>REGION</code> key column and subpartitions for groups of countries. Oracle Warehouse Builder divides each partition (such as QTR_1 and QTR_2) into subpartitions (such as ASIA and WEST_EUR).</p>
</div>
<!-- class="sect3" -->
<a id="CHDEBJAD"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating Custom <a id="sthref264"></a><a id="sthref265"></a>Subpartitions</h4>
<p>Using the subpartition template is the most convenient and likely the most common way to define subpartitions. Entries that you specify under the Subpartition Template node apply uniformly to all the partitions under the partition node. However, in some cases, you may want to override the subpartition template.</p>
<p>For range-hash by quantity, select a partition and then click <span class="bold">Add Hash Count.</span> Oracle Warehouse Builder expands the partition node to enable you to specify the number of hash subpartitions that uniquely apply to that partition.</p>
<p>For range-hash, select a partition and then click <span class="bold">Add Subpartition.</span> Oracle Warehouse Builder expands the partition node and you can name subpartitions for that partition only.</p>
<p>For range-list, select a partition and then click <span class="bold">Add Subpartition.</span> Oracle Warehouse Builder expands the partition node to enable you to specify list subpartitions for that partition only. Be sure to preserve the last subpartition as set to DEFAULT.</p>
<p><a href="#CHDCJHJJ">Figure 2-5</a> shows that partition QTR_1 is subpartitioned into lists for UK, EUR, and ALL_OTHERS whereas the other quarters are partitioned according to the subpartition template.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDCJHJJ"></a>Figure 2-5 Subpartitions Overriding Subpartition Template</p>
<img width="746" height="519" src="img/partition_tab_comp_subpt.gif" alt="Description of Figure 2-5 follows" /><br />
<a id="sthref266" href="img_text/partition_tab_comp_subpt.htm">Description of "Figure 2-5 Subpartitions Overriding Subpartition Template"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1128207"></a>
<div class="sect2">
<h3 class="sect2">Index <a id="sthref267"></a><a id="sthref268"></a>Partitioning</h3>
<p><a id="sthref269"></a><a id="sthref270"></a>For all types of indexes except bitmap indexes, you can determine whether the index inherits the partitioning method of the underlying table. An index that inherits the partitioning method of the underlying table is known as a <span class="italic">local index</span>. An index with its own partitioning method is known as a <span class="italic">global index.</span></p>
<p class="subhead2"><a id="sthref271"></a>Local <a id="sthref272"></a>Index</p>
<p>Local indexes are partitioned on the same columns and have the same definitions for partitions and subpartitions as specified on the underlying table. Furthermore, local indexes share the same tablespaces as the table.</p>
<p>For example, if you used range-list partitioning to partition a table of sales data by quarter and then by region, then a local index is also partitioned by quarter and then by region.</p>
<p>Bitmap indexes can only be defined as local indexes to facilitate the best performance for querying large amounts of data.</p>
<p>To define an index as local in Oracle Warehouse Builder set the <span class="bold">Scope</span> to LOCAL and <span class="bold">Partitioning</span> to NONE.</p>
<p class="subhead2"><a id="sthref273"></a>Global Index</p>
<p>A global index is one in which you can partition the index independently of the partition strategy applied to the underlying table. You can choose between range or hash partitioning. The global index option is available for all indexes except bitmap indexes.</p>
<p>In releases before Oracle Database 10<span class="italic">g</span>, Oracle recommended that you not use global indexes for data warehouse applications because deleting partitions on the table during partition maintenance would invalidate the entire index and result in having to rebuild the index. Beginning with Oracle Database 10<span class="italic">g,</span> this is no longer a limitation, as global indexes are no longer negatively affected by partitioning maintenance.</p>
<p>Nonetheless, local indexes are likely to be the preferred choice for data warehousing applications due to ease in managing partitions and the ability to parallelize query operations.</p>
<p>A global index is useful when you want to specify an index partition key other than any of the table partition keys. For a global index, ensure that there are no duplicate rows in the index key column and select unique for the index type.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref274"></a>
<h4 class="sect3">Index Performance Considerations</h4>
<p>As you decide which type of index to use, consider that indexes rank in performance in the following order:</p>
<ol>
<li>
<p>Unique and local index</p>
</li>
<li>
<p>Unique and global index</p>
</li>
<li>
<p>All other non-unique indexes (normal, bitmap, function-based) and local index.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref275"></a>
<h3 class="sect2">Configuring Partitions</h3>
<p>For some but not all partitioning methods, you must configure partition tablespaces.</p>
<p>You can access the parameters for partitions using the Projects Navigator. Right-click the table and select <span class="bold">Configure</span> to display the Configuration tab for the table. Scroll down to view the Partition Parameters node.</p>
<p class="subhead2"><a id="CHDCACGD"></a>Partition Tablespace List</p>
<p>Enter a comma-delimited list of tablespaces when you partition by any of the following methods: hash by quantity, range-list, range-hash, or range-hash by quantity.</p>
<p>If you neglect to specify partition tablespaces, then the default tablespaces associated with the table are used and the performance advantage for defining partitions is not realized.</p>
<p class="subhead2"><a id="CHDHHBAB"></a>Overflow Tablespace List</p>
<p>Enter a comma-delimited list of tablespaces when you partition by the method hash by quantity. If you provide a list of tablespaces less than the number of partitions, then the Oracle Database cycles through those tablespaces.</p>
<p>If you neglect to specify overflow tablespaces, then the default tablespaces associated with the table are used and the performance advantage for defining partitions is not realized when the limits for the partition tablespaces are exceeded.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEHCCAGI"></a><a id="WBETL02021"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Defining Attribute Sets</h2>
<p><a id="sthref276"></a><a id="sthref277"></a><a id="sthref278"></a>An attribute set contains a chosen set of columns. Attribute sets are useful while defining a mapping or during data import and export. Oracle Warehouse Builder enables you to define attribute sets for tables, views, and materialized views. For brevity, in the following sections, the word <span class="italic">table</span> is used to refer to all objects for which you can define attribute sets.</p>
<a id="CIHDJAHF"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating <a id="sthref279"></a><a id="sthref280"></a>Attribute Sets</h3>
<p>Use the Attribute Sets tab of the object editors to create attribute sets. You can define attribute sets for tables, views, and materialized views.</p>
<p><span class="bold">To define an attribute set:</span></p>
<ol>
<li>
<p>From the Projects Navigator, right-click the object name in which the attribute set is to be defined and select <span class="bold">Open.</span></p>
<p>The object editor is displayed.</p>
</li>
<li>
<p>Select the Attribute Sets tab.</p>
<p>This tab contains two sections: <span class="italic">Attribute sets</span> and <span class="italic">Attributes of the selected attribute set</span>.</p>
<p>The <span class="italic">Attribute sets</span> section displays the attribute sets defined for the table. It contains two columns that define each attribute set: Name and Description.</p>
<p>The <span class="italic">Attributes of the selected attribute set</span> section lists all the attributes in the table. The attributes that are selected using the Include column are the ones that are included in the attribute set that is selected in the <span class="italic">Attribute sets</span> section.</p>
</li>
<li>
<p>In the <span class="italic">Attribute sets</span> section, click the <span class="bold">Name</span> field of an empty row and enter a name for the attribute set.</p>
<p>In physical mode, you must enter a name between 1 and 30 valid characters. Spaces are not enabled. In logical mode, you can enter up to 200 valid characters. The attribute set name must be unique within the object.</p>
<p>Notice that all the table attributes are displayed in the <span class="italic">Attributes of the selected attribute set</span> section.</p>
</li>
<li>
<p>In the <span class="italic">Attributes of the selected attribute set</span> section, select <span class="bold">Include</span> for each attribute you want to include in the attribute set. The order in which you select the columns determines their initial order in the attribute set.</p>
<p>Click <span class="bold">Select All</span> to select all the displayed columns in the attribute set. Click <span class="bold">Deselect All</span> to exclude all the columns from the attribute set. To remove a column from the attribute set, deselect <span class="bold">Include</span>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHCAFCH"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Editing <a id="sthref281"></a><a id="sthref282"></a>Attribute Sets</h3>
<p>Use the Attribute Sets tab of the object editor to edit attribute sets. Before you edit an attribute set, ensure that the editor is open for the object that contains the attribute set. Also, navigate to the Attribute Sets tab of the editor.</p>
<p>You can perform the following actions when you edit an attribute set:</p>
<ul>
<li>
<p>Rename the attribute set</p>
<p>Click the name of the attribute set in the <span class="bold">Name</span> column of the <span class="bold">Attribute sets of the entity</span> section and enter the new name.</p>
</li>
<li>
<p>Add or remove attributes from the attribute set</p>
<p><span class="bold">Adding attributes to an attribute set:</span> Select the attribute set to which you want to add attributes by clicking the gray cell to the left of the attribute set name in the <span class="italic">Attribute sets</span> section. In the <span class="italic">Attributes of the selected attribute set</span> section, select <span class="bold">Include</span> for each attribute to include in the attribute set.</p>
<p><span class="bold">Removing attributes from an attribute set:</span> Select the attribute set from which you want to remove attributes by clicking the gray cell to the left of the attribute set. In the <span class="italic">Attributes of the selected attribute set</span> section, unselect <span class="bold">Include</span> for the attributes to remove from the attribute set.</p>
</li>
<li>
<p>Delete the attribute set</p>
<p>In the <span class="italic">Attribute Sets</span> section, right-click the gray cell to the left of the attribute set name and select <span class="bold">Delete</span>.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i99577"></a><a id="WBETL02022"></a>
<div class="sect1">
<h2 class="sect1">Defining <a id="sthref283"></a>Sequences</h2>
<p>A sequence is a database object that generates a serial list of unique numbers. You can use sequences to generate unique primary key values and to coordinate keys across multiple rows or tables. Sequence values are guaranteed to be unique. When you create a sequence, you are creating sequence definitions that are saved in the workspace. Sequence definitions can be used in mappings to generate unique numbers while transforming and moving data to your target system.</p>
<p>The following sections provide information about using sequences:</p>
<ul>
<li>
<p><a href="#i99617">"About Sequences"</a></p>
</li>
<li>
<p><a href="#i99627">"Creating Sequence Definitions"</a></p>
</li>
<li>
<p><a href="#i99679">"Editing Sequence Definitions"</a></p>
</li>
</ul>
<a id="i99617"></a>
<div class="sect2">
<h3 class="sect2">About Sequences</h3>
<p>A sequence is referenced in SQL statements with the NEXTVAL and CURRVAL pseudocolumns. Each new sequence number is incremented by a reference to the pseudocolumn NEXTVAL, whereas the current sequence number is referenced using the pseudocolumn CURRVAL. These attributes are created when you define a sequence.</p>
<p>You can also import sequence definitions from existing source systems using the Metadata Import Wizard.</p>
</div>
<!-- class="sect2" -->
<a id="i99627"></a>
<div class="sect2">
<h3 class="sect2">Creating Sequence <a id="sthref284"></a><a id="sthref285"></a><a id="sthref286"></a><a id="sthref287"></a>Definitions</h3>
<p><span class="bold">To create a sequence:</span></p>
<ol>
<li>
<p>From the Projects Navigator, expand the Databases node and then the target module node.</p>
</li>
<li>
<p>Right-click Sequences and select <span class="bold">New Sequence</span> from the menu.</p>
<p>Oracle Warehouse Builder displays the Create Sequence dialog box.</p>
</li>
<li>
<p>Use the Name field to specify a name and the Description field to specify an optional description for the sequence.</p>
<p>In addition to the rules listed in <a href="#CHDEAEAD">"Naming Conventions for Data Objects"</a>, the name must be unique across the module.</p>
</li>
<li>
<p>Click <span class="bold">OK.</span></p>
<p>Oracle Warehouse Builder stores the definition for the sequence and inserts its name in the Projects Navigator.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i99679"></a>
<div class="sect2">
<h3 class="sect2">Editing Sequence <a id="sthref288"></a><a id="sthref289"></a>Definitions</h3>
<p>Use the Edit Sequence dialog box to edit a sequence definition. You can edit the name, description, and column notes of a sequence.</p>
<p>To edit sequence properties, right-click the name of the sequence from the Projects Navigator and select <span class="bold">Open.</span> Or double-click the name of the sequence. The Edit Sequence dialog box is displayed. This dialog box contains two tabs: <a href="#CIHCJAAI">"Name Tab"</a> and <a href="#CIHHCECC">"Columns Tab"</a>. Use these tabs to rename a sequence or edit sequence columns.</p>
<a id="CIHCJAAI"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref290"></a><a id="sthref291"></a>Name Tab</h4>
<p>Rename a sequence by typing the new name in the Name field. You can also rename a sequence by right-clicking the sequence name in the Projects Navigator and selecting <span class="bold">Rename</span>.</p>
<p>Follow the rules in <a href="#CHDEAEAD">"Naming Conventions for Data Objects"</a> to specify the name and description.</p>
<p>To modify a sequence description, enter the new description in the Description field.</p>
</div>
<!-- class="sect3" -->
<a id="CIHHCECC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Columns Tab</h4>
<p>The Columns tab displays the sequence columns CURRVAL and NEXTVAL.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CEGJJIJG"></a><a id="WBETL02023"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Defining User-Defined Types<a id="sthref292"></a></h2>
<p>User-defined data types use Oracle built-in data types and other user-defined data types as the building blocks of object types that model the structure and behavior of data in applications. The built-in data types are mostly scalar types and do not provide the same flexibility that modeling an application-specific data structure does.</p>
<p>User-defined data types extend the modeling capabilities of native data types by specifying both the underlying persistent data (attributes) and the related behaviors (methods). With user-defined types, you can create better models of complex entities in the real world by binding data attributes to semantic behavior.</p>
<p>Consider a simple example of a <code>Customers</code> table. The Customer address information is usually modeled as four or five separate fields, each with an appropriate scalar type. User-defined types enable for a definition of "address" as a composite type and also to define validation on that type.</p>
<p>Oracle Warehouse Builder enables you to define the following user-defined data types:</p>
<ul>
<li>
<p>Object types</p>
</li>
<li>
<p>Varrays</p>
</li>
<li>
<p>Nested tables</p>
</li>
</ul>
<a id="BABEGJEG"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Object Types<a id="sthref293"></a></h3>
<p>Object types are abstractions of the real-world entities, such as purchase orders, that application programs deal with. An object type is a heterogeneous user-defined type. It is composed of one or more user-defined types or scalar types.</p>
<p>An object type is a schema object with the following components:</p>
<ul>
<li>
<p><span class="bold">Name:</span> A name identifies the object type uniquely within that schema.</p>
</li>
<li>
<p><span class="bold">Attributes:</span> An attribute is used to create the structure and state of the real-world entity that is represented by an object. Attributes can be built-in types or other user-defined types.</p>
</li>
<li>
<p><span class="bold">Methods:</span> A method contains functions or procedures that are written in PL/SQL or Java and stored in the database, or written in a language such as C and stored externally. Methods are code-based representations of the operations that an application can perform on the real-world entity.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Methods are currently not supported.</div>
</li>
</ul>
<p>For example, the <code>ADDRESS</code> type definition can be defined as follows:</p>
<p><code>CREATE TYPE ADDRESS AS OBJECT (street_name varchar2(240), door_no varchar2(30), po_box_no number, city varchar2(35), state varchar2(30), country varchar2(30));</code></p>
<p>the type has been defined it can be used across the schema for any table that requires the type definition "address" as one of its fields.</p>
</div>
<!-- class="sect2" -->
<a id="CHDIEGDG"></a><a id="WBETL02012"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Defining Object Types<a id="sthref294"></a></h3>
<p><span class="bold">To define an object type:</span></p>
<ol>
<li>
<p>In the Projects Navigator, expand the Databases node and then the Oracle node.</p>
</li>
<li>
<p>Expand the target module in which you want to create the object type.</p>
</li>
<li>
<p>Expand the User Defined Types node.</p>
</li>
<li>
<p>Right-click Object Types and select <span class="bold">New Object Type</span>.</p>
<p>The Create Object Type dialog box is displayed.</p>
</li>
<li>
<p>Enter a name and an optional description for the object type and click <span class="bold">OK</span>.</p>
<p>The Object Type Editor is displayed. Use the following tabs on the editor to define the object type:</p>
<ul>
<li>
<p><a href="#BEHEGFDD">"Name Tab"</a></p>
</li>
<li>
<p><a href="#BEHJDHFF">"Columns Tab"</a></p>
</li>
</ul>
</li>
</ol>
<a id="BEHEGFDD"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Name Tab</h4>
<p>Use the Name field to enter a name for the object type. Use the Description field to enter an optional description for the object type. To rename an object type, select the name and enter a new name.</p>
<p>Follow the rules in <a href="#CHDEAEAD">"Naming Conventions for Data Objects"</a> to specify a name and description.</p>
</div>
<!-- class="sect3" -->
<a id="BEHJDHFF"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Columns Tab</h4>
<p>Use the Columns tab to define the attributes in the object type. This tab displays a table that you can use to define attributes. Each row in the table corresponds to the definition of one object type attribute.</p>
<p>Specify the following details for each attribute:</p>
<ul>
<li>
<p><span class="bold">Name:</span> Enter the name of the attribute. The attribute name must be unique within the object type.</p>
</li>
<li>
<p><span class="bold">Data Type:</span> Select the data type of the attribute from the Data Type list. Oracle Warehouse Builder assigns a default data type for the attribute based on the name. For example, if you create an attribute named <code>start_date</code>, then the data type assigned is <code>DATE</code>. You can change the default assignment if it does not suit your data requirement.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDFIADI">"Supported Data Types"</a> for a list of supported Oracle Database data types</div>
</li>
<li>
<p><span class="bold">Length:</span> Specify the length of the attribute. Length is applicable to character data types only.</p>
</li>
<li>
<p><span class="bold">Precision:</span> Specify the total number of digits enabled for the attribute. Precision is applicable for to data types only.</p>
</li>
<li>
<p><span class="bold">Scale:</span> Specify the total number of digits to the right of the decimal point. Scale is applicable to numeric data types only.</p>
</li>
<li>
<p><span class="bold">Seconds Precision:</span> Specify the number of digits in the fractional part of the datetime field. Seconds precision is used for <code>TIMESTAMP</code>, <code>TIMESTAMP WITH TIME ZONE</code>, and <code>TIMESTAMP WITH LOCAL TIME ZONE</code> data types.</p>
</li>
<li>
<p><span class="bold">Not Null:</span> Select this field to specify that the attribute should not contain NULL values. By default, all columns in a table enable nulls. This column is not applicable to object types.</p>
</li>
<li>
<p><span class="bold">Default Value:</span> Specify the default value for this attribute. If no value is entered for this column while data is stored in the table, then the default value is used. If you specify a value for this column while loading data, then the default value is overridden and the specified value is stored in the column. This column is not applicable for object types.</p>
</li>
<li>
<p><span class="bold">Virtual:</span> Select this option to indicate that the attribute behaves like a virtual column.</p>
<p>Virtual columns are not stored in the database. They are computed using the expression specified in the Expression field. You can refer to virtual columns just like any other column in the table, except that you cannot explicitly write to a virtual column.</p>
</li>
<li>
<p><span class="bold">Expression:</span> Specify the expression that is used to compute the value of the virtual attribute. The expression can include columns from the same table, constants, SQL functions, and user-defined PL/SQL functions.</p>
</li>
<li>
<p><span class="bold">Description:</span> Type an optional description for the attribute.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref295"></a>
<h3 class="sect2">Editing Object Types<a id="sthref296"></a></h3>
<p><span class="bold">To edit an object type:</span></p>
<ol>
<li>
<p>In the Projects Navigator, expand the Databases node and then the Oracle node.</p>
</li>
<li>
<p>Expand the module that contains the object type.</p>
</li>
<li>
<p>Expand the User Defined Types node and then the Object Types node.</p>
</li>
<li>
<p>Right-click the object type to edit and select <span class="bold">Open</span>.</p>
</li>
</ol>
<p>The Object Type Editor is displayed. Use the Name and Columns tabs as defined in <a href="#CHDIEGDG">"Defining Object Types"</a> to edit the definition of the object type.</p>
</div>
<!-- class="sect2" -->
<a id="BABDGFEE"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Varrays<a id="sthref297"></a></h3>
<p>A Varray is an ordered collection of data elements. The position of each element in a Varray is stored as an index number. You can use this number to access particular elements. When you define a Varray, you specify the maximum number of elements it can contain. You can change this number later. Varrays are stored as opaque objects (such as <code>RAW</code> or <code>BLOB</code>).</p>
<p>If the customer has multiple address, for example three addresses, then you can create another type, a table type, that holds three addresses. The following example creates a table of <code>ADDRESS</code> type:</p>
<p><code>TYPE address_store is VARRAY(3) of address;</code></p>
<p>The first address in the list is considered as the primary address and the remaining addresses are considered as the secondary addresses.</p>
</div>
<!-- class="sect2" -->
<a id="CEGBEDFF"></a><a id="WBETL02013"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Defining Varrays<a id="sthref298"></a></h3>
<p><span class="bold">To define a Varray:</span></p>
<ol>
<li>
<p>From the Projects Navigator, expand the Databases node and then the Oracle node.</p>
</li>
<li>
<p>Expand the target module in which you want to create the Varray.</p>
</li>
<li>
<p>Expand the User Defined Types node.</p>
</li>
<li>
<p>Right-click <span class="bold">Varrays</span> and select <span class="bold">New Varray</span>.</p>
<p>The Create Varray dialog box is displayed.</p>
</li>
<li>
<p>Enter a name and an optional description for the Varray and click <span class="bold">OK</span>.</p>
<p>The Varray Editor is displayed. Use the following tabs on the editor to define the object type:</p>
<ul>
<li>
<p><a href="#BABDFIJE">"Name Tab"</a></p>
</li>
<li>
<p><a href="#BABJHIEB">"Details Tab"</a></p>
</li>
</ul>
</li>
</ol>
<a id="BABDFIJE"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Name Tab</h4>
<p>Use the Name field to enter a name for the Varray. Use the Description field to enter an optional description for the Varray. To rename a Varray, select the name and enter a new name.</p>
<p>Follow the rules in <a href="#CHDEAEAD">"Naming Conventions for Data Objects"</a> to specify a name and an optional description.</p>
</div>
<!-- class="sect3" -->
<a id="BABJHIEB"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Details Tab</h4>
<p>Use the Details tab to specify the value for the following fields:</p>
<ul>
<li>
<p><span class="bold">Data Type:</span> Select the data type of the attribute from the Data Type list.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDFIADI">"Supported Data Types"</a> for a list of supported Oracle Database data types</div>
</li>
<li>
<p><span class="bold">Length:</span> Specify the length of the Varray element. Length is applicable for character data types only.</p>
</li>
<li>
<p><span class="bold">Precision:</span> Specify the total number of digits enabled for the Varray element. Precision is applicable to numeric data types only.</p>
</li>
<li>
<p><span class="bold">Scale:</span> Specify the total number of digits to the right of the decimal point. Scale is applicable to numeric data types only.</p>
</li>
<li>
<p><span class="bold">Seconds Precision:</span> Specify the number of digits in the fractional part of the datetime field. Seconds precision is used for <code>TIMESTAMP</code>, <code>TIMESTAMP WITH TIME ZONE</code>, and <code>TIMESTAMP WITH LOCAL TIME ZONE</code> data types only.</p>
</li>
<li>
<p><span class="bold">Size:</span> Specify the size of the Varray.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref299"></a>
<h3 class="sect2">Editing Varrays<a id="sthref300"></a></h3>
<p><span class="bold">To edit a Varray:</span></p>
<ol>
<li>
<p>From the Projects Navigator, expand the Databases node and then the Oracle node.</p>
</li>
<li>
<p>Expand the module that contains the Varray type.</p>
</li>
<li>
<p>Expand the User Defined Types node and then the Varrays node.</p>
</li>
<li>
<p>Right-click the Varray to edit and select <span class="bold">Open</span>.</p>
</li>
</ol>
<p>The Varray Editor is displayed. Use the Name and Details tabs of the Varray Editor, as described in <a href="#CEGBEDFF">"Defining Varrays"</a>, to edit the definition of the Varray.</p>
</div>
<!-- class="sect2" -->
<a id="BABIDJAG"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Nested Tables<a id="sthref301"></a></h3>
<p>A nested table is an unordered collection of data elements. Nested tables enable you to have any number of elements. There is no maximum number of elements specified in the definition of the table. The order of the elements is not preserved. All the operations, such as SELECT, INSERT, and DELETE that you perform on ordinary tables can be performed on nested tables. Elements of a nested table are stored in a separate storage table containing a column that identifies the parent table row or object to which each element belongs. The elements may be built-in types or user-defined types. You can view a nested table as a single-column table, or if the nested table is an object type, as a multicolumn table, with a column for each attribute of the object type.</p>
<p>Nested tables are used to store an unordered set of elements that do not have a predefined size, such as customer references.</p>
</div>
<!-- class="sect2" -->
<a id="CEGGIIAB"></a><a id="WBETL02014"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Defining Nested Tables<a id="sthref302"></a></h3>
<p><span class="bold">To define a nested table:</span></p>
<ol>
<li>
<p>From the Projects Navigator, expand the Databases node and then the Oracle node.</p>
</li>
<li>
<p>Expand the target module where you want to create the nested table.</p>
</li>
<li>
<p>Expand the User Defined Types node.</p>
</li>
<li>
<p>Right-click <span class="bold">Nested Tables</span> and select <span class="bold">New Nested Table</span>.</p>
<p>The Create Nested Table dialog box is displayed.</p>
</li>
<li>
<p>Enter the name and an optional description for the nested table and click <span class="bold">OK</span>.</p>
<p>The Nested Table Editor is displayed. Use the following tabs on the editor to define the nested table.</p>
<ul>
<li>
<p><a href="#CEGCDGDA">"Name Tab"</a></p>
</li>
<li>
<p><a href="#CEGGGCJG">"Details Tab"</a></p>
</li>
</ul>
</li>
</ol>
<a id="CEGCDGDA"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Name Tab</h4>
<p>Use the Name field to enter a name for the nested table. Use the Description field to enter an optional description for the nested table. To rename a nested table, select the name and enter a new name.</p>
<p>Follow the rules in <a href="#CHDEAEAD">"Naming Conventions for Data Objects"</a> to specify a name and an optional description.</p>
</div>
<!-- class="sect3" -->
<a id="CEGGGCJG"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Details Tab</h4>
<p>Use the Details tab to specify the value for the following fields:</p>
<ul>
<li>
<p><span class="bold">Data Type:</span> Select the data type of the attribute from the Data Type list.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDFIADI">"Supported Data Types"</a> for a list of supported data types</div>
</li>
<li>
<p><span class="bold">Length:</span> Specify the length of the nested table element. Length is applicable for character data types only.</p>
</li>
<li>
<p><span class="bold">Precision:</span> Specify the total number of digits enabled for the nested table element. Precision is applicable to numeric data types only.</p>
</li>
<li>
<p><span class="bold">Scale:</span> Specify the total number of digits to the right of the decimal point. Scale is applicable to numeric data types only.</p>
</li>
<li>
<p><span class="bold">Seconds Precision:</span> Specify the number of digits in the fractional part of the datetime field. Seconds precision is used for <code>TIMESTAMP,TIMESTAMP WITH TIME ZONE</code>, and <code>TIMESTAMP WITH LOCAL TIME ZONE</code> data types only.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref303"></a>
<h3 class="sect2">Editing Nested Tables<a id="sthref304"></a></h3>
<p><span class="bold">To edit a nested table:</span></p>
<ol>
<li>
<p>From the Projects Navigator, expand the Databases node and then the Oracle node.</p>
</li>
<li>
<p>Expand the module that contains the nested table.</p>
</li>
<li>
<p>Expand the User Defined Types node and then the Nested Tables node.</p>
</li>
<li>
<p>Right-click the nested table to edit and select <span class="bold">Open</span>.</p>
</li>
</ol>
<p>The Nested Table Editor is displayed. Use the Name and Details tabs, as defined in <a href="#CEGGIIAB">"Defining Nested Tables"</a>, to edit the definition of the nested table.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEHGGGAI"></a><a id="WBETL02024"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Defining <a id="sthref305"></a>Queues</h2>
<p>Queues enable asynchronous information sharing using messages. Use queues to implement incremental data warehousing or replication solutions, both within a database or from one database to another.</p>
<p>Before you can share data in the form of messages, you must create a data object that stores and manages multiple messages. This object is the Advanced Queue (AQ). You can propagate messages between different queues by defining queue propagations. The following sections describe how to define and use queues.</p>
<p>Queues provide the following advantages:</p>
<ul>
<li>
<p>Creating applications that communicate with each other in a consistent, reliable, secure, and autonomous manner</p>
</li>
<li>
<p>Storing messages in database tables, bringing the reliability and recoverability of the database to your messaging infrastructure</p>
</li>
<li>
<p>Retaining messages in the database automatically for auditing and business intelligence</p>
</li>
</ul>
<a id="BEHFBCBG"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating Queue Table Definitions</h3>
<p>Queues are stored in<a id="sthref306"></a> queue tables. Each queue table is a database table and contains one or more queues. Creating a queue table creates a database table with approximately 25 columns. These columns store Oracle AQ metadata and the user-defined payload.</p>
<p>You can create queue tables that store any type of messages by using the <code>SYS.ANYDATA</code> data type to define the type of data stored in the queue table.</p>
<p><span class="bold">To <a id="sthref307"></a><a id="sthref308"></a>create queue tables:</span></p>
<ol>
<li>
<p>In the Projects Navigator, expand the Databases node, the Oracle node, and then the module node under which you want to define a queue table.</p>
</li>
<li>
<p>Expand the Queues node, right-click Queue Tables and select <span class="bold">New Queue Table</span>.</p>
<p>The Create Queue Table dialog box is displayed.</p>
</li>
<li>
<p>Specify the details required to define queue tables and click <span class="bold">OK</span>.</p>
<p>For more details, see <a href="#BEHCJAEC">"Defining the Payload Type of Queue Tables"</a>.</p>
</li>
</ol>
<p>The metadata for the queue table is created in the workspace and the queue table is added to the Projects Navigator under the Queues node.</p>
<a id="BEHCJAEC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Defining the Payload Type of Queue Tables</h4>
<p>Use the Create Queue Table dialog box or the Edit Queue Table dialog box to provide additional details about the queue table such as the payload type and order in which the messages in the queue should be sorted. The following section describes the details to be provided for a queue table.</p>
<p class="subhead2"><a id="sthref309"></a>Name</p>
<p>The Name field represents the name of the queue table. The name should be unique within the Oracle module containing that queue table. For more details, see <a href="#CHDEAEAD">"Naming Conventions for Data Objects"</a>.</p>
<p class="subhead2"><a id="sthref310"></a>Description</p>
<p>Use the Description field to provide an optional description for the queue table.</p>
<p class="subhead2"><a id="BEHFIIGA"></a>Payload <a id="sthref311"></a>Type</p>
<p>Each queue contains a payload that stores the actual data that is to be transferred. The Payload Type represents the type of data that is permitted in the queue table.</p>
<p>You can select one of the following options for the payload type: Object Type, <a href="#BEHFEEIJ">"<code>SYS.ANYDATA</code>"</a>, <a href="#BEHGFFDF">"<code>RAW</code>"</a>, <a href="#BEHIEHDD">"<code>SYS.AQ$_JMS_BYTES_MESSAGE</code>"</a>, <a href="#BEHGJDCG">"<code>SYS.AQ$_JMS_MAP_MESSAGE</code>"</a>, <a href="#BEHFHCGC">"<code>SYS.AQ$_JMS_MESSAGE</code>"</a>, <a href="#BEHFBFHE">"<code>SYS.AQ$_JMS_STREAM_MESSAGE</code>"</a>, <a href="#BEHEFDIE">"<code>SYS.AQ$_JMS_TEXT_MESSAGE</code>"</a>, and <a href="#BEHCDJHJ">"<code>XMLTYPE</code>"</a>.</p>
<p class="subhead2"><a id="sthref312"></a>Search For</p>
<p>Use the Search For field to search for an object. This field is enabled only when you select Object Type as the <a href="#BEHFIIGA">"Payload Type"</a>.</p>
<p>The area below the Search For field displays the object types in your workspace. Object types are listed under the module to which they belong. To search for an object with a specific name, enter the name of the object in the Search For field and click <span class="bold">Go</span>.</p>
<p class="subhead2"><a id="sthref313"></a>Enable Transactional Property for Messages</p>
<p>Select <span class="bold">Enable Transactional Property for Messages</span> to enable message grouping. This option is enabled for all object-typed queues except <code>SYS.ANYDATA</code> queues.</p>
<p>Message grouping enables messages belonging to one queue to be grouped so that they form a set that can only be consumed by one user at a time. All messages belonging to a group must be created in the same transaction, and all messages created in one transaction belong to the same group.</p>
<p>This feature enables users to segment complex messages into simple messages. It is also useful if the message payload contains complex large objects such as images and video that can be segmented into smaller objects.</p>
<p class="subhead2"><a id="sthref314"></a>Secured Queue Table</p>
<p>Select <span class="bold">Secured Queue Table</span> when you want to create a secure queue. This option is enabled for all object-typed queues except <code>SYS.ANYDATA</code> queues.</p>
<p>Secure queues are queues for which Oracle Streams Advanced Queuing (AQ) agents must be associated explicitly with one or more database users who can perform queue operations, such as enqueue and dequeue. The owner of a secure queue can perform all queue operations on the queue, but other users cannot perform queue operations on a secure queue, unless they are configured as secure queue users.</p>
<p class="subhead2"><a id="sthref315"></a>Sort Messages By</p>
<p>Use the Sort Messages By list to specify the order in which the messages contained in the payload should be sorted. The options you can use to sort messages are:</p>
<ul>
<li>
<p><span class="bold">Enqueue_time:</span> Sorts by the arrival time of the message.</p>
</li>
<li>
<p><span class="bold">Priority:</span> Sorts by message priority.</p>
</li>
<li>
<p><span class="bold">Enqueue_time, priority:</span> Sorts by the arrival time of the message and, for messages with the same arrival time, sorts by message priority.</p>
</li>
<li>
<p><span class="bold">Priority, enqueue_time:</span> Sorts by message priority and, for messages with the same priority, sorts by arrival time of the message.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref316"></a>
<h3 class="sect2">Editing <a id="sthref317"></a><a id="sthref318"></a>Queue Tables</h3>
<p>To edit queue tables, right-click the queue table and select <span class="bold">Open</span>. The Edit Queue Table dialog box is displayed. Use this to modify your queue table definition.</p>
<p>You can modify queue tables and change the name, description, or payload type. However, if you modify the payload type of a queue table, then the queue table and any queues based on this queue table are dropped and re-created. Thus, all the existing data in the queue is lost. deployed, it is recommend to not to modify the payload type.</p>
</div>
<!-- class="sect2" -->
<a id="BEHBGIEG"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating Advanced Queue Definitions</h3>
<p><a id="sthref319"></a>Advanced Queues (AQs) provide database-integrated message queuing functionality. They optimize the functions of Oracle Database so that messages can be stored persistently, propagated between queues on different computers and databases, and transmitted using Oracle Net Services, HTTP, and HTTPS.</p>
<p>Use advanced queues to propagate and manage data either within an Oracle database or between different databases. Every advanced queue is based on a queue table that stores the actual queue data.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STRMS" href="../../server.112/e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about advanced queues</div>
<p><span class="bold">To <a id="sthref320"></a><a id="sthref321"></a>create an advanced queue definition:</span></p>
<ol>
<li>
<p>In the Projects Navigator, expand the Databases node, the Oracle node, and then the Oracle module node under which you want to define an advanced queue.</p>
</li>
<li>
<p>Right-click the Queues node and select <span class="bold">New Advanced Queue</span>.</p>
<p>The Create Advanced Queue dialog box is displayed.</p>
</li>
<li>
<p>Provide details such as the advanced queue name and the queue table on which the advanced queue is based. Click <span class="bold">OK</span>.</p>
<p>For more information, see <a href="#BEHGJEHB">"Specifying the Queue Table on which the AQ is Based"</a>.</p>
</li>
</ol>
<a id="BEHGJEHB"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Specifying the Queue Table on which the AQ is Based</h4>
<p>Use the Create Advanced Queue dialog box to specify details such as the advanced queue name and the queue table on which the AQ is based. You can choose an existing queue table or create a new one. Use the Edit Advanced Queue dialog box to modify the name, description, or the queue table on which the AQ is based.</p>
<p class="subhead2"><a id="sthref322"></a>Name</p>
<p>The Name field represents the name of the advanced queue. The name should be unique within the Oracle module containing that advanced queue. For more details, see <a href="#CHDEAEAD">"Naming Conventions for Data Objects"</a>.</p>
<p class="subhead2"><a id="sthref323"></a>Description</p>
<p>Use the Description field to provide an optional description for the advanced queue.</p>
<p class="subhead2"><a id="sthref324"></a>Select a Queue Table</p>
<p>Use the Select a Queue Table list to select the queue table that stores messages contained in the advanced queue.</p>
<p class="subhead2"><a id="sthref325"></a>Create New Queue Table</p>
<p>Select <span class="bold">Create New Queue Table</span> to create a ueue table that contains the advanced queue data. The Create Queue Table dialog box that guides you through the process of defining a queue table is displayed. For more information about defining queue tables, see <a href="#BEHFBCBG">"Creating Queue Table Definitions"</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref326"></a>
<h3 class="sect2">Editing Advanced <a id="sthref327"></a><a id="sthref328"></a>Queue Definitions</h3>
<p>You can edit advanced queues and modify the properties that you specified while creating the advanced queues. This includes the name, description, and queue table that stores queue data.</p>
<p>To edit an advanced queue, in the Projects Navigator, right-click the advanced queue and select <span class="bold">Open</span>. The Edit Advanced Queue dialog box is displayed. Use this to edit the advanced queue.</p>
<p>For more information about the options on this dialog box, see <a href="#BEHBGIEG">"Creating Advanced Queue Definitions"</a>.</p>
<p>After you edit an advanced queue definition, ensure that you synchronize any mappings that use this advanced queue.</p>
</div>
<!-- class="sect2" -->
<a id="BEHGADJJ"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating Queue Propagations</h3>
<p>Queue propagations<a id="sthref329"></a> enable you to propagate messages between different queues. For example, you have two queues SRC_QUE and TGT_QUE. In SRC_QUE, define a queue propagation with the target queue as TGT_QUE to propagate messages from SRC_QUE to TGT_QUE.</p>
<p>Queue propagations are typically used in replication, when you have two databases located in different location and you want to replicate the source database to the target location.</p>
<p><span class="bold">To <a id="sthref330"></a><a id="sthref331"></a>create a queue propagation:</span></p>
<ol>
<li>
<p>In the Projects Navigator, expand the Databases node, the Oracle node, and then the Oracle module node under which you want to define a queue propagation.</p>
</li>
<li>
<p>Expand the Queues node, right-click the advanced queue under which you want to create a propagation, and select <span class="bold">New</span>.</p>
<p>The New Gallery dialog box is displayed.</p>
</li>
<li>
<p>On the New Gallery dialog box, select <span class="bold">Queue Propagations</span> and click <span class="bold">OK</span>.</p>
<p>The Create Queue Propagation dialog box is displayed.</p>
</li>
<li>
<p>Use the Create Propagation dialog box to define the target queue and click <span class="bold">OK</span>.</p>
</li>
</ol>
<p>The metadata for the queue propagation is created in the workspace and the queue propagation is added under the advanced queue in the Projects Navigator.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref332"></a>
<h4 class="sect3">Selecting a Target Queue for Propagation</h4>
<p>Use the Create Queue Propagation dialog box or the Edit Queue Propagation dialog box to specify the target queue for propagation. The following sections describe the fields contained in this page.</p>
<p class="subhead2"><a id="sthref333"></a>Name</p>
<p>The Name field represents the name of the queue propagation. The name should be unique within the advanced queue under which the queue propagation is defined.</p>
<p>To rename a queue propagation, select the name and enter the new name.</p>
<p class="subhead2"><a id="sthref334"></a>Description</p>
<p>The Description field represents the description of the queue propagation. Providing a description is optional.</p>
<p class="subhead2"><a id="sthref335"></a>Select a Target Queue for Propagation</p>
<p>Use the Select a Target Queue for Propagation section to define the target queue. The area below this section displays a node tree containing the advanced queues defined in the current project. Select the advanced queue that is used as a target. Messages from the AQ under which you define the queue propagation can then be propagated to the AQ defined as the target queue.</p>
<p>Use the Search For field to search for a particular object using the object name. Enter the name of the object in this field and click <span class="bold">Go</span>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref336"></a>
<h3 class="sect2">Editing Queue<a id="sthref337"></a><a id="sthref338"></a> Propagations</h3>
<p>You can edit queue propagations and modify the selections you made which defining the queue propagation. The options you can modify include the name, description, and target queue.</p>
<p>To edit a queue propagation, in the Projects Navigator, right-click the queue propagation and select <span class="bold">Open</span>. The Edit Queue Propagation dialog box is displayed. For more information about the options on this dialog box, see <a href="#BEHGADJJ">"Creating Queue Propagations"</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDHFJEA"></a><a id="WBETL02025"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Configuring Relational Data Objects</h2>
<p>Earlier in the design phase, you defined a logical model for your target system using Oracle Warehouse Builder design objects. In the configuration phase, you assign physical deployment properties to the object definitions by configuring parameters such as tablespaces, partitions, and other identification parameters. <a id="sthref339"></a>You also configure run time parameters such as job names, and run time directories.</p>
<p>Set these physical properties using the Configuration tab of the data object. The following sections show you how to assign physical properties to your logical design model:</p>
<ul>
<li>
<p><a href="#i1127700">"Configuring Target Modules"</a></p>
</li>
<li>
<p><a href="#i1110821">"Configuring Tables"</a></p>
</li>
<li>
<p><a href="#i1138017">"Configuring Materialized Views"</a></p>
</li>
<li>
<p><a href="#i1126597">"Configuring Views"</a></p>
</li>
<li>
<p><a href="#i1111024">"Configuring Sequences"</a></p>
</li>
<li>
<p><a href="#BEHJEEHA">"Configuring Advanced Queues"</a></p>
</li>
<li>
<p><a href="#BEHJJHII">"Configuring Queue Tables"</a></p>
</li>
<li>
<p><a href="#BEHFHCFJ">"Configuring Queue Propagations"</a></p>
</li>
</ul>
<a id="i1127700"></a><a id="WBETL02001"></a>
<div class="sect2">
<h3 class="sect2">Configuring <a id="sthref340"></a><a id="sthref341"></a><a id="sthref342"></a>Target Modules</h3>
<p>Each target module provides top-level configuration options for all the objects contained in that module.</p>
<p><span class="bold">To <a id="sthref343"></a>configure an Oracle module:</span></p>
<ol>
<li>
<p>From the Projects Navigator, expand <span class="bold">Databases,</span> expand <span class="bold">Oracle,</span> and right-click a target module name, and select <span class="bold">Configure.</span></p>
<p>Oracle Warehouse Builder displays the Configuration tab.</p>
</li>
<li>
<p>Choose the parameters to configure and click the space to the right of the parameter name to edit its value.</p>
<p>For each parameter, you can either select an option from a list, type a value, or click the Ellipsis button to display another properties dialog box.</p>
</li>
<li>
<p>Configure the parameters listed in the following sections.</p>
</li>
</ol>
<a id="BABFDAFH"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Deployment System Type</h4>
<p><a id="i1137665"></a><span class="bold"><a id="sthref344"></a>PL/SQL Generation Mode:</span> Defines the target database type. The options you can select are: Default, Oracle 10g, Oracle 11<span class="italic">g</span>, Oracle8<span class="italic">i</span> , and Oracle9<span class="italic">i</span>. <a id="sthref345"></a>Code generation is based on your choice in this field. For example, select Oracle9<span class="italic">i</span> to ensure the use of Oracle9<span class="italic">i</span> code constructs. If you select Oracle8<span class="italic">i</span>, then row-based code is generated.</p>
<p>Each release introduces new functionality, some of which you may use only with the latest version of the Oracle Database. For example, if you select Oracle8<span class="italic">i</span> as the PL/SQL Generation Mode, then you cannot access some Oracle Warehouse Builder 9<span class="italic">i</span> components such as table functions and external tables.</p>
</div>
<!-- class="sect3" -->
<a id="BEHEDBAD"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Generation Preferences</h4>
<p><span class="bold"><a id="sthref346"></a>End of Line:</span> Defines the end of line markers for flat files. This depends on the platform to which you are deploying your warehouse. For UNIX, use <code>\n</code>, and for Windows NT, use <code>\r\n.</code></p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref347"></a>
<h4 class="sect3">Generation Target Directories</h4>
<p><span class="bold"><a id="sthref348"></a>ABAP Extension:</span> File name extension for ABAP scripts. The default is <code>abap</code>.</p>
<p><span class="bold"><a id="sthref349"></a>ABAP Run Parameter File:</span> Suffix for the parameter script in an ABAP job. The default is _run.ini.</p>
<p><span class="bold"><a id="sthref350"></a>ABAP Spool Directory:</span> The location where ABAP scripts are buffered during script generation processing.</p>
<p><span class="bold"><a id="sthref351"></a>DDL Directory:</span> Enter a location for the scripts that create database objects in the target schema. The default is <code>ddl\.</code></p>
<p><span class="bold"><a id="sthref352"></a>DDL Extension:</span> Enter a file name extension for DDL scripts. The default is ddl.</p>
<p><span class="bold"><a id="sthref353"></a>DDL Spool Directory:</span> Enter a buffer location for DDL scripts during the script generation processing. The default is <code>ddl\log.</code></p>
<p><span class="bold"><a id="sthref354"></a>LIB Directory:</span> Enter a location for the scripts that generate Oracle functions and procedures. The default is <code>lib\.</code></p>
<p><span class="bold"><a id="sthref355"></a>LIB Extension:</span> Enter a suffix to be appended to a mapping name. The default is <code>.lib.</code></p>
<p><span class="bold"><a id="sthref356"></a>LIB Spool Directory:</span> Enter a location for the scripts that generate user-defined functions and procedures. The default is <code>lib\log\.</code></p>
<p><span class="bold"><a id="sthref357"></a>LOADER Directory:</span> Enter a location for the control files. The default is <code>ctl\.</code></p>
<p><span class="bold"><a id="sthref358"></a>LOADER Extension:</span> Enter a suffix for the loader scripts. The default is <code>.ctl.</code></p>
<p><span class="bold"><a id="sthref359"></a>LOADER Run Parameter File:</span> Enter a suffix for the parameter initialization file. The default is <code>_run.ini.</code></p>
<p><span class="bold"><a id="sthref360"></a>PL/SQL Directory:</span> Enter a location for the PL/SQL scripts. The default is <code>pls\.</code></p>
<p><span class="bold"><a id="sthref361"></a>PL/SQL Run Parameter File:</span> Enter a suffix for the parameter script in a PL/SQL job. The default is <code>_run.ini.</code></p>
<p><span class="bold"><a id="sthref362"></a>PL/SQL Spool Directory:</span> Enter a buffer location for PL/SQL scripts during the script generation processing. The default is <code>pls\log\.</code></p>
<p><span class="bold"><a id="sthref363"></a>PL/SQL Extension:</span> Enter a file name extension for PL/SQL scripts. The default is <code>.pls.</code></p>
<p><span class="bold"><a id="sthref364"></a>SQLPlus Directory:</span> Enter a location for the PL/SQL scripts. The default is <code>sql\</code>.</p>
<p><a id="sthref365"></a><span class="bold">SQLPlus Extension:</span> Enter a file name extension for PL/SQL scripts. The default is <code>.sql</code>.</p>
<p><a id="sthref366"></a><span class="bold">SQLPLus Run Parameter File:</span> Enter a suffix for the parameter script in a PL/SQL job. The default is <code>_run.ini</code>.</p>
<p><span class="bold"><a id="sthref367"></a>Staging File Directory:</span> For all ABAP configuration related to SAP tables. The default is <code>abap\</code>.</p>
<p><a id="sthref368"></a><span class="bold">Tcl Directory:</span> Enter a location for the tcl scripts. The default is <code>tcl\</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink WBDOD" href="../e10582/toc.htm"><span class="italic">Oracle Warehouse Builder Sources and Targets Guide</span></a> for more information about using SAP tables.</div>
</div>
<!-- class="sect3" -->
<a id="CHDFHHDC"></a><a id="WBETL02016"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Identification</h4>
<p><span class="bold">Application Short Name:</span> This parameter is obsolete and is no longer used.</p>
<p><span class="bold">Deployable:</span> Select this option to indicate that the objects contained in the module can be deployed.</p>
<p><span class="bold">Location<a id="sthref369"></a>:</span> Represents the location with which the module is associated. If the module is a source module, then this value represents the location from which the data is sourced. If the module is a target module, then this value represents the location to which the generated code and object data are deployed.</p>
<p><span class="bold">Main Application Short Name:</span> This parameter is obsolete and is no longer used.</p>
<p><span class="bold">Top Directory:</span> Represents the name of the directory to which the generated code is stored. The default value for this parameter is <code>..\..\codegen</code>\. You can change this value to any directory in which you want to store generated code.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref370"></a>
<h4 class="sect3">Run Time Directories</h4>
<p><span class="bold"><a id="sthref371"></a>Archive Directory:</span> Not currently used. The default is <code>archive\</code>.</p>
<p><span class="bold"><a id="sthref372"></a>Input Directory:</span> Not currently used. The default is <code>input\</code>.</p>
<p><span class="bold"><a id="sthref373"></a>Invalid Directory:</span> Directory for SQL*Loader error and rejected records. The default is <code>invalid\</code>.</p>
<p><span class="bold"><a id="sthref374"></a>Log Directory:</span> Log directory for the SQL*Loader. The default is <code>log\</code>.</p>
<p><span class="bold"><a id="sthref375"></a>Receive Directory:</span> Not currently used. The default is <code>receive\</code>.</p>
<p><span class="bold"><a id="sthref376"></a>Sort Directory:</span> Not currently used. The default is <code>sort\</code>.</p>
<p><span class="bold"><a id="sthref377"></a>Work Directory:</span> Not currently used. The default is <code>work\</code>.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref378"></a>
<h4 class="sect3">Tablespace Defaults</h4>
<p><span class="bold"><a id="sthref379"></a>Default Index Tablespace:</span> Defines the name of each tablespace where indexes are created. The default is null. If you configure an index tablespace at the target module level and not at the object level, then the tablespace value configured at the target module level is used during code generation. If you configure a tablespace for each index at the object level, then the tablespace value configured at the target module level is overwritten.</p>
<p><span class="bold"><a id="sthref380"></a>Default Object Tablespace:</span> Defines the name of each tablespace where objects are created (for example, tables, views, or materialized views). The default is null. If you configure object tablespace at the target module level and not at the individual object level, then the value configured at the target module level is used during code generation. If you configure a tablespace for each individual object, then the tablespace value configured at the target module level is overwritten.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1110821"></a><a id="WBETL02002"></a>
<div class="sect2">
<h3 class="sect2">Configuring <a id="sthref381"></a><a id="sthref382"></a>Tables</h3>
<p>Oracle Warehouse Builder generates DDL scripts for each table defined in a target module.</p>
<p><span class="bold">To configure the physical properties for a table:</span></p>
<ol>
<li>
<p>In the Projects Navigator, right-click the name of a table and select <span class="bold">Configure.</span></p>
<p>The Configuration tab for the table is displayed.</p>
</li>
<li>
<p>Set the configuration parameters listed under the following nodes: <a href="#BEHBAHJI">"Error Table"</a>, <a href="#BEHGFJDJ">"Foreign Keys"</a>, <a href="#BEHEAGEC">"Identification"</a>, <a href="#BEHDCJBJ">"Parallel"</a>, <a href="#BEHFCAHD">"Performance Parameters"</a>, <a href="#BEHDAFJH">"Partition Parameters"</a>, <a href="#BEHCBCCE">"Storage Space"</a>, and <a href="#BEHFBHAD">"Change Data Capture"</a>.</p>
</li>
</ol>
<a id="BEHBAHJI"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Error Table</h4>
<p><a id="sthref383"></a><span class="bold">Error Table Name:</span> Indicates the name of the error table that stores the rows that were not loaded into the table during a load operation.</p>
<p><a id="sthref384"></a><span class="bold">Tablespace:</span> Indicates the name of the tablespace in which the error table is stored.</p>
</div>
<!-- class="sect3" -->
<a id="BEHGFJDJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Foreign Keys</h4>
<p>The Foreign Keys node is displayed if your table contains a foreign key definition. A separate node is displayed, under the Foreign Keys node, for each foreign key in the table. Under this node, parameters are listed under the following categories: Creation Method and Identification.</p>
<p>The Creation Method category contains the following parameters:</p>
<ul>
<li>
<p><span class="bold">Constraint Checking:</span> Indicates whether the checking of this constraint can be deferred until after the transaction is committed. Set this parameter to DEFERABLE to indicate that, in subsequent transactions, you can set the SET CONSTRAINTS clause to defer checking this constraint until after the transaction is committed. Set this parameter to NOT DEFERABLE to indicate that you cannot use the SET CONSTRAINTS clause ti defer checking this constraint until after the transaction is committed. The default is NOT DEFERABLE.</p>
</li>
<li>
<p><span class="bold">Constraint State:</span> Indicates whether the constraint should be enabled. Select ENABLE to apply the constraint to the table data. Select DISABLE to disable the integrity constraint. The default is ENABLE.</p>
</li>
<li>
<p><span class="bold">Constraint Validation:</span> The options you can set are NOVALIDATE or VALIDATE. The effect of setting this parameter is different based on whether the constraint is enabled or disabled.</p>
</li>
<li>
<p><span class="bold">EXCEPTIONS INTO:</span> Indicates the name of the exceptions table. You cannot use this parameters when you set NOVALIDATE as the Constraint Validation.</p>
</li>
<li>
<p><span class="bold">INITIALLY:</span> The options you can set for this parameter are IMMEDIATE or DEFERRED. The default setting is IMMEDIATE. IMMEDIATE indicates that a deferrable constraint must be checked after each SQL statement. DEFERRED indicates that a deferrable constraint must be checked after subsequent transactions.</p>
</li>
<li>
<p><span class="bold">NOVALIDATE mode:</span> The options you can set for this parameter are NORELY and RELY, with NORELY being the default setting. Setting this parameter to RELY activates a constraint in NOVALIDATE mode for query rewrite.</p>
</li>
<li>
<p><span class="bold">ON DELETE:</span> During a delete operation, this parameter indicates how to handle foreign keys that depend on the record being deleted. The options you can set for this parameter are CASCADE or SET NULL. CASCADE deletes dependent foreign key values. NOT NULL sets the dependent foreign key values to null.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BEHEAGEC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Identification</h4>
<p><span class="bold">Deployable:</span> Select this option to indicate to deploy this table. Scripts are generated only for tables marked deployable.</p>
<p><a id="sthref385"></a><span class="bold">Error Table Only:</span> Select this option to perform generation or deployment actions only on the error table associated with the table. Use this option to add an error table to an existing table. This setting only controls the actions of the Deployable parameter, but does not override it.</p>
<p>Deselect this option to deploy the error table along with the table.</p>
</div>
<!-- class="sect3" -->
<a id="BEHDCJBJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Parallel</h4>
<p><a id="sthref386"></a><span class="bold">Parallel Access Mode:</span> Enables parallel processing when the table has been created. The default is <code>PARALLEL.</code></p>
<p><a id="sthref387"></a><span class="bold">Parallel Degree:</span> Indicates the degree of parallelism. This is the number of parallel threads used in the parallel operation.</p>
</div>
<!-- class="sect3" -->
<a id="BEHFCAHD"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Performance Parameters</h4>
<p><a id="sthref388"></a><span class="bold">Buffer Cache:</span> Indicates how Oracle Database should store rows in the buffer cache.</p>
<p><a id="sthref389"></a><span class="bold">Data Segment Compression:</span> Indicates whether data segments should be compressed. Compressing reduces disk use. The default is NOCOMPRESS.</p>
<p><span class="bold"><a id="sthref390"></a>Logging Mode:</span> Indicates whether the DML actions are logged in the redo log file. To improve performance, set this parameter to <code>NOLOGGING</code>. The default is <code>LOGGING.</code></p>
<p><a id="sthref391"></a><span class="bold">Row-level Dependency:</span> Indicates whether row-level dependency tracking.</p>
<p><span class="bold"><a id="sthref392"></a>Row Movement:</span> Indicates if Oracle Database can move a table row.</p>
<p><a id="sthref393"></a><span class="bold">Statistics Collection:</span> Indicates if statistics should be collected for the table. Specify MONITORING if you want modification statistics to be collected on this table.</p>
</div>
<!-- class="sect3" -->
<a id="BEHDAFJH"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Partition Parameters</h4>
<p><span class="bold"><a id="sthref394"></a>Partition Tablespace List:</span> Specify a comma-delimited list of tablespaces. For simple partitioned objects, it is used for a HASH BY QUANTITY partition tablespace. For composite partitioned tables, it is used for subpartition template to store the list of tablespaces.</p>
<p><a id="sthref395"></a><span class="bold">Overflow Tablespace List:</span> Specify a comma-delimited list of tablespaces for overflow data. For simple partitioned objects, it is used for HASH BY QUANTITY partition overflow tablespaces. The number of tablespaces does not have to equal the number of partitions. If the number of partitions is greater than the number of tablespaces, then Oracle Database cycles through the names of the tablespaces.</p>
</div>
<!-- class="sect3" -->
<a id="BEHCBCCE"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Storage Space</h4>
<p>Storage parameters enable you to define how the table is stored in the database. This category contains parameters such as BUFFER_POOL, FREELIST GROUPS, FREELISTS, INITIAL, MINEXTENTS, MAXEXTENTS, NEXT, and PCTINCREASE.</p>
<p>The <span class="bold"><a id="sthref396"></a>Tablespace</span> parameter defines the name of each tablespace where the table is created. The default value is null. If you accept the default value of null, then the table is generated based on the tablespace value set in the configuration parameters of the target module. If you configure the tablespace for individual objects, then the tablespace value configured for the target module is overwritten.</p>
</div>
<!-- class="sect3" -->
<a id="BEHFBHAD"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Change Data Capture</h4>
<p><span class="bold">Enable:</span> Indicates if change data capture is enabled for the table. Select True for this parameter to enable change data capture for the table.</p>
<p><span class="bold">Table Position:</span> Indicates the position of the table in the change data capture.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1138017"></a><a id="WBETL02004"></a>
<div class="sect2">
<h3 class="sect2">Configuring <a id="sthref397"></a><a id="sthref398"></a>Materialized Views</h3>
<p><a id="i1138020"></a><span class="bold">To configure the physical properties for a materialized view:</span></p>
<ol>
<li>
<p>From the Projects Navigator, right-click a materialized view name and select <span class="bold">Configure.</span></p>
<p>The Configuration tab for the materialized view is displayed.</p>
</li>
<li>
<p>Follow the configuration guidelines listed for tables. For more information, see <a href="#i1110821">"Configuring Tables"</a>.</p>
</li>
<li>
<p>Configure the <a href="#i1138145">"Materialized View Parameters"</a> listed in the following section.</p>
</li>
<li>
<p>Configure the Materialized View Log parameters as described in <a href="#BEHHGGCJ">"Materialized View Log Parameters"</a>.</p>
</li>
</ol>
<a id="i1138145"></a>
<div class="sect3">
<h4 class="sect3">Materialized View Parameters</h4>
<p>The following are parameters for materialized views:</p>
<ul>
<li>
<p><span class="bold"><a id="sthref399"></a>Base Tables:</span> Specify a comma-delimited list of base tables referenced by the materialized view. Separate each table name with a comma. If a table name is not in uppercase, then enclose the name in double quotation marks.</p>
</li>
<li>
<p><span class="bold"><a id="sthref400"></a>BUILD:</span> Indicates when the materialized view is populated. The options are Immediate (default), Deferred, and Prebuilt.</p>
<p><span class="bold">Immediate:</span> Populates the materialized view when it is created.</p>
<p><span class="bold">Deferred:</span> Delays the population of the materialized view until the next refresh operation. You can select this option when you are designing a materialized view and the metadata for the base tables is correct but the data is not.</p>
<p><span class="bold">Prebuilt:</span> Indicates that the materialized view is prebuilt.</p>
</li>
<li>
<p><a id="sthref401"></a><span class="bold">Default Rollback Segment:</span> The options are DEFAULT, DEFAULT MASTER, DEFAULT LOCAL, and NONE. The default setting is DEFAULT LOCAL. Specify DEFAULT to indicate that Oracle Database should choose which rollback segment to use. Specify DEFAULT MASTER for the remote rollback segment to be used at the remote site. Specify DEFAULT LOCAL for the remote rollback segment to be used for the local refresh group that contains the materialized view. Specify NONE to name both master and local segments.</p>
</li>
<li>
<p><a id="sthref402"></a><span class="bold">FOR UPDATE:</span> Select Yes to enable a subquery, primary key, row ID, or object materialized view to be updated. The default setting is No.</p>
</li>
<li>
<p><a id="sthref403"></a><span class="bold">Local Rollback Segment:</span> Specify a named remote rollback segment to be used for the local refresh group of the materialized view. The default is null.</p>
</li>
<li>
<p><span class="bold"><a id="sthref404"></a>Master Rollback Segment:</span> Indicates the name of the remote rollback segment to be used at the remote master site for the materialized view.</p>
</li>
<li>
<p><a id="sthref405"></a><span class="bold">NEXT (date):</span> Indicates the interval between automatic refreshes. Specify a datetime value for this parameter.</p>
</li>
<li>
<p><a id="sthref406"></a><span class="bold">Query Rewrite:</span> Indicates if the materialized view is eligible for query rewrite. The options are ENABLE and DISABLE. The default is DISABLE.</p>
<p><span class="bold">Enable:</span> Enables query rewrite. For other query rewrite requirements, see <a href="#i1125686">"Fast Refresh for Materialized Views"</a>.</p>
<p><span class="bold">Disable:</span> Disables query rewrite. You can disable query rewrite when you know that the data in the materialized view is stale or when you want to make changes to the query statement.</p>
</li>
<li>
<p><a id="sthref407"></a><span class="bold">REFRESH:</span> Indicates the refresh method. The options are Complete, Fast, Force, and Never. The default setting is Force.</p>
<p><span class="bold">Complete:</span> Oracle Database truncates the materialized view and reruns the query upon refresh.</p>
<p><span class="bold">Fast:</span> Uses materialized views to only apply changes to the base table data. There are many requirements for fast refresh to operate properly. For more information, see <a href="#i1125686">"Fast Refresh for Materialized Views"</a>.</p>
<p><span class="bold">Force:</span> Oracle Database attempts to refresh using the fast mode. If unable to refresh in fast mode, the Oracle server reruns the query upon refresh.</p>
<p><span class="bold">Never:</span> Prevents the materialized view from being refreshed.</p>
</li>
<li>
<p><a id="sthref408"></a><span class="bold">Refresh On:</span> The options are COMMIT and DEMAND. Specify COMMIT to indicate that a fast refresh is to occur whenever the database commits a transaction that operates on a master table of the materialized view. Specify DEMAND to indicate that the materialized view should be refreshed on demand. You can do this by using one of the refresh procedures of the DBMS_MVIEW package. The default setting is DEMAND.</p>
</li>
<li>
<p><span class="bold"><a id="sthref409"></a>Start With:</span> Indicates the first automatic refresh time. Specify a datetime value for this parameter.</p>
</li>
<li>
<p><a id="sthref410"></a><span class="bold">Using Constraints:</span> The options that you can select for this parameter are TRUSTED or ENFORCED. Select TRUSTED to enable Oracle Database to use dimension and constraint information that has been declared trustworthy by the DBA but has not been validated by Oracle Database. ENFORCED is the default setting.</p>
</li>
<li>
<p><span class="bold">WITH:</span> Select PRIMARY_KEY to create a primary key materialized view. Select ROWID to create a ROWID materialized view. The default setting is PRIMARY_KEY.</p>
</li>
</ul>
<p class="subhead2"><a id="sthref411"></a>Performance Parameters</p>
<p><a id="sthref412"></a><span class="bold">Buffer Cache:</span> Indicates how the blocks retrieved for this table are placed in the buffer cache. The options you can select are CACHE or NOCACHE. When you select CACHE, the blocks are placed at the most recently used end of the least recently used (LRU) list in the buffer cache when a full table scan is performed. Setting the Buffer Cache parameter to CACHE is useful for frequently accessed tables, such as small lookup tables. When you select NOCACHE, the blocks are placed at the least recently used end of the LRU list in the buffer cache.</p>
<p><a id="sthref413"></a><span class="bold">Data Segment Compression:</span> Indicates if segments should be compressed on disk to reduce space usage. The options you can set for this parameter are COMPRESS, COMPRESS ALL, or NOCOMPRESS. The default is NOCOMPRESS. Set this parameter to COMPRESS to compress data only during a direct path INSERT, when it is productive to do so. Set this parameter to COMPRESS ALL compresses data during all DML operations on the table.</p>
<p><a id="sthref414"></a><span class="bold">Logging Mode:</span> Indicates whether the DML actions are logged in the redo log file. To improve performance, set this parameter to NOLOGGING. The default is LOGGING.</p>
<p class="subhead2"><a id="sthref415"></a>Error Table</p>
<ul>
<li>
<p><a id="sthref416"></a><span class="bold">Error Table Name:</span> Indicates the name of the error table that stores the rows that were not loaded into the table during a load operation.</p>
</li>
<li>
<p><a id="sthref417"></a><span class="bold">Tablespace:</span> Indicates the name of the tablespace in which the error table is stored.</p>
</li>
</ul>
<p class="subhead2"><a id="sthref418"></a>Parallel</p>
<ul>
<li>
<p><a id="sthref419"></a><span class="bold">Parallel Access Mode:</span> Enables parallel processing when the table has been created. The default is PARALLEL.</p>
</li>
<li>
<p><a id="sthref420"></a><span class="bold">Parallel Degree:</span> Indicates the degree of parallelism. This is the number of parallel threads used in the parallel operation.</p>
</li>
</ul>
<p class="subhead2"><a id="sthref421"></a>Identification</p>
<ul>
<li>
<p><a id="sthref422"></a><span class="bold">Deployable:</span> Select TRUE to indicate to deploy this materialized view. Oracle Warehouse Builder generates scripts only for materialized views marked deployable.</p>
</li>
<li>
<p><a id="sthref423"></a><span class="bold">Error Table Only:</span> Select this option to perform generation or deployment actions only on the error table associated with the materialized view. Use this option to add an error table to an existing materialized view. This setting controls the actions of the Deployable parameter, but does not override it.</p>
<p>Deselect this option to deploy the error table along with the materialized view.</p>
</li>
</ul>
<p class="subhead2"><a id="sthref424"></a>Hash Partition Parameters</p>
<ul>
<li>
<p><a id="sthref425"></a><span class="bold">Hash Partition Tablespace List:</span> Indicates the tablespace that stores the partition or subpartition data. To specify multiple tablespaces, use a comma-delimited list.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BEHHGGCJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Materialized View Log Parameters</h4>
<p>You can configure the following materialized view log parameters.</p>
<p><span class="bold">Record Primary Key</span>: Select PRIMARY KEY to indicate that the primary key of all rows changed should be recorded in the materialized view log.</p>
<p><span class="bold">Record ROWID</span>: Select ROWID to indicate that the row ID of all rows changed should be recorded in the materialized view log.</p>
<p><span class="bold">Record SEQUENCE</span>: Select SEQUENCE to indicate that a sequence value providing additional ordering information should be recorded in the materialized view log.</p>
<p>Sequence numbers are necessary to support fast refresh after some update scenarios.</p>
<p><span class="bold">COLUMNS</span>: Specify the columns whose values you want to be recorded in the materialized view log for all rows that are changed. Typically these columns are filter columns and join columns.</p>
<p><span class="bold">Generate Materialized View Log</span>: Select YES to generate DDL for materialized view log. The default is YES.</p>
<p><span class="bold">New Values</span>: Specify INCLUDING to save both new and old values in the log. Specify EXCLUDING to disable the recording of new values in the log. EXCLUDING is the default.</p>
</div>
<!-- class="sect3" -->
<a id="i1125686"></a>
<div class="sect3">
<h4 class="sect3">Fast Refresh for <a id="sthref426"></a><a id="sthref427"></a>Materialized Views</h4>
<p>You can configure a materialized view to refresh incrementally. When you update the base tables for a materialized view, the database stores updated record pointers in the materialized view log. Changes in the log tables are used to refresh the associated materialized views.</p>
<p>To ensure incremental refresh of materialized views, verify the following conditions:</p>
<ul>
<li>
<p>The Refresh parameter must be set to Fast and the Base Tables parameter must list all base tables.</p>
</li>
<li>
<p>Each base table must have a PK constraint defined. Oracle Warehouse Builder generates a create statement based on the PK constraint and utilizes that log to refresh the dependent materialized views.</p>
</li>
<li>
<p>The materialized view must not contain references to nonrepeating expressions such as SYSDATE, ROWNUM, and nonrepeatable PL/SQL functions.</p>
</li>
<li>
<p>The materialized view must not contain references to <code>RAW</code> and <code>LONG RAW</code> data types.</p>
</li>
<li>
<p>There are additional restrictions for materialized views with statements for joins, aggregations, and unions. For information about additional restrictions, see <a class="olink DWHSG" href="../../server.112/e25554/toc.htm"><span class="italic">Oracle Database Data Warehousing Guide</span></a>.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1126597"></a><a id="WBETL02003"></a>
<div class="sect2">
<h3 class="sect2">Configuring <a id="sthref428"></a><a id="sthref429"></a>Views</h3>
<p>Oracle Warehouse Builder generates a script for each view defined in a target module. You can configure the parameters listed in the following categories.</p>
<p class="subhead2"><a id="sthref430"></a>Identification</p>
<p><span class="bold">Deployable:</span> Set to TRUE to deploy this view.</p>
<p><span class="bold">Error Table Only:</span> Select this option to perform generation or deployment actions only on the error table associated with the view. Use this option to add an error table to an existing view. This setting only controls the actions of the Deployable parameter, but does not override it. Deselect this option to deploy the error table along with the view.</p>
<p class="subhead2"><a id="sthref431"></a>Error Table</p>
<p><span class="bold">Error Table Name:</span> Indicates the name of the error table that stores the rows that were not loaded into the view during a load operation.</p>
<p><span class="bold">Tablespace:</span> Indicates the name of the tablespace in which the error table is stored.</p>
</div>
<!-- class="sect2" -->
<a id="i1111024"></a><a id="WBETL02005"></a>
<div class="sect2">
<h3 class="sect2">Configuring <a id="sthref432"></a><a id="sthref433"></a><a id="sthref434"></a>Sequences</h3>
<p>A script is generated for each sequence object. A sequence object has a Start With parameter and an Increment By parameter. Both parameters are numeric.</p>
<p><span class="bold">To configure the physical properties for a sequence:</span></p>
<ol>
<li>
<p>Right-click the name of a sequence and select <span class="bold">Configure.</span></p>
<p>The Configuration tab for the sequence is displayed.</p>
</li>
<li>
<p>Configure the following Sequence parameters:</p>
<p><span class="bold">Increment By:</span> The number by which you want to increment the sequence.</p>
<p><span class="bold">Start With:</span> The number at which you want the sequence to start.</p>
</li>
<li>
<p>Configure the following Identification parameter:</p>
<p><span class="bold">Deployable:</span> Select this option to indicate to deploy this sequence. Oracle Warehouse Builder only generates scripts for sequences marked deployable.<a id="sthref435"></a><a id="sthref436"></a></p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BEHJEEHA"></a><a id="WBETL02006"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Configuring <a id="sthref437"></a><a id="sthref438"></a><a id="sthref439"></a>Advanced Queues</h3>
<p>Use the following steps to configure advanced queues.</p>
<ol>
<li>
<p>From the Projects Navigator, expand the Databases node and then the Oracle node.</p>
</li>
<li>
<p>Expand the Oracle module containing the advanced queue, then the Queues node, and right-click the advanced queue name and select <span class="bold">Configure.</span></p>
<p>Oracle Warehouse Builder displays the Configuration tab that contains configuration parameters for the advanced queue.</p>
</li>
<li>
<p>Choose the parameters you want to configure and click the space to the right of the parameter name to edit its value.</p>
<p>For each parameter, you can either select an option from a list, type a value, or click the Ellipsis button to display another properties dialog box.</p>
</li>
</ol>
<p>Following are the parameters that you can configure.</p>
<p><a id="sthref440"></a><span class="subhead3">Dequeue Enabled&nbsp;</span>Set this parameter to true to enable dequeuing for the advanced queue.</p>
<p><a id="sthref441"></a><span class="subhead3">Enqueue Enabled&nbsp;</span>Set this parameter to true to enable enqueuing for the advanced queue.</p>
<p><a id="sthref442"></a><span class="subhead3">Max Retries&nbsp;</span>Represents the number of times a dequeue can be attempted on a message. The maximum value of max_retries is 2**31 -1.</p>
<p><a id="sthref443"></a><span class="subhead3">Retention Time&nbsp;</span>Represents the number of seconds for which a message is retained in the queue table after being dequeued from the queue.</p>
<p><a id="sthref444"></a><span class="subhead3">Retry Delay&nbsp;</span>Represents the delay time, in seconds, before this message is scheduled for processing again after an application rollback. The default value of this parameter is 0, which means the message can be retried as soon as possible. This parameter has no effect if Max Retires parameter is set to 0.</p>
</div>
<!-- class="sect2" -->
<a id="BEHJJHII"></a><a id="WBETL02007"></a>
<div class="sect2">
<h3 class="sect2">Configuring <a id="sthref445"></a><a id="sthref446"></a><a id="sthref447"></a>Queue Tables</h3>
<p>Use the following steps to configure queue tables.</p>
<ol>
<li>
<p>From the Projects Navigator, expand the Databases node and then the Oracle node that contains the queue table.</p>
</li>
<li>
<p>Expand the Queues node and then the Queue Tables node.</p>
</li>
<li>
<p>Right-click the name of the queue table to be configured and select <span class="bold">Configure.</span></p>
<p>Oracle Warehouse Builder displays the Configuration tab that contains configuration parameters for the queue table.</p>
</li>
<li>
<p>Choose the parameters you want to configure and click the space to the right of the parameter name to edit its value.</p>
<p>For each parameter, you can either select an option from a list, type a value, or click the Ellipsis button to display another properties dialog box.</p>
</li>
</ol>
<p>The Generation Options node contains the Generate Queue Table parameter. Set this parameter to True to generate code to create the queue table that persists the message of this advanced queue. If the queue table exists in the database, then you need not create it and you may set Generate Queue Table to False.</p>
</div>
<!-- class="sect2" -->
<a id="BEHFHCFJ"></a><a id="WBETL02008"></a>
<div class="sect2">
<h3 class="sect2">Configuring <a id="sthref448"></a><a id="sthref449"></a><a id="sthref450"></a>Queue Propagations</h3>
<p>Use the following steps to configure queue propagations.</p>
<ol>
<li>
<p>From the Projects Navigator, expand the Databases node and then the Oracle node that contains the queue table.</p>
</li>
<li>
<p>Expand the Queues node and then the advanced queue that contains the queue propagation.</p>
</li>
<li>
<p>Right-click the name of the queue propagation to be configured and select <span class="bold">Configure.</span></p>
<p>Oracle Warehouse Builder displays the Configuration tab that contains configuration parameters for the queue propagation.</p>
</li>
<li>
<p>Choose the parameters you want to configure and click the space to the right of the parameter name to edit its value.</p>
<p>For each parameter, you can either select an option from a list, type a value, or click the Ellipsis button to display another properties dialog box.</p>
</li>
</ol>
<p>The configuration parameters are described in the following sections.</p>
<p><span class="bold">Rule Condition</span>: Represents a rule condition to check whether the message can be propagated to the subscriber. This parameter is applicable only for non-streams queues.</p>
<p><span class="bold">Transformation:</span> Represents the transformation that is applied before propagation to the target queue. This parameter is applicable only for non-streams queues.</p>
<p><a id="sthref451"></a><span class="subhead3">Generation Options&nbsp;</span></p>
<ul>
<li>
<p><span class="bold">Generate Database Link:</span> Set this parameter to True to generate a script that creates the database link used for propagation.</p>
</li>
<li>
<p><span class="bold">Generate Queue Propagation:</span> Set this parameter to True to generate code that creates the queue propagation.</p>
</li>
<li>
<p><span class="bold">Generate Ruleset and Rule for Replication:</span> Set this parameter to true to generate the code for RULE and RULESET for replication purposes. This parameter is applicable only for streams queues.</p>
</li>
<li>
<p><span class="bold">Generate Schedule Propagation:</span> Set this parameter to true to generate code for scheduling the queue propagation. This parameter is applicable only for non-streams queues.</p>
</li>
</ul>
<p><a id="sthref452"></a><span class="subhead3">Replication Options (Only for Streams Queues)&nbsp;</span></p>
<ul>
<li>
<p><span class="bold">Not Permitted Tag Values:</span> List of comma-delimited Tag values (in Hexadecimal numbers) that are not enabled for propagation.</p>
</li>
<li>
<p><span class="bold">Permitted Tag Values:</span> List of comma-delimited Tag values (in Hexadecimal numbers) that are enabled for propagation.</p>
</li>
</ul>
<p><a id="sthref453"></a><span class="subhead3">Scheduling Options&nbsp;</span></p>
<ul>
<li>
<p><span class="bold">Duration:</span> Represents the duration of propagation to be performed. The default value is null. This parameter is applicable only for non-streams queue.</p>
</li>
<li>
<p><span class="bold">Latency:</span> Represents the latency for the queue propagation. By default the value is 60. This parameter is applicable only for non-streams queue.</p>
</li>
<li>
<p><span class="bold">Next Time:</span> Represents the next time when the propagation is performed. The default value is null. This parameter is applicable only for non-streams queue.</p>
</li>
<li>
<p><span class="bold">Start Time:</span> Represents the start time for the propagation. The default value is <code>SYSDATE</code>. This parameter is applicable only for non-streams queue.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABBGJHF"></a><a id="WBETL02026"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating <a id="sthref454"></a><a id="sthref455"></a>Relational Data Objects in Microsoft SQL Server and IBM DB2 UDB</h2>
<p>When you create a Microsoft SQL Server module or an IBM DB2 module, you can define data objects such as tables, views, and sequences in this module. Use the editors to define tables and views.</p>
<p><span class="bold">To define a table, view, or sequence in Microsoft SQL Server or IBM DB2 UDB module:</span></p>
<ol>
<li>
<p>Expand the project node under which you want to create data objects and then expand the Databases node.</p>
</li>
<li>
<p>For SQL Server, expand the SQL Server module node and then the module in which the data objects are to be created.</p>
<p>For IBM DB2 UDB, expand the DB2 module node and then the module in which the data objects are to be created.</p>
</li>
<li>
<p>Right-click the node representing the type of object to create and select <span class="bold">New &lt;type of object&gt;</span>. The editor for the object is displayed.</p>
<p>For example, to create a table, right-click the Tables node and select <span class="bold">New Table</span>.</p>
</li>
<li>
<p>Based on the type of object being created, follow the instructions mentioned in one of the following sections:</p>
<ul>
<li>
<p><a href="#i80520">"Creating Table Definitions"</a></p>
</li>
<li>
<p><a href="#i99330">"Creating View Definitions"</a></p>
</li>
<li>
<p><a href="#i99627">"Creating Sequence Definitions"</a></p>
</li>
</ul>
</li>
</ol>
<p class="subhead2"><a id="sthref456"></a>Differences in the Object Editors for Heterogeneous Databases</p>
<p>The following differences exist when you define tables, views, and sequences in the SQL Server or DB2 module:</p>
<ul>
<li>
<p>The Table Editor and View Editor do not contain the Indexes and Partitions tabs.</p>
</li>
<li>
<p>The types of constraints supported for SQL Server and DB2 tables are Primary Key, Foreign Key, Check Constraints, and Unique Keys.</p>
</li>
<li>
<p>On the Columns tab, the field Seconds Precision is not available.</p>
</li>
<li>
<p>On the Columns tab, the Datatypes list contains the data types that you can use. If you use native access, then the Datatypes list contains the data types native to that platform. If you use Gateways to access the heterogeneous database, then the Datatypes list contains Oracle data types.</p>
</li>
<li>
<p>You can use the following attributes in DB2 sequences: START_WITH, INCREMENT_BY, MINVALUE, MAXVALUE, CYCLE, and CACHE.</p>
</li>
</ul>
<a id="BEHIDBBJ"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Rules for <a id="sthref457"></a><a id="sthref458"></a>Naming Objects in IBM DB2 UDB</h3>
<p>When you import data objects from DB2, the case used in object names is preserved. However, for all objects created using Oracle Warehouse Builder, the names are automatically converted to uppercase.</p>
<p>Following are the rules for naming objects in a DB2 module:</p>
<ul>
<li>
<p>Object names and column names must be unique.</p>
</li>
<li>
<p>The maximum length for the object name is 128 characters.</p>
</li>
<li>
<p>The maximum length for each column name is 30 characters.</p>
</li>
<li>
<p>The following characters are illegal in names: `, *, +, |, [, ], :, ;, ", ', &amp;, &lt;, &gt;, ?, /, and Space</p>
</li>
<li>
<p>Names cannot begin with a space, a digit, or with any of the following characters: _, `, &amp;, *, +, |, [, ], :, ;, ", ', &lt;, &gt;, ?, and /.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Enclosed illegal characters are only enabled in names when you import objects. You cannot use illegal characters within Oracle Warehouse Builder.</div>
</div>
<!-- class="sect2" -->
<a id="BEHEIGHD"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Rules for Naming <a id="sthref459"></a><a id="sthref460"></a>Objects in Microsoft SQL Server</h3>
<p>When you import data objects from SQL Server, the case used in object names is preserved. However, for all objects created using Oracle Warehouse Builder, the names are automatically converted to uppercase.</p>
<p>Following are the rules for naming objects in Microsoft SQL Server:</p>
<ul>
<li>
<p>Object names and column names must be unique.</p>
</li>
<li>
<p>The maximum length for the object name is 128 characters.</p>
</li>
<li>
<p>The following characters are illegal in names: ~, `, !, %, ^, &amp;, ;, *, (, ), {, }, [, ], |, \, :, ", /, ?, &gt;, and &lt;.</p>
</li>
<li>
<p>Names cannot contain spaces, periods, or mathematical symbols.</p>
</li>
<li>
<p>Names cannot begin with a space or with any of the following characters: ~, `, !, %, ^, &amp;, *,( ,) {, }, [, ], |, \, :, ;, ", ', /, ?, &lt;, &gt;, and $.</p>
</li>
<li>
<p>Column names cannot begin with mathematical symbols or periods.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Enclosed illegal characters are only enabled in names when you import objects. You cannot use illegal characters within Oracle Warehouse Builder.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2968">
<tr>
<td class="cellalignment2977">
<table class="cellalignment2973">
<tr>
<td class="cellalignment2972"><a href="design_tgt_schemas.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2972"><a href="dim_objects.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2980">
<table class="cellalignment2971">
<tr>
<td class="cellalignment2972"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2972"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2972"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2972"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2972"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2972"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
