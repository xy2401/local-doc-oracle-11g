<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Oracle Warehouse BuilderTransformations Reference</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 037" />
<meta name="dcterms.created" content="2011-09-21T18:21:54Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Warehouse Builder Data Modeling, ETL, and Data Quality Guide" />
<meta name="dcterms.identifier" content="E10935-05" />
<meta name="dcterms.isVersionOf" content="WBETL" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="activities_in_pf.htm" title="Previous" type="text/html" />
<link rel="Next" href="code_tempates.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10935.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">35/37</span> <!-- End Header --><a id="BHCIEAHE"></a><a id="WBETL28000"></a>
<h1 class="chapter"><span class="secnum">28</span> Oracle Warehouse BuilderTransformations Reference</h1>
<p>This chapter describes the predefined transformations provided by Oracle Warehouse Builder to transform data.</p>
<a id="CJACCHHF"></a><a id="WBETL28001"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Predefined Transformations in the Public Oracle Predefined Library</h2>
<p>Predefined transformations in the public Oracle Predefined library are categorized as follows:</p>
<ul>
<li>
<p><a href="#i136293">"Administrative Transformations"</a></p>
</li>
<li>
<p><a href="#i137066">"Character Transformations"</a></p>
</li>
<li>
<p><a href="#CACJJCDJ">"Control Center Transformations"</a></p>
</li>
<li>
<p><a href="#CIHGJIHG">"Conversion Transformations"</a></p>
</li>
<li>
<p><a href="#i137658">"Date Transformations"</a></p>
</li>
<li>
<p><a href="#i138283">"Number Transformations"</a></p>
</li>
<li>
<p><a href="#CIHCCJAG">"OLAP Transformations"</a></p>
</li>
<li>
<p><a href="#i138758">"Other Transformations"</a></p>
</li>
<li>
<p><a href="#BABCGECE">"Spatial Transformations"</a></p>
</li>
<li>
<p><a href="#CACCAGJB">"Streams Transformations"</a></p>
</li>
<li>
<p><a href="#i138579">"XML Transformations"</a></p>
</li>
</ul>
<a id="i136293"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref2533"></a><a id="sthref2534"></a>Administrative Transformations</h3>
<p><a id="sthref2535"></a>Administrative transformations provide prebuilt functionality to perform actions that are regularly performed in ETL processes. The main focus of these transformations is in the DBA related areas or to improve performance. For example, it is common to disable constraints when loading tables and then to reenable them after loading has completed.</p>
<p>The administrative transformations in Oracle Warehouse Builder are custom functions. The Administrative transformation that Oracle Warehouse Builder provides are:</p>
<ul>
<li>
<p><a href="#CIHBGFIH">"WB_ABORT"</a></p>
</li>
<li>
<p><a href="#CIHBBHCH">"WB_COMPILE_PLSQL"</a></p>
</li>
<li>
<p><a href="#CIHBFGHJ">"WB_DISABLE_ALL_CONSTRAINTS"</a></p>
</li>
<li>
<p><a href="#CIHDJJBH">"WB_DISABLE_ALL_TRIGGERS"</a></p>
</li>
<li>
<p><a href="#CIHBBAJI">"WB_DISABLE_CONSTRAINT"</a></p>
</li>
<li>
<p><a href="#CIHDCBHG">"WB_DISABLE_TRIGGER"</a></p>
</li>
<li>
<p><a href="#CIHFFCBH">"WB_ENABLE_ALL_CONSTRAINTS"</a></p>
</li>
<li>
<p><a href="#CIHHDDCB">"WB_ENABLE_ALL_TRIGGERS"</a></p>
</li>
<li>
<p><a href="#CIHEBFFB">"WB_ENABLE_CONSTRAINT"</a></p>
</li>
<li>
<p><a href="#CIHHJDCC">"WB_ENABLE_TRIGGER"</a></p>
</li>
<li>
<p><a href="#CIHJHECJ">"WB_TRUNCATE_TABLE"</a></p>
</li>
</ul>
<a id="CIHBGFIH"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2536"></a>WB_ABORT</h4>
<p class="subhead2"><a id="sthref2537"></a>Syntax</p>
<pre>
WB_ABORT(p_code, p_message)
</pre>
<p>where <code><span class="codeinlineitalic">p_code</span></code> is the abort code, and must be between -20000 and -29999; and <code><span class="codeinlineitalic">p_message</span></code> is an abort message you specify.</p>
<p class="subhead2"><a id="sthref2538"></a>Purpose</p>
<p><code>WB_ABORT</code> enables you to terminate the application from an Oracle Warehouse Builder component. You can run it from a post-mapping process or as a transformation within a mapping.</p>
<p class="subhead2"><a id="sthref2539"></a>Example</p>
<p>Use this administration function to terminate an application. You can use this function in a post-mapping process to terminate deployment if there is an error in the mapping.</p>
</div>
<!-- class="sect3" -->
<a id="CIHBBHCH"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2540"></a>WB_COMPILE_PLSQL</h4>
<p class="subhead2"><a id="sthref2541"></a>Syntax</p>
<pre>
WB_COMPILE_PLSQL(p_name, p_type)
</pre>
<p>where <code><span class="codeinlineitalic">p_name</span></code> is the name of the object that is to be compiled; <code><span class="codeinlineitalic">p_type</span></code> is the type of object to be compiled. The legal types are:</p>
<pre>
'PACKAGE'
'PACKAGE BODY'
'PROCEDURE'
'FUNCTION'
'TRIGGER'
</pre>
<p class="subhead2"><a id="sthref2542"></a>Purpose</p>
<p>This program unit compiles a stored object in the database.</p>
<p class="subhead2"><a id="sthref2543"></a>Example</p>
<p>The following hypothetical example compiles the procedure called <code>add_employee_proc</code>:</p>
<pre>
EXECUTE WB_COMPILE_PLSQL('ADD_EMPLOYEE_PROC', 'PROCEDURE');
</pre></div>
<!-- class="sect3" -->
<a id="CIHBFGHJ"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2544"></a>WB_DISABLE_ALL_CONSTRAINTS</h4>
<p class="subhead2"><a id="sthref2545"></a>Syntax</p>
<pre>
WB_DISABLE_ALL_CONSTRAINTS(p_name)
</pre>
<p>where <code><span class="codeinlineitalic">p_name</span></code> is the name of the table on which constraints are disabled.</p>
<p class="subhead2"><a id="sthref2546"></a>Purpose</p>
<p>This program unit disables all constraints that are owned by the table as stated in the call to the program.</p>
<p>For faster loading of data sets, you can disable constraints on a table. The data is now loaded without validation. This is mainly done on relatively clean data sets.</p>
<p class="subhead2"><a id="sthref2547"></a>Example</p>
<p>The following example shows the disabling of the constraints on the table <code>OE.CUSTOMERS</code>:</p>
<pre>
SELECT constraint_name
,      DECODE(constraint_type,'C','Check','P','Primary') Type
,      status
FROM user_constraints
WHERE table_name = 'CUSTOMERS';
</pre>
<pre>
CONSTRAINT_NAME                TYPE    STATUS
------------------------------ ------- --------
CUST_FNAME_NN                  Check   ENABLED
CUST_LNAME_NN                  Check   ENABLED
CUSTOMER_CREDIT_LIMIT_MAX      Check   ENABLED
CUSTOMER_ID_MIN                Check   ENABLED
CUSTOMERS_PK                   Primary ENABLED
</pre>
<p>Perform the following in SQL*Plus or Oracle Warehouse Builder to disable all constraints:</p>
<pre>
EXECUTE WB_DISABLE_ALL_CONSTRAINTS('CUSTOMERS');

CONSTRAINT_NAME                TYPE    STATUS
------------------------------ ------- --------
CUST_FNAME_NN                  Check   DISABLED
CUST_LNAME_NN                  Check   DISABLED
CUSTOMER_CREDIT_LIMIT_MAX      Check   DISABLED
CUSTOMER_ID_MIN                Check   DISABLED
CUSTOMERS_PK                   Primary DISABLED
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
This statement uses a cascade option to enable dependencies to be broken by disabling the keys.</div>
</div>
<!-- class="sect3" -->
<a id="CIHDJJBH"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2548"></a>WB_DISABLE_ALL_TRIGGERS</h4>
<p class="subhead2"><a id="sthref2549"></a>Syntax</p>
<pre>
WB_DISABLE_ALL_TRIGGERS(p_name)
</pre>
<p>where <code><span class="codeinlineitalic">p_name</span></code> is the table name on which the triggers are disabled.</p>
<p class="subhead2"><a id="sthref2550"></a>Purpose</p>
<p>This program unit disables all triggers owned by the table as stated in the call to the program. The owner of the table must be the current user (in variable USER). This action stops triggers and improves performance.</p>
<p class="subhead2"><a id="sthref2551"></a>Example</p>
<p>The following example shows the disabling of all triggers on the table <code>OE.OC_ORDERS</code>:</p>
<pre>
SELECT trigger_name
,      status
FROM user_triggers
WHERE table_name = 'OC_ORDERS';

TRIGGER_NAME                   STATUS
------------------------------ --------
ORDERS_TRG                     ENABLED
ORDERS_ITEMS_TRG               ENABLED
</pre>
<p>Perform the following in SQL*Plus or Oracle Warehouse Builder to disable all triggers on the table <code>OC_ORDERS</code>.</p>
<pre>
EXECUTE WB_DISABLE_ALL_TRIGGERS ('OC_ORDERS');
</pre>
<pre>
TRIGGER_NAME                   STATUS
------------------------------ --------
ORDERS_TRG                     DISABLED
ORDERS_ITEMS_TRG               DISABLED
</pre></div>
<!-- class="sect3" -->
<a id="CIHBBAJI"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2552"></a>WB_DISABLE_CONSTRAINT</h4>
<p class="subhead2"><a id="sthref2553"></a>Syntax</p>
<pre>
WB_DISABLE_CONSTRAINT(p_constraintname, p_tablename)
</pre>
<p>where <code><span class="codeinlineitalic">p_constraintname</span></code> is the constraint name to be disabled; <code><span class="codeinlineitalic">p_tablename</span></code> is the table name on which the specified constraint is defined.</p>
<p class="subhead2"><a id="sthref2554"></a>Purpose</p>
<p>This program unit disables the specified constraint that is owned by the table as stated in the call to the program. The user is the current user (in variable <code>USER</code>).</p>
<p>For faster loading of data sets, you can disable constraints on a table. The data is then loaded without validation. This reduces overhead and is mainly done on relatively clean data sets.</p>
<p class="subhead2"><a id="sthref2555"></a>Example</p>
<p>The following example shows the disabling of the specified constraint on the table <code>OE.CUSTOMERS</code>:</p>
<pre>
SELECT constraint_name
, DECODE(constraint_type
, 'C', 'Check'
, 'P', 'Primary'
) Type
, status
FROM user_constraints
WHERE table_name = 'CUSTOMERS';

CONSTRAINT_NAME                TYPE    STATUS
------------------------------ ------- --------
CUST_FNAME_NN                  Check   ENABLED
CUST_LNAME_NN                  Check   ENABLED
CUSTOMER_CREDIT_LIMIT_MAX      Check   ENABLED
CUSTOMER_ID_MIN                Check   ENABLED
CUSTOMERS_PK                   Primary ENABLED

</pre>
<p>Perform the following in SQL*Plus or Oracle Warehouse Builder to disable the specified constraint.</p>
<pre>
EXECUTE WB_DISABLE_CONSTRAINT('CUSTOMERS_PK','CUSTOMERS');

CONSTRAINT_NAME                TYPE    STATUS
------------------------------ ------- --------
CUST_FNAME_NN                  Check   ENABLED
CUST_LNAME_NN                  Check   ENABLED
CUSTOMER_CREDIT_LIMIT_MAX      Check   ENABLED
CUSTOMER_ID_MIN                Check   ENABLED
CUSTOMERS_PK                   Primary DISABLED
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
This statement uses a cascade option to enable dependencies to be broken by disabling the keys.</div>
</div>
<!-- class="sect3" -->
<a id="CIHDCBHG"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2556"></a>WB_DISABLE_TRIGGER</h4>
<p class="subhead2"><a id="sthref2557"></a>Syntax</p>
<pre>
WB_DISABLE_TRIGGER(p_name)
</pre>
<p>where <code><span class="codeinlineitalic">p_name</span></code> is the trigger name to be disabled.</p>
<p class="subhead2"><a id="sthref2558"></a>Purpose</p>
<p>This program unit disables the specified trigger. The owner of the trigger must be the current user (in variable USER).</p>
<p class="subhead2"><a id="sthref2559"></a>Example</p>
<p>The following example shows the disabling of a trigger on the table <code>OE.OC_ORDERS</code>:</p>
<pre>
SELECT trigger_name, status
FROM user_triggers
WHERE table_name = 'OC_ORDERS';

TRIGGER_NAME                   STATUS
------------------------------ --------
ORDERS_TRG                     ENABLED
ORDERS_ITEMS_TRG               ENABLED
</pre>
<p>Perform the following in SQL*Plus or Oracle Warehouse Builder to disable the specified constraint.</p>
<pre>
ECECUTE WB_DISABLE_TRIGGER ('ORDERS_TRG');

TRIGGER_NAME                   STATUS
------------------------------ --------
ORDERS_TRG                     DISABLED
ORDERS_ITEMS_TRG               ENABLED
</pre></div>
<!-- class="sect3" -->
<a id="CIHFFCBH"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2560"></a>WB_ENABLE_ALL_CONSTRAINTS</h4>
<p class="subhead2"><a id="sthref2561"></a>Syntax</p>
<pre>
WB_ENABLE_ALL_CONSTRAINTS(p_name)
</pre>
<p>where <code><span class="codeinlineitalic">p_name</span></code> is the name of the table for which all constraints should be enabled.</p>
<p class="subhead2"><a id="sthref2562"></a>Purpose</p>
<p>This program unit enables all constraints that are owned by the table as stated in the call to the program.</p>
<p>For faster loading of data sets, you can disable constraints on a table. After the data is loaded, you must enable these constraints again using this program unit.</p>
<p class="subhead2"><a id="sthref2563"></a>Example</p>
<p>The following example shows the enabling of the constraints on the table OE.CUSTOMERS:</p>
<pre>
SELECT constraint_name
, DECODE(constraint_type
</pre>
<pre>
, 'C', 'Check'
, 'P', 'Primary)
Type
, status
</pre>
<pre>
FROM user_constraints
WHERE table_name = 'CUSTOMERS';

CONSTRAINT_NAME                TYPE    STATUS
------------------------------ ------- --------
CUST_FNAME_NN                  Check   DISABLED
CUST_LNAME_NN                  Check   DISABLED
CUSTOMER_CREDIT_LIMIT_MAX      Check   DISABLED
CUSTOMER_ID_MIN                Check   DISABLED
CUSTOMERS_PK                   Primary DISABLED
</pre>
<p>Perform the following in SQL*Plus or Oracle Warehouse Builder to enable all constraints.</p>
<pre>
EXECUTE WB_ENABLE_ALL_CONSTRAINTS('CUSTOMERS');

CONSTRAINT_NAME                TYPE    STATUS
------------------------------ ------- --------
CUST_FNAME_NN                  Check   ENABLED
CUST_LNAME_NN                  Check   ENABLED
CUSTOMER_CREDIT_LIMIT_MAX      Check   ENABLED
CUSTOMER_ID_MIN                Check   ENABLED
CUSTOMERS_PK                   Primary ENABLED
</pre></div>
<!-- class="sect3" -->
<a id="CIHHDDCB"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2564"></a>WB_ENABLE_ALL_TRIGGERS</h4>
<p class="subhead2"><a id="sthref2565"></a>Syntax</p>
<pre>
WB_ENABLE_ALL_TRIGGERS(p_name)
</pre>
<p>where <code>p_name</code> is the table name on which the triggers are enabled.</p>
<p class="subhead2"><a id="sthref2566"></a>Purpose</p>
<p>This program unit enables all triggers owned by the table as stated in the call to the program. The owner of the table must be the current user (in variable USER).</p>
<p class="subhead2"><a id="sthref2567"></a>Example</p>
<p>The following example shows the enabling of all triggers on the table <code>OE.OC_ORDERS</code>:</p>
<pre>
SELECT trigger_name
,      status
FROM user_triggers
WHERE table_name = 'OC_ORDERS';

TRIGGER_NAME                   STATUS
------------------------------ --------
ORDERS_TRG                     DISABLED
ORDERS_ITEMS_TRG               DISABLED
</pre>
<p>Perform the following in SQL*Plus or Oracle Warehouse Builder to enable all triggers defined on the table <code>OE.OC_ORDERS</code>.</p>
<pre>
EXECUTE WB_ENABLE_ALL_TRIGGERS ('OC_ORDERS');

TRIGGER_NAME                   STATUS
------------------------------ --------
ORDERS_TRG                     ENABLED
ORDERS_ITEMS_TRG               ENABLED
</pre></div>
<!-- class="sect3" -->
<a id="CIHEBFFB"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2568"></a>WB_ENABLE_CONSTRAINT</h4>
<p class="subhead2"><a id="sthref2569"></a>Syntax</p>
<pre>
WB_ENABLE_CONSTRAINT(p_constraintname, p_tablename)
</pre>
<p>where <code><span class="codeinlineitalic">p_constraintname</span></code> is the constraint name to be disabled and <code><span class="codeinlineitalic">p_tablename</span></code> is the table name on which the specified constraint is defined.</p>
<p class="subhead2"><a id="sthref2570"></a>Purpose</p>
<p>This program unit enables the specified constraint that is owned by the table as stated in the call to the program. The user is the current user (in variable <code>USER</code>). For faster loading of data sets, you can disable constraints on a table. After the loading is complete, you must reenable these constraints. This program unit shows you how to enable the constraints one at a time.</p>
<p class="subhead2"><a id="sthref2571"></a>Example</p>
<p>The following example shows the enabling of the specified constraint on the table <code>OE.CUSTOMERS</code>:</p>
<pre>
SELECT constraint_name
,      DECODE(constraint_type
       , 'C', 'Check'
       , 'P', 'Primary'
       ) Type
,      status
FROM user_constraints
WHERE table_name = 'CUSTOMERS';

CONSTRAINT_NAME                TYPE    STATUS
------------------------------ ------- --------
CUST_FNAME_NN                  Check   DISABLED
CUST_LNAME_NN                  Check   DISABLED
CUSTOMER_CREDIT_LIMIT_MAX      Check   DISABLED
CUSTOMER_ID_MIN                Check   DISABLED
CUSTOMERS_PK                   Primary DISABLED

</pre>
<p>Perform the following in SQL*Plus or Oracle Warehouse Builder to enable the specified constraint.</p>
<pre>
EXECUTE WB_ENABLE_CONSTRAINT('CUSTOMERS_PK', 'CUSTOMERS');

CONSTRAINT_NAME                TYPE    STATUS
------------------------------ ------- --------
CUST_FNAME_NN                  Check   DISABLED
CUST_LNAME_NN                  Check   DISABLED
CUSTOMER_CREDIT_LIMIT_MAX      Check   DISABLED
CUSTOMER_ID_MIN                Check   DISABLED
CUSTOMERS_PK                   Primary ENABLED
</pre></div>
<!-- class="sect3" -->
<a id="CIHHJDCC"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2572"></a>WB_ENABLE_TRIGGER</h4>
<p class="subhead2"><a id="sthref2573"></a>Syntax</p>
<pre>
WB_ENABLE_TRIGGER(p_name)
</pre>
<p>where <code>p_name</code> is the trigger name to be enabled.</p>
<p class="subhead2"><a id="sthref2574"></a>Purpose</p>
<p>This program unit enables the specified trigger. The owner of the trigger must be the current user (in variable <code>USER</code>).</p>
<p class="subhead2"><a id="sthref2575"></a>Example</p>
<p>The following example shows the enabling of a trigger on the table <code>OE.OC_ORDERS</code>:</p>
<pre>
SELECT trigger_name
,      status
FROM user_triggers
WHERE table_name = 'OC_ORDERS';

TRIGGER_NAME                   STATUS
------------------------------ --------
ORDERS_TRG                     DISABLED
ORDERS_ITEMS_TRG               ENABLED
</pre>
<p>Perform the following in SQL*Plus or Oracle Warehouse Builder to enable the specified constraint.</p>
<pre>
EXECUTE WB_ENABLE_TRIGGER ('ORDERS_TRG');

TRIGGER_NAME                   STATUS
------------------------------ --------
ORDERS_TRG                     ENABLED
ORDERS_ITEMS_TRG               ENABLED
</pre></div>
<!-- class="sect3" -->
<a id="CIHJHECJ"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2576"></a>WB_TRUNCATE_TABLE</h4>
<p class="subhead2"><a id="sthref2577"></a>Syntax</p>
<pre>
WB_TRUNCATE_TABLE(p_name)
</pre>
<p>where <code><span class="codeinlineitalic">p_name</span></code> is the table name to be truncated.</p>
<p class="subhead2"><a id="sthref2578"></a>Purpose</p>
<p>This program unit truncates the table specified in the command call. The owner of the trigger must be the current user (in variable <code>USER</code>). The command disables and reenables all referencing constraints to enable the truncate table command. Use this command in a pre-mapping process to explicitly truncate a staging table and ensure that all data in this staging table is newly loaded data.</p>
<p class="subhead2"><a id="sthref2579"></a>Example</p>
<p>The following example shows the truncation of the table <code>OE.OC_ORDERS</code>:</p>
<pre>
SELECT COUNT(*) FROM oc_orders;

  COUNT(*)
----------
       105
</pre>
<p>Perform the following in SQL*Plus or Oracle Warehouse Builder to enable the specified constraint.</p>
<pre>
EXECUTE WB_TRUNCATE_TABLE ('OC_ORDERS');

  COUNT(*)
----------
         0
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i137066"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref2580"></a><a id="sthref2581"></a>Character Transformations</h3>
<p>Character transformations enable Oracle Warehouse Builder users to perform transformations on Character objects. The custom functions provided with Oracle Warehouse Builder are prefixed with <code>WB_</code>.</p>
<p>The character transformations available in Oracle Warehouse Builder are listed below. Most of them are implementations of basic SQL functions or procedures. No descriptions are provided for such transformations.</p>
<p><a href="#CHDCADJC">Table 28-1</a> lists the character transformations that are based on Database SQL functions. The transformations are listed in a columnar table that reads down the columns from left to right to conserve space.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref2582"></a><a id="CHDCADJC"></a>Table 28-1 Character Transformations Based on SQL character functions</p>
<table class="cellalignment2975" title="Character Transformations Based on SQL character functions" summary="This table lists the SQL functions that are implemented as character transformations." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t4">Character Transformation Name</th>
<th class="cellalignment2976" id="r1c2-t4">Character Transformation Name (Contd.)</th>
<th class="cellalignment2976" id="r1c3-t4">Character Transformation Name (Contd.)</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t4" headers="r1c1-t4">
<ul>
<li>
<p>ASCII</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r2c1-t4 r1c2-t4">
<ul>
<li>
<p>CHR</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r2c1-t4 r1c3-t4">
<ul>
<li>
<p>CONCAT</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t4" headers="r1c1-t4">
<ul>
<li>
<p>INITCAP</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r3c1-t4 r1c2-t4">
<ul>
<li>
<p>INSTR</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r3c1-t4 r1c3-t4">
<ul>
<li>
<p>INSTR2</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t4" headers="r1c1-t4">
<ul>
<li>
<p>INSTR4</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r4c1-t4 r1c2-t4">
<ul>
<li>
<p>INSTRB</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r4c1-t4 r1c3-t4">
<ul>
<li>
<p>INSTRC</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t4" headers="r1c1-t4">
<ul>
<li>
<p>LENGTH</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r5c1-t4 r1c2-t4">
<ul>
<li>
<p>LENGTH2</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r5c1-t4 r1c3-t4">
<ul>
<li>
<p>LENGTH4</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r6c1-t4" headers="r1c1-t4">
<ul>
<li>
<p>LENGTHB</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r6c1-t4 r1c2-t4">
<ul>
<li>
<p>LENGTHC</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r6c1-t4 r1c3-t4">
<ul>
<li>
<p>LOWER</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r7c1-t4" headers="r1c1-t4">
<ul>
<li>
<p>LPAD</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r7c1-t4 r1c2-t4">
<ul>
<li>
<p>LTRIM</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r7c1-t4 r1c3-t4">
<ul>
<li>
<p>NLSSORT</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r8c1-t4" headers="r1c1-t4">
<ul>
<li>
<p>NLS_INITCAP</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r8c1-t4 r1c2-t4">
<ul>
<li>
<p>NLS_LOWER</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r8c1-t4 r1c3-t4">
<ul>
<li>
<p>NLS_UPPER</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r9c1-t4" headers="r1c1-t4">
<ul>
<li>
<p>REPLACE</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r9c1-t4 r1c2-t4">
<ul>
<li>
<p>REGEXP_INSTR</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r9c1-t4 r1c3-t4">
<ul>
<li>
<p>REGEXP_REPLACE</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r10c1-t4" headers="r1c1-t4">
<ul>
<li>
<p>REGEXP_SUBSTR</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r10c1-t4 r1c2-t4">
<ul>
<li>
<p>RPAD</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r10c1-t4 r1c3-t4">
<ul>
<li>
<p>RTRIM</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r11c1-t4" headers="r1c1-t4">
<ul>
<li>
<p>SOUNDEX</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r11c1-t4 r1c2-t4">
<ul>
<li>
<p>SUBSTR</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r11c1-t4 r1c3-t4">
<ul>
<li>
<p>SUBSTR2</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r12c1-t4" headers="r1c1-t4">
<ul>
<li>
<p>SUBSTR4</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r12c1-t4 r1c2-t4">
<ul>
<li>
<p>SUBSTRB</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r12c1-t4 r1c3-t4">
<ul>
<li>
<p>SUBSTRC</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r13c1-t4" headers="r1c1-t4">
<ul>
<li>
<p>TRANSLATE</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r13c1-t4 r1c2-t4">
<ul>
<li>
<p>TRIM</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r13c1-t4 r1c3-t4">
<ul>
<li>
<p>UPPER</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>For descriptions and examples of these functions, refer to section "Character Functions" in the <a class="olink SQLRF20032" href="../../server.112/e41084/functions002.htm#SQLRF20032"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>Following is the list of custom character transformations.</p>
<ul>
<li>
<p><a href="#CIHFAFBE">"WB_LOOKUP_CHAR (number)"</a></p>
</li>
<li>
<p><a href="#CIHHGGJD">"WB_LOOKUP_CHAR (varchar2)"</a></p>
</li>
<li>
<p><a href="#CIHCBGEB">"WB_IS_SPACE"</a></p>
</li>
</ul>
<a id="CIHFAFBE"></a>
<div class="sect3">
<h4 class="sect3">WB_LOOKUP_CHAR (number)<a id="sthref2583"></a></h4>
<p class="subhead2"><a id="sthref2584"></a>Syntax</p>
<pre>
WB.LOOKUP_CHAR (table_name
, column_name
, key_column_name
, key_value
)
</pre>
<p>where <code>table_name</code> is the name of the table to perform the lookup on and <code>column_name</code> is the name of the <code>VARCHAR2</code> column that is returned. For example, the result of the lookup <code>key_column_name</code> is the name of the <code>NUMBER</code> column used as the key to match on in the lookup table, <code>key_value</code> is the value of the key column mapped into the <code>key_column_name</code> with which the match is done.</p>
<p class="subhead2"><a id="sthref2585"></a>Purpose</p>
<p>To perform a key lookup on a number that returns a <code>VARCHAR2</code> value from a database table using a <code>NUMBER</code> column as the matching key.</p>
<p class="subhead2"><a id="sthref2586"></a>Example</p>
<p>Consider the following table as a lookup table LKP1:</p>
<pre>
KEY_COLUMN    TYPE    COLOR
10            Car     Red
20            Bike    Green
</pre>
<pre>
</pre>
<p>Using this package with the following call:</p>
<pre>
WB.LOOKUP_CHAR ('LKP1'
, 'TYPE'
, 'KEYCOLUMN'
, 20
)
</pre>
<p>returns the value of 'Bike' as output of this transform. This output would then be processed in the mapping as the result of an inline function call.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This function is a row-based key lookup. Set-based lookups are supported when you use the Lookup operator.</div>
</div>
<!-- class="sect3" -->
<a id="CIHHGGJD"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2587"></a>WB_LOOKUP_CHAR (varchar2)</h4>
<p class="subhead2"><a id="sthref2588"></a>Syntax</p>
<pre>
WB.LOOKUP_CHAR (table_name
, column_name
, key_column_name
, key_value
)
</pre>
<p>where <code>table_name</code> is the name of the table to perform the lookup on; <code>column_name</code> is the name of the <code>VARCHAR2</code> column that is returned, for instance, the result of the lookup; <code>key_column_name</code> is the name of the <code>VARCHAR2</code> column used as the key to match on in the lookup table; <code>key_value</code> is the value of the key column, for instance, the value mapped into the <code>key_column_name</code> with which the match is done.</p>
<p class="subhead2"><a id="sthref2589"></a>Purpose</p>
<p>To perform a key lookup on a <code>VARCHAR2</code> character that returns a <code>VARCHAR2</code> value from a database table using a <code>VARCHAR2</code> column as the matching key.</p>
<p class="subhead2"><a id="sthref2590"></a>Example</p>
<p>Consider the following table as a lookup table <code>LKP1</code>:</p>
<pre>
KEYCOLUMN  TYPE  COLOR
ACV        Car   Red
ACP        Bike  Green
</pre>
<p>Using this package with the following call:</p>
<pre>
WB.LOOKUP_CHAR ('LKP1'
, 'TYPE'
, 'KEYCOLUMN'
, 'ACP'
)
</pre>
<p>returns the value of 'Bike' as output of this transformation. This output is then processed in the mapping as the result of an inline function call.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This function is a row-based key lookup. Set-based lookups are supported when you use the Lookup operator.</div>
</div>
<!-- class="sect3" -->
<a id="CIHCBGEB"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2591"></a>WB_IS_SPACE</h4>
<p class="subhead2"><a id="sthref2592"></a>Syntax</p>
<pre>
WB_IS_SPACE(attibute)
</pre>
<p class="subhead2"><a id="sthref2593"></a>Purpose</p>
<p>Checks whether a string value only contains spaces. This function returns a Boolean value. In mainframe sources, some fields contain many spaces to make a file adhere to the fixed length format. This function provides a way to check for these spaces.</p>
<p class="subhead2"><a id="sthref2594"></a>Example</p>
<p><code>WB_IS_SPACE</code> returns TRUE if attribute contains only spaces.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CACJJCDJ"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Control Center Transformations<a id="sthref2595"></a><a id="sthref2596"></a></h3>
<p>Control Center transformations are used in a process flow or in custom transformations to enable you to access information about the Control Center at execution time. For example, you can use a Control Center transformation in the expression on a transition to help control the flow through a process flow at execution time. You can also use Control Center transformations within custom functions. These custom functions can in turn be used in the design of your process flow.</p>
<p>All Control Center transformations require an audit ID that provides a handle to the audit data stored in the Control Center workspace. The audit ID is a key into the public view <code>ALL_RT_AUDIT_EXECUTIONS</code>. You use the transformations to obtain data specific to that audit ID at execution time. When run for a process flow, you can obtain the audit ID at execution time using the pseudo variable <code>audit_id</code> in a process flow expression. This variable is evaluated as the audit ID of the currently executing job. For example, for a map input parameter, this represents the map execution and for a transition this represents the job at the source of the transition.</p>
<p>The Control Center transformations are:</p>
<ul>
<li>
<p><a href="#CHDJHFHH">"WB_RT_GET_ELAPSED_TIME"</a></p>
</li>
<li>
<p><a href="#CHDECGIC">"WB_RT_GET_JOB_METRICS"</a></p>
</li>
<li>
<p><a href="#BABCJFAH">"WB_RT_GET_LAST_EXECUTION_TIME"</a></p>
</li>
<li>
<p><a href="#CHDEEGAJ">"WB_RT_GET_MAP_RUN_AUDIT"</a></p>
</li>
<li>
<p><a href="#CHDFBJEI">"WB_RT_GET_NUMBER_OF_ERRORS"</a></p>
</li>
<li>
<p><a href="#CHDCAHDE">"WB_RT_GET_NUMBER_OF_WARNINGS"</a></p>
</li>
<li>
<p><a href="#CHDGBJIA">"WB_RT_GET_PARENT_AUDIT_ID"</a></p>
</li>
<li>
<p><a href="#CHDFHFEH">"WB_RT_GET_RETURN_CODE"</a></p>
</li>
<li>
<p><a href="#CHDCFCEB">"WB_RT_GET_START_TIME"</a></p>
</li>
</ul>
<a id="CHDJHFHH"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref2597"></a>WB_RT_GET_ELAPSED_TIME</h4>
<p class="subhead2"><a id="sthref2598"></a>Syntax</p>
<pre>
WB_RT_GET_ELAPSED_TIME(audit_id)
</pre>
<p class="subhead2"><a id="sthref2599"></a>Purpose</p>
<p>This function returns the elapsed time, in seconds, for the job execution given by the specified <code>audit_id</code>. It returns null if the specified audit ID does not exist. For example, you can use this function on a transition to choose a dependent on the time taken by the previous activity.</p>
<p class="subhead2"><a id="sthref2600"></a>Example</p>
<p>The following example returns the time elapsed since the activity represented by <code>audit_id</code> was started:</p>
<pre>
declare
   audit_id NUMBER := 1812;
   l_time NUMBER;
begin
   l_time:= WB_RT_GET_ELAPSED_TIME(audit_id);
end;
</pre></div>
<!-- class="sect3" -->
<a id="CHDECGIC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref2601"></a>WB_RT_GET_JOB_METRICS</h4>
<p class="subhead2"><a id="sthref2602"></a>Syntax</p>
<pre>
WB_RT_GET_JOB_METRICS(audit_id, no_selected, no_deleted, no_updated, no_inserted, no_discarded, no_merged, no_corrected)
</pre>
<p>where <code>no_selected</code> represents the number of rows selected, <code>no_deleted</code> represents the number of rows deleted, <code>no_updated</code> represents the number of rows updated, <code>no_inserted</code> represents the number of rows inserted, <code>no_discarded</code> represents the number of rows discarded, <code>no_merged</code> represents the number of rows merged, and <code>no_corrected</code> represents the number of rows corrected during the job execution.</p>
<p class="subhead2"><a id="sthref2603"></a>Purpose</p>
<p>This procedure returns the metrics of the job execution represented by the specified <code>audit_id</code>. The metrics include the number of rows selected, deleted, updated, inserted, discarded, merged, and corrected.</p>
<p class="subhead2"><a id="sthref2604"></a>Example</p>
<p>The following example retrieves the job metrics for the audit ID represented by <code>audit_id</code>.</p>
<pre>
declare
   audit_id NUMBER := 16547;
   l_nselected NUMBER;
   l_ndeleted NUMBER;
   l_nupdated NUMBER;
   l_ninserted NUMBER;
   l_ndiscarded NUMBER;
   l_nmerged NUMBER;
   l_ncorrected NUMBER;
begin
   WB_RT_GET_JOB_METRICS(audit_id, l_nselected, l_ndeleted, l_nupdated,
                         l_ninserted, l_ndiscarded, l_nmerged, l_ncorrected);
   dbms_output.put_line('sel=' || l_nselected || ', del=' l_ndeleted ||
                        ', upd=' || l_nupdated);
   dbms_output.put_line('ins='|| l_ninserted || ' , dis=' || l_ndiscarded );
   dbms_output.put_line('mer=' || l_nmerged || ', cor=' ||l_ncorrected);
 end;
</pre></div>
<!-- class="sect3" -->
<a id="BABCJFAH"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">WB_RT_GET_LAST_EXECUTION_TIME<a id="sthref2605"></a></h4>
<p class="subhead2"><a id="sthref2606"></a>Syntax</p>
<pre>
WB_RT_GET_LAST_EXECUTION_TIME(objectName, objectType, objectLocationName)
</pre>
<p>where <code>objectName</code> represents the name of the object, <code>objectType</code> represents the type of the object (for example MAPPING, DATA_AUDITOR, PROCESS_FLOW, SCHEDULABLE), and <code>objectLocationName</code> represents the location to which the object is deployed.</p>
<p class="subhead2"><a id="sthref2607"></a>Purpose</p>
<p>This transformation gives you access to time-based data. Typically, you can use this in a Process Flow to model some design aspect that is relevant to "time". For example you can design a path that may run different maps if the time since the last execution is more than 1 day.</p>
<p>You can also use this transformation to determine time-synchronization across process flows that run concurrently. For example, you can choose a path in a process flow according to whether another Process Flow has completed.</p>
<p class="subhead2"><a id="sthref2608"></a>Example</p>
<p>The following example retrieves the time when the mapping TIMES_MAP was last run and the if condition determines whether this time was within 1 day of the current time. Based on this time, it can perform different actions.</p>
<pre>
declare
    last_exec_time DATE;
begin
    last_exec_time:=WB_RT_GET_LAST_EXECUTION_TIME('TIMES_MAP','MAPPING','WH_LOCATION');
    if last_exec_time &lt; sysdate - 1 then
--       last-execution was multiple day ago
--       provide details of action here
          NULL;
    Else
--       provide details of action here
          NULL;
    end if;
end;
</pre></div>
<!-- class="sect3" -->
<a id="CHDEEGAJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref2609"></a>WB_RT_GET_MAP_RUN_AUDIT</h4>
<p class="subhead2"><a id="sthref2610"></a>Syntax</p>
<pre>
WB_RT_GET_MAP_RUN_AUDIT(audit_id)
</pre>
<p class="subhead2"><a id="sthref2611"></a>Purpose</p>
<p>This function returns the map run ID for a job execution that represents a map activity. It returns null if <code>audit_id</code> does not represent the job execution for a map. For example, you can use the returned ID as a key to access the ALL_RT_MAP_RUN_&lt;<code>name</code>&gt; views for more information.</p>
<p class="subhead2"><a id="sthref2612"></a>Example</p>
<p>The following example retrieves the map run ID for a job execution whose audit ID is 67265. It then uses this map run ID to obtain the name of the source from the ALL_RT_MAP_RUN_EXECUTIONS public view.</p>
<pre>
declare
  audit_id NUMBER := 67265;
  l_sources VARCHAR2(256);
  l_run_id NUMBER;begin  l_run_id := WB_RT_GET_MAP_RUN_AUDIT_ID(audit_id);  SELECT source_name INTO l_sources FROM all_rt_map_run_sources         WHERE map_run_id = l_run_id;end;
</pre></div>
<!-- class="sect3" -->
<a id="CHDFBJEI"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref2613"></a>WB_RT_GET_NUMBER_OF_ERRORS</h4>
<p class="subhead2"><a id="sthref2614"></a>Syntax</p>
<pre>
WB_RT_GET_NUMBER_OF_ERRORS(audit_id)
</pre>
<p class="subhead2"><a id="sthref2615"></a>Purpose</p>
<p>This function returns the number of errors recorded for the job execution given by the specified <code>audit_id</code>. It returns null if the specific <code>audit_id</code> is not found.</p>
<p class="subhead2"><a id="sthref2616"></a>Example</p>
<p>The following example retrieves the number of errors generated by the job execution whose audit ID is 8769. You can then perform different actions based on the number of errors.</p>
<pre>
declare
   audit_id NUMBER := 8769;
   l_errors NUMBER;begin   l_errors := WB_RT_GET_NUMBER_OF_ERRORS(audit_id);
   if l_errors &lt; 5 then
      .....
   else
      .....
   end if;
end;
</pre></div>
<!-- class="sect3" -->
<a id="CHDCAHDE"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref2617"></a>WB_RT_GET_NUMBER_OF_WARNINGS</h4>
<p class="subhead2"><a id="sthref2618"></a>Syntax</p>
<pre>
WB_RT_GET_NUMBER_OF_WARNINGS(audit_id)
</pre>
<p class="subhead2"><a id="sthref2619"></a>Purpose</p>
<p>This function returns the number of warnings recorded for the job executions represented by <code>audit_id</code>. It returns null if <code>audit_id</code> does not exist.</p>
<p class="subhead2"><a id="sthref2620"></a>Example</p>
<p>The following example returns the number of warnings generated by the job execution whose audit ID is 54632. You can then perform different actions based on the number of warnings.</p>
<pre>
declare   audit_is NUMBER := 54632;
   l_warnings NUMBER;begin   l_ warnings:= WB_RT_GET_NUMBER_OF_WARNINGS (audit_id);
   if l_warnings &lt; 5 then
      .....
   else
      .....
   end if;
end;
</pre></div>
<!-- class="sect3" -->
<a id="CHDGBJIA"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref2621"></a>WB_RT_GET_PARENT_AUDIT_ID</h4>
<p class="subhead2"><a id="sthref2622"></a>Syntax</p>
<pre>
WB_RT_GET_PARENT_AUDIT_ID(audit_id)
</pre>
<p class="subhead2"><a id="sthref2623"></a>Purpose</p>
<p>This function returns the audit id for the process that owns the job execution represented by audit_id. It returns null if audit_id does not exist. You can then use the returned audit id as a key into other public views such as ALL_RT_AUDIT_EXECUTIONS, or other Control Center transformations if further information is required.</p>
<p class="subhead2"><a id="sthref2624"></a>Example</p>
<p>The following example retrieves the parent audit ID for a job execution whose audit ID is 76859. It then uses this audit ID to determine the elapsed time for the parent activity. You can perform different actions based on the elapsed time of the parent activity.</p>
<pre>
declare
   audit_id NUMBER := 76859;
   l_elapsed_time NUMBER;   l_parent_id NUMBER;begin   l_parent_id := WB_RT_GET_PARENT_AUDIT_ID(audit_id);   l_elapsed_time := WB_RT_GET_ELAPSED_TIME(l_parent_id);
   if l_elpased_time &lt; 100 then
      .....
   else
      .....
   end if;
end;
</pre></div>
<!-- class="sect3" -->
<a id="CHDFHFEH"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref2625"></a>WB_RT_GET_RETURN_CODE</h4>
<p class="subhead2"><a id="sthref2626"></a>Syntax</p>
<pre>
WB_RT_GET_RETURN_CODE(audit_id)
</pre>
<p class="subhead2"><a id="sthref2627"></a>Purpose</p>
<p>This function returns the return code recorded for the job execution represented by <code>audit_id</code>. It returns null if <code>audit_id</code> does not exist. For a successful job execution, the return code is greater than or equal to 0. A return code of less than 0 signifies that the job execution has failed.</p>
<p class="subhead2"><a id="sthref2628"></a>Example</p>
<p>The following example retrieves the return code for the job execution whose audit ID is represented by <code>audit_id</code>.</p>
<pre>
declare   audit_id NUMBER:=69;
   l_code NUMBER;begin   l_code:= WB_RT_GET_RETURN_CODE(audit_id);end;
</pre></div>
<!-- class="sect3" -->
<a id="CHDCFCEB"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref2629"></a>WB_RT_GET_START_TIME</h4>
<p class="subhead2"><a id="sthref2630"></a>Syntax</p>
<pre>
WB_RT_GET_START_TIME(audit_id)
</pre>
<p class="subhead2"><a id="sthref2631"></a>Purpose</p>
<p>This function returns the start time for the job execution represented by <code>audit_id</code>. It returns null if <code>audit_id</code> does not exist. For example, you can use this in a transition if you wanted to choose a dependent on when the previous activity started.</p>
<p class="subhead2"><a id="sthref2632"></a>Example</p>
<p>The following example determines the start time of the job execution whose audit ID is 354.</p>
<pre>
declare   audit_id NUMBER:=354;
   l_date TIMESTAMP WITH TIME ZONE;begin   l_date := WB_RT_GET_START_TIME(audit_id);end;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHGJIHG"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref2633"></a><a id="sthref2634"></a>Conversion Transformations</h3>
<p>The conversion transformations enables Oracle Warehouse Builder users to perform functions that enable conditional conversion of values. These functions achieve "if -then" constructions within SQL.</p>
<p>The conversion transformations that Oracle Warehouse Builder implements from the SQL conversion functions are as follows:</p>
<ul>
<li>
<p>ASCIISTR</p>
</li>
<li>
<p>COMPOSE</p>
</li>
<li>
<p>CONVERT</p>
</li>
<li>
<p>HEXTORAW</p>
</li>
<li>
<p>NUMTODSINTERVAL</p>
</li>
<li>
<p>NUMTOYMINTERVAL</p>
</li>
<li>
<p>RAWTOHEX</p>
</li>
<li>
<p>RAWTONHEX</p>
</li>
<li>
<p>SCN_TO_TIMESTAMP</p>
</li>
<li>
<p>TIMESTAMP_TO_SCN</p>
</li>
<li>
<p>TO_BINARY_DOUBLE</p>
</li>
<li>
<p>TO_BINARY_FLOAT</p>
</li>
<li>
<p>TO_CHAR (character), TO_CHAR (datetime), TO_CHAR (number)</p>
</li>
<li>
<p>TO_CLOB</p>
</li>
<li>
<p>TO_DATE</p>
</li>
<li>
<p>TO_DSINTERVAL</p>
</li>
<li>
<p>TO_MULTIBYTE</p>
</li>
<li>
<p>TO_NCHAR (character), TO_NCHAR (datetime), TO_NCHAR (number)</p>
</li>
<li>
<p>TO_NCLOB</p>
</li>
<li>
<p>TO_NUMBER</p>
</li>
<li>
<p>TO_SINGLE_BYTE</p>
</li>
<li>
<p>TO_TIMESTAMP</p>
</li>
<li>
<p>TO_TIMESTAMP_TZ</p>
</li>
<li>
<p>TO_YMINTERVAL</p>
</li>
<li>
<p>UNISTR</p>
</li>
</ul>
<p>For descriptions and examples of these transformations, see "Conversion Functions" in the <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect2" -->
<a id="i137658"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref2635"></a><a id="sthref2636"></a><a id="sthref2637"></a><a id="sthref2638"></a>Date Transformations</h3>
<p>Date transformations provide Oracle Warehouse Builder users with functionality to perform transformations on date attributes. These transformations include SQL functions that are implemented by Oracle Warehouse Builder and custom functions provided with Oracle Warehouse Builder. The custom function are in the format <code>WB_&lt;function name&gt;</code>.</p>
<p>Following are the date transformations that are implementations of Database SQL functions:</p>
<ul>
<li>
<p>ADD_MONTHS</p>
</li>
<li>
<p>CURRENT_DATE</p>
</li>
<li>
<p>DBTIMEZONE</p>
</li>
<li>
<p>FROM_TZ</p>
</li>
<li>
<p>LAST_DAY</p>
</li>
<li>
<p>MONTHS_BETWEEN</p>
</li>
<li>
<p>NEW_TIME</p>
</li>
<li>
<p>NEXT_DAY</p>
</li>
<li>
<p>ROUND</p>
</li>
<li>
<p>SESSIONTIMEZONE</p>
</li>
<li>
<p>SYSDATE</p>
</li>
<li>
<p>SYSTIMESTAMP</p>
</li>
<li>
<p>SYS_EXTRACT_UTC</p>
</li>
<li>
<p>TRUNC</p>
</li>
</ul>
<p>For descriptions and examples of these transformations, refer to the section "Datetime Functions" in the <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>The custom Date transformations are:</p>
<ul>
<li>
<p><a href="#CIHDGIAC">"WB_CAL_MONTH_NAME"</a></p>
</li>
<li>
<p><a href="#CIHGGGDJ">"WB_CAL_MONTH_OF_YEAR"</a></p>
</li>
<li>
<p><a href="#CIHBJIEG">"WB_CAL_MONTH_SHORT_NAME"</a></p>
</li>
<li>
<p><a href="#CIHEIDHD">"WB_CAL_QTR"</a></p>
</li>
<li>
<p><a href="#CIHGGEHJ">"WB_CAL_WEEK_OF_YEAR"</a></p>
</li>
<li>
<p><a href="#CIHCFEID">"WB_CAL_YEAR"</a></p>
</li>
<li>
<p><a href="#CIHJJBBH">"WB_CAL_YEAR_NAME"</a></p>
</li>
<li>
<p><a href="#CIHIHDDE">"WB_DATE_FROM_JULIAN"</a></p>
</li>
<li>
<p><a href="#CIHGIDCJ">"WB_DAY_NAME"</a></p>
</li>
<li>
<p><a href="#CIHFHDGH">"WB_DAY_OF_MONTH"</a></p>
</li>
<li>
<p><a href="#CIHCBAEE">"WB_DAY_OF_WEEK"</a></p>
</li>
<li>
<p><a href="#CIHBGEFF">"WB_DAY_OF_YEAR"</a></p>
</li>
<li>
<p><a href="#CIHGHGEA">"WB_DAY_SHORT_NAME"</a></p>
</li>
<li>
<p><a href="#CIHHCECD">"WB_DECADE"</a></p>
</li>
<li>
<p><a href="#CIHJEFEI">"WB_HOUR12"</a></p>
</li>
<li>
<p><a href="#CIHGJHDI">"WB_HOUR12MI_SS"</a></p>
</li>
<li>
<p><a href="#CIHCJJBF">"WB_HOUR24"</a></p>
</li>
<li>
<p><a href="#CIHCCFJH">"WB_HOUR24MI_SS"</a></p>
</li>
<li>
<p><a href="#CIHGFGBG">"WB_IS_DATE"</a></p>
</li>
<li>
<p><a href="#CIHDFCFB">"WB_JULIAN_FROM_DATE"</a></p>
</li>
<li>
<p><a href="#CIHBFHFE">"WB_MI_SS"</a></p>
</li>
<li>
<p><a href="#CIHFDAAA">"WB_WEEK_OF_MONTH"</a></p>
</li>
</ul>
<a id="CIHDGIAC"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2639"></a>WB_CAL_MONTH_NAME</h4>
<p class="subhead2"><a id="sthref2640"></a>Syntax</p>
<pre>
WB_CAL_MONTH_NAME(attribute)
</pre>
<p class="subhead2"><a id="sthref2641"></a>Purpose</p>
<p>The function call returns the full-length name of the month for the date specified in <code>attribute</code>.</p>
<p class="subhead2"><a id="sthref2642"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
SELECT WB_CAL_MONTH_NAME(sysdate)
   FROM DUAL;

WB_CAL_MONTH_NAME(SYSDATE)
----------------------------
March

SELECT WB_CAL_MONTH_NAME('26-MAR-2002')
   FROM DUAL;

WB_CAL_MONTH_NAME('26-MAR-2002')
----------------------------------
March
</pre></div>
<!-- class="sect3" -->
<a id="CIHGGGDJ"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2643"></a>WB_CAL_MONTH_OF_YEAR</h4>
<p class="subhead2"><a id="sthref2644"></a>Syntax</p>
<pre>
WB_CAL_MONTH_OF_YEAR(attribute)
</pre>
<p class="subhead2"><a id="sthref2645"></a>Purpose</p>
<p><code>WB_CAL_MONTH_OF_YEAR</code> returns the month (1 to 12) of the year for date in <code>attribute</code>.</p>
<p class="subhead2"><a id="sthref2646"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
SELECT WB_CAL_MONTH_OF_YEAR(sysdate) month
   FROM DUAL;

     MONTH
----------
         3

SELECT WB_CAL_MONTH_OF_YEAR('26-MAR-2002') month
FROM DUAL;

     MONTH
----------
         3
</pre></div>
<!-- class="sect3" -->
<a id="CIHBJIEG"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2647"></a>WB_CAL_MONTH_SHORT_NAME</h4>
<p class="subhead2"><a id="sthref2648"></a>Syntax</p>
<pre>
WB_CAL_MONTH_SHORT_NAME(attribute)
</pre>
<p class="subhead2"><a id="sthref2649"></a>Purpose</p>
<p><code>WB_CAL_MONTH_SHORT_NAME</code> returns the short name of the month (for example 'Jan') for date in <code>attribute</code>.</p>
<p class="subhead2"><a id="sthref2650"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
SELECT WB_CAL_MONTH_SHORT_NAME (sysdate) month
FROM DUAL;

MONTH
---------
Mar

SELECT WB_CAL_MONTH_SHORT_NAME ('26-MAR-2002') month
FROM DUAL;

MONTH
---------
Mar
</pre></div>
<!-- class="sect3" -->
<a id="CIHEIDHD"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2651"></a>WB_CAL_QTR</h4>
<p class="subhead2"><a id="sthref2652"></a>Syntax</p>
<pre>
WB_CAL_QTR(attribute)
</pre>
<p class="subhead2"><a id="sthref2653"></a>Purpose</p>
<p><code>WB_CAL_QTR</code> returns the quarter of the Gregorian calendar year (for example Jan - March = 1) for the date in <code>attribute</code>.</p>
<p class="subhead2"><a id="sthref2654"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
SELECT WB_CAL_QTR (sysdate) quarter
FROM DUAL;

   QUARTER
----------
         1

SELECT WB_CAL_QTR ('26-MAR-2002') quarter
FROM DUAL;

   QUARTER
----------
         1
</pre></div>
<!-- class="sect3" -->
<a id="CIHGGEHJ"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2655"></a>WB_CAL_WEEK_OF_YEAR</h4>
<p class="subhead2"><a id="sthref2656"></a>Syntax</p>
<pre>
WB_CAL_WEEK_OF_YEAR(attribute)
</pre>
<p class="subhead2"><a id="sthref2657"></a>Purpose</p>
<p><code>WB_CAL_WEEK_OF_YEAR</code> returns the week of the year (1 to 53) for the date in <code>attribute</code>.</p>
<p class="subhead2"><a id="sthref2658"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
SELECT WB_CAL_WEEK_OF_YEAR (sysdate) w_of_y
FROM DUAL;

    W_OF_Y
----------
        13

SELECT WB_CAL_WEEK_OF_YEAR ('26-MAR-2002') w_of_y
FROM DUAL;

    W_OF_Y
----------
        13
</pre></div>
<!-- class="sect3" -->
<a id="CIHCFEID"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2659"></a>WB_CAL_YEAR</h4>
<p class="subhead2"><a id="sthref2660"></a>Syntax</p>
<pre>
WB_CAL_YEAR(attribute)
</pre>
<p class="subhead2"><a id="sthref2661"></a>Purpose</p>
<p><code>WB_CAL_YEAR</code> returns the numeric year component for the date in <code>attribute</code>.</p>
<p class="subhead2"><a id="sthref2662"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
SELECT WB_CAL_YEAR (sysdate) year
FROM DUAL;

      YEAR
----------
      2002

SELECT WB_CAL_YEAR ('26-MAR-2002') w_of_y
FROM DUAL;

      YEAR
----------
      2002
</pre></div>
<!-- class="sect3" -->
<a id="CIHJJBBH"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2663"></a>WB_CAL_YEAR_NAME</h4>
<p class="subhead2"><a id="sthref2664"></a>Syntax</p>
<pre>
WH_CAL_YEAR_NAME(attribute)
</pre>
<p class="subhead2"><a id="sthref2665"></a>Purpose</p>
<p><code>WB_CAL_YEAR_NAME</code> returns the spelled out name of the year for the date in <code>attribute</code>.</p>
<p class="subhead2"><a id="sthref2666"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
select WB_CAL_YEAR_NAME (sysdate) name
from dual;

NAME
----------------------------------------------
Two Thousand Two

select WB_CAL_YEAR_NAME ('26-MAR-2001') name
from dual;

NAME
----------------------------------------------
Two Thousand One
</pre></div>
<!-- class="sect3" -->
<a id="CIHIHDDE"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2667"></a>WB_DATE_FROM_JULIAN</h4>
<p class="subhead2"><a id="sthref2668"></a>Syntax</p>
<pre>
WB_DATE_FROM_JULIAN(attribute)
</pre>
<p class="subhead2"><a id="sthref2669"></a>Purpose</p>
<p><code>WB_DATE_FROM_JULIAN</code> converts Julian date <code>attribute</code> to a regular date.</p>
<p class="subhead2"><a id="sthref2670"></a>Example</p>
<p>The following example shows the return value on a specified Julian date:</p>
<pre>
select to_char(WB_DATE_FROM_JULIAN(3217345),'dd-mon-yyyy') JDate 
from dual;

JDATE
-----------
08-sep-4096
</pre></div>
<!-- class="sect3" -->
<a id="CIHGIDCJ"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2671"></a>WB_DAY_NAME</h4>
<p class="subhead2"><a id="sthref2672"></a>Syntax</p>
<pre>
WB_DAY_NAME(attribute)
</pre>
<p class="subhead2"><a id="sthref2673"></a>Purpose</p>
<p><code>WB_DAY_NAME</code> returns the full name of the day for the date in <code>attribute</code>.</p>
<p class="subhead2"><a id="sthref2674"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
select WB_DAY_NAME (sysdate) name
from dual;

NAME
--------------------------------------------
Thursday

select WB_DAY_NAME ('26-MAR-2002') name
from dual;

NAME
--------------------------------------------
Tuesday
</pre></div>
<!-- class="sect3" -->
<a id="CIHFHDGH"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2675"></a>WB_DAY_OF_MONTH</h4>
<p class="subhead2"><a id="sthref2676"></a>Syntax</p>
<pre>
WB_DAY_OF_MONTH(attribute)
</pre>
<p class="subhead2"><a id="sthref2677"></a>Purpose</p>
<p><code>WB_DAY_OF_MONTH</code> returns the day number within the month for the date in <code>attribute</code>.</p>
<p class="subhead2"><a id="sthref2678"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
select WB_DAY_OF_MONTH (sysdate) num
from dual;

       NUM
----------
        28

select WB_DAY_OF_MONTH ('26-MAR-2002') num
from dual

       NUM
----------
        26
</pre></div>
<!-- class="sect3" -->
<a id="CIHCBAEE"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2679"></a>WB_DAY_OF_WEEK</h4>
<p class="subhead2"><a id="sthref2680"></a>Syntax</p>
<pre>
WB_DAY_OF_WEEK(attribute)
</pre>
<p class="subhead2"><a id="sthref2681"></a>Purpose</p>
<p><code>WB_DAY_OF_WEEK</code> returns the day number within the week for date <code>attribute</code> based on the database calendar.</p>
<p class="subhead2"><a id="sthref2682"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
select WB_DAY_OF_WEEK (sysdate) num
from dual;

       NUM
----------
         5

select WB_DAY_OF_WEEK ('26-MAR-2002') num
from dual;


       NUM
----------
         3
</pre></div>
<!-- class="sect3" -->
<a id="CIHBGEFF"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2683"></a>WB_DAY_OF_YEAR</h4>
<p class="subhead2"><a id="sthref2684"></a>Syntax</p>
<pre>
WB_DAY_OF_YEAR(attribute)
</pre>
<p class="subhead2"><a id="sthref2685"></a>Purpose</p>
<p><code>WB_DAY_OF_YEAR</code> returns the day number within the year for the date <code>attribute</code>.</p>
<p class="subhead2"><a id="sthref2686"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
select WB_DAY_OF_YEAR (sysdate) num
from dual;

       NUM
----------
        87

select WB_DAY_OF_YEAR ('26-MAR-2002') num
from dual;

       NUM
----------
        85
</pre></div>
<!-- class="sect3" -->
<a id="CIHGHGEA"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2687"></a>WB_DAY_SHORT_NAME</h4>
<p class="subhead2"><a id="sthref2688"></a>Syntax</p>
<pre>
WB_DAY_SHORT_NAME(attribute)
</pre>
<p class="subhead2"><a id="sthref2689"></a>Purpose</p>
<p><code>WB_DAY_SHORT_NAME</code> returns the three letter abbreviation or name for the date <code>attribute</code>.</p>
<p class="subhead2"><a id="sthref2690"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
select WB_DAY_SHORT_NAME  (sysdate) abbr
from dual;

ABBR
-------------------------------------
Thu

select WB_DAY_SHORT_NAME  ('26-MAR-2002') abbr
from dual;

NUM
-------------------------------------
Tue
</pre></div>
<!-- class="sect3" -->
<a id="CIHHCECD"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2691"></a>WB_DECADE</h4>
<p class="subhead2"><a id="sthref2692"></a>Syntax</p>
<pre>
WB_DECADE(attribute)
</pre>
<p class="subhead2"><a id="sthref2693"></a>Purpose</p>
<p><code>WB_DECADE</code> returns the decade number within the century for the date <code>attribute</code>.</p>
<p class="subhead2"><a id="sthref2694"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
select WB_DECADE  (sysdate) dcd
from dual;

       DCD
----------
         2

select WB_DECADE  ('26-MAR-2002') DCD
from dual;

       DCD
----------
         2
</pre></div>
<!-- class="sect3" -->
<a id="CIHJEFEI"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2695"></a>WB_HOUR12</h4>
<p class="subhead2"><a id="sthref2696"></a>Syntax</p>
<pre>
WB_HOUR12(attribute)
</pre>
<p class="subhead2"><a id="sthref2697"></a>Purpose</p>
<p><code>WB_HOUR12</code> returns the hour (in a 12-hour setting) component of the date corresponding to <code>attribute</code>.</p>
<p class="subhead1"><a id="sthref2698"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
select WB_HOUR12 (sysdate) h12
from dual;

       H12
----------
         9

select WB_HOUR12 ('26-MAR-2002') h12
from dual;

       H12
----------
        12
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
For a date not including the timestamp (in the second example), Oracle uses the 12:00 (midnight) timestamp and therefore returns 12 in this case.</div>
</div>
<!-- class="sect3" -->
<a id="CIHGJHDI"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2699"></a>WB_HOUR12MI_SS</h4>
<p class="subhead2"><a id="sthref2700"></a>Syntax</p>
<pre>
WB_HOUR12MI_SS(attribute)
</pre>
<p class="subhead2"><a id="sthref2701"></a>Purpose</p>
<p><code>WB_HOUR12MI_SS</code> returns the timestamp in <code>attribute</code> formatted to HH12:MI:SS.</p>
<p class="subhead2"><a id="sthref2702"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
select WB_HOUR12MI_SS (sysdate) h12miss
from dual;

H12MISS
-------------------------------------
09:08:52

select WB_HOUR12MI_SS ('26-MAR-2002') h12miss
from dual;

H12MISS
-------------------------------------
12:00:00
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
For a date not including the timestamp (in the second example), Oracle uses the 12:00 (midnight) timestamp and therefore returns 12 in this case.</div>
</div>
<!-- class="sect3" -->
<a id="CIHCJJBF"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2703"></a>WB_HOUR24</h4>
<p class="subhead2"><a id="sthref2704"></a>Syntax</p>
<pre>
WB_HOUR24(attribute)
</pre>
<p class="subhead2"><a id="sthref2705"></a>Purpose</p>
<p><code>WB_HOUR24</code> returns the hour (in a 24-hour setting) component of date corresponding to <code>attribute</code>.</p>
<p class="subhead2"><a id="sthref2706"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
select WB_HOUR24 (sysdate) h24
from dual;

       H24
----------
         9

select WB_HOUR24 ('26-MAR-2002') h24
from dual;

       H24
----------
         0
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
For a date not including the timestamp (in the second example), Oracle uses the 00:00:00 timestamp and therefore returns the timestamp in this case.</div>
</div>
<!-- class="sect3" -->
<a id="CIHCCFJH"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2707"></a>WB_HOUR24MI_SS</h4>
<p class="subhead2"><a id="sthref2708"></a>Syntax</p>
<pre>
WB_HOUR24MI_SS(attribute)
</pre>
<p class="subhead2"><a id="sthref2709"></a>Purpose</p>
<p><code>WB_HOUR24MI_SS</code> returns the timestamp in <code>attribute</code> formatted to HH24:MI:SS.</p>
<p class="subhead2"><a id="sthref2710"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
select WB_HOUR24MI_SS (sysdate) h24miss
from dual;

H24MISS
------------------------------------
09:11:42

select WB_HOUR24MI_SS ('26-MAR-2002') h24miss
from dual;

H24MISS
------------------------------------
00:00:00
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
For a date not including the timestamp (in the second example), Oracle uses the 00:00:00 timestamp and therefore returns the timestamp in this case.</div>
</div>
<!-- class="sect3" -->
<a id="CIHGFGBG"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2711"></a>WB_IS_DATE</h4>
<p class="subhead2"><a id="sthref2712"></a>Syntax</p>
<pre>
WB_IS_DATE(attribute, fmt)
</pre>
<p class="subhead2"><a id="sthref2713"></a>Purpose</p>
<p>To check whether <code>attribute</code> contains a valid date. The function returns a Boolean value which is set to true if <code>attribute</code> contains a valid date. <code>Fmt</code> is an optional date format. If <code>fmt</code> is omitted, then the date format of your database session is used.</p>
<p>You can use this function when you validate your data before loading it into a table. This way the value can be transformed before it reaches the table and causes an error.</p>
<p class="subhead2"><a id="sthref2714"></a>Example</p>
<p><code>WB_IS_DATE</code> returns true in PL/SQL if <code>attribute</code> contains a valid date.</p>
</div>
<!-- class="sect3" -->
<a id="CIHDFCFB"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2715"></a>WB_JULIAN_FROM_DATE</h4>
<p class="subhead2"><a id="sthref2716"></a>Syntax</p>
<pre>
WB_JULIAN_FROM_DATE(attribute)
</pre>
<p class="subhead2"><a id="sthref2717"></a>Purpose</p>
<p><code>WB_JULIAN_FROM_DATE</code> returns the Julian date of date corresponding to <code>attribute</code>.</p>
<p class="subhead2"><a id="sthref2718"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
select WB_JULIAN_FROM_DATE (sysdate) jdate
from dual;

     JDATE
----------
   2452362

select WB_JULIAN_FROM_DATE ('26-MAR-2002') jdate
from dual;

     JDATE
----------
   2452360
</pre></div>
<!-- class="sect3" -->
<a id="CIHBFHFE"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2719"></a>WB_MI_SS</h4>
<p class="subhead2"><a id="sthref2720"></a>Syntax</p>
<pre>
WB_MI_SS(attribute)
</pre>
<p class="subhead2"><a id="sthref2721"></a>Purpose</p>
<p><code>WB_MI_SS</code> returns the minutes and seconds of the time component in the date corresponding to <code>attribute</code>.</p>
<p class="subhead2"><a id="sthref2722"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
select WB_MI_SS (sysdate) mi_ss
from dual;

MI_SS
-------------------------------------------
33:23

select WB_MI_SS ('26-MAR-2002') mi_ss
from dual;

MI_SS
-------------------------------------------
00:00
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
For a date not including the timestamp (in the second example), Oracle uses the 00:00:00 timestamp and therefore returns the timestamp in this case.</div>
</div>
<!-- class="sect3" -->
<a id="CIHFDAAA"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2723"></a>WB_WEEK_OF_MONTH</h4>
<p class="subhead2"><a id="sthref2724"></a>Syntax</p>
<pre>
WB_WEEK_OF_MONTH(attribute)
</pre>
<p class="subhead2"><a id="sthref2725"></a>Purpose</p>
<p><code>WB_WEEK_OF_MONTH</code> returns the week number within the calendar month for the date corresponding to <code>attribute</code>.</p>
<p class="subhead2"><a id="sthref2726"></a>Example</p>
<p>The following example shows the return value on the <code>sysdate</code> and on a specified date string:</p>
<pre>
select WB_WEEK_OF_MONTH (sysdate) w_of_m
from dual;

    W_OF_M
----------
         4

select WB_WEEK_OF_MONTH ('26-MAR-2002') w_of_m
from dual;

    W_OF_M
----------
         4
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i138283"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref2727"></a><a id="sthref2728"></a><a id="sthref2729"></a><a id="sthref2730"></a>Number Transformations</h3>
<p>Number transformations provide Oracle Warehouse Builder users with functionality to perform transformations on numeric values. These include Database SQL functions that are implemented by Oracle Warehouse Builder and custom functions defined by Oracle Warehouse Builder. The custom functions are prefixed with <code>WB_</code>.</p>
<p><a href="#CHDBBDFB">Table 28-2</a> lists the number transformations that are based on Database SQL numeric functions. The transformations are listed in a columnar table that reads down the columns from left to right to conserve space.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref2731"></a><a id="CHDBBDFB"></a>Table 28-2 List of Number Transformations Based on Database SQL Functions</p>
<table class="cellalignment2975" title="List of Number Transformations Based on Database SQL Functions" summary="This table lists the SQL functions that are implemented as number transformations." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t12">Number Transformation Name</th>
<th class="cellalignment2976" id="r1c2-t12">Number Transformation Name (Contd.)</th>
<th class="cellalignment2976" id="r1c3-t12">Number Transformation Name (Contd.)</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t12" headers="r1c1-t12">
<ul>
<li>
<p>ABS</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r2c1-t12 r1c2-t12">
<ul>
<li>
<p>ACOS</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r2c1-t12 r1c3-t12">
<ul>
<li>
<p>ASIN</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t12" headers="r1c1-t12">
<ul>
<li>
<p>ATAN</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r3c1-t12 r1c2-t12">
<ul>
<li>
<p>ATAN2</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r3c1-t12 r1c3-t12">
<ul>
<li>
<p>BITAND</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t12" headers="r1c1-t12">
<ul>
<li>
<p>CEIL</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r4c1-t12 r1c2-t12">
<ul>
<li>
<p>COS</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r4c1-t12 r1c3-t12">
<ul>
<li>
<p>COSH</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t12" headers="r1c1-t12">
<ul>
<li>
<p>EXP</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r5c1-t12 r1c2-t12">
<ul>
<li>
<p>FLOOR</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r5c1-t12 r1c3-t12">
<ul>
<li>
<p>LN</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r6c1-t12" headers="r1c1-t12">
<ul>
<li>
<p>LOG</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r6c1-t12 r1c2-t12">
<ul>
<li>
<p>MOD</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r6c1-t12 r1c3-t12">
<ul>
<li>
<p>NANVL</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r7c1-t12" headers="r1c1-t12">
<ul>
<li>
<p>POWER</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r7c1-t12 r1c2-t12">
<ul>
<li>
<p>REMAINDER</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r7c1-t12 r1c3-t12">
<ul>
<li>
<p>ROUND (number)</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r8c1-t12" headers="r1c1-t12">
<ul>
<li>
<p>SIGN</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r8c1-t12 r1c2-t12">
<ul>
<li>
<p>SIN</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r8c1-t12 r1c3-t12">
<ul>
<li>
<p>SINH</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r9c1-t12" headers="r1c1-t12">
<ul>
<li>
<p>SQRT</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r9c1-t12 r1c2-t12">
<ul>
<li>
<p>TAN</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r9c1-t12 r1c3-t12">
<ul>
<li>
<p>TANH</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r10c1-t12" headers="r1c1-t12">
<ul>
<li>
<p>TRUNC (number)</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r10c1-t12 r1c2-t12">
<ul>
<li>
<p>WIDTH_BUCKET</p>
</li>
</ul>
</td>
<td class="cellalignment2977" headers="r10c1-t12 r1c3-t12">&nbsp;</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>For descriptions and examples of these transformations, refer to the section titled "Numeric Functions" in the <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>The custom numeric transformations are:</p>
<ul>
<li>
<p><a href="#CIHIEJJB">"WB_LOOKUP_NUM (on a number)"</a></p>
</li>
<li>
<p><a href="#CIHDBGGF">"WB_LOOKUP_NUM (on a varchar2)"</a></p>
</li>
<li>
<p><a href="#CIHBFGHF">"WB_IS_NUMBER"</a></p>
</li>
</ul>
<a id="CIHIEJJB"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2732"></a>WB_LOOKUP_NUM (on a number)</h4>
<p class="subhead2"><a id="sthref2733"></a>Syntax</p>
<pre>
 WB_LOOKUP_NUM (table_name
, column_name
, key_column_name
, key_value
)
</pre>
<p>where <code>table_name</code> is the name of the table to perform the lookup on; <code>column_name</code> is the name of the <code>NUMBER</code> column that is returned, for instance, the result of the lookup; <code>key_column_name</code> is the name of the <code>NUMBER</code> column used as the key to match on in the lookup table; <code>key_value</code> is the value of the key column, for example, the value mapped into the <code>key_column_name</code> with which the match is done.</p>
<p class="subhead2"><a id="sthref2734"></a>Purpose</p>
<p>To perform a key look up that returns a <code>NUMBER</code> value from a database table using a <code>NUMBER</code> column as the matching key.</p>
<p class="subhead2"><a id="sthref2735"></a>Example</p>
<p>Consider the following table as a lookup table <code>LKP1</code>:</p>
<pre>
KEYCOLUMN  TYPE_NO  TYPE
10         100123   Car
20         100124   Bike
</pre>
<p>Using this package with the following call:</p>
<pre>
WB_LOOKUP_CHAR('LKP1'
, 'TYPE_NO'
, 'KEYCOLUMN'
, 20
)
</pre>
<p>returns the value of 100124 as output of this transformation. This output is then processed in the mapping as the result of an inline function call.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
This function is a row-based key lookup. Set-based lookups are supported when you use the Lookup operator.</div>
</div>
<!-- class="sect3" -->
<a id="CIHDBGGF"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2736"></a>WB_LOOKUP_NUM (on a varchar2)</h4>
<p class="subhead2"><a id="sthref2737"></a>Syntax:</p>
<pre>
WB_LOOKUP_CHAR(table_name
, column_name
, key_column_name
, key_value
)
</pre>
<p>where <code>table_name</code> is the name of the table to perform the lookup on; <code>column_name</code> is the name of the <code>NUMBER</code> column that is returned (such as the result of the lookup); <code>key_column_name</code> is the name of the <code>NUMBER</code> column used as the key to match on in the lookup table; <code>key_value</code> is the value of the key column, such as the value mapped into the <code>key_column_name</code> with which the match is done.</p>
<p class="subhead2"><a id="sthref2738"></a>Purpose:</p>
<p>To perform a key lookup which returns a <code>NUMBER</code> value from a database table using a <code>VARCHAR2</code> column as the matching key.</p>
<p class="subhead2"><a id="sthref2739"></a>Example</p>
<p>Consider the following table as a lookup table <code>LKP1</code>:</p>
<pre>
KEYCOLUMN  TYPE_NO  TYPE
ACV        100123   Car
ACP        100124   Bike
</pre>
<p>Using this package with the following call:</p>
<pre>
WB_LOOKUP_CHAR ('LKP1'
, 'TYPE'
, 'KEYCOLUMN'
, 'ACP'
)
</pre>
<p>returns the value of <code>100124</code> as output of this transformation. This output is then processed in the mapping as the result of an inline function call.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This function is a row-based key lookup. Set-based lookups are supported when you use the Lookup operator described in <a href="data_flow_opers.htm#i1175753">"Lookup Operator"</a>.</div>
</div>
<!-- class="sect3" -->
<a id="CIHBFGHF"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2740"></a>WB_IS_NUMBER</h4>
<p class="subhead2"><a id="sthref2741"></a>Syntax</p>
<pre>
 WB_IS_NUMBER(attibute, fmt)
</pre>
<p class="subhead2"><a id="sthref2742"></a>Purpose</p>
<p>To check whether <code>attribute</code> contains a valid number. The function returns a Boolean value, which is set to true if <code>attribute</code> contains a valid number. <code>Fmt</code> is an optional number format. If <code>fmt</code> is omitted, then the number format of your session is used.</p>
<p>You can use this function when you validate the data before loading it into a table. This way the value can be transformed before it reaches the table and causes an error.</p>
<p class="subhead2"><a id="sthref2743"></a>Example</p>
<p><code>WB_IS_NUMBER</code> returns <code>true</code> in PL/SQL if <code>attribute</code> contains a valid number.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHCCJAG"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref2744"></a><a id="sthref2745"></a>OLAP Transformations</h3>
<p>OLAP transformations enable Oracle Warehouse Builder users to load data stored in relational dimensions and cubes into an analytic workspace.</p>
<p>The OLAP transformations provided by Oracle Warehouse Builder are:</p>
<ul>
<li>
<p><a href="#BABFIFBG">"WB_OLAP_AW_PRECOMPUTE"</a></p>
</li>
<li>
<p><a href="#CIHEFFGA">"WB_OLAP_LOAD_CUBE"</a></p>
</li>
<li>
<p><a href="#CIHDDDHC">"WB_OLAP_LOAD_DIMENSION"</a></p>
</li>
<li>
<p><a href="#CIHFJEJA">"WB_OLAP_LOAD_DIMENSION_GENUK"</a></p>
</li>
</ul>
<p>The <code>WB_OLAP_LOAD_CUBE</code>, <code>WB_OLAP_LOAD_DIMENSION</code>, and <code>WB_OLAP_LOAD_DIMENSION_GENUK</code> transformations are used for cube cloning in Oracle Warehouse Builder. Use these OLAP transformations only if your database version is Oracle Database9<span class="italic">i</span> or Oracle Database 10<span class="italic">g</span> Release 1. Starting with Oracle 10<span class="italic">g</span> Release 2, you can directly deploy dimensions and cubes into an analytic workspace.</p>
<p>The <code>WB_OLAP_AW_PRECOMPUTE</code> only works with the Oracle Warehouse Builder 10<span class="italic">g</span> Release 2.</p>
<p>The examples used to explain these OLAP transformations are based on the scenario depicted in <a href="#BABGJBGJ">Figure 28-1</a>.</p>
<div class="figure">
<p class="titleinfigure"><a id="BABGJBGJ"></a>Figure 28-1 Example of OLAP Transformations</p>
<img width="311" height="255" src="img/olap_transf_ex.gif" alt="Description of Figure 28-1 follows" /><br />
<a id="sthref2746" href="img_text/olap_transf_ex.htm">Description of "Figure 28-1 Example of OLAP Transformations"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The relational dimension <code>TIME_DIM</code> and the relational cube <code>SALES_CUBE</code> are stored in the schema <code>WH_TGT</code>. The analytic workspace <code>AW_WH</code>, into which the dimension and cube are loaded, is also created in the <code>WH_TGT</code> schema.</p>
<a id="BABFIFBG"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">WB_OLAP_AW_PRECOMPUTE<a id="sthref2747"></a></h4>
<p class="subhead2"><a id="sthref2748"></a>Syntax</p>
<pre>
WB_OLAP_AW_PRECOMPUTE(p_aw_name, p_cube_name, p_measure_name, p_allow_parallel_ solve, p_max_job_queues_allocated)
</pre>
<p>where <code>p_aw_name</code> is the name of the AW where cube is deployed, <code>p_cube_name</code> is the name of the cube to solve, <code>p_measure_name</code> is the optional name of a specific measure to solve (if no measure is specified, then all measures are solved), <code>p_allow_parallel_solve</code> is the boolean to indicate parallelization of solve based on partitioning (performance related parameter), <code>p_max_job_queues_allocated</code> is the number of DBMS jobs to run in parallel (default value is 0). If 5 is defined and there are 20 partitions, then a pool of 5 DBMS jobs are used to perform the data load.There is a subtle different between parallel and non-parallel solving. With non-parallel solve, the solve happens synchronously, so when the API call is completed the solve is complete. Parallel solve runs asynchronously, the API call returns with a job id of the job started. The job controls parallel solving using the max job queues parameter to control its processing. The user may then use the job id to query the all_scheduler_* views to check on the status of the activity.</p>
<p class="subhead2"><a id="sthref2749"></a>Purpose</p>
<p>WB_OLAP_AW_PRECOMPUTE is used for solving a non-compressed cube (compressed cubes are auto-solved). The load and solve steps can be done independently. By default, the cube map loads data, then solves (precomputes) the cube. You can load data using the map, then perform the solve at a different point of time (since the solve/build time is the costliest operation).</p>
<p class="subhead2"><a id="sthref2750"></a>Example</p>
<p>The following example loads data from the relational cubes <code>MART</code> and <code>SALES_CUBE</code> into a cube called <code>SALES</code> and performs a simple solve execution working serially. This example has parameters for parallel solve and max number of job queues. If parallel solve is performed, then an ASYNCHRONOUS solve job is started and the master job ID is returned through the return function.</p>
<pre>
declare
  rslt varchar2(4000);
begin
&hellip;
  rslt :=wb_olap_aw_precompute('MART','SALES_CUBE','SALES');
&hellip;
end;
/
</pre></div>
<!-- class="sect3" -->
<a id="CIHEFFGA"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2751"></a>WB_OLAP_LOAD_CUBE</h4>
<p class="subhead2"><a id="sthref2752"></a>Syntax</p>
<pre>
wb_olap_load_cube::=WB_OLAP_LOAD_CUBE(olap_aw_owner, olap_aw_name, olap_cube_owner, olap_cube_name, olap_tgt_cube_name)
</pre>
<p>where <code>olap_aw_owner</code> is the name of the database schema that owns the analytic workspace; <code>olap_aw_name</code> is the name of the analytic workspace that stores the cube data; <code>olap_cube_owner</code> is the name of the database schema that owns the related relational cube; <code>olap_cube_name</code> is the name of the relational cube; <code>olap_tgt_cube_name</code> is the name of the cube in the analytic workspace.</p>
<p class="subhead2"><a id="sthref2753"></a>Purpose</p>
<p><code>WB_OLAP_LOAD_CUBE</code> loads data from the relational cube into the analytic workspace. It enables further analysis of the cube data. This is for loading data in an AW cube from a relational cube which it was cloned from. This is a wrapper around some procedures in the DBMS_AWM package for loading a cube.</p>
<p class="subhead2"><a id="sthref2754"></a>Example</p>
<p>The following example loads data from the relational cube <code>SALES_CUBE</code> into a cube called <code>AW_SALES</code> in the <code>AW_WH</code> analytic workspace:</p>
<pre>
WB_OLAP_LOAD_CUBE('WH_TGT', 'AW_WH', 'WH_TGT', 'SALES_CUBE', 'AW_SALES')
</pre></div>
<!-- class="sect3" -->
<a id="CIHDDDHC"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2755"></a>WB_OLAP_LOAD_DIMENSION</h4>
<p class="subhead2"><a id="sthref2756"></a>Syntax</p>
<pre>
wb_olap_load_dimension::=WB_OLAP_LOAD_DIMENSION(olap_aw_owner, olap_aw_name, olap_dimension_owner, olap_dimension_name, olap_tgt_dimension_name)
</pre>
<p>where <code>olap_aw_owner</code> is the name of the database schema that owns the analytic workspace; <code>olap_aw_name</code> is the name of the analytic workspace that stores the dimension data; <code>olap_dimension_owner</code> is the name of the database schema in which the related relational dimension is stored; <code>olap_dimension_name</code> is the name of the relational dimension; <code>olap_tgt_dimension_name</code> is the name of the dimension in the analytic workspace.</p>
<p class="subhead2"><a id="sthref2757"></a>Purpose</p>
<p><code>WB_OLAP_LOAD_DIMENSION</code> loads data from the relational dimension into the analytic workspace. It enables further analysis of the dimension data. This is for loading data in an AW dimension from a relational dimension which it was cloned from. This is a wrapper around some procedures in the DBMS_AWM package for loading a dimension.</p>
<p class="subhead2"><a id="sthref2758"></a>Example</p>
<p>The following example loads the data from the relational dimension <code>TIME_DIM</code> into a dimension called <code>AW_TIME</code> in the analytic workspace <code>AW_WH</code>:</p>
<pre>
WB_OLAP_LOAD_DIMENSION('WH_TGT', 'AW_WH', 'WH_TGT', 'TIME_DIM', 'AW_TIME')
</pre></div>
<!-- class="sect3" -->
<a id="CIHFJEJA"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2759"></a>WB_OLAP_LOAD_DIMENSION_GENUK</h4>
<p class="subhead2"><a id="sthref2760"></a>Syntax</p>
<pre>
wb_olap_load_dimension_genuk::=WB_OLAP_LOAD_DIMENSION_GENUK(olap_aw_owner, olap_aw_name, olap_dimension_owner, olap_dimension_name, olap_tgt_dimension_name)
</pre>
<p>where <code>olap_aw_owner</code> is the name of the database schema that owns the analytic workspace; <code>olap_aw_name</code> is the name of the analytic workspace that stores the dimension data; <code>olap_dimension_owner</code> is the name of the database schema in which the related relational dimension is stored; <code>olap_dimension_name</code> is the name of the relational dimension; <code>olap_tgt_dimension_name</code> is the name of the dimension in the analytic workspace.</p>
<p class="subhead2"><a id="sthref2761"></a>Purpose</p>
<p><code>WB_OLAP_LOAD_DIMENSION_GENUK</code> loads data from the relational dimension into the analytic workspace. Unique dimension identifiers are generated across all levels. This is for loading data in an AW dimension from a relational dimension which it was cloned from. This is a wrapper around some procedures in the DBMS_AWM package for loading a dimension.</p>
<p>If a cube has been cloned and if you select YES for the Generate Surrogate Keys for Dimensions option, then when you want to reload the dimensions, you should use the <code>WB_OLAP_LOAD_DIMENSION_GENUK</code> procedure. This procedure generates surrogate identifiers for all levels in the AW, because the AW requires all level identifiers to be unique across all levels of a dimension.</p>
<p class="subhead2"><a id="sthref2762"></a>Example</p>
<p>Consider an example in which the dimension <code>TIME_DIM</code> has been deployed to the OLAP server by cloning the cube. The parameter generate surrogate keys for Dimension was set to true. To now reload data from the relational dimension <code>TIME_DIM</code> into the dimension <code>AW_TIME</code> in the analytic workspace <code>AW_WH</code>, use the following syntax.</p>
<pre>
WB_OLAP_LOAD_CUBE('WH_TGT', 'AW_WH', 'WH_TGT', 'TIME_DIM', 'AW_TIME')
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i138758"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref2763"></a><a id="sthref2764"></a>Other Transformations</h3>
<p>Other transformations included with Oracle Warehouse Builder enable you to perform various functions which are not restricted to certain data types. This section describes those types.</p>
<p>Other transformations provided by Oracle Warehouse Builder are:</p>
<ul>
<li>
<p>DEPTH</p>
</li>
<li>
<p>DUMP</p>
</li>
<li>
<p>EMPTY_BLOB</p>
</li>
<li>
<p>EMPTY_CLOB</p>
</li>
<li>
<p>NLS_CHARSET_DECL_LEN</p>
</li>
<li>
<p>NLS_CHARSET_ID</p>
</li>
<li>
<p>NLS_CHARSET_NAME</p>
</li>
<li>
<p>NULLIF</p>
</li>
<li>
<p>NVL</p>
</li>
<li>
<p>NVL2</p>
</li>
<li>
<p>ORA_HASH</p>
</li>
<li>
<p>PATH</p>
</li>
<li>
<p>SYS_CONTEXT</p>
</li>
<li>
<p>SYS_GUID</p>
</li>
<li>
<p>SYS_TYPEID</p>
</li>
<li>
<p>UID</p>
</li>
<li>
<p>USER</p>
</li>
<li>
<p>USERENV</p>
</li>
<li>
<p>VSIZE</p>
</li>
</ul>
<p>For descriptions and examples of these transformations, see <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABCGECE"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Spatial Transformations<a id="sthref2765"></a></h3>
<p>Spatial Transformation is an integrated set of functions and procedures that enables spatial data to be stored, accessed, and analyzed quickly and efficiently in an Oracle Database.</p>
<p>Spatial transformations included with Oracle Warehouse Builder are:</p>
<ul>
<li>
<p>SDO_AGGR_CENTROID</p>
</li>
<li>
<p>SDO_AGGR_CONVEXHULL</p>
</li>
<li>
<p>SDO_AGGR_MBR</p>
</li>
<li>
<p>SDO_AGGR_UNION</p>
</li>
</ul>
<p>For descriptions and examples of these transformations, refer to the <a class="olink SPATL" href="../../appdev.112/e11830/toc.htm"><span class="italic">Oracle Spatial Developer's Guide</span></a>.</p>
</div>
<!-- class="sect2" -->
<a id="CACCAGJB"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref2766"></a><a id="sthref2767"></a>Streams Transformations</h3>
<p>The Streams transformations category contains one transformation called REPLICATE. The following section describes this transformation.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2768"></a>
<h4 class="sect3"><a id="sthref2769"></a>REPLICATE</h4>
<p class="subhead2"><a id="sthref2770"></a>Syntax</p>
<pre>
REPLICATE(lcr, conflict_resolution)
</pre>
<p>where <code>lcr</code> stands for Logical Change Record and encapsulates the DML change. Its data type is SYS.LCR$_ROW_RECORD. <code>conflict_resolution</code> is a Boolean variable. If its value is TRUE, then any conflict resolution defined for the table is used to resolve conflicts resulting from the execution of the LCR. For more information about conflict resolution, see <a class="olink STREP" href="../../server.112/e10705/toc.htm"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a>.</p>
<p class="subhead2"><a id="sthref2771"></a>Purpose</p>
<p>REPLICATE is used to replicate a DML change (INSERT, UPDATE, or DELETE) that has occurred on a table in the source system on an identical table in the target system. The table in the target system should be identical to the table in the source system in the following respects:.</p>
<ul>
<li>
<p>The name of the schema that contains the target table should be the same as the name of the schema that contains the source table.</p>
</li>
<li>
<p>The name of the target table should the same as the name of the source table.</p>
</li>
<li>
<p>The structure of the target table should be the same as that of the source table. The structure includes the number, name, and data type of the columns in the table.</p>
</li>
</ul>
<p class="subhead2"><a id="sthref2772"></a>Example</p>
<p>Consider a table T1(c1 varchar2(10), c2 number primary key) in schema S on the source system and an identical table in the target system. Consider the following insert operation on the table T1 on the source system</p>
<pre>
insert into T1 values ('abcde', 10)
</pre>
<p>An LCR representing the change following the above insert of a row on the table T1 in the source system has the following details.</p>
<pre>
LCR.GET_OBJECT_OWNER will be 'S'
LCR.GET_OBJECT_NAME will be 'T1'
LCR.GET_COMMAND_TYPE will be 'INSERT'
LCR.GET_VALUE('c1', 'new') has the value for the column 'c1' - that is 'abcde'
LCR.GET_VALUE('c2', 'new') has the value for the column 'c2' - that is 10
</pre>
<p>Such an LCR is created and enqueued by a Streams Capture Process on the source system that captures changes on table S.T1</p>
<p><code>REPLICATE(lcr, true)</code> - results in a row ('abcde', 10) being inserted into the table <code>T1</code> on the target system.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This approach does not provides lineage information. If lineage is important, then do not use this function. Use the more direct approach of using an LCR Cast operator bound to the source table and a Table operator bound to the target table and connecting the attributes of these two operators with the same name ('Match by name'). Further information about LCR (Logical Change Record) is available in Oracle Database 10<span class="italic">g</span> Documentation.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i138579"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref2773"></a><a id="sthref2774"></a>XML Transformations</h3>
<p>XML transformations provide Oracle Warehouse Builder users with functionality to perform transformations on XML objects. These transformations enable Oracle Warehouse Builder users to load and transform XML documents and Oracle AQs.</p>
<p>To enable loading of XML sources, Oracle Warehouse Builder provides access to the database XML functionality by implementing database XML functions and by defining custom functions.</p>
<p>Following are the XML transformations that are implemented based on database XML functions:</p>
<ul>
<li>
<p>EXISTSNODE</p>
</li>
<li>
<p>EXTRACT</p>
</li>
<li>
<p>EXTRACTVALUE</p>
</li>
<li>
<p>SYS_XMLAGG</p>
</li>
<li>
<p>SYS_XMLGEN</p>
</li>
<li>
<p>XMLCONCAT</p>
</li>
<li>
<p>XMLSEQUENCE</p>
</li>
<li>
<p>XMLTRANSFORM</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for descriptions for these transformations</p>
</li>
<li>
<p><a class="olink SPATL" href="../../appdev.112/e11830/toc.htm"><span class="italic">Oracle Spatial Developer's Guide</span></a> for examples on using these transformations</p>
</li>
</ul>
</div>
<p>The custom XML transformations are:</p>
<ul>
<li>
<p><a href="#CIHBIDBB">"WB_XML_LOAD"</a></p>
</li>
<li>
<p><a href="#CIHJJEIF">"WB_XML_LOAD_F"</a></p>
</li>
</ul>
<a id="CIHBIDBB"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2775"></a>WB_XML_LOAD</h4>
<p class="subhead2"><a id="sthref2776"></a>Syntax:</p>
<pre>
WB_XML_LOAD(control_file)
</pre>
<p class="subhead2"><a id="sthref2777"></a>Purpose</p>
<p>This program unit extracts and loads data from XML documents into database targets. The <code>control_file</code>, an XML document, specifies the source of the XML documents, the targets, and any run time controls. After the transformation has been defined, a mapping in Oracle Warehouse Builder calls the transformation as a pre-map or post-map trigger.</p>
<p class="subhead2"><a id="sthref2778"></a>Example</p>
<p>The following example illustrates a script to implement an Oracle Warehouse Builder transformation that extracts data from an XML document stored in the file products.xml and loads it into the target table called books:</p>
<pre>
begin
</pre>
<pre>
wb_xml_load('&lt;OWBXMLRuntime&gt;' 
||
'&lt;XMLSource&gt;'
||
' &lt;file&gt;\ora817\GCCAPPS\products.xml&lt;/file&gt;'
||
'&lt;/XMLSource&gt;'
||
'&lt;targets&gt;'
||
' &lt;target XSLFile="\ora817\XMLstyle\GCC.xsl"&gt;books&lt;/target&gt;'
||
'&lt;/targets&gt;'
||
'&lt;/OWBXMLRuntime&gt;'
);
</pre>
<pre>
end;
</pre>
<p>For more information about control files, see the <span class="italic">Oracle Warehouse Builder User's Guide.</span></p>
</div>
<!-- class="sect3" -->
<a id="CIHJJEIF"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref2779"></a>WB_XML_LOAD_F</h4>
<p class="subhead2"><a id="sthref2780"></a>Syntax</p>
<pre>
WB_XML_LOAD_F(control_file)
</pre>
<p class="subhead2"><a id="sthref2781"></a>Purpose</p>
<p><code>WB_XML_LOAD_F</code> extracts and loads data from XML documents into database targets. The function returns the number of XML documents read during the load. The <code>control_file</code>, itself an XML document, specifies the source of the XML documents, the targets, and any run time controls. After the transformation has been defined, a mapping in Oracle Warehouse Builder calls the transformation as a pre-map or post-map trigger.</p>
<p class="subhead2"><a id="sthref2782"></a>Example</p>
<p>The following example illustrates a script to implement an Oracle Warehouse Builder transformation that extracts data from an XML document stored in the file <code>products.xml</code> and loads it into the target table books:</p>
<pre>
begin
</pre>
<pre>
wb_xml_load_f('&lt;OWBXMLRuntime&gt;' 
||
'&lt;XMLSource&gt;'
||
' &lt;file&gt;\ora817\GCCAPPS\products.xml&lt;/file&gt;'
||
'&lt;/XMLSource&gt;'
||
'&lt;targets&gt;'
||
' &lt;target XSLFile="\ora817\XMLstyle\GCC.xsl"&gt;books&lt;/target&gt;'
||
'&lt;/targets&gt;'
||
'&lt;/OWBXMLRuntime&gt;'
);
</pre>
<pre>
end;
</pre>
<p>For more information about the types handled and detailed information about <code>control_file</code><code>s</code>, see <a class="olink WBINS" href="../e17130/toc.htm"><span class="italic">Oracle Warehouse Builder Installation and Administration Guide</span></a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2968">
<tr>
<td class="cellalignment2977">
<table class="cellalignment2973">
<tr>
<td class="cellalignment2972"><a href="activities_in_pf.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2972"><a href="code_tempates.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2980">
<table class="cellalignment2971">
<tr>
<td class="cellalignment2972"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2972"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2972"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2972"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2972"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2972"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
