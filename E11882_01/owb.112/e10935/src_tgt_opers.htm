<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Source and Target Operators</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 037" />
<meta name="dcterms.created" content="2011-09-21T18:21:39Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Warehouse Builder Data Modeling, ETL, and Data Quality Guide" />
<meta name="dcterms.identifier" content="E10935-05" />
<meta name="dcterms.isVersionOf" content="WBETL" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="ref_maps_processflows.htm" title="Previous" type="text/html" />
<link rel="Next" href="data_flow_opers.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10935.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">32/37</span> <!-- End Header --><a id="BABCHAEI"></a><a id="WBETL25000"></a><a id="i1123494"></a>
<h1 class="chapter"><span class="secnum">25</span> Source and Target Operators</h1>
<p>This chapter provides details on how to use operators as sources and targets in an Oracle Warehouse Builder mapping.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#BABEGCFA">"List of Source and Target Operators"</a></p>
</li>
<li>
<p><a href="#i1171603">"Using Oracle Source and Target Operators"</a></p>
</li>
<li>
<p><a href="#CHDGECDA">"Using Remote and non-Oracle Source and Target Operators"</a></p>
</li>
<li>
<p><a href="#i1133481">"Using Flat File Source and Target Operators"</a></p>
</li>
</ul>
<a id="BABEGCFA"></a><a id="WBETL25001"></a>
<div class="sect1">
<h2 class="sect1">List of Source and Target Operators</h2>
<p><a id="sthref2001"></a><a id="sthref2002"></a><a id="sthref2003"></a><a id="sthref2004"></a>The source and target operators are:</p>
<ul>
<li>
<p><a href="#i1175748">"Constant Operator"</a></p>
</li>
<li>
<p><a href="#CHDEEBAI">"Construct Object Operator"</a></p>
</li>
<li>
<p><a href="#CHDGBACC">"Cube Operator"</a></p>
</li>
<li>
<p><a href="#i1175749">"Data Generator Operator"</a></p>
</li>
<li>
<p><a href="#CHDBAEIB">"Dimension Operator"</a></p>
</li>
<li>
<p><a href="#CHDHIGAJ">"Expand Object Operator"</a></p>
</li>
<li>
<p><a href="#CHDFJJBB">"External Table Operator"</a></p>
</li>
<li>
<p><a href="#CIHCGEDE">"Flat File Operator"</a></p>
</li>
<li>
<p><a href="#i1178363">"Mapping Input Parameter Operator"</a></p>
</li>
<li>
<p><a href="#i1135333">"Mapping Output Parameter Operator"</a></p>
</li>
<li>
<p><a href="#CHDDBBJF">"Materialized View Operator"</a></p>
</li>
<li>
<p><a href="#CHDBHCEI">"Queue Operator"</a></p>
</li>
<li>
<p><a href="#i1175826">"Sequence Operator"</a></p>
</li>
<li>
<p><a href="#CHDJEFIB">"Table Operator"</a></p>
</li>
<li>
<p><a href="#CHDFHADE">"Varray Iterator Operator"</a></p>
</li>
<li>
<p><a href="#CHDCFGGC">"View Operator"</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1171603"></a><a id="WBETL25002"></a>
<div class="sect1">
<h2 class="sect1">Using Oracle Source and Target Operators</h2>
<p>Oracle source and target operators refer to operators that are bound to Oracle data objects in the workspace. Use these operators in a mapping to load data into or source data from Oracle data objects.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2005"></a>
<h3 class="sect2">Setting Properties for Oracle Source and Target Operators</h3>
<p><a id="sthref2006"></a><a id="sthref2007"></a><a id="sthref2008"></a>The Property Inspector displays the properties of the selected operator. It contains the following categories of parameters for source and target operators:</p>
<ul>
<li>
<p><span class="bold">Change Data Capture:</span> This category is displayed only for tables and views. It contains the following properties: <a href="#CIHGBFAF">"Capture Consistency"</a>, <a href="#CIHDAIGJ">"Change Data Capture Filter"</a>, <a href="#CIHEGGGH">"Enabled"</a>, and <a href="#CIHBJAFF">"Trigger Based Capture"</a>.</p>
</li>
<li>
<p><span class="bold">Conditional Loading:</span> You can set the following properties: <a href="#i1153635">"Target Filter for Update"</a>, <a href="#i1130882">"Target Filter for Delete"</a>, and <a href="#i1130886">"Match By Constraint"</a>.</p>
</li>
<li>
<p><span class="bold">Data Chunking:</span> This category is displayed for tables, views, and materialized views. It contains the following properties: Chunk Filter Condition, Chunking Enabled, and Parallel Chunk Filter Condition. For information about these properties, see <a href="#CIHEFACA">"Chunking for Table Operators"</a>.</p>
</li>
<li>
<p><span class="bold">Error Table:</span> You can set the <a href="#CJAFDBHG">"Error Table Name"</a>, <a href="#CJABDIGG">"Roll up Errors"</a>, and <a href="#CJAFABHF">"Select Only Errors from this Operator"</a> properties. This section of properties is displayed only for the following mapping operators: Table, View, Materialized View, External Table, and Dimension.</p>
</li>
<li>
<p><span class="bold">General:</span> Under the General node, you can set <a href="#i1130866">"Primary Source"</a>, <a href="#CJAEDEDJ">"Target Load Order"</a>, and the Loading Type. Depending upon the type of target, you can set different values for the Loading Type as described in <a href="#i1139797">"Loading Types for Oracle Target Operators"</a> and <a href="#i1171930">"Loading Types for Flat Files"</a>.</p>
</li>
<li>
<p><span class="bold">Keys (read-only):</span> You can view the <a href="#i1151051">"Key Name"</a>, <a href="#i1144985">"Key Type"</a>, and <a href="#i1144989">"Referenced Keys"</a>. If the operator functions as a source, then the key settings are used with the Join operator. If the operator functions as a target, then the key settings are used with the <a href="#i1130886">"Match By Constraint"</a> parameter.</p>
</li>
<li>
<p><span class="bold">File Properties:</span> Under the file properties, you can view the <a href="#i1147150">"Bound Name"</a>.</p>
</li>
<li>
<p><span class="bold">Temp Stage Table:</span> This category is displayed for tables, views, materialized views, and external tables.It contains the following properties: Extra DDL Clauses, Is Temp Staging Table, and Temp Stage Table ID. These properties are described in <a href="#CIHCHFCD">"Creating Temporary Tables While Performing ETL"</a>.</p>
</li>
</ul>
<a id="CIHGBFAF"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Capture Consistency</h4>
<p>The Capture Consistency determines the type of Change Data Capture performed. Select one of the following options:</p>
<ul>
<li>
<p><span class="bold">Consistent Set:</span> Performs consistent set Change Data Capture.</p>
</li>
<li>
<p><span class="bold">Non Consistent Set:</span> Performs non consistent set Change Data Capture.</p>
</li>
<li>
<p><span class="bold">None:</span> Does not perform Change Data Capture.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHDAIGJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Change Data Capture Filter</h4>
<p>The Change Data Capture Filter property represents the filter used to capture changes for a particular subscriber.</p>
</div>
<!-- class="sect3" -->
<a id="CIHEGGGH"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Enabled</h4>
<p>Select the Enabled property to enable the functionality that performs Change Data Capture.</p>
</div>
<!-- class="sect3" -->
<a id="CIHBJAFF"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Trigger Based Capture</h4>
<p>Select the Trigger Based Capture property to indicate changes are captured and propagated using triggers on the source tables.</p>
</div>
<!-- class="sect3" -->
<a id="i1130866"></a>
<div class="sect3">
<h4 class="sect3">Primary Source</h4>
<p>Oracle Application Embedded Data Warehouse (EDW) users, refer to EDW documentation. All other users can disregard this parameter.</p>
</div>
<!-- class="sect3" -->
<a id="i1139797"></a>
<div class="sect3">
<h4 class="sect3">Loading Types for Oracle Target Operators</h4>
<p><a id="sthref2009"></a><a id="sthref2010"></a>Select a loading type for each target operator using the Loading Type property.</p>
<p>For all Oracle target operators, except for dimensions and cubes, select one of the following options.</p>
<ul>
<li>
<p><span class="bold">CHECK/INSERT:</span> Checks the target for existing rows. If there are no existing rows, then the incoming rows are inserted into the target.</p>
</li>
<li>
<p><span class="bold">DELETE:</span> The incoming row sets are used to determine which of the rows on the target are to be deleted.</p>
</li>
<li>
<p><span class="bold">DELETE/INSERT:</span> Deletes all rows in the target and then inserts the new rows.</p>
</li>
<li>
<p><span class="bold">INSERT:</span> Inserts the incoming row sets into the target. The insert operation fails if a row exists with the same primary or unique key.</p>
</li>
<li>
<p><span class="bold">INSERT/UPDATE:</span> For each incoming row, the insert operation is performed first. If the insert fails, then an update operation occurs. If there are no matching records for update, then the insert is performed. If you select <code>INSERT/UPDATE</code> and the <a href="ref_maps_processflows.htm#i1130206">"Default Operating Mode"</a> is set to <span class="bold">Row based</span>, then you must set unique constraints on the target. If the operating mode is set to <span class="bold">Set based</span>, then Oracle Warehouse Builder generates a <code>MERGE</code> statement.</p>
</li>
<li>
<p><span class="bold">NONE:</span> No operation is performed on the target. This setting is useful for testing. Extraction and transformations run but have no effect on the target.</p>
</li>
<li>
<p><span class="bold">TRUNCATE/INSERT:</span> Truncates the target and then inserts the incoming row set. If you select this option, then the operation cannot be rolled back even if the execution of the mapping fails. Truncate permanently removes the data from the target.</p>
</li>
<li>
<p><span class="bold">UPDATE:</span> Uses the incoming row sets to update existing rows in the target. If no rows exist for the specified match conditions, then no changes are made.</p>
<p>If you set the configuration parameter <span class="bold">PL/SQL Generation Mode</span> of the target module to Oracle 10<span class="italic">g</span>, Oracle 10<span class="italic">g</span> Release 2, Oracle 11<span class="italic">g</span> Release 1, or Oracle 11<span class="italic">g</span> Release 2, the target is updated in set-based mode. The generated code includes a MERGE statement without an insert clause. For modules configured to generate Oracle9<span class="italic">i</span> and earlier versions of PL/SQL code, the target is updated in row-based mode.</p>
</li>
<li>
<p><span class="bold">UPDATE/INSERT:</span> If the <a href="ref_maps_processflows.htm#i1130206">"Default Operating Mode"</a> is set to <span class="bold">Row based</span>, for each incoming row, the update is performed first followed by an insert if no rows are updated. If the <a href="ref_maps_processflows.htm#i1130206">"Default Operating Mode"</a> is set to <span class="bold">Set based</span>, then a <code>MERGE</code> statement is generated. Set-based mode can only be generated if the PL/SQL Generation Mode parameter of the target module is Oracle 10<span class="italic">g</span> or higher.</p>
</li>
</ul>
<p>For dimensions and cubes, the Loading Type property has the following options: Load and Remove. Use Load to load data into the dimension or cube. Use Remove to remove data from the dimension or cube.</p>
</div>
<!-- class="sect3" -->
<a id="CHDJJEID"></a>
<div class="sect3">
<h4 class="sect3">Loading Types for Flat File Targets</h4>
<p>Configure <span class="bold">SQL*Loader parameters</span> to define SQL*Loader options for your mapping. The values chosen during configuration directly affect the content of the generated SQL*Loader and the run time control files. SQL*Loader provides two methods for loading data:</p>
<ul>
<li>
<p><span class="bold">Conventional Path Load:</span> Runs a SQL INSERT statement to populate tables in Oracle Database.</p>
</li>
<li>
<p><span class="bold">Direct Path Load:</span> Eliminates much of the Oracle Database overhead by formatting Oracle data blocks and writing the data blocks directly to the database files. Because a direct load does not compete with other users for database resources, it can usually load data at or near disk speed.</p>
<p>Certain considerations such as restrictions, security, and backup implications are inherent to each method of access to database files. For more information, see <a class="olink SUTIL" href="../../server.112/e22490/toc.htm"><span class="italic">Oracle Database Utilities</span></a>.</p>
<p>When designing and implementing a mapping that extracts data from a flat file using SQL*Loader, you can configure different properties affecting the generated SQL*Loader script. Each load operator in a mapping has an operator property called Loading Type. The value contained by this property affects how the SQL*Loader INTO TABLE clause for that load operator is generated. Although SQL*Loader can append, insert, replace, or truncate data, it cannot update any data during its processing.</p>
<p><a href="#g1206340">Table 25-1</a> lists the INTO TABLE clauses associated with each load type and their affect on data in the existing targets.</p>
</li>
</ul>
<div class="tblformal">
<p class="titleintable"><a id="sthref2011"></a><a id="g1206340"></a>Table 25-1 Loading Types and INTO TABLE Relationship</p>
<table class="cellalignment2975" title="Loading Types and INTO TABLE Relationship " summary="List the loading types and their corresponding INTO TABLE clauses and their affect on a target with existing data." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t2">Loading Types</th>
<th class="cellalignment2976" id="r1c2-t2">INTO TABLE Clause</th>
<th class="cellalignment2976" id="r1c3-t2">Affect on Target with Existing Data</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t2" headers="r1c1-t2">
<p>INSERT/UPDATE</p>
</td>
<td class="cellalignment2977" headers="r2c1-t2 r1c2-t2">
<p>APPEND</p>
</td>
<td class="cellalignment2977" headers="r2c1-t2 r1c3-t2">
<p>Adds additional data to target</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t2" headers="r1c1-t2">
<p>DELETE/INSERT</p>
</td>
<td class="cellalignment2977" headers="r3c1-t2 r1c2-t2">
<p>REPLACE</p>
</td>
<td class="cellalignment2977" headers="r3c1-t2 r1c3-t2">
<p>Removes existing data and replaces with new (DELETE trigger fires)</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t2" headers="r1c1-t2">
<p>TRUNCATE/INSERT</p>
</td>
<td class="cellalignment2977" headers="r4c1-t2 r1c2-t2">
<p>TRUNCATE</p>
</td>
<td class="cellalignment2977" headers="r4c1-t2 r1c3-t2">
<p>Removes existing data and replaces with new (DELETE trigger fires)</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t2" headers="r1c1-t2">
<p>CHECK/INSERT</p>
</td>
<td class="cellalignment2977" headers="r5c1-t2 r1c2-t2">
<p>INSERT</p>
</td>
<td class="cellalignment2977" headers="r5c1-t2 r1c3-t2">
<p>Assumes target table is empty</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r6c1-t2" headers="r1c1-t2">
<p>NONE</p>
</td>
<td class="cellalignment2977" headers="r6c1-t2 r1c2-t2">
<p>INSERT</p>
</td>
<td class="cellalignment2977" headers="r6c1-t2 r1c3-t2">
<p>Assumes target table is empty</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<a id="CJAEDEDJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Target Load Order</h4>
<p>This property enables you to specify the order in which multiple targets within the same mapping are loaded. Oracle Warehouse Builder determines a default load order based on the foreign key relationships. Use this property to overrule the default order.</p>
</div>
<!-- class="sect3" -->
<a id="i1153635"></a>
<div class="sect3">
<h4 class="sect3">Target Filter for Update</h4>
<p>If the condition evaluates to true, the row is included in the update loading operation.</p>
</div>
<!-- class="sect3" -->
<a id="i1130882"></a>
<div class="sect3">
<h4 class="sect3">Target Filter for Delete</h4>
<p>If the condition evaluates to true, the row is included in the delete loading operation.</p>
</div>
<!-- class="sect3" -->
<a id="i1130886"></a>
<div class="sect3">
<h4 class="sect3">Match By Constraint</h4>
<p>When loading target operators with the UPDATE or the DELETE conditions, you can specify matching criteria. You can set matching and loading criteria manually or choose from several built-in options. Use Match By Constraint to indicate whether unique or primary key information on a target overrides the manual matching and loading criteria set on its attributes. When you click the property Match By Constraint, Oracle Warehouse Builder displays a list containing the constraints defined on that operator and the built-in loading options.</p>
<p>If you select <span class="bold">All Constraints</span>, all manual attribute load settings are overruled and the data is loaded as if the load and match properties of the target attributes were set as displayed in <a href="#g1206280">Table 25-2</a>.</p>
<p>When you select <span class="bold">All Constraints</span>, the load setting Load Column when Updating Row is not automatically assumed to be No for key attributes. However, when performing MERGE generation, this is validated and a validation warning is displayed when certain attributes that are used for UPDATE matching are also used for UPDATE loading.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref2012"></a><a id="g1206280"></a>Table 25-2 All Constraints Target Load Settings</p>
<table class="cellalignment2975" title="All Constraints Target Load Settings " summary="Lists the target load settings is All Constraints were selected." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t3">Load Setting</th>
<th class="cellalignment2976" id="r1c2-t3">Key Attribute</th>
<th class="cellalignment2976" id="r1c3-t3">All Other Attributes</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t3" headers="r1c1-t3">
<p>Match Column when Updating Row</p>
</td>
<td class="cellalignment2977" headers="r2c1-t3 r1c2-t3">
<p>YES</p>
</td>
<td class="cellalignment2977" headers="r2c1-t3 r1c3-t3">
<p>NO</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t3" headers="r1c1-t3">
<p>Match Column when Deleting Row</p>
</td>
<td class="cellalignment2977" headers="r3c1-t3 r1c2-t3">
<p>YES</p>
</td>
<td class="cellalignment2977" headers="r3c1-t3 r1c3-t3">
<p>NO</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>If you select <span class="bold">No Constraints,</span> all manual load settings are honored, and the data is loaded accordingly.</p>
<p>If you select a constraint previously defined for the operator, all manual attribute load settings are overruled, and the data is loaded as if the load and match properties of the target were set as displayed in <a href="#CIHDDDBB">Table 25-3</a>.</p>
<p>When you select a previously defined constraint, the load setting Load Column when Updating Row is not automatically assumed to be No for key attributes. However, when performing MERGE generation, a validation warning is displayed when certain attributes that are used for UPDATE matching are also used for UPDATE loading</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref2013"></a><a id="CIHDDDBB"></a>Table 25-3 Target Load Settings for a Selected Constraint</p>
<table class="cellalignment2975" title="Target Load Settings for a Selected Constraint " summary="Lists the target load settings for a selected constraint." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t4">Load Setting</th>
<th class="cellalignment2976" id="r1c2-t4">Selected Key Attributes</th>
<th class="cellalignment2976" id="r1c3-t4">All Other Attributes</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t4" headers="r1c1-t4">
<p>Match Column when Updating Row</p>
</td>
<td class="cellalignment2977" headers="r2c1-t4 r1c2-t4">
<p>YES</p>
</td>
<td class="cellalignment2977" headers="r2c1-t4 r1c3-t4">
<p>NO</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t4" headers="r1c1-t4">
<p>Match Column when Deleting Row</p>
</td>
<td class="cellalignment2977" headers="r3c1-t4 r1c2-t4">
<p>YES</p>
</td>
<td class="cellalignment2977" headers="r3c1-t4 r1c3-t4">
<p>NO</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2014"></a>
<h4 class="sect3">Reverting Constraints to Default Values</h4>
<p>If you made changes at the attribute level and you want to default all settings, click <span class="bold">Advanced.</span> A list containing the loading options is displayed. Oracle Warehouse Builder defaults the settings based on the constraint type that you select.</p>
<p>For example, to reset the match properties for all key attributes, click <span class="bold">Advanced,</span> select <span class="bold">No Constraints,</span> and click <span class="bold">OK.</span> The manual load settings are overwritten and the data is loaded based on the settings displayed in <a href="#g1206152">Table 25-4</a>.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref2015"></a><a id="g1206152"></a>Table 25-4 Default Load Settings for Advanced No Constraints</p>
<table class="cellalignment2975" title="Default Load Settings for Advanced No Constraints " summary="Lists the default load settings if no constraints are set." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t5">Load Setting</th>
<th class="cellalignment2976" id="r1c2-t5">All Key Attributes</th>
<th class="cellalignment2976" id="r1c3-t5">All Other Attributes</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t5" headers="r1c1-t5">
<p>Load Column when Inserting Row</p>
</td>
<td class="cellalignment2977" headers="r2c1-t5 r1c2-t5">
<p>YES</p>
</td>
<td class="cellalignment2977" headers="r2c1-t5 r1c3-t5">
<p>NO</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t5" headers="r1c1-t5">
<p>Load Column when Updating Row</p>
</td>
<td class="cellalignment2977" headers="r3c1-t5 r1c2-t5">
<p>YES</p>
</td>
<td class="cellalignment2977" headers="r3c1-t5 r1c3-t5">
<p>YES</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t5" headers="r1c1-t5">
<p>Match Column when Updating Row</p>
</td>
<td class="cellalignment2977" headers="r4c1-t5 r1c2-t5">
<p>NO</p>
</td>
<td class="cellalignment2977" headers="r4c1-t5 r1c3-t5">
<p>NO</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t5" headers="r1c1-t5">
<p>Match Column when Deleting Row</p>
</td>
<td class="cellalignment2977" headers="r5c1-t5 r1c2-t5">
<p>NO</p>
</td>
<td class="cellalignment2977" headers="r5c1-t5 r1c3-t5">
<p>NO</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>Alternatively, if you click <span class="bold">Advanced</span> and select <span class="bold">All Constraints,</span> the manual load settings are overwritten and data is loaded based on the settings displayed in <a href="#g1206320">Table 25-5</a>.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref2016"></a><a id="g1206320"></a>Table 25-5 Default Load Settings for Advanced All Constraints</p>
<table class="cellalignment2975" title="Default Load Settings for Advanced All Constraints " summary="Lists the default load settings if all constraints are selected." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t6">Load Setting</th>
<th class="cellalignment2976" id="r1c2-t6">All Key Attributes</th>
<th class="cellalignment2976" id="r1c3-t6">All Other Attributes</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t6" headers="r1c1-t6">
<p>Load Column when Inserting Row</p>
</td>
<td class="cellalignment2977" headers="r2c1-t6 r1c2-t6">
<p>YES</p>
</td>
<td class="cellalignment2977" headers="r2c1-t6 r1c3-t6">
<p>YES</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t6" headers="r1c1-t6">
<p>Load Column when Updating Row</p>
</td>
<td class="cellalignment2977" headers="r3c1-t6 r1c2-t6">
<p>NO</p>
</td>
<td class="cellalignment2977" headers="r3c1-t6 r1c3-t6">
<p>YES</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t6" headers="r1c1-t6">
<p>Match Column when Updating Row</p>
</td>
<td class="cellalignment2977" headers="r4c1-t6 r1c2-t6">
<p>YES</p>
</td>
<td class="cellalignment2977" headers="r4c1-t6 r1c3-t6">
<p>NO</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t6" headers="r1c1-t6">
<p>Match Column when Deleting Row</p>
</td>
<td class="cellalignment2977" headers="r5c1-t6 r1c2-t6">
<p>YES</p>
</td>
<td class="cellalignment2977" headers="r5c1-t6 r1c3-t6">
<p>NO</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<a id="i1147150"></a>
<div class="sect3">
<h4 class="sect3">Bound Name</h4>
<p>The name used by the code generator. If an operator is currently bound and synchronized, then this property is read-only. If an operator is not yet bound, then you can edit the bound name within the Mapping Editor before you synchronize it to a workspace object.</p>
</div>
<!-- class="sect3" -->
<a id="i1151051"></a>
<div class="sect3">
<h4 class="sect3">Key Name</h4>
<p>Name of the primary, foreign, or unique key.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref2017"></a>
<h4 class="sect3">Key Columns</h4>
<p>Local columns that define this key. Each key column is comma-delimited if the operator contains multiple key column.</p>
</div>
<!-- class="sect3" -->
<a id="i1144985"></a>
<div class="sect3">
<h4 class="sect3">Key Type</h4>
<p>Type of key, either primary, foreign, or unique.</p>
</div>
<!-- class="sect3" -->
<a id="i1144989"></a>
<div class="sect3">
<h4 class="sect3">Referenced Keys</h4>
<p>If the operator contains a foreign key, <span class="bold">Referenced Keys</span> displays the primary key or unique key for the referenced object.</p>
</div>
<!-- class="sect3" -->
<a id="CJAFDBHG"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Error Table Name</h4>
<p>The name of the error table that stores the invalid records during a load operation.</p>
</div>
<!-- class="sect3" -->
<a id="CJABDIGG"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Roll up Errors</h4>
<p>Select <span class="bold">Yes</span> to roll up records selected from the error table by the error name. Thus all errors generated by a particular input record are rolled up into a single record with the error names concatenated in the error name attribute.</p>
</div>
<!-- class="sect3" -->
<a id="CJAFABHF"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Select Only Errors from this Operator</h4>
<p>Rows selected from the error table contains only errors created by this operator in this map execution.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2018"></a>
<h3 class="sect2">Setting Attribute Properties</h3>
<p><a id="sthref2019"></a><a id="sthref2020"></a><a id="sthref2021"></a><a id="sthref2022"></a>For each attribute in a source and target operator, parameters are categorized into the following types:</p>
<ul>
<li>
<p><span class="bold">General:</span> Under the General properties, you can view the <a href="#BCFECJBC">"Bound Name"</a> property, the Business name, and Physical name.</p>
</li>
<li>
<p><span class="bold">Chunking_column:</span> This category is displayed only for attributes in Table, View, and Materialized View operators. It contains one property <a href="#CIHEHFBA">"Chunking Number Column"</a>.</p>
</li>
<li>
<p><span class="bold">Code Template Metadata Tags:</span> This category contains the following properties: <a href="sap_km_mappings.htm#BEIEJDAG">"SCD"</a>, <a href="sap_km_mappings.htm#BEIDAGAA">"UD1"</a>, <a href="sap_km_mappings.htm#BEIHIEEC">"UD2"</a>, <a href="sap_km_mappings.htm#BEIBDACB">"UD3"</a>, <a href="sap_km_mappings.htm#BEIFIDAE">"UD4"</a>, <a href="sap_km_mappings.htm#BEIFFHIA">"UD5"</a>, and <a href="sap_km_mappings.htm#BEIDECIA">"UPD"</a>.</p>
</li>
<li>
<p><span class="bold">Data Type Information:</span> The data type properties are applicable to all operators. They include <a href="#CJAJFEJC">"Data Type"</a>, <a href="#CJAIGBJC">"Precision"</a>, <a href="#CJABCBBI">"Scale"</a>, <a href="#CJABDBDG">"Length"</a>, and <a href="#CJABHJJH">"Fractional Seconds Precision"</a>.</p>
</li>
<li>
<p><span class="bold">Loading Properties:</span> The operators for tables, dimensions, cubes, views, and materialized views have a Loading Properties category. This category contains the following settings: <a href="#CHDHHAAC">"Load Column When Inserting Row"</a>, <a href="#BCFCJBJF">"Load Column When Updating Row"</a>, <a href="#CHDCFHIA">"Match Column When Updating Row"</a>, <a href="#CHDECIGI">"Update: Operation"</a>, and <a href="#CHDBCCIE">"Match Column When Deleting Row"</a>.</p>
</li>
</ul>
<p>Certain operators contain properties that are specific to that particular operator. These properties are listed under the Operator Specific Properties node and are described in the sections that discuss that operator.</p>
<a id="BCFECJBC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Bound Name</h4>
<p>Name used by the code generator to identify this item. By default, it is the same name as the item. This is a read-only setting when the operator is bound.</p>
</div>
<!-- class="sect3" -->
<a id="CJAJFEJC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Data Type</h4>
<p>Data type of the attribute.</p>
</div>
<!-- class="sect3" -->
<a id="CJAIGBJC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Precision</h4>
<p>The maximum number of digits this attribute has if the data type of this attribute is a number or a float. This is a read-only setting.</p>
</div>
<!-- class="sect3" -->
<a id="CJABCBBI"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Scale</h4>
<p>The number of digits to the right of the decimal point. This only applies to number attributes.</p>
</div>
<!-- class="sect3" -->
<a id="CJABDBDG"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Length</h4>
<p>The maximum length for a <code>CHAR</code>, <code>VARCHAR</code>, or <code>VARCHAR2</code> attribute.</p>
</div>
<!-- class="sect3" -->
<a id="CJABHJJH"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Fractional Seconds Precision</h4>
<p>The number of digits in the fractional part of the datetime field. It can be a number between 0 and 9. This property is used only for <code>TIMESTAMP</code>, <code>TIMESTAMP WITH TIME ZONE</code>, and <code>TIMESTAMP WITH LOCAL TIME ZONE</code> data types.</p>
</div>
<!-- class="sect3" -->
<a id="CHDHHAAC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Load Column When Inserting Row</h4>
<p>This setting prevents data from moving to a target even though it is mapped to do so. If you select <span class="bold">Yes</span> (default), then the data reaches the mapped target.</p>
</div>
<!-- class="sect3" -->
<a id="BCFCJBJF"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Load Column When Updating Row</h4>
<p>This setting prevents the selected attribute data from moving to a target even though it is mapped to do so. If you select <span class="bold">Yes</span> (default), then the data reaches the mapped target attribute. If all columns of a unique key are not mapped, then the unique key is not used to construct the match condition. If no columns of a unique key are mapped, then an error is displayed. If a column (not a key column) is not mapped, then it is not used in loading.</p>
</div>
<!-- class="sect3" -->
<a id="CHDCFHIA"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Match Column When Updating Row</h4>
<p>This setting updates a data target row only if there is a match between the source attribute and mapped target attribute. If a match is found, then an update occurs on the row. If you set this property to <span class="bold">Yes</span> (default), then the attribute is used as a matching attribute. If you use this setting, then all the key columns must be mapped. If there is only one unique key defined on the target entity, then use constraints to override this setting.</p>
</div>
<!-- class="sect3" -->
<a id="CHDECIGI"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Update: Operation</h4>
<p>You can specify an update operation to be performed when a matching row is located. An update operation is performed on the target attribute using the data of the source attribute. <a href="#g1206368">Table 25-6</a> lists the update operations that you can specify and describes the update operation logic.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref2023"></a><a id="g1206368"></a>Table 25-6 Update Operations</p>
<table class="cellalignment2975" title="Update Operations " summary="Lists and provides examples of the update operations you can specify and describes the update operation logic." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t7">Operation</th>
<th class="cellalignment2976" id="r1c2-t7">Example</th>
<th class="cellalignment2976" id="r1c3-t7">Result If Source Value = 5 and Target Value = 10</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t7" headers="r1c1-t7">
<p class="synopsis"><span class="bold">=</span></p>
</td>
<td class="cellalignment2977" headers="r2c1-t7 r1c2-t7">
<p>TARGET = SOURCE</p>
</td>
<td class="cellalignment2977" headers="r2c1-t7 r1c3-t7">
<p>TARGET = 5</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t7" headers="r1c1-t7">
<p class="synopsis"><span class="bold">+=</span></p>
</td>
<td class="cellalignment2977" headers="r3c1-t7 r1c2-t7">
<p>TARGET = SOURCE + TARGET</p>
</td>
<td class="cellalignment2977" headers="r3c1-t7 r1c3-t7">
<p>TARGET = 15 (5 + 10)</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t7" headers="r1c1-t7">
<p class="synopsis"><span class="bold">-=</span></p>
</td>
<td class="cellalignment2977" headers="r4c1-t7 r1c2-t7">
<p>TARGET = TARGET - SOURCE</p>
</td>
<td class="cellalignment2977" headers="r4c1-t7 r1c3-t7">
<p>TARGET = 5 (10 - 5)</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t7" headers="r1c1-t7">
<p class="synopsis"><span class="bold">=-</span></p>
</td>
<td class="cellalignment2977" headers="r5c1-t7 r1c2-t7">
<p>TARGET = SOURCE - TARGET</p>
</td>
<td class="cellalignment2977" headers="r5c1-t7 r1c3-t7">
<p>TARGET = negative 5 (5 - 10)</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r6c1-t7" headers="r1c1-t7">
<p class="synopsis">*<span class="bold">=</span></p>
</td>
<td class="cellalignment2977" headers="r6c1-t7 r1c2-t7">
<p>TARGET = SOURCE * TARGET</p>
</td>
<td class="cellalignment2977" headers="r6c1-t7 r1c3-t7">
<p>TARGET = 50 (5 * 10)</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r7c1-t7" headers="r1c1-t7">
<p class="synopsis"><span class="bold">/=</span></p>
</td>
<td class="cellalignment2977" headers="r7c1-t7 r1c2-t7">
<p>TARGET = TARGET / SOURCE</p>
</td>
<td class="cellalignment2977" headers="r7c1-t7 r1c3-t7">
<p>TARGET = 2 (10 / 5)</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r8c1-t7" headers="r1c1-t7">
<p class="synopsis"><span class="bold">=</span>/</p>
</td>
<td class="cellalignment2977" headers="r8c1-t7 r1c2-t7">
<p>TARGET = SOURCE / TARGET</p>
</td>
<td class="cellalignment2977" headers="r8c1-t7 r1c3-t7">
<p>TARGET = 0.5 (5 /10)</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r9c1-t7" headers="r1c1-t7">
<p class="synopsis"><span class="bold">||=</span></p>
</td>
<td class="cellalignment2977" headers="r9c1-t7 r1c2-t7">
<p>TARGET = TARGET || SOURCE</p>
</td>
<td class="cellalignment2977" headers="r9c1-t7 r1c3-t7">
<p>TARGET = 105 (10 concatenated with 5)</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r10c1-t7" headers="r1c1-t7">
<p class="synopsis"><span class="bold">=||</span></p>
</td>
<td class="cellalignment2977" headers="r10c1-t7 r1c2-t7">
<p>TARGET = SOURCE || TARGET</p>
</td>
<td class="cellalignment2977" headers="r10c1-t7 r1c3-t7">
<p>TARGET = 510 (5 concatenated with 10)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<a id="CHDBCCIE"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Match Column When Deleting Row</h4>
<p>Deletes a data target row only if there is a match between the source attribute and mapped target attribute. If a match is found, then a delete operation occurs on the row. If you set this property to <span class="bold">Yes</span> (default), then the attribute is used as a matching attribute. Constraints can override this setting.</p>
</div>
<!-- class="sect3" -->
<a id="CIHEHFBA"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Chunking Number Column</h4>
<p>Select Chunking Number column for an attribute to use that attribute as the chunking attribute. This property is applicable only for parallel chunking.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1175748"></a>
<div class="sect2">
<h3 class="sect2">Constant <a id="sthref2024"></a><a id="sthref2025"></a><a id="sthref2026"></a>Operator</h3>
<p>The Constant operator enables you to define constant values. You can place constants anywhere in any PL/SQL or ABAP mapping.</p>
<img width="20" height="20" src="img/constant.gif" alt="Description of constant.gif follows" /><br />
<a id="sthref2027" href="img_text/constant.htm">Description of the illustration constant.gif</a><br />
<br />
<p>The Constant operator produces a single output group that contains one or more constant attributes. Oracle Warehouse Builder initializes constants at the beginning of the execution of the mapping.</p>
<p>For example, use a Constant operator to load the value of the current system date into a Table operator. In the Expression Builder, select the public transformation <code>SYSDATE</code> from the list of predefined transformations.</p>
<p>For more information about public transformations, see <a href="transformdata_intro.htm#BHCIJEDG">Chapter 4, "Overview of Transforming Data"</a>.</p>
<p><span class="bold">To define a Constant operator in a PL/SQL or ABAP mapping:</span></p>
<ol>
<li>
<p>Drop a Constant operator onto the Mapping Editor canvas.</p>
</li>
<li>
<p>Right-click the Constant operator and select <span class="bold">Open</span>.</p>
<p>The Constant Editor dialog box is displayed.</p>
</li>
<li>
<p>On the Output tab, create an output attribute by clicking the blank cell in the Attribute column and entering the name of the output attribute.</p>
<p>The default data type assigned is NUMERIC. You can modify the data type and any other parameters associated with it such as length, precision, and so on.</p>
</li>
<li>
<p>Enter the expression associated with the output attribute.</p>
<p>Use the Expression field for an output attribute to enter the expression. Or, click the Ellipsis button to the right of the Expression field to use the Expression Builder dialog box to define an expression.</p>
<p>The length, precision, and scale properties assigned to the output attribute must match the values returned by the expressions defined in the mapping. For <code>VARCHAR</code>, <code>CHAR</code>, or <code>VARCHAR2</code> data types, enclose constant string literals within single quotation marks, such as, <code>'my_string'</code>.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to close the Constant Editor dialog box.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDEEBAI"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Construct <a id="sthref2028"></a><a id="sthref2029"></a><a id="sthref2030"></a>Object Operator</h3>
<p>The Construct Object operator enables you to create SQL object data types (object types and collection types), PL/SQL object types, and cursors in a mapping by using the individual attributes that they comprise.</p>
<img width="20" height="20" src="img/construct_object_icon.gif" alt="Description of construct_object_icon.gif follows" /><br />
<a id="sthref2031" href="img_text/construct_object_icon.htm">Description of the illustration construct_object_icon.gif</a><br />
<br />
<p>For example, you can use a Construct Object operator to create a SQL object type that is used to load data into a table that contains a column whose data type is an object type. You can also use this operator to create the payload that loads data into an advanced queue. This operator also enables you to construct a SYS.REFCURSOR object.</p>
<p>The Construct Object operator has one input group and one output group. The input group represents the individual attributes that comprise the object type. The output of the Construct Object operator is an object type that is created using the individual attributes. In a mapping, the data type of the output attribute of the Construct Object operator should match the target attribute to which it is being mapped.</p>
<p><a href="#CHDDAJFJ">Figure 25-1</a> displays a mapping that uses a Construct Object operator. The source table <code>CUST_SRC</code> uses separate attributes to store each component of the customer address. But the target table <code>CUSTOMERS</code> uses an object type to store the customer address. To load data from the <code>CUST_SRC</code> table into the <code>CUSTOMERS</code> table, the customer address should be an object type whose signature matches that of the customer address in <code>CUSTOMERS</code>. The Construct Object operator takes the individual attributes from <code>CUST_SRC</code>, that store the customer address as input, and constructs an object type. The Construct Object operator is bound to the user-defined data type <code>CUST_ADDR</code> stored in the workspace.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDDAJFJ"></a>Figure 25-1 Construct Object Operator in a Mapping</p>
<img width="695" height="409" src="img/construct_object_mapping.gif" alt="Description of Figure 25-1 follows" /><br />
<a id="sthref2032" href="img_text/construct_object_mapping.htm">Description of "Figure 25-1 Construct Object Operator in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<p><span class="bold">To define a Construct Object operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop a Construct Object operator onto the Mapping Editor canvas.</p>
</li>
<li>
<p>Use the Add Construct Object dialog box to create or select an object. For more information about these options, see <a href="mappings.htm#CHDEJAAD">"Using the Add Operator Dialog Box to Add Operators"</a>.</p>
</li>
<li>
<p>Map the individual source attributes that are used to construct the object to the input group of the Construct Object operator.</p>
</li>
<li>
<p>Map the output attribute of the Construct Object operator to the target attribute. The data type of the target attribute should be an object type.</p>
<p>The signatures of the output attribute of the Construct Object operator and the target attribute should be the same.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDGBACC"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Cube <a id="sthref2033"></a><a id="sthref2034"></a><a id="sthref2035"></a>Operator</h3>
<p>Use the Cube operator to source data from or load data into cubes.</p>
<img width="20" height="20" src="img/cube.gif" alt="Description of cube.gif follows" /><br />
<a id="sthref2036" href="img_text/cube.htm">Description of the illustration cube.gif</a><br />
<br />
<p>The Cube operator contains a group with the same name as the cube. This group contains an attribute for each of the cube measures. It also contains the attributes for the surrogate identifier and business identifier of each dimension level that the cube references. Additionally, the Cube operator displays one group for each dimension that the cube references.</p>
<p>If you specify an Orphan Management Policy and create an error table for a cube, when you add this cube to a mapping, the Cube operator contains a group called ERROR_<span class="italic">&lt;cube_name&gt;</span>. This is an output group that contains attributes that are displayed in the Cube operator details, but not in the Cube operator on the mapping canvas. To create data flows using these attributes, display these attributes on the canvas by selecting the ERROR_&lt;<span class="italic">cube_name</span>&gt; group on the canvas and from the Graph menu, selecting <span class="bold">Select Display Set</span>, and then <span class="bold">All</span>.</p>
<p>You can bind a Cube operator to a cube defined in any Oracle module in the current project. You can also synchronize the Cube operator and update it with changes made to the cube to which it is bound. To synchronize a Cube operator, right-click the Cube operator on the Mapping Editor canvas and select <span class="bold">Synchronize</span>.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2037"></a>
<h4 class="sect3">Cube Operator Properties</h4>
<p>The Cube operator has the following properties that you can use to load a cube.</p>
<p><a id="CIHEDGGJ"></a><span class="subhead3">Loading Type&nbsp;</span>Use the Loading Type property to specify if you are loading data into the cube or removing data from the cube. Set one of the following values for this property.</p>
<ul>
<li>
<p>INSERT_LOAD</p>
<p>All records from the source data set are inserted into the cube. Oracle recommends that you set this option with orphan management.</p>
</li>
<li>
<p>LOAD</p>
<p>The records from the source data set are merged into the cube. Thus, if a record that is being loaded from the source exists in the cube, this record is updated. Any records in the source data set that do not exist are inserted.</p>
</li>
<li>
<p>REMOVE</p>
<p>The records in the cube that match the incoming source records are deleted from the cube.</p>
</li>
</ul>
<p><a id="sthref2038"></a><span class="subhead3">Target Load Order&nbsp;</span>This property determines the order in which multiple targets within the same mapping are loaded. Oracle Warehouse Builder determines a default order based on the foreign key relationships. You can use this property to overrule the default order.</p>
<p><a id="sthref2039"></a><span class="subhead3">Enable Source Aggregation&nbsp;</span>Set this property to True to aggregate source data before loading the cube. The source data is grouped by all dimension keys.</p>
<p>The default Aggregation function on cube measure attributes is SUM. You can changed the setting Source Aggregation Function property of the cube measure.</p>
<p>If you set the Orphan Management Policy for the cube to Default Dimension Record and you set the Enable Source Aggregation property of the Cube operator to False, execution errors may occur when the cube table is updated. Thus, in this scenario, Oracle Warehouse Builder displays a warning during cube validation.</p>
<p><a id="sthref2040"></a><span class="subhead3">Solve the Cube&nbsp;</span>Select YES for this property to aggregate the cube data while loading the cube. This increases the load time, but decreases the query time. The data is first loaded and then aggregated.</p>
<p><a id="sthref2041"></a><span class="subhead3">Incremental Aggregation&nbsp;</span>Select this option to perform incremental loads. If the cube has been solved earlier, subsequent loads only aggregate the new data.</p>
<p><a id="sthref2042"></a><span class="subhead3">AW Staged Load&nbsp;</span>If you set AW Staged Load to true, the set-based AW load data is staged into a temporary table before loading into the AW.</p>
<p><a id="sthref2043"></a><span class="subhead3">AW Truncate Before Load&nbsp;</span>Indicates whether all existing cube values should be truncated before loading the cube. Setting this property to YES truncates existing cube data.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2044"></a>
<h4 class="sect3">Cube Attribute Properties</h4>
<p>You can set the following properties for attributes in a Cube operator.</p>
<p><a id="sthref2045"></a><span class="subhead3">Update:Operation&nbsp;</span>This property is only applicable to cubes with a ROLAP implementation and to attributes that represent cube measures.</p>
<p>Specifies the type of update operation for cube measures while loading the cube. The options that you can select are +=, -=, /=,=,=-, =||, and ||=. The default values is = and using this value inserts the source fact records into the cube.</p>
<p>For example, if you set this property to +=, the source attribute value that is mapped to the cube measure is added to the existing measure value. If there are multiple source fact records with the same dimensionality, then ensure that you use an Aggregator operator to aggregate these records before loading them into the cube.</p>
<p><a id="sthref2046"></a><span class="subhead3">Null Data Value&nbsp;</span>Specifies the value that is interpreted as null by the orphan management policy of the cube. While loading cubes, you can use the <a href="dim_objects.htm#BABEACDG">"Orphan Tab"</a> of the Cube editor to specify how records with null dimension key values and records with invalid dimension key values are treated.</p>
<p>The default value for this property is NULL.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1175749"></a>
<div class="sect2">
<h3 class="sect2">Data <a id="sthref2047"></a><a id="sthref2048"></a><a id="sthref2049"></a>Generator Operator</h3>
<p>Use a Data Generator operator to introduce a sequence, record number, or system date into a mapping. You can use a single Data Generator operator to map multiple of these functions.</p>
<img width="20" height="20" src="img/data_gen.gif" alt="Description of data_gen.gif follows" /><br />
<a id="sthref2050" href="img_text/data_gen.htm">Description of the illustration data_gen.gif</a><br />
<br />
<div class="infobox-note">
<p class="notep1">Recommendation:</p>
For PL/SQL mappings, use a <a href="#i1175748">"Constant Operator"</a> or <a href="#i1175826">Sequence Operator</a> instead of a Data Generator operator.</div>
<p>For mappings with flat file sources and targets, the Data Generator operator connects the mapping to SQL*Loader to generate the data stored in the database record.</p>
<p>The following functions are available:</p>
<ul>
<li>
<p>RECNUM</p>
</li>
<li>
<p>SYSDATE1</p>
</li>
<li>
<p>SEQUENCE</p>
</li>
</ul>
<p>Oracle Warehouse Builder can generate data by specifying only sequences, record numbers, system dates, and constants as field specifications. SQL*Loader inserts as many records as are specified by the LOAD keyword.</p>
<p>The Data Generator operator has one output group with predefined attributes corresponding to Record Number, System Date, and a typical Sequence. Use the Data Generator operator to obtain record number, system date, or a sequence. For all other functions, use a Constant operator or Expression operator.</p>
<p><a href="#BCFHAIEA">Figure 25-2</a> shows a mapping that uses the Data Generator operator to obtain the current system date. The data from a flat file <code>CUSTOMERS_TXT</code> is loaded in to a staging table <code>CUST_STAGE</code>. The staging table contains an additional attribute for the date on which the data was loaded. The <code>SYSDATE1</code> attribute of the Data Generator operator is mapped to the <code>DATE_LOADED</code> attribute of the staging table <code>CUST_STAGE</code>.</p>
<div class="figure">
<p class="titleinfigure"><a id="BCFHAIEA"></a>Figure 25-2 Data Generator in a Mapping</p>
<img width="514" height="341" src="img/data_generator_map.gif" alt="Description of Figure 25-2 follows" /><br />
<a id="sthref2051" href="img_text/data_generator_map.htm">Description of "Figure 25-2 Data Generator in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<p><span class="bold">To define a Data Generator in a SQL*Loader mapping:</span></p>
<ol>
<li>
<p>Drop a Data Generator operator onto the Mapping Editor canvas.</p>
</li>
<li>
<p>Select the SEQUENCE attribute from the Data Generator operator and map it to the target column.</p>
<p>Oracle Warehouse Builder displays the properties of this attribute in the Property Inspector.</p>
</li>
<li>
<p>In the Expression field, click the Ellipsis button to open the Expression Builder and define an expression.</p>
</li>
<li>
<p>(Optional) Repeat steps 2 and 3 for the RECNUM attribute.</p>
</li>
</ol>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2052"></a>
<h4 class="sect3">Setting a Column to the Data File Record Number</h4>
<p>To set an attribute to the number of the records that the record was loaded from, map from the RECNUM attribute. Records are counted sequentially from the beginning of the first data file, starting with record 1. RECNUM increments as each logical record is assembled. It increments for records that are discarded, skipped, rejected, or loaded. For example, if you use the option SKIP=10, the first record loaded has a RECNUM of 11.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2053"></a>
<h4 class="sect3">Setting a Column to the Current Date</h4>
<p>A column mapped from SYSDATE1 gets the current system date, as defined by the SQL <code>SYSDATE</code> function.</p>
<p>The target column must be of type <code>CHAR</code> or <code>DATE</code>. If the column is of type <code>CHAR</code>, then the date is loaded in the format dd-mon-yy. If the system date is loaded into a <code>DATE</code> column, then you can access it in the time format and the date format. A new system date/time is used for each array of records inserted in a conventional path load and for each block of records loaded during a direct path load.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2054"></a>
<h4 class="sect3">Setting a Column to a Unique Sequence Number</h4>
<p>Map the SEQUENCE attribute to the target column to generate sequence numbers for the column. The SEQUENCE keyword ensures a unique value for a column. SEQUENCE increments for each record that is loaded or rejected. It does not increment for records that are discarded or skipped.</p>
<p>The default sequence generated is SEQUENCE (COUNT). You can edit the sequence expression in the property expression, but you must provide the syntax.</p>
<p>The combination of column name and the SEQUENCE function is a complete column specification. <a href="#g1251423">Table 25-7</a> lists the options available for sequence values.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref2055"></a><a id="g1251423"></a>Table 25-7 Sequence Value Options</p>
<table class="cellalignment2975" title="Sequence Value Options " summary="This table contains two columns describing sequence value options. The first column lists the name of the sequence and the second column provides a short description for each sequence." dir="ltr">
<thead>
<tr class="cellalignment2969">
<th class="cellalignment2976" id="r1c1-t9">Value</th>
<th class="cellalignment2976" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r2c1-t9" headers="r1c1-t9">
<p>COUNT</p>
</td>
<td class="cellalignment2977" headers="r2c1-t9 r1c2-t9">
<p>The sequence starts with the number of records in the table plus the increment</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r3c1-t9" headers="r1c1-t9">
<p>integer</p>
</td>
<td class="cellalignment2977" headers="r3c1-t9 r1c2-t9">
<p>Specifies the beginning sequence number</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r4c1-t9" headers="r1c1-t9">
<p>MAX</p>
</td>
<td class="cellalignment2977" headers="r4c1-t9 r1c2-t9">
<p>The sequence starts with the current maximum value for the column plus the increment.</p>
</td>
</tr>
<tr class="cellalignment2969">
<td class="cellalignment2977" id="r5c1-t9" headers="r1c1-t9">
<p>incr</p>
</td>
<td class="cellalignment2977" headers="r5c1-t9 r1c2-t9">
<p>The value that the sequence number is to increment after a record is loaded or rejected</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>If records are rejected during loading, the sequence of inserts is preserved despite data errors. For example, if four rows are assigned sequence numbers 10, 12, 14, and 16 in a column, and the row with 12 is rejected, the valid rows with assigned numbers 10, 14, and 16, not 10, 12, 14 are inserted. When you correct the rejected data and reinsert it, you can manually set the columns to match the sequence.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDBAEIB"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref2056"></a><a id="sthref2057"></a><a id="sthref2058"></a>Dimension Operator</h3>
<p>Use the Dimension operator to source data from or load data into dimensions and Slowly Changing Dimensions.</p>
<img width="20" height="20" src="img/dimension.gif" alt="Description of dimension.gif follows" /><br />
<a id="sthref2059" href="img_text/dimension.htm">Description of the illustration dimension.gif</a><br />
<br />
<p>The Dimension operator contains one group for each level in the dimension. The groups use the same name as the dimension levels. The level attributes of each level are listed under the group that represents the level.</p>
<p>You cannot map a data flow to the surrogate identifier attribute or the parent surrogate identifier reference attribute of any dimension level. Oracle Warehouse Builder automatically populates these columns when it loads a dimension.</p>
<p>You can bind and synchronize a Dimension operator with a dimension stored in the workspace. To avoid errors in the generated code, ensure that the workspace dimension is deployed successfully before you deploy the mapping that contains the Dimension operator. To synchronize a Dimension operator with the workspace dimension, right-click the dimension on the Mapping Editor canvas and select <span class="bold">Synchronize</span>.</p>
<p>If you specify an Orphan Management Policy and create an error table for a dimension, when you add this dimension to a mapping, the Dimension operator contains a group called ERROR_<span class="italic">&lt;dimension_name&gt;</span>. This is an output group that contains attributes that are displayed in the dimension operator details, but not in the Dimension operator on the mapping canvas. To create data flows using these attributes, display these attributes on the canvas by selecting the ERROR_&lt;<span class="italic">dimension_name</span>&gt; group on the canvas and from the Graph menu, selecting <span class="bold">Select Display Set</span>, and then <span class="bold">All</span>.</p>
<p><span class="bold">To use a Dimension operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop a Dimension operator onto the Mapping Editor canvas.</p>
<p>Oracle Warehouse Builder displays the Add Dimension dialog box.</p>
</li>
<li>
<p>Use the Add Dimension dialog box to select a dimension.</p>
<p>Alternatively, you can combine Steps 1 and 2 into one single step. In the Mapping Editor, navigate to the Projects Navigator. Select the dimension and drag and drop it onto the Mapping Editor canvas.</p>
</li>
<li>
<p>Map the attributes from the Dimension operator to the target, or map attributes from the source to the Dimension operator.</p>
</li>
</ol>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2060"></a>
<h4 class="sect3">Dimension Operator Properties</h4>
<p>Use the Property Inspector to set options that define additional details about loading or removing data from a dimension or Slowly Changing Dimension.</p>
<p>You can set properties at the following three levels: operator, group that represents each level in the dimension, and level attribute. The following sections describe the Dimension operator properties. The properties are categorized as follows: <a href="#CIHDGCCG">"AW Properties"</a>, <a href="#CIHGADGA">"Dimension Properties"</a>, <a href="#CIHFGIGG">"Error Table"</a>, <a href="#CIHGBHCE">"History Logging Properties"</a>, and <a href="#CIHDIEFA">"Orphan Management Policies"</a>.</p>
<p><a id="sthref2061"></a><span class="subhead3">Target Load Order&nbsp;</span>Specifies the order in which multiple targets within the same mapping are loaded. Oracle Warehouse Builder determines a default order based on the foreign key relationships. Use this property to overrule the default order.</p>
<a id="CIHDGCCG"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">AW Properties</h5>
<p><a id="sthref2062"></a><span class="subhead3">AW Name&nbsp;</span>Represents the name of the analytic workspace in which the dimension data is stored.</p>
<p><a id="sthref2063"></a><span class="subhead3">Aw Staged Load&nbsp;</span>This property is applicable to MOLAP dimensions only. Select this option to stage the set-based load data into a temporary table before loading into the analytic workspace.</p>
<p>Each group in the Dimension operator represents a dimension level. You can set the following properties for each dimension level:</p>
<ul>
<li>
<p><span class="bold">Extracting Type:</span> Represents the extraction operation to be performed when the dimension is used as a source. Select <span class="bold">Extract Current Only (Type 2 Only)</span> to extract current records only from a Type 2 SCD. This property is valid only for Type 2 SCDs. Select <span class="bold">Extract All</span> to extract all records from the dimension or SCD.</p>
</li>
<li>
<p><span class="bold">Default Expiration Time of Open Record:</span> This property is applicable to Type 2 SCDs only. It represents a date value that is used as the expiration time of a newly created open record. The default value is NULL.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you set the Commit Control property to Manual, ensure that you set the Automatic Hints Enable property to false. Otherwise, your mapping may not run correctly.</div>
<p><a id="sthref2064"></a><span class="subhead3">Aw Truncate Before Load&nbsp;</span>This property is applicable to MOLAP dimensions only. It indicates whether all existing dimension data should be truncated before loading fresh data. Set this property to YES to truncate any existing dimension data before you load fresh data.</p>
</div>
<!-- class="sect4" -->
<a id="CIHGADGA"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Dimension Properties</h5>
<p><a id="CIHGFACA"></a><span class="subhead3">Loading Type&nbsp;</span>Represents the type of operation to be performed on the dimension. The options that you can select are as follows:</p>
<ul>
<li>
<p><span class="bold">LOAD:</span> Select this value to load data into the dimension or Slowly Changing Dimension.</p>
</li>
<li>
<p><span class="bold">REMOVE:</span> Select this value to delete data from the dimension or Slowly Changing Dimension.</p>
</li>
</ul>
<p>While you are loading or removing data, a lookup is performed to determine if the source record exists in the dimension. The matching is performed by the natural key identifier. If the record exists, then a REMOVE operation removes existing data. A LOAD operation updates existing data and then loads new data.</p>
<p>When you remove a parent record, the child records have references to a nonexistent parent.</p>
<p><a id="CIHCACBA"></a><span class="subhead3">Type 2 Extract/Remove Current Only&nbsp;</span>This property is applicable only to Type 2 SCDs. Use this property to specify which records are to be extracted or removed. You can set the following values for this property:</p>
<ul>
<li>
<p><span class="bold">YES:</span> When you are extracting data from the Type 2 SCD, only the current record that matches the business identifier in the source data is extracted. When you are removing data from a Type 2 SCD, only the current record that matches the business identifier in the source data is closed (expiration date is set either to SYSDATE or to the date defined in the <a href="#CIHEAIFF">"Default Expiration Time of Open Record"</a> property).</p>
<p>In a Type 2 SCD that uses a snowflake implementation, you cannot remove a record if it has child records.</p>
</li>
<li>
<p><span class="bold">NO:</span> When you are extracting data from a Type 2 SCD, all the records, including historical records, that match the business identifier from the source data are extracted from the dimension.</p>
<p>When you are removing data from the Type 2 SCD, all records, including historical records, that match the business identifier in the source data set are deleted.</p>
</li>
</ul>
<a id="CIHFGIGG"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Error Table</h5>
<p><a id="sthref2065"></a><span class="subhead3">DML Error Table Name&nbsp;</span>Represents the name of the table that stores DML errors associated with the dimension. To log DML errors, you must enable DML error logging for the dimension. For more information about DML error logging, see <a href="errors_trouble.htm#CIHCFJJB">"Using DML Error Logging"</a>.</p>
<p><a id="CIHCFIIH"></a><span class="subhead3">Error Table Name&nbsp;</span>Represents the name of the error table that stores logical errors caused by enforcing data profiling and orphan management. If you specify a value for the Error Table Name property of a dimension, then the Error Table Name property of the Dimension operator associated with this dimension displays the same name and you cannot edit the name. Else, specify the name if the error table.</p>
<p><a id="sthref2066"></a><span class="subhead3">Truncate Error Table(s)&nbsp;</span>This property is applicable to error tables only and not to DML error tables. Set this property to <span class="bold">Yes</span> to truncate error tables very time they are used.</p>
</div>
<!-- class="sect4" -->
<a id="CIHGBHCE"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">History Logging Properties</h5>
<p><a id="CIHCIDAI"></a><span class="subhead3">Default Effective Time of Initial Record&nbsp;</span>This property is applicable to Type 2 SCDs only. It represents the default value assigned as the effective time for the initial load of a particular dimension record. The default value set for this property is <code>SYSDATE</code>.</p>
<p><a id="CIHJHFCI"></a><span class="subhead3">Default Effective Time of Open Record&nbsp;</span>This property is applicable to Type 2 SCDs only. It represents the default value set for the effective time of the open records, after the initial record. The default value of this property is <code>SYSDATE</code>. This value should not be modified.</p>
<p><a id="CIHEAIFF"></a><span class="subhead3">Default Expiration Time of Open Record&nbsp;</span>This property is applicable to Type 2 SCDs only. It represents a date value that is used as the expiration time of a newly created open record for all the levels in the dimension. The default value is NULL.</p>
<p><a id="CIHEEFHG"></a><span class="subhead3">Support Multiple History Loading&nbsp;</span>This property is applicable only to Type 2 SCDs. Select this option to load multiple rows for a particular business identifier during a single load operation. Then you select this option, the mapping is run in row-based non-bulk mode.</p>
<p>To load multiple records for a particular business identifier, ensure that the effective date of the Type 2 levels are loaded from a source or transformation operator.</p>
<p>Typically, this situation would arise when your dimension records change multiple times within during the period between two dimension updates. For example, you update your dimension only once per day, but there are multiple changes to a dimension record within that day.</p>
<p><a id="sthref2067"></a><span class="subhead3">Support Out of Order History Loading&nbsp;</span>This property is applicable only to Type 2 SCDs. Setting this property to true enables you to load out-of-order changes to historical records in consecutive data loads.</p>
<p>You can also use this property with <a href="#CIHEEFHG">"Support Multiple History Loading"</a>. However, using this property has a performance overhead.</p>
<p><a id="CIHEAFFE"></a><span class="subhead3">Type 2 Gap&nbsp;</span>This property is applicable to Type 2 SCDs only. It represents the time interval between the expiration time of an old record and the effective time of the current record when a record is versioned.</p>
<p>When the value of a triggering attribute is updated, the current record is closed and a new record is created with the updated values. Because the closing of the old record and opening of the current record occur simultaneously, it is useful to have a time interval between the expiration time of the old record and the effective time of the open record, instead of using the same value for both.</p>
<p><a id="CIHBBJBF"></a><span class="subhead3">Type 2 Gap Units&nbsp;</span>This property is applicable for Type 2 SCDs only. It represents the unit of time used to measure the gap interval represented in the Type2 Gap property. The options are: Seconds, Minutes, Hours, Days, and Weeks. The default value is Seconds.</p>
</div>
<!-- class="sect4" -->
<a id="CIHDIEFA"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Orphan Management Policies</h5>
<p><a id="sthref2068"></a><span class="subhead3">Create Default Level Records&nbsp;</span>Indicates if default level records should be created for the dimension to which the Dimension operator is bound. Set this property to Yes to create default rows for the business identifier and surrogate identifier of the dimension.</p>
<p>The values used by the default record depend on the orphan management policy that you selected for the dimension to which the Dimension operator is bound. If you specified No Maintenance as the orphan management policy of the dimension, then use the Default Value property of the attributes in each level of Dimension operator to specify the values that the default record should use. If you set the orphan management policy of the dimension to Default Parent and specified the attribute values to be used for the default record, then these values are automatically displayed in the Default Value property of the attributes and these values are used for the default records. If you do not specify default values for the attributes in the dimension levels, then the default records are created using NULL values.</p>
<p>You can use this property to generate default records for time dimensions too. Time dimensions do not have an Orphan tab where you can use to set the orphan management policy. But, must use a time dimension with a cube that has its orphan management policy set to a value other than No Maintenance, you can generate default records for the time dimension by setting the Default Value property of the level attributes and then setting the Create Default Level Records property of the time dimension to Yes.</p>
<p><a id="sthref2069"></a><span class="subhead3">LOAD Policy for Invalid Keys&nbsp;</span>Represents the orphan management policy to be used to load records that contain an invalid parent record. The options are No Maintenance, Default Parent, and Reject Orphan.</p>
<p><a id="sthref2070"></a><span class="subhead3">LOAD Policy for NULL Keys&nbsp;</span>Represents the orphan management policy to be used to load records that contain a NULL parent key reference. The options are No Maintenance, Default Parent, and Reject Orphan.</p>
<p><a id="sthref2071"></a><span class="subhead3">Record Error Rows&nbsp;</span>Select Yes to store orphan records contained in the source data set that is used to load the dimension in the error table. The error table is represented by the <a href="#CIHCFIIH">"Error Table Name"</a> property.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDHIGAJ"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Expand <a id="sthref2072"></a><a id="sthref2073"></a><a id="sthref2074"></a>Object Operator</h3>
<p>The Expand Object operator enables you to expand an object type and obtain the individual attributes that comprise the object type.</p>
<img width="18" height="20" src="img/expand_object_icon.gif" alt="Description of expand_object_icon.gif follows" /><br />
<a id="sthref2075" href="img_text/expand_object_icon.htm">Description of the illustration expand_object_icon.gif</a><br />
<br />
<p>You can bind and synchronize an Expand Object operator with a workspace object type. To avoid generation errors in the mapping, ensure that you deploy the workspace object type before you deploy the mapping.</p>
<p>The Expand Object operator has one input group and one output group. The input group represents the object type to expand to obtain its individual attributes. When you bind an Expand Object operator to a workspace object, the output group of the operator contains the individual attributes that comprise the object type.</p>
<p>To successfully deploy a mapping that contains an Expand Object operator, ensure that the following conditions are satisfied.</p>
<ul>
<li>
<p>The schema that contains the source tables must be on the same instance as the warehouse schema.</p>
</li>
<li>
<p>The warehouse schema is granted the SELECT privilege on the source tables.</p>
</li>
<li>
<p>The warehouse schema is granted the EXECUTE privilege on all the object types and nested tables used in the Expand Object operator.</p>
</li>
</ul>
<p><a href="#CHDFEDCB">Figure 25-3</a> displays a mapping that uses an Expand Object operator. The source table <code>CUSTOMERS</code> contains a column <code>CUSTOMER_ADDRESS</code> of data type <code>ADDR_TYPE</code>, a SQL object type. But the target table <code>CUST</code> contains four different columns, of Oracle built-in data types, that store each component of the customer address. To obtain the individual attributes of the column <code>CUSTOMER_ADDRESS</code>, create an Expand Object operator that is bound to the object type <code>ADDR_TYPE</code>. You then map the <code>CUSTOMER_ADDRESS</code> column to the input group of an Expand Object operator. The output group of the Expand Object operator contains the individual attributes of the column <code>CUSTOMER_ADDRESS</code>. Map these output attributes to the target operator.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDFEDCB"></a>Figure 25-3 Expand Operator in a Mapping</p>
<img width="670" height="317" src="img/expand_object_oper_map.gif" alt="Description of Figure 25-3 follows" /><br />
<a id="sthref2076" href="img_text/expand_object_oper_map.htm">Description of "Figure 25-3 Expand Operator in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<p><span class="bold">To define an Expand Object operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop an Expand Object operator onto the Mapping Editor canvas.</p>
</li>
<li>
<p>Use the Add Expand Object dialog box to create or select an object. For more information about these options, see <a href="mappings.htm#CHDEJAAD">"Using the Add Operator Dialog Box to Add Operators"</a>.</p>
</li>
<li>
<p>Map the source attribute that is expanded to the input group of the Expand Object operator.</p>
<p>The signature of the input object type should be same as that of the Expand Object operator.</p>
</li>
<li>
<p>Map the output attributes of the Expand Object operator to the target attributes.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDFJJBB"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">External <a id="sthref2077"></a><a id="sthref2078"></a><a id="sthref2079"></a>Table Operator</h3>
<p>The External Table operator enables you to source data stored in external tables in the workspace. You can then load the external table data into another workspace object or perform transformations on the data. For example, you can source data stored in an external table, transform the data using mapping operators, and then load the data into a dimension or a cube.</p>
<img width="21" height="21" src="img/external_table_icon.gif" alt="Description of external_table_icon.gif follows" /><br />
<a id="sthref2080" href="img_text/external_table_icon.htm">Description of the illustration external_table_icon.gif</a><br />
<br />
<p><a href="#CHDHHBJI">Figure 25-4</a> displays a mapping that uses the External Table operator. The External Table operator <code>EXPENSE_CATEGORY_EXT</code> is bound to the external table of the same name in the workspace. The data stored in this external table is used to load the dimension <code>EXPENSE_CATEGORIES</code>.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDHHBJI"></a>Figure 25-4 External Table Operator in a Mapping</p>
<img width="577" height="248" src="img/ext_tab_mapping.gif" alt="Description of Figure 25-4 follows" /><br />
<a id="sthref2081" href="img_text/ext_tab_mapping.htm">Description of "Figure 25-4 External Table Operator in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<p>To create a mapping that contains an External Table operator:</p>
<ol>
<li>
<p>Drag and drop an External Table operator onto the Mapping Editor canvas.</p>
<p>Oracle Warehouse Builder displays the Add External Table dialog box.</p>
</li>
<li>
<p>Use the Add External Table dialog box to create or select an external table. For more information about these options, see <a href="mappings.htm#CHDEJAAD">"Using the Add Operator Dialog Box to Add Operators"</a>.</p>
</li>
<li>
<p>Map the attributes from the output group of the External Table operator to the target operator or the intermediate transformation operator.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1178363"></a>
<div class="sect2">
<h3 class="sect2">Mapping Input Parameter Operator</h3>
<p>You can introduce information external to Oracle Warehouse Builder as input into a mapping using a Mapping Input Parameter.</p>
<img width="20" height="20" src="img/input_parm.gif" alt="Description of input_parm.gif follows" /><br />
<a id="sthref2082" href="img_text/input_parm.htm">Description of the illustration input_parm.gif</a><br />
<br />
<p>For example, you can use a Mapping Input Parameter operator to pass SYSDATE to a mapping that loads data to a staging area. Use the same Mapping Input Parameter operator to pass the timestamp to another mapping that loads the data to a target.</p>
<p>When you generate a mapping, a PL/SQL package is created. Mapping input parameters become part of the signature of the main procedure in the package.</p>
<p>The Mapping Input Parameter operator has a cardinality of one. It creates a single row set that can be combined with another row set as input to the next operator.</p>
<p>Each Mapping Input Parameter operator becomes an output attribute in the Mapping Input Parameter operator. These output attributes can then be used by connecting them to other operators within the Mapping Editor.</p>
<p>When you define the Mapping Input Parameter operator, you specify a data type and an optional default value.</p>
<p><span class="bold">To define a Mapping Input Parameter operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop a Mapping Input Parameter operator onto the Mapping Editor canvas.</p>
</li>
<li>
<p>Right-click the Mapping Input Parameter operator and select <span class="bold">Open Details</span>.</p>
<p>The Mapping Input Parameter Editor is displayed.</p>
</li>
<li>
<p>Select the Output Attributes link on the left, to display the Output Attributes tab.</p>
</li>
<li>
<p>To add an output attribute, click a blank field in the Attribute column and provide a name for the output attribute. Also specify details such as data type, length, precision, scale, and seconds description for the attribute, as applicable.</p>
<p>You can rename the attributes and define the data type and other attribute properties.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to close the Mapping Input Parameter Editor.</p>
</li>
<li>
<p>Connect the output attribute of the Mapping Input Parameter operator to an attribute in the target operator.</p>
<p><a href="#i1147064">Figure 25-5</a> displays the mapping that uses a Mapping Input Parameter operator.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1147064"></a>Figure 25-5 Mapping Editor Showing A Mapping Input Parameter</p>
<img width="664" height="219" src="img/inputparm_map.gif" alt="Description of Figure 25-5 follows" /><br />
<a id="sthref2083" href="img_text/inputparm_map.htm">Description of "Figure 25-5 Mapping Editor Showing A Mapping Input Parameter"</a><br />
<br /></div>
<!-- class="figure" --></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1135333"></a>
<div class="sect2">
<h3 class="sect2">Mapping Output <a id="sthref2084"></a><a id="sthref2085"></a><a id="sthref2086"></a>Parameter Operator</h3>
<p><a id="sthref2087"></a><a id="sthref2088"></a>Use a single Mapping Output Parameter operator to send values out of a PL/SQL mapping to applications external to Oracle Warehouse Builder.</p>
<img width="20" height="20" src="img/output_parm.gif" alt="Description of output_parm.gif follows" /><br />
<a id="sthref2089" href="img_text/output_parm.htm">Description of the illustration output_parm.gif</a><br />
<br />
<p>A Mapping Output Parameter operator is not valid for a SQL*Loader mapping. When you generate a mapping, a PL/SQL package is created. Mapping Output Parameters become part of the signature of the main procedure in the package.</p>
<p>The Mapping Output Parameter operator has only one input group and no output groups. You can have only one Mapping Output Parameter operator in a mapping. Only attributes that are not associated with a row set can be mapped into a Mapping Output Parameter operator. For example, constant, input parameter, output from a premapping process, or output from a post process can all contain attributes that are not associated with a row set.</p>
<p><span class="bold">To define a Mapping Output Parameter operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop a Mapping Output Parameter operator onto the Mapping Editor canvas.</p>
</li>
<li>
<p>Right-click the Mapping Output Parameter operator and select <span class="bold">Open Details.</span></p>
<p>The Mapping Output Parameter Editor is displayed.</p>
</li>
<li>
<p>Click the Input Attributes tab link on the left to display the Input Attributes page.</p>
</li>
<li>
<p>To add an input attribute, click a blank field in the Attribute column and provide a name for the input attribute. Also specify details such as data type, length, precision, scale, and seconds description for the attribute, as applicable.</p>
<p>You can rename the attributes and define the data type and other attribute properties.</p>
</li>
<li>
<p>Click <span class="bold">OK</span> to close the Mapping Output Parameter editor.</p>
</li>
<li>
<p>Connect the input attribute of the Mapping Output Parameter operator to an attribute in the target operator.</p>
<p><a href="#i1147135">Figure 25-6</a> displays an example of a Mapping Output Parameter operator used in a mapping.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1147135"></a>Figure 25-6 Mapping Editor Showing An Output Parameter Operator</p>
<img width="540" height="205" src="img/outputparm_map.gif" alt="Description of Figure 25-6 follows" /><br />
<a id="sthref2090" href="img_text/outputparm_map.htm">Description of "Figure 25-6 Mapping Editor Showing An Output Parameter Operator"</a><br />
<br /></div>
<!-- class="figure" --></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDDBBJF"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Materialized <a id="sthref2091"></a><a id="sthref2092"></a><a id="sthref2093"></a>View Operator</h3>
<p><a id="sthref2094"></a><a id="sthref2095"></a><a id="sthref2096"></a><a id="sthref2097"></a>The Materialized View operator enables you to source data from or load data into a materialized view stored in the workspace.</p>
<img width="21" height="21" src="img/mview.gif" alt="Description of mview.gif follows" /><br />
<a id="sthref2098" href="img_text/mview.htm">Description of the illustration mview.gif</a><br />
<br />
<p>For example, you can use the data stored in a materialized view to load a cube. The Materialized View operator has one I/O group called INOUTGRP1. You cannot add additional groups to this operator, but you can add attributes to the existing I/O group.</p>
<p>You can bind and synchronize a Materialized View operator to a workspace materialized view. The workspace materialized view must be deployed before the mapping that contains the Materialized View operator is generated to avoid errors in the generated code package.</p>
<p><a href="#CHDHJDDF">Figure 25-7</a> displays a mapping that uses a Materialized View operator. The data from the two source tables <code>PRODUCTS</code> and <code>ALL_SALES</code> is joined using a Joiner operator. This data is then aggregated using an Aggregator operator. The aggregated data is used to load the materialized view <code>SALES_MV</code>.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDHJDDF"></a>Figure 25-7 Mapping that Contains a Materialized View Operator</p>
<img width="650" height="302" src="img/mv_map.gif" alt="Description of Figure 25-7 follows" /><br />
<a id="sthref2099" href="img_text/mv_map.htm">Description of "Figure 25-7 Mapping that Contains a Materialized View Operator"</a><br />
<br /></div>
<!-- class="figure" -->
<p><span class="bold">To create a mapping that contains a Materialized View operator:</span></p>
<ol>
<li>
<p>Drag and drop a Materialized View operator onto the Mapping Editor canvas.</p>
<p>Oracle Warehouse Builder displays the Add Materialized View dialog box.</p>
</li>
<li>
<p>Use the Add Materialized View dialog box to create or select a materialized view. For more information about these options, see <a href="mappings.htm#CHDEJAAD">"Using the Add Operator Dialog Box to Add Operators"</a>.</p>
</li>
<li>
<p>Map the attributes of the Materialized View operator.</p>
<p>If you are using the Materialized View operator as a target, connect the source attributes to the Materialized View operator attributes. If you are using the materialized view as a source, then connect the Materialized View operator attributes to the target.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDBHCEI"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Queue <a id="sthref2100"></a><a id="sthref2101"></a><a id="sthref2102"></a>Operator</h3>
<p>A Queue operator enables you to use advanced queues as sources or targets in mappings.</p>
<img width="22" height="22" src="img/queue_oper.gif" alt="This icon is described in the surrounding text." /><br />
<p>Some of the most critical tasks in creating and maintaining a data warehouse include refreshing existing data, and adding new data from the operational databases. Use the Queue operator to capture changes made to source objects and send those changes to a staging database or directly to a data warehouse or operational data store.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot use a Queue operator as a source and target in the same mapping.</div>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2103"></a>
<h4 class="sect3">Using a Queue Operator</h4>
<p>You have the following options for using a Queue operator:</p>
<ul>
<li>
<p><span class="bold">Define a new Queue operator:</span> Drag a Queue operator from the Palette onto the mapping. The Mapping Editor displays a wizard.</p>
</li>
<li>
<p><span class="bold">Edit an existing Queue operator:</span> Right-click the Queue operator and select <span class="bold">Open Details</span>.</p>
</li>
</ul>
<p>For an example of using a Queue operator, see <a href="data_flow_opers.htm#BABHFCHB">"LCR Cast Operator"</a>.</p>
<p>Whether you are using the operator wizard or the Operator Editor, complete the following tasks:</p>
<ul>
<li>
<p><a href="#CIHFBBEA">"Selecting the Queue"</a></p>
</li>
<li>
<p><a href="#CIHIACCB">"Selecting the Source Type for a Queue Operator"</a></p>
</li>
<li>
<p><a href="#CIHFBHEE">"Selecting the User-Defined or Primary Type for a Queue Operator"</a></p>
</li>
<li>
<p><a href="#CIHEFCJJ">"Selecting the Source Object"</a></p>
</li>
<li>
<p><a href="#CIHHFEDC">"Specifying the Source Changes to Process"</a></p>
</li>
</ul>
<p>The tasks that you must perform depend on the payload type of the advanced queue to which the Queue operator is bound. For all payload types, except <code>SYS.ANYDATA</code>, you must select the queue to which the Queue operator should be bound. For a payload type of <code>SYS.ANYDATA</code>, you must complete all the tasks listed.</p>
</div>
<!-- class="sect3" -->
<a id="CIHFBBEA"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Selecting the Queue</h4>
<p>Use the Select Queue page of the Queue Operator Wizard or the Select page of the Queue Operator Editor to select the advanced queue to which the operator is bound.</p>
<p>The node tree on this page lists the advanced queues in the current project. Select the advanced queue to which your Queue operator should be bound.</p>
</div>
<!-- class="sect3" -->
<a id="CIHIACCB"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Selecting the Source Type for a Queue Operator</h4>
<p>Use the Select Source Type page to specify if the queue is used as a real-time queue or a batch queue. Also specify the type of messages that the queue receives.</p>
<p>Select one of the following options to indicate the type of queue:</p>
<ul>
<li>
<p><span class="bold">Real-Time Source</span></p>
<p>Select this option to indicate that the Queue operator represents a real-time source. Real-time queues enable you to populate source changes to the target objects instantly. All DML changes to the source objects associated with the Queue operator, as specified in <a href="#CIHEFCJJ">"Selecting the Source Object"</a>, are instantly added to the AQ.</p>
<p>Mappings that contain real-time sources are called real-time mappings. You must deploy real-time mappings. Subsequently, whenever source changes are added to the queue, Oracle Warehouse Builder automatically runs the mapping and publishes the changes to the target objects.</p>
</li>
<li>
<p><span class="bold">Batch Source</span></p>
<p>Select this option to indicate that the Queue operator represents a batch source. Batch mappings populate the target objects with changes from the source only when you explicitly run the mapping.</p>
<p>When you define a batch source, you do not provide any more details in the wizard or editor for a batch source. All the wizard or editor pages related to the other tasks for defining the Queue operator are disabled.</p>
</li>
</ul>
<p>For real-time queues that use a <code>SYS.ANYDATA</code> payload, you must specify the format of the messages in the queue. Select one of the following options to specify the message format:</p>
<ul>
<li>
<p><span class="bold">Oracle Capture Process Message Format</span></p>
<p>Specifies that the messages received are in the form of LCRs. Oracle Warehouse Builder takes care of capturing DML changes, formatting the changes into LCRs and adding the LCRs to the queue.</p>
<p>For more information about LCRs, see <a class="olink STRMS" href="../../server.112/e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a>.</p>
<p>When you choose this option, you must specify the source table and the DML operations that must be captured as described in <a href="#CIHEFCJJ">"Selecting the Source Object"</a> and <a href="#CIHHFEDC">"Specifying the Source Changes to Process"</a>.</p>
</li>
<li>
<p><span class="bold">User-Defined Message Format</span></p>
<p>Specifies that the messages received by the queue are in a user-defined format. When you choose this option, specify the user-defined type that represents the message format using the Select User-Defined or Primary Type page as described in <a href="#CIHFBHEE">"Selecting the User-Defined or Primary Type for a Queue Operator"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHFBHEE"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Selecting the User-Defined or Primary Type for a Queue Operator</h4>
<p>When your queue uses a user-defined message format, you must specify the user-defined type that represents the message format. Use the User-Defined or Primary Type page to select the user-defined type.</p>
<p>This page contains a node tree that you can to select the user-defined type. The Primary Data Types node lists the primary data types you can select. If your message format uses primary data types, then expand this node and select a primary data type. A separate node is displayed for each Oracle module that contains user-defined types. Expand the required module node and select the user-defined type they represents the queue message format.</p>
</div>
<!-- class="sect3" -->
<a id="CIHEFCJJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Selecting the Source Object</h4>
<p>Use the Select Source page to specify the source tables for which you want to capture data changes. This page is enabled only if your queue is a real-time source that uses the Oracle capture message format.</p>
<p>The Available Tables section lists the tables for which can capture data changes. Select the tables and use the arrows to move them to the Selected Tables section. You can choose multiple tables by holding down the Ctrl key and selecting the tables.</p>
</div>
<!-- class="sect3" -->
<a id="CIHHFEDC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Specifying the Source Changes to Process</h4>
<p>Use the Source Changes to Process page to specify the DML changes that should be captured for the tables selected on the Select Source page. This page is enabled only if your queue is a real-time source that uses an Oracle Capture Message Format.</p>
<p>The Identify Changes to Process section lists the tables selected on the Select Objects page. For each tables, use the check boxes to the right of the table name to select the DML operations that should be captured. Select <span class="bold">Insert</span> for a table to capture any rows inserted in the table. To capture any modifications made to a table, select <span class="bold">Update</span> to the right of the table. To capture rows deleted from a table, select <span class="bold">Delete</span> to the right of the table name.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1175826"></a>
<div class="sect2">
<h3 class="sect2">Sequence <a id="sthref2104"></a><a id="sthref2105"></a><a id="sthref2106"></a>Operator</h3>
<p>A Sequence operator generates sequential numbers that increment for each row.</p>
<img width="20" height="20" src="img/sequence.gif" alt="Description of sequence.gif follows" /><br />
<a id="sthref2107" href="img_text/sequence.htm">Description of the illustration sequence.gif</a><br />
<br />
<p>For example, you can use the Sequence operator to create surrogate keys while loading data into a dimension table. You can connect a Sequence to a target operator input or to the inputs of other types of operators. You can combine the sequence outputs with outputs from other operators.</p>
<p>Because sequence numbers are generated independently of tables, the same sequence can be used for multiple tables. Sequence numbers may not be consecutive, because the same sequence can be used by multiple sessions.</p>
<p>This operator contains an output group containing the following output attributes:</p>
<ul>
<li>
<p><span class="bold">CURRVAL:</span> Generates from the current value</p>
</li>
<li>
<p><span class="bold">NEXTVAL:</span> Generates a row set of consecutively incremented numbers beginning with the next value</p>
</li>
</ul>
<p>You can bind and synchronize Sequences to a workspace sequence in one of the modules. The workspace sequence must be generated and deployed before the mapping containing the Sequence is deployed to avoid errors in the generated code package. See <a href="mappings.htm#CHDEJAAD">"Using the Add Operator Dialog Box to Add Operators"</a> for more information.</p>
<p>Generate mappings with sequences using row-based mode. Sequences may be incremented even if rows are not selected. If you want a sequence to start from the last number, then do not run your SQL package in set-based or in set-based with failover operating modes. See <a href="ref_maps_processflows.htm#i1134262">"Runtime Parameters"</a> for more information about configuring mode settings.</p>
<p><a href="#BCFFJGFI">Figure 25-8</a> shows a mapping that uses a Sequence operator to automatically generate the primary key of a table. The NEXTVAL attribute of the Sequence operator is mapped to an input attribute of the target table <code>UNIFIED_PRODUCTS</code>. The other input attributes from the source table, <code>ORACLE_PRODUCTS</code>, are mapped directly to the target.</p>
<div class="figure">
<p class="titleinfigure"><a id="BCFFJGFI"></a>Figure 25-8 Sequence Operator in a Mapping</p>
<img width="490" height="292" src="img/sequence_map.gif" alt="Description of Figure 25-8 follows" /><br />
<a id="sthref2108" href="img_text/sequence_map.htm">Description of "Figure 25-8 Sequence Operator in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<p><span class="bold">To define a Sequence operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop the Sequence operator onto the Mapping Editor canvas.</p>
<p>Oracle Warehouse Builder displays the Add Sequence dialog box.</p>
</li>
<li>
<p>Use the Add Sequence dialog box to create or select a sequence. For more information about these options, see <a href="mappings.htm#CHDEJAAD">"Using the Add Operator Dialog Box to Add Operators"</a>.</p>
</li>
<li>
<p>Connect the required output attribute from the Sequence operator to a target attribute.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDJEFIB"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Table <a id="sthref2109"></a><a id="sthref2110"></a><a id="sthref2111"></a>Operator</h3>
<p>The Table operator enables you to source data from and load data into tables stored in the workspace.</p>
<img width="19" height="20" src="img/table.gif" alt="Description of table.gif follows" /><br />
<a id="sthref2112" href="img_text/table.htm">Description of the illustration table.gif</a><br />
<br />
<p>You can bind and synchronize a Table operator to a workspace table. To avoid errors in the generated code package, the workspace table must be deployed before the mapping that contains the Table operator is generated.</p>
<p><a href="#BCFFJGFI">Figure 25-8</a> displays a mapping that uses Table operators as both source and target. <a href="#BCFHAIEA">Figure 25-2</a> displays a mapping that uses the Table operator as a target.</p>
<p><span class="bold">To define a Table operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop a Table operator onto the Mapping Editor canvas.</p>
<p>Oracle Warehouse Builder displays the Add Table dialog box.</p>
</li>
<li>
<p>Use the Add Table dialog box to create or select a table. For more information about these options, see <a href="mappings.htm#CHDEJAAD">"Using the Add Operator Dialog Box to Add Operators"</a>.</p>
</li>
<li>
<p>Map the attributes of the Table operator.</p>
<p>If you are using the table as a target, connect the source attributes to the Table operator attributes. If you are using the table as a source, then connect the Table operator attributes to the target.</p>
</li>
</ol>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2113"></a>
<h4 class="sect3">Merge Optimization for Table Operators</h4>
<p>You can enable the Merge Optimization property for Table operators. When set to True, this property optimizes the invocation or execution of expressions and transformations in the <code>MERGE</code> statement.</p>
<p>For example, consider a mapping in which the target table contains a column that is part of the update operation only and is mapped to a transformation. In previous releases, Oracle Warehouse Builder would run the transformation for all rows, including rows that did not require transformation. Beginning in this release, if Merge Optimization is enabled, then Oracle Warehouse Builder calls the transformation only in the update part of the <code>MERGE</code> statement.</p>
</div>
<!-- class="sect3" -->
<a id="CIHEFACA"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Chunking<a id="sthref2114"></a><a id="sthref2115"></a> for Table Operators</h4>
<p>Chunking enables you to divide the source data in a mapping into chunks. The chunks are defined by a data partitioning algorithm and each chunk is then processed and loaded into the targets separately.</p>
<p>For more information about chunking, see <a href="mappings.htm#BEIJBDDE">"About Chunking for PL/SQL Mappings"</a>.</p>
<p>To use source data chunking for a Table operator, select the Table operator on the mapping canvas. The Property Inspector displays the properties of the Table operator.</p>
<p>You can perform both serial or parallel chunking. To perform serial chunking, set the <a href="#CIHDJAIB">"Chunking Enabled"</a> and <a href="#CIHCFEDC">"Chunk Filter Condition"</a> options under the SCD Updates node. To perform parallel chunking, set the <a href="#CIHCJICH">"Chunking Expression"</a> option under the Chunking node.</p>
<p class="subhead2"><a id="CIHDJAIB"></a>Chunking Enabled</p>
<p>Select this option to enable serial data chunking for the source table represented by the Table operator.</p>
<p>You can enable data chunking for only certain source tables in a mapping. For example, if your mapping contains three Table operators and you enable data chunking for only one Table operator, the entire mapping functionality is run multiple times, once for each data chunk. However, since the other two tables do not have chunking enabled, these sources provide data rows only during the first iteration of the mapping.</p>
<p class="subhead2"><a id="CIHCFEDC"></a>Chunk Filter Condition</p>
<p>The Chunk Filter Condition enables you to specify the condition used to divide source data into multiple chunks while performing serial chunking. For each iteration, the Chunk Filter Condition filters the source data from the source.</p>
<p>Oracle Warehouse Builder provides a predefined mapping constant, get_chunk_iterator, that must be used in all chunk filter conditions. This is an iteration count that starts at 1 and is incremented for each map execution in the chunk processing. You can set the condition to use a value from the data source.</p>
<p>For example, your filter condition can be <code>get_chunk_iterator = INOUTGRP1.CHUNK_GRP_NUM</code>, where <code>CHUNK_GRP_NUM</code> is an attribute in the source table.</p>
<p class="subhead2"><a id="CIHCJICH"></a>Chunking Expression</p>
<p>Use Chunking Expression to set the condition used to divide source data into multiple chunks for parallel chunking.</p>
</div>
<!-- class="sect3" -->
<a id="CIHCHFCD"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating Temporary Tables While Performing ETL</h4>
<p>Oracle Warehouse Builder enables you to use temporary tables while extracting and loading data. Temporary tables are useful when you must extract data from remote sources into multiple targets.</p>
<p>Temporary staging tables are typically used in the dimension loading logic that is automatically generated by the Dimension operator submapping expansion. This prevents problems that would be caused by doing lookups on the target table.</p>
<p>The following properties enable you to create temporary tables while performing ETL.</p>
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref2116"></a>
<h5 class="sect4">Is Temp Stage Table</h5>
<p>When you set the Is Temp Stage Table property to True, any existing bindings for the Table operator are ignored. A temporary staging table is deployed with the mapping and all loading and extracting operations from this Table operator are performed from the staging table.</p>
<p>The name of the deployed table in the database is based on the operator name, with a unique identifier appended to the name to prevent name conflicts. The table is automatically dropped when the map is dropped or redeployed. Before each execution of the mapping, the table is automatically truncated.</p>
<p>When you set this property to its default value of False, it has no effect.</p>
</div>
<!-- class="sect4" -->
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref2117"></a>
<h5 class="sect4">Extra DDL Clauses</h5>
<p>Use this property to add additional clauses to the DDL statement that is used to create the table. For example, use the following <code>TABLESPACE</code> clause to allocate storage for the temporary table in the <code>MY_TBLSPC</code> tablespace, instead of in the default tablespace: <code>TABLESPACE MY_TBLSPC</code>.</p>
<p>If you do not provide a value for the Extra DDL Clauses property, this property has no effect on the table creation.</p>
</div>
<!-- class="sect4" -->
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref2118"></a>
<h5 class="sect4">Temp Stage Table ID</h5>
<p>Use the Temp Stage Table ID property to specify the internal identifier used for the temporary staging table by the code generator. If any other temporary staging table in the mapping has the same value for the Temp Stage Table ID property, then the same deployed temporary staging table is bound to both operators. It enables multiple usages of the same temporary staging table in the same mapping.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2119"></a>
<h4 class="sect3">DML Error Logging</h4>
<p>You can perform DML error logging on target tables. Use the property <span class="bold">DML Error Table Name</span> of the Table operator to specify the name of the error table that stores errors encountered while performing DML operations on that table. The error table is created when you run the mapping containing the Table operator.</p>
<p>For more information about DML error logging, see <a href="errors_trouble.htm#CIHCFJJB">"Using DML Error Logging"</a>.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2120"></a>
<h4 class="sect3">Data Rules and Loading Tables</h4>
<p>In addition to logging DML errors, you can also store logical errors such as data profiling and orphan management errors. Use the <span class="bold">Error Table Name</span> property for the Table operator to specify the name of the table that stores logical errors for the repository table associated with the Table operator. If you have specified a name for the Error Table Name property of the table, then the Error Table Name property of the Table operator associated with this table automatically uses the same name.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDFHADE"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Varray <a id="sthref2121"></a><a id="sthref2122"></a><a id="sthref2123"></a>Iterator Operator</h3>
<p>When you have an object of type nested table or Varray, you can use the Varray Iterator operator to iterate through the values in the table type.</p>
<img width="20" height="20" src="img/varrayiterator.gif" alt="Description of varrayiterator.gif follows" /><br />
<a id="sthref2124" href="img_text/varrayiterator.htm">Description of the illustration varrayiterator.gif</a><br />
<br />
<p>This operator accepts a table type attribute as the source, and generates a value that is of the base element type defined in the nested table or Varray type. If the operator is bound, then reconciliation operations are performed on the operator. Reconciliation operations are not supported for unbound Varray Iterator operators.</p>
<p>You can create the Varray Iterator operator as either a bound operator or an unbound operator. You cannot synchronize or validate an unbound Varray Iterator operator. It has only one input group and one output group. You can have an input group with attributes of other data types. However, there must be at least one table type attribute.</p>
<p>The attributes of the output group are a copy of the attributes of the input group. The only difference is that instead of the table type to which the operator is bound (which is one of the input group attributes), the output group has an attribute that equals the base element type of the input group. The input group is editable. The output group is not editable.</p>
<p><a href="#CIHEGGDD">Figure 25-9</a> displays a mapping that contains a Varray Iterator operator.</p>
<div class="figure">
<p class="titleinfigure"><a id="CIHEGGDD"></a>Figure 25-9 Varray Iterator Operator in a Mapping</p>
<img width="692" height="254" src="img/varrayiterator_map.gif" alt="Description of Figure 25-9 follows" /><br />
<a id="sthref2125" href="img_text/varrayiterator_map.htm">Description of "Figure 25-9 Varray Iterator Operator in a Mapping"</a><br />
<br /></div>
<!-- class="figure" -->
<p><span class="bold">To define a Varray Iterator operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop a Varray Iterator operator onto the Mapping Editor canvas.</p>
<p>Oracle Warehouse Builder displays the Add Varray Iterator dialog box.</p>
</li>
<li>
<p>From the <span class="bold">Add Varray Iterator</span> dialog box, select either an unbound operator or a bound operator.</p>
<ul>
<li>
<p>If you select the unbound operator, then a Varray Iterator operator with no attributes is created. You must create these attributes manually.</p>
</li>
<li>
<p>If you select the bound operator, then you must select one of the available nested table or Varray types shown in the tree. The output attribute equals the base element.</p>
</li>
</ul>
</li>
<li>
<p>Click <span class="bold">OK</span>.</p>
</li>
<li>
<p>Map the attributes of the Varray Iterator operator.</p>
</li>
</ol>
<p>For an unbound operator, right-click the unbound Varray Iterator operator on the Mapping Editor canvas and then select <span class="bold">Open Details</span>. This opens the Varray Iterator editor dialog box. You can add attributes to the input group by using the <span class="bold">Add</span> button. You can only change the data type of the attributes in the output group.</p>
</div>
<!-- class="sect2" -->
<a id="CHDCFGGC"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">View <a id="sthref2126"></a><a id="sthref2127"></a><a id="sthref2128"></a>Operator</h3>
<p>The View operator enables you to source data from or load data into a view stored in the workspace.</p>
<img width="20" height="21" src="img/view.gif" alt="Description of view.gif follows" /><br />
<a id="sthref2129" href="img_text/view.htm">Description of the illustration view.gif</a><br />
<br />
<p>You can bind and synchronize a View operator to a workspace view. The workspace view must be deployed before the mapping that contains the View operator is generated to avoid errors in the generated code package.</p>
<p><span class="bold">To define a View operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop a View operator onto the Mapping Editor canvas.</p>
<p>Oracle Warehouse Builder displays the Add View dialog box.</p>
</li>
<li>
<p>Use the Add View dialog box to create or select a view. For more information about these options, see <a href="mappings.htm#CHDEJAAD">"Using the Add Operator Dialog Box to Add Operators"</a>.</p>
</li>
<li>
<p>Map the attributes of the View operator.</p>
<p>If you are using the view as a target, connect the source attributes to the View operator attributes. If you are using the view as a source, then connect the View operator attributes to the target.</p>
</li>
</ol>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2130"></a>
<h4 class="sect3">Using the View Operator for Inline Views</h4>
<p>You can use the View operator to create inline views in a mapping. For inline views, you must set the following operator properties.</p>
<p><span class="bold">Inlined:</span> Select this property to indicate that the operator represents an inline view.</p>
<p><span class="bold">View Query:</span> Use this property to specify the query text for the inline view. The query text must have column aliases that correspond to the operator attribute names.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDGECDA"></a><a id="WBETL25003"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Remote and non-Oracle Source and Target Operators</h2>
<p>You can bind a target operator in a mapping to an object in a remote Oracle Database location or a non-Oracle Database location such as SQL Server or DB2 through a Gateway location. Such operators are referred to as Gateway targets. Use database links to access these targets. The database links are created using the locations. SAP targets are not supported, because it is not possible to generate a database link to access SAP tables remotely from an Oracle database.</p>
<p>There are certain restrictions on using remote or Gateway targets in a mapping, as described in the following sections:</p>
<ul>
<li>
<p><a href="#CHDIGDJC">"Limitations of Using Non-Oracle or Remote Targets"</a></p>
</li>
<li>
<p><a href="#CHDHHCDC">"Oracle Warehouse Builder Workarounds for Non-Oracle and Remote Targets"</a></p>
</li>
</ul>
<a id="CHDIGDJC"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Limitations of Using Non-Oracle or Remote Targets</h3>
<p>The following limitations apply when you use a remote or Gateway target in a mapping:</p>
<ul>
<li>
<p>You cannot set the Loading Type property of the target operator to TRUNCATE/INSERT.</p>
<p>This results in a validation error when you validate the mapping.</p>
</li>
<li>
<p>For Gateway targets, setting the Loading Type property of the target operator to INSERT/UPDATE produces the same result as setting the loading type to INSERT.</p>
</li>
<li>
<p>The RETURNING clause is not supported in a DML statement.</p>
<p>The RETURNING clause enables you to obtain the ROWIDs of the rows that are loaded into the target using row-based mode. These ROWIDs are recorded by the run time auditing system. But in a remote or Gateway target, the RETURNING clause is not generated, and nulls are passed to the run time auditing system for the ROWID field.</p>
</li>
<li>
<p>In set-based mode, you cannot load data from an Oracle database into a remote or Gateway target. All other modes, including set-based failover, are supported.</p>
<p>When you set the Operating Mode property of the target operator to set-based, a run time error occurs.</p>
</li>
<li>
<p>Row-based bulk processing is not supported.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Release 11.2.0.3 and onwards, the feature Set Based Failover Row Based has been deprecated.</div>
</div>
<!-- class="sect2" -->
<a id="CHDHHCDC"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Oracle Warehouse Builder Workarounds for Non-Oracle and Remote Targets</h3>
<p>When you use a remote or Gateway target in a mapping, default workarounds are used for certain restricted activities. These workarounds are listed for your information only. You need not explicitly do anything to enable these workarounds.</p>
<p>The default workarounds used for a remote or a Gateway target are as follows:</p>
<ul>
<li>
<p>When you set the loading type of a target to INSERT/UPDATE or UPDATE/INSERT in Oracle9<span class="italic">i</span> database and to UPDATE in Oracle Database 11<span class="italic">g</span>, a MERGE statement is generated to implement this mapping in set-based mode. But a MERGE statement cannot be run against remote or Gateway targets. Thus, when you use a remote or Gateway target in a mapping, code is generated without a MERGE statement. The generated code equals that generated when the PL/SQL generation mode is set to Oracle8<span class="italic">i</span>.</p>
</li>
<li>
<p>For set-based DML statements that reference a database sequence that loads into a remote or Gateway target, the GLOBAL_NAMES parameter must be set to TRUE. When code is generated for a mapping, this parameter is set to TRUE if the mapping contains a remote or Gateway target.</p>
</li>
<li>
<p>For a multitable insert to a remote or Gateway target, an INSERT statement is generated per table instead of a multitable insert statement.</p>
</li>
<li>
<p>While performing bulk inserts on a remote or non-Oracle Database, bulk processing code is not generated. Instead, code that processes one row at a time is generated. The Generate Bulk property of the operator is ignored.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The loading types used for remote or Gateway targets are the same as the ones used for other Oracle target operators. For more information about the loading type property, see <a href="#i1139797">"Loading Types for Oracle Target Operators"</a>.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1133481"></a><a id="WBETL25004"></a>
<div class="sect1">
<h2 class="sect1">Using Flat File Source and Target Operators</h2>
<p>The Flat File operator enables you to use flat files as sources or targets in a mapping. The following section describes the usage of Flat File operators.</p>
<a id="CIHCGEDE"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Flat File <a id="sthref2131"></a><a id="sthref2132"></a><a id="sthref2133"></a>Operator</h3>
<p>Use a Flat File operator to extract data from or load data into flat file.</p>
<img width="21" height="21" src="img/flatfile.gif" alt="Description of flatfile.gif follows" /><br />
<a id="sthref2134" href="img_text/flatfile.htm">Description of the illustration flatfile.gif</a><br />
<br />
<p>A Flat File operator can be used either as a source or target in a mapping. However, the two are mutually exclusive within the same mapping. There are differences in code generation languages for flat file sources and targets. Subsequently, mappings can contain a mix of flat files, relational objects, and transformations, but with the restrictions discussed later in this section.</p>
<p>You have the following options for Flat File operators:</p>
<ul>
<li>
<p>Using previously imported flat files</p>
</li>
<li>
<p>Importing and binding new flat files into your mapping</p>
</li>
<li>
<p>Defining new flat file sources or targets in mappings</p>
</li>
</ul>
<p><span class="bold">To use a Flat File operator in a mapping:</span></p>
<ol>
<li>
<p>Drag and drop a Flat File operator onto the Mapping Editor canvas.</p>
</li>
<li>
<p>Use the Add Flat File dialog box to create or select an object. For more information about these options, see <a href="mappings.htm#CHDEJAAD">"Using the Add Operator Dialog Box to Add Operators"</a>.</p>
</li>
<li>
<p>Map the attributes from the Flat File operator to the target, or map attributes from the source to the Flat File operator.</p>
</li>
</ol>
<p>For examples of using flat files as sources and targets in a mapping, see <a href="sap_km_mappings.htm#BEIJCEDC">Chapter 7, "Using SQL*Loader, SAP, and Code Template Mappings"</a>.</p>
<a id="CIHJAAAD"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Flat File Source Operators</h4>
<p>You can introduce data from a flat file into a mapping using either a Flat File operator or an External Table operator. If you are loading large volumes of data, then loading from a flat file enables you to use the DIRECT PATH SQL*Loader option, which results in better performance.</p>
<p>If you are not loading large volumes of data, you can benefit from many of the relational transformations available in the external table feature.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink WBDOD10545" href="../../owb.112/e10582/defining_flatfiles.htm#WBDOD10545"><span class="italic">Oracle Warehouse Builder Sources and Targets Guide</span></a> for a comparison of external tables and flat files.</div>
<p>As a source, the Flat File operator acts as the row set generator that reads from a flat file using the SQL*Loader utility. Do not use a Flat File source operator to map to a flat file target or to an external table. When you design a mapping with a Flat File source operator, you can use the following operators:</p>
<ul>
<li>
<p><a href="data_flow_opers.htm#i1175751">"Filter Operator"</a></p>
</li>
<li>
<p><a href="#i1175748">"Constant Operator"</a></p>
</li>
<li>
<p><a href="#i1175749">"Data Generator Operator"</a></p>
</li>
<li>
<p><a href="#i1175826">"Sequence Operator"</a></p>
</li>
<li>
<p><a href="data_flow_opers.htm#i1175750">"Expression Operator"</a></p>
</li>
<li>
<p><a href="data_flow_opers.htm#i1175595">"Transformation Operator"</a></p>
</li>
<li>
<p>Other relational target objects, excluding the External Table operator.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you use the Sequence, Expression, or Transformation operators, you cannot use the SQL*Loader Direct Load setting as a configuration parameter.</div>
<p>When you use a flat file as a source in a mapping, remember to create a directory from the target location to the flat file location for the mapping to deploy successfully.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2135"></a>
<h4 class="sect3">Flat File Target Operators</h4>
<p>A mapping with a flat file target generates a PL/SQL package that loads data into a flat file instead of loading data into rows in a table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A mapping can contain a maximum of 50 Flat File target operators.</div>
<p>You can use an existing flat file with either a single record type or multiple record types. If you use a multiple-record-type flat file as a target, then you can only map to one of the record types. To load all of the record types in the flat file from the same source, then you can drop the same flat file into the mapping as a target again and map to a different record type. For an example, see <a href="etl_performance.htm#i1147024">"Using Direct Path Loading to Ensure Referential Integrity in SQL*Loader Mappings"</a>. Alternatively, create a separate mapping for each record type to load.</p>
<p>For more information about creating a new flat file target, see <a class="olink WBDOD" href="../e10582/toc.htm"><span class="italic">Oracle Warehouse Builder Sources and Targets Guide</span></a>.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref2136"></a>
<h4 class="sect3">Setting Properties for Flat File Source and Target Operators</h4>
<p>You can set properties for a Flat File operator as either a source or target. You can set <a href="#i1171930">"Loading Types for Flat Files"</a> and the <a href="#i1171944">"Field Names in the First Row"</a> setting. All other settings are read-only and depend upon how you imported the flat file.</p>
</div>
<!-- class="sect3" -->
<a id="i1171930"></a>
<div class="sect3">
<h4 class="sect3">Loading Types for Flat Files</h4>
<p>Select a loading type from the list:</p>
<ul>
<li>
<p><span class="bold">Insert:</span> Creates a new target file. If there is an existing target file, then the newly created file replaces the previous file.</p>
</li>
<li>
<p><span class="bold">Update:</span> Creates a new target file if one does not exist. If there is an existing target file, then that file is appended.</p>
</li>
<li>
<p><span class="bold">None:</span> No operation is performed on the data in the target file. This setting is useful for testing purposes. All transformations and extractions are run without affecting the target.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1171944"></a>
<div class="sect3">
<h4 class="sect3">Field Names in the First Row</h4>
<p>Set this property to <span class="bold">True</span> to write the field names in the first row of the operator or <span class="bold">False</span> if you do not.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2968">
<tr>
<td class="cellalignment2977">
<table class="cellalignment2973">
<tr>
<td class="cellalignment2972"><a href="ref_maps_processflows.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2972"><a href="data_flow_opers.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2980">
<table class="cellalignment2971">
<tr>
<td class="cellalignment2972"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2972"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2972"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2972"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2972"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2972"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
