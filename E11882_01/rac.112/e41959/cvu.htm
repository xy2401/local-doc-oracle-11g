<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Cluster Verification Utility Reference</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1056" />
<meta name="dcterms.created" content="2015-06-03T16:55:36Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Clusterware Administration and Deployment Guide" />
<meta name="dcterms.identifier" content="E41959-04" />
<meta name="dcterms.isVersionOf" content="CWADD" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2007, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="crschp.htm" title="Previous" type="text/html" />
<link rel="Next" href="resatt.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e41959.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">12/21</span> <!-- End Header -->
<div id="CWADD1100" class="appendix"><a id="BABBJHHH"></a>
<h1 class="appendix"><span class="secnum">A</span> Cluster Verification Utility Reference</h1>
<p>The <a id="sthref330"></a>Cluster Verification Utility (CVU) performs system checks in preparation for installation, patch updates, or other system changes. Using CVU ensures that you have completed the required system configuration and preinstallation steps so that your Oracle Grid Infrastructure or Oracle Real Application Clusters (Oracle RAC) installation, update, or patch operation completes successfully.</p>
<p>With Oracle Clusterware 11<span class="italic">g</span> release 2 (11.2), Oracle Universal Installer is fully integrated with CVU, automating many CVU prerequisite checks. Oracle Universal Installer runs all prerequisite checks and associated fixup scripts when you run the installer.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink RACAD005" href="../../rac.112/e41960/srvctladmin.htm#RACAD005"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> for information about using the Server Control utility (SRVCTL) to manage CVU</p>
</li>
<li>
<p><a class="olink GINST" href="http://www.oracle.com/pls/topic/lookup?ctx=db112&amp;id=GINST"><span class="italic">Oracle Grid Infrastructure Installation Guide</span></a> and <a class="olink GINST" href="http://www.oracle.com/pls/topic/lookup?ctx=db112&amp;id=GINST"><span class="italic">Oracle Real Application Clusters Installation Guide</span></a> for information about how to manually install CVU</p>
</li>
</ul>
</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
Check for and download updated versions of CVU on Oracle Technology Network at
<p><code dir="ltr"><a href="http://www.oracle.com/technology/index.html">http://www.oracle.com/technology/index.html</a></code></p>
</div>
<p>This appendix describes CVU under the following topics:</p>
<ul>
<li>
<p><a href="#BEHIJAJC">About Cluster Verification Utility</a></p>
<ul>
<li>
<p><a href="#BABGGABE">Overview</a></p>
</li>
<li>
<p><a href="#BEHJBFFH">Operational Notes</a></p>
</li>
<li>
<p><a href="#BGBDGBJF">Special Topics</a></p>
</li>
</ul>
</li>
<li>
<p><a href="#BEHBBBGJ">Cluster Verification Utility Command Reference</a></p>
</li>
<li>
<p><a href="#CACDGCDI">Troubleshooting and Diagnostic Output for CVU</a></p>
</li>
</ul>
<div class="refentry"><a id="BEHIJAJC"></a>
<div id="CWADD530" class="refsect1">
<h2 class="refsect1">About Cluster Verification Utility</h2>
<p>This section includes topics which relate to using CVU.</p>
<ul>
<li>
<p><a href="#BABGGABE">Overview</a></p>
</li>
<li>
<p><a href="#BEHJBFFH">Operational Notes</a></p>
</li>
<li>
<p><a href="#BGBDGBJF">Special Topics</a></p>
</li>
</ul>
<div id="CWADD91016" class="refsect2"><a id="BABGGABE"></a>
<h3 class="refsect2">Overview</h3>
<p>CVU can verify the primary cluster components during an operational phase or stage. A component can be basic, such as free disk space, or it can be complex, such as checking Oracle Clusterware integrity. For example, CVU can verify multiple Oracle Clusterware subcomponents across Oracle Clusterware layers. Additionally, CVU can check disk space, memory, processes, and other important cluster components. A stage could be, for example, database installation, for which CVU can verify whether your system meets the criteria for an Oracle Real Application Clusters (Oracle RAC) installation. Other stages include the initial hardware setup and the establishing of system requirements through the fully operational cluster setup.</p>
<p><a href="#CACDECEB">Table A-1</a> lists <a id="sthref331"></a>verifications you can perform using CVU.</p>
<div id="CWADD91327" class="tblformal">
<p class="titleintable"><a id="sthref332"></a><a id="CACDECEB"></a>Table A-1 Performing Various CVU Verifications</p>
<table class="cellalignment417" title="Performing Various CVU Verifications" summary="CVU Tasks and related commands" dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t4">Verification to Perform</th>
<th class="cellalignment415" id="r1c2-t4">CVU Commands to Use</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t4" headers="r1c1-t4">
<p>System requirements verification</p>
</td>
<td class="cellalignment416" headers="r2c1-t4 r1c2-t4">
<p><code dir="ltr"><a href="#BEHHHICG">cluvfy comp sys</a></code></p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t4" headers="r1c1-t4">
<p>Oracle ACFS verification</p>
</td>
<td class="cellalignment416" headers="r3c1-t4 r1c2-t4">
<p><code dir="ltr"><a href="#CJGFBDCD">cluvfy stage [-pre | -post] cfs</a></code></p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t4" headers="r1c1-t4">
<p>Storage verifications</p>
</td>
<td class="cellalignment416" headers="r4c1-t4 r1c2-t4">
<ul>
<li>
<p><code dir="ltr"><a href="#i997040">cluvfy comp cfs</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGJCCIJ">cluvfy comp space</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGDBBII">cluvfy comp ssa</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CACIFFAC">cluvfy stage [-pre | -post] acfscfg</a></code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r5c1-t4" headers="r1c1-t4">
<p>Network verification</p>
</td>
<td class="cellalignment416" headers="r5c1-t4 r1c2-t4">
<p><code dir="ltr"><a href="#CJGJHIEG">cluvfy stage -post hwos</a></code></p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r6c1-t4" headers="r1c1-t4">
<p>Connectivity verifications</p>
</td>
<td class="cellalignment416" headers="r6c1-t4 r1c2-t4">
<ul>
<li>
<p><code dir="ltr"><a href="#CJGCJAGA">cluvfy comp nodecon</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGFHJJG">cluvfy comp nodereach</a></code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r7c1-t4" headers="r1c1-t4">
<p>Cluster Time Synchronization Services verification</p>
</td>
<td class="cellalignment416" headers="r7c1-t4 r1c2-t4">
<p><code dir="ltr"><a href="#CACJEGGE">cluvfy comp clocksync</a></code></p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r8c1-t4" headers="r1c1-t4">
<p>User and Permissions verification</p>
</td>
<td class="cellalignment416" headers="r8c1-t4 r1c2-t4">
<p><code dir="ltr"><a href="#BEHFJFDG">cluvfy comp admprv</a></code></p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r9c1-t4" headers="r1c1-t4">
<p>Node comparison and verification</p>
</td>
<td class="cellalignment416" headers="r9c1-t4 r1c2-t4">
<p><code dir="ltr"><a href="#BEHFGAHE">cluvfy comp peer</a></code></p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r10c1-t4" headers="r1c1-t4">
<p>Installation verification</p>
</td>
<td class="cellalignment416" headers="r10c1-t4 r1c2-t4">
<ul>
<li>
<p><code dir="ltr"><a href="#CJGCFFJG">cluvfy stage -pre dbcfg</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGGEADI">cluvfy stage -pre dbinst</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGDEEEJ">cluvfy stage [-pre | -post] crsinst</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGEIIJH">cluvfy stage [-pre | -post] hacfg</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGBHBFD">cluvfy stage [-pre | -post] nodeadd</a></code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r11c1-t4" headers="r1c1-t4">
<p>Deletion verification</p>
</td>
<td class="cellalignment416" headers="r11c1-t4 r1c2-t4">
<p><code dir="ltr"><a href="#CACFEIHC">cluvfy stage -post nodedel</a></code></p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r12c1-t4" headers="r1c1-t4">
<p>Cluster Integrity verification</p>
</td>
<td class="cellalignment416" headers="r12c1-t4 r1c2-t4">
<p><code dir="ltr"><a href="#CJGHADDH">cluvfy comp clu</a></code></p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r13c1-t4" headers="r1c1-t4">
<p>Oracle Clusterware and Oracle ASM Component verifications</p>
</td>
<td class="cellalignment416" headers="r13c1-t4 r1c2-t4">
<ul>
<li>
<p><code dir="ltr"><a href="#CJGCDHJH">cluvfy comp acfs</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CACJGCBC">cluvfy comp asm</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGHJHFE">cluvfy comp clumgr</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGEGEJA">cluvfy comp crs</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#BABJDEIC">cluvfy comp dhcp</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#BABJDFAD">cluvfy comp dns</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGBCBHA">cluvfy comp gns</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGEIGGI">cluvfy comp gpnp</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGJEDGG">cluvfy comp ha</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGJHCBC">cluvfy comp nodeapp</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGDFIEH">cluvfy comp ocr</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGJGIEF">cluvfy comp ohasd</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGDDGAE">cluvfy comp olr</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGGFAGF">cluvfy comp scan</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGIIBIG">cluvfy comp software</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CACEAJCH">cluvfy comp vdisk</a></code></p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="CWADD91011" class="refsect2"><a id="BEHJBFFH"></a>
<h3 class="refsect2">Operational Notes</h3>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#CACBDFDB">Installation Requirements</a></p>
</li>
<li>
<p><a href="#CACBEDFA">Usage Information</a></p>
</li>
<li>
<p><a href="#CACJIGBG">CVU Configuration File</a></p>
</li>
<li>
<p><a href="#CACFGFGC">Privileges and Security</a></p>
</li>
<li>
<p><a href="#CACFJJJD">Using CVU Help</a></p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CACBDFDB"></a>Installation Requirements</p>
<p><a id="sthref333"></a>CVU installation requirements are:</p>
<ul>
<li>
<p>At least 30 MB free space for the CVU software on the node from which you run CVU</p>
</li>
<li>
<p>A work directory with at least 25 MB free space on each node. The default location of the work directory is <code dir="ltr">/tmp</code> on Linux and UNIX systems, and the value specified in the <code dir="ltr">TEMP</code> environment variable on Windows systems. You can specify a different location by setting the <code dir="ltr">CV_DESTLOC</code> environment variable.</p>
<p>When using CVU, the utility attempts to copy any needed information to the CVU work directory. It checks for the existence of the work directory on each node. If it does not find one, then it attempts to create one. Make sure that the CVU work directory either exists on all nodes in your cluster or proper permissions are established on each node for the user running CVU to create that directory.</p>
</li>
<li>
<p>Java 1.4.1 on the local node</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CACBEDFA"></a>Usage Information</p>
<p>CVU includes two scripts: <a id="sthref334"></a><a id="sthref335"></a><a id="sthref336"></a><code dir="ltr">runcluvfy.sh</code> (<code dir="ltr">runcluvfy.bat</code> on Windows), which you use before installing Oracle software, and <code dir="ltr">cluvfy</code> (<code dir="ltr">cluvfy.bat</code> on Windows), located in the <code dir="ltr"><span class="codeinlineitalic">Grid_home</span></code><code dir="ltr">/bin</code> directory. The <code dir="ltr">runcluvfy.sh</code> script contains temporary variable definitions which enable it to run before you install Oracle Grid Infrastructure or Oracle Database. After you install Oracle Grid Infrastructure, use the <code dir="ltr">cluvfy</code> command to check prerequisites and perform other system readiness checks.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle Universal Installer runs <code dir="ltr">cluvfy</code> to check all prerequisites during Oracle software installation.</div>
<p>Before installing Oracle software, run <code dir="ltr">runcluvfy.sh</code> from the mountpoint path of the software installation media, as follows:</p>
<pre dir="ltr">
cd /<span class="italic">mountpoint</span>
./runcluvfy.sh <span class="italic">options</span>
</pre>
<p>In the preceding example, the <code dir="ltr"><span class="codeinlineitalic">options</span></code> variable represents CVU command options that you select. For example:</p>
<pre dir="ltr">
$ cd /mnt/dvdrom
$ ./runcluvfy.sh comp nodereach -n node1,node2 -verbose
</pre>
<p>When you enter a CVU command, it provides a summary of the test. During preinstallation, Oracle recommends that you obtain detailed output by using the <code dir="ltr">-verbose</code> argument with the CVU command. The <code dir="ltr">-verbose</code> argument produces detailed output of individual checks. Where applicable, it shows results for each node in a tabular layout.</p>
<p>Run the CVU command-line tool using the <code dir="ltr">cluvfy</code> command. Using <code dir="ltr">cluvfy</code> does not adversely affect your cluster environment or your installed software. You can run <code dir="ltr">cluvfy</code> commands at any time, even before the Oracle Clusterware installation. In fact, CVU is designed to assist you as soon as your hardware and operating system are operational. If you run a command that requires Oracle Clusterware on a node, then CVU reports an error if Oracle Clusterware is not yet installed on that node.</p>
<p>The node list that you use with CVU commands should be a comma-delimited list of host names without a domain. CVU ignores domains while processing node lists. If a CVU command entry has duplicate node entries after removing domain information, then CVU eliminates the duplicate node entries. Wherever supported, you can use the <code dir="ltr">-n all</code> option to verify all of your cluster nodes that are part of a specific Oracle RAC installation.</p>
<p>For network connectivity verification, CVU discovers all of the available network interfaces if you do not specify an interface on the CVU command line. For storage accessibility verification, CVU discovers shared storage for all of the supported storage types if you do not specify a particular storage identification on the command line. CVU also discovers the Oracle Clusterware home if one is available.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CACJIGBG"></a>CVU Configuration File</p>
<p>You can use the CVU configuration file to define specific inputs for the execution of CVU. The path for the configuration file is <code dir="ltr"><span class="codeinlineitalic">Grid_home</span></code><code dir="ltr">/cv/admin/cvu_config</code> (or <code dir="ltr"><span class="codeinlineitalic">Staging_area</span></code><code dir="ltr">\clusterware\stage\cvu\cv\admin</code> on Windows platforms). You can modify this file using a text editor. The inputs to CVU are defined in the form of key entries. You must follow these rules when modifying the CVU configuration file:</p>
<ul>
<li>
<p>Key entries have the syntax <code dir="ltr">name=value</code></p>
</li>
<li>
<p>Each key entry and the value assigned to the key only defines one property</p>
</li>
<li>
<p>Lines beginning with the number sign (<code dir="ltr">#</code>) are comment lines and are ignored</p>
</li>
<li>
<p>Lines that do not follow the syntax <code dir="ltr">name=value</code> are ignored</p>
</li>
</ul>
<p>The following is the list of keys supported by CVU:</p>
<ul>
<li>
<p><code dir="ltr">CV_NODE_ALL</code>: If set, it specifies the list of nodes that should be picked up when Oracle Clusterware is not installed and a <code dir="ltr">-n</code> all option has been used in the command line. By default, this entry is commented out.</p>
</li>
<li>
<p><code dir="ltr">CV_ORACLE_RELEASE</code>: If set, it specifies the specific Oracle release (<code dir="ltr">10gR1</code>, <code dir="ltr">10gR2</code>, <code dir="ltr">11gR1</code>, or <code dir="ltr">11gR2</code>) for which the verifications have to be performed. If set, you do not have to use the <code dir="ltr">-r</code> <code dir="ltr"><span class="codeinlineitalic">release</span></code> option wherever it is applicable. The default value is <code dir="ltr">11gR2</code>.</p>
</li>
<li>
<p><code dir="ltr">CV_RAW_CHECK_ENABLED</code>: If set to <code dir="ltr">TRUE</code>, it enables the check for accessibility of shared disks on Linux and Unix systems. This shared disk accessibility check requires that you install the <code dir="ltr">cvuqdisk</code> RPM Package Manager (rpm) on all of the nodes. By default, this key is set to <code dir="ltr">TRUE</code> and shared disk check is enabled.</p>
</li>
<li>
<p><code dir="ltr">CV_ASSUME_DISTID</code>: This property is used in cases where CVU cannot detect or support a particular platform or a distribution. Oracle does not recommend that you change this property as this might render CVU non-functional.</p>
</li>
<li>
<p><code dir="ltr">CV_XCHK_FOR_SSH_ENABLED</code>: If set to <code dir="ltr">TRUE</code>, it enables the X-Windows check for verifying user equivalence with <code dir="ltr">ssh</code>. By default, this entry is commented out and X-Windows check is disabled.</p>
</li>
<li>
<p><code dir="ltr">ORACLE_SRVM_REMOTECOPY</code>: If set, it specifies the location for the <code dir="ltr">scp</code> or <code dir="ltr">rcp</code> command to override the CVU default value. By default, this entry is commented out and CVU uses <code dir="ltr">/usr/bin/scp</code> and <code dir="ltr">/usr/sbin/rcp</code>.</p>
</li>
<li>
<p><code dir="ltr">ORACLE_SRVM_REMOTESHELL</code>: If set, it specifies the location for <code dir="ltr">ssh/rsh</code> command to override the CVU default value. By default, this entry is commented out and the tool uses <code dir="ltr">/usr/sbin/ssh</code> and <code dir="ltr">/usr/sbin/rsh</code>.</p>
</li>
<li>
<p><code dir="ltr">CV_ASSUME_CL_VERSION</code>: By default, the command line parser uses <code dir="ltr">crs activeversion</code> for the display of command line syntax usage and syntax validation. Use this property to pass a version other than <code dir="ltr">crs activeversion</code> for command line syntax display and validation. By default, this entry is commented out.</p>
</li>
</ul>
<p>If CVU does not find a key entry defined in the configuration file, then CVU searches for the environment variable that matches the name of the key. If the environment variable is set, then CVU uses its value, otherwise CVU uses a default value for that entity.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CACFGFGC"></a>Privileges and Security</p>
<p>CVU assumes that the current user is the user that owns the Oracle software installation, for example, <code dir="ltr">oracle</code>. For most CVU commands, you do not have to be the <code dir="ltr">root</code> user.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CACFJJJD"></a>Using CVU Help</p>
<p><a id="sthref337"></a>The <code dir="ltr">cluvfy</code> commands have context sensitive help that shows their usage based on the command-line arguments that you enter. For example, if you enter <code dir="ltr">cluvfy</code>, then CVU displays high-level generic usage text describing the stage and component syntax. The following is a list of context help commands:</p>
<ul>
<li>
<p><code dir="ltr">cluvfy -help</code>: CVU displays detailed CVU command information.</p>
</li>
<li>
<p><code dir="ltr">cluvfy -version</code>: CVU displays the version of Oracle Clusterware.</p>
</li>
<li>
<p><code dir="ltr">cluvfy comp -list</code>: CVU displays a list of components that can be checked, and brief descriptions of how the utility checks each component.</p>
</li>
<li>
<p><code dir="ltr">cluvfy comp -help</code>: CVU displays detailed syntax for each of the valid component checks.</p>
</li>
<li>
<p><code dir="ltr">cluvfy stage -list</code>: CVU displays a list of valid stages.</p>
</li>
<li>
<p><code dir="ltr">cluvfy stage -help</code>: CVU displays detailed syntax for each of the valid stage checks.</p>
</li>
</ul>
<p>You can also use the <code dir="ltr">-help</code> option with any CVU command. For example, <code dir="ltr">cluvfy stage -pre nodeadd -help</code> returns detailed information for that particular command.</p>
<p>If you enter an invalid CVU command, then CVU shows the correct usage for that command. For example, if you type <code dir="ltr">cluvfy stage -pre dbinst</code>, then CVU shows the correct syntax for the precheck commands for the <code dir="ltr">dbinst</code> stage. Enter the <code dir="ltr">cluvfy -help</code> command to see detailed CVU command information.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91030" class="refsect2"><a id="BGBDGBJF"></a>
<h3 class="refsect2">Special Topics</h3>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#CHDHJBJE">Generating Fixup Scripts</a></p>
</li>
<li>
<p><a href="#CACJIAHC">Using CVU to Determine if Installation Prerequisites are Complete</a></p>
</li>
<li>
<p><a href="#CACIHDFJ">Using CVU with Oracle Database 10<span class="italic">g</span> Release 1 or 2</a></p>
</li>
<li>
<p><a href="#CACFDEBA">Entry and Exit Criteria</a></p>
</li>
<li>
<p><a href="#CACFFBIE">Verbose Mode and UNKNOWN Output</a></p>
</li>
<li>
<p><a href="#CACHIGAD">CVU Node List Shortcuts</a></p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CHDHJBJE"></a>Generating Fixup Scripts</p>
<p>You can use the <code dir="ltr">-fixup</code> flag with certain CVU commands to generate <a href="glossary.htm#CBADEAEE"><span class="xrefglossterm">fixup script</span></a>s before installation. Oracle Universal Installer can also generate fixup scripts during installation. The installer then prompts you to run the script as <code dir="ltr">root</code> in a separate terminal session. If you generate a fixup script from the command line, then you can run it as <code dir="ltr">root</code> after it is generated. When you run the script, it raises kernel values to required minimums, if necessary, and completes other operating system configuration.</p>
<p>By default, fixup scripts are generated in the <code dir="ltr">/tmp</code> directory on Linux and UNIX systems and in the location specified in the <code dir="ltr">TEMP</code> environment variable on Windows systems. You can use the <code dir="ltr">cluvfy stage -pre crsinst</code> command to specify a different location in which to generate fixup scripts. For example:</p>
<pre dir="ltr">
cluvfy stage -pre crsinst -n node1 -fixup -fixupdir /db11202/fixit.sh
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CACJIAHC"></a>Using CVU to Determine if Installation Prerequisites are Complete</p>
<p>You can use CVU to determine which system prerequisites for installation are completed. Use this option if you are installing Oracle 11<span class="italic">g</span> release 2 (11.2) software on a system with a pre-existing Oracle software installation. In using this option, note the following:</p>
<ul>
<li>
<p>You must run CVU as the user account you plan to use to run the installation. You cannot run CVU as <code dir="ltr">root</code>, and running CVU as another user other than the user that is performing the installation does not ensure the accuracy of user and group configuration for installation or other configuration checks.</p>
</li>
<li>
<p>Before you can complete a clusterwide status check, SSH must be configured for all cluster nodes. You can use the installer to complete SSH configuration, or you can complete SSH configuration yourself between all nodes in the cluster. You can also use CVU to generate a fixup script to configure SSH connectivity.</p>
</li>
<li>
<p>CVU can assist you by finding preinstallation steps that must be completed, but it cannot perform preinstallation tasks.</p>
</li>
</ul>
<p>Use the following syntax to determine what preinstallation steps are completed, and what preinstallation steps you must perform; running the command with the <code dir="ltr">-fixup</code> flag generates a fixup script to complete kernel configuration tasks as needed:</p>
<pre dir="ltr">
$ ./runcluvfy.sh stage -pre crsinst -fixup -n <span class="italic">node_list</span>
</pre>
<p>In the preceding syntax example, replace the <code dir="ltr"><span class="codeinlineitalic">node_list</span></code> variable with the names of the nodes in your cluster, separated by commas. On Windows, you must enclose the comma-delimited node list in double quotation marks (<code dir="ltr">""</code>).</p>
<p>For example, for a cluster with mountpoint <code dir="ltr">/mnt/dvdrom/</code>, and with nodes <code dir="ltr">node1</code>, <code dir="ltr">node2</code>, and <code dir="ltr">node3</code>, enter the following command:</p>
<pre dir="ltr">
$ cd /mnt/dvdrom/
$ ./runcluvfy.sh stage -pre crsinst -fixup -n node1,node2,node3
</pre>
<p>Review the CVU report, and complete additional steps as needed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
Your platform-specific installation guide for more information about installing your product</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CACIHDFJ"></a>Using CVU with Oracle Database 10<span class="italic">g</span> Release 1 or 2</p>
<p>You can use CVU on the Oracle Database 11<span class="italic">g</span> release 2 (11.2) media to check system requirements for Oracle Database 10<span class="italic">g</span> Release 1 (10.1) and later installations. To use CVU to check Oracle Clusterware installations, append the command <code dir="ltr">-r</code> <code dir="ltr"><span class="codeinlineitalic">release_code</span></code> flag to the standard CVU system check commands.</p>
<p>For example, to perform a verification check prior to installing Oracle Clusterware version 10. 2 on a system where the media mountpoint is <code dir="ltr">/mnt/dvdrom</code> and the cluster nodes are <code dir="ltr">node1</code>, <code dir="ltr">node2</code>, and <code dir="ltr">node3</code>, enter the following command:</p>
<pre dir="ltr">
$ cd /mnt/dvdrom
$ ./runcluvfy.sh stage -pre crsinst -n node1,node2,node3 -r 10gR2
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you do not specify a release version to check, then CVU checks for 11<span class="italic">g</span> release 2 (11.2) requirements.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CACFDEBA"></a>Entry and Exit Criteria</p>
<p>When verifying stages, CVU uses entry and exit criteria. Each stage has entry criteria that define a specific set of verification tasks to be performed before initiating that stage. This check prevents you from beginning a stage, such as installing Oracle Clusterware, unless you meet the Oracle Clusterware prerequisites for that stage.</p>
<p>The exit criteria for a stage define another set of verification tasks that you must perform after the completion of the stage. Post-checks ensure that the activities for that stage have been completed. Post-checks identify stage-specific problems before they propagate to subsequent stages.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CACFFBIE"></a>Verbose Mode and UNKNOWN Output</p>
<p>Although by default CVU reports in nonverbose mode by only reporting the <a id="sthref338"></a>summary of a test, you can obtain detailed output by using the <code dir="ltr">-verbose</code> argument. The <code dir="ltr">-verbose</code> argument produces detailed output of individual checks and where applicable shows results for each node in a tabular layout.</p>
<p>If a <code dir="ltr">cluvfy</code> command responds with <a id="sthref339"></a><code dir="ltr">UNKNOWN</code> for a particular node, then this is because CVU cannot determine whether a check passed or failed. The cause could be a loss of reachability or the failure of user equivalence to that node. The cause could also be any system problem that was occurring on that node when CVU was performing a check.</p>
<p>The following is a list of possible causes for an <code dir="ltr">UNKNOWN</code> response:</p>
<ul>
<li>
<p>The node is down</p>
</li>
<li>
<p>Executables that CVU requires are missing in <code dir="ltr"><span class="codeinlineitalic">Grid_home</span></code><code dir="ltr">/bin</code> or the <code dir="ltr"><span class="codeinlineitalic">Oracle home</span></code> directory</p>
</li>
<li>
<p>The user account that ran CVU does not have privileges to run common operating system executables on the node</p>
</li>
<li>
<p>The node is missing an operating system patch or a required package</p>
</li>
<li>
<p>The node has exceeded the maximum number of processes or maximum number of open files, or there is a problem with IPC segments, such as shared memory or semaphores</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CACHIGAD"></a>CVU Node List Shortcuts</p>
<p><a id="sthref340"></a>To provide CVU a list of all of the nodes of a cluster, enter <code dir="ltr">-n all</code>. CVU attempts to obtain the node list in the following order:</p>
<ol>
<li>
<p>If vendor clusterware is available, then CVU selects all of the configured nodes from the vendor clusterware using the <code dir="ltr">lsnodes</code> utility.</p>
</li>
<li>
<p>If Oracle Clusterware is installed, then CVU selects all of the configured nodes from Oracle Clusterware using the <code dir="ltr">olsnodes</code> utility.</p>
</li>
<li>
<p>If neither the vendor clusterware nor Oracle Clusterware is installed, then CVU searches for a value for the <code dir="ltr">CV_NODE_ALL</code> key in the configuration file.</p>
</li>
<li>
<p>If vendor clusterware and Oracle Clusterware are not installed and no key named <code dir="ltr">CV_NODE_ALL</code> exists in the configuration file, then CVU searches for a value for the <code dir="ltr">CV_NODE_ALL</code> environmental variable. If you have not set this variable, then CVU reports an error.</p>
</li>
</ol>
<p>To provide a partial node list, you can set an environmental variable and use it in the CVU command. For example, on Linux or UNIX systems you can enter:</p>
<pre dir="ltr">
setenv MYNODES node1,node3,node5
cluvfy comp nodecon -n $MYNODES [-verbose]
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BEHBBBGJ"></a>
<div id="CWADD91025" class="refsect1">
<h2 class="refsect1">Cluster Verification Utility Command Reference</h2>
<p>This section lists and describes the following CVU commands:</p>
<ul>
<li>
<p><code dir="ltr"><a href="#CJGCDHJH">cluvfy comp acfs</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#BEHFJFDG">cluvfy comp admprv</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CACJGCBC">cluvfy comp asm</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#i997040">cluvfy comp cfs</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CACJEGGE">cluvfy comp clocksync</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGHADDH">cluvfy comp clu</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGHJHFE">cluvfy comp clumgr</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGEGEJA">cluvfy comp crs</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#BABJDEIC">cluvfy comp dhcp</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#BABJDFAD">cluvfy comp dns</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CHDICEEJ">cluvfy comp freespace</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGBCBHA">cluvfy comp gns</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGEIGGI">cluvfy comp gpnp</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGJEDGG">cluvfy comp ha</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CHDJAHCD">cluvfy comp healthcheck</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGJHCBC">cluvfy comp nodeapp</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGCJAGA">cluvfy comp nodecon</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGFHJJG">cluvfy comp nodereach</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGDFIEH">cluvfy comp ocr</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGJGIEF">cluvfy comp ohasd</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGDDGAE">cluvfy comp olr</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#BEHFGAHE">cluvfy comp peer</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGGFAGF">cluvfy comp scan</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGIIBIG">cluvfy comp software</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGJCCIJ">cluvfy comp space</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGDBBII">cluvfy comp ssa</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#BEHHHICG">cluvfy comp sys</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CACEAJCH">cluvfy comp vdisk</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CACIFFAC">cluvfy stage [-pre | -post] acfscfg</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGFBDCD">cluvfy stage [-pre | -post] cfs</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGDEEEJ">cluvfy stage [-pre | -post] crsinst</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGCFFJG">cluvfy stage -pre dbcfg</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGGEADI">cluvfy stage -pre dbinst</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGEIIJH">cluvfy stage [-pre | -post] hacfg</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGJHIEG">cluvfy stage -post hwos</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CJGBHBFD">cluvfy stage [-pre | -post] nodeadd</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="#CACFEIHC">cluvfy stage -post nodedel</a></code></p>
</li>
</ul>
<div id="CWADD91042" class="refsect2"><a id="CJGCDHJH"></a>
<h3 class="refsect2">cluvfy comp acfs</h3>
<p>Use the <a id="sthref341"></a><a id="sthref342"></a><code dir="ltr">cluvfy comp acfs</code> component verification command to check the integrity of Oracle ASM Cluster File System on all nodes in a cluster.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref343"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp acfs [-n [<span class="italic">node_list</span>] | [all]] [-f <span class="italic">file_system</span>] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref344"></a>Parameters</p>
<div id="CWADD91368" class="tblformal">
<p class="titleintable"><a id="sthref345"></a><a id="sthref346"></a>Table A-2 cluvfy comp acfs Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp acfs Command Parameters " summary="This table lists and describes the cluvfy comp acfs command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t8">Parameter</th>
<th class="cellalignment415" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t8" headers="r1c1-t8">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t8 r1c2-t8">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t8" headers="r1c1-t8">
<pre dir="ltr">
-f <span class="italic">file_system</span>
</pre></td>
<td class="cellalignment416" headers="r3c1-t8 r1c2-t8">
<p>The name of the file system to check.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t8" headers="r1c1-t8">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r4c1-t8 r1c2-t8">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91020" class="refsect2"><a id="BEHFJFDG"></a>
<h3 class="refsect2">cluvfy comp admprv</h3>
<p>Use the <a id="sthref347"></a><a id="sthref348"></a><code dir="ltr">cluvfy comp admprv</code> command to verify user accounts and administrative permissions for installing Oracle Clusterware and Oracle RAC software, and for creating an Oracle RAC database or modifying an Oracle RAC database configuration.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref349"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp admprv [-n <span class="italic">node_list</span>]
{ -o user_equiv [-sshonly] |
 -o crs_inst [-orainv <span class="italic">orainventory_group</span>] |
 -o db_inst [-osdba <span class="italic">osdba_group</span>] [-fixup [-fixupdir <span class="italic">fixup_dir</span>]] | 
 -o db_config -d <span class="italic">oracle_home</span> [-fixup [-fixupdir <span class="italic">fixup_dir</span>]] }
 [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref350"></a>Parameters</p>
<div id="CWADD91339" class="tblformal">
<p class="titleintable"><a id="sthref351"></a><a id="sthref352"></a>Table A-3 cluvfy comp admprv Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp admprv Command Parameters " summary="This table lists and describes the cluvfy comp admprv command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t9">Parameter</th>
<th class="cellalignment415" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t9" headers="r1c1-t9">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t9 r1c2-t9">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t9" headers="r1c1-t9">
<pre dir="ltr">
-o user_equiv [-sshonly]
</pre></td>
<td class="cellalignment416" headers="r3c1-t9 r1c2-t9">
<p>Checks user equivalence between the nodes. On Linux and UNIX platforms, this command verifies user equivalence first using <code dir="ltr">ssh</code> and then using <code dir="ltr">rsh</code>, if the <code dir="ltr">ssh</code> check fails.</p>
<p>To verify the equivalence only through <code dir="ltr">ssh</code>, use the <code dir="ltr">-sshonly</code> option.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t9" headers="r1c1-t9">
<pre dir="ltr">
-o crs_inst
</pre></td>
<td class="cellalignment416" headers="r4c1-t9 r1c2-t9">
<p>Checks administrative privileges for installing Oracle Clusterware.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r5c1-t9" headers="r1c1-t9">
<pre dir="ltr">
-orainv <span class="italic">orainventory_group</span>
</pre></td>
<td class="cellalignment416" headers="r5c1-t9 r1c2-t9">
<p>The name of the Oracle Inventory group. If you do not specify this option, then CVU uses <code dir="ltr">oinstall</code> as the inventory group.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r6c1-t9" headers="r1c1-t9">
<pre dir="ltr">
-o db_inst
</pre></td>
<td class="cellalignment416" headers="r6c1-t9 r1c2-t9">
<p>Checks administrative privileges for installing Oracle RAC.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r7c1-t9" headers="r1c1-t9">
<pre dir="ltr">
-osdba <span class="italic">osdba_group</span>
</pre></td>
<td class="cellalignment416" headers="r7c1-t9 r1c2-t9">
<p>The name of the OSDBA group. If you do not specify this option, then CVU uses <code dir="ltr">dba</code> as the OSDBA group.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r8c1-t9" headers="r1c1-t9">
<pre dir="ltr">
-o db_config
</pre></td>
<td class="cellalignment416" headers="r8c1-t9 r1c2-t9">
<p>Checks administrative privileges for creating or configuring an Oracle RAC database.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r9c1-t9" headers="r1c1-t9">
<pre dir="ltr">
-d <span class="italic">oracle_home</span>
</pre></td>
<td class="cellalignment416" headers="r9c1-t9 r1c2-t9">
<p>The directory where the Oracle software is installed.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r10c1-t9" headers="r1c1-t9">
<pre dir="ltr">
-fixup [-fixupdir <span class="italic">fixup_dir</span>]
</pre></td>
<td class="cellalignment416" headers="r10c1-t9 r1c2-t9">
<p>Specifies that if the verification fails, then CVU generates fixup instructions, if feasible. Use the <code dir="ltr">-fixupdir</code> option to specify a specific directory in which CVU generates the fixup instructions. If you do not specify a directory, CVU uses its work directory.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r11c1-t9" headers="r1c1-t9">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r11c1-t9 r1c2-t9">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref353"></a>Usage Notes</p>
<ul>
<li>
<p>By default, the equivalence check does not verify X-Windows configurations, such as whether you have disabled X-forwarding, whether you have the proper setting for the <code dir="ltr">DISPLAY</code> environment variable, and so on.</p>
<p>To verify X-Windows aspects during user equivalence checks, set the <code dir="ltr">CV_XCHK_FOR_SSH_ENABLED</code> key to <code dir="ltr">TRUE</code> in the configuration file that resides in the <code dir="ltr">CV_HOME/cv/admin/cvu_config</code> directory before you run the <code dir="ltr">cluvfy comp admprv -o user_equiv</code> command.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref354"></a>Examples</p>
<p class="subhead2"><a id="CWADD92251"></a>Example 1: Verifying User Equivalence for All Nodes</p>
<p>You can verify user equivalence for all of the nodes by running the following command:</p>
<pre dir="ltr">
cluvfy comp admprv -n all -o user_equiv -verbose
</pre>
<p class="subhead2"><a id="CWADD92252"></a>Example 2: Verifying Permissions Required to Install Oracle Clusterware</p>
<p>You can verify that the permissions required for installing Oracle Clusterware have been configured on the nodes <code dir="ltr">racnode1</code> and <code dir="ltr">racnode2</code> by running the following command:</p>
<pre dir="ltr">
cluvfy comp admprv -n racnode1,racnode2 -o crs_inst -verbose
</pre>
<p class="subhead2"><a id="CWADD92253"></a>Example 3: Verifying Permissions Manage Oracle RAC Databases</p>
<p>You can verify that the permissions required for creating or modifying an Oracle RAC database using the <code dir="ltr">C:\app\oracle\product\11.2.0\dbhome_1</code> Oracle home directory, and generate a script to configure the permissions by running the following command:</p>
<pre dir="ltr">
cluvfy comp admprv -n all -o db_config -d C:\app\oracle\product\11.2.0\dbhome_1 -fixup -verbose
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91501" class="refsect2"><a id="CACJGCBC"></a>
<h3 class="refsect2">cluvfy comp asm</h3>
<p>Use the <a id="sthref355"></a><a id="sthref356"></a><code dir="ltr">cluvfy comp asm</code> component verification command to check the integrity of Oracle Automatic Storage Management (Oracle ASM) on all nodes in the cluster. This check ensures that the ASM instances on the specified nodes are running from the same Oracle home and that <code dir="ltr">asmlib</code>, if it exists, has a valid version and ownership.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref357"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp asm [-n <span class="italic">node_list</span> | all ] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref358"></a>Parameters</p>
<div id="CWADD92254" class="tblformal">
<p class="titleintable"><a id="sthref359"></a><a id="sthref360"></a>Table A-4 cluvfy comp asm Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp asm Command Parameters " summary="This table lists and describes the cluvfy comp asm command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t10">Parameter</th>
<th class="cellalignment415" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t10" headers="r1c1-t10">
<pre dir="ltr">
-n <span class="italic">node_list</span> | all
</pre></td>
<td class="cellalignment416" headers="r2c1-t10 r1c2-t10">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t10" headers="r1c1-t10">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r3c1-t10 r1c2-t10">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref361"></a>Examples</p>
<p class="subhead2"><a id="CWADD92255"></a>Verifying the Integrity of Oracle ASM on All Nodes</p>
<p>To verify the integrity of Oracle ASM on all of the nodes in the cluster, use the following command:</p>
<pre dir="ltr">
cluvfy comp asm &ndash;n all
</pre>
<p>This command produces output similar to the following:</p>
<pre dir="ltr">
Verifying ASM Integrity

Task ASM Integrity check started...

Starting check to see fi ASM is running on all cluster nodes...

ASM Running check passed. ASM is running on all specified nodes

Starting Disk Groups check to see if at least one Disk Group configured...
Disk Group Check passed. At least one Disk Group configured

Task ASM Integrity check passed...

Verification of ASM Integrity was successful.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91049" class="refsect2"><a id="i997040"></a>
<h3 class="refsect2">cluvfy comp cfs</h3>
<p>Use the <a id="sthref362"></a><a id="sthref363"></a><code dir="ltr">cluvfy comp cfs</code> component verification command to check the integrity of the clustered file system (OCFS for Windows or OCFS2) you provide using the <code dir="ltr">-f</code> option. CVU checks the sharing of the file system from the nodes in the node list.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref364"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp cfs [-n <span class="italic">node_list</span>] -f <span class="italic">file_system</span> [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref365"></a>Parameters</p>
<div id="CWADD91341" class="tblformal">
<p class="titleintable"><a id="sthref366"></a><a id="sthref367"></a>Table A-5 cluvfy comp cfs Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp cfs Command Parameters " summary="This table lists and describes the cluvfy comp cfs command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t11">Parameter</th>
<th class="cellalignment415" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t11" headers="r1c1-t11">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t11 r1c2-t11">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t11" headers="r1c1-t11">
<pre dir="ltr">
-f <span class="italic">file_system</span>
</pre></td>
<td class="cellalignment416" headers="r3c1-t11 r1c2-t11">
<p>The name of the file system.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t11" headers="r1c1-t11">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r4c1-t11 r1c2-t11">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref368"></a>Usage Notes</p>
<ul>
<li>
<p>This check is supported for OCFS2 version 1.2.1, or higher.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref369"></a>Examples</p>
<p class="subhead2"><a id="CWADD91342"></a>Verifying the Integrity of a Cluster File System on All the Nodes</p>
<p>To verify the integrity of the cluster file system <code dir="ltr">/oradbshare</code> on all of the nodes, use the following command:</p>
<pre dir="ltr">
cluvfy comp cfs -f /oradbshare &ndash;n all -verbose
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91503" class="refsect2"><a id="CACJEGGE"></a>
<h3 class="refsect2">cluvfy comp clocksync</h3>
<p>Use the <a id="sthref370"></a><a id="sthref371"></a><code dir="ltr">cluvfy comp clocksync</code> component verification command to clock synchronization across all the nodes in the node list. CVU verifies a time synchronization service is running (Oracle Cluster Time Synchronization Service (CTSS) or Network Time Protocol (NTP)), that each node is using the same reference server for clock synchronization, and that the time offset for each node is within permissible limits.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref372"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp clocksync [-noctss] [-n <span class="italic">node_list</span> [all]] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref373"></a>Parameters</p>
<div id="CWADD91504" class="tblformal">
<p class="titleintable"><a id="sthref374"></a><a id="sthref375"></a>Table A-6 cluvfy comp clocksync Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp clocksync Command Parameters " summary="This table lists and describes the cluvfy comp clocksync command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t12">Parameter</th>
<th class="cellalignment415" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t12" headers="r1c1-t12">
<pre dir="ltr">
-noctss
</pre></td>
<td class="cellalignment416" headers="r2c1-t12 r1c2-t12">
<p>If you specify this option, then CVU does not perform a check on CTSS. Instead, CVU checks the platform's native time synchronization service, such as NTP.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t12" headers="r1c1-t12">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r3c1-t12 r1c2-t12">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t12" headers="r1c1-t12">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r4c1-t12 r1c2-t12">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91023" class="refsect2"><a id="CJGHADDH"></a>
<h3 class="refsect2">cluvfy comp clu</h3>
<p>Use the <a id="sthref376"></a><a id="sthref377"></a><code dir="ltr">cluvfy comp clu</code> component verification command to check the integrity of the cluster on all the nodes in the node list.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref378"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp clu [-n <span class="italic">node_list</span>] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref379"></a>Parameters</p>
<div id="CWADD92256" class="tblformal">
<p class="titleintable"><a id="sthref380"></a><a id="sthref381"></a>Table A-7 cluvfy comp clu Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp clu Command Parameters " summary="This table lists and describes the cluvfy comp clu command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t13">Parameter</th>
<th class="cellalignment415" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t13" headers="r1c1-t13">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t13 r1c2-t13">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t13" headers="r1c1-t13">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r3c1-t13 r1c2-t13">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref382"></a>Example</p>
<p class="subhead2"><a id="CWADD92257"></a>Verifying the Integrity of a Cluster</p>
<p>To verify the integrity of the cluster on all of the nodes, use the following command:</p>
<pre dir="ltr">
cluvfy comp clu -n all
</pre>
<p>This command produces output similar to the following:</p>
<pre dir="ltr">
Verifying cluster integrity

Checking cluster integrity...


Cluster integrity check passed


Verification of cluster integrity was successful.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91036" class="refsect2"><a id="CJGHJHFE"></a>
<h3 class="refsect2">cluvfy comp clumgr</h3>
<p>Use the <a id="sthref383"></a><a id="sthref384"></a><code dir="ltr">cluvfy comp clumgr</code> component verification command to check the integrity of cluster manager subcomponent, or Oracle Cluster Synchronization Services (CSS), on all the nodes in the node list.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref385"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp clumgr [-n <span class="italic">node_list</span>] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref386"></a>Parameters</p>
<div id="CWADD91343" class="tblformal">
<p class="titleintable"><a id="sthref387"></a><a id="sthref388"></a>Table A-8 cluvfy comp clumgr Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp clumgr Command Parameters " summary="This table lists and describes the cluvfy comp clumgr command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t14">Parameter</th>
<th class="cellalignment415" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t14" headers="r1c1-t14">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t14 r1c2-t14">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t14" headers="r1c1-t14">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r3c1-t14 r1c2-t14">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91243" class="refsect2"><a id="CJGEGEJA"></a>
<h3 class="refsect2">cluvfy comp crs</h3>
<p>Run the <a id="sthref389"></a><a id="sthref390"></a><code dir="ltr">cluvfy comp crs</code> component verification command to check the integrity of the Cluster Ready Services (CRS) daemon on the specified nodes.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref391"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp crs [-n <span class="italic">node_list</span>] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref392"></a>Parameters</p>
<div id="CWADD91344" class="tblformal">
<p class="titleintable"><a id="sthref393"></a><a id="sthref394"></a>Table A-9 cluvfy comp crs Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp crs Command Parameters " summary="This table lists and describes the cluvfy comp crs command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t15">Parameter</th>
<th class="cellalignment415" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t15" headers="r1c1-t15">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t15 r1c2-t15">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t15" headers="r1c1-t15">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r3c1-t15 r1c2-t15">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD92321" class="refsect2"><a id="BABJDEIC"></a>
<h3 class="refsect2">cluvfy comp dhcp</h3>
<p>Starting with Oracle Database 11<span class="italic">g</span> release 2 (11.2.0.2), use the <code dir="ltr">cluvfy comp dhcp</code> component verification command to verify that the DHCP server exists on the network and is capable of providing a required number of IP addresses. This verification also verifies the response time for the DHCP server. You must run this command as <code dir="ltr">root</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref395"></a>Syntax</p>
<pre dir="ltr">
# cluvfy comp dhcp -clustername <span class="italic">cluster_name</span> [-vipresname <span class="italic">vip_resource_name</span>]
[-port <span class="italic">dhcp_port</span>] [-n <span class="italic">node_list</span>] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref396"></a>Parameters</p>
<div id="CWADD92379" class="tblformal">
<p class="titleintable"><a id="sthref397"></a><a id="sthref398"></a>Table A-10 cluvfy comp dhcp Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp dhcp Command Parameters " summary="This table lists and describes the cluvfy comp dhcp command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t16">Parameter</th>
<th class="cellalignment415" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t16" headers="r1c1-t16">
<pre dir="ltr">
-clustername <span class="italic">cluster_name</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t16 r1c2-t16">
<p>The name of the cluster of which you want to check the integrity of DHCP.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t16" headers="r1c1-t16">
<pre dir="ltr">
-vipresname <span class="italic">vip_resource_name</span>
</pre></td>
<td class="cellalignment416" headers="r3c1-t16 r1c2-t16">
<p>The name of the VIP resource.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t16" headers="r1c1-t16">
<pre dir="ltr">
-port <span class="italic">dhcp_port</span>
</pre></td>
<td class="cellalignment416" headers="r4c1-t16 r1c2-t16">
<p>The port on which DHCP listens. The default port is 67.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r5c1-t16" headers="r1c1-t16">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r5c1-t16 r1c2-t16">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r6c1-t16" headers="r1c1-t16">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r6c1-t16 r1c2-t16">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref399"></a>Usage Notes</p>
<p>Before running this command, ensure that the network resource is offline. Use the <code dir="ltr">srvctl stop nodeapps</code> command to bring the network resource offline, if necessary.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink RACAD5042" href="../../rac.112/e41960/srvctladmin.htm#RACAD5042"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> for more information about the <code dir="ltr">srvctl stop nodeapps</code> command</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD92323" class="refsect2"><a id="BABJDFAD"></a>
<h3 class="refsect2">cluvfy comp dns</h3>
<p>Starting with Oracle Database 11<span class="italic">g</span> release 2 (11.2.0.2), use the <a id="sthref400"></a><a id="sthref401"></a><code dir="ltr">cluvfy comp dns</code> component verification command to verify that the Grid Naming Service (GNS) subdomain delegation has been properly set up in the Domain Name Service (DNS) server.</p>
<p>Run <code dir="ltr">cluvfy comp dns -server</code> on one node of the cluster. On each node of the cluster run <code dir="ltr">cluvfy comp dns -client</code> to verify the DNS server setup for the cluster.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref402"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp dns -server -domain <span class="italic">gns_sub_domain</span> -vipaddress <span class="italic">gns_vip_address</span>] [-port <span class="italic">dns_port</span>]
[-verbose]

cluvfy comp dns -client -domain <span class="italic">gns_sub_domain</span> -vip <span class="italic">gns_vip</span> [-port <span class="italic">dns_port</span>]
[-last] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref403"></a>Parameters</p>
<div id="CWADD92324" class="tblformal">
<p class="titleintable"><a id="sthref404"></a><a id="sthref405"></a>Table A-11 cluvfy comp dns Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp dns Command Parameters " summary="This table lists and describes the cluvfy comp dns command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t18">Parameter</th>
<th class="cellalignment415" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t18" headers="r1c1-t18">
<pre dir="ltr">
-server
</pre></td>
<td class="cellalignment416" headers="r2c1-t18 r1c2-t18">
<p>Start a test DNS server that listens on the domain specified by the <code dir="ltr">-domain</code> option.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t18" headers="r1c1-t18">
<pre dir="ltr">
-client
</pre></td>
<td class="cellalignment416" headers="r3c1-t18 r1c2-t18">
<p>Validate connectivity to a test DNS server started on specified address. You must specify the same information you specified when you started the DNS server.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t18" headers="r1c1-t18">
<pre dir="ltr">
-domain <span class="italic">gns_sub_domain</span>
</pre></td>
<td class="cellalignment416" headers="r4c1-t18 r1c2-t18">
<p>The GNS subdomain name.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r5c1-t18" headers="r1c1-t18">
<pre dir="ltr">
-vipaddress <span class="italic">gns_vip_address</span>
</pre></td>
<td class="cellalignment416" headers="r5c1-t18 r1c2-t18">
<p>GNS virtual IP address in the form <code dir="ltr">{</code><code dir="ltr"><span class="codeinlineitalic">IP_name</span></code> <code dir="ltr">|</code> <code dir="ltr"><span class="codeinlineitalic">IP_address</span></code><code dir="ltr">}/</code><code dir="ltr"><span class="codeinlineitalic">net_mask</span></code><code dir="ltr">/</code><code dir="ltr"><span class="codeinlineitalic">interface_name</span></code>. You can specify either <code dir="ltr"><span class="codeinlineitalic">IP_name</span></code>, which is a name that resolves to an IP address, or <code dir="ltr"><span class="codeinlineitalic">IP_address</span></code>, which is an IP address. Either name or address is followed by <code dir="ltr"><span class="codeinlineitalic">net_mask</span></code>, which is the subnet mask for the IP address, and <code dir="ltr"><span class="codeinlineitalic">interface_name</span></code>, which is the interface on which to start the IP address.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r6c1-t18" headers="r1c1-t18">
<pre dir="ltr">
-vip <span class="italic">gns_vip</span>
</pre></td>
<td class="cellalignment416" headers="r6c1-t18 r1c2-t18">
<p>GNS virtual IP address, which is either a name that resolves to an IP address or a dotted decimal numeric IP address.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r7c1-t18" headers="r1c1-t18">
<pre dir="ltr">
-port <span class="italic">dns_port</span>
</pre></td>
<td class="cellalignment416" headers="r7c1-t18 r1c2-t18">
<p>The port on which DNS listens. The default port is 53.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r8c1-t18" headers="r1c1-t18">
<pre dir="ltr">
-last
</pre></td>
<td class="cellalignment416" headers="r8c1-t18 r1c2-t18">
<p>Send a termination request to the test DNS server after all the validations are complete.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r9c1-t18" headers="r1c1-t18">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r9c1-t18 r1c2-t18">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref406"></a>Usage Notes</p>
<ul>
<li>
<p>This command is not supported on Windows operating systems.</p>
</li>
<li>
<p>On the last node specify the <code dir="ltr">-last</code> option to terminate the <code dir="ltr">cluvfy comp dns -server</code> instance.</p>
</li>
<li>
<p>If the port number is lower than 1024, then you must run CVU as <code dir="ltr">root</code>.</p>
</li>
<li>
<p>Do not run this check while the GNS Oracle Clusterware resource is online.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD92408" class="refsect2"><a id="CHDICEEJ"></a>
<h3 class="refsect2">cluvfy comp freespace</h3>
<p>Use the <a id="sthref407"></a><code dir="ltr">cluvfy comp freespace</code> component verification command to check the free space available in the Oracle Clusterware home storage and ensure that there is at least 5% of the total space available. For example, if the total storage is 10GB, then the check ensures that at least 500MB of it is free.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref408"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp freespace [-n <span class="italic">node_list</span> | all]
</pre>
<p>If you choose to include the <code dir="ltr">-n</code> option, then enter a comma-delimited list of node names on which to run the command. Alternatively, you can specify <code dir="ltr">all</code> after <code dir="ltr">-n</code> to check all of the nodes in the cluster.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91044" class="refsect2"><a id="CJGBCBHA"></a>
<h3 class="refsect2">cluvfy comp gns</h3>
<p>Use the <a id="sthref409"></a><a id="sthref410"></a><code dir="ltr">cluvfy comp gns</code> component verification command to verify the integrity of the Oracle Grid Naming Service (GNS) on the cluster.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref411"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp gns -precrsinst -domain <span class="italic">gns_domain</span> -vip <span class="italic">gns_vip</span> [-n <span class="italic">node_list</span>]
 [-verbose]

cluvfy comp gns -postcrsinst [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref412"></a>Parameters</p>
<div id="CWADD91345" class="tblformal">
<p class="titleintable"><a id="sthref413"></a><a id="sthref414"></a>Table A-12 cluvfy comp gns Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp gns Command Parameters " summary="This table lists and describes the cluvfy comp gns command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t19">Parameter</th>
<th class="cellalignment415" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t19" headers="r1c1-t19">
<pre dir="ltr">
-precrsinst
</pre></td>
<td class="cellalignment416" headers="r2c1-t19 r1c2-t19">
<p>Perform checks on GNS domain name and GNS VIP before Oracle Clusterware is installed.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t19" headers="r1c1-t19">
<pre dir="ltr">
-domain <span class="italic">gns_domain</span>
</pre></td>
<td class="cellalignment416" headers="r3c1-t19 r1c2-t19">
<p>The GNS sub domain name</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t19" headers="r1c1-t19">
<pre dir="ltr">
-vip <span class="italic">gns_vip</span>
</pre></td>
<td class="cellalignment416" headers="r4c1-t19 r1c2-t19">
<p>The GNS virtual IP address</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r5c1-t19" headers="r1c1-t19">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r5c1-t19 r1c2-t19">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r6c1-t19" headers="r1c1-t19">
<pre dir="ltr">
-postcrsinst
</pre></td>
<td class="cellalignment416" headers="r6c1-t19 r1c2-t19">
<p>Check the integrity of GNS on all nodes in the cluster</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r7c1-t19" headers="r1c1-t19">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r7c1-t19 r1c2-t19">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91043" class="refsect2"><a id="CJGEIGGI"></a>
<h3 class="refsect2">cluvfy comp gpnp</h3>
<p>Use the <a id="sthref415"></a><a id="sthref416"></a><code dir="ltr">cluvfy comp gpnp</code> component verification command to check the integrity of Grid Plug and Play on all of the nodes in a cluster.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref417"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp gpnp [-n <span class="italic">node_list</span>] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref418"></a>Parameters</p>
<div id="CWADD91346" class="tblformal">
<p class="titleintable"><a id="sthref419"></a><a id="sthref420"></a>Table A-13 cluvfy comp gpnp Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp gpnp Command Parameters " summary="This table lists and describes the cluvfy comp gpnp command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t20">Parameter</th>
<th class="cellalignment415" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t20" headers="r1c1-t20">
<pre dir="ltr">
-n <span class="italic">node_list</span> 
</pre></td>
<td class="cellalignment416" headers="r2c1-t20 r1c2-t20">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t20" headers="r1c1-t20">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r3c1-t20 r1c2-t20">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91039" class="refsect2"><a id="CJGJEDGG"></a>
<h3 class="refsect2">cluvfy comp ha</h3>
<p>Use the <a id="sthref421"></a><a id="sthref422"></a><code dir="ltr">cluvfy comp ha</code> component verification command to check the integrity of Oracle Restart on the local node.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref423"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp ha [-verbose]
</pre>
<p>If you include the <code dir="ltr">-verbose</code> option, then CVU prints detailed output.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD92405" class="refsect2"><a id="CHDJAHCD"></a>
<h3 class="refsect2">cluvfy comp healthcheck</h3>
<p>Use the <a id="sthref424"></a><a id="sthref425"></a><code dir="ltr">cluvfy comp healthcheck</code> component verification command to check your Oracle Clusterware and Oracle Database installations for their compliance with mandatory requirements and best practices guidelines, and to ensure that they are functioning properly.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref426"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp healthcheck [-collect {cluster|database}] [-db <span class="italic">db_unique_name</span>]
 [-bestpractice|-mandatory] [-deviations] [-html] [-save [-savedir <span class="italic">directory_path</span>]]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref427"></a>Parameters</p>
<div id="CWADD92406" class="tblformal">
<p class="titleintable"><a id="sthref428"></a><a id="sthref429"></a>Table A-14 cluvfy comp healthcheck Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp healthcheck Command Parameters" summary="This table lists and describes the cluvfy comp healthcheck command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t21">Parameter</th>
<th class="cellalignment415" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t21" headers="r1c1-t21">
<pre dir="ltr">
-collect {cluster|database}
</pre></td>
<td class="cellalignment416" headers="r2c1-t21 r1c2-t21">
<p>Use <code dir="ltr">-collect</code> to specify that you want to perform checks for Oracle Clusterware (<code dir="ltr">cluster</code>) or Oracle Database (<code dir="ltr">database</code>). If you do not use the <code dir="ltr">-collect</code> flag with the <code dir="ltr">healthcheck</code> option, then CVU performs checks for both Oracle Clusterware and Oracle Database.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t21" headers="r1c1-t21">
<pre dir="ltr">
-db <span class="italic">db_unique_name</span>
</pre></td>
<td class="cellalignment416" headers="r3c1-t21 r1c2-t21">
<p>Use <code dir="ltr">-db</code> to specify checks on the specific database that you enter after the <code dir="ltr">-db</code> flag.</p>
<p>CVU uses JDBC to connect to the database as the user <code dir="ltr">cvusys</code> to verify various database parameters. For this reason, if you want CVU to perform checks for the database you specify with the <code dir="ltr">-db</code> flag, then you must first create the <code dir="ltr">cvusys</code> user on that database, and grant that user the CVU-specific role, <code dir="ltr">cvusapp</code>. You must also grant members of the <code dir="ltr">cvusapp</code> role select permissions on system tables.</p>
<p>Use the <code dir="ltr">cvusys.sql</code> script included in the <code dir="ltr"><span class="codeinlineitalic">CVU_home</span></code><code dir="ltr">/cv/admin</code> directory to facilitate the creation of this user. This SQL script creates the <code dir="ltr">cvusys</code> user on all the databases that you want to verify using CVU.</p>
<p>If you use the <code dir="ltr">-db</code> flag but do not provide a unique database name, then CVU discovers all the Oracle Databases on the cluster. To perform best practices checks on these databases, you must create the <code dir="ltr">cvusys</code> user on each database, and grant that user the <code dir="ltr">cvusapp</code> role with the select privileges needed to perform the best practice checks.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t21" headers="r1c1-t21">
<pre dir="ltr">
[-bestpractice|-mandatory
 [-deviations]]
</pre></td>
<td class="cellalignment416" headers="r4c1-t21 r1c2-t21">
<p>Use the <code dir="ltr">-bestpractice</code> flag to specify best practice checks, and the <code dir="ltr">-mandatory</code> flag to specify mandatory checks. Add the <code dir="ltr">-deviations</code> flag to specify that you want to see only the deviations from either the best practice recommendations or the mandatory requirements. You can specify either the <code dir="ltr">-bestpractice</code> or <code dir="ltr">-mandatory</code> flag, but not both flags. If you specify neither <code dir="ltr">-bestpractice</code> nor <code dir="ltr">-mandatory</code>, then CVU displays both best practices and mandatory requirements.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r5c1-t21" headers="r1c1-t21">
<pre dir="ltr">
-html
</pre></td>
<td class="cellalignment416" headers="r5c1-t21 r1c2-t21">
<p>Use the <code dir="ltr">-html</code> flag to generate a detailed report in HTML format.</p>
<p>If you specify the <code dir="ltr">-html</code> flag, and a browser CVU recognizes is available on the system, then CVU starts the browser and displays the report on the browser when the checks are complete.</p>
<p>If you do not specify the <code dir="ltr">-html</code> flag, then CVU generates the detailed report in a text file.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r6c1-t21" headers="r1c1-t21">
<pre dir="ltr">
-save [-savedir <span class="italic">directory_path</span>]
</pre></td>
<td class="cellalignment416" headers="r6c1-t21 r1c2-t21">
<p>Use the <code dir="ltr">-save</code> or <code dir="ltr">-save -savedir</code> flags to save validation reports (<code dir="ltr">cvuchecdkreport_</code><code dir="ltr"><span class="codeinlineitalic">timestamp</span></code><code dir="ltr">.txt</code> and <code dir="ltr">cvucheckreport_</code><code dir="ltr"><span class="codeinlineitalic">timestamp</span></code><code dir="ltr">.htm</code>), where <code dir="ltr"><span class="codeinlineitalic">timestamp</span></code> is the time and date of the validation report.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91040" class="refsect2"><a id="CJGJHCBC"></a>
<h3 class="refsect2">cluvfy comp nodeapp</h3>
<p>Use the component <a id="sthref430"></a><a id="sthref431"></a><code dir="ltr">cluvfy comp nodeapp</code> command to check for the existence of node applications, namely VIP, NETWORK, ONS, and GSD, on all of the specified nodes.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref432"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp nodeapp [-n <span class="italic">node_list</span>] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref433"></a>Parameters</p>
<div id="CWADD91348" class="tblformal">
<p class="titleintable"><a id="sthref434"></a><a id="sthref435"></a>Table A-15 cluvfy comp nodeapp Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp nodeapp Command Parameters " summary="This table lists and describes the cluvfy comp nodeapp command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t22">Parameter</th>
<th class="cellalignment415" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t22" headers="r1c1-t22">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t22 r1c2-t22">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t22" headers="r1c1-t22">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r3c1-t22 r1c2-t22">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91019" class="refsect2"><a id="CJGCJAGA"></a>
<h3 class="refsect2">cluvfy comp nodecon</h3>
<p>Use the <a id="sthref436"></a><a id="sthref437"></a><code dir="ltr">cluvfy comp nodecon</code> component verification command to check the connectivity among the nodes specified in the node list. If you provide an interface list, then CVU checks the connectivity using only the specified interfaces.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref438"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp nodecon -n <span class="italic">node_list</span> [-i <span class="italic">interface_list</span>] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref439"></a>Parameters</p>
<div id="CWADD91349" class="tblformal">
<p class="titleintable"><a id="sthref440"></a><a id="sthref441"></a>Table A-16 cluvfy comp nodecon Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp nodecon Command Parameters " summary="This table lists and describes the cluvfy comp nodecon command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t23">Parameter</th>
<th class="cellalignment415" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t23" headers="r1c1-t23">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t23 r1c2-t23">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t23" headers="r1c1-t23">
<pre dir="ltr">
-i <span class="italic">interface_list</span>
</pre></td>
<td class="cellalignment416" headers="r3c1-t23 r1c2-t23">
<p>The comma-delimited list of interface names. If you do not specify this option, then CVU discovers the available interfaces and checks connectivity using each of them.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t23" headers="r1c1-t23">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r4c1-t23 r1c2-t23">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref442"></a>Usage Notes</p>
<ul>
<li>
<p>You can run this command in verbose mode to identify the mappings between the interfaces, IP addresses, and subnets.</p>
</li>
<li>
<p>Use the <code dir="ltr">nodecon</code> command without the <code dir="ltr">-i</code> option and with <code dir="ltr">-n</code> set to <code dir="ltr">all</code> to use CVU to:</p>
<ul>
<li>
<p>Discover all of the network interfaces that are available on the cluster nodes</p>
</li>
<li>
<p>Review the interfaces' corresponding IP addresses and subnets</p>
</li>
<li>
<p>Obtain the list of interfaces that are suitable for use as VIPs and the list of interfaces to private interconnects</p>
</li>
<li>
<p>Verify the connectivity between all of the nodes through those interfaces</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref443"></a>Examples</p>
<p class="subhead2"><a id="CWADD91350"></a>Example 1: Verifying the connectivity between nodes through specific network interfaces:</p>
<p>You can verify the connectivity between the nodes <code dir="ltr">node1</code> and <code dir="ltr">node3</code> through interface <code dir="ltr">eth0</code> by running the following command:</p>
<pre dir="ltr">
cluvfy comp nodecon -n node1,node3 &ndash;i eth0 -verbose
</pre>
<p class="subhead2"><a id="CWADD91351"></a>Example 2: Discovering all available network interfaces and verifying the connectivity between the nodes in the cluster through those network interfaces:</p>
<p>Use the following command to discover all of the network interfaces that are available on the cluster nodes. CVU then reviews the interfaces' corresponding IP addresses and subnets. Using this information, CVU obtains a list of interfaces that are suitable for use as VIPs and a list of interfaces to private interconnects. Finally, CVU verifies the connectivity between all of the nodes in the cluster through those interfaces.</p>
<pre dir="ltr">
cluvfy comp nodecon -n all -verbose
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91031" class="refsect2"><a id="CJGFHJJG"></a>
<h3 class="refsect2">cluvfy comp nodereach</h3>
<p>Use the <a id="sthref444"></a><a id="sthref445"></a><code dir="ltr">cluvfy comp nodereach</code> component verification command to check the reachability of specified nodes from a source node.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref446"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp nodereach -n <span class="italic">node_list</span> [-srcnode <span class="italic">node</span>] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref447"></a>Parameters</p>
<div id="CWADD92258" class="tblformal">
<p class="titleintable"><a id="sthref448"></a><a id="sthref449"></a>Table A-17 cluvfy comp nodereach Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp nodereach Command Parameters " summary="This table lists and describes the cluvfy comp nodereach command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t24">Parameter</th>
<th class="cellalignment415" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t24" headers="r1c1-t24">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t24 r1c2-t24">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t24" headers="r1c1-t24">
<pre dir="ltr">
-srcnode <span class="italic">node</span>
</pre></td>
<td class="cellalignment416" headers="r3c1-t24 r1c2-t24">
<p>The name of the source node from which CVU performs the reachability test. If you do not specify a source node, then the node on which you run the command is used as the source node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t24" headers="r1c1-t24">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r4c1-t24 r1c2-t24">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref450"></a>Example</p>
<p class="subhead2"><a id="CWADD92259"></a>Verifying the network connectivity between nodes in the cluster:</p>
<p>To verify that <code dir="ltr">node3</code> is reachable over the network from the local node, use the following command:</p>
<pre dir="ltr">
cluvfy comp nodereach -n node3
</pre>
<p>This command produces output similar to the following:</p>
<pre dir="ltr">
Verifying node reachability

Checking node reachability...
Node reachability check passed from node &rdquo;node1&rdquo;


Verification of node reachability was successful.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91037" class="refsect2"><a id="CJGDFIEH"></a>
<h3 class="refsect2">cluvfy comp ocr</h3>
<p>Use the <a id="sthref451"></a><a id="sthref452"></a><code dir="ltr">cluvfy comp ocr</code> component verification command to check the integrity of Oracle Cluster Registry (OCR) on all the specified nodes.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref453"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp ocr [-n <span class="italic">node_list</span>] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref454"></a>Parameters</p>
<div id="CWADD91353" class="tblformal">
<p class="titleintable"><a id="sthref455"></a><a id="sthref456"></a>Table A-18 cluvfy comp ocr Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp ocr Command Parameters " summary="This table lists and describes the cluvfy comp ocr command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t25">Parameter</th>
<th class="cellalignment415" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t25" headers="r1c1-t25">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t25 r1c2-t25">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t25" headers="r1c1-t25">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r3c1-t25 r1c2-t25">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref457"></a>Usage Notes</p>
<p>This command does not verify the integrity of OCR contents. You must use the OCRCHECK utility to verify the contents of OCR.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref458"></a>Example</p>
<p class="subhead2"><a id="CWADD92260"></a>Verifying the integrity of OCR on the local node</p>
<p>To verify the integrity of OCR on the local node, run the following command:</p>
<pre dir="ltr">
cluvfy comp ocr
</pre>
<p>This command produces output similar to the following:</p>
<pre dir="ltr">
Verifying OCR integrity

Checking OCR integrity...

Checking the absence of a non-clustered configurationl...
All nodes free of non-clustered, local-only configurations


ASM Running check passed. ASM is running on all specified nodes

Checking OCR config file &rdquo;/etc/oracle/ocr.loc&rdquo;...

OCR config file &rdquo;/etc/oracle/ocr.loc&rdquo; check successful


Disk group for ocr location &rdquo;+DATA&rdquo; available on all the nodes


NOTE:
This check does not verify the integrity of the OCR contents. Execute &amp;rsquor;ocrcheck' as a privileged user to verify the contents of OCR.

OCR integrity check passed

Verification of OCR integrity was successful.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91046" class="refsect2"><a id="CJGJGIEF"></a>
<h3 class="refsect2">cluvfy comp ohasd</h3>
<p>Use the <a id="sthref459"></a><a id="sthref460"></a><code dir="ltr">cluvfy comp ohasd</code> component verification command to check the integrity of the Oracle High Availability Services daemon.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref461"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp ohasd [-n <span class="italic">node_list</span>] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref462"></a>Parameters</p>
<div id="CWADD92261" class="tblformal">
<p class="titleintable"><a id="sthref463"></a><a id="sthref464"></a>Table A-19 cluvfy comp ohasd Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp ohasd Command Parameters " summary="This table lists and describes the cluvfy comp ohasd command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t26">Parameter</th>
<th class="cellalignment415" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t26" headers="r1c1-t26">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t26 r1c2-t26">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t26" headers="r1c1-t26">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r3c1-t26 r1c2-t26">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref465"></a>Example</p>
<p class="subhead2"><a id="CWADD92262"></a>Verifying the integrity of the Oracle high availability services daemon on all nodes in the cluster</p>
<p>To verify that the Oracle High Availability Services daemon is operating correctly on all nodes in the cluster, use the following command:</p>
<pre dir="ltr">
cluvfy comp ohasd -n all -verbose
</pre>
<p>This command produces output similar to the following:</p>
<pre dir="ltr">
Verifying OHASD integrity

Checking OHASD integrity...
ohasd is running on node &rdquo;node1&rdquo;
ohasd is running on node &rdquo;node2&rdquo;
ohasd is running on node &rdquo;node3&rdquo;
ohasd is running on node &rdquo;node4&rdquo;

OHASD integrity check passed

Verification of OHASD integrity was successful.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91038" class="refsect2"><a id="CJGDDGAE"></a>
<h3 class="refsect2">cluvfy comp olr</h3>
<p>Use the <a id="sthref466"></a><a id="sthref467"></a><code dir="ltr">cluvfy comp olr</code> component verification command to check the integrity of Oracle Local Registry (OLR) on the local node.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref468"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp olr [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<p>If you include the <code dir="ltr">-verbose</code> option, then CVU prints detailed output.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref469"></a>Usage Notes</p>
<p>This command does not verify the integrity of the OLR contents. You must use the <code dir="ltr">ocrcheck -local</code> command to verify the contents of OCR.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref470"></a>Example</p>
<p class="subhead2"><a id="CWADD92263"></a>Verifying the integrity of the OLR on a node</p>
<p>To verify the integrity of the OLR on the current node, run the following command:</p>
<pre dir="ltr">
cluvfy comp olr -verbose
</pre>
<p>This command produces output similar to the following:</p>
<pre dir="ltr">
Verifying OLR integrity

Checking OLR integrity...

Checking OLR config file...

OLR config file check successful


Checking OLR file attributes...

OLR file check successful

WARNING:
This check does not verify the integrity of the OLR contents. Execute &amp;rsquor;ocrcheck -local' as a privileged user to verify the contents of OLR.

OLR integrity check passed

Verification of OLR integrity was successful.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91021" class="refsect2"><a id="BEHFGAHE"></a>
<h3 class="refsect2">cluvfy comp peer</h3>
<p>Use the <a id="sthref471"></a><a id="sthref472"></a><code dir="ltr">cluvfy comp peer</code> component verification command to check the compatibility and properties of the specified nodes against a reference node. You can check compatibility for non-default user group names and for different releases of the Oracle software. This command compares physical attributes, such as memory and swap space, as well as user and group values, kernel settings, and installed operating system packages.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref473"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp peer -n <span class="italic">node_list</span> [-refnode <span class="italic">node</span>]
 [-r {10gR1 | 10gR2 | 11gR1 | 11gR2}] [-orainv <span class="italic">orainventory_group</span>]
 [-osdba <span class="italic">osdba_group</span>] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref474"></a>Parameters</p>
<div id="CWADD91357" class="tblformal">
<p class="titleintable"><a id="sthref475"></a><a id="sthref476"></a>Table A-20 cluvfy comp peer Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp peer Command Parameters " summary="This table lists and describes the cluvfy comp peer command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t27">Parameter</th>
<th class="cellalignment415" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t27" headers="r1c1-t27">
<pre dir="ltr">
-refnode
</pre></td>
<td class="cellalignment416" headers="r2c1-t27 r1c2-t27">
<p>The node that CVU uses as a reference for checking compatibility with other nodes. If you do not specify this option, then CVU reports values for all the nodes in the node list.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t27" headers="r1c1-t27">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r3c1-t27 r1c2-t27">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t27" headers="r1c1-t27">
<pre dir="ltr">
-r {10gR1 | 10gR2 | 11gR1 |
 11gR2}
</pre></td>
<td class="cellalignment416" headers="r4c1-t27 r1c2-t27">
<p>Specifies the software release that CVU checks as required for installation of Oracle Clusterware or Oracle RAC. If you do not specify this option, then CVU assumes Oracle Clusterware or Oracle Database 11<span class="italic">g</span> release 2 (11.2).</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r5c1-t27" headers="r1c1-t27">
<pre dir="ltr">
-orainv <span class="italic">orainventory_group</span>
</pre></td>
<td class="cellalignment416" headers="r5c1-t27 r1c2-t27">
<p>The name of the Oracle Inventory group. If you do not specify this option, then CVU uses <code dir="ltr">oinstall</code> as the inventory group.</p>
<p><span class="bold">Note:</span> This parameter is not available on Windows systems.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r6c1-t27" headers="r1c1-t27">
<pre dir="ltr">
-osdba <span class="italic">osdba_group</span>
</pre></td>
<td class="cellalignment416" headers="r6c1-t27 r1c2-t27">
<p>The name of the OSDBA group. If you do not specify this option, then CVU uses <code dir="ltr">dba</code> as the OSDBA group.</p>
<p><span class="bold">Note:</span> This parameter is not available on Windows systems.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r7c1-t27" headers="r1c1-t27">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r7c1-t27 r1c2-t27">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref477"></a>Usage Notes</p>
<p>Peer comparison with the <code dir="ltr">-refnode</code> option compares the system properties of other nodes against the reference node. If the value does not match (the value is not equal to reference node value), then CVU flags that comparison as a deviation from the reference node. If a group or user does not exist on reference node as well as on the other node, CVU reports this comparison as 'passed' because there is no deviation from the reference node. Similarly, CVU reports as 'failed' a comparison with a node that has more total memory than the reference node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref478"></a>Example</p>
<p class="subhead2"><a id="CWADD91358"></a>Comparing the configuration of select cluster nodes</p>
<p>The following command lists the values of several preselected properties on different nodes from Oracle Database 11<span class="italic">g</span> release 2 (11.2):</p>
<pre dir="ltr">
cluvfy comp peer -n node1,node2,node4,node7 -verbose
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91045" class="refsect2"><a id="CJGGFAGF"></a>
<h3 class="refsect2">cluvfy comp scan</h3>
<p>Use the <a id="sthref479"></a><a id="sthref480"></a><code dir="ltr">cluvfy comp scan</code> component verification command to check the Single Client Access Name (SCAN) configuration.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref481"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp scan [-verbose]
</pre>
<p>If you include the <code dir="ltr">-verbose</code> option, then CVU prints detailed output.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref482"></a>Example</p>
<p class="subhead2"><a id="CWADD92264"></a>Verifying the SCAN configuration</p>
<p>To verify that the SCAN and SCAN listeners are configured and operational on all nodes in the cluster, use the following command:</p>
<pre dir="ltr">
cluvfy comp scan
</pre>
<p>This command produces output similar to the following:</p>
<pre dir="ltr">
Verifying scan

Checking Single Client Access Name (SCAN)...

Checking TCP connectivity to SCAN Listeners...
TCP connectivity to SCAN Listeners exists on all cluster nodes

Checking name resolution setup for &rdquo;node1.example.com&rdquo;...

Verification of SCAN VIP and Listener setup passed

Verification of scan was successful.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91041" class="refsect2"><a id="CJGIIBIG"></a>
<h3 class="refsect2">cluvfy comp software</h3>
<p>Use the <a id="sthref483"></a><a id="sthref484"></a><code dir="ltr">cluvfy comp software</code> component verification command to check the files and attributes installed with the Oracle software.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref485"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp software [-n <span class="italic">node_list</span>] [-d <span class="italic">oracle_home</span>] 
 [-r {10gR1 | 10gR2 | 11gR1 | 11gR2}] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref486"></a>Parameters</p>
<div id="CWADD92265" class="tblformal">
<p class="titleintable"><a id="sthref487"></a><a id="sthref488"></a>Table A-21 cluvfy comp software Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp software Command Parameters " summary="This table lists and describes the cluvfy comp software command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t28">Parameter</th>
<th class="cellalignment415" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t28" headers="r1c1-t28">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t28 r1c2-t28">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t28" headers="r1c1-t28">
<pre dir="ltr">
-d <span class="italic">oracle_home</span>
</pre></td>
<td class="cellalignment416" headers="r3c1-t28 r1c2-t28">
<p>The directory where the Oracle Database software is installed. If you do not specify this option, then the files installed in the Grid home are verified.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t28" headers="r1c1-t28">
<pre dir="ltr">
-r {10gR1 | 10gR2 | 11gR1 |
 11gR2}
</pre></td>
<td class="cellalignment416" headers="r4c1-t28 r1c2-t28">
<p>Specifies the software release that CVU checks as required for installation of Oracle Clusterware or Oracle RAC. If you do not specify this option, then CVU assumes Oracle Clusterware or Oracle Database 11<span class="italic">g</span> release 2 (11.2).</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r5c1-t28" headers="r1c1-t28">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r5c1-t28 r1c2-t28">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref489"></a>Example</p>
<p class="subhead2"><a id="CWADD92266"></a>Verifying the software configuration on all nodes in the cluster for the Oracle Clusterware home directory.</p>
<p>To verify that the installed files for Oracle Clusterware 11g release 2 are configured correctly, use a command similar to the following:</p>
<pre dir="ltr">
cluvfy comp software -n all -verbose
</pre>
<p>This command produces output similar to the following:</p>
<pre dir="ltr">
Verifying software

Check: Software

 1021 files verified

Software check passed

Verification of software was successful.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91048" class="refsect2"><a id="CJGJCCIJ"></a>
<h3 class="refsect2">cluvfy comp space</h3>
<p>Use the <a id="sthref490"></a><a id="sthref491"></a><code dir="ltr">cluvfy comp space</code> component verification command to check for free disk space at the location you specify in the <code dir="ltr">-l</code> option on all the specified nodes.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref492"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp space [-n <span class="italic">node_list</span>] -l <span class="italic">storage_location</span> 
 -z <span class="italic">disk_space</span> {B | K | M | G} [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref493"></a>Parameters</p>
<div id="CWADD91361" class="tblformal">
<p class="titleintable"><a id="sthref494"></a><a id="sthref495"></a>Table A-22 cluvfy comp space Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp space Command Parameters " summary="This table lists and describes the cluvfy comp space command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t29">Parameter</th>
<th class="cellalignment415" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t29" headers="r1c1-t29">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t29 r1c2-t29">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t29" headers="r1c1-t29">
<pre dir="ltr">
-l <span class="italic">storage_location</span>
</pre></td>
<td class="cellalignment416" headers="r3c1-t29 r1c2-t29">
<p>The directory path to the storage location to check</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t29" headers="r1c1-t29">
<pre dir="ltr">
-z <span class="italic">disk_space</span> {B|K|M|G}
</pre></td>
<td class="cellalignment416" headers="r4c1-t29 r1c2-t29">
<p>The required disk space, in units of bytes (B), kilobytes (K), megabytes (M), or gigabytes (G). There should be no space between the numerical value and the byte indicator, for example, 2G. Use only whole numbers.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r5c1-t29" headers="r1c1-t29">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r5c1-t29 r1c2-t29">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref496"></a>Usage Notes</p>
<p>The <code dir="ltr">space</code> component does not support block or raw devices.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The Oracle Certification site on My Oracle Support for the most current information about certified storage options:
<p><code dir="ltr"><a href="https://support.oracle.com">https://support.oracle.com</a></code></p>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref497"></a>Examples</p>
<p class="subhead2"><a id="CWADD91362"></a>Verifying the availability of free space on all nodes</p>
<p>You can verify that each node has 5 GB of free space in the <code dir="ltr">/home/dbadmin/products</code> directory by running the following command:</p>
<pre dir="ltr">
cluvfy comp space -n all -l /home/dbadmin/products &ndash;z 5G -verbose
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91047" class="refsect2"><a id="CJGDBBII"></a>
<h3 class="refsect2">cluvfy comp ssa</h3>
<p>Use the <a id="sthref498"></a><a id="sthref499"></a><code dir="ltr">cluvfy comp ssa</code> component verification command to discover and check the sharing of the specified storage locations. CVU checks sharing for nodes in the node list.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref500"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp ssa [-n <span class="italic">node_list</span>] [-s <span class="italic">storageID_list</span>]
 [-t {software | data | ocr_vdisk}] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref501"></a>Parameters</p>
<div id="CWADD91363" class="tblformal">
<p class="titleintable"><a id="sthref502"></a><a id="sthref503"></a>Table A-23 cluvfy comp ssa Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp ssa Command Parameters " summary="This table lists and describes the cluvfy comp ssa command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t31">Parameter</th>
<th class="cellalignment415" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t31" headers="r1c1-t31">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t31 r1c2-t31">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t31" headers="r1c1-t31">
<pre dir="ltr">
-s <span class="italic">storageID_list</span>
</pre></td>
<td class="cellalignment416" headers="r3c1-t31 r1c2-t31">
<p>A comma-delimited list of storage IDs, for example, <code dir="ltr">/dev/sda,/dev/sdb</code>.</p>
<p>If you do not specify the <code dir="ltr">-s</code> option, then CVU discovers supported storage types and checks sharing for each of them.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t31" headers="r1c1-t31">
<pre dir="ltr">
-t {software | data | 
ocr_vdisk}
</pre></td>
<td class="cellalignment416" headers="r4c1-t31 r1c2-t31">
<p>The type of Oracle file that will be stored on the storage device.</p>
<p>If you do not provide the <code dir="ltr">-t</code> option, then CVU discovers or checks the <code dir="ltr">data</code> file type.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r5c1-t31" headers="r1c1-t31">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r5c1-t31 r1c2-t31">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref504"></a>Usage Notes</p>
<ul>
<li>
<p>The current release of <code dir="ltr">cluvfy</code> has the following limitations on Linux regarding shared storage accessibility check.</p>
<ul>
<li>
<p>Currently NAS storage and OCFS2 (version 1.2.1 or higher) are supported.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CWGEN" href="http://www.oracle.com/pls/topic/lookup?ctx=db112&amp;id=CWGEN"><span class="italic">Oracle Grid Infrastructure Installation Guide</span></a> for more information about NAS mount options</div>
</li>
<li>
<p>For sharedness checks on NAS, <code dir="ltr">cluvfy</code> commands require that you have write permission on the specified path. If the <code dir="ltr">cluvfy</code> user does not have write permission, <code dir="ltr">cluvfy</code> reports the path as <code dir="ltr">not</code> <code dir="ltr">shared</code>.</p>
</li>
</ul>
</li>
<li>
<p>To perform discovery and shared storage accessibility checks for SCSI disks on Linux systems, CVU requires the CVUQDISK package. If you attempt to use CVU and the CVUQDISK package is not installed on all of the nodes in your Oracle RAC environment, then CVU responds with an error. See <a href="#BEHJHBEJ">"Shared Disk Discovery on Red Hat Linux"</a> for information about how to install the CVUQDISK package.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref505"></a>Examples</p>
<p class="subhead2"><a id="CWADD91364"></a>Example 1: Discovering All of the Available Shared Storage Systems on Your System</p>
<p>To discover all of the shared storage systems available on your system, run the following command:</p>
<pre dir="ltr">
cluvfy comp ssa -n all -verbose
</pre>
<p class="subhead2"><a id="CWADD91365"></a>Example 2: Verifying the Accessibility of a Specific Storage Location</p>
<p>You can verify the accessibility of specific storage locations, such as <code dir="ltr">/dev/sda</code>, for storing data files for all the cluster nodes by running a command similar to the following:</p>
<pre dir="ltr">
cluvfy comp ssa -n all -s /dev/sda,/dev/sdb,/dev/sdc
</pre>
<p>This command produces output similar to the following:</p>
<pre dir="ltr">
Verifying shared storage acessibility

Checking shared storage accessibility...

&rdquo;/dev/sda&rdquo; is shared
&rdquo;/dev/sdb&rdquo; is shared
&rdquo;/dev/sdc&rdquo; is shared


Shared storage check was successful on nodes &rdquo;node1,node2,node3,node4&rdquo;

Verification of shared storage accessibility was successful.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91017" class="refsect2"><a id="BEHHHICG"></a>
<h3 class="refsect2">cluvfy comp sys</h3>
<p>Use the <a id="sthref506"></a><a id="sthref507"></a><code dir="ltr">cluvfy comp sys</code> component verification command to check that the minimum system requirements are met for the specified product on all the specified nodes.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref508"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp sys [-n <span class="italic">node_list</span>] -p {crs | ha | database} 
 [-r {10gR1 | 10gR2 | 11gR1 | 11gR2}] [-osdba <span class="italic">osdba_group</span>]
 [-orainv <span class="italic">orainventory_group</span>] [-fixup [-fixupdir <span class="italic">fixup_dir</span>]] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref509"></a>Parameters</p>
<div id="CWADD91366" class="tblformal">
<p class="titleintable"><a id="sthref510"></a><a id="sthref511"></a>Table A-24 cluvfy comp sys Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp sys Command Parameters " summary="This table lists and describes the cluvfy comp sys command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t33">Parameter</th>
<th class="cellalignment415" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t33" headers="r1c1-t33">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t33 r1c2-t33">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t33" headers="r1c1-t33">
<p><code dir="ltr">-p {crs | ha | database}</code></p>
</td>
<td class="cellalignment416" headers="r3c1-t33 r1c2-t33">
<p>Specifies whether CVU checks the system requirements for Oracle Clusterware, Oracle Restart (HA), or Oracle RAC.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t33" headers="r1c1-t33">
<pre dir="ltr">
-r {10gR1 | 10gR2 | 11gR1 |
11gR2}
</pre></td>
<td class="cellalignment416" headers="r4c1-t33 r1c2-t33">
<p>Specifies the Oracle Database release that CVU checks as required for installation of Oracle Clusterware or Oracle RAC. If you do not specify this option, then CVU assumes Oracle Database 11<span class="italic">g</span> release 2 (11.2).</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r5c1-t33" headers="r1c1-t33">
<pre dir="ltr">
-osdba <span class="italic">osdba_group</span>
</pre></td>
<td class="cellalignment416" headers="r5c1-t33 r1c2-t33">
<p>The name of the OSDBA group. If you do not specify this option, then CVU uses <code dir="ltr">dba</code> as the OSDBA group.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r6c1-t33" headers="r1c1-t33">
<pre dir="ltr">
-orainv <span class="italic">orainventory_group</span>
</pre></td>
<td class="cellalignment416" headers="r6c1-t33 r1c2-t33">
<p>The name of the Oracle Inventory group. If you do not specify this option, then CVU uses <code dir="ltr">oinstall</code> as the inventory group.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r7c1-t33" headers="r1c1-t33">
<pre dir="ltr">
-fixup [-fixupdir <span class="italic">fixup_dir</span>]
</pre></td>
<td class="cellalignment416" headers="r7c1-t33 r1c2-t33">
<p>Specifies that if the verification fails, then CVU generates fixup instructions, if feasible. Use the <code dir="ltr">-fixupdir</code> option to specify a specific directory in which CVU generates the fixup instructions. If you do not specify a directory, CVU uses its work directory.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r8c1-t33" headers="r1c1-t33">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r8c1-t33 r1c2-t33">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref512"></a>Examples</p>
<p class="subhead2"><a id="CWADD91367"></a>Verifying the system requirements for installing Oracle Clusterware</p>
<p>To verify the system requirements for installing Oracle Clusterware 11g release 2 on the cluster nodes <code dir="ltr">node1</code>,<code dir="ltr">node2</code> and <code dir="ltr">node3</code>, run the following command:</p>
<pre dir="ltr">
cluvfy comp sys -n node1,node2,node3 -p crs -verbose
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91506" class="refsect2"><a id="CACEAJCH"></a>
<h3 class="refsect2">cluvfy comp vdisk</h3>
<p>Use the <a id="sthref513"></a><a id="sthref514"></a><code dir="ltr">cluvfy comp vdisk</code> component verification command to check the voting disks configuration and the <code dir="ltr">udev</code> settings for the voting disks on all the specified nodes.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CWLIN304" href="../../install.112/e41961/storage.htm#CWLIN304"><span class="italic">Oracle Grid Infrastructure Installation Guide for Linux</span></a> for more information about <code dir="ltr">udev</code> settings</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref515"></a>Syntax</p>
<pre dir="ltr">
cluvfy comp vdisk [-n <span class="italic">node_list</span>] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref516"></a>Parameters</p>
<div id="CWADD91507" class="tblformal">
<p class="titleintable"><a id="sthref517"></a><a id="sthref518"></a>Table A-25 cluvfy comp vdisk Command Parameters</p>
<table class="cellalignment417" title="cluvfy comp vdisk Command Parameters " summary="This table lists and describes the cluvfy comp vdisk command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t35">Parameter</th>
<th class="cellalignment415" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t35" headers="r1c1-t35">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t35 r1c2-t35">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
<p>If you do not specify this option, then CVU checks only the local node.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t35" headers="r1c1-t35">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r3c1-t35 r1c2-t35">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91050" class="refsect2"><a id="CACIFFAC"></a>
<h3 class="refsect2">cluvfy stage [-pre | -post] acfscfg</h3>
<p>se the <a id="sthref519"></a><a id="sthref520"></a><a id="sthref521"></a><code dir="ltr">cluvfy stage -pre acfscfg</code> command to verify your cluster nodes are set up correctly before configuring Oracle ASM Cluster File System (Oracle ACFS).</p>
<p>Use the <code dir="ltr">cluvfy stage -post acfscfg</code> to check an existing cluster after you configure Oracle ACFS.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref522"></a>Syntax</p>
<pre dir="ltr">
cluvfy stage -pre acfscfg -n <span class="italic">node_list</span> [-asmdev <span class="italic">asm_device_list</span>] [-verbose]

cluvfy stage -post acfscfg -n <span class="italic">node_list</span> [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref523"></a>Parameters</p>
<div id="CWADD91380" class="tblformal">
<p class="titleintable"><a id="sthref524"></a><a id="sthref525"></a>Table A-26 cluvfy stage [-pre | -post] acfscfg Command Parameters</p>
<table class="cellalignment417" title="cluvfy stage [-pre | -post] acfscfg Command Parameters " summary="This table lists and describes the cluvfy stage -pre | -post acfscfg command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t36">Parameter</th>
<th class="cellalignment415" id="r1c2-t36">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t36" headers="r1c1-t36">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t36 r1c2-t36">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t36" headers="r1c1-t36">
<pre dir="ltr">
-asmdev <span class="italic">asm_device_list</span>
</pre></td>
<td class="cellalignment416" headers="r3c1-t36 r1c2-t36">
<p>The list of devices you plan for Oracle ASM to use. If you do not specify this option, then CVU uses an internal operating system-dependent value, for example, <code dir="ltr">/dev/raw/*</code> on Linux systems.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t36" headers="r1c1-t36">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r4c1-t36 r1c2-t36">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91108" class="refsect2"><a id="CJGFBDCD"></a>
<h3 class="refsect2">cluvfy stage [-pre | -post] cfs</h3>
<p>Use the <a id="sthref526"></a><a id="sthref527"></a><a id="sthref528"></a><code dir="ltr">cluvfy stage -pre cfs</code> stage verification command to verify your cluster nodes are set up correctly before setting up OCFS2 or OCFS for Windows.</p>
<p>Use the <code dir="ltr">cluvfy stage -post cfs</code> stage verification command to perform the appropriate checks on the specified nodes after setting up OCFS2 or OCFS for Windows.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CWGEN" href="http://www.oracle.com/pls/topic/lookup?ctx=db112&amp;id=CWGEN"><span class="italic">Oracle Grid Infrastructure Installation Guide</span></a> for your platform for a list of supported shared storage types</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref529"></a>Syntax</p>
<pre dir="ltr">
cluvfy stage -pre cfs -n <span class="italic">node_list</span> -s <span class="italic">storageID_list</span> [-verbose]

cluvfy stage -post cfs -n <span class="italic">node_list</span> -f <span class="italic">file_system</span> [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref530"></a>Parameters</p>
<div id="CWADD92267" class="tblformal">
<p class="titleintable"><a id="sthref531"></a><a id="sthref532"></a>Table A-27 cluvfy stage [-pre | -post] cfs Command Parameters</p>
<table class="cellalignment417" title="cluvfy stage [-pre | -post] cfs Command Parameters " summary="This table lists and describes the cluvfy stage -pre | -post cfs command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t38">Parameter</th>
<th class="cellalignment415" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t38" headers="r1c1-t38">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t38 r1c2-t38">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t38" headers="r1c1-t38">
<pre dir="ltr">
-s <span class="italic">storageID_list</span>
</pre></td>
<td class="cellalignment416" headers="r3c1-t38 r1c2-t38">
<p>The comma-delimited list of storage locations to check.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t38" headers="r1c1-t38">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r4c1-t38 r1c2-t38">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref533"></a>Examples</p>
<p class="subhead2"><a id="CWADD92268"></a>Example 1: Check that a specific shared device is configured correctly before configuring OCFS2</p>
<p>To check that a shared device is configured correctly before setting up OCFS2, use a command similar to the following, where you replace /dev/sdd5 with the name of the shared device on your system:</p>
<pre dir="ltr">
cluvfy stage -pre cfs -n node1,node2,node3,node4 -s /dev/sdd5
</pre>
<p class="subhead2"><a id="CWADD92269"></a>Example 2: Check that an OCFS for Windows file system was configured correctly</p>
<p>To check that the configuration of OCFS for Windows completely successfully and that all nodes have access to this new file system, use a command similar to the following, where you replace E:\ocfs\db1 with the location of the OCFS for Windows file system for your cluster:</p>
<pre dir="ltr">
cluvfy stage -post cfs -n all -f E:\ocfs\db1
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91022" class="refsect2"><a id="CJGDEEEJ"></a>
<h3 class="refsect2">cluvfy stage [-pre | -post] crsinst</h3>
<p>Use the <a id="sthref534"></a><a id="sthref535"></a><a id="sthref536"></a><code dir="ltr">cluvfy stage -pre crsinst</code> command to check the specified nodes before installing Oracle Clusterware. CVU performs additional checks on OCR and voting disks if you specify the <code dir="ltr">-c</code> and <code dir="ltr">-q</code> options.</p>
<p>Use the <code dir="ltr">cluvfy stage -post crsinst</code> command to check the specified nodes after installing Oracle Clusterware.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref537"></a>Syntax</p>
<pre dir="ltr">
cluvfy stage -pre crsinst -n <span class="italic">node_list</span> [-r {10gR1 | 10gR2 | 11gR1 | 11gR2}]
 [-c <span class="italic">ocr_location_list</span>] [-q <span class="italic">voting_disk_list</span>] [-osdba <span class="italic">osdba_group</span>]
 [-orainv <span class="italic">orainventory_group</span>] [-asm [-asmgrp <span class="italic">asmadmin_group</span>] [-asmdev <span class="italic">asm_device_list</span>]]
 [-crshome <span class="italic">Grid_home</span>] [-fixup [-fixupdir <span class="italic">fixup_dir</span>]
 [-networks <span class="italic">network_list</span>]
 [-verbose]]

cluvfy stage -post crsinst -n <span class="italic">node_list</span> [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref538"></a>Parameters</p>
<div id="CWADD91370" class="tblformal">
<p class="titleintable"><a id="sthref539"></a><a id="sthref540"></a>Table A-28 cluvfy stage [-pre | -post] crsinst Command Parameters</p>
<table class="cellalignment417" title="cluvfy stage [-pre | -post] crsinst Command Parameters " summary="This table lists and describes the cluvfy stage -pre | -post crsinst command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t39">Parameter</th>
<th class="cellalignment415" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t39" headers="r1c1-t39">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t39 r1c2-t39">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t39" headers="r1c1-t39">
<pre dir="ltr">
-r {10gR1 | 10gR2 | 11gR1 |
11gR2}
</pre></td>
<td class="cellalignment416" headers="r3c1-t39 r1c2-t39">
<p>Specifies the Oracle Clusterware release that CVU checks as required for installation of Oracle Clusterware. If you do not specify this option, then CVU assumes Oracle Clusterware 11<span class="italic">g</span> release 2 (11.2).</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t39" headers="r1c1-t39">
<pre dir="ltr">
-c <span class="italic">ocr_location</span><span class="codeinlineitalic">_list</span>
</pre></td>
<td class="cellalignment416" headers="r4c1-t39 r1c2-t39">
<p>A comma-delimited list of directory paths for OCR locations or files that CVU checks for availability to all nodes. If you do not specify this option, then the OCR locations are not checked.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r5c1-t39" headers="r1c1-t39">
<pre dir="ltr">
-q <span class="italic">voting_disk_list</span>
</pre></td>
<td class="cellalignment416" headers="r5c1-t39 r1c2-t39">
<p>A comma-delimited list of directory paths for voting disks that CVU checks for availability to all nodes. If you do not specify this option, then the voting disk locations are not checked</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r6c1-t39" headers="r1c1-t39">
<pre dir="ltr">
-osdba <span class="italic">osdba_group</span>
</pre></td>
<td class="cellalignment416" headers="r6c1-t39 r1c2-t39">
<p>The name of the OSDBA group. If you do not specify this option, then CVU uses <code dir="ltr">dba</code> as the OSDBA group.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r7c1-t39" headers="r1c1-t39">
<pre dir="ltr">
-orainv <span class="italic">orainventory_group</span>
</pre></td>
<td class="cellalignment416" headers="r7c1-t39 r1c2-t39">
<p>The name of the Oracle Inventory group. If you do not specify this option, then CVU uses <code dir="ltr">oinstall</code> as the inventory group.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r8c1-t39" headers="r1c1-t39">
<pre dir="ltr">
-asm
</pre></td>
<td class="cellalignment416" headers="r8c1-t39 r1c2-t39">
<p>Indicates that Oracle ASM is used for storing the Oracle Clusterware files.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r9c1-t39" headers="r1c1-t39">
<pre dir="ltr">
-asmgrp <span class="italic">asmadmin_group</span>
</pre></td>
<td class="cellalignment416" headers="r9c1-t39 r1c2-t39">
<p>The name of the OSASM group. If you do not specify this option, then CVU uses <code dir="ltr">dba</code> as the OSDBA group</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r10c1-t39" headers="r1c1-t39">
<pre dir="ltr">
-asm -asmdev <span class="italic">asm_device_list</span>
</pre></td>
<td class="cellalignment416" headers="r10c1-t39 r1c2-t39">
<p>A list of devices you plan for Oracle ASM to use that CVU checks for availability to all nodes.</p>
<p>If you do not specify this option, then CVU uses an internal operating system-dependent value.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r11c1-t39" headers="r1c1-t39">
<p><code dir="ltr">-crshome</code> <code dir="ltr"><span class="codeinlineitalic">Grid_home</span></code></p>
</td>
<td class="cellalignment416" headers="r11c1-t39 r1c2-t39">
<p>The location of the Oracle Grid Infrastructure or Oracle Clusterware home directory. If you do not specify this option, then the supplied file system location is checked for sufficient free space for an Oracle Clusterware installation.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r12c1-t39" headers="r1c1-t39">
<pre dir="ltr">
-fixup [-fixupdir <span class="italic">fixup_dir</span>]
</pre></td>
<td class="cellalignment416" headers="r12c1-t39 r1c2-t39">
<p>Specifies that if the verification fails, then CVU generates fixup instructions, if feasible. Use the <code dir="ltr">-fixupdir</code> option to specify a specific directory in which CVU generates the fixup instructions. If you do not specify a directory, CVU uses its work directory.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r13c1-t39" headers="r1c1-t39">
<pre dir="ltr">
-networks <span class="italic">network_list</span>
</pre></td>
<td class="cellalignment416" headers="r13c1-t39 r1c2-t39">
<p>Checks the network parameters of a comma-delimited list of networks in the form of <code dir="ltr">"</code><code dir="ltr"><span class="codeinlineitalic">if_name</span></code><code dir="ltr">"</code> <code dir="ltr">[:</code><code dir="ltr"><span class="codeinlineitalic">subnet_id</span></code> <code dir="ltr">[:public | :cluster_interconnect]]</code>.</p>
<ul>
<li>
<p>You can use the asterisk (<code dir="ltr">*</code>) wildcard character when you specify the network interface name (<code dir="ltr"><span class="codeinlineitalic">if_name</span></code>), such as <code dir="ltr">eth*</code>, to match interfaces.</p>
</li>
<li>
<p>Specify a subnet number for the network interface for the <code dir="ltr"><span class="codeinlineitalic">subnet_id</span></code> variable and choose the type of network interface.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r14c1-t39" headers="r1c1-t39">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r14c1-t39 r1c2-t39">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91246" class="refsect2"><a id="CJGCFFJG"></a>
<h3 class="refsect2">cluvfy stage -pre dbcfg</h3>
<p>Use the <a id="sthref541"></a><a id="sthref542"></a><code dir="ltr">cluvfy stage -pre dbcfg</code> command to check the specified nodes before configuring an Oracle RAC database to verify whether your system meets all of the criteria for creating a database or for making a database configuration change.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref543"></a>Syntax</p>
<pre dir="ltr">
cluvfy stage -pre dbcfg -n <span class="italic">node_list</span> -d <span class="italic">Oracle_home</span> [-fixup [-fixupdir <span class="italic">fixup_dir</span>]]
[-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref544"></a>Parameters</p>
<div id="CWADD91371" class="tblformal">
<p class="titleintable"><a id="sthref545"></a><a id="sthref546"></a>Table A-29 cluvfy stage -pre dbcfg Command Parameters</p>
<table class="cellalignment417" title="cluvfy stage -pre dbcfg Command Parameters " summary="This table lists and describes the cluvfy stage -pre dbcfg command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t40">Parameter</th>
<th class="cellalignment415" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t40" headers="r1c1-t40">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t40 r1c2-t40">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t40" headers="r1c1-t40">
<pre dir="ltr">
-d <span class="italic">Oracle_home</span>
</pre></td>
<td class="cellalignment416" headers="r3c1-t40 r1c2-t40">
<p>The location of the Oracle home directory for the database that is being checked.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t40" headers="r1c1-t40">
<pre dir="ltr">
-fixup [-fixupdir <span class="italic">fixup_dir</span>]
</pre></td>
<td class="cellalignment416" headers="r4c1-t40 r1c2-t40">
<p>Specifies that if the verification fails, then CVU generates fixup instructions, if feasible. Use the <code dir="ltr">-fixupdir</code> option to specify a specific directory in which CVU generates the fixup instructions. If you do not specify a directory, CVU uses its work directory.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r5c1-t40" headers="r1c1-t40">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r5c1-t40 r1c2-t40">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91245" class="refsect2"><a id="CJGGEADI"></a>
<h3 class="refsect2">cluvfy stage -pre dbinst</h3>
<p>Use the <a id="sthref547"></a><a id="sthref548"></a><code dir="ltr">cluvfy stage -pre dbinst</code> command to check the specified nodes before installing or creating an Oracle RAC database to verify that your system meets all of the criteria for installing or creating an Oracle RAC database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref549"></a>Syntax</p>
<pre dir="ltr">
cluvfy stage -pre dbinst -n <span class="italic">node_list</span> [-r {10gR1 | 10gR2 | 11gR1 | 11gR2}]
 [-osdba <span class="italic">osdba_group</span>] [-d <span class="italic">Oracle_home</span>] [-fixup [-fixupdir <span class="italic">fixup_dir</span>] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref550"></a>Parameters</p>
<div id="CWADD91372" class="tblformal">
<p class="titleintable"><a id="sthref551"></a><a id="sthref552"></a>Table A-30 cluvfy stage -pre dbinst Command Parameters</p>
<table class="cellalignment417" title="cluvfy stage -pre dbinst Command Parameters " summary="This table lists and describes the cluvfy stage -pre dbinst command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t41">Parameter</th>
<th class="cellalignment415" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t41" headers="r1c1-t41">
<pre dir="ltr">
-n <span class="italic">node_list</span> 
</pre></td>
<td class="cellalignment416" headers="r2c1-t41 r1c2-t41">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t41" headers="r1c1-t41">
<pre dir="ltr">
-r {10gR1 | 10gR2 | 11gR1 | 11gR2}
</pre></td>
<td class="cellalignment416" headers="r3c1-t41 r1c2-t41">
<p>Specifies the Oracle Database release that CVU checks as required for installation of Oracle RAC. If you do not specify this option, then CVU assumes Oracle Database 11<span class="italic">g</span> release 2 (11.2).</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t41" headers="r1c1-t41">
<pre dir="ltr">
-osdba <span class="italic">osdba_group</span>
</pre></td>
<td class="cellalignment416" headers="r4c1-t41 r1c2-t41">
<p>The name of the OSDBA group. If you do not specify this option, then CVU uses <code dir="ltr">dba</code> as the OSDBA group.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r5c1-t41" headers="r1c1-t41">
<pre dir="ltr">
-d <span class="italic">Oracle_home</span>
</pre></td>
<td class="cellalignment416" headers="r5c1-t41 r1c2-t41">
<p>The location of the Oracle home directory where you are installing Oracle RAC and creating the Oracle RAC database. If you specify this option, then the specified location is checked for sufficient free disk space for a database installation.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r6c1-t41" headers="r1c1-t41">
<pre dir="ltr">
-fixup [-fixupdir <span class="italic">fixup_dir</span>]
</pre></td>
<td class="cellalignment416" headers="r6c1-t41 r1c2-t41">
<p>Specifies that if the verification fails, then CVU generates fixup instructions, if feasible. Use the <code dir="ltr">-fixupdir</code> option to specify a specific directory in which CVU generates the fixup instructions. If you do not specify a directory, CVU uses its work directory.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r7c1-t41" headers="r1c1-t41">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r7c1-t41 r1c2-t41">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91035" class="refsect2"><a id="CJGEIIJH"></a>
<h3 class="refsect2">cluvfy stage [-pre | -post] hacfg</h3>
<p>Use the <a id="sthref553"></a><a id="sthref554"></a><a id="sthref555"></a><code dir="ltr">cluvfy stage -pre hacfg</code> command to check a local node before configuring Oracle Restart.</p>
<p>Use the <code dir="ltr">cluvfy stage -post hacfg</code> command to check the local node after configuring Oracle Restart.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref556"></a>Syntax</p>
<pre dir="ltr">
cluvfy stage -pre hacfg [-osdba <span class="italic">osdba_group</span>] [-orainv <span class="italic">orainventory_group</span>]
[-fixup [-fixupdir <span class="italic">fixup_dir</span>]] [-verbose]

cluvfy stage -post hacfg [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref557"></a>Parameters</p>
<div id="CWADD91373" class="tblformal">
<p class="titleintable"><a id="sthref558"></a><a id="sthref559"></a>Table A-31 cluvfy stage [-pre | -post] hacfg Command Parameters</p>
<table class="cellalignment417" title="cluvfy stage [-pre | -post] hacfg Command Parameters " summary="This table lists and describes the cluvfy stage -pre | -post hacfg command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t42">Parameter</th>
<th class="cellalignment415" id="r1c2-t42">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t42" headers="r1c1-t42">
<pre dir="ltr">
-osdba <span class="italic">osdba_group</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t42 r1c2-t42">
<p>The name of the OSDBA group. If you do not specify this option, then CVU uses <code dir="ltr">dba</code> as the OSDBA group.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t42" headers="r1c1-t42">
<pre dir="ltr">
-orainv <span class="italic">orainventory_group</span>
</pre></td>
<td class="cellalignment416" headers="r3c1-t42 r1c2-t42">
<p>The name of the Oracle Inventory group. If you do not specify this option, then CVU uses <code dir="ltr">oinstall</code> as the inventory group.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t42" headers="r1c1-t42">
<pre dir="ltr">
-fixup [-fixupdir <span class="italic">fixup_dir</span>]
</pre></td>
<td class="cellalignment416" headers="r4c1-t42 r1c2-t42">
<p>Specifies that if the verification fails, then CVU generates fixup instructions, if feasible. Use the <code dir="ltr">-fixupdir</code> option to specify a specific directory in which CVU generates the fixup instructions. If you do not specify a directory, CVU uses its work directory.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r5c1-t42" headers="r1c1-t42">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r5c1-t42 r1c2-t42">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91240" class="refsect2"><a id="CJGJHIEG"></a>
<h3 class="refsect2">cluvfy stage -post hwos</h3>
<p>Use the <a id="sthref560"></a><a id="sthref561"></a><code dir="ltr">cluvfy stage -post hwos</code> stage verification command to perform network and storage verifications on the specified nodes in the cluster before installing Oracle software. This command also checks for supported storage types and checks each one for sharing.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref562"></a>Syntax</p>
<pre dir="ltr">
cluvfy stage -post hwos -n <span class="italic">node_list</span> [-s <span class="italic">storageID_list</span>] [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref563"></a>Parameters</p>
<div id="CWADD91374" class="tblformal">
<p class="titleintable"><a id="sthref564"></a><a id="sthref565"></a>Table A-32 cluvfy stage -post hwos Command Parameters</p>
<table class="cellalignment417" title="cluvfy stage -post hwos Command Parameters " summary="This table lists and describes the cluvfy stage -post hwos command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t43">Parameter</th>
<th class="cellalignment415" id="r1c2-t43">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t43" headers="r1c1-t43">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t43 r1c2-t43">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t43" headers="r1c1-t43">
<pre dir="ltr">
-s <span class="italic">storageID_list</span>
</pre></td>
<td class="cellalignment416" headers="r3c1-t43 r1c2-t43">
<p>Checks the comma-delimited list of storage locations for sharing of supported storage types.</p>
<p>If you do not provide the <code dir="ltr">-s</code> option, then CVU discovers supported storage types and checks sharing for each of them.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t43" headers="r1c1-t43">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r4c1-t43 r1c2-t43">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91032" class="refsect2"><a id="CJGBHBFD"></a>
<h3 class="refsect2">cluvfy stage [-pre | -post] nodeadd</h3>
<p>Use the <a id="sthref566"></a><a id="sthref567"></a><a id="sthref568"></a><code dir="ltr">cluvfy stage -pre nodeadd</code> command to verify the specified nodes are configured correctly before adding them to your existing cluster, and to verify the integrity of the cluster before you add the nodes.</p>
<p>This command verifies that the system configuration, such as the operating system version, software patches, packages, and kernel parameters, for the nodes that you want to add, is compatible with the existing cluster nodes, and that the clusterware is successfully operating on the existing nodes. Run this command on any node of the existing cluster.</p>
<p>Use the <code dir="ltr">cluvfy stage -post nodeadd</code> command to verify that the specified nodes have been successfully added to the cluster at the network, shared storage, and clusterware levels.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref569"></a>Syntax</p>
<pre dir="ltr">
cluvfy stage -pre nodeadd -n <span class="italic">node_list</span> [-vip <span class="italic">vip_list</span>] 
 [-fixup [-fixupdir <span class="italic">fixup_dir</span>]] [-verbose]

cluvfy stage -post nodeadd -n <span class="italic">node_list</span> [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref570"></a>Parameters</p>
<div id="CWADD91376" class="tblformal">
<p class="titleintable"><a id="sthref571"></a><a id="sthref572"></a>Table A-33 cluvfy stage [-pre | -post] nodeadd Command Parameters</p>
<table class="cellalignment417" title="cluvfy stage [-pre | -post] nodeadd Command Parameters " summary="This table lists and describes the cluvfy stage -pre | -post nodeadd command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t44">Parameter</th>
<th class="cellalignment415" id="r1c2-t44">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t44" headers="r1c1-t44">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t44 r1c2-t44">
<p>A comma-delimited list of nondomain qualified node names on which to conduct the verification. These are the nodes you are adding or have added to the cluster.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t44" headers="r1c1-t44">
<p><code dir="ltr">-v</code> <code dir="ltr"><span class="codeinlineitalic">vip_list</span></code></p>
</td>
<td class="cellalignment416" headers="r3c1-t44 r1c2-t44">
<p>A comma-delimited list of virtual IP addresses to be used by the new nodes.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r4c1-t44" headers="r1c1-t44">
<pre dir="ltr">
-fixup [-fixupdir <span class="italic">fixup_dir</span>]
</pre></td>
<td class="cellalignment416" headers="r4c1-t44 r1c2-t44">
<p>Specifies that if the verification fails, then CVU generates fixup instructions, if feasible. Use the <code dir="ltr">-fixupdir</code> option to specify a specific directory in which CVU generates the fixup instructions. If you do not specify a directory, CVU uses its work directory.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r5c1-t44" headers="r1c1-t44">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r5c1-t44 r1c2-t44">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="CWADD91103" class="refsect2"><a id="CACFEIHC"></a>
<h3 class="refsect2">cluvfy stage -post nodedel</h3>
<p>Use the <code dir="ltr">cluvfy stage -post nodedel</code> command to verify that specific nodes have been successfully deleted from a cluster. Typically, this command verifies that the node-specific interface configuration details have been removed, the nodes are no longer a part of cluster configuration, and proper Oracle ASM cleanup has been performed.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref573"></a>Syntax</p>
<pre dir="ltr">
cluvfy stage -post nodedel -n <span class="italic">node_list</span> [-verbose]
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref574"></a>Parameters</p>
<div id="CWADD91377" class="tblformal">
<p class="titleintable"><a id="sthref575"></a><a id="sthref576"></a>Table A-34 cluvfy stage -post nodedel Command Parameters</p>
<table class="cellalignment417" title="cluvfy stage -post nodedel Command Parameters " summary="This table lists and describes the cluvfy stage -pre | -post nodedel command parameters." dir="ltr">
<thead>
<tr class="cellalignment408">
<th class="cellalignment415" id="r1c1-t45">Parameter</th>
<th class="cellalignment415" id="r1c2-t45">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment408">
<td class="cellalignment416" id="r2c1-t45" headers="r1c1-t45">
<pre dir="ltr">
-n <span class="italic">node_list</span>
</pre></td>
<td class="cellalignment416" headers="r2c1-t45 r1c2-t45">
<p>The comma-delimited list of nondomain qualified node names on which to conduct the verification. If you specify <code dir="ltr">all</code>, then CVU checks all of the nodes in the cluster.</p>
</td>
</tr>
<tr class="cellalignment408">
<td class="cellalignment416" id="r3c1-t45" headers="r1c1-t45">
<pre dir="ltr">
-verbose
</pre></td>
<td class="cellalignment416" headers="r3c1-t45 r1c2-t45">
<p>CVU prints detailed output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref577"></a>Usage Notes</p>
<p>If the <code dir="ltr">cluvfy stage -post nodedel</code> check fails, then repeat the node deletion procedure.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adddelclusterware.htm#CHDFIAIE">Chapter 4, "Adding and Deleting Cluster Nodes"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACDGCDI"></a>
<div id="CWADD91381" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Troubleshooting and Diagnostic Output for CVU</h2>
<p>This section describes the following troubleshooting topics for CVU:</p>
<ul>
<li>
<p><a href="#CJGEJEAF">Enabling Tracing</a></p>
</li>
<li>
<p><a href="#BEHCGGGA">Known Issues for the Cluster Verification Utility</a></p>
</li>
</ul>
<div id="CWADD91382" class="refsect2"><a id="CJGEJEAF"></a>
<h3 class="refsect2">Enabling Tracing</h3>
<p>You can enable tracing by setting the environment variable <code dir="ltr">SRVM_TRACE</code> to true. For example, in <code dir="ltr">tcsh</code> an entry such as <code dir="ltr">setenv SRVM_TRACE true</code> enables tracing.</p>
<p>The CVU trace files are created in the <code dir="ltr">CV_HOME/cv/log</code> directory by default. Oracle Database automatically rotates the log files and the most recently created log file has the name <code dir="ltr">cvutrace.log.0</code>. You should remove unwanted log files or archive them to reclaim disk place if needed.</p>
<p>CVU does not generate trace files unless you enable tracing. To use a non-default location for the trace files, set the <code dir="ltr">CV_TRACELOC</code> environment variable to the absolute path of the desired trace directory.</p>
</div>
<!-- class="refsect2" -->
<div id="CWADD91026" class="refsect2"><a id="BEHCGGGA"></a>
<h3 class="refsect2">Known Issues for the Cluster Verification Utility</h3>
<p><a id="sthref578"></a>This section describes the following known limitations for Cluster Verification Utility (CVU):</p>
<ul>
<li>
<p><a href="#BEHBDHFJ">Database Versions Supported by Cluster Verification Utility</a></p>
</li>
<li>
<p><a href="#BEHCJCAH">Linux Shared Storage Accessibility (ssa) Check Reports Limitations</a></p>
</li>
<li>
<p><a href="#BEHJHBEJ">Shared Disk Discovery on Red Hat Linux</a></p>
</li>
</ul>
<div id="CWADD91027" class="refsect3"><a id="BEHBDHFJ"></a>
<h4 class="refsect3">Database Versions Supported by Cluster Verification Utility</h4>
<p>The current CVU release supports only Oracle Database 10<span class="italic">g</span> or higher, Oracle RAC, and Oracle Clusterware; CVU is not backward compatible. CVU cannot check or verify Oracle Database products for releases prior to Oracle Database 10<span class="italic">g</span>.</p>
</div>
<!-- class="refsect3" -->
<div id="CWADD91028" class="refsect3"><a id="BEHCJCAH"></a>
<h4 class="refsect3">Linux Shared Storage Accessibility (ssa) Check Reports Limitations</h4>
<p>The current release of <code dir="ltr">cluvfy</code> has the following limitations on Linux regarding shared storage accessibility check.</p>
<ul>
<li>
<p>OCFS2 (version 1.2.1 or higher) is supported.</p>
</li>
<li>
<p>For sharedness checks on NAS, <code dir="ltr">cluvfy</code> commands require you to have write permission on the specified path. If the user running the <code dir="ltr">cluvfy</code> command does not have write permission, then <code dir="ltr">cluvfy</code> reports the path as <code dir="ltr">not</code> <code dir="ltr">shared</code>.</p>
</li>
</ul>
</div>
<!-- class="refsect3" -->
<div id="CWADD91029" class="refsect3"><a id="BEHJHBEJ"></a>
<h4 class="refsect3">Shared Disk Discovery on Red Hat Linux</h4>
<p>To perform discovery and shared storage accessibility checks for SCSI disks on Red Hat Linux 4.0 (or higher) and SUSE Linux Enterprise Server, CVU requires the CVUQDISK package. If you attempt to use CVU and the CVUQDISK package is not installed on all of the nodes in your Oracle RAC environment, then CVU responds with an error.</p>
<p>Perform the following procedure to install the CVUQDISK package:</p>
<ol>
<li>
<p>Login as the <code dir="ltr">root</code> user.</p>
</li>
<li>
<p>Copy the package, <code dir="ltr">cvuqdisk-1.0.6-1.rpm</code> (or higher version) to a local directory. You can find this rpm in the <code dir="ltr">rpm</code> subdirectory of the top-most directory in the Oracle Clusterware installation media. For example, you can find <code dir="ltr">cvuqdisk-1.0.6-1.rpm</code> in the directory <code dir="ltr">/</code><code dir="ltr"><span class="codeinlineitalic">mountpoint</span></code><code dir="ltr">/clusterware/rpm/</code> where <code dir="ltr"><span class="codeinlineitalic">mountpoint</span></code> is the mount point for the disk on which the directory is located.</p>
<pre dir="ltr">
# cp /<span class="italic">mount_point</span>/clusterware/rpm/cvuqdisk-1.0.6-1.rpm /u01/oradba
</pre></li>
<li>
<p>Set the <code dir="ltr">CVUQDISK_GRP</code> environment variable to the operating system group that should own the CVUQDISK package binaries. If <code dir="ltr">CVUQDISK_GRP</code> is not set, then, by default, the <code dir="ltr">oinstall</code> group is the owner's group.</p>
<pre dir="ltr">
# set CVUQDISK_GRP=oinstall

</pre></li>
<li>
<p>Determine whether previous versions of the CVUQDISK package are installed by running the command <code dir="ltr">rpm -q cvuqdisk</code>. If you find previous versions of the CVUQDISK package, then remove them by running the command <code dir="ltr">rpm -e cvuqdisk</code> <code dir="ltr"><span class="codeinlineitalic">previous_version</span></code> where <code dir="ltr"><span class="codeinlineitalic">previous_version</span></code> is the identifier of the previous CVUQDISK version, as shown in the following example:</p>
<pre dir="ltr">
# rpm -q cvuqdisk
cvuqdisk-1.0.2-1
# rpm -e cvuqdisk-1.0.2-1

</pre></li>
<li>
<p>Install the latest CVUQDISK package by running the command <code dir="ltr">rpm -iv cvuqdisk-1.0.6-1.rpm</code>.</p>
<pre dir="ltr">
# cd /u01/oradba
# rpm -iv cvuqdisk-1.0.6-1.rpm

</pre></li>
</ol>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="appendix" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment407">
<tr>
<td class="cellalignment416">
<table class="cellalignment412">
<tr>
<td class="cellalignment411"><a href="crschp.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment411"><a href="resatt.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2007, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment419">
<table class="cellalignment410">
<tr>
<td class="cellalignment411"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment411"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment411"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment411"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment411"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment411"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
