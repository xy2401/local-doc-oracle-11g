<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Managing Logical Change Records (LCRs)</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 732" />
<meta name="dcterms.created" content="2013-06-04T12:45:24Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Streams Replication Administrator's Guide" />
<meta name="dcterms.identifier" content="E10705-10" />
<meta name="dcterms.isVersionOf" content="STREP" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2003, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="man_comp.htm" title="Previous" type="text/html" />
<link rel="Next" href="ptrep_best.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10705.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">19/27</span> <!-- End Header -->
<div id="STREP009" class="chapter"><a id="i1011931"></a><a id="BABFHGEH"></a>
<h1 class="chapter"><span class="secnum">14</span> Managing Logical Change Records (LCRs)</h1>
<p><a id="sthref621"></a><a id="sthref622"></a>This chapter contains instructions for managing logical change records (LCRs) in an Oracle Streams replication environment.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1009950">Requirements for Managing LCRs</a></p>
</li>
<li>
<p><a href="#i1009981">Constructing and Enqueuing LCRs</a></p>
</li>
<li>
<p><a href="#BABFBDDH">Executing LCRs</a></p>
</li>
<li>
<p><a href="#BABBEDEJ">Managing LCRs Containing LOB Columns</a></p>
</li>
<li>
<p><a href="#i1010215">Managing LCRs Containing LONG or LONG RAW Columns</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS307" href="../../appdev.112/e40758/t_lcr.htm#ARPLS307"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> and <a class="olink STRMS107" href="../../server.112/e17069/strms_capture.htm#STRMS107"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about&nbsp;LCRs</div>
<a id="i1009950"></a>
<div id="STREP118" class="sect1">
<h2 class="sect1">Requirements for Managing LCRs<a id="sthref623"></a></h2>
<p>This section describes requirements for creating or modifying logical change records (LCRs). You can create an LCR using a constructor for an LCR type, and then enqueue the LCR into an persistent queue portion of an <code>ANYDATA</code> queue. Such an LCR is a persistent LCR.</p>
<p>Also, you can modify an LCR using an apply handler or a rule-based transformation. You can modify captured LCRs or persistent LCRs.</p>
<p>Ensure that you meet the following requirements when you manage an LCR:</p>
<ul>
<li>
<p>If you create or modify a row LCR, then ensure that the <code>command_type</code> attribute is consistent with the presence or absence of old column values and the presence or absence of new column values.</p>
</li>
<li>
<p>If you create or modify a DDL LCR, then ensure that the <code>ddl_text</code> is consistent with the <code>base_table_name</code>, <code>base_table_owner</code>, <code>object_type</code>, <code>object_owner</code>, <code>object_name</code>, and <code>command_type</code> attributes.</p>
</li>
<li>
<p>The following data types are allowed for columns in a user-constructed row&nbsp;LCR:</p>
<ul>
<li>
<p><code>CHAR</code></p>
</li>
<li>
<p><code>VARCHAR2</code></p>
</li>
<li>
<p><code>NCHAR</code></p>
</li>
<li>
<p><code>NVARCHAR2</code></p>
</li>
<li>
<p><code>NUMBER</code></p>
</li>
<li>
<p><code>DATE</code></p>
</li>
<li>
<p><code>BINARY_FLOAT</code></p>
</li>
<li>
<p><code>BINARY_DOUBLE</code></p>
</li>
<li>
<p><code>RAW</code></p>
</li>
<li>
<p><code>TIMESTAMP</code></p>
</li>
<li>
<p><code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code></p>
</li>
<li>
<p><code>TIMESTAMP</code> <code>WITH</code> <code>LOCAL</code> <code>TIME</code> <code>ZONE</code></p>
</li>
<li>
<p><code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code></p>
</li>
<li>
<p><code>INTERVAL</code> <code>DAY</code> <code>TO</code> <code>SECOND</code></p>
</li>
</ul>
<p>These data types are the only data types allowed for columns in a user-constructed row LCR. However, you can use certain techniques to construct LCRs that contain LOB information. Also, LCRs captured by a capture process support more data types, while LCRs captured by a synchronous capture support fewer data types.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><a class="olink STRMS175" href="../../server.112/e17069/strms_apply.htm#STRMS175"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about apply handlers</p>
</li>
<li>
<p><a href="#BABBEDEJ">"Managing LCRs Containing LOB Columns"</a></p>
</li>
<li>
<p><a class="olink STRMS" href="../e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information about <a class="olink STRMS136" href="../../server.112/e17069/strms_capture.htm#STRMS136">the data types captured by a capture process</a> or a synchronous capture, and for information about <a class="olink STRMS106" href="../../server.112/e17069/strms_transform.htm#STRMS106">rule-based transformations</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1009981"></a>
<div id="STREP484" class="sect1">
<h2 class="sect1">Constructing and Enqueuing LCRs<a id="sthref624"></a><a id="sthref625"></a></h2>
<p>Use the following LCR constructors to create LCRs:</p>
<ul>
<li>
<p>To create a row LCR that contains a change to a row that resulted from a data manipulation language (DML) statement, use the <code>SYS.LCR$_ROW_RECORD</code> constructor.</p>
</li>
<li>
<p>To create a DDL LCR that contains a data definition language change, use the <code>SYS.LCR$_DDL_RECORD</code> constructor. Ensure that the DDL text specified in the <code>ddl_text</code> attribute of each DDL LCR conforms to Oracle SQL syntax.</p>
</li>
</ul>
<p>The following example creates a queue in an Oracle database and an apply process associated with the queue. Next, it creates a PL/SQL procedure that constructs a row LCR based on information passed to it and enqueues the row LCR into the queue. This example assumes that you have configured an Oracle Streams administrator named <code>strmadmin</code> and granted this administrator <code>DBA</code> role.</p>
<p>Complete the following steps:</p>
<ol>
<li>
<p>In SQL*Plus, connect to the database as an administrative user.</p>
<p>See <a class="olink ADMIN00102" href="../../server.112/e25494/dba.htm#ADMIN00102"><span class="italic">Oracle Database Administrator's Guide</span></a> for instructions about connecting to a database in SQL*Plus.</p>
</li>
<li id="BABGJGAF">
<p>Grant the Oracle Streams administrator <code>EXECUTE</code> privilege on the <code>DBMS_STREAMS_MESSAGING</code> package. For example:</p>
<pre>
GRANT EXECUTE ON DBMS_STREAMS_MESSAGING TO strmadmin;
</pre>
<p>Explicit <code>EXECUTE</code> privilege on the package is required because a procedure in the package is called within a PL/SQL procedure in Step <a href="#BABGBHII">9</a>. In this case, granting the privilege through a role is not sufficient.</p>
</li>
<li>
<p>In SQL*Plus, connect to the database as the Oracle Streams administrator.</p>
</li>
<li id="i1009990">
<p>Create an <code>ANYDATA</code> queue in an Oracle database.</p>
<pre>
BEGIN 
  DBMS_STREAMS_ADM.SET_UP_QUEUE(
    queue_table          =&gt;  'strm04_queue_table',
    storage_clause       =&gt;  NULL,
    queue_name           =&gt;  'strm04_queue');
END;
/
</pre></li>
<li id="i1010004">
<p>Create an apply process at the Oracle database to receive messages in the queue. Ensure that the <code>apply_captured</code> parameter is set to <code>FALSE</code> when you create the apply process, because the apply process will be applying persistent LCRs, not captured LCRs. Also, ensure that the <code>apply_user</code> parameter is set to <code>hr</code>, because changes will be applied in to the <code>hr.regions</code> table, and the apply user must have privileges to make DML changes to this table.</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.CREATE_APPLY(
     queue_name      =&gt; 'strm04_queue',
     apply_name      =&gt; 'strm04_apply',
     apply_captured  =&gt; FALSE,
     apply_user      =&gt; 'hr');
END;
/
</pre></li>
<li>
<p>Create a positive rule set for the apply process and add a rule that applies DML changes to the <code>hr.regions</code> table made at the <code>dbs1.example.com</code> source database.</p>
<pre>
BEGIN 
  DBMS_STREAMS_ADM.ADD_TABLE_RULES(
    table_name          =&gt;  'hr.regions',
    streams_type        =&gt;  'apply',
    streams_name        =&gt;  'strm04_apply',
    queue_name          =&gt;  'strm04_queue',
    include_dml         =&gt;  TRUE,
    include_ddl         =&gt;  FALSE,
    include_tagged_lcr  =&gt;  FALSE,
    source_database     =&gt;  'dbs1.example.com',
    inclusion_rule      =&gt;  TRUE);
END;
/
</pre></li>
<li>
<p>Set the <code>disable_on_error</code> parameter for the apply process to <code>n</code>.</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_PARAMETER(
    apply_name  =&gt; 'strm04_apply', 
    parameter   =&gt; 'disable_on_error', 
    value       =&gt; 'N');
END;
/
</pre></li>
<li>
<p>Start the apply process.</p>
<pre>
EXEC DBMS_APPLY_ADM.START_APPLY('strm04_apply');
</pre></li>
<li id="BABGBHII">
<p><a id="sthref626"></a>Create a procedure called <code>construct_row_lcr</code> that constructs a row LCR and enqueues it into the queue created in Step <a href="#i1009990">4</a>.</p>
<pre>
CREATE OR REPLACE PROCEDURE construct_row_lcr(
                 source_dbname  VARCHAR2,
                 cmd_type       VARCHAR2,
                 obj_owner      VARCHAR2,
                 obj_name       VARCHAR2,
                 old_vals       SYS.LCR$_ROW_LIST,
                 new_vals       SYS.LCR$_ROW_LIST) AS
  row_lcr        SYS.LCR$_ROW_RECORD;
BEGIN
  -- Construct the LCR based on information passed to procedure
  row_lcr := SYS.LCR$_ROW_RECORD.CONSTRUCT(
    source_database_name  =&gt;  source_dbname,
    command_type          =&gt;  cmd_type,
    object_owner          =&gt;  obj_owner,
    object_name           =&gt;  obj_name,
    old_values            =&gt;  old_vals,
    new_values            =&gt;  new_vals);
  -- Enqueue the created row LCR
  DBMS_STREAMS_MESSAGING.ENQUEUE(
    queue_name         =&gt;  'strm04_queue',
    payload            =&gt;  ANYDATA.ConvertObject(row_lcr));
END construct_row_lcr;
/
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The application does not need to specify a transaction identifier or SCN when it creates an LCR because the apply process generates these values and stores them in memory. If a transaction identifier or SCN is specified in the LCR, then the apply process ignores it and assigns a new value.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS307" href="../../appdev.112/e40758/t_lcr.htm#ARPLS307"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about LCR constructors</div>
</li>
<li>
<p>Create and enqueue LCRs using the <code>construct_row_lcr</code> procedure created in Step <a href="#i1010004">5</a>.</p>
<ol>
<li>
<p>In SQL*Plus, connect to the database as the Oracle Streams administrator.</p>
</li>
<li>
<p>Create a row LCR that inserts a row into the <code>hr.regions</code> table.</p>
<pre>
DECLARE
  newunit1  SYS.LCR$_ROW_UNIT;
  newunit2  SYS.LCR$_ROW_UNIT;
  newvals   SYS.LCR$_ROW_LIST;
BEGIN
  newunit1 := SYS.LCR$_ROW_UNIT(
    'region_id', 
    ANYDATA.ConvertNumber(5),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  newunit2 := SYS.LCR$_ROW_UNIT(
    'region_name', 
    ANYDATA.ConvertVarchar2('Moon'),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  newvals := SYS.LCR$_ROW_LIST(newunit1,newunit2);
construct_row_lcr(
  source_dbname  =&gt;  'dbs1.example.com',
  cmd_type       =&gt;  'INSERT',
  obj_owner      =&gt;  'hr',
  obj_name       =&gt;  'regions',
  old_vals       =&gt;  NULL,
  new_vals       =&gt;  newvals);
END;
/
COMMIT;
</pre></li>
<li>
<p>In SQL*Plus, connect to the database as the <code>hr</code> user.</p>
</li>
<li>
<p>Query the <code>hr.regions</code> table to view the applied row change. The row with a <code>region_id</code> of <code>5</code> should have <code>Moon</code> for the <code>region_name</code>.</p>
<pre>
SELECT * FROM hr.regions;
</pre></li>
<li>
<p>In SQL*Plus, connect to the database as the Oracle Streams administrator.</p>
</li>
<li>
<p>Create a row LCR that updates a row in the <code>hr.regions</code> table.</p>
<pre>
DECLARE
  oldunit1  SYS.LCR$_ROW_UNIT;
  oldunit2  SYS.LCR$_ROW_UNIT;
  oldvals   SYS.LCR$_ROW_LIST;
  newunit1  SYS.LCR$_ROW_UNIT;
  newvals   SYS.LCR$_ROW_LIST;
BEGIN
  oldunit1 := SYS.LCR$_ROW_UNIT(
    'region_id', 
    ANYDATA.ConvertNumber(5),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  oldunit2 := SYS.LCR$_ROW_UNIT(
    'region_name', 
    ANYDATA.ConvertVarchar2('Moon'),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  oldvals := SYS.LCR$_ROW_LIST(oldunit1,oldunit2);
  newunit1 := SYS.LCR$_ROW_UNIT(
    'region_name', 
    ANYDATA.ConvertVarchar2('Mars'),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  newvals := SYS.LCR$_ROW_LIST(newunit1);
construct_row_lcr(
  source_dbname  =&gt;  'dbs1.example.com',
  cmd_type       =&gt;  'UPDATE',
  obj_owner      =&gt;  'hr',
  obj_name       =&gt;  'regions',
  old_vals       =&gt;  oldvals,
  new_vals       =&gt;  newvals);
END;
/
COMMIT;
</pre></li>
<li>
<p>In SQL*Plus, connect to the database as the <code>hr</code> user.</p>
</li>
<li>
<p>Query the <code>hr.regions</code> table to view the applied row change. The row with a <code>region_id</code> of <code>5</code> should have <code>Mars</code> for the <code>region_name</code>.</p>
<pre>
SELECT * FROM hr.regions;
</pre></li>
<li>
<p>Create a row LCR that deletes a row from the <code>hr.regions</code> table.</p>
<pre>
DECLARE
  oldunit1  SYS.LCR$_ROW_UNIT;
  oldunit2  SYS.LCR$_ROW_UNIT;
  oldvals   SYS.LCR$_ROW_LIST;
BEGIN
  oldunit1 := SYS.LCR$_ROW_UNIT(
    'region_id', 
    ANYDATA.ConvertNumber(5),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  oldunit2 := SYS.LCR$_ROW_UNIT(
    'region_name',
    ANYDATA.ConvertVarchar2('Mars'),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  oldvals := SYS.LCR$_ROW_LIST(oldunit1,oldunit2);
construct_row_lcr(
  source_dbname  =&gt;  'dbs1.example.com',
  cmd_type       =&gt;  'DELETE',
  obj_owner      =&gt;  'hr',
  obj_name       =&gt;  'regions',
  old_vals       =&gt;  oldvals,
  new_vals       =&gt;  NULL);
END;
/
COMMIT;
</pre></li>
<li>
<p>In SQL*Plus, connect to the database as the <code>hr</code> user.</p>
</li>
<li>
<p>Query the <code>hr.regions</code> table to view the applied row change. The row with a <code>region_id</code> of <code>5</code> should have been deleted.</p>
<pre>
SELECT * FROM hr.regions;
</pre></li>
</ol>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="BABFBDDH"></a>
<div id="STREP142" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Executing LCRs<a id="sthref627"></a></h2>
<p>There are separate <code>EXECUTE</code> member procedures for row LCRs and DDL LCRs. These member procedures execute an LCR under the security domain of the current user. When an LCR is executed successfully, the change recorded in the LCR is made to the local database. The following sections describe executing row LCRs and DDL LCRs:</p>
<ul>
<li>
<p><a href="#BABHIEJH">Executing Row LCRs</a></p>
</li>
<li>
<p><a href="#BABCIBDG">Executing DDL LCRs</a></p>
</li>
</ul>
<a id="BABHIEJH"></a>
<div id="STREP485" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Executing Row LCRs<a id="sthref628"></a></h3>
<p>The <code>EXECUTE</code> member procedure for row LCRs is a subprogram of the <code>LCR$_ROW_RECORD</code> type. When the <code>EXECUTE</code> member procedure is run on a row LCR, the row LCR is executed. If the row LCR is executed by an apply process, then any apply process handlers that would be run for the LCR are not run.</p>
<p>The <code>EXECUTE</code> member procedure can be run on a row LCR under any of the following conditions:</p>
<ul>
<li>
<p>The LCR is being processed by an apply handler.</p>
</li>
<li>
<p>The LCR is in a queue and was last enqueued by an apply process, an application, or a user.</p>
</li>
<li>
<p>The LCR has been constructed using the <code>LCR$_ROW_RECORD</code> constructor function but has not been enqueued.</p>
</li>
<li>
<p>The LCR is in the error queue.</p>
</li>
</ul>
<p>When you run the <code>EXECUTE</code> member procedure on a row LCR, the <code>conflict_resolution</code> parameter controls whether conflict resolution is performed. Specifically, if the <code>conflict_resolution</code> parameter is set to <code>TRUE</code>, then any conflict resolution defined for the table being changed is used to resolve conflicts resulting from the execution of the LCR. If the <code>conflict_resolution</code> parameter is set to <code>FALSE</code>, then conflict resolution is not used. If the <code>conflict_resolution</code> parameter is not set or is set to <code>NULL</code>, then an error is raised.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A custom rule-based transformation should not run the <code>EXECUTE</code> member procedure on a row LCR. Doing so could execute the row LCR outside of its transactional context.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink STRMS175" href="../../server.112/e17069/strms_apply.htm#STRMS175"><span class="italic">Oracle Streams Concepts and Administration</span></a></p>
</li>
<li>
<p><a class="olink ARPLS368" href="../../appdev.112/e40758/t_lcr.htm#ARPLS368"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about row LCRs and the <code>LCR$_ROW_RECORD</code> type</p>
</li>
</ul>
</div>
<div id="STREP486" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref629"></a>
<h4 class="sect3">Example of Constructing and Executing Row LCRs</h4>
<p>The example in this section creates PL/SQL procedures to insert, update, and delete rows in the <code>hr.jobs</code> table by constructing and executing row LCRs. The row LCRs are executed without being enqueued or processed by an apply process. This example assumes that you have configured an Oracle Streams administrator named <code>strmadmin</code> and granted this administrator <code>DBA</code> role.</p>
<p>Complete the following steps:</p>
<ol>
<li>
<p>In SQL*Plus, connect to the database as the Oracle Streams administrator.</p>
<p>See <a class="olink ADMIN00102" href="../../server.112/e25494/dba.htm#ADMIN00102"><span class="italic">Oracle Database Administrator's Guide</span></a> for instructions about connecting to a database in SQL*Plus.</p>
</li>
<li>
<p>Create a PL/SQL procedure named <code>execute_row_lcr</code> that executes a row LCR:</p>
<pre>
CREATE OR REPLACE PROCEDURE execute_row_lcr(
                 source_dbname  VARCHAR2,
                 cmd_type       VARCHAR2,
                 obj_owner      VARCHAR2,
                 obj_name       VARCHAR2,
                 old_vals       SYS.LCR$_ROW_LIST,
                 new_vals       SYS.LCR$_ROW_LIST) as
  xrow_lcr  SYS.LCR$_ROW_RECORD;
BEGIN
  -- Construct the row LCR based on information passed to procedure
  xrow_lcr := SYS.LCR$_ROW_RECORD.CONSTRUCT(
    source_database_name =&gt; source_dbname,
    command_type         =&gt; cmd_type,
    object_owner         =&gt; obj_owner,
    object_name          =&gt; obj_name,
    old_values           =&gt; old_vals,
    new_values           =&gt; new_vals);
  -- Execute the row LCR
  xrow_lcr.EXECUTE(FALSE);
END execute_row_lcr;
/
</pre></li>
<li>
<p>Create a PL/SQL procedure named <code>insert_job_lcr</code> that executes a row LCR that inserts a row into the <code>hr.jobs</code> table:</p>
<pre>
CREATE OR REPLACE PROCEDURE insert_job_lcr(
                 j_id     VARCHAR2,
                 j_title  VARCHAR2,
                 min_sal  NUMBER,
                 max_sal  NUMBER) AS
  xrow_lcr   SYS.LCR$_ROW_RECORD;
  col1_unit  SYS.LCR$_ROW_UNIT;
  col2_unit  SYS.LCR$_ROW_UNIT;
  col3_unit  SYS.LCR$_ROW_UNIT;
  col4_unit  SYS.LCR$_ROW_UNIT;
  newvals    SYS.LCR$_ROW_LIST;
BEGIN
  col1_unit := SYS.LCR$_ROW_UNIT(
    'job_id', 
    ANYDATA.ConvertVarchar2(j_id),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  col2_unit := SYS.LCR$_ROW_UNIT(
    'job_title', 
    ANYDATA.ConvertVarchar2(j_title),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  col3_unit := SYS.LCR$_ROW_UNIT(
    'min_salary', 
    ANYDATA.ConvertNumber(min_sal),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  col4_unit := SYS.LCR$_ROW_UNIT(
    'max_salary', 
    ANYDATA.ConvertNumber(max_sal),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  newvals := SYS.LCR$_ROW_LIST(col1_unit,col2_unit,col3_unit,col4_unit);
  -- Execute the row LCR
  execute_row_lcr(
    source_dbname =&gt; 'DB1.EXAMPLE.COM',
    cmd_type      =&gt; 'INSERT',
    obj_owner     =&gt; 'HR',
    obj_name      =&gt; 'JOBS',
    old_vals      =&gt; NULL,
    new_vals      =&gt; newvals);  
END insert_job_lcr;
/
</pre></li>
<li>
<p>Create a PL/SQL procedure named <code>update_max_salary_lcr</code> that executes a row LCR that updates the <code>max_salary</code> value for a row in the <code>hr.jobs</code> table:</p>
<pre>
CREATE OR REPLACE PROCEDURE update_max_salary_lcr(
                 j_id         VARCHAR2,
                 old_max_sal NUMBER,
                 new_max_sal NUMBER) AS
  xrow_lcr      SYS.LCR$_ROW_RECORD;
  oldcol1_unit  SYS.LCR$_ROW_UNIT;
  oldcol2_unit  SYS.LCR$_ROW_UNIT;
  newcol1_unit  SYS.LCR$_ROW_UNIT;
  oldvals       SYS.LCR$_ROW_LIST;
  newvals       SYS.LCR$_ROW_LIST;
BEGIN
  oldcol1_unit := SYS.LCR$_ROW_UNIT(
    'job_id', 
    ANYDATA.ConvertVarchar2(j_id),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  oldcol2_unit := SYS.LCR$_ROW_UNIT(
    'max_salary', 
    ANYDATA.ConvertNumber(old_max_sal),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  oldvals := SYS.LCR$_ROW_LIST(oldcol1_unit,oldcol2_unit);
  newcol1_unit := SYS.LCR$_ROW_UNIT(
    'max_salary', 
    ANYDATA.ConvertNumber(new_max_sal),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  newvals := SYS.LCR$_ROW_LIST(newcol1_unit);
  -- Execute the row LCR
  execute_row_lcr(
    source_dbname =&gt; 'DB1.EXAMPLE.COM',
    cmd_type      =&gt; 'UPDATE',
    obj_owner     =&gt; 'HR',
    obj_name      =&gt; 'JOBS',
    old_vals      =&gt; oldvals,
    new_vals      =&gt; newvals);  
END update_max_salary_lcr;
/
</pre></li>
<li>
<p>Create a PL/SQL procedure named <code>delete_job_lcr</code> that executes a row LCR that deletes a row from the <code>hr.jobs</code> table:</p>
<pre>
CREATE OR REPLACE PROCEDURE delete_job_lcr(j_id VARCHAR2) AS
  xrow_lcr   SYS.LCR$_ROW_RECORD;
  col1_unit  SYS.LCR$_ROW_UNIT;
  oldvals    SYS.LCR$_ROW_LIST;
BEGIN
  col1_unit := SYS.LCR$_ROW_UNIT(
    'job_id',
    ANYDATA.ConvertVarchar2(j_id),
    DBMS_LCR.NOT_A_LOB,
    NULL,
    NULL);
  oldvals := SYS.LCR$_ROW_LIST(col1_unit); 
  -- Execute the row LCR
  execute_row_lcr(
    source_dbname =&gt; 'DB1.EXAMPLE.COM',
    cmd_type      =&gt; 'DELETE',
    obj_owner     =&gt; 'HR',
    obj_name      =&gt; 'JOBS',
    old_vals      =&gt; oldvals,
    new_vals      =&gt; NULL);
END delete_job_lcr;
/
</pre></li>
<li id="BABBFDEE">
<p>Insert a row into the <code>hr.jobs</code> table using the <code>insert_job_lcr</code> procedure:</p>
<pre>
EXEC insert_job_lcr('BN_CNTR','BEAN COUNTER',5000,10000);
</pre></li>
<li>
<p>Select the inserted row in the <code>hr.jobs</code> table:</p>
<pre>
<span class="bold">SELECT * FROM hr.jobs WHERE job_id = 'BN_CNTR';</span>

JOB_ID     JOB_TITLE                           MIN_SALARY MAX_SALARY
---------- ----------------------------------- ---------- ----------
BN_CNTR    BEAN COUNTER                              5000      10000
</pre></li>
<li>
<p>Update the <code>max_salary</code> value for the row inserted into the <code>hr.jobs</code> table in Step&nbsp;<a href="#BABBFDEE">6</a> using the <code>update_max_salary_lcr</code> procedure:</p>
<pre>
EXEC update_max_salary_lcr('BN_CNTR',10000,12000);
</pre></li>
<li>
<p>Select the updated row in the <code>hr.jobs</code> table:</p>
<pre>
<span class="bold">SELECT * FROM hr.jobs WHERE job_id = 'BN_CNTR';</span>

JOB_ID     JOB_TITLE                           MIN_SALARY MAX_SALARY
---------- ----------------------------------- ---------- ----------
BN_CNTR    BEAN COUNTER                              5000      12000
</pre></li>
<li>
<p>Delete the row inserted into the <code>hr.jobs</code> table in Step&nbsp;<a href="#BABBFDEE">6</a> using the <code>delete_job_lcr</code> procedure:</p>
<pre>
EXEC delete_job_lcr('BN_CNTR');
</pre></li>
<li>
<p>Select the deleted row in the <code>hr.jobs</code> table:</p>
<pre>
<span class="bold">SELECT * FROM hr.jobs WHERE job_id = 'BN_CNTR';</span>

no rows selected
</pre></li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABCIBDG"></a>
<div id="STREP487" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Executing DDL LCRs<a id="sthref630"></a></h3>
<p>The <code>EXECUTE</code> member procedure for DDL LCRs is a subprogram of the <code>LCR$_DDL_RECORD</code> type. When the <code>EXECUTE</code> member procedure is run on a DDL LCR, the LCR is executed, and any apply process handlers that would be run for the LCR are not run. The <code>EXECUTE</code> member procedure for DDL LCRs can be invoked only in an apply handler for an apply process.</p>
<p>All applied DDL LCRs commit automatically. Therefore, if a DDL handler calls the <code>EXECUTE</code> member procedure of a DDL LCR, then a commit is performed automatically.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink STRMS175" href="../../server.112/e17069/strms_apply.htm#STRMS175"><span class="italic">Oracle Streams Concepts and Administration</span></a></p>
</li>
<li>
<p><a class="olink ARPLS567" href="../../appdev.112/e40758/t_lcr.htm#ARPLS567"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about DDL LCRs and the <code>LCR$_DDL_RECORD</code> type</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABBEDEJ"></a>
<div id="STREP137" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Managing LCRs Containing LOB Columns<a id="sthref631"></a><a id="sthref632"></a><a id="sthref633"></a><a id="sthref634"></a><a id="sthref635"></a><a id="sthref636"></a></h2>
<p>LOB data types can be present in row LCRs captured by a capture process, but these data types are represented by other data types. LOB data types cannot be present in row LCRs captured by synchronous captures. Certain LOB data types cannot be present in row LCRs constructed by users. <a href="#BABCEIGD">Table 14-1</a> shows the LCR representation for these data types and whether these data types can be present in row LCRs.</p>
<div id="STREP488" class="tblhruleformal">
<p class="titleintable"><a id="sthref637"></a><a id="BABCEIGD"></a>Table 14-1 LOB Data Type Representations in Row LCRs</p>
<table class="cellalignment1563" title="LOB Data Type Representations in Row LCRs" summary="This table lists LONG, LONG RAW, and LOB datatypes and, for each type, the datatype used for the row LCR representation of the type, whether the type can be present in a captured LCR, and whether the type can be present in a user-constructed LCR." dir="ltr">
<thead>
<tr class="cellalignment1552">
<th class="cellalignment1564" id="r1c1-t9">Data Type</th>
<th class="cellalignment1564" id="r1c2-t9">Row LCR Representation</th>
<th class="cellalignment1564" id="r1c3-t9">Can Be Present in a Row LCR Captured by a Capture Process?</th>
<th class="cellalignment1564" id="r1c4-t9">Can Be Present in a Row LCR Captured by a Synchronous Capture?</th>
<th class="cellalignment1564" id="r1c5-t9">Can Be Present in a Row LCR Constructed by a User?</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1552">
<td class="cellalignment1558" id="r2c1-t9" headers="r1c1-t9">
<p>Fixed-width <code>CLOB</code></p>
</td>
<td class="cellalignment1558" headers="r2c1-t9 r1c2-t9">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1558" headers="r2c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1558" headers="r2c1-t9 r1c4-t9">
<p>No</p>
</td>
<td class="cellalignment1558" headers="r2c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1552">
<td class="cellalignment1558" id="r3c1-t9" headers="r1c1-t9">
<p>Variable-width <code>CLOB</code></p>
</td>
<td class="cellalignment1558" headers="r3c1-t9 r1c2-t9">
<p><code>RAW</code> in AL16UTF16 character set</p>
</td>
<td class="cellalignment1558" headers="r3c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1558" headers="r3c1-t9 r1c4-t9">
<p>No</p>
</td>
<td class="cellalignment1558" headers="r3c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1552">
<td class="cellalignment1558" id="r4c1-t9" headers="r1c1-t9">
<p><code>NCLOB</code></p>
</td>
<td class="cellalignment1558" headers="r4c1-t9 r1c2-t9">
<p><code>RAW</code> in AL16UTF16 character set</p>
</td>
<td class="cellalignment1558" headers="r4c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1558" headers="r4c1-t9 r1c4-t9">
<p>No</p>
</td>
<td class="cellalignment1558" headers="r4c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1552">
<td class="cellalignment1558" id="r5c1-t9" headers="r1c1-t9">
<p><code>BLOB</code></p>
</td>
<td class="cellalignment1558" headers="r5c1-t9 r1c2-t9">
<p><code>RAW</code></p>
</td>
<td class="cellalignment1558" headers="r5c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1558" headers="r5c1-t9 r1c4-t9">
<p>No</p>
</td>
<td class="cellalignment1558" headers="r5c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1552">
<td class="cellalignment1558" id="r6c1-t9" headers="r1c1-t9">
<p><code>XMLType</code> stored as <code>CLOB</code></p>
</td>
<td class="cellalignment1558" headers="r6c1-t9 r1c2-t9">
<p><code>RAW</code></p>
</td>
<td class="cellalignment1558" headers="r6c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1558" headers="r6c1-t9 r1c4-t9">
<p>No</p>
</td>
<td class="cellalignment1558" headers="r6c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>The following are general considerations for row changes involving LOB data types in an Oracle Streams environment:</p>
<ul>
<li>
<p>A row change involving a LOB column can be captured, propagated, and applied as several row LCRs.</p>
</li>
<li>
<p>Rules used to evaluate these row LCRs must be deterministic, so that either all of the row LCRs corresponding to the row change cause a rule in a rule set to evaluate to <code>TRUE</code>, or none of them do.</p>
</li>
</ul>
<p>The following sections contain information about the requirements you must meet when constructing or processing LOB columns, about apply process behavior for LCRs containing LOB columns, and about LOB assembly. There is also an example that constructs and enqueues LCRs containing LOB columns.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BABFCFIJ">Apply Process Behavior for Direct Apply of LCRs Containing LOBs</a></p>
</li>
<li>
<p><a href="#BABHADDG">LOB Assembly and Custom Apply of LCRs Containing LOB Columns</a></p>
</li>
<li>
<p><a href="#BABJJIBJ">Requirements for Constructing and Processing LCRs Containing LOB Columns</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADLOB" href="../../appdev.112/e18294/toc.htm"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for more information about LOBs</p>
</li>
<li>
<p><a class="olink STREX1165" href="../../server.112/e12862/loblcrdemo.htm#STREX1165"><span class="italic">Oracle Streams Extended Examples</span></a> for an example that constructs and enqueues LCRs that contain LOBs</p>
</li>
</ul>
</div>
<a id="BABFCFIJ"></a>
<div id="STREP489" class="sect2">
<h3 class="sect2">Apply Process Behavior for Direct Apply of LCRs Containing LOBs<a id="sthref638"></a><a id="sthref639"></a><a id="sthref640"></a></h3>
<p>An apply process behaves in the following ways when it applies an LCR that contains a LOB column directly (without the use of an apply handler):</p>
<ul>
<li>
<p>If an LCR whose command type is <code>INSERT</code> or <code>UPDATE</code> has a new LOB that contains data, and the <code>lob_information</code> is not <code>DBMS_LCR.LOB_CHUNK</code> or <code>DBMS_LCR.LAST_LOB_CHUNK</code>, then the data is applied.</p>
</li>
<li>
<p>If an LCR whose command type is <code>INSERT</code> or <code>UPDATE</code> has a new LOB that contains no data, and the <code>lob_information</code> is <code>DBMS_LCR.EMPTY_LOB</code>, then it is applied as an empty LOB.</p>
</li>
<li>
<p>If an LCR whose command type is <code>INSERT</code> or <code>UPDATE</code> has a new LOB that contains no data, and the <code>lob_information</code> is <code>DBMS_LCR.NULL_LOB</code> or <code>DBMS_LCR.INLINE_LOB</code>, then it is applied as a <code>NULL</code>.</p>
</li>
<li>
<p>If an LCR whose command type is <code>INSERT</code> or <code>UPDATE</code> has a new LOB and the <code>lob_information</code> is <code>DBMS_LCR.LOB_CHUNK</code> or <code>DBMS_LCR.LAST_LOB_CHUNK</code>, then any LOB value is ignored. If the command type is <code>INSERT</code>, then an empty LOB is inserted into the column under the assumption that LOB chunks will follow. If the command type is <code>UPDATE</code>, then the column value is ignored under the assumption that LOB chunks will follow.</p>
</li>
<li>
<p>If all of the new columns in an LCR whose command type is <code>UPDATE</code> are LOBs whose <code>lob_information</code> is <code>DBMS_LCR.LOB_CHUNK</code> or <code>DBMS_LCR.LAST_LOB_CHUNK</code>, then the update is skipped under the assumption that LOB chunks will follow.</p>
</li>
<li>
<p>For any LCR whose command type is <code>UPDATE</code> or <code>DELETE</code>, old LOB values are ignored.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABHADDG"></a>
<div id="STREP490" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">LOB Assembly and Custom Apply of LCRs Containing LOB Columns<a id="sthref641"></a><a id="sthref642"></a><a id="sthref643"></a></h3>
<p>A change to a row in a table that does not include any LOB columns results in a single row LCR, but a change to a row that includes one or more LOB columns can result in multiple row LCRs. An apply process that does not send row LCRs that contain LOB columns to an apply handler can apply these row LCRs directly. However, before Oracle Database 10<span class="italic">g</span> Release 2, custom processing of row LCRs that contain LOB columns was complicated because apply handlers had to be configured to process multiple LCRs correctly for a single row change.</p>
<p>In Oracle Database 10<span class="italic">g</span> Release 2 and later, <span class="bold">LOB assembly</span> simplifies custom processing of row LCRs with LOB columns that were captured by a capture process. LOB assembly automatically combines multiple captured row LCRs resulting from a change to a row with LOB columns into one row LCR. An apply process passes this single row LCR to a DML handler or error handler when LOB assembly is enabled. Also, after LOB assembly, the LOB column values are represented by LOB locators, not by <code>VARCHAR2</code> or <code>RAW</code> data type values. To enable LOB assembly for a procedure DML or error handler, set the <code>assemble_lobs</code> parameter to <code>TRUE</code> in the <code>DBMS_APPLY_ADM.SET_DML_HANDLER</code> procedure. LOB assembly is always enabled for statement DML handlers.</p>
<p>If the <code>assemble_lobs</code> parameter is set to <code>FALSE</code> for a DML or error handler, then LOB assembly is disabled and multiple row LCRs are passed to the handler for a change to a single row with LOB columns. <a href="#BABHEBFD">Table 14-2</a> shows Oracle Streams behavior when LOB assembly is disabled. Specifically, the table shows the LCRs passed to a procedure DML handler or error handler resulting from a change to a single row with LOB columns.</p>
<div id="STREP491" class="tblhruleformal">
<p class="titleintable"><a id="sthref644"></a><a id="BABHEBFD"></a>Table 14-2 Oracle Streams Behavior with LOB Assembly Disabled</p>
<table class="cellalignment1563" title="Oracle Streams Behavior with LOB Assembly Disabled" summary="When LOB columns are updated and LOB assembly is disabled, the table shows the original row change, the first, second, and third set of LCRs, and the final LCR sent for various DML operations." dir="ltr">
<thead>
<tr class="cellalignment1552">
<th class="cellalignment1564" id="r1c1-t11">Original Row Change</th>
<th class="cellalignment1564" id="r1c2-t11">First Set of LCRs</th>
<th class="cellalignment1564" id="r1c3-t11">Second Set of LCRs</th>
<th class="cellalignment1564" id="r1c4-t11">Third Set of LCRs</th>
<th class="cellalignment1564" id="r1c5-t11">Final LCR</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1552">
<td class="cellalignment1558" id="r2c1-t11" headers="r1c1-t11">
<p><code>INSERT</code></p>
</td>
<td class="cellalignment1558" headers="r2c1-t11 r1c2-t11">
<p>One <code>INSERT</code> LCR</p>
</td>
<td class="cellalignment1558" headers="r2c1-t11 r1c3-t11">
<p>One or more <code>LOB</code> <code>WRITE</code> LCRs</p>
</td>
<td class="cellalignment1558" headers="r2c1-t11 r1c4-t11">
<p>One or more <code>LOB</code> <code>TRIM</code> LCRs</p>
</td>
<td class="cellalignment1558" headers="r2c1-t11 r1c5-t11">
<p><code>UPATE</code></p>
</td>
</tr>
<tr class="cellalignment1552">
<td class="cellalignment1558" id="r3c1-t11" headers="r1c1-t11">
<p><code>UPDATE</code></p>
</td>
<td class="cellalignment1558" headers="r3c1-t11 r1c2-t11">
<p>One <code>UPDATE</code> LCR</p>
</td>
<td class="cellalignment1558" headers="r3c1-t11 r1c3-t11">
<p>One or more <code>LOB</code> <code>WRITE</code> LCRs</p>
</td>
<td class="cellalignment1558" headers="r3c1-t11 r1c4-t11">
<p>One or more <code>LOB</code> <code>TRIM</code> LCRs</p>
</td>
<td class="cellalignment1558" headers="r3c1-t11 r1c5-t11">
<p><code>UPATE</code></p>
</td>
</tr>
<tr class="cellalignment1552">
<td class="cellalignment1558" id="r4c1-t11" headers="r1c1-t11">
<p><code>DELETE</code></p>
</td>
<td class="cellalignment1558" headers="r4c1-t11 r1c2-t11">
<p>One <code>DELETE</code> LCR</p>
</td>
<td class="cellalignment1558" headers="r4c1-t11 r1c3-t11">
<p>N/A</p>
</td>
<td class="cellalignment1558" headers="r4c1-t11 r1c4-t11">
<p>N/A</p>
</td>
<td class="cellalignment1558" headers="r4c1-t11 r1c5-t11">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment1552">
<td class="cellalignment1558" id="r5c1-t11" headers="r1c1-t11">
<p><code>DBMS_LOB.WRITE</code></p>
</td>
<td class="cellalignment1558" headers="r5c1-t11 r1c2-t11">
<p>One or more <code>LOB</code> <code>WRITE</code> LCRs</p>
</td>
<td class="cellalignment1558" headers="r5c1-t11 r1c3-t11">
<p>N/A</p>
</td>
<td class="cellalignment1558" headers="r5c1-t11 r1c4-t11">
<p>N/A</p>
</td>
<td class="cellalignment1558" headers="r5c1-t11 r1c5-t11">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment1552">
<td class="cellalignment1558" id="r6c1-t11" headers="r1c1-t11">
<p><code>DBMS_LOB.TRIM</code></p>
</td>
<td class="cellalignment1558" headers="r6c1-t11 r1c2-t11">
<p>One <code>LOB</code> <code>TRIM</code> LCR</p>
</td>
<td class="cellalignment1558" headers="r6c1-t11 r1c3-t11">
<p>N/A</p>
</td>
<td class="cellalignment1558" headers="r6c1-t11 r1c4-t11">
<p>N/A</p>
</td>
<td class="cellalignment1558" headers="r6c1-t11 r1c5-t11">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment1552">
<td class="cellalignment1558" id="r7c1-t11" headers="r1c1-t11">
<p><code>DBMS_LOB.ERASE</code></p>
</td>
<td class="cellalignment1558" headers="r7c1-t11 r1c2-t11">
<p>One <code>LOB</code> <code>ERASE</code> LCR</p>
</td>
<td class="cellalignment1558" headers="r7c1-t11 r1c3-t11">
<p>N/A</p>
</td>
<td class="cellalignment1558" headers="r7c1-t11 r1c4-t11">
<p>N/A</p>
</td>
<td class="cellalignment1558" headers="r7c1-t11 r1c5-t11">
<p>N/A</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p><a href="#BABBJHCA">Table 14-3</a> shows Oracle Streams behavior when LOB assembly is enabled. Specifically, the table shows the row LCR passed to a DML handler or error handler resulting from a change to a single row with LOB columns.</p>
<div id="STREP492" class="tblhruleformal">
<p class="titleintable"><a id="sthref645"></a><a id="BABBJHCA"></a>Table 14-3 Oracle Streams Behavior with LOB Assembly Enabled</p>
<table class="cellalignment1563" title="Oracle Streams Behavior with LOB Assembly Enabled" summary="This table shows the types of LCRs sent to a DML or error handler when a row with LOB columns is updated and LOB assembly is enabled. The table shows the original row change and the single LCR sent for various DML operations." dir="ltr">
<thead>
<tr class="cellalignment1552">
<th class="cellalignment1564" id="r1c1-t12">Original Row Change</th>
<th class="cellalignment1564" id="r1c2-t12">Single LCR</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1552">
<td class="cellalignment1558" id="r2c1-t12" headers="r1c1-t12">
<p><code>INSERT</code></p>
</td>
<td class="cellalignment1558" headers="r2c1-t12 r1c2-t12">
<p><code>INSERT</code></p>
</td>
</tr>
<tr class="cellalignment1552">
<td class="cellalignment1558" id="r3c1-t12" headers="r1c1-t12">
<p><code>UPDATE</code></p>
</td>
<td class="cellalignment1558" headers="r3c1-t12 r1c2-t12">
<p><code>UPDATE</code></p>
</td>
</tr>
<tr class="cellalignment1552">
<td class="cellalignment1558" id="r4c1-t12" headers="r1c1-t12">
<p><code>DELETE</code></p>
</td>
<td class="cellalignment1558" headers="r4c1-t12 r1c2-t12">
<p><code>DELETE</code></p>
</td>
</tr>
<tr class="cellalignment1552">
<td class="cellalignment1558" id="r5c1-t12" headers="r1c1-t12">
<p><code>DBMS_LOB.WRITE</code></p>
</td>
<td class="cellalignment1558" headers="r5c1-t12 r1c2-t12">
<p><code>LOB</code> <code>WRITE</code></p>
</td>
</tr>
<tr class="cellalignment1552">
<td class="cellalignment1558" id="r6c1-t12" headers="r1c1-t12">
<p><code>DBMS_LOB.TRIM</code></p>
</td>
<td class="cellalignment1558" headers="r6c1-t12 r1c2-t12">
<p><code>LOB</code> <code>TRIM</code></p>
</td>
</tr>
<tr class="cellalignment1552">
<td class="cellalignment1558" id="r7c1-t12" headers="r1c1-t12">
<p><code>DBMS_LOB.ERASE</code></p>
</td>
<td class="cellalignment1558" headers="r7c1-t12 r1c2-t12">
<p><code>LOB</code> <code>ERASE</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>When LOB assembly is enabled, a DML or error handler can modify LOB columns in a row LCR. Within the PL/SQL procedure specified as a DML or error handler, the preferred way to perform operations on a LOB is to use a subprogram in the <code>DBMS_LOB</code> package. If a row LCR contains a LOB column that is <code>NULL</code>, then a new LOB locator must replace the <code>NULL</code>. If a row LCR will be applied with the <code>EXECUTE</code> member procedure, then use the <code>ADD_COLUMN</code>, <code>SET_VALUE</code>, and <code>SET_VALUES</code> member procedures for row LCRs to make changes to a LOB.</p>
<p>When LOB assembly is enabled, LOB assembly converts non-<code>NULL</code> LOB columns in persistent LCRs into LOB locators. However, LOB assembly does not combine multiple persistent row LCRs into a single row LCR. For example, for persistent row LCRs, LOB assembly does not combine multiple <code>LOB</code> <code>WRITE</code> row LCRs following an <code>INSERT</code> row LCR into a single <code>INSERT</code> row LCR.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink STRMS175" href="../../server.112/e17069/strms_apply.htm#STRMS175"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about apply handlers</p>
</li>
<li>
<p><a class="olink ADLOB" href="../../appdev.112/e18294/toc.htm"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> and <a class="olink ARPLS600" href="../../appdev.112/e40758/d_lob.htm#ARPLS600"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about using the <code>DBMS_LOB</code> package</p>
</li>
<li>
<p><a class="olink ARPLS368" href="../../appdev.112/e40758/t_lcr.htm#ARPLS368"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code>ADD_COLUMN</code>, <code>SET_VALUE</code>, and <code>SET_VALUES</code> member procedures for row LCRs</p>
</li>
</ul>
</div>
<div id="STREP493" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref646"></a>
<h4 class="sect3">LOB Assembly Considerations</h4>
<p>The following are issues to consider when you use LOB assembly:</p>
<ul>
<li>
<p>To use a DML or error handler to process assembled LOBs at multiple destination databases, LOB assembly must assemble the LOBs separately on each destination database.</p>
</li>
<li>
<p>Row LCRs captured on a database running a release of Oracle before Oracle Database 10<span class="italic">g</span> Release 2 cannot be assembled by LOB assembly.</p>
</li>
<li>
<p>Row LCRs captured on a database running Oracle Database 10<span class="italic">g</span> Release 2 or later with a compatibility level lower than <code>10.2.0</code> cannot be assembled by LOB assembly.</p>
</li>
<li>
<p>The compatibility level of the database running an apply handler must be <code>10.2.0</code> or higher to specify LOB assembly for the apply handler.</p>
</li>
<li>
<p>Row LCRs from a table containing any <code>LONG</code> or <code>LONG</code> <code>RAW</code> columns cannot be assembled by LOB assembly.</p>
</li>
<li>
<p>The <code>SET_ENQUEUE_DESTINATION</code> and the <code>SET_EXECUTE</code> procedures in the <code>DBMS_APPLY_ADM</code> package always operate on original, nonassembled row LCRs. Therefore, for row LCRs that contain LOB columns, the original, nonassembled row LCRs are enqueued or executed, even if these row LCRs are assembled separately for an apply handler at the destination database.</p>
</li>
<li>
<p>If rule-based transformations were performed on row LCRs that contain LOB columns during capture, propagation, or apply, then an apply handler operates on the transformed row LCRs. If there are <code>LONG</code> or <code>LONG</code> <code>RAW</code> columns at a source database, and a rule-based transformation uses the <code>CONVERT_LONG_TO_LOB_CHUNK</code> member function for row LCRs to convert them to LOBs, then LOB assembly can be enabled for apply handlers that operate on these row&nbsp;LCRs.</p>
</li>
<li>
<p>When a row LCR contains one or more <code>XMLType</code> columns, any <code>XMLType</code> and LOB columns in the row LCR are always assembled, even if the <code>assemble_lobs</code> parameter is set to <code>FALSE</code> for a DML or error handler.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink REFRN10019" href="../../server.112/e40402/initparams035.htm#REFRN10019"><span class="italic">Oracle Database Reference</span></a> and <a class="olink UPGRD005" href="../../server.112/e23633/intro.htm#UPGRD005"><span class="italic">Oracle Database Upgrade Guide</span></a> for more information database compatibility</p>
</li>
<li>
<p><a class="olink ARPLS300" href="../../appdev.112/e40758/d_apply.htm#ARPLS300"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the subprograms in the <code>DBMS_APPLY_ADM</code> package</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="STREP494" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref647"></a>
<h4 class="sect3">LOB Assembly Example</h4>
<p>This section contains an example that uses LOB assembly with a procedure DML handler. The example scenario involves a company that shares the <code>oe.production_information</code> table at several databases, but only some of these databases are used for the company's online World Wide Web catalog. The company wants to store a photograph of each product in the catalog databases, but, to save space, it does not want to store these photographs at the non catalog databases.</p>
<p>To accomplish this goal, a procedure DML handler at a catalog destination database can add a column named <code>photo</code> of data type <code>BLOB</code> to each <code>INSERT</code> and <code>UPDATE</code> made to the <code>product_information</code> table at a source database. The source database does not include the <code>photo</code> column in the table. The procedure DML handler is configured to use an existing photograph at the destination for updates and inserts.The company also wants to add a <code>product_long_desc</code> to the <code>oe.product_information</code> table at all databases. This table already has a <code>product_description</code> column that contains short descriptions. The <code>product_long_desc</code> column is of <code>CLOB</code> data type and contains detailed descriptions. The detailed descriptions are in English, but one of the company databases is used to display the company catalog in Spanish. Therefore, the procedure DML handler updates the <code>product_long_desc</code> column so that the long description is in the correct language.</p>
<p>The following steps configure a procedure DML handler that uses LOB assembly to accomplish the goals described previously:</p>
<dl>
<dd><a id="STREP620"></a><a id="sthref648"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Add the photo Column to the product_information Table</dt>
<dd>
<p>The following statement adds the <code>photo</code> column to the <code>product_information</code> table at the destination database:</p>
<pre>
ALTER TABLE oe.product_information ADD(photo BLOB);
</pre></dd>
<dd><a id="STREP621"></a><a id="sthref649"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Add the product_long_desc Column to the product_information Table</dt>
<dd>
<p>The following statement adds the <code>product_long_desc</code> column to the <code>product_information</code> table at all of the databases in the environment:</p>
<pre>
ALTER TABLE oe.product_information ADD(product_long_desc CLOB);
</pre></dd>
<dd><a id="STREP622"></a><a id="sthref650"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Create the PL/SQL Procedure for the Procedure DML Handler</dt>
<dd>
<p>This example creates the <code>convert_product_information</code> procedure. This procedure will be used for the procedure DML handler. This procedure assumes that the following user-created PL/SQL subprograms exist:</p>
<ul>
<li>
<p>The <code>get_photo</code> procedure obtains a photo in <code>BLOB</code> format from a URL or table based on the <code>product_id</code> and updates the <code>BLOB</code> locator that has been passed in as an argument.</p>
</li>
<li>
<p>The <code>get_product_long_desc</code> procedure has an <code>IN</code> argument of <code>product_id</code> and an <code>IN</code> <code>OUT</code> argument of <code>product_long_desc</code> and translates the <code>product_long_desc</code> into Spanish or obtains the Spanish replacement description and updates <code>product_long_desc</code>.</p>
</li>
</ul>
<p>The following code creates the <code>convert_product_information</code> procedure:</p>
<pre>
CREATE OR REPLACE PROCEDURE convert_product_information(in_any IN ANYDATA)
IS
  lcr                      SYS.LCR$_ROW_RECORD;
  rc                       PLS_INTEGER;
  product_id_anydata       ANYDATA;
  photo_anydata            ANYDATA;
  long_desc_anydata        ANYDATA;
  tmp_photo                BLOB;
  tmp_product_id           NUMBER;
  tmp_prod_long_desc       CLOB;
  tmp_prod_long_desc_src   CLOB;
  tmp_prod_long_desc_dest  CLOB;
  t                        PLS_INTEGER;
BEGIN
  -- Access LCR
  rc := in_any.GETOBJECT(lcr);
  product_id_anydata := lcr.GET_VALUE('OLD', 'PRODUCT_ID');
  t := product_id_anydata.GETNUMBER(tmp_product_id);
  IF ((lcr.GET_COMMAND_TYPE = 'INSERT') or (lcr.GET_COMMAND_TYPE = 'UPDATE')) THEN
    -- If there is no photo column in the lcr then it must be added
    photo_anydata := lcr.GET_VALUE('NEW', 'PHOTO');
    -- Check if photo has been sent and if so whether it is NULL
    IF (photo_anydata is NULL) THEN
      tmp_photo := NULL;
      ELSE
      t := photo_anydata.GETBLOB(tmp_photo);
    END IF;
    -- If tmp_photo is NULL then a new temporary LOB must be created and
    -- updated with the photo if it exists
    IF (tmp_photo is NULL) THEN
      DBMS_LOB.CREATETEMPORARY(tmp_photo, TRUE);
      get_photo(tmp_product_id, tmp_photo);
    END IF;
    -- If photo column did not exist then it must be added
    IF (photo_anydata is NULL) THEN
      lcr.ADD_COLUMN('NEW', 'PHOTO', ANYDATA.CONVERTBLOB(tmp_photo));
      -- Else the existing photo column must be set to the new photo
      ELSE
        lcr.SET_VALUE('NEW', 'PHOTO', ANYDATA.CONVERTBLOB(tmp_photo));
    END IF;
    long_desc_anydata := lcr.GET_VALUE('NEW', 'PRODUCT_LONG_DESC');
    IF (long_desc_anydata is NULL) THEN
      tmp_prod_long_desc_src := NULL;
      ELSE
      t := long_desc_anydata.GETCLOB(tmp_prod_long_desc_src);
    END IF;
    IF (tmp_prod_long_desc_src IS NOT NULL) THEN
      get_product_long_desc(tmp_product_id, tmp_prod_long_desc);
    END IF;
    -- If tmp_prod_long_desc IS NOT NULL, then use it to update the LCR
    IF (tmp_prod_long_desc IS NOT NULL) THEN
      lcr.SET_VALUE('NEW', 'PRODUCT_LONG_DESC',
                    ANYDATA.CONVERTCLOB(tmp_prod_long_desc_dest));
    END IF;
  END IF;
  -- DBMS_LOB operations also are executed 
  -- Inserts and updates invoke all changes
  lcr.EXECUTE(TRUE);
END;
/
</pre></dd>
<dd><a id="STREP623"></a><a id="sthref651"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Set the Procedure DML Handler for the Apply Process</dt>
<dd>
<p>This step sets the <code>convert_product_information</code> procedure as the procedure DML handler at the destination database for <code>INSERT</code>, <code>UPDATE</code>, and <code>LOB_UPDATE</code> operations. Notice that the <code>assemble_lobs</code> parameter is set to <code>TRUE</code> each time the <code>SET_DML_HANDLER</code> procedure is run.</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_DML_HANDLER(
    object_name         =&gt; 'oe.product_information',
    object_type         =&gt; 'TABLE',
    operation_name      =&gt; 'INSERT',
    error_handler       =&gt; FALSE,
    user_procedure      =&gt; 'strmadmin.convert_product_information',
    apply_database_link =&gt; NULL,
    assemble_lobs       =&gt; TRUE);
  DBMS_APPLY_ADM.SET_DML_HANDLER(
    object_name         =&gt; 'oe.product_information',
    object_type         =&gt; 'TABLE',
    operation_name      =&gt; 'UPDATE',
    error_handler       =&gt; FALSE,
    user_procedure      =&gt; 'strmadmin.convert_product_information',
    apply_database_link =&gt; NULL,
    assemble_lobs       =&gt; TRUE);
  DBMS_APPLY_ADM.SET_DML_HANDLER(
    object_name         =&gt; 'oe.product_information',
    object_type         =&gt; 'TABLE',
    operation_name      =&gt; 'LOB_UPDATE',
    error_handler       =&gt; FALSE,
    user_procedure      =&gt; 'strmadmin.convert_product_information',
    apply_database_link =&gt; NULL,
    assemble_lobs       =&gt; TRUE);
END;
/
</pre></dd>
<dd><a id="STREP624"></a><a id="sthref652"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Query the DBA_APPLY_DML_HANDLERS View</dt>
<dd>
<p>To ensure that the procedure DML handler is set properly for the <code>oe.product_information</code> table, run the following query:</p>
<pre>
COLUMN OBJECT_OWNER HEADING 'Table|Owner' FORMAT A5
COLUMN OBJECT_NAME HEADING 'Table Name' FORMAT A20
COLUMN OPERATION_NAME HEADING 'Operation' FORMAT A10
COLUMN USER_PROCEDURE HEADING 'Handler Procedure' FORMAT A25
COLUMN ASSEMBLE_LOBS HEADING 'LOB Assembly?' FORMAT A15

SELECT OBJECT_OWNER, 
       OBJECT_NAME, 
       OPERATION_NAME, 
       USER_PROCEDURE,
       ASSEMBLE_LOBS
  FROM DBA_APPLY_DML_HANDLERS;
</pre>
<p>Your output looks similar to the following:</p>
<pre>
Table
Owner Table Name           Operation  Handler Procedure         LOB Assembly?
----- -------------------- ---------- ------------------------- ---------------
OE    PRODUCT_INFORMATION  INSERT     "STRMADMIN"."CONVERT_PROD Y
                                      UCT_INFORMATION"
 
OE    PRODUCT_INFORMATION  UPDATE     "STRMADMIN"."CONVERT_PROD Y
                                      UCT_INFORMATION"
 
OE    PRODUCT_INFORMATION  LOB_UPDATE "STRMADMIN"."CONVERT_PROD Y
                                      UCT_INFORMATION"
</pre>
<p>Notice that the correct procedure, <code>convert_product_information</code>, is used for each operation on the table. Also, notice that each handler uses LOB assembly.</p>
</dd>
</dl>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABJJIBJ"></a>
<div id="STREP495" class="sect2">
<h3 class="sect2">Requirements for Constructing and Processing LCRs Containing LOB Columns<a id="sthref653"></a></h3>
<p>If your environment produces row LCRs that contain LOB columns, then you must meet the requirements in the following sections when you construct or process these LCRs:</p>
<ul>
<li>
<p><a href="#BABEHFII">Requirements for Constructing and Processing LCRs Without LOB Assembly</a></p>
</li>
<li>
<p><a href="#BABCHFFH">Requirements for Apply Handler Processing of LCRs with LOB Assembly</a></p>
</li>
<li>
<p><a href="#BABDJEGC">Requirements for Rule-Based Transformation Processing of LCRs with LOBs</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREX1165" href="../../server.112/e12862/loblcrdemo.htm#STREX1165"><span class="italic">Oracle Streams Extended Examples</span></a> for an example that constructs and enqueues LCRs that contain LOBs</div>
<a id="BABEHFII"></a>
<div id="STREP496" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Requirements for Constructing and Processing LCRs Without LOB Assembly</h4>
<p>The following requirements must be met when you are constructing LCRs with LOB columns and when you are processing LOB columns with a DML or error handler that has LOB assembly disabled:</p>
<ul>
<li>
<p>Do not modify LOB column data in a row LCR with a procedure DML handler or error handler that has LOB assembly disabled. However, you can modify non-LOB columns in row LCRs with a DML or error handler.</p>
</li>
<li>
<p>Do not allow LCRs from a table that contains LOB columns to be processed by an apply handler that is invoked only for specific operations. For example, an apply handler that is invoked only for <code>INSERT</code> operations should not process LCRs from a table with one or more LOB columns.</p>
</li>
<li>
<p>The data portion of the LCR LOB column must be of type <code>VARCHAR2</code> or <code>RAW</code>. A <code>VARCHAR2</code> is interpreted as a <code>CLOB</code>, and a <code>RAW</code> is interpreted as a <code>BLOB</code>.</p>
</li>
<li>
<p>A LOB column in a user-constructed row LCR must be either a <code>BLOB</code> or a fixed-width <code>CLOB</code>. You cannot construct a row LCR with the following types of LOB columns: <code>NCLOB</code> or variable-width <code>CLOB</code>.</p>
</li>
<li>
<p><code>LOB</code> <code>WRITE</code>, <code>LOB</code> <code>ERASE</code>, and <code>LOB</code> <code>TRIM</code> are the only valid command types for out-of-line LOBs.</p>
</li>
<li>
<p>For <code>LOB</code> <code>WRITE</code>, <code>LOB</code> <code>ERASE</code>, and <code>LOB</code> <code>TRIM</code> LCRs, the <code>old_values</code> collection should be empty or <code>NULL</code>, and <code>new_values</code> should not be empty.</p>
</li>
<li>
<p>The <code>lob_offset</code> should be a valid value for <code>LOB</code> <code>WRITE</code> and <code>LOB</code> <code>ERASE</code> LCRs. For all other command types, <code>lob_offset</code> should be <code>NULL</code>, under the assumption that LOB chunks for that column will follow.</p>
</li>
<li>
<p>The <code>lob_operation_size</code> should be a valid value for <code>LOB</code> <code>ERASE</code> and <code>LOB</code>&nbsp;<code>TRIM</code> LCRs. For all other command types, <code>lob_operation_size</code> should be <code>NULL</code>.</p>
</li>
<li>
<p><code>LOB</code> <code>TRIM</code> and <code>LOB</code> <code>ERASE</code> are valid command types only for an LCR containing a LOB column with <code>lob_information</code> set to <code>LAST_LOB_CHUNK</code>.</p>
</li>
<li>
<p><code>LOB</code> <code>WRITE</code> is a valid command type only for an LCR containing a LOB column with <code>lob_information</code> set to <code>LAST_LOB_CHUNK</code> or <code>LOB_CHUNK</code>.</p>
</li>
<li>
<p>For LOBs with <code>lob_information</code> set to <code>NULL_LOB</code>, the data portion of the column should be a <code>NULL</code> of <code>VARCHAR2</code> type (for a <code>CLOB</code>) or a <code>NULL</code> of <code>RAW</code> type (for a <code>BLOB</code>). Otherwise, it is interpreted as a non-<code>NULL</code> inline LOB column.</p>
</li>
<li>
<p>Only one LOB column reference with one new chunk is allowed for each <code>LOB</code> <code>WRITE</code>, <code>LOB</code> <code>ERASE</code>, and <code>LOB</code> <code>TRIM</code> LCR.</p>
</li>
<li>
<p>The new LOB chunk for a <code>LOB</code> <code>ERASE</code> and a <code>LOB</code> <code>TRIM</code> LCR should be a <code>NULL</code> value encapsulated in an <code>ANYDATA</code>.</p>
</li>
</ul>
<p>An apply process performs all validation of these requirements. If these requirements are not met, then a row LCR containing LOB columns cannot be applied by an apply process nor processed by an apply handler. In this case, the LCR is moved to the error queue with the rest of the LCRs in the same transaction.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1009981">"Constructing and Enqueuing LCRs"</a></p>
</li>
<li>
<p><a class="olink STRMS175" href="../../server.112/e17069/strms_apply.htm#STRMS175"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about apply handlers</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BABCHFFH"></a>
<div id="STREP497" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Requirements for Apply Handler Processing of LCRs with LOB Assembly</h4>
<p>The following requirements must be met when you are processing LOB columns with a DML or error handler that has LOB assembly enabled:</p>
<ul>
<li>
<p>Do not use the following row LCR member procedures on LOB columns in row LCRs that contain assembled LOBs:</p>
<ul>
<li>
<p><code>SET_LOB_INFORMATION</code></p>
</li>
<li>
<p><code>SET_LOB_OFFSET</code></p>
</li>
<li>
<p><code>SET_LOB_OPERATION_SIZE</code></p>
</li>
</ul>
<p>An error is raised if one of these procedures is used on a LOB column in a row&nbsp;LCR.</p>
</li>
<li>
<p>Row LCRs constructed by LOB assembly cannot be enqueued by a procedure DML handler or error handler. However, even when LOB assembly is enabled for one or more handlers at a destination database, the original, nonassembled row LCRs with LOB columns can be enqueued using the <code>SET_ENQUEUE_DESTINATION</code> procedure in the <code>DBMS_APPLY_ADM</code> package.</p>
</li>
</ul>
<p>An apply process performs all validation of these requirements. If these requirements are not met, then a row LCR containing LOB columns cannot be applied by an apply process nor processed by an apply handler. In this case, the LCR is moved to the error queue with the rest of the LCRs in the same transaction. For row LCRs with LOB columns, the original, nonassembled row LCRs are placed in the error queue.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink STRMS175" href="../../server.112/e17069/strms_apply.htm#STRMS175"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about apply handlers</p>
</li>
<li>
<p><a class="olink ARPLS" href="../../appdev.112/e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about <a class="olink ARPLS368" href="../../appdev.112/e40758/t_lcr.htm#ARPLS368">member procedures for row LCRs</a> and for information about the <a class="olink ARPLS595" href="../../appdev.112/e40758/d_apply.htm#ARPLS595"><code>SET_ENQUEUE_DESTINATION</code> procedure</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BABDJEGC"></a>
<div id="STREP498" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Requirements for Rule-Based Transformation Processing of LCRs with LOBs</h4>
<p>The following requirements must be met when you are processing row LCRs that contain LOB columns with a rule-based transformation:</p>
<ul>
<li>
<p>Do not modify LOB column data in a row LCR with a custom rule-based transformation. However, a custom rule-based transformation can modify non-LOB columns in row&nbsp;LCRs that contain LOB columns.</p>
</li>
<li>
<p>You cannot use the following row LCR member procedures on a LOB column when you are processing a row LCR with a custom rule-based transformation:</p>
<ul>
<li>
<p><code>ADD_COLUMN</code></p>
</li>
<li>
<p><code>SET_LOB_INFORMATION</code></p>
</li>
<li>
<p><code>SET_LOB_OFFSET</code></p>
</li>
<li>
<p><code>SET_LOB_OPERATION_SIZE</code></p>
</li>
<li>
<p><code>SET_VALUE</code></p>
</li>
<li>
<p><code>SET_VALUES</code></p>
</li>
</ul>
</li>
<li>
<p>A declarative rule-based transformation created by the <code>ADD_COLUMN</code> procedure in the <code>DBMS_STREAMS_ADM</code> package cannot add a LOB column to a row LCR.</p>
</li>
<li>
<p>Rule-based transformation functions that are run on row LCRs with LOB columns must be deterministic, so that all row LCRs corresponding to the row change are transformed in the same way.</p>
</li>
<li>
<p>Do not allow LCRs from a table that contains LOB columns to be processed by an a custom rule-based transformation that is invoked only for specific operations. For example, a custom rule-based transformation that is invoked only for <code>INSERT</code> operations should not process LCRs from a table with one or more LOB columns.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If row LCRs contain LOB columns, then rule-based transformations always operate on the original, nonassembled row&nbsp;LCRs.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1009981">"Constructing and Enqueuing LCRs"</a></p>
</li>
<li>
<p><a class="olink STRMS106" href="../../server.112/e17069/strms_transform.htm#STRMS106"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information about rule-based transformations</p>
</li>
<li>
<p><a class="olink ARPLS368" href="../../appdev.112/e40758/t_lcr.htm#ARPLS368"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about member procedures for row LCRs</p>
</li>
<li>
<p><a class="olink SQLRF01208" href="../../server.112/e41084/statements_5011.htm#SQLRF01208"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about deterministic functions</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1010215"></a>
<div id="STREP500" class="sect1">
<h2 class="sect1">Managing LCRs Containing LONG or LONG RAW Columns<a id="sthref654"></a><a id="sthref655"></a><a id="sthref656"></a><a id="sthref657"></a><a id="sthref658"></a><a id="sthref659"></a></h2>
<p><code>LONG</code> and <code>LONG</code> <code>RAW</code> data types all can be present in row LCRs captured by a capture process, but these data types are represented by the following data types in row LCRs.</p>
<ul>
<li>
<p><code>LONG</code> data type is represented as <code>VARCHAR2</code> data type in row LCRs.</p>
</li>
<li>
<p><code>LONG</code> <code>RAW</code> data type is represented as <code>RAW</code> data type in row LCRs.</p>
</li>
</ul>
<p><a id="sthref660"></a><a id="sthref661"></a>A row change involving a <code>LONG</code> or <code>LONG</code> <code>RAW</code> column can be captured, propagated, and applied as several LCRs. If your environment uses LCRs that contain <code>LONG</code> or <code>LONG</code> <code>RAW</code> columns, then the data portion of the LCR <code>LONG</code> or <code>LONG</code> <code>RAW</code> column must be of type <code>VARCHAR2</code> or <code>RAW</code>. A <code>VARCHAR2</code> is interpreted as a <code>LONG</code>, and a <code>RAW</code> is interpreted as a <code>LONG</code> <code>RAW</code>.</p>
<p>You must meet the following requirements when you are processing row LCRs that contain <code>LONG</code> or <code>LONG</code> <code>RAW</code> column data in Oracle Streams:</p>
<ul>
<li>
<p>Do not modify <code>LONG</code> or <code>LONG</code> <code>RAW</code> column data in an LCR using a custom rule-based transformation. However, you can use a rule-based transformation to modify non <code>LONG</code> and non <code>LONG</code> <code>RAW</code> columns in row LCRs that contain <code>LONG</code> or <code>LONG</code> <code>RAW</code> column data.</p>
</li>
<li>
<p>Do not use the <code>SET_VALUE</code> or <code>SET_VALUES</code> row LCR member procedures in a custom rule-based transformation that is processing a row LCR that contains <code>LONG</code> or <code>LONG</code> <code>RAW</code> data. Doing so raises the <code>ORA-26679</code> error.</p>
</li>
<li>
<p>Rule-based transformation functions that are run on LCRs that contain <code>LONG</code> or <code>LONG</code> <code>RAW</code> columns must be deterministic, so that all LCRs corresponding to the row change are transformed in the same way.</p>
</li>
<li>
<p>A declarative rule-based transformation created by the <code>ADD_COLUMN</code> procedure in the <code>DBMS_STREAMS_ADM</code> package cannot add a <code>LONG</code> or <code>LONG</code> <code>RAW</code> column to a row LCR.</p>
</li>
<li>
<p>You cannot use a procedure DML handler or error handler to process row LCRs that contain <code>LONG</code> or <code>LONG</code> <code>RAW</code> column data.</p>
</li>
<li>
<p>Rules used to evaluate LCRs that contain <code>LONG</code> or <code>LONG</code> <code>RAW</code> columns must be deterministic, so that either all of the LCRs corresponding to the row change cause a rule in a rule set to evaluate to <code>TRUE</code>, or none of them do.</p>
</li>
<li>
<p>You cannot use an apply process to enqueue LCRs that contain <code>LONG</code> or <code>LONG</code> <code>RAW</code> column data into a destination queue. The <code>SET_DESTINATION_QUEUE</code> procedure in the <code>DBMS_APPLY_ADM</code> package sets the destination queue for LCRs that satisfy a specified apply process rule.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>LONG</code> and <code>LONG</code> <code>RAW</code> data types cannot be present in row LCRs captured by synchronous captures or constructed by users.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink STRMS106" href="../../server.112/e17069/strms_transform.htm#STRMS106"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information about rule-based transformations</p>
</li>
<li>
<p><a class="olink SQLRF01208" href="../../server.112/e41084/statements_5011.htm#SQLRF01208"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about deterministic functions</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1551">
<tr>
<td class="cellalignment1558">
<table class="cellalignment1556">
<tr>
<td class="cellalignment1555"><a href="man_comp.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1555"><a href="ptrep_best.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2003, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1560">
<table class="cellalignment1554">
<tr>
<td class="cellalignment1555"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1555"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1555"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1555"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1555"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1555"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
