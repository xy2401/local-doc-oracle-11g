<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Supporting Multilingual Databases with Unicode</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 070" />
<meta name="dcterms.created" content="2013-07-05T0:14:28Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Globalization Support Guide" />
<meta name="dcterms.identifier" content="E10729-08" />
<meta name="dcterms.isVersionOf" content="NLSPG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="ch5lingsort.htm" title="Previous" type="text/html" />
<link rel="Next" href="ch7progrunicode.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10729.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/21</span> <!-- End Header --><a id="g1014017"></a><a id="NLSPG006"></a><a id="i1006691"></a>
<h1 class="chapter"><span class="secnum">6</span> Supporting Multilingual Databases with Unicode</h1>
<p>This chapter illustrates how to use Unicode in an Oracle Database environment. This chapter includes the following topics:</p>
<ul>
<li>
<p><a href="#CACHJHDJ">Overview of Unicode</a></p>
</li>
<li>
<p><a href="#i1006727">What is Unicode?</a></p>
</li>
<li>
<p><a href="#CACHCAHF">Implementing a Unicode Solution in the Database</a></p>
</li>
<li>
<p><a href="#i1007269">Unicode Case Studies</a></p>
</li>
<li>
<p><a href="#i1007327">Designing Database Schemas to Support Multiple Languages</a></p>
</li>
</ul>
<a id="CACHJHDJ"></a><a id="NLSPG307"></a>
<div class="sect1">
<h2 class="sect1">Overview of Unicode</h2>
<p><a id="sthref498"></a>Unicode is a character encoding system that defines every character in most of the spoken languages in the world.</p>
<p>To overcome the limitations of existing character encodings, several organizations began working on the creation of a global character set in the late 1980s. The need for this became even greater with the development of the World Wide Web in the mid-1990s. The Internet has changed how companies do business, with an emphasis on the global market that has made a universal character set a major requirement.</p>
<p>A global character set needs to fulfill the following conditions:</p>
<ul>
<li>
<p>Contain all major living scripts</p>
</li>
<li>
<p>Support legacy data and implementations</p>
</li>
<li>
<p>Be simple enough that a single implementation of an application is sufficient for worldwide use</p>
</li>
</ul>
<p>A global character set should also have the following capabilities:</p>
<ul>
<li>
<p>Support multilingual users and organizations</p>
</li>
<li>
<p>Conform to international standards</p>
</li>
<li>
<p>Enable worldwide interchange of data</p>
</li>
</ul>
<p>Unicode, which is now in wide use, meets all of the requirments and capabilities of a global character set.</p>
</div>
<!-- class="sect1" -->
<a id="i1006727"></a><a id="NLSPG308"></a>
<div class="sect1">
<h2 class="sect1">What is Unicode?</h2>
<p>Unicode is a universally encoded character set that enables information from any language to be stored using a single character set. Unicode provides a unique code value for every character, regardless of the platform, program, or language.</p>
<p>The Unicode standard has been adopted by many software and hardware vendors. Many operating systems and browsers now support Unicode. Unicode is required by standards such as XML, Java, JavaScript, LDAP, and WML. It is also synchronized with the ISO/IEC 10646 standard.</p>
<p>Oracle Database introduced Unicode as a database character set in Oracle Database 7. In Oracle Database 11<span class="italic">g</span>, Unicode support has been expanded, and supports Unicode 5.0.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<code><a href="http://www.unicode.org">http://www.unicode.org</a></code> for more information about the Unicode standard</div>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#i1006752">Supplementary Characters</a></p>
</li>
<li>
<p><a href="#i1006758">Unicode Encodings</a></p>
</li>
<li>
<p><a href="#i1006865">Support for Unicode in Oracle Database</a></p>
</li>
</ul>
<a id="i1006752"></a><a id="NLSPG309"></a>
<div class="sect2">
<h3 class="sect2">Supplementary Characters</h3>
<p>The first version of Unicode was a 16-bit, fixed-width encoding that used two bytes to encode each character. This enabled 65,536 characters to be represented. However, more characters need to be supported, especially additional CJK ideographs that are important for the Chinese, Japanese, and Korean markets.</p>
<p>Unicode defines supplementary characters to meet this need. It uses two 16-bit code points (also known as <a id="sthref499"></a><a id="sthref500"></a>supplementary characters) to represent a single character. The implementation of supplementary characters enables more than a million additional characters to be defined.</p>
<p>Adding supplementary characters has increased the complexity of Unicode; however, this is less complex than managing several different encodings in the same configuration.</p>
</div>
<!-- class="sect2" -->
<a id="i1006758"></a><a id="NLSPG310"></a>
<div class="sect2">
<h3 class="sect2">Unicode Encodings</h3>
<p><a id="sthref501"></a>The Unicode standard encodes characters in different ways: UTF-8, UCS-2, and UTF-16. Conversion between different Unicode encodings is a simple bit-wise operation that is defined in the Unicode standard.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#i1006779">UTF-8 Encoding</a></p>
</li>
<li>
<p><a href="#i1006807">UCS-2 Encoding</a></p>
</li>
<li>
<p><a href="#i1006826">UTF-16 Encoding</a></p>
</li>
<li>
<p><a href="#CACIIFJH">Examples: UTF-16, UTF-8, and UCS-2 Encoding</a></p>
</li>
</ul>
<a id="i1006779"></a><a id="NLSPG311"></a>
<div class="sect3">
<h4 class="sect3">UTF-8 Encoding</h4>
<p>UTF-8 is the <a id="sthref502"></a><a id="sthref503"></a>8-bit encoding of Unicode. It is a variable-width encoding and a <span class="bold"><a id="sthref504"></a><a id="sthref505"></a>strict superset</span> of ASCII. This means that each and every character in the ASCII character set is available in UTF-8 with the same code point values. One Unicode character can be 1 byte, 2 bytes, 3 bytes, or 4 bytes in UTF-8 encoding. Characters from the European scripts are represented in either 1 or 2 bytes. Characters from most Asian scripts are represented in 3 bytes. Supplementary characters are represented in 4 bytes.</p>
<p>UTF-8 is the Unicode encoding used for HTML and most Internet browsers.</p>
<p>The benefits of UTF-8 are as follows:</p>
<ul>
<li>
<p>Compact storage requirement for European scripts because it is a strict superset of ASCII</p>
</li>
<li>
<p>Ease of migration between ASCII-based characters sets and UTF-8</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1006752">"Supplementary Characters"</a></p>
</li>
<li>
<p><a href="appunicode.htm#CACHBDGH">Table B-2, "Unicode Character Code Ranges for UTF-8 Character Codes"</a></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1006807"></a><a id="NLSPG312"></a>
<div class="sect3">
<h4 class="sect3">UCS-2 <a id="sthref506"></a><a id="sthref507"></a>Encoding</h4>
<p>UCS-2 is a fixed-width, 16-bit encoding. Each character is 2 bytes. UCS-2 is the Unicode encoding used for internal processing by Java before version J2SE 5.0 and by Microsoft Windows NT. UCS-2 supports characters defined for Unicode 3.0, so there is no support for supplementary characters.</p>
<p>The benefits of UCS-2 over UTF-8 are as follows:</p>
<ul>
<li>
<p>More compact storage for Asian scripts, because all characters are two bytes</p>
</li>
<li>
<p>Faster string processing, because characters are fixed-width</p>
</li>
<li>
<p>Better compatibility with Java and Microsoft clients</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006752">"Supplementary Characters"</a></div>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1006826"></a><a id="NLSPG313"></a>
<div class="sect3">
<h4 class="sect3">UTF-16 Encoding</h4>
<p>UTF-16 <a id="sthref508"></a><a id="sthref509"></a>encoding is the 16-bit encoding of Unicode. UTF-16 is an extension of UCS-2 because it supports the supplementary characters by using two UCS-2 code points for each supplementary character. UTF-16 is a strict superset of UCS-2.</p>
<p>One character can be either 2 bytes or 4 bytes in UTF-16. Characters from European and most Asian scripts are represented in 2 bytes. Supplementary characters are represented in 4 bytes. UTF-16 is the main Unicode encoding used for internal processing by Java since version J2SE 5.0 and by Microsoft Windows since version 2000.</p>
<p>The benefits of UTF-16 over UTF-8 are as follows:</p>
<ul>
<li>
<p>More compact storage for Asian scripts because most of the commonly used Asian characters are represented in two bytes.</p>
</li>
<li>
<p>Better compatibility with Java and Microsoft clients</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1006752">"Supplementary Characters"</a></p>
</li>
<li>
<p><a href="appunicode.htm#g635384">Table B-1, "Unicode Character Code Ranges for UTF-16 Character Codes"</a></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CACIIFJH"></a><a id="NLSPG314"></a>
<div class="sect3">
<h4 class="sect3">Examples: UTF-16, UTF-8, and UCS-2 Encoding</h4>
<p><a href="#i1006859">Figure 6-1</a> shows some characters and their character codes in UTF-16, UTF-8, and UCS-2 encoding. The last character is a treble clef (a music symbol), a supplementary character.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1006859"></a><a id="NLSPG787"></a>Figure 6-1 UTF-16, UTF-8, and UCS-2 Encoding Examples</p>
<img width="496" height="170" src="img/nlspg031.gif" alt="Description of Figure 6-1 follows" /><br />
<a id="sthref510" href="./img_text/nlspg031.htm">Description of "Figure 6-1 UTF-16, UTF-8, and UCS-2 Encoding Examples"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006865"></a><a id="NLSPG315"></a>
<div class="sect2">
<h3 class="sect2">Support for Unicode in Oracle Database</h3>
<p>Oracle Database <a id="sthref511"></a>began supporting Unicode as a database character set in release 7. <a href="#g1008165">Table 6-1</a> summarizes the Unicode character sets supported by Oracle Database.</p>
<div class="tblformalwide">
<p class="titleintable"><a id="NLSPG788"></a><a id="sthref512"></a><a id="g1008165"></a>Table 6-1 Unicode Character Sets Supported by Oracle Database</p>
<table class="cellalignment1914" title="Unicode Character Sets Supported by Oracle Database " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1905">
<th class="cellalignment1915" id="r1c1-t6">Character Set</th>
<th class="cellalignment1915" id="r1c2-t6">Supported in RDBMS Release</th>
<th class="cellalignment1915" id="r1c3-t6">Unicode Encoding</th>
<th class="cellalignment1915" id="r1c4-t6">Unicode Version</th>
<th class="cellalignment1915" id="r1c5-t6">Database Character Set</th>
<th class="cellalignment1915" id="r1c6-t6">National Character Set</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r2c1-t6" headers="r1c1-t6">
<p><a id="sthref513"></a><a id="sthref514"></a>AL24UTFFSS</p>
</td>
<td class="cellalignment1911" headers="r2c1-t6 r1c2-t6">
<p>7.2 - 8<span class="italic">i</span></p>
</td>
<td class="cellalignment1911" headers="r2c1-t6 r1c3-t6">
<p>UTF-8</p>
</td>
<td class="cellalignment1911" headers="r2c1-t6 r1c4-t6">
<p>1.1</p>
</td>
<td class="cellalignment1911" headers="r2c1-t6 r1c5-t6">
<p>Yes</p>
</td>
<td class="cellalignment1911" headers="r2c1-t6 r1c6-t6">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r3c1-t6" headers="r1c1-t6">
<p><a id="i1006915"></a>UTF8</p>
</td>
<td class="cellalignment1911" headers="r3c1-t6 r1c2-t6">
<p>8.0 - 11<span class="italic">g</span></p>
</td>
<td class="cellalignment1911" headers="r3c1-t6 r1c3-t6">
<p>UTF-8</p>
</td>
<td class="cellalignment1911" headers="r3c1-t6 r1c4-t6">
<p>For Oracle Database release 8.0 through Oracle8<span class="italic">i</span> Release 8.1.6: 2.1</p>
<p>For Oracle8<span class="italic">i</span> Database release 8.1.7 and later: 3.0</p>
</td>
<td class="cellalignment1911" headers="r3c1-t6 r1c5-t6">
<p>Yes</p>
</td>
<td class="cellalignment1911" headers="r3c1-t6 r1c6-t6">
<p>Yes (Oracle9<span class="italic">i</span> Database and newer only)</p>
</td>
</tr>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r4c1-t6" headers="r1c1-t6">
<p><a id="sthref515"></a><a id="sthref516"></a>UTFE</p>
</td>
<td class="cellalignment1911" headers="r4c1-t6 r1c2-t6">
<p>8.0 - 11<span class="italic">g</span></p>
</td>
<td class="cellalignment1911" headers="r4c1-t6 r1c3-t6">
<p>UTF-EBCDIC</p>
</td>
<td class="cellalignment1911" headers="r4c1-t6 r1c4-t6">
<p>For Oracle8<span class="italic">i</span> Database releases 8.0 through 8.1.6: 2.1</p>
<p>For Oracle8<span class="italic">i</span> Database release 8.1.7 and later: 3.0</p>
</td>
<td class="cellalignment1911" headers="r4c1-t6 r1c5-t6">
<p>Yes</p>
</td>
<td class="cellalignment1911" headers="r4c1-t6 r1c6-t6">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r5c1-t6" headers="r1c1-t6">
<p><a id="sthref517"></a><a id="sthref518"></a>AL32UTF8</p>
</td>
<td class="cellalignment1911" headers="r5c1-t6 r1c2-t6">
<p>9<span class="italic">i</span> - 11<span class="italic">g</span></p>
</td>
<td class="cellalignment1911" headers="r5c1-t6 r1c3-t6">
<p>UTF-8</p>
</td>
<td class="cellalignment1911" headers="r5c1-t6 r1c4-t6">
<p>Oracle9<span class="italic">i</span> Database release 1: 3.0</p>
<p>Oracle9<span class="italic">i</span> Database release 2: 3.1</p>
<p>Oracle Database 10<span class="italic">g</span>, release 1: 3.2</p>
<p>Oracle Database 10<span class="italic">g</span>, release2: 4.0</p>
<p>Oracle Database 11<span class="italic">g</span>: 5.0</p>
</td>
<td class="cellalignment1911" headers="r5c1-t6 r1c5-t6">
<p>Yes</p>
</td>
<td class="cellalignment1911" headers="r5c1-t6 r1c6-t6">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r6c1-t6" headers="r1c1-t6">
<p><a id="sthref519"></a><a id="sthref520"></a>AL16UTF16</p>
</td>
<td class="cellalignment1911" headers="r6c1-t6 r1c2-t6">
<p>9<span class="italic">i</span> - 11<span class="italic">g</span></p>
</td>
<td class="cellalignment1911" headers="r6c1-t6 r1c3-t6">
<p>UTF-16</p>
</td>
<td class="cellalignment1911" headers="r6c1-t6 r1c4-t6">
<p>Oracle9<span class="italic">i</span> Database release 1: 3.0</p>
<p>Oracle9<span class="italic">i</span> Database release 2: 3.1</p>
<p>Oracle Database 10<span class="italic">g</span>, release 1: 3.2</p>
<p>Oracle Database 10<span class="italic">g</span>, release 2: 4.0</p>
<p>Oracle Database 11<span class="italic">g</span>: 5.0</p>
</td>
<td class="cellalignment1911" headers="r6c1-t6 r1c5-t6">
<p>No</p>
</td>
<td class="cellalignment1911" headers="r6c1-t6 r1c6-t6">
<p>Yes</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACHCAHF"></a><a id="NLSPG316"></a>
<div class="sect1">
<h2 class="sect1">Implementing a Unicode Solution in the Database</h2>
<p>Unicode characters can be stored in an Oracle database in two ways:</p>
<ul>
<li>
<p>You can create a Unicode database that enables you to store UTF-8 encoded characters as SQL <code>CHAR</code> data types (<code>CHAR</code>, <code>VARCHAR2</code>, <code>CLOB</code>, and <code>LONG)</code>.</p>
</li>
<li>
<p>If you prefer to implement Unicode support incrementally, or if you need to support multilingual data only in certain columns, then you can store Unicode data in either the UTF-16 or UTF-8 encoding form in SQL <code>NCHAR</code> data types (<code>NCHAR</code>, <code>NVARCHAR2</code>, and <code>NCLOB</code>). The SQL <code>NCHAR</code> data types are called Unicode data types because they are used only for storing Unicode data.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
You can combine a Unicode database solution with a Unicode data type solution.</div>
<p>The following sections explain how to use the two Unicode solutions and how to choose between them:</p>
<ul>
<li>
<p><a href="#i1006998">Enabling Multilingual Support with Unicode Databases</a></p>
</li>
<li>
<p><a href="#i1007039">Enabling Multilingual Support with Unicode Data Types</a></p>
</li>
<li>
<p><a href="#i1007077">How to Choose Between a Unicode Database and a Unicode Data Type Solution</a></p>
</li>
<li>
<p><a href="#i1007174">Comparing Unicode Character Sets for Database and Data Type Solutions</a></p>
</li>
</ul>
<a id="i1006998"></a><a id="NLSPG317"></a>
<div class="sect2">
<h3 class="sect2">Enabling Multilingual Support with Unicode Databases</h3>
<p>The database character set specifies the encoding to be used in the SQL <code>CHAR</code> data types as well as the metadata such as table names, column names, and SQL statements. A <span class="bold"><a id="sthref521"></a>Unicode database</span> is a database with a UTF-8 character set as the database character set. There are three Oracle character sets that implement the UTF-8 encoding. The first two are designed for ASCII-based platforms while the third one should be used on EBCDIC platforms.</p>
<ul>
<li>
<p>AL32UTF8</p>
<p>The AL32UTF8 <a id="sthref522"></a>character set supports the latest version of the Unicode standard. It encodes characters in one, two, or three bytes. Supplementary characters require four bytes. It is for ASCII-based platforms.</p>
</li>
<li>
<p>UTF8</p>
<p>The <a id="sthref523"></a>UTF8 character set encodes characters in one, two, or three bytes. It is for ASCII-based platforms.</p>
<p>Supplementary characters inserted into a UTF8 database do not corrupt the data in the database. A supplementary character is treated as two separate, user-defined characters that occupy 6 bytes. Oracle recommends that you switch to AL32UTF8 for full support of supplementary characters in the database character set.</p>
</li>
<li>
<p>UTFE</p>
<p>The UTFE c<a id="sthref524"></a>haracter set is for EBCDIC platforms. It is similar to UTF8 on ASCII platforms, but it encodes characters in one, two, three, and four bytes. Supplementary characters are converted as two 4-byte characters.</p>
</li>
</ul>
<div class="example">
<p class="titleinexample"><a id="i1007012"></a><a id="NLSPG789"></a>Example 6-1 Creating a Database with a Unicode Character Set</p>
<p>To <a id="sthref525"></a>create a database with the AL32UTF8 character set, use the <code>CREATE</code> <code>DATABASE</code> statement and include the <code>CHARACTER SET AL32UTF8</code> clause. For example:</p>
<pre>
CREATE DATABASE sample 
</pre>
<pre>
CONTROLFILE REUSE 
LOGFILE 
</pre>
<pre>
GROUP 1 ('diskx:log1.log', 'disky:log1.log') SIZE 50K, 
GROUP 2 ('diskx:log2.log', 'disky:log2.log') SIZE 50K 
</pre>
<pre>
MAXLOGFILES 5 
MAXLOGHISTORY 100 
MAXDATAFILES 10 
MAXINSTANCES 2 
ARCHIVELOG
CHARACTER SET AL32UTF8
NATIONAL CHARACTER SET AL16UTF16 
DATAFILE 
</pre>
<pre>
'disk1:df1.dbf' AUTOEXTEND ON, 
'disk2:df2.dbf' AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED 
</pre>
<pre>
DEFAULT TEMPORARY TABLESPACE temp_ts 
UNDO TABLESPACE undo_ts 
SET TIME_ZONE = '+02:00';
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
Specify the database character set when you create the database.</div>
</div>
<!-- class="sect2" -->
<a id="i1007039"></a><a id="NLSPG318"></a>
<div class="sect2">
<h3 class="sect2">Enabling Multilingual Support with <a id="sthref526"></a><a id="sthref527"></a>Unicode Data Types</h3>
<p>An alternative to storing Unicode data in the database is to use the SQL <code>NCHAR</code> data types (<code>NCHAR</code>, <code>NVARCHAR</code>, <code>NCLOB</code>). You can store Unicode characters in columns of these data types regardless of how the database character set has been defined. The <code>NCHAR</code> data type is exclusively a Unicode data type, which means that it stores data encoded as Unicode.</p>
<p>You can create a table using the <code>NVARCHAR2</code> and <code>NCHAR</code> data types. The column length specified for the <code>NCHAR</code> and <code>NVARCHAR2</code> columns always equals the number of characters instead of the number of bytes:</p>
<pre>
CREATE TABLE product_information 
    ( product_id          NUMBER(6) 
    , product_name        NVARCHAR2(100) 
    , product_description VARCHAR2(1000));
</pre>
<p>The encoding used in the SQL <code>NCHAR</code> data types is the <a id="sthref528"></a><a id="sthref529"></a>national character set specified for the database. You can specify one of the following Oracle character sets as the national character set:</p>
<ul>
<li>
<p>AL16UTF16</p>
<p>This is the default character set for SQL <code>NCHAR</code> data types. This character set encodes Unicode data in the UTF-16 encoding. It supports supplementary characters, which are stored as four bytes.</p>
</li>
<li>
<p>UTF8</p>
<p>When UTF8 is specified for SQL <code>NCHAR</code> data types, the data stored in the SQL data types is in UTF-8 encoding.</p>
</li>
</ul>
<p>You can specify the national character set for the SQL <code>NCHAR</code> data types when you create a database using the <code>CREATE</code> <code>DATABASE</code> statement with the <code>NATIONAL CHARACTER SET</code> clause. The following statement creates a database with WE8ISO8859P1 as the database character set and AL16UTF16 as the national character set.</p>
<div class="example">
<p class="titleinexample"><a id="NLSPG790"></a><a id="sthref530"></a>Example 6-2 Creating a Database with a National Character Set</p>
<pre>
CREATE DATABASE sample 
</pre>
<pre>
CONTROLFILE REUSE 
LOGFILE 
</pre>
<pre>
GROUP 1 ('diskx:log1.log', 'disky:log1.log') SIZE 50K, 
GROUP 2 ('diskx:log2.log', 'disky:log2.log') SIZE 50K 
</pre>
<pre>
MAXLOGFILES 5 
MAXLOGHISTORY 100 
MAXDATAFILES 10 
MAXINSTANCES 2 
ARCHIVELOG
CHARACTER SET WE8ISO8859P1
NATIONAL CHARACTER SET AL16UTF16 
DATAFILE 
</pre>
<pre>
'disk1:df1.dbf' AUTOEXTEND ON, 
'disk2:df2.dbf' AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED 
</pre>
<pre>
DEFAULT TEMPORARY TABLESPACE temp_ts 
UNDO TABLESPACE undo_ts 
SET TIME_ZONE = '+02:00';
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1007077"></a><a id="NLSPG319"></a>
<div class="sect2">
<h3 class="sect2">How to Choose Between a Unicode Database and a Unicode Data Type Solution</h3>
<p>To choose the <a id="sthref531"></a>correct Unicode solution for your database, consider the following questions:</p>
<ul>
<li>
<p>Programming environment: What are the main programming languages used in your applications? How do they support Unicode?</p>
</li>
<li>
<p>Ease of migration: How easily can your data and applications be migrated to take advantage of the Unicode solution?</p>
</li>
<li>
<p>Types of data: Is your data mostly Asian or European? Do you need to store multilingual documents into <code>LOB</code> columns?</p>
</li>
<li>
<p>Types of applications: What type of applications are you implementing: a packaged application or a customized end-user application?</p>
</li>
</ul>
<p>This section describes some general guidelines for choosing a Unicode database or a Unicode data type solution. The final decision largely depends on your exact environment and requirements. This section contains the following topics:</p>
<ul>
<li>
<p><a href="#i1007095">When Should You Use a Unicode Database?</a></p>
</li>
<li>
<p><a href="#i1007132">When Should You Use Unicode Data Types?</a></p>
</li>
</ul>
<a id="i1007095"></a><a id="NLSPG320"></a>
<div class="sect3">
<h4 class="sect3">When Should You <a id="sthref532"></a>Use a Unicode Database?</h4>
<p>Use a Unicode database in the situations described in <a href="#g1008219">Table 6-2</a>.</p>
<div class="tblformalwide">
<p class="titleintable"><a id="NLSPG791"></a><a id="sthref533"></a><a id="g1008219"></a>Table 6-2 Using a Unicode Database</p>
<table class="cellalignment1914" title="Using a Unicode Database " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1905">
<th class="cellalignment1915" id="r1c1-t9">Situation</th>
<th class="cellalignment1915" id="r1c2-t9">Explanation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r2c1-t9" headers="r1c1-t9">
<p>You need easy code migration for Java or PL/SQL.</p>
</td>
<td class="cellalignment1911" headers="r2c1-t9 r1c2-t9">
<p>If your existing application is mainly written in Java and PL/SQL and your main concern is to minimize the code changes required to support multiple languages, then you may want to use a Unicode database solution. If the data types used to stored data remain as SQL <code>CHAR</code> data types, then the Java and PL/SQL code that accesses these columns does not need to change.</p>
</td>
</tr>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r3c1-t9" headers="r1c1-t9">
<p>You have evenly distributed multilingual data.</p>
</td>
<td class="cellalignment1911" headers="r3c1-t9 r1c2-t9">
<p>If the multilingual data is evenly distributed in existing schema tables and you are not sure which tables contain multilingual data, then you should use a Unicode database because it does not require you to identify the kind of data that is stored in each column.</p>
</td>
</tr>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r4c1-t9" headers="r1c1-t9">
<p>Your SQL statements and PL/SQL code contain Unicode data.</p>
</td>
<td class="cellalignment1911" headers="r4c1-t9 r1c2-t9">
<p>You must use a Unicode database. SQL statements and PL/SQL code are converted into the database character set before being processed. If the SQL statements and PL/SQL code contain characters that cannot be converted to the database character set, then those characters are lost. A common place to use Unicode data in a SQL statement is in a string literal.</p>
</td>
</tr>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r5c1-t9" headers="r1c1-t9">
<p>You want to store multilingual documents in <code>BLOB</code> format and use Oracle Text for content searching.</p>
</td>
<td class="cellalignment1911" headers="r5c1-t9 r1c2-t9">
<p>You must use a Unicode database. The <code>BLOB</code> data is converted to the database character set before being indexed by Oracle Text. If your database character set is not UTF8, then data is lost when the documents contain characters that cannot be converted to the database character set.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect3" -->
<a id="i1007132"></a><a id="NLSPG321"></a>
<div class="sect3">
<h4 class="sect3">When Should You Use <a id="sthref534"></a>Unicode Data Types?</h4>
<p>Use Unicode data types in the situations described in <a href="#g1008238">Table 6-3</a>.</p>
<div class="tblformalwide">
<p class="titleintable"><a id="NLSPG792"></a><a id="sthref535"></a><a id="g1008238"></a>Table 6-3 Using Unicode Data Types</p>
<table class="cellalignment1914" title="Using Unicode Data Types " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1905">
<th class="cellalignment1915" id="r1c1-t10">Situation</th>
<th class="cellalignment1915" id="r1c2-t10">Explanation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r2c1-t10" headers="r1c1-t10">
<p>You want to add multilingual support incrementally.</p>
</td>
<td class="cellalignment1911" headers="r2c1-t10 r1c2-t10">
<p>If you want to add Unicode support to the existing database without migrating the character set, then consider using Unicode data types to store Unicode data. You can add columns of the SQL <code>NCHAR</code> data types to existing tables or new tables to support multiple languages incrementally.</p>
</td>
</tr>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r3c1-t10" headers="r1c1-t10">
<p>You want to build a packaged application.</p>
</td>
<td class="cellalignment1911" headers="r3c1-t10 r1c2-t10">
<p>If you are building a packaged application to sell to customers, then you may want to build the application using SQL <code>NCHAR</code> data types. The SQL <code>NCHAR</code> data type is a reliable Unicode data type in which the data is always stored in Unicode, and the length of the data is always specified in UTF-16 code units. As a result, you need to test the application only once. The application will run on customer databases with any database character set.</p>
</td>
</tr>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r4c1-t10" headers="r1c1-t10">
<p>You want better performance with single-byte database character sets.</p>
</td>
<td class="cellalignment1911" headers="r4c1-t10 r1c2-t10">
<p>If performance is your main concern, then consider using a single-byte database character set and storing Unicode data in the SQL <code>NCHAR</code> data types.</p>
</td>
</tr>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r5c1-t10" headers="r1c1-t10">
<p>You require UTF-16 support in Windows clients.</p>
</td>
<td class="cellalignment1911" headers="r5c1-t10 r1c2-t10">
<p>If your applications are written in Visual C/C++ or Visual Basic running on Windows, then you may want to use the SQL <code>NCHAR</code> data types. You can store UTF-16 data in SQL <code>NCHAR</code> data types in the same way that you store it in the <code>wchar_t</code> buffer in Visual C/C++ and <code>string</code> buffer in Visual Basic. You can avoid buffer overflow in client applications because the length of the <code>wchar_t</code> and <code>string</code> data types match the length of the SQL <code>NCHAR</code> data types in the database.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
You can use a Unicode database with Unicode data types.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1007174"></a><a id="NLSPG322"></a>
<div class="sect2">
<h3 class="sect2">Comparing Unicode Character Sets for Database and Data Type Solutions</h3>
<p>Oracle provides two solutions to store Unicode characters in the database: a Unicode database solution and a Unicode data type solution. After you select the Unicode database solution, the Unicode data type solution, or a combination of both, you then determine the character set to be used in the Unicode database or the Unicode data type.</p>
<p><a href="#g1008261">Table 6-4</a> contains advantages and disadvantages of character sets for a Unicode database solution. <a id="sthref536"></a><a id="sthref537"></a>The Oracle character sets that can be Unicode database character sets are AL32UTF8, UTF8, and UTFE.</p>
<div class="tblruleformalwidemax">
<p class="titleintable"><a id="NLSPG793"></a><a id="sthref538"></a><a id="g1008261"></a>Table 6-4 Character Set Advantages and Disadvantages for a Unicode Database Solution</p>
<table class="cellalignment1914" title="Character Set Advantages and Disadvantages for a Unicode Database Solution " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1905">
<th class="cellalignment1915" id="r1c1-t12">Database Character Set</th>
<th class="cellalignment1915" id="r1c2-t12">Advantages</th>
<th class="cellalignment1915" id="r1c3-t12">Disadvantages</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r2c1-t12" headers="r1c1-t12">
<p>AL32UTF8</p>
</td>
<td class="cellalignment1911" headers="r2c1-t12 r1c2-t12">
<ul>
<li>
<p>Supplementary characters are stored in 4 bytes, so there is no data conversion when supplementary characters are retrieved and inserted if the client setting is UTF-8.</p>
</li>
<li>
<p>The storage for supplementary characters requires less disk space in AL32UTF8 than in UTF8.</p>
</li>
</ul>
</td>
<td class="cellalignment1911" headers="r2c1-t12 r1c3-t12">
<ul>
<li>
<p>You cannot specify the length of SQL <code>CHAR</code> types in number of UCS-2 code points for supplementary characters. Supplementary characters are treated as one code point rather than the standard two code points.</p>
</li>
<li>
<p>The binary order for SQL <code>CHAR</code> columns is different from the binary order of SQL <code>NCHAR</code> columns when the data consists of supplementary characters. As a result, <code>CHAR</code> columns and <code>NCHAR</code> columns do not always have the same sort for identical strings.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r3c1-t12" headers="r1c1-t12">
<p>UTF8</p>
</td>
<td class="cellalignment1911" headers="r3c1-t12 r1c2-t12">
<ul>
<li>
<p>You can specify the length of SQL <code>CHAR</code> types in number of UCS-2 code points.</p>
</li>
<li>
<p>The binary order of the SQL <code>CHAR</code> columns is always the same as the binary order of the SQL <code>NCHAR</code> columns when the data consists of the same supplementary characters. As a result, <code>CHAR</code> columns and <code>NCHAR</code> columns have the same sort for identical strings.</p>
</li>
</ul>
</td>
<td class="cellalignment1911" headers="r3c1-t12 r1c3-t12">
<ul>
<li>
<p>Supplementary characters are stored as 6 bytes instead of the 4 bytes defined by Unicode 4.0. As a result, Oracle has to convert data for supplementary characters if the client setting is UTF-8.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r4c1-t12" headers="r1c1-t12">
<p>UTFE</p>
</td>
<td class="cellalignment1911" headers="r4c1-t12 r1c2-t12">
<ul>
<li>
<p>This is the only Unicode character set for the EBCDIC platform.</p>
</li>
<li>
<p>You can specify the length of SQL <code>CHAR</code> types in number of UCS-2 code points.</p>
</li>
<li>
<p>The binary order of the SQL <code>CHAR</code> columns is always the same as the binary order of the SQL <code>NCHAR</code> columns when the data consists of the same supplementary characters. As a result, <code>CHAR</code> columns and <code>NCHAR</code> columns have the same sort for identical strings.</p>
</li>
</ul>
</td>
<td class="cellalignment1911" headers="r4c1-t12 r1c3-t12">
<ul>
<li>
<p>Supplementary character are stored as 8 bytes (two 4-byte sequences) instead of the 5 bytes defined by the Unicode standard. As a result, Oracle has to convert data for those supplementary characters.</p>
</li>
<li>
<p>UTFE is not a standard encoding in the Unicode standard. As a result, clients requiring standard UTF-8 encoding must convert data from UTFE to the standard encoding when data is retrieved and inserted.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformalwidemax" -->
<p><a href="#g1008281">Table 6-5</a> contains <a id="sthref539"></a><a id="sthref540"></a>advantages and disadvantages of different character sets for a Unicode data type solution. The Oracle character sets that can be national character sets are AL16UTF16 and UTF8. The default is AL16UTF16.</p>
<div class="tblruleformalwidemax">
<p class="titleintable"><a id="NLSPG794"></a><a id="sthref541"></a><a id="g1008281"></a>Table 6-5 Character Set Advantages and Disadvantages for a Unicode Data Type Solution</p>
<table class="cellalignment1914" title="Character Set Advantages and Disadvantages for a Unicode Data Type Solution " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1905">
<th class="cellalignment1915" id="r1c1-t13">National Character Set</th>
<th class="cellalignment1915" id="r1c2-t13">Advantages</th>
<th class="cellalignment1915" id="r1c3-t13">Disadvantages</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r2c1-t13" headers="r1c1-t13">
<p>AL16UTF16</p>
</td>
<td class="cellalignment1911" headers="r2c1-t13 r1c2-t13">
<ul>
<li>
<p>Asian data in AL16UTF16 is usually more compact than in UTF8. As a result, you save disk space and have less disk I/O when most of the multilingual data stored in the database is Asian data.</p>
</li>
<li>
<p>It is usually faster to process strings encoded in the AL16UTF16 character set than strings encoded in UTF8 because Oracle processes most characters in an AL16UTF16 encoded string as fixed-width characters.</p>
</li>
<li>
<p>The maximum length limits for the <code>NCHAR</code> and <code>NVARCHAR2</code> columns are 1000 and 2000 characters, respectively. Because the data is fixed-width, the lengths are guaranteed.</p>
</li>
</ul>
</td>
<td class="cellalignment1911" headers="r2c1-t13 r1c3-t13">
<ul>
<li>
<p>European ASCII data requires more disk space to store in AL16UTF16 than in UTF8. If most of your data is European data, then it uses more disk space than if it were UTF8 data.</p>
</li>
<li>
<p>The maximum lengths for <code>NCHAR</code> and <code>NVARCHAR2</code> are 1000 and 2000 characters, which is less than the lengths for <code>NCHAR</code> (2000) and <code>NVARCHAR2</code> (4000) in UTF8.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r3c1-t13" headers="r1c1-t13">
<p>UTF8</p>
</td>
<td class="cellalignment1911" headers="r3c1-t13 r1c2-t13">
<ul>
<li>
<p>European data in UTF8 is usually more compact than in AL16UTF16. As a result, you save disk space and have better response time when most of the multilingual data stored in the database is European data.</p>
</li>
<li>
<p>The maximum lengths for the <code>NCHAR</code> and <code>NVARCHAR2</code> columns are 2000 and 4000 characters respectively, which is more than those for <code>NCHAR</code> (1000) and <code>NVARCHAR2</code> (2000) in AL16UTF16. Although the maximum lengths of the <code>NCHAR</code> and <code>NVARCHAR2</code> columns are larger in UTF8, the actual storage size is still bound by the byte limits of 2000 and 4000 bytes, respectively. For example, you can store 4000 UTF8 characters in an <code>NVARCHAR2</code> column if all the characters are single byte, but only 4000/3 characters if all the characters are three bytes.</p>
</li>
</ul>
</td>
<td class="cellalignment1911" headers="r3c1-t13 r1c3-t13">
<ul>
<li>
<p>Asian data requires more disk space to store in UTF8 than in AL16UTF16. If most of your data is Asian data, then disk space usage is not less efficient than when the character set is AL16UTF16.</p>
</li>
<li>
<p>Although you can specify larger length limits for <code>NCHAR</code> and <code>NVARCHAR</code>, you are not guaranteed to be able to insert the number of characters specified by these limits. This is because UTF8 allows variable-width characters.</p>
</li>
<li>
<p>It is usually slower to process strings encoded in UTF8 than strings encoded in AL16UTF16 because UTF8 encoded strings consist of variable-width characters.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformalwidemax" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007269"></a><a id="NLSPG323"></a>
<div class="sect1">
<h2 class="sect1">Unicode Case Studies</h2>
<p>This section describes typical scenarios for storing Unicode characters in an Oracle database:</p>
<ul>
<li>
<p><a href="#i1007284">Example 6-3, "Unicode Solution with a Unicode Database"</a></p>
</li>
<li>
<p><a href="#i1007297">Example 6-4, "Unicode Solution with Unicode Data Types"</a></p>
</li>
<li>
<p><a href="#i1007315">Example 6-5, "Unicode Solution with a Unicode Database and Unicode Data Types"</a></p>
</li>
</ul>
<div class="example">
<p class="titleinexample"><a id="i1007284"></a><a id="NLSPG795"></a>Example 6-3 Unicode Solution with a Unicode Database</p>
<p>An American <a id="sthref542"></a>company running a Java application would like to add German and French support in the next release of the application. They would like to add Japanese support at a later time. The company currently has the following system configuration:</p>
</div>
<!-- class="example" -->
<ul>
<li>
<p>The existing database has a database character set of US7ASCII.</p>
</li>
<li>
<p>All character data in the existing database is composed of ASCII characters.</p>
</li>
<li>
<p>PL/SQL stored procedures are used in the database.</p>
</li>
<li>
<p>The database is about 300 GB.</p>
</li>
<li>
<p>There is a nightly downtime of 4 hours.</p>
</li>
</ul>
<p>In this case, a typical solution is to choose UTF8 for the database character set because of the following reasons:</p>
<ul>
<li>
<p>The database is very large and the scheduled downtime is short. Fast migration of the database to Unicode is vital. Because the database is in US7ASCII, the easiest and fastest way of enabling the database to support Unicode is to switch the database character set to UTF8 by running the <code>CSALTER</code> script. No data conversion is required because US7ASCII is a subset of UTF8.</p>
</li>
<li>
<p>Because most of the code is written in Java and PL/SQL, changing the database character set to UTF8 is unlikely to break existing code. Unicode support is automatically enabled in the application.</p>
</li>
<li>
<p>Because the application supports French, German, and Japanese, there are few supplementary characters. Both AL32UTF8 and UTF8 are suitable.</p>
</li>
</ul>
<div class="example">
<p class="titleinexample"><a id="i1007297"></a><a id="NLSPG796"></a>Example 6-4 Unicode Solution with Unicode Data Types</p>
<p>A European <a id="sthref543"></a>company that runs its applications mainly on Windows platforms wants to add new Windows applications written in Visual C/C++. The new applications will use the existing database to support Japanese and Chinese customer names. The company currently has the following system configuration:</p>
</div>
<!-- class="example" -->
<ul>
<li>
<p>The existing database has a database character set of WE8ISO8859P1.</p>
</li>
<li>
<p>All character data in the existing database is composed of Western European characters.</p>
</li>
<li>
<p>The database is around 50 GB.</p>
</li>
</ul>
<p>A typical solution is take the following actions:</p>
<ul>
<li>
<p>Use <code>NCHAR</code> and <code>NVARCHAR2</code> data types to store Unicode characters</p>
</li>
<li>
<p>Keep WE8ISO8859P1 as the database character set</p>
</li>
<li>
<p>Use AL16UTF16 as the national character set</p>
</li>
</ul>
<p>The reasons for this solution are:</p>
<ul>
<li>
<p>Migrating the existing database to a Unicode database requires data conversion because the database character set is WE8ISO8859P1 (a Latin-1 character set), which is not a subset of UTF8. As a result, there will be some overhead in converting the data to UTF8.</p>
</li>
<li>
<p>The additional languages are supported in new applications only. They do not depend on the existing applications or schemas. It is simpler to use the Unicode data type in the new schema and keep the existing schemas unchanged.</p>
</li>
<li>
<p>Only customer name columns require Unicode support. Using a single <code>NCHAR</code> column meets the customer's requirements without migrating the entire database.</p>
</li>
<li>
<p>Because the languages to be supported are mostly Asian languages, AL16UTF16 should be used as the national character set so that disk space is used more efficiently.</p>
</li>
<li>
<p>The lengths of the SQL <code>NCHAR</code> data types are defined as number of characters. This is the same as how they are treated when using <code>wchar_t</code> strings in Windows C/C++ programs. This reduces programming complexity.</p>
</li>
<li>
<p>Existing applications using the existing schemas are unaffected.</p>
</li>
</ul>
<div class="example">
<p class="titleinexample"><a id="i1007315"></a><a id="NLSPG797"></a>Example 6-5 Unicode Solution with a Unicode Database and Unicode Data Types</p>
<p>A Japanese <a id="sthref544"></a><a id="sthref545"></a>company wants to develop a new Java application. The company expects that the application will support as many languages as possible in the long run.</p>
</div>
<!-- class="example" -->
<ul>
<li>
<p>In order to store documents as is, the company decided to use the <code>BLOB</code> data type to store documents of multiple languages.</p>
</li>
<li>
<p>The company may also want to generate UTF-8 XML documents from the relational data for business-to-business data exchange.</p>
</li>
<li>
<p>The back-end has Windows applications written in C/C++ using ODBC to access the Oracle database.</p>
</li>
</ul>
<p>In this case, the typical solution is to create a Unicode database using AL32UTF8 as the database character set and use the SQL <code>NCHAR</code> data types to store multilingual data. The national character set should be set to AL16UTF16. The reasons for this solution are as follows:</p>
<ul>
<li>
<p>When documents of different languages are stored in <code>BLOB</code> format, Oracle Text requires the database character set to be one of the UTF-8 character sets. Because the applications may retrieve relational data as UTF-8 XML format (where supplementary characters are stored as four bytes), AL32UTF8 should be used as the database character set to avoid data conversion when UTF-8 data is retrieved or inserted.</p>
</li>
<li>
<p>Because applications are new and written in both Java and Windows C/C++, the company should use the SQL <code>NCHAR</code> data type for its relational data. Both Java and Windows support the UTF-16 character data type, and the length of a character string is always measured in the number of characters.</p>
</li>
<li>
<p>If most of the data is for Asian languages, then AL16UTF16 should be used with the SQL <code>NCHAR</code> data types because AL16UTF16 offers better storage efficiency.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1007327"></a><a id="NLSPG324"></a>
<div class="sect1">
<h2 class="sect1">Designing Database Schemas to Support Multiple Languages</h2>
<p>In addition to <a id="sthref546"></a><a id="sthref547"></a>choosing a Unicode solution, the following issues should be taken into consideration when the database schema is designed to support multiple languages:</p>
<ul>
<li>
<p><a href="#i1007347">Specifying Column Lengths for Multilingual Data</a></p>
</li>
<li>
<p><a href="#i1007382">Storing Data in Multiple Languages</a></p>
</li>
<li>
<p><a href="#i1007440">Storing Documents in Multiple Languages in LOB Data Types</a></p>
</li>
<li>
<p><a href="#i1007496">Creating Indexes for Searching Multilingual Document Contents</a></p>
</li>
</ul>
<a id="i1007347"></a><a id="NLSPG325"></a>
<div class="sect2">
<h3 class="sect2">Specifying Column Length<a id="sthref548"></a>s for Multilingual Data</h3>
<p>When you use <code>NCHAR</code> and <code>NVARCHAR2</code> data types for storing multilingual data, the column size specified for a column is defined in number of characters. (The number of characters means the number of Unicode code units.) <a href="#g1008297">Table 6-6</a> shows the maximum size of the <code>NCHAR</code> and <code>NVARCHAR2</code> data types for the AL16UTF16 and UTF8 national character sets.</p>
<div class="tblformal">
<p class="titleintable"><a id="NLSPG798"></a><a id="sthref549"></a><a id="g1008297"></a>Table 6-6 Maximum Data Type Size</p>
<table class="cellalignment1916" title="Maximum Data Type Size " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1905">
<th class="cellalignment1915" id="r1c1-t14">National Character Set</th>
<th class="cellalignment1915" id="r1c2-t14">Maximum Column Size of NCHAR Data Type</th>
<th class="cellalignment1915" id="r1c3-t14">Maximum Column Size of NVARCHAR2 Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r2c1-t14" headers="r1c1-t14">
<p>AL16UTF16</p>
</td>
<td class="cellalignment1911" headers="r2c1-t14 r1c2-t14">
<p>1000 characters</p>
</td>
<td class="cellalignment1911" headers="r2c1-t14 r1c3-t14">
<p>2000 characters</p>
</td>
</tr>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r3c1-t14" headers="r1c1-t14">
<p>UTF8</p>
</td>
<td class="cellalignment1911" headers="r3c1-t14 r1c2-t14">
<p>2000 bytes</p>
</td>
<td class="cellalignment1911" headers="r3c1-t14 r1c3-t14">
<p>4000 bytes</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>When you use <code>CHAR</code> and <code>VARCHAR2</code> data types for storing multilingual data, the maximum length specified for each column is, by default, in number of bytes. If the database needs to support Thai, Arabic, or multibyte languages such as Chinese and Japanese, then the maximum lengths of the <code>CHAR</code>, <code>VARCHAR</code>, and <code>VARCHAR2</code> columns may need to be extended. This is because the number of bytes required to encode these languages in UTF8 or AL32UTF8 may be significantly larger than the number of bytes for encoding English and Western European languages. For example, one Thai character in the Thai character set requires 3 bytes in UTF8 or AL32UTF8. In addition, the maximum column lengths for <code>CHAR</code>, <code>VARCHAR</code>, and <code>VARCHAR2</code> data types are 2000 bytes, 4000 bytes, and 4000 bytes respectively. If applications need to store more than 4000 bytes, then they should use the <code>CLOB</code> data type.</p>
</div>
<!-- class="sect2" -->
<a id="i1007382"></a><a id="NLSPG326"></a>
<div class="sect2">
<h3 class="sect2">Storing Data in Multiple Languages<a id="sthref550"></a></h3>
<p>The Unicode character set includes characters of most written languages around the world, but it does not contain information about the language to which a given character belongs. In other words, a character such as <code>&auml;</code> does not contain information about whether it is a French or German character. In order to provide information in the language a user desires, data stored in a Unicode database should accompany the language information to which the data belongs.</p>
<p>There are many ways for a database schema to relate data to a language. The following sections discuss different approaches:</p>
<ul>
<li>
<p><a href="#i1007395">Store Language Information with the Data</a></p>
</li>
<li>
<p><a href="#i1007413">Select Translated Data Using Fine-Grained Access Control</a></p>
</li>
</ul>
<a id="i1007395"></a><a id="NLSPG327"></a>
<div class="sect3">
<h4 class="sect3">Store Language Information with the Data</h4>
<p>For data such as product descriptions or product names, you can add a language column (<code>language_id</code>) of <code>CHAR</code> or <code>VARCHAR2</code> data type to the product table to identify the language of the corresponding product information. This enables applications to retrieve the information in the desired language. The possible values for this language column are the 3-letter abbreviations of the valid <code>NLS_LANGUAGE</code> values of the database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="applocaledata.htm#g694776">Appendix A, "Locale Data"</a> for a list of <code>NLS_LANGUAGE</code> values and their abbreviations</div>
<p>You can also create a view to select the data of the current language. For example:</p>
<pre>
ALTER TABLE scott.product_information ADD (language_id VARCHAR2(50)):

CREATE OR REPLACE VIEW product AS 
   SELECT product_id, product_name 
   FROM   product_information 
   WHERE  language_id = SYS_CONTEXT('USERENV','LANG');
</pre></div>
<!-- class="sect3" -->
<a id="i1007413"></a><a id="NLSPG328"></a>
<div class="sect3">
<h4 class="sect3">Select Translated Data Using Fine-Grained Access Control</h4>
<p>Fine-grained access control enables you to limit the degree to which a user can view information in a table or view. Typically, this is done by appending a <code>WHERE</code> clause. When you add a <code>WHERE</code> clause as a fine-grained access policy to a table or view, Oracle automatically appends the <code>WHERE</code> clause to any SQL statements on the table at run time so that only those rows satisfying the <code>WHERE</code> clause can be accessed.</p>
<p>You can use this feature to avoid specifying the desired language of a user in the <code>WHERE</code> clause in every <code>SELECT</code> statement in your applications. The following <code>WHERE</code> clause limits the view of a table to the rows corresponding to the desired language of a user:</p>
<pre>
WHERE language_id = SYS_CONTEXT('userenv', 'LANG')
</pre>
<p>Specify this <code>WHERE</code> clause as a fine-grained access policy for <code>product_information</code> as follows:</p>
<pre>
CREATE FUNCTION func1 (sch VARCHAR2 , obj VARCHAR2 )
RETURN VARCHAR2(100);
BEGIN
RETURN 'language_id = SYS_CONTEXT(''userenv'', ''LANG'')';
END
/

DBMS_RLS.ADD_POLICY ('scott', 'product_information', 'lang_policy', 'scott', 'func1', 'select');
</pre>
<p>Then any <code>SELECT</code> statement on the <code>product_information</code> table automatically appends the <code>WHERE</code> clause.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS" href="../../appdev.112/e41502/toc.htm"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for more information about fine-grained access control</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1007440"></a><a id="NLSPG329"></a>
<div class="sect2">
<h3 class="sect2">Storing Documents in Multiple Languages <a id="sthref551"></a><a id="sthref552"></a>in LOB Data Types</h3>
<p>You can store documents in multiple languages in <code>CLOB</code>, <code>NCLOB</code>, or <code>BLOB</code> data types and set up Oracle Text to enable content search for the documents.</p>
<p>Data in <code>CLOB</code> columns is stored in a format that is compatible with UCS-2 when the database character set is multibyte, such as UTF8 or AL32UTF8. This means that the storage space required for an English document doubles when the data is converted. Storage for an Asian language document in a <code>CLOB</code> column requires less storage space than the same document in a <code>LONG</code> column using UTF8, typically around 30% less, depending on the contents of the document.</p>
<p>Documents in <code>NCLOB</code> format are also stored in a proprietary format that is compatible with UCS-2 regardless of the database character set or national character set. The storage space requirement is the same as for <code>CLOB</code> data. Document contents are converted to UTF-16 when they are inserted into a <code>NCLOB</code> column. If you want to store multilingual documents in a non-Unicode database, then choose <code>NCLOB</code>. However, content search on <code>NCLOB</code> is not yet supported.</p>
<p>Documents in <code>BLOB</code> format are stored as they are. No data conversion occurs during insertion and retrieval. However, SQL string manipulation functions (such as <code>LENGTH</code> or <code>SUBSTR</code>) and collation functions (such as <code>NLS_SORT</code> and <code>ORDER BY</code>) cannot be applied to the <code>BLOB</code> data type.</p>
<p><a href="#g1008321">Table 6-7</a> lists the advantages and disadvantages of the <code>CLOB</code>, <code>NCLOB</code>, and <code>BLOB</code> data types when storing documents:</p>
<div class="tblformalwide">
<p class="titleintable"><a id="NLSPG799"></a><a id="sthref553"></a><a id="g1008321"></a>Table 6-7 Comparison of LOB Data Types for Document Storage</p>
<table class="cellalignment1914" title="Comparison of LOB Data Types for Document Storage " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1905">
<th class="cellalignment1915" id="r1c1-t17">Data Types</th>
<th class="cellalignment1915" id="r1c2-t17">Advantages</th>
<th class="cellalignment1915" id="r1c3-t17">Disadvantages</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r2c1-t17" headers="r1c1-t17">
<p><code>CLOB</code></p>
</td>
<td class="cellalignment1911" headers="r2c1-t17 r1c2-t17">
<ul>
<li>
<p>Content search support</p>
</li>
<li>
<p>String manipulation support</p>
</li>
</ul>
</td>
<td class="cellalignment1911" headers="r2c1-t17 r1c3-t17">
<ul>
<li>
<p>Depends on database character set</p>
</li>
<li>
<p>Data conversion is necessary for insertion</p>
</li>
<li>
<p>Cannot store binary documents</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r3c1-t17" headers="r1c1-t17">
<p><code>NCLOB</code></p>
</td>
<td class="cellalignment1911" headers="r3c1-t17 r1c2-t17">
<ul>
<li>
<p>Independent of database character set</p>
</li>
<li>
<p>String manipulation support</p>
</li>
</ul>
</td>
<td class="cellalignment1911" headers="r3c1-t17 r1c3-t17">
<ul>
<li>
<p>No content search support</p>
</li>
<li>
<p>Data conversion is necessary for insertion</p>
</li>
<li>
<p>Cannot store binary documents</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1905">
<td class="cellalignment1911" id="r4c1-t17" headers="r1c1-t17">
<p><code>BLOB</code></p>
</td>
<td class="cellalignment1911" headers="r4c1-t17 r1c2-t17">
<ul>
<li>
<p>Independent of database character set</p>
</li>
<li>
<p>Content search support</p>
</li>
<li>
<p>No data conversion, data stored as is</p>
</li>
<li>
<p>Can store binary documents such as Microsoft Word or Microsoft Excel</p>
</li>
</ul>
</td>
<td class="cellalignment1911" headers="r4c1-t17 r1c3-t17">
<ul>
<li>
<p>No string manipulation support</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<a id="i1007496"></a><a id="NLSPG330"></a>
<div class="sect2">
<h3 class="sect2">Creating Indexes for Searching Multilingual <a id="sthref554"></a><a id="sthref555"></a><a id="sthref556"></a>Document Contents</h3>
<p>Oracle Text enables you to build indexes for content search on multilingual documents stored in <code>CLOB</code> format and <code>BLOB</code> format. It uses a language-specific lexer to parse the <code>CLOB</code> or <code>BLOB</code> data and produces a list of searchable keywords.</p>
<p>Create a multilexer to search multilingual documents. The multilexer chooses a language-specific lexer for each row, based on a language column. This section describes the high level steps to create indexes for documents in multiple languages. It contains the following topics:</p>
<ul>
<li>
<p><a href="#i1007523">Creating Multilexers</a></p>
</li>
<li>
<p><a href="#i1007544">Creating Indexes for Documents Stored in the CLOB Data Type</a></p>
</li>
<li>
<p><a href="#i1007561">Creating Indexes for Documents Stored in the BLOB Data Type</a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF" href="../../text.112/e24436/toc.htm"><span class="italic">Oracle Text Reference</span></a></div>
</li>
</ul>
<a id="i1007523"></a><a id="NLSPG331"></a>
<div class="sect3">
<h4 class="sect3">Creating Multilexers<a id="sthref557"></a></h4>
<p>The first step in creating the multilexer is the creation of language-specific lexer preferences for each language supported. The following example creates English, German, and Japanese lexers with PL/SQL procedures:</p>
<pre>
ctx_ddl.create_preference('english_lexer', 'basic_lexer'); 
ctx_ddl.set_attribute('english_lexer','index_themes','yes'); 
ctx_ddl.create_preference('german_lexer', 'basic_lexer'); 
ctx_ddl.set_attribute('german_lexer','composite','german'); 
ctx_ddl.set_attribute('german_lexer','alternate_spelling','german'); 
ctx_ddl.set_attribute('german_lexer','mixed_case','yes'); 
ctx_ddl.create_preference('japanese_lexer', 'JAPANESE_VGRAM_LEXER'); 
</pre>
<p>After the language-specific lexer preferences are created, they need to be gathered together under a single multilexer preference. First, create the multilexer preference, using the <code>MULTI_LEXER</code> object:</p>
<pre>
ctx_ddl.create_preference('global_lexer','multi_lexer'); 
</pre>
<p>Now add the language-specific lexers to the multilexer preference using the <code>add_sub_lexer</code> call:</p>
<pre>
ctx_ddl.add_sub_lexer('global_lexer', 'german', 'german_lexer'); 
ctx_ddl.add_sub_lexer('global_lexer', 'japanese', 'japanese_lexer'); 
ctx_ddl.add_sub_lexer('global_lexer', 'default','english_lexer'); 
</pre>
<p>This nominates the <code>german_lexer</code> preference to handle German documents, the <code>japanese_lexer</code> preference to handle Japanese documents, and the <code>english_lexer</code> preference to handle everything else, using <code>DEFAULT</code> as the language.</p>
</div>
<!-- class="sect3" -->
<a id="i1007544"></a><a id="NLSPG332"></a>
<div class="sect3">
<h4 class="sect3">Creating <a id="sthref558"></a><a id="sthref559"></a>Indexes for Documents Stored in the CLOB Data Type</h4>
<p>The multilexer decides which lexer to use for each row based on a language column in the table. This is a character column that stores the language of the document in a text column. Use the Oracle language name to identify the language of a document in this column. For example, if you use the <code>CLOB</code> data type to store your documents, then add the language column to the table where the documents are stored:</p>
<pre>
CREATE TABLE globaldoc
  (doc_id    NUMBER       PRIMARY KEY, 
  language  VARCHAR2(30), 
  text      CLOB); 
</pre>
<p>To create an index for this table, use the multilexer preference and specify the name of the language column:</p>
<pre>
CREATE INDEX globalx ON globaldoc(text) 
  indextype IS ctxsys.context 
  parameters ('lexer 
               global_lexer 
               language 
               column 
               language'); 
</pre></div>
<!-- class="sect3" -->
<a id="i1007561"></a><a id="NLSPG333"></a>
<div class="sect3">
<h4 class="sect3">Creating <a id="sthref560"></a><a id="sthref561"></a>Indexes for Documents Stored in the BLOB Data Type</h4>
<p>In addition to the language column, the character set and format columns must be added in the table where the documents are stored. The character set column stores the character set of the documents using the Oracle character set names. The format column specifies whether a document is a text or binary document. For example, the <code>CREATE TABLE</code> statement can specify columns called <code>characterset</code> and <code>format</code>:</p>
<pre>
CREATE TABLE globaldoc ( 
   doc_id       NUMBER       PRIMARY KEY, 
   language     VARCHAR2(30), 
   characterset VARCHAR2(30), 
   format       VARCHAR2(10), 
   text         BLOB 
  ); 
</pre>
<p>You can put word-processing or spreadsheet documents into the table and specify <code>binary</code> in the <code>format</code> column. For documents in HTML, XML and text format, you can put them into the table and specify <code>text</code> in the <code>format</code> column.</p>
<p>Because there is a column in which to specify the character set, you can store text documents in different character sets.</p>
<p>When you create the index, specify the names of the format and character set columns:</p>
<pre>
CREATE INDEX globalx ON globaldoc(text) 
  indextype is ctxsys.context 
  parameters ('filter inso_filter 
                lexer global_lexer 
                language column language 
                format  column format 
                charset column characterset'); 
</pre>
<p>You can use the <code>charset_filter</code> if all documents are in text format. The <code>charset_filter</code> converts data from the character set specified in the <code>charset</code> column to the database character set.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1904">
<tr>
<td class="cellalignment1911">
<table class="cellalignment1909">
<tr>
<td class="cellalignment1908"><a href="ch5lingsort.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1908"><a href="ch7progrunicode.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1913">
<table class="cellalignment1907">
<tr>
<td class="cellalignment1908"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1908"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1908"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1908"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1908"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1908"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
