<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>XStream Concepts</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 735" />
<meta name="dcterms.created" content="2013-07-02T6:44:42Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database XStream Guide" />
<meta name="dcterms.identifier" content="E16545-09" />
<meta name="dcterms.isVersionOf" content="XSTRM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2009, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="xstrm_intro.htm" title="Previous" type="text/html" />
<link rel="Next" href="xstrm_use.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e16545.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/22</span> <!-- End Header -->
<div id="XSTRM187" class="chapter"><a id="BCEBDGFJ"></a>
<h1 class="chapter"><span class="secnum">2</span> XStream Concepts</h1>
<p><a id="sthref18"></a>This chapter contains concepts related to XStream.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#BCEDICDE">XStream Out</a></p>
</li>
<li>
<p><a href="#BCECJHDF">XStream In</a></p>
</li>
<li>
<p><a href="#BCEDDAJG">Position Order in an LCR Stream</a></p>
</li>
<li>
<p><a href="#CIHBCCJE">XStream and SQL Generation</a></p>
</li>
<li>
<p><a href="#BCEBGHCJ">XStream and Security</a></p>
</li>
<li>
<p><a href="#BABHJFBG">Other Ways to Share Information in a Heterogeneous Environment</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xstrm_config.htm#CBDIJEFE">Chapter 4, "Configuring XStream"</a></div>
<a id="BCEDICDE"></a>
<div id="XSTRM1087" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">XStream Out<a id="sthref19"></a><a id="sthref20"></a><a id="sthref21"></a></h2>
<p>XStream Out can capture transactions from the redo log of an Oracle database and send them efficiently to a client application. XStream Out provides a transaction-based interface for streaming these changes to client applications. The client application can interact with other systems, including non-Oracle systems, such as non-Oracle databases or file systems.</p>
<p>XStream Out has both OCI and Java interfaces and supports all of the data types that are supported by Oracle Streams, including LOBs, <code>LONG</code>, <code>LONG</code> <code>RAW</code>, and <code>XMLType</code>.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#BCEJIJAD">The Outbound Server</a></p>
</li>
<li>
<p><a href="#BABDAJJI">ID Key LCRs</a></p>
</li>
<li>
<p><a href="#BABGDACA">Sequence LCRs</a></p>
</li>
<li>
<p><a href="#BCEIJJDF">Considerations for XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CIHECIBF">XStream Out and Distributed Transactions</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xstrm_pt_oci.htm#CIAFHDJF">Part IV, "XStream OCI API Reference"</a></p>
</li>
<li>
<p><a class="olink STXJV" href="../../appdev.112/e16674/toc.htm"><span class="italic">Oracle Database XStream Java API Reference</span></a></p>
</li>
</ul>
</div>
<a id="BCEJIJAD"></a>
<div id="XSTRM1088" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">The Outbound Server<a id="sthref22"></a><a id="sthref23"></a><a id="sthref24"></a><a id="sthref25"></a><a id="sthref26"></a></h3>
<p>With XStream Out, an Oracle Streams apply process functions as an outbound server. An <span class="bold">outbound server</span> is an optional Oracle background process that sends database changes to a client application. Specifically, a client application can attach to an outbound server and extract database changes from LCRs. A client application attaches to the outbound server using the OCI or Java interface.</p>
<p>A client application can create multiple sessions. Each session can attach to only one outbound server, and each outbound server can serve only one session at a time. However, different client application sessions can connect to different outbound servers or inbound servers.</p>
<p>In an XStream Out configuration, a capture process captures database changes and sends these changes to an outbound server. A <span class="bold">capture process</span> is an optional Oracle background process that scans the database redo log to capture DML and DDL changes made to database objects. When a capture process is configured to capture changes from the redo log, the database where the changes were generated is called the <span class="bold">source database</span> for the capture process.</p>
<p><a href="#BABHABJC">Figure 2-1</a> shows a capture process.</p>
<div id="XSTRM72636" class="figure">
<p class="titleinfigure"><a id="BABHABJC"></a>Figure 2-1 Capture Process</p>
<img width="201" height="350" src="img/xstrm012.gif" alt="Description of Figure 2-1 follows" /><br />
<a id="sthref27" href="img_text/xstrm012.htm">Description of "Figure 2-1 Capture Process"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a id="sthref28"></a>Change capture can be performed on the same database as the outbound server or on a different database. When change capture is performed on a different database from the one that contains the outbound server, a <span class="bold">propagation</span> sends the changes from the change capture database to the outbound server database. Downstream capture is also a supported mode to reduce the load on the source database.</p>
<p>When both the capture process and the outbound server are enabled, data changes, encapsulated in row LCRs and DDL LCRs, are sent to the outbound server. The outbound server can publish LCRs in various formats, such as OCI and Java. The client application can process LCRs that are passed to it from the outbound server or wait for LCRs from the outbound server by using a loop.</p>
<p>An outbound server sends LOB, <code>LONG</code>, <code>LONG</code> <code>RAW</code>, and <code>XMLType</code> data to the client application in chunks. Several chunks comprise a single column value of LOB, <code>LONG</code>, <code>LONG</code> <code>RAW</code>, or <code>XMLType</code> data type.</p>
<p><a href="#BCEDFFFD">Figure 2-2</a> shows an outbound server configuration.</p>
<div id="XSTRM1417" class="figure">
<p class="titleinfigure"><a id="BCEDFFFD"></a>Figure 2-2 XStream Out Outbound Server</p>
<img width="642" height="305" src="img/xstrm063.gif" alt="Description of Figure 2-2 follows" /><br />
<a id="sthref29" href="img_text/xstrm063.htm">Description of "Figure 2-2 XStream Out Outbound Server"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The client application can detach from the outbound server whenever necessary. When the client application re-attaches, the outbound server automatically determines where in the stream of LCRs the client application was when it detached. The outbound server starts sending LCRs from this point forward.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STRMS307" href="../../server.112/e17069/strms_capture.htm#STRMS307"><span class="italic">Oracle Streams Concepts and Administration</span></a> for detailed information about capture processes</div>
<div id="XSTRM1434" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref30"></a>
<h4 class="sect3">Outbound Servers and Apply Process Features<a id="sthref31"></a><a id="sthref32"></a></h4>
<p>An Oracle Streams apply process functions as an outbound server, but some apply process features are not applicable to an outbound server. The following sections describe which apply process features are applicable to outbound servers and which are not:</p>
<ul>
<li>
<p><a href="#BCECFIHI">Apply Process Features That Are Applicable to Outbound Servers</a></p>
</li>
<li>
<p><a href="#BCEFBHFJ">Apply Process Features That Are Not Applicable to Outbound Servers</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STRMS104" href="../../server.112/e17069/strms_apply.htm#STRMS104"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information about apply processes</div>
<a id="BCECFIHI"></a>
<div id="XSTRM1435" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Apply Process Features That Are Applicable to Outbound Servers</h5>
<p>The following apply process features can be used with outbound servers:</p>
<ul>
<li>
<p><a id="sthref33"></a>Rules and rule sets</p>
<p>See <a class="olink STRMS006" href="../../server.112/e17069/strms_rules.htm#STRMS006"><span class="italic">Oracle Streams Concepts and Administration</span></a>.</p>
</li>
<li>
<p><a id="sthref34"></a>Rule-based transformations</p>
<p>When a custom rule-based transformation is specified on a rule used by an outbound server, the user who calls the transformation function is the connect user for the outbound server.</p>
<p>See <a class="olink STRMS106" href="../../server.112/e17069/strms_transform.htm#STRMS106"><span class="italic">Oracle Streams Concepts and Administration</span></a>.</p>
</li>
<li>
<p>The following apply process parameters:</p>
<ul>
<li>
<p><code>apply_sequence_nextval</code></p>
</li>
<li>
<p><code>disable_on_limit</code></p>
</li>
<li>
<p><code>grouptransops</code></p>
</li>
<li>
<p><code>ignore_transaction</code></p>
</li>
<li>
<p><code>max_sga_size</code></p>
</li>
<li>
<p><code>maximum_scn</code></p>
</li>
<li>
<p><code>startup_seconds</code></p>
</li>
<li>
<p><code>time_limit</code></p>
</li>
<li>
<p><code>trace_level</code></p>
</li>
<li>
<p><code>transaction_limit</code></p>
</li>
<li>
<p><code>txn_age_spill_threshold</code></p>
</li>
<li>
<p><code>txn_lcr_spill_threshold</code></p>
</li>
<li>
<p><code>write_alert_log</code></p>
</li>
</ul>
<p>These apply process parameters control the behavior of outbound servers.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2), the following parameters are available: <code>apply_sequence_nextval</code>, <code>ignore_transaction</code>, <code>grouptransops</code>, and <code>max_sga_size</code>.</div>
<p>See <a class="olink ARPLS314" href="../../appdev.112/e40758/d_apply.htm#ARPLS314"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
</li>
<li>
<p>Transaction assembly by reader servers</p>
<p>See <a class="olink STRMS146" href="../../server.112/e17069/strms_apply.htm#STRMS146"><span class="italic">Oracle Streams Concepts and Administration</span></a>.</p>
</li>
<li>
<p><a id="sthref35"></a>The spilling of unapplied LCRs to hard disk</p>
<p>See <a class="olink STRMS391" href="../../server.112/e17069/strms_apply.htm#STRMS391"><span class="italic">Oracle Streams Concepts and Administration</span></a>.</p>
</li>
<li>
<p><a id="sthref36"></a>Instantiation system change number (SCN) settings</p>
<p>Instantiation SCNs are not required for database objects processed by an outbound server. If an instantiation SCN is set for a database object, then the outbound server only sends the LCRs for the database object with SCN values that are greater than the instantiation SCN value. If a database object does not have an instantiation SCN set, then the outbound server skips the instantiation SCN check and sends all LCRs for that database object. In both cases, the outbound server only sends LCRs that satisfy its rule sets.</p>
<p>See <a class="olink STREP012" href="../../server.112/e10705/instant.htm#STREP012"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a>.</p>
</li>
</ul>
<a id="BCEFBHFJ"></a>
<div id="XSTRM1436" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Apply Process Features That Are Not Applicable to Outbound Servers</h5>
<p>The following apply process features cannot be used with outbound servers:</p>
<ul>
<li>
<p><a id="sthref37"></a>Apply handlers</p>
<p>You cannot specify an apply handler for an outbound server. The client application can perform custom processing of the LCRs instead if necessary. However, if apply processes are configured in the same database as the outbound server, then you can specify apply handlers for these apply processes. In addition, you can configure general apply handlers for the database. An outbound server ignores general apply handlers.</p>
<p>See <a class="olink STRMS175" href="../../server.112/e17069/strms_apply.htm#STRMS175"><span class="italic">Oracle Streams Concepts and Administration</span></a>.</p>
</li>
<li>
<p>The following apply process parameters:</p>
<ul>
<li>
<p><code>allow_duplicate_rows</code></p>
</li>
<li>
<p><code>commit_serialization</code></p>
</li>
<li>
<p><code>compare_key_only</code></p>
</li>
<li>
<p><code>disable_on_error</code></p>
</li>
<li>
<p><code>parallelism</code></p>
</li>
<li>
<p><code>preserve_encryption</code></p>
</li>
<li>
<p><code>rtrim_on_implicit_conversion</code></p>
</li>
</ul>
<p>Outbound servers ignore the settings for these apply process parameters.</p>
<p>The <code>commit_serialization</code> parameter is always set to <code>FULL</code> for an outbound server, and the <code>parallelism</code> parameter is always set to <code>1</code> for an outbound server.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2), the <code>compare_key_only</code> parameter is available.</div>
<p>See <a class="olink ARPLS314" href="../../appdev.112/e40758/d_apply.htm#ARPLS314"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
</li>
<li>
<p><a id="sthref38"></a>Apply tags</p>
<p>An outbound server cannot set an apply tag for the changes it processes.</p>
<p>See <a class="olink STREP008" href="../../server.112/e10705/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a>.</p>
</li>
<li>
<p>Apply database links</p>
<p>Outbound servers cannot use database links.</p>
<p>See <a class="olink STREP411" href="../../server.112/e10705/hetero.htm#STREP411"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a>.</p>
</li>
<li>
<p><a id="sthref39"></a>Conflict detection and resolution</p>
<p>An outbound server does not detect conflicts, and conflict resolution cannot be set for an outbound server.</p>
<p>See <a class="olink STREP001" href="../../server.112/e10705/conflict.htm#STREP001"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a>.</p>
</li>
<li>
<p><a id="sthref40"></a>Dependency scheduling</p>
<p>An outbound server does not evaluate dependencies because its parallelism must be&nbsp;1.</p>
<p>See <a class="olink STRMS207" href="../../server.112/e17069/strms_adapply.htm#STRMS207"><span class="italic">Oracle Streams Concepts and Administration</span></a>.</p>
</li>
<li>
<p><a id="sthref41"></a>Substitute key column settings</p>
<p>An outbound server ignores substitute key column settings.</p>
<p>See <a class="olink STRMS214" href="../../server.112/e17069/strms_adapply.htm#STRMS214"><span class="italic">Oracle Streams Concepts and Administration</span></a>.</p>
</li>
<li>
<p><a id="sthref42"></a>Enqueue directives specified by the <code>SET_ENQUEUE_DESTINATION</code> procedure in the <code>DBMS_APPLY_ADM</code> package</p>
<p>An outbound server cannot enqueue changes into an Oracle database queue automatically using the <code>SET_ENQUEUE_DESTINATION</code> procedure.</p>
<p>See <a class="olink ARPLS595" href="../../appdev.112/e40758/d_apply.htm#ARPLS595"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
</li>
<li>
<p><a id="sthref43"></a>Execute directives specified by the <code>SET_EXECUTE</code> procedure in the <code>DBMS_APPLY_ADM</code> package</p>
<p>An outbound server ignores execute directives.</p>
<p>See <a class="olink ARPLS596" href="../../appdev.112/e40758/d_apply.htm#ARPLS596"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
</li>
<li>
<p>Error creation and execution</p>
<p>An outbound server does not create an error transaction when it encounters an error. It records information about errors in the <code>ALL_APPLY</code> and <code>DBA_APPLY</code> views, but it does not enqueue the transaction into the error queue.</p>
<p>See <a class="olink STRMS156" href="../../server.112/e17069/strms_apply.htm#STRMS156"><span class="italic">Oracle Streams Concepts and Administration</span></a>.</p>
</li>
</ul>
</div>
<!-- class="sect4" --></div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABDAJJI"></a>
<div id="XSTRM72577" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">ID Key LCRs<a id="sthref44"></a><a id="sthref45"></a><a id="sthref46"></a></h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This functionality is available starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2).</div>
<p>XStream Out does not support the following data types in row LCRs:</p>
<ul>
<li>
<p><code>BFILE</code></p>
</li>
<li>
<p><code>ROWID</code></p>
</li>
<li>
<p>User-defined types (including object types, REFs, varrays, and nested tables)</p>
</li>
<li>
<p>XMLType stored object relationally or as binary XML</p>
</li>
<li>
<p>The following Oracle supplied types: Any types, URI types, spatial types, and media types</p>
</li>
</ul>
<p>These data type restrictions pertain to both ordinary (heap-organized) tables and index-organized tables.</p>
<p><span class="bold">ID key LCRs</span> enable an XStream client application to process changes to rows that include unsupported data types. ID key LCRs do not contain all of the columns for a row change. Instead, they contain the rowid of the changed row, a group of key columns to identify the row in the table, and the data for the scalar columns of the table that are supported by XStream Out. ID key LCRs do not contain columns for unsupported data types.</p>
<p>An XStream client application can use ID key LCRs in the following ways:</p>
<ul>
<li>
<p>If the application does not require the data in the unsupported columns, then the application can process the values of the supported columns in the ID key LCRs normally.</p>
</li>
<li>
<p>If the application requires the data in the unsupported columns, then the application can use the information in an ID key LCR to query the correct row in the database and consume the unsupported data for the row.</p>
</li>
</ul>
<div id="XSTRM72639" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref47"></a>
<h4 class="sect3">ID Key LCRs Demo<a id="sthref48"></a><a id="sthref49"></a></h4>
<p>A demo is available that creates a sample client application that process ID key LCRs. Specifically, the client application attaches to an XStream outbound server and waits for LCRs from the outbound server. When the client application receives an ID key LCR, it can query the appropriate source database table using the rowid in the ID key&nbsp;LCR.</p>
<p>The demo is available in the following location in both OCI and Java code:</p>
<pre>
$ORACLE_HOME/rdbms/demo/xstream/idkey
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABGDACA"></a>
<div id="XSTRM72583" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Sequence LCRs<a id="sthref50"></a><a id="sthref51"></a><a id="sthref52"></a></h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This functionality is available starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2).</div>
<p>A <span class="bold">sequence LCR</span> is a row LCR that includes information about sequence values. Sequence database objects generate sequence values.</p>
<p>You can stream sequence LCRs in the following ways:</p>
<ul>
<li>
<p>To capture sequence LCRs using a capture process, set the capture process parameter <code>capture_sequence_nextval</code> to <code>Y</code>.</p>
</li>
<li>
<p>To construct sequence LCRs using the OCI interface, use the <code>OCILCRNew</code> function and the <code>OCILCRHeaderSet</code> function with the <code>OCI_ROWLCR_SEQ_LCR</code> flag.</p>
</li>
<li>
<p>To construct sequence LCRs using the Java interface, use the <code>DefaultRowLCR</code> constructor and <code>setSequenceLCRFlag</code> method.</p>
</li>
</ul>
<p>An apply process or XStream inbound server can use sequence LCRs to ensure that the sequence values at a destination database use the appropriate values. For increasing sequences, the sequence values at the destination are equal to or greater than the sequence values at the source database. For decreasing sequences, the sequence values at the destination are less than or equal to the sequence values at the source database. To instruct an apply process or XStream inbound server to use sequence LCRs, set the <code>apply_sequence_nextval</code> apply process parameter to&nbsp;<code>Y</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Sequence LCRs are intended for one-way replication configurations. Sequence LCRs cannot be used in bi-directional replication configurations.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS306" href="../../appdev.112/e40758/d_cap_a.htm#ARPLS306"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code>capture_sequence_nextval</code> capture process parameter</p>
</li>
<li>
<p><a class="olink STRMS630" href="../../server.112/e17069/strms_mcap.htm#STRMS630"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information about setting a capture process parameter</p>
</li>
<li>
<p><a href="xstrm_oci.htm#CIHEDDAB">Chapter 11, "OCI XStream Functions"</a> for more information about the OCI interface</p>
</li>
<li>
<p><a class="olink STXJV" href="../../appdev.112/e16674/toc.htm"><span class="italic">Oracle Database XStream Java API Reference</span></a> for more information about the Java interface</p>
</li>
<li>
<p><a class="olink ADMIN11792" href="../../server.112/e25494/views.htm#ADMIN11792"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about sequences</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BCEIJJDF"></a>
<div id="XSTRM1632" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Considerations for XStream Outbound Servers</h3>
<p>The following are considerations for XStream outbound servers:</p>
<ul>
<li>
<p>LCRs processed by an outbound server must be LCRs that were captured by a capture process. An outbound server does not support LCRs that were captured by synchronous captures or LCRs that were constructed by applications.</p>
</li>
<li>
<p>A single outbound server can process captured LCRs from only one source database. The source database is the database where the changes encapsulated in the LCRs were generated in the redo log.</p>
</li>
<li>
<p>The source database for the changes captured by a capture process must be at 10.2.0 or higher compatibility level for these changes to be processed by an outbound server.</p>
</li>
<li>
<p>The capture process for an outbound server must be running on an Oracle Database 11<span class="italic">g</span> Release&nbsp;2 (11.2) or later database.</p>
</li>
<li>
<p>A single capture process cannot capture changes for both an outbound server and an apply process. However, a single capture process can capture changes for multiple outbound servers.</p>
</li>
<li>
<p>An outbound server appears as an Oracle Streams apply process in Oracle Enterprise Manager.</p>
</li>
<li>
<p><a id="sthref53"></a>Automatic split and merge of a stream is possible when the capture process and the outbound server for the stream run on different database instances. However, when the capture process and outbound server for a stream run on the same database instance, automatic split and merge of the stream is not possible. See <a class="olink STREP593" href="../../server.112/e10705/man_gen_rep.htm#STREP593"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a> for information about automatic split and merge.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIHECIBF"></a>
<div id="XSTRM72455" class="sect2">
<h3 class="sect2">XStream Out and Distributed Transactions<a id="sthref54"></a><a id="sthref55"></a><a id="sthref56"></a></h3>
<p>You can perform distributed transactions using either of the following methods:</p>
<ul>
<li>
<p>Modify tables in multiple databases in a coordinated manner using database links.</p>
</li>
<li>
<p>Use the XA interface, as exposed by the <code>DBMS_XA</code> supplied PL/SQL package or by the OCI or JDBC libraries. The XA interface implements X/Open Distributed Transaction Processing (DTP) architecture.</p>
</li>
</ul>
<p>In an XStream Out configuration, changes made to the source database during a distributed transaction using either of the preceding methods are streamed to an XStream outbound server. The outbound server sends the changes in a transaction to the XStream client application after the transaction has committed.</p>
<p>However, the distributed transaction state is not replicated or sent. The client application does not inherit the in-doubt or prepared state of such a transaction. Also, XStream does not replicate or send the changes using the same global transaction identifier used at the source database for XA transactions.</p>
<p>XA transactions can be performed in two ways:</p>
<ul>
<li>
<p>Tightly coupled, where different XA branches share locks</p>
</li>
<li>
<p>Loosely coupled, where different XA branches do not share locks</p>
</li>
</ul>
<p>XStream supports replication of changes made by loosely coupled XA branches regardless of the <code>COMPATIBLE</code> initialization parameter value. XStream supports replication of changes made by tightly coupled branches on an Oracle RAC source database only if the <code>COMPATIBLE</code> initialization parameter is set to <code>11.2.0</code> or higher.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADMIN12113" href="../../server.112/e25494/ds_concepts.htm#ADMIN12113"><span class="italic">Oracle Database Administrator's Guide</span></a> for more information about distributed transactions</p>
</li>
<li>
<p><a class="olink ADFNS017" href="../../appdev.112/e41502/adfns_xa.htm#ADFNS017"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for more information about Oracle XA</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BCECJHDF"></a>
<div id="XSTRM1099" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">XStream In<a id="sthref57"></a><a id="sthref58"></a><a id="sthref59"></a></h2>
<p>XStream In enables a remote client application to send information into an Oracle database from another system, such as a non-Oracle database or a file system. XStream In provides an efficient, transaction-based interface for sending information to an Oracle database from client applications. XStream In can consume the information coming into the Oracle database in several ways, including data replication, auditing, and change data capture. XStream In supports both OCI and Java interfaces.</p>
<p>When compared with OCI client applications that make DML changes to an Oracle database directly, XStream In is more efficient for near real-time, transaction-based, heterogeneous DML changes to Oracle databases.</p>
<p>XStream In uses the following features of Oracle Streams:</p>
<ul>
<li>
<p>High performance processing of DML changes using an apply process and, optionally, apply process parallelism</p>
</li>
<li>
<p><a id="sthref60"></a><a id="sthref61"></a>Apply process features such as SQL generation, conflict detection and resolution, error handling, and customized processing with apply handlers</p>
</li>
<li>
<p>Streaming network transmission of information with minimal network round-trips</p>
</li>
<li>
<p><a id="sthref62"></a><a id="sthref63"></a>Rules, rule sets, and rule-based transformations</p>
<p>When a custom rule-based transformation is specified on a rule used by an inbound server, the user who calls the transformation function is the apply user for the inbound server.</p>
</li>
</ul>
<p>XStream In supports all of the data types that are supported by Oracle Streams, including LOBs, <code>LONG</code>, <code>LONG</code> <code>RAW</code>, and <code>XMLType</code>. A client application sends LOB and <code>XMLType</code> data to the inbound server in chunks. Several chunks comprise a single column value of LOB, <code>LONG</code>, <code>LONG</code> <code>RAW</code>, or <code>XMLType</code> data type.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#BCEHGHFJ">The Inbound Server</a></p>
</li>
<li>
<p><a href="#BCEBDAHD">Considerations for XStream Inbound Servers</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xstrm_pt_oci.htm#CIAFHDJF">Part IV, "XStream OCI API Reference"</a></p>
</li>
<li>
<p><a class="olink STXJV" href="../../appdev.112/e16674/toc.htm"><span class="italic">Oracle Database XStream Java API Reference</span></a></p>
</li>
<li>
<p><a class="olink STRMS104" href="../../server.112/e17069/strms_apply.htm#STRMS104"><span class="italic">Oracle Streams Concepts and Administration</span></a></p>
</li>
</ul>
</div>
<a id="BCEHGHFJ"></a>
<div id="XSTRM1100" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">The Inbound Server<a id="sthref64"></a><a id="sthref65"></a><a id="sthref66"></a></h3>
<p>With XStream In, an Oracle Streams apply process functions as an inbound server. An <span class="bold">inbound server</span> is an optional Oracle background process that receives LCRs from a client application. Specifically, a client application can attach to an inbound server and send row changes and DDL changes encapsulated in LCRs.</p>
<p>An external client application connects to the inbound server using the OCI or the Java interface. After the connection is established, the client application acts as the capture agent for the inbound server by streaming LCRs to it.</p>
<p>A client application can create multiple sessions. Each session can attach to only one inbound server, and each inbound server can serve only one session at a time. However, different client application sessions can connect to different inbound servers or outbound servers. A client application can detach from the inbound server whenever necessary.</p>
<p><a href="#BCEFBCGA">Figure 2-3</a> shows an inbound server configuration.</p>
<div id="XSTRM1425" class="figure">
<p class="titleinfigure"><a id="BCEFBCGA"></a>Figure 2-3 XStream In Inbound Server</p>
<img width="606" height="246" src="img/xstrm064.gif" alt="Description of Figure 2-3 follows" /><br />
<a id="sthref67" href="img_text/xstrm064.htm">Description of "Figure 2-3 XStream In Inbound Server"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
An inbound server uses a queue that is not shown in <a href="#BCEFBCGA">Figure 2-3</a>. An inbound server's queue is only used to store error transactions.</div>
</div>
<!-- class="sect2" -->
<a id="BCEBDAHD"></a>
<div id="XSTRM1633" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Considerations for XStream Inbound Servers</h3>
<p>The following are considerations for XStream inbound servers:</p>
<ul>
<li>
<p><a id="sthref68"></a><a id="sthref69"></a><a id="sthref70"></a>You can control a DML or DDL trigger's firing property using the <code>SET_TRIGGER_FIRING_PROPERTY</code> procedure in the <code>DBMS_DDL</code> package. This procedure lets you specify whether a trigger always fires, fires once, or fires for apply process changes only. When a trigger is set to fire once, it fires for changes made by a user process, but it does not fire for changes made by an apply process or inbound server. A trigger's firing property works the same for apply processes and inbound servers. See <a class="olink STRMS215" href="../../server.112/e17069/strms_adapply.htm#STRMS215"><span class="italic">Oracle Streams Concepts and Administration</span></a>.</p>
</li>
<li>
<p>An inbound server ignores the setting for the <code>ignore_transaction</code> apply process parameter because LCRs sent to the inbound server by the client application might not have transaction ID values.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2), the <code>ignore_transaction</code> parameter is available for outbound servers and apply processes.</div>
</li>
<li>
<p>An inbound server ignores the setting for the <code>maximum_scn</code> apply process parameter because LCRs sent to the inbound server by the client application might not have SCN values.</p>
</li>
<li>
<p>Currently, an inbound server appears as an Oracle Streams apply process in Oracle Enterprise Manager.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS314" href="../../appdev.112/e40758/d_apply.htm#ARPLS314"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about apply process parameters</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BCEDDAJG"></a>
<div id="XSTRM1101" class="sect1">
<h2 class="sect1">Position Order in an LCR Stream<a id="sthref71"></a><a id="sthref72"></a></h2>
<p>The following sections describe the position order in an LCR stream for both XStream Out and XStream In:</p>
<ul>
<li>
<p><a href="#BCEJFFEF">About Position Order</a></p>
</li>
<li>
<p><a href="#BCEJHEJE">Position of LCRs and XStream Out</a></p>
</li>
<li>
<p><a href="#BCEBFIIA">Position of LCRs and XStream In</a></p>
</li>
<li>
<p><a href="#BCEFBBJI">Summary of Position Use in XStream Out and XStream In</a></p>
</li>
</ul>
<a id="BCEJFFEF"></a>
<div id="XSTRM1652" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Position Order</h3>
<p>Both XStream Out and XStream In use LCR streams to share transactions. XStream Out sends LCR streams to a client application. XStream In receives LCR streams from a client application.</p>
<p>Each LCR has a position attribute. The <span class="bold">position</span> of an LCR identifies its placement in the stream of LCRs in a transaction. Each LCR position has the following properties:</p>
<ul>
<li>
<p>The position is unique for each LCR.</p>
</li>
<li>
<p>The position is of <code>RAW</code> data type.</p>
</li>
<li>
<p>The position is strictly increasing within the LCR stream, within a transaction, and across transactions.</p>
</li>
<li>
<p>The position is byte-comparable, and the comparison results for multiple positions determines the ordering of the LCRs in the stream.</p>
</li>
<li>
<p>The position of an LCR remains identical when the database, the client application, or an XStream component restarts.</p>
</li>
<li>
<p>The position is not affected by any rule changes that might reduce or increase the number of LCRs in the stream.</p>
</li>
</ul>
<p>XStream Out only sends committed data, and XStream In only receives committed data.</p>
<p>The following are the properties related to an LCR stream:</p>
<ul>
<li>
<p>An LCR stream must be repeatable.</p>
</li>
<li>
<p>An LCR stream must contain a list of assembled, committed transactions. LCRs from one transaction are contiguous. There is no interleaving of transactions in an LCR stream.</p>
</li>
<li>
<p>Each transaction within an LCR stream must have an ordered list of LCRs and a transaction ID.</p>
</li>
<li>
<p>The last LCR in each transaction must be a commit LCR.</p>
</li>
<li>
<p>Each LCR must have a unique position.</p>
</li>
<li>
<p>The position of all LCRs within a single transaction and across transactions must be strictly increasing.</p>
</li>
</ul>
<p>An LCR stream can batch LCRs from multiple transactions and arrange them in increasing position order. LCRs from one transaction are contiguous, and the position must be increasing in the transaction. Also, the position must be nonzero for all LCRs.</p>
</div>
<!-- class="sect2" -->
<a id="BCEJHEJE"></a>
<div id="XSTRM1089" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Position of LCRs and XStream Out<a id="sthref73"></a><a id="sthref74"></a></h3>
<p>An XStream Out outbound server streams LCRs that were captured by a capture process to a client application. This section describes concepts related to the LCR positions for an outbound server.</p>
<div id="XSTRM72456" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref75"></a>
<h4 class="sect3">Additional LCR Attributes Related to Position<a id="sthref76"></a><a id="sthref77"></a><a id="sthref78"></a><a id="sthref79"></a></h4>
<p>LCRs that were captured by a capture process contain the following additional attributes related to LCR position:</p>
<ul>
<li>
<p>The <code>scn_from_position</code> attribute contains the SCN of the LCR.</p>
</li>
<li>
<p>The <code>commit_scn_from_position</code> attribute contains the commit SCN of the transaction to which the LCR belongs.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>scn_from_position</code> and <code>commit_scn_from_position</code> attributes are not present in row LCRs captured by a synchronous capture nor in explicitly captured row LCRs.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS307" href="../../appdev.112/e40758/t_lcr.htm#ARPLS307"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></div>
</div>
<!-- class="sect3" -->
<a id="BCEHDIDB"></a>
<div id="XSTRM1090" class="sect3">
<h4 class="sect3">The Processed Low Position and Restartability for XStream Out<a id="sthref80"></a><a id="sthref81"></a><a id="sthref82"></a><a id="sthref83"></a></h4>
<p>If the outbound server or the client application stops abnormally, then the connection between the two is broken automatically. In this case, the client application must roll back all incomplete transactions.</p>
<p>The <span class="bold">processed low position</span> is a position below which all transactions have been processed by the client application. The client application must maintain its processed low position to recover properly after either it or the outbound server (or both) are restarted. The processed low position indicates that the client application has processed all LCRs that are less than or equal to this value. The client application can update the processed low position for each transaction that it consumes.</p>
<p>When the client application attaches to the outbound server, the following conditions related to the processed low position are possible:</p>
<ul>
<li>
<p>The client application can pass a processed low position to the outbound server that is equal to or greater than the outbound server's processed low position. In this case, the outbound server resumes streaming LCRs from the first LCR that has a position greater than the client application's processed low position.</p>
</li>
<li>
<p>The client application can pass a processed low position to the outbound server that is less than the outbound server's processed low position. In this case, the outbound server raises an error.</p>
</li>
<li>
<p>The client application can pass <code>NULL</code> to the outbound server. In this case, the outbound server determines the processed low position automatically and starts streaming LCRs from the LCR that has a position greater than this processed low position. When this happens, the client application must suppress or discard each LCR with a position less than or equal to the client application's processed low position.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xstrm_mon.htm#CHDJHEGH">"Displaying the Processed Low Position for an Outbound Server"</a></div>
</div>
<!-- class="sect3" -->
<a id="BCEHCDCA"></a>
<div id="XSTRM1091" class="sect3">
<h4 class="sect3">Streaming Network Transmission<a id="sthref84"></a><a id="sthref85"></a></h4>
<p>To minimize network latency, the outbound server streams LCRs to the client application with time-based acknowledgments. For example, the outbound server might send an acknowledgment every 30 seconds. This streaming protocol fully utilizes the available network bandwidth, and the performance is unaffected by the presence of a wide area network (WAN) separating the sender and the receiver. The outbound server extends the underlying Oracle Streams infrastructure, and the outbound server maintains the streaming performance rate.</p>
<p>Using OCI, you can control the time period of the interval by setting the <code>OCI_ATTR_XSTREAM_ACK_INTERVAL</code> attribute through the OCI client application. The default is 30 seconds.</p>
<p>Using Java, you can control the time period of the interval by setting the <code>batchInterval</code> parameter in the <code>attach</code> method in the <code>XStreamOut</code> class. The client application can specify this interval when it invokes the <code>attach</code> method.</p>
<p>If the interval is large, then the outbound server can stream out more LCRs for each acknowledgment interval. However, a longer interval delays how often the client application can send the processed low position to the outbound server. Therefore, a longer interval might mean that the processed low position maintained by the outbound server is not current. In this case, when the outbound server restarts, it must start processing LCRs at an earlier position than the one that corresponds to the processed low position maintained by the client application. Therefore, more LCRs might be retransmitted, and the client application must discard the ones that have been applied.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BCEBFIIA"></a>
<div id="XSTRM1102" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Position of LCRs and XStream In<a id="sthref86"></a><a id="sthref87"></a><a id="sthref88"></a><a id="sthref89"></a><a id="sthref90"></a><a id="sthref91"></a><a id="sthref92"></a><a id="sthref93"></a><a id="sthref94"></a><a id="sthref95"></a><a id="sthref96"></a><a id="sthref97"></a><a id="sthref98"></a><a id="sthref99"></a><a id="sthref100"></a></h3>
<p>A client application streams LCRs to an XStream In inbound server. This section describes concepts related to the LCR positions for an inbound server.</p>
<p>Each position must be encoded in a format (such as base-16 encoding) that supports byte comparison. The position is essential to the total order of the transaction stream sent by client applications using the XStream In interface.</p>
<p>The following positions are important for inbound servers:</p>
<ul>
<li>
<p>The <span class="bold">applied low position</span> indicates that the LCRs less than or equal to this value have been applied.</p>
<p>An LCR is applied by an inbound server when the LCR has either been executed, sent to an apply handler, or moved to the error queue.</p>
</li>
<li>
<p>The <span class="bold">spill position</span> indicates that the LCRs with positions less than or equal to this value have either been applied or spilled from memory to hard disk.</p>
</li>
<li>
<p>The <span class="bold">applied high position</span> indicates the highest position of an LCR that has been applied.</p>
<p>When the <code>commit_serialization</code> apply process parameter is set to <code>DEPENDENT_TRANSACTIONS</code> for an inbound server, an LCR with a higher commit position might be applied before an LCR with a lower commit position. When this happens, the applied high position is different from the applied low position.</p>
</li>
<li>
<p>The processed low position is the higher value of either the applied low position or the spill position.</p>
<p>The processed low position is the position below which the inbound server no longer requires any LCRs. This position corresponds with the oldest SCN for an Oracle Streams apply process that applies changes captured by a capture process.</p>
<p>The processed low position indicates that the LCRs with positions less than or equal to this position have been processed by the inbound server. If the client re-attaches to the inbound server, then it must send only LCRs with positions greater than the processed low position because the inbound server discards any LCRs with positions less than or equal to the processed low position.</p>
</li>
</ul>
<p>If the client application stops abnormally, then the connection between the client application and the inbound server is automatically broken. Upon restart, the client application retrieves the processed low position from the inbound server and instructs its capture agent to retrieve changes starting from this processed low position.</p>
<p>To limit the recovery time of a client application using the XStream In interface, the client application can send activity, such as empty transactions, periodically to the inbound server. Row LCRs can include commit transaction control directives. When there are no LCRs to send to the server, the client application can send a row LCR with a commit directive to advance the inbound server's processed low position. This activity acts as an acknowledgment so that the inbound server's processed low position is advanced.</p>
<div id="XSTRM1487" class="example">
<p class="titleinexample"><a id="sthref101"></a>Example 2-1 Advancing the Processed Low Position of an Inbound Server</p>
<p>Consider a client application and an external data source. The client application sends changes made to the <code>hr.employees</code> table to the inbound server for processing, but the external data source includes many other tables, including the <code>oe.orders</code> table.</p>
<p>Assume that the following changes are made to the external data source:</p>
<div class="inftblhruleinformal">
<table class="cellalignment1351" summary="This table illustrates several changes to the external data source and the position for each change." dir="ltr">
<thead>
<tr class="cellalignment1342">
<th class="cellalignment1352" id="r1c1-t20">Position</th>
<th class="cellalignment1352" id="r1c2-t20">Change</th>
<th class="cellalignment1352" id="r1c3-t20">Client Application Activity</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r2c1-t20" headers="r1c1-t20">1</td>
<td class="cellalignment1348" headers="r2c1-t20 r1c2-t20">Insert into the <code>hr.employees</code> table</td>
<td class="cellalignment1348" headers="r2c1-t20 r1c3-t20">Send row LCR including the change to the inbound server</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r3c1-t20" headers="r1c1-t20">2</td>
<td class="cellalignment1348" headers="r3c1-t20 r1c2-t20">Insert into the <code>oe.orders</code> table</td>
<td class="cellalignment1348" headers="r3c1-t20 r1c3-t20">None</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r4c1-t20" headers="r1c1-t20">3</td>
<td class="cellalignment1348" headers="r4c1-t20 r1c2-t20">Commit</td>
<td class="cellalignment1348" headers="r4c1-t20 r1c3-t20">Send a row LCR with a commit directive to inbound server</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r5c1-t20" headers="r1c1-t20">4</td>
<td class="cellalignment1348" headers="r5c1-t20 r1c2-t20">Insert into the <code>oe.orders</code> table</td>
<td class="cellalignment1348" headers="r5c1-t20 r1c3-t20">None</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r6c1-t20" headers="r1c1-t20">5</td>
<td class="cellalignment1348" headers="r6c1-t20 r1c2-t20">Update the <code>oe.orders</code> table</td>
<td class="cellalignment1348" headers="r6c1-t20 r1c3-t20">None</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r7c1-t20" headers="r1c1-t20">6</td>
<td class="cellalignment1348" headers="r7c1-t20 r1c2-t20">Commit</td>
<td class="cellalignment1348" headers="r7c1-t20 r1c3-t20">None</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r8c1-t20" headers="r1c1-t20">7</td>
<td class="cellalignment1348" headers="r8c1-t20 r1c2-t20">Commit</td>
<td class="cellalignment1348" headers="r8c1-t20 r1c3-t20">None</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r9c1-t20" headers="r1c1-t20">...</td>
<td class="cellalignment1348" headers="r9c1-t20 r1c2-t20">... (Activity on the external data source, but no changes to the <code>hr.employees</code> table)</td>
<td class="cellalignment1348" headers="r9c1-t20 r1c3-t20">None</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r10c1-t20" headers="r1c1-t20">100</td>
<td class="cellalignment1348" headers="r10c1-t20 r1c2-t20">Insert into the <code>oe.orders</code> table</td>
<td class="cellalignment1348" headers="r10c1-t20 r1c3-t20">None</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r11c1-t20" headers="r1c1-t20">101</td>
<td class="cellalignment1348" headers="r11c1-t20 r1c2-t20">Commit</td>
<td class="cellalignment1348" headers="r11c1-t20 r1c3-t20">None</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblhruleinformal" -->
<p>The client application gets the changes from the external data source, generates appropriate LCRs, and sends the LCRs to the inbound server. Therefore, the inbound server receives the following LCRs:</p>
<ul>
<li>
<p>Row LCR for position 1</p>
</li>
<li>
<p>Row LCR for position 3</p>
</li>
</ul>
</div>
<!-- class="example" -->
<p>After position 3, there are no relevant changes to send to the inbound server. If the inbound server restarts when the client application has processed all the changes up to position 101, then, after restarting, the client application must recheck all of the external database changes from position 4 forward. The rechecks are required because the inbound server's processed low position is 3.</p>
<p>Instead, assume that the client application sends commits to the inbound server periodically, even when there are no relevant changes to the <code>hr.employees</code> table:</p>
<div class="inftblhruleinformal">
<table class="cellalignment1351" summary="This table illustrates several changes to the external data source and the position for each change." dir="ltr">
<thead>
<tr class="cellalignment1342">
<th class="cellalignment1352" id="r1c1-t21">Position</th>
<th class="cellalignment1352" id="r1c2-t21">Change</th>
<th class="cellalignment1352" id="r1c3-t21">Client Application Activity</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r2c1-t21" headers="r1c1-t21">1</td>
<td class="cellalignment1348" headers="r2c1-t21 r1c2-t21">Insert into the <code>hr.employees</code> table</td>
<td class="cellalignment1348" headers="r2c1-t21 r1c3-t21">Send row LCR including the change to the inbound server</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r3c1-t21" headers="r1c1-t21">2</td>
<td class="cellalignment1348" headers="r3c1-t21 r1c2-t21">Insert into the <code>oe.orders</code> table</td>
<td class="cellalignment1348" headers="r3c1-t21 r1c3-t21">None</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r4c1-t21" headers="r1c1-t21">3</td>
<td class="cellalignment1348" headers="r4c1-t21 r1c2-t21">Commit</td>
<td class="cellalignment1348" headers="r4c1-t21 r1c3-t21">Send a row LCR with a commit directive to inbound server</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r5c1-t21" headers="r1c1-t21">4</td>
<td class="cellalignment1348" headers="r5c1-t21 r1c2-t21">Insert into the <code>oe.orders</code> table</td>
<td class="cellalignment1348" headers="r5c1-t21 r1c3-t21">None</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r6c1-t21" headers="r1c1-t21">5</td>
<td class="cellalignment1348" headers="r6c1-t21 r1c2-t21">Update the <code>oe.orders</code> table</td>
<td class="cellalignment1348" headers="r6c1-t21 r1c3-t21">None</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r7c1-t21" headers="r1c1-t21">6</td>
<td class="cellalignment1348" headers="r7c1-t21 r1c2-t21">Commit</td>
<td class="cellalignment1348" headers="r7c1-t21 r1c3-t21">None</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r8c1-t21" headers="r1c1-t21">7</td>
<td class="cellalignment1348" headers="r8c1-t21 r1c2-t21">Commit</td>
<td class="cellalignment1348" headers="r8c1-t21 r1c3-t21">None</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r9c1-t21" headers="r1c1-t21">...</td>
<td class="cellalignment1348" headers="r9c1-t21 r1c2-t21">... (Activity on the external data source, but no changes to the <code>hr.employees</code> table)</td>
<td class="cellalignment1348" headers="r9c1-t21 r1c3-t21">Send several row LCRs, each one with a commit directive, to the inbound server</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r10c1-t21" headers="r1c1-t21">100</td>
<td class="cellalignment1348" headers="r10c1-t21 r1c2-t21">Insert into the <code>oe.orders</code> table</td>
<td class="cellalignment1348" headers="r10c1-t21 r1c3-t21">None</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r11c1-t21" headers="r1c1-t21">101</td>
<td class="cellalignment1348" headers="r11c1-t21 r1c2-t21">Commit</td>
<td class="cellalignment1348" headers="r11c1-t21 r1c3-t21">Send a row LCR with a commit directive to the inbound server</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblhruleinformal" -->
<p>In this case, the inbound server moves its processed low position to 101 when it has processed all of the row LCRs sent by the client application. If the inbound server restarts, its processed low position is 101, and the client application does not need to check all of the changes back to position 3.</p>
<p>The sample applications in <a href="xstrm_config.htm#CBDFEAJF">"Sample XStream Client Application"</a> include code that sends a row LCR with a commit directive to an inbound server. These commit directives are sometimes called "ping LCRs." Search for the word "ping" in the sample XStream client applications to find the parts of the applications that include this code.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xstrm_mon.htm#CHDBJBEB">"Displaying the Position Information for an Inbound Server"</a></div>
</div>
<!-- class="sect2" -->
<a id="BCEFBBJI"></a>
<div id="XSTRM1107" class="sect2">
<h3 class="sect2">Summary of Position Use in XStream Out and XStream In</h3>
<p><a href="#BCEJACGE">Table 2-1</a> compares how an XStream Out outbound server and an XStream In inbound server use positions.</p>
<div id="XSTRM1108" class="tblhruleformal">
<p class="titleintable"><a id="sthref102"></a><a id="BCEJACGE"></a>Table 2-1 Position Use in the Outbound Server and the Inbound Server</p>
<table class="cellalignment1351" title="Position Use in the Outbound Server and the Inbound Server" summary="This table compares how the XStream In inbound server and the XStream Out outbound server uses LCR IDs." dir="ltr">
<thead>
<tr class="cellalignment1342">
<th class="cellalignment1352" id="r1c1-t23">XStream Out Outbound Server</th>
<th class="cellalignment1352" id="r1c2-t23">XStream In Inbound Server</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r2c1-t23" headers="r1c1-t23">
<p>The outbound server exposes the position.</p>
</td>
<td class="cellalignment1348" headers="r2c1-t23 r1c2-t23">
<p>The client application sets the position.</p>
</td>
</tr>
<tr class="cellalignment1342">
<td class="cellalignment1348" id="r3c1-t23" headers="r1c1-t23">
<p>If the outbound server or client application stops abnormally, then all LCRs above the processed low position are resent. The processed low position is equivalent to an apply process low watermark (LWM), and the apply process obtains the oldest SCN value by using this value.</p>
</td>
<td class="cellalignment1348" headers="r3c1-t23 r1c2-t23">
<p>If the inbound server or client application stops abnormally, then the client application must retransmit all LCRs with a position greater than or equal to the processed low position. The processed low position is equivalent to the apply process low water mark (LWM).</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHBCCJE"></a>
<div id="XSTRM72457" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">XStream and SQL Generation<a id="sthref103"></a><a id="sthref104"></a></h2>
<p><span class="bold">SQL generation</span> is the ability to generate the SQL statement required to perform the change encapsulated in a row LCR. Apply processes, XStream outbound servers, and XStream inbound servers can use SQL generation to generate the SQL statement necessary to perform the insert, update, or delete operation in a row LCR.</p>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#CIHEJGHD">Interfaces for Performing SQL Generation</a></p>
</li>
<li>
<p><a href="#CIHFGGCB">SQL Generation Formats</a></p>
</li>
<li>
<p><a href="#CIHECFAH">Data Types and Character Sets</a></p>
</li>
<li>
<p><a href="#CIHEJGHD">Interfaces for Performing SQL Generation</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STRMS1092" href="../../server.112/e17069/strms_apply.htm#STRMS1092"><span class="italic">Oracle Streams Concepts and Administration</span></a></div>
<a id="CIHEJGHD"></a>
<div id="XSTRM72458" class="sect2">
<h3 class="sect2">Interfaces for Performing SQL Generation<a id="sthref105"></a></h3>
<p>You can use the following interfaces to perform SQL generation:</p>
<ul>
<li>
<p>The PL/SQL interface, which uses the <code>GET_ROW_TEXT</code> and <code>GET_WHERE_CLAUSE</code> member procedures for row LCRs</p>
</li>
<li>
<p>The OCI for XStream</p>
</li>
<li>
<p>The Java interface for XStream</p>
</li>
</ul>
<p>The PL/SQL interface generates SQL in a <code>CLOB</code> data type, while the OCI and Java interfaces generate SQL in plain text. In the Java interface, the size of the text is limited by the size of <code>String</code> data type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS368" href="../../appdev.112/e40758/t_lcr.htm#ARPLS368"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code>GET_ROW_TEXT</code> and <code>GET_WHERE_CLAUSE</code> row LCR member procedures</p>
</li>
<li>
<p><a href="xstrm_pt_oci.htm#CIAFHDJF">Part IV, "XStream OCI API Reference"</a></p>
</li>
<li>
<p><a class="olink STXJV" href="../../appdev.112/e16674/toc.htm"><span class="italic">Oracle Database XStream Java API Reference</span></a> for information about the Java interface for XStream</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CIHFGGCB"></a>
<div id="XSTRM72459" class="sect2">
<h3 class="sect2">SQL Generation Formats<a id="sthref106"></a></h3>
<p>SQL statements can be generated in one of two formats: inline values or bind variables. Use inline values when the returned SQL statement is relatively small. For larger SQL statements, use bind variables. In this case, the bind variables are passed to the client application in a separate list that includes pointers to both old and new column values.</p>
<p>For information about using bind variables with each interface, refer to the following documentation:</p>
<ul>
<li>
<p>The documentation for the <code>GET_ROW_TEXT</code> and <code>GET_WHERE_CLAUSE</code> row LCR member procedures in <a class="olink ARPLS368" href="../../appdev.112/e40758/t_lcr.htm#ARPLS368"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
</li>
<li>
<p><a href="xstrm_oci.htm#CIHIEDDJ">"OCILCRRowStmtWithBindVarGet()"</a></p>
</li>
<li>
<p>The documentation for <code>DefaultRowLCR.getBinds()</code> in <a class="olink STXJV" href="../../appdev.112/e16674/toc.htm"><span class="italic">Oracle Database XStream Java API Reference</span></a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
For generated SQL statements with the values inline, SQL injection is possible. SQL injection is a technique for maliciously exploiting applications that use client-supplied data in SQL statements, thereby gaining unauthorized access to a database to view or manipulate restricted data. Oracle strongly recommends using bind variables if you plan to execute the generated SQL statement. See <a class="olink LNPLS01109" href="../../appdev.112/e25519/dynamic.htm#LNPLS01109"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about SQL injection.</div>
</div>
<!-- class="sect2" -->
<a id="CIHECFAH"></a>
<div id="XSTRM72460" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Data Types and Character Sets<a id="sthref107"></a><a id="sthref108"></a><a id="sthref109"></a><a id="sthref110"></a></h3>
<p>Regarding data types and character sets, SQL generation works the same way for XStream Out outbound servers, XStream In inbound servers, and apply processes. For detailed information, see <a class="olink STRMS1092" href="../../server.112/e17069/strms_apply.htm#STRMS1092"><span class="italic">Oracle Streams Concepts and Administration</span></a>.</p>
</div>
<!-- class="sect2" -->
<div id="XSTRM72461" class="sect2"><a id="sthref111"></a>
<h3 class="sect2">SQL Generation Demo<a id="sthref112"></a><a id="sthref113"></a></h3>
<p>A demo that performs SQL generation is available. The demo uses the <code>DBMS_XSTREAM_ADM</code> PL/SQL package to configure an XStream Out environment, and it uses an OCI client application to perform SQL generation.</p>
<p>The demo uses SQL generation to replicate DML changes from a source database to a destination database. Specifically, the demo creates the <code>xsdemosg</code> schema in both the source database and the destination database. It creates various types of tables in the <code>xsdemosg</code> schema at each database, including tables with LOB columns. It executes a set of DML statements on the tables in <code>xsdemosg</code> schema in the source database. Oracle Streams components, such as a capture process and a queue, send the changes in the form of LCRs to an XStream outbound server that is also running on the source database. The outbound server makes the LCRs available to the demo client application.</p>
<p>The demo client application, when run, uses the OCI API to connect to the outbound server and receive the LCRs. The demo client application uses SQL generation to execute the changes that are encapsulated in the LCRs. Therefore, the client application replicates the changes made to <code>xsdemosg</code> schema in the source database to the <code>xsdemosg</code> in the destination database.</p>
<p>You can modify the demo to replicate changes to any schema. Both the schema and the replicated tables must exist on both the source database and the destination database. SQL generation is only possible for DML changes. Therefore, this demo cannot be used to replicate DDL changes.</p>
<p>This demo is available in the following location:</p>
<pre>
$ORACLE_HOME/rdbms/demo/xstream/sqlgen
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The SQL generation demo is not available for the XStream Java API.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BCEBGHCJ"></a>
<div id="XSTRM1111" class="sect1">
<h2 class="sect1">XStream and Security<a id="sthref114"></a><a id="sthref115"></a><a id="sthref116"></a><a id="sthref117"></a></h2>
<p>XStream Out allows a user to receive LCRs. After an XStream Out user receives LCRs, the user might save the contents of LCRs to a file or generate the SQL statements to execute the LCRs on a non-Oracle database. XStream In allows a user to update tables in its own schema. XStream does not assume that the connected user to the outbound server or inbound server is trusted.</p>
<p>Java and OCI client applications must connect to an Oracle database before attaching to an XStream outbound server created on that database. The connected user must be the same as the connect user configured for the outbound server. Otherwise, an error is raised.</p>
<p>Java and OCI client applications must connect to an Oracle database before attaching to an XStream inbound server created on that database. The connected user must be the same as the apply user configured for the inbound server. Otherwise, an error is raised.</p>
<p>The XStream Java layer API relies on Oracle JDBC security because XStream accepts the Oracle JDBC connection instance created by client applications in the XStream <code>attach</code> API. The connected user is validated as an XStream user.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xstrm_xstream_adm.htm#CACCADJE">"Security Model"</a> for information about the security requirements for configuring and managing XStream</p>
</li>
<li>
<p><a href="xstrm_config.htm#CBDIJEFE">Chapter 4, "Configuring XStream"</a></p>
</li>
<li>
<p><a class="olink STRMS394" href="../../server.112/e17069/strms_apply.htm#STRMS394"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information about apply users</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="BABHJFBG"></a>
<div id="XSTRM1486" class="sect1">
<h2 class="sect1">Other Ways to Share Information in a Heterogeneous Environment</h2>
<p>Oracle Streams provides other ways to implement heterogeneous information sharing besides XStream, both in past releases and in the current release. These ways include:</p>
<ul>
<li>
<p>Replicating data changes to a non-Oracle database using an Oracle Database Gateway</p>
</li>
<li>
<p>Dequeuing messages from an Oracle database using a Java Message Service (JMS) client</p>
</li>
<li>
<p>Enqueuing messages directly into an Oracle database queue with a client application</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink STREP006" href="../../server.112/e10705/hetero.htm#STREP006"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a></p>
</li>
<li>
<p><a class="olink TDPII021" href="../../server.112/e17516/tdpii_distdbs.htm#TDPII021"><span class="italic">Oracle Database 2 Day + Data Replication and Integration Guide</span></a></p>
</li>
<li>
<p><a class="olink ADQUE1700" href="../../server.112/e11013/mg_intro.htm#ADQUE1700"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1341">
<tr>
<td class="cellalignment1348">
<table class="cellalignment1346">
<tr>
<td class="cellalignment1345"><a href="xstrm_intro.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1345"><a href="xstrm_use.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2009, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1350">
<table class="cellalignment1344">
<tr>
<td class="cellalignment1345"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1345"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1345"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1345"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1345"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1345"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
