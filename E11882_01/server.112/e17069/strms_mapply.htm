<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Managing Oracle Streams Information Consumption</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 732" />
<meta name="dcterms.created" content="2013-06-04T12:39:37Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Streams Concepts and Administration" />
<meta name="dcterms.identifier" content="E17069-08" />
<meta name="dcterms.isVersionOf" content="STRMS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="strms_glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="strms_mprop.htm" title="Previous" type="text/html" />
<link rel="Next" href="strms_mrules.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e17069.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">26/57</span> <!-- End Header -->
<div id="STRMS009" class="chapter"><a id="g1026098"></a><a id="CHDJFGEE"></a>
<h1 class="chapter"><span class="secnum">17</span> Managing Oracle Streams Information Consumption</h1>
<p><a id="sthref734"></a><a id="sthref735"></a><a id="sthref736"></a>An <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a> implicitly consumes information in an Oracle Streams environment. An apply process dequeues logical change records (LCRs) and <a href="strms_glossary.htm#CHDDIHEC"><span class="xrefglossterm">user message</span></a>s from a specific <a href="strms_glossary.htm#CHDIDCDI"><span class="xrefglossterm">queue</span></a> and either applies each one directly or passes it as a parameter to a user-defined procedure.</p>
<p>The following topics describe managing Oracle Streams apply processes:</p>
<ul>
<li>
<p><a href="#i1006365">Starting an Apply Process</a></p>
</li>
<li>
<p><a href="#i1006374">Stopping an Apply Process</a></p>
</li>
<li>
<p><a href="#i1006405">Managing the Rule Set for an Apply Process</a></p>
</li>
<li>
<p><a href="#i1006527">Setting an Apply Process Parameter</a></p>
</li>
<li>
<p><a href="#i1006571">Setting the Apply User for an Apply Process</a></p>
</li>
<li>
<p><a href="#BGBJHGHG">Managing a DML Handler</a></p>
</li>
<li>
<p><a href="#BGBJHHEI">Managing a DDL Handler</a></p>
</li>
<li>
<p><a href="#i1006583">Managing the Message Handler for an Apply Process</a></p>
</li>
<li>
<p><a href="#i1009583">Managing the Precommit Handler for an Apply Process</a></p>
</li>
<li>
<p><a href="#i1008466">Specifying That Apply Processes Enqueue Messages</a></p>
</li>
<li>
<p><a href="#i1008467">Specifying Execute Directives for Apply Processes</a></p>
</li>
<li>
<p><a href="#i1010565">Managing an Error Handler</a></p>
</li>
<li>
<p><a href="#i1010782">Managing Apply Errors</a></p>
</li>
<li>
<p><a href="#BGBGJICI">Managing the Substitute Key Columns for a Table</a></p>
</li>
<li>
<p><a href="#BGBBJHCB">Using Virtual Dependency Definitions</a></p>
</li>
<li>
<p><a href="#i1006383">Dropping an Apply Process</a></p>
</li>
</ul>
<p>Each task described in this chapter should be completed by an Oracle Streams administrator that has been granted the appropriate privileges, unless specified otherwise.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_apply.htm#g1018604">Chapter 4, "Oracle Streams Information Consumption"</a></p>
</li>
<li>
<p><a href="strms_apmon.htm#CFFGFJBB">"Monitoring Oracle Streams Apply Processes"</a></p>
</li>
<li>
<p><a href="strms_trapply.htm#BABHBJHA">Chapter 33, "Troubleshooting Apply"</a></p>
</li>
<li>
<p><a class="olink STREP200" href="../../server.112/e10705/prep_rep.htm#STREP200"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a> for information about creating an Oracle Streams administrator</p>
</li>
<li>
<p><a class="olink TDPII143" href="../../server.112/e17516/tdpii_adcont.htm#TDPII143"><span class="italic">Oracle Database 2 Day + Data Replication and Integration Guide</span></a> and the Enterprise Manager online Help for instructions on managing an apply process with Enterprise Manager</p>
</li>
</ul>
</div>
<a id="i1006365"></a>
<div id="STRMS216" class="sect1">
<h2 class="sect1">Starting an Apply Process<a id="sthref737"></a><a id="sthref738"></a></h2>
<p>You run the <code>START_APPLY</code> procedure in the <code>DBMS_APPLY_ADM</code> package to start an existing <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>. For example, the following procedure starts an apply process named <code>strm01_apply</code>:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.START_APPLY(
    apply_name =&gt; 'strm01_apply');
END;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink TDPII144" href="../../server.112/e17516/tdpii_adcont.htm#TDPII144"><span class="italic">Oracle Database 2 Day + Data Replication and Integration Guide</span></a> for instructions about starting an apply process with Oracle Enterprise Manager</div>
</div>
<!-- class="sect1" -->
<a id="i1006374"></a>
<div id="STRMS718" class="sect1">
<h2 class="sect1">Stopping an Apply Process<a id="sthref739"></a><a id="sthref740"></a></h2>
<p>You run the <code>STOP_APPLY</code> procedure in the <code>DBMS_APPLY_ADM</code> package to stop an existing <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>. For example, the following procedure stops an apply process named <code>strm01_apply</code>:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.STOP_APPLY(
    apply_name =&gt; 'strm01_apply');
END;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink TDPII144" href="../../server.112/e17516/tdpii_adcont.htm#TDPII144"><span class="italic">Oracle Database 2 Day + Data Replication and Integration Guide</span></a> for instructions about stopping an apply process with Oracle Enterprise Manager</div>
</div>
<!-- class="sect1" -->
<a id="i1006405"></a>
<div id="STRMS719" class="sect1">
<h2 class="sect1">Managing the Rule Set for an Apply Process</h2>
<p>This section contains instructions for completing the following tasks:</p>
<ul>
<li>
<p><a href="#i1006437">Specifying the Rule Set for an Apply Process</a></p>
</li>
<li>
<p><a href="#i1006447">Adding Rules to the Rule Set for an Apply Process</a></p>
</li>
<li>
<p><a href="#i1006492">Removing a Rule from the Rule Set for an Apply Process</a></p>
</li>
<li>
<p><a href="#i1006512">Removing a Rule Set for an Apply Process</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_rules.htm#g1049257">Chapter 5, "How Rules Are Used in Oracle Streams"</a></p>
</li>
<li>
<p><a href="strms_adrules.htm#BABEBHGC">Chapter 11, "Advanced Rule Concepts"</a></p>
</li>
</ul>
</div>
<a id="i1006437"></a>
<div id="STRMS720" class="sect2">
<h3 class="sect2">Specifying the Rule Set for an Apply Process<a id="sthref741"></a><a id="sthref742"></a></h3>
<p>You can specify one <a href="strms_glossary.htm#CHDEEDIJ"><span class="xrefglossterm">positive rule set</span></a> and one <a href="strms_glossary.htm#CHDBHJHI"><span class="xrefglossterm">negative rule set</span></a> for an <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>. The apply process applies a <a href="strms_glossary.htm#CHDFHHGJ"><span class="xrefglossterm">message</span></a> if it evaluates to <code>TRUE</code> for at least one <a href="strms_glossary.htm#CHDIFFCF"><span class="xrefglossterm">rule</span></a> in the positive rule set and discards a message if it evaluates to <code>TRUE</code> for at least one rule in the negative rule set. The negative rule set is evaluated before the positive rule set.</p>
<div id="STRMS721" class="sect3"><a id="sthref743"></a>
<h4 class="sect3">Specifying a Positive Rule Set for an Apply Process</h4>
<p>You specify an existing <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a> as the positive rule set for an existing apply process using the <code>rule_set_name</code> parameter in the <code>ALTER_APPLY</code> procedure. This procedure is in the <code>DBMS_APPLY_ADM</code> package.</p>
<p>For example, the following procedure sets the positive rule set for an apply process named <code>strm01_apply</code> to <code>strm02_rule_set</code>.</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.ALTER_APPLY(
    apply_name    =&gt; 'strm01_apply',
    rule_set_name =&gt; 'strmadmin.strm02_rule_set');
END;
/
</pre></div>
<!-- class="sect3" -->
<div id="STRMS722" class="sect3"><a id="sthref744"></a>
<h4 class="sect3">Specifying a Negative Rule Set for an Apply Process</h4>
<p>You specify an existing rule set as the negative rule set for an existing apply process using the <code>negative_rule_set_name</code> parameter in the <code>ALTER_APPLY</code> procedure. This procedure is in the <code>DBMS_APPLY_ADM</code> package.</p>
<p>For example, the following procedure sets the negative rule set for an apply process named <code>strm01_apply</code> to <code>strm03_rule_set</code>.</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.ALTER_APPLY(
    apply_name             =&gt; 'strm01_apply',
    negative_rule_set_name =&gt; 'strmadmin.strm03_rule_set');
END;
/
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006447"></a>
<div id="STRMS723" class="sect2">
<h3 class="sect2">Adding Rules to the Rule Set for an Apply Process<a id="sthref745"></a></h3>
<p>To add <a href="strms_glossary.htm#CHDIFFCF"><span class="xrefglossterm">rule</span></a>s to the <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a> for an <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>, you can run one of the following procedures:</p>
<ul>
<li>
<p><a class="olink ARPLS308" href="../../appdev.112/e40758/d_streams_adm.htm#ARPLS308"><code>DBMS_STREAMS_ADM.ADD_TABLE_RULES</code></a></p>
</li>
<li>
<p><a class="olink ARPLS329" href="../../appdev.112/e40758/d_streams_adm.htm#ARPLS329"><code>DBMS_STREAMS_ADM.ADD_SUBSET_RULES</code></a></p>
</li>
<li>
<p><a class="olink ARPLS309" href="../../appdev.112/e40758/d_streams_adm.htm#ARPLS309"><code>DBMS_STREAMS_ADM.ADD_SCHEMA_RULES</code></a></p>
</li>
<li>
<p><a class="olink ARPLS310" href="../../appdev.112/e40758/d_streams_adm.htm#ARPLS310"><code>DBMS_STREAMS_ADM.ADD_GLOBAL_RULES</code></a></p>
</li>
</ul>
<p>Excluding the <code>ADD_SUBSET_RULES</code> procedure, these procedures can add rules to the <a href="strms_glossary.htm#CHDEEDIJ"><span class="xrefglossterm">positive rule set</span></a> or <a href="strms_glossary.htm#CHDBHJHI"><span class="xrefglossterm">negative rule set</span></a> for an apply process. The <code>ADD_SUBSET_RULES</code> procedure can add rules only to the positive rule set for an apply process.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="strms_rules.htm#i1006169">"System-Created Rules"</a></div>
<div id="STRMS724" class="sect3"><a id="sthref746"></a>
<h4 class="sect3">Adding Rules to the Positive Rule Set for an Apply Process</h4>
<p>The following example runs the <code>ADD_TABLE_RULES</code> procedure in the <code>DBMS_STREAMS_ADM</code> package to add rules to the positive rule set of an apply process named <code>strm01_apply</code>:</p>
<pre>
BEGIN
  DBMS_STREAMS_ADM.ADD_TABLE_RULES(
    table_name       =&gt; 'hr.departments',
    streams_type     =&gt; 'apply',
    streams_name     =&gt; 'strm01_apply',
    queue_name       =&gt; 'streams_queue',
    include_dml      =&gt; TRUE,
    include_ddl      =&gt; TRUE,
    source_database  =&gt; 'dbs1.example.com',
    inclusion_rule   =&gt; TRUE);
END;
/
</pre>
<p>Running this procedure performs the following actions:</p>
<ul>
<li>
<p>Creates one rule that evaluates to <code>TRUE</code> for row LCRs that contain the results of DML changes to the <code>hr.departments</code> table. The rule name is system generated.</p>
</li>
<li>
<p>Creates one rule that evaluates to <code>TRUE</code> for DDL LCRs that contain DDL changes to the <code>hr.departments</code> table. The rule name is system generated.</p>
</li>
<li>
<p>Specifies that both rules evaluate to <code>TRUE</code> only for LCRs whose changes originated at the <code>dbs1.example.com</code> <a href="strms_glossary.htm#CHDHFBJG"><span class="xrefglossterm">source database</span></a>.</p>
</li>
<li>
<p>Adds the rules to the positive rule set associated with the apply process because the <code>inclusion_rule</code> parameter is set to <code>TRUE</code>.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="STRMS725" class="sect3"><a id="sthref747"></a>
<h4 class="sect3">Adding Rules to the Negative Rule Set for an Apply Process</h4>
<p>The following example runs the <code>ADD_TABLE_RULES</code> procedure in the <code>DBMS_STREAMS_ADM</code> package to add rules to the negative rule set of an apply process named <code>strm01_apply</code>:</p>
<pre>
BEGIN
  DBMS_STREAMS_ADM.ADD_TABLE_RULES(
    table_name       =&gt; 'hr.regions',
    streams_type     =&gt; 'apply',
    streams_name     =&gt; 'strm01_apply',
    queue_name       =&gt; 'streams_queue',
    include_dml      =&gt; TRUE,
    include_ddl      =&gt; TRUE,
    source_database  =&gt; 'dbs1.example.com',
    inclusion_rule   =&gt; FALSE);
END;
/
</pre>
<p>Running this procedure performs the following actions:</p>
<ul>
<li>
<p>Creates one rule that evaluates to <code>TRUE</code> for row LCRs that contain the results of DML changes to the <code>hr.regions</code> table. The rule name is system generated.</p>
</li>
<li>
<p>Creates one rule that evaluates to <code>TRUE</code> for DDL LCRs that contain DDL changes to the <code>hr.regions</code> table. The rule name is system generated.</p>
</li>
<li>
<p>Specifies that both rules evaluate to <code>TRUE</code> only for LCRs whose changes originated at the <code>dbs1.example.com</code> source database.</p>
</li>
<li>
<p>Adds the rules to the negative rule set associated with the apply process because the <code>inclusion_rule</code> parameter is set to <code>FALSE</code>.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006492"></a>
<div id="STRMS726" class="sect2">
<h3 class="sect2">Removing a Rule from the Rule Set for an Apply Process<a id="sthref748"></a><a id="sthref749"></a></h3>
<p>You remove a <a href="strms_glossary.htm#CHDIFFCF"><span class="xrefglossterm">rule</span></a> from a <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a> for an existing <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a> by running the <code>REMOVE_RULE</code> procedure in the <code>DBMS_STREAMS_ADM</code> package. For example, the following procedure removes a rule named <code>departments3</code> from the <a href="strms_glossary.htm#CHDEEDIJ"><span class="xrefglossterm">positive rule set</span></a> of an apply process named <code>strm01_apply</code>.</p>
<pre>
BEGIN
  DBMS_STREAMS_ADM.REMOVE_RULE(
    rule_name        =&gt; 'departments3',
    streams_type     =&gt; 'apply',
    streams_name     =&gt; 'strm01_apply',
    drop_unused_rule =&gt; TRUE,
    inclusion_rule   =&gt; TRUE);
END;
/
</pre>
<p>In this example, the <code>drop_unused_rule</code> parameter in the <code>REMOVE_RULE</code> procedure is set to <code>TRUE</code>, which is the default setting. Therefore, if the rule being removed is not in any other rule set, then it will be dropped from the database. If the <code>drop_unused_rule</code> parameter is set to <code>FALSE</code>, then the rule is removed from the rule set, but it is not dropped from the database even if it is not in any other rule set.</p>
<p>If the <code>inclusion_rule</code> parameter is set to <code>FALSE</code>, then the <code>REMOVE_RULE</code> procedure removes the rule from the <a href="strms_glossary.htm#CHDBHJHI"><span class="xrefglossterm">negative rule set</span></a> for the apply process, not from the positive rule set.</p>
<p>To remove all of the rules in a rule set for the apply process, then specify <code>NULL</code> for the <code>rule_name</code> parameter when you run the <code>REMOVE_RULE</code> procedure.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="strms_rules.htm#i1016002">"Oracle Streams Client with One or More Empty Rule Sets"</a></div>
</div>
<!-- class="sect2" -->
<a id="i1006512"></a>
<div id="STRMS727" class="sect2">
<h3 class="sect2">Removing a Rule Set for an Apply Process<a id="sthref750"></a><a id="sthref751"></a></h3>
<p>You remove a <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a> from an existing <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a> using the <code>ALTER_APPLY</code> procedure in the <code>DBMS_APPLY_ADM</code> package. This procedure can remove the <a href="strms_glossary.htm#CHDEEDIJ"><span class="xrefglossterm">positive rule set</span></a>, <a href="strms_glossary.htm#CHDBHJHI"><span class="xrefglossterm">negative rule set</span></a>, or both. Specify <code>TRUE</code> for the <code>remove_rule_set</code> parameter to remove the positive rule set for the apply process. Specify <code>TRUE</code> for the <code>remove_negative_rule_set</code> parameter to remove the negative rule set for the apply process.</p>
<p>For example, the following procedure removes both the positive and negative rule sets from an apply process named <code>strm01_apply</code>.</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.ALTER_APPLY(
    apply_name               =&gt; 'strm01_apply',
    remove_rule_set          =&gt; TRUE,
    remove_negative_rule_set =&gt; TRUE);
END;
/
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If an apply process that dequeues messages from a <a href="strms_glossary.htm#CHDFJFED"><span class="xrefglossterm">buffered queue</span></a>s does not have a positive or negative rule set, then the apply process dequeues all <a href="strms_glossary.htm#CHDCHEJI"><span class="xrefglossterm">captured LCR</span></a>s in its <a href="strms_glossary.htm#CHDIDCDI"><span class="xrefglossterm">queue</span></a>. Similarly, if an apply process that dequeues messages from a <a href="strms_glossary.htm#CBAEIBGJ"><span class="xrefglossterm">persistent queue</span></a> does not have a positive or negative rule set, the apply process dequeues all <a href="strms_glossary.htm#CBAGDEIH"><span class="xrefglossterm">persistent LCR</span></a>s and <a href="strms_glossary.htm#CBAGGIDA"><span class="xrefglossterm">persistent user message</span></a>s in its queue.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006527"></a>
<div id="STRMS728" class="sect1">
<h2 class="sect1">Setting an Apply Process Parameter<a id="sthref752"></a><a id="sthref753"></a></h2>
<p>Set an <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a> parameter using the <code>SET_PARAMETER</code> procedure in the <code>DBMS_APPLY_ADM</code> package. Apply process parameters control the way an apply process operates.</p>
<p>For example, the following procedure sets the <code>commit_serialization</code> parameter for an apply process named <code>strm01_apply</code> to <code>DEPENDENT_TRANSACTIONS</code>. This setting for the <code>commit_serialization</code> parameter enables the apply process to commit transactions in any order.</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_PARAMETER(
    apply_name   =&gt; 'strm01_apply',
    parameter    =&gt; 'commit_serialization',
    value        =&gt; 'DEPENDENT_TRANSACTIONS');
END;
/
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The <code>value</code> parameter is always entered as a <code>VARCHAR2</code> value, even if the parameter value is a number.</p>
</li>
<li>
<p>If the <code>value</code> parameter is set to <code>NULL</code> or is not specified, then the parameter is set to its default value.</p>
</li>
<li>
<p>If you set the <code>parallelism</code> apply process parameter to a value greater than <code>1</code>, then you must specify a conditional <a href="strms_glossary.htm#CHDJHFHF"><span class="xrefglossterm">supplemental log group</span></a> at the <a href="strms_glossary.htm#CHDHFBJG"><span class="xrefglossterm">source database</span></a> for all of the unique key and foreign key columns in the tables for which an apply process applies changes. <a href="strms_glossary.htm#CHDIHHGA"><span class="xrefglossterm">supplemental logging</span></a> might be required for other columns in these tables as well, depending on your configuration.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_apply.htm#i1007170">"Apply Process Parameters"</a></p>
</li>
<li>
<p><a class="olink TDPII145" href="../../server.112/e17516/tdpii_adcont.htm#TDPII145"><span class="italic">Oracle Database 2 Day + Data Replication and Integration Guide</span></a> for instructions about setting an apply process parameter with Oracle Enterprise Manager</p>
</li>
<li>
<p>The <code>DBMS_APPLY_ADM.SET_PARAMETER</code> procedure in the <a class="olink ARPLS314" href="../../appdev.112/e40758/d_apply.htm#ARPLS314"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the apply process parameters</p>
</li>
<li>
<p><a class="olink STREP107" href="../../server.112/e10705/prep_rep.htm#STREP107"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a> for more information about specifying supplemental logging</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1006571"></a>
<div id="STRMS729" class="sect1">
<h2 class="sect1">Setting the Apply User for an Apply Process<a id="sthref754"></a><a id="sthref755"></a></h2>
<p>The <a href="strms_glossary.htm#CHDGCCIF"><span class="xrefglossterm">apply user</span></a> is the user who applies all DML changes and DDL changes that satisfy the <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a> <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a>s and who runs user-defined <a href="strms_glossary.htm#CHDCJAED"><span class="xrefglossterm">apply handler</span></a>s. Set the apply user for an apply process using the <code>apply_user</code> parameter in the <code>ALTER_APPLY</code> procedure in the <code>DBMS_APPLY_ADM</code> package.</p>
<p>To change the apply user, the user who invokes the <code>ALTER_APPLY</code> procedure must be granted <code>DBA</code> role. Only the <code>SYS</code> user can set the <code>apply_user</code> to <code>SYS</code>.</p>
<p>For example, the following procedure sets the apply user for an apply process named <code>strm03_apply</code> to <code>hr</code>.</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.ALTER_APPLY(
    apply_name =&gt; 'strm03_apply',
    apply_user =&gt; 'hr');
END;
/
</pre>
<p>Running this procedure grants the new apply user dequeue privilege on the <a href="strms_glossary.htm#CHDIDCDI"><span class="xrefglossterm">queue</span></a> used by the apply process and configures the user as a <a href="strms_glossary.htm#CHDGHFGG"><span class="xrefglossterm">secure queue</span></a> user of the queue. In addition, ensure that the apply user has the following privileges:</p>
<ul>
<li>
<p>The necessary privileges to perform DML and DDL changes on the apply objects</p>
</li>
<li>
<p><code>EXECUTE</code> privilege on the rule sets used by the apply process</p>
</li>
<li>
<p><code>EXECUTE</code> privilege on all <a href="strms_glossary.htm#CHDDGIFE"><span class="xrefglossterm">custom rule-based transformation</span></a> functions used in the rule set</p>
</li>
<li>
<p><code>EXECUTE</code> privilege on all apply handler procedures</p>
</li>
</ul>
<p>These privileges can be granted to the apply user directly or through roles.</p>
<p>In addition, the apply user must be granted <code>EXECUTE</code> privilege on all packages, including Oracle-supplied packages, that are invoked in subprograms run by the apply process. These privileges must be granted directly to the apply user. They cannot be granted through roles.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If Oracle Database Vault is installed, follow the steps outlined in <a href="ap_other.htm#BGBCEHCG">"Oracle Streams and Oracle Data Vault"</a> to ensure the correct privileges and roles have been granted.</div>
</div>
<!-- class="sect1" -->
<a id="BGBJHGHG"></a>
<div id="STRMS204" class="sect1">
<h2 class="sect1">Managing a DML Handler<a id="sthref756"></a></h2>
<p>DML handlers process row logical change records (row LCRs) dequeued by an apply process. There are two types of DML handlers: statement DML handlers and procedure DML handlers. A statement DML handler uses a collection of SQL statements to process row LCRs, while a procedure DML handler uses a PL/SQL procedure to process row LCRs.</p>
<p>This section contains instructions for managing a DML handler:</p>
<ul>
<li>
<p><a href="#BGBFBBBA">Managing a Statement DML Handler</a></p>
</li>
<li>
<p><a href="#BGBBJCGI">Managing a Procedure DML Handler</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="strms_apply.htm#i1006214">"Message Processing Options for an Apply Process"</a></div>
<a id="BGBFBBBA"></a>
<div id="STRMS1468" class="sect2">
<h3 class="sect2">Managing a Statement DML Handler<a id="sthref757"></a><a id="sthref758"></a></h3>
<p>This section contains the following instructions for managing a statement DML handler:</p>
<ul>
<li>
<p><a href="#BGBBICBF">Creating a Statement DML Handler and Adding It to an Apply Process</a></p>
</li>
<li>
<p><a href="#BGBGDJCD">Adding Statements to a Statement DML Handler</a></p>
</li>
<li>
<p><a href="#BGBHHBBF">Modifying a Statement in a Statement DML Handler</a></p>
</li>
<li>
<p><a href="#BGBDHBGA">Removing Statements from a Statement DML Handler</a></p>
</li>
<li>
<p><a href="#BGBHAHJA">Removing a Statement DML Handler from an Apply Process</a></p>
</li>
<li>
<p><a href="#BGBDAHDH">Dropping a Statement DML Handler</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_apply.htm#BGBFBIAE">"Statement DML Handlers"</a></p>
</li>
<li>
<p><a href="strms_apmon.htm#CACIJBDA">"Displaying Information About Statement DML Handlers"</a></p>
</li>
</ul>
</div>
<a id="BGBBICBF"></a>
<div id="STRMS1469" class="sect3">
<h4 class="sect3">Creating a Statement DML Handler and Adding It to an Apply Process<a id="sthref759"></a></h4>
<p>There are two ways to create a statement DML handler and add it to an apply process:</p>
<ul>
<li>
<p>One way creates the statement DML handler, adds one statement to it, and adds the statement DML handler to an apply process all in one step.</p>
</li>
<li>
<p>The other way uses distinct steps to create the statement DML handler, add one or more statements to it, and add the statement DML handler to an apply process.</p>
</li>
</ul>
<p>Typically, the one-step method is best when a statement DML handler will have only one statement. The multiple-step method is best when a statement DML handler will have several statements.</p>
<p>The following sections include examples that illustrate each method in detail:</p>
<ul>
<li>
<p><a href="#BGBBCCDC">Creating a Statement DML Handler With One Statement</a></p>
</li>
<li>
<p><a href="#BGBEAGBJ">Creating a Statement DML Handler With More Than One Statement</a></p>
</li>
</ul>
<a id="BGBBCCDC"></a>
<div id="STRMS1470" class="sect4">
<h5 class="sect4">Creating a Statement DML Handler With One Statement</h5>
<p>In some Oracle Streams replication environments, a replicated table is not exactly the same at the databases that share the table. In such environments, a statement DML handler can modify the DML change performed by row LCRs. Statement DML handlers cannot change the values of the columns in a row LCR. However, statement DML handlers can use SQL to insert a row or update a row with column values that are different than the ones in the row LCR.</p>
<p>The example in this section makes the following assumptions:</p>
<ul>
<li>
<p>An Oracle Streams replication environment is configured to replicate changes to the <code>oe.orders</code> table between a source database and a destination database. Changes to the <code>oe.orders</code> table are captured by a capture process or a synchronous capture at the source database, sent to the destination database by a propagation, and applied by an apply process at the destination database.</p>
</li>
<li>
<p>At the source database, the <code>oe.orders</code> table includes an <code>order_status</code> column. Assume that when an insert with an <code>order_status</code> of <code>1</code> is applied at the destination database, the <code>order_status</code> should be changed to <code>2</code>. The statement DML handler in this example makes this change. For inserts with an <code>order_status</code> that is not equal to <code>1</code>, the statement DML handler applies the original change in the row LCR without changing the <code>order_status</code> value.</p>
</li>
</ul>
<p>To create a statement DML handler that modifies inserts to the <code>oe.orders</code> table, complete the following steps:</p>
<ol>
<li>
<p>For the purposes of this example, specify the required supplemental logging at the source database:</p>
<ol>
<li>
<p>Connect to the source database as the Oracle Streams administrator.</p>
<p>See <a class="olink ADMIN00102" href="../../server.112/e25494/dba.htm#ADMIN00102"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about connecting to a database in SQL*Plus.</p>
</li>
<li>
<p>Specify an unconditional supplemental log group that includes the <code>order_status</code> column in the <code>oe.orders</code> table:</p>
<pre>
ALTER TABLE oe.orders ADD SUPPLEMENTAL LOG GROUP log_group_ord_stat  (order_status) ALWAYS;
</pre>
<p>Any columns used by a statement DML handler at a destination database must be in an unconditional log group at the source database.</p>
</li>
</ol>
</li>
<li>
<p>Connect to the destination database the Oracle Streams administrator.</p>
</li>
<li>
<p>Create the statement DML handler and add it to the apply process:</p>
<pre>
DECLARE
  stmt CLOB;
BEGIN
  stmt := 'INSERT INTO oe.orders(
             order_id,
             order_date, 
             order_mode,
             customer_id,
             order_status,
             order_total,
             sales_rep_id,
             promotion_id) 
           VALUES(
             :new.order_id,
             :new.order_date, 
             :new.order_mode,
             :new.customer_id,
             DECODE(:new.order_status, 1, 2, :new.order_status),
             :new.order_total,
             :new.sales_rep_id,
             :new.promotion_id)';
  DBMS_APPLY_ADM.ADD_STMT_HANDLER(
    object_name        =&gt; 'oe.orders',
    operation_name     =&gt; 'INSERT',
    handler_name       =&gt; 'modify_orders',
    statement          =&gt; stmt,
    apply_name         =&gt; 'apply$_sta_2',
    comment            =&gt; 'Modifies inserts into the orders table');
END;
/
</pre>
<p>Notice that the <code>DECODE</code> function changes an <code>order_status</code> of <code>1</code> to <code>2</code>. If the <code>order_status</code> in the row LCR is not <code>1</code>, then the <code>DECODE</code> function uses the original <code>order_status</code> value by specifying <code>:new.order_status</code> for the default in the <code>DECODE</code> function.</p>
<p>The <code>ADD_STMT_HANDLER</code> procedure creates the <code>modify_orders</code> statement DML handler and adds it to the <code>apply$_sta_2</code> apply process. The statement DML handler is invoked when this apply process dequeues a row LCR that performs an insert on the <code>oe.orders</code> table. To modify row LCRs that perform updates and deletes made to this table, separate statement DML handlers are required.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>This statement in the <code>modify_orders</code> statement DML handler performs the row change on the destination table. Therefore, you do not need to add an execute statement to the statement DML handler. The row change performed by the statement is committed when the apply process dequeues a commit directive for the row LCR's transaction.</p>
</li>
<li>
<p>The <code>ADD_STMT_HANDLER</code> procedure in this example adds the statement DML handler to the <code>apply$_sta_2</code> apply process. To add a general statement DML handler that is used by all of the apply processes in the database, omit the <code>apply_name</code> parameter in this procedure or set the <code>apply_name</code> parameter to <code>NULL</code>.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" -->
<a id="BGBEAGBJ"></a>
<div id="STRMS1471" class="sect4">
<h5 class="sect4">Creating a Statement DML Handler With More Than One Statement</h5>
<p>A statement DML handler can track the changes made to a table. The statement DML handler in this example tracks the updates made to the <code>hr.jobs</code> table.</p>
<p>The example in this section makes the following assumptions:</p>
<ul>
<li>
<p>An Oracle Streams replication environment is configured to replicate changes to the <code>hr.jobs</code> table between a source database and a destination database. Changes to the <code>hr.jobs</code> table are captured by a capture process or a synchronous capture at the source database, sent to the destination database by a propagation, and applied by an apply process at the destination database. The <code>hr.jobs</code> table contains the minimum and maximum salary for various jobs at an organization.</p>
</li>
<li>
<p>The goal is to track the updates to the salary information and when these updates were made. To accomplish this goal, the statement DML handler inserts rows into the <code>hr.track_jobs</code> table.</p>
</li>
<li>
<p>The apply process must also execute the row LCRs to replicate the changes to the <code>hr.jobs</code> table.</p>
</li>
</ul>
<p>To create a statement DML handler that tracks updates to the <code>hr.jobs</code>, complete the following steps:</p>
<ol>
<li>
<p>Connect to the source database as the Oracle Streams administrator.</p>
<p>See <a class="olink ADMIN00102" href="../../server.112/e25494/dba.htm#ADMIN00102"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about connecting to a database in SQL*Plus.</p>
</li>
<li>
<p>Specify an unconditional supplemental log group that includes all of the columns in the <code>hr.jobs</code> table. For example:</p>
<pre>
ALTER TABLE hr.jobs ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
</pre>
<p>Any columns used by a statement DML handler at a destination database must be in an unconditional log group at the source database.</p>
</li>
<li>
<p>Connect to the destination database as the <code>hr</code> user.</p>
</li>
<li id="BGBGEADB">
<p>Create a sequence for the tracking table:</p>
<pre>
CREATE SEQUENCE hr.track_jobs_seq 
   START WITH 1
   INCREMENT BY 1;
</pre></li>
<li>
<p>Create the table that will track the changes to the <code>hr.jobs</code> table:</p>
<pre>
CREATE TABLE hr.track_jobs( 
   change_id       NUMBER  CONSTRAINT track_jobs_pk PRIMARY KEY,
   job_id          VARCHAR2(10), 
   job_title       VARCHAR2(35),
   min_salary_old  NUMBER(6),
   min_salary_new  NUMBER(6),
   max_salary_old  NUMBER(6),
   max_salary_new  NUMBER(6),
   timestamp       TIMESTAMP);
</pre>
<p>The statement DML handler will use the sequence created in Step <a href="#BGBGEADB">4</a> to insert a unique value for each change that it tracks into the <code>change_id</code> column of the <code>hr.track_jobs</code> table.</p>
</li>
<li>
<p>Connect to the destination database as the Oracle Streams administrator.</p>
</li>
<li>
<p>Create the statement DML handler:</p>
<pre>
BEGIN
  DBMS_STREAMS_HANDLER_ADM.CREATE_STMT_HANDLER(
    handler_name =&gt; 'track_jobs',
    comment      =&gt; 'Tracks updates to the jobs table');
END;
/
</pre></li>
<li>
<p>Add a statement to the statement DML handler that executes the row LCR:</p>
<pre>
DECLARE
  stmt CLOB;
BEGIN
  stmt := ':lcr.execute TRUE';
  DBMS_STREAMS_HANDLER_ADM.ADD_STMT_TO_HANDLER(
    handler_name       =&gt; 'track_jobs',
    statement          =&gt; stmt,
    execution_sequence =&gt; 10);
END;
/
</pre>
<p>The <code>TRUE</code> argument is for the <code>conflict_resolution</code> parameter in the <code>EXECUTE</code> member procedure for the <code>LCR$_ROW_RECORD</code> type. The <code>TRUE</code> argument indicates that any conflict resolution defined for the table is used when the row LCR is executed. Specify <code>FALSE</code> if you do not want conflict resolution to be used when the row LCR is executed.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
If you want to track the changes to a table without replicating them, then do not include an execute statement in the statement DML handler.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS72028" href="../../appdev.112/e40758/d_streams_hand.htm#ARPLS72028"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></div>
</li>
<li>
<p>Add a statement to the statement DML handler that tracks the changes the row LCR:</p>
<pre>
DECLARE
  stmt CLOB;
BEGIN
  stmt := 'INSERT INTO hr.track_jobs(
             change_id,
             job_id, 
             job_title,
             min_salary_old,
             min_salary_new,
             max_salary_old,
             max_salary_new,
             timestamp) 
           VALUES(
             hr.track_jobs_seq.NEXTVAL,
             :new.job_id,
             :new.job_title,
             :old.min_salary,
             :new.min_salary,
             :old.max_salary,
             :new.max_salary,
             :source_time)';
  DBMS_STREAMS_HANDLER_ADM.ADD_STMT_TO_HANDLER(
    handler_name       =&gt; 'track_jobs',
    statement          =&gt; stmt,
    execution_sequence =&gt; 20);
END;
/
</pre>
<p>This statement inserts a row into the <code>hr.track_jobs</code> table for each row LCR that updates a row in the <code>hr.jobs</code> table. Notice that the values inserted into the <code>hr.track_jobs</code> table use the old and new values in the row LCR to track the old and new value for each salary column. Also, notice that the <code>source_time</code> attribute in the row LCR is used to populate the <code>timestamp</code> column.</p>
</li>
<li>
<p>Add the statement DML handler to the apply process. For example, the following procedure adds the statement DML handler to an apply process named <code>apply$_sta_2</code>:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.ADD_STMT_HANDLER(
    object_name    =&gt; 'hr.jobs',
    operation_name =&gt; 'UPDATE',
    handler_name   =&gt; 'track_jobs',
    apply_name     =&gt; 'apply$_sta_2');
END;
/
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>ADD_STMT_HANDLER</code> procedure in this example adds the statement DML handler to the <code>apply$_sta_2</code> apply process. To add a general statement DML handler that is used by all of the apply processes in the database, omit the <code>apply_name</code> parameter in this procedure or set the <code>apply_name</code> parameter to <code>NULL</code>.</div>
</li>
</ol>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="BGBGDJCD"></a>
<div id="STRMS1472" class="sect3">
<h4 class="sect3">Adding Statements to a Statement DML Handler<a id="sthref760"></a></h4>
<p>To add statements to a statement DML handler, run the <code>ADD_STMT_TO_HANDLER</code> procedure in the <code>DBMS_STREAMS_HANDLER_ADM</code> package and specify an execution sequence number that has not been specified for the statement DML handler.</p>
<p>The example in this section adds a statement to the <code>modify_orders</code> statement DML handler. This statement DML handler is created in <a href="#BGBBCCDC">"Creating a Statement DML Handler With One Statement"</a>. It modifies inserts into the <code>oe.orders</code> table.</p>
<p>For the example in this section, assume that the destination database should discount orders by 10% for a specific customer. This customer has a <code>customer_id</code> value of <code>118</code> in the <code>oe.orders</code> table. To do this, the SQL statement in the statement DML handler multiplies the <code>order_total</code> value by <code>.9</code> for inserts into the <code>oe.orders</code> table with a <code>customer_id</code> value of <code>118</code>.</p>
<p>Complete the following steps to add a statement to the <code>modify_orders</code> statement DML handler:</p>
<ol>
<li>
<p>Connect to the destination database where the apply process is configured as the Oracle Streams administrator.</p>
<p>See <a class="olink ADMIN00102" href="../../server.112/e25494/dba.htm#ADMIN00102"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about connecting to a database in SQL*Plus.</p>
</li>
<li id="BGBDDBAG">
<p>Check the execution sequence numbers that are already used by the statements in the statement DML handler:</p>
<pre>
COLUMN HANDLER_NAME HEADING 'Statement|Handler' FORMAT A15
COLUMN EXECUTION_SEQUENCE HEADING 'Execution|Sequence' FORMAT 999999
COLUMN STATEMENT HEADING 'Statement' FORMAT A50

SET LONG  8000
SET PAGES 8000
SELECT HANDLER_NAME,
       EXECUTION_SEQUENCE,
       STATEMENT
  FROM DBA_STREAMS_STMTS
  WHERE HANDLER_NAME = 'MODIFY_ORDERS'
  ORDER BY EXECUTION_SEQUENCE;
</pre>
<p>Your output is similar to the following:</p>
<pre>
Statement       Execution
Handler          Sequence Statement
--------------- --------- --------------------------------------------------
MODIFY_ORDERS           1 INSERT INTO oe.orders(
                                       order_id,
                                       order_date,
                                       order_mode,
                                       customer_id,
                                       order_status,
                                       order_total,
                                       sales_rep_id,
                                       promotion_id)
                                     VALUES(
                                       :new.order_id,
                                       :new.order_date,
                                       :new.order_mode,
                                       :new.customer_id,
                                       DECODE(:new.order_status, 1, 2, :new.
                          order_status),
                                       :new.order_total,
                                       :new.sales_rep_id,
                                       :new.promotion_id)
</pre>
<p>This output shows that the statement DML handler has only one statement, and this one statement is at execution sequence number <code>1</code>.</p>
</li>
<li>
<p>Add a statement to the statement DML handler that discounts all orders by 10%:</p>
<pre>
DECLARE
  stmt CLOB;
BEGIN
  stmt := 'UPDATE oe.orders SET order_total=order_total*.9
             WHERE order_id=:new.order_id AND :new.customer_id=118';
  DBMS_STREAMS_HANDLER_ADM.ADD_STMT_TO_HANDLER(
    handler_name       =&gt; 'modify_orders',
    statement          =&gt; stmt,
    execution_sequence =&gt; 10);
END;
/
</pre>
<p>This statement updates the row that was inserted by the statement with execution sequence number <code>1</code>. Therefore, this statement must have an execution sequence number that is greater than <code>1</code>. This example specifies <code>10</code> for the execution sequence number of the added statement.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When the <code>execution_sequence</code> parameter is set to <code>NULL</code> in the <code>ADD_STMT_TO_HANDLER</code> procedure, the statement is added to the statement DML handler with an execution sequence number that is larger than the execution sequence number for any statement in the statement DML handler. Therefore, in this example, the <code>execution_sequence</code> parameter can be omitted or set to <code>NULL</code>.</div>
</li>
</ol>
<p>After completing these steps, the output for the query in Step <a href="#BGBDDBAG">2</a> shows:</p>
<pre>
Statement       Execution
Handler          Sequence Statement
--------------- --------- --------------------------------------------------
MODIFY_ORDERS           1 INSERT INTO oe.orders(
                                       order_id,
                                       order_date,
                                       order_mode,
                                       customer_id,
                                       order_status,
                                       order_total,
                                       sales_rep_id,
                                       promotion_id)
                                     VALUES(
                                       :new.order_id,
                                       :new.order_date,
                                       :new.order_mode,
                                       :new.customer_id,
                                       DECODE(:new.order_status, 1, 2, :new.
                          order_status),
                                       :new.order_total,
                                       :new.sales_rep_id,
                                       :new.promotion_id)
 
MODIFY_ORDERS          10 UPDATE oe.orders SET order_total=order_total*.9
                                       WHERE order_id=:new.order_id AND :new.
                          customer_id=118
</pre>
<p>This output shows that the new statement with execution sequence number <code>10</code> is added to the statement DML handler.</p>
</div>
<!-- class="sect3" -->
<a id="BGBHHBBF"></a>
<div id="STRMS1473" class="sect3">
<h4 class="sect3">Modifying a Statement in a Statement DML Handler<a id="sthref761"></a></h4>
<p>To modify a statement in a statement DML handler, run the <code>ADD_STMT_TO_HANDLER</code> procedure in the <code>DBMS_STREAMS_HANDLER_ADM</code> package and specify the execution sequence number of the statement you are modifying.</p>
<p>The example in this section modifies the statement with execution sequence number <code>20</code> in the <code>track_jobs</code> statement DML handler. This statement DML handler is created in <a href="#BGBEAGBJ">"Creating a Statement DML Handler With More Than One Statement"</a>. It uses the <code>hr.track_jobs</code> table to track changes to the <code>hr.jobs</code> table.</p>
<p>For the example in this section, assume that you also want to track which user updated the <code>hr.jobs</code> table. To do this, you must add this information to the row LCRs captured at the source database, add a <code>user_name</code> column to the <code>hr.track_jobs</code> table, and modify the statement in the statement DML handler to track the user.</p>
<p>Complete the following steps to modify the statement in the statement DML handler:</p>
<ol>
<li>
<p>Connect to the source database as the Oracle Streams administrator.</p>
<p>See <a class="olink ADMIN00102" href="../../server.112/e25494/dba.htm#ADMIN00102"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about connecting to a database in SQL*Plus.</p>
</li>
<li>
<p>Add the username to the row LCR information captured at the source database:</p>
<pre>
BEGIN
  DBMS_CAPTURE_ADM.INCLUDE_EXTRA_ATTRIBUTE(
    capture_name   =&gt; 'sta$cap',
    attribute_name =&gt; 'username',
    include        =&gt; TRUE);
END;
/
</pre>
<p>In the <code>capture_name</code> parameter, specify the capture process or synchronous capture that captures the changes that will be processed by the statement DML handler.</p>
</li>
<li>
<p>Connect to the destination database as the Oracle Streams administrator.</p>
</li>
<li>
<p>Add the <code>user_name</code> column to the <code>hr.track_jobs</code> table:</p>
<pre>
ALTER TABLE hr.track_jobs
  ADD (user_name VARCHAR2(30));
</pre></li>
<li>
<p>Modify the statement with execution sequence number <code>20</code> in the <code>track_jobs</code> statement DML handler:</p>
<pre>
DECLARE
  stmt CLOB;
BEGIN
  stmt := 'INSERT INTO hr.track_jobs(
             change_id,
             job_id, 
             job_title,
             min_salary_old,
             min_salary_new,
             max_salary_old,
             max_salary_new,
             timestamp,
             user_name) 
           VALUES(
             hr.track_jobs_seq.NEXTVAL,
             :new.job_id,
             :new.job_title,
             :old.min_salary,
             :new.min_salary,
             :old.max_salary,
             :new.max_salary,
             :source_time,
             :extra_attribute.username)';
  DBMS_STREAMS_HANDLER_ADM.ADD_STMT_TO_HANDLER(
    handler_name       =&gt; 'track_jobs',
    statement          =&gt; stmt,
    execution_sequence =&gt; 20);
END;
/
</pre>
<p>The modified statement adds user tracking by inserting the <code>username</code> information in the row LCR into the <code>user_name</code> column in the <code>hr.track_jobs</code> table. Notice that <code>username</code> is an extra LCR attribute and must be specified using the following syntax:</p>
<pre>
:extra_attribute.username
</pre></li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="strms_capture.htm#CACHIIJF">"Extra Information in LCRs"</a></div>
</div>
<!-- class="sect3" -->
<a id="BGBDHBGA"></a>
<div id="STRMS1474" class="sect3">
<h4 class="sect3">Removing Statements from a Statement DML Handler<a id="sthref762"></a></h4>
<p>To remove a statement from a statement DML handler, run the <code>REMOVE_STMT_FROM_HANDLER</code> procedure in the <code>DBMS_STREAMS_HANDLER_ADM</code> package and specify the execution sequence number of the statement you are removing.</p>
<p>The example in this section removes the statement with execution sequence number <code>10</code> from the <code>track_jobs</code> statement DML handler. This statement DML handler is created in <a href="#BGBEAGBJ">"Creating a Statement DML Handler With More Than One Statement"</a>. It uses the <code>hr.track_jobs</code> table to track changes to the <code>hr.jobs</code> table.</p>
<p>For the example in this section, assume that you no longer want to execute the row LCRs with updates to the <code>hr.jobs</code> table. To do this, you must remove the statement that executes the row LCRs, and this statement uses execution sequence number <code>10</code> in the <code>track_jobs</code> statement DML handler.</p>
<p>Complete the following steps to remove the statement from the statement DML handler:</p>
<ol>
<li>
<p>Connect to the database that contains the statement DML handler as the Oracle Streams administrator.</p>
<p>See <a class="olink ADMIN00102" href="../../server.112/e25494/dba.htm#ADMIN00102"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about connecting to a database in SQL*Plus.</p>
</li>
<li>
<p>Remove the statement from the statement DML handler:</p>
<pre>
BEGIN
  DBMS_STREAMS_HANDLER_ADM.REMOVE_STMT_FROM_HANDLER(
    handler_name       =&gt; 'track_jobs',
    execution_sequence =&gt; 10);
END;
/
</pre></li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BGBHAHJA"></a>
<div id="STRMS1475" class="sect3">
<h4 class="sect3">Removing a Statement DML Handler from an Apply Process<a id="sthref763"></a></h4>
<p>To remove a statement DML handler from an apply process, run the <code>REMOVE_STMT_HANDLER</code> procedure in the <code>DBMS_APPLY_ADM</code> package.</p>
<p>The example in this section removes the <code>track_jobs</code> statement DML handler from the <code>apply$_sta_2</code> apply process. This statement DML handler is created in <a href="#BGBEAGBJ">"Creating a Statement DML Handler With More Than One Statement"</a>. It uses the <code>hr.track_jobs</code> table to track changes to the <code>hr.jobs</code> table.</p>
<p>Complete the following steps to remove the statement DML handler from the apply process:</p>
<ol>
<li>
<p>Connect to the database that contains the apply process as the Oracle Streams administrator.</p>
<p>See <a class="olink ADMIN00102" href="../../server.112/e25494/dba.htm#ADMIN00102"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about connecting to a database in SQL*Plus.</p>
</li>
<li>
<p>Remove the statement DML handler from the apply process:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.REMOVE_STMT_HANDLER(
    object_name    =&gt; 'hr.jobs',
    operation_name =&gt; 'UPDATE',
    handler_name   =&gt; 'track_jobs',
    apply_name     =&gt; 'apply$_sta_2');
END;
/
</pre></li>
</ol>
<p>After the statement DML handler is removed from the apply process, the statement DML handler still exists in the database.</p>
</div>
<!-- class="sect3" -->
<a id="BGBDAHDH"></a>
<div id="STRMS1476" class="sect3">
<h4 class="sect3">Dropping a Statement DML Handler<a id="sthref764"></a></h4>
<p>To drop a statement DML handler from a database, run the <code>DROP_STMT_HANDLER</code> procedure in the <code>DBMS_STREAMS_HANDLER_ADM</code> package.</p>
<p>The example in this section drops the <code>track_jobs</code> statement DML handler. This statement DML handler is created in <a href="#BGBEAGBJ">"Creating a Statement DML Handler With More Than One Statement"</a>. It uses the <code>hr.track_jobs</code> table to track changes to the <code>hr.jobs</code> table.</p>
<p>Complete the following steps to drop the statement DML handler:</p>
<ol>
<li>
<p>Connect to the database that contains the statement DML handler as the Oracle Streams administrator.</p>
<p>See <a class="olink ADMIN00102" href="../../server.112/e25494/dba.htm#ADMIN00102"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about connecting to a database in SQL*Plus.</p>
</li>
<li>
<p>Drop the statement DML handler:</p>
<pre>
exec DBMS_STREAMS_HANDLER_ADM.DROP_STMT_HANDLER('track_jobs');
</pre></li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BGBBJCGI"></a>
<div id="STRMS1518" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Managing a Procedure DML Handler<a id="sthref765"></a><a id="sthref766"></a></h3>
<p>This section contains the following instructions for managing a procedure DML handler:</p>
<ul>
<li>
<p><a href="#BGBIBIED">Creating a Procedure DML Handler</a></p>
</li>
<li>
<p><a href="#BGBFGCBE">Setting a Procedure DML Handler</a></p>
</li>
<li>
<p><a href="#BGBGCDGA">Unsetting a Procedure DML Handler</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_apply.htm#BGBFFGHI">"Procedure DML Handlers"</a></p>
</li>
<li>
<p><a href="strms_apmon.htm#CACHHIGC">"Displaying Information About DML Handlers"</a></p>
</li>
</ul>
</div>
<a id="BGBIBIED"></a>
<div id="STRMS748" class="sect3">
<h4 class="sect3">Creating a Procedure DML Handler<a id="sthref767"></a><a id="sthref768"></a><a id="sthref769"></a><a id="sthref770"></a></h4>
<p>A procedure DML handler must have the following signature:</p>
<pre>
PROCEDURE <span class="italic">user_procedure</span> (
   <span class="italic">parameter_name</span>   IN  ANYDATA);
</pre>
<p>Here, <code><span class="codeinlineitalic">user_procedure</span></code> stands for the name of the procedure and <code><span class="codeinlineitalic">parameter_name</span></code> stands for the name of the parameter passed to the procedure. The parameter passed to the procedure is an <code>ANYDATA</code> encapsulation of a row&nbsp;logical change record (row LCR).</p>
<p>The following restrictions apply to the user procedure:</p>
<ul>
<li>
<p>Do not execute <code>COMMIT</code> or <code>ROLLBACK</code> statements. Doing so can endanger the consistency of the transaction that contains the row LCR.</p>
</li>
<li>
<p>If you are manipulating a row using the <code>EXECUTE</code> member procedure for the row LCR, then do not attempt to manipulate more than one row in a row operation. You must construct and execute manually any DML statements that manipulate more than one row.</p>
</li>
<li>
<p>If the command type is <code>UPDATE</code> or <code>DELETE</code>, then row operations resubmitted using the <code>EXECUTE</code> member procedure for the LCR must include the entire key in the list of old values. The key is the primary key or the smallest unique key that has at least one <code>NOT</code> <code>NULL</code> column, unless a substitute key has been specified by the <code>SET_KEY_COLUMNS</code> procedure. If there is no specified key, then the key consists of all table columns, except for columns of the following data types: LOB, <code>LONG</code>, <code>LONG</code> <code>RAW</code>, user-defined types (including object types, REFs, varrays, nested tables), and Oracle-supplied types (including Any types, XML types, spatial types, and media types).</p>
</li>
<li>
<p>If the command type is <code>INSERT</code>, then row operations resubmitted using the <code>EXECUTE</code> member procedure for the LCR should include the entire key in the list of new values. Otherwise, duplicate rows are possible. The key is the primary key or the smallest unique key that has at least one <code>NOT</code> <code>NULL</code> column, unless a substitute key has been specified by the <code>SET_KEY_COLUMNS</code> procedure. If there is no specified key, then the key consists of all non LOB, non <code>LONG</code>, and non <code>LONG</code> <code>RAW</code> columns.</p>
</li>
</ul>
<p>A procedure DML handler can be used for any customized processing of row LCRs. For example, the handler can modify an LCR and then execute it using the <code>EXECUTE</code> member procedure for the LCR. When you execute a row LCR in a procedure DML handler, the apply process applies the LCR without calling the procedure DML handler again.</p>
<p>You can also use SQL generation in a procedure DML handler to record the DML changes made to a table. You can record these changes in a table or in a file. For example, the sample procedure DML handler in this section uses SQL generation to record each <code>UPDATE</code> SQL statement made to the <code>hr.departments</code> table using the <code>GET_ROW_TEXT</code> member procedure. The procedure DML handler also applies the row LCR using the <code>EXECUTE</code> member procedure.</p>
<p>To create the procedure used in this procedure DML handler, complete the following steps:</p>
<ol>
<li>
<p>In SQL*Plus, connect to the database as the Oracle Streams administrator.</p>
<p>See <a class="olink ADMIN00102" href="../../server.112/e25494/dba.htm#ADMIN00102"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about connecting to a database in SQL*Plus.</p>
</li>
<li id="BGBDHBDB">
<p>Create the directory object for the directory that contains the text file.</p>
<p>In this example, the apply process writes the <code>UPDATE</code> SQL statements performed on the <code>hr.departments</code> table to the text file in this directory.</p>
<p>For example, to create a directory object named <code>SQL_GEN_DIR</code> for the /usr/sql_gen directory, enter the following SQL statement:</p>
<pre>
CREATE DIRECTORY SQL_GEN_DIR AS '/usr/sql_gen';
</pre></li>
<li>
<p>Ensure that the text file to which the SQL statements will be written exists in the directory specified in Step <a href="#BGBDHBDB">2</a>.</p>
<p>In this example, ensure that the <code>sql_gen_file.txt</code> file exists in the /usr/sql_gen directory on the file system.</p>
</li>
<li>
<p>Create the procedure for the procedure DML handler:</p>
<pre>
CREATE OR REPLACE PROCEDURE strmadmin.sql_gen_dep(lcr_anydata IN SYS.ANYDATA) IS
  lcr          SYS.LCR$_ROW_RECORD;
  int          PLS_INTEGER;
  row_txt_clob CLOB;
  fp           UTL_FILE.FILE_TYPE;
BEGIN
  int   := lcr_anydata.GETOBJECT(lcr);
  DBMS_LOB.CREATETEMPORARY(row_txt_clob, TRUE);
  -- Generate SQL from row LCR and save to file
  lcr.GET_ROW_TEXT(row_txt_clob);
  fp := UTL_FILE.FOPEN (
     location     =&gt; 'SQL_GEN_DIR',
     filename     =&gt; 'sql_gen_file.txt',
     open_mode    =&gt; 'a',
     max_linesize =&gt; 5000);
  UTL_FILE.PUT_LINE(
     file      =&gt; fp,
     buffer    =&gt; row_txt_clob,
     autoflush =&gt; TRUE);
  DBMS_LOB.TRIM(row_txt_clob, 0);
  UTL_FILE.FCLOSE(fp); 
  --  Apply row LCR
  lcr.EXECUTE(TRUE);
END;
/
</pre></li>
</ol>
<p>After you create the procedure, you can set it as a procedure DML handler by following the instructions in <a href="#BGBFGCBE">"Setting a Procedure DML Handler"</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>You must specify an unconditional supplemental log group at the source database for any columns needed by a procedure DML handler at the destination database. This sample procedure DML handler does not require any additional supplemental logging because it records the SQL statement and does not manipulate the row&nbsp;LCR in any other way.</p>
</li>
<li>
<p>To test a procedure DML handler before using it, or to debug a procedure DML handler, you can construct row LCRs and run the procedure DML handler procedure outside the context of an apply process.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_apply.htm#BCEEHIHH">"SQL Generation"</a></p>
</li>
<li>
<p><a class="olink ARPLS71863" href="../../appdev.112/e40758/t_lcr.htm#ARPLS71863"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code>GET_ROW_TEXT</code> row LCR member function</p>
</li>
<li>
<p><a href="strms_capture.htm#i1007293">"Supplemental Logging in an Oracle Streams Environment"</a></p>
</li>
<li>
<p><a class="olink STREP009" href="../../server.112/e10705/man_lcrs.htm#STREP009"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a></p>
</li>
<li>
<p><a href="strms_trapply.htm#i1013873">"Are There Any Apply Errors in the Error Queue?"</a> for information about common apply errors that you might want to handle in a procedure DML handler</p>
</li>
<li>
<p><a class="olink SQLRF0021" href="../../server.112/e41084/sql_elements001.htm#SQLRF0021"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about data types</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BGBFGCBE"></a>
<div id="STRMS749" class="sect3">
<h4 class="sect3">Setting a Procedure DML Handler<a id="sthref771"></a><a id="sthref772"></a><a id="sthref773"></a></h4>
<p>A procedure DML handler processes each row LCR dequeued by any apply process that contains a specific operation on a specific table. You can specify multiple procedure DML handlers on the same table, to handle different operations on the table. All apply processes that apply changes to the specified table in the local database use the specified procedure DML handler.</p>
<p>Set the procedure DML handler using the <code>SET_DML_HANDLER</code> procedure in the <code>DBMS_APPLY_ADM</code> package. For example, the following procedure sets the procedure DML handler for <code>UPDATE</code> operations on the <code>hr.departments</code> table. Therefore, when any apply process that applies changes locally dequeues a row LCR containing an <code>UPDATE</code> operation on the <code>hr.departments</code> table, the apply process sends the row LCR to the <code>sql_gen_dep</code> PL/SQL procedure in the <code>strmadmin</code> schema for processing. The apply process does not apply a row LCR containing such a change directly.</p>
<p>In this example, the <code>apply_name</code> parameter is set to <code>NULL</code>. Therefore, the procedure DML handler is a general procedure DML handler that is used by all of the apply processes in the database.</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_DML_HANDLER(
    object_name         =&gt; 'hr.departments',
    object_type         =&gt; 'TABLE',
    operation_name      =&gt; 'UPDATE',
    error_handler       =&gt; FALSE,
    user_procedure      =&gt; 'strmadmin.sql_gen_dep',
    apply_database_link =&gt; NULL,
    apply_name          =&gt; NULL);
END;
/
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>To specify the procedure DML handler for only one apply process, specify the apply process name in the <code>apply_name</code> parameter.</p>
</li>
<li>
<p>If an apply process applies changes to a remote non-Oracle database, then it can use a different procedure DML handler for the same table. You can run the <code>SET_DML_HANDLER</code> procedure in the <code>DBMS_APPLY_ADM</code> package to specify a procedure DML handler for changes that will be applied to a remote non-Oracle database by setting the <code>apply_database_link</code> parameter to a non-<code>NULL</code> value.</p>
</li>
<li>
<p>You can specify <code>DEFAULT</code> for the <code>operation_name</code> parameter to set the procedure as the default procedure DML handler for the database object. In this case, the procedure DML handler is used for any <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, and <code>LOB_WRITE</code> on the database object, if another procedure DML handler is not specifically set for the operation on the database object.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP105" href="../../server.112/e10705/hetero.htm#STREP105"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a></div>
</div>
<!-- class="sect3" -->
<a id="BGBGCDGA"></a>
<div id="STRMS750" class="sect3">
<h4 class="sect3">Unsetting a Procedure DML Handler<a id="sthref774"></a><a id="sthref775"></a><a id="sthref776"></a><a id="sthref777"></a></h4>
<p>You unset a procedure DML handler using the <code>SET_DML_HANDLER</code> procedure in the <code>DBMS_APPLY_ADM</code> package. When you run that procedure, set the <code>user_procedure</code> parameter to <code>NULL</code> for a specific operation on a specific table. After the procedure DML handler is unset, any apply process that applies changes locally will apply a row LCR containing such a change directly.</p>
<p>For example, the following procedure unsets the procedure DML handler for <code>UPDATE</code> operations on the <code>hr.departments</code> table:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_DML_HANDLER(
    object_name    =&gt; 'hr.departments',
    object_type    =&gt; 'TABLE',
    operation_name =&gt; 'UPDATE',
    error_handler  =&gt; FALSE,
    user_procedure =&gt; NULL,
    apply_name     =&gt; NULL);
END;
/
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBJHHEI"></a>
<div id="STRMS206" class="sect1">
<h2 class="sect1">Managing a DDL Handler<a id="sthref778"></a><a id="sthref779"></a></h2>
<p>This section contains instructions for creating, specifying, and removing the DDL handler for an apply process.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
All applied DDL LCRs commit automatically. Therefore, if a DDL handler calls the <code>EXECUTE</code> member procedure of a DDL LCR, then a commit is performed automatically.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_apply.htm#i1006214">"Message Processing Options for an Apply Process"</a></p>
</li>
<li>
<p><a class="olink ARPLS307" href="../../appdev.112/e40758/t_lcr.htm#ARPLS307"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code>EXECUTE</code> member procedure for LCR types</p>
</li>
</ul>
</div>
<div id="STRMS751" class="sect2"><a id="sthref780"></a>
<h3 class="sect2">Creating a DDL Handler for an Apply Process<a id="sthref781"></a></h3>
<p>A DDL handler must have the following signature:</p>
<pre>
PROCEDURE <span class="italic">handler_procedure</span> (
   <span class="italic">parameter_name</span>   IN  ANYDATA);
</pre>
<p>Here, <code><span class="codeinlineitalic">handler_procedure</span></code> stands for the name of the procedure and <code><span class="codeinlineitalic">parameter_name</span></code> stands for the name of the parameter passed to the procedure. The parameter passed to the procedure is an <code>ANYDATA</code> encapsulation of a DDL&nbsp;LCR.</p>
<p>A DDL handler can be used for any customized processing of DDL LCRs. For example, the handler can modify the LCR and then execute it using the <code>EXECUTE</code> member procedure for the LCR. When you execute a DDL LCR in a DDL handler, the apply process applies the LCR without calling the DDL handler again.</p>
<p>You can also use a DDL handler to record the history of DDL changes. For example, a DDL handler can insert information about an LCR it processes into a table and then apply the LCR using the <code>EXECUTE</code> member procedure.</p>
<p>To create such a DDL handler, first create a table to hold the history information:</p>
<pre>
CREATE TABLE strmadmin.history_ddl_lcrs(
  timestamp             DATE,
  source_database_name  VARCHAR2(128),
  command_type          VARCHAR2(30),
  object_owner          VARCHAR2(32),
  object_name           VARCHAR2(32),
  object_type           VARCHAR2(18),
  ddl_text              CLOB,
  logon_user            VARCHAR2(32),
  current_schema        VARCHAR2(32),
  base_table_owner      VARCHAR2(32),
  base_table_name       VARCHAR2(32),
  tag                   RAW(10),
  transaction_id        VARCHAR2(10),
  scn                   NUMBER);
</pre>
<pre>
<a id="sthref782"></a><a id="sthref783"></a><a id="sthref784"></a><a id="sthref785"></a><a id="sthref786"></a><a id="sthref787"></a><a id="sthref788"></a><a id="sthref789"></a>CREATE OR REPLACE PROCEDURE history_ddl(in_any IN ANYDATA)  
 IS
   lcr       SYS.LCR$_DDL_RECORD;
   rc        PLS_INTEGER;
   ddl_text  CLOB;
 BEGIN
   -- Access the LCR
   rc := in_any.GETOBJECT(lcr);
   DBMS_LOB.CREATETEMPORARY(ddl_text, TRUE);
   lcr.GET_DDL_TEXT(ddl_text);
   --  Insert DDL LCR information into history_ddl_lcrs table
   INSERT INTO strmadmin.history_ddl_lcrs VALUES( 
     SYSDATE, lcr.GET_SOURCE_DATABASE_NAME(), lcr.GET_COMMAND_TYPE(), 
     lcr.GET_OBJECT_OWNER(), lcr.GET_OBJECT_NAME(), lcr.GET_OBJECT_TYPE(), 
     ddl_text, lcr.GET_LOGON_USER(), lcr.GET_CURRENT_SCHEMA(), 
     lcr.GET_BASE_TABLE_OWNER(), lcr.GET_BASE_TABLE_NAME(), lcr.GET_TAG(), 
     lcr.GET_TRANSACTION_ID(), lcr.GET_SCN());
   --  Apply DDL LCR
   lcr.EXECUTE();
   -- Free temporary LOB space
   DBMS_LOB.FREETEMPORARY(ddl_text);
END;
/
</pre></div>
<!-- class="sect2" -->
<div id="STRMS752" class="sect2"><a id="sthref790"></a>
<h3 class="sect2">Setting the DDL Handler for an Apply Process<a id="sthref791"></a><a id="sthref792"></a></h3>
<p>A DDL handler processes all DDL LCRs dequeued by an apply process. Set the DDL handler for an apply process using the <code>ddl_handler</code> parameter in the <code>ALTER_APPLY</code> procedure in the <code>DBMS_APPLY_ADM</code> package. For example, the following procedure sets the DDL handler for an apply process named <code>strep01_apply</code> to the <code>history_ddl</code> procedure in the <code>strmadmin</code> schema.</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.ALTER_APPLY(
    apply_name  =&gt; 'strep01_apply',
    ddl_handler =&gt; 'strmadmin.history_ddl');
END;
/
</pre></div>
<!-- class="sect2" -->
<div id="STRMS753" class="sect2"><a id="sthref793"></a>
<h3 class="sect2">Removing the DDL Handler for an Apply Process<a id="sthref794"></a><a id="sthref795"></a></h3>
<p>A DDL handler processes all DDL LCRs dequeued by an apply process. You remove the DDL handler for an apply process by setting the <code>remove_ddl_handler</code> parameter to <code>TRUE</code> in the <code>ALTER_APPLY</code> procedure in the <code>DBMS_APPLY_ADM</code> package. For example, the following procedure removes the DDL handler from an apply process named <code>strep01_apply</code>.</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.ALTER_APPLY(
    apply_name         =&gt; 'strep01_apply',
    remove_ddl_handler =&gt; TRUE);
END;
/
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006583"></a>
<div id="STRMS759" class="sect1">
<h2 class="sect1">Managing the Message Handler for an Apply Process<a id="sthref796"></a><a id="sthref797"></a></h2>
<p>A message handler is an <a href="strms_glossary.htm#CHDCJAED"><span class="xrefglossterm">apply handler</span></a> that processes <a href="strms_glossary.htm#CBAGGIDA"><span class="xrefglossterm">persistent user message</span></a>s. The following sections contain instructions for setting and unsetting the message handler for an <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>:</p>
<ul>
<li>
<p><a href="#i1007872">Setting the Message Handler for an Apply Process</a></p>
</li>
<li>
<p><a href="#CHDICGBC">Unsetting the Message Handler for an Apply Process</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_apply.htm#BGBCDIDA">"Types of Messages That Can Be Processed with an Apply Process"</a></p>
</li>
<li>
<p><a href="strms_apply.htm#i1007980">"Message Handlers"</a></p>
</li>
<li>
<p><a class="olink ADQUE025" href="../../server.112/e11013/aq_demo.htm#ADQUE025"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a> for an example that creates a message handler</p>
</li>
</ul>
</div>
<a id="i1007872"></a>
<div id="STRMS760" class="sect2">
<h3 class="sect2">Setting the Message Handler for an Apply Process<a id="sthref798"></a><a id="sthref799"></a></h3>
<p>Set the <a href="strms_glossary.htm#CHDDHDEH"><span class="xrefglossterm">message handler</span></a> for an <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a> using the <code>message_handler</code> parameter in the <code>ALTER_APPLY</code> procedure in the <code>DBMS_APPLY_ADM</code> package. For example, the following procedure sets the message handler for an apply process named <code>strm03_apply</code> to the <code>mes_handler</code> procedure in the <code>oe</code> schema.</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.ALTER_APPLY(
    apply_name      =&gt; 'strm03_apply',
    message_handler =&gt; 'oe.mes_handler');
END;
/
</pre>
<p>The user who runs the <code>ALTER_APPLY</code> procedure must have <code>EXECUTE</code> privilege on the specified message handler. If the message handler is already set for an apply process, then you can run the <code>ALTER_APPLY</code> procedure to change the message handler for the apply process.</p>
</div>
<!-- class="sect2" -->
<a id="CHDICGBC"></a>
<div id="STRMS762" class="sect2">
<h3 class="sect2">Unsetting the Message Handler for an Apply Process<a id="sthref800"></a><a id="sthref801"></a></h3>
<p>You unset the <a href="strms_glossary.htm#CHDDHDEH"><span class="xrefglossterm">message handler</span></a> for an <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a> by setting the <code>remove_message_handler</code> parameter to <code>TRUE</code> in the <code>ALTER_APPLY</code> procedure in the <code>DBMS_APPLY_ADM</code> package. For example, the following procedure unsets the message handler for an apply process named <code>strm03_apply</code>.</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.ALTER_APPLY(
    apply_name             =&gt; 'strm03_apply',
    remove_message_handler =&gt; TRUE);
END;
/
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1009583"></a>
<div id="STRMS127" class="sect1">
<h2 class="sect1">Managing the Precommit Handler for an Apply Process<a id="sthref802"></a><a id="sthref803"></a></h2>
<p>A precommit handler is an <a href="strms_glossary.htm#CHDCJAED"><span class="xrefglossterm">apply handler</span></a> that can receive the commit information for a transaction and process the commit information in any customized way.</p>
<p>The following sections contain instructions for creating, setting, and unsetting the precommit handler for an <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>:</p>
<ul>
<li>
<p><a href="#CHDBDFFA">Creating a Precommit Handler for an Apply Process</a></p>
</li>
<li>
<p><a href="#CHDEAEEI">Setting the Precommit Handler for an Apply Process</a></p>
</li>
<li>
<p><a href="#CHDICJFD">Unsetting the Precommit Handler for an Apply Process</a></p>
</li>
</ul>
<a id="CHDBDFFA"></a>
<div id="STRMS764" class="sect2">
<h3 class="sect2">Creating a Precommit Handler for an Apply Process<a id="sthref804"></a></h3>
<p>A <a href="strms_glossary.htm#CHDGJIFI"><span class="xrefglossterm">precommit handler</span></a> must have the following signature:</p>
<pre>
PROCEDURE <span class="italic">handler_procedure</span> (
   <span class="italic">parameter_name</span>   IN  NUMBER);
</pre>
<p>Here, <code><span class="codeinlineitalic">handler_procedure</span></code> stands for the name of the procedure and <code><span class="codeinlineitalic">parameter_name</span></code> stands for the name of the parameter passed to the procedure. The parameter passed to the procedure is a commit SCN from an internal commit directive in the <a href="strms_glossary.htm#CHDIDCDI"><span class="xrefglossterm">queue</span></a> used by the <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>.</p>
<p>You can use a precommit handler to record information about commits processed by an apply process. The apply process can apply <a href="strms_glossary.htm#CHDCHEJI"><span class="xrefglossterm">captured LCR</span></a>s, <a href="strms_glossary.htm#CBAGDEIH"><span class="xrefglossterm">persistent LCR</span></a>s, or <a href="strms_glossary.htm#CBAGGIDA"><span class="xrefglossterm">persistent user message</span></a>s. For a captured row LCR, a commit directive contains the commit SCN of the transaction from the <a href="strms_glossary.htm#CHDHFBJG"><span class="xrefglossterm">source database</span></a>. For a persistent LCRs and persistent user messages, the commit SCN is generated by the apply process.</p>
<p>The precommit handler procedure must conform to the following restrictions:</p>
<ul>
<li>
<p>Any work that commits must be an autonomous transaction.</p>
</li>
<li>
<p>Any rollback must be to a named save point created in the procedure.</p>
</li>
</ul>
<p>If a precommit handler raises an exception, then the entire apply transaction is rolled back, and all of the messages in the transaction are moved to the error queue.</p>
<p>For example, a precommit handler can be used for auditing the row LCRs applied by an apply process. Such a precommit handler is used with one or more separate <a href="strms_glossary.htm#CHDEAFJH"><span class="xrefglossterm">procedure DML handler</span></a>s to record the source database commit SCN for a transaction, and possibly the time when the apply process applies the transaction, in an audit table.</p>
<p>Specifically, this example creates a precommit handler that is used with a procedure DML handler that records information about row LCRs in the following table:</p>
<pre>
CREATE TABLE strmadmin.history_row_lcrs(
  timestamp             DATE,
  source_database_name  VARCHAR2(128),
  command_type          VARCHAR2(30),
  object_owner          VARCHAR2(32),
  object_name           VARCHAR2(32),
  tag                   RAW(10),
  transaction_id        VARCHAR2(10),
  scn                   NUMBER,
  commit_scn            NUMBER,
  old_values            SYS.LCR$_ROW_LIST,
  new_values            SYS.LCR$_ROW_LIST)
    NESTED TABLE old_values STORE AS old_values_ntab
    NESTED TABLE new_values STORE AS new_values_ntab;
</pre>
<p>The procedure DML handler inserts a row in the <code>strmadmin.history_row_lcrs</code> table for each row LCR processed by an apply process. The precommit handler created in this example inserts a row into the <code>strmadmin.history_row_lcrs</code> table when a transaction commits.</p>
<p>Create the procedure that inserts the commit information into the <code>history_row_lcrs</code> table:</p>
<pre>
CREATE OR REPLACE PROCEDURE strmadmin.history_commit(commit_number IN NUMBER)  
 IS
 BEGIN
  -- Insert commit information into the history_row_lcrs table
  INSERT INTO strmadmin.history_row_lcrs (timestamp, commit_scn) 
    VALUES (SYSDATE, commit_number);
END;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_apply.htm#i1008356">"Precommit Handlers"</a></p>
</li>
<li>
<p><a href="#BGBJHGHG">"Managing a DML Handler"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDEAEEI"></a>
<div id="STRMS765" class="sect2">
<h3 class="sect2">Setting the Precommit Handler for an Apply Process<a id="sthref805"></a><a id="sthref806"></a></h3>
<p>A precommit handler processes all commit directives dequeued by an <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>. When you set a precommit handler for an apply process, the apply process uses it to process all of the commit directives that it dequeues. An apply process can have only one precommit handler.</p>
<p>Set the precommit handler for an apply process using the <code>precommit_handler</code> parameter in the <code>ALTER_APPLY</code> procedure in the <code>DBMS_APPLY_ADM</code> package. For example, the following procedure sets the precommit handler for an apply process named <code>strm01_apply</code> to the <code>history_commit</code> procedure in the <code>strmadmin</code> schema.</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.ALTER_APPLY(
    apply_name        =&gt; 'strm01_apply',
    precommit_handler =&gt; 'strmadmin.history_commit');
END;
/
</pre>
<p>You can also specify a precommit handler when you create an apply process using the <code>CREATE_APPLY</code> procedure in the <code>DBMS_APPLY_ADM</code> package. If the precommit handler is already set for an apply process, then you can run the <code>ALTER_APPLY</code> procedure to change the precommit handler for the apply process.</p>
</div>
<!-- class="sect2" -->
<a id="CHDICJFD"></a>
<div id="STRMS767" class="sect2">
<h3 class="sect2">Unsetting the Precommit Handler for an Apply Process<a id="sthref807"></a><a id="sthref808"></a></h3>
<p>You unset the <a href="strms_glossary.htm#CHDGJIFI"><span class="xrefglossterm">precommit handler</span></a> for an <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a> by setting the <code>remove_precommit_handler</code> parameter to <code>TRUE</code> in the <code>ALTER_APPLY</code> procedure in the <code>DBMS_APPLY_ADM</code> package. For example, the following procedure unsets the precommit handler for an apply process named <code>strm01_apply</code>.</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.ALTER_APPLY(
    apply_name               =&gt; 'strm01_apply',
    remove_precommit_handler =&gt; TRUE);
END;
/
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008466"></a>
<div id="STRMS128" class="sect1">
<h2 class="sect1">Specifying That Apply Processes Enqueue Messages<a id="sthref809"></a><a id="sthref810"></a></h2>
<p>This section contains instructions for setting a destination <a href="strms_glossary.htm#CHDIDCDI"><span class="xrefglossterm">queue</span></a> into which <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>es that use a specified <a href="strms_glossary.htm#CHDIFFCF"><span class="xrefglossterm">rule</span></a> in a <a href="strms_glossary.htm#CHDEEDIJ"><span class="xrefglossterm">positive rule set</span></a> will enqueue <a href="strms_glossary.htm#CHDFHHGJ"><span class="xrefglossterm">message</span></a>s that satisfy the rule. This section also contains instructions for removing destination queue settings.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="strms_apmon.htm#i1013210">"Viewing Rules that Specify a Destination Queue on Apply"</a></div>
<a id="CHDCHAGD"></a>
<div id="STRMS769" class="sect2">
<h3 class="sect2">Setting the Destination Queue for Messages that Satisfy a Rule</h3>
<p>You use the <code>SET_ENQUEUE_DESTINATION</code> procedure in the <code>DBMS_APPLY_ADM</code> package to set a destination <a href="strms_glossary.htm#CHDIDCDI"><span class="xrefglossterm">queue</span></a> for <a href="strms_glossary.htm#CHDFHHGJ"><span class="xrefglossterm">message</span></a>s that satisfy a specific <a href="strms_glossary.htm#CHDIFFCF"><span class="xrefglossterm">rule</span></a>. For example, to set the destination queue for a rule named <code>employees5</code> to the queue <code>hr.change_queue</code>, run the following procedure:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_ENQUEUE_DESTINATION(
    rule_name               =&gt;  'employees5',
    destination_queue_name  =&gt;  'hr.change_queue');
END;
/
</pre>
<p>This procedure modifies the <a href="strms_glossary.htm#CBACHAJI"><span class="xrefglossterm">action context</span></a> of the rule to specify the queue. Any <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a> in the local database with the <code>employees5</code> rule in its <a href="strms_glossary.htm#CHDEEDIJ"><span class="xrefglossterm">positive rule set</span></a> will enqueue a message into <code>hr.change_queue</code> if the message satisfies the <code>employees5</code> rule. To change the destination queue for the <code>employees5</code> rule, run the <code>SET_ENQUEUE_DESTINATION</code> procedure again and specify a different queue.</p>
<p>The <a href="strms_glossary.htm#CHDGCCIF"><span class="xrefglossterm">apply user</span></a> of each apply process using the specified rule must have the necessary privileges to enqueue messages into the specified queue. If the queue is a <a href="strms_glossary.htm#CHDGHFGG"><span class="xrefglossterm">secure queue</span></a>, then the apply user must be a secure queue user of the queue.</p>
<p>A message that has been enqueued using the <code>SET_ENQUEUE_DESTINATION</code> procedure is the same as any other message that is enqueued manually. Such messages can be manually dequeued, applied by an apply process created with the <code>apply_captured</code> parameter set to <code>FALSE</code>, or propagated to another queue.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The specified rule must be in the positive rule set for an apply process. If the rule is in the <a href="strms_glossary.htm#CHDBHJHI"><span class="xrefglossterm">negative rule set</span></a> for an apply process, then the apply process does not enqueue the message into the destination queue.</p>
</li>
<li>
<p>The apply process always enqueues messages into a <a href="strms_glossary.htm#CBAEIBGJ"><span class="xrefglossterm">persistent queue</span></a>. It cannot enqueue messages into a <a href="strms_glossary.htm#CHDFJFED"><span class="xrefglossterm">buffered queue</span></a>.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_mprop.htm#i1006228">"Enabling a User to Perform Operations on a Secure Queue"</a></p>
</li>
<li>
<p><a href="strms_adrules.htm#i1010177">"Enqueue Destinations for Messages During Apply"</a> for more information about how the <code>SET_ENQUEUE_DESTINATION</code> procedure modifies the action context of the specified rule</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="STRMS770" class="sect2"><a id="sthref811"></a>
<h3 class="sect2">Removing the Destination Queue Setting for a Rule</h3>
<p>You use the <code>SET_ENQUEUE_DESTINATION</code> procedure in the <code>DBMS_APPLY_ADM</code> package to remove a destination <a href="strms_glossary.htm#CHDIDCDI"><span class="xrefglossterm">queue</span></a> for <a href="strms_glossary.htm#CHDFHHGJ"><span class="xrefglossterm">message</span></a>s that satisfy a specified <a href="strms_glossary.htm#CHDIFFCF"><span class="xrefglossterm">rule</span></a>. Specifically, you set the <code>destination_queue_name</code> parameter in this procedure to <code>NULL</code> for the rule. When a destination queue specification is removed for a rule, messages that satisfy the rule are no longer enqueued into the queue by an <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>.</p>
<p>For example, to remove the destination queue for a rule named <code>employees5</code>, run the following procedure:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_ENQUEUE_DESTINATION(
    rule_name               =&gt;  'employees5',
    destination_queue_name  =&gt;  NULL);
END;
/
</pre>
<p>Any apply process in the local database with the <code>employees5</code> rule in its <a href="strms_glossary.htm#CHDEEDIJ"><span class="xrefglossterm">positive rule set</span></a> no longer enqueues a message into <code>hr.change_queue</code> if the message satisfies the <code>employees5</code> rule.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008467"></a>
<div id="STRMS771" class="sect1">
<h2 class="sect1">Specifying Execute Directives for Apply Processes<a id="sthref812"></a><a id="sthref813"></a></h2>
<p>This section contains instructions for setting an <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a> execute directive for <a href="strms_glossary.htm#CHDFHHGJ"><span class="xrefglossterm">message</span></a>s that satisfy a specified <a href="strms_glossary.htm#CHDIFFCF"><span class="xrefglossterm">rule</span></a> in the <a href="strms_glossary.htm#CHDEEDIJ"><span class="xrefglossterm">positive rule set</span></a> for the apply process.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="strms_apmon.htm#i1013211">"Viewing Rules that Specify No Execution on Apply"</a></div>
<div id="STRMS772" class="sect2"><a id="sthref814"></a>
<h3 class="sect2">Specifying that Messages that Satisfy a Rule Are Not Executed</h3>
<p>You use the <code>SET_EXECUTE</code> procedure in the <code>DBMS_APPLY_ADM</code> package to specify that <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>es do not execute <a href="strms_glossary.htm#CHDFHHGJ"><span class="xrefglossterm">message</span></a>s that satisfy a specified <a href="strms_glossary.htm#CHDIFFCF"><span class="xrefglossterm">rule</span></a>. Specifically, you set the <code>execute</code> parameter in this procedure to <code>FALSE</code> for the rule. After setting the execution directive to <code>FALSE</code> for a rule, an apply process with the rule in its <a href="strms_glossary.htm#CHDEEDIJ"><span class="xrefglossterm">positive rule set</span></a> does not execute a message that satisfies the rule.</p>
<p>For example, to specify that apply processes do not execute messages that satisfy a rule named <code>departments8</code>, run the following procedure:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_EXECUTE(
    rule_name   =&gt;  'departments8',
    execute     =&gt;  FALSE);
END;
/
</pre>
<p>This procedure modifies the <a href="strms_glossary.htm#CBACHAJI"><span class="xrefglossterm">action context</span></a> of the rule to specify the execution directive. Any apply process in the local database with the <code>departments8</code> rule in its positive rule set will not execute a message if the message satisfies the <code>departments8</code> rule. That is, if the message is an LCR, then an apply process does not apply the change in the LCR to the relevant database object. Also, an apply process does not send a message that satisfies this rule to any <a href="strms_glossary.htm#CHDCJAED"><span class="xrefglossterm">apply handler</span></a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>The specified rule must be in the positive rule set for an apply process for the apply process to follow the execution directive. If the rule is in the <a href="strms_glossary.htm#CHDBHJHI"><span class="xrefglossterm">negative rule set</span></a> for an apply process, then the apply process ignores the execution directive for the rule.</p>
</li>
<li>
<p>The <code>SET_EXECUTE</code> procedure can be used with the <code>SET_ENQUEUE_DESTINATION</code> procedure to enqueue messages that satisfy a particular rule into a destination <a href="strms_glossary.htm#CHDIDCDI"><span class="xrefglossterm">queue</span></a> without executing these messages. After a message is enqueued using the <code>SET_ENQUEUE_DESTINATION</code> procedure, it is the same as any message that is enqueued manually. Therefore, it can be manually dequeued, applied by an apply process, or propagated to another queue.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_adrules.htm#i1021609">"Execution Directives for Messages During Apply"</a> for more information about how the <code>SET_EXECUTE</code> procedure modifies the action context of the specified rule</p>
</li>
<li>
<p><a href="#i1008466">"Specifying That Apply Processes Enqueue Messages"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="STRMS773" class="sect2"><a id="sthref815"></a>
<h3 class="sect2">Specifying that Messages that Satisfy a Rule Are Executed</h3>
<p>You use the <code>SET_EXECUTE</code> procedure in the <code>DBMS_APPLY_ADM</code> package to specify that <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>es execute <a href="strms_glossary.htm#CHDFHHGJ"><span class="xrefglossterm">message</span></a>s that satisfy a specified <a href="strms_glossary.htm#CHDIFFCF"><span class="xrefglossterm">rule</span></a>. Specifically, you set the <code>execute</code> parameter in this procedure to <code>TRUE</code> for the rule. By default, each apply process executes messages that satisfy a rule in the <a href="strms_glossary.htm#CHDEEDIJ"><span class="xrefglossterm">positive rule set</span></a> for the apply process, assuming that the message does not satisfy a rule in the <a href="strms_glossary.htm#CHDBHJHI"><span class="xrefglossterm">negative rule set</span></a> for the apply process. Therefore, you must set the <code>execute</code> parameter to <code>TRUE</code> for a rule only if this parameter was set to <code>FALSE</code> for the rule earlier.</p>
<p>For example, to specify that apply processes executes messages that satisfy a rule named <code>departments8</code>, run the following procedure:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_EXECUTE(
    rule_name   =&gt;  'departments8',
    execute     =&gt;  TRUE);
END;
/
</pre>
<p>Any apply process in the local database with the <code>departments8</code> rule in its positive rule set will execute a message if the message satisfies the <code>departments8</code> rule. That is, if the message is an LCR, then an apply process applies the change in the LCR to the relevant database object. Also, an apply process sends a message that satisfies this rule to an <a href="strms_glossary.htm#CHDCJAED"><span class="xrefglossterm">apply handler</span></a> if it is configured to do so.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1010565"></a>
<div id="STRMS144" class="sect1">
<h2 class="sect1">Managing an Error Handler<a id="sthref816"></a><a id="sthref817"></a></h2>
<p>An <a href="strms_glossary.htm#CHDJFGCJ"><span class="xrefglossterm">error handler</span></a> handles errors resulting from a row LCR dequeued by any <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a> that contains a specific operation on a specific table.</p>
<p>The following sections contain instructions for creating, setting, and unsetting an error handler:</p>
<ul>
<li>
<p><a href="#CHDBABAC">Creating an Error Handler</a></p>
</li>
<li>
<p><a href="#CHDDIAAB">Setting an Error Handler</a></p>
</li>
<li>
<p><a href="#CHDICEFE">Unsetting an Error Handler</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_apply.htm#BGBCDIDA">"Types of Messages That Can Be Processed with an Apply Process"</a></p>
</li>
<li>
<p><a href="strms_apply.htm#i1006214">"Message Processing Options for an Apply Process"</a></p>
</li>
</ul>
</div>
<a id="CHDBABAC"></a>
<div id="STRMS774" class="sect2">
<h3 class="sect2">Creating an Error Handler<a id="sthref818"></a></h3>
<p>You create an <a href="strms_glossary.htm#CHDJFGCJ"><span class="xrefglossterm">error handler</span></a> by running the <code>SET_DML_HANDLER</code> procedure in the <code>DBMS_APPLY_ADM</code> package and setting the <code>error_handler</code> parameter to <code>TRUE</code>.</p>
<p>An error handler must have the following signature:</p>
<pre>
PROCEDURE <span class="italic">user_procedure</span> (
     message             IN ANYDATA,
     error_stack_depth   IN NUMBER,
     error_numbers       IN DBMS_UTILITY.NUMBER_ARRAY,
     error_messages      IN emsg_array);
</pre>
<p>Here, <code><span class="codeinlineitalic">user_procedure</span></code> stands for the name of the procedure. Each parameter is required and must have the specified data type. However, you can change the names of the parameters. The <code>emsg_array</code> parameter must be a user-defined array that is a PL/SQL table of type <code>VARCHAR2</code> with at least 76 characters.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Some conditions on the user procedure specified in <code>SET_DML_HANDLER</code> must be met for error handlers. See <a href="#BGBJHGHG">"Managing a DML Handler"</a> for information about these conditions.</div>
<p>Running an error handler results in one of the following outcomes:</p>
<ul>
<li>
<p>The error handler successfully resolves the error, applies the row LCR if appropriate, and returns control back to the <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>.</p>
</li>
<li>
<p>The error handler fails to resolve the error, and the error is raised. The raised error causes the transaction to be rolled back and placed in the error queue.</p>
</li>
</ul>
<p>If you want to retry the DML operation, then have the error handler procedure run the <code>EXECUTE</code> member procedure for the LCR.</p>
<p>The following example creates an error handler named <code>regions_pk_error</code> that resolves primary key violations for the <code>hr.regions</code> table. At a <a href="strms_glossary.htm#CHDGCAJA"><span class="xrefglossterm">destination database</span></a>, assume users insert rows into the <code>hr.regions</code> table and an apply process applies changes to the <code>hr.regions</code> table that originated from a <a href="strms_glossary.htm#CHDBHECD"><span class="xrefglossterm">capture process</span></a> at a remote <a href="strms_glossary.htm#CHDHFBJG"><span class="xrefglossterm">source database</span></a>. In this environment, there is a possibility of errors resulting from users at the destination database inserting a row with the same primary key value as an insert row LCR applied from the source database.</p>
<p>This example creates a table in the <code>strmadmin</code> schema called <code>errorlog</code> to record the following information about each primary key violation error on the <code>hr.regions</code> table:</p>
<ul>
<li>
<p>The time stamp when the error occurred</p>
</li>
<li>
<p>The name of the apply process that raised the error</p>
</li>
<li>
<p>The user who caused the error (sender), which is the capture process name for <a href="strms_glossary.htm#CHDCHEJI"><span class="xrefglossterm">captured LCR</span></a>s, the <a href="strms_glossary.htm#CBACHEDJ"><span class="xrefglossterm">synchronous capture</span></a> name for <a href="strms_glossary.htm#CBAGDEIH"><span class="xrefglossterm">persistent LCR</span></a>s captured by the synchronous capture, or the name of the Oracle Streams Advanced Queuing (AQ) agent for <a href="strms_glossary.htm#CBAGDEIH"><span class="xrefglossterm">persistent LCR</span></a>s and <a href="strms_glossary.htm#CBAGGIDA"><span class="xrefglossterm">persistent user message</span></a>s enqueued by an application</p>
</li>
<li>
<p>The name of the object on which the DML operation was run, because errors for other objects might be logged in the future</p>
</li>
<li>
<p>The type of command used in the DML operation</p>
</li>
<li>
<p>The name of the constraint violated</p>
</li>
<li>
<p>The error message</p>
</li>
<li>
<p>The LCR that caused the error</p>
</li>
</ul>
<p>This error handler resolves only errors that are caused by a primary key violation on the <code>hr.regions</code> table. To resolve this type of error, the error handler modifies the <code>region_id</code> value in the row LCR using a sequence and then executes the row LCR to apply it. If other types of errors occur, then you can use the row LCR you stored in the <code>errorlog</code> table to resolve the error manually.</p>
<p>For example, the following error is resolved by the error handler:</p>
<ol>
<li>
<p>At the destination database, a user inserts a row into the <code>hr.regions</code> table with a <code>region_id</code> value of <code>6</code> and a <code>region_name</code> value of <code>'LILLIPUT'</code>.</p>
</li>
<li id="i1010617">
<p>At the source database, a user inserts a row into the <code>hr.regions</code> table with a <code>region_id</code> value of <code>6</code> and a <code>region_name</code> value of <code>'BROBDINGNAG'</code>.</p>
</li>
<li>
<p>A capture process at the source database captures the change described in Step&nbsp;<a href="#i1010617">2</a>.</p>
</li>
<li>
<p>A <a href="strms_glossary.htm#CHDEICIC"><span class="xrefglossterm">propagation</span></a> propagates the LCR containing the change from a queue at the source database to the queue used by the apply process at the destination database.</p>
</li>
<li>
<p>When the apply process tries to apply the LCR, an error results because of a primary key violation.</p>
</li>
<li>
<p>The apply process invokes the error handler to handle the error.</p>
</li>
<li>
<p>The error handler logs the error in the <code>strmadmin.errorlog</code> table.</p>
</li>
<li>
<p>The error handler modifies the <code>region_id</code> value in the LCR using a sequence and executes the LCR to apply it.</p>
</li>
</ol>
<p>Complete the following steps to create the <code>regions_pk_error</code> error handler:</p>
<ol>
<li>
<p>In SQL*Plus, connect to the database as the <code>hr</code> user.</p>
<p>See <a class="olink ADMIN00102" href="../../server.112/e25494/dba.htm#ADMIN00102"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about connecting to a database in SQL*Plus.</p>
</li>
<li>
<p>Create the sequence used by the error handler to assign new primary key values:</p>
<pre>
CREATE SEQUENCE hr.reg_exception_s START WITH 9000;
</pre>
<p>This example assumes that users at the destination database will never insert a row into the <code>hr.regions</code> table with a <code>region_id</code> greater than <code>8999</code>.</p>
</li>
<li>
<p>Grant the Oracle Streams administrator <code>ALL</code> privilege on the sequence:</p>
<pre>
GRANT ALL ON reg_exception_s TO strmadmin;
</pre></li>
<li>
<p>Connect to the database as the Oracle Streams administrator.</p>
</li>
<li>
<p>Create the <code>errorlog</code> table:</p>
<pre>
CREATE TABLE strmadmin.errorlog(
  logdate       DATE,
  apply_name    VARCHAR2(30),
  sender        VARCHAR2(100),
  object_name   VARCHAR2(32),
  command_type  VARCHAR2(30),
  errnum        NUMBER,
  errmsg        VARCHAR2(2000),
  text          VARCHAR2(2000),
  lcr           SYS.LCR$_ROW_RECORD);
</pre></li>
<li>
<p>Create a package that includes the <code>regions_pk_error</code> procedure:</p>
<pre>
CREATE OR REPLACE PACKAGE errors_pkg 
AS
 TYPE emsg_array IS TABLE OF VARCHAR2(2000) INDEX BY BINARY_INTEGER;
 PROCEDURE regions_pk_error( 
   message            IN ANYDATA,
   error_stack_depth  IN NUMBER,
   error_numbers      IN DBMS_UTILITY.NUMBER_ARRAY,
   error_messages     IN EMSG_ARRAY);
END errors_pkg ;
/
</pre></li>
<li>
<p><a id="sthref819"></a><a id="sthref820"></a><a id="sthref821"></a><a id="sthref822"></a><a id="sthref823"></a><a id="sthref824"></a><a id="sthref825"></a><a id="sthref826"></a><a id="sthref827"></a>Create the package body:</p>
<pre>
CREATE OR REPLACE PACKAGE BODY errors_pkg AS
 PROCEDURE regions_pk_error ( 
   message            IN ANYDATA,
   error_stack_depth  IN NUMBER,
   error_numbers      IN DBMS_UTILITY.NUMBER_ARRAY,
   error_messages     IN EMSG_ARRAY )
 IS
  reg_id     NUMBER;
  ad         ANYDATA;
  lcr        SYS.LCR$_ROW_RECORD;
  ret        PLS_INTEGER;
  vc         VARCHAR2(30);
  apply_name VARCHAR2(30);
  errlog_rec errorlog%ROWTYPE ;
  ov2        SYS.LCR$_ROW_LIST;
 BEGIN
  -- Access the error number from the top of the stack.
  -- In case of check constraint violation,
  -- get the name of the constraint violated.
  IF error_numbers(1) IN ( 1 , 2290 ) THEN
   ad  := DBMS_STREAMS.GET_INFORMATION('CONSTRAINT_NAME');
   ret := ad.GetVarchar2(errlog_rec.text);
  ELSE 
   errlog_rec.text := NULL ;
  END IF ;
  -- Get the name of the sender and the name of the apply process.
  ad  := DBMS_STREAMS.GET_INFORMATION('SENDER');
  ret := ad.GETVARCHAR2(errlog_rec.sender);
  apply_name := DBMS_STREAMS.GET_STREAMS_NAME();
  -- Try to access the LCR.
  ret := message.GETOBJECT(lcr);
  errlog_rec.object_name  := lcr.GET_OBJECT_NAME() ;
  errlog_rec.command_type := lcr.GET_COMMAND_TYPE() ;
  errlog_rec.errnum := error_numbers(1) ;
  errlog_rec.errmsg := error_messages(1) ;
  INSERT INTO strmadmin.errorlog VALUES (SYSDATE, apply_name, 
       errlog_rec.sender, errlog_rec.object_name, errlog_rec.command_type, 
       errlog_rec.errnum, errlog_rec.errmsg, errlog_rec.text, lcr);
  -- Add the logic to change the contents of LCR with correct values.
  -- In this example, get a new region_id number 
  -- from the hr.reg_exception_s sequence.
  ov2 := lcr.GET_VALUES('new', 'n');
  FOR i IN 1 .. ov2.count
  LOOP
    IF ov2(i).column_name = 'REGION_ID' THEN
     SELECT hr.reg_exception_s.NEXTVAL INTO reg_id FROM DUAL; 
     ov2(i).data := ANYDATA.ConvertNumber(reg_id) ;
    END IF ;
  END LOOP ;
  -- Set the NEW values in the LCR.
  lcr.SET_VALUES(value_type =&gt; 'NEW', value_list =&gt; ov2);
  -- Execute the modified LCR to apply it.
  lcr.EXECUTE(TRUE);
 END regions_pk_error;
END errors_pkg;
/
</pre></li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>For subsequent changes to the modified row to be applied successfully, you should converge the rows at the two databases as quickly as possible. That is, you should make the <code>region_id</code> for the row match at the source and destination database. If you do not want these manual changes to be recaptured at a database, then use the <code>SET_TAG</code> procedure in the <code>DBMS_STREAMS</code> package to set the <a href="strms_glossary.htm#CHDBJJHH"><span class="xrefglossterm">tag</span></a> for the session in which you make the change to a value that is not captured.</p>
</li>
<li>
<p>This example error handler illustrates the use of the <code>GET_VALUES</code> member function and <code>SET_VALUES</code> member procedure for the LCR. If you are modifying only one value in the LCR, then the <code>GET_VALUE</code> member function and <code>SET_VALUE</code> member procedure might be more convenient and more efficient.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink STREP120" href="../../server.112/e10705/rep_tags.htm#STREP120"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a> for more information about setting tag values generated by the current session</p>
</li>
<li>
<p><a href="strms_trapply.htm#i1013873">"Are There Any Apply Errors in the Error Queue?"</a> for information about specific error messages to handle in an error handler</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDDIAAB"></a>
<div id="STRMS775" class="sect2">
<h3 class="sect2">Setting an Error Handler<a id="sthref828"></a><a id="sthref829"></a></h3>
<p>An <a href="strms_glossary.htm#CHDJFGCJ"><span class="xrefglossterm">error handler</span></a> handles errors resulting from a row LCR dequeued by any <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a> that contains a specific operation on a specific table. You can specify multiple error handlers on the same table, to handle errors resulting from different operations on the table. You can either set an error handler for a specific apply process, or you can set an error handler as a general error handler that is used by all apply processes that apply the specified operation to the specified table.</p>
<p>Set an error handler using the <code>SET_DML_HANDLER</code> procedure in the <code>DBMS_APPLY_ADM</code> package. When you run this procedure to set an error handler, set the <code>error_handler</code> parameter to <code>TRUE</code>.</p>
<p>For example, the following procedure sets the error handler for <code>INSERT</code> operations on the <code>hr.regions</code> table. Therefore, when any apply process dequeues a row LCR containing an <code>INSERT</code> operation on the local <code>hr.regions</code> table, and the row LCR results in an error, the apply process sends the row LCR to the <code>strmadmin.errors_pkg.regions_pk_error</code> PL/SQL procedure for processing. If the error handler cannot resolve the error, then the row LCR and all of the other row LCRs in the same transaction are moved to the error queue.</p>
<p>In this example, the <code>apply_name</code> parameter is set to <code>NULL</code>. Therefore, the error handler is a general error handler that is used by all of the apply processes in the database.</p>
<p>Run the following procedure to set the error handler:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_DML_HANDLER(
    object_name         =&gt; 'hr.regions',
    object_type         =&gt; 'TABLE',
    operation_name      =&gt; 'INSERT',
    error_handler       =&gt; TRUE,
    user_procedure      =&gt; 'strmadmin.errors_pkg.regions_pk_error',
    apply_database_link =&gt; NULL,
    apply_name          =&gt; NULL);
END;
/
</pre>
<p>If the error handler is already set, then you can run the <code>SET_DML_HANDLER</code> procedure to change the error handler.</p>
</div>
<!-- class="sect2" -->
<a id="CHDICEFE"></a>
<div id="STRMS776" class="sect2">
<h3 class="sect2">Unsetting an Error Handler<a id="sthref830"></a><a id="sthref831"></a></h3>
<p>You unset an <a href="strms_glossary.htm#CHDJFGCJ"><span class="xrefglossterm">error handler</span></a> using the <code>SET_DML_HANDLER</code> procedure in the <code>DBMS_APPLY_ADM</code> package. When you run that procedure, set the <code>user_procedure</code> parameter to <code>NULL</code> for a specific operation on a specific table.</p>
<p>For example, the following procedure unsets the error handler for <code>INSERT</code> operations on the <code>hr.regions</code> table:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_DML_HANDLER(
    object_name    =&gt; 'hr.regions',
    object_type    =&gt; 'TABLE',
    operation_name =&gt; 'INSERT',
    user_procedure =&gt; NULL,
    apply_name     =&gt; NULL);
END;
/
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>error_handler</code> parameter does not need to be specified.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1010782"></a>
<div id="STRMS112" class="sect1">
<h2 class="sect1">Managing Apply Errors</h2>
<p>The following sections contain instructions for retrying and deleting apply errors:</p>
<ul>
<li>
<p><a href="#CHDCGGBC">Retrying Apply Error Transactions</a></p>
</li>
<li>
<p><a href="#CHDEEHJJ">Deleting Apply Error Transactions</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_apply.htm#i1008918">"The Error Queue"</a></p>
</li>
<li>
<p><a href="strms_apmon.htm#i1007797">"Checking for Apply Errors"</a></p>
</li>
<li>
<p><a href="strms_apmon.htm#i1007852">"Displaying Detailed Information About Apply Errors"</a></p>
</li>
<li>
<p><a class="olink TDPII175" href="../../server.112/e17516/tdpii_adcont.htm#TDPII175"><span class="italic">Oracle Database 2 Day + Data Replication and Integration Guide</span></a> for instructions on managing apply errors in Oracle Enterprise Manager</p>
</li>
<li>
<p><a href="strms_adapply.htm#i1006927">"Considerations for Applying DML Changes to Tables"</a> for information about the possible causes of apply errors</p>
</li>
</ul>
</div>
<a id="CHDCGGBC"></a>
<div id="STRMS777" class="sect2">
<h3 class="sect2">Retrying Apply Error Transactions<a id="sthref832"></a></h3>
<p>You can retry a specific error transaction or you can retry all error transactions for an <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>. You might need to make DML or DDL changes to database objects to correct the conditions that caused one or more apply errors before you retry error transactions. You can also have one or more <a href="strms_glossary.htm#CHDBHECD"><span class="xrefglossterm">capture process</span></a>es or <a href="strms_glossary.htm#CBACHEDJ"><span class="xrefglossterm">synchronous capture</span></a>s configured to capture changes to the same database objects, but you might not want the changes captured. In this case, you can set the session <a href="strms_glossary.htm#CHDBJJHH"><span class="xrefglossterm">tag</span></a> to a value that will not be captured for the session that makes the changes.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP120" href="../../server.112/e10705/rep_tags.htm#STREP120"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a> for more information about setting tag values generated by the current session</div>
<div id="STRMS778" class="sect3"><a id="sthref833"></a>
<h4 class="sect3">Retrying a Specific Apply Error Transaction<a id="sthref834"></a></h4>
<p>When you retry an error transaction, you can execute it immediately or send the error transaction to a user procedure for modifications before executing it. The following sections provide instructions for each method:</p>
<ul>
<li>
<p><a href="#CHDBDIEG">Retrying a Specific Apply Error Transaction Without a User Procedure</a></p>
</li>
<li>
<p><a href="#CHDIECAE">Retrying a Specific Apply Error Transaction with a User Procedure</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS326" href="../../appdev.112/e40758/d_apply.htm#ARPLS326"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code>EXECUTE_ERROR</code> procedure</div>
<a id="CHDBDIEG"></a>
<div id="STRMS779" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Retrying a Specific Apply Error Transaction Without a User Procedure</h5>
<p>After you correct the conditions that caused an apply error, you can retry the transaction by running the <code>EXECUTE_ERROR</code> procedure in the <code>DBMS_APPLY_ADM</code> package without specifying a user procedure. In this case, the transaction is executed without any custom processing.</p>
<p>For example, to retry a transaction with the transaction identifier <code>5.4.312</code>, run the following procedure:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.EXECUTE_ERROR(
    local_transaction_id =&gt; '5.4.312',
    execute_as_user      =&gt; FALSE,
    user_procedure       =&gt; NULL);
END;
/
</pre>
<p>If <code>execute_as_user</code> is <code>TRUE</code>, then the apply process executes the transaction in the security context of the current user. If <code>execute_as_user</code> is <code>FALSE</code>, then the apply process executes the transaction in the security context of the original receiver of the transaction. The original receiver is the user who was processing the transaction when the error was raised.</p>
<p>In either case, the user who executes the transaction must have privileges to perform DML and DDL changes on the apply objects and to run any <a href="strms_glossary.htm#CHDCJAED"><span class="xrefglossterm">apply handler</span></a>s. This user must also have dequeue privileges on the queue used by the apply process.</p>
</div>
<!-- class="sect4" -->
<a id="CHDIECAE"></a>
<div id="STRMS780" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Retrying a Specific Apply Error Transaction with a User Procedure<a id="sthref835"></a><a id="sthref836"></a><a id="sthref837"></a><a id="sthref838"></a><a id="sthref839"></a></h5>
<p>You can retry an error transaction by running the <code>EXECUTE_ERROR</code> procedure in the <code>DBMS_APPLY_ADM</code> package, and specify a user procedure to modify one or more <a href="strms_glossary.htm#CHDFHHGJ"><span class="xrefglossterm">message</span></a>s in the transaction before the transaction is executed. The modifications should enable successful execution of the transaction. The messages in the transaction can be LCRs or <a href="strms_glossary.htm#CHDDIHEC"><span class="xrefglossterm">user message</span></a>s.</p>
<p>For example, consider a case in which an apply error resulted because of a <a href="strms_glossary.htm#CHDDGDDG"><span class="xrefglossterm">conflict</span></a>. Examination of the error transaction reveals that the old value for the <code>salary</code> column in a row LCR contained the wrong value. Specifically, the current value of the salary of the employee with <code>employee_id</code> of <code>197</code> in the <code>hr.employees</code> table did not match the old value of the salary for this employee in the row LCR. Assume that the current value for this employee is <code>3250</code> in the <code>hr.employees</code> table.</p>
<p>Given this scenario, the following user procedure modifies the salary in the row LCR that caused the error:</p>
<pre>
CREATE OR REPLACE PROCEDURE strmadmin.modify_emp_salary(
  in_any                        IN      ANYDATA,
  error_record                  IN      DBA_APPLY_ERROR%ROWTYPE,
  error_message_number          IN      NUMBER,
  messaging_default_processing  IN OUT  BOOLEAN,
  out_any                       OUT     ANYDATA)
AS
  row_lcr          SYS.LCR$_ROW_RECORD;
  row_lcr_changed  BOOLEAN := FALSE;
  res              NUMBER;
  ob_owner         VARCHAR2(32);
  ob_name          VARCHAR2(32);
  cmd_type         VARCHAR2(30);
  employee_id      NUMBER;
BEGIN
  IF in_any.getTypeName() = 'SYS.LCR$_ROW_RECORD' THEN
    -- Access the LCR
    res := in_any.GETOBJECT(row_lcr);
    -- Determine the owner of the database object for the LCR
    ob_owner := row_lcr.GET_OBJECT_OWNER;
    -- Determine the name of the database object for the LCR
    ob_name := row_lcr.GET_OBJECT_NAME;
    -- Determine the type of DML change
    cmd_type := row_lcr.GET_COMMAND_TYPE;
    IF (ob_owner = 'HR' AND ob_name = 'EMPLOYEES' AND cmd_type = 'UPDATE') THEN
      -- Determine the employee_id of the row change
      IF row_lcr.GET_VALUE('old', 'employee_id') IS NOT NULL THEN
        employee_id := row_lcr.GET_VALUE('old', 'employee_id').ACCESSNUMBER();
        IF (employee_id = 197) THEN
          -- error_record.message_number should equal error_message_number
          row_lcr.SET_VALUE(
          value_type =&gt; 'OLD',
          column_name =&gt; 'salary',
          column_value =&gt; ANYDATA.ConvertNumber(3250));
          row_lcr_changed := TRUE;
        END IF;
      END IF;
    END IF;
  END IF;
  -- Specify that the apply process continues to process the current message
  messaging_default_processing := TRUE;
  -- assign out_any appropriately
  IF row_lcr_changed THEN
    out_any := ANYDATA.ConvertObject(row_lcr);
  ELSE
    out_any := in_any;
  END IF;
END;
/
</pre>
<p>To retry a transaction with the transaction identifier <code>5.6.924</code> and process the transaction with the <code>modify_emp_salary</code> procedure in the <code>strmadmin</code> schema before execution, run the following procedure:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.EXECUTE_ERROR(
    local_transaction_id =&gt; '5.6.924',
    execute_as_user      =&gt; FALSE,
    user_procedure       =&gt; 'strmadmin.modify_emp_salary');
END;
/
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The user who runs the procedure must have <code>SELECT</code> privilege on <code>DBA_APPLY_ERROR</code> data dictionary view.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="strms_apmon.htm#i1007852">"Displaying Detailed Information About Apply Errors"</a></div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div id="STRMS781" class="sect3"><a id="sthref840"></a>
<h4 class="sect3">Retrying All Error Transactions for an Apply Process<a id="sthref841"></a></h4>
<p>After you correct the conditions that caused all of the apply errors for an apply process, you can retry all of the error transactions by running the <code>EXECUTE_ALL_ERRORS</code> procedure in the <code>DBMS_APPLY_ADM</code> package. For example, to retry all of the error transactions for an apply process named <code>strm01_apply</code>, you can run the following procedure:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.EXECUTE_ALL_ERRORS(
    apply_name       =&gt; 'strm01_apply',
    execute_as_user  =&gt; FALSE);
END;
/
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you specify <code>NULL</code> for the <code>apply_name</code> parameter, and you have multiple apply processes, then all of the apply errors are retried for all of the apply processes.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDEEHJJ"></a>
<div id="STRMS782" class="sect2">
<h3 class="sect2">Deleting Apply Error Transactions<a id="sthref842"></a></h3>
<p>You can delete a specific error transaction or you can delete all error transactions for an <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>.</p>
<div id="STRMS783" class="sect3"><a id="sthref843"></a>
<h4 class="sect3">Deleting a Specific Apply Error Transaction<a id="sthref844"></a></h4>
<p>If an error transaction should not be applied, then you can delete the transaction from the error queue using the <code>DELETE_ERROR</code> procedure in the <code>DBMS_APPLY_ADM</code> package. For example, to delete a transaction with the transaction identifier <code>5.4.312</code>, run the following procedure:</p>
<pre>
EXEC DBMS_APPLY_ADM.DELETE_ERROR(local_transaction_id =&gt; '5.4.312');
</pre></div>
<!-- class="sect3" -->
<div id="STRMS784" class="sect3"><a id="sthref845"></a>
<h4 class="sect3">Deleting All Error Transactions for an Apply Process<a id="sthref846"></a></h4>
<p>If none of the error transactions should be applied, then you can delete all of the error transactions by running the <code>DELETE_ALL_ERRORS</code> procedure in the <code>DBMS_APPLY_ADM</code> package. For example, to delete all of the error transactions for an apply process named <code>strm01_apply</code>, you can run the following procedure:</p>
<pre>
EXEC DBMS_APPLY_ADM.DELETE_ALL_ERRORS(apply_name =&gt; 'strm01_apply');
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you specify <code>NULL</code> for the <code>apply_name</code> parameter, and you have multiple apply processes, then all of the apply errors are deleted for all of the apply processes.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBGJICI"></a>
<div id="STRMS785" class="sect1">
<h2 class="sect1">Managing the Substitute Key Columns for a Table</h2>
<p>This section contains instructions for setting and removing the substitute key columns for a table.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_adapply.htm#i1006973">"Substitute Key Columns"</a></p>
</li>
<li>
<p><a href="strms_apmon.htm#CACBGECI">"Displaying the Substitute Key Columns Specified at a Destination Database"</a></p>
</li>
</ul>
</div>
<div id="STRMS786" class="sect2"><a id="sthref847"></a>
<h3 class="sect2">Setting Substitute Key Columns for a Table<a id="sthref848"></a><a id="sthref849"></a></h3>
<p>When an apply process applies changes to a table, substitute key columns can either replace the primary key columns for a table that has a primary key or act as the primary key columns for a table that does not have a primary key. Set the substitute key columns for a table using the <code>SET_KEY_COLUMNS</code> procedure in the <code>DBMS_APPLY_ADM</code> package. This setting applies to all of the apply processes that apply local changes to the database.</p>
<p>For example, to set the substitute key columns for the <code>hr.employees</code> table to the <code>first_name</code>, <code>last_name</code>, and <code>hire_date</code> columns, replacing the <code>employee_id</code> column, run the following procedure:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_KEY_COLUMNS(
    object_name         =&gt; 'hr.employees',
    column_list         =&gt; 'first_name,last_name,hire_date');
END;
/
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>You must specify an unconditional supplemental log group at the source database for all of the columns specified as substitute key columns in the <code>column_list</code> or <code>column_table</code> parameter at the destination database. In this example, you would specify an unconditional supplemental log group including the <code>first_name</code>, <code>last_name</code>, and <code>hire_date</code> columns in the <code>hr.employees</code> table.</p>
</li>
<li>
<p>If an apply process applies changes to a remote non-Oracle database, then it can use different substitute key columns for the same table. You can run the <code>SET_KEY_COLUMNS</code> procedure in the <code>DBMS_APPLY_ADM</code> package to specify substitute key columns for changes that will be applied to a remote non-Oracle database by setting the <code>apply_database_link</code> parameter to a non-<code>NULL</code> value.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="strms_capture.htm#i1007293">"Supplemental Logging in an Oracle Streams Environment"</a></p>
</li>
<li>
<p><a class="olink STREP105" href="../../server.112/e10705/hetero.htm#STREP105"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="STRMS787" class="sect2"><a id="sthref850"></a>
<h3 class="sect2">Removing the Substitute Key Columns for a Table<a id="sthref851"></a><a id="sthref852"></a></h3>
<p>You remove the substitute key columns for a table by specifying <code>NULL</code> for the <code>column_list</code> or <code>column_table</code> parameter in the <code>SET_KEY_COLUMNS</code> procedure in the <code>DBMS_APPLY_ADM</code> package. If the table has a primary key, then the table's primary key is used by any apply process for local changes to the database after you remove the substitute primary key.</p>
<p>For example, to remove the substitute key columns for the <code>hr.employees</code> table, run the following procedure:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_KEY_COLUMNS(
    object_name  =&gt; 'hr.employees',
    column_list  =&gt; NULL);
END;
/
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBBJHCB"></a>
<div id="STRMS788" class="sect1">
<h2 class="sect1">Using Virtual Dependency Definitions<a id="sthref853"></a></h2>
<p>A virtual dependency definition is a description of a dependency that is used by an apply process to detect dependencies between transactions being applied at a destination database. Virtual dependency definitions are useful when apply process parallelism is greater than 1 and dependencies are not described by constraints in the data dictionary at the destination database. There are two types of virtual dependency definitions: value dependencies and object dependencies.</p>
<p>A value dependency defines a table constraint, such as a unique key, or a relationship between the columns of two or more tables. An object dependency defines a parent-child relationship between two objects at a destination database.</p>
<p>The following sections describe using virtual dependency definitions:</p>
<ul>
<li>
<p><a href="#BGBJCIBF">Setting and Unsetting Value Dependencies</a></p>
</li>
<li>
<p><a href="#BGBIJHBC">Creating and Dropping Object Dependencies</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="strms_adapply.htm#BABDFDBI">"Apply Processes and Dependencies"</a> for more information about virtual dependency definitions</div>
<a id="BGBJCIBF"></a>
<div id="STRMS789" class="sect2">
<h3 class="sect2">Setting and Unsetting Value Dependencies<a id="sthref854"></a></h3>
<p>Use the <code>SET_VALUE_DEPENDENCY</code> procedure in the <code>DBMS_APPLY_ADM</code> package to set or unset a value dependency. The following sections describe scenarios for using value dependencies:</p>
<ul>
<li>
<p><a href="#BGBBHIFJ">Schema Differences and Value Dependencies</a></p>
</li>
<li>
<p><a href="#BGBGADCC">Undefined Constraints at the Destination Database and Value Dependencies</a></p>
</li>
</ul>
<a id="BGBBHIFJ"></a>
<div id="STRMS790" class="sect3">
<h4 class="sect3">Schema Differences and Value Dependencies</h4>
<p>This scenario involves an environment that shares many tables between a source database and destination database, but the schema that owns the tables is different at these two databases. Also, in this replication environment, the source database is in the United States and the destination database is in England. A design firm uses dozens of tables to describe product designs, but the tables use United States measurements (inches, feet, and so on) in the source database and metric measurements in the destination database. The name of the schema that owns the database objects at the source database is <code>us_designs</code>, while the name of the schema at the destination database is <code>uk_designs</code>. Therefore, the schema name of the shared database objects must be changed before apply, and all of the measurements must be converted from United States measurements to metric measurements. Both databases use the same constraints to enforce dependencies between database objects.</p>
<p>Rule-based transformations could make the required changes, but the goal is to apply multiple LCRs in parallel. Rule-based transformations must apply LCRs serially. So, a procedure DML handler is configured at the destination database to make the required changes to the LCRs, and apply process parallelism is set to 5. In this environment, the destination database has no information about the schema <code>us_designs</code> in the LCRs being sent from the source database. Because an apply process calculates dependencies before passing LCRs to apply handlers, the apply process must be informed about the dependencies between LCRs. Value dependencies can describe these dependencies.</p>
<p>In this scenario, suppose several tables describe different designs, and each of these tables has a primary key. One of these tables is <code>design_53</code>, and the primary key column is <code>key_53</code>. Also, a table named <code>all_designs_summary</code> includes a summary of all of the individual designs, and this table has a foreign key column for each design table. The <code>all_designs_summary</code> includes a key_53 column, which is a foreign key of the primary key in the <code>design_53</code> table. To inform an apply process about the relationship between these tables, run the following procedures to create a value dependency at the destination database:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_VALUE_DEPENDENCY(
    dependency_name   =&gt; 'key_53_foreign_key',
    object_name       =&gt; 'us_designs.design_53',
    attribute_list    =&gt; 'key_53');
END;
/
</pre>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_VALUE_DEPENDENCY(
    dependency_name   =&gt; 'key_53_foreign_key',
    object_name       =&gt; 'us_designs.all_designs_summary',
    attribute_list    =&gt; 'key_53');
END;
/
</pre>
<p>Notice that the value dependencies use the schema at the source database (<code>us_designs</code>) because LCRs contain the source database schema. The schema will be changed to <code>uk_designs</code> by the procedure DML handler after the apply process passes the row LCRs to the handler.</p>
<p>To unset a value dependency, run the <code>SET_VALUE_DEPENDENCY</code> procedure, and specify the name of the value dependency in the <code>dependency_name</code> parameter and <code>NULL</code> in the <code>object_name</code> parameter. For example, to unset the <code>key_53_foreign_key</code> value dependency that was set previously, run the following procedure:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_VALUE_DEPENDENCY(
    dependency_name   =&gt; 'key_53_foreign_key',
    object_name       =&gt; NULL,
    attribute_list    =&gt; NULL);
END;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BGBJHGHG">"Managing a DML Handler"</a></div>
</div>
<!-- class="sect3" -->
<a id="BGBGADCC"></a>
<div id="STRMS791" class="sect3">
<h4 class="sect3">Undefined Constraints at the Destination Database and Value Dependencies</h4>
<p>This scenarios involves an environment in which foreign key constraints are used for shared tables at the source database, but no constraints are used for these tables at the destination database. In the replication environment, the destination database is used as a data warehouse where data is written to the database far more often than it is queried. To optimize write operations, no constraints are defined at the destination database.</p>
<p>In such an environment, an apply processes running on the destination database must be informed about the constraints to apply transactions consistently. Value dependencies can inform the apply process about these constraints.</p>
<p>For example, assume that the <code>orders</code> and <code>order_items</code> tables in the <code>oe</code> schema are shared between the source database and the destination database in this environment. On the source database, the <code>order_id</code> column is a primary key in the <code>orders</code> table, and the <code>order_id</code> column in the <code>order_items</code> table is a foreign key that matches the primary key column in the <code>orders</code> table. At the destination database, these constraints have been removed. Run the following procedures to create a value dependency at the destination database that informs apply processes about the relationship between the columns in these tables:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_VALUE_DEPENDENCY(
    dependency_name   =&gt; 'order_id_foreign_key',
    object_name       =&gt; 'oe.orders',
    attribute_list    =&gt; 'order_id');
END;
/
</pre>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_VALUE_DEPENDENCY(
    dependency_name   =&gt; 'order_id_foreign_key',
    object_name       =&gt; 'oe.order_items',
    attribute_list    =&gt; 'order_id');
END;
/
</pre>
<p>Also, in this environment, the following actions should be performed so that apply processes can apply transactions consistently:</p>
<ul>
<li>
<p>Value dependencies should be set for each column that has a unique key or bitmap index at the source database.</p>
</li>
<li>
<p>The <code>DBMS_APPLY_ADM.SET_KEY_COLUMNS</code> procedure should set substitute key columns for the columns that are primary key columns at the source database.</p>
</li>
</ul>
<p>To unset the value dependency that was set previously, run the following procedure:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.SET_VALUE_DEPENDENCY(
    dependency_name   =&gt; 'order_id_foreign_key',
    object_name       =&gt; NULL,
    attribute_list    =&gt; NULL);
END;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BGBGJICI">"Managing the Substitute Key Columns for a Table"</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BGBIJHBC"></a>
<div id="STRMS792" class="sect2">
<h3 class="sect2">Creating and Dropping Object Dependencies<a id="sthref855"></a></h3>
<p>Use the <code>CREATE_OBJECT_DEPENDENCY</code> and <code>DROP_OBJECT_DEPENDENCY</code> procedures in the <code>DBMS_APPLY_ADM</code> package to create or drop an object dependency. The following sections provide detailed instructions for creating and dropping object dependencies.</p>
<a id="BGBIGBCC"></a>
<div id="STRMS793" class="sect3">
<h4 class="sect3">Creating an Object Dependency</h4>
<p>An object dependency can be used when row LCRs for a particular table always should be applied before the row LCRs for another table, and the data dictionary of the destination database does not contain a constraint to enforce this relationship. When you define an object dependency, the table whose row LCRs should be applied first is the parent table and the table whose row LCRs should be applied second is the child table.</p>
<p>For example, consider an Oracle Streams replication environment with the following characteristics:</p>
<ul>
<li>
<p>The following tables in the <code>ord</code> schema are shared between a source and destination database:</p>
<ul>
<li>
<p>The <code>customers</code> table contains information about customers, including each customer's shipping address.</p>
</li>
<li>
<p>The <code>orders</code> table contains information about each order.</p>
</li>
<li>
<p>The <code>order_items</code> table contains information about the items ordered in each order.</p>
</li>
<li>
<p>The <code>ship_orders</code> table contains information about orders that are ready to ship, but it does not contain detailed information about the customer or information about individual items to ship with each order.</p>
</li>
</ul>
</li>
<li>
<p>The <code>ship_orders</code> table has no relationships, defined by constraints, with the other tables.</p>
</li>
<li>
<p>Information about orders is entered into the source database and propagated to the destination database, where it is applied.</p>
</li>
<li>
<p>The destination database site is a warehouse where orders are shipped to customers. At this site, a procedure DML handler uses the information in the <code>ship_orders</code>, <code>customers</code>, <code>orders</code>, and <code>order_items</code> tables to generate a report that includes the customer's shipping address and the items to ship.</p>
</li>
</ul>
<p>The information in the report generated by the procedure DML handler must be consistent with the time when the ship order record was created. An object dependency at the destination database can accomplish this goal. In this case, the <code>ship_orders</code> table is the parent table of the following child tables: <code>customers</code>, <code>orders</code>, and <code>order_items</code>. Because <code>ship_orders</code> is the parent of these tables, any changes to these tables made after a record in the <code>ship_orders</code> table was entered will not be applied until the procedure DML handler has generated the report for the ship order.</p>
<p>To create these object dependencies, run the following procedures at the destination database:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.CREATE_OBJECT_DEPENDENCY(
    object_name         =&gt;  'ord.customers',
    parent_object_name  =&gt;  'ord.ship_orders');
END;
/
</pre>
<pre>
BEGIN
  DBMS_APPLY_ADM.CREATE_OBJECT_DEPENDENCY(
    object_name         =&gt;  'ord.orders',
    parent_object_name  =&gt;  'ord.ship_orders');
END;
/
</pre>
<pre>
BEGIN
  DBMS_APPLY_ADM.CREATE_OBJECT_DEPENDENCY(
    object_name         =&gt;  'ord.order_items',
    parent_object_name  =&gt;  'ord.ship_orders');
END;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BGBJHGHG">"Managing a DML Handler"</a></div>
</div>
<!-- class="sect3" -->
<div id="STRMS794" class="sect3"><a id="sthref856"></a>
<h4 class="sect3">Dropping an Object Dependency</h4>
<p>To drop the object dependencies created in <a href="#BGBIGBCC">"Creating an Object Dependency"</a>, run the following procedure:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.DROP_OBJECT_DEPENDENCY(
    object_name         =&gt;  'ord.customers',
    parent_object_name  =&gt;  'ord.ship_orders');
END;
/
</pre>
<pre>
BEGIN
  DBMS_APPLY_ADM.DROP_OBJECT_DEPENDENCY(
    object_name         =&gt;  'ord.orders',
    parent_object_name  =&gt;  'ord.ship_orders');
END;
/
</pre>
<pre>
BEGIN
  DBMS_APPLY_ADM.DROP_OBJECT_DEPENDENCY(
    object_name         =&gt;  'ord.order_items',
    parent_object_name  =&gt;  'ord.ship_orders');
END;
/
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006383"></a>
<div id="STRMS797" class="sect1">
<h2 class="sect1">Dropping an Apply Process<a id="sthref857"></a><a id="sthref858"></a></h2>
<p>You run the <code>DROP_APPLY</code> procedure in the <code>DBMS_APPLY_ADM</code> package to drop an existing <a href="strms_glossary.htm#CHDJBHJC"><span class="xrefglossterm">apply process</span></a>. For example, the following procedure drops an apply process named <code>strm02_apply</code>:</p>
<pre>
BEGIN
  DBMS_APPLY_ADM.DROP_APPLY(
    apply_name            =&gt; 'strm02_apply',
    drop_unused_rule_sets =&gt; TRUE);
END;
/
</pre>
<p>Because the <code>drop_unused_rule_sets</code> parameter is set to <code>TRUE</code>, this procedure also drops any <a href="strms_glossary.htm#CHDCHGGB"><span class="xrefglossterm">rule set</span></a>s used by the <code>strm02_apply</code> apply process, unless a rule set is used by another <a href="strms_glossary.htm#CHDDDJGJ"><span class="xrefglossterm">Oracle Streams client</span></a>. If the <code>drop_unused_rule_sets</code> parameter is set to <code>TRUE</code>, then both the positive and <a href="strms_glossary.htm#CHDBHJHI"><span class="xrefglossterm">negative rule set</span></a> for the apply process might be dropped. If this procedure drops a rule set, then it also drops any <a href="strms_glossary.htm#CHDIFFCF"><span class="xrefglossterm">rule</span></a>s in the rule set that are not in another rule set.</p>
<p>An error is raised if you try to drop an apply process and there are errors in the error queue for the specified apply process. Therefore, if there are errors in the error queue for an apply process, delete the errors before dropping the apply process.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1010782">"Managing Apply Errors"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1624">
<tr>
<td class="cellalignment1631">
<table class="cellalignment1629">
<tr>
<td class="cellalignment1628"><a href="strms_mprop.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1628"><a href="strms_mrules.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1633">
<table class="cellalignment1627">
<tr>
<td class="cellalignment1628"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1628"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1628"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1628"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1628"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1628"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
