<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>The Data Pump API</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1093" />
<meta name="dcterms.created" content="2018-03-26T15:54:45Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Utilities" />
<meta name="dcterms.identifier" content="E22490-08" />
<meta name="dcterms.isVersionOf" content="SUTIL" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2018,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="dp_perf.htm" title="Previous" type="text/html" />
<link rel="Next" href="part_ldr.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e22490.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">14/36</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='dp_api'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=100,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote&nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><div id="footnote"><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/div><\/body><\/html>');
    msg.document.close();
    setTimeout(function() { var height = msg.document.getElementById('footnote').offsetHeight; msg.resizeTo(598, height + 100); }, 100);
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="SUTIL600" class="chapter"><a id="g1011860"></a> <a id="i1008009"></a>
<h1 class="chapter"><span class="secnum">6</span> The Data Pump API</h1>
<p>The Data Pump API<a id="sthref375"></a>, <code >DBMS_DATAPUMP<a id="sthref376"></a></code>, provides a high-speed mechanism to move all or part of the data and metadata for a site from one database to another. The Data Pump Export and Data Pump Import utilities are based on the Data Pump API.</p>
<p>This chapter provides details about how the Data Pump API works. The following topics are covered:</p>
<ul>
<li>
<p><a href="#i1008160">How Does the Client Interface to the Data Pump API Work?</a></p>
</li>
<li>
<p><a href="#i1006920">What Are the Basic Steps in Using the Data Pump API?</a></p>
</li>
<li>
<p><a href="#i1006925">Examples of Using the Data Pump API</a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS" href="../../appdev.112/e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for a detailed description of the procedures available in the <code dir="ltr">DBMS_DATAPUMP</code> package</p>
</li>
<li>
<p><a href="dp_overview.htm#g1015896">Chapter 1, "Overview of Oracle Data Pump"</a> for additional explanation of Data Pump concepts</p>
</li>
</ul>
</div>
</li>
</ul>
<a id="i1008160"></a>
<div id="SUTIL974" class="sect1">
<h2 class="sect1">How Does the Client Interface to the Data Pump API Work?</h2>
<p>The main structure used in the client interface<a id="sthref377"></a> is a job handle, which appears to the caller as an integer. Handles are created using the <code dir="ltr">DBMS_DATAPUMP</code>.<code dir="ltr">OPEN</code> or <code dir="ltr">DBMS_DATAPUMP</code>.<code dir="ltr">ATTACH</code> function. Other sessions can attach to a job to monitor and control its progress. This allows a DBA to start up a job before departing from work and then watch the progress of the job from home. Handles are session specific. The same job can create different handles in different sessions.</p>
<div id="SUTIL975" class="sect2"><a id="sthref378"></a>
<h3 class="sect2">Job States</h3>
<p>There is a state<a id="sthref379"></a> associated with each phase of a job, as follows:</p>
<ul>
<li>
<p>Undefined - before a handle is created</p>
</li>
<li>
<p>Defining - when the handle is first created</p>
</li>
<li>
<p>Executing - when the <code dir="ltr">DBMS_DATAPUMP</code>.<code dir="ltr">START_JOB</code> procedure is executed</p>
</li>
<li>
<p>Completing - when the job has finished its work and the Data Pump processes are ending</p>
</li>
<li>
<p>Completed - when the job is completed</p>
</li>
<li>
<p>Stop Pending - when an orderly job shutdown has been requested</p>
</li>
<li>
<p>Stopping - when the job is stopping</p>
</li>
<li>
<p>Idling - the period between the time that a <code dir="ltr">DBMS_DATAPUMP.ATTACH</code> is executed to attach to a stopped job and the time that a <code dir="ltr">DBMS_DATAPUMP.START_JOB</code> is executed to restart that job</p>
</li>
<li>
<p>Not Running - when a master table exists for a job that is not running (has no Data Pump processes associated with it)</p>
</li>
</ul>
<p>Performing <code dir="ltr">DBMS_DATAPUMP</code>.<code dir="ltr">START_JOB</code> on a job in an Idling state will return it to an Executing state.</p>
<p>If all users execute <code dir="ltr">DBMS_DATAPUMP</code>.<code dir="ltr">DETACH</code> to detach from a job in the Defining state, then the job will be totally removed from the database.</p>
<p>When a job abnormally terminates or when an instance running the job is shut down, the job is placed in the Not Running state if it was previously executing or idling. It can then be restarted by the user.</p>
<p>The master control process is active in the Defining, Idling, Executing, Stopping, Stop Pending, and Completing states. It is also active briefly in the Stopped and Completed states. The master table for the job exists in all states except the Undefined state. Worker processes are only active in the Executing and Stop Pending states, and briefly in the Defining state for import jobs.</p>
<p>Detaching while a job is in the Executing state will not halt the job, and you can re-attach to an executing job at any time to resume obtaining status information about the job.</p>
<p>A Detach can occur explicitly, when the <code dir="ltr">DBMS_DATAPUMP.DETACH</code> procedure is executed, or it can occur implicitly when a Data Pump API session is run down, when the Data Pump API is unable to communicate with a Data Pump job, or when the <code dir="ltr">DBMS_DATAPUMP.STOP_JOB</code> procedure is executed.</p>
<p>The Not Running state indicates that a master table exists outside the context of an executing job. This will occur if a job has been stopped (probably to be restarted later) or if a job has abnormally terminated. This state can also be seen momentarily during job state transitions at the beginning of a job, and at the end of a job before the master table is dropped. Note that the Not Running state is shown only in the <code dir="ltr">DBA_DATAPUMP_JOBS</code> view and the <code dir="ltr">USER_DATAPUMP_JOBS</code> view. It is never returned by the <code dir="ltr">GET_STATUS</code> procedure.</p>
<p><a href="#i1005638">Table 6-1</a> shows the valid job states in which <code dir="ltr">DBMS_DATAPUMP</code> procedures can be executed. The states listed are valid for both export and import jobs, unless otherwise noted.</p>
<div id="SUTIL3307" class="tblformalwide">
<p class="titleintable"><a id="sthref380"></a><a id="i1005638"></a>Table 6-1 Valid Job States in Which DBMS_DATAPUMP Procedures Can Be Executed</p>
<table class="cellalignment1399" title="Valid Job States in Which DBMS_DATAPUMP Procedures Can Be Executed" summary="Valid states in which DBMS_DATAPUMP procedures can be executed" dir="ltr">
<thead>
<tr class="cellalignment1388">
<th class="cellalignment1395" id="r1c1-t3">Procedure Name</th>
<th class="cellalignment1395" id="r1c2-t3">Valid States</th>
<th class="cellalignment1395" id="r1c3-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r2c1-t3" headers="r1c1-t3">
<pre dir="ltr">
ADD_FILE
</pre></td>
<td class="cellalignment1396" headers="r2c1-t3 r1c2-t3">
<p>Defining (valid for both export and import jobs)</p>
<p>Executing and Idling (valid only for specifying dump files for export jobs)</p>
</td>
<td class="cellalignment1396" headers="r2c1-t3 r1c3-t3">
<p>Specifies a file for the dump file set, the log file, or the SQLFILE output.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r3c1-t3" headers="r1c1-t3">
<pre dir="ltr">
ATTACH
</pre></td>
<td class="cellalignment1396" headers="r3c1-t3 r1c2-t3">
<p>Defining, Executing, Idling, Stopped, Completed, Completing, Not Running</p>
</td>
<td class="cellalignment1396" headers="r3c1-t3 r1c3-t3">
<p>Allows a user session to monitor a job or to restart a stopped job. The attach will fail if the dump file set or master table for the job have been deleted or altered in any way.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r4c1-t3" headers="r1c1-t3">
<pre dir="ltr">
DATA_FILTER
</pre></td>
<td class="cellalignment1396" headers="r4c1-t3 r1c2-t3">
<p>Defining</p>
</td>
<td class="cellalignment1396" headers="r4c1-t3 r1c3-t3">
<p>Restricts data processed by a job.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r5c1-t3" headers="r1c1-t3">
<pre dir="ltr">
DETACH
</pre></td>
<td class="cellalignment1396" headers="r5c1-t3 r1c2-t3">
<p>All</p>
</td>
<td class="cellalignment1396" headers="r5c1-t3 r1c3-t3">
<p>Disconnects a user session from a job.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r6c1-t3" headers="r1c1-t3">
<pre dir="ltr">
GET_DUMPFILE_INFO
</pre></td>
<td class="cellalignment1396" headers="r6c1-t3 r1c2-t3">
<p>All</p>
</td>
<td class="cellalignment1396" headers="r6c1-t3 r1c3-t3">
<p>Retrieves dump file header information.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r7c1-t3" headers="r1c1-t3">
<pre dir="ltr">
GET_STATUS
</pre></td>
<td class="cellalignment1396" headers="r7c1-t3 r1c2-t3">
<p>All, except Completed, Not Running, Stopped, and Undefined</p>
</td>
<td class="cellalignment1396" headers="r7c1-t3 r1c3-t3">
<p>Obtains the status of a job.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r8c1-t3" headers="r1c1-t3">
<pre dir="ltr">
LOG_ENTRY
</pre></td>
<td class="cellalignment1396" headers="r8c1-t3 r1c2-t3">
<p>Defining, Executing, Idling, Stop Pending, Completing</p>
</td>
<td class="cellalignment1396" headers="r8c1-t3 r1c3-t3">
<p>Adds an entry to the log file.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r9c1-t3" headers="r1c1-t3">
<pre dir="ltr">
METADATA_FILTER
</pre></td>
<td class="cellalignment1396" headers="r9c1-t3 r1c2-t3">
<p>Defining</p>
</td>
<td class="cellalignment1396" headers="r9c1-t3 r1c3-t3">
<p>Restricts metadata processed by a job.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r10c1-t3" headers="r1c1-t3">
<pre dir="ltr">
METADATA_REMAP
</pre></td>
<td class="cellalignment1396" headers="r10c1-t3 r1c2-t3">
<p>Defining</p>
</td>
<td class="cellalignment1396" headers="r10c1-t3 r1c3-t3">
<p>Remaps metadata processed by a job.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r11c1-t3" headers="r1c1-t3">
<pre dir="ltr">
METADATA_TRANSFORM
</pre></td>
<td class="cellalignment1396" headers="r11c1-t3 r1c2-t3">
<p>Defining</p>
</td>
<td class="cellalignment1396" headers="r11c1-t3 r1c3-t3">
<p>Alters metadata processed by a job.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r12c1-t3" headers="r1c1-t3">
<pre dir="ltr">
OPEN
</pre></td>
<td class="cellalignment1396" headers="r12c1-t3 r1c2-t3">
<p>Undefined</p>
</td>
<td class="cellalignment1396" headers="r12c1-t3 r1c3-t3">
<p>Creates a new job.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r13c1-t3" headers="r1c1-t3">
<pre dir="ltr">
SET_PARALLEL
</pre></td>
<td class="cellalignment1396" headers="r13c1-t3 r1c2-t3">
<p>Defining, Executing, Idling</p>
</td>
<td class="cellalignment1396" headers="r13c1-t3 r1c3-t3">
<p>Specifies parallelism for a job.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r14c1-t3" headers="r1c1-t3">
<pre dir="ltr">
SET_PARAMETER
</pre></td>
<td class="cellalignment1396" headers="r14c1-t3 r1c2-t3">
<p>Defining<a id="sthref381" href="#sthref381" onclick='footdisplay(1,"The \u003ccode dir=\"ltr\"\u003eENCRYPTION_PASSWORD\u003c/code\u003e parameter can be entered during the Idling state, as well as during the Defining state.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment1396" headers="r14c1-t3 r1c3-t3">
<p>Alters default processing by a job.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r15c1-t3" headers="r1c1-t3">
<pre dir="ltr">
START_JOB
</pre></td>
<td class="cellalignment1396" headers="r15c1-t3 r1c2-t3">
<p>Defining, Idling</p>
</td>
<td class="cellalignment1396" headers="r15c1-t3 r1c3-t3">
<p>Begins or resumes execution of a job.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r16c1-t3" headers="r1c1-t3">
<pre dir="ltr">
STOP_JOB
</pre></td>
<td class="cellalignment1396" headers="r16c1-t3 r1c2-t3">
<p>Defining, Executing, Idling, Stop Pending</p>
</td>
<td class="cellalignment1396" headers="r16c1-t3 r1c3-t3">
<p>Initiates shutdown of a job.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r17c1-t3" headers="r1c1-t3">
<pre dir="ltr">
WAIT_FOR_JOB
</pre></td>
<td class="cellalignment1396" headers="r17c1-t3 r1c2-t3">
<p>All, except Completed, Not Running, Stopped, and Undefined</p>
</td>
<td class="cellalignment1396" headers="r17c1-t3 r1c3-t3">
<p>Waits for a job to end.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>The <code dir="ltr">ENCRYPTION_PASSWORD</code> parameter can be entered during the Idling state, as well as during the Defining state.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006920"></a>
<div id="SUTIL976" class="sect1">
<h2 class="sect1">What Are the Basic Steps in Using the Data Pump API?</h2>
<p>To use the Data Pump API, you use the procedures provided in the <code dir="ltr">DBMS_DATAPUMP</code> package. The following steps list the basic activities involved in using the Data Pump API. The steps are presented in the order in which the activities would generally be performed:</p>
<ol>
<li>
<p>Execute the <code dir="ltr">DBMS_DATAPUMP</code>.<code dir="ltr">OPEN</code> procedure to create a Data Pump job and its infrastructure.</p>
</li>
<li>
<p>Define any parameters for the job.</p>
</li>
<li>
<p>Start the job.</p>
</li>
<li>
<p>Optionally, monitor the job until it completes.</p>
</li>
<li>
<p>Optionally, detach from the job and reattach at a later time.</p>
</li>
<li>
<p>Optionally, stop the job.</p>
</li>
<li>
<p>Optionally, restart the job, if desired.</p>
</li>
</ol>
<p>These concepts are illustrated in the examples provided in the next section.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS" href="../../appdev.112/e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for a complete description of the <code dir="ltr">DBMS_DATAPUMP</code> package</div>
</div>
<!-- class="sect1" -->
<a id="i1006925"></a>
<div id="SUTIL977" class="sect1">
<h2 class="sect1">Examples of Using the Data Pump API</h2>
<p>This section provides the following examples to help you get started using the Data Pump API:</p>
<ul>
<li>
<p><a href="#i1006610">Example 6-1, "Performing a Simple Schema Export"</a></p>
</li>
<li>
<p><a href="#i1006835">Example 6-2, "Importing a Dump File and Remapping All Schema Objects"</a></p>
</li>
<li>
<p><a href="#i1008408">Example 6-3, "Using Exception Handling During a Simple Schema Export"</a></p>
</li>
<li>
<p><a href="#BABCAEEF">Example 6-4, "Displaying Dump File Information"</a></p>
</li>
</ul>
<p>The examples are in the form of PL/SQL scripts. If you choose to copy these scripts and run them, then you must first do the following, using SQL*Plus:</p>
<ul>
<li>
<p>Create a directory object and grant <code dir="ltr">READ</code> and <code dir="ltr">WRITE</code> access to it. For example, to create a directory object named <code dir="ltr">dmpdir</code> to which you have access, do the following. Replace <code dir="ltr"><span class="codeinlineitalic">user</span></code> with your username.</p>
<pre dir="ltr">
SQL&gt; CREATE DIRECTORY dmpdir AS '/rdbms/work';
SQL&gt; GRANT READ, WRITE ON DIRECTORY dmpdir TO <span class="italic">user</span>;
</pre></li>
<li>
<p>Ensure that you have the <code dir="ltr">EXP_FULL_DATABASE</code> and <code dir="ltr">IMP_FULL_DATABASE</code> roles. To see a list of all roles assigned to you within your security domain, do the following:</p>
<pre dir="ltr">
SQL&gt; SELECT * FROM SESSION_ROLES;
</pre>
<p>If you do not have the necessary roles assigned to you, then contact your system administrator for help.</p>
</li>
<li>
<p>Turn on server output if it is not already on. This is done as follows:</p>
<pre dir="ltr">
SQL&gt; SET SERVEROUTPUT ON
</pre>
<p>If you do not do this, then you will not see any output to your screen. You must do this in the same session in which you invoke the example. If you exit SQL*Plus, then this setting is lost and must be reset when you begin a new session. (It must also be reset if you connect to a different user name.)</p>
</li>
</ul>
<div id="SUTIL3308" class="example">
<p class="titleinexample"><a id="i1006610"></a>Example 6-1 Performing a Simple Schema Export</p>
<p>The PL/SQL script in this example shows how to use the Data Pump API to perform a simple schema export of the <code dir="ltr">HR</code> schema. It shows how to create a job, start it, and monitor it. Additional information about the example is contained in the comments within the script. To keep the example simple, exceptions from any of the API calls will not be trapped. However, in a production environment, Oracle recommends that you define exception handlers and call <code dir="ltr">GET_STATUS</code> to retrieve more detailed error information when a failure occurs.</p>
<p>Connect as user <code dir="ltr">SYSTEM</code> to use this script.</p>
<pre dir="ltr">
DECLARE
  ind NUMBER;              -- Loop index
  h1 NUMBER;               -- Data Pump job handle
  percent_done NUMBER;     -- Percentage of job complete
  job_state VARCHAR2(30);  -- To keep track of job state
  le ku$_LogEntry;         -- For WIP and error messages
  js ku$_JobStatus;        -- The job status from get_status
  jd ku$_JobDesc;          -- The job description from get_status
  sts ku$_Status;          -- The status object returned by get_status
BEGIN

-- Create a (user-named) Data Pump job to do a schema export.

  h1 := DBMS_DATAPUMP.OPEN('EXPORT','SCHEMA',NULL,'EXAMPLE1','LATEST');

-- Specify a single dump file for the job (using the handle just returned)
-- and a directory object, which must already be defined and accessible
-- to the user running this procedure.

  DBMS_DATAPUMP.ADD_FILE(h1,'example1.dmp','DMPDIR');

-- A metadata filter is used to specify the schema that will be exported.

  DBMS_DATAPUMP.METADATA_FILTER(h1,'SCHEMA_EXPR','IN (''HR'')');

-- Start the job. An exception will be generated if something is not set up
-- properly. 

  DBMS_DATAPUMP.START_JOB(h1);

-- The export job should now be running. In the following loop, the job
-- is monitored until it completes. In the meantime, progress information is
-- displayed.
 
  percent_done := 0;
  job_state := 'UNDEFINED';
  while (job_state != 'COMPLETED') and (job_state != 'STOPPED') loop
    dbms_datapump.get_status(h1,
           dbms_datapump.ku$_status_job_error +
           dbms_datapump.ku$_status_job_status +
           dbms_datapump.ku$_status_wip,-1,job_state,sts);
    js := sts.job_status;

-- If the percentage done changed, display the new value.

    if js.percent_done != percent_done
    then
      dbms_output.put_line('*** Job percent done = ' ||
                           to_char(js.percent_done));
      percent_done := js.percent_done;
    end if;

-- If any work-in-progress (WIP) or error messages were received for the job,
-- display them.

   if (bitand(sts.mask,dbms_datapump.ku$_status_wip) != 0)
    then
      le := sts.wip;
    else
      if (bitand(sts.mask,dbms_datapump.ku$_status_job_error) != 0)
      then
        le := sts.error;
      else
        le := null;
      end if;
    end if;
    if le is not null
    then
      ind := le.FIRST;
      while ind is not null loop
        dbms_output.put_line(le(ind).LogText);
        ind := le.NEXT(ind);
      end loop;
    end if;
  end loop;

-- Indicate that the job finished and detach from it.

  dbms_output.put_line('Job has completed');
  dbms_output.put_line('Final job state = ' || job_state);
  dbms_datapump.detach(h1);
END;
/
</pre></div>
<!-- class="example" -->
<div id="SUTIL3309" class="example">
<p class="titleinexample"><a id="i1006835"></a>Example 6-2 Importing a Dump File and Remapping All Schema Objects</p>
<p>The script in this example imports the dump file created in <a href="#i1006610">Example 6-1</a> (an export of the <code dir="ltr">hr</code> schema). All schema objects are remapped from the <code dir="ltr">hr</code> schema to the <code dir="ltr">blake</code> schema. To keep the example simple, exceptions from any of the API calls will not be trapped. However, in a production environment, Oracle recommends that you define exception handlers and call <code dir="ltr">GET_STATUS</code> to retrieve more detailed error information when a failure occurs.</p>
<p>Connect as user <code dir="ltr">SYSTEM</code> to use this script.</p>
<pre dir="ltr">
DECLARE
  ind NUMBER;              -- Loop index
  h1 NUMBER;               -- Data Pump job handle
  percent_done NUMBER;     -- Percentage of job complete
  job_state VARCHAR2(30);  -- To keep track of job state
  le ku$_LogEntry;         -- For WIP and error messages
  js ku$_JobStatus;        -- The job status from get_status
  jd ku$_JobDesc;          -- The job description from get_status
  sts ku$_Status;          -- The status object returned by get_status
BEGIN

-- Create a (user-named) Data Pump job to do a "full" import (everything
-- in the dump file without filtering).

  h1 := DBMS_DATAPUMP.OPEN('IMPORT','FULL',NULL,'EXAMPLE2');

-- Specify the single dump file for the job (using the handle just returned)
-- and directory object, which must already be defined and accessible
-- to the user running this procedure. This is the dump file created by
-- the export operation in the first example.

  DBMS_DATAPUMP.ADD_FILE(h1,'example1.dmp','DMPDIR');

-- A metadata remap will map all schema objects from HR to BLAKE.

  DBMS_DATAPUMP.METADATA_REMAP(h1,'REMAP_SCHEMA','HR','BLAKE');

-- If a table already exists in the destination schema, skip it (leave
-- the preexisting table alone). This is the default, but it does not hurt
-- to specify it explicitly.

  DBMS_DATAPUMP.SET_PARAMETER(h1,'TABLE_EXISTS_ACTION','SKIP');

-- Start the job. An exception is returned if something is not set up properly.

  DBMS_DATAPUMP.START_JOB(h1);

-- The import job should now be running. In the following loop, the job is 
-- monitored until it completes. In the meantime, progress information is 
-- displayed. Note: this is identical to the export example.
 
 percent_done := 0;
  job_state := 'UNDEFINED';
  while (job_state != 'COMPLETED') and (job_state != 'STOPPED') loop
    dbms_datapump.get_status(h1,
           dbms_datapump.ku$_status_job_error +
           dbms_datapump.ku$_status_job_status +
           dbms_datapump.ku$_status_wip,-1,job_state,sts);
    js := sts.job_status;

-- If the percentage done changed, display the new value.

     if js.percent_done != percent_done
    then
      dbms_output.put_line('*** Job percent done = ' ||
                           to_char(js.percent_done));
      percent_done := js.percent_done;
    end if;

-- If any work-in-progress (WIP) or Error messages were received for the job,
-- display them.

       if (bitand(sts.mask,dbms_datapump.ku$_status_wip) != 0)
    then
      le := sts.wip;
    else
      if (bitand(sts.mask,dbms_datapump.ku$_status_job_error) != 0)
      then
        le := sts.error;
      else
        le := null;
      end if;
    end if;
    if le is not null
    then
      ind := le.FIRST;
      while ind is not null loop
        dbms_output.put_line(le(ind).LogText);
        ind := le.NEXT(ind);
      end loop;
    end if;
  end loop;

-- Indicate that the job finished and gracefully detach from it. 

  dbms_output.put_line('Job has completed');
  dbms_output.put_line('Final job state = ' || job_state);
  dbms_datapump.detach(h1);
END;
/
</pre></div>
<!-- class="example" -->
<div id="SUTIL3310" class="example">
<p class="titleinexample"><a id="i1008408"></a>Example 6-3 Using Exception Handling During a Simple Schema Export</p>
<p>The script in this example shows a simple schema export using the Data Pump API. It extends <a href="#i1006610">Example 6-1</a> to show how to use exception handling to catch the <code dir="ltr">SUCCESS_WITH_INFO</code> case, and how to use the <code dir="ltr">GET_STATUS</code> procedure to retrieve additional information about errors. If you want to get exception information about a <code dir="ltr">DBMS_DATAPUMP.OPEN</code> or <code dir="ltr">DBMS_DATAPUMP.ATTACH</code> failure, then call <code dir="ltr">DBMS_DATAPUMP.GET_STATUS</code> with a <code dir="ltr">DBMS_DATAPUMP.KU$_STATUS_JOB_ERROR</code> information mask and a NULL job handle to retrieve the error details.</p>
<p>Connect as user <code dir="ltr">SYSTEM</code> to use this example.</p>
<pre dir="ltr">
DECLARE
  ind NUMBER;              -- Loop index
  spos NUMBER;             -- String starting position
  slen NUMBER;             -- String length for output
  h1 NUMBER;               -- Data Pump job handle
  percent_done NUMBER;     -- Percentage of job complete
  job_state VARCHAR2(30);  -- To keep track of job state
  le ku$_LogEntry;         -- For WIP and error messages
  js ku$_JobStatus;        -- The job status from get_status
  jd ku$_JobDesc;          -- The job description from get_status
  sts ku$_Status;          -- The status object returned by get_status
BEGIN

-- Create a (user-named) Data Pump job to do a schema export.

  h1 := dbms_datapump.open('EXPORT','SCHEMA',NULL,'EXAMPLE3','LATEST');

-- Specify a single dump file for the job (using the handle just returned)
-- and a directory object, which must already be defined and accessible
-- to the user running this procedure.

  dbms_datapump.add_file(h1,'example3.dmp','DMPDIR');

-- A metadata filter is used to specify the schema that will be exported.

  dbms_datapump.metadata_filter(h1,'SCHEMA_EXPR','IN (''HR'')');

-- Start the job. An exception will be returned if something is not set up
-- properly.One possible exception that will be handled differently is the
-- success_with_info exception. success_with_info means the job started
-- successfully, but more information is available through get_status about
-- conditions around the start_job that the user might want to be aware of.

    begin
    dbms_datapump.start_job(h1);
    dbms_output.put_line('Data Pump job started successfully');
    exception
      when others then
        if sqlcode = dbms_datapump.success_with_info_num
        then
          dbms_output.put_line('Data Pump job started with info available:');
          dbms_datapump.get_status(h1,
                                   dbms_datapump.ku$_status_job_error,0,
                                   job_state,sts);
          if (bitand(sts.mask,dbms_datapump.ku$_status_job_error) != 0)
          then
            le := sts.error;
            if le is not null
            then
              ind := le.FIRST;
              while ind is not null loop
                dbms_output.put_line(le(ind).LogText);
                ind := le.NEXT(ind);
              end loop;
            end if;
          end if;
        else
          raise;
        end if;
  end;

-- The export job should now be running. In the following loop, we will monitor
-- the job until it completes. In the meantime, progress information is
-- displayed.
 
 percent_done := 0;
  job_state := 'UNDEFINED';
  while (job_state != 'COMPLETED') and (job_state != 'STOPPED') loop
    dbms_datapump.get_status(h1,
           dbms_datapump.ku$_status_job_error +
           dbms_datapump.ku$_status_job_status +
           dbms_datapump.ku$_status_wip,-1,job_state,sts);
    js := sts.job_status;

-- If the percentage done changed, display the new value.

     if js.percent_done != percent_done
    then
      dbms_output.put_line('*** Job percent done = ' ||
                           to_char(js.percent_done));
      percent_done := js.percent_done;
    end if;

-- Display any work-in-progress (WIP) or error messages that were received for
-- the job.

      if (bitand(sts.mask,dbms_datapump.ku$_status_wip) != 0)
    then
      le := sts.wip;
    else
      if (bitand(sts.mask,dbms_datapump.ku$_status_job_error) != 0)
      then
        le := sts.error;
      else
        le := null;
      end if;
    end if;
    if le is not null
    then
      ind := le.FIRST;
      while ind is not null loop
        dbms_output.put_line(le(ind).LogText);
        ind := le.NEXT(ind);
      end loop;
    end if;
  end loop;

-- Indicate that the job finished and detach from it.

  dbms_output.put_line('Job has completed');
  dbms_output.put_line('Final job state = ' || job_state);
  dbms_datapump.detach(h1);

-- Any exceptions that propagated to this point will be captured. The
-- details will be retrieved from get_status and displayed.

  exception
    when others then
      dbms_output.put_line('Exception in Data Pump job');
      dbms_datapump.get_status(h1,dbms_datapump.ku$_status_job_error,0,
                               job_state,sts);
      if (bitand(sts.mask,dbms_datapump.ku$_status_job_error) != 0)
      then
        le := sts.error;
        if le is not null
        then
          ind := le.FIRST;
          while ind is not null loop
            spos := 1;
            slen := length(le(ind).LogText);
            if slen &gt; 255
            then
              slen := 255;
            end if;
            while slen &gt; 0 loop
              dbms_output.put_line(substr(le(ind).LogText,spos,slen));
              spos := spos + 255;
              slen := length(le(ind).LogText) + 1 - spos;
            end loop;
            ind := le.NEXT(ind);
          end loop;
        end if;
      end if;
END;
/
</pre></div>
<!-- class="example" -->
<div id="SUTIL3895" class="example">
<p class="titleinexample"><a id="BABCAEEF"></a>Example 6-4 Displaying Dump File Information</p>
<p>The PL/SQL script in this example shows how to use the Data Pump API procedure <code dir="ltr">DBMS_DATAPUMP.GET_DUMPFILE_INFO</code> to display information about a Data Pump dump file outside the context of any Data Pump job. This example displays information contained in the <code dir="ltr">example1.dmp</code> dump file created by the sample PL/SQL script in <a href="#i1006610">Example 6-1</a>.</p>
<p>This PL/SQL script can also be used to display information for dump files created by original Export (the <code dir="ltr">exp</code> utility) as well as by the <code dir="ltr">ORACLE_DATAPUMP</code> external tables access driver.</p>
<p>Connect as user <code dir="ltr">SYSTEM</code> to use this script.</p>
<pre dir="ltr">
SET VERIFY OFF
SET FEEDBACK OFF
 
DECLARE
  ind        NUMBER;
  fileType   NUMBER;
  value      VARCHAR2(2048);
  infoTab    KU$_DUMPFILE_INFO := KU$_DUMPFILE_INFO();
 
BEGIN
  --
  -- Get the information about the dump file into the infoTab.
  --
  BEGIN
    DBMS_DATAPUMP.GET_DUMPFILE_INFO('example1.dmp','DMPDIR',infoTab,fileType);
    DBMS_OUTPUT.PUT_LINE('---------------------------------------------');
    DBMS_OUTPUT.PUT_LINE('Information for file: example1.dmp');
 
    --
    -- Determine what type of file is being looking at.
    --
    CASE fileType
      WHEN 1 THEN
        DBMS_OUTPUT.PUT_LINE('example1.dmp is a Data Pump dump file');
      WHEN 2 THEN
        DBMS_OUTPUT.PUT_LINE('example1.dmp is an Original Export dump file');
      ELSE
        DBMS_OUTPUT.PUT_LINE('example1.dmp is not a dump file');
        DBMS_OUTPUT.PUT_LINE('---------------------------------------------');
    END CASE;
 
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('---------------------------------------------');
      DBMS_OUTPUT.PUT_LINE('Error retrieving information for file: ' ||
                           'example1.dmp');
      DBMS_OUTPUT.PUT_LINE(SQLERRM);
      DBMS_OUTPUT.PUT_LINE('---------------------------------------------');
      fileType := 0;
  END;
 
  --
  -- If a valid file type was returned, then loop through the infoTab and 
  -- display each item code and value returned.
  --
  IF fileType &gt; 0
  THEN
    DBMS_OUTPUT.PUT_LINE('The information table has ' || 
                          TO_CHAR(infoTab.COUNT) || ' entries');
    DBMS_OUTPUT.PUT_LINE('---------------------------------------------');
 
    ind := infoTab.FIRST;
    WHILE ind IS NOT NULL
    LOOP
      --
      -- The following item codes return boolean values in the form
      -- of a '1' or a '0'. We'll display them as 'Yes' or 'No'.
      --
      value := NVL(infoTab(ind).value, 'NULL');
      IF infoTab(ind).item_code IN
         (DBMS_DATAPUMP.KU$_DFHDR_MASTER_PRESENT,
          DBMS_DATAPUMP.KU$_DFHDR_DIRPATH,
          DBMS_DATAPUMP.KU$_DFHDR_METADATA_COMPRESSED,
          DBMS_DATAPUMP.KU$_DFHDR_DATA_COMPRESSED,
          DBMS_DATAPUMP.KU$_DFHDR_METADATA_ENCRYPTED,
          DBMS_DATAPUMP.KU$_DFHDR_DATA_ENCRYPTED,
          DBMS_DATAPUMP.KU$_DFHDR_COLUMNS_ENCRYPTED)
      THEN
        CASE value
          WHEN '1' THEN value := 'Yes';
          WHEN '0' THEN value := 'No';
        END CASE;
      END IF;
 
      --
      -- Display each item code with an appropriate name followed by
      -- its value.
      --
      CASE infoTab(ind).item_code
        --
        -- The following item codes have been available since Oracle Database 10g
        -- Release 10.2.
        --
        WHEN DBMS_DATAPUMP.KU$_DFHDR_FILE_VERSION   THEN
          DBMS_OUTPUT.PUT_LINE('Dump File Version:         ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_MASTER_PRESENT THEN
          DBMS_OUTPUT.PUT_LINE('Master Table Present:      ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_GUID THEN
          DBMS_OUTPUT.PUT_LINE('Job Guid:                  ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_FILE_NUMBER THEN
          DBMS_OUTPUT.PUT_LINE('Dump File Number:          ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_CHARSET_ID  THEN
          DBMS_OUTPUT.PUT_LINE('Character Set ID:          ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_CREATION_DATE THEN
          DBMS_OUTPUT.PUT_LINE('Creation Date:             ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_FLAGS THEN
          DBMS_OUTPUT.PUT_LINE('Internal Dump Flags:       ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_JOB_NAME THEN
          DBMS_OUTPUT.PUT_LINE('Job Name:                  ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_PLATFORM THEN
          DBMS_OUTPUT.PUT_LINE('Platform Name:             ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_INSTANCE THEN
          DBMS_OUTPUT.PUT_LINE('Instance Name:             ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_LANGUAGE THEN
          DBMS_OUTPUT.PUT_LINE('Language Name:             ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_BLOCKSIZE THEN
          DBMS_OUTPUT.PUT_LINE('Dump File Block Size:      ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_DIRPATH THEN
          DBMS_OUTPUT.PUT_LINE('Direct Path Mode:          ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_METADATA_COMPRESSED THEN
          DBMS_OUTPUT.PUT_LINE('Metadata Compressed:       ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_DB_VERSION THEN
          DBMS_OUTPUT.PUT_LINE('Database Version:          ' || value);
 
        --
        -- The following item codes were introduced in Oracle Database 11g
        -- Release 11.1
        --
        WHEN DBMS_DATAPUMP.KU$_DFHDR_MASTER_PIECE_COUNT THEN
          DBMS_OUTPUT.PUT_LINE('Master Table Piece Count:  ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_MASTER_PIECE_NUMBER THEN
          DBMS_OUTPUT.PUT_LINE('Master Table Piece Number: ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_DATA_COMPRESSED THEN
          DBMS_OUTPUT.PUT_LINE('Table Data Compressed:     ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_METADATA_ENCRYPTED THEN
          DBMS_OUTPUT.PUT_LINE('Metadata Encrypted:        ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_DATA_ENCRYPTED THEN
          DBMS_OUTPUT.PUT_LINE('Table Data Encrypted:      ' || value);
        WHEN DBMS_DATAPUMP.KU$_DFHDR_COLUMNS_ENCRYPTED THEN
          DBMS_OUTPUT.PUT_LINE('TDE Columns Encrypted:     ' || value);
 
        --
        -- For the DBMS_DATAPUMP.KU$_DFHDR_ENCRYPTION_MODE item code a
        -- numeric value is returned. So examine that numeric value
        -- and display an appropriate name value for it.
        --
        WHEN DBMS_DATAPUMP.KU$_DFHDR_ENCRYPTION_MODE THEN
          CASE TO_NUMBER(value)
            WHEN DBMS_DATAPUMP.KU$_DFHDR_ENCMODE_NONE THEN
              DBMS_OUTPUT.PUT_LINE('Encryption Mode:           None');
            WHEN DBMS_DATAPUMP.KU$_DFHDR_ENCMODE_PASSWORD THEN
              DBMS_OUTPUT.PUT_LINE('Encryption Mode:           Password');
            WHEN DBMS_DATAPUMP.KU$_DFHDR_ENCMODE_DUAL THEN
              DBMS_OUTPUT.PUT_LINE('Encryption Mode:           Dual');
            WHEN DBMS_DATAPUMP.KU$_DFHDR_ENCMODE_TRANS THEN
              DBMS_OUTPUT.PUT_LINE('Encryption Mode:           Transparent');
          END CASE;
        ELSE NULL;  -- Ignore other, unrecognized dump file attributes.
      END CASE;
      ind := infoTab.NEXT(ind);
    END LOOP;
  END IF;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1387">
<tr>
<td class="cellalignment1396">
<table class="cellalignment1392">
<tr>
<td class="cellalignment1391"><a href="dp_perf.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1391"><a href="part_ldr.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2018,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1398">
<table class="cellalignment1390">
<tr>
<td class="cellalignment1391"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1391"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1391"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1391"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1391"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1391"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
