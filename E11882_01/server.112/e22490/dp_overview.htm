<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Overview of Oracle Data Pump</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1093" />
<meta name="dcterms.created" content="2018-03-26T15:54:34Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Utilities" />
<meta name="dcterms.identifier" content="E22490-08" />
<meta name="dcterms.isVersionOf" content="SUTIL" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2018,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="part_dp.htm" title="Previous" type="text/html" />
<link rel="Next" href="dp_export.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e22490.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/36</span> <!-- End Header -->
<div id="SUTIL100" class="chapter"><a id="g1015896"></a> <a id="i1009203"></a>
<h1 class="chapter"><span class="secnum">1</span> Overview of Oracle Data Pump</h1>
<p>Oracle Data Pump technology enables very high-speed movement of data and metadata from one database to another.</p>
<p>This chapter discusses the following topics:</p>
<ul>
<li>
<p><a href="#i1010293">Data Pump Components</a></p>
</li>
<li>
<p><a href="#CEGIEFIJ">How Does Data Pump Move Data?</a></p>
</li>
<li>
<p><a href="#CJAIBFJG">Required Roles for Data Pump Export and Import Operations</a></p>
</li>
<li>
<p><a href="#i1010261">What Happens During Execution of a Data Pump Job?</a></p>
</li>
<li>
<p><a href="#i1010266">Monitoring Job Status</a></p>
</li>
<li>
<p><a href="#i1007107">File Allocation</a></p>
</li>
<li>
<p><a href="#CEGFCFFI">Moving Data Between Different Database Releases</a></p>
</li>
<li>
<p><a href="#CJAICAFE">SecureFiles LOB Considerations</a></p>
</li>
<li>
<p><a href="#BABGHFFH">Data Pump Exit Codes</a></p>
</li>
</ul>
<a id="i1010293"></a>
<div id="SUTIL801" class="sect1">
<h2 class="sect1">Data Pump Components</h2>
<p>Oracle Data Pump is made up of three distinct parts:</p>
<ul>
<li>
<p>The command-line clients, <code dir="ltr">expdp</code> and <code dir="ltr">impdp</code></p>
</li>
<li>
<p>The <code dir="ltr">DBMS_DATAPUMP</code> PL/SQL package (also known as the Data Pump API)</p>
</li>
<li>
<p>The <code dir="ltr">DBMS_METADATA</code> PL/SQL package (also known as the Metadata API)</p>
</li>
</ul>
<p>The Data Pump clients, <code dir="ltr">expdp</code> and <code dir="ltr">impdp</code>, invoke the Data Pump Export utility and Data Pump Import utility, respectively.</p>
<p>The <code dir="ltr">expdp</code> and <code dir="ltr">impdp</code> clients use the procedures provided in the <code dir="ltr">DBMS_DATAPUMP</code> PL/SQL package to execute export and import commands, using the parameters entered at the command line. These parameters enable the exporting and importing of data and metadata for a complete database or for subsets of a database.</p>
<p>When metadata is moved, Data Pump uses functionality provided by the <code dir="ltr">DBMS_METADATA</code> PL/SQL package. The <code dir="ltr">DBMS_METADATA</code> package provides a centralized facility for the extraction, manipulation, and re-creation of dictionary metadata.</p>
<p>The <code dir="ltr">DBMS_DATAPUMP</code> and <code dir="ltr">DBMS_METADATA</code> PL/SQL packages can be used independently of the Data Pump clients.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
All Data Pump Export and Import processing, including the reading and writing of dump files, is done on the system (server) selected by the specified database connect string. <span class="bold">This means that for unprivileged users, the database administrator (DBA) must create directory objects for the Data Pump files that are read and written on that server file system.</span> (For security reasons, DBAs must ensure that only approved users are allowed access to directory objects.) For privileged users, a default directory object is available. See <a href="#i1009520">"Default Locations for Dump, Log, and SQL Files"</a> for more information about directory objects.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS" href="../../appdev.112/e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for descriptions of the <code dir="ltr">DBMS_DATAPUMP</code> and <code dir="ltr">DBMS_METADATA</code> packages</p>
</li>
<li>
<p><a class="olink ADLOB45842" href="../../appdev.112/e18294/adlob_bfile_ops.htm#ADLOB45842"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for information about guidelines to consider when creating directory objects</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="CEGIEFIJ"></a>
<div id="SUTIL802" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">How Does Data Pump Move Data?</h2>
<p>For information about how Data Pump moves data in and out of databases, see the following sections:</p>
<ul>
<li>
<p><a href="#CEGFEEJE">Using Data File Copying to Move Data</a></p>
</li>
<li>
<p><a href="#CJAFDGIC">Using Direct Path to Move Data</a></p>
</li>
<li>
<p><a href="#CJABAHDJ">Using External Tables to Move Data</a></p>
</li>
<li>
<p><a href="#CJAGCCAJ">Using Conventional Path to Move Data</a></p>
</li>
<li>
<p><a href="#CJABHJHD">Using Network Link Import to Move Data</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Data Pump does not load tables with <a id="sthref10"></a>disabled unique indexes. To load data into the table, the indexes must be either dropped or reenabled.</div>
<p>The following sections briefly explain how and when each of these data movement mechanisms is used.</p>
<a id="CEGFEEJE"></a>
<div id="SUTIL803" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using Data File Copying to Move Data</h3>
<p>The fastest method of moving data is to copy the database data files to the target database without interpreting or altering the data. With this method, Data Pump Export is used to unload only structural information (metadata) into the dump file. This method is used in the following situations:</p>
<ul>
<li>
<p>The <code dir="ltr">TRANSPORT_TABLESPACES</code> parameter is used to specify a transportable mode export. Only metadata for the specified tablespaces is exported.</p>
</li>
<li>
<p>The <code dir="ltr">TRANSPORTABLE=ALWAYS</code> parameter is supplied on a table mode export (specified with the <code dir="ltr">TABLES</code> parameter). Only metadata for the tables, partitions, and subpartitions specified on the <code dir="ltr">TABLES</code> parameter is exported.</p>
</li>
</ul>
<p>When an export operation uses data file copying, the corresponding import job always also uses data file copying. During the ensuing import operation, both the data files and the export dump file must be loaded.</p>
<p>When data is moved by using data file copying, the character sets must be identical on both the source and target databases.</p>
<p>In addition to copying the data, you may need to prepare it by using the Recovery Manager (RMAN) <code dir="ltr">CONVERT</code> command to perform some data conversions. You can do this at either the source or target database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink RCMRF192" href="../../backup.112/e10643/rcmsynta012.htm#RCMRF192"><span class="italic">Oracle Database Backup and Recovery Reference</span></a> for information about the RMAN <code dir="ltr">CONVERT</code> command</p>
</li>
<li>
<p><a class="olink ADMIN10140" href="../../server.112/e25494/tspaces.htm#ADMIN10140"><span class="italic">Oracle Database Administrator's Guide</span></a> for a description and example (including how to convert the data) of transporting tablespaces between databases</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CJAFDGIC"></a>
<div id="SUTIL804" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using Direct Path to Move Data</h3>
<p>After data file copying, direct path is the fastest method of moving data. In this method, the SQL layer of the database is bypassed and rows are moved to and from the dump file with only minimal interpretation. Data Pump automatically uses the direct path method for loading and unloading data when the structure of a table allows it. For example, if a table contains a column of type <code dir="ltr">BFILE</code>, then direct path cannot be used to load that table and external tables is used instead.</p>
<p>The following sections describe situations in which direct path cannot be used for loading and unloading:</p>
<ul>
<li>
<p><a href="#CJAJJJBH">Situations in Which Direct Path Load Is Not Used</a></p>
</li>
<li>
<p><a href="#CJAEGFIF">Situations in Which Direct Path Unload Is Not Used</a></p>
</li>
</ul>
<p class="subhead1"><a id="CJAJJJBH"></a><a id="SUTIL2878"></a>Situations in Which Direct Path Load Is Not Used</p>
<p>If any of the following conditions exist for a table, then Data Pump uses external tables rather than direct path to load the data for that table:<a id="sthref11"></a></p>
<ul>
<li>
<p>A global index on multipartition tables exists during a single-partition load. This includes object tables that are partitioned.</p>
</li>
<li>
<p>A domain index exists for a LOB column.</p>
</li>
<li>
<p>A table is in a cluster.</p>
</li>
<li>
<p>There is an active trigger on a preexisting table.</p>
</li>
<li>
<p>Fine-grained access control is enabled in insert mode on a preexisting table.</p>
</li>
<li>
<p>A table contains <code dir="ltr">BFILE</code> columns or columns of opaque types.</p>
</li>
<li>
<p>A referential integrity constraint is present on a preexisting table.</p>
</li>
<li>
<p>A table contains <code dir="ltr">VARRAY</code> columns with an embedded opaque type.</p>
</li>
<li>
<p>The table has encrypted columns.</p>
</li>
<li>
<p>The table into which data is being imported is a preexisting table and at least one of the following conditions exists:</p>
<ul>
<li>
<p>There is an active trigger</p>
</li>
<li>
<p>The table is partitioned</p>
</li>
<li>
<p>Fine-grained access control is in insert mode</p>
</li>
<li>
<p>A referential integrity constraint exists</p>
</li>
<li>
<p>A unique index exists</p>
</li>
</ul>
</li>
<li>
<p>Supplemental logging is enabled and the table has at least one LOB column.</p>
</li>
<li>
<p>The Data Pump command for the specified table used the <code dir="ltr">QUERY</code>, <code dir="ltr">SAMPLE</code>, or <code dir="ltr">REMAP_DATA</code> parameter.</p>
</li>
<li>
<p>A table contains a column (including a <code dir="ltr">VARRAY</code> column) with a <code dir="ltr">TIMESTAMP WITH TIME ZONE</code> datatype and the version of the time zone data file is different between the export and import systems.</p>
</li>
</ul>
<p class="subhead1"><a id="CJAEGFIF"></a><a id="SUTIL2879"></a>Situations in Which Direct Path Unload Is Not Used</p>
<p>If any of the following conditions exist for a table, then Data Pump uses the external table method to unload data, rather than the direct path method:</p>
<ul>
<li>
<p>Fine-grained access control for <code dir="ltr">SELECT</code> is enabled.</p>
</li>
<li>
<p>The table is a queue table.</p>
</li>
<li>
<p>The table contains one or more columns of type <code dir="ltr">BFILE</code> or opaque, or an object type containing opaque columns.</p>
</li>
<li>
<p>The table contains encrypted columns.</p>
</li>
<li>
<p>The table contains a column of an evolved type that needs upgrading.</p>
</li>
<li>
<p>The table contains a column of type <code dir="ltr">LONG</code> or <code dir="ltr">LONG RAW</code> that is not last.</p>
</li>
<li>
<p>The Data Pump command for the specified table used the <code dir="ltr">QUERY</code>, <code dir="ltr">SAMPLE</code>, or <code dir="ltr">REMAP_DATA</code> parameter.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CJABAHDJ"></a>
<div id="SUTIL805" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using External Tables to Move Data</h3>
<p>When data file copying is not selected and the data cannot be moved using direct path, the external table mechanism is used. The external table mechanism creates an external table that maps to the dump file data for the database table. The SQL engine is then used to move the data. If possible, the <code dir="ltr">APPEND</code> hint is used on import to speed the copying of the data into the database. The representation of data for direct path data and external table data is the same in a dump file. Therefore, Data Pump might use the direct path mechanism at export time, but use external tables when the data is imported into the target database. Similarly, Data Pump might use external tables for the export, but use direct path for the import.</p>
<p>In particular, Data Pump uses external tables in the following situations:</p>
<ul>
<li>
<p>Loading and unloading very large tables and partitions in situations where it is advantageous to use parallel SQL capabilities</p>
</li>
<li>
<p>Loading tables with global or domain indexes defined on them, including partitioned object tables</p>
</li>
<li>
<p>Loading tables with active triggers or clustered tables</p>
</li>
<li>
<p>Loading and unloading tables with encrypted columns</p>
</li>
<li>
<p>Loading tables with fine-grained access control enabled for inserts</p>
</li>
<li>
<p>Loading tables that are partitioned differently at load time and unload time</p>
</li>
<li>
<p>Loading a table not created by the import operation (the table exists before the import starts)</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
When Data Pump uses external tables as the data access mechanism, it uses the <code dir="ltr">ORACLE_DATAPUMP</code> access driver. However, it is important to understand that the files that Data Pump creates when it uses external tables are <span class="italic">not</span> compatible with files created when you manually create an external table using the SQL <code dir="ltr">CREATE TABLE ... ORGANIZATION EXTERNAL</code> statement.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="et_dp_driver.htm#g1017944">Chapter 15, "The ORACLE_DATAPUMP Access Driver"</a></p>
</li>
<li>
<p><a class="olink SQLRF" href="../e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about using the <code dir="ltr">APPEND</code> hint</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CJAGCCAJ"></a>
<div id="SUTIL2880" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using Conventional Path to Move Data</h3>
<p>In situations where there are conflicting table attributes, Data Pump is not able to load data into a table using either direct path or external tables. In such cases, conventional path is used, which can affect performance.</p>
</div>
<!-- class="sect2" -->
<a id="CJABHJHD"></a>
<div id="SUTIL806" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using Network Link Import to Move Data</h3>
<p>When the Import <code dir="ltr">NETWORK_LINK</code> parameter is used to specify a network link for an import operation, SQL is directly used to move the data using an <code dir="ltr">INSERT SELECT</code> statement. The <code dir="ltr">SELECT</code> clause retrieves the data from the remote database over the network link. The <code dir="ltr">INSERT</code> clause uses SQL to insert the data into the target database. There are no dump files involved.</p>
<p>When the Export <code dir="ltr">NETWORK_LINK</code> parameter is used to specify a network link for an export operation, the data from the remote database is written to dump files on the target database. (Note that to export from a read-only database, the <code dir="ltr">NETWORK_LINK</code> parameter is required.)</p>
<p>Because the link can identify a remotely networked database, the terms database link and network link are used interchangeably.</p>
<p>Because reading over a network is generally slower than reading from a disk, network link is the slowest of the four access methods used by Data Pump and may be undesirable for very large jobs.</p>
<p class="subhead1"><a id="SUTIL2881"></a>Supported Link Types</p>
<p>The following types of database links are supported for use with Data Pump Export and Import:</p>
<ul>
<li>
<p>Public (both public and shared)</p>
</li>
<li>
<p>Fixed user</p>
</li>
<li>
<p>Connected user</p>
</li>
</ul>
<p class="subhead1"><a id="SUTIL2882"></a>Unsupported Link Types</p>
<p>The database link type, Current User, is not supported for use with Data Pump Export or Import.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>The Export <a href="dp_export.htm#i1011008">NETWORK_LINK</a> parameter for information about performing exports over a database link</p>
</li>
<li>
<p>The Import <a href="dp_import.htm#i1007380">NETWORK_LINK</a> parameter for information about performing imports over a database link</p>
</li>
<li>
<p><a class="olink SQLRF" href="../e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about database links</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CJAIBFJG"></a>
<div id="SUTIL807" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Required Roles for Data Pump Export and Import Operations</h2>
<p>Many Data Pump Export and Import operations require the user to have the <code dir="ltr">DATAPUMP_EXP_FULL_DATABASE</code> role and/or the <code dir="ltr">DATAPUMP_IMP_FULL_DATABASE</code> role.<a id="sthref12"></a><a id="sthref13"></a> These roles are automatically defined for Oracle databases when you run the standard scripts that are part of database creation. (Note that although the names of these roles contain the word FULL, these roles are actually required for all export and import modes, not only Full mode.)</p>
<p>The <code dir="ltr">DATAPUMP_EXP_FULL_DATABASE</code> role<a id="sthref14"></a> affects only export operations. The <code dir="ltr">DATAPUMP_IMP_FULL_DATABASE</code> role<a id="sthref15"></a> affects import operations and operations that use the Import <code dir="ltr">SQLFILE</code> parameter. These roles allow users performing exports and imports to do the following:</p>
<ul>
<li>
<p>Perform the operation outside the scope of their schema</p>
</li>
<li>
<p>Monitor jobs that were initiated by another user</p>
</li>
<li>
<p>Export objects (such as tablespace definitions) and import objects (such as directory definitions) that unprivileged users cannot reference</p>
</li>
</ul>
<p>These are powerful roles. Database administrators should use caution when granting these roles to users.</p>
<p>Although the <code dir="ltr">SYS</code> schema does not have either of these roles assigned to it, all security checks performed by Data Pump that require these roles also grant access to the <code dir="ltr">SYS</code> schema.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DBSEG4414" href="../../network.112/e36292/authorization.htm#DBSEG4414"><span class="italic">Oracle Database Security Guide</span></a> for more information about predefined roles in an Oracle Database installation</div>
</div>
<!-- class="sect1" -->
<a id="i1010261"></a>
<div id="SUTIL808" class="sect1">
<h2 class="sect1">What Happens During Execution of a Data Pump Job?</h2>
<p>Data Pump jobs use a master table, a master process, and worker processes to perform the work and keep track of progress.</p>
<div id="SUTIL809" class="sect2"><a id="sthref16"></a>
<h3 class="sect2">Coordination of a Job</h3>
<p>For every Data Pump Export job and Data Pump Import job, a master process is created. The master process controls the entire job, including communicating with the clients, creating and controlling a pool of worker processes, and performing logging operations.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL810" class="sect2"><a id="sthref17"></a>
<h3 class="sect2">Tracking Progress Within a Job</h3>
<p>While the data and metadata are being transferred, a master table<a id="sthref18"></a><a id="sthref19"></a> is used to track the progress within a job. The master table is implemented as a user table within the database. The specific function of the master table for export and import jobs is as follows:</p>
<ul>
<li>
<p>For export jobs, the master table records the location of database objects within a dump file set. Export builds and maintains the master table for the duration of the job. At the end of an export job, the content of the master table is written to a file in the dump file set.</p>
</li>
<li>
<p>For import jobs, the master table is loaded from the dump file set and is used to control the sequence of operations for locating objects that need to be imported into the target database.</p>
</li>
</ul>
<p>The master table is created in the schema of the current user performing the export or import operation. Therefore, that user must have the <code dir="ltr">CREATE TABLE</code> system privilege and a sufficient tablespace quota for creation of the master table. The name of the master table is the same as the name of the job that created it. Therefore, you cannot explicitly give a Data Pump job the same name as a preexisting table or view.</p>
<p>For all operations, the information in the master table is used to restart a job.</p>
<p>The master table is either retained or dropped, depending on the circumstances, as follows:</p>
<ul>
<li>
<p>Upon successful job completion, the master table is dropped.</p>
</li>
<li>
<p>If a job is stopped using the <code dir="ltr">STOP_JOB</code> interactive command, then the master table is retained for use in restarting the job.</p>
</li>
<li>
<p>If a job is killed using the <code dir="ltr">KILL_JOB</code> interactive command, then the master table is dropped and the job cannot be restarted.</p>
</li>
<li>
<p>If a job terminates unexpectedly, then the master table is retained. You can delete it if you do not intend to restart the job.</p>
</li>
<li>
<p>If a job stops before it starts running (that is, before any database objects have been copied), then the master table is dropped.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dp_export.htm#BEHGDDCA">"JOB_NAME"</a> for more information about how job names are formed</div>
</div>
<!-- class="sect2" -->
<div id="SUTIL811" class="sect2"><a id="sthref20"></a>
<h3 class="sect2">Filtering Data and Metadata During a Job</h3>
<p>Within the master table, specific objects are assigned attributes such as name or owning schema. Objects also belong to a class of objects (such as <code dir="ltr">TABLE</code>, <code dir="ltr">INDEX,</code> or <code dir="ltr">DIRECTORY</code>). The class of an object is called its object type. You can use the <code dir="ltr">EXCLUDE</code> and <code dir="ltr">INCLUDE</code> parameters to restrict the types of objects that are exported and imported. The objects can be based upon the name of the object or the name of the schema that owns the object. You can also specify data-specific filters to restrict the rows that are exported and imported.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="dp_export.htm#i1009903">"Filtering During Export Operations"</a></p>
</li>
<li>
<p><a href="dp_import.htm#i1009204">"Filtering During Import Operations"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="SUTIL812" class="sect2"><a id="sthref21"></a>
<h3 class="sect2">Transforming Metadata During a Job</h3>
<p>When you are moving data from one database to another, it is often useful to perform transformations on the metadata for remapping storage between tablespaces or redefining the owner of a particular set of objects. This is done using the following Data Pump Import parameters: <code dir="ltr">REMAP_DATAFILE</code>, <code dir="ltr">REMAP_SCHEMA</code>, <code dir="ltr">REMAP_TABLE,REMAP_TABLESPACE</code>, <code dir="ltr">TRANSFORM,</code> and <code dir="ltr">PARTITION_OPTIONS</code>.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL813" class="sect2"><a id="sthref22"></a>
<h3 class="sect2">Maximizing Job Performance</h3>
<p>Data Pump can employ multiple worker processes, running in parallel, to increase job performance. Use the <code dir="ltr">PARALLEL</code> parameter to set a degree of parallelism that takes maximum advantage of current conditions. For example, to limit the effect of a job on a production system, the database administrator (DBA) might want to restrict the parallelism. The degree of parallelism can be reset at any time during a job. For example, <code dir="ltr">PARALLEL</code> could be set to 2 during production hours to restrict a particular job to only two degrees of parallelism, and during nonproduction hours it could be reset to 8. The parallelism setting is enforced by the master process, which allocates work to be executed to worker processes that perform the data and metadata processing within an operation. These worker processes operate in parallel. In general, the degree of parallelism should be set to no more than twice the number of CPUs on an instance.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The ability to adjust the degree of parallelism is available only in the Enterprise Edition of Oracle Database.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="dp_export.htm#CIHGACIA">"Using PARALLEL During An Export In An Oracle RAC Environment"</a></p>
</li>
<li>
<p><a href="dp_import.htm#CIHFEFCD">"Using PARALLEL During An Import In An Oracle RAC Environment"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="SUTIL814" class="sect2"><a id="sthref23"></a>
<h3 class="sect2">Loading and Unloading of Data</h3>
<p>The worker processes unload and load metadata and table data. During import they also rebuild indexes. Some of these operations may be done in parallel: unloading and loading table data, rebuilding indexes, and loading package bodies. Worker processes are created as needed until the number of worker processes equals the value supplied for the <code dir="ltr">PARALLEL</code> command-line parameter. The number of active worker processes can be reset throughout the life of a job. Worker processes can be started on different nodes in an Oracle Real Application Clusters (Oracle RAC) environment.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The value of <code dir="ltr">PARALLEL</code> is restricted to 1 in the Standard Edition of Oracle Database.</div>
<p><a id="i1009730"></a>When a worker process is assigned the task of loading or unloading a very large table or partition, it may choose to use the external tables access method to make maximum use of parallel execution. In such a case, the worker process becomes a parallel execution coordinator. The actual loading and unloading work is divided among some number of parallel I/O execution processes (sometimes called slaves) allocated from a pool of available processes in an Oracle RAC environment.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>The Export <a href="dp_export.htm#i1006404">PARALLEL</a> parameter</p>
</li>
<li>
<p>The Import <a href="dp_import.htm#i1006596">PARALLEL</a> parameter</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1010266"></a>
<div id="SUTIL815" class="sect1">
<h2 class="sect1">Monitoring Job Status</h2>
<p>The Data Pump Export and Import utilities can attach to a job in either logging mode or interactive-command mode.</p>
<p>In logging mode, real-time detailed status about the job is automatically displayed during job execution. The information displayed can include the job and parameter descriptions, an estimate of the amount of data to be exported, a description of the current operation or item being processed, files used during the job, any errors encountered, and the final job state (Stopped or Completed).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>The Export <a href="dp_export.htm#i1007227">STATUS</a> parameter for information about changing the frequency of the status display in command-line Export</p>
</li>
<li>
<p>The Import <a href="dp_import.htm#i1008677">STATUS</a> parameter for information about changing the frequency of the status display in command-line Import</p>
</li>
</ul>
</div>
<p>In interactive-command mode, job status can be displayed on request. The information displayed can include the job description and state, a description of the current operation or item being processed, files being written, and a cumulative status.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>The interactive Export <a href="dp_export.htm#i1007227">STATUS</a> command</p>
</li>
<li>
<p>The interactive Import <a href="dp_import.htm#i1007539">STATUS</a> command</p>
</li>
</ul>
</div>
<p>A log file can also be optionally written during the execution of a job. The log file summarizes the progress of the job, lists any errors that were encountered during execution of the job, and records the completion status of the job.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>The Export <a href="dp_export.htm#BABIHEAC">LOGFILE</a> parameter for information on how to set the file specification for an export log file</p>
</li>
<li>
<p>The Import <a href="dp_import.htm#BABGBCBH">LOGFILE</a> parameter for information on how to set the file specification for a import log file</p>
</li>
</ul>
</div>
<p>An alternative way to determine job status or to get other information about Data Pump jobs, would be to query the <code dir="ltr">DBA_DATAPUMP_JOBS</code>, <code dir="ltr">USER_DATAPUMP_JOBS</code>, or <code dir="ltr">DBA_DATAPUMP_SESSIONS</code> views. See <a class="olink REFRN" href="../e40402/toc.htm"><span class="italic">Oracle Database Reference</span></a> for descriptions of these views.</p>
<a id="i1010007"></a>
<div id="SUTIL816" class="sect2">
<h3 class="sect2">Monitoring the Progress of Executing Jobs<a id="sthref24"></a></h3>
<p>Data Pump operations that transfer table data (export and import) maintain an entry in the <code dir="ltr">V$SESSION_LONGOPS</code> dynamic<a id="sthref25"></a> performance view indicating the job progress (in megabytes of table data transferred). The entry contains the estimated transfer size and is periodically updated to reflect the actual amount of data transferred.</p>
<p>Use of the <code dir="ltr">COMPRESSION</code>, <code dir="ltr">ENCRYPTION</code>, <code dir="ltr">ENCRYPTION_ALGORITHM</code>, <code dir="ltr">ENCRYPTION_MODE</code>, <code dir="ltr">ENCRYPTION_PASSWORD</code>, <code dir="ltr">QUERY</code>, and <code dir="ltr">REMAP_DATA</code> parameters are not reflected in the determination of estimate values.</p>
<p>The usefulness of the estimate value for export operations depends on the type of estimation requested when the operation was initiated, and it is updated as required if exceeded by the actual transfer amount. The estimate value for import operations is exact.</p>
<p>The <code dir="ltr">V$SESSION_LONGOPS</code> columns that are relevant to a Data Pump job are as follows:</p>
<ul>
<li>
<p><code dir="ltr">USERNAME</code> - job owner</p>
</li>
<li>
<p><code dir="ltr">OPNAME</code> - job name</p>
</li>
<li>
<p><code dir="ltr">TARGET_DESC</code> - job operation</p>
</li>
<li>
<p><code dir="ltr">SOFAR</code> - megabytes transferred thus far during the job</p>
</li>
<li>
<p><code dir="ltr">TOTALWORK</code> - estimated number of megabytes in the job</p>
</li>
<li>
<p><code dir="ltr">UNITS</code> - megabytes (MB)</p>
</li>
<li>
<p><code dir="ltr">MESSAGE</code> - a formatted status message of the form:</p>
<pre dir="ltr">
'<span class="italic">job_name</span>: <span class="italic">operation_name</span> : nnn out of mmm MB done'
</pre></li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007107"></a>
<div id="SUTIL817" class="sect1">
<h2 class="sect1">File Allocation</h2>
<p>Data Pump jobs manage the following types of files:</p>
<ul>
<li>
<p>Dump files to contain the data and metadata that is being moved.</p>
</li>
<li>
<p>Log files to record the messages associated with an operation.</p>
</li>
<li>
<p>SQL files to record the output of a SQLFILE operation. A SQLFILE operation is invoked using the Data Pump Import <code dir="ltr">SQLFILE</code> parameter and results in all the SQL DDL that Import would be executing based on other parameters, being written to a SQL file.</p>
</li>
<li>
<p>Files specified by the <code dir="ltr">DATA_FILES</code> parameter during a transportable import.</p>
</li>
</ul>
<p>An understanding of how Data Pump allocates and handles these files will help you to use Export and Import to their fullest advantage.</p>
<a id="i1007577"></a>
<div id="SUTIL818" class="sect2">
<h3 class="sect2">Specifying Files and Adding Additional Dump Files</h3>
<p>For export operations, you can specify dump files at the time the job is defined, and also at a later time during the operation. For example, if you discover that space is running low during an export operation, then you can add additional dump files by using the Data Pump Export <code dir="ltr">ADD_FILE</code> command in interactive mode.</p>
<p>For import operations, all dump files must be specified at the time the job is defined.</p>
<p>Log files and SQL files overwrite previously existing files. For dump files, you can use the Export <code dir="ltr">REUSE_DUMPFILES</code> parameter to specify whether to overwrite a preexisting dump file.</p>
</div>
<!-- class="sect2" -->
<a id="i1009520"></a>
<div id="SUTIL819" class="sect2">
<h3 class="sect2">Default Locations for Dump, Log, and SQL Files</h3>
<p>Because Data Pump is server-based rather than client-based, dump files, log files, and SQL files are accessed relative to server-based directory paths. Data Pump requires that directory paths be specified as directory objects. A directory object maps a name to a directory path on the file system. DBAs must ensure that only approved users are allowed access to the directory object associated with the directory path.</p>
<p>The following example shows a SQL statement that creates a directory object named <code dir="ltr">dpump_dir1</code> that is mapped to a directory located at <code dir="ltr">/usr/apps/datafiles.</code></p>
<pre dir="ltr">
SQL&gt; CREATE DIRECTORY dpump_dir1 AS '/usr/apps/datafiles';
</pre>
<p>The reason that a directory object is required is to ensure data security and integrity. For example:</p>
<ul>
<li>
<p>If you were allowed to specify a directory path location for an input file, then you might be able to read data that the server has access to, but to which you should not.</p>
</li>
<li>
<p>If you were allowed to specify a directory path location for an output file, then the server might overwrite a file that you might not normally have privileges to delete.</p>
</li>
</ul>
<p>On UNIX and Windows NT systems, a default directory object, <code dir="ltr">DATA_PUMP_DIR</code>, is created at database creation or whenever the database dictionary is upgraded. By default, it is available only to privileged users. (The user <code dir="ltr">SYSTEM</code> has read and write access to the <code dir="ltr">DATA_PUMP_DIR</code> directory, by default.)</p>
<p>If you are not a privileged user, then before you can run Data Pump Export or Data Pump Import, a directory object must be created by a database administrator (DBA) or by any user with the <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">DIRECTORY</code> privilege.</p>
<p>After a directory is created, the user creating the directory object must grant <code dir="ltr">READ</code> or <code dir="ltr">WRITE</code> permission on the directory to other users. For example, to allow the Oracle database to read and write files on behalf of user <code dir="ltr">hr</code> in the directory named by <code dir="ltr">dpump_dir1</code>, the DBA must execute the following command:</p>
<pre dir="ltr">
SQL&gt; GRANT READ, WRITE ON DIRECTORY dpump_dir1 TO hr;
</pre>
<p>Note that <code dir="ltr">READ</code> or <code dir="ltr">WRITE</code> permission to a directory object only means that the Oracle database reads or writes that file on your behalf. You are not given direct access to those files outside of the Oracle database unless you have the appropriate operating system privileges. Similarly, the Oracle database requires permission from the operating system to read and write files in the directories.</p>
<p>Data Pump Export and Import use the following order of precedence to determine a file's location:</p>
<ol>
<li>
<p>If a directory object is specified as part of the file specification, then the location specified by that directory object is used. (The directory object must be separated from the file name by a colon.)</p>
</li>
<li>
<p>If a directory object is not specified as part of the file specification, then the directory object named by the <code dir="ltr">DIRECTORY</code> parameter is used.</p>
</li>
<li>
<p>If a directory object is not specified as part of the file specification, and if no directory object is named by the <code dir="ltr">DIRECTORY</code> parameter, then the value of the environment variable, <code dir="ltr">DATA_PUMP_DIR</code>, is used. This environment variable is defined using operating system commands on the client system where the Data Pump Export and Import utilities are run. The value assigned to this client-based environment variable must be the name of a server-based directory object, which must first be created on the server system by a DBA. For example, the following SQL statement creates a directory object on the server system. The name of the directory object is <code dir="ltr">DUMP_FILES1</code>, and it is located at <code dir="ltr">'/usr/apps/dumpfiles1'</code>.</p>
<pre dir="ltr">
SQL&gt; CREATE DIRECTORY DUMP_FILES1 AS '/usr/apps/dumpfiles1';
</pre>
<p>Then, a user on a UNIX-based client system using <code dir="ltr">csh</code> can assign the value <code dir="ltr">DUMP_FILES1</code> to the environment variable <code dir="ltr">DATA_PUMP_DIR</code>. The <code dir="ltr">DIRECTORY</code> parameter can then be omitted from the command line. The dump file <code dir="ltr">employees.dmp</code>, and the log file <code dir="ltr">export.log</code>, are written to <code dir="ltr">'/usr/apps/dumpfiles1'</code>.</p>
<pre dir="ltr">
%setenv DATA_PUMP_DIR DUMP_FILES1
%expdp hr TABLES=employees DUMPFILE=employees.dmp
</pre></li>
<li>
<p>If none of the previous three conditions yields a directory object and you are a privileged user, then Data Pump attempts to use the value of the default server-based directory object, <code dir="ltr">DATA_PUMP_DIR</code>. This directory object is automatically created at database creation or when the database dictionary is upgraded. You can use the following SQL query to see the path definition for <code dir="ltr">DATA_PUMP_DIR</code>:</p>
<pre dir="ltr">
SQL&gt; SELECT directory_name, directory_path FROM dba_directories
2 WHERE directory_name='DATA_PUMP_DIR';
</pre>
<p>If you are not a privileged user, then access to the <code dir="ltr">DATA_PUMP_DIR</code> directory object must have previously been granted to you by a DBA.</p>
<p>Do not confuse the default <code dir="ltr">DATA_PUMP_DIR</code> directory object with the client-based environment variable of the same name.</p>
</li>
</ol>
<a id="CJAJGBFF"></a>
<div id="SUTIL3755" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Oracle RAC Considerations</h4>
<p>Keep the following considerations in mind when working in an Oracle RAC environment.</p>
<ul>
<li>
<p>To use Data Pump or external tables in an Oracle RAC configuration, you must ensure that the directory object path is on a cluster-wide file system.</p>
<p>The directory object must point to shared physical storage that is visible to, and accessible from, all instances where Data Pump and/or external tables processes may run.</p>
</li>
<li>
<p>The default Data Pump behavior is that worker processes can run on any instance in an Oracle RAC configuration. Therefore, workers on those Oracle RAC instances must have physical access to the location defined by the directory object, such as shared storage media. If the configuration does not have shared storage for this purpose, but you still require parallelism, then you can use the <code dir="ltr">CLUSTER=no</code> parameter to constrain all worker processes to the instance where the Data Pump job was started.</p>
</li>
<li>
<p>Under certain circumstances, Data Pump uses parallel query slaves to load or unload data. In an Oracle RAC environment, Data Pump does not control where these slaves run, and they may run on other instances in the Oracle RAC, regardless of what is specified for <code dir="ltr">CLUSTER</code> and <code dir="ltr">SERVICE_NAME</code> for the Data Pump job. Controls for parallel query operations are independent of Data Pump. When parallel query slaves run on other instances as part of a Data Pump job, they also require access to the physical storage of the dump file set.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1009537"></a>
<div id="SUTIL820" class="sect3">
<h4 class="sect3">Using Directory Objects When Oracle Automatic Storage Management<a id="sthref26"></a><a id="sthref27"></a> Is Enabled</h4>
<p>If you use Data Pump Export or Import with Oracle Automatic Storage Management (Oracle ASM) enabled, then you must define the directory object used for the dump file so that the Oracle ASM disk group name is used (instead of an operating system directory path). A separate directory object, which points to an operating system directory path, should be used for the log file. For example, you would create a directory object for the Oracle ASM dump file as follows:</p>
<pre dir="ltr">
SQL&gt; CREATE or REPLACE DIRECTORY dpump_dir as '+DATAFILES/';
</pre>
<p>Then you would create a separate directory object for the log file:</p>
<pre dir="ltr">
SQL&gt; CREATE or REPLACE DIRECTORY dpump_log as '/homedir/user1/';
</pre>
<p>To enable user <code dir="ltr">hr</code> to have access to these directory objects, you would assign the necessary privileges, for example:</p>
<pre dir="ltr">
SQL&gt; GRANT READ, WRITE ON DIRECTORY dpump_dir TO hr;
SQL&gt; GRANT READ, WRITE ON DIRECTORY dpump_log TO hr;
</pre>
<p>You would then use the following Data Pump Export command (you will be prompted for a password):</p>
<pre dir="ltr">
&gt; expdp hr DIRECTORY=dpump_dir DUMPFILE=hr.dmp LOGFILE=dpump_log:hr.log
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>The Export <a href="dp_export.htm#i1009233">DIRECTORY</a> parameter</p>
</li>
<li>
<p>The Import <a href="dp_import.htm#i1008820">DIRECTORY</a> parameter</p>
</li>
<li>
<p><a class="olink SQLRF" href="../e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the <code dir="ltr">CREATE</code> <code dir="ltr">DIRECTORY</code> command</p>
</li>
<li>
<p><a class="olink OSTMG" href="../e18951/toc.htm"><span class="italic">Oracle Automatic Storage Management Administrator's Guide</span></a> for more information about Oracle ASM</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1009999"></a>
<div id="SUTIL822" class="sect2">
<h3 class="sect2">Using Substitution Variables</h3>
<p>Instead of, or in addition to, listing specific file names, you can use the <code dir="ltr">DUMPFILE</code> parameter during export operations to specify multiple dump files, by using a substitution variable (<code dir="ltr">%U</code>) in the file name. This is called a dump file template. The new dump files are created as they are needed, beginning with <code dir="ltr">01</code> for <code dir="ltr">%U</code>, then using <code dir="ltr">02</code>, <code dir="ltr">03</code>, and so on. Enough dump files are created to allow all processes specified by the current setting of the <code dir="ltr">PARALLEL</code> parameter to be active. If one of the dump files becomes full because its size has reached the maximum size specified by the <code dir="ltr">FILESIZE</code> parameter, then it is closed and a new dump file (with a new generated name) is created to take its place.</p>
<p>If multiple dump file templates are provided, they are used to generate dump files in a round-robin fashion. For example, if <code dir="ltr">expa%U</code>, <code dir="ltr">expb%U,</code> and <code dir="ltr">expc%U</code> were all specified for a job having a parallelism of 6, then the initial dump files created would be <code dir="ltr">expa01</code>.<code dir="ltr">dmp</code>, <code dir="ltr">expb01</code>.<code dir="ltr">dmp</code>, <code dir="ltr">expc01</code>.<code dir="ltr">dmp</code>, <code dir="ltr">expa02</code>.<code dir="ltr">dmp</code>, <code dir="ltr">expb02</code>.<code dir="ltr">dmp</code>, and <code dir="ltr">expc02</code>.<code dir="ltr">dmp</code>.</p>
<p>For import and SQLFILE operations, if dump file specifications <code dir="ltr">expa%U</code>, <code dir="ltr">expb%U,</code> and <code dir="ltr">expc%U</code> are specified, then the operation begins by attempting to open the dump files <code dir="ltr">expa01</code>.<code dir="ltr">dmp</code>, <code dir="ltr">expb01</code>.<code dir="ltr">dmp</code>, and <code dir="ltr">expc01</code>.<code dir="ltr">dmp</code>. It is possible for the master table to span multiple dump files, so until all pieces of the master table are found, dump files continue to be opened by incrementing the substitution variable and looking up the new file names (for example, <code dir="ltr">expa02</code>.<code dir="ltr">dmp</code>, <code dir="ltr">expb02</code>.<code dir="ltr">dmp</code>, and <code dir="ltr">expc02</code>.<code dir="ltr">dmp</code>). If a dump file does not exist, then the operation stops incrementing the substitution variable for the dump file specification that was in error. For example, if <code dir="ltr">expb01</code>.<code dir="ltr">dmp</code> and <code dir="ltr">expb02</code>.<code dir="ltr">dmp</code> are found but <code dir="ltr">expb03</code>.<code dir="ltr">dmp</code> is not found, then no more files are searched for using the <code dir="ltr">expb%U</code> specification. Once the entire master table is found, it is used to determine whether all dump files in the dump file set have been located.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CEGFCFFI"></a>
<div id="SUTIL110" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Moving Data Between Different Database Releases<a id="sthref28"></a><a id="sthref29"></a></h2>
<p>Because most Data Pump operations are performed on the server side, if you are using any release of the database other than <code dir="ltr">COMPATIBLE</code>, then you must provide the server with the specific release information. Otherwise, errors may occur. To specify release information, use the <code dir="ltr">VERSION</code> parameter.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>The Export <a href="dp_export.htm#i1007148">VERSION</a> parameter</p>
</li>
<li>
<p>The Import <a href="dp_import.htm#i1007382">VERSION</a> parameter</p>
</li>
</ul>
</div>
<p>Keep the following information in mind when you are using Data Pump Export and Import to move data between different database releases:</p>
<ul>
<li>
<p>If you specify a database release that is older than the current database release, then certain features may be unavailable. For example, specifying <code dir="ltr">VERSION=10.1</code> causes an error if data compression is also specified for the job because compression was not supported in Oracle Database 10<span class="italic">g</span> release 1 (10.1).</p>
</li>
<li>
<p>On a Data Pump export, if you specify a database release that is older than the current database release, then a dump file set is created that you can import into that older release of the database. However, the dump file set does not contain any objects that the older database release does not support.</p>
</li>
<li>
<p>Data Pump Import can always read dump file sets created by older releases of the database.</p>
</li>
<li>
<p>Data Pump Import cannot read dump file sets created by a database release that is newer than the current database release, unless those dump file sets were created with the <code dir="ltr">VERSION</code> parameter set to the release of the target database. Therefore, the best way to perform a downgrade is to perform your Data Pump export with the <code dir="ltr">VERSION</code> parameter set to the release of the target database.</p>
</li>
<li>
<p>When operating across a network link, Data Pump requires that the source and target databases differ by no more than one version. For example, if one database is Oracle Database 11<span class="italic">g</span>, then the other database must be either 11<span class="italic">g</span> or 10<span class="italic">g</span>. Note that Data Pump checks only the major version number (for example, 10<span class="italic">g</span> and 11<span class="italic">g</span>), not specific release numbers (for example, 10.1, 10.2, 11.1, or 11.2).</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CJAICAFE"></a>
<div id="SUTIL2883" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">SecureFiles LOB Considerations<a id="sthref30"></a><a id="sthref31"></a></h2>
<p>When you use Data Pump Export to export SecureFiles LOBs, the resulting behavior depends on several things, including the value of the Export <code dir="ltr">VERSION</code> parameter, whether ContentType is present, and whether the LOB is archived and data is cached. The following scenarios cover different combinations of these variables:</p>
<ul>
<li>
<p>If a table contains SecureFiles LOBs with ContentType and the Export <code dir="ltr">VERSION</code> parameter is set to a value earlier than <code dir="ltr">11.2.0.0.0</code>, then the ContentType is not exported.</p>
</li>
<li>
<p>If a table contains SecureFiles LOBs with ContentType and the Export <code dir="ltr">VERSION</code> parameter is set to a value of <code dir="ltr">11.2.0.0.0</code> or later, then the ContentType is exported and restored on a subsequent import.</p>
</li>
<li>
<p>If a table contains a SecureFiles LOB that is currently archived and the data is cached, and the Export <code dir="ltr">VERSION</code> parameter is set to a value earlier than <code dir="ltr">11.2.0.0.0</code>, then the SecureFiles LOB data is exported and the archive metadata is dropped. In this scenario, if <code dir="ltr">VERSION</code> is set to <code dir="ltr">11.1</code> or later, then the SecureFiles LOB becomes a vanilla SecureFiles LOB. But if <code dir="ltr">VERSION</code> is set to a value earlier than <code dir="ltr">11.1</code>, then the SecureFiles LOB becomes a BasicFiles LOB.</p>
</li>
<li>
<p>If a table contains a SecureFiles LOB that is currently archived but the data is <span class="italic">not</span> cached, and the Export <code dir="ltr">VERSION</code> parameter is set to a value earlier than <code dir="ltr">11.2.0.0.0</code>, then an ORA-45001 error is returned.</p>
</li>
<li>
<p>If a table contains a SecureFiles LOB that is currently archived and the data is cached, and the Export <code dir="ltr">VERSION</code> parameter is set to a value of <code dir="ltr">11.2.0.0.0</code> or later, then both the cached data and the archive metadata is exported.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB4444" href="../../appdev.112/e18294/adlob_smart.htm#ADLOB4444"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for more information about SecureFiles</div>
</div>
<!-- class="sect1" -->
<a id="BABGHFFH"></a>
<div id="SUTIL3834" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Data Pump Exit Codes</h2>
<p>Oracle Data Pump provides the results of export and import operations immediately upon completion. In addition to recording the results in a log file, Data Pump may also report the outcome in a process exit code<a id="sthref32"></a>. This allows you to check the outcome of a Data Pump job from the command line or a script.</p>
<p><a href="#BABICAEC">Table 1-1</a> describes the Data Pump exit codes for Unix and Windows NT.</p>
<div id="SUTIL3835" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref33"></a><a id="BABICAEC"></a>Table 1-1 Data Pump Exit Codes</p>
<table class="cellalignment1399" title="Data Pump Exit Codes " summary="Data Pump Exit Codes" dir="ltr">
<thead>
<tr class="cellalignment1388">
<th class="cellalignment1395" id="r1c1-t22">Exit Code</th>
<th class="cellalignment1395" id="r1c2-t22">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r2c1-t22" headers="r1c1-t22">
<p><code dir="ltr">EX_SUCC 0</code></p>
</td>
<td class="cellalignment1396" headers="r2c1-t22 r1c2-t22">
<p>The export or import job completed successfully. No errors are displayed to the output device or recorded in the log file, if there is one.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r3c1-t22" headers="r1c1-t22">
<p><code dir="ltr">EX_SUCC_ERR 5</code></p>
</td>
<td class="cellalignment1396" headers="r3c1-t22 r1c2-t22">
<p>The export or import job completed successfully but there were errors encountered during the job. The errors are displayed to the output device and recorded in the log file, if there is one.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r4c1-t22" headers="r1c1-t22">
<p><code dir="ltr">EX_FAIL 1</code></p>
</td>
<td class="cellalignment1396" headers="r4c1-t22 r1c2-t22">
<p>The export or import job encountered one or more fatal errors, including the following:</p>
<ul>
<li>
<p>Errors on the command line or in command syntax</p>
</li>
<li>
<p>Oracle database errors from which export or import cannot recover</p>
</li>
<li>
<p>Operating system errors (such as malloc)</p>
</li>
<li>
<p>Invalid parameter values that prevent the job from starting (for example, an invalid directory object specified in the <code dir="ltr">DIRECTORY</code> parameter)</p>
</li>
</ul>
<p>A fatal error is displayed to the output device but may not be recorded in the log file. Whether it is recorded in the log file can depend on several factors, including:</p>
<ul>
<li>
<p>Was a log file specified at the start of the job?</p>
</li>
<li>
<p>Did the processing of the job proceed far enough for a log file to be opened?</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1387">
<tr>
<td class="cellalignment1396">
<table class="cellalignment1392">
<tr>
<td class="cellalignment1391"><a href="part_dp.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1391"><a href="dp_export.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2018,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1398">
<table class="cellalignment1390">
<tr>
<td class="cellalignment1391"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1391"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1391"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1391"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1391"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1391"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
