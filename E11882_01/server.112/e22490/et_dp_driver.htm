<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>The ORACLE_DATAPUMP Access Driver</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1093" />
<meta name="dcterms.created" content="2018-03-26T15:55:13Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Utilities" />
<meta name="dcterms.identifier" content="E22490-08" />
<meta name="dcterms.isVersionOf" content="SUTIL" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2018,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="et_params.htm" title="Previous" type="text/html" />
<link rel="Next" href="part_other.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e22490.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">25/36</span> <!-- End Header -->
<div id="SUTIL500" class="chapter"><a id="g1017944"></a> <a id="i1006773"></a>
<h1 class="chapter"><span class="secnum">15</span> The ORACLE_DATAPUMP Access Driver</h1>
<p>This chapter describes the <code dir="ltr">ORACLE_DATAPUMP</code> access driver which provides a set of access parameters unique to external tables of the type <code dir="ltr">ORACLE_DATAPUMP</code>. You can use the access parameters to modify the default behavior of the access driver. The information you provide through the access driver ensures that data from the data source is processed so that it matches the definition of the external table.</p>
<p>The following topics are discussed in this chapter:</p>
<ul>
<li>
<p><a href="#i1005711">access_parameters Clause</a></p>
</li>
<li>
<p><a href="#i1007502">Unloading and Loading Data with the ORACLE_DATAPUMP Access Driver</a></p>
</li>
<li>
<p><a href="#i1005720">Supported Datatypes</a></p>
</li>
<li>
<p><a href="#i1006428">Unsupported Datatypes</a></p>
</li>
<li>
<p><a href="#CHDDIDBJ">Performance Hints When Using the ORACLE_DATAPUMP Access Driver</a></p>
</li>
<li>
<p><a href="#CHDIJHHF">Restrictions When Using the ORACLE_DATAPUMP Access Driver</a></p>
</li>
<li>
<p><a href="#i1006851">Reserved Words for the ORACLE_DATAPUMP Access Driver</a></p>
</li>
</ul>
<p>To use the information in this chapter, you must have some knowledge of the file format and record format (including character sets and field datatypes) of the data files on your platform. You must also know enough about SQL to be able to create an external table and perform queries against it.</p>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>It is sometimes difficult to describe syntax without using other syntax that is not documented until later in the chapter. If it is not clear what some syntax is supposed to do, then you might want to skip ahead and read about that particular element.</p>
</li>
<li>
<p>When<a id="sthref1396"></a><a id="sthref1397"></a> identifiers (for example, column or table names) are specified in the external table access parameters, certain values are considered to be reserved words by the access parameter parser. If a reserved word is used as an identifier, then it must be enclosed in double quotation marks. See <a href="#i1006851">"Reserved Words for the ORACLE_DATAPUMP Access Driver"</a>.</p>
</li>
</ul>
</div>
<a id="i1005711"></a>
<div id="SUTIL1449" class="sect1">
<h2 class="sect1">access_parameters Clause</h2>
<p>When you create the external table, you can specify certain parameters in an <code dir="ltr">access_parameters</code> clause. This clause is optional, as are its individual parameters. For example, you could specify <code dir="ltr">LOGFILE</code>, but not <code dir="ltr">VERSION</code>, or vice versa. The syntax for the <code dir="ltr">access_parameters</code> clause is as follows.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
These access parameters are collectively referred<a id="sthref1398"></a><a id="sthref1399"></a><a id="sthref1400"></a> to as the <code dir="ltr">opaque_format_spec</code> in the SQL <code dir="ltr">CREATE TABLE...ORGANIZATION EXTERNAL</code> statement.</div>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><a class="olink SQLRF01402" href="../../server.112/e41084/statements_7002.htm#SQLRF01402"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about specifying <code dir="ltr">opaque_format_spec</code> when using the SQL <code dir="ltr">CREATE TABLE...ORGANIZATION EXTERNAL</code> statement</p>
</li>
</ul>
</div>
<img width="579" height="315" src="img/et_oracle_datapump.gif" alt="Description of et_oracle_datapump.gif follows" /><br />
<a id="sthref1401" href="img_text/et_oracle_datapump.htm">Description of the illustration ''et_oracle_datapump.gif''</a><br />
<br />
<div id="SUTIL1450" class="sect2"><a id="sthref1402"></a>
<h3 class="sect2">comments</h3>
<p>Comments<a id="sthref1403"></a><a id="sthref1404"></a> are lines that begin with two hyphens followed by text. Comments must be placed <span class="italic">before</span> any access parameters, for example:</p>
<pre dir="ltr">
--This is a comment.
--This is another comment.
NOLOG
</pre>
<p>All text to the right of the double hyphen is ignored, until the end of the line.</p>
</div>
<!-- class="sect2" -->
<a id="CCHFHJEB"></a>
<div id="SUTIL1451" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">COMPRESSION</h3>
<p>Default: <code dir="ltr">DISABLED</code></p>
<p class="subhead1"><a id="SUTIL3429"></a>Purpose</p>
<p>Specifies whether to compress data before it is written to the dump file set.</p>
<p class="subhead1"><a id="SUTIL3430"></a>Syntax and Description</p>
<pre dir="ltr">
COMPRESSION [ENABLED | DISABLED]
</pre>
<p>If <code dir="ltr">ENABLED</code> is specified, then all data is compressed for the entire upload operation.</p>
<p>If <code dir="ltr">DISABLED</code> is specified, then no data is compressed for the upload operation.</p>
<p class="subhead1"><a id="SUTIL3431"></a>Example</p>
<p>In the following example, the <code dir="ltr">COMPRESSION</code> parameter is set to <code dir="ltr">ENABLED</code>. Therefore, all data written to the <code dir="ltr">dept.dmp</code> dump file will be in compressed format.</p>
<pre dir="ltr">
CREATE TABLE deptXTec3
 ORGANIZATION EXTERNAL (TYPE ORACLE_DATAPUMP DEFAULT DIRECTORY def_dir1
 ACCESS PARAMETERS (COMPRESSION ENABLED) LOCATION ('dept.dmp'));
</pre></div>
<!-- class="sect2" -->
<a id="CCHIJCHG"></a>
<div id="SUTIL1452" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">ENCRYPTION</h3>
<p>Default: <code dir="ltr">DISABLED</code></p>
<p class="subhead1"><a id="SUTIL3432"></a>Purpose</p>
<p>Specifies whether to encrypt data before it is written to the dump file set.</p>
<p class="subhead1"><a id="SUTIL3433"></a>Syntax and Description</p>
<pre dir="ltr">
ENCRYPTION [ENABLED | DISABLED]
</pre>
<p>If <code dir="ltr">ENABLED</code> is specified, then all data is written to the dump file set in encrypted format.</p>
<p>If <code dir="ltr">DISABLED</code> is specified, then no data is written to the dump file set in encrypted format.</p>
<p class="subhead1"><a id="SUTIL3434"></a>Restrictions</p>
<p>This parameter is used only for export operations.</p>
<p class="subhead1"><a id="SUTIL3435"></a>Example</p>
<p>In the following example, the <code dir="ltr">ENCRYPTION</code> parameter is set to <code dir="ltr">ENABLED</code>. Therefore, all data written to the <code dir="ltr">dept.dmp</code> file will be in encrypted format.</p>
<pre dir="ltr">
CREATE TABLE deptXTec3
 ORGANIZATION EXTERNAL (TYPE ORACLE_DATAPUMP DEFAULT DIRECTORY def_dir1
 ACCESS PARAMETERS (ENCRYPTION ENABLED) LOCATION ('dept.dmp')); 
</pre></div>
<!-- class="sect2" -->
<div id="SUTIL1453" class="sect2"><a id="sthref1405"></a>
<h3 class="sect2">LOGFILE | NOLOGFILE</h3>
<p>Default: If <code dir="ltr">LOGFILE</code> is not specified, then a log file is created in the default directory and the name of the log file is generated from the table name and the process ID with an extension of .<code dir="ltr">log</code>. If a log file already exists by the same name, then the access driver reopens that log file and appends the new log information to the end.</p>
<p class="subhead1"><a id="SUTIL3436"></a>Purpose</p>
<p><code dir="ltr">LOGFILE</code> specifies the name of the log file that contains any messages generated while the dump file was being accessed. <code dir="ltr">NOLOGFILE</code> prevents the creation of a log file.</p>
<p class="subhead1"><a id="SUTIL3437"></a>Syntax and Description</p>
<pre dir="ltr">
NOLOGFILE
</pre>
<p>or</p>
<pre dir="ltr">
LOGFILE [<span class="italic">directory_object</span>:]<span class="italic">logfile_name</span>
</pre>
<p>If a directory object is not specified as part of the log file name, then the directory object specified by the <code dir="ltr">DEFAULT</code> <code dir="ltr">DIRECTORY</code> attribute is used. If a directory object is not specified and no default directory was specified, then an error is returned. See <a href="#i1005579">"File Names for LOGFILE"</a> for information about using substitution variables to create unique file names during parallel loads or unloads.</p>
<p class="subhead1"><a id="SUTIL3438"></a>Example</p>
<p>In the following example, the dump file, <code dir="ltr">dept_dmp</code>, is in the directory identified by the directory object, <code dir="ltr">load_dir</code>, but the log file, <code dir="ltr">deptxt</code>.<code dir="ltr">log</code>, is in the directory identified by the directory object, <code dir="ltr">log_dir</code>.</p>
<pre dir="ltr">
CREATE TABLE dept_xt (dept_no INT, dept_name CHAR(20), location CHAR(20))
ORGANIZATION EXTERNAL (TYPE ORACLE_DATAPUMP DEFAULT DIRECTORY load_dir 
ACCESS PARAMETERS (LOGFILE log_dir:deptxt) LOCATION ('dept_dmp'));
</pre>
<a id="i1005579"></a>
<div id="SUTIL1454" class="sect3">
<h4 class="sect3">File Names for LOGFILE</h4>
<p>The access driver does some symbol substitution to help make file names unique in the case of parallel loads. The symbol substitutions supported are as follows:</p>
<ul>
<li>
<p><code dir="ltr">%p</code> is replaced by the process ID of the current process. For example, if the process ID of the access driver is 12345, then <code dir="ltr">exttab_%p</code>.<code dir="ltr">log</code> becomes <code dir="ltr">exttab_12345.log</code>.</p>
</li>
<li>
<p><code dir="ltr">%a</code> is replaced by the agent number of the current process. The agent number is the unique number assigned to each parallel process accessing the external table. This number is padded to the left with zeros to fill three characters. For example, if the third parallel agent is creating a file and <code dir="ltr">exttab_%a</code>.<code dir="ltr">log</code> was specified as the file name, then the agent would create a file named <code dir="ltr">exttab_003.log</code>.</p>
</li>
<li>
<p><code dir="ltr">%%</code> is replaced by <code dir="ltr">%</code>. If there is a need to have a percent sign in the file name, then this symbol substitution must be used.</p>
</li>
</ul>
<p>If the <code dir="ltr">%</code> character is followed by anything other than one of the characters in the preceding list, then an error is returned.</p>
<p>If <code dir="ltr">%p</code> or <code dir="ltr">%a</code> is not used to create unique file names for output files and an external table is being accessed in parallel, then output files may be corrupted or agents may be unable to write to the files.</p>
<p>If no extension is supplied for the file, then a default extension of .<code dir="ltr">log</code> is used. If the name generated is not a valid file name, then an error is returned and no data is loaded or unloaded.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1005725"></a>
<div id="SUTIL1455" class="sect2">
<h3 class="sect2">VERSION Clause</h3>
<p>The <code dir="ltr">VERSION</code> clause is used to specify the minimum release of Oracle Database that will be reading the dump file. If you specify <code dir="ltr">11.1</code>, then both Oracle Database 11<span class="italic">g</span> release 11.1 and 11.2 databases can read the dump file. If you specify <code dir="ltr">11.2</code>, then only Oracle Database 11<span class="italic">g</span> release 2 (11.2) databases can read the dump file.</p>
<p>The default value is <code dir="ltr">COMPATIBLE</code>.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL1456" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1406"></a>
<h3 class="sect2">Effects of Using the SQL ENCRYPT Clause</h3>
<p>If you specify the SQL <code dir="ltr">ENCRYPT</code> clause when you create an external table, then keep the following in mind:<a id="sthref1407"></a><a id="sthref1408"></a><a id="sthref1409"></a></p>
<ul>
<li>
<p>The columns for which you specify the <code dir="ltr">ENCRYPT</code> clause will be encrypted before being written into the dump file.</p>
</li>
<li>
<p>If you move the dump file to another database, then the same encryption password must be used for both the encrypted columns in the dump file and for the external table used to read the dump file.</p>
</li>
<li>
<p>If you do not specify a password for the correct encrypted columns in the external table on the second database, then an error is returned. If you do not specify the correct password, then garbage data is written to the dump file.</p>
</li>
<li>
<p>The dump file that is produced must be at release 10.2 or higher. Otherwise, an error is returned.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF" href="../e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about using the <code dir="ltr">ENCRYPT</code> clause on a <code dir="ltr">CREATE TABLE</code> statement</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007502"></a>
<div id="SUTIL1457" class="sect1">
<h2 class="sect1">Unloading and Loading Data with the ORACLE_DATAPUMP Access Driver</h2>
<p>As part of creating an external table with a SQL <code dir="ltr">CREATE TABLE AS SELECT</code> statement, the <code dir="ltr">ORACLE_DATAPUMP</code> access driver can write data to a dump file. The data in the file is written in a binary format that can only be read by the <code dir="ltr">ORACLE_DATAPUMP</code> access driver. Once the dump file is created, it cannot be modified (that is, no data manipulation language (DML) operations can be performed on it). However, the file can be read any number of times and used as the dump file for another external table in the same database or in a different database.</p>
<p>The following steps use the sample schema, <code dir="ltr">oe</code>, to show an extended example of how you can use the <code dir="ltr">ORACLE_DATAPUMP</code> access driver to unload and load data. (The example assumes that the directory object <code dir="ltr">def_dir1</code> already exists, and that user <code dir="ltr">oe</code> has read and write access to it.)</p>
<ol>
<li>
<p>An external table will populate a file with data only as part of creating the external table with the <code dir="ltr">AS</code> <code dir="ltr">SELECT</code> clause. The following example creates an external table named <code dir="ltr">inventories_xt</code> and populates the dump file for the external table with the data from table <code dir="ltr">inventories</code> in the <code dir="ltr">oe</code> schema.</p>
<pre dir="ltr">
SQL&gt; CREATE TABLE inventories_xt
  2  ORGANIZATION EXTERNAL
  3  (
  4    TYPE ORACLE_DATAPUMP
  5    DEFAULT DIRECTORY def_dir1
  6    LOCATION ('inv_xt.dmp')
  7  )
  8  AS SELECT * FROM inventories;

Table created.
</pre></li>
<li>
<p>Describe both <code dir="ltr">inventories</code> and the new external table, as follows. They should both match.</p>
<pre dir="ltr">
SQL&gt; DESCRIBE inventories
 Name                                      Null?    Type
 ---------------------------------------- --------- ----------------
 PRODUCT_ID                                NOT NULL NUMBER(6)
 WAREHOUSE_ID                              NOT NULL NUMBER(3)
 QUANTITY_ON_HAND                          NOT NULL NUMBER(8)

SQL&gt; DESCRIBE inventories_xt
 Name                                      Null?    Type
 ----------------------------------------- -------- -----------------
 PRODUCT_ID                                NOT NULL NUMBER(6)
 WAREHOUSE_ID                              NOT NULL NUMBER(3)
 QUANTITY_ON_HAND                          NOT NULL NUMBER(8)
</pre></li>
<li>
<p>Now that the external table is created, it can be queried just like any other table. For example, select the count of records in the external table, as follows:</p>
<pre dir="ltr">
SQL&gt; SELECT COUNT(*) FROM inventories_xt;

  COUNT(*)
----------
      1112
</pre></li>
<li>
<p>Compare the data in the external table against the data in <code dir="ltr">inventories</code>. There should be no differences.</p>
<pre dir="ltr">
SQL&gt; SELECT * FROM inventories MINUS SELECT * FROM inventories_xt;

no rows selected
</pre></li>
<li>
<p>After an external table has been created and the dump file populated by the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> <code dir="ltr">AS</code> <code dir="ltr">SELECT</code> statement, no rows may be added, updated, or deleted from the external table. Any attempt to modify the data in the external table will fail with an error.</p>
<p>The following example shows an attempt to use data manipulation language (DML) on an existing external table. This will return an error, as shown.</p>
<pre dir="ltr">
SQL&gt; DELETE FROM inventories_xt WHERE warehouse_id = 5;
DELETE FROM inventories_xt WHERE warehouse_id = 5
            *
ERROR at line 1:
ORA-30657: operation not supported on external organized table
</pre></li>
<li>
<p>The dump file created for the external table can now be moved and used as the dump file for another external table in the same database or different database. Note that when you create an external table that uses an existing file, there is no <code dir="ltr">AS</code> <code dir="ltr">SELECT</code> clause for the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement.</p>
<pre dir="ltr">
SQL&gt; CREATE TABLE inventories_xt2
  2  (
  3    product_id          NUMBER(6),
  4    warehouse_id        NUMBER(3),
  5    quantity_on_hand    NUMBER(8)
  6  )
  7  ORGANIZATION EXTERNAL
  8  (
  9    TYPE ORACLE_DATAPUMP
 10    DEFAULT DIRECTORY def_dir1
 11    LOCATION ('inv_xt.dmp')
 12  );

Table created.
</pre></li>
<li>
<p>Compare the data for the new external table against the data in the <code dir="ltr">inventories</code> table. The <code dir="ltr">product_id</code> field will be converted to a compatible datatype before the comparison is done. There should be no differences.</p>
<pre dir="ltr">
SQL&gt; SELECT * FROM inventories MINUS SELECT * FROM inventories_xt2;

no rows selected
</pre></li>
<li>
<p>Create an external table with three dump files and with a degree of parallelism of three.</p>
<pre dir="ltr">
SQL&gt; CREATE TABLE inventories_xt3
  2  ORGANIZATION EXTERNAL
  3  (
  4    TYPE ORACLE_DATAPUMP
  5    DEFAULT DIRECTORY def_dir1
  6    LOCATION ('inv_xt1.dmp', 'inv_xt2.dmp', 'inv_xt3.dmp')
  7  )
  8  PARALLEL 3
  9  AS SELECT * FROM inventories;

Table created.
</pre></li>
<li>
<p>Compare the data unload against <code dir="ltr">inventories</code>. There should be no differences.</p>
<pre dir="ltr">
SQL&gt; SELECT * FROM inventories MINUS SELECT * FROM inventories_xt3;

no rows selected
</pre></li>
<li>
<p>Create an external table containing some rows from table <code dir="ltr">inventories</code>.</p>
<pre dir="ltr">
SQL&gt; CREATE TABLE inv_part_xt
  2  ORGANIZATION EXTERNAL
  3  (
  4  TYPE ORACLE_DATAPUMP
  5  DEFAULT DIRECTORY def_dir1
  6  LOCATION ('inv_p1_xt.dmp')
  7  )
  8  AS SELECT * FROM inventories WHERE warehouse_id &lt; 5;
 
Table created.
</pre></li>
<li>
<p>Create another external table containing the rest of the rows from <code dir="ltr">inventories</code>.</p>
<pre dir="ltr">
SQL&gt; drop table inv_part_xt;
 
Table dropped.
 
SQL&gt; 
SQL&gt; CREATE TABLE inv_part_xt
  2  ORGANIZATION EXTERNAL
  3  (
  4  TYPE ORACLE_DATAPUMP
  5  DEFAULT DIRECTORY def_dir1
  6  LOCATION ('inv_p2_xt.dmp')
  7  )
  8  AS SELECT * FROM inventories WHERE warehouse_id &gt;= 5;
 
Table created.
</pre></li>
<li>
<p>Create an external table that uses the two dump files created in Steps 10 and 11.</p>
<pre dir="ltr">
SQL&gt; CREATE TABLE inv_part_all_xt
  2  (
  3  product_id NUMBER(6),
  4  warehouse_id NUMBER(3),
  5  quantity_on_hand NUMBER(8)
  6  )
  7  ORGANIZATION EXTERNAL
  8  (
  9  TYPE ORACLE_DATAPUMP
 10  DEFAULT DIRECTORY def_dir1
 11  LOCATION ('inv_p1_xt.dmp','inv_p2_xt.dmp')
 12  );
 
Table created.
</pre></li>
<li>
<p>Compare the new external table to the <code dir="ltr">inventories</code> table. There should be no differences. This is because the two dump files used to create the external table have the same metadata (for example, the same table name <code dir="ltr">inv_part_xt</code> and the same column information).</p>
<pre dir="ltr">
SQL&gt; SELECT * FROM inventories MINUS SELECT * FROM inv_part_all_xt;

no rows selected
</pre></li>
</ol>
<div id="SUTIL1458" class="sect2"><a id="sthref1410"></a>
<h3 class="sect2">Parallel Loading and Unloading</h3>
<p>The dump file must be on a disk big enough to hold all the data being written. If there is insufficient space for all of the data, then an error is returned for the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> <code dir="ltr">AS</code> <code dir="ltr">SELECT</code> statement. One way to alleviate the problem is to create multiple files in multiple directory objects (assuming those directories are on different disks) when executing the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> <code dir="ltr">AS</code> <code dir="ltr">SELECT</code> statement. Multiple files can be created by specifying multiple locations in the form <code dir="ltr">directory:file</code> in the <code dir="ltr">LOCATION</code> clause and by specifying the <code dir="ltr">PARALLEL</code> clause. Each parallel I/O server process that is created to populate the external table writes to its own file. The number of files in the <code dir="ltr">LOCATION</code> clause should match the degree of parallelization because each I/O server process requires its own files. Any extra files that are specified will be ignored. If there are not enough files for the degree of parallelization specified, then the degree of parallelization is lowered to match the number of files in the <code dir="ltr">LOCATION</code> clause.</p>
<p>Here is an example of unloading the <code dir="ltr">inventories</code> table into three files.</p>
<pre dir="ltr">
SQL&gt; CREATE TABLE inventories_XT_3
  2  ORGANIZATION EXTERNAL
  3  (
  4    TYPE ORACLE_DATAPUMP
  5    DEFAULT DIRECTORY def_dir1
  6    LOCATION ('inv_xt1.dmp', 'inv_xt2.dmp', 'inv_xt3.dmp')
  7  )
  8  PARALLEL 3
  9  AS SELECT * FROM oe.inventories;

Table created.
</pre>
<p>When the <code dir="ltr">ORACLE_DATAPUMP</code> access driver is used to load data, parallel processes can read multiple dump files or even chunks of the same dump file concurrently. Thus, data can be loaded in parallel even if there is only one dump file, as long as that file is large enough to contain multiple file offsets. The degree of parallelization is not tied to the number of files in the <code dir="ltr">LOCATION</code> clause when reading from <code dir="ltr">ORACLE_DATAPUMP</code> external tables.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL1459" class="sect2"><a id="sthref1411"></a>
<h3 class="sect2">Combining Dump Files</h3>
<p>Dump files populated by different external tables can all be specified in the <code dir="ltr">LOCATION</code> clause of another external table. For example, data from different production databases can be unloaded into separate files, and then those files can all be included in an external table defined in a data warehouse. This provides an easy way of aggregating data from multiple sources. The only restriction is that the metadata for all of the external tables be exactly the same. This means that the character set, time zone, schema name, table name, and column names must all match. Also, the columns must be defined in the same order, and their datatypes must be exactly alike. This means that after you create the first external table you must drop it so that you can use the same table name for the second external table. This ensures that the metadata listed in the two dump files is the same and they can be used together to create the same external table.</p>
<pre dir="ltr">
SQL&gt; CREATE TABLE inv_part_1_xt
  2  ORGANIZATION EXTERNAL
  3  (
  4    TYPE ORACLE_DATAPUMP
  5    DEFAULT DIRECTORY def_dir1
  6    LOCATION ('inv_p1_xt.dmp')
  7  )
  8  AS SELECT * FROM oe.inventories WHERE warehouse_id &lt; 5;

Table created.

SQL&gt; DROP TABLE inv_part_1_xt;

SQL&gt; CREATE TABLE inv_part_1_xt
  2  ORGANIZATION EXTERNAL
  3  (
  4    TYPE ORACLE_DATAPUMP
  5    DEFAULT directory def_dir1
  6    LOCATION ('inv_p2_xt.dmp')
  7  )
  8  AS SELECT * FROM oe.inventories WHERE warehouse_id &gt;= 5;

Table created.

SQL&gt; CREATE TABLE inv_part_all_xt
  2  (
  3    PRODUCT_ID          NUMBER(6),
  4    WAREHOUSE_ID        NUMBER(3),
  5    QUANTITY_ON_HAND    NUMBER(8)
  6  )
  7  ORGANIZATION EXTERNAL
  8  (
  9    TYPE ORACLE_DATAPUMP
 10    DEFAULT DIRECTORY def_dir1
 11    LOCATION ('inv_p1_xt.dmp','inv_p2_xt.dmp')
 12  );

Table created.

SQL&gt; SELECT * FROM inv_part_all_xt MINUS SELECT * FROM oe.inventories;

no rows selected
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1005720"></a>
<div id="SUTIL1460" class="sect1">
<h2 class="sect1">Supported Datatypes</h2>
<p>You may encounter the following situations when you use external tables to move data between databases:</p>
<ul>
<li>
<p>The database character set and the database national character set may be different between the two platforms.</p>
</li>
<li>
<p>The endianness of the platforms for the two databases may be different.</p>
</li>
</ul>
<p>The <code dir="ltr">ORACLE_DATAPUMP</code> access driver automatically resolves some of these situations.</p>
<p>The following datatypes are automatically converted during loads and unloads:</p>
<ul>
<li>
<p>Character (<code dir="ltr">CHAR</code>, <code dir="ltr">NCHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">NVARCHAR2</code>)</p>
</li>
<li>
<p><code dir="ltr">RAW</code></p>
</li>
<li>
<p><code dir="ltr">NUMBER</code></p>
</li>
<li>
<p>Date/Time</p>
</li>
<li>
<p><code dir="ltr">BLOB</code></p>
</li>
<li>
<p><code dir="ltr">CLOB</code> and <code dir="ltr">NCLOB</code></p>
</li>
<li>
<p><code dir="ltr">ROWID</code> and <code dir="ltr">UROWID</code></p>
</li>
</ul>
<p>If you attempt to use a datatype that is not supported for external tables, then you receive an error. This is demonstrated in the following example, in which the unsupported datatype, <code dir="ltr">LONG</code>, is used:</p>
<pre dir="ltr">
SQL&gt; CREATE TABLE bad_datatype_xt
  2  (
  3    product_id             NUMBER(6),
  4    language_id            VARCHAR2(3),
  5    translated_name        NVARCHAR2(50),
  6    translated_description LONG
  7  )
  8  ORGANIZATION EXTERNAL
  9  (
 10    TYPE ORACLE_DATAPUMP
 11    DEFAULT DIRECTORY def_dir1
 12    LOCATION ('proddesc.dmp')
 13  );
  translated_description LONG
  *
ERROR at line 6:
ORA-30656: column type not supported on external organized table
</pre>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a href="#i1006428">"Unsupported Datatypes"</a></div>
</div>
<!-- class="sect1" -->
<a id="i1006428"></a>
<div id="SUTIL1461" class="sect1">
<h2 class="sect1">Unsupported Datatypes</h2>
<p>An external table supports a subset of all possible datatypes for columns. In particular, it supports character datatypes (except <code dir="ltr">LONG</code>), the <code dir="ltr">RAW</code> datatype, all numeric datatypes, and all date, timestamp, and interval datatypes.</p>
<p>This section describes how you can use the <code dir="ltr">ORACLE_DATAPUMP</code> access driver to unload and reload data for some of the unsupported datatypes, specifically:</p>
<ul>
<li>
<p><code dir="ltr">BFILE</code></p>
</li>
<li>
<p><code dir="ltr">LONG</code> and <code dir="ltr">LONG</code> <code dir="ltr">RAW</code></p>
</li>
<li>
<p>Final object types</p>
</li>
<li>
<p>Tables of final object types</p>
</li>
</ul>
<div id="SUTIL1462" class="sect2"><a id="sthref1412"></a>
<h3 class="sect2">Unloading and Loading BFILE Datatypes</h3>
<p>The <code dir="ltr">BFILE</code> datatype has two pieces of information stored in it: the directory object for the file and the name of the file within that directory object.</p>
<p>You can unload <code dir="ltr">BFILE</code> columns using the <code dir="ltr">ORACLE_DATAPUMP</code> access driver by storing the directory object name and the file name in two columns in the external table. The procedure <code dir="ltr">DBMS_LOB</code>.<code dir="ltr">FILEGETNAME</code> will return both parts of the name. However, because this is a procedure, it cannot be used in a <code dir="ltr">SELECT</code> statement. Instead, two functions are needed. The first will return the name of the directory object, and the second will return the name of the file.</p>
<p>The steps in the following extended example demonstrate the unloading and loading of <code dir="ltr">BFILE</code> datatypes.</p>
<ol>
<li>
<p>Create a function to extract the directory object for a <code dir="ltr">BFILE</code> column. Note that if the column is <code dir="ltr">NULL</code>, then <code dir="ltr">NULL</code> is returned.</p>
<pre dir="ltr">
SQL&gt; CREATE FUNCTION get_dir_name (bf BFILE) RETURN VARCHAR2 IS
  2  DIR_ALIAS VARCHAR2(255);
  3  FILE_NAME VARCHAR2(255);
  4  BEGIN
  5    IF bf is NULL
  6    THEN
  7      RETURN NULL;
  8    ELSE
  9      DBMS_LOB.FILEGETNAME (bf, dir_alias, file_name);
 10      RETURN dir_alias;
 11    END IF;
 12  END;
 13  /

Function created.
</pre></li>
<li>
<p>Create a function to extract the file name for a <code dir="ltr">BFILE</code> column.</p>
<pre dir="ltr">
SQL&gt; CREATE FUNCTION get_file_name (bf BFILE) RETURN VARCHAR2 is
  2  dir_alias VARCHAR2(255);
  3  file_name VARCHAR2(255);
  4  BEGIN
  5    IF bf is NULL
  6    THEN
  7      RETURN NULL;
  8    ELSE
  9      DBMS_LOB.FILEGETNAME (bf, dir_alias, file_name);
 10      RETURN file_name;
 11    END IF;
 12  END;
 13  /

Function created.
</pre></li>
<li>
<p>You can then add a row with a <code dir="ltr">NULL</code> value for the <code dir="ltr">BFILE</code> column, as follows:</p>
<pre dir="ltr">
SQL&gt; INSERT INTO PRINT_MEDIA (product_id, ad_id, ad_graphic)
  2  VALUES (3515, 12001, NULL);

1 row created.
</pre>
<p>You can use the newly created functions to populate an external table. Note that the functions should set columns <code dir="ltr">ad_graphic_dir</code> and <code dir="ltr">ad_graphic_file</code> to <code dir="ltr">NULL</code> if the <code dir="ltr">BFILE</code> column is <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>Create an external table to contain the data from the <code dir="ltr">print_media</code> table. Use the <code dir="ltr">get_dir_name</code> and <code dir="ltr">get_file_name</code> functions to get the components of the <code dir="ltr">BFILE</code> column.</p>
<pre dir="ltr">
SQL&gt; CREATE TABLE print_media_xt
  2  ORGANIZATION EXTERNAL
  3  (
  4    TYPE oracle_datapump
  5    DEFAULT DIRECTORY def_dir1
  6    LOCATION ('pm_xt.dmp')
  7  ) AS
  8  SELECT product_id, ad_id,
  9         get_dir_name (ad_graphic) ad_graphic_dir,
 10         get_file_name(ad_graphic) ad_graphic_file
 11  FROM print_media;

Table created.
</pre></li>
<li>
<p>Create a function to load a <code dir="ltr">BFILE</code> column from the data that is in the external table. This function will return <code dir="ltr">NULL</code> if the <code dir="ltr">ad_graphic_dir</code> column in the external table is <code dir="ltr">NULL</code>.</p>
<pre dir="ltr">
SQL&gt; CREATE FUNCTION get_bfile (dir VARCHAR2, file VARCHAR2) RETURN
BFILE is
  2  bf BFILE;
  3  BEGIN
  4    IF dir IS NULL
  5    THEN
  6      RETURN NULL;
  7    ELSE
  8      RETURN BFILENAME(dir,file);
  9    END IF;
 10  END;
 11  /

Function created.
</pre></li>
<li>
<p>The <code dir="ltr">get_bfile</code> function can be used to populate a new table containing a <code dir="ltr">BFILE</code> column.</p>
<pre dir="ltr">
SQL&gt; CREATE TABLE print_media_int AS
  2  SELECT product_id, ad_id,
  3         get_bfile (ad_graphic_dir, ad_graphic_file) ad_graphic
  4  FROM print_media_xt;

Table created.
</pre></li>
<li>
<p>The data in the columns of the newly loaded table should match the data in the columns of the <code dir="ltr">print_media</code> table.</p>
<pre dir="ltr">
SQL&gt; SELECT product_id, ad_id,
  2         get_dir_name(ad_graphic),
  3         get_file_name(ad_graphic)
  4  FROM print_media_int
  5  MINUS
  6  SELECT product_id, ad_id,
  7         get_dir_name(ad_graphic),
  8         get_file_name(ad_graphic)
  9  FROM print_media;

no rows selected
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<div id="SUTIL1463" class="sect2"><a id="sthref1413"></a>
<h3 class="sect2">Unloading LONG and LONG RAW Datatypes</h3>
<p>The <code dir="ltr">ORACLE_DATAPUMP</code> access driver can be used to unload <code dir="ltr">LONG</code> and <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> columns, but that data can only be loaded back into LOB fields. The steps in the following extended example demonstrate the unloading of <code dir="ltr">LONG</code> and <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> datatypes.</p>
<ol>
<li>
<p>If a table to be unloaded contains a <code dir="ltr">LONG</code> or <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> column, then define the corresponding columns in the external table as <code dir="ltr">CLOB</code> for <code dir="ltr">LONG</code> columns or <code dir="ltr">BLOB</code> for <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> columns.</p>
<pre dir="ltr">
SQL&gt; CREATE TABLE long_tab
  2  (
  3    key                   SMALLINT,
  4    description           LONG
  5  );

Table created.

SQL&gt; INSERT INTO long_tab VALUES (1, 'Description Text');

1 row created.
</pre></li>
<li>
<p>Now, an external table can be created that contains a <code dir="ltr">CLOB</code> column to contain the data from the <code dir="ltr">LONG</code> column. Note that when loading the external table, the <code dir="ltr">TO_LOB</code> operator is used to convert the <code dir="ltr">LONG</code> column into a <code dir="ltr">CLOB</code>.</p>
<pre dir="ltr">
SQL&gt; CREATE TABLE long_tab_xt
  2  ORGANIZATION EXTERNAL
  3  (
  4    TYPE ORACLE_DATAPUMP
  5    DEFAULT DIRECTORY def_dir1
  6    LOCATION ('long_tab_xt.dmp')
  7  )
  8  AS SELECT key, TO_LOB(description) description FROM long_tab;

Table created.
</pre></li>
<li>
<p>The data in the external table can be used to create another table exactly like the one that was unloaded except the new table will contain a LOB column instead of a <code dir="ltr">LONG</code> column.</p>
<pre dir="ltr">
SQL&gt; CREATE TABLE lob_tab
  2  AS SELECT * from long_tab_xt;

Table created.
</pre></li>
<li>
<p>Verify that the table was created correctly.</p>
<pre dir="ltr">
SQL&gt; SELECT * FROM lob_tab;

       KEY  DESCRIPTION
----------------------------------------------------------------------------
         1  Description Text
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<div id="SUTIL1464" class="sect2"><a id="sthref1414"></a>
<h3 class="sect2">Unloading and Loading Columns Containing Final Object Types</h3>
<p>Final column objects are populated into an external table by moving each attribute in the object type into a column in the external table. In addition, the external table needs a new column to track whether the column object is atomically <code dir="ltr">NULL</code>. The following steps demonstrate the unloading and loading of columns containing final object types.</p>
<ol>
<li>
<p>In the following example, the <code dir="ltr">warehouse</code> column in the external table is used to track whether the <code dir="ltr">warehouse</code> column in the source table is atomically <code dir="ltr">NULL</code>.</p>
<pre dir="ltr">
SQL&gt; CREATE TABLE inventories_obj_xt
  2  ORGANIZATION EXTERNAL
  3  (
  4    TYPE ORACLE_DATAPUMP
  5    DEFAULT DIRECTORY def_dir1
  6    LOCATION ('inv_obj_xt.dmp')
  7  )
  8  AS
  9  SELECT oi.product_id,
 10         DECODE (oi.warehouse, NULL, 0, 1) warehouse,
 11         oi.warehouse.location_id location_id,
 12         oi.warehouse.warehouse_id warehouse_id,
 13         oi.warehouse.warehouse_name warehouse_name,
 14         oi.quantity_on_hand
 15  FROM oc_inventories oi;

Table created.
</pre>
<p>The columns in the external table containing the attributes of the object type can now be used as arguments to the type constructor function when loading a column of that type. Note that the <code dir="ltr">warehouse</code> column in the external table is used to determine whether to call the constructor function for the object or set the column to <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>Load a new internal table that looks exactly like the <code dir="ltr">oc_inventories</code> view. (The use of the <code dir="ltr">WHERE</code> <code dir="ltr">1=0</code> clause creates a new table that looks exactly like the old table but does not copy any data from the old table into the new table.)</p>
<pre dir="ltr">
SQL&gt; CREATE TABLE oc_inventories_2 AS SELECT * FROM oc_inventories
WHERE 1 = 0;

Table created.

SQL&gt; INSERT INTO oc_inventories_2
  2  SELECT product_id,
  3         DECODE (warehouse, 0, NULL,
  4                 warehouse_typ(warehouse_id, warehouse_name,
  5                 location_id)), quantity_on_hand
  6  FROM inventories_obj_xt;

1112 rows created.
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<div id="SUTIL1465" class="sect2"><a id="sthref1415"></a>
<h3 class="sect2">Tables of Final Object Types</h3>
<p>Object tables have an object identifier that uniquely identifies every row in the table. The following situations can occur:</p>
<ul>
<li>
<p>If there is no need to unload and reload the object identifier, then the external table only needs to contain fields for the attributes of the type for the object table.</p>
</li>
<li>
<p>If the object identifier (OID) needs to be unloaded and reloaded and the OID for the table is one or more fields in the table, (also known as primary-key-based OIDs), then the external table has one column for every attribute of the type for the table.</p>
</li>
<li>
<p>If the OID needs to be unloaded and the OID for the table is system-generated, then the procedure is more complicated. In addition to the attributes of the type, another column needs to be created to hold the system-generated OID.</p>
</li>
</ul>
<p>The steps in the following example demonstrate this last situation.</p>
<ol>
<li>
<p>Create a table of a type with system-generated OIDs:</p>
<pre dir="ltr">
SQL&gt; CREATE TYPE person AS OBJECT (name varchar2(20)) NOT FINAL
  2  /

Type created.

SQL&gt; CREATE TABLE people OF person;

Table created.

SQL&gt; INSERT INTO people VALUES ('Euclid');

1 row created.
</pre></li>
<li>
<p>Create an external table in which the column <code dir="ltr">OID</code> is used to hold the column containing the system-generated OID.</p>
<pre dir="ltr">
SQL&gt; CREATE TABLE people_xt
  2  ORGANIZATION EXTERNAL
  3  (
  4    TYPE ORACLE_DATAPUMP
  5    DEFAULT DIRECTORY def_dir1
  6    LOCATION ('people.dmp')
  7  )
  8  AS SELECT SYS_NC_OID$ oid, name FROM people;

Table created.
</pre></li>
<li>
<p>Create another table of the same type with system-generated OIDs. Then, execute an <code dir="ltr">INSERT</code> statement to load the new table with data unloaded from the old table.</p>
<pre dir="ltr">
SQL&gt; CREATE TABLE people2 OF person;

Table created.

SQL&gt; 
SQL&gt; INSERT INTO people2 (SYS_NC_OID$, SYS_NC_ROWINFO$)
  2  SELECT oid, person(name) FROM people_xt;

1 row created.

SQL&gt; 
SQL&gt; SELECT SYS_NC_OID$, name FROM people
  2  MINUS
  3  SELECT SYS_NC_OID$, name FROM people2;

no rows selected
</pre></li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDDIDBJ"></a>
<div id="SUTIL3439" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Performance Hints When Using the ORACLE_DATAPUMP Access Driver</h2>
<p>When you monitor performance, the most important measurement is the elapsed time for a load. Other important measurements are CPU usage, memory usage, and I/O rates.</p>
<p>You can alter performance by increasing or decreasing the degree of parallelism. The degree of parallelism indicates the number of access drivers that can be started to process the data files. The degree of parallelism enables you to choose on a scale between slower load with little resource usage and faster load with all resources utilized. The access driver cannot automatically tune itself, because it cannot determine how many resources you want to dedicate to the access driver.</p>
<p>An additional consideration is that the access drivers use large I/O buffers for better performance. On databases with shared servers, all memory used by the access drivers comes out of the system global area (SGA). For this reason, you should be careful when using external tables on shared servers.</p>
</div>
<!-- class="sect1" -->
<a id="CHDIJHHF"></a>
<div id="SUTIL3440" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Restrictions When Using the ORACLE_DATAPUMP Access Driver</h2>
<p>The <code dir="ltr">ORACLE_DATAPUMP</code> access driver has the following restrictions:</p>
<ul>
<li>
<p>Handling of byte-order marks during a load: In an external table load for which the data file character set is UTF8 or UTF16, it is not possible to suppress checking for byte-order marks. Suppression of byte-order mark checking is necessary only if the beginning of the data file contains binary data that matches the byte-order mark encoding. (It is possible to suppress byte-order mark checking with SQL*Loader loads.) Note that checking for a byte-order mark does not mean that a byte-order mark must be present in the data file. If no byte-order mark is present, then the byte order of the server platform is used.</p>
</li>
<li>
<p>The external tables feature does not support the use of the backslash (\) escape character within strings. See <a href="ldr_concepts.htm#CHDCADAF">"Use of the Backslash Escape Character"</a>.</p>
</li>
<li>
<p>When<a id="sthref1416"></a><a id="sthref1417"></a> identifiers (for example, column or table names) are specified in the external table access parameters, certain values are considered to be reserved words by the access parameter parser. If a reserved word is used as an identifier, then it must be enclosed in double quotation marks.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1006851"></a>
<div id="SUTIL1466" class="sect1">
<h2 class="sect1">Reserved Words for the ORACLE_DATAPUMP Access Driver</h2>
<p>When<a id="sthref1418"></a><a id="sthref1419"></a> identifiers (for example, column or table names) are specified in the external table access parameters, certain values are considered to be reserved words by the access parameter parser. If a reserved word is used as an identifier, then it must be enclosed in double quotation marks. The following are the reserved words for the <code dir="ltr">ORACLE_DATAPUMP</code> access driver:</p>
<ul>
<li>
<p><code dir="ltr">BADFILE</code></p>
</li>
<li>
<p><code dir="ltr">COMPATIBLE</code></p>
</li>
<li>
<p><code dir="ltr">COMPRESSION</code></p>
</li>
<li>
<p><code dir="ltr">DATAPUMP</code></p>
</li>
<li>
<p><code dir="ltr">DEBUG</code></p>
</li>
<li>
<p><code dir="ltr">ENCRYPTION</code></p>
</li>
<li>
<p><code dir="ltr">INTERNAL</code></p>
</li>
<li>
<p><code dir="ltr">JOB</code></p>
</li>
<li>
<p><code dir="ltr">LATEST</code></p>
</li>
<li>
<p><code dir="ltr">LOGFILE</code></p>
</li>
<li>
<p><code dir="ltr">NOBADFILE</code></p>
</li>
<li>
<p><code dir="ltr">NOLOGFILE</code></p>
</li>
<li>
<p><code dir="ltr">PARALLEL</code></p>
</li>
<li>
<p><code dir="ltr">TABLE</code></p>
</li>
<li>
<p><code dir="ltr">VERSION</code></p>
</li>
<li>
<p><code dir="ltr">WORKERID</code></p>
</li>
</ul>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1387">
<tr>
<td class="cellalignment1396">
<table class="cellalignment1392">
<tr>
<td class="cellalignment1391"><a href="et_params.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1391"><a href="part_other.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2018,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1398">
<table class="cellalignment1390">
<tr>
<td class="cellalignment1391"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1391"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1391"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1391"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1391"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1391"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
