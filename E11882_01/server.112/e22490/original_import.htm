<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Original Import</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1093" />
<meta name="dcterms.created" content="2018-03-26T15:55:19Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Utilities" />
<meta name="dcterms.identifier" content="E22490-08" />
<meta name="dcterms.isVersionOf" content="SUTIL" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2018,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="original_export.htm" title="Previous" type="text/html" />
<link rel="Next" href="part_apps.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e22490.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">33/36</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='original_import'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=100,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote&nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><div id="footnote"><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/div><\/body><\/html>');
    msg.document.close();
    setTimeout(function() { var height = msg.document.getElementById('footnote').offsetHeight; msg.resizeTo(598, height + 100); }, 100);
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="SUTIL001" class="chapter"><a id="g1070082"></a> <a id="i1023560"></a>
<h1 class="chapter"><span class="secnum">22</span> Original Import</h1>
<p>This chapter describes how to use the original Import utility (<code >imp</code>) to import dump files that were created using the original Export utility.</p>
<p>This chapter discusses the following topics:</p>
<ul>
<li>
<p><a href="#i1004670">What Is the Import Utility?</a></p>
</li>
<li>
<p><a href="#i1004716">Before Using Import</a></p>
</li>
<li>
<p><a href="#i1023662">Importing into Existing Tables</a></p>
</li>
<li>
<p><a href="#i1023696">Effect of Schema and Database Triggers on Import Operations</a></p>
</li>
<li>
<p><a href="#i1004777">Invoking Import</a></p>
</li>
<li>
<p><a href="#i1004890">Import Modes</a></p>
</li>
<li>
<p><a href="#i1021478">Import Parameters</a></p>
</li>
<li>
<p><a href="#i1021645">Example Import Sessions</a></p>
</li>
<li>
<p><a href="#i1006682">Exit Codes for Inspection and Display</a></p>
</li>
<li>
<p><a href="#BABEACHB">Error Handling During an Import</a></p>
</li>
<li>
<p><a href="#BABGFECC">Table-Level and Partition-Level Import</a></p>
</li>
<li>
<p><a href="#BABEBGFF">Controlling Index Creation and Maintenance</a></p>
</li>
<li>
<p><a href="#i1021668">Network Considerations</a></p>
</li>
<li>
<p><a href="#i1021901">Character Set and Globalization Support Considerations</a></p>
</li>
<li>
<p><a href="#i1024070">Using Instance Affinity</a></p>
</li>
<li>
<p><a href="#BABHBFBB">Considerations When Importing Database Objects</a></p>
</li>
<li>
<p><a href="#i1023439">Support for Fine-Grained Access Control</a></p>
</li>
<li>
<p><a href="#i1021678">Snapshots and Snapshot Logs</a></p>
</li>
<li>
<p><a href="#i1021683">Transportable Tablespaces</a></p>
</li>
<li>
<p><a href="#i1024079">Storage Parameters</a></p>
</li>
<li>
<p><a href="#i1024049">Read-Only Tablespaces</a></p>
</li>
<li>
<p><a href="#i1023304">Dropping a Tablespace</a></p>
</li>
<li>
<p><a href="#i1023312">Reorganizing Tablespaces</a></p>
</li>
<li>
<p><a href="#BABIFBGF">Importing Statistics</a></p>
</li>
<li>
<p><a href="#i1007009">Using Export and Import to Partition a Database Migration</a></p>
</li>
<li>
<p><a href="#BABJFDIA">Tuning Considerations for Import Operations</a></p>
</li>
<li>
<p><a href="#i1013164">Using Different Releases of Export and Import</a></p>
</li>
</ul>
<a id="i1004670"></a>
<div id="SUTIL1637" class="sect1">
<h2 class="sect1">What Is the Import Utility?</h2>
<p>The Import utility reads object definitions and table data from dump files created by the original Export utility. The dump file is in an Oracle binary-format that can be read only by original Import.</p>
<p>The version of the Import utility cannot be earlier than the version of the Export utility used to create the dump file.</p>
<div id="SUTIL3669" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2079"></a>
<h3 class="sect2">Table Objects: Order of Import</h3>
<p>Table objects are imported as they are read from the export dump file. The dump file contains objects in the following order:<a id="sthref2080"></a><a id="sthref2081"></a></p>
<ol>
<li>
<p>Type definitions</p>
</li>
<li>
<p>Table definitions</p>
</li>
<li>
<p>Table data</p>
</li>
<li>
<p>Table indexes</p>
</li>
<li>
<p>Integrity constraints, views, procedures, and triggers</p>
</li>
<li>
<p>Bitmap, function-based, and domain indexes</p>
</li>
</ol>
<p>The order of import is as follows: new tables are created, data is imported and indexes are built, triggers are imported, integrity constraints are enabled on the new tables, and any bitmap, function-based, and/or domain indexes are built. This sequence prevents data from being rejected due to the order in which tables are imported. This sequence also prevents redundant triggers from firing twice on the same data (once when it is originally inserted and again during the import).</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1004716"></a>
<div id="SUTIL1638" class="sect1">
<h2 class="sect1">Before Using Import</h2>
<p>Before you begin using Import, be sure you take care of the following items (described in detail in the following sections):</p>
<ul>
<li>
<p>If you created your database manually, ensure that the <code dir="ltr">catexp.sql</code> or <code dir="ltr">catalog.sql</code> script has been run. If you created your database using the Database Configuration Assistant (DBCA), it is not necessary to run these scripts.</p>
</li>
<li>
<p>Verify that you have the required access privileges.</p>
</li>
</ul>
<div id="SUTIL1639" class="sect2"><a id="sthref2082"></a>
<h3 class="sect2"><a id="sthref2083"></a>Running catexp.sql or catalog.sql</h3>
<p>To use Import, you must run the script <code dir="ltr">catexp.sql</code> or <code dir="ltr">catalog.sql</code> (which runs <code dir="ltr">catexp.sql</code>) after the database has been created or migrated to a newer version.<a id="sthref2084"></a><a id="sthref2085"></a></p>
<p>The <code dir="ltr">catexp.sql</code> or <code dir="ltr">catalog.sql</code> script needs to be run only once on a database. The script performs the following tasks to prepare the database for export and import operations:</p>
<ul>
<li>
<p>Creates the necessary import views<a id="sthref2086"></a><a id="sthref2087"></a> in the data dictionary</p>
</li>
<li>
<p>Creates<a id="sthref2088"></a> the <code dir="ltr">EXP_FULL_DATABASE</code> and <code dir="ltr">IMP_FULL_DATABASE</code> roles</p>
</li>
<li>
<p>Assigns all necessary privileges to the <code dir="ltr">EXP_FULL_DATABASE</code> and <code dir="ltr">IMP_FULL_DATABASE</code> roles<a id="sthref2089"></a><a id="sthref2090"></a><a id="sthref2091"></a><a id="sthref2092"></a><a id="sthref2093"></a></p>
</li>
<li>
<p>Assigns <code dir="ltr">EXP_FULL_DATABASE</code> and <code dir="ltr">IMP_FULL_DATABASE</code> to the <code dir="ltr">DBA</code> role</p>
</li>
<li>
<p>Records the version of <code dir="ltr">catexp.sql</code> that has been installed</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="SUTIL1641" class="sect2"><a id="sthref2094"></a>
<h3 class="sect2">Verifying Access Privileges for Import Operations</h3>
<p><a id="sthref2095"></a><a id="sthref2096"></a><a id="sthref2097"></a><a id="sthref2098"></a><a id="sthref2099"></a>To use Import, you must have the <code dir="ltr">CREATE SESSION</code> privilege on an Oracle database. This privilege belongs to the <code dir="ltr">CONNECT</code> role established during database creation.</p>
<p>You can perform an import operation even if you did not create the export file. However, keep in mind that if the export file was created by a user with the <code dir="ltr">EXP_FULL_DATABASE</code> role, then you must have the <code dir="ltr">IMP_FULL_DATABASE</code> role to import it. Both of these roles are typically assigned to database administrators (DBAs).</p>
<div id="SUTIL3670" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2100"></a>
<h4 class="sect3">Importing Objects Into Your Own Schema</h4>
<p><a href="#BABFHCBI">Table 22-1</a> lists the privileges required to import objects into your own schema.<a id="sthref2101"></a> All of these privileges initially belong to the <a id="sthref2102"></a><a id="sthref2103"></a><code dir="ltr">RESOURCE</code> role.</p>
<div id="SUTIL3671" class="tblformal">
<p class="titleintable"><a id="sthref2104"></a><a id="BABFHCBI"></a>Table 22-1 Privileges Required to Import Objects into Your Own Schema</p>
<table class="cellalignment1394" title="Privileges Required to Import Objects into Your Own Schema" summary="Privileges required to import objects into your own schemas" dir="ltr">
<thead>
<tr class="cellalignment1388">
<th class="cellalignment1395" id="r1c1-t2">Object</th>
<th class="cellalignment1395" id="r1c2-t2">Required Privilege (Privilege Type, If Applicable)</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r2c1-t2" headers="r1c1-t2">
<p>Clusters</p>
</td>
<td class="cellalignment1396" headers="r2c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">CLUSTER</code> (System) or <code dir="ltr">UNLIMITED</code> <code dir="ltr">TABLESPACE</code> (System). The user must also be assigned a tablespace quota.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r3c1-t2" headers="r1c1-t2">
<p>Database links</p>
</td>
<td class="cellalignment1396" headers="r3c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">DATABASE</code> <code dir="ltr">LINK</code> (System) and <code dir="ltr">CREATE</code> <code dir="ltr">SESSION</code> (System) on remote database</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r4c1-t2" headers="r1c1-t2">
<p>Triggers on tables</p>
</td>
<td class="cellalignment1396" headers="r4c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">TRIGGER</code> (System)</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r5c1-t2" headers="r1c1-t2">
<p>Triggers on schemas</p>
</td>
<td class="cellalignment1396" headers="r5c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">TRIGGER</code> (System)</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r6c1-t2" headers="r1c1-t2">
<p>Indexes</p>
</td>
<td class="cellalignment1396" headers="r6c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> (System) or <code dir="ltr">UNLIMITED</code> <code dir="ltr">TABLESPACE</code> (System). The user must also be assigned a tablespace quota.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r7c1-t2" headers="r1c1-t2">
<p>Integrity constraints</p>
</td>
<td class="cellalignment1396" headers="r7c1-t2 r1c2-t2">
<p><code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> (Object)</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r8c1-t2" headers="r1c1-t2">
<p>Libraries</p>
</td>
<td class="cellalignment1396" headers="r8c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">LIBRARY</code> (System)</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r9c1-t2" headers="r1c1-t2">
<p>Packages</p>
</td>
<td class="cellalignment1396" headers="r9c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">PROCEDURE</code> (System)</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r10c1-t2" headers="r1c1-t2">
<p>Private synonyms</p>
</td>
<td class="cellalignment1396" headers="r10c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">SYNONYM</code> (System)</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r11c1-t2" headers="r1c1-t2">
<p>Sequences</p>
</td>
<td class="cellalignment1396" headers="r11c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">SEQUENCE</code> (System)</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r12c1-t2" headers="r1c1-t2">
<p>Snapshots</p>
</td>
<td class="cellalignment1396" headers="r12c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">SNAPSHOT</code> (System)</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r13c1-t2" headers="r1c1-t2">
<p>Stored functions</p>
</td>
<td class="cellalignment1396" headers="r13c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">PROCEDURE</code> (System)</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r14c1-t2" headers="r1c1-t2">
<p>Stored procedures</p>
</td>
<td class="cellalignment1396" headers="r14c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">PROCEDURE</code> (System)</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r15c1-t2" headers="r1c1-t2">
<p>Table data</p>
</td>
<td class="cellalignment1396" headers="r15c1-t2 r1c2-t2">
<p><code dir="ltr">INSERT</code> <code dir="ltr">TABLE</code> (Object)</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r16c1-t2" headers="r1c1-t2">
<p>Table definitions (including comments and audit options)</p>
</td>
<td class="cellalignment1396" headers="r16c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> (System) or <code dir="ltr">UNLIMITED</code> <code dir="ltr">TABLESPACE</code> (System). The user must also be assigned a tablespace quota.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r17c1-t2" headers="r1c1-t2">
<p>Views</p>
</td>
<td class="cellalignment1396" headers="r17c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">VIEW</code> (System) and <code dir="ltr">SELECT</code> (Object) on the base table, or <code dir="ltr">SELECT</code> <code dir="ltr">ANY</code> <code dir="ltr">TABLE</code> (System)</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r18c1-t2" headers="r1c1-t2">
<p>Object types</p>
</td>
<td class="cellalignment1396" headers="r18c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">TYPE</code> (System)</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r19c1-t2" headers="r1c1-t2">
<p>Foreign function libraries</p>
</td>
<td class="cellalignment1396" headers="r19c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">LIBRARY</code> (System)</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r20c1-t2" headers="r1c1-t2">
<p>Dimensions</p>
</td>
<td class="cellalignment1396" headers="r20c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">DIMENSION</code> (System)</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r21c1-t2" headers="r1c1-t2">
<p>Operators</p>
</td>
<td class="cellalignment1396" headers="r21c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">OPERATOR</code> (System)</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r22c1-t2" headers="r1c1-t2">
<p>Indextypes</p>
</td>
<td class="cellalignment1396" headers="r22c1-t2 r1c2-t2">
<p><code dir="ltr">CREATE</code> <code dir="ltr">INDEXTYPE</code> (System)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<div id="SUTIL3672" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2105"></a>
<h4 class="sect3">Importing Grants</h4>
<p>To import the privileges that a user has granted to others, the user initiating the import must either own the objects or have object privileges with the <code dir="ltr">WITH</code> <code dir="ltr">GRANT</code> <code dir="ltr">OPTION</code>. <a href="#BABEEGBD">Table 22-2</a> shows the required conditions for the authorizations to be valid on the target system.</p>
<div id="SUTIL3673" class="tblruleformal">
<p class="titleintable"><a id="sthref2106"></a><a id="BABEEGBD"></a>Table 22-2 Privileges Required to Import Grants</p>
<table class="cellalignment1399" title="Privileges Required to Import Grants" summary="Privileges required to import grants" dir="ltr">
<thead>
<tr class="cellalignment1388">
<th class="cellalignment1395" id="r1c1-t3">Grant</th>
<th class="cellalignment1395" id="r1c2-t3">Conditions</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r2c1-t3" headers="r1c1-t3">
<p>Object privileges</p>
</td>
<td class="cellalignment1396" headers="r2c1-t3 r1c2-t3">
<p>The object must exist in the user's schema, <span class="italic">or</span></p>
<p>the user must have the object privileges with the <code dir="ltr">WITH GRANT OPTION</code> <span class="italic">or</span>,</p>
<p>the user must have the <code dir="ltr">IMP_FULL_DATABASE</code> role enabled.</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r3c1-t3" headers="r1c1-t3">
<p>System privileges</p>
</td>
<td class="cellalignment1396" headers="r3c1-t3 r1c2-t3">
<p>User must have the <code dir="ltr">SYSTEM</code> privilege and also the <code dir="ltr">WITH ADMIN OPTION.</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformal" --></div>
<!-- class="sect3" -->
<div id="SUTIL3674" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2107"></a>
<h4 class="sect3">Importing Objects Into Other Schemas</h4>
<p>To import objects into another user's schema, you must have the <code dir="ltr">IMP_FULL_DATABASE</code> role enabled.<a id="sthref2108"></a><a id="sthref2109"></a> <a id="sthref2110"></a></p>
</div>
<!-- class="sect3" -->
<div id="SUTIL3675" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2111"></a>
<h4 class="sect3">Importing System Objects</h4>
<p>To import system objects from a full database export file, the <code dir="ltr">IMP_FULL_DATABASE</code> role must be enabled. The parameter<a id="sthref2112"></a><a id="sthref2113"></a> <code dir="ltr">FULL</code> specifies that the following system objects are included in the import:</p>
<ul>
<li>
<p>Profiles</p>
</li>
<li>
<p>Public database links</p>
</li>
<li>
<p>Public synonyms</p>
</li>
<li>
<p>Roles</p>
</li>
<li>
<p>Rollback segment definitions</p>
</li>
<li>
<p>Resource costs</p>
</li>
<li>
<p>Foreign function libraries</p>
</li>
<li>
<p>Context objects</p>
</li>
<li>
<p>System procedural objects</p>
</li>
<li>
<p>System audit options</p>
</li>
<li>
<p>System privileges</p>
</li>
<li>
<p>Tablespace definitions</p>
</li>
<li>
<p>Tablespace quotas</p>
</li>
<li>
<p>User definitions</p>
</li>
<li>
<p>Directory aliases</p>
</li>
<li>
<p>System event triggers</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="SUTIL1653" class="sect2"><a id="sthref2114"></a>
<h3 class="sect2">Processing Restrictions</h3>
<p>The following restrictions apply when you process data with the Import utility:</p>
<ul>
<li>
<p>When a type definition has evolved and data referencing that evolved type is exported, the type definition on the import system must have evolved in the same manner.</p>
</li>
<li>
<p>The table compression attribute of tables and partitions is preserved during export and import. However, the import process does not use the direct path API, hence the data will not be stored in the compressed format when imported.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1023662"></a>
<div id="SUTIL1655" class="sect1">
<h2 class="sect1">Importing into Existing Tables</h2>
<p>This section describes factors to consider when you import data into existing tables:</p>
<ul>
<li>
<p><a href="#BABFEFHF">Manually Creating Tables Before Importing Data</a></p>
</li>
<li>
<p><a href="#BABJBJHJ">Disabling Referential Constraints</a></p>
</li>
<li>
<p><a href="#BABCCHFC">Manually Ordering the Import</a></p>
</li>
</ul>
<a id="BABFEFHF"></a>
<div id="SUTIL1656" class="sect2">
<h3 class="sect2">Manually Creating Tables Before Importing Data<a id="sthref2115"></a></h3>
<p><a id="sthref2116"></a><a id="sthref2117"></a><a id="sthref2118"></a><a id="sthref2119"></a>When you choose to create tables manually before importing data into them from an export file, you should use either the same table definition previously used or a compatible format. For example, although you can increase the width of columns and change their order, you cannot do the following:</p>
<ul>
<li>
<p>Add <code dir="ltr">NOT NULL</code> columns</p>
</li>
<li>
<p>Change the datatype of a column to an incompatible datatype (<code dir="ltr">LONG</code> to <code dir="ltr">NUMBER,</code> for example)</p>
</li>
<li>
<p>Change the definition of object types used in a table</p>
</li>
<li>
<p>Change <code dir="ltr">DEFAULT</code> column values</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When tables are manually created before data is imported, the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statement in the export dump file will fail because the table already exists. To avoid this failure and continue loading data into the table, set the Import parameter <code dir="ltr">IGNORE</code>=<code dir="ltr">y</code>. Otherwise, no data will be loaded into the table because of the table creation error.</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABJBJHJ"></a>
<div id="SUTIL1657" class="sect2">
<h3 class="sect2">Disabling Referential Constraints</h3>
<p>In the normal import order, referential constraints are imported only after all<a id="sthref2120"></a><a id="sthref2121"></a> tables are imported. This sequence prevents errors that could occur if a referential integrity constraint exists for data that has not yet been imported.<a id="sthref2122"></a><a id="sthref2123"></a></p>
<p>These errors can still occur when data is loaded into existing tables. For example, if table <code dir="ltr">emp</code> has a referential integrity constraint on the <code dir="ltr">mgr</code> column that verifies that the manager number exists in <code dir="ltr">emp,</code> then a legitimate employee row might fail the referential integrity constraint if the manager's row has not yet been imported.</p>
<p>When such an error occurs, Import generates an error message, bypasses the failed row, and continues importing other rows in the table. You can disable constraints manually to avoid this.</p>
<p>Referential constraints between tables can also cause problems. For example, if the <code dir="ltr">emp</code> table appears before the <code dir="ltr">dept</code> table in the export dump file, but a referential check exists from the <code dir="ltr">emp</code> table into the <code dir="ltr">dept</code> table, then some of the rows from the <code dir="ltr">emp</code> table may not be imported due to a referential constraint violation.</p>
<p>To prevent errors like these, you should disable referential integrity constraints when importing data into existing tables.</p>
</div>
<!-- class="sect2" -->
<a id="BABCCHFC"></a>
<div id="SUTIL1658" class="sect2">
<h3 class="sect2">Manually Ordering the Import</h3>
<p>When the constraints are reenabled after importing, the entire table is checked, which may take a long time for a large table. If the time required for that check is too long, then it may be beneficial to order the import manually.<a id="sthref2124"></a><a id="sthref2125"></a></p>
<p>To do so, perform several imports from an export file instead of one. First, import tables that are the targets of referential checks. Then, import the tables that reference them. This option works if tables do not reference each other in a circular fashion, and if a table does not reference itself.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1023696"></a>
<div id="SUTIL1659" class="sect1">
<h2 class="sect1">Effect of Schema and Database Triggers on Import Operations</h2>
<p>Triggers that are defined to trigger on DDL events for a specific schema or on DDL-related events for the database, are system triggers. These triggers can have detrimental effects on certain import operations. For example, they can prevent successful re-creation of database objects, such as tables. This causes errors to be returned that give no indication that a trigger caused the problem.<a id="sthref2126"></a></p>
<p>Database administrators and anyone creating system triggers should verify that such triggers do not prevent users from performing database operations for which they are authorized. To test a system trigger, take the following steps:<a id="sthref2127"></a><a id="sthref2128"></a></p>
<ol>
<li>
<p>Define the trigger.</p>
</li>
<li>
<p>Create some database objects.</p>
</li>
<li>
<p>Export the objects in table or user mode.</p>
</li>
<li>
<p>Delete the objects.</p>
</li>
<li>
<p>Import the objects.</p>
</li>
<li>
<p>Verify that the objects have been successfully re-created.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A full export does not export triggers owned by schema <code dir="ltr">SYS</code>. You must manually re-create <code dir="ltr">SYS</code> triggers either before or after the full import. Oracle recommends that you re-create them after the import in case they define actions that would impede progress of the import.</div>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="i1004777"></a>
<div id="SUTIL1642" class="sect1">
<h2 class="sect1">Invoking Import</h2>
<p>You can invoke Import, and specify parameters by using any of the following methods:<a id="sthref2129"></a><a id="sthref2130"></a><a id="sthref2131"></a><a id="sthref2132"></a></p>
<ul>
<li>
<p>Command-line entries</p>
</li>
<li>
<p>Parameter files</p>
</li>
<li>
<p>Interactive mode</p>
</li>
</ul>
<p>Before you use one of these methods, be sure to read the descriptions of the available parameters. See <a href="#i1021478">"Import Parameters"</a>.</p>
<div id="SUTIL1644" class="sect2"><a id="sthref2133"></a>
<h3 class="sect2">Command-Line Entries<a id="sthref2134"></a><a id="sthref2135"></a></h3>
<p>You can specify all valid parameters and their values from the command line using the following syntax (you will then be prompted for a username and password):</p>
<pre dir="ltr">
imp PARAMETER=<span class="codeinlineitalic">value</span>
</pre>
<p>or</p>
<pre dir="ltr">
imp PARAMETER=(<span class="italic">value1,value2,...,valuen</span>)
</pre>
<p>The number of parameters cannot exceed the maximum length of a command line on the system.</p>
</div>
<!-- class="sect2" -->
<a id="i1021490"></a>
<div id="SUTIL1645" class="sect2">
<h3 class="sect2">Parameter Files<a id="sthref2136"></a><a id="sthref2137"></a></h3>
<p>You can specify all valid parameters and their values in a parameter file. Storing the parameters in a file allows them to be easily modified or reused. If you use different parameters for different databases, then you can have multiple parameter files.</p>
<p>Create the parameter file using any flat file text editor. The command-line option <code dir="ltr">PARFILE=</code><code dir="ltr"><span class="codeinlineitalic">filename</span></code> tells Import to read the parameters from the specified file rather than from the command line. For example:</p>
<p>The syntax for parameter file specifications can be any of the following:</p>
<pre dir="ltr">
PARAMETER=<span class="italic">value</span>
PARAMETER=(<span class="italic">value</span>)
PARAMETER=(<span class="italic">value1, value2, ...</span>)
</pre>
<p>The following example shows a partial parameter file listing:</p>
<pre dir="ltr">
FULL=y
FILE=dba.dmp
GRANTS=y
INDEXES=y
CONSISTENT=y
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The maximum size of the parameter file may be limited by the operating system. The name of the parameter file is subject to the file-naming conventions of the operating system.<a id="sthref2138"></a><a id="sthref2139"></a><a id="sthref2140"></a></div>
<p>You can add comments to the parameter file by preceding them with the pound (#) sign. Import ignores all characters to the right of the pound (#) sign.<a id="sthref2141"></a><a id="sthref2142"></a></p>
<p>You can specify a parameter file at the same time that you are entering parameters on the command line. In fact, you can specify the same parameter in both places. The position of the <code dir="ltr">PARFILE</code> parameter and other parameters on the command line determines which parameters take precedence. For example, assume the parameter file <code dir="ltr">params.dat</code> contains the parameter <code dir="ltr">INDEXES=y</code> and Import is invoked with the following line:</p>
<pre dir="ltr">
imp PARFILE=params.dat INDEXES=n
</pre>
<p>In this case, because <code dir="ltr">INDEXES=n</code> occurs <span class="italic">after</span> <code dir="ltr">PARFILE=params.dat</code>, <code dir="ltr">INDEXES=n</code> overrides the value of the <code dir="ltr">INDEXES</code> parameter in the parameter file.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1021478">"Import Parameters"</a></p>
</li>
<li>
<p><a href="#i1021668">"Network Considerations"</a> for information about how to specify an export from a remote database</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDJCBJG"></a>
<div id="SUTIL1646" class="sect2">
<h3 class="sect2">Interactive Mode<a id="sthref2143"></a><a id="sthref2144"></a></h3>
<p>If you prefer to be prompted for the value of each parameter, then you can simply specify <code dir="ltr">imp</code> at the command line. You will be prompted for a username and password.</p>
<p>Commonly used parameters are then displayed. You can accept the default value, if one is provided, or enter a different value. The command-line interactive method does not provide prompts for all functionality and is provided only for backward compatibility.</p>
</div>
<!-- class="sect2" -->
<a id="i1024493"></a>
<div id="SUTIL1643" class="sect2">
<h3 class="sect2">Invoking Import As SYSDBA<a id="sthref2145"></a></h3>
<p><code dir="ltr">SYSDBA</code> is used internally and has specialized functions; its behavior is not the same as for generalized users. Therefore, you should not typically need to invoke Import as <code dir="ltr">SYSDBA,</code> except in the following situations:</p>
<ul>
<li>
<p>At the request of Oracle technical support</p>
</li>
<li>
<p>When importing a transportable tablespace set</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1023725"></a>
<div id="SUTIL1648" class="sect2">
<h3 class="sect2">Getting Online Help</h3>
<p>Import provides online help. Enter <code dir="ltr">imp</code> <code dir="ltr">help</code>=<code dir="ltr">y</code> to invoke Import help.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1004890"></a>
<div id="SUTIL1660" class="sect1">
<h2 class="sect1">Import Modes</h2>
<p>The Import utility supports four modes of operation:</p>
<ul>
<li>
<p>Full: Imports a full database. Only users with the <code dir="ltr">IMP_FULL_DATABASE</code> role can use this mode. Use the <code dir="ltr">FULL</code> parameter to specify this mode.</p>
</li>
<li>
<p>Tablespace: Enables a privileged user to move a set of tablespaces from one Oracle database to another. Use the <code dir="ltr">TRANSPORT_TABLESPACE</code> parameter to specify this mode.</p>
</li>
<li>
<p>User: Enables you to import all objects that belong to you (such as tables, grants, indexes, and procedures). A privileged user importing in user mode can import all objects in the schemas of a specified set of users. Use the <code dir="ltr">FROMUSER</code> parameter to specify this mode.</p>
</li>
<li>
<p>Table: Enables you to import specific tables and partitions. A privileged user can qualify the tables by specifying the schema that contains them. Use the <code dir="ltr">TABLES</code> parameter to specify this mode.</p>
</li>
</ul>
<p>See <a href="#g1040522">Table 22-3</a> for a list of objects that are imported in each mode.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
When you use table mode to import tables that have columns of type <code dir="ltr">ANYDATA<a id="sthref2146"></a></code>, you may receive the following error:
<p>ORA-22370: Incorrect usage of method. Nonexistent type.</p>
<p>This indicates that the <code dir="ltr">ANYDATA</code> column depends on other types that are not present in the database. You must manually create dependent types in the target database before you use table mode to import tables that use the <code dir="ltr">ANYDATA</code> type.</p>
</div>
<p>A user with the <code dir="ltr">IMP_FULL_DATABASE</code> role must specify one of these modes. Otherwise, an error results. If a user without the <code dir="ltr">IMP_FULL_DATABASE</code> role fails to specify one of these modes, then a user-level Import is performed.</p>
<div id="SUTIL3676" class="tblruleformal">
<p class="titleintable"><a id="sthref2147"></a><a id="g1040522"></a>Table 22-3 Objects Imported in Each Mode</p>
<table class="cellalignment1399" title="Objects Imported in Each Mode" summary="Objects Exported and Imported in each mode" dir="ltr">
<thead>
<tr class="cellalignment1388">
<th class="cellalignment1395" id="r1c1-t9">Object</th>
<th class="cellalignment1395" id="r1c2-t9">Table Mode</th>
<th class="cellalignment1395" id="r1c3-t9">User Mode</th>
<th class="cellalignment1395" id="r1c4-t9">Full Database Mode</th>
<th class="cellalignment1395" id="r1c5-t9">Tablespace Mode</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r2c1-t9" headers="r1c1-t9">
<p>Analyze cluster</p>
</td>
<td class="cellalignment1396" headers="r2c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r2c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r2c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r2c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r3c1-t9" headers="r1c1-t9">
<p>Analyze tables/statistics</p>
</td>
<td class="cellalignment1396" headers="r3c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r3c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r3c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r3c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r4c1-t9" headers="r1c1-t9">
<p>Application contexts</p>
</td>
<td class="cellalignment1396" headers="r4c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r4c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r4c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r4c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r5c1-t9" headers="r1c1-t9">
<p>Auditing information</p>
</td>
<td class="cellalignment1396" headers="r5c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r5c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r5c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r5c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r6c1-t9" headers="r1c1-t9">
<p>B-tree, bitmap, domain function-based indexes</p>
</td>
<td class="cellalignment1396" headers="r6c1-t9 r1c2-t9">
<p><a id="g1043395"></a>Yes<a id="sthref2148" href="#sthref2148" onclick='footdisplay(1,"Nonprivileged users can export and import only indexes they own on tables they own. They cannot export indexes they own that are on tables owned by other users, nor can they export indexes owned by other users on their own tables. Privileged users can export and import indexes on the specified users\x27 tables, even if the indexes are owned by other users. Indexes owned by the specified user on other users\x27 tables are not included, unless those other users are included in the list of users to export.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment1396" headers="r6c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r6c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r6c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r7c1-t9" headers="r1c1-t9">
<p>Cluster definitions</p>
</td>
<td class="cellalignment1396" headers="r7c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r7c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r7c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r7c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r8c1-t9" headers="r1c1-t9">
<p>Column and table comments</p>
</td>
<td class="cellalignment1396" headers="r8c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r8c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r8c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r8c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r9c1-t9" headers="r1c1-t9">
<p>Database links</p>
</td>
<td class="cellalignment1396" headers="r9c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r9c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r9c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r9c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r10c1-t9" headers="r1c1-t9">
<p>Default roles</p>
</td>
<td class="cellalignment1396" headers="r10c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r10c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r10c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r10c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r11c1-t9" headers="r1c1-t9">
<p>Dimensions</p>
</td>
<td class="cellalignment1396" headers="r11c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r11c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r11c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r11c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r12c1-t9" headers="r1c1-t9">
<p>Directory aliases</p>
</td>
<td class="cellalignment1396" headers="r12c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r12c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r12c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r12c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r13c1-t9" headers="r1c1-t9">
<p>External tables (without data)</p>
</td>
<td class="cellalignment1396" headers="r13c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r13c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r13c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r13c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r14c1-t9" headers="r1c1-t9">
<p>Foreign function libraries</p>
</td>
<td class="cellalignment1396" headers="r14c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r14c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r14c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r14c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r15c1-t9" headers="r1c1-t9">
<p>Indexes owned by users other than table owner</p>
</td>
<td class="cellalignment1396" headers="r15c1-t9 r1c2-t9">
<p>Yes (Privileged users only)</p>
</td>
<td class="cellalignment1396" headers="r15c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r15c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r15c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r16c1-t9" headers="r1c1-t9">
<p>Index types</p>
</td>
<td class="cellalignment1396" headers="r16c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r16c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r16c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r16c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r17c1-t9" headers="r1c1-t9">
<p>Java resources and classes</p>
</td>
<td class="cellalignment1396" headers="r17c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r17c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r17c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r17c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r18c1-t9" headers="r1c1-t9">
<p>Job queues</p>
</td>
<td class="cellalignment1396" headers="r18c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r18c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r18c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r18c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r19c1-t9" headers="r1c1-t9">
<p>Nested table data</p>
</td>
<td class="cellalignment1396" headers="r19c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r19c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r19c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r19c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r20c1-t9" headers="r1c1-t9">
<p>Object grants</p>
</td>
<td class="cellalignment1396" headers="r20c1-t9 r1c2-t9">
<p>Yes (Only for tables and indexes)</p>
</td>
<td class="cellalignment1396" headers="r20c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r20c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r20c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r21c1-t9" headers="r1c1-t9">
<p>Object type definitions used by table</p>
</td>
<td class="cellalignment1396" headers="r21c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r21c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r21c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r21c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r22c1-t9" headers="r1c1-t9">
<p>Object types</p>
</td>
<td class="cellalignment1396" headers="r22c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r22c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r22c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r22c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r23c1-t9" headers="r1c1-t9">
<p>Operators</p>
</td>
<td class="cellalignment1396" headers="r23c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r23c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r23c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r23c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r24c1-t9" headers="r1c1-t9">
<p>Password history</p>
</td>
<td class="cellalignment1396" headers="r24c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r24c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r24c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r24c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r25c1-t9" headers="r1c1-t9">
<p>Postinstance actions and objects</p>
</td>
<td class="cellalignment1396" headers="r25c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r25c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r25c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r25c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r26c1-t9" headers="r1c1-t9">
<p>Postschema procedural actions and objects</p>
</td>
<td class="cellalignment1396" headers="r26c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r26c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r26c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r26c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r27c1-t9" headers="r1c1-t9">
<p>Posttable actions</p>
</td>
<td class="cellalignment1396" headers="r27c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r27c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r27c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r27c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r28c1-t9" headers="r1c1-t9">
<p>Posttable procedural actions and objects</p>
</td>
<td class="cellalignment1396" headers="r28c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r28c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r28c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r28c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r29c1-t9" headers="r1c1-t9">
<p>Preschema procedural objects and actions</p>
</td>
<td class="cellalignment1396" headers="r29c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r29c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r29c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r29c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r30c1-t9" headers="r1c1-t9">
<p>Pretable actions</p>
</td>
<td class="cellalignment1396" headers="r30c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r30c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r30c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r30c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r31c1-t9" headers="r1c1-t9">
<p>Pretable procedural actions</p>
</td>
<td class="cellalignment1396" headers="r31c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r31c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r31c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r31c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r32c1-t9" headers="r1c1-t9">
<p>Private synonyms</p>
</td>
<td class="cellalignment1396" headers="r32c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r32c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r32c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r32c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r33c1-t9" headers="r1c1-t9">
<p>Procedural objects</p>
</td>
<td class="cellalignment1396" headers="r33c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r33c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r33c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r33c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r34c1-t9" headers="r1c1-t9">
<p>Profiles</p>
</td>
<td class="cellalignment1396" headers="r34c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r34c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r34c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r34c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r35c1-t9" headers="r1c1-t9">
<p>Public synonyms</p>
</td>
<td class="cellalignment1396" headers="r35c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r35c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r35c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r35c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r36c1-t9" headers="r1c1-t9">
<p>Referential integrity constraints</p>
</td>
<td class="cellalignment1396" headers="r36c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r36c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r36c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r36c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r37c1-t9" headers="r1c1-t9">
<p>Refresh groups</p>
</td>
<td class="cellalignment1396" headers="r37c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r37c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r37c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r37c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r38c1-t9" headers="r1c1-t9">
<p>Resource costs</p>
</td>
<td class="cellalignment1396" headers="r38c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r38c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r38c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r38c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r39c1-t9" headers="r1c1-t9">
<p>Role grants</p>
</td>
<td class="cellalignment1396" headers="r39c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r39c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r39c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r39c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r40c1-t9" headers="r1c1-t9">
<p>Roles</p>
</td>
<td class="cellalignment1396" headers="r40c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r40c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r40c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r40c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r41c1-t9" headers="r1c1-t9">
<p>Rollback segment definitions</p>
</td>
<td class="cellalignment1396" headers="r41c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r41c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r41c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r41c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r42c1-t9" headers="r1c1-t9">
<p>Security policies for table</p>
</td>
<td class="cellalignment1396" headers="r42c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r42c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r42c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r42c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r43c1-t9" headers="r1c1-t9">
<p>Sequence numbers</p>
</td>
<td class="cellalignment1396" headers="r43c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r43c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r43c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r43c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r44c1-t9" headers="r1c1-t9">
<p>Snapshot logs</p>
</td>
<td class="cellalignment1396" headers="r44c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r44c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r44c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r44c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r45c1-t9" headers="r1c1-t9">
<p>Snapshots and materialized views</p>
</td>
<td class="cellalignment1396" headers="r45c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r45c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r45c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r45c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r46c1-t9" headers="r1c1-t9">
<p>System privilege grants</p>
</td>
<td class="cellalignment1396" headers="r46c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r46c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r46c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r46c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r47c1-t9" headers="r1c1-t9">
<p>Table constraints (primary, unique, check)</p>
</td>
<td class="cellalignment1396" headers="r47c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r47c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r47c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r47c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r48c1-t9" headers="r1c1-t9">
<p>Table data</p>
</td>
<td class="cellalignment1396" headers="r48c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r48c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r48c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r48c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r49c1-t9" headers="r1c1-t9">
<p>Table definitions</p>
</td>
<td class="cellalignment1396" headers="r49c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r49c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r49c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r49c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r50c1-t9" headers="r1c1-t9">
<p>Tablespace definitions</p>
</td>
<td class="cellalignment1396" headers="r50c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r50c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r50c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r50c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r51c1-t9" headers="r1c1-t9">
<p>Tablespace quotas</p>
</td>
<td class="cellalignment1396" headers="r51c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r51c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r51c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r51c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r52c1-t9" headers="r1c1-t9">
<p>Triggers</p>
</td>
<td class="cellalignment1396" headers="r52c1-t9 r1c2-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r52c1-t9 r1c3-t9">
<p>Yes<a id="sthref2149" href="#sthref2149" onclick='footdisplay(2,"Nonprivileged and privileged users can export and import all triggers owned by the user, even if they are on tables owned by other users.")'><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
<td class="cellalignment1396" headers="r52c1-t9 r1c4-t9">
<p>Yes<a id="sthref2150" href="#sthref2150" onclick='footdisplay(3,"A full export does not export triggers owned by schema SYS. You must manually re-create SYS triggers either before or after the full import. Oracle recommends that you re-create them after the import in case they define actions that would impede progress of the import.")'><sup class="tablefootnote">Foot&nbsp;3&nbsp;</sup></a></p>
</td>
<td class="cellalignment1396" headers="r52c1-t9 r1c5-t9">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r53c1-t9" headers="r1c1-t9">
<p>Triggers owned by other users</p>
</td>
<td class="cellalignment1396" headers="r53c1-t9 r1c2-t9">
<p>Yes (Privileged users only)</p>
</td>
<td class="cellalignment1396" headers="r53c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r53c1-t9 r1c4-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r53c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r54c1-t9" headers="r1c1-t9">
<p>User definitions</p>
</td>
<td class="cellalignment1396" headers="r54c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r54c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r54c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r54c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r55c1-t9" headers="r1c1-t9">
<p>User proxies</p>
</td>
<td class="cellalignment1396" headers="r55c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r55c1-t9 r1c3-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r55c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r55c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r56c1-t9" headers="r1c1-t9">
<p>User views</p>
</td>
<td class="cellalignment1396" headers="r56c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r56c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r56c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r56c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r57c1-t9" headers="r1c1-t9">
<p>User-stored procedures, packages, and functions</p>
</td>
<td class="cellalignment1396" headers="r57c1-t9 r1c2-t9">
<p>No</p>
</td>
<td class="cellalignment1396" headers="r57c1-t9 r1c3-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r57c1-t9 r1c4-t9">
<p>Yes</p>
</td>
<td class="cellalignment1396" headers="r57c1-t9 r1c5-t9">
<p>No</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>Nonprivileged users can export and import only indexes they own on tables they own. They cannot export indexes they own that are on tables owned by other users, nor can they export indexes owned by other users on their own tables. Privileged users can export and import indexes on the specified users' tables, even if the indexes are owned by other users. Indexes owned by the specified user on other users' tables are not included, unless those other users are included in the list of users to export.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>Nonprivileged and privileged users can export and import all triggers owned by the user, even if they are on tables owned by other users.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;3&nbsp;</sup>A full export does not export triggers owned by schema SYS. You must manually re-create SYS triggers either before or after the full import. Oracle recommends that you re-create them after the import in case they define actions that would impede progress of the import.</p>
</div>
<!-- class="sect1" -->
<a id="i1021478"></a>
<div id="SUTIL1705" class="sect1">
<h2 class="sect1">Import Parameters<a id="sthref2151"></a></h2>
<p>This section contains descriptions of the Import command-line parameters.</p>
<a id="i1019103"></a>
<div id="SUTIL1706" class="sect2">
<h3 class="sect2">BUFFER</h3>
<p>Default: operating system-dependent<a id="sthref2152"></a><a id="sthref2153"></a></p>
<p>The integer specified for <code dir="ltr">BUFFER</code> is the size, in bytes, of the buffer through which data rows are transferred.</p>
<p><code dir="ltr">BUFFER</code> determines the number of rows in the array inserted by Import. The following formula gives an approximation of the buffer size that inserts a given array of rows:</p>
<pre dir="ltr">
buffer_size = rows_in_array * maximum_row_size
</pre>
<p>For tables containing LOBs, <code dir="ltr">LONG,</code> <code dir="ltr">BFILE,</code> <code dir="ltr">REF,</code> <code dir="ltr">ROWID,</code><code dir="ltr">UROWID</code>, or <code dir="ltr">TIMESTAMP</code> columns, rows are inserted individually. The size of the buffer must be large enough to contain the entire row, except for LOB and <code dir="ltr">LONG</code> columns. If the buffer cannot hold the longest row in a table, then Import attempts to allocate a larger buffer.</p>
<p>For <code dir="ltr">DATE</code> columns, two or more rows are inserted at once if the buffer is large enough.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
See your Oracle operating system-specific documentation to determine the default value for this parameter.</div>
</div>
<!-- class="sect2" -->
<a id="i1019119"></a>
<div id="SUTIL1707" class="sect2">
<h3 class="sect2">COMMIT</h3>
<p>Default: <code dir="ltr">n</code><a id="sthref2154"></a><a id="sthref2155"></a></p>
<p><a id="sthref2156"></a><a id="sthref2157"></a>Specifies whether Import should commit after each array insert. By default, Import commits only after loading each table, and Import performs a rollback when an error occurs, before continuing with the next object.</p>
<p>If a table has nested table columns or attributes, then the contents of the nested tables are imported as separate tables. Therefore, the contents of the nested tables are always committed in a transaction distinct from the transaction used to commit the outer table.</p>
<p>If <code dir="ltr">COMMIT=n</code> and a table is partitioned, then each partition and subpartition in the Export file is imported in a separate transaction.</p>
<p>For tables containing LOBs, <code dir="ltr">LONG,</code> <code dir="ltr">BFILE,</code> <code dir="ltr">REF,</code> <code dir="ltr">ROWID,</code> <code dir="ltr">UROWID</code>, or <code dir="ltr">TIMESTAMP</code> columns, array inserts are not done. If <code dir="ltr">COMMIT=y</code>, then Import commits these tables after each row.</p>
</div>
<!-- class="sect2" -->
<a id="i1019137"></a>
<div id="SUTIL1708" class="sect2">
<h3 class="sect2">COMPILE<a id="sthref2158"></a><a id="sthref2159"></a></h3>
<p>Default: <code dir="ltr">y</code></p>
<p>Specifies whether Import should compile packages, procedures, and functions as they are created.</p>
<p>If <code dir="ltr">COMPILE</code>=<code dir="ltr">n</code>, then these units are compiled on their first use. For example, packages that are used to build domain indexes are compiled when the domain indexes are created.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABFFJGG">"Importing Stored Procedures, Functions, and Packages"</a></div>
</div>
<!-- class="sect2" -->
<div id="SUTIL1709" class="sect2"><a id="sthref2160"></a>
<h3 class="sect2"><a id="sthref2161"></a><a id="sthref2162"></a>CONSTRAINTS</h3>
<p>Default: <code dir="ltr">y</code></p>
<p>Specifies whether table constraints are to be imported. The default is to import constraints. If you do not want constraints to be imported, then you must set the parameter value to <code dir="ltr">n.</code></p>
<p>Note that primary key constraints for index-organized tables (IOTs) and object tables are always imported.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL3677" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2163"></a>
<h3 class="sect2">DATA_ONLY</h3>
<p>Default: n</p>
<p>To import only data (no metadata) from a dump file, specify <code dir="ltr">DATA_ONLY=y</code>.</p>
<p>When you specify <code dir="ltr">DATA_ONLY=y</code>, any import parameters related to metadata that are entered on the command line (or in a parameter file) become invalid. This means that no metadata from the dump file will be imported.</p>
<p>The metadata-related parameters are the following: <code dir="ltr">COMPILE</code>, <code dir="ltr">CONSTRAINTS</code>, <code dir="ltr">DATAFILES</code>, <code dir="ltr">DESTROY</code>, <code dir="ltr">GRANTS</code>, <code dir="ltr">IGNORE</code>, <code dir="ltr">INDEXES</code>, <code dir="ltr">INDEXFILE</code>, <code dir="ltr">ROWS=n</code>, <code dir="ltr">SHOW</code>, <code dir="ltr">SKIP_UNUSABLE_INDEXES</code>, <code dir="ltr">STATISTICS</code>, <code dir="ltr">STREAMS_CONFIGURATION</code>, <code dir="ltr">STREAMS_INSTANTIATION</code>, <code dir="ltr">TABLESPACES</code>, <code dir="ltr">TOID_NOVALIDATE</code>, <code dir="ltr">TRANSPORT_TABLESPACE</code>, <code dir="ltr">TTS_OWNERS</code>.</p>
</div>
<!-- class="sect2" -->
<a id="i1019161"></a>
<div id="SUTIL1710" class="sect2">
<h3 class="sect2">DATAFILES<a id="sthref2164"></a><a id="sthref2165"></a></h3>
<p>Default: none</p>
<p>When <code dir="ltr">TRANSPORT_TABLESPACE</code> is specified as <code dir="ltr">y</code>, use this parameter to list the data files to be transported into the database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1019649">"TRANSPORT_TABLESPACE"</a></div>
</div>
<!-- class="sect2" -->
<a id="i1019177"></a>
<div id="SUTIL1711" class="sect2">
<h3 class="sect2">DESTROY</h3>
<p>Default: <code dir="ltr">n</code><a id="sthref2166"></a><a id="sthref2167"></a></p>
<p>Specifies whether the existing data files making up the database should be reused. That is, specifying <code dir="ltr">DESTROY=y</code> causes Import to include the <code dir="ltr">REUSE</code> option in the data file clause of the SQL <code dir="ltr">CREATE TABLESPACE</code> statement, which causes Import to reuse the original database's data files after deleting their contents.<a id="sthref2168"></a><a id="sthref2169"></a><a id="sthref2170"></a></p>
<p>Note that the export file contains the data file names used in each tablespace. If you specify <code dir="ltr">DESTROY=y</code> and attempt to create a second database on the same system (for testing or other purposes), then the Import utility will overwrite the first database's data files when it creates the tablespace. In this situation you should use the default, <code dir="ltr">DESTROY=n,</code> so that an error occurs if the data files already exist when the tablespace is created.<a id="sthref2171"></a> Also, when you need to import into the original database, you will need to specify <code dir="ltr">IGNORE=y</code> to add to the existing data files without replacing them.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
If data files are stored on a raw device, then<code dir="ltr">DESTROY=n</code> <span class="italic">does not prevent</span> files from being overwritten.</div>
</div>
<!-- class="sect2" -->
<div id="SUTIL1712" class="sect2"><a id="sthref2172"></a>
<h3 class="sect2">FEEDBACK</h3>
<p>Default: <code dir="ltr">0</code> (zero)</p>
<p><a id="sthref2173"></a><a id="sthref2174"></a>Specifies that Import should display a progress meter in the form of a period for <code dir="ltr"><span class="codeinlineitalic">n</span></code> number of rows imported. For example, if you specify <code dir="ltr">FEEDBACK=10</code>, then Import displays a period each time 10 rows have been imported. The <code dir="ltr">FEEDBACK</code> value applies to all tables being imported; it cannot be individually set for each table.</p>
</div>
<!-- class="sect2" -->
<a id="i1019196"></a>
<div id="SUTIL1713" class="sect2">
<h3 class="sect2">FILE</h3>
<p>Default: <code dir="ltr">expdat</code>.<code dir="ltr">dmp</code><a id="sthref2175"></a><a id="sthref2176"></a><a id="sthref2177"></a></p>
<p>Specifies the names of the export files to import. The default extension is .<code dir="ltr">dmp</code>. Because Export supports multiple export files (see the following description of the <code dir="ltr">FILESIZE</code> parameter), you may need to specify multiple file names to be imported. For example:</p>
<pre dir="ltr">
imp scott IGNORE=y FILE = dat1.dmp, dat2.dmp, dat3.dmp FILESIZE=2048
 
</pre>
<p>You need not be the user who exported the export files; however, you must have read access to the files. If you were not the exporter of the export files, then you must also have the <code dir="ltr">IMP_FULL_DATABASE</code> role granted to you.</p>
</div>
<!-- class="sect2" -->
<a id="i1019205"></a>
<div id="SUTIL1714" class="sect2">
<h3 class="sect2">FILESIZE<a id="sthref2178"></a><a id="sthref2179"></a></h3>
<p>Default: operating system-dependent</p>
<p>Lets you specify the same maximum dump file size you specified on export.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The maximum size allowed is operating system-dependent. You should verify this maximum value in your Oracle operating system-specific documentation before specifying <code dir="ltr">FILESIZE.</code></div>
<p>The <code dir="ltr">FILESIZE</code> value can be specified as a number followed by KB (number of kilobytes). For example, <code dir="ltr">FILESIZE=2KB</code> is the same as <code dir="ltr">FILESIZE=2048.</code> Similarly, MB specifies megabytes (1024 * 1024) and GB specifies gigabytes (1024**3). B remains the shorthand for bytes; the number is not multiplied to obtain the final file size (<code dir="ltr">FILESIZE=2048B</code> is the same as <code dir="ltr">FILESIZE=2048</code>).</p>
</div>
<!-- class="sect2" -->
<a id="i1019223"></a>
<div id="SUTIL1715" class="sect2">
<h3 class="sect2">FROMUSER</h3>
<p>Default: none<a id="sthref2180"></a><a id="sthref2181"></a><a id="sthref2182"></a></p>
<p>A comma-delimited list of schemas to import. This parameter is relevant only to users with the <code dir="ltr">IMP_FULL_DATABASE</code> role. The parameter enables you to import a subset of schemas from an export file containing multiple schemas (for example, a full export dump file or a multischema, user-mode export dump file).</p>
<p>Schema names that appear inside function-based indexes, functions, procedures, triggers, type bodies, views, and so on, are <span class="italic">not</span> affected by <code dir="ltr">FROMUSER</code> or <code dir="ltr">TOUSER</code> processing. Only the <span class="italic">name</span> of the object is affected. After the import has completed, items in any <code dir="ltr">TOUSER</code> schema should be manually checked for references to old (<code dir="ltr">FROMUSER</code>) schemas, and corrected if necessary.</p>
<p>You will typically use <code dir="ltr">FROMUSER</code> in conjunction with the Import parameter <code dir="ltr">TOUSER</code>, which you use to specify a list of usernames whose schemas will be targets for import (see <a href="#i1019624">"TOUSER"</a>). The user that you specify with <code dir="ltr">TOUSER</code> must exist in the target database before the import operation; otherwise an error is returned.</p>
<p>If you do not specify <code dir="ltr">TOUSER</code>, then Import will do the following:</p>
<ul>
<li>
<p>Import objects into the <code dir="ltr">FROMUSER</code> schema if the export file is a full dump or a multischema, user-mode export dump file</p>
</li>
<li>
<p>Create objects in the importer's schema (regardless of the presence of or absence of the <code dir="ltr">FROMUSER</code> schema on import) if the export file is a single-schema, user-mode export dump file created by an unprivileged user</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Specifying <code dir="ltr">FROMUSER=SYSTEM</code> causes only schema objects belonging to user <code dir="ltr">SYSTEM</code> to be imported; it does not cause system objects to be imported.</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="SUTIL1716" class="sect2"><a id="sthref2183"></a>
<h3 class="sect2">FULL<a id="sthref2184"></a><a id="sthref2185"></a></h3>
<p>Default: <code dir="ltr">y</code><a id="sthref2186"></a></p>
<p>Specifies whether to import the entire export dump file.<a id="sthref2187"></a><a id="sthref2188"></a><a id="sthref2189"></a></p>
<a id="i1023130"></a>
<div id="SUTIL1681" class="sect3">
<h4 class="sect3">Points to Consider for Full Database Exports and Imports</h4>
<p>A full database export and import can be a good way to replicate or clean up a database. However, to avoid problems be sure to keep the following points in mind:</p>
<ul>
<li>
<p>A full export does not export triggers owned by schema <code dir="ltr">SYS</code>. You must manually re-create <code dir="ltr">SYS</code> triggers either before or after the full import. Oracle recommends that you re-create them after the import in case they define actions that would impede progress of the import.</p>
</li>
<li>
<p>A full export also does not export the default profile. If you have modified the default profile in the source database (for example, by adding a password verification function owned by schema <code dir="ltr">SYS</code>), then you must manually pre-create the function and modify the default profile in the target database after the import completes.</p>
</li>
<li>
<p>If possible, before beginning, make a physical copy of the exported database and the database into which you intend to import. This ensures that any mistakes are reversible.</p>
</li>
<li>
<p>Before you begin the export, it is advisable to produce a report that includes the following information:</p>
<ul>
<li>
<p>A list of tablespaces and data files</p>
</li>
<li>
<p>A list of rollback segments</p>
</li>
<li>
<p>A count, by user, of each object type such as tables, indexes, and so on</p>
</li>
</ul>
<p>This information lets you ensure that tablespaces have already been created and that the import was successful.</p>
</li>
<li>
<p>If you are creating a completely new database from an export, then remember to create an extra rollback segment in <code dir="ltr">SYSTEM</code> and to make it available in your initialization parameter file (<code dir="ltr">init</code>.<code dir="ltr">ora)</code>before proceeding with the import.</p>
</li>
<li>
<p>When you perform the import, ensure you are pointing at the correct instance. This is very important because on some UNIX systems, just the act of entering a subshell can change the database against which an import operation was performed.</p>
</li>
<li>
<p>Do not perform a full import on a system that has more than one database unless you are certain that all tablespaces have already been created. A full import creates any undefined tablespaces using the same data file names as the exported database. This can result in problems in the following situations:</p>
<ul>
<li>
<p>If the data files belong to any other database, then they will become corrupted. This is especially true if the exported database is on the same system, because its data files will be reused by the database into which you are importing.</p>
</li>
<li>
<p>If the data files have names that conflict with existing operating system files.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="SUTIL1717" class="sect2"><a id="sthref2190"></a>
<h3 class="sect2">GRANTS<a id="sthref2191"></a><a id="sthref2192"></a></h3>
<p>Default: <code dir="ltr">y</code></p>
<p><a id="sthref2193"></a><a id="sthref2194"></a>Specifies whether to import object grants.</p>
<p>By default, the Import utility imports any object grants that were exported. If the export was a user-mode export, then the export file contains only first-level object grants (those granted by the owner).</p>
<p>If the export was a full database mode export, then the export file contains all object grants, including lower-level grants (those granted by users given a privilege with the <code dir="ltr">WITH GRANT OPTION</code>). If you specify <code dir="ltr">GRANTS=n</code>, then the Import utility does not import object grants. (Note that system grants <span class="italic">are</span> imported even if <code dir="ltr">GRANTS=n</code>.) <a id="sthref2195"></a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Export does not export grants on data dictionary views for security reasons that affect Import. If such grants were exported, then access privileges would be changed and the importer would not be aware of this.</div>
</div>
<!-- class="sect2" -->
<div id="SUTIL1718" class="sect2"><a id="sthref2196"></a>
<h3 class="sect2">HELP</h3>
<p>Default: n<a id="sthref2197"></a><a id="sthref2198"></a><a id="sthref2199"></a>one</p>
<p>Displays a description of the Import parameters. Enter <code dir="ltr">imp</code> <code dir="ltr">HELP=y</code> on the command line to invoke it.</p>
</div>
<!-- class="sect2" -->
<a id="i1019282"></a>
<div id="SUTIL1719" class="sect2">
<h3 class="sect2">IGNORE</h3>
<p>Default: <code dir="ltr">n</code><a id="sthref2200"></a><a id="sthref2201"></a><a id="sthref2202"></a><a id="sthref2203"></a><a id="sthref2204"></a><a id="sthref2205"></a></p>
<p>Specifies how object creation errors should be handled. If you accept the default, <code dir="ltr">IGNORE=n</code>, then Import logs or displays object creation errors before continuing.</p>
<p>If you specify <code dir="ltr">IGNORE=y</code>, then Import overlooks object creation errors when it attempts to create database objects, and continues without reporting the errors.</p>
<p>Note that only <span class="italic">object creation errors</span> are ignored; other errors, such as operating system, database, and SQL errors, <span class="italic">are not</span> ignored and may cause processing to stop.</p>
<p>In situations where multiple refreshes from a single export file are done with <code dir="ltr">IGNORE=y</code>, certain objects can be created multiple times (although they will have unique system-defined names). You can prevent this for certain objects (for example, constraints) by doing an import with <code dir="ltr">CONSTRAINTS=n</code>. If you do a full import with <code dir="ltr">CONSTRAINTS=n</code>, then no constraints for any tables are imported.</p>
<p>If a table already exists and <code dir="ltr">IGNORE=y</code>, then rows are imported into existing tables without any errors or messages being given. You might want to import data into tables that already exist in order to use new storage parameters or because you have already created the table in a cluster.</p>
<p>If a table already exists and <code dir="ltr">IGNORE=n,</code> then errors are reported and the table is skipped with no rows inserted. Also, objects dependent on tables, such as indexes, grants, and constraints, will not be created.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
When you import into existing tables, if no column in the table is uniquely indexed, rows could be duplicated.</div>
</div>
<!-- class="sect2" -->
<div id="SUTIL1720" class="sect2"><a id="sthref2206"></a>
<h3 class="sect2"><a id="sthref2207"></a>INDEXES</h3>
<p>Default: <code dir="ltr">y<a id="sthref2208"></a><a id="sthref2209"></a><a id="sthref2210"></a></code></p>
<p>Specifies whether to import indexes. System-generated indexes such as LOB indexes, OID indexes, or unique constraint indexes are re-created by Import regardless of the setting of this parameter.</p>
<p>You can postpone all user-generated index creation until after Import completes, by specifying <code dir="ltr">INDEXES=n</code>.</p>
<p>If indexes for the target table already exist at the time of the import, then Import performs index maintenance when data is inserted into the table.</p>
</div>
<!-- class="sect2" -->
<a id="i1019309"></a>
<div id="SUTIL1721" class="sect2">
<h3 class="sect2">INDEXFILE</h3>
<p>Default: none<a id="sthref2211"></a><a id="sthref2212"></a><a id="sthref2213"></a><a id="sthref2214"></a></p>
<p>Specifies a file to receive index-creation statements.</p>
<p>When this parameter is specified, index-creation statements for the requested mode are extracted and written to the specified file, rather than used to create indexes in the database. No database objects are imported.</p>
<p>If the Import parameter <code dir="ltr">CONSTRAINTS</code> is set to <code dir="ltr">y</code>, then Import also writes table constraints to the index file.</p>
<p>The file can then be edited (for example, to change storage parameters) and used as a SQL script to create the indexes.</p>
<p>To make it easier to identify the indexes defined in the file, the export file's <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> statements and <code dir="ltr">CREATE</code> <code dir="ltr">CLUSTER</code> statements are included as comments.<a id="sthref2215"></a><a id="sthref2216"></a></p>
<p>Perform the following steps to use this feature:</p>
<ol>
<li>
<p>Import using the <code dir="ltr">INDEXFILE</code> parameter to create a file of index-creation statements.</p>
</li>
<li>
<p>Edit the file, making certain to add a valid password to the <code dir="ltr">connect</code> strings.</p>
</li>
<li>
<p>Rerun Import, specifying <code dir="ltr">INDEXES=n</code>.</p>
<p>(This step imports the database objects while preventing Import from using the index definitions stored in the export file.)</p>
</li>
<li>
<p>Execute the file of index-creation statements as a SQL script to create the index.</p>
<p>The <code dir="ltr">INDEXFILE</code> parameter can be used only with the <code dir="ltr">FULL=y</code>, <code dir="ltr">FROMUSER</code>, <code dir="ltr">TOUSER</code>, or <code dir="ltr">TABLES</code> parameters.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1019329"></a>
<div id="SUTIL1722" class="sect2">
<h3 class="sect2">LOG<a id="sthref2217"></a><a id="sthref2218"></a></h3>
<p>Default: none<a id="sthref2219"></a></p>
<p>Specifies a file (for example, import.log) to receive informational and error messages. If you specify a log file, then the Import utility writes all information to the log in addition to the terminal display.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL1723" class="sect2"><a id="sthref2220"></a>
<h3 class="sect2">PARFILE<a id="sthref2221"></a><a id="sthref2222"></a></h3>
<p><a id="sthref2223"></a><a id="sthref2224"></a>Default: none</p>
<p>Specifies a file name for a file that contains a list of Import parameters. For more information about using a parameter file, see <a href="#i1021490">"Parameter Files"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i1019346"></a>
<div id="SUTIL1724" class="sect2">
<h3 class="sect2">RECORDLENGTH<a id="sthref2225"></a><a id="sthref2226"></a></h3>
<p>Default: operating system-dependent<a id="sthref2227"></a><a id="sthref2228"></a></p>
<p>Specifies the length, in bytes, of the file record. The <code dir="ltr">RECORDLENGTH</code> parameter is necessary when you must transfer the export file to another operating system that uses a different default value. <span class="bold"><a id="sthref2229"></a></span></p>
<p>If you do not define this parameter, then it defaults to your platform-dependent value for <code dir="ltr">BUFSIZ.</code></p>
<p>You can set <code dir="ltr">RECORDLENGTH</code> to any value equal to or greater than your system's <code dir="ltr">BUFSIZ</code>. (The highest value is 64 KB.) Changing the <code dir="ltr">RECORDLENGTH</code> parameter affects only the size of data that accumulates before writing to the database. It does not affect the operating system file block size.</p>
<p>You can also use this parameter to specify the size of the Import I/O buffer.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL1725" class="sect2"><a id="sthref2230"></a>
<h3 class="sect2">RESUMABLE<a id="sthref2231"></a><a id="sthref2232"></a></h3>
<p>Default: <code dir="ltr">n</code></p>
<p>The <code dir="ltr">RESUMABLE</code> parameter is used to enable and disable resumable space allocation<a id="sthref2233"></a>. Because this parameter is disabled by default, you must set <code dir="ltr">RESUMABLE=y</code> to use its associated parameters, <code dir="ltr">RESUMABLE_NAME</code> and <code dir="ltr">RESUMABLE_TIMEOUT</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT" href="../e40540/toc.htm"><span class="italic">Oracle Database Concepts</span></a></p>
</li>
<li>
<p><a class="olink ADMIN" href="../e25494/toc.htm"><span class="italic">Oracle Database Administrator's Guide</span></a> for more information about resumable space allocation</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="SUTIL1726" class="sect2"><a id="sthref2234"></a>
<h3 class="sect2">RESUMABLE_NAME<a id="sthref2235"></a><a id="sthref2236"></a></h3>
<p>Default: <code dir="ltr">'User USERNAME (USERID), Session SESSIONID, Instance INSTANCEID'</code></p>
<p>The value for this parameter identifies the statement that is resumable. This value is a user-defined text string that is inserted in either the <code dir="ltr">USER_RESUMABLE</code> or <code dir="ltr">DBA_RESUMABLE</code> view to help you identify a specific resumable statement that has been suspended.</p>
<p>This parameter is ignored unless the <code dir="ltr">RESUMABLE</code> parameter is set to <code dir="ltr">y</code> to enable resumable space allocation.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL1727" class="sect2"><a id="sthref2237"></a>
<h3 class="sect2">RESUMABLE_TIMEOUT<a id="sthref2238"></a><a id="sthref2239"></a></h3>
<p>Default: <code dir="ltr">7200</code> seconds (2 hours)</p>
<p>The value of the parameter specifies the time period during which an error must be fixed. If the error is not fixed within the timeout period, then execution of the statement is terminated.</p>
<p>This parameter is ignored unless the <code dir="ltr">RESUMABLE</code> parameter is set to <code dir="ltr">y</code> to enable resumable space allocation.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL1728" class="sect2"><a id="sthref2240"></a>
<h3 class="sect2">ROWS</h3>
<p>Default: <code dir="ltr"><a id="sthref2241"></a><a id="sthref2242"></a><a id="sthref2243"></a><a id="sthref2244"></a>y<a id="sthref2245"></a></code></p>
<p>Specifies whether to import the rows of table data.</p>
<p>If <code dir="ltr">ROWS=n</code>, then statistics for all imported tables will be locked after the import operation is finished.</p>
</div>
<!-- class="sect2" -->
<a id="i1019404"></a>
<div id="SUTIL1729" class="sect2">
<h3 class="sect2">SHOW<a id="sthref2246"></a><a id="sthref2247"></a></h3>
<p>Default: <code dir="ltr">n</code></p>
<p>When <code dir="ltr">SHOW=y,</code> the contents of the export dump file are listed to the display and not imported. The SQL statements contained in the export are displayed in the order in which Import will execute them.</p>
<p>The <code dir="ltr">SHOW</code> parameter can be used only with the <code dir="ltr">FULL=y</code>, <code dir="ltr">FROMUSER</code>, <code dir="ltr">TOUSER</code>, or <code dir="ltr">TABLES</code> parameter.<a id="sthref2248"></a> <a id="sthref2249"></a></p>
</div>
<!-- class="sect2" -->
<div id="SUTIL1730" class="sect2"><a id="sthref2250"></a>
<h3 class="sect2">SKIP_UNUSABLE_INDEXES<a id="sthref2251"></a><a id="sthref2252"></a></h3>
<p>Default: the value of the Oracle database configuration parameter, <code dir="ltr">SKIP_UNUSABLE_INDEXES</code>, as specified in the initialization parameter file</p>
<p>Both Import and the Oracle database provide a <code dir="ltr">SKIP_UNUSABLE_INDEXES</code> parameter. The Import <code dir="ltr">SKIP_UNUSABLE_INDEXES</code> parameter is specified at the Import command line. The Oracle database <code dir="ltr">SKIP_UNUSABLE_INDEXES</code> parameter is specified as a configuration parameter in the initialization parameter file. It is important to understand how they affect each other.</p>
<p>If you do not specify a value for <code dir="ltr">SKIP_UNUSABLE_INDEXES</code> at the Import command line, then Import uses the database setting for the <code dir="ltr">SKIP_UNUSABLE_INDEXES</code> configuration parameter, as specified in the initialization parameter file.</p>
<p>If you do specify a value for <code dir="ltr">SKIP_UNUSABLE_INDEXES</code> at the Import command line, then it overrides the value of the <code dir="ltr">SKIP_UNUSABLE_INDEXES</code> configuration parameter in the initialization parameter file.</p>
<p>A value of <code dir="ltr">y</code> means that Import will skip building indexes that were set to the Index Unusable state (by either system or user). Other indexes (not previously set to Index Unusable) continue to be updated as rows are inserted.</p>
<p>This parameter enables you to postpone index maintenance on selected index partitions until after row data has been inserted. You then have the responsibility to rebuild the affected index partitions after the Import.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Indexes that are unique and marked Unusable are not allowed to skip index maintenance. Therefore, the <code dir="ltr">SKIP_UNUSABLE_INDEXES</code> parameter has no effect on unique indexes.</div>
<p>You can use the <code dir="ltr">INDEXFILE</code> parameter in conjunction with <code dir="ltr">INDEXES=n</code> to provide the SQL scripts for re-creating the index. If the <code dir="ltr">SKIP_UNUSABLE_INDEXES</code> parameter is not specified, then row insertions that attempt to update unusable indexes will fail.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The <code dir="ltr">ALTER SESSION</code> statement in the <a class="olink SQLRF" href="../e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a></div>
</div>
<!-- class="sect2" -->
<a id="i1019436"></a>
<div id="SUTIL1731" class="sect2">
<h3 class="sect2">STATISTICS<a id="sthref2253"></a><a id="sthref2254"></a></h3>
<p>Default: <code dir="ltr">ALWAYS</code></p>
<p><a id="sthref2255"></a><a id="sthref2256"></a>Specifies what is done with the database optimizer statistics at import time.</p>
<p>The options are:</p>
<ul>
<li>
<p><code dir="ltr">ALWAYS</code></p>
<p>Always import database optimizer statistics regardless of whether they are questionable.</p>
</li>
<li>
<p><code dir="ltr">NONE</code></p>
<p>Do not import or recalculate the database optimizer statistics.</p>
</li>
<li>
<p><code dir="ltr">SAFE</code></p>
<p>Import database optimizer statistics only if they are not questionable. If they are questionable, then recalculate the optimizer statistics.</p>
</li>
<li>
<p><code dir="ltr">RECALCULATE</code></p>
<p>Do not import the database optimizer statistics. Instead, recalculate them on import. This requires that the original export operation that created the dump file must have generated the necessary <code dir="ltr">ANALYZE</code> statements (that is, the export was not performed with <code dir="ltr">STATISTICS</code>=<code dir="ltr">NONE</code>). These <code dir="ltr">ANALYZE</code> statements are included in the dump file and used by the import operation for recalculation of the table's statistics.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT" href="../e40540/toc.htm"><span class="italic">Oracle Database Concepts</span></a> for more information about the optimizer and the statistics it uses</p>
</li>
<li>
<p><a href="#BABIFBGF">"Importing Statistics"</a></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1019477"></a>
<div id="SUTIL1732" class="sect2">
<h3 class="sect2">STREAMS_CONFIGURATION<a id="sthref2257"></a><a id="sthref2258"></a></h3>
<p>Default: <code dir="ltr">y</code></p>
<p>Specifies whether to import any general Streams metadata that may be present in the export dump file.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP113" href="../../server.112/e10705/instant.htm#STREP113"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a></div>
</div>
<!-- class="sect2" -->
<a id="i1019493"></a>
<div id="SUTIL1733" class="sect2">
<h3 class="sect2">STREAMS_INSTANTIATION<a id="sthref2259"></a><a id="sthref2260"></a></h3>
<p>Default: <code dir="ltr">n</code></p>
<p>Specifies whether to import Streams instantiation metadata that may be present in the export dump file. Specify <code dir="ltr">y</code> if the import is part of an instantiation in a Streams environment.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP113" href="../../server.112/e10705/instant.htm#STREP113"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a></div>
</div>
<!-- class="sect2" -->
<a id="i1019509"></a>
<div id="SUTIL1734" class="sect2">
<h3 class="sect2">TABLES<a id="sthref2261"></a><a id="sthref2262"></a></h3>
<p>Default: none<a id="sthref2263"></a><a id="sthref2264"></a><a id="sthref2265"></a></p>
<p>Specifies that the import is a table-mode import and lists the table names and partition and subpartition names to import. Table-mode import lets you import entire partitioned or nonpartitioned tables. The <code dir="ltr">TABLES</code> parameter restricts the import to the specified tables and their associated objects, as listed in <a href="#g1040522">Table 22-3</a>. You can specify the following values for the <code dir="ltr">TABLES</code> parameter:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">tablename</span></code> specifies the name of the table or tables to be imported. If a table in the list is partitioned and you do not specify a partition name, then all its partitions and subpartitions are imported. To import all the exported tables, specify an asterisk (*) as the only table name parameter.</p>
<p><code dir="ltr"><span class="codeinlineitalic">tablename</span></code> can contain any number of '%' pattern matching<a id="sthref2266"></a> characters, which can each match zero or more characters in the table names in the export file. All the tables whose names match all the specified patterns of a specific table name in the list are selected for import. A table name in the list that consists of all pattern matching characters<a id="sthref2267"></a> and no partition name results in all exported tables being imported.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">partition_name</span></code> and <code dir="ltr"><span class="codeinlineitalic">subpartition_name</span></code> let you restrict the import to one or more specified partitions or subpartitions within a partitioned table.</p>
</li>
</ul>
<p>The syntax you use to specify the preceding is in the form:</p>
<pre dir="ltr">
<span class="italic">tablename:partition_name</span>

<span class="italic">tablename:subpartition_name</span>
</pre>
<p>If you use <code dir="ltr"><span class="codeinlineitalic">tablename</span></code><code dir="ltr">:</code><code dir="ltr"><span class="codeinlineitalic">partition_name</span></code>, then the specified table must be partitioned, and <code dir="ltr"><span class="codeinlineitalic">partition_name</span></code> must be the name of one of its partitions or subpartitions. If the specified table is not partitioned, then the <code dir="ltr"><span class="codeinlineitalic">partition_name</span></code> is ignored and the entire table is imported.</p>
<p>The number of tables that can be specified at the same time is dependent on command-line limits.</p>
<p>As the export file is processed, each table name in the export file is compared against each table name in the list, in the order in which the table names were specified in the parameter. To avoid ambiguity and excessive processing time, specific table names should appear at the beginning of the list, and more general table names (those with patterns) should appear at the end of the list.</p>
<p>Although you can qualify table names with schema names (as in <code dir="ltr">scott</code>.<code dir="ltr">emp</code>) when exporting, you <span class="italic">cannot</span> do so when importing. In the following example, the <code dir="ltr">TABLES</code> parameter is specified incorrectly:</p>
<pre dir="ltr">
imp TABLES=(jones.accts, scott.emp, scott.dept)
</pre>
<p>The valid specification to import these tables is as follows:</p>
<pre dir="ltr">
imp FROMUSER=jones TABLES=(accts)
imp FROMUSER=scott TABLES=(emp,dept)
</pre>
<p>For a more detailed example, see <a href="#i1020098">"Example Import Using Pattern Matching to Import Various Tables"</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<span class="bold"><a id="sthref2268"></a></span>Some operating systems, such as UNIX, require that you use escape characters before special characters, such as a parenthesis, so that the character is not treated as a special character. On UNIX, use a backslash (\) as the escape character, as shown in the following example:
<pre dir="ltr">
TABLES=\(emp,dept\)
</pre></div>
<div id="SUTIL1735" class="sect3"><a id="sthref2269"></a>
<h4 class="sect3">Table Name Restrictions</h4>
<p>The following restrictions apply to table names:</p>
<ul>
<li>
<p>By default, table names in a database are stored as uppercase. If you have a table name in mixed-case or lowercase, and you want to preserve case-sensitivity for the table name, then you must enclose the name in quotation marks. The name must exactly match the table name stored in the database.</p>
<p>Some operating systems require that quotation marks on the command line be preceded by an escape character. The following are examples of how case-sensitivity can be preserved in the different Import modes.</p>
<ul>
<li>
<p>In command-line mode:</p>
<pre dir="ltr">
tables='\"Emp\"'
</pre></li>
<li>
<p>In interactive mode:</p>
<pre dir="ltr">
Table(T) to be exported: "Exp"
</pre></li>
<li>
<p>In parameter file mode:</p>
<pre dir="ltr">
tables='"Emp"'
</pre></li>
</ul>
</li>
<li>
<p><a id="sthref2270"></a>Table names specified on the command line cannot include a pound (#) sign, unless the table name is enclosed in quotation marks. Similarly, in the parameter file, if a table name includes a pound (#) sign, then the Import utility interprets the rest of the line as a comment, unless the table name is enclosed in quotation marks.</p>
<p><a id="sthref2271"></a><a id="sthref2272"></a>F<a id="sthref2273"></a>or example, if the parameter file contains the following line, then Import interprets everything on the line after <code dir="ltr">emp#</code> as a comment and does not import the tables <code dir="ltr">dept</code> and <code dir="ltr">mydata:</code></p>
<pre dir="ltr">
TABLES=(emp#, dept, mydata)
</pre>
<p>However, given the following line, the Import utility imports all three tables because <code dir="ltr">emp#</code> is enclosed in quotation marks:</p>
<pre dir="ltr">
TABLES=("emp#", dept, mydata)
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Some operating systems require single quotation marks rather than double quotation marks, or the reverse; see your Oracle operating system-specific documentation. Different operating systems also have other restrictions on table naming.
<p>For example, the UNIX C shell attaches a special meaning to a dollar sign ($) or pound sign (#) (or certain other special characters). You must use escape characters to get such characters in the name past the shell and into Import.</p>
</div>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1019585"></a>
<div id="SUTIL1736" class="sect2">
<h3 class="sect2">TABLESPACES<a id="sthref2274"></a><a id="sthref2275"></a></h3>
<p>Default: none</p>
<p>When <code dir="ltr">TRANSPORT_TABLESPACE</code> is specified as <code dir="ltr">y</code>, use this parameter to list the tablespaces to be transported into the database. If there is more than one tablespace in the export file, then you must specify all of them as part of the import operation.</p>
<p>See <a href="#i1019649">"TRANSPORT_TABLESPACE"</a> for more information.</p>
</div>
<!-- class="sect2" -->
<a id="i1019597"></a>
<div id="SUTIL1737" class="sect2">
<h3 class="sect2">TOID_NOVALIDATE<a id="sthref2276"></a><a id="sthref2277"></a></h3>
<p>Default: none</p>
<p>When you import a table that references a type, but a type of that name already exists in the database, Import attempts to verify that the preexisting type is, in fact, the type used by the table (rather than a different type that just happens to have the same name).</p>
<p>To do this, Import compares the type's unique identifier (TOID) with the identifier stored in the export file. Import will not import the table rows if the TOIDs do not match.</p>
<p>In some situations, you may not want this validation to occur on specified types (for example, if the types were created by a cartridge installation). You can use the <code dir="ltr">TOID_NOVALIDATE</code> parameter to specify types to exclude from TOID comparison.</p>
<p>The syntax is as follows:</p>
<pre dir="ltr">
TOID_NOVALIDATE=(<span class="italic">[schemaname.]typename [, ...]</span>)
</pre>
<p>For example:</p>
<pre dir="ltr">
imp scott TABLES=jobs TOID_NOVALIDATE=typ1
imp scott TABLES=salaries TOID_NOVALIDATE=(fred.typ0,sally.typ2,typ3)
</pre>
<p>If you do not specify a schema name for the type, then it defaults to the schema of the importing user. For example, in the first preceding example, the type <code dir="ltr">typ1</code> defaults to <code dir="ltr">scott.typ1</code> and in the second example, the type <code dir="ltr">typ3</code> defaults to <code dir="ltr">scott.typ3</code>.</p>
<p>Note that <code dir="ltr">TOID_NOVALIDATE</code> deals only with table column types. It has no effect on table types.</p>
<p>The output of a typical import with excluded types would contain entries similar to the following:</p>
<pre dir="ltr">
[...]
. importing IMP3's objects into IMP3
. . skipping TOID validation on type IMP2.TOIDTYP0
. . importing table                  "TOIDTAB3"          
[...]
</pre>
<div class="infobox-note">
<p class="notep1">Caution:</p>
When you inhibit validation of the type identifier, it is your responsibility to ensure that the attribute list of the imported type matches the attribute list of the existing type. If these attribute lists do not match, then results are unpredictable.</div>
</div>
<!-- class="sect2" -->
<a id="i1019624"></a>
<div id="SUTIL1738" class="sect2">
<h3 class="sect2">TOUSER<a id="sthref2278"></a><a id="sthref2279"></a></h3>
<p>Default: none</p>
<p>Specifies a list of user names whose schemas will be targets for Import. The user names must exist before the import operation; otherwise an error is returned. The <code dir="ltr">IMP_FULL_DATABASE</code> role is required to use this parameter. To import to a different schema than the one that originally contained the object, specify <code dir="ltr">TOUSER.</code> For example:</p>
<pre dir="ltr">
imp FROMUSER=scott TOUSER=joe TABLES=emp
</pre>
<p>If multiple schemas are specified, then the schema names are paired. The following example imports <code dir="ltr">scott'</code>s objects into <code dir="ltr">joe</code>'s schema, and <code dir="ltr">fred</code>'s objects into <code dir="ltr">ted'</code>s schema:</p>
<pre dir="ltr">
imp FROMUSER=scott,fred TOUSER=joe,ted
</pre>
<p>If the <code dir="ltr">FROMUSER</code> list is longer than the <code dir="ltr">TOUSER</code> list, then the remaining schemas will be imported into either the <code dir="ltr">FROMUSER</code> schema, or into the importer's schema, based on normal defaulting rules. You can use the following syntax to ensure that any extra objects go into the <code dir="ltr">TOUSER</code> schema:</p>
<pre dir="ltr">
imp FROMUSER=scott,adams TOUSER=ted,ted
</pre>
<p>Note that user <code dir="ltr">ted</code> is listed twice.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1019223">"FROMUSER"</a> for information about restrictions when using <code dir="ltr">FROMUSER</code> and <code dir="ltr">TOUSER</code></div>
</div>
<!-- class="sect2" -->
<a id="i1019649"></a>
<div id="SUTIL1739" class="sect2">
<h3 class="sect2">TRANSPORT_TABLESPACE<a id="sthref2280"></a><a id="sthref2281"></a></h3>
<p>Default: <code dir="ltr">n</code></p>
<p>When specified as <code dir="ltr">y</code>, instructs Import to import transportable <a id="sthref2282"></a>tablespace metadata from an export file.</p>
<p>Encrypted columns are not supported in transportable tablespace mode.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot export transportable tablespaces and then import them into a database at a lower release level. The target database must be at the same or higher release level as the source database.</div>
</div>
<!-- class="sect2" -->
<a id="i1019655"></a>
<div id="SUTIL1740" class="sect2">
<h3 class="sect2">TTS_OWNERS<a id="sthref2283"></a><a id="sthref2284"></a></h3>
<p>Default: none</p>
<p>When <code dir="ltr">TRANSPORT_TABLESPACE</code> is specified as <code dir="ltr">y</code>, use this parameter to list the users who own the data in the transportable tablespace set.</p>
<p>See <a href="#i1019649">"TRANSPORT_TABLESPACE"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i1019667"></a>
<div id="SUTIL1741" class="sect2">
<h3 class="sect2">USERID (username/password)<a id="sthref2285"></a><a id="sthref2286"></a></h3>
<p>Default: none</p>
<p>Specifies the username, password, and an optional connect string of the user performing the import.</p>
<p>If you connect as user <code dir="ltr">SYS</code>, then you must also specify <code dir="ltr">AS SYSDBA</code> in the connect string. Your operating system may require you to treat <code dir="ltr">AS SYSDBA</code> as a special string, in which case the entire string would be enclosed in quotation marks.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink HETER" href="../../server.112/e11050/toc.htm"><span class="italic">Oracle Database Heterogeneous Connectivity User's Guide</span></a></p>
</li>
<li>
<p>The user's guide for your Oracle Net protocol for information about specifying a connect string for Oracle Net</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i1019700"></a>
<div id="SUTIL1742" class="sect2">
<h3 class="sect2">VOLSIZE<a id="sthref2287"></a><a id="sthref2288"></a></h3>
<p>Default: none</p>
<p>Specifies the maximum number of bytes in a dump file on each volume of tape.</p>
<p>The <code dir="ltr">VOLSIZE</code> parameter has a maximum value equal to the maximum value that can be stored in 64 bits on your platform.</p>
<p>The <code dir="ltr">VOLSIZE</code> value can be specified as number followed by KB (number of kilobytes). For example, <code dir="ltr">VOLSIZE=2KB</code> is the same as <code dir="ltr">VOLSIZE=2048.</code> Similarly, MB specifies megabytes (1024 * 1024) and GB specifies gigabytes (1024**3). The shorthand for bytes remains B; the number is not multiplied to get the final file size (<code dir="ltr">VOLSIZE=2048B</code> is the same as <code dir="ltr">VOLSIZE=2048</code>).</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1021645"></a>
<div id="SUTIL1754" class="sect1">
<h2 class="sect1">Example Import Sessions<a id="sthref2289"></a></h2>
<p>This section gives some examples of import sessions that show you how to use the parameter file and command-line methods. The examples illustrate the following scenarios:</p>
<ul>
<li>
<p><a href="#i1019804">Example Import of Selected Tables for a Specific User</a></p>
</li>
<li>
<p><a href="#i1019838">Example Import of Tables Exported by Another User</a></p>
</li>
<li>
<p><a href="#i1019874">Example Import of Tables from One User to Another</a></p>
</li>
<li>
<p><a href="#i1019909">Example Import Session Using Partition-Level Import</a></p>
</li>
<li>
<p><a href="#i1020098">Example Import Using Pattern Matching to Import Various Tables</a></p>
</li>
</ul>
<a id="i1019804"></a>
<div id="SUTIL1755" class="sect2">
<h3 class="sect2">Example Import of Selected Tables for a Specific User<a id="sthref2290"></a></h3>
<p><a id="sthref2291"></a><a id="sthref2292"></a>In this example, using a full database export file, an administrator imports the <code dir="ltr">dept</code> and <code dir="ltr">emp</code> tables into the <code dir="ltr">scott</code> schema.</p>
<p class="subhead1"><a id="SUTIL3678"></a>Parameter File Method</p>
<pre dir="ltr">
&gt; imp PARFILE=params.dat
</pre>
<p>The <code dir="ltr">params</code>.<code dir="ltr">dat</code> file contains the following information:</p>
<pre dir="ltr">
FILE=dba.dmp
SHOW=n
IGNORE=n
GRANTS=y
FROMUSER=scott
TABLES=(dept,emp)
</pre>
<p class="subhead1"><a id="SUTIL3679"></a>Command-Line Method</p>
<pre dir="ltr">
&gt; imp FILE=dba.dmp FROMUSER=scott TABLES=(dept,emp)
</pre>
<p class="subhead1"><a id="SUTIL3680"></a>Import Messages</p>
<p>Information is displayed about the release of Import you are using and the release of Oracle Database that you are connected to. Status messages are also displayed.</p>
</div>
<!-- class="sect2" -->
<a id="i1019838"></a>
<div id="SUTIL1756" class="sect2">
<h3 class="sect2">Example Import of Tables Exported by Another User<a id="sthref2293"></a></h3>
<p>This example illustrates importing the <code dir="ltr">unit</code> and <code dir="ltr">manager</code> tables from a file exported by <code dir="ltr">blake</code> into the <code dir="ltr">scott</code> schema.</p>
<p class="subhead1"><a id="SUTIL3681"></a>Parameter File Method</p>
<pre dir="ltr">
&gt; imp PARFILE=params.dat
</pre>
<p>The <code dir="ltr">params</code>.<code dir="ltr">dat</code> file contains the following information:</p>
<pre dir="ltr">
FILE=blake.dmp
SHOW=n
IGNORE=n
GRANTS=y
ROWS=y
FROMUSER=blake
TOUSER=scott
TABLES=(unit,manager)
</pre>
<p class="subhead1"><a id="SUTIL3682"></a>Command-Line Method</p>
<pre dir="ltr">
&gt; imp FROMUSER=blake TOUSER=scott FILE=blake.dmp TABLES=(unit,manager)
</pre>
<p class="subhead1"><a id="SUTIL3683"></a>Import Messages</p>
<p>Information is displayed about the release of Import you are using and the release of Oracle Database that you are connected to. Status messages are also displayed.</p>
</div>
<!-- class="sect2" -->
<a id="i1019874"></a>
<div id="SUTIL1757" class="sect2">
<h3 class="sect2">Example Import of Tables from One User to Another<a id="sthref2294"></a></h3>
<p>In this example, a database administrator (DBA) imports all tables belonging to <code dir="ltr">scott</code> into user <code dir="ltr">blake'</code>s account.</p>
<p class="subhead1"><a id="SUTIL3684"></a>Parameter File Method</p>
<pre dir="ltr">
 &gt; imp PARFILE=params.dat
</pre>
<p>The <code dir="ltr">params</code>.<code dir="ltr">dat</code> file contains the following information:</p>
<pre dir="ltr">
FILE=scott.dmp
FROMUSER=scott
TOUSER=blake
TABLES=(*)
</pre>
<p class="subhead1"><a id="SUTIL3685"></a>Command-Line Method</p>
<pre dir="ltr">
&gt; imp FILE=scott.dmp FROMUSER=scott TOUSER=blake TABLES=(*)
</pre>
<p class="subhead1"><a id="SUTIL3686"></a>Import Messages</p>
<p>Information is displayed about the release of Import you are using and the release of Oracle Database that you are connected to. Then, status messages similar to the following are shown:</p>
<pre dir="ltr">
.
.
.
Warning: the objects were exported by SCOTT, not by you

import done in WE8DEC character set and AL16UTF16 NCHAR character set
. importing SCOTT's objects into BLAKE
. . importing table                        "BONUS"          0 rows imported
. . importing table                         "DEPT"          4 rows imported
. . importing table                          "EMP"         14 rows imported
. . importing table                     "SALGRADE"          5 rows imported
Import terminated successfully without warnings.
</pre></div>
<!-- class="sect2" -->
<a id="i1019909"></a>
<div id="SUTIL1758" class="sect2">
<h3 class="sect2">Example Import Session Using Partition-Level Import<a id="sthref2295"></a></h3>
<p>This section describes an import of a table with multiple partitions, a table with partitions and subpartitions, and repartitioning a table on different columns.</p>
<div id="SUTIL1759" class="sect3"><a id="sthref2296"></a>
<h4 class="sect3">Example 1: A Partition-Level Import</h4>
<p>In this example, <code dir="ltr">emp</code> is a partitioned table with three partitions: <code dir="ltr">P1</code>, <code dir="ltr">P2</code>, and <code dir="ltr">P3</code>.</p>
<p>A table-level export file was created using the following command:</p>
<pre dir="ltr">
&gt; exp scott TABLES=emp FILE=exmpexp.dat ROWS=y
</pre>
<p class="subhead1"><a id="SUTIL3687"></a>Export Messages</p>
<p>Information is displayed about the release of Export you are using and the release of Oracle Database that you are connected to. Then, status messages similar to the following are shown:</p>
<pre dir="ltr">
.
.
.
About to export specified tables via Conventional Path ...
. . exporting table                            EMP
. . exporting partition                             P1          7 rows exported
. . exporting partition                             P2         12 rows exported
. . exporting partition                             P3          3 rows exported
Export terminated successfully without warnings.
</pre>
<p>In a partition-level Import you can specify the specific partitions of an exported table that you want to import. In this example, these are <code dir="ltr">P1</code> and <code dir="ltr">P3</code> of table <code dir="ltr">emp:</code></p>
<pre dir="ltr">
&gt; imp scott TABLES=(emp:p1,emp:p3) FILE=exmpexp.dat ROWS=y 
</pre>
<p class="subhead1"><a id="SUTIL3688"></a>Import Messages</p>
<p>Information is displayed about the release of Import you are using and the release of Oracle Database that you are connected to. Status messages are also displayed.</p>
</div>
<!-- class="sect3" -->
<div id="SUTIL1760" class="sect3"><a id="sthref2297"></a>
<h4 class="sect3">Example 2: A Partition-Level Import of a Composite Partitioned Table</h4>
<p>This example demonstrates that the partitions and subpartitions of a composite partitioned table are imported. <code dir="ltr">emp</code> is a partitioned table with two composite partitions: <code dir="ltr">P1</code> and <code dir="ltr">P2</code>. Partition <code dir="ltr">P1</code> has three subpartitions: <code dir="ltr">P1_SP1</code>, <code dir="ltr">P1_SP2,</code> and <code dir="ltr">P1_SP3</code>. Partition <code dir="ltr">P2</code> has two subpartitions: <code dir="ltr">P2_SP1</code> and <code dir="ltr">P2_SP2</code>.</p>
<p>A table-level export file was created using the following command:</p>
<pre dir="ltr">
&gt; exp scott TABLES=emp FILE=exmpexp.dat ROWS=y 
</pre>
<p class="subhead1"><a id="SUTIL3689"></a>Export Messages</p>
<p>Information is displayed about the release of Export you are using and the release of Oracle Database that you are connected to. Then, status messages similar to the following are shown:</p>
<p>When the command executes, the following Export messages are displayed:</p>
<pre dir="ltr">
.
.
.
About to export specified tables via Conventional Path ...
. . exporting table                            EMP
. . exporting composite partition                   P1
. . exporting subpartition                      P1_SP1          2 rows exported
. . exporting subpartition                      P1_SP2         10 rows exported
. . exporting subpartition                      P1_SP3          7 rows exported
. . exporting composite partition                   P2
. . exporting subpartition                      P2_SP1          4 rows exported
. . exporting subpartition                      P2_SP2          2 rows exported
Export terminated successfully without warnings.
</pre>
<p>The following Import command results in the importing of subpartition <code dir="ltr">P1_SP2</code> and <code dir="ltr">P1_SP3</code> of composite partition <code dir="ltr">P1</code> in table <code dir="ltr">emp</code> and all subpartitions of composite partition <code dir="ltr">P2</code> in table <code dir="ltr">emp.</code></p>
<pre dir="ltr">
&gt; imp scott TABLES=(emp:p1_sp2,emp:p1_sp3,emp:p2) FILE=exmpexp.dat ROWS=y  
</pre>
<p class="subhead1"><a id="SUTIL3690"></a>Import Messages</p>
<p>Information is displayed about the release of Import you are using and the release of Oracle Database that you are connected to. Then, status messages similar to the following are shown:</p>
<pre dir="ltr">
.
.
.
. importing SCOTT's objects into SCOTT
. . importing subpartition              "EMP":"P1_SP2"         10 rows imported
. . importing subpartition              "EMP":"P1_SP3"          7 rows imported
. . importing subpartition              "EMP":"P2_SP1"          4 rows imported
. . importing subpartition              "EMP":"P2_SP2"          2 rows imported
Import terminated successfully without warnings.
</pre></div>
<!-- class="sect3" -->
<div id="SUTIL1761" class="sect3"><a id="sthref2298"></a>
<h4 class="sect3">Example 3: Repartitioning a Table on a Different Column</h4>
<p>This example assumes the <code dir="ltr">emp</code> table has two partitions based on the <code dir="ltr">empno</code> column. This example repartitions the <code dir="ltr">emp</code> table on the <code dir="ltr">deptno</code> column.</p>
<p>Perform the following steps to repartition a table on a different column:</p>
<ol>
<li>
<p>Export the table to save the data.</p>
</li>
<li>
<p>Drop the table from the database.</p>
</li>
<li>
<p>Create the table again with the new partitions.</p>
</li>
<li>
<p>Import the table data.</p>
</li>
</ol>
<p>The following example illustrates these steps.</p>
<pre dir="ltr">
&gt; exp scott table=emp file=empexp.dat 
.
.
.

About to export specified tables via Conventional Path ...
. . exporting table                            EMP
. . exporting partition                        EMP_LOW          4 rows exported
. . exporting partition                       EMP_HIGH         10 rows exported
Export terminated successfully without warnings.

SQL&gt; connect scott
Connected.
SQL&gt; drop table emp cascade constraints;
Statement processed.
SQL&gt; create table emp
  2    (
  3    empno    number(4) not null,
  4    ename    varchar2(10),
  5    job      varchar2(9),
  6    mgr      number(4),
  7    hiredate date,
  8    sal      number(7,2),
  9    comm     number(7,2),
 10    deptno   number(2)
 11    )
 12 partition by range (deptno)
 13   (
 14   partition dept_low values less than (15)
 15     tablespace tbs_1,
 16   partition dept_mid values less than (25)
 17     tablespace tbs_2,
 18   partition dept_high values less than (35)
 19     tablespace tbs_3
 20   );
Statement processed.
SQL&gt; exit

&gt; imp scott tables=emp file=empexp.dat ignore=y
.
.
.
import done in WE8DEC character set and AL16UTF16 NCHAR character set
. importing SCOTT's objects into SCOTT
. . importing partition                "EMP":"EMP_LOW"          4 rows imported
. . importing partition               "EMP":"EMP_HIGH"         10 rows imported
Import terminated successfully without warnings.
</pre>
<p>The following SQL <code dir="ltr">SELECT</code> statements show that the data is partitioned on the <code dir="ltr">deptno</code> column:</p>
<pre dir="ltr">
SQL&gt; connect scott
Connected.
SQL&gt; select empno, deptno from emp partition (dept_low);
EMPNO      DEPTNO    
---------- ----------
      7782         10
      7839         10
      7934         10
3 rows selected.
SQL&gt; select empno, deptno from emp partition (dept_mid);
EMPNO      DEPTNO    
---------- ----------
      7369         20
      7566         20
      7788         20
      7876         20
      7902         20
5 rows selected.
SQL&gt; select empno, deptno from emp partition (dept_high);
EMPNO      DEPTNO    
---------- ----------
      7499         30
      7521         30
      7654         30
      7698         30
      7844         30
      7900         30
6 rows selected.
SQL&gt; exit;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1020098"></a>
<div id="SUTIL1762" class="sect2">
<h3 class="sect2">Example Import Using Pattern Matching to Import Various Tables</h3>
<p>In this example, pattern matching is used to import various tables for user <code dir="ltr">scott</code>.</p>
<p class="subhead1"><a id="SUTIL3691"></a>Parameter File Method</p>
<pre dir="ltr">
imp PARFILE=params.dat
</pre>
<p>The <code dir="ltr">params</code>.<code dir="ltr">dat</code> file contains the following information:</p>
<pre dir="ltr">
FILE=scott.dmp
IGNORE=n
GRANTS=y
ROWS=y
FROMUSER=scott
TABLES=(%d%,b%s)
</pre>
<p class="subhead1"><a id="SUTIL3692"></a>Command-Line Method</p>
<pre dir="ltr">
imp FROMUSER=scott FILE=scott.dmp TABLES=(%d%,b%s)
</pre>
<p class="subhead1"><a id="SUTIL3693"></a>Import Messages</p>
<p>Information is displayed about the release of Import you are using and the release of Oracle Database that you are connected to. Then, status messages similar to the following are shown:</p>
<pre dir="ltr">
.
.
.
import done in US7ASCII character set and AL16UTF16 NCHAR character set
import server uses JA16SJIS character set (possible charset conversion)
. importing SCOTT's objects into SCOTT
. . importing table                  "BONUS"          0 rows imported
. . importing table                   "DEPT"          4 rows imported
. . importing table               "SALGRADE"          5 rows imported
Import terminated successfully without warnings.
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006682"></a>
<div id="SUTIL1769" class="sect1">
<h2 class="sect1">Exit Codes for Inspection and Display</h2>
<p>Import provides the results of an operation immediately upon completion. Depending on the platform, the outcome may be reported in a process exit code<a id="sthref2299"></a><a id="sthref2300"></a><a id="sthref2301"></a> and the results recorded in the log file. This enables you to check the outcome from the command line or script. <a href="#g1040972">Table 22-4</a> shows the exit codes that get returned for various results.</p>
<div id="SUTIL3694" class="tblformal">
<p class="titleintable"><a id="sthref2302"></a><a id="g1040972"></a>Table 22-4 Exit Codes for Import</p>
<table class="cellalignment1394" title="Exit Codes for Import" summary="Exit codes for export and import" dir="ltr">
<thead>
<tr class="cellalignment1388">
<th class="cellalignment1395" id="r1c1-t30">Result</th>
<th class="cellalignment1395" id="r1c2-t30">Exit Code</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r2c1-t30" headers="r1c1-t30">
<p>Import terminated successfully without warnings</p>
</td>
<td class="cellalignment1396" headers="r2c1-t30 r1c2-t30">
<p><code dir="ltr">EX_SUCC</code></p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r3c1-t30" headers="r1c1-t30">
<p>Import terminated successfully with warnings</p>
</td>
<td class="cellalignment1396" headers="r3c1-t30 r1c2-t30">
<p><code dir="ltr">EX_OKWARN</code></p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r4c1-t30" headers="r1c1-t30">
<p>Import terminated unsuccessfully</p>
</td>
<td class="cellalignment1396" headers="r4c1-t30 r1c2-t30">
<p><code dir="ltr">EX_FAIL</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>For UNIX, the exit codes are as follows:</p>
<pre dir="ltr">
EX_SUCC   0
EX_OKWARN 0
EX_FAIL   1
</pre></div>
<!-- class="sect1" -->
<a id="BABEACHB"></a>
<div id="SUTIL3695" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Error Handling During an Import</h2>
<p>This section describes errors that can occur when you import database objects.</p>
<div id="SUTIL3696" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2303"></a>
<h3 class="sect2">Row Errors</h3>
<p>If a row is rejected due to an integrity constraint violation or invalid data, then Import displays a warning message but continues processing the rest of the table. Some errors, such as "tablespace full," apply to all subsequent rows in the table. These errors cause Import to stop processing the current table and skip to the next table.</p>
<p>A "tablespace full" error can suspend the import if the <code dir="ltr">RESUMABLE=y</code> parameter is specified.</p>
<div id="SUTIL3697" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2304"></a>
<h4 class="sect3">Failed Integrity Constraints</h4>
<p>A row error is generated if a row violates one of the integrity constraints in force on your system, including:<a id="sthref2305"></a><a id="sthref2306"></a><a id="sthref2307"></a></p>
<ul>
<li>
<p><code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraints</p>
</li>
<li>
<p>Uniqueness constraints</p>
</li>
<li>
<p>Primary key (not null and unique) constraints</p>
</li>
<li>
<p>Referential integrity constraints</p>
</li>
<li>
<p>Check constraints</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADFNS" href="../../appdev.112/e41502/toc.htm"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a></p>
</li>
<li>
<p><a class="olink CNCPT" href="../e40540/toc.htm"><span class="italic">Oracle Database Concepts</span></a></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="SUTIL3698" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2308"></a>
<h4 class="sect3">Invalid Data</h4>
<p><a id="sthref2309"></a>Row errors can also occur when the column definition for a table in a database is different from the column definition in the export file. The error is caused by data that is too long to fit into a new table's columns, by invalid datatypes, or by any other <code dir="ltr">INSERT</code> error.<a id="sthref2310"></a><a id="sthref2311"></a><a id="sthref2312"></a><a id="sthref2313"></a></p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="SUTIL3699" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2314"></a>
<h3 class="sect2">Errors Importing Database Objects</h3>
<p><a id="sthref2315"></a>Errors can occur for many reasons when you import database objects, as described in this section. When these errors occur, import of the current database object is discontinued. Import then attempts to continue with the next database object in the export file.</p>
<div id="SUTIL3700" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2316"></a>
<h4 class="sect3">Object Already Exists</h4>
<p>If a database object to be imported already exists in the database, then an object creation error occurs. What happens next depends on the setting of the <code dir="ltr">IGNORE</code> parameter. <a id="sthref2317"></a><a id="sthref2318"></a></p>
<p>If <code dir="ltr">IGNORE=n</code> (the default), then the error is reported, and Import continues with the next database object. The current database object is not replaced. For tables, this behavior means that rows contained in the export file are not imported.</p>
<p>If <code dir="ltr">IGNORE=y</code>, then object creation errors are not reported. The database object is not replaced. If the object is a table, then rows are imported into it. Note that only <span class="italic">object creation errors</span> are ignored; all other errors (such as operating system, database, and SQL errors) <span class="italic">are</span> reported and processing may stop.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
Specifying <code dir="ltr">IGNORE=y</code> can cause duplicate rows to be entered into a table unless one or more columns of the table are specified with the <code dir="ltr">UNIQUE</code> integrity constraint. This could occur, for example, if Import were run twice.</div>
</div>
<!-- class="sect3" -->
<div id="SUTIL3701" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2319"></a>
<h4 class="sect3">Sequences</h4>
<p><a id="sthref2320"></a>If sequence numbers need to be reset to the value in an export file as part of an import, then you should drop sequences. If a sequence is not dropped before the import, then it is not set to the value captured in the export file, because Import does not drop and re-create a sequence that already exists. If the sequence already exists, then the export file's <code dir="ltr">CREATE SEQUENCE</code> statement fails and the sequence is not imported.</p>
</div>
<!-- class="sect3" -->
<div id="SUTIL3702" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2321"></a>
<h4 class="sect3">Resource Errors</h4>
<p><a id="sthref2322"></a>Resource limitations can cause objects to be skipped. When you are importing tables, for example, resource errors can occur because of internal problems or when a resource such as memory has been exhausted.<a id="sthref2323"></a><a id="sthref2324"></a></p>
<p>If a resource error occurs while you are importing a row, then Import stops processing the current table and skips to the next table. If you have specified <code dir="ltr">COMMIT=y</code>, then Import commits the partial import of the current table. If not, then a rollback of the current table occurs before Import continues. See the description of <a href="#i1019119">"COMMIT"</a>.</p>
</div>
<!-- class="sect3" -->
<div id="SUTIL3703" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2325"></a>
<h4 class="sect3">Domain Index Metadata</h4>
<p>Domain indexes can have associated application-specific metadata that is imported using anonymous PL/SQL blocks. These PL/SQL blocks are executed at import time, before the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> statement. If a PL/SQL block causes an error, then the associated index is not created because the metadata is considered an integral part of the index.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABGFECC"></a>
<div id="SUTIL3704" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Table-Level and Partition-Level Import</h2>
<p><a id="sthref2326"></a><a id="sthref2327"></a><a id="sthref2328"></a><a id="sthref2329"></a>You can import tables, partitions, and subpartitions in the following ways:</p>
<ul>
<li>
<p>Table-level Import: Imports all data from the specified tables in an export file.</p>
</li>
<li>
<p>Partition-level Import: Imports only data from the specified source partitions or subpartitions.</p>
</li>
</ul>
<div id="SUTIL3705" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2330"></a>
<h3 class="sect2">Guidelines for Using Table-Level Import</h3>
<p><a id="sthref2331"></a>For each specified table, table-level Import imports all rows of the table. With table-level Import:</p>
<ul>
<li>
<p>All tables exported using any Export mode (except <code dir="ltr">TRANSPORT_TABLESPACES</code>) can be imported.</p>
</li>
<li>
<p>Users can import the entire (partitioned or nonpartitioned) table, partitions, or subpartitions from a table-level export file into a (partitioned or nonpartitioned) target table with the same name.</p>
</li>
</ul>
<p>If the table does not exist, and if the exported table was partitioned, then table-level Import creates a partitioned table. If the table creation is successful, then table-level Import reads all source data from the export file into the target table. After Import, the target table contains the partition definitions of <span class="italic">all</span> partitions and subpartitions associated with the source table in the export file. This operation ensures that the physical and logical attributes (including partition bounds) of the source partitions are maintained on import.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL3706" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2332"></a>
<h3 class="sect2">Guidelines for Using Partition-Level Import</h3>
<p>Partition-level Import can only be specified in table mode. It lets you selectively load data from specified partitions or subpartitions in an export file. Keep the following guidelines in mind when using partition-level Import.</p>
<ul>
<li>
<p>Import always stores the rows according to the partitioning scheme of the target table.</p>
</li>
<li>
<p>Partition-level Import inserts only the row data from the specified source partitions or subpartitions.</p>
</li>
<li>
<p>If the target table is partitioned, then partition-level Import rejects any rows that fall above the highest partition of the target table.</p>
</li>
<li>
<p>Partition-level Import cannot import a nonpartitioned exported table. However, a partitioned table can be imported from a nonpartitioned exported table using table-level Import.</p>
</li>
<li>
<p>Partition-level Import is legal only if the source table (that is, the table called tablename at export time) was partitioned and exists in the export file.</p>
</li>
<li>
<p>If the partition or subpartition name is not a valid partition in the export file, then Import generates a warning.</p>
</li>
<li>
<p>The partition or subpartition name in the parameter refers to only the partition or subpartition in the export file, which may not contain all of the data of the table on the export source system.</p>
</li>
<li>
<p>If <code dir="ltr">ROWS=y</code> (default), and the table does not exist in the import target system, then the table is created and all rows from the source partition or subpartition are inserted into the partition or subpartition of the target table.</p>
</li>
<li>
<p>If <code dir="ltr">ROWS=y</code> (default) and <code dir="ltr">IGNORE=y</code>, but the table already existed before import, then all rows for the specified partition or subpartition in the table are inserted into the table. The rows are stored according to the existing partitioning scheme of the target table.</p>
</li>
<li>
<p>If <code dir="ltr">ROWS=n</code>, then Import does not insert data into the target table and continues to process other objects associated with the specified table and partition or subpartition in the file.</p>
</li>
<li>
<p>If the target table is nonpartitioned, then the partitions and subpartitions are imported into the entire table. Import requires <code dir="ltr">IGNORE=y</code> to import one or more partitions or subpartitions from the export file into a nonpartitioned table on the import target system.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="SUTIL3707" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2333"></a>
<h3 class="sect2">Migrating Data Across Partitions and Tables</h3>
<p>If you specify a partition name for a composite partition, then all subpartitions within the composite partition are used as the source.</p>
<p>In the following example, the partition specified by the partition name is a composite partition. All of its subpartitions will be imported:</p>
<pre dir="ltr">
imp SYSTEM FILE=expdat.dmp FROMUSER=scott TABLES=b:py
</pre>
<p>The following example causes row data of partitions <code dir="ltr">qc</code> and <code dir="ltr">qd</code> of table <code dir="ltr">scott.e</code> to be imported into the table <code dir="ltr">scott.e</code>:</p>
<pre dir="ltr">
imp scott FILE=expdat.dmp TABLES=(e:qc, e:qd) IGNORE=y
</pre>
<p>If table <code dir="ltr">e</code> does not exist in the import target database, then it is created and data is inserted into the same partitions. If table <code dir="ltr">e</code> existed on the target system before import, then the row data is inserted into the partitions whose range allows insertion. The row data can end up in partitions of names other than <code dir="ltr">qc</code> and <code dir="ltr">qd</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
With partition-level Import to an existing table, you <span class="italic">must</span> set up the target partitions or subpartitions properly and use <code dir="ltr">IGNORE=y.</code></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABEBGFF"></a>
<div id="SUTIL3708" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Controlling Index Creation and Maintenance</h2>
<p>This section describes the behavior of Import with respect to index creation and maintenance.</p>
<div id="SUTIL3709" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2334"></a>
<h3 class="sect2">Delaying Index Creation</h3>
<p>Import provides you with the capability of delaying index creation and maintenance services until after completion of the import and insertion of exported data. Performing index creation, re-creation, or maintenance after Import completes is generally faster than updating the indexes for each row inserted by Import.</p>
<p>Index creation can be time consuming, and therefore can be done more efficiently after the import of all other objects has completed. You can postpone creation of indexes until after the import completes by specifying <code dir="ltr">INDEXES=n</code>. (<code dir="ltr">INDEXES=y</code> is the default.) You can then store the missing index definitions in a SQL script by running Import while using the <code dir="ltr">INDEXFILE</code> parameter. The index-creation statements that would otherwise be issued by Import are instead stored in the specified file.</p>
<p>After the import is complete, you must create the indexes, typically by using the contents of the file (specified with <code dir="ltr">INDEXFILE</code>) as a SQL script after specifying passwords for the connect statements.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL3710" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2335"></a>
<h3 class="sect2">Index Creation and Maintenance Controls</h3>
<p>If <code dir="ltr">SKIP_UNUSABLE_INDEXES=y</code>, then the Import utility postpones maintenance on all indexes that were set to Index Unusable before the Import. Other indexes (not previously set to Index Unusable) continue to be updated as rows are inserted. This approach saves on index updates during the import of existing tables.</p>
<p>Delayed index maintenance may cause a violation of an existing unique integrity constraint supported by the index. The existence of a unique integrity constraint on a table does not prevent existence of duplicate keys in a table that was imported with <code dir="ltr">INDEXES=n.</code> The supporting index will be in an <code dir="ltr">UNUSABLE</code> state until the duplicates are removed and the index is rebuilt.</p>
<div id="SUTIL3711" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2336"></a>
<h4 class="sect3">Example of Postponing Index Maintenance</h4>
<p>For example, assume that partitioned table <code dir="ltr">t</code> with partitions <code dir="ltr">p1</code> and <code dir="ltr">p2</code> exists on the import target system. Assume that local indexes <code dir="ltr">p1_ind</code> on partition <code dir="ltr">p1</code> and <code dir="ltr">p2_ind</code> on partition <code dir="ltr">p2</code> exist also. Assume that partition <code dir="ltr">p1</code> contains a much larger amount of data in the existing table <code dir="ltr">t</code>, compared with the amount of data to be inserted by the export file (<code dir="ltr">expdat</code>.<code dir="ltr">dmp</code>). Assume that the reverse is true for <code dir="ltr">p2</code>.</p>
<p>Consequently, performing index updates for <code dir="ltr">p1_ind</code> during table data insertion time is more efficient than at partition index rebuild time. The opposite is true for <code dir="ltr">p2_ind</code>.</p>
<p>Users can postpone local index maintenance for <code dir="ltr">p2_ind</code> during import by using the following steps:</p>
<ol>
<li>
<p>Issue the following SQL statement before import:</p>
<pre dir="ltr">
ALTER TABLE t MODIFY PARTITION p2 UNUSABLE LOCAL INDEXES;
</pre></li>
<li>
<p>Issue the following Import command:</p>
<pre dir="ltr">
imp scott FILE=expdat.dmp TABLES = (t:p1, t:p2) IGNORE=y
SKIP_UNUSABLE_INDEXES=y
</pre>
<p>This example executes the <code dir="ltr">ALTER</code> <code dir="ltr">SESSION</code> <code dir="ltr">SET</code> <code dir="ltr">SKIP_UNUSABLE_INDEXES=y</code> statement before performing the import.</p>
</li>
<li>
<p>Issue the following SQL statement after import:</p>
<pre dir="ltr">
ALTER TABLE t MODIFY PARTITION p2 REBUILD UNUSABLE LOCAL INDEXES;
</pre></li>
</ol>
<p>In this example, local index <code dir="ltr">p1_ind</code> on <code dir="ltr">p1</code> will be updated when table data is inserted into partition <code dir="ltr">p1</code> during import. Local index <code dir="ltr">p2_ind</code> on <code dir="ltr">p2</code> will be updated at index rebuild time, after import.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1021668"></a>
<div id="SUTIL1770" class="sect1">
<h2 class="sect1">Network Considerations</h2>
<p><a id="sthref2337"></a><a id="sthref2338"></a><a id="sthref2339"></a><a id="sthref2340"></a>With Oracle Net, you can perform imports over a network. For example, if you run Import locally, then you can read data into a remote Oracle database.</p>
<p>To use Import with Oracle Net, include the connection qualifier string <code dir="ltr">@</code><code dir="ltr"><span class="codeinlineitalic">connect_string</span></code> when entering the username and password in the <code dir="ltr">imp</code> command. For the exact syntax of this clause, see the user's guide for your Oracle Net protocol.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink NETAG" href="../../network.112/e41945/toc.htm"><span class="italic">Oracle Database Net Services Administrator's Guide</span></a></p>
</li>
<li>
<p><a class="olink HETER" href="../../server.112/e11050/toc.htm"><span class="italic">Oracle Database Heterogeneous Connectivity User's Guide</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1021901"></a>
<div id="SUTIL1773" class="sect1">
<h2 class="sect1">Character Set and Globalization Support Considerations</h2>
<p>The following sections describe the globalization support behavior of Import with respect to character set conversion of user data and data definition language (DDL).</p>
<div id="SUTIL1774" class="sect2"><a id="sthref2341"></a>
<h3 class="sect2">User Data<a id="sthref2342"></a><a id="sthref2343"></a></h3>
<p>The Export utility always exports user data, including Unicode data, in the character sets of the Export server.<a id="sthref2344"></a> (Character sets are specified at database creation.) If the character sets of the source database are different than the character sets of the import database, then a single conversion is performed to automatically convert the data to the character sets of the Import server.<a id="sthref2345"></a></p>
<div id="SUTIL1775" class="sect3"><a id="sthref2346"></a>
<h4 class="sect3">Effect of Character Set Sorting Order on Conversions</h4>
<p>If the export character set has a different sorting order than the import character set, then tables that are partitioned on character columns may yield unpredictable results.<a id="sthref2347"></a> For example, consider the following table definition, which is produced on a database having an ASCII character set:</p>
<pre dir="ltr">
CREATE TABLE partlist 
   ( 
   part     VARCHAR2(10), 
   partno   NUMBER(2) 
   ) 
PARTITION BY RANGE (part) 
  ( 
  PARTITION part_low VALUES LESS THAN ('Z') 
    TABLESPACE tbs_1, 
  PARTITION part_mid VALUES LESS THAN ('z') 
    TABLESPACE tbs_2, 
  PARTITION part_high VALUES LESS THAN (MAXVALUE) 
    TABLESPACE tbs_3 
  );
</pre>
<p>This partitioning scheme makes sense because <code dir="ltr">z</code> comes after <code dir="ltr">Z</code> in ASCII character sets.</p>
<p>When this table is imported into a database based upon an EBCDIC character set, all of the rows in the <code dir="ltr">part_mid</code> partition will migrate to the <code dir="ltr">part_low</code> partition because <code dir="ltr">z</code> comes before <code dir="ltr">Z</code> in EBCDIC character sets. To obtain the desired results, the owner of <code dir="ltr">partlist</code> must repartition the table following the import.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NLSPG" href="../e10729/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="SUTIL1776" class="sect2"><a id="sthref2348"></a>
<h3 class="sect2">Data Definition Language (DDL)</h3>
<p>Up to three character set conversions may be required for data definition language (DDL) during an export/import operation:</p>
<ol>
<li>
<p>Export writes export files using the character set specified in the <a id="sthref2349"></a><code dir="ltr">NLS_LANG</code> environment variable for the user session. A character set conversion is performed if the value of <code dir="ltr">NLS_LANG</code> differs from the database character set.</p>
</li>
<li>
<p>If the export file's character set is different than the import user session character set, then Import converts the character set to its user session character set. Import can only perform this conversion for single-byte character sets. This means that for multibyte character sets, the import file's character set must be identical to the export file's character set.</p>
</li>
<li>
<p>A final character set conversion may be performed if the target database's character set is different from the character set used by the import user session.</p>
</li>
</ol>
<p>To minimize data loss due to character set conversions, ensure that the export database, the export user session, the import user session, and the import database all use the same character set.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL1777" class="sect2"><a id="sthref2350"></a>
<h3 class="sect2"><a id="sthref2351"></a><a id="sthref2352"></a>Single-Byte Character Sets</h3>
<p><a id="sthref2353"></a><a id="sthref2354"></a>Some <a id="sthref2355"></a>8-bit <a id="sthref2356"></a>characters <a id="sthref2357"></a>can be lost (that is, converted to 7-bit equivalents) when you import an 8-bit character set export file. This occurs if the system on which the import occurs has a native 7-bit character set, or the <code dir="ltr">NLS_LANG</code> operating system environment variable is set to a 7-bit character set. Most often, this is apparent when accented characters lose the accent mark.<a id="sthref2358"></a><a id="sthref2359"></a></p>
<p>To avoid this unwanted conversion, you can set the <code dir="ltr">NLS_LANG</code> operating system environment variable to be that of the export file character set.</p>
</div>
<!-- class="sect2" -->
<a id="i1021998"></a>
<div id="SUTIL1778" class="sect2">
<h3 class="sect2">Multibyte Character Sets</h3>
<p>During character set conversion, any characters in the export file that have no equivalent in the target character set are replaced with a default character. (The default character is defined by the target character set.) To guarantee 100% conversion, the target character set must be a superset (or equivalent) of the source character set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NLSPG" href="../e10729/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a></div>
<div class="infobox-note">
<p class="notep1">Caution:</p>
When the character set width differs between the Export server and the Import server, truncation of data can occur if conversion causes expansion of data. If truncation occurs, then Import displays a warning message.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1024070"></a>
<div id="SUTIL1789" class="sect1">
<h2 class="sect1">Using Instance Affinity</h2>
<p>You can use instance affinity to associate jobs with instances in databases you plan to export and import. Be aware that there may be some compatibility issues if you are using a combination of releases.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADMIN" href="../e25494/toc.htm"><span class="italic">Oracle Database Administrator's Guide</span></a></p>
</li>
<li>
<p><a class="olink REFRN" href="../e40402/toc.htm"><span class="italic">Oracle Database Reference</span></a></p>
</li>
<li>
<p><a class="olink UPGRD" href="../e23633/toc.htm"><span class="italic">Oracle Database Upgrade Guide</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="BABHBFBB"></a>
<div id="SUTIL3712" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Considerations When Importing Database Objects</h2>
<p>The following sections describe restrictions and points you should consider when you import particular database objects.</p>
<div id="SUTIL1838" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2360"></a>
<h3 class="sect2">Importing Object Identifiers<a id="sthref2361"></a></h3>
<p>The Oracle database assigns object identifiers to uniquely identify object types, object tables, and rows in object tables. These object identifiers are preserved by Import.</p>
<p>When you import a table that references a type, but a type of that name already exists in the database, Import attempts to verify that the preexisting type is, in fact, the type used by the table (rather than a different type that just happens to have the same name).</p>
<p>To do this, Import compares the types's unique identifier (TOID) with the identifier stored in the export file. If those match, then Import then compares the type's unique hashcode with that stored in the export file. Import will not import table rows if the TOIDs or hashcodes do not match.</p>
<p>In some situations, you may not want this validation to occur on specified types (for example, if the types were created by a cartridge installation). You can use the parameter <code dir="ltr">TOID_NOVALIDATE</code> to specify types to exclude from the TOID and hashcode comparison. See <a href="#i1019597">"TOID_NOVALIDATE"</a> for more information.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
Be very careful about using <code dir="ltr">TOID_NOVALIDATE,</code> because type validation provides an important capability that helps avoid data corruption. Be sure you are confident of your knowledge of type validation and how it works before attempting to perform an import operation with this feature disabled.</div>
<p>Import uses the following criteria to decide how to handle object types, object tables, and rows in object tables:</p>
<ul>
<li>
<p>For object types, if <code dir="ltr">IGNORE</code>=<code dir="ltr">y</code>, the object type already exists, and the object identifiers, hashcodes, and type descriptors match, then no error is reported. If the object identifiers or hashcodes do not match and the parameter <code dir="ltr">TOID_NOVALIDATE</code> has not been set to ignore the object type, then an error is reported and any tables using the object type are not imported.</p>
</li>
<li>
<p>For object types, if <code dir="ltr">IGNORE</code>=<code dir="ltr">n</code> and the object type already exists, then an error is reported. If the object identifiers, hashcodes, or type descriptors do not match and the parameter <code dir="ltr">TOID_NOVALIDATE</code> has not been set to ignore the object type, then any tables using the object type are not imported.</p>
</li>
<li>
<p>For object tables, if <code dir="ltr">IGNORE</code>=<code dir="ltr">y</code>, then the table already exists, and the object identifiers, hashcodes, and type descriptors match, no error is reported. Rows are imported into the object table. Import of rows may fail if rows with the same object identifier already exist in the object table. If the object identifiers, hashcodes, or type descriptors do not match, and the parameter <code dir="ltr">TOID_NOVALIDATE</code> has not been set to ignore the object type, then an error is reported and the table is not imported.</p>
</li>
<li>
<p>For object tables, if <code dir="ltr">IGNORE</code>=<code dir="ltr">n</code> and the table already exists, then an error is reported and the table is not imported.</p>
</li>
</ul>
<p>Because Import preserves object identifiers of object types and object tables, consider the following when you import objects from one schema into another schema using the <code dir="ltr">FROMUSER</code> and <code dir="ltr">TOUSER</code> parameters:</p>
<ul>
<li>
<p>If the <code dir="ltr">FROMUSER</code> object types and object tables already exist on the target system, then errors occur because the object identifiers of the <code dir="ltr">TOUSER</code> object types and object tables are already in use. The <code dir="ltr">FROMUSER</code> object types and object tables must be dropped from the system before the import is started.</p>
</li>
<li>
<p>If an object table was created using the <code dir="ltr">OID</code> <code dir="ltr">AS</code> option to assign it the same object identifier as another table, then both tables cannot be imported. You can import one of the tables, but the second table receives an error because the object identifier is already in use.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="SUTIL1839" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2362"></a>
<h3 class="sect2">Importing Existing Object Tables and Tables That Contain Object Types</h3>
<p>Users frequently create tables before importing data to reorganize tablespace usage or to change a table's storage parameters. The tables must be created with the same definitions as were previously used or a compatible format (except for storage parameters). For object tables and tables that contain columns of object types, format compatibilities are more restrictive.</p>
<p>For object tables and for tables containing columns of objects, each object the table references has its name, structure, and version information written out to the export file. Export also includes object type information from different schemas, as needed.</p>
<p>Import verifies the existence of each object type required by a table before importing the table data. This verification consists of a check of the object type's name followed by a comparison of the object type's structure and version from the import system with that found in the export file.</p>
<p>If an object type name is found on the import system, but the structure or version do not match that from the export file, then an error message is generated and the table data is not imported.</p>
<p>The Import parameter <code dir="ltr">TOID_NOVALIDATE</code> can be used to disable the verification of the object type's structure and version for specific objects.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL1840" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2363"></a>
<h3 class="sect2">Importing Nested Tables</h3>
<p><a id="sthref2364"></a>Inner <a id="sthref2365"></a>nested tables are exported separately from the outer table. Therefore, situations may arise where data in an inner nested table might not be properly imported:</p>
<ul>
<li>
<p>Suppose a table with an inner nested table is exported and then imported without dropping the table or removing rows from the table. If the <code dir="ltr">IGNORE=y</code> parameter is used, then there will be a constraint violation when inserting each row in the outer table. However, data in the inner nested table may be successfully imported, resulting in duplicate rows in the inner table.</p>
</li>
<li>
<p>If nonrecoverable errors occur inserting data in outer tables, then the rest of the data in the outer table is skipped, but the corresponding inner table rows are not skipped. This may result in inner table rows not being referenced by any row in the outer table.</p>
</li>
<li>
<p>If an insert to an inner table fails after a recoverable error, then its outer table row will already have been inserted in the outer table and data will continue to be inserted into it and any other inner tables of the containing table. This circumstance results in a partial logical row.</p>
</li>
<li>
<p>If nonrecoverable errors occur inserting data in an inner table, then Import skips the rest of that inner table's data but does not skip the outer table or other nested tables.</p>
</li>
</ul>
<p>You should always carefully examine the log file for errors in outer tables and inner tables. To be consistent, table data may need to be modified or deleted.</p>
<p>Because inner nested tables are imported separately from the outer table, attempts to access data from them while importing may produce unexpected results. For example, if an outer row is accessed before its inner rows are imported, an incomplete row may be returned to the user.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL1841" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2366"></a>
<h3 class="sect2">Importing REF Data</h3>
<p><a id="sthref2367"></a><code dir="ltr">REF</code> columns and attributes may contain a hidden <code dir="ltr">ROWID</code> that points to the referenced type instance. Import does not automatically recompute these <code dir="ltr">ROWID</code>s for the target database. You should execute the following statement to reset the<br />
<code dir="ltr">ROWID</code>s to their proper values:</p>
<pre dir="ltr">
ANALYZE TABLE <span class="italic">[schema.]table</span> VALIDATE REF UPDATE;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF" href="../e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code dir="ltr">ANALYZE TABLE</code> statement</div>
</div>
<!-- class="sect2" -->
<div id="SUTIL1842" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2368"></a>
<h3 class="sect2">Importing BFILE<a id="sthref2369"></a> Columns and Directory Aliases</h3>
<p><a id="sthref2370"></a><a id="sthref2371"></a>Export and Import do not copy data referenced by <code dir="ltr">BFILE</code> columns and attributes <a id="sthref2372"></a>from the source database to the target database. Export and Import only propagate the names of the files and the directory aliases referenced by the <code dir="ltr">BFILE</code> columns. It is the responsibility of the DBA or user to move the actual files referenced through <code dir="ltr">BFILE</code> columns and attributes.</p>
<p>When you import table data that contains <code dir="ltr">BFILE</code> columns, the <code dir="ltr">BFILE</code> locator is imported with the directory alias and file name that was present at export time. Import does not verify that the directory alias or file exists. If the directory alias or file does not exist, then an error occurs when the user accesses the <code dir="ltr">BFILE</code> data.</p>
<p>For directory aliases, if the operating system directory syntax used in the export system is not valid on the import system, then no error is reported at import time. The error occurs when the user seeks subsequent access to the file data. It is the responsibility of the DBA or user to ensure the directory alias is valid on the import system.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL1843" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2373"></a>
<h3 class="sect2">Importing Foreign Function Libraries</h3>
<p><a id="sthref2374"></a>Import does not verify that the location referenced by the foreign function library is <a id="sthref2375"></a>correct. If the formats for directory and file names used in the library's specification on the export file are invalid on the import system, then no error is reported at import time. Subsequent usage of the callout functions will receive an error.</p>
<p>It is the responsibility of the DBA or user to manually move the library and ensure the library's specification is valid on the import system.</p>
</div>
<!-- class="sect2" -->
<a id="BABFFJGG"></a>
<div id="SUTIL1844" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Importing Stored Procedures, Functions, and Packages <a id="sthref2376"></a><a id="sthref2377"></a><a id="sthref2378"></a><a id="sthref2379"></a><a id="sthref2380"></a><a id="sthref2381"></a><a id="sthref2382"></a><a id="sthref2383"></a></h3>
<p>The behavior of Import when a local stored procedure, function, or package is imported depends upon whether the <code dir="ltr">COMPILE</code> parameter is set to <code dir="ltr">y</code> or to <code dir="ltr">n</code>.</p>
<p>When a local stored procedure, function, or package is imported and <code dir="ltr">COMPILE=y</code>, the procedure, function, or package is recompiled upon import and retains its original timestamp specification. If the compilation is successful, then it can be accessed by remote procedures without error.</p>
<p>If <code dir="ltr">COMPILE=n</code>, then the procedure, function, or package is still imported, but the original timestamp is lost. The compilation takes place the next time the procedure, function, or package is used.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1019137">"COMPILE"</a></div>
</div>
<!-- class="sect2" -->
<div id="SUTIL1845" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2384"></a>
<h3 class="sect2">Importing Java Objects</h3>
<p>When you import Java objects into any schema, the Import utility leaves the resolver unchanged. (The resolver is the list of schemas used to resolve Java full names.) This means that after an import, all user classes are left in an invalid state until they are either implicitly or explicitly revalidated. An implicit revalidation occurs the first time the classes are referenced. An explicit revalidation occurs when the SQL statement <code dir="ltr">ALTER JAVA CLASS...RESOLVE</code> is used. Both methods result in the user classes being resolved successfully and becoming valid.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL1846" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2385"></a>
<h3 class="sect2">Importing External Tables</h3>
<p><a id="sthref2386"></a>Import does not verify that the location referenced by the external table is <a id="sthref2387"></a>correct. If the formats for directory and file names used in the table's specification on the export file are invalid on the import system, then no error is reported at import time. Subsequent usage of the callout functions will result in an error.</p>
<p>It is the responsibility of the DBA or user to manually move the table and ensure the table's specification is valid on the import system.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL1847" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2388"></a>
<h3 class="sect2">Importing Advanced Queue (AQ) Tables<a id="sthref2389"></a></h3>
<p>Importing a queue table also imports any underlying queues and the related <a id="sthref2390"></a>dictionary information. A queue can be imported only at the granularity level of the queue table. When a queue table is imported, export pre-table and post-table action procedures maintain the queue dictionary.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADQUE" href="../e11013/toc.htm"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a></div>
</div>
<!-- class="sect2" -->
<a id="BABBHBEE"></a>
<div id="SUTIL1848" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Importing LONG Columns<a id="sthref2391"></a><a id="sthref2392"></a></h3>
<p><code dir="ltr">LONG</code> columns can be up to 2 gigabytes in length. <a id="sthref2393"></a>In importing and exporting, the <code dir="ltr">LONG</code> columns must fit into memory with the rest of each row's data. The memory used to store <code dir="ltr">LONG</code> columns, however, does not need to be contiguous, because <code dir="ltr">LONG</code> data is loaded in sections.</p>
<p>Import can be used to convert <code dir="ltr">LONG</code> columns to <code dir="ltr">CLOB</code> columns. To do this, first create a table specifying the new <code dir="ltr">CLOB</code> column. When Import is run, the <code dir="ltr">LONG</code> data is converted to <code dir="ltr">CLOB</code> format. The same technique can be used to convert <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> columns to <code dir="ltr">BLOB</code> columns.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle recommends that you convert existing <code dir="ltr">LONG</code> columns to LOB columns. LOB columns are subject to far fewer restrictions than <code dir="ltr">LONG</code> columns. Further, LOB functionality is enhanced in every release, whereas <code dir="ltr">LONG</code> functionality has been static for several releases.</div>
</div>
<!-- class="sect2" -->
<div id="SUTIL1849" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2394"></a>
<h3 class="sect2">Importing LOB Columns When Triggers Are Present</h3>
<p>As of Oracle Database 10<span class="italic">g</span>, LOB handling has been improved to ensure that triggers work properly and that performance remains high when LOBs are being loaded. To achieve these improvements, the Import utility automatically changes all LOBs that were empty at export time to be NULL after they are imported.</p>
<p>If you have applications that expect the LOBs to be empty rather than NULL, then after the import you can issue a SQL <code dir="ltr">UPDATE</code> statement for each LOB column. Depending on whether the LOB column type was a <code dir="ltr">BLOB</code> or a <code dir="ltr">CLOB</code>, the syntax would be one of the following:</p>
<pre dir="ltr">
UPDATE &lt;tablename&gt; SET &lt;lob column&gt; = EMPTY_BLOB() WHERE &lt;lob column&gt; = IS NULL;  
UPDATE &lt;tablename&gt; SET &lt;lob column&gt; = EMPTY_CLOB() WHERE &lt;lob column&gt; = IS NULL; 
</pre>
<p>It is important to note that once the import is performed, there is no way to distinguish between LOB columns that are NULL versus those that are empty. Therefore, if that information is important to the integrity of your data, then be sure you know which LOB columns are NULL and which are empty before you perform the import.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL1850" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2395"></a>
<h3 class="sect2">Importing Views</h3>
<p>Views are exported in dependency order. In some cases, Export must determine the ordering, rather than obtaining the order from the database. In doing so, Export may not always be able to duplicate the correct ordering, resulting in compilation warnings when a view is imported, and the failure to import column comments on such views.</p>
<p>In particular, if <code dir="ltr">viewa</code> uses the stored procedure <code dir="ltr">procb</code>, and <code dir="ltr">procb</code> uses the view <code dir="ltr">viewc</code>, then Export cannot determine the proper ordering of <code dir="ltr">viewa</code> and <code dir="ltr">viewc</code>. If <code dir="ltr">viewa</code> is exported before <code dir="ltr">viewc</code>, and <code dir="ltr">procb</code> already exists on the import system, then <code dir="ltr">viewa</code> receives compilation warnings at import time.</p>
<p>Grants on views are imported even if a view has compilation errors. A view could have compilation errors if an object it depends on, such as a table, procedure, or another view, does not exist when the view is created. If a base table does not exist, then the server cannot validate that the grantor has the proper privileges on the base table with the <code dir="ltr">GRANT</code> <code dir="ltr">OPTION</code>. Access violations could occur when the view is used if the grantor does not have the proper privileges after the missing tables are created.</p>
<p>Importing views that contain references to tables in other schemas requires that the importer have <code dir="ltr">SELECT</code> <code dir="ltr">ANY</code> <code dir="ltr">TABLE</code> privilege. If the importer has not been granted this privilege, then the views will be imported in an uncompiled state. Note that granting the privilege to a role is insufficient. For the view to be compiled, the privilege must be granted directly to the importer.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL1851" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2396"></a>
<h3 class="sect2">Importing Partitioned Tables</h3>
<p>Import attempts to create a partitioned table with the same partition or subpartition names as the exported partitioned table, including names of the form <code dir="ltr">SYS_P</code><code dir="ltr"><span class="codeinlineitalic">nnn.</span></code> If a table with the same name already exists, then Import processing depends on the value of the <code dir="ltr">IGNORE</code> parameter.</p>
<p>Unless <code dir="ltr">SKIP_UNUSABLE_INDEXES</code>=<code dir="ltr">y,</code>inserting the exported data into the target table fails if Import cannot update a nonpartitioned index or index partition that is marked Indexes Unusable or is otherwise not suitable.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1023439"></a>
<div id="SUTIL1788" class="sect1">
<h2 class="sect1">Support for Fine-Grained Access Control<a id="sthref2397"></a></h2>
<p>To restore the fine-grained access control policies, the user who imports from an export file containing such tables must have the <code dir="ltr">EXECUTE</code> privilege on the <code dir="ltr">DBMS_RLS</code> package, so that the security policies on the tables can be reinstated.</p>
<p>If a user without the correct privileges attempts to import from an export file that contains tables with fine-grained access control policies, then a warning message is issued.</p>
</div>
<!-- class="sect1" -->
<a id="i1021678"></a>
<div id="SUTIL1779" class="sect1">
<h2 class="sect1">Snapshots<a id="sthref2398"></a><a id="sthref2399"></a> and Snapshot Logs</h2>
<div class="infobox-note">
<p class="notep1">Note:</p>
In certain situations, particularly those involving data warehousing, snapshots may be referred to as <span class="italic"><a id="sthref2400"></a>materialized views</span>. This section retains the term snapshot.</div>
<div id="SUTIL1780" class="sect2"><a id="sthref2401"></a>
<h3 class="sect2">Snapshot Log</h3>
<p>The snapshot log in a dump file is imported if the master table already exists for the database to which you are importing and it has a snapshot log.<a id="sthref2402"></a><a id="sthref2403"></a><a id="sthref2404"></a><a id="sthref2405"></a></p>
<p>When a <code dir="ltr">ROWID</code> snapshot log is exported, <code dir="ltr">ROWID</code>s stored in the snapshot log have no meaning upon import. As a result, each <code dir="ltr">ROWID</code> snapshot's first attempt to do a fast refresh fails, generating an error indicating that a complete refresh is required.<a id="sthref2406"></a></p>
<p>To avoid the refresh error, do a complete refresh after importing a <code dir="ltr">ROWID</code> snapshot log. After you have done a complete refresh, subsequent fast refreshes will work properly.<a id="sthref2407"></a><a id="sthref2408"></a> In contrast, when a primary key snapshot log is exported, the values of the primary keys do retain their meaning upon import. Therefore, primary key snapshots can do a fast refresh after the import.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REPLN" href="../e10706/toc.htm"><span class="italic">Oracle Database Advanced Replication</span></a> for Import-specific information about migration and compatibility and for more information about snapshots and snapshot logs</div>
</div>
<!-- class="sect2" -->
<div id="SUTIL1781" class="sect2"><a id="sthref2409"></a>
<h3 class="sect2">Snapshots<a id="sthref2410"></a></h3>
<p>A snapshot that has been restored from an export file has reverted to a previous state. On import, the time of the last refresh is imported as part of the snapshot table definition. The function that calculates the next refresh time is also imported.</p>
<p>Each refresh leaves a signature. A fast refresh uses the log entries that date from the time of that signature to bring the snapshot up to date. When the fast refresh is complete, the signature is deleted and a new signature is created. Any log entries that are not needed to refresh other snapshots are also deleted (all log entries with times before the earliest remaining signature).</p>
<div id="SUTIL1782" class="sect3"><a id="sthref2411"></a>
<h4 class="sect3">Importing a Snapshot</h4>
<p><a id="sthref2412"></a>When you restore a snapshot from an export file, you may encounter a problem under certain circumstances. <a id="sthref2413"></a><a id="sthref2414"></a><a id="sthref2415"></a></p>
<p>Assume that a snapshot is refreshed at time A, exported at time B, and refreshed again at time C. Then, because of corruption or other problems, the snapshot needs to be restored by dropping the snapshot and importing it again. The newly imported version has the last refresh time recorded as time A. However, log entries needed for a fast refresh may no longer exist. If the log entries do exist (because they are needed for another snapshot that has yet to be refreshed), then they are used, and the fast refresh completes successfully. Otherwise, the fast refresh fails, generating an error that says a complete refresh is required.</p>
</div>
<!-- class="sect3" -->
<div id="SUTIL1783" class="sect3"><a id="sthref2416"></a>
<h4 class="sect3">Importing a Snapshot into a Different Schema</h4>
<p>Snapshots and related items are exported with the schema name explicitly given in the DDL statements. To import them into a different schema, use the <code dir="ltr">FROMUSER</code> and <code dir="ltr">TOUSER</code> parameters. This does not apply to snapshot logs, which cannot be imported into a different schema.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1021683"></a>
<div id="SUTIL1784" class="sect1">
<h2 class="sect1">Transportable Tablespaces<a id="sthref2417"></a><a id="sthref2418"></a></h2>
<p>The transportable tablespace feature enables you to move a set of tablespaces from one Oracle database to another.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot export transportable tablespaces and then import them into a database at a lower release level. The target database must be at the same or higher release level as the source database.</div>
<p>To move or copy a set of tablespaces, you must make the tablespaces read-only, manually copy the data files of these tablespaces to the target database, and use Export and Import to move the database information (metadata) stored in the data dictionary over to the target database. The transport of the data files can be done using any facility for copying flat binary files, such as the operating system copying facility, binary-mode FTP, or publishing on CD-ROMs.</p>
<p>After copying the data files and exporting the metadata, you can optionally put the tablespaces in read/write mode.</p>
<p>Export and Import provide the following parameters to enable movement of transportable tablespace metadata.</p>
<ul>
<li>
<p><code dir="ltr">TABLESPACES</code></p>
</li>
<li>
<p><code dir="ltr">TRANSPORT_TABLESPACE</code></p>
</li>
</ul>
<p>See <a href="#i1019585">"TABLESPACES"</a> and <a href="#i1019649">"TRANSPORT_TABLESPACE"</a> for information about using these parameters during an import operation.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADMIN" href="../e25494/toc.htm"><span class="italic">Oracle Database Administrator's Guide</span></a> for details about managing transportable tablespaces</p>
</li>
<li>
<p><a class="olink CNCPT" href="../e40540/toc.htm"><span class="italic">Oracle Database Concepts</span></a> for an introduction to transportable tablespaces</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1024079"></a>
<div id="SUTIL1791" class="sect1">
<h2 class="sect1">Storage Parameters</h2>
<p>By default, a table is imported into its original tablespace.<a id="sthref2419"></a></p>
<p>If the tablespace no longer exists, or the user does not have sufficient quota in the tablespace, then the system uses the default tablespace for that user, unless the table:</p>
<ul>
<li>
<p>Is partitioned</p>
</li>
<li>
<p>Is a type table</p>
</li>
<li>
<p>Contains LOB, <code dir="ltr">VARRAY,</code> or <code dir="ltr">OPAQUE</code> type columns</p>
</li>
<li>
<p>Has an index-organized table (IOT) overflow segment</p>
</li>
</ul>
<p>If the user does not have sufficient quota in the default tablespace, then the user's tables are not imported. See <a href="#i1023312">"Reorganizing Tablespaces"</a> to see how you can use this to your advantage.</p>
<div id="SUTIL1792" class="sect2"><a id="sthref2420"></a>
<h3 class="sect2">The OPTIMAL Parameter</h3>
<p><a id="sthref2421"></a>The storage parameter <code dir="ltr">OPTIMAL</code> for rollback segments is not preserved during export and import.<a id="sthref2422"></a></p>
</div>
<!-- class="sect2" -->
<div id="SUTIL1793" class="sect2"><a id="sthref2423"></a>
<h3 class="sect2">Storage Parameters for OID Indexes and LOB Columns</h3>
<p>Tables are exported with their current storage parameters. For object tables, the OIDINDEX is created with its current storage parameters and name, if given. For tables that contain LOB, <code dir="ltr">VARRAY</code>, or <code dir="ltr">OPAQUE</code> type columns, LOB, <code dir="ltr">VARRAY</code>, or <code dir="ltr">OPAQUE</code> type data is created with their current storage parameters.</p>
<p>If you alter the storage parameters of existing tables before exporting, then the tables are exported using those altered storage parameters. Note, however, that storage parameters for LOB data cannot be altered before exporting (for example, chunk size for a LOB column, whether a LOB column is <code dir="ltr">CACHE</code> or <code dir="ltr">NOCACHE</code>, and so forth).</p>
<p>Note that LOB data might not reside in the same tablespace as the containing table. The tablespace for that data must be read/write at the time of import or the table will not be imported.</p>
<p>If LOB data resides in a tablespace that does not exist at the time of import, or the user does not have the necessary quota in that tablespace, then the table will not be imported. Because there can be multiple tablespace clauses, including one for the table, Import cannot determine which tablespace clause caused the error.</p>
</div>
<!-- class="sect2" -->
<div id="SUTIL1794" class="sect2"><a id="sthref2424"></a>
<h3 class="sect2">Overriding Storage Parameters<a id="sthref2425"></a><a id="sthref2426"></a></h3>
<p>Before using the Import utility to import data, you may want to create large tables with different storage parameters. If so, then you must specify <code dir="ltr">IGNORE=y</code> on the command line or in the parameter file.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1024049"></a>
<div id="SUTIL1785" class="sect1">
<h2 class="sect1">Read-Only Tablespaces</h2>
<p><a id="sthref2427"></a><a id="sthref2428"></a><a id="sthref2429"></a>Read-only tablespaces can be exported. On import, if the tablespace does not already exist in the target database, then the tablespace is created as a read/write tablespace. If you want read-only functionality, then you must manually make the tablespace read-only after the import.</p>
<p>If the tablespace already exists in the target database and is read-only, then you must make it read/write before the import.</p>
</div>
<!-- class="sect1" -->
<a id="i1023304"></a>
<div id="SUTIL1786" class="sect1">
<h2 class="sect1">Dropping a Tablespace</h2>
<p>You can drop a tablespace by redefining the objects to use different tablespaces before the import. You can then issue the <code dir="ltr">imp</code> command and specify <code dir="ltr">IGNORE=y.</code></p>
<p><a id="sthref2430"></a><a id="sthref2431"></a>In many cases, you can drop a tablespace by doing a full database export, then creating a zero-block tablespace with the same name (before logging off) as the tablespace you want to drop. During import, with <code dir="ltr">IGNORE=y,</code> the relevant <code dir="ltr">CREATE TABLESPACE</code> statement will fail and prevent the creation of the unwanted tablespace.</p>
<p>All objects from that tablespace will be imported into their owner's default tablespace except for partitioned tables, type tables, and tables that contain LOB or <code dir="ltr">VARRAY</code> columns or index-only tables with overflow segments. Import cannot determine which tablespace caused the error. Instead, you must first create a table and then import the table again, specifying <code dir="ltr">IGNORE=y.</code></p>
<p>Objects are not imported into the default tablespace if the tablespace does not exist, or you do not have the necessary quotas for your default tablespace.</p>
</div>
<!-- class="sect1" -->
<a id="i1023312"></a>
<div id="SUTIL1787" class="sect1">
<h2 class="sect1">Reorganizing Tablespaces<a id="sthref2432"></a><a id="sthref2433"></a></h2>
<p>If a user's quota allows it, the user's tables are imported into the same tablespace from which they were exported. However, if the tablespace no longer exists or the user does not have the necessary quota, then the system uses the default tablespace for that user as long as the table is unpartitioned, contains no LOB or <code dir="ltr">VARRAY</code> columns, is not a type table, and is not an index-only table with an overflow segment. This scenario can be used to move a user's tables from one tablespace to another.</p>
<p>For example, you need to move <code dir="ltr">joe</code>'s tables from tablespace <code dir="ltr">A</code> to tablespace <code dir="ltr">B</code> after a full database export. Follow these steps:</p>
<ol>
<li>
<p>If <code dir="ltr">joe</code> has the <code dir="ltr">UNLIMITED</code> <code dir="ltr">TABLESPACE</code> privilege, then revoke it. Set <code dir="ltr">joe</code>'s quota on tablespace <code dir="ltr">A</code> to zero. Also revoke all roles that might have such privileges or quotas.</p>
<p>When you revoke a role, it does not have a cascade effect. Therefore, users who were granted other roles by <code dir="ltr">joe</code> will be unaffected.</p>
</li>
<li>
<p>Export <code dir="ltr">joe</code>'s tables.</p>
</li>
<li>
<p>Drop <code dir="ltr">joe</code>'s tables from tablespace <code dir="ltr">A</code>.</p>
</li>
<li>
<p>Give <code dir="ltr">joe</code> a quota on tablespace <code dir="ltr">B</code> and make it the default tablespace for <code dir="ltr">joe</code>.</p>
</li>
<li>
<p>Import <code dir="ltr">joe</code>'s tables. (By default, Import puts <code dir="ltr">joe</code>'s tables into<br />
tablespace <code dir="ltr">B</code>.)</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="BABIFBGF"></a>
<div id="SUTIL1830" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Importing <a id="sthref2434"></a>Statistics</h2>
<p>If statistics are requested at export time and <a id="sthref2435"></a>analyzer statistics are available for a table, then Export will include the <code dir="ltr">ANALYZE</code> statement used to recalculate the statistics for the table into the dump file. In most circumstances, Export will also write the precalculated <a id="sthref2436"></a><a id="sthref2437"></a>optimizer statistics for tables, indexes, and columns to the dump file. See the description of the Import parameter <a href="#i1019436">"STATISTICS"</a>.</p>
<p>Because of the time it takes to perform an <code dir="ltr">ANALYZE</code> statement, it is usually preferable for Import to use the precalculated optimizer statistics for a table (and its indexes and columns) rather than execute the <code dir="ltr">ANALYZE</code> statement saved by Export. By default, Import will always use the precalculated statistics that are found in the export dump file.</p>
<p>The Export utility flags certain precalculated statistics as questionable. The importer might want to import only unquestionable statistics, not precalculated statistics, in the following situations:</p>
<ul>
<li>
<p>Character set translations between the dump file and the import client and the import database could potentially change collating sequences that are implicit in the precalculated statistics.</p>
</li>
<li>
<p>Row errors occurred while importing the table.</p>
</li>
<li>
<p>A partition level import is performed (column statistics will no longer be accurate).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Specifying <code dir="ltr">ROWS=n</code> will not prevent the use of precalculated statistics. This feature allows plan generation for queries to be tuned in a nonproduction database using statistics from a production database. In these cases, the import should specify <code dir="ltr">STATISTICS=SAFE.</code></div>
</li>
</ul>
<p>In certain situations, the importer might want to always use <code dir="ltr">ANALYZE</code> statements rather than precalculated statistics. For example, the statistics gathered from a fragmented database may not be relevant when the data is imported in a compressed form. In these cases, the importer should specify <code dir="ltr">STATISTICS=RECALCULATE</code> to force the recalculation of statistics.</p>
<p>If you do not want any statistics to be established by Import, then you should specify <code dir="ltr">STATISTICS=NONE.</code></p>
</div>
<!-- class="sect1" -->
<a id="i1007009"></a>
<div id="SUTIL1852" class="sect1">
<h2 class="sect1">Using Export and Import to Partition a Database Migration<a id="sthref2438"></a><a id="sthref2439"></a><a id="sthref2440"></a><a id="sthref2441"></a><a id="sthref2442"></a></h2>
<p>When you use the Export and Import utilities to migrate a large database, it may be more efficient to partition the migration into multiple export and import jobs. If you decide to partition the migration, then be aware of the following advantages and disadvantages.</p>
<div id="SUTIL1853" class="sect2"><a id="sthref2443"></a>
<h3 class="sect2">Advantages of Partitioning a Migration</h3>
<p>Partitioning a migration has the following advantages:</p>
<ul>
<li>
<p>Time required for the migration may be reduced, because many of the subjobs can be run in parallel.</p>
</li>
<li>
<p>The import can start as soon as the first export subjob completes, rather than waiting for the entire export to complete.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="SUTIL1854" class="sect2"><a id="sthref2444"></a>
<h3 class="sect2">Disadvantages of Partitioning a Migration</h3>
<p>Partitioning a migration has the following disadvantages:</p>
<ul>
<li>
<p>The export and import processes become more complex.</p>
</li>
<li>
<p>Support of cross-schema references for certain types of objects may be compromised. For example, if a schema contains a table with a foreign key constraint against a table in a different schema, then you may not have the required parent records when you import the table into the dependent schema.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="SUTIL1855" class="sect2"><a id="sthref2445"></a>
<h3 class="sect2">How to Use Export and Import to Partition a Database Migration <a id="sthref2446"></a></h3>
<p>To perform a database migration in a partitioned manner, take the following steps:</p>
<ol>
<li>
<p>For all top-level metadata in the database, issue the following commands:</p>
<ol>
<li>
<p><code dir="ltr">exp FILE=full FULL=y CONSTRAINTS=n TRIGGERS=n ROWS=n INDEXES=n</code></p>
</li>
<li>
<p><code dir="ltr">imp FILE=full FULL=y</code></p>
</li>
</ol>
</li>
<li>
<p>For each schema<code dir="ltr"><span class="codeinlineitalic">n</span></code> in the database, issue the following commands:</p>
<ol>
<li>
<p><code dir="ltr">exp OWNER=schema</code><code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">FILE=schema</code><code dir="ltr"><span class="codeinlineitalic">n</span></code></p>
</li>
<li>
<p><code dir="ltr">imp FILE=schema</code><code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">FROMUSER=schema</code><code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">TOUSER=schema</code><code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">IGNORE=y</code></p>
</li>
</ol>
</li>
</ol>
<p>All exports can be done in parallel. When the import of <code dir="ltr">full</code>.<code dir="ltr">dmp</code> completes, all remaining imports can also be done in parallel.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABJFDIA"></a>
<div id="SUTIL1831" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Tuning<a id="sthref2447"></a> Considerations for Import Operations<a id="sthref2448"></a></h2>
<p>This section discusses some ways to possibly improve the performance of an import operation. The information is categorized as follows:</p>
<ul>
<li>
<p><a href="#BABDGBCC">Changing System-Level Options</a></p>
</li>
<li>
<p><a href="#BABGDBIE">Changing Initialization Parameters</a></p>
</li>
<li>
<p><a href="#BABCBIBH">Changing Import Options</a></p>
</li>
<li>
<p><a href="#BABBCHBH">Dealing with Large Amounts of LOB Data</a></p>
</li>
<li>
<p><a href="#BABHFGGI">Dealing with Large Amounts of LONG Data</a></p>
</li>
</ul>
<a id="BABDGBCC"></a>
<div id="SUTIL1832" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Changing System-Level Options</h3>
<p>The following suggestions about system-level options may help improve performance of an import operation:</p>
<ul>
<li>
<p>Create and use one large rollback segment and take all other rollback segments offline. Generally a rollback segment that is one half the size of the largest table being imported should be big enough. It can also help if the rollback segment is created with the minimum number of two extents, of equal size.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle recommends that you use automatic undo management instead of rollback segments.</div>
</li>
<li>
<p>Put the database in <code dir="ltr">NOARCHIVELOG</code> mode until the import is complete. This will reduce the overhead of creating and managing archive logs.</p>
</li>
<li>
<p>Create several large redo files and take any small redo log files offline. This will result in fewer log switches being made.</p>
</li>
<li>
<p>If possible, have the rollback segment, table data, and redo log files all on separate disks. This will reduce I/O contention and increase throughput.</p>
</li>
<li>
<p>If possible, do not run any other jobs at the same time that may compete with the import operation for system resources.</p>
</li>
<li>
<p>Ensure that there are no statistics on dictionary tables.</p>
</li>
<li>
<p>Set <code dir="ltr">TRACE_LEVEL_CLIENT</code>=<code dir="ltr">OFF</code> in the <code dir="ltr">sqlnet</code>.<code dir="ltr">ora</code> file.</p>
</li>
<li>
<p>If possible, increase the value of <code dir="ltr">DB_BLOCK_SIZE</code> when you re-create the database. The larger the block size, the smaller the number of I/O cycles needed. <span class="italic">This change is permanent, so be sure to carefully consider all effects it will have before making it.</span></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABGDBIE"></a>
<div id="SUTIL1833" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Changing Initialization Parameters</h3>
<p>The following suggestions about settings in your initialization parameter file may help improve performance of an import operation.</p>
<ul>
<li>
<p>Set <code dir="ltr">LOG_CHECKPOINT_INTERVAL</code> to a number that is larger than the size of the redo log files. This number is in operating system blocks (512 on most UNIX systems). This reduces checkpoints to a minimum (at log switching time).</p>
</li>
<li>
<p>Increase the value of <code dir="ltr">SORT_AREA_SIZE</code>. The amount you increase it depends on other activity taking place on the system and on the amount of free memory available. (If the system begins swapping and paging, then the value is probably set too high.)</p>
</li>
<li>
<p>Increase the value for <code dir="ltr">DB_BLOCK_BUFFERS</code> and <code dir="ltr">SHARED_POOL_SIZE</code>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABCBIBH"></a>
<div id="SUTIL1834" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Changing Import Options</h3>
<p>The following suggestions about usage of import options may help improve performance. Be sure to also read the individual descriptions of all the available options in <a href="#i1021478">"Import Parameters"</a>.</p>
<ul>
<li>
<p>Set <code dir="ltr">COMMIT</code>=<code dir="ltr">N</code>. This causes Import to commit after each object (table), not after each buffer. This is why one large rollback segment is needed. (Because rollback segments will be deprecated in future releases, Oracle recommends that you use automatic undo management instead.)</p>
</li>
<li>
<p>Specify a large value for <code dir="ltr">BUFFER</code> or <code dir="ltr">RECORDLENGTH</code>, depending on system activity, database size, and so on. A larger size reduces the number of times that the export file has to be accessed for data. Several megabytes is usually enough. Be sure to check your system for excessive paging and swapping activity, which can indicate that the buffer size is too large.</p>
</li>
<li>
<p>Consider setting <code dir="ltr">INDEXES</code>=<code dir="ltr">N</code> because indexes can be created at some point after the import, when time is not a factor. If you choose to do this, then you need to use the <code dir="ltr">INDEXFILE</code> parameter to extract the DLL for the index creation or to rerun the import with <code dir="ltr">INDEXES</code>=<code dir="ltr">Y</code> and <code dir="ltr">ROWS</code>=<code dir="ltr">N</code>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABBCHBH"></a>
<div id="SUTIL1835" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Dealing with Large Amounts of LOB Data</h3>
<p>Keep the following in mind when you are importing large amounts of LOB data:</p>
<p>Eliminating indexes significantly reduces total import time. This is because LOB data requires special consideration during an import because the LOB locator has a primary key that cannot be explicitly dropped or ignored during an import.</p>
<p>Ensure that there is enough space available in large contiguous chunks to complete the data load.</p>
</div>
<!-- class="sect2" -->
<a id="BABHFGGI"></a>
<div id="SUTIL1836" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Dealing with Large Amounts of LONG Data</h3>
<p>Keep in mind that importing a table with a <code dir="ltr">LONG</code> column may cause a higher rate of I/O and disk usage, resulting in reduced performance of the import operation. There are no specific parameters that will improve performance during an import of large amounts of LONG data, although some of the more general tuning suggestions made in this section may help overall performance.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABBHBEE">"Importing LONG Columns"</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1013164"></a>
<div id="SUTIL103" class="sect1">
<h2 class="sect1">Using Different Releases of Export and Import</h2>
<p>This section describes compatibility issues that relate to using different releases of Export and the Oracle database.</p>
<p>Whenever you are moving data between different releases of the Oracle database, the following basic rules apply:</p>
<ul>
<li>
<p>The Import utility and the database to which data is being imported (the target database) must be the same version. For example, if you try to use the Import utility 9.2.0.7 to import into a 9.2.0.8 database, then you may encounter errors.</p>
</li>
<li>
<p>The version of the Export utility must be equal to the version of either the source or target database, whichever is earlier.</p>
<p>For example, to create an export file for an import into a later release database, use a version of the Export utility that equals the source database. Conversely, to create an export file for an import into an earlier release database, use a version of the Export utility that equals the version of the target database.</p>
<ul>
<li>
<p>In general, you can use the Export utility from any Oracle8 release to export from an Oracle9<span class="italic">i</span> server and create an Oracle8 export file.</p>
</li>
</ul>
</li>
</ul>
<div id="SUTIL3765" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2449"></a>
<h3 class="sect2">Restrictions When Using Different Releases of Export and Import</h3>
<p>The following restrictions apply when you are using different releases of Export and Import:</p>
<ul>
<li>
<p>Export dump files can be read only by the Import utility because they are stored in a special binary format.</p>
</li>
<li>
<p>Any export dump file can be imported into a later release of the Oracle database.</p>
</li>
<li>
<p>The Import utility cannot read export dump files created by the Export utility of a later maintenance release or version. For example, a release 9.2 export dump file cannot be imported by a release 9.0.1 Import utility.</p>
</li>
<li>
<p>Whenever a lower version of the Export utility runs with a later version of the Oracle database, categories of database objects that did not exist in the earlier version are excluded from the export.</p>
</li>
<li>
<p>Export files generated by Oracle9<span class="italic">i</span> Export, either direct path or conventional path, are incompatible with earlier releases of Import and can be imported only with Oracle9<span class="italic">i</span> Import. When backward compatibility is an issue, use the earlier release or version of the Export utility against the Oracle9<span class="italic">i</span> database.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1016912"></a>
<div id="SUTIL1857" class="sect2">
<h3 class="sect2">Examples of Using Different Releases of Export and Import</h3>
<p><a href="#BABIFHHJ">Table 22-5</a> shows some examples of which Export and Import releases to use when moving data between different releases of the Oracle database.</p>
<div id="SUTIL3766" class="tblformal">
<p class="titleintable"><a id="sthref2450"></a><a id="BABIFHHJ"></a>Table 22-5 Using Different Releases of Export and Import</p>
<table class="cellalignment1394" title="Using Different Releases of Export and Import" summary="Compatibility of different releases of export and import" dir="ltr">
<thead>
<tr class="cellalignment1388">
<th class="cellalignment1395" id="r1c1-t51">Export from-&gt;Import to</th>
<th class="cellalignment1395" id="r1c2-t51">Use Export Release</th>
<th class="cellalignment1395" id="r1c3-t51">Use Import Release</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r2c1-t51" headers="r1c1-t51">
<p>8.1.6 -&gt; 8.1.6</p>
</td>
<td class="cellalignment1396" headers="r2c1-t51 r1c2-t51">
<p>8.1.6</p>
</td>
<td class="cellalignment1396" headers="r2c1-t51 r1c3-t51">
<p>8.1.6</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r3c1-t51" headers="r1c1-t51">
<p>8.1.5 -&gt; 8.0.6</p>
</td>
<td class="cellalignment1396" headers="r3c1-t51 r1c2-t51">
<p>8.0.6</p>
</td>
<td class="cellalignment1396" headers="r3c1-t51 r1c3-t51">
<p>8.0.6</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r4c1-t51" headers="r1c1-t51">
<p>8.1.7 -&gt; 8.1.6</p>
</td>
<td class="cellalignment1396" headers="r4c1-t51 r1c2-t51">
<p>8.1.6</p>
</td>
<td class="cellalignment1396" headers="r4c1-t51 r1c3-t51">
<p>8.1.6</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r5c1-t51" headers="r1c1-t51">
<p>9.0.1 -&gt; 8.1.6</p>
</td>
<td class="cellalignment1396" headers="r5c1-t51 r1c2-t51">
<p>8.1.6</p>
</td>
<td class="cellalignment1396" headers="r5c1-t51 r1c3-t51">
<p>8.1.6</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r6c1-t51" headers="r1c1-t51">
<p>9.0.1 -&gt; 9.0.2</p>
</td>
<td class="cellalignment1396" headers="r6c1-t51 r1c2-t51">
<p>9.0.1</p>
</td>
<td class="cellalignment1396" headers="r6c1-t51 r1c3-t51">
<p>9.0.2</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r7c1-t51" headers="r1c1-t51">
<p>9.0.2 -&gt; 10.1.0</p>
</td>
<td class="cellalignment1396" headers="r7c1-t51 r1c2-t51">
<p>9.0.2</p>
</td>
<td class="cellalignment1396" headers="r7c1-t51 r1c3-t51">
<p>10.1.0</p>
</td>
</tr>
<tr class="cellalignment1388">
<td class="cellalignment1396" id="r8c1-t51" headers="r1c1-t51">
<p>10.1.0 -&gt; 9.0.2</p>
</td>
<td class="cellalignment1396" headers="r8c1-t51 r1c2-t51">
<p>9.0.2</p>
</td>
<td class="cellalignment1396" headers="r8c1-t51 r1c3-t51">
<p>9.0.2</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#BABIFHHJ">Table 22-5</a> covers moving data only between the original Export and Import utilities. For Oracle Database 10<span class="italic">g</span> release 1 (10.1) or higher, Oracle recommends the Data Pump Export and Import utilities in most cases because these utilities provide greatly enhanced performance compared to the original Export and Import utilities.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink UPGRD12560" href="../../server.112/e23633/expimp.htm#UPGRD12560"><span class="italic">Oracle Database Upgrade Guide</span></a> for more information about exporting and importing data between different releases, including releases higher than 10.1</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1387">
<tr>
<td class="cellalignment1396">
<table class="cellalignment1392">
<tr>
<td class="cellalignment1391"><a href="original_export.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1391"><a href="part_apps.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2018,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1398">
<table class="cellalignment1390">
<tr>
<td class="cellalignment1391"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1391"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1391"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1391"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1391"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1391"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
