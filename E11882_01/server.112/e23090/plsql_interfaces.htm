<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using the Oracle Database Vault PL/SQL&nbsp;Interfaces</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1088" />
<meta name="dcterms.created" content="2016-11-14T16:25:11Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Vault Administrator's Guide" />
<meta name="dcterms.identifier" content="E23090-13" />
<meta name="dcterms.isVersionOf" content="DVADM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="apis_dbms_macutl.htm" title="Previous" type="text/html" />
<link rel="Next" href="views.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23090.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">22/31</span> <!-- End Header -->
<div id="DVADM014" class="chapter"><a id="CHDEAEHD"></a>
<h1 class="chapter"><span class="secnum">15</span> Using the Oracle Database Vault PL/SQL&nbsp;Interfaces</h1>
<p>This chapter contains:</p>
<ul>
<li>
<p><a href="#CHDBEIDJ">Oracle Database Vault Run-Time PL/SQL Procedures and Functions</a></p>
</li>
<li>
<p><a href="#CHDJGAIJ">Oracle Database Vault PL/SQL Factor Functions</a></p>
</li>
<li>
<p><a href="#CHDECFAD">Oracle Database Vault PL/SQL Rule Functions</a></p>
</li>
<li>
<p><a href="#CHDBEIII">Oracle Database Vault PL/SQL Packages</a></p>
</li>
</ul>
<a id="CHDBEIDJ"></a>
<div id="DVADM70844" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref885"></a>Oracle Database Vault Run-Time PL/SQL Procedures and Functions</h2>
<p>Oracle<a id="sthref886"></a> Database Vault provides a set of procedural interfaces to administer various Database Vault security options and manage Database Vault security enforcements. There are also procedures and functions that expose the logic to validate a DDL command for realm violations and command authorizations. Additional procedures and functions are provided to set the value of a factor (assuming their associated rule sets evaluate to true) (for example, from a Web application), to retrieve the trust level for a session or specific factor identity, and to get the label for a factor identity. These procedures and functions are provided so that a database administrator does not grant the <code dir="ltr">EXECUTE</code> privilege on all <code dir="ltr">DVSYS</code> package procedures to the general database account population. The procedures and functions expose only the minimum methods that are required. All of these functions and procedures are publicly available for applications that need them.</p>
<p><a href="#CJACABDC">Table 15-1</a> lists the default run-time PL/SQL procedures and functions.</p>
<div id="DVADM70845" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref887"></a><a id="CJACABDC"></a>Table 15-1 DVSYS Functions</p>
<table class="cellalignment1647" title="DVSYS Functions" summary="DVSYS functions" dir="ltr">
<thead>
<tr class="cellalignment1639">
<th class="cellalignment1648" id="r1c1-t2">Procedure or Function</th>
<th class="cellalignment1648" id="r1c2-t2">Parameter</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r2c1-t2" headers="r1c1-t2">
<p><a href="#CJAFFCIE">SET_FACTOR Procedure</a></p>
</td>
<td class="cellalignment1646" headers="r2c1-t2 r1c2-t2">
<p>Sets a factor</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r3c1-t2" headers="r1c1-t2">
<p><a href="#CJAFDGGG">GET_FACTOR Function</a></p>
</td>
<td class="cellalignment1646" headers="r3c1-t2 r1c2-t2">
<p>Retrieves a factor</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r4c1-t2" headers="r1c1-t2">
<p><a href="#CJAJBCIJ">GET_TRUST_LEVEL Function</a></p>
</td>
<td class="cellalignment1646" headers="r4c1-t2 r1c2-t2">
<p>Retrieves the trust level assigned to a factor</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r5c1-t2" headers="r1c1-t2">
<p><a href="#CJAGHCFJ">GET_TRUST_LEVEL_FOR_IDENTITY Function</a></p>
</td>
<td class="cellalignment1646" headers="r5c1-t2 r1c2-t2">
<p>Retrieves the trust level for a specified factor and an identity</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r6c1-t2" headers="r1c1-t2">
<p><a href="#CJAEHCBH">ROLE_IS_ENABLED Function</a></p>
</td>
<td class="cellalignment1646" headers="r6c1-t2 r1c2-t2">
<p>Checks whether the specified database role is enabled</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r7c1-t2" headers="r1c1-t2">
<p><a href="#CJAHGDDD">GET_FACTOR_LABEL Function</a></p>
</td>
<td class="cellalignment1646" headers="r7c1-t2 r1c2-t2">
<p>Retrieves the label for the specified factor when the factor has a label assigned to it for the specified Oracle Label Security policy</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<a id="CJAFFCIE"></a>
<div id="DVADM70846" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">SET_FACTOR Procedure</h3>
<p>The<a id="sthref888"></a> <code dir="ltr">SET_FACTOR</code> procedure can be exposed to an application that requires the ability <a id="sthref889"></a>to set factor identities dynamically. It wraps the package procedure <code dir="ltr">DBMS_MACADM.SET_FACTOR</code>. When a factor has a rule set associated with it for assignment and if the rule set returns true, then the value is set. Normal rule set handling occurs, and the factor value (identity) validation method is called. This procedure is available (to execute) to the general database account population.</p>
<p class="subhead2"><a id="DVADM70847"></a>Syntax</p>
<pre dir="ltr">
DVSYS.SET_FACTOR(
  p_factor IN VARCHAR2, 
  p_value  IN VARCHAR2);
</pre>
<p class="subhead2"><a id="DVADM70848"></a>Parameters</p>
<div id="DVADM70849" class="tblhruleformal">
<p class="titleintable"><a id="sthref890"></a><a id="sthref891"></a>Table 15-2 SET_FACTOR Parameters</p>
<table class="cellalignment1647" title="SET_FACTOR Parameters" summary="DVS.SET_FACTOR function" dir="ltr">
<thead>
<tr class="cellalignment1639">
<th class="cellalignment1648" id="r1c1-t3">Parameter</th>
<th class="cellalignment1648" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r2c1-t3" headers="r1c1-t3">
<p><code dir="ltr">p_factor</code></p>
</td>
<td class="cellalignment1646" headers="r2c1-t3 r1c2-t3">
<p>Factor name.</p>
<p>To find existing factors in the current database instance, query the <code dir="ltr">DVSYS.DBA_DV_FACTOR</code> data dictionary view, described in <a href="views.htm#BABJHIEG">"DVSYS.DBA_DV_FACTOR View"</a>.</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r3c1-t3" headers="r1c1-t3">
<p><code dir="ltr">p_value</code></p>
</td>
<td class="cellalignment1646" headers="r3c1-t3 r1c2-t3">
<p>Identity value, up to 1024 characters in mixed case.</p>
<p>To find the identities for each factor in the current database instance, query the <code dir="ltr">DVSYS.DBA_DV_IDENTITY</code> data dictionary view, described in <a href="views.htm#BABBHHCB">"DVSYS.DBA_DV_IDENTITY View"</a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p class="subhead2"><a id="DVADM70850"></a>Example</p>
<pre dir="ltr">
EXECUTE DVSYS.SET_FACTOR(''Sector2_ClientID'', ''identity'');
</pre></div>
<!-- class="sect2" -->
<a id="CJAFDGGG"></a>
<div id="DVADM70851" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">GET_FACTOR Function</h3>
<p>The <code dir="ltr">GET_FACTOR</code><a id="sthref892"></a> function is exposed to the <code dir="ltr">DVF</code> schema to allow the public factor functions to resolve the identity of a factor. This enables the <code dir="ltr">F$</code> functions in the <code dir="ltr">DVF</code> schema. This function is available (to execute) to the general database account population.</p>
<p class="subhead2"><a id="DVADM70852"></a>Syntax</p>
<pre dir="ltr">
DVSYS.GET_FACTOR(
  p_factor IN VARCHAR2)
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70853"></a>Parameter</p>
<div id="DVADM70854" class="tblhruleformal">
<p class="titleintable"><a id="sthref893"></a><a id="sthref894"></a>Table 15-3 GET_FACTOR Parameter</p>
<table class="cellalignment1647" title="GET_FACTOR Parameter" summary="DVS.GET_FACTOR function" dir="ltr">
<thead>
<tr class="cellalignment1639">
<th class="cellalignment1648" id="r1c1-t4">Parameter</th>
<th class="cellalignment1648" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r2c1-t4" headers="r1c1-t4">
<p><code dir="ltr">p_factor</code></p>
</td>
<td class="cellalignment1646" headers="r2c1-t4 r1c2-t4">
<p>Factor name.</p>
<p>To find existing factors in the current database instance, query the <code dir="ltr">DVSYS.DBA_DV_FACTOR</code> data dictionary view, described in <a href="views.htm#BABJHIEG">"DVSYS.DBA_DV_FACTOR View"</a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p class="subhead2"><a id="DVADM70855"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Get Client ID Factor Identity',
  rule_expr =&gt; 'DVSYS.GET_FACTOR(''Sector2_ClientID'')');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAJBCIJ"></a>
<div id="DVADM70856" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">GET_TRUST_LEVEL Function</h3>
<p>The <code dir="ltr">GET_TRUST_LEVEL</code><a id="sthref895"></a> function returns <a id="sthref896"></a>the trust level of the current session identity for the factor requested. This function is available (to execute) to the general database account population. See <a href="cfgfact.htm#BABDJFJB">"Creating and Configuring a Factor Identity"</a> for a listing of the available trust levels.</p>
<p class="subhead2"><a id="DVADM70857"></a>Syntax</p>
<pre dir="ltr">
DVSYS.GET_TRUST_LEVEL(
  p_factor IN VARCHAR2)
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70858"></a>Parameter</p>
<div id="DVADM70859" class="tblhruleformal">
<p class="titleintable"><a id="sthref897"></a><a id="sthref898"></a>Table 15-4 GET_TRUST_LEVEL Parameter</p>
<table class="cellalignment1647" title="GET_TRUST_LEVEL Parameter" summary="DVS.GET_TRUST_LEVEL function" dir="ltr">
<thead>
<tr class="cellalignment1639">
<th class="cellalignment1648" id="r1c1-t5">Parameter</th>
<th class="cellalignment1648" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">p_factor</code></p>
</td>
<td class="cellalignment1646" headers="r2c1-t5 r1c2-t5">
<p>Factor name.</p>
<p>To find existing factors in the current database instance, query the <code dir="ltr">DVSYS.DBA_DV_FACTOR</code> data dictionary view, described in <a href="views.htm#BABJHIEG">"DVSYS.DBA_DV_FACTOR View"</a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p class="subhead2"><a id="DVADM70860"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Get Client ID Trust Level',
  rule_expr =&gt; 'DVSYS.GET_TRUST_LEVEL(''Sector2_ClientID'')');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAGHCFJ"></a>
<div id="DVADM70861" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">GET_TRUST_LEVEL_FOR_IDENTITY Function</h3>
<p>The <code dir="ltr">GET_TRUST_LEVEL_FOR_IDENTITY</code><a id="sthref899"></a> function returns <a id="sthref900"></a>the trust level for the factor and identity requested. This function is available (to execute) to the general database account population. See <a href="cfgfact.htm#BABDJFJB">"Creating and Configuring a Factor Identity"</a> for a listing of the available trust levels.</p>
<p class="subhead2"><a id="DVADM70862"></a>Syntax</p>
<pre dir="ltr">
DVSYS.GET_TRUST_LEVEL_FOR_IDENTITY(
  p_factor   IN VARCHAR2, 
  p_identity IN VARCHAR2)
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70863"></a>Parameters</p>
<div id="DVADM70864" class="tblhruleformal">
<p class="titleintable"><a id="sthref901"></a><a id="sthref902"></a>Table 15-5 GET_TRUST_LEVEL_FOR_IDENTITY Parameters</p>
<table class="cellalignment1647" title="GET_TRUST_LEVEL_FOR_IDENTITY Parameters" summary="GET_TRUST_LEVEL_FOR_IDENTITY function" dir="ltr">
<thead>
<tr class="cellalignment1639">
<th class="cellalignment1648" id="r1c1-t6">Parameter</th>
<th class="cellalignment1648" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">p_factor</code></p>
</td>
<td class="cellalignment1646" headers="r2c1-t6 r1c2-t6">
<p>Factor name.</p>
<p>To find existing factors in the current database instance, query the <code dir="ltr">DVSYS.DBA_DV_FACTOR</code> view, described in <a href="views.htm#BABJHIEG">"DVSYS.DBA_DV_FACTOR View"</a>.</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">p_identity</code></p>
</td>
<td class="cellalignment1646" headers="r3c1-t6 r1c2-t6">
<p>Identity value.</p>
<p>To find the identities for each factor in the current database instance, use the <code dir="ltr">DVSYS.DBA_DV_IDENTITY</code> data dictionary view, described in <a href="views.htm#BABBHHCB">"DVSYS.DBA_DV_IDENTITY View"</a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p class="subhead2"><a id="DVADM70865"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Get Client ID Identity Trust Level',
  rule_expr =&gt; 'DVSYS.GET_TRUST_LEVEL_FOR_IDENTITY(''Sector2_ClientID'', ''identity'')');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAEHCBH"></a>
<div id="DVADM70866" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">ROLE_IS_ENABLED Function</h3>
<p>The <code dir="ltr">ROLE_IS_ENABLED</code><a id="sthref903"></a> function returns a boolean value that specifies whether a database role has been enabled. This function is available (to execute) to the general database account population.</p>
<p class="subhead2"><a id="DVADM70867"></a>Syntax</p>
<pre dir="ltr">
DVSYS.ROLE_IS_ENABLED(
  p_role IN VARCHAR2)
RETURN BOOLEAN;
</pre>
<p class="subhead2"><a id="DVADM70868"></a>Parameter</p>
<div id="DVADM70869" class="tblhruleformal">
<p class="titleintable"><a id="sthref904"></a><a id="sthref905"></a>Table 15-6 ROLE_IS_ENABLED Parameter</p>
<table class="cellalignment1647" title="ROLE_IS_ENABLED Parameter" summary="DVS.ROLE_IS_ENABLED function" dir="ltr">
<thead>
<tr class="cellalignment1639">
<th class="cellalignment1648" id="r1c1-t7">Parameter</th>
<th class="cellalignment1648" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">p_role</code></p>
</td>
<td class="cellalignment1646" headers="r2c1-t7 r1c2-t7">
<p>Database role name to check.</p>
<p>To find existing roles, use the following data dictionary views:</p>
<ul>
<li>
<p><code dir="ltr">DBA_ROLES</code>: Finds available roles in the current database instance. See <a class="olink REFRN" href="../e40402/toc.htm"><span class="italic">Oracle Database Reference</span></a>.</p>
</li>
<li>
<p><code dir="ltr">DVSYS.DBA_DV_REALM_AUTH</code>: Finds the authorization of a particular role. See <a href="views.htm#BABIIJHE">"DVSYS.DBA_DV_REALM View"</a>.</p>
</li>
<li>
<p><code dir="ltr">DVSYS.DBA_DV_ROLE</code>: Finds existing secure application roles used in privilege management. See <a href="views.htm#BABGFIGC">"DVSYS.DBA_DV_ROLE View"</a>.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p class="subhead2"><a id="DVADM70870"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check if SYSADM Role Is Enabled',
  rule_expr =&gt; 'DVSYS.ROLE_IS_ENABLED(''SYSADM'')');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAHGDDD"></a>
<div id="DVADM70871" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">GET_FACTOR_LABEL Function</h3>
<p>The <code dir="ltr">GET_FACTOR_LABEL</code><a id="sthref906"></a> function returns the label for the specified factor when the factor has a label assigned to it for the specified Oracle Label Security policy. The function returns a label that is merged with the maximum session label for the policy if the policy is configured with Oracle Label Security. The function is available (to execute) to the general database population. See <a href="cfgfact.htm#BABEDJHF">"Label Identity"</a> for more information about factor labels.</p>
<p class="subhead2"><a id="DVADM70872"></a>Syntax</p>
<pre dir="ltr">
DVSYS.GET_FACTOR_LABEL(
  p_factor      IN VARCHAR2, 
  p_policy_name IN VARCHAR2)
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70873"></a>Parameters</p>
<div id="DVADM70874" class="tblhruleformal">
<p class="titleintable"><a id="sthref907"></a><a id="sthref908"></a>Table 15-7 GET_FACTOR_LABEL Parameters</p>
<table class="cellalignment1647" title="GET_FACTOR_LABEL Parameters" summary="DVS.GET_FACTOR_LABEL function" dir="ltr">
<thead>
<tr class="cellalignment1639">
<th class="cellalignment1648" id="r1c1-t8">Parameter</th>
<th class="cellalignment1648" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r2c1-t8" headers="r1c1-t8">
<p><code dir="ltr">p_factor</code></p>
</td>
<td class="cellalignment1646" headers="r2c1-t8 r1c2-t8">
<p>Factor name.</p>
<p>To find the available factors in the current database instance, query the <code dir="ltr">DVSYS.DBA_DV_FACTOR</code> data dictionary view. To find factors that are associated with Oracle Label Security policies, use <code dir="ltr">DVSYS.DBA_DV_MAC_POLICY_FACTOR</code>.</p>
<p>See <a href="views.htm#BABJHIEG">"DVSYS.DBA_DV_FACTOR View"</a> and <a href="views.htm#BABJCCEB">"DVSYS.DBA_DV_MAC_POLICY_FACTOR View"</a>.</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r3c1-t8" headers="r1c1-t8">
<p><code dir="ltr">p_policy_name</code></p>
</td>
<td class="cellalignment1646" headers="r3c1-t8 r1c2-t8">
<p>Oracle Label Security policy name.</p>
<p>Use the following data dictionary views to find information about policies and factors in the current database instance:</p>
<ul>
<li>
<p><code dir="ltr">DVSYS.DBA_DV_MAC_POLICY</code>: Lists Oracle Label Security policies defined in the current database instance. See <a href="views.htm#BABIHCJA">"DVSYS.DBA_DV_MAC_POLICY View"</a>.</p>
</li>
<li>
<p><code dir="ltr">DVSYS.DBA_DV_MAC_POLICY_FACTOR</code>: Lists the factors that are associated with Oracle Label Security policies for the current database instance. See <a href="views.htm#BABJCCEB">"DVSYS.DBA_DV_MAC_POLICY_FACTOR View"</a>.</p>
</li>
<li>
<p><code dir="ltr">DVSYS.DBA_DV_POLICY_LABEL</code>: Lists the Oracle Label Security label for each factor identifier in the <code dir="ltr">DVSYS.DBA_DV_IDENTITY</code> view for each policy. See <a href="views.htm#BABHCAGA">"DVSYS.DBA_DV_POLICY_LABEL View"</a>.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p class="subhead2"><a id="DVADM70875"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Get the ClientID Factor Label',
  rule_expr =&gt; 'DVSYS.GET_FACTOR_LABEL(''Sector2_ClientID'', ''Access Locations'')');
END;
/
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDJGAIJ"></a>
<div id="DVADM70876" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Oracle Database Vault PL/SQL Factor Functions</h2>
<p>In addition to the functions <a id="sthref909"></a>and procedures made available from the <code dir="ltr">DVSYS</code> schema, the <a id="sthref910"></a><code dir="ltr">DVF</code> schema contains a single function for each factor defined in the system. Oracle Database Vault maintains these functions when you use the <code dir="ltr">DBMS_MACADM</code> PL/SQL package to manage the various factors. The functions are then available to the general database account population through PL/SQL functions and standard SQL. This enables factors to be used in Oracle Label Security, Oracle Virtual Private Database (VPD), and so on.</p>
<p>Typically, you can incorporate these functions into rule expressions. For example:</p>
<pre dir="ltr">
BEGIN
 DBMS_MACADM.CREATE_RULE(
 rule_name =&gt; 'Not Internal DBA',
 rule_expr =&gt; 'DVF.F$SESSION_USER NOT IN (''JSMTIH'', ''TBROWN'')');
END;
/
</pre>
<p>To find the value of a factor function, select from the <code dir="ltr">DUAL</code> system table. For example:</p>
<pre dir="ltr">
SELECT DVF.F$SESSION_USER FROM DUAL;

F$SESSION_USER
------------------------------------------------
LBROWN_DVOWNER
</pre>
<p>The name of the factor itself is case-insensitive. For example, the following statements return the same result</p>
<pre dir="ltr">
select dvf.f$session_user from dual;

SELECT DVF.F$SESSION_USER FROM DUAL;
</pre>
<p><a href="#BABIEIFI">Table 15-8</a> lists the default factor functions.</p>
<div id="DVADM70877" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref911"></a><a id="BABIEIFI"></a>Table 15-8 Installed Oracle Database Vault Factor Functions</p>
<table class="cellalignment1647" title="Installed Oracle Database Vault Factor Functions" summary="Installed Data Vault factor functions" dir="ltr">
<thead>
<tr class="cellalignment1639">
<th class="cellalignment1648" id="r1c1-t9">DVF Factor Function</th>
<th class="cellalignment1648" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r2c1-t9" headers="r1c1-t9">
<p><a href="#CJAIDBAH">F$AUTHENTICATION_METHOD Function</a></p>
</td>
<td class="cellalignment1646" headers="r2c1-t9 r1c2-t9">
<p>Returns the method of authentication in <code dir="ltr">VARCHAR2</code> data type. In the list that follows, the type of user is followed by the method returned</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r3c1-t9" headers="r1c1-t9">
<p><a href="#CJAJIFIA">F$CLIENT_IP Function</a></p>
</td>
<td class="cellalignment1646" headers="r3c1-t9 r1c2-t9">
<p>Returns the IP address of the computer from which the client is connected</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r4c1-t9" headers="r1c1-t9">
<p><a href="#CJAJJAHE">F$DATABASE_DOMAIN Function</a></p>
</td>
<td class="cellalignment1646" headers="r4c1-t9 r1c2-t9">
<p>Returns the domain of the database as specified in the <code dir="ltr">DB_DOMAIN</code> initialization parameter</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r5c1-t9" headers="r1c1-t9">
<p><a href="#CJAJJIAE">F$DATABASE_HOSTNAME Function</a></p>
</td>
<td class="cellalignment1646" headers="r5c1-t9 r1c2-t9">
<p>Returns the host name of the computer on which the database instance is running</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r6c1-t9" headers="r1c1-t9">
<p><a href="#CJACCIJB">F$DATABASE_INSTANCE Function</a></p>
</td>
<td class="cellalignment1646" headers="r6c1-t9 r1c2-t9">
<p>Returns the database instance identification number of the current database instance</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r7c1-t9" headers="r1c1-t9">
<p><a href="#CJABHAGH">F$DATABASE_IP Function</a></p>
</td>
<td class="cellalignment1646" headers="r7c1-t9 r1c2-t9">
<p>Returns the IP address of the computer on which the database instance is running</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r8c1-t9" headers="r1c1-t9">
<p><a href="#CJAFDIDA">F$DATABASE_NAME Function</a></p>
</td>
<td class="cellalignment1646" headers="r8c1-t9 r1c2-t9">
<p>Returns the name of the database as specified in the <code dir="ltr">DB_NAME</code> initialization parameter</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r9c1-t9" headers="r1c1-t9">
<p><a href="#CJAECIAA">F$DOMAIN Function</a></p>
</td>
<td class="cellalignment1646" headers="r9c1-t9 r1c2-t9">
<p>Returns a named collection of physical, configuration, or implementation-specific factors in the run-time environment (for example, a networked IT environment or subset of it) that operates at a specific sensitivity level</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r10c1-t9" headers="r1c1-t9">
<p><a href="#CJABEBGC">F$ENTERPRISE_IDENTITY Function</a></p>
</td>
<td class="cellalignment1646" headers="r10c1-t9 r1c2-t9">
<p>Returns the enterprise-wide identity for a user</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r11c1-t9" headers="r1c1-t9">
<p><a href="#CJAFGFGF">F$IDENTIFICATION_TYPE Function</a></p>
</td>
<td class="cellalignment1646" headers="r11c1-t9 r1c2-t9">
<p>Returns the way the schema of a user was created in the database. Specifically, it reflects the <code dir="ltr">IDENTIFIED</code> clause in the <code dir="ltr">CREATE USER</code> or <code dir="ltr">ALTER USER</code> syntax.</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r12c1-t9" headers="r1c1-t9">
<p><a href="#CJAIFJGC">F$LANG Function</a></p>
</td>
<td class="cellalignment1646" headers="r12c1-t9 r1c2-t9">
<p>Returns the ISO abbreviation for the language name, a shorter form than the existing <code dir="ltr">LANGUAGE</code> parameter</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r13c1-t9" headers="r1c1-t9">
<p><a href="#CJAGEHJI">F$LANGUAGE Function</a></p>
</td>
<td class="cellalignment1646" headers="r13c1-t9 r1c2-t9">
<p>Returns the language and territory currently used by your session, in <code dir="ltr">VARCHAR2</code> data type, along with the database character set</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r14c1-t9" headers="r1c1-t9">
<p><a href="#CJABJEGH">F$MACHINE Function</a></p>
</td>
<td class="cellalignment1646" headers="r14c1-t9 r1c2-t9">
<p>Returns the computer (host) name for the database client that established the database session.</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r15c1-t9" headers="r1c1-t9">
<p><a href="#CJAFFDAI">F$NETWORK_PROTOCOL Function</a></p>
</td>
<td class="cellalignment1646" headers="r15c1-t9 r1c2-t9">
<p>Returns the network protocol being used for communication, as specified in the <code dir="ltr">PROTOCOL</code>=<code dir="ltr"><span class="codeinlineitalic">protocol</span></code> portion of the connect string</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r16c1-t9" headers="r1c1-t9">
<p><a href="#CJACAIHH">F$PROXY_ENTERPRISE_IDENTITY Function</a></p>
</td>
<td class="cellalignment1646" headers="r16c1-t9 r1c2-t9">
<p>Returns the Oracle Internet Directory distinguished name (DN) when the proxy user is an enterprise user</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r17c1-t9" headers="r1c1-t9">
<p><a href="#CJAIHAGD">F$SESSION_USER Function</a></p>
</td>
<td class="cellalignment1646" headers="r17c1-t9 r1c2-t9">
<p>Returns the database user name by which the current user is authenticated</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<a id="CJAIDBAH"></a>
<div id="DVADM70878" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">F$AUTHENTICATION_METHOD Function</h3>
<p>The <code dir="ltr">F$AUTHENTICATION_METHOD</code> function returns the method of authentication in <code dir="ltr">VARCHAR2</code> data type. In the list that follows, the type of user is followed by the method returned:<a id="sthref912"></a></p>
<ul>
<li>
<p>Password-authenticated enterprise user, local database user, or <code dir="ltr">SYSDBA</code>/<code dir="ltr">SYSOPER</code> using Password File; proxy with user name using password: <code dir="ltr">PASSWORD</code></p>
</li>
<li>
<p>Kerberos-authenticated enterprise or external user: <code dir="ltr">KERBEROS</code></p>
</li>
<li>
<p>SSL-authenticated enterprise or external user: <code dir="ltr">SSL</code></p>
</li>
<li>
<p>Radius-authenticated external user: <code dir="ltr">RADIUS</code></p>
</li>
<li>
<p>Operating system-authenticated external user or <code dir="ltr">SYSDBA</code>/<code dir="ltr">SYSOPER</code>: <code dir="ltr">OS</code></p>
</li>
<li>
<p>DCE-authenticated external user: <code dir="ltr">DCE</code></p>
</li>
<li>
<p>Proxy with certificate, distinguished name (DN), or user name without using password: <code dir="ltr">NONE</code></p>
</li>
</ul>
<p>You can use <code dir="ltr">IDENTIFICATION_TYPE</code> to distinguish between external and enterprise users when the authentication method is Password, Kerberos, or SSL.</p>
<p class="subhead2"><a id="DVADM70879"></a>Syntax</p>
<pre dir="ltr">
DVF.F$AUTHENTICATION_METHOD () 
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70880"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70881"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check SSL Authentication Method',
  rule_expr =&gt; 'DVF.F$AUTHENTICATION_METHOD = ''SSL''');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAJIFIA"></a>
<div id="DVADM70886" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">F$CLIENT_IP Function</h3>
<p>The <code dir="ltr">F$CLIENT_IP</code> function returns the IP address of the computer from which the client is connected, in <code dir="ltr">VARCHAR2</code> data type.<a id="sthref913"></a></p>
<p class="subhead2"><a id="DVADM70887"></a>Syntax</p>
<pre dir="ltr">
DVF.F$CLIENT_IP ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70888"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70889"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check Client IP Address',
  rule_expr =&gt; 'DVF.F$CLIENT_IP BETWEEN ''192.0.2.10'' AND ''192.0.2.20''');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAJJAHE"></a>
<div id="DVADM70890" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">F$DATABASE_DOMAIN Function</h3>
<p>The <code dir="ltr">F$DATABASE_DOMAIN</code> function returns the domain of the database as specified in the <code dir="ltr">DB_DOMAIN</code> initialization parameter, in <code dir="ltr">VARCHAR2</code> data type.<a id="sthref914"></a></p>
<p class="subhead2"><a id="DVADM70891"></a>Syntax</p>
<pre dir="ltr">
DVF.F$DATABASE_DOMAIN ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70892"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70893"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check Client Database Domain',
  rule_expr =&gt; 'DVF.F$DATABASE_DOMAIN NOT IN (''EXAMPLE'', ''YOURDOMAIN'')');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAJJIAE"></a>
<div id="DVADM70894" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">F$DATABASE_HOSTNAME Function</h3>
<p>The <code dir="ltr">F$DATABASE_HOSTNAME</code> function returns the host name of the computer on which the instance is running, in <code dir="ltr">VARCHAR2</code> data type.<a id="sthref915"></a></p>
<p class="subhead2"><a id="DVADM70895"></a>Syntax</p>
<pre dir="ltr">
DVF.F$DATABASE_HOSTNAME ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70896"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70897"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check Host Name',
  rule_expr =&gt; 'DVF.F$DATABASE_HOSTNAME IN (''SHOBEEN'', ''MAU'')');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJACCIJB"></a>
<div id="DVADM70898" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">F$DATABASE_INSTANCE Function</h3>
<p>The <code dir="ltr">F$DATABASE_INSTANCE</code> function returns the instance identification number of the current database instance, in <code dir="ltr">VARCHAR2</code> data type.<a id="sthref916"></a></p>
<p class="subhead2"><a id="DVADM70899"></a>Syntax</p>
<pre dir="ltr">
DVF.F$DATABASE_INSTANCE ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70900"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70901"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check Database Instance ID',
  rule_expr =&gt; 'DVF.F$DATABASE_INSTANCE = ''SALES_DB''');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJABHAGH"></a>
<div id="DVADM70902" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">F$DATABASE_IP Function</h3>
<p>The <code dir="ltr">F$DATABASE_IP</code> function returns the IP address of the computer on which the database instance is running, in <code dir="ltr">VARCHAR2</code> data type.<a id="sthref917"></a></p>
<p class="subhead2"><a id="DVADM70903"></a>Syntax</p>
<pre dir="ltr">
DVF.F$DATABASE_IP ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70904"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70905"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check Database IP address',
  rule_expr =&gt; 'DVF.F$DATABASE_IP = ''192.0.2.5''');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAFDIDA"></a>
<div id="DVADM70906" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">F$DATABASE_NAME Function</h3>
<p>The <code dir="ltr">F$DATABASE_NAME</code> function returns the name of the database as specified in the <code dir="ltr">DB_NAME</code> initialization parameter, in <code dir="ltr">VARCHAR2</code> data type.<a id="sthref918"></a></p>
<p class="subhead2"><a id="DVADM70907"></a>Syntax</p>
<pre dir="ltr">
DVF.F$DATABASE_NAME ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70908"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70909"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check Database DB_NAME Name',
  rule_expr =&gt; 'DVF.F$DATABASE_NAME = ''ORCL''');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAECIAA"></a>
<div id="DVADM70910" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">F$DOMAIN Function</h3>
<p>The <code dir="ltr">F$DOMAIN</code> function returns a named collection of physical, configuration, or implementation-specific factors in the run-time environment (for example, a networked IT environment or subset of it) that operates at a specific sensitivity level. The return type is <code dir="ltr">VARCHAR2</code>. <a id="sthref919"></a><a id="sthref920"></a></p>
<p>You <a id="sthref921"></a>can identify a domain using factors such as host name, IP address, and database instance names of the Oracle Database Vault nodes in a secure access path to the database. Each domain can be uniquely determined using a combination of the factor identifiers that identify the domain. You can use these identifying factors and possibly additional factors to define the Maximum Security Label within the domain. This restricts data access and commands, depending on the physical factors about the Oracle Database Vault session. Example domains of interest may be Corporate Sensitive, Internal Public, Partners, and Customers.</p>
<p class="subhead2"><a id="DVADM70911"></a>Syntax</p>
<pre dir="ltr">
DVF.F$DOMAIN ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70912"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70913"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check Domain',
  rule_expr =&gt; 'DVF.F$DOMAIN = ''EXAMPLE.COM''');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJABEBGC"></a>
<div id="DVADM70914" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">F$ENTERPRISE_IDENTITY Function</h3>
<p>The <code dir="ltr">F$ENTERPRISE_IDENTITY</code> function returns the enterprise-wide identity for a user, in <code dir="ltr">VARCHAR2</code> data type:<a id="sthref922"></a></p>
<ul>
<li>
<p>For enterprise users: the Oracle Internet Directory DN.</p>
</li>
<li>
<p>For external users: the external identity (Kerberos principal name, Radius and DCE schema names, operating system user name, certificate DN).</p>
</li>
<li>
<p>For local users and <code dir="ltr">SYSDBA</code>/<code dir="ltr">SYSOPER</code> logins: NULL.</p>
</li>
</ul>
<p>The value of the attribute differs by proxy method:</p>
<ul>
<li>
<p>For a proxy with DN: the Oracle Internet Directory DN of the client.</p>
</li>
<li>
<p>For a proxy with certificate: the certificate DN of the client for external users; the Oracle Internet Directory DN for global users.</p>
</li>
<li>
<p>For a proxy with user name: the Oracle Internet Directory DN if the client is an enterprise user; NULL if the client is a local database user.</p>
</li>
</ul>
<p class="subhead2"><a id="DVADM70915"></a>Syntax</p>
<pre dir="ltr">
DVF.F$ENTERPRISE_IDENTITY ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70916"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70917"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check User Enterprise Identity',
  rule_expr =&gt; 'DVF.F$ENTERPRISE_IDENTITY NOT IN (''JSMITH'', ''TSMITH'')');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAFGFGF"></a>
<div id="DVADM70918" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">F$IDENTIFICATION_TYPE Function</h3>
<p>The <code dir="ltr">F$IDENTIFICATION_TYPE</code> function returns the way the schema of a user was created in the database. Specifically, it reflects the <code dir="ltr">IDENTIFIED</code> clause in the <code dir="ltr">CREATE</code>/<code dir="ltr">ALTER USER</code> syntax. The return type is <code dir="ltr">VARCHAR2</code>. In the list that follows, the syntax used during schema creation is followed by the identification type returned:<a id="sthref923"></a></p>
<ul>
<li>
<p><code dir="ltr">IDENTIFIED BY</code> <code dir="ltr"><span class="codeinlineitalic">password</span></code><code dir="ltr">:</code> <code dir="ltr">LOCAL</code></p>
</li>
<li>
<p><code dir="ltr">IDENTIFIED EXTERNALLY</code><code dir="ltr">:</code> <code dir="ltr">EXTERNAL</code></p>
</li>
<li>
<p><code dir="ltr">IDENTIFIED GLOBALLY</code><code dir="ltr">:</code> <code dir="ltr">GLOBAL SHARED</code></p>
</li>
<li>
<p><code dir="ltr">IDENTIFIED GLOBALLY</code> <code dir="ltr">AS DN: GLOBAL PRIVATE</code></p>
</li>
</ul>
<p class="subhead2"><a id="DVADM70919"></a>Syntax</p>
<pre dir="ltr">
DVF.F$IDENTIFICATION_TYPE ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70920"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70921"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check User Schema Creation Type',
  rule_expr =&gt; 'DVF.F$IDENTIFICATION_TYPE = ''GLOBAL SHARED''');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAIFJGC"></a>
<div id="DVADM70922" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">F$LANG Function</h3>
<p>The <code dir="ltr">F$LANG</code> function returns the ISO abbreviation for the language name, a shorter form than the existing <code dir="ltr">LANGUAGE</code> parameter, for the session of the user. The return type is <code dir="ltr">VARCHAR2</code>.<a id="sthref924"></a></p>
<p>See <a class="olink NLSPG" href="../e10729/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a> for a listing of supported languages for Oracle Database.</p>
<p class="subhead2"><a id="DVADM70923"></a>Syntax</p>
<pre dir="ltr">
DVF.F$LANG ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70924"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70925"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check ISO Abbreviated Language Name',
  rule_expr =&gt; 'DVF.F$LANG IN (''EN'', ''DE'', ''FR'')');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAGEHJI"></a>
<div id="DVADM70926" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">F$LANGUAGE Function</h3>
<p>The <code dir="ltr">F$LANGUAGE</code> function returns the language and territory currently used by a user session, in <code dir="ltr">VARCHAR2</code> data type, along with the database character set, in the following form: <a id="sthref925"></a></p>
<p><code dir="ltr"><span class="codeinlineitalic">language_territory.characterset</span></code></p>
<p>See <a class="olink NLSPG" href="../e10729/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a> for a listing of supported languages and territories for Oracle Database.</p>
<p class="subhead2"><a id="DVADM70927"></a>Syntax</p>
<pre dir="ltr">
DVF.F$LANGUAGE ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70928"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70929"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check Session Language and Territory',
  rule_expr =&gt; 'DVF.F$LANGUAGE = ''AMERICAN_AMERICA.WE8ISO8859P1''');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJABJEGH"></a>
<div id="DVADM70930" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">F$MACHINE Function</h3>
<p>The <code dir="ltr">F$MACHINE</code> function returns the computer (host) name for the database client that established the database session. The return type is <code dir="ltr">VARCHAR2</code>.<a id="sthref926"></a></p>
<p class="subhead2"><a id="DVADM70931"></a>Syntax</p>
<pre dir="ltr">
DVF.F$MACHINE ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70932"></a>Parameter</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70933"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check Client Computer Host Name',
  rule_expr =&gt; 'DVF.F$MACHINE NOT IN (''SHOBEEN'', ''SEBASTIAN'')');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAFFDAI"></a>
<div id="DVADM70934" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">F$NETWORK_PROTOCOL Function</h3>
<p>The <code dir="ltr">F$NETWORK_PROTOCOL</code> function returns the network protocol being used for communication, as specified in the <code dir="ltr">PROTOCOL</code>=<code dir="ltr"><span class="codeinlineitalic">protocol</span></code> portion of the connect string. The return type is <code dir="ltr">VARCHAR2</code>.<a id="sthref927"></a></p>
<p class="subhead2"><a id="DVADM70935"></a>Syntax</p>
<pre dir="ltr">
DVF.F$NETWORK_PROTOCOL ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70936"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70937"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check Network Protocol',
  rule_expr =&gt; 'DVF.F$NETWORK_PROTOCOL = ''TCP''');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJACAIHH"></a>
<div id="DVADM70938" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">F$PROXY_ENTERPRISE_IDENTITY Function</h3>
<p>The <code dir="ltr">F$PROXY_ENTERPRISE_IDENTITY</code> function returns the Oracle Internet Directory distinguished name (DN) when the proxy user is an enterprise user. The return type is <code dir="ltr">VARCHAR2</code>.<a id="sthref928"></a></p>
<p class="subhead2"><a id="DVADM70939"></a>Syntax</p>
<pre dir="ltr">
DVF.F$PROXY_ENTERPRISE_IDENTITY ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70940"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70941"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Get OID DN of Enterprise User',
  rule_expr =&gt; 'DVF.F$PROXY_ENTERPRISE_IDENTITY = ''cn=Provisioning Admins''');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAIHAGD"></a>
<div id="DVADM70942" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">F$SESSION_USER Function</h3>
<p>The <code dir="ltr">F$SESSION_USER</code> function returns the database user name by which the current user is authenticated. This value remains the same throughout the session. The return type is <code dir="ltr">VARCHAR2</code>.<a id="sthref929"></a><a id="sthref930"></a></p>
<p class="subhead2"><a id="DVADM70943"></a>Syntax</p>
<pre dir="ltr">
DVF.F$SESSION_USER ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70944"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70945"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check Database User Name',
  rule_expr =&gt; 'DVF.F$SESSION_USER IN (''JSMITH'', ''TSMITH'')');
END;
/
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDECFAD"></a>
<div id="DVADM70946" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Oracle Database Vault PL/SQL Rule Functions</h2>
<p>Oracle Database Vault provides<a id="sthref931"></a><a id="sthref932"></a> a set of functions that you can use in rule sets to inspect the SQL statement that you want the rule set to protect. For example, if a rule set protects <code dir="ltr">SELECT ON HR.EMPLOYEES</code> under a command rule, then you could use these functions to make more informed decisions in the rule expression.</p>
<p><a href="#CHDDDEII">Table 15-9</a> lists the default rule functions.</p>
<div id="DVADM70947" class="tblhruleformal">
<p class="titleintable"><a id="sthref933"></a><a id="CHDDDEII"></a>Table 15-9 Installed Oracle Database Vault PL/SQL Rule Set Functions</p>
<table class="cellalignment1647" title="Installed Oracle Database Vault PL/SQL Rule Set Functions" summary="Rule Set Functions" dir="ltr">
<thead>
<tr class="cellalignment1639">
<th class="cellalignment1648" id="r1c1-t10">Rule Set Function</th>
<th class="cellalignment1648" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r2c1-t10" headers="r1c1-t10">
<p><a href="#CJAGCJIA">DV_SYSEVENT Function</a></p>
</td>
<td class="cellalignment1646" headers="r2c1-t10 r1c2-t10">
<p>Returns the system event firing the rule set</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r3c1-t10" headers="r1c1-t10">
<p><a href="#CJAHHJBH">DV_LOGIN_USER Function</a></p>
</td>
<td class="cellalignment1646" headers="r3c1-t10 r1c2-t10">
<p>Returns the login user name</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r4c1-t10" headers="r1c1-t10">
<p><a href="#CJAJFDGC">DV_INSTANCE_NUM Function</a></p>
</td>
<td class="cellalignment1646" headers="r4c1-t10 r1c2-t10">
<p>Returns the database instance number</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r5c1-t10" headers="r1c1-t10">
<p><a href="#CJADFHDF">DV_DATABASE_NAME Function</a></p>
</td>
<td class="cellalignment1646" headers="r5c1-t10 r1c2-t10">
<p>Returns the database name</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r6c1-t10" headers="r1c1-t10">
<p><a href="#CJADCGAI">DV_DICT_OBJ_TYPE Function</a></p>
</td>
<td class="cellalignment1646" headers="r6c1-t10 r1c2-t10">
<p>Returns the type of the dictionary object on which the database operation occurred (for example, table, procedure, view)</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r7c1-t10" headers="r1c1-t10">
<p><a href="#CJADAJIG">DV_DICT_OBJ_OWNER Function</a></p>
</td>
<td class="cellalignment1646" headers="r7c1-t10 r1c2-t10">
<p>Returns the owner of the dictionary object on which the database operation occurred</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r8c1-t10" headers="r1c1-t10">
<p><a href="#CJAHGDDA">DV_DICT_OBJ_NAME Function</a></p>
</td>
<td class="cellalignment1646" headers="r8c1-t10 r1c2-t10">
<p>Returns the name of the dictionary object on which the database operation occurred</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r9c1-t10" headers="r1c1-t10">
<p><a href="#CJAJFGJE">DV_SQL_TEXT Function</a></p>
</td>
<td class="cellalignment1646" headers="r9c1-t10 r1c2-t10">
<p>Returns the first 4000 characters of SQL text of the database statement used in the operation</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<a id="CJAGCJIA"></a>
<div id="DVADM70948" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">DV_SYSEVENT Function</h3>
<p>The <code dir="ltr">DV_SYSEVENT</code> function returns the system event firing the rule set, in <code dir="ltr">VARCHAR2</code> data type. The event name is the same as that in the syntax of the SQL statement (for example, <code dir="ltr">INSERT</code>, <code dir="ltr">CREATE</code>.)<a id="sthref934"></a></p>
<p class="subhead2"><a id="DVADM70949"></a>Syntax</p>
<pre dir="ltr">
DVSYS.DV_SYSEVENT ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70950"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70951"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Get System Event Firing the Maintenance Rule Set',
  rule_expr =&gt; 'DVSYS.DV_SYSEVENT = ''CREATE''');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAHHJBH"></a>
<div id="DVADM70952" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">DV_LOGIN_USER Function</h3>
<p>The <code dir="ltr">DV_LOGIN_USER</code> function returns the login user name, in <code dir="ltr">VARCHAR2</code> data type. <a id="sthref935"></a></p>
<p class="subhead2"><a id="DVADM70953"></a>Syntax</p>
<pre dir="ltr">
DVSYS.DV_LOGIN_USER ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70954"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70955"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check System Login User Name',
  rule_expr =&gt; 'DVSYS.DV_LOGIN_USER = ''SEBASTIAN''');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAJFDGC"></a>
<div id="DVADM70956" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">DV_INSTANCE_NUM Function</h3>
<p>The <code dir="ltr">DV_INSTANCE_NUM</code> function returns the database instance number, in <code dir="ltr">NUMBER</code> data type.<a id="sthref936"></a></p>
<p class="subhead2"><a id="DVADM70957"></a>Syntax</p>
<pre dir="ltr">
DVSYS.DV_INSTANCE_NUM ()
RETURN NUMBER;
</pre>
<p class="subhead2"><a id="DVADM70958"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70959"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check Database Instance Number',
  rule_expr =&gt; 'DVSYS.DV_INSTANCE_NUM BETWEEN 6 AND 9');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJADFHDF"></a>
<div id="DVADM70960" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">DV_DATABASE_NAME Function</h3>
<p>The <code dir="ltr">DV_DATABASE_NAME</code> function returns the database name, in <code dir="ltr">VARCHAR2</code> data type.<a id="sthref937"></a></p>
<p class="subhead2"><a id="DVADM70961"></a>Syntax</p>
<pre dir="ltr">
DVSYS.DV_DATABASE_NAME ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70962"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70963"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check Database Name',
  rule_expr =&gt; 'DVSYS.DV_DATABASE_NAME = ''ORCL''');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJADCGAI"></a>
<div id="DVADM70964" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">DV_DICT_OBJ_TYPE Function</h3>
<p>The <code dir="ltr">DV_DICT_OBJ_TYPE</code> function returns the type of the dictionary object on which the database operation occurred (for example, table, procedure, or view). The return type is <code dir="ltr">VARCHAR2</code>. <a id="sthref938"></a></p>
<p class="subhead2"><a id="DVADM70965"></a>Syntax</p>
<pre dir="ltr">
DVSYS.DV_DICT_OBJ_TYPE ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70966"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70967"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check Dictionary Object Type',
  rule_expr =&gt; 'DVSYS.DV_DICT_OBJ_TYPE IN (''TABLE'', ''VIEW'')');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJADAJIG"></a>
<div id="DVADM70968" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">DV_DICT_OBJ_OWNER Function</h3>
<p>The <code dir="ltr">DV_DICT_OBJ_OWNER</code> function returns the name of the owner of the dictionary object on which the database operation occurred. The return type is <code dir="ltr">VARCHAR2</code>.<a id="sthref939"></a></p>
<p class="subhead2"><a id="DVADM70969"></a>Syntax</p>
<pre dir="ltr">
DVSYS.DV_DICT_OBJ_OWNER ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70970"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70971"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check Dictionary Object Owner',
  rule_expr =&gt; 'DVSYS.DV_DICT_OBJ_OWNER = ''JSMITH''');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAHGDDA"></a>
<div id="DVADM70972" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">DV_DICT_OBJ_NAME Function</h3>
<p>The <code dir="ltr">DV_DICT_OBJ_NAME</code> function returns the name of the dictionary object on which the database operation occurred. The return type is <code dir="ltr">VARCHAR2</code>.<a id="sthref940"></a></p>
<p class="subhead2"><a id="DVADM70973"></a>Syntax</p>
<pre dir="ltr">
DVSYS.DV_DICT_OBJ_NAME ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70974"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70975"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check Dictionary Object Name',
  rule_expr =&gt; 'DVSYS.DV_DICT_OBJ_NAME = ''SALES''');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CJAJFGJE"></a>
<div id="DVADM70976" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">DV_SQL_TEXT Function</h3>
<p>The <code dir="ltr">DV_SQL_TEXT</code> function returns the first 4000 characters of SQL text of the database statement used in the operation The return type is <code dir="ltr">VARCHAR2</code>. <a id="sthref941"></a></p>
<p class="subhead2"><a id="DVADM70977"></a>Syntax</p>
<pre dir="ltr">
DVSYS.DV_SQL_TEXT ()
RETURN VARCHAR2;
</pre>
<p class="subhead2"><a id="DVADM70978"></a>Parameters</p>
<p>None.</p>
<p class="subhead2"><a id="DVADM70979"></a>Example</p>
<pre dir="ltr">
BEGIN 
 DBMS_MACADM.CREATE_RULE(
  rule_name =&gt; 'Check SQL Text',
  rule_expr =&gt; 'DVSYS.DV_SQL_TEXT = ''SELECT SALARY FROM HR.EMPLOYEES''');
END;
/
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDBEIII"></a>
<div id="DVADM70980" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Oracle Database Vault <a id="sthref942"></a>PL/SQL Packages</h2>
<p>Oracle Database Vault provides a collection of PL/SQL package APIs to support the maintenance and run-time behavior of Oracle Database Vault. <a href="#BABJJAFA">Table 15-10</a> lists these packages. <a href="apis_dbms_macadm.htm#CHDHHDGI">Chapter 12, "Using the DBMS_MACADM Package,"</a> describes these packages in detail.</p>
<div id="DVADM70981" class="tblhruleformal">
<p class="titleintable"><a id="sthref943"></a><a id="BABJJAFA"></a>Table 15-10 Oracle Database Vault Administrator and Run-Time PL/SQL Packages</p>
<table class="cellalignment1647" title="Oracle Database Vault Administrator and Run-Time PL/SQL Packages" summary="Data Vault administrator and runtime PL/SQL packages" dir="ltr">
<thead>
<tr class="cellalignment1639">
<th class="cellalignment1648" id="r1c1-t11">Package</th>
<th class="cellalignment1648" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r2c1-t11" headers="r1c1-t11">
<p><code dir="ltr">DBMS_MACADM</code></p>
</td>
<td class="cellalignment1646" headers="r2c1-t11 r1c2-t11">
<p>Provides for the administration of all aspects of the secure and access control configuration data. The realm owner of the Oracle Database Vault realm can grant the ability to run this package.</p>
<p>See <a href="apis_dbms_macadm.htm#CHDHHDGI">Chapter 12, "Using the DBMS_MACADM Package,"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r3c1-t11" headers="r1c1-t11">
<p><code dir="ltr">DBMS_MACSEC_ROLES</code></p>
</td>
<td class="cellalignment1646" headers="r3c1-t11 r1c2-t11">
<p>Provides the <code dir="ltr">CAN_SET_ROLE</code> method to check whether the user invoking the method is authorized to use the specified Oracle Database Vault secure application role. The authorization is determined by checking the rule set associated with the role.</p>
<p>The API also provides a method to issue the <code dir="ltr">SET ROLE</code> statement for a Oracle Database Vault Secure Application Role. Before <code dir="ltr">SET ROLE</code> is issued, the <code dir="ltr">CAN_SET_ROLE</code> method is called to check the rule set associated with the role. Run-time rule set behavior such as auditing, failure processing, and event handling occur during this process. The package is available to the general database account population.</p>
<p>See <a href="apis_macsec_roles.htm#BABFHCCG">Chapter 13, "Using the DBMS_MACSEC_ROLES Package,"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment1639">
<td class="cellalignment1646" id="r4c1-t11" headers="r1c1-t11">
<p><code dir="ltr">DBMS_MACUTL</code></p>
</td>
<td class="cellalignment1646" headers="r4c1-t11 r1c2-t11">
<p>Defines several constants and utility methods that are commonly used by other Oracle Database Vault packages, such as code/message lookup, error handling, data conversion, and privilege checks. This package can be run by the general database account population. This allows for security developers to leverage the constants in scripted configuration files. Utility methods such as <code dir="ltr">USER_HAS_ROLE</code> can also be used in Oracle Database Vault rules.</p>
<p>See <a href="apis_dbms_macutl.htm#CIHIDIDC">Chapter 14, "Using the DBMS_MACUTL Package,"</a> for more information.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
There are several procedures in the <code dir="ltr">DBMS_MACADM</code> package that are not exposed in the Oracle Database Vault Administration Web application. The procedures that are not exposed include:
<ul>
<li>
<p><code dir="ltr">CREATE_DOMAIN_IDENTITY</code></p>
</li>
<li>
<p><code dir="ltr">CREATE_FACTOR_TYPE</code></p>
</li>
<li>
<p><code dir="ltr">DELETE_FACTOR_TYPE</code></p>
</li>
<li>
<p><code dir="ltr">RENAME_FACTOR_TYPE</code></p>
</li>
<li>
<p><code dir="ltr">UPDATE_FACTOR_TYPE</code></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1638">
<tr>
<td class="cellalignment1646">
<table class="cellalignment1643">
<tr>
<td class="cellalignment1642"><a href="apis_dbms_macutl.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1642"><a href="views.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1650">
<table class="cellalignment1641">
<tr>
<td class="cellalignment1642"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1642"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1642"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1642"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1642"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1642"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
