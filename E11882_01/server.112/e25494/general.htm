<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Managing Schema Objects</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1055" />
<meta name="dcterms.created" content="2015-05-05T8:27:35Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Administrator's Guide" />
<meta name="dcterms.identifier" content="E25494-07" />
<meta name="dcterms.isVersionOf" content="ADMIN" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="part4.htm" title="Previous" type="text/html" />
<link rel="Next" href="schema.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25494.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">27/49</span> <!-- End Header -->
<div id="ADMIN021" class="chapter"><a id="g1017986"></a> <a id="i1006095"></a>
<h1 class="chapter"><span class="secnum">18</span> Managing Schema Objects</h1>
<p>In this chapter:</p>
<ul>
<li>
<p><a href="#i1006150">Creating Multiple Tables and Views in a Single Operation</a></p>
</li>
<li>
<p><a href="#i1006229">Analyzing Tables, Indexes, and Clusters</a></p>
</li>
<li>
<p><a href="#i1006449">Truncating Tables and Clusters</a></p>
</li>
<li>
<p><a href="#i1006511">Enabling and Disabling Triggers</a></p>
</li>
<li>
<p><a href="#i1006599">Managing Integrity Constraints</a></p>
</li>
<li>
<p><a href="#i1007901">Renaming Schema Objects</a></p>
</li>
<li>
<p><a href="#i1006919">Managing Object Dependencies</a></p>
</li>
<li>
<p><a href="#i1007081">Managing Object Name Resolution</a></p>
</li>
<li>
<p><a href="#i1107794">Switching to a Different Schema</a></p>
</li>
<li>
<p><a href="#CHDFIFHC">Managing Editions</a></p>
</li>
<li>
<p><a href="#i1007290">Displaying Information About Schema Objects</a></p>
</li>
</ul>
<a id="i1006150"></a>
<div id="ADMIN11523" class="sect1">
<h2 class="sect1">Creating Multiple Tables and Views in a Single Operation</h2>
<p><a id="sthref1895"></a><a id="sthref1896"></a>You can create several tables and views and grant privileges in one operation using the <code dir="ltr">CREATE SCHEMA</code> statement. If an individual table, view or grant fails, the entire statement is rolled back. None of the objects are created, nor are the privileges granted.</p>
<p>Specifically, the <code dir="ltr">CREATE SCHEMA</code> statement can include <span class="italic">only</span> <code dir="ltr">CREATE TABLE</code>, <code dir="ltr">CREATE VIEW</code>, and <code dir="ltr">GRANT</code> statements. You must have the privileges necessary to issue the included statements. You are not actually creating a schema, that is done when the user is created with a <code dir="ltr">CREATE USER</code> statement. Rather, you are populating the schema.</p>
<p>The following statement creates two tables and a view that joins data from the two tables:</p>
<pre dir="ltr">
CREATE SCHEMA AUTHORIZATION scott
    CREATE TABLE dept (
        deptno NUMBER(3,0) PRIMARY KEY,
        dname VARCHAR2(15),
        loc VARCHAR2(25))
    CREATE TABLE emp (
        empno NUMBER(5,0) PRIMARY KEY,
        ename VARCHAR2(15) NOT NULL,
        job VARCHAR2(10),
        mgr NUMBER(5,0),
        hiredate DATE DEFAULT (sysdate),
        sal NUMBER(7,2),
        comm NUMBER(7,2),
        deptno NUMBER(3,0) NOT NULL
        CONSTRAINT dept_fkey REFERENCES dept)
   CREATE VIEW sales_staff AS
        SELECT empno, ename, sal, comm
        FROM emp
        WHERE deptno = 30
        WITH CHECK OPTION CONSTRAINT sales_staff_cnst
        GRANT SELECT ON sales_staff TO human_resources;
</pre>
<p>The <code dir="ltr">CREATE SCHEMA</code> statement does not support Oracle Database extensions to the ANSI <code dir="ltr">CREATE TABLE</code> and <code dir="ltr">CREATE VIEW</code> statements, including the <code dir="ltr">STORAGE</code> clause.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF01313" href="../../server.112/e41084/statements_6014.htm#SQLRF01313"><span class="italic">Oracle Database SQL Language Reference</span></a> for syntax and other information about the <code dir="ltr">CREATE SCHEMA</code> statement</div>
</div>
<!-- class="sect1" -->
<a id="i1006229"></a>
<div id="ADMIN11524" class="sect1">
<h2 class="sect1">Analyzing Tables, Indexes, and Clusters</h2>
<p><a id="sthref1897"></a><a id="sthref1898"></a><a id="sthref1899"></a><a id="sthref1900"></a><a id="sthref1901"></a>You analyze a schema object (table, index, or cluster) to:</p>
<ul>
<li>
<p>Collect and manage statistics for it</p>
</li>
<li>
<p>Verify the validity of its storage format</p>
</li>
<li>
<p>Identify migrated and chained rows of a table or cluster</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1"><a id="i2151323"></a>Note:</p>
Do not use the <code dir="ltr">COMPUTE</code> and <code dir="ltr">ESTIMATE</code> clauses of <code dir="ltr">ANALYZE</code> to collect optimizer statistics. These clauses have been deprecated. Instead, use the <code dir="ltr">DBMS_STATS</code> package, which lets you collect statistics in parallel, collect global statistics for partitioned objects, and fine tune your statistics collection in other ways. The cost-based optimizer, which depends upon statistics, will eventually use only statistics that have been collected by <code dir="ltr">DBMS_STATS</code>. See <a class="olink ARPLS059" href="../../appdev.112/e40758/d_stats.htm#ARPLS059"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information on the <code dir="ltr">DBMS_STATS</code> package.
<p>You must use the <code dir="ltr">ANALYZE</code> statement (rather than <code dir="ltr">DBMS_STATS</code>) for statistics collection not related to the cost-based optimizer, such as:</p>
<ul>
<li>
<p>To use the <code dir="ltr">VALIDATE</code> or <code dir="ltr">LIST</code> <code dir="ltr">CHAINED</code> <code dir="ltr">ROWS</code> clauses</p>
</li>
<li>
<p>To collect information on freelist blocks</p>
</li>
</ul>
</div>
<p>The following topics are discussed in this section:</p>
<ul>
<li>
<p><a href="#i1006266">Using DBMS_STATS to Collect Table and Index Statistics</a></p>
</li>
<li>
<p><a href="#i1006350">Validating Tables, Indexes, Clusters, and Materialized Views</a></p>
</li>
<li>
<p><a href="#i1006369">Listing Chained Rows of Tables and Clusters</a></p>
</li>
</ul>
<a id="i1006266"></a>
<div id="ADMIN11525" class="sect2">
<h3 class="sect2">Using DBMS_STATS to Collect Table and Index Statistics</h3>
<p>You can use the <code dir="ltr">DBMS_STATS</code> package or the <code dir="ltr">ANALYZE</code> statement to gather statistics about the physical storage characteristics of a table, index, or cluster. These statistics are stored in the data dictionary and can be used by the optimizer to choose the most efficient execution plan for SQL statements accessing analyzed objects.</p>
<p>Oracle recommends using the more versatile <code dir="ltr">DBMS_STATS</code> package for gathering optimizer statistics, but you must use the <code dir="ltr">ANALYZE</code> statement to collect statistics unrelated to the optimizer, such as empty blocks, average space, and so forth.</p>
<p>The <code dir="ltr"><a id="sthref1902"></a><a id="sthref1903"></a>DBMS_STATS</code> package allows both the gathering of statistics, including utilizing parallel execution, and the external manipulation of statistics. Statistics can be stored in tables outside of the data dictionary, where they can be manipulated without affecting the optimizer. Statistics can be copied between databases or backup copies can be made.</p>
<p>The following <code dir="ltr">DBMS_STATS</code> procedures enable the gathering of optimizer statistics:</p>
<ul>
<li>
<p><code dir="ltr">GATHER_INDEX_STATS</code></p>
</li>
<li>
<p><code dir="ltr">GATHER_TABLE_STATS</code></p>
</li>
<li>
<p><code dir="ltr">GATHER_SCHEMA_STATS</code></p>
</li>
<li>
<p><code dir="ltr">GATHER_DATABASE_STATS</code></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink PFGRF003" href="../../server.112/e41573/stats.htm#PFGRF003"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for information about using <code dir="ltr">DBMS_STATS</code> to gather statistics for the optimizer</p>
</li>
<li>
<p><a class="olink ARPLS059" href="../../appdev.112/e40758/d_stats.htm#ARPLS059"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for a description of the <code dir="ltr">DBMS_STATS</code> package</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1006350"></a>
<div id="ADMIN11526" class="sect2">
<h3 class="sect2">Validating Tables, Indexes, Clusters, and Materialized Views</h3>
<p><a id="sthref1904"></a><a id="sthref1905"></a><a id="sthref1906"></a><a id="sthref1907"></a><a id="sthref1908"></a><a id="sthref1909"></a>To verify the integrity of the structure of a table, index, cluster, or materialized view, use the <code dir="ltr">ANALYZE</code> statement with the <code dir="ltr">VALIDATE STRUCTURE</code> option. If the structure is valid, no error is returned. However, if the structure is corrupt, you receive an error message.</p>
<p>For example, in rare cases such as hardware or other system failures, an index can become corrupted and not perform correctly. When validating the index, you can confirm that every entry in the index points to the correct row of the associated table. If the index is corrupt, you can drop and re-create it.</p>
<p>If a table, index, or cluster is corrupt, you should drop it and re-create it. If a materialized view is corrupt, perform a complete refresh and ensure that you have remedied the problem. If the problem is not corrected, drop and re-create the materialized view.</p>
<p>The following statement analyzes the <code dir="ltr">emp</code> table:</p>
<pre dir="ltr">
ANALYZE TABLE emp VALIDATE STRUCTURE;
</pre>
<p><a id="sthref1910"></a>You can validate an object and all dependent objects (for example, indexes) by including the <code dir="ltr">CASCADE</code> option. The following statement validates the <code dir="ltr">emp</code> table and all associated indexes:</p>
<pre dir="ltr">
ANALYZE TABLE emp VALIDATE STRUCTURE CASCADE;
</pre>
<p><a id="sthref1911"></a>By default the <code dir="ltr">CASCADE</code> option performs a complete validation. Because this operation can be resource intensive, you can perform a faster version of the validation by using the <code dir="ltr">FAST</code> clause. This version checks for the existence of corruptions using an optimized check algorithm, but does not report details about the corruption. If the <code dir="ltr">FAST</code> check finds a corruption, you can then use the <code dir="ltr">CASCADE</code> option without the <code dir="ltr">FAST</code> clause to locate it. The following statement performs a fast validation on the <code dir="ltr">emp</code> table and all associated indexes:</p>
<pre dir="ltr">
ANALYZE TABLE emp VALIDATE STRUCTURE CASCADE FAST;
</pre>
<p><a id="sthref1912"></a>You can specify that you want to perform structure validation online while DML is occurring against the object being validated. Validation is less comprehensive with ongoing DML affecting the object, but this is offset by the flexibility of being able to perform <code dir="ltr">ANALYZE</code> online. The following statement validates the <code dir="ltr">emp</code> table and all associated indexes online:</p>
<pre dir="ltr">
ANALYZE TABLE emp VALIDATE STRUCTURE CASCADE ONLINE;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF01105" href="../../server.112/e41084/statements_4005.htm#SQLRF01105"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information on the <code dir="ltr">ANALYZE</code> statement</div>
</div>
<!-- class="sect2" -->
<a id="i1006369"></a>
<div id="ADMIN11527" class="sect2">
<h3 class="sect2">Listing Chained Rows of Tables and Clusters</h3>
<p><a id="sthref1913"></a><a id="sthref1914"></a>You can look at the chained and migrated rows of a table or cluster using the <code dir="ltr">ANALYZE</code> statement with the <code dir="ltr">LIST</code> <code dir="ltr">CHAINED</code> <code dir="ltr">ROWS</code> clause. The results of this statement are stored in a specified table created explicitly to accept the information returned by the <code dir="ltr">LIST</code> <code dir="ltr">CHAINED</code> <code dir="ltr">ROWS</code> clause. These results are useful in determining whether you have enough room for updates to rows.</p>
<div id="ADMIN11528" class="sect3"><a id="sthref1915"></a>
<h4 class="sect3">Creating a CHAINED_ROWS Table</h4>
<p><a id="sthref1916"></a>To create the table to accept data returned by an <code dir="ltr">ANALYZE...LIST</code> <code dir="ltr">CHAINED</code> <code dir="ltr">ROWS</code> statement, execute the <a id="sthref1917"></a><a id="sthref1918"></a><code dir="ltr">UTLCHAIN.SQL</code> or <code dir="ltr">UTLCHN1.SQL</code> script. These scripts are provided by the database. They create a table named <code dir="ltr"><a id="sthref1919"></a>CHAINED_ROWS</code> in the schema of the user submitting the script.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Your choice of script to execute for creating the <code dir="ltr">CHAINED_ROWS</code> table depends on the compatibility level of your database and the type of table you are analyzing. See the <a class="olink SQLRF01105" href="../../server.112/e41084/statements_4005.htm#SQLRF01105"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information.</div>
<p>After a <code dir="ltr">CHAINED_ROWS</code> table is created, you specify it in the <code dir="ltr">INTO</code> clause of the <code dir="ltr">ANALYZE</code> statement. For example, the following statement inserts rows containing information about the chained rows in the <code dir="ltr">emp_dept</code> cluster into the <code dir="ltr">CHAINED_ROWS</code> table:</p>
<pre dir="ltr">
ANALYZE CLUSTER emp_dept LIST CHAINED ROWS INTO CHAINED_ROWS;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink REFRN29502" href="../../server.112/e40402/statviews_2150.htm#REFRN29502"><span class="italic">Oracle Database Reference</span></a> for a description of the <code dir="ltr">CHAINED_ROWS</code> table</p>
</li>
<li>
<p><a href="schema.htm#CHDHBHAB">"Using the Segment Advisor"</a> for information on how the Segment Advisor reports tables with excess row chaining.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="ADMIN11529" class="sect3"><a id="sthref1920"></a>
<h4 class="sect3">Eliminating Migrated or Chained Rows in a Table</h4>
<p>You can use the information in the <code dir="ltr">CHAINED_ROWS</code> table to reduce or eliminate migrated and <a id="sthref1921"></a><a id="sthref1922"></a>chained rows in an existing table. Use the following procedure.</p>
<ol>
<li>
<p>Use the <code dir="ltr">ANALYZE</code> statement to collect information about migrated and chained rows.</p>
<pre dir="ltr">
ANALYZE TABLE order_hist LIST CHAINED ROWS;
</pre></li>
<li>
<p>Query the output table:</p>
<pre dir="ltr">
SELECT *
FROM CHAINED_ROWS
WHERE TABLE_NAME = 'ORDER_HIST';

OWNER_NAME  TABLE_NAME  CLUST... HEAD_ROWID          TIMESTAMP
----------  ----------  -----... ------------------  ---------
SCOTT       ORDER_HIST       ... AAAAluAAHAAAAA1AAA  04-MAR-96
SCOTT       ORDER_HIST       ... AAAAluAAHAAAAA1AAB  04-MAR-96
SCOTT       ORDER_HIST       ... AAAAluAAHAAAAA1AAC  04-MAR-96
</pre>
<p>The output lists all rows that are either migrated or chained.</p>
</li>
<li>
<p>If the output table shows that you have many migrated or chained rows, then you can eliminate migrated rows by continuing through the following steps:</p>
</li>
<li>
<p>Create an intermediate table with the same columns as the existing table to hold the migrated and chained rows:</p>
<pre dir="ltr">
CREATE TABLE int_order_hist
   AS SELECT *
      FROM order_hist
      WHERE ROWID IN
         (SELECT HEAD_ROWID
            FROM CHAINED_ROWS
            WHERE TABLE_NAME = 'ORDER_HIST');
</pre></li>
<li>
<p>Delete the migrated and chained rows from the existing table:</p>
<pre dir="ltr">
DELETE FROM order_hist
   WHERE ROWID IN
      (SELECT HEAD_ROWID
         FROM CHAINED_ROWS
         WHERE TABLE_NAME = 'ORDER_HIST');
</pre></li>
<li>
<p>Insert the rows of the intermediate table into the existing table:</p>
<pre dir="ltr">
INSERT INTO order_hist
   SELECT *
   FROM int_order_hist;
</pre></li>
<li>
<p>Drop the intermediate table:</p>
<pre dir="ltr">
DROP TABLE int_order_history;
</pre></li>
<li>
<p>Delete the information collected in step 1 from the output table:</p>
<pre dir="ltr">
DELETE FROM CHAINED_ROWS
   WHERE TABLE_NAME = 'ORDER_HIST';
</pre></li>
<li>
<p>Use the <code dir="ltr">ANALYZE</code> statement again, and query the output table.</p>
</li>
</ol>
<p>Any rows that appear in the output table are chained. You can eliminate chained rows only by increasing your data block size. It might not be possible to avoid chaining in all situations. Chaining is often unavoidable with tables that have a <code dir="ltr">LONG</code> column or large <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code> columns.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006449"></a>
<div id="ADMIN11530" class="sect1">
<h2 class="sect1">Truncating Tables and Clusters</h2>
<p><a id="sthref1923"></a><a id="sthref1924"></a>You can delete all rows of a table or all rows in a group of clustered tables so that the table (or cluster) still exists, but is completely empty. For example, consider a table that contains monthly data, and at the end of each month, you must empty it (delete all rows) after archiving its data.</p>
<p>To delete all rows from a table, you have the following options:</p>
<ul>
<li>
<p>Use the <code dir="ltr">DELETE</code> statement.</p>
</li>
<li>
<p>Use the <code dir="ltr">DROP</code> and <code dir="ltr">CREATE</code> statements.</p>
</li>
<li>
<p>Use the <code dir="ltr">TRUNCATE</code> statement.</p>
</li>
</ul>
<p>These options are discussed in the following sections</p>
<div id="ADMIN11531" class="sect2"><a id="sthref1925"></a>
<h3 class="sect2">Using DELETE</h3>
<p>You can delete the rows of a table using the <code dir="ltr">DELETE</code> statement. For example, the following statement deletes all rows from the <code dir="ltr">emp</code> table:</p>
<pre dir="ltr">
DELETE FROM emp;
</pre>
<p>If there are many rows present in a table or cluster when using the <code dir="ltr">DELETE</code> statement, significant system resources are consumed as the rows are deleted. For example, CPU time, redo log space, and undo segment space from the table and any associated indexes require resources. Also, as each row is deleted, triggers can be fired. The space previously allocated to the resulting empty table or cluster remains associated with that object. With <code dir="ltr">DELETE</code> you can choose which rows to delete, whereas <code dir="ltr">TRUNCATE</code> and <code dir="ltr">DROP</code> affect the entire object.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF01505" href="../../server.112/e41084/statements_8005.htm#SQLRF01505"><span class="italic">Oracle Database SQL Language Reference</span></a> for syntax and other information about the <code dir="ltr">DELETE</code> statement</div>
</div>
<!-- class="sect2" -->
<div id="ADMIN11532" class="sect2"><a id="sthref1926"></a>
<h3 class="sect2">Using DROP and CREATE</h3>
<p>You can drop a table and then re-create the table. For example, the following statements drop and then re-create the <code dir="ltr">emp</code> table:</p>
<pre dir="ltr">
DROP TABLE emp;
CREATE TABLE emp ( ... );
</pre>
<p>When dropping and re-creating a table or cluster, all associated indexes, integrity constraints, and triggers are also dropped, and all objects that depend on the dropped table or clustered table are invalidated. Also, all grants for the dropped table or clustered table are dropped.</p>
</div>
<!-- class="sect2" -->
<a id="CHDHCDCB"></a>
<div id="ADMIN11533" class="sect2">
<h3 class="sect2">Using TRUNCATE</h3>
<p><a id="sthref1927"></a><a id="sthref1928"></a><a id="sthref1929"></a>You can delete all rows of the table using the <code dir="ltr">TRUNCATE</code> statement. For example, the following statement truncates the <code dir="ltr">emp</code> table:</p>
<pre dir="ltr">
TRUNCATE TABLE emp;
</pre>
<p>Using the <code dir="ltr">TRUNCATE</code> statement provides a fast, efficient method for deleting all rows from a table or cluster. A <code dir="ltr">TRUNCATE</code> statement does not generate any undo information and it commits immediately. It is a DDL statement and cannot be rolled back. A <code dir="ltr">TRUNCATE</code> statement does not affect any structures associated with the table being truncated (constraints and triggers) or authorizations. A <code dir="ltr">TRUNCATE</code> statement also specifies whether space currently allocated for the table is returned to the containing tablespace after truncation.</p>
<p><a id="sthref1930"></a>You can truncate any table or cluster in your own schema. Any user who has the <code dir="ltr">DROP ANY TABLE</code> system privilege can truncate a table or cluster in any schema.</p>
<p>Before truncating a table or clustered table containing a parent key, all referencing foreign keys in different tables must be disabled. A self-referential constraint does not have to be disabled.</p>
<p>As a <code dir="ltr">TRUNCATE</code> statement deletes rows from a table, triggers associated with the table are not fired. Also, a <code dir="ltr">TRUNCATE</code> statement does not generate any audit information corresponding to <code dir="ltr">DELETE</code> statements if auditing is enabled. Instead, a single audit record is generated for the <code dir="ltr">TRUNCATE</code> statement being issued.</p>
<p>A hash cluster cannot be truncated, nor can tables within a hash or index cluster be individually truncated. Truncation of an index cluster deletes all rows from all tables in the cluster. If all the rows must be deleted from an individual clustered table, use the <code dir="ltr">DELETE</code> statement or drop and re-create the table.</p>
<p><a id="sthref1931"></a><a id="sthref1932"></a><a id="sthref1933"></a>The <code dir="ltr">TRUNCATE</code> statement has several options that control whether space currently allocated for a table or cluster is returned to the containing tablespace after truncation.</p>
<p>These options also apply to any associated indexes. When a table or cluster is truncated, all associated indexes are also truncated. The storage parameters for a truncated table, cluster, or associated indexes are not changed as a result of the truncation.</p>
<p>These <code dir="ltr">TRUNCATE</code> options are:</p>
<ul>
<li>
<p><code dir="ltr">DROP STORAGE</code>, the default option, reduces the number of extents allocated to the resulting table to the original setting for <code dir="ltr">MINEXTENTS</code>. Freed extents are then returned to the system and can be used by other objects.</p>
</li>
<li>
<p><code dir="ltr">DROP</code> <code dir="ltr">ALL</code> <code dir="ltr">STORAGE</code> drops the segment. In addition to the <code dir="ltr">TRUNCATE</code> <code dir="ltr">TABLE</code> statement, <code dir="ltr">DROP</code> <code dir="ltr">ALL</code> <code dir="ltr">STORAGE</code> also applies to the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> <code dir="ltr">TRUNCATE</code> <code dir="ltr">(SUB)PARTITION</code> statement. This option also drops any dependent object segments associated with the partition being truncated.</p>
<p><code dir="ltr">DROP</code> <code dir="ltr">ALL</code> <code dir="ltr">STORAGE</code> is not supported for clusters.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This functionality is available with Oracle Database 11<span class="italic">g</span> release 2 (11.2.0.2).</div>
<pre dir="ltr">
TRUNCATE TABLE emp DROP ALL STORAGE;
</pre></li>
<li>
<p><code dir="ltr">REUSE STORAGE</code> specifies that all space currently allocated for the table or cluster remains allocated to it. For example, the following statement truncates the <code dir="ltr">emp_dept</code> cluster, leaving all extents previously allocated for the cluster available for subsequent inserts and deletes:</p>
<pre dir="ltr">
TRUNCATE CLUSTER emp_dept REUSE STORAGE;
</pre></li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF" href="../e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for syntax and other information about the <code dir="ltr">TRUNCATE TABLE</code> and <code dir="ltr">TRUNCATE CLUSTER</code> statements</p>
</li>
<li>
<p><a class="olink DBSEG006" href="../../network.112/e36292/auditing.htm#DBSEG006"><span class="italic">Oracle Database Security Guide</span></a> for information about auditing</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006511"></a>
<div id="ADMIN11534" class="sect1">
<h2 class="sect1">Enabling and Disabling Triggers</h2>
<p>Database triggers are procedures that are stored in the database and activated ("fired") when specific conditions occur, such as adding a row to a table. You can use triggers to supplement the standard capabilities of the database to provide a highly customized database management system. For example, you can create a trigger to restrict DML operations against a table, allowing only statements issued during regular business hours.</p>
<p>Database triggers can be associated with a table, schema, or database. They are implicitly fired when:</p>
<ul>
<li>
<p>DML statements are executed (<code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, <code dir="ltr">DELETE</code>) against an associated table</p>
</li>
<li>
<p>Certain DDL statements are executed (for example: <code dir="ltr">ALTER</code>, <code dir="ltr">CREATE</code>, <code dir="ltr">DROP</code>) on objects within a database or schema</p>
</li>
<li>
<p>A specified database event occurs (for example: <code dir="ltr">STARTUP</code>, <code dir="ltr">SHUTDOWN</code>, <code dir="ltr">SERVERERROR</code>)</p>
</li>
</ul>
<p>This is not a complete list. See the <a class="olink SQLRF01405" href="../../server.112/e41084/statements_7004.htm#SQLRF01405"><span class="italic">Oracle Database SQL Language Reference</span></a> for a full list of statements and database events that cause triggers to fire</p>
<p>Create triggers with the <code dir="ltr">CREATE TRIGGER</code> statement. They can be defined as firing <code dir="ltr">BEFORE</code> or <code dir="ltr">AFTER</code> the triggering event, or <code dir="ltr">INSTEAD OF</code> it. The following statement creates a trigger <code dir="ltr">scott.emp_permit_changes</code> on table <code dir="ltr">scott.emp</code>. The trigger fires before any of the specified statements are executed.</p>
<pre dir="ltr">
CREATE TRIGGER scott.emp_permit_changes
     BEFORE
     DELETE OR INSERT OR UPDATE
     ON scott.emp
     .
     .
     .
<span class="italic">pl/sql block</span> 
     .
     .
     .
</pre>
<p>You can later remove a trigger from the database by issuing the <code dir="ltr">DROP TRIGGER</code> statement.</p>
<p>A trigger can be in either of two distinct modes:</p>
<ul>
<li>
<p>Enabled</p>
<p>An enabled trigger executes its trigger body if a triggering statement is issued and the trigger restriction, if any, evaluates to true. By default, triggers are enabled when first created.</p>
</li>
<li>
<p>Disabled</p>
<p>A disabled trigger does not execute its trigger body, even if a triggering statement is issued and the trigger restriction (if any) evaluates to true.</p>
</li>
</ul>
<p><a id="sthref1934"></a>To enable or disable triggers using the <code dir="ltr">ALTER TABLE</code> statement, you must own the table, have the <code dir="ltr">ALTER</code> object privilege for the table, or have the <code dir="ltr">ALTER ANY TABLE</code> system privilege. To enable or disable an individual trigger using the <code dir="ltr">ALTER TRIGGER</code> statement, you must own the trigger or have the <code dir="ltr">ALTER ANY TRIGGER</code> system privilege.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT118" href="../../server.112/e40540/srvrside.htm#CNCPT118"><span class="italic">Oracle Database Concepts</span></a> for a more detailed description of triggers</p>
</li>
<li>
<p><a class="olink SQLRF01405" href="../../server.112/e41084/statements_7004.htm#SQLRF01405"><span class="italic">Oracle Database SQL Language Reference</span></a> for syntax of the <code dir="ltr">CREATE TRIGGER</code> statement</p>
</li>
<li>
<p><a class="olink LNPLS020" href="../../appdev.112/e25519/triggers.htm#LNPLS020"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about creating and using triggers</p>
</li>
</ul>
</div>
<div id="ADMIN11535" class="sect2"><a id="sthref1935"></a>
<h3 class="sect2">Enabling Triggers</h3>
<p><a id="sthref1936"></a><a id="sthref1937"></a>You enable a disabled trigger using the <code dir="ltr">ALTER TRIGGER</code> statement with the <code dir="ltr">ENABLE</code> option. To enable the disabled trigger named <code dir="ltr">reorder</code> on the <code dir="ltr">inventory</code> table, enter the following statement:</p>
<pre dir="ltr">
ALTER TRIGGER reorder ENABLE;
</pre>
<p><a id="sthref1938"></a>To enable all triggers defined for a specific table, use the <code dir="ltr">ALTER TABLE</code> statement with the <code dir="ltr">ENABLE ALL TRIGGERS</code> option. To enable all triggers defined for the <code dir="ltr">INVENTORY</code> table, enter the following statement:</p>
<pre dir="ltr">
ALTER TABLE inventory
    ENABLE ALL TRIGGERS;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF01101" href="../../server.112/e41084/statements_4001.htm#SQLRF01101"><span class="italic">Oracle Database SQL Language Reference</span></a> for syntax and other information about the <code dir="ltr">ALTER TRIGGER</code> statement</div>
</div>
<!-- class="sect2" -->
<div id="ADMIN11536" class="sect2"><a id="sthref1939"></a>
<h3 class="sect2">Disabling Triggers</h3>
<p><a id="sthref1940"></a>Consider temporarily disabling a trigger if one of the following conditions is true:</p>
<ul>
<li>
<p>An object that the trigger references is not available.</p>
</li>
<li>
<p>You must perform a large data load and want it to proceed quickly without firing triggers.</p>
</li>
<li>
<p>You are loading data into the table to which the trigger applies.</p>
</li>
</ul>
<p><a id="sthref1941"></a>You disable a trigger using the <code dir="ltr">ALTER TRIGGER</code> statement with the <code dir="ltr">DISABLE</code> option. To disable the trigger <code dir="ltr">reorder</code> on the <code dir="ltr">inventory</code> table, enter the following statement:</p>
<pre dir="ltr">
ALTER TRIGGER reorder DISABLE;
</pre>
<p><a id="sthref1942"></a>You can disable all triggers associated with a table at the same time using the <code dir="ltr">ALTER TABLE</code> statement with the <code dir="ltr">DISABLE ALL TRIGGERS</code> option. For example, to disable all triggers defined for the <code dir="ltr">inventory</code> table, enter the following statement:</p>
<pre dir="ltr">
ALTER TABLE inventory
    DISABLE ALL TRIGGERS;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006599"></a>
<div id="ADMIN11537" class="sect1">
<h2 class="sect1">Managing Integrity Constraints</h2>
<p>Integrity constraints are rules that restrict the values for one or more columns in a table. Constraint clauses can appear in either <code dir="ltr">CREATE TABLE</code> or <code dir="ltr">ALTER TABLE</code> statements, and identify the column or columns affected by the constraint and identify the conditions of the constraint.</p>
<p>This section discusses the concepts of constraints and identifies the SQL statements used to define and manage integrity constraints. The following topics are contained in this section:</p>
<ul>
<li>
<p><a href="#i1006646">Integrity Constraint States</a></p>
</li>
<li>
<p><a href="#i1006696">Setting Integrity Constraints Upon Definition</a></p>
</li>
<li>
<p><a href="#i1006732">Modifying, Renaming, or Dropping Existing Integrity Constraints</a></p>
</li>
<li>
<p><a href="#i1006803">Deferring Constraint Checks</a></p>
</li>
<li>
<p><a href="#i1006825">Reporting Constraint Exceptions</a></p>
</li>
<li>
<p><a href="#i1006888">Viewing Constraint Information</a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT021" href="../../server.112/e40540/datainte.htm#CNCPT021"><span class="italic">Oracle Database Concepts</span></a> for a more thorough discussion of integrity constraints</p>
</li>
<li>
<p><a class="olink ADFNS004" href="../../appdev.112/e41502/adfns_constraints.htm#ADFNS004"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for detailed information and examples of using integrity constraints in applications</p>
</li>
</ul>
</div>
</li>
</ul>
<a id="i1006646"></a>
<div id="ADMIN11538" class="sect2">
<h3 class="sect2">Integrity Constraint States<a id="sthref1943"></a></h3>
<p>You can specify that a constraint is enabled (<code dir="ltr">ENABLE</code>) or disabled (<code dir="ltr">DISABLE</code>). If a constraint is enabled, data is checked as it is entered or updated in the database, and data that does not conform to the constraint is prevented from being entered. If a constraint is disabled, then data that does not conform can be allowed to enter the database.</p>
<p>Additionally, you can specify that existing data in the table must conform to the constraint (<code dir="ltr">VALIDATE</code>). Conversely, if you specify <code dir="ltr">NOVALIDATE</code>, you are not ensured that existing data conforms.</p>
<p>An integrity constraint defined on a table can be in one of the following states:</p>
<ul>
<li>
<p><code dir="ltr">ENABLE</code>, <code dir="ltr">VALIDATE</code></p>
</li>
<li>
<p><code dir="ltr">ENABLE</code>, <code dir="ltr">NOVALIDATE</code></p>
</li>
<li>
<p><code dir="ltr">DISABLE</code>, <code dir="ltr">VALIDATE</code></p>
</li>
<li>
<p><code dir="ltr">DISABLE</code>, <code dir="ltr">NOVALIDATE</code></p>
</li>
</ul>
<p>For details about the meaning of these states and an understanding of their consequences, see the <a class="olink SQLRF52214" href="../../server.112/e41084/clauses002.htm#SQLRF52214"><span class="italic">Oracle Database SQL Language Reference.</span></a> Some of these consequences are discussed here.</p>
<div id="ADMIN11539" class="sect3"><a id="sthref1944"></a>
<h4 class="sect3">Disabling Constraints<a id="sthref1945"></a></h4>
<p>To enforce the rules defined by integrity constraints, the constraints should always be enabled. However, consider temporarily disabling the integrity constraints of a table for the following performance reasons:</p>
<ul>
<li>
<p>When loading large amounts of data into a table</p>
</li>
<li>
<p>When performing batch operations that make massive changes to a table (for example, changing every employee's number by adding 1000 to the existing number)</p>
</li>
<li>
<p>When importing or exporting one table at a time</p>
</li>
</ul>
<p>In all three cases, temporarily disabling integrity constraints can improve the performance of the operation, especially in data warehouse configurations.</p>
<p>It is possible to enter data that violates a constraint while that constraint is disabled. Thus, you should always enable the constraint after completing any of the operations listed in the preceding bullet list.</p>
</div>
<!-- class="sect3" -->
<div id="ADMIN11540" class="sect3"><a id="sthref1946"></a>
<h4 class="sect3">Enabling Constraints</h4>
<p>While a constraint is enabled, no row violating the constraint can be inserted into the table. However, while the constraint is disabled such a row can be inserted. This row is known as an exception<a id="sthref1947"></a> to the constraint. If the constraint is in the enable novalidated state, violations resulting from data entered while the constraint was disabled remain. The rows that violate the constraint must be either updated or deleted in order for the constraint to be put in the validated state.</p>
<p>You can identify exceptions to a specific integrity constraint while attempting to enable the constraint. See <a href="#i1006825">"Reporting Constraint Exceptions"</a>. All rows violating constraints are noted in an <code dir="ltr">EXCEPTIONS</code> table, which you can examine.</p>
</div>
<!-- class="sect3" -->
<div id="ADMIN11541" class="sect3"><a id="sthref1948"></a>
<h4 class="sect3"><a id="sthref1949"></a><a id="sthref1950"></a>Enable Novalidate Constraint State</h4>
<p>When a constraint is in the enable novalidate state, all subsequent statements are checked for conformity to the constraint. However, any existing data in the table is not checked. A table with enable novalidated constraints can contain invalid data, but it is not possible to add new invalid data to it. Enabling constraints in the novalidated state is most useful in data warehouse configurations that are uploading valid OLTP data.</p>
<p>Enabling a constraint does not require validation. Enabling a constraint novalidate is much faster than enabling and validating a constraint. Also, validating a constraint that is already enabled does not require any DML locks during validation (unlike validating a previously disabled constraint). Enforcement guarantees that no violations are introduced during the validation. Hence, enabling without validating enables you to reduce the downtime typically associated with enabling a constraint.</p>
</div>
<!-- class="sect3" -->
<a id="CHDFEJII"></a>
<div id="ADMIN11542" class="sect3">
<h4 class="sect3">Efficient Use of Integrity Constraints: A Procedure</h4>
<p>Using integrity constraint states in the following order can ensure the best benefits:</p>
<ol>
<li>
<p>Disable state.</p>
</li>
<li>
<p>Perform the operation (load, export, import).</p>
</li>
<li>
<p>Enable novalidate state.</p>
</li>
<li>
<p>Enable state.</p>
</li>
</ol>
<p>Some benefits of using constraints in this order are:</p>
<ul>
<li>
<p>No locks are held.</p>
</li>
<li>
<p>All constraints can go to enable state concurrently.</p>
</li>
<li>
<p>Constraint enabling is done in parallel.</p>
</li>
<li>
<p>Concurrent activity on table is permitted.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006696"></a>
<div id="ADMIN11543" class="sect2">
<h3 class="sect2">Setting Integrity Constraints Upon Definition</h3>
<p><a id="sthref1951"></a>When an integrity constraint is defined in a <code dir="ltr">CREATE TABLE</code> or <code dir="ltr">ALTER TABLE</code> statement, it can be enabled, disabled, or validated or not validated as determined by your specification of the <code dir="ltr">ENABLE</code>/<code dir="ltr">DISABLE</code> clause. If the <code dir="ltr">ENABLE</code>/<code dir="ltr">DISABLE</code> clause is not specified in a constraint definition, the database automatically enables and validates the constraint.</p>
<div id="ADMIN11544" class="sect3"><a id="sthref1952"></a>
<h4 class="sect3">Disabling Constraints Upon Definition</h4>
<p><a id="sthref1953"></a>The following <code dir="ltr">CREATE TABLE</code> and <code dir="ltr">ALTER TABLE</code> statements both define and disable integrity constraints:</p>
<pre dir="ltr">
CREATE TABLE emp (
    empno NUMBER(5) PRIMARY KEY DISABLE,   . . . ;

ALTER TABLE emp
   ADD PRIMARY KEY (empno) DISABLE;
</pre>
<p>An <code dir="ltr">ALTER TABLE</code> statement that defines and disables an integrity constraint never fails because of rows in the table that violate the integrity constraint. The definition of the constraint is allowed because its rule is not enforced.</p>
</div>
<!-- class="sect3" -->
<div id="ADMIN11545" class="sect3"><a id="sthref1954"></a>
<h4 class="sect3">Enabling Constraints Upon Definition</h4>
<p><a id="sthref1955"></a>The following <code dir="ltr">CREATE TABLE</code> and <code dir="ltr">ALTER TABLE</code> statements both define and enable integrity constraints:</p>
<pre dir="ltr">
CREATE TABLE emp (
    empno NUMBER(5) CONSTRAINT emp.pk PRIMARY KEY,   . . . ;

ALTER TABLE emp
    ADD CONSTRAINT emp.pk PRIMARY KEY (empno);
</pre>
<p>An <code dir="ltr">ALTER TABLE</code> statement that defines and attempts to enable an integrity constraint can fail because rows of the table violate the integrity constraint. If this case, the statement is rolled back and the constraint definition is not stored and not enabled.</p>
<p>When you enable a <code dir="ltr">UNIQUE</code> or <code dir="ltr">PRIMARY KEY</code> constraint an associated index is created.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
An efficient procedure for enabling a constraint that can make use of parallelism is described in <a href="#CHDFEJII">"Efficient Use of Integrity Constraints: A Procedure"</a>.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="indexes.htm#i1006566">"Creating an Index Associated with a Constraint"</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006732"></a>
<div id="ADMIN11546" class="sect2">
<h3 class="sect2">Modifying, Renaming, or Dropping Existing Integrity Constraints</h3>
<p>You can use the <code dir="ltr">ALTER TABLE</code> statement to enable, disable, modify, or drop a constraint. When the database is using a <code dir="ltr">UNIQUE</code> or <code dir="ltr">PRIMARY KEY</code> index to enforce a constraint, and constraints associated with that index are dropped or disabled<a id="sthref1956"></a><a id="sthref1957"></a><a id="sthref1958"></a><a id="sthref1959"></a>, the index is dropped, unless you specify otherwise.</p>
<p>While enabled foreign keys reference a <code dir="ltr">PRIMARY</code> or <code dir="ltr">UNIQUE</code> key, you cannot disable or drop the <code dir="ltr">PRIMARY</code> or <code dir="ltr">UNIQUE</code> key constraint or the index.</p>
<div id="ADMIN11547" class="sect3"><a id="sthref1960"></a>
<h4 class="sect3">Disabling Enabled Constraints</h4>
<p><a id="sthref1961"></a>The following statements disable integrity constraints. The second statement specifies that the associated indexes are to be kept.</p>
<pre dir="ltr">
ALTER TABLE dept
    DISABLE CONSTRAINT dname_ukey;

ALTER TABLE dept
    DISABLE PRIMARY KEY KEEP INDEX,
    DISABLE UNIQUE (dname, loc) KEEP INDEX;
</pre>
<p><a id="sthref1962"></a>The following statements enable novalidate disabled integrity constraints:</p>
<pre dir="ltr">
ALTER TABLE dept
    ENABLE NOVALIDATE CONSTRAINT dname_ukey;

ALTER TABLE dept
    ENABLE NOVALIDATE PRIMARY KEY,
    ENABLE NOVALIDATE UNIQUE (dname, loc);
</pre>
<p>The following statements enable or validate disabled integrity constraints:</p>
<pre dir="ltr">
ALTER TABLE dept
    MODIFY CONSTRAINT dname_key VALIDATE;

ALTER TABLE dept
    MODIFY PRIMARY KEY ENABLE NOVALIDATE;
</pre>
<p><a id="sthref1963"></a>The following statements enable disabled integrity constraints:</p>
<pre dir="ltr">
ALTER TABLE dept
    ENABLE CONSTRAINT dname_ukey;

ALTER TABLE dept
    ENABLE PRIMARY KEY,
    ENABLE UNIQUE (dname, loc);
</pre>
<p><a id="sthref1964"></a><a id="sthref1965"></a><a id="sthref1966"></a>To disable or drop a <code dir="ltr">UNIQUE</code> key or <code dir="ltr">PRIMARY KEY</code> constraint and all dependent <code dir="ltr">FOREIGN KEY</code> constraints in a single step, use the <code dir="ltr">CASCADE</code> option of the <code dir="ltr">DISABLE</code> or <code dir="ltr">DROP</code> clauses. For example, the following statement disables a <code dir="ltr">PRIMARY KEY</code> constraint and any <code dir="ltr">FOREIGN KEY</code> constraints that depend on it:</p>
<pre dir="ltr">
ALTER TABLE dept
    DISABLE PRIMARY KEY CASCADE;
</pre></div>
<!-- class="sect3" -->
<a id="i1006776"></a>
<div id="ADMIN11548" class="sect3">
<h4 class="sect3">Renaming Constraints</h4>
<p><a id="sthref1967"></a>The <code dir="ltr">ALTER TABLE...RENAME CONSTRAINT</code> statement enables you to rename any currently existing constraint for a table. The new constraint name must not conflict with any existing constraint names for a user.</p>
<p>The following statement renames the <code dir="ltr">dname_ukey</code> constraint for table <code dir="ltr">dept</code>:</p>
<pre dir="ltr">
ALTER TABLE dept
    RENAME CONSTRAINT dname_ukey TO dname_unikey;
</pre>
<p>When you rename a constraint, all dependencies on the base table remain valid.</p>
<p>The <code dir="ltr">RENAME CONSTRAINT</code> clause provides a means of renaming system generated constraint names.</p>
</div>
<!-- class="sect3" -->
<a id="i1006786"></a>
<div id="ADMIN11549" class="sect3">
<h4 class="sect3">Dropping Constraints</h4>
<p><a id="sthref1968"></a><a id="sthref1969"></a>You can drop an integrity constraint if the rule that it enforces is no longer true, or if the constraint is no longer needed. You can drop the constraint using the <code dir="ltr">ALTER TABLE</code> statement with one of the following clauses:</p>
<ul>
<li>
<p><code dir="ltr">DROP</code> <code dir="ltr">PRIMARY</code> <code dir="ltr">KEY</code></p>
</li>
<li>
<p><code dir="ltr">DROP</code> <code dir="ltr">UNIQUE</code></p>
</li>
<li>
<p><code dir="ltr">DROP</code> <code dir="ltr">CONSTRAINT</code></p>
</li>
</ul>
<p>The following two statements drop integrity constraints. The second statement keeps the index associated with the <code dir="ltr">PRIMARY KEY</code> constraint:</p>
<pre dir="ltr">
ALTER TABLE dept
    DROP UNIQUE (dname, loc);

ALTER TABLE emp
    DROP PRIMARY KEY KEEP INDEX,
    DROP CONSTRAINT dept_fkey;
</pre>
<p>If <code dir="ltr">FOREIGN KEY</code>s reference a <code dir="ltr">UNIQUE</code> or <code dir="ltr">PRIMARY KEY</code>, you must include the <code dir="ltr">CASCADE CONSTRAINTS</code> clause in the <code dir="ltr">DROP</code> statement, or you cannot drop the constraint.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006803"></a>
<div id="ADMIN11550" class="sect2">
<h3 class="sect2">Deferring Constraint Checks</h3>
<p>When the database checks a constraint, it signals an error if the constraint is not satisfied. You can defer checking the validity of constraints until the end of a transaction.</p>
<p>When you issue the <code dir="ltr">SET CONSTRAINTS</code> statement, the <code dir="ltr">SET CONSTRAINTS</code> mode lasts for the duration of the transaction, or until another <code dir="ltr">SET CONSTRAINTS</code> statement resets the mode.</p>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>You cannot issue a <code dir="ltr">SET CONSTRAINT</code> statement inside a trigger.</p>
</li>
<li>
<p>Deferrable unique and primary keys must use nonunique indexes.</p>
</li>
</ul>
</div>
<div id="ADMIN11551" class="sect3"><a id="sthref1970"></a>
<h4 class="sect3">Set All Constraints Deferred</h4>
<p>Within the application being used to manipulate the data, you must set all constraints deferred before you actually begin processing any data. Use the following DML statement to set all deferrable constraints deferred:</p>
<pre dir="ltr">
SET CONSTRAINTS ALL DEFERRED; 
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr">SET CONSTRAINTS</code> statement applies only to the current transaction. The defaults specified when you create a constraint remain as long as the constraint exists. The <code dir="ltr">ALTER SESSION SET CONSTRAINTS</code> statement applies for the current session only.</div>
</div>
<!-- class="sect3" -->
<div id="ADMIN11552" class="sect3"><a id="sthref1971"></a>
<h4 class="sect3">Check the Commit (Optional)</h4>
<p>You can check for constraint violations before committing by issuing the <code dir="ltr">SET CONSTRAINTS ALL IMMEDIATE</code> statement just before issuing the <code dir="ltr">COMMIT</code>. If there are any problems with a constraint, this statement fails and the constraint causing the error is identified. If you commit while constraints are violated, the transaction is rolled back and you receive an error message.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006825"></a>
<div id="ADMIN11553" class="sect2">
<h3 class="sect2">Reporting Constraint Exceptions</h3>
<p><a id="sthref1972"></a><a id="sthref1973"></a><a id="sthref1974"></a>If exceptions exist when a constraint is validated, an error is returned and the integrity constraint remains novalidated. When a statement is not successfully executed because integrity constraint exceptions exist, the statement is rolled back. If exceptions exist, you cannot validate the constraint until all exceptions to the constraint are either updated or deleted.</p>
<p>To determine which rows violate the integrity constraint, issue the <code dir="ltr">ALTER TABLE</code> statement with the <code dir="ltr">EXCEPTIONS</code> option in the <code dir="ltr">ENABLE</code> clause. The <code dir="ltr">EXCEPTIONS</code> option places the rowid, table owner, table name, and constraint name of all exception rows into a specified table.</p>
<p>You must create an appropriate exceptions report table to accept information from the <code dir="ltr">EXCEPTIONS</code> option of the <code dir="ltr">ENABLE</code> clause before enabling the constraint. You can create an exception table by executing the <code dir="ltr">UTLEXCPT.SQL</code> script or the <code dir="ltr">UTLEXPT1.SQL</code> script.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Your choice of script to execute for creating the <code dir="ltr">EXCEPTIONS</code> table depends on the type of table you are analyzing. See the <a class="olink SQLRF52229" href="../../server.112/e41084/clauses002.htm#SQLRF52229"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information.</div>
<p>Both of these scripts create a table named <code dir="ltr">EXCEPTIONS</code>. You can create additional exceptions tables with different names by modifying and resubmitting the script.</p>
<p>The following statement attempts to validate the <code dir="ltr">PRIMARY KEY</code> of the <code dir="ltr">dept</code> table, and if exceptions exist, information is inserted into a table named <code dir="ltr">EXCEPTIONS</code>:</p>
<pre dir="ltr">
ALTER TABLE dept ENABLE PRIMARY KEY EXCEPTIONS INTO EXCEPTIONS;
</pre>
<p>If duplicate primary key values exist in the <code dir="ltr">dept</code> table and the name of the <code dir="ltr">PRIMARY KEY</code> constraint on <code dir="ltr">dept</code> is <code dir="ltr">sys_c00610</code>, then the following query will display those exceptions:</p>
<pre dir="ltr">
SELECT * FROM EXCEPTIONS;
</pre>
<p>The following exceptions are shown:</p>
<pre dir="ltr">
fROWID               OWNER      TABLE_NAME      CONSTRAINT
------------------  ---------  --------------  -----------
AAAAZ9AABAAABvqAAB  SCOTT      DEPT            SYS_C00610 
AAAAZ9AABAAABvqAAG  SCOTT      DEPT            SYS_C00610 
</pre>
<p>A more informative query would be to join the rows in an exception report table and the master table to list the actual rows that violate a specific constraint, as shown in the following statement and results:</p>
<pre dir="ltr">
SELECT deptno, dname, loc FROM dept, EXCEPTIONS
    WHERE EXCEPTIONS.constraint = 'SYS_C00610'
    AND dept.rowid = EXCEPTIONS.row_id;

DEPTNO     DNAME             LOC
---------- --------------    -----------
10         ACCOUNTING        NEW YORK
10         RESEARCH          DALLAS
</pre>
<p>All rows that violate a constraint must be either updated or deleted from the table containing the constraint. When updating exceptions, you must change the value violating the constraint to a value consistent with the constraint or to a null. After the row in the master table is updated or deleted, the corresponding rows for the exception in the exception report table should be deleted to avoid confusion with later exception reports. The statements that update the master table and the exception report table should be in the same transaction to ensure transaction consistency.</p>
<p>To correct the exceptions in the previous examples, you might issue the following transaction:</p>
<pre dir="ltr">
UPDATE dept SET deptno = 20 WHERE dname = 'RESEARCH';
DELETE FROM EXCEPTIONS WHERE constraint = 'SYS_C00610';
COMMIT;
</pre>
<p>When managing exceptions, the goal is to eliminate all exceptions in your exception report table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
While you are correcting current exceptions for a table with the constraint disabled, it is possible for other users to issue statements creating new exceptions. You can avoid this by marking the constraint <code dir="ltr">ENABLE NOVALIDATE</code> before you start eliminating exceptions.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN29511" href="../../server.112/e40402/statviews_5124.htm#REFRN29511"><span class="italic">Oracle Database Reference</span></a> for a description of the <code dir="ltr">EXCEPTIONS</code> table</div>
</div>
<!-- class="sect2" -->
<a id="i1006888"></a>
<div id="ADMIN11554" class="sect2">
<h3 class="sect2">Viewing Constraint Information</h3>
<p>Oracle Database provides the following views that enable you to see constraint definitions on tables and to identify columns that are specified in constraints:</p>
<div class="inftblruleinformal">
<table class="cellalignment1333" title="Viewing Information About Constraints" summary="Column 1 displays the names of views that identify constraint definitions on tables. Column 2 describes each view." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t21">View</th>
<th class="cellalignment1334" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t21" headers="r1c1-t21"><code dir="ltr">DBA_CONSTRAINTS</code>
<p><code dir="ltr">ALL_CONSTRAINTS</code></p>
<p><code dir="ltr">USER_CONSTRAINTS</code></p>
</td>
<td class="cellalignment1335" headers="r2c1-t21 r1c2-t21"><code dir="ltr">DBA</code> view describes all constraint definitions in the database. <code dir="ltr">ALL</code> view describes constraint definitions accessible to current user. <code dir="ltr">USER</code> view describes constraint definitions owned by the current user.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t21" headers="r1c1-t21"><code dir="ltr">DBA_CONS_COLUMNS</code>
<p><code dir="ltr">ALL_CONS_COLUMNS</code></p>
<p><code dir="ltr">USER_CONS_COLUMNS</code></p>
</td>
<td class="cellalignment1335" headers="r3c1-t21 r1c2-t21"><code dir="ltr">DBA</code> view describes all columns in the database that are specified in constraints. <code dir="ltr">ALL</code> view describes only those columns accessible to current user that are specified in constraints. <code dir="ltr">USER</code> view describes only those columns owned by the current user that are specified in constraints.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblruleinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN" href="../e40402/toc.htm"><span class="italic">Oracle Database Reference</span></a> contains descriptions of the columns in these views</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007901"></a>
<div id="ADMIN11555" class="sect1">
<h2 class="sect1">Renaming Schema Objects</h2>
<p><a id="sthref1975"></a><a id="sthref1976"></a><a id="sthref1977"></a><a id="sthref1978"></a>To rename an object, it must be in your schema. You can rename schema objects in either of the following ways:</p>
<ul>
<li>
<p>Drop and re-create the object</p>
</li>
<li>
<p>Rename the object using the <code dir="ltr">RENAME</code> statement</p>
</li>
<li>
<p>Rename the object using the <code dir="ltr">ALTER</code> ... <code dir="ltr">RENAME</code> statement (for indexes and triggers)</p>
</li>
</ul>
<p>If you drop and re-create an object, all privileges granted for that object are lost. Privileges must be regranted when the object is re-created.</p>
<p>A table, view, sequence, or a private synonym of a table, view, or sequence can be renamed using the <code dir="ltr">RENAME</code> statement. When using the <code dir="ltr">RENAME</code> statement, integrity constraints, indexes, and grants made for the object are carried forward for the new name. For example, the following statement renames the <code dir="ltr">sales_staff</code> view:</p>
<pre dir="ltr">
RENAME sales_staff TO dept_30; <a id="sthref1979"></a> 
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot use <code dir="ltr">RENAME</code> for a stored PL/SQL program unit, public synonym, or cluster. To rename such an object, you must drop and re-create it.</div>
<p>Before renaming a schema object, consider the following effects:</p>
<ul>
<li>
<p>All views and PL/SQL program units dependent on a renamed object become invalid, and must be recompiled before next use.</p>
</li>
<li>
<p>All synonyms for a renamed object return an error when used.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF01608" href="../../server.112/e41084/statements_9019.htm#SQLRF01608"><span class="italic">Oracle Database SQL Language Reference</span></a> for syntax of the <code dir="ltr">RENAME</code> statement</div>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1006919"></a>
<div id="ADMIN11556" class="sect1">
<h2 class="sect1">Managing Object Dependencies</h2>
<p>This section provides background information about <a id="sthref1980"></a><a id="sthref1981"></a>object dependencies and object invalidation, and explains how invalid objects can be revalidated. The following topics are included:</p>
<ul>
<li>
<p><a href="#BABJAIFA">About Object Dependencies and Object Invalidation</a></p>
</li>
<li>
<p><a href="#i1007024">Manually Recompiling Invalid Objects with DDL</a></p>
</li>
<li>
<p><a href="#BABEHBJI">Manually Recompiling Invalid Objects with PL/SQL Package Procedures</a></p>
</li>
</ul>
<a id="BABJAIFA"></a>
<div id="ADMIN11557" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Object Dependencies and Object Invalidation</h3>
<p>Some types of schema objects reference other objects. For example, a view contains a query that references tables or other views, and a PL/SQL subprogram might invoke other subprograms and might use static SQL to reference tables or views. An object that references another object is called a <span class="bold">dependent object</span>, and an object being referenced is a <span class="bold">referenced object</span>. These references are established at compile time, and if the compiler cannot resolve them, the dependent object being compiled is marked <span class="italic">invalid</span>.</p>
<p>Oracle Database provides an automatic mechanism to ensure that a dependent object is always up to date with respect to its referenced objects. When a dependent object is created, the database tracks dependencies between the dependent object and its referenced objects. When a referenced object is changed in a way that might affect a dependent object, the dependent object is marked invalid. An invalid dependent object must be recompiled against the new definition of a referenced object before the dependent object can be used. Recompilation occurs automatically when the invalid dependent object is referenced.</p>
<p>It is important to be aware of changes that can invalidate schema objects, because invalidation affects applications running on the database. This section describes how objects become invalid, how you can identify invalid objects, and how you can validate invalid objects.</p>
<p class="subhead2"><a id="ADMIN12618"></a>Object Invalidation</p>
<p>In a typical running application, you would not expect to see views or stored procedures become invalid, because applications typically do not change table structures or change view or stored procedure definitions during normal execution. Changes to tables, views, or PL/SQL units typically occur when an application is patched or upgraded using a patch script or ad-hoc DDL statements. Dependent objects might be left invalid after a patch has been applied to change a set of referenced objects.</p>
<p>Use the following query to display the set of invalid objects in the database:</p>
<pre dir="ltr">
SELECT object_name, object_type FROM dba_objects
WHERE status = 'INVALID';
</pre>
<p>The Database Home page in Enterprise Manager displays an alert when schema objects become invalid.</p>
<p>Object invalidation affects applications in two ways. First, an invalid object must be revalidated before it can be used by an application. Revalidation adds latency to application execution. If the number of invalid objects is large, the added latency on the first execution can be significant. Second, invalidation of a procedure, function or package can cause exceptions in other sessions concurrently executing the procedure, function or package. If a patch is applied when the application is in use in a different session, the session executing the application notices that an object in use has been invalidated and raises one of the following 4 exceptions: ORA-04061, ORA-04064, ORA-04065 or ORA-04068. These exceptions must be remedied by restarting application sessions following a patch.</p>
<p>You can force the database to recompile a schema object using the appropriate SQL statement with the <code dir="ltr">COMPILE</code> clause. See <a href="#i1007024">"Manually Recompiling Invalid Objects with DDL"</a> for more information.</p>
<p>If you know that there are a large number of invalid objects, use the <code dir="ltr">UTL_RECOMP</code> PL/SQL package to perform a mass recompilation. See <a href="#BABEHBJI">"Manually Recompiling Invalid Objects with PL/SQL Package Procedures"</a> for details.</p>
<p>The following are some general rules for the invalidation of schema objects:</p>
<ul>
<li>
<p>Between a referenced object and each of its dependent objects, the database tracks the elements of the referenced object that are involved in the dependency. For example, if a single-table view selects only a subset of columns in a table, only those columns are involved in the dependency. For each dependent of an object, if a change is made to the definition of any element involved in the dependency (including dropping the element), the dependent object is invalidated. Conversely, if changes are made only to definitions of elements that are not involved in the dependency, the dependent object remains valid.</p>
<p>In many cases, therefore, developers can avoid invalidation of dependent objects and unnecessary extra work for the database if they exercise care when changing schema objects.</p>
</li>
<li>
<p>Dependent objects are <span class="italic">cascade invalidated</span>. If any object becomes invalid for any reason, all of that object's dependent objects are immediately invalidated.</p>
</li>
<li>
<p>If you revoke any object privileges on a schema object, dependent objects are cascade invalidated.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT1859" href="../../server.112/e40540/tablecls.htm#CNCPT1859"><span class="italic">Oracle Database Concepts</span></a> for more detailed information about schema object dependencies</div>
</div>
<!-- class="sect2" -->
<a id="i1007024"></a>
<div id="ADMIN12491" class="sect2">
<h3 class="sect2">Manually Recompiling Invalid Objects with DDL</h3>
<p>You can use an <code dir="ltr">ALTER</code> statement to manually recompile a single schema object. For example, to recompile package body <code dir="ltr">Pkg1</code>, you would execute the following DDL statement:</p>
<pre dir="ltr">
ALTER PACKAGE pkg1 COMPILE REUSE SETTINGS;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF" href="../e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for syntax and other information about the various <code dir="ltr">ALTER</code> statements</div>
</div>
<!-- class="sect2" -->
<a id="BABEHBJI"></a>
<div id="ADMIN12492" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Manually Recompiling Invalid Objects with PL/SQL Package Procedures</h3>
<p>Following an application upgrade or patch, it is good practice to revalidate invalid objects to avoid application latencies that result from on-demand object revalidation. Oracle provides the <code dir="ltr">UTL_RECOMP</code> package to assist in object revalidation. The <code dir="ltr">RECOMP_SERIAL</code> procedure recompiles all invalid objects in a specified schema, or all invalid objects in the database if you do not supply the schema name argument. The <code dir="ltr">RECOMP_PARALLEL</code> procedure does the same, but in parallel, employing multiple CPUs.</p>
<p class="subhead2"><a id="ADMIN12619"></a>Examples</p>
<p>Execute the following PL/SQL block to revalidate all invalid objects in the database, in parallel and in dependency order:</p>
<pre dir="ltr">
begin
   utl_recomp.recomp_parallel();
end;
/
</pre>
<p>You can also revalidate individual invalid objects using the package <code dir="ltr">DBMS_UTILITY</code>. The following PL/SQL block revalidates the procedure <code dir="ltr">UPDATE_SALARY</code> in schema <code dir="ltr">HR</code>:</p>
<pre dir="ltr">
begin
   dbms_utility.validate('HR', 'UPDATE_SALARY', namespace=&gt;1);
end;
/
</pre>
<p>The following PL/SQL block revalidates the package body <code dir="ltr">HR.ACCT_MGMT</code>:</p>
<pre dir="ltr">
begin
   dbms_utility.validate('HR', 'ACCT_MGMT', namespace=&gt;2);
end;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS" href="../../appdev.112/e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information on the <code dir="ltr">UTL_RECOMP</code> and <code dir="ltr">DBMS_UTILITY</code> packages.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007081"></a>
<div id="ADMIN11561" class="sect1">
<h2 class="sect1">Managing Object Name Resolution<a id="sthref1982"></a></h2>
<p>Object names referenced in SQL statements can consist of several pieces, separated by periods. The following describes how the database resolves an object name.</p>
<ol>
<li>
<p>Oracle Database attempts to qualify the first piece of the name referenced in the SQL statement. For example, in <code dir="ltr">scott.emp</code>, <code dir="ltr">scott</code> is the first piece. If there is only one piece, the one piece is considered the first piece.</p>
<a id="i1007087"></a>
<ol>
<li id="CHDGBBED">
<p>In the current schema, the database searches for an object whose name matches the first piece of the object name. If it does not find such an object, it continues with step <a href="#i1007092">b</a>.</p>
</li>
<li id="i1007092">
<p>The database searches for a public synonym that matches the first piece of the name. If it does not find one, it continues with step <a href="#i1007097">c</a>.</p>
</li>
<li id="i1007097">
<p>The database searches for a schema whose name matches the first piece of the object name. If it finds one, then the schema is the qualified schema, and it continues with step <a href="#CHDGABEE">d</a>.</p>
<p>If no schema is found in step <a href="#i1007097">c</a>, the object cannot be qualified and the database returns an error.</p>
</li>
<li id="CHDGABEE">
<p>In the qualified schema, the database searches for an object whose name matches the second piece of the object name.</p>
<p>If the second piece does not correspond to an object in the previously qualified schema or there is not a second piece, then the database returns an error.</p>
</li>
</ol>
</li>
<li>
<p>A schema object has been qualified. Any remaining pieces of the name must match a valid part of the found object. For example, if <code dir="ltr">scott.emp.deptno</code> is the name, <code dir="ltr">scott</code> is qualified as a schema, <code dir="ltr">emp</code> is qualified as a table, and <code dir="ltr">deptno</code> must correspond to a column (because <code dir="ltr">emp</code> is a table). If <code dir="ltr">emp</code> is qualified as a package, <code dir="ltr">deptno</code> must correspond to a public constant, variable, procedure, or function of that package.</p>
</li>
</ol>
<p>When global object names are used in a distributed database, either explicitly or indirectly within a synonym, the local database resolves the reference locally. For example, it resolves a synonym to global object name of a remote table. The partially resolved statement is shipped to the remote database, and the remote database completes the resolution of the object as described here.</p>
<p>Because of how the database resolves references, it is possible for an object to depend on the nonexistence of other objects. This situation occurs when the dependent object uses a reference that would be interpreted differently were another object present. For example, assume the following:</p>
<ul>
<li>
<p>At the current point in time, the <code dir="ltr">company</code> schema contains a table named <code dir="ltr">emp</code>.</p>
</li>
<li>
<p>A <code dir="ltr">PUBLIC</code> synonym named <code dir="ltr">emp</code> is created for <code dir="ltr">company.emp</code> and the <code dir="ltr">SELECT</code> privilege for <code dir="ltr">company.emp</code> is granted to the <code dir="ltr">PUBLIC</code> role.</p>
</li>
<li>
<p>The <code dir="ltr">jward</code> schema does not contain a table or private synonym named <code dir="ltr">emp</code>.</p>
</li>
<li>
<p>The user <code dir="ltr">jward</code> creates a view in his schema with the following statement:</p>
<pre dir="ltr">
CREATE VIEW dept_salaries AS 
     SELECT deptno, MIN(sal), AVG(sal), MAX(sal) FROM emp 
     GROUP BY deptno 
     ORDER BY deptno; 
</pre></li>
</ul>
<p>When <code dir="ltr">jward</code> creates the <code dir="ltr">dept_salaries</code> view, the reference to <code dir="ltr">emp</code> is resolved by first looking for <code dir="ltr">jward.emp</code> as a table, view, or private synonym, none of which is found, and then as a public synonym named <code dir="ltr">emp</code>, which is found. As a result, the database notes that <code dir="ltr">jward.dept_salaries</code> depends on the nonexistence of <code dir="ltr">jward.emp</code> and on the existence of <code dir="ltr">public.emp</code>.</p>
<p>Now assume that <code dir="ltr">jward</code> decides to create a new view named <code dir="ltr">emp</code> in his schema using the following statement:</p>
<pre dir="ltr">
CREATE VIEW emp AS 
     SELECT empno, ename, mgr, deptno 
     FROM company.emp; 
</pre>
<p>Notice that <code dir="ltr">jward.emp</code> does not have the same structure as <code dir="ltr">company.emp</code>.</p>
<p>As it attempts to resolve references in object definitions, the database internally makes note of dependencies that the new dependent object has on "nonexistent" objects--schema objects that, if they existed, would change the interpretation of the object's definition. Such dependencies must be noted in case a nonexistent object is later created. If a nonexistent object is created, all dependent objects must be invalidated so that dependent objects can be recompiled and verified and all dependent function-based indexes must be marked unusable.</p>
<p>Therefore, in the previous example, as <code dir="ltr">jward.emp</code> is created, <code dir="ltr">jward.dept_salaries</code> is invalidated because it depends on <code dir="ltr">jward.emp</code>. Then when <code dir="ltr">jward.dept_salaries</code> is used, the database attempts to recompile the view. As the database resolves the reference to <code dir="ltr">emp</code>, it finds <code dir="ltr">jward.emp</code> (<code dir="ltr">public.emp</code> is no longer the referenced object). Because <code dir="ltr">jward.emp</code> does not have a <code dir="ltr">sal</code> column, the database finds errors when replacing the view, leaving it invalid.</p>
<p>In summary, you must manage dependencies on nonexistent objects checked during object resolution in case the nonexistent object is later created.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="ds_concepts.htm#i1008172">"Schema Objects and Database Links"</a> for information about name resolution in a distributed database</div>
</div>
<!-- class="sect1" -->
<a id="i1107794"></a>
<div id="ADMIN02101" class="sect1">
<h2 class="sect1">Switching to a Different Schema</h2>
<p>The following statement sets the schema of the current session to the schema name specified in the statement.</p>
<pre dir="ltr">
ALTER SESSION SET CURRENT_SCHEMA = &lt;<span class="italic">schema name</span>&gt;
</pre>
<p>In subsequent SQL statements, Oracle Database uses this schema name as the schema qualifier when the qualifier is omitted. In addition, the database uses the temporary tablespace of the specified schema for sorts, joins, and storage of temporary database objects. The session retains its original privileges and does not acquire any extra privileges by the preceding <code dir="ltr">ALTER</code> <code dir="ltr">SESSION</code> statement.</p>
<p>In the following example, provide the password when prompted:</p>
<pre dir="ltr">
CONNECT scott
ALTER SESSION SET CURRENT_SCHEMA = joe;
SELECT * FROM emp;
</pre>
<p>Because <code dir="ltr">emp</code> is not schema-qualified, the table name is resolved under schema <code dir="ltr">joe</code>. But if <code dir="ltr">scott</code> does not have select privilege on table <code dir="ltr">joe</code>.<code dir="ltr">emp</code>, then <code dir="ltr">scott</code> cannot execute the <code dir="ltr">SELECT</code> statement.</p>
</div>
<!-- class="sect1" -->
<a id="CHDFIFHC"></a>
<div id="ADMIN13166" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Managing Editions</h2>
<p><a id="sthref1983"></a>Application developers who are upgrading their applications using edition-based redefinition may ask you to perform edition-related tasks that require DBA privileges.</p>
<p>In this section:</p>
<ul>
<li>
<p><a href="#CHDEGEBC">About Editions and Edition-Based Redefinition</a></p>
</li>
<li>
<p><a href="#CHDCJGEB">DBA Tasks for Edition-Based Redefinition</a></p>
</li>
<li>
<p><a href="#CHDDFDJE">Setting the Database Default Edition</a></p>
</li>
<li>
<p><a href="#CHDJEGGE">Querying the Database Default Edition</a></p>
</li>
<li>
<p><a href="#CHDGIIAC">Setting the Edition Attribute of a Database Service</a></p>
</li>
<li>
<p><a href="#CHDEAFJC">Using an Edition</a></p>
</li>
<li>
<p><a href="#CHDHBGBC">Editions Data Dictionary Views</a></p>
</li>
</ul>
<a id="CHDEGEBC"></a>
<div id="ADMIN13167" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Editions and Edition-Based Redefinition</h3>
<p>Edition-based redefinition enables you to upgrade an application's database objects while the application is in use, thus minimizing or eliminating down time. This is accomplished by changing (redefining) database objects in a private environment known as an <span class="bold">edition</span>. Only when all changes have been made and tested do you make the new version of the application available to users.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS020" href="../../appdev.112/e41502/adfns_editions.htm#ADFNS020"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for a complete discussion of edition-based redefinition</div>
</div>
<!-- class="sect2" -->
<a id="CHDCJGEB"></a>
<div id="ADMIN13168" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">DBA Tasks for Edition-Based Redefinition</h3>
<p><a href="#CHDEJBBH">Table 18-1</a> summarizes the edition-related tasks that require privileges typically granted only to DBAs. Any user that is granted the <code dir="ltr">DBA</code> role can perform these tasks.</p>
<div id="ADMIN13169" class="tblformal">
<p class="titleintable"><a id="sthref1984"></a><a id="CHDEJBBH"></a>Table 18-1 DBA Tasks for Edition-Based Redefinition</p>
<table class="cellalignment1338" title="DBA Tasks for Edition-Based Redefinition" summary="This table has two columns. The first lists a task in the second lists a cross reference to find out more information about the task." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t30">Task</th>
<th class="cellalignment1334" id="r1c2-t30">See</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t30" headers="r1c1-t30">
<p>Grant or revoke privileges to create, alter, and drop editions</p>
</td>
<td class="cellalignment1335" headers="r2c1-t30 r1c2-t30">
<p>The <code dir="ltr">CREATE</code> <code dir="ltr">EDITION</code> and <code dir="ltr">DROP</code> <code dir="ltr">EDITION</code> commands in <a class="olink SQLRF" href="../e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t30" headers="r1c1-t30">
<p>Enable editions for a schema</p>
</td>
<td class="cellalignment1335" headers="r3c1-t30 r1c2-t30">
<p><a class="olink ADFNS99878" href="../../appdev.112/e41502/adfns_editions.htm#ADFNS99878"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t30" headers="r1c1-t30">
<p>Set the database default edition</p>
</td>
<td class="cellalignment1335" headers="r4c1-t30 r1c2-t30">
<p><a href="#CHDDFDJE">"Setting the Database Default Edition"</a></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t30" headers="r1c1-t30">
<p>Set the edition attribute of a database service</p>
</td>
<td class="cellalignment1335" headers="r5c1-t30 r1c2-t30">
<p><a href="#CHDGIIAC">"Setting the Edition Attribute of a Database Service"</a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="CHDDFDJE"></a>
<div id="ADMIN13170" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Setting the Database Default Edition</h3>
<p>There is always a default edition for the database. This is the edition that a database session initially uses if it does not explicitly indicate an edition when connecting.</p>
<p class="orderedlisttitle">To set the database default edition:&nbsp;</p>
<ol>
<li>
<p>Connect to the database as a user with the <code dir="ltr">ALTER</code> <code dir="ltr">DATABASE</code> privilege.</p>
</li>
<li>
<p>Enter the following statement:</p>
<pre dir="ltr">
ALTER DATABASE DEFAULT EDITION = <span class="italic">edition_name</span>;
</pre></li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dba.htm#BABGCGFB">"Connecting to the Database with SQL*Plus"</a></div>
</div>
<!-- class="sect2" -->
<a id="CHDJEGGE"></a>
<div id="ADMIN13171" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Querying the Database Default Edition</h3>
<p>The database default edition is stored as a database property.</p>
<p class="orderedlisttitle">To query the database default edition:&nbsp;</p>
<ol>
<li>
<p>Connect to the database as any user.</p>
</li>
<li>
<p>Enter the following statement:</p>
<pre dir="ltr">
SELECT PROPERTY_VALUE FROM DATABASE_PROPERTIES WHERE 
   PROPERTY_NAME = 'DEFAULT_EDITION';

PROPERTY_VALUE
------------------------------
ORA$BASE
</pre></li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
The property name <code dir="ltr">DEFAULT_EDITION</code> is case sensitive and must be supplied as upper case.</div>
</div>
<!-- class="sect2" -->
<a id="CHDGIIAC"></a>
<div id="ADMIN13454" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Setting the Edition Attribute of a Database Service</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
This functionality is available starting with Oracle Database 11<span class="italic">g</span> release 2 (11.2.0.2).</div>
<p>You can set the edition attribute of a database service when you create the service, or you can modify an existing database service to set its edition attribute. When you set the edition attribute of a service, all subsequent connections that specify the service, such as client connections and <code dir="ltr">DBMS_SCHEDULER</code> jobs, use this edition as the initial session edition. However, if a session connection specifies a different edition, then the edition specified in the session connection is used for the session edition. To check the edition attribute of a database service, query the <code dir="ltr">EDITION</code> column in the <code dir="ltr">ALL_SERVICES</code> view or the <code dir="ltr">DBA_SERVICES</code> view.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The number of database services for an instance has an upper limit. See <a class="olink REFRN0044" href="../../server.112/e40402/limits004.htm#REFRN0044"><span class="italic">Oracle Database Reference</span></a> for more information about this limit.</div>
<div id="ADMIN13455" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1987"></a>
<h4 class="sect3">Setting the Edition Attribute During Database Service Creation</h4>
<p>Follow the instructions in <a href="create.htm#CIACEHHJ">"Creating Database Services"</a> and use the appropriate option for setting the edition attribute for the database service:</p>
<ul>
<li>
<p>If your single-instance database is being managed by Oracle Restart, use the <code dir="ltr">SRVCTL</code> utility to create the database service and specify the <code dir="ltr">-t</code> option to set its edition attribute.</p>
<p>For the database with the <code dir="ltr">DB_UNIQUE_NAME</code> of <code dir="ltr">dbcrm</code>, this example creates a new database service named <code dir="ltr">crmbatch</code> and sets the edition attribute of the database service to <code dir="ltr">e2</code>:</p>
<pre dir="ltr">
srvctl add service -d dbcrm -s crmbatch -t e2
</pre></li>
<li>
<p>If your single-instance database is not being managed by Oracle Restart, use the <code dir="ltr">DBMS_SERVICE.CREATE_SERVICE</code> procedure, and specify the <code dir="ltr">edition</code> parameter to set the edition attribute of the database service.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="ADMIN13456" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1988"></a>
<h4 class="sect3">Setting the Edition Attribute of an Existing Database Service</h4>
<p>You can use the <code dir="ltr">SRVCTL</code> utility or the <code dir="ltr">DBMS_SERVICE</code> package to set the edition attribute of an existing database service.</p>
<p class="orderedlisttitle">To set the edition attribute of an existing database service:&nbsp;</p>
<ol>
<li>
<p>Stop the database service.</p>
</li>
<li>
<p>Set the edition attribute of the database service using the appropriate option:</p>
<ul>
<li>
<p>If your single-instance database is being managed by Oracle Restart, use the <code dir="ltr">SRVCTL</code> utility to modify the database service and specify the <code dir="ltr">-t</code> option to set its edition attribute.</p>
<p>For the database with the <code dir="ltr">DB_UNIQUE_NAME</code> of <code dir="ltr">dbcrm</code>, this example modifies a database service named <code dir="ltr">crmbatch</code> and sets the edition attribute of the service to <code dir="ltr">e3</code>:</p>
<pre dir="ltr">
srvctl modify service -d dbcrm -s crmbatch -t e3
</pre></li>
<li>
<p>If your single-instance database is not being managed by Oracle Restart, use the <code dir="ltr">DBMS_SERVICE.MODIFY_SERVICE</code> procedure, and specify the <code dir="ltr">edition</code> parameter to set the edition attribute of the database service. Ensure that the <code dir="ltr">modify_edition</code> parameter is set to <code dir="ltr">TRUE</code> when you run the <code dir="ltr">MODIFY_SERVICE</code> procedure.</p>
</li>
</ul>
</li>
<li>
<p>Start the database service.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="restart.htm#BABGIGDB">Chapter 4, "Configuring Automatic Restart of an Oracle Database"</a> for information managing database services using Oracle Restart</p>
</li>
<li>
<p><a class="olink ARPLS092" href="../../appdev.112/e40758/d_serv.htm#ARPLS092"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about managing database services using the <code dir="ltr">DBMS_SERVICE</code> package</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDEAFJC"></a>
<div id="ADMIN13172" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using an Edition</h3>
<p>To view or modify objects in a particular edition, you must <span class="italic">use</span> the edition first. You can specify an edition to use when you connect to the database. If you do not specify an edition, your session starts in the database default edition. To use a different edition, submit the following statement:</p>
<pre dir="ltr">
ALTER SESSION SET EDITION=<span class="italic">edition_name</span>;
</pre>
<p>The following statements first set the current edition to <code dir="ltr">e2</code> and then to <code dir="ltr">ora$base</code>:</p>
<pre dir="ltr">
ALTER SESSION SET EDITION=e2;
...
ALTER SESSION SET EDITION=ora$base;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADFNS99921" href="../../appdev.112/e41502/adfns_editions.htm#ADFNS99921"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for more information about using editions, and for instructions for determining the current edition</p>
</li>
<li>
<p><a href="dba.htm#BABGCGFB">"Connecting to the Database with SQL*Plus"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDHBGBC"></a>
<div id="ADMIN13173" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Editions Data Dictionary Views</h3>
<p>There are several data dictionary views that aid with managing editions. The following table lists three of them. For a complete list, see <a class="olink ADFNS0204" href="../../appdev.112/e41502/adfns_editions.htm#ADFNS0204"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a>.</p>
<div class="inftblruleinformalwide">
<table class="cellalignment1333" title="Editions Data Dictionary Views" summary="Column 1 lists the names of views and, column 2 describes each view." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t37">View</th>
<th class="cellalignment1334" id="r1c2-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t37" headers="r1c1-t37"><code dir="ltr">*_EDITIONS</code></td>
<td class="cellalignment1335" headers="r2c1-t37 r1c2-t37">Lists all editions in the database. (Note: <code dir="ltr">USER_EDITIONS</code> does not exist.)</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t37" headers="r1c1-t37"><code dir="ltr">*_OBJECTS</code></td>
<td class="cellalignment1335" headers="r3c1-t37 r1c2-t37">Describes every object in the database that is visible (actual or inherited) in the current edition.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t37" headers="r1c1-t37"><code dir="ltr">*_OBJECTS_AE</code></td>
<td class="cellalignment1335" headers="r4c1-t37 r1c2-t37">Describes every actual object in the database, across all editions.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblruleinformalwide" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007290"></a>
<div id="ADMIN11562" class="sect1">
<h2 class="sect1">Displaying Information About Schema Objects</h2>
<p><a id="sthref1990"></a>Oracle Database provides a PL/SQL package that enables you to determine the DDL that created an object and data dictionary views that you can use to display information about schema objects. Packages and views that are unique to specific types of schema objects are described in the associated chapters. This section describes views and packages that are generic in nature and apply to multiple schema objects.</p>
<a id="i1007295"></a>
<div id="ADMIN11563" class="sect2">
<h3 class="sect2">Using a PL/SQL Package to Display Information About Schema Objects</h3>
<p><a id="sthref1991"></a>The Oracle-supplied PL/SQL package procedure <code dir="ltr">DBMS_METADATA.GET_DDL</code> lets you obtain metadata (in the form of DDL used to create the object) about a schema object.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS026" href="../../appdev.112/e40758/d_metada.htm#ARPLS026"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for a description of the <code dir="ltr">DBMS_METADATA</code> package</div>
<p class="subhead2"><a id="ADMIN12620"></a>Example: Using the <a id="sthref1992"></a><a id="sthref1993"></a><a id="sthref1994"></a>DBMS_METADATA Package</p>
<p>The <code dir="ltr">DBMS_METADATA</code> package is a powerful tool for obtaining the complete definition of a schema object. It enables you to obtain all of the attributes of an object in one pass. The object is described as DDL that can be used to (re)create it.</p>
<p>In the following statements the <code dir="ltr">GET_DDL</code> function is used to fetch the DDL for all tables in the current schema, filtering out nested tables and overflow segments. The <code dir="ltr">SET_TRANSFORM_PARAM</code> (with the handle value equal to <code dir="ltr">DBMS_METADATA.SESSION_TRANSFORM</code> meaning "for the current session") is used to specify that storage clauses are not to be returned in the SQL DDL. Afterwards, the session-level transform parameters are reset to their defaults. Once set, transform parameter values remain in effect until specifically reset to their defaults.</p>
<pre dir="ltr">
EXECUTE DBMS_METADATA.SET_TRANSFORM_PARAM(
     DBMS_METADATA.SESSION_TRANSFORM,'STORAGE',false);
SELECT DBMS_METADATA.GET_DDL('TABLE',u.table_name)
     FROM USER_ALL_TABLES u
     WHERE u.nested='NO' 
     AND (u.iot_type is null or u.iot_type='IOT');
EXECUTE DBMS_METADATA.SET_TRANSFORM_PARAM(
     DBMS_METADATA.SESSION_TRANSFORM,'DEFAULT');
</pre>
<p>The output from <code dir="ltr">DBMS_METADATA.GET_DDL</code> is a <code dir="ltr">LONG</code> data type. When using SQL*Plus, your output may be truncated by default. Issue the following SQL*Plus command before issuing the <code dir="ltr">DBMS_METADATA.GET_DDL</code> statement to ensure that your output is not truncated:</p>
<pre dir="ltr">
SQL&gt; SET LONG 9999
</pre></div>
<!-- class="sect2" -->
<div id="ADMIN11564" class="sect2"><a id="sthref1995"></a>
<h3 class="sect2">Schema Objects Data Dictionary Views<a id="sthref1996"></a><a id="sthref1997"></a></h3>
<p>These views display general information about schema objects:</p>
<div class="inftblruleinformal">
<table class="cellalignment1333" title="Viewing Information About Schema Objects" summary="Column 1 lists the names of views that can be used to view general information about schema objects. Column 2 describes each view." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t39">View</th>
<th class="cellalignment1334" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t39" headers="r1c1-t39"><code dir="ltr">DBA_OBJECTS</code>
<p><code dir="ltr">ALL_OBJECTS</code></p>
<p><code dir="ltr">USER_OBJECTS</code></p>
</td>
<td class="cellalignment1335" headers="r2c1-t39 r1c2-t39"><code dir="ltr">DBA</code> view describes all schema objects in the database. <code dir="ltr">ALL</code> view describes objects accessible to current user. <code dir="ltr">USER</code> view describes objects owned by the current user.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t39" headers="r1c1-t39"><code dir="ltr">DBA_CATALOG</code>
<p><code dir="ltr">ALL_CATALOG</code></p>
<p><code dir="ltr">USER_CATALOG</code></p>
</td>
<td class="cellalignment1335" headers="r3c1-t39 r1c2-t39">List the name, type, and owner (<code dir="ltr">USER</code> view does not display owner) for all tables, views, synonyms, and sequences in the database.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t39" headers="r1c1-t39"><code dir="ltr">DBA_DEPENDENCIES</code>
<p><code dir="ltr">ALL_DEPENDENCIES</code></p>
<p><code dir="ltr">USER_DEPENDENCIES</code></p>
</td>
<td class="cellalignment1335" headers="r4c1-t39 r1c2-t39">List all dependencies between procedures, packages, functions, package bodies, and triggers, including dependencies on views without any database links.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblruleinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN" href="../e40402/toc.htm"><span class="italic">Oracle Database Reference</span></a> for a complete description of data dictionary views</div>
<p>The following are examples of using some of these views:</p>
<ul>
<li>
<p><a href="#BABHGCJI">Example 1: Displaying Schema Objects By Type</a></p>
</li>
<li>
<p><a href="#BABECIAJ">Example 2: Displaying Dependencies of Views and Synonyms</a></p>
</li>
</ul>
<a id="BABHGCJI"></a>
<div id="ADMIN11565" class="sect3">
<h4 class="sect3">Example 1: Displaying Schema Objects By Type<a id="sthref1998"></a></h4>
<p>The following query lists all of the objects owned by the user issuing the query:</p>
<pre dir="ltr">
SELECT OBJECT_NAME, OBJECT_TYPE 
    FROM USER_OBJECTS;
</pre>
<p>The following is the query output:</p>
<pre dir="ltr">
OBJECT_NAME                OBJECT_TYPE
-------------------------  -------------------
EMP_DEPT                   CLUSTER
EMP                        TABLE
DEPT                       TABLE
EMP_DEPT_INDEX             INDEX
PUBLIC_EMP                 SYNONYM
EMP_MGR                    VIEW
</pre></div>
<!-- class="sect3" -->
<a id="BABECIAJ"></a>
<div id="ADMIN11566" class="sect3">
<h4 class="sect3">Example 2: Displaying Dependencies of Views and Synonyms</h4>
<p><a id="sthref1999"></a><a id="sthref2000"></a><a id="sthref2001"></a>When you create a view or a synonym, the view or synonym is based on its underlying base object. The <code dir="ltr">ALL</code><code dir="ltr">_DEPENDENCIES</code>, <code dir="ltr">USER_DEPENDENCIES</code>, and <code dir="ltr">DBA_DEPENDENCIES</code> data dictionary views can be used to reveal the dependencies for a view. The <code dir="ltr">ALL</code><code dir="ltr">_SYNONYMS</code>, <code dir="ltr">USER_SYNONYMS</code>, and <code dir="ltr">DBA_SYNONYMS</code> data dictionary views can be used to list the base object of a synonym. For example, the following query lists the base objects for the synonyms created by user <code dir="ltr">jward</code>:</p>
<pre dir="ltr">
SELECT TABLE_OWNER, TABLE_NAME, SYNONYM_NAME
    FROM DBA_SYNONYMS
    WHERE OWNER = 'JWARD';
</pre>
<p>The following is the query output:</p>
<pre dir="ltr">
TABLE_OWNER             TABLE_NAME   SYNONYM_NAME
----------------------  -----------  -----------------
SCOTT                   DEPT         DEPT
SCOTT                   EMP          EMP
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1326">
<tr>
<td class="cellalignment1335">
<table class="cellalignment1331">
<tr>
<td class="cellalignment1330"><a href="part4.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1330"><a href="schema.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1337">
<table class="cellalignment1329">
<tr>
<td class="cellalignment1330"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1330"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1330"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1330"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1330"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1330"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
