<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Repairing Corrupted Data</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1055" />
<meta name="dcterms.created" content="2015-05-05T8:27:37Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Administrator's Guide" />
<meta name="dcterms.identifier" content="E25494-07" />
<meta name="dcterms.isVersionOf" content="ADMIN" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="views.htm" title="Previous" type="text/html" />
<link rel="Next" href="part6.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25494.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">34/49</span> <!-- End Header -->
<div id="ADMIN022" class="chapter"><a id="g1010286"></a> <a id="i1006090"></a>
<h1 class="chapter"><span class="secnum">25</span> Repairing Corrupted Data</h1>
<p>In this chapter:</p>
<ul>
<li>
<p><a href="#i1006139">Options for Repairing Data Block Corruption</a></p>
</li>
<li>
<p><a href="#i1006149">About the DBMS_REPAIR Package</a></p>
</li>
<li>
<p><a href="#i1006223">Using the DBMS_REPAIR Package</a></p>
</li>
<li>
<p><a href="#i1006373">DBMS_REPAIR Examples</a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are not familiar with the <code dir="ltr">DBMS_REPAIR</code> package, then it is recommended that you work with an Oracle Support Services analyst when performing any of the repair procedures included in this package.</div>
</li>
</ul>
<a id="i1006139"></a>
<div id="ADMIN11811" class="sect1">
<h2 class="sect1">Options for Repairing Data Block Corruption</h2>
<p>Oracle Database provides different methods for detecting and correcting <a id="sthref2679"></a><a id="sthref2680"></a><a id="sthref2681"></a>data block corruption. One method of correction is to drop and re-create an object after the corruption is detected. However, this is not always possible or desirable. If data block corruption is limited to a subset of rows, then another option is to rebuild the table by selecting all data except for the corrupt rows.</p>
<p>Another way to manage data block corruption is to use the <code dir="ltr">DBMS_REPAIR</code> package. You can use <code dir="ltr">DBMS_REPAIR</code> to detect and repair corrupt blocks in tables and indexes. You can continue to use objects while you attempt to rebuild or repair them.</p>
<p>You can also use the Recovery Manager (RMAN) command <code dir="ltr">RECOVER BLOCK</code> to recover a corrupt data block or set of data blocks.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Any corruption that involves the loss of data requires analysis and understanding of how that data fits into the overall database system. Depending on the nature of the repair, you might lose data, and logical inconsistencies can be introduced. You must determine whether the repair approach provided by this package is the appropriate tool for each specific corruption problem.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink RCMRF140" href="../../backup.112/e10643/rcmsynta2001.htm#RCMRF140"><span class="italic">Oracle Database Backup and Recovery Reference</span></a> for more information about the <code dir="ltr">RECOVER BLOCK</code> RMAN command</div>
</div>
<!-- class="sect1" -->
<a id="i1006149"></a>
<div id="ADMIN11812" class="sect1">
<h2 class="sect1">About the <a id="sthref2682"></a>DBMS_REPAIR Package</h2>
<p>This section describes the procedures contained in the <code dir="ltr">DBMS_REPAIR</code> package and notes some limitations and restrictions on their use.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS044" href="../../appdev.112/e40758/d_repair.htm#ARPLS044"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information on the syntax, restrictions, and exceptions for the <code dir="ltr">DBMS_REPAIR</code> procedures</div>
<div id="ADMIN11813" class="sect2"><a id="sthref2683"></a>
<h3 class="sect2">DBMS_REPAIR Procedures</h3>
<p>The following table lists the procedures included in the <a id="sthref2684"></a><code dir="ltr">DBMS_REPAIR</code> package.</p>
<div class="inftblruleinformal">
<table class="cellalignment1333" title="DBMS_REPAIR Procedures" summary="Column 1 lists the procedure names for DBMS_REPAIR, column 2 describes each procedure." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t6">Procedure Name</th>
<th class="cellalignment1334" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t6" headers="r1c1-t6"><a id="sthref2685"></a><code dir="ltr">ADMIN_TABLES</code></td>
<td class="cellalignment1335" headers="r2c1-t6 r1c2-t6">Provides administrative functions (create, drop, purge) for repair or orphan key tables.
<p><span class="bold">Note:</span> These tables are always created in the <code dir="ltr">SYS</code> schema.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t6" headers="r1c1-t6"><a id="sthref2686"></a><code dir="ltr">CHECK_OBJECT</code></td>
<td class="cellalignment1335" headers="r3c1-t6 r1c2-t6">Detects and reports corruptions in a table or index</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t6" headers="r1c1-t6"><a id="sthref2687"></a><code dir="ltr">DUMP_ORPHAN_KEYS</code></td>
<td class="cellalignment1335" headers="r4c1-t6 r1c2-t6">Reports on index entries that point to rows in corrupt data blocks</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t6" headers="r1c1-t6"><a id="sthref2688"></a><code dir="ltr">FIX_CORRUPT_BLOCKS</code></td>
<td class="cellalignment1335" headers="r5c1-t6 r1c2-t6">Marks blocks as software corrupt that have been previously identified as corrupt by the <code dir="ltr">CHECK_OBJECT</code> procedure</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r6c1-t6" headers="r1c1-t6"><code dir="ltr">REBUILD_FREELISTS</code></td>
<td class="cellalignment1335" headers="r6c1-t6 r1c2-t6">Rebuilds the free lists of the object</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r7c1-t6" headers="r1c1-t6"><a id="sthref2689"></a><code dir="ltr">SEGMENT_FIX_STATUS</code></td>
<td class="cellalignment1335" headers="r7c1-t6 r1c2-t6">Provides the capability to fix the corrupted state of a bitmap entry when segment space management is <code dir="ltr">AUTO</code></td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r8c1-t6" headers="r1c1-t6"><a id="sthref2690"></a><code dir="ltr">SKIP_CORRUPT_BLOCKS</code></td>
<td class="cellalignment1335" headers="r8c1-t6 r1c2-t6">When used, ignores blocks marked corrupt during table and index scans. If not used, you get error <code dir="ltr">ORA-01578</code> when encountering blocks marked corrupt.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblruleinformal" -->
<p>These procedures are further described, with examples of their use, in <a href="#i1006373">"DBMS_REPAIR Examples"</a>.</p>
</div>
<!-- class="sect2" -->
<div id="ADMIN11814" class="sect2"><a id="sthref2691"></a>
<h3 class="sect2">Limitations and Restrictions</h3>
<p><code dir="ltr"><a id="sthref2692"></a>DBMS_REPAIR</code> procedures have the following limitations:</p>
<ul>
<li>
<p>Tables with LOB data types, nested tables, and varrays are supported, but the out-of-line columns are ignored.</p>
</li>
<li>
<p>Clusters are supported in the <code dir="ltr">SKIP_CORRUPT_BLOCKS</code> and <code dir="ltr">REBUILD_FREELISTS</code> procedures, but not in the <code dir="ltr">CHECK_OBJECT</code> procedure.</p>
</li>
<li>
<p>Index-organized tables and LOB indexes are not supported.</p>
</li>
<li>
<p>Global temporary tables are not supported.</p>
</li>
<li>
<p>The <code dir="ltr">DUMP_ORPHAN_KEYS</code> procedure does not operate on bitmap indexes or function-based indexes.</p>
</li>
<li>
<p>The <code dir="ltr">DUMP_ORPHAN_KEYS</code> procedure processes keys that are no more than 3,950 bytes long.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006223"></a>
<div id="ADMIN11815" class="sect1">
<h2 class="sect1">Using the <a id="sthref2693"></a>DBMS_REPAIR Package</h2>
<p>The following approach is recommended when considering <code dir="ltr">DBMS_REPAIR</code> for addressing data block corruption:</p>
<ul>
<li>
<p><a href="#i1006244">Task 1: Detect and Report Corruptions</a></p>
</li>
<li>
<p><a href="#i1206324">Task 2: Evaluate the Costs and Benefits of Using DBMS_REPAIR</a></p>
</li>
<li>
<p><a href="#i1006347">Task 3: Make Objects Usable</a></p>
</li>
<li>
<p><a href="#i1006358">Task 4: Repair Corruptions and Rebuild Lost Data</a></p>
</li>
</ul>
<a id="i1006244"></a>
<div id="ADMIN11816" class="sect2">
<h3 class="sect2">Task 1: Detect and Report Corruptions</h3>
<p>The first task is the detection and reporting of corruptions. Reporting not only indicates what is wrong with a block, but also identifies the associated repair directive. There are several ways to detect corruptions. <a href="#g1006999">Table 25-1</a> describes the different detection methodologies.</p>
<div id="ADMIN13070" class="tblruleformal">
<p class="titleintable"><a id="sthref2694"></a><a id="g1006999"></a>Table 25-1 Comparison of Corruption Detection Methods</p>
<table class="cellalignment1333" title="Comparison of Corruption Detection Methods" summary="Column 1 lists the method of detecting corruption, column 2 describes the method." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t7">Detection Method</th>
<th class="cellalignment1334" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">DBMS_REPAIR</code> PL/SQL package</p>
</td>
<td class="cellalignment1335" headers="r2c1-t7 r1c2-t7">
<p>Performs block checking for a specified table, partition, or index. It populates a repair table with results.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t7" headers="r1c1-t7">
<p><a id="sthref2695"></a><code dir="ltr">DB_VERIFY</code> utility</p>
</td>
<td class="cellalignment1335" headers="r3c1-t7 r1c2-t7">
<p>Performs block checking on an offline database</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t7" headers="r1c1-t7">
<p><a id="sthref2696"></a><code dir="ltr">ANALYZE TABLE</code> SQL statement</p>
</td>
<td class="cellalignment1335" headers="r4c1-t7 r1c2-t7">
<p>Used with the <code dir="ltr">VALIDATE STRUCTURE</code> option, the <code dir="ltr">ANALYZE</code> <code dir="ltr">TABLE</code> statement verifies the integrity of the structure of an index, table, or cluster; checks or verifies that tables and indexes are synchronized.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t7" headers="r1c1-t7">
<p><a id="sthref2697"></a><code dir="ltr">DB_BLOCK_CHECKING</code> initialization parameter</p>
</td>
<td class="cellalignment1335" headers="r5c1-t7 r1c2-t7">
<p>When <code dir="ltr">DB_BLOCK_CHECKING=TRUE</code>, corrupt blocks are identified before they are marked corrupt. Checks are performed when changes are made to a block.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformal" -->
<div id="ADMIN11817" class="sect3"><a id="sthref2698"></a>
<h4 class="sect3">DBMS_REPAIR: Using the CHECK_OBJECT and ADMIN_TABLES Procedures</h4>
<p>The <code dir="ltr">CHECK_OBJECT</code> procedure checks and reports block corruptions for a specified object. Similar to the <code dir="ltr">ANALYZE...VALIDATE STRUCTURE</code> statement for indexes and tables, block checking is performed for index and data blocks.</p>
<p>Not only does <code dir="ltr">CHECK_OBJECT</code> report corruptions, but it also identifies any fixes that would occur if <code dir="ltr">FIX_CORRUPT_BLOCKS</code> is subsequently run on the object. This information is made available by populating a repair table, which must first be created by the <code dir="ltr"><a id="sthref2699"></a>ADMIN_TABLES</code> procedure.</p>
<p>After you run the <code dir="ltr">CHECK_OBJECT</code> procedure, a simple query on the repair table shows the corruptions and repair directives for the object. With this information, you can assess how best to address the reported problems.</p>
</div>
<!-- class="sect3" -->
<div id="ADMIN11818" class="sect3"><a id="sthref2700"></a>
<h4 class="sect3"><a id="sthref2701"></a>DB_VERIFY: Performing an Offline Database Check</h4>
<p>Use <code dir="ltr">DB_VERIFY</code> as an offline diagnostic utility when you encounter data corruption.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SUTIL013" href="../../server.112/e22490/dbverify.htm#SUTIL013"><span class="italic">Oracle Database Utilities</span></a> for more information about <code dir="ltr">DB_VERIFY</code></div>
</div>
<!-- class="sect3" -->
<div id="ADMIN11819" class="sect3"><a id="sthref2702"></a>
<h4 class="sect3"><a id="sthref2703"></a>ANALYZE: Reporting Corruption</h4>
<p>The <code dir="ltr">ANALYZE TABLE...VALIDATE STRUCTURE</code> statement validates the structure of the analyzed object. If the database encounters corruption in the structure of the object, then an error message is returned. In this case, drop and re-create the object.</p>
<p>You can use the <code dir="ltr">CASCADE</code> clause of the <code dir="ltr">ANALYZE TABLE</code> statement to check the structure of the table and all of its indexes in one operation. Because this operation can consume significant resources, there is a FAST option that performs a lightweight check. See <a href="general.htm#i1006350">"Validating Tables, Indexes, Clusters, and Materialized Views"</a> for details.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF01105" href="../../server.112/e41084/statements_4005.htm#SQLRF01105"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the <code dir="ltr">ANALYZE</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="ADMIN11820" class="sect3"><a id="sthref2704"></a>
<h4 class="sect3"><a id="sthref2705"></a><a id="sthref2706"></a>DB_BLOCK_CHECKING Initialization Parameter</h4>
<p>You can enable database block checking by setting the <code dir="ltr">DB_BLOCK_CHECKING</code> initialization parameter to <code dir="ltr">TRUE</code>. This checks data and index blocks for internal consistency whenever they are modified. <code dir="ltr">DB_BLOCK_CHECKING</code> is a dynamic parameter, modifiable by the <code dir="ltr">ALTER SYSTEM SET</code> statement. Block checking is always enabled for the system tablespace.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN10029" href="../../server.112/e40402/initparams048.htm#REFRN10029"><span class="italic">Oracle Database Reference</span></a> for more information about the <code dir="ltr">DB_BLOCK_CHECKING</code> initialization parameter</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1206324"></a>
<div id="ADMIN11821" class="sect2">
<h3 class="sect2">Task 2: Evaluate the Costs and Benefits of Using DBMS_REPAIR</h3>
<p>Before using <code dir="ltr">DBMS_REPAIR</code> you must weigh the benefits of its use in relation to the liabilities. You should also examine other options available for addressing corrupt objects. Begin by answering the following questions:</p>
<ul>
<li>
<p>What is the extent of the corruption?</p>
<p>To determine if there are corruptions and repair actions, execute the <a id="sthref2707"></a><code dir="ltr">CHECK_OBJECT</code> procedure and query the repair table.</p>
</li>
<li>
<p>What other options are available for addressing block corruptions? Consider the following:</p>
<ul>
<li>
<p>If the data is available from another source, then drop, re-create, and repopulate the object.</p>
</li>
<li>
<p>Issue the <code dir="ltr">CREATE TABLE...AS SELECT</code> statement from the corrupt table to create a new one.</p>
</li>
<li>
<p>Ignore the corruption by excluding corrupt rows from <code dir="ltr">SELECT</code> statements.</p>
</li>
<li>
<p>Perform media recovery.</p>
</li>
</ul>
</li>
<li>
<p>What <a id="sthref2708"></a><a id="sthref2709"></a>logical corruptions or side effects are introduced when you use <code dir="ltr">DBMS_REPAIR</code> to make an object usable? Can these be addressed? What is the effort required to do so?</p>
<p>You might not have access to rows in blocks marked corrupt. However, a block can be marked corrupt even if there are rows that you can validly access.</p>
<p>It is also possible that referential integrity constraints are broken when blocks are marked corrupt. If this occurs, then disable and reenable the constraint; any inconsistencies are reported. After fixing all problems, you should be able to reenable the constraint.</p>
<p>Logical corruption can occur when there are triggers defined on the table. For example, if rows are reinserted, should insert triggers be fired or not? You can address these issues only if you understand triggers and their use in your installation.</p>
<p>If indexes and tables are not synchronized, then execute the <code dir="ltr"><a id="sthref2710"></a>DUMP_ORPHAN_KEYS</code> procedure to obtain information from the keys that might be useful in rebuilding corrupted data. Then issue the <code dir="ltr">ALTER INDEX...REBUILD ONLINE</code> statement to synchronize the table with its indexes.</p>
</li>
<li>
<p>If repair involves loss of data, can this data be retrieved?</p>
<p>You can retrieve data from the index when a data block is marked corrupt. The <code dir="ltr"><a id="sthref2711"></a>DUMP_ORPHAN_KEYS</code> procedure can help you retrieve this information.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1006347"></a>
<div id="ADMIN11822" class="sect2">
<h3 class="sect2">Task 3: Make Objects Usable</h3>
<p><code dir="ltr">DBMS_REPAIR</code> makes the object usable by ignoring corruptions during table and index scans.</p>
<div id="ADMIN11823" class="sect3"><a id="sthref2712"></a>
<h4 class="sect3">Corruption Repair: Using the FIX_CORRUPT_BLOCKS and SKIP_CORRUPT_BLOCKS Procedures</h4>
<p>You can make a corrupt object usable by establishing an environment that skips corruptions that remain outside the scope of <code dir="ltr">DBMS_REPAIR</code> capabilities.</p>
<p>If corruptions involve a loss of data, such as a bad row in a data block, all such blocks are marked corrupt by the <a id="sthref2713"></a><code dir="ltr">FIX_CORRUPT_BLOCKS</code> procedure. Then you can run the <a id="sthref2714"></a><code dir="ltr">SKIP_CORRUPT_BLOCKS</code> procedure, which skips blocks that are marked as corrupt. When the <code dir="ltr">SKIP_FLAG</code> parameter in the procedure is set, table and index scans skip all blocks marked corrupt. This applies to both media and software corrupt blocks.</p>
</div>
<!-- class="sect3" -->
<div id="ADMIN11824" class="sect3"><a id="sthref2715"></a>
<h4 class="sect3">Implications when Skipping Corrupt Blocks</h4>
<p>If an index and table are not synchronized, then a <code dir="ltr">SET TRANSACTION READ ONLY</code> transaction can be inconsistent in situations where one query probes only the index, and a subsequent query probes both the index and the table. If the table block is marked corrupt, then the two queries return different results, thereby breaking the rules of a read-only transaction. One way to approach this is not to skip corruptions in a <code dir="ltr">SET TRANSACTION READ ONLY</code> transaction.</p>
<p>A similar issue occurs when selecting rows that are chained. A query of the same row may or may not access the corruption, producing different results.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006358"></a>
<div id="ADMIN11825" class="sect2">
<h3 class="sect2">Task 4: Repair Corruptions and Rebuild Lost Data</h3>
<p>After making an object usable, perform the following repair activities.</p>
<div id="ADMIN11826" class="sect3"><a id="sthref2716"></a>
<h4 class="sect3">Recover Data Using the DUMP_ORPHAN_KEYS Procedures</h4>
<p>The <a id="sthref2717"></a><code dir="ltr">DUMP_ORPHAN_KEYS</code> procedure reports on index entries that point to rows in corrupt data blocks. All such index entries are inserted into an orphan key table that stores the key and rowid of the corruption.</p>
<p>After the index entry information has been retrieved, you can rebuild the index using the <code dir="ltr">ALTER INDEX...REBUILD ONLINE</code> statement.</p>
</div>
<!-- class="sect3" -->
<div id="ADMIN11827" class="sect3"><a id="sthref2718"></a>
<h4 class="sect3">Fix Segment Bitmaps Using the SEGMENT_FIX_STATUS Procedure</h4>
<p>Use this procedure if free space in segments is being managed by using bitmaps (<code dir="ltr">SEGMENT SPACE MANAGEMENT AUTO</code>).</p>
<p>This procedure recalculates the state of a bitmap entry based on the current contents of the corresponding block. Alternatively, you can specify that a bitmap entry be set to a specific value. Usually the state is recalculated correctly and there is no need to force a setting.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006373"></a>
<div id="ADMIN11828" class="sect1">
<h2 class="sect1">DBMS_REPAIR Examples<a id="sthref2719"></a></h2>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#i1006401">Examples: Building a Repair Table or Orphan Key Table</a></p>
</li>
<li>
<p><a href="#i1006465">Example: Detecting Corruption</a></p>
</li>
<li>
<p><a href="#i1006505">Example: Fixing Corrupt Blocks</a></p>
</li>
<li>
<p><a href="#i1006535">Example: Finding Index Entries Pointing to Corrupt Data Blocks</a></p>
</li>
<li>
<p><a href="#i1006577">Example: Skipping Corrupt Blocks</a></p>
</li>
</ul>
<a id="i1006401"></a>
<div id="ADMIN11829" class="sect2">
<h3 class="sect2">Examples: Building a Repair Table or Orphan Key Table</h3>
<p>The <code dir="ltr">ADMIN_TABLE</code> procedure is used to create, purge, or drop a repair table or an orphan key table.</p>
<p>A repair table provides information about the corruptions that were found by the <code dir="ltr">CHECK_OBJECT</code> procedure and how these will be addressed if the <code dir="ltr">FIX_CORRUPT_BLOCKS</code> procedure is run. Further, it is used to drive the execution of the <code dir="ltr">FIX_CORRUPT_BLOCKS</code> procedure.</p>
<p>An orphan key table is used when the <code dir="ltr">DUMP_ORPHAN_KEYS</code> procedure is executed and it discovers index entries that point to corrupt rows. The <code dir="ltr">DUMP_ORPHAN_KEYS</code> procedure populates the orphan key table by logging its activity and providing the index information in a usable manner.</p>
<div id="ADMIN11830" class="sect3"><a id="sthref2720"></a>
<h4 class="sect3">Example: Creating a Repair Table<a id="sthref2721"></a><a id="sthref2722"></a></h4>
<p>The following example creates a repair table for the <code dir="ltr">users</code> tablespace.</p>
<pre dir="ltr">
BEGIN
  DBMS_REPAIR.ADMIN_TABLES (
     TABLE_NAME =&gt; 'REPAIR_TABLE',
     TABLE_TYPE =&gt; dbms_repair.repair_table,
     ACTION     =&gt; dbms_repair.create_action,
     TABLESPACE =&gt; 'USERS');
END;
/
</pre>
<p>For each repair or orphan key table, a view is also created that eliminates any rows that pertain to objects that no longer exist. The name of the view corresponds to the name of the repair or orphan key table and is prefixed by <code dir="ltr">DBA_</code> (for example, <code dir="ltr">DBA_REPAIR_TABLE</code> or <code dir="ltr">DBA_ORPHAN_KEY_TABLE</code>).</p>
<p>The following query describes the repair table that was created for the <code dir="ltr">users</code> tablespace.</p>
<pre dir="ltr">
DESC REPAIR_TABLE

 Name                         Null?    Type
 ---------------------------- -------- --------------
 OBJECT_ID                    NOT NULL NUMBER
 TABLESPACE_ID                NOT NULL NUMBER
 RELATIVE_FILE_ID             NOT NULL NUMBER
 BLOCK_ID                     NOT NULL NUMBER
 CORRUPT_TYPE                 NOT NULL NUMBER
 SCHEMA_NAME                  NOT NULL VARCHAR2(30)
 OBJECT_NAME                  NOT NULL VARCHAR2(30)
 BASEOBJECT_NAME                       VARCHAR2(30)
 PARTITION_NAME                        VARCHAR2(30)
 CORRUPT_DESCRIPTION                   VARCHAR2(2000)
 REPAIR_DESCRIPTION                    VARCHAR2(200)
 MARKED_CORRUPT               NOT NULL VARCHAR2(10)
 CHECK_TIMESTAMP              NOT NULL DATE
 FIX_TIMESTAMP                         DATE
 REFORMAT_TIMESTAMP                    DATE
</pre></div>
<!-- class="sect3" -->
<div id="ADMIN11831" class="sect3"><a id="sthref2723"></a>
<h4 class="sect3">Example: Creating an Orphan Key Table<a id="sthref2724"></a><a id="sthref2725"></a></h4>
<p>This example illustrates the creation of an orphan key table for the <code dir="ltr">users</code> tablespace.</p>
<pre dir="ltr">
BEGIN
  DBMS_REPAIR.ADMIN_TABLES (
     TABLE_NAME =&gt; 'ORPHAN_KEY_TABLE',
     TABLE_TYPE =&gt; dbms_repair.orphan_table,
     ACTION     =&gt; dbms_repair.create_action,
     TABLESPACE =&gt; 'USERS');
END;
/
</pre>
<p>The orphan key table is described in the following query:</p>
<pre dir="ltr">
DESC ORPHAN_KEY_TABLE

 Name                         Null?    Type
 ---------------------------- -------- -----------------
 SCHEMA_NAME                  NOT NULL VARCHAR2(30)
 INDEX_NAME                   NOT NULL VARCHAR2(30)
 IPART_NAME                            VARCHAR2(30)
 INDEX_ID                     NOT NULL NUMBER
 TABLE_NAME                   NOT NULL VARCHAR2(30)
 PART_NAME                             VARCHAR2(30)
 TABLE_ID                     NOT NULL NUMBER
 KEYROWID                     NOT NULL ROWID
 KEY                          NOT NULL ROWID
 DUMP_TIMESTAMP               NOT NULL DATE
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006465"></a>
<div id="ADMIN11832" class="sect2">
<h3 class="sect2">Example: Detecting Corruption</h3>
<p>The <a id="sthref2726"></a><code dir="ltr">CHECK_OBJECT</code> procedure checks the specified object, and populates the repair table with information about corruptions and repair directives. You can optionally specify a range, partition name, or subpartition name when you want to check a portion of an object.</p>
<p>Validation consists of checking all blocks in the object that have not previously been marked corrupt. For each block, the transaction and data layer portions are checked for self consistency. During <code dir="ltr">CHECK_OBJECT</code>, if a block is encountered that has a corrupt buffer cache header, then that block is skipped.</p>
<p>The following is an example of executing the <code dir="ltr">CHECK_OBJECT</code> procedure for the <code dir="ltr">scott.dept</code> table.</p>
<pre dir="ltr">
SET SERVEROUTPUT ON
DECLARE num_corrupt INT;
BEGIN
 num_corrupt := 0;
 DBMS_REPAIR.CHECK_OBJECT (
     SCHEMA_NAME =&gt; 'SCOTT',
     OBJECT_NAME =&gt; 'DEPT',
     REPAIR_TABLE_NAME =&gt; 'REPAIR_TABLE',
     CORRUPT_COUNT =&gt;  num_corrupt);
 DBMS_OUTPUT.PUT_LINE('number corrupt: ' || TO_CHAR (num_corrupt));
END;
/
</pre>
<p>SQL*Plus outputs the following line, indicating one corruption:</p>
<pre dir="ltr">
number corrupt: 1
</pre>
<p>Querying the repair table produces information describing the corruption and suggesting a repair action.</p>
<pre dir="ltr">
SELECT OBJECT_NAME, BLOCK_ID, CORRUPT_TYPE, MARKED_CORRUPT,
       CORRUPT_DESCRIPTION, REPAIR_DESCRIPTION
     FROM REPAIR_TABLE;

OBJECT_NAME                      BLOCK_ID CORRUPT_TYPE MARKED_COR
------------------------------ ---------- ------------ ----------
CORRUPT_DESCRIPTION
------------------------------------------------------------------------------
REPAIR_DESCRIPTION
------------------------------------------------------------------------------
DEPT                                    3            1 FALSE
kdbchk: row locked by non-existent transaction
        table=0   slot=0
        lockid=32   ktbbhitc=1
mark block software corrupt
</pre>
<p>The corrupted block has not yet been marked corrupt, so this is the time to extract any meaningful data. After the block is marked corrupt, the entire block must be skipped.</p>
</div>
<!-- class="sect2" -->
<a id="i1006505"></a>
<div id="ADMIN11833" class="sect2">
<h3 class="sect2">Example: Fixing Corrupt Blocks</h3>
<p>Use the <a id="sthref2727"></a><code dir="ltr">FIX_CORRUPT_BLOCKS</code> procedure to fix the corrupt blocks in specified objects based on information in the repair table that was generated by the <code dir="ltr">CHECK_OBJECT</code> procedure. Before changing a block, the block is checked to ensure that the block is still corrupt. Corrupt blocks are repaired by marking the block software corrupt. When a repair is performed, the associated row in the repair table is updated with a timestamp.</p>
<p>This example fixes the corrupt block in table <code dir="ltr">scott.dept</code> that was reported by the <code dir="ltr">CHECK_OBJECT</code> procedure.</p>
<pre dir="ltr">
SET SERVEROUTPUT ON
DECLARE num_fix INT;
BEGIN 
 num_fix := 0;
 DBMS_REPAIR.FIX_CORRUPT_BLOCKS (
     SCHEMA_NAME =&gt; 'SCOTT',
     OBJECT_NAME=&gt; 'DEPT',
     OBJECT_TYPE =&gt; dbms_repair.table_object,
     REPAIR_TABLE_NAME =&gt; 'REPAIR_TABLE',
     FIX_COUNT=&gt; num_fix);
 DBMS_OUTPUT.PUT_LINE('num fix: ' || TO_CHAR(num_fix));
END;
/
</pre>
<p>SQL*Plus outputs the following line:</p>
<pre dir="ltr">
num fix: 1
</pre>
<p>The following query confirms that the repair was done.</p>
<pre dir="ltr">
SELECT OBJECT_NAME, BLOCK_ID, MARKED_CORRUPT
     FROM REPAIR_TABLE;

OBJECT_NAME                      BLOCK_ID MARKED_COR
------------------------------ ---------- ----------
DEPT                                    3 TRUE
</pre></div>
<!-- class="sect2" -->
<a id="i1006535"></a>
<div id="ADMIN11834" class="sect2">
<h3 class="sect2">Example: Finding Index Entries Pointing to Corrupt Data Blocks</h3>
<p>The <a id="sthref2728"></a><code dir="ltr">DUMP_ORPHAN_KEYS</code> procedure reports on index entries that point to rows in corrupt data blocks. For each index entry, a row is inserted into the specified orphan key table. The orphan key table must have been previously created.</p>
<p>This information can be useful for rebuilding lost rows in the table and for diagnostic purposes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This should be run for every index associated with a table identified in the repair table.</div>
<p>In this example, <code dir="ltr">pk_dept</code> is an index on the <code dir="ltr">scott.dept</code> table. It is scanned to determine if there are any index entries pointing to rows in the corrupt data block.</p>
<pre dir="ltr">
SET SERVEROUTPUT ON
DECLARE num_orphans INT;
BEGIN
 num_orphans := 0;
 DBMS_REPAIR.DUMP_ORPHAN_KEYS (
     SCHEMA_NAME =&gt; 'SCOTT',
     OBJECT_NAME =&gt; 'PK_DEPT',
     OBJECT_TYPE =&gt; dbms_repair.index_object,
     REPAIR_TABLE_NAME =&gt; 'REPAIR_TABLE',
     ORPHAN_TABLE_NAME=&gt; 'ORPHAN_KEY_TABLE',
     KEY_COUNT =&gt; num_orphans);
 DBMS_OUTPUT.PUT_LINE('orphan key count: ' || TO_CHAR(num_orphans));
END;
/
</pre>
<p>The following output indicates that there are three orphan keys:</p>
<pre dir="ltr">
orphan key count: 3
</pre>
<p>Index entries in the orphan key table implies that the index should be rebuilt. This guarantees that a table probe and an index probe return the same result set.</p>
</div>
<!-- class="sect2" -->
<a id="i1006577"></a>
<div id="ADMIN11835" class="sect2">
<h3 class="sect2">Example: Skipping Corrupt Blocks</h3>
<p>The <a id="sthref2729"></a><code dir="ltr">SKIP_CORRUPT_BLOCKS</code> procedure enables or disables the skipping of corrupt blocks during index and table scans of the specified object. When the object is a table, skipping applies to the table and its indexes. When the object is a cluster, it applies to all of the tables in the cluster, and their respective indexes.</p>
<p>The following example enables the skipping of software corrupt blocks for the <code dir="ltr">scott.dept</code> table:</p>
<pre dir="ltr">
BEGIN
  DBMS_REPAIR.SKIP_CORRUPT_BLOCKS (
     SCHEMA_NAME =&gt; 'SCOTT',
     OBJECT_NAME =&gt; 'DEPT',
     OBJECT_TYPE =&gt; dbms_repair.table_object,
     FLAGS =&gt; dbms_repair.skip_flag);
END;
/
</pre>
<p>Querying <code dir="ltr">scott</code>'s tables using the <code dir="ltr">DBA_TABLES</code> view shows that <code dir="ltr">SKIP_CORRUPT</code> is enabled for table <code dir="ltr">scott.dept</code>.</p>
<pre dir="ltr">
SELECT OWNER, TABLE_NAME, SKIP_CORRUPT FROM DBA_TABLES
    WHERE OWNER = 'SCOTT';

OWNER                          TABLE_NAME                     SKIP_COR
------------------------------ ------------------------------ --------
SCOTT                          ACCOUNT                        DISABLED
SCOTT                          BONUS                          DISABLED
SCOTT                          DEPT                           ENABLED
SCOTT                          DOCINDEX                       DISABLED
SCOTT                          EMP                            DISABLED
SCOTT                          RECEIPT                        DISABLED
SCOTT                          SALGRADE                       DISABLED
SCOTT                          SCOTT_EMP                      DISABLED
SCOTT                          SYS_IOT_OVER_12255             DISABLED
SCOTT                          WORK_AREA                      DISABLED

10 rows selected.<a id="sthref2730"></a>
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1326">
<tr>
<td class="cellalignment1335">
<table class="cellalignment1331">
<tr>
<td class="cellalignment1330"><a href="views.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1330"><a href="part6.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1337">
<table class="cellalignment1329">
<tr>
<td class="cellalignment1330"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1330"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1330"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1330"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1330"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1330"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
