<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Oracle Scheduler Concepts</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1055" />
<meta name="dcterms.created" content="2015-05-05T8:27:37Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Administrator's Guide" />
<meta name="dcterms.identifier" content="E25494-07" />
<meta name="dcterms.isVersionOf" content="ADMIN" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="dbrm.htm" title="Previous" type="text/html" />
<link rel="Next" href="scheduse.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25494.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">38/49</span> <!-- End Header -->
<div id="ADMIN033" class="chapter"><a id="g1009892"></a> <a id="i1106753"></a>
<h1 class="chapter"><span class="secnum">28</span> Oracle Scheduler Concepts</h1>
<p>In this chapter:</p>
<ul>
<li>
<p><a href="#i1006216">Overview of Oracle Scheduler</a></p>
</li>
<li>
<p><a href="#BGBJHJDC">About Jobs and Supporting Scheduler Objects</a></p>
</li>
<li>
<p><a href="#CHDHJDFF">More About Jobs</a></p>
</li>
<li>
<p><a href="#i1006773">Scheduler Architecture</a></p>
</li>
<li>
<p><a href="#BGBJCFCB">Scheduler Support for Oracle Data Guard</a></p>
</li>
<li>
<p><a href="#CHDDGBDF">Oracle Scheduler and Editions</a></p>
</li>
</ul>
<a id="i1006216"></a>
<div id="ADMIN12354" class="sect1">
<h2 class="sect1">Overview of Oracle Scheduler<a id="sthref2914"></a></h2>
<p>Oracle Database includes Oracle Scheduler, an enterprise job scheduler to help you simplify the scheduling of hundreds or even thousands of tasks. Oracle Scheduler (the Scheduler) is implemented by the procedures and functions in the <code dir="ltr">DBMS_SCHEDULER</code> PL/SQL package.</p>
<p>The Scheduler enables you to control when and where various computing tasks take place in the enterprise environment. The Scheduler helps you effectively manage and plan these tasks. By ensuring that many routine computing tasks occur without manual intervention, you can lower operating costs, implement more reliable routines, minimize human error, and shorten the time windows needed.</p>
<p>The Scheduler provides sophisticated, flexible enterprise scheduling functionality, which you can use to:</p>
<ul>
<li>
<p>Run <span class="bold">database program units</span><a id="sthref2915"></a></p>
<p>You can run program units, that is, PL/SQL anonymous blocks, PL/SQL stored procedures, and Java stored procedures on the local database or on one or more remote Oracle databases.</p>
</li>
<li>
<p>Run external executables, (executables that are external to the database)</p>
<p>You can run <span class="bold">external executables</span>, such as applications, shell scripts, and batch files, on the local system or on one or more remote systems. Remote systems do not require an Oracle Database installation; they require only a Scheduler agent. Scheduler agents are available for all platforms supported by Oracle Database and some additional platforms.</p>
</li>
<li>
<p>Schedule job execution using the following methods:</p>
<ul>
<li>
<p>Time-based scheduling<a id="sthref2916"></a></p>
<p>You can schedule a job to run at a particular date and time, either once or on a repeating basis. You can define complex repeat intervals, such as "every Monday and Thursday at 3:00 a.m. except on public holidays" or "the last Wednesday of each business quarter." See <a href="scheduse.htm#i1006395">"Creating, Running, and Managing Jobs"</a> for more information.</p>
</li>
<li>
<p>Event-based scheduling<a id="sthref2917"></a></p>
<p>You can start jobs in response to system or business events. Your applications can detect events and then signal the Scheduler. Depending on the type of signal sent, the Scheduler starts a specific job. Examples of event-based scheduling include starting jobs when a file arrives on a system, when inventory falls below predetermined levels, or when a transaction fails. Beginning with Oracle Database 11<span class="italic">g</span> Release 2, a Scheduler object called a file watcher simplifies the task of configuring a job to start when a file arrives on a local or remote system. See <a href="scheduse.htm#CHDDDIJB">"Using Events to Start Jobs"</a> for more information.</p>
</li>
<li>
<p>Dependency scheduling<a id="sthref2918"></a></p>
<p>You can set the Scheduler to run tasks based on the outcome of one or more previous tasks. You can define complex dependency chains that include branching and nested chains. See <a href="scheduse.htm#CHDEFJGF">"Creating and Managing Job Chains"</a> for more information.</p>
</li>
</ul>
</li>
<li>
<p>Prioritize jobs based on business requirements.</p>
<p>The Scheduler provides control over resource allocation among competing jobs, thus aligning job processing with your business needs. This is accomplished in the following ways:</p>
<ul>
<li>
<p>Controlling Resources by Job Class</p>
<p>You can group jobs that share common characteristics and behavior into larger entities called job classes. You can prioritize among the classes by controlling the resources allocated to each class. Therefore, you can ensure that your critical jobs have priority and enough resources to complete. For example, for a critical project to load a data warehouse, you can combine all the data warehousing jobs into one class and give it priority over other jobs by allocating a high percentage of the available resources to it. You can also assign relative priorities to the jobs within a job class.</p>
</li>
<li>
<p>Controlling Job Prioritization based on Schedules</p>
<p>You can change job priorities based on a schedule. Because your definition of a critical job can change over time, the Scheduler also enables you to change the priority among your jobs over that time frame. For example, extract, transfer, and load (ETL) jobs used to load a data warehouse may be critical during non-peak hours but not during peak hours. Additionally, jobs that must run during the close of a business quarter may need to take priority over the ETL jobs. In these cases, you can change the priority among the job classes by changing the resources allocated to each class. See <a href="scheduse.htm#i1010485">"Creating Job Classes"</a> and <a href="scheduse.htm#i1009193">"Creating Windows"</a> for more information.</p>
</li>
</ul>
</li>
<li>
<p>Manage and monitor jobs</p>
<p>You can manage and monitor the multiple states that jobs go through, from creation to completion. The Scheduler logs activity so that you can easily track information such as the status of the job and the last run time of the job by querying views using Enterprise Manager or SQL. These views provide valuable information about jobs and their execution that can help you schedule and better manage your jobs. For example, a DBA can easily track all jobs that failed for a particular user. See <a href="schedadmin.htm#i1006377">"Scheduler Data Dictionary Views"</a>.</p>
<p>When you create a multiple-destination job, a job that is defined at one database but that runs on multiple remote hosts, you can monitor the status of the job at each destination individually or the overall status of the parent job as a whole.</p>
<p>For advanced job monitoring, your applications can subscribe to job state change notifications that the Scheduler delivers in event queues. The Scheduler can also send e-mail notifications when a job changes state.</p>
<p>See <a href="schedadmin.htm#i1006334">"Monitoring and Managing the Scheduler"</a>.</p>
</li>
<li>
<p>Execute and manage jobs in a clustered environment</p>
<p>A cluster is a set of database instances that cooperates to perform the same task. Oracle Real Application Clusters (Oracle RAC) provides scalability and reliability without any change to your applications. The Scheduler fully supports execution of jobs in such a clustered environment. To balance the load on your system and for better performance, you can also specify the database service where you want a job to run. See <a href="#i1006857">"Using the Scheduler in Real Application Clusters Environments"</a> for more information.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BGBJHJDC"></a>
<div id="ADMIN12668" class="sect1">
<h2 class="sect1">About Jobs and Supporting Scheduler Objects<a id="sthref2919"></a></h2>
<p>To use the Scheduler, you create <span class="italic">Scheduler objects</span>. Schema objects define the what, when, and where for job scheduling. Scheduler objects enable a modular approach to managing tasks. One advantage of the modular approach is that objects can be reused when creating new tasks that are similar to existing tasks.</p>
<p>The principal Scheduler object is the job. A <span class="bold">job</span> defines the action to perform, the schedule for the action, and the location or locations where the action takes place. Most other scheduler objects are created to support jobs.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Oracle Scheduler job replaces the <code dir="ltr">DBMS_JOB</code> package, which is still supported for backward compatibility. This chapter assumes that you are only using Scheduler jobs. If you are using both at once, or migrating from <code dir="ltr">DBMS_JOB</code> to Scheduler jobs, see <a href="appendix_a.htm#adminAppendixA">Appendix A, "Support for DBMS_JOB in Oracle Database 11<span class="italic">g</span> Release 2."</a></div>
<p>The Scheduler objects include:</p>
<ul>
<li>
<p><a href="#i1106287">Programs</a></p>
</li>
<li>
<p><a href="#i1106296">Schedules</a></p>
</li>
<li>
<p><a href="#i1106309">Jobs</a></p>
</li>
<li>
<p><a href="#CHDDFGIF">Destinations</a></p>
</li>
<li>
<p><a href="#BGBBEHHH">Chains</a></p>
</li>
<li>
<p><a href="#CHDHBAFC">File Watchers</a></p>
</li>
<li>
<p><a href="#BGBDCCCE">Credentials</a></p>
</li>
<li>
<p><a href="#i1106378">Job Classes</a></p>
</li>
<li>
<p><a href="#i1106396">Windows</a></p>
</li>
<li>
<p><a href="#CHDCFBGH">Groups</a></p>
</li>
</ul>
<p>Each of these objects is described in detail later in this section.</p>
<p>Because Scheduler objects belong to schemas, you can grant object privileges on them. Some Scheduler objects, including job classes, windows, and window groups, are always created in the <code dir="ltr">SYS</code> schema, even if the user is not <code dir="ltr">SYS</code>. All other objects are created in the user's own schema or in a designated schema.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="schedadmin.htm#i1011204">"Scheduler Privileges"</a></p>
</li>
</ul>
</div>
<a id="i1106287"></a>
<div id="ADMIN12357" class="sect2">
<h3 class="sect2">Programs<a id="sthref2920"></a></h3>
<p>A program object (program) describes what is to be run by the Scheduler. A program includes:</p>
<ul>
<li>
<p>An action: For example, the name of a stored procedure, the name of an executable found in the operating system file system (an "external executable"), or the text of a PL/SQL anonymous block.</p>
</li>
<li>
<p>A type: <code dir="ltr">STORED_PROCEDURE</code>, <code dir="ltr">PLSQL_BLOCK</code>, or <code dir="ltr">EXTERNAL</code>, where <code dir="ltr">EXTERNAL</code> indicates an external executable.</p>
</li>
<li>
<p>Number of arguments: The number of arguments that the stored procedure or external executable accepts.</p>
</li>
</ul>
<p>A program is a separate entity from a job. A job runs at a certain time or because a certain event occurred, and invokes a certain program. You can create jobs that point to existing program objects, which means that different jobs can use the same program and run the program at different times and with different settings. With the right privileges, different users can use the same program without having to redefine it. Therefore, you can create program libraries, where users can select from a list of existing programs.</p>
<p>If a stored procedure or external executable referenced by the program accepts arguments, you define these arguments in a separate step after creating the program. You can optionally define a default value for each argument.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="scheduse.htm#i1022890">"Creating Programs"</a></p>
</li>
<li>
<p><a href="#i1106309">"Jobs"</a> for an overview of jobs</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i1106296"></a>
<div id="ADMIN12358" class="sect2">
<h3 class="sect2">Sched<a id="sthref2921"></a>ules</h3>
<p>A schedule object (schedule) specifies when and how many times a job is run. Schedules can be shared by multiple jobs. For example, the end of a business quarter may be a common time frame for many jobs. Rather than defining an end-of-quarter schedule each time a new job is defined, job creators can point to a named schedule.</p>
<p>There are two types of schedules:</p>
<ul>
<li>
<p>time schedules</p>
<p>With time schedules, you can schedule jobs to run immediately or at a later time. Time schedules include a start date and time, optional end date and time, and optional repeat interval.</p>
</li>
<li>
<p>event schedules</p>
<p>With event schedules, you can specify that a job executes when a certain event occurs, such as inventory falling below a threshold or a file arriving on a system. For more information on events, see <a href="scheduse.htm#CHDDDIJB">"Using Events to Start Jobs"</a>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="scheduse.htm#i1023028">"Creating Schedules"</a></div>
</div>
<!-- class="sect2" -->
<a id="i1106309"></a>
<div id="ADMIN12359" class="sect2">
<h3 class="sect2">Job<a id="sthref2922"></a>s</h3>
<p>A job object (job) is a collection of metadata that describes a user-defined task. It defines what must be executed (the action), when (the one-time or recurring schedule or a triggering event), where (the destinations), and with what credentials. A job has an owner, which is the schema in which it is created.</p>
<p>You define where a job runs by specifying a one or more destinations. Destinations are also Scheduler objects and are described later in this section. If you do not specify a destination, it is assumed that the job runs on the local database.</p>
<p>You specify the job action in one of the following ways:</p>
<ul>
<li>
<p>By specifying as a job attribute the database program unit or external executable to be run. This is known as specifying the job action <span class="bold">inline</span>.</p>
</li>
<li>
<p>By specifying as a job attribute the name of an existing program object (program), that specifies the database program unit or external executable to be run. The job owner must have the <code dir="ltr">EXECUTE</code> privilege on the program or the <code dir="ltr">EXECUTE</code> <code dir="ltr">ANY</code> <code dir="ltr">PROGRAM</code> system privilege.</p>
</li>
</ul>
<p>A job that runs a database program unit is known as a <span class="bold">database job</span>. A job that runs an external executable is known as an <span class="bold">external job</span>.</p>
<p>You specify the job schedule in one of the following ways:</p>
<ul>
<li>
<p>By setting attributes of the job object to define start and end dates and a repeat interval, or to define an event that starts the job. This is known as specifying the schedule <span class="bold">inline</span>.</p>
</li>
<li>
<p>By specifying as a job attribute the name of an existing schedule object (schedule), which defines start and end dates and a repeat interval, or defines an event.</p>
</li>
</ul>
<p>You specify the job destinations in one of the following ways:</p>
<ul>
<li>
<p>By specifying as a job attribute a single named destination object. In this case, the job runs on one remote location.</p>
</li>
<li>
<p>By specifying as a job attribute a named destination group, which is equivalent to a list of remote locations. In this case, the job runs on all remote locations.</p>
</li>
<li>
<p>By not specifying a destination attribute, in which case the job runs locally. The job runs either of the following:</p>
<ul>
<li>
<p>A database program unit on the local database (the database on which the job is created)</p>
</li>
<li>
<p>An external executable on the local host, depending on the job action type</p>
</li>
</ul>
</li>
</ul>
<p>You specify the job credentials in one of the following ways:</p>
<ul>
<li>
<p>By specifying as a job attribute a named credential object, which contains either of the following:</p>
<ul>
<li>
<p>A database user name and password (for database jobs)</p>
</li>
<li>
<p>A host operating system user name and password (for external jobs)</p>
</li>
</ul>
<p>The job runs as the user named in the credential.</p>
</li>
<li>
<p>By allowing the credential attribute of the job to remain <code dir="ltr">NULL</code>, in which case a local database job runs as the job owner, and a local external job runs with default credentials. (See <a href="#CHDFEJDG">Table 28-1</a>.) The job owner is the schema in which the job was created.</p>
</li>
</ul>
<p>Jobs that run database program units at one or more remote locations are called <span class="bold">remote database jobs</span>. Jobs that run external executables at one or more remote locations are called <span class="bold">remote external jobs</span>.</p>
<p>After you create a job and enable it, the Scheduler automatically runs the job according to its schedule or when the specified event is detected. You can view the run status of job and its job log by querying data dictionary views. If a job runs on multiple destinations, you can query the status of the job at each destination.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CHDDFGIF">"Destinations"</a></p>
</li>
<li>
<p><a href="#CHDHJDFF">"More About Jobs"</a></p>
</li>
<li>
<p><a href="scheduse.htm#i1009668">"Creating Jobs"</a></p>
</li>
<li>
<p><a href="schedadmin.htm#i1006377">"Scheduler Data Dictionary Views"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDDFGIF"></a>
<div id="ADMIN13353" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Destinations<a id="sthref2923"></a><a id="sthref2924"></a><a id="sthref2925"></a></h3>
<p>A destination object (destination) defines a location for running a job.</p>
<p>There are two types of destinations:</p>
<ul>
<li>
<p>External destination: Specifies a remote host name and IP address for running a remote external job.</p>
</li>
<li>
<p>Database destination: Specifies a remote database instance for running a remote database job.</p>
</li>
</ul>
<p>Jobs that run external executables (external jobs) must specify external destinations, and jobs that run database program units (database jobs) must specify database destinations.</p>
<p>If you specify a destination when you create a job, the job runs on that destination. If you do not specify a destination, the job runs locally, on the system on which it is created.</p>
<p>You can also create a destination group, which consists of a list of destinations, and reference this destination group when creating a job. In this case, the job runs on all destinations in the group.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Destination groups can also include the keyword <code dir="ltr">LOCAL</code> as a group member, indicating that the job also runs on the local host or local database.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDCFBGH">"Groups"</a></div>
<p>No object privileges are required to use a destination created by another user.</p>
<div id="ADMIN13486" class="sect3"><a id="sthref2926"></a>
<h4 class="sect3">About Destinations and Scheduler Agents</h4>
<p>The remote location specified in a destination object must have a Scheduler agent running, and the agent must be registered with the database creating the job. The Scheduler agent enables the local Scheduler to communicate with the remote host, start and stop jobs there, and return remote job status to the local database. For complete details, see <a href="scheduse.htm#CIAHFHFA">"Creating Destinations"</a>.</p>
<div id="ADMIN13487" class="sect4"><a id="sthref2927"></a>
<h5 class="sect4">External Destinations</h5>
<p>You cannot explicitly create external destinations. They are created in your local database when you register a Scheduler agent with that database. The name assigned to the external destination is the name of the agent. You can configure an agent name after you install it, or you can accept the default agent name, which is the first part of the host name (before the first dot separator). For example, if you install an agent on the host <code dir="ltr">dbhost1.us.example.com</code>, the agent name defaults to <code dir="ltr">DBHOST1</code>.</p>
</div>
<!-- class="sect4" -->
<div id="ADMIN13488" class="sect4"><a id="sthref2928"></a>
<h5 class="sect4">Database Destinations</h5>
<p>You create database destinations with the <code dir="ltr">DBMS_SCHEDULER.CREATE_DATABASE_DESTINATION</code> procedure.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you have multiple database instances running on the local host, you can run jobs on the other instances by creating database destinations for those instances. Thus, "remote" database instances do not necessarily have to reside on remote hosts. The local host must be running a Scheduler agent to support running remote database jobs on these additional instances.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="scheduse.htm#CIAHFHFA">"Creating Destinations"</a></p>
</li>
<li>
<p><a href="schedadmin.htm#BAJDFHBE">"Installing and Configuring the Scheduler Agent on a Remote Host"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDHBAFC"></a>
<div id="ADMIN13284" class="sect2">
<h3 class="sect2">File Watchers</h3>
<p>A file watcher object (file watcher) defines the location, name, and other properties of a file whose arrival on a system causes the Scheduler to start a job. You create a file watcher and then create any number of event-based jobs or event schedules that reference the file watcher. When the file watcher detects the arrival of the designated file, it raises a file arrival event. The job started by the file arrival event can retrieve the event message to learn about the newly arrived file.</p>
<p>A file watcher can watch for a file on the local system (the same host computer running Oracle Database) or a remote system, provided that the remote system is running the Scheduler agent.</p>
<p>To use file watchers, the database Java virtual machine (JVM) component must be installed.</p>
<p>See <a href="scheduse.htm#CIAEJGJE">"About File Watchers"</a> for more information.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="scheduse.htm#CIABIEJA">"Creating File Watchers and File Watcher Jobs"</a></div>
</div>
<!-- class="sect2" -->
<a id="BGBDCCCE"></a>
<div id="ADMIN12373" class="sect2">
<h3 class="sect2">Credentials<a id="sthref2929"></a><a id="sthref2930"></a><a id="sthref2931"></a><a id="sthref2932"></a></h3>
<p>A <span class="bold">credential</span> is a user name and password pair stored in a dedicated database object. A job uses a credential to authenticate itself with a database instance or the operating system so that it can run. You use credentials for:</p>
<ul>
<li>
<p>Remote database jobs&mdash;The credential contains a database user name and password. The stored procedure or PL/SQL block specified in the remote database job runs as this database user.</p>
</li>
<li>
<p>External jobs (local or remote)&mdash;The credential contains a host operating system user name and password. The external executable of the job then runs with this user name and password.</p>
</li>
<li>
<p>File watchers&mdash;The credential contains a host operating system user name and password. The job that processes the file arrival event uses this user name and password to access the arrived file.</p>
</li>
</ul>
<p>You can query the <code dir="ltr">*_SCHEDULER_CREDENTIALS</code> views to see a list of credentials in the database. Credential passwords are stored obfuscated, and are not displayed in the <code dir="ltr">*_SCHEDULER_CREDENTIALS</code> views.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="scheduse.htm#CIAHDDCJ">"Creating Credentials"</a></div>
</div>
<!-- class="sect2" -->
<a id="BGBBEHHH"></a>
<div id="ADMIN12362" class="sect2">
<h3 class="sect2">Chai<a id="sthref2933"></a>ns</h3>
<p>Chains are the means by which you can implement dependency scheduling, in which job starts depend on the outcomes of one or more previous jobs. A chain consists of multiple steps that are combined using dependency rules. The dependency rules define the conditions that can be used to start or stop a step or the chain itself. Conditions can include the success, failure, or completion- or exit-codes of previous steps. Logical expressions, such as AND/OR, can be used in the conditions. In a sense, a chain resembles a decision tree, with many possible paths for selecting which tasks run and when.</p>
<p>In its simplest form, a chain consists of two or more Scheduler program objects (programs) that are linked together for a single, combined objective. An example of a chain might be "run program A followed by program B, and then run program C only if programs A and B complete successfully, otherwise wait an hour and then run program D."</p>
<p>As an example, you might want to create a chain to combine the different programs necessary for a successful financial transaction, such as validating and approving a loan application, and then funding the loan.</p>
<p>A Scheduler job can point to a chain instead of pointing to a single program object. The job then serves to start the chain. This job is referred to as the <span class="bold">chain job</span>. Multiple chain jobs can point to the same chain, and more than one of these jobs can run simultaneously, thereby creating multiple instances of the same chain, each at a different point of progress in the chain.</p>
<p>Each position within a chain is referred to as a <span class="bold">step</span>. Typically, after an initial set of chain steps has started, the execution of successive steps depends on the completion of one or more previous steps. Each step can point to one of the following:</p>
<ul>
<li>
<p>A program object (program)</p>
<p>The program can run a database program unit (such as a stored procedure or PL/SQL anonymous block) or an external executable.</p>
</li>
<li>
<p>Another chain (a nested chain)</p>
<p>Chains can be nested to any level.</p>
</li>
<li>
<p>An event schedule, inline event, or file watcher</p>
<p>After starting a step that points to an event schedule or that has an inline event specification, the step waits until the specified event is raised. Likewise, a step that references a file watcher inline or that points to an event schedule that references a file watcher waits until the file arrival event is raised. For a file arrival event or any other type of event, when the event occurs, the step completes, and steps that are dependent on the event step can run. A common example of an event in a chain is a user intervention, such an approval or rejection.</p>
</li>
</ul>
<p>Multiple steps in the chain can invoke the same program or nested chain.</p>
<p>For each step, you can specify either a database destination or an external destination on which the step should run. If a destination is not specified, the step runs on the originating (local) database or the local host. Each step in a chain can run on a different destination.</p>
<p><a href="#chainsMultiipleBrances262">Figure 28-1</a> shows a chain with multiple branches. In this chain, rules could have been defined as follows:</p>
<ul>
<li>
<p>If Step 1 completes successfully, start Step 2.</p>
</li>
<li>
<p>If Step 1 fails with error code 20100, start Step 3.</p>
</li>
<li>
<p>If Step 1 fails with any other error code, end the chain.</p>
</li>
</ul>
<p>Additional rules would govern the running of steps 4, 5, 6, and 7.</p>
<div id="ADMIN13082" class="figure">
<p class="titleinfigure"><a id="chainsMultiipleBrances262"></a>Figure 28-1 Chain with Multiple Branches</p>
<img width="503" height="347" src="img/admin080.gif" alt="Description of Figure 28-1 follows" /><br />
<a id="sthref2934" href="img_text/admin080.htm">Description of "Figure 28-1 Chain with Multiple Branches"</a><br />
<br /></div>
<!-- class="figure" -->
<p>While a job pointing to a chain is running, the current state of all steps of the running chain can be monitored. For every step, the Scheduler creates a <span class="bold">step job</span> with the same job name and owner as the chain job. Each step job additionally has a step job subname to uniquely identify it. The step job subname is included as the <code dir="ltr">JOB_SUBNAME</code> column in the views <code dir="ltr">*_SCHEDULER_RUNNING_JOBS</code>, <code dir="ltr">*_SCHEDULER_JOB_LOG</code>, and <code dir="ltr">*_SCHEDULER_JOB_RUN_DETAILS</code>, and as the <code dir="ltr">STEP_JOB_SUBNAME</code> column in the <code dir="ltr">*_SCHEDULER_RUNNING_CHAINS</code> views.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="scheduse.htm#CHDEFJGF">"Creating and Managing Job Chains"</a></div>
</div>
<!-- class="sect2" -->
<a id="i1106378"></a>
<div id="ADMIN12365" class="sect2">
<h3 class="sect2">Job Clas<a id="sthref2935"></a>ses</h3>
<p>You typically create job classes only when you are in the role of Scheduler administrator.</p>
<p>Job classes provide a way to:</p>
<ul>
<li>
<p>Assign the same set of attribute values to member jobs</p>
<p>Each job class specifies a set of attributes, such as logging level. When you assign a job to a job class, the job inherits those attributes. For example, you can specify the same policy for purging log entries for all payroll jobs.</p>
</li>
<li>
<p>Set service affinity for member jobs</p>
<p>You can set the <code dir="ltr">service</code> attribute of a job class to a desired database service name. This determines the instances in a Real Application Clusters environment that run the member jobs, and optionally, the system resources that are assigned to member jobs. See <a href="#BGBFBBEC">"Service Affinity when Using the Scheduler"</a> for more information.</p>
</li>
<li>
<p>Set resource allocation for member jobs</p>
<p>Job classes provide the link between the Database Resource Manager and the Scheduler, because each job class can specify a resource consumer group as an attribute. Member jobs then belong to the specified consumer group and are assigned resources according to settings in the current resource plan.</p>
<p>Alternatively, you can leave the <code dir="ltr">resource_consumer_group</code> attribute <code dir="ltr">NULL</code> and set the <code dir="ltr">service</code> attribute of a job class to a desired database service name. That service can in turn be mapped to a resource consumer group. If both the <code dir="ltr">resource_consumer_group</code> and <code dir="ltr">service</code> attributes are set, and the designated service maps to a resource consumer group, the resource consumer group named in the <code dir="ltr">resource_consumer_group</code> attribute takes precedence.</p>
<p>See <a href="dbrm.htm#g1021210">Chapter 27, "Managing Resources with Oracle Database Resource Manager"</a> for more information on mapping services to consumer groups.</p>
</li>
<li>
<p>Group jobs for prioritization</p>
<p>Within the same job class, you can assign priority values of 1-5 to individual jobs so that if two jobs in the class are scheduled to start at the same time, the one with the higher priority takes precedence. This ensures that you do not have a less important job preventing the timely completion of a more important one.</p>
<p>If two jobs have the same assigned priority value, the job with the earlier start date takes precedence. If no priority is assigned to a job, its priority defaults to 3.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Job priorities are used only to prioritize among jobs in the same class.
<p>There is no guarantee that a high priority job in class A will be started before a low priority job in class B, even if they share the same schedule. Prioritizing among jobs of different classes depends on the current resource plan and on the designated resource consumer group or service name of each job class.</p>
</div>
</li>
</ul>
<p>When defining job classes, try to classify jobs by functionality. Consider dividing jobs into groups that access similar data, such as marketing, production, sales, finance, and human resources.</p>
<p>Some of the restrictions to keep in mind are:</p>
<ul>
<li>
<p>A job must be part of exactly one class. When you create a job, you can specify which class the job is part of. If you do not specify a class, the job automatically becomes part of the class <code dir="ltr">DEFAULT_JOB_CLASS</code>.</p>
</li>
<li>
<p>Dropping a class while there are still jobs in that class results in an error. You can force a class to be dropped even if there are still jobs that are members of that class, but all jobs referring to that class are then automatically disabled and assigned to the class <code dir="ltr">DEFAULT_JOB_CLASS</code>. Jobs belonging to the dropped class that are already running continue to run under class settings determined at the start of the job.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="scheduse.htm#i1010485">"Creating Job Classes"</a></div>
</div>
<!-- class="sect2" -->
<a id="i1106396"></a>
<div id="ADMIN12366" class="sect2">
<h3 class="sect2">Windo<a id="sthref2936"></a>ws</h3>
<p>You typically create windows only when you are in the role of Scheduler administrator.</p>
<p>You create windows to automatically start jobs or to change resource allocation among jobs during various time periods of the day, week, and so on. A window is represented by an interval of time with a well-defined beginning and end, such as "from 12am-6am".</p>
<p>Windows work with job classes to control resource allocation. Each window specifies the resource plan to activate when the window <span class="bold">opens</span> (becomes active), and each job class specifies a resource consumer group or specifies a database service, which can map to a consumer group. A job that runs within a window, therefore, has resources allocated to it according to the consumer group of its job class and the resource plan of the window.</p>
<p><a href="#BGBGJBBC">Figure 28-2</a> shows a workday that includes two windows. In this configuration, jobs belonging to the job class that links to <code dir="ltr">Consumer Group 1</code> get more resources in the morning than in the afternoon. The opposite is true for jobs in the job class that links to <code dir="ltr">Consumer Group 2</code>.</p>
<div id="ADMIN13083" class="figure">
<p class="titleinfigure"><a id="BGBGJBBC"></a>Figure 28-2 Windows help define the resources that are allocated to jobs</p>
<img width="651" height="194" src="img/admin061.gif" alt="Description of Figure 28-2 follows" /><br />
<a id="sthref2937" href="img_text/admin061.htm">Description of "Figure 28-2 Windows help define the resources that are allocated to jobs"</a><br />
<br /></div>
<!-- class="figure" -->
<p>See <a href="dbrm.htm#g1021210">Chapter 27, "Managing Resources with Oracle Database Resource Manager"</a> for more information on resource plans and consumer groups.</p>
<p>You can assign a priority to each window. If windows overlap, the window with the highest priority is chosen over other windows with lower priorities. The Scheduler automatically opens and closes windows as window start times and end times come and go.</p>
<p>A job can name a window in its <code dir="ltr">schedule_name</code> attribute. The Scheduler then starts the job when the window opens. If a window is already open, and a new job is created that points to that window, the new job does not start until the next time the window opens.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If necessary, you can temporarily block windows from switching the current resource plan. For more information, see <a href="dbrm.htm#i1008488">"Enabling Oracle Database Resource Manager and Switching Plans"</a>, or the discussion of the <code dir="ltr">DBMS_RESOURCE_MANAGER.SWITCH_PLAN</code> package procedure in <a class="olink ARPLS050" href="../../appdev.112/e40758/d_resmgr.htm#ARPLS050"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="scheduse.htm#i1009193">"Creating Windows"</a></div>
<a id="i1013610"></a>
<div id="ADMIN12435" class="sect3">
<h4 class="sect3">Over<a id="sthref2938"></a><a id="sthref2939"></a>lapping Windows</h4>
<p>Although Oracle does not recommend it, windows can overlap.</p>
<p><span class="bold">Because only one window can be active at one time</span>, the following rules are used to determine which window is active when windows overlap:</p>
<ul>
<li>
<p>If windows of the same priority overlap, the window that is active will stay open. However, if the overlap is with a window of higher priority, the lower priority window will close and the window with the higher priority will open. Jobs currently running that had a schedule naming the low priority window may be stopped depending on the behavior you assigned when you created the job.</p>
</li>
<li>
<p>If, at the end of a window, there are multiple windows defined, the window with the highest priority opens. If all windows have the same priority, the window that has the highest percentage of time remaining opens.</p>
</li>
<li>
<p>An open window that is dropped automatically closes. At that point, the previous rule applies.</p>
</li>
</ul>
<p>Whenever two windows overlap, an entry is written in the Scheduler log.</p>
<a id="i1010821"></a>
<div id="ADMIN12436" class="sect4">
<h5 class="sect4">Examples of Overlapping Windows</h5>
<p><a href="#i1010827">Figure 28-3</a> illustrates a typical example of how windows, resource plans, and priorities might be determined for a 24 hour schedule. In the following two examples, assume that Window1 has been associated with Resource Plan1, Window2 with Resource Plan2, and so on.</p>
<div id="ADMIN13101" class="figure">
<p class="titleinfigure"><a id="i1010827"></a>Figure 28-3 Windows and Resource Plans (Example 1)</p>
<img width="668" height="213" src="img/admin064.gif" alt="Description of Figure 28-3 follows" /><br />
<a id="sthref2940" href="img_text/admin064.htm">Description of "Figure 28-3 Windows and Resource Plans (Example 1)"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In <a href="#i1010827">Figure 28-3</a>, the following occurs:</p>
<ul>
<li>
<p>From 12AM to 4AM</p>
<p>No windows are open, so a default resource plan is in effect.</p>
</li>
<li>
<p>From 4AM to 6AM</p>
<p>Window1 has been assigned a low priority, but it opens because there are no high priority windows. Therefore, Resource Plan 1 is in effect.</p>
</li>
<li>
<p>From 6AM to 9AM</p>
<p>Window3 will open because it has a higher priority than Window1, so Resource Plan 3 is in effect.</p>
</li>
<li>
<p>From 9AM to 11AM</p>
<p>Even though Window1 was closed at 6AM because of a higher priority window opening, at 9AM, this higher priority window is closed and Window1 still has two hours remaining on its original schedule. It will be reopened for these remaining two hours and resource plan will be in effect.</p>
</li>
<li>
<p>From 11AM to 2PM</p>
<p>A default resource plan is in effect because no windows are open.</p>
</li>
<li>
<p>From 2PM to 3PM</p>
<p>Window2 will open so Resource Plan 2 is in effect.</p>
</li>
<li>
<p>From 3PM to 8PM</p>
<p>Window4 is of the same priority as Window2, so it does not interrupt Window2 and Resource Plan 2 is in effect.</p>
</li>
<li>
<p>From 8PM to 10PM</p>
<p>Window4 will open so Resource Plan 4 is in effect.</p>
</li>
<li>
<p>From 10PM to 12AM</p>
<p>A default resource plan is in effect because no windows are open.</p>
</li>
</ul>
<p><a href="#i1010864">Figure 28-4</a> illustrates another example of how windows, resource plans, and priorities might be determined for a 24 hour schedule.</p>
<div id="ADMIN13102" class="figure">
<p class="titleinfigure"><a id="i1010864"></a>Figure 28-4 Windows and Resource Plans (Example 2)</p>
<img width="620" height="285" src="img/admin063.gif" alt="Description of Figure 28-4 follows" /><br />
<a id="sthref2941" href="img_text/admin063.htm">Description of "Figure 28-4 Windows and Resource Plans (Example 2)"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In <a href="#i1010864">Figure 28-4</a>, the following occurs:</p>
<ul>
<li>
<p>From 12AM to 4AM</p>
<p>A default resource plan is in effect.</p>
</li>
<li>
<p>From 4AM to 6AM</p>
<p>Window1 has been assigned a low priority, but it opens because there are no high priority windows, so Resource Plan 1 is in effect.</p>
</li>
<li>
<p>From 6AM to 9AM</p>
<p>Window3 will open because it has a higher priority than Window1. Note that Window6 does not open because another high priority window is already in effect.</p>
</li>
<li>
<p>From 9AM to 11AM</p>
<p>At 9AM, Window5 or Window1 are the two possibilities. They both have low priorities, so the choice is made based on which has a greater percentage of its duration remaining. Window5 has a larger percentage of time remaining compared to the total duration than Window1. Even if Window1 were to extend to, say, 11:30AM, Window5 would have 2/3 * 100% of its duration remaining, while Window1 would have only 2.5/7 * 100%, which is smaller. Thus, Resource Plan 5 will be in effect.</p>
</li>
</ul>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDCFBGH"></a>
<div id="ADMIN13354" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Groups</h3>
<p><a id="sthref2942"></a>A group designates a list of Scheduler objects. Instead of passing a list of objects as an argument to a <code dir="ltr">DBMS_SCHEDULER</code> package procedure, you create a group that has those objects as its members, and then pass the group name to the procedure.</p>
<p>There are three types of groups:</p>
<ul>
<li>
<p>Database destination groups: Members are database destinations, for running remote database jobs.</p>
</li>
<li>
<p>External destination groups: Members are external destinations, for running remote external jobs.</p>
</li>
<li>
<p>Window groups: Members are Scheduler windows.</p>
</li>
</ul>
<p>All members of a group must be of the same type and each member must be unique.</p>
<p>You create a group with the <code dir="ltr">DBMS_SCHEDULER.CREATE_GROUP</code> procedure.</p>
<a id="CHDHACAD"></a>
<div id="ADMIN13355" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Destination Groups</h4>
<p>When you want a job to run at multiple destinations, you create a database destination group or external destination group and assign it to the <code dir="ltr">destination_name</code> attribute of the job. Specifying a destination group as the <code dir="ltr">destination_name</code> attribute of a job is the only valid way to specify multiple destinations for the job.</p>
</div>
<!-- class="sect3" -->
<a id="i1106418"></a>
<div id="ADMIN12367" class="sect3">
<h4 class="sect3">Win<a id="sthref2943"></a>dow Groups</h4>
<p>You typically create window groups only when you are in the role of Scheduler administrator.</p>
<p>You can group windows for ease of use in scheduling jobs. If a job must run during multiple time periods throughout the day, week, and so on, you can create a window for each time period, and then add the windows to a window group. You can then set the <code dir="ltr">schedule_name</code> attribute of the job to the name of this window group, and the job executes during all the time periods specified by the windows in the window group.</p>
<p>For example, if you had a window called "Weekends" and a window called "Weeknights," you could add these two windows to a window group called "Downtime." The data warehousing staff could then create a job to run queries according to this Downtime window group&mdash;on weeknights and weekends&mdash;when the queries could be assigned a high percentage of available resources.</p>
<p>If a window in a window group is already open, and a new job is created that points to that window group, the job is not started until the next window in the window group opens.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="scheduse.htm#CIACDDII">"Creating Destination Groups for Multiple-Destination Jobs"</a></p>
</li>
<li>
<p><a href="scheduse.htm#i1013653">"Creating Window Groups"</a></p>
</li>
<li>
<p><a href="#i1106396">"Windows"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDHJDFF"></a>
<div id="ADMIN13356" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">More About Jobs</h2>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CHDIIDIG">Job Categories</a></p>
</li>
<li>
<p><a href="#CHDEBHAG">Job Instances</a></p>
</li>
<li>
<p><a href="#CHDGFIJE">Job Arguments</a></p>
</li>
<li>
<p><a href="#CHDJEBIE">How Programs, Jobs, and Schedules are Related</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="scheduse.htm#i1009668">"Creating Jobs"</a></p>
</li>
<li>
<p><a href="scheduse.htm#CHDGIDFD">"Viewing the Job Log"</a></p>
</li>
</ul>
</div>
<a id="CHDIIDIG"></a>
<div id="ADMIN13357" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Job Categories</h3>
<p>The Scheduler supports the following types of jobs:</p>
<ul>
<li>
<p><a href="#CHDGAHHD">Database Jobs</a></p>
</li>
<li>
<p><a href="#CHDJABEG">External Jobs</a></p>
</li>
<li>
<p><a href="#CHDCIEII">Multiple-Destination Jobs</a></p>
</li>
<li>
<p><a href="#CHDHEDAE">Chain Jobs</a></p>
</li>
<li>
<p><a href="#CHDBDBDA">Detached Jobs</a></p>
</li>
<li>
<p><a href="#CHDECJDB">Lightweight Jobs</a></p>
</li>
</ul>
<a id="CHDGAHHD"></a>
<div id="ADMIN13358" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Database Jobs</h4>
<p><a id="sthref2944"></a><a id="sthref2945"></a><span class="bold">Database jobs</span> run Oracle Database program units, including PL/SQL anonymous blocks, PL/SQL stored procedures, and Java stored procedures. For a database job where the action is specified inline, <code dir="ltr">job_type</code> is set to <code dir="ltr">'PLSQL_BLOCK'</code> or <code dir="ltr">'STORED_PROCEDURE'</code>, and <code dir="ltr">job_action</code> contains either the text of a PL/SQL anonymous block or the name of a stored procedure. (If a program is a named program object rather than program action specified inline, the corresponding <code dir="ltr">program_type</code> and <code dir="ltr">program_action</code> must be set accordingly.)</p>
<p>Database jobs that run on the originating database&mdash;the database on which they were created&mdash;are known as <span class="bold">local database jobs</span>, or just jobs. Database jobs that run on a target database other than the originating database are known as <a id="sthref2946"></a><a id="sthref2947"></a><span class="bold">remote database jobs</span>.</p>
<p>You can view run results for both local database and remote database jobs in the job log views on the originating database.</p>
<div id="ADMIN13476" class="sect4"><a id="sthref2948"></a>
<h5 class="sect4">Local Database Jobs</h5>
<p>A local database job runs on the originating database, as the database user who is the job owner. The job owner is the name of the schema in which the job was created.</p>
</div>
<!-- class="sect4" -->
<div id="ADMIN13477" class="sect4"><a id="sthref2949"></a>
<h5 class="sect4">Remote Database Job</h5>
<p>The target database for a remote database job can be an Oracle database on a remote host or another database instance on the same host as the originating database. You identify a remote database job by specifying the name of an existing database destination object in the <code dir="ltr">destination_name</code> attribute of the job.</p>
<p>Creating a remote database job requires Oracle Database 11<span class="italic">g</span> Release 2 or later. However, the target database for the job can be any release of Oracle Database. No patch is required for the target database; you only need to install a Scheduler agent on the target database host (even if the target database host is the same as the originating database host) and register the agent with the originating database. The agent must be installed from Oracle Client 11<span class="italic">g</span> Release 2 or higher.</p>
<p>Remote database jobs must run as a user that is valid on the target database. You specify the required user name and password with a credential object that you assign to the remote database job.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BGBDCCCE">"Credentials"</a></p>
</li>
<li>
<p><a href="scheduse.htm#i1009668">"Creating Jobs"</a></p>
</li>
<li>
<p><a href="schedadmin.htm#BAJDFIAB">"Enabling and Disabling Databases for Remote Jobs"</a></p>
</li>
<li>
<p><a href="scheduse.htm#CHDGIDFD">"Viewing the Job Log"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CHDJABEG"></a>
<div id="ADMIN13359" class="sect3">
<h4 class="sect3">Extern<a id="sthref2950"></a><a id="sthref2951"></a>al Jobs</h4>
<p><span class="bold">External jobs</span> run external executables. An <span class="bold">external executable</span> is an operating system executable that runs outside the database, that is, external to the database. For an external job, <code dir="ltr">job_type</code> is specified as <code dir="ltr">'EXECUTABLE'</code>. (If using named programs, the corresponding <code dir="ltr">program_type</code> would be <code dir="ltr">'EXECUTABLE'</code>.) The <code dir="ltr">job_action</code> (or corresponding <code dir="ltr">program_action</code>) is the full operating system&ndash;dependent path of the desired external executable, excluding any command line arguments. An example might be <code dir="ltr">/usr/local/bin/perl</code> or <code dir="ltr">C:\perl\bin\perl</code>.</p>
<p>Note that a Windows batch file is not directly executable and must be run a command prompt (<code dir="ltr">cmd.exe</code>).</p>
<p>Like a database job, you can assign a schema when you create the external job. That schema then becomes the job owner. Although it is possible to create an external job in the <code dir="ltr">SYS</code> schema, Oracle recommends against this practice.</p>
<p>Both the <code dir="ltr">CREATE</code> <code dir="ltr">JOB</code> and <code dir="ltr">CREATE</code> <code dir="ltr">EXTERNAL</code> <code dir="ltr">JOB</code> privileges are required to create local or remote external jobs.</p>
<p>External executables must run as some operating system user. Thus, the Scheduler enables you to assign operating system credentials to any external job that you create. Like remote database jobs, you specify these credentials with a Scheduler credential object (a credential) and assign the credential to the external job.</p>
<p>There are two types of external jobs: local external jobs and remote external jobs. A <span class="bold">local external job</span> runs its external executable on the same computer as the database that schedules the job. A <span class="bold">remote external job</span> runs its executable on a remote host. The remote host does not need to have an Oracle database; you need only install and register a Scheduler agent.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
On Windows, the host user that runs the external executable must be assigned the <code dir="ltr">Log</code> <code dir="ltr">on</code> <code dir="ltr">as</code> <code dir="ltr">a</code> <code dir="ltr">batch</code> <code dir="ltr">job</code> logon privilege.</div>
<p>The following sections provide more details on local external jobs and remote external jobs:</p>
<ul>
<li>
<p><a href="#CHDJHACG">About Local External Jobs</a></p>
</li>
<li>
<p><a href="#CHDCCDDF">About Remote External Jobs</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BGBDCCCE">"Credentials"</a></p>
</li>
<li>
<p><a href="schedadmin.htm#BAJDFIAB">"Enabling and Disabling Databases for Remote Jobs"</a></p>
</li>
</ul>
</div>
<a id="CHDJHACG"></a>
<div id="ADMIN13360" class="sect4">
<h5 class="sect4">About Local External Jobs</h5>
<p>A local external job runs its external executable on the same computer as the Oracle database that schedules the job. For such a job, the <code dir="ltr">destination_name</code> job attribute is <code dir="ltr">NULL</code>.</p>
<p><a id="sthref2952"></a><a id="sthref2953"></a><a id="sthref2954"></a><a id="sthref2955"></a><a id="sthref2956"></a>Local external jobs write stdout and stderr output to log files in the directory <span class="italic">ORACLE_HOME</span>/scheduler/log. You can retrieve the contents of these files with <code dir="ltr">DBMS_SCHEDULER.GET_FILE</code>.</p>
<p>You do not have to assign a credential to a local external job, although Oracle strongly recommends that you do so for improved security. If you do not assign a credential, the job runs with default credentials. <a href="#CHDFEJDG">Table 28-1</a> shows the default credentials for different platforms and different job owners.</p>
<div id="ADMIN13361" class="tblformal">
<p class="titleintable"><a id="sthref2957"></a><a id="CHDFEJDG"></a>Table 28-1 Default Credentials for Local External Jobs</p>
<table class="cellalignment1338" title="Default Credentials for Local External Jobs" summary="This table has three rows and three columns. The columns are labeled SYS Schema?, Platform, and Credentials Used." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t23">Job in SYS Schema?</th>
<th class="cellalignment1334" id="r1c2-t23">Platform</th>
<th class="cellalignment1334" id="r1c3-t23">Default Credentials</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t23" headers="r1c1-t23">
<p>Yes</p>
</td>
<td class="cellalignment1335" headers="r2c1-t23 r1c2-t23">
<p>All</p>
</td>
<td class="cellalignment1335" headers="r2c1-t23 r1c3-t23">
<p>User who installed Oracle Database.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t23" headers="r1c1-t23">
<p>No</p>
</td>
<td class="cellalignment1335" headers="r3c1-t23 r1c2-t23">
<p>UNIX and Linux</p>
</td>
<td class="cellalignment1335" headers="r3c1-t23 r1c3-t23">
<p>Values of the <code dir="ltr">run-user</code> and <code dir="ltr">run-group</code> attributes specified in the file <span class="italic">ORACLE_HOME</span>/rdbms/admin/externaljob.ora</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t23" headers="r1c1-t23">
<p>No</p>
</td>
<td class="cellalignment1335" headers="r4c1-t23 r1c2-t23">
<p>Windows</p>
</td>
<td class="cellalignment1335" headers="r4c1-t23 r1c3-t23">
<p>User that the <code dir="ltr">OracleJobScheduler</code><code dir="ltr"><span class="codeinlineitalic">SID</span></code> Windows service runs as (either the Local System account or a named local or domain user).</p>
<p>Note: You must manually enable and start this service. For improved security, Oracle recommends using a named user instead of the Local System account.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Default credentials are included for compatibility with previous releases of Oracle Database, and may be deprecated in a future release. It is, therefore, best to assign a credential to every local external job.</div>
<p>To disable the running of local external jobs that were not assigned credentials, remove the <code dir="ltr">run_user</code> attribute from the <code dir="ltr"><span class="codeinlineitalic">ORACLE_HOME</span></code><code dir="ltr">/rdbms/admin/externaljob.ora</code> file (UNIX and Linux) or stop the <code dir="ltr">OracleJobScheduler</code> service (Windows). These steps do not disable the running of local external jobs in the <code dir="ltr">SYS</code> schema.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>Your operating system&ndash;specific documentation for any post-installation configuration steps to support local external jobs</p>
</li>
<li>
<p><a href="scheduse.htm#CHDIDGAE">Example 29-8, "Creating a Local External Job and Retrieving stdout"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" -->
<a id="CHDCCDDF"></a>
<div id="ADMIN13362" class="sect4">
<h5 class="sect4">About Remote <a id="sthref2958"></a><a id="sthref2959"></a>External Jobs</h5>
<p>A remote external job runs its external executable on a remote host. The remote host may or may not have Oracle Database installed. To enable remote external jobs to run on a specific remote host, you must install a Scheduler agent on the remote host and register it with the local database. The database communicates with the agent to start external executables and to retrieve execution results.</p>
<p>When creating a remote external job, you specify the name of an existing external destination object in the <code dir="ltr">destination_name</code> attribute of the job.</p>
<p><a id="sthref2960"></a><a id="sthref2961"></a><a id="sthref2962"></a><a id="sthref2963"></a><a id="sthref2964"></a>Remote external jobs write stdout and stderr output to log files in the directory <span class="italic">AGENT_HOME</span>/data/log. You can retrieve the contents of these files with <code dir="ltr">DBMS_SCHEDULER.GET_FILE</code>. <a href="scheduse.htm#CHDIDGAE">Example 29-8, "Creating a Local External Job and Retrieving stdout"</a> illustrates how to retrieve stdout output. Although this example is for a local external job, the method is the same for remote external jobs.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BGBDCCCE">"Credentials"</a></p>
</li>
<li>
<p><a href="schedadmin.htm#BAJDFIAB">"Enabling and Disabling Databases for Remote Jobs"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CHDCIEII"></a>
<div id="ADMIN13363" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Multiple-Destination Jobs</h4>
<p>A multiple-destination job is a job whose instances run on multiple target databases or hosts, but can be controlled and monitored from one central database. For DBAs or system administrators who must manage multiple databases or multiple hosts, a multiple-destination job can make administration considerably easier. With a multiple-destination job, you can:</p>
<ul>
<li>
<p>Specify several databases or hosts on which a job must run.</p>
</li>
<li>
<p>Modify a job that is scheduled on multiple targets with a single operation.</p>
</li>
<li>
<p>Stop jobs running on one or more remote targets.</p>
</li>
<li>
<p>Determine the status (running, completed, failed, and so on) of the job instance at each of the remote targets.</p>
</li>
<li>
<p>Determine the overall status of the collection of job instances.</p>
</li>
</ul>
<p>A multiple-destination job can be viewed as a single entity for certain purposes and as a collection of independently running jobs for other purposes. When creating or altering the job metadata, the multiple-destination job looks like a single entity. However, when the job instances are running, they are better viewed as a collection of jobs that are nearly identical copies of each other. The job created at the source database is known as the <span class="bold">parent job</span>, and the job instances that run at the various destinations are known as <span class="bold">child jobs</span>.</p>
<p>You create a multiple-destination job by assigning a destination group to the <code dir="ltr">destination_name</code> attribute of the job. The job runs at all destinations in the group at its scheduled time, or upon the detection of a specified event. The local host can be included as one of the destinations on which the job runs.</p>
<p>For a job whose action is a database program unit, you must specify a database destination group in the <code dir="ltr">destination_name</code> attribute. The members of a database destination group include database destinations and the keyword <code dir="ltr">LOCAL</code>, which indicates the originating (local) database. For a job whose action is an external executable, you must specify an external destination group in the <code dir="ltr">destination_name</code> attribute. The members of an external destination group include external destinations and the keyword <code dir="ltr">LOCAL</code>, which indicates the local host.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Database destinations do not necessarily have to reference remote databases; they can reference additional database instances running on the same host as the database that creates the job.</div>
<p class="subhead2"><a id="ADMIN13364"></a>Multiple-Destination Jobs and Time Zones</p>
<p>Some job destinations might be in time zones that are different from that of the database on which the parent job is created (the <span class="italic">originating database</span>). In this case, the start time of the job is always based on the time zone of the originating database. So, if you create the parent job in London, England, specify a start time of 8:00 p.m., and specify destinations at Tokyo, Los Angeles, and New York, then all child jobs start at 8:00 p.m. London time. Start times at all destinations may not be exact, due to varying system loads, issues that require retries, and so on.</p>
<p class="subhead2"><a id="ADMIN13365"></a>Event-Based Multiple-Destination Jobs</p>
<p>In the case of a multiple-destination job that is event-based, when the parent job detects the event at its host, it starts all the child jobs at all destinations. The child jobs themselves do not detect events at their respective hosts.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="scheduse.htm#CIAEBDIA">"Creating Multiple-Destination Jobs"</a></p>
</li>
<li>
<p><a href="scheduse.htm#CIABJJEE">"Monitoring Multiple Destination Jobs"</a></p>
</li>
<li>
<p><a href="#CHDHACAD">"Destination Groups"</a></p>
</li>
<li>
<p><a href="scheduse.htm#CHDDDIJB">"Using Events to Start Jobs"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="CHDHEDAE"></a>
<div id="ADMIN13366" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Chain Jobs</h4>
<p>The <span class="bold">chain</span> is the Scheduler mechanism that enables dependency-based scheduling. In its simplest form, it defines a group of program objects and the dependencies among them. A job can point to a chain instead of pointing to a single program object. The job then serves to start the chain. For a chain job, <code dir="ltr">job_type</code> is set to <code dir="ltr">'CHAIN'</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BGBBEHHH">"Chains"</a></p>
</li>
<li>
<p><a href="scheduse.htm#CHDEFJGF">"Creating and Managing Job Chains"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="CHDBDBDA"></a>
<div id="ADMIN13367" class="sect3">
<h4 class="sect3">Det<a id="sthref2965"></a><a id="sthref2966"></a>ached Jobs</h4>
<p>You use a detached job to start a script or application that runs in a separate process, independently and asynchronously to the Scheduler. A detached job typically starts another process and then exits. Upon exit (when the job action is completed) a detached job remains in the running state. The running state indicates that the asynchronous process that the job started is still active. When the asynchronous process finishes its work, it must connect to the database and call <code dir="ltr">DBMS_SCHEDULER</code>.<code dir="ltr">END_DETACHED_JOB_RUN</code>, which ends the job.</p>
<p>Detached jobs cannot be executed using <code dir="ltr">run_job</code> to manually trigger execution, when the <code dir="ltr">use_current_session</code> parameter set to <code dir="ltr">TRUE</code>.</p>
<p>A job is detached if it points to a program object (program) that has its <code dir="ltr">detached</code> attribute set to <code dir="ltr">TRUE</code> (a <span class="bold">detached program</span>).</p>
<p>You use a detached job under the following two circumstances:</p>
<ul>
<li>
<p>When it is impractical to wait for the launched asynchronous process to complete because would hold resources unnecessarily.</p>
<p>An example is sending a request to an asynchronous Web service. It could take hours or days for the Web service to respond, and you do not want to hold a Scheduler job slave while waiting for the response. (See <a href="#i1006773">"Scheduler Architecture"</a> for information about job slaves.)</p>
</li>
<li>
<p>When it is impossible to wait for the launched asynchronous process to complete because the process shuts down the database.</p>
<p>An example would be using a Scheduler job to launch an RMAN script that shuts down the database, makes a cold backup, and then restarts the database. See <a href="scheduse.htm#CHDCCAIE">Example 29-5</a>.</p>
</li>
</ul>
<p>A detached job works as follows:</p>
<ol>
<li>
<p>When it is time for the job to start, the job coordinator assigns a job slave to the job, and the job slave runs the program action defined in the detached program. The program action can be a PL/SQL block, a stored procedure, or an external executable.</p>
</li>
<li>
<p>The program action performs an immediate-return call of another script or executable, referred to here as Process A, and then exits. Because the work of the program action is complete, the job slave exits, but leaves the job in a running state.</p>
</li>
<li>
<p>Process A performs its processing. If it runs any DML against the database, it must commit its work. When processing is complete, Process A logs in to the database and calls <code dir="ltr">END_DETACHED_JOB_RUN</code>.</p>
</li>
<li>
<p>The detached job is logged as completed.</p>
</li>
</ol>
<p>You can also call <code dir="ltr">STOP_JOB</code> to end a running detached job.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="scheduse.htm#CHDFDEEC">"Creating Detached Jobs"</a> for an example of performing a cold backup of the database with a detached job</div>
</div>
<!-- class="sect3" -->
<a id="CHDECJDB"></a>
<div id="ADMIN13368" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Lightwe<a id="sthref2967"></a><a id="sthref2968"></a>ight Jobs</h4>
<p>Use lightweight jobs when you have many short-duration jobs that run frequently. Under certain circumstances, using lightweight jobs can deliver a small performance gain.</p>
<p>Lightweight jobs have the following characteristics:</p>
<ul>
<li>
<p>Unlike regular jobs, they are not schema objects.</p>
</li>
<li>
<p>They have significantly better create and drop times over regular jobs because they do not have the overhead of creating a schema object.</p>
</li>
<li>
<p>They have lower average session create time than regular jobs.</p>
</li>
<li>
<p>They have a small footprint on disk for job metadata and run-time data.</p>
</li>
</ul>
<p>You designate a lightweight job by setting the <code dir="ltr">job_style</code> job attribute to '<code dir="ltr">LIGHTWEIGHT</code>'. The other job style is '<code dir="ltr">REGULAR</code>', which is the default.</p>
<p>Like programs and schedules, regular jobs are schema objects. In releases before Oracle Database 11<span class="italic">g</span> Release 1, the only job style supported by the Scheduler was regular.</p>
<p>A regular job offers the maximum flexibility but does entail some overhead when it is created or dropped. The user has fine-grained control of the privileges on the job, and the job can have as its action a program or a stored procedure owned by another user.</p>
<p>If a relatively small number of jobs that run infrequently need to be created, then regular jobs are preferred over lightweight jobs.</p>
<p>A lightweight job must reference a program object (program) to specify a job action. The program must be already enabled when the lightweight job is created, and the program type must be either '<code dir="ltr">PLSQL_BLOCK</code>' or '<code dir="ltr">STORED_PROCEDURE</code>'. Because lightweight jobs are not schema objects, you cannot grant privileges on them. A lightweight job inherits privileges from its specified program. Thus, any user who has a certain set of privileges on the program has corresponding privileges on the lightweight job.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="scheduse.htm#i1009668">"Creating Jobs"</a> and <a href="schedadmin.htm#i1006617">"Examples of Using the Scheduler"</a> for examples of creating lightweight jobs</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDEBHAG"></a>
<div id="ADMIN13369" class="sect2">
<h3 class="sect2">Job Instances</h3>
<p><a id="sthref2969"></a><a id="sthref2970"></a>A job instance represents a specific run of a job. Jobs that are scheduled to run only once have only one instance. Jobs that have a repeating schedule or that run each time an event occurs have multiple instances, each run of the job representing an instance. For example, a job that is scheduled to run only on Tuesday, Oct. 8th 2009 has one instance, a job that runs daily at noon for a week has seven instances, and a job that runs when a file arrives on a remote system has one instance for each file arrival event.</p>
<p>Multiple-destination jobs have one instance for each destination. If a multiple-destination job has a repeating schedule, then there is one instance for each run of the job at each destination.</p>
<p>When a job is created, only one entry is added to the Scheduler's job table to represent the job. Depending on the logging level set, each time the job runs, an entry is added to the job log. Therefore, if you create a job that has a repeating schedule, there is one entry in the job views (<code dir="ltr">*_SCHEDULER_JOBS</code>) and multiple entries in the job log. Each job instance log entry provides information about a particular run, such as the job completion status and the start and end time. Each run of the job is assigned a unique log id that appears in both the job log and job run details views (<code dir="ltr">*_SCHEDULER_JOB_LOG</code> and <code dir="ltr">*_SCHEDULER_JOB_RUN_DETAILS</code>).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="scheduse.htm#CIAEACGH">"Monitoring Jobs"</a></p>
</li>
<li>
<p><a href="schedadmin.htm#i1006377">"Scheduler Data Dictionary Views"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDGFIJE"></a>
<div id="ADMIN13370" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Job Arguments</h3>
<p>When a job references a program object (program), you can supply job arguments to override the default program argument values, or provide values for program arguments that have no default value. You can also provide argument values to an inline action (for example, a stored procedure) that the job specifies.</p>
<p>A job cannot be enabled until all required program argument values are defined, either as defaults in a referenced program object, or as job arguments.</p>
<p>A common example of a job is one that runs a set of nightly reports. If different departments require different reports, you can create a program for this task that can be shared among different users from different departments. The program action runs a reports script, and the program has one argument: the department number. Each user can then create a job that points to this program and can specify the department number as a job argument.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="scheduse.htm#i1025412">"Setting Job Arguments"</a></p>
</li>
<li>
<p><a href="scheduse.htm#CHDIGJED">"Defining Program Arguments"</a></p>
</li>
<li>
<p><a href="scheduse.htm#i1009668">"Creating Jobs"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDJEBIE"></a>
<div id="ADMIN13371" class="sect2">
<h3 class="sect2">How Programs, Jobs, and Schedules are Related</h3>
<p>To define what is executed and when, you assign relationships among programs, jobs, and schedules. <a href="#CHDGHEHB">Figure 28-5</a> illustrates examples of such relationships.</p>
<div id="ADMIN13372" class="figure">
<p class="titleinfigure"><a id="CHDGHEHB"></a>Figure 28-5 Relationships Among Programs, Jobs, and Schedules</p>
<img width="594" height="279" src="img/admin060.gif" alt="Description of Figure 28-5 follows" /><br />
<a id="sthref2971" href="img_text/admin060.htm">Description of "Figure 28-5 Relationships Among Programs, Jobs, and Schedules"</a><br />
<br /></div>
<!-- class="figure" -->
<p>To understand <a href="#CHDGHEHB">Figure 28-5</a>, consider a situation where tables are being analyzed. In this example, program <code dir="ltr">P1</code> analyzes a table using the <code dir="ltr">DBMS_STATS</code> package. The program has an input parameter for the table name. Two jobs, <code dir="ltr">J1</code> and <code dir="ltr">J2</code>, both point to the same program, but each supplies a different table name. Additionally, schedule <code dir="ltr">S1</code> specifies a run time of 2:00 a.m. every day. The end result is that the two tables named in <code dir="ltr">J1</code> and <code dir="ltr">J2</code> are analyzed daily at 2:00 a.m.</p>
<p>Note that <code dir="ltr">J4</code> points to no other entity, so it is self-contained with all relevant information defined in the job itself. <code dir="ltr">P2</code>, <code dir="ltr">P9</code> and <code dir="ltr">S2</code> illustrate that you can leave a program or schedule unassigned if you want. You can, for example, create a program that calculates a year-end inventory and temporarily leave it unassigned to any job.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006773"></a>
<div id="ADMIN12374" class="sect1">
<h2 class="sect1">Scheduler Arch<a id="sthref2972"></a>itecture</h2>
<p>This section discusses the Scheduler architecture, and describes:</p>
<ul>
<li>
<p><a href="#i1106806">The Job Table</a></p>
</li>
<li>
<p><a href="#i1106816">The Job Coordinator</a></p>
</li>
<li>
<p><a href="#i1006840">How Jobs Execute</a></p>
</li>
<li>
<p><a href="#BGBBBJFJ">After Jobs Complete</a></p>
</li>
<li>
<p><a href="#i1006857">Using the Scheduler in Real Application Clusters Environments</a></p>
</li>
</ul>
<p><a href="#i1006800">Figure 28-6</a> illustrates how jobs are handled by the database.</p>
<div id="ADMIN13084" class="figure">
<p class="titleinfigure"><a id="i1006800"></a>Figure 28-6 Scheduler Components</p>
<img width="222" height="282" src="img/admin062.gif" alt="Description of Figure 28-6 follows" /><br />
<a id="sthref2973" href="img_text/admin062.htm">Description of "Figure 28-6 Scheduler Components"</a><br />
<br /></div>
<!-- class="figure" -->
<a id="i1106806"></a>
<div id="ADMIN12375" class="sect2">
<h3 class="sect2">The Job Table</h3>
<p>The job table is a container for all the jobs, with one table for each database. The job table stores information for all jobs such as the owner name or the level of logging. You can find this information in the <code dir="ltr">*_SCHEDULER_JOBS</code> views.</p>
<p>Jobs are database objects, and therefore, can accumulate and take up too much space. To avoid this, job objects are automatically dropped by default after completion. This behavior is controlled by the <code dir="ltr">auto_drop</code> job attribute.</p>
<p>See <a href="schedadmin.htm#i1006377">"Scheduler Data Dictionary Views"</a> for the available job views and administration.</p>
</div>
<!-- class="sect2" -->
<a id="i1106816"></a>
<div id="ADMIN12376" class="sect2">
<h3 class="sect2">The Job Coordinator<a id="sthref2974"></a></h3>
<p>The job coordinator, under the control of the database, controls and starts job slaves, making use of the information in the job table.</p>
<p>The job coordinator background process (<code dir="ltr">cjqNNN</code>) is automatically started and stopped on an as-needed basis. At database startup, the job coordinator is not started, but the database does monitor whether there are any jobs to be executed, or windows to be opened in the near future. If so, it starts the coordinator.</p>
<p>As long as there are jobs or windows running, the coordinator continues to run. After there has been a certain period of Scheduler inactivity and there are no jobs or windows scheduled in the near future, the coordinator is automatically stopped.</p>
<p>When the database determines whether to start the job coordinator, it takes the service affinity of jobs into account. For example, if there is only one job scheduled in the near future and this job belongs to a job class that has service affinity for only two out of the four Oracle RAC instances, only the job coordinators for those two instances are started. See <a href="#BGBFBBEC">"Service Affinity when Using the Scheduler"</a> for more information.</p>
<div id="ADMIN13489" class="sect3"><a id="sthref2975"></a>
<h4 class="sect3">Job Coordinator Actions</h4>
<p>The job coordinator:</p>
<ul>
<li>
<p>Controls and spawns the job slaves</p>
</li>
<li>
<p>Queries the job table</p>
</li>
<li>
<p>Picks up jobs from the job table on a regular basis and places them in a memory cache. This improves performance by reducing trips to the disk</p>
</li>
<li>
<p>Takes jobs from the memory cache and passes them to job slaves for execution</p>
</li>
<li>
<p>Cleans up the job slave pool when slaves are no longer needed</p>
</li>
<li>
<p>Goes to sleep when no jobs are scheduled</p>
</li>
<li>
<p>Wakes up when a new job is about to be executed or a job was created using the <code dir="ltr">CREATE_JOB</code> procedure</p>
</li>
<li>
<p>Upon database, startup after an abnormal database shutdown, recovers any jobs that were running.</p>
</li>
</ul>
<p>You do not need to set the time that the job coordinator checks the job table; the system chooses the time frame automatically.</p>
<p>One job coordinator is used per instance. This is also the case in Oracle RAC environments.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="schedadmin.htm#i1006377">"Scheduler Data Dictionary Views"</a> for job coordinator administration and <a href="#i1006857">"Using the Scheduler in Real Application Clusters Environments"</a> for Oracle RAC information</div>
</div>
<!-- class="sect3" -->
<div id="ADMIN13490" class="sect3"><a id="sthref2976"></a>
<h4 class="sect3">Maximum Number of Scheduler Job Processes<a id="sthref2977"></a></h4>
<p>The coordinator automatically determines how many job slaves to start based on CPU load and the number of outstanding jobs. The JOB_QUEUE_PROCESSES initialization parameter can be used to limit the number of job slaves that the Scheduler can start.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006840"></a>
<div id="ADMIN12377" class="sect2">
<h3 class="sect2">How Jobs Execute</h3>
<p>Job slaves actually execute the jobs you submit. They are awakened by the job coordinator when it is time for a job to be executed. They gather metadata to run the job from the job table.</p>
<p>When a job is picked for processing, the job slave does the following:</p>
<ol>
<li>
<p>Gathers all the metadata needed to run the job, for example, program arguments and privilege information.</p>
</li>
<li>
<p>Starts a database session as the owner of the job, starts a transaction, and then starts executing the job.</p>
</li>
<li>
<p>Once the job is complete, the slave commits and ends the transaction.</p>
</li>
<li>
<p>Closes the session.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BGBBBJFJ"></a>
<div id="ADMIN13491" class="sect2">
<h3 class="sect2">After Jobs Complete</h3>
<p>When a job is done, the slaves do the following:</p>
<ul>
<li>
<p>Reschedule the job if required.</p>
</li>
<li>
<p>Update the state in the job table to reflect whether the job has completed or is scheduled to run again.</p>
</li>
<li>
<p>Insert an entry into the job log table.</p>
</li>
<li>
<p>Update the run count, and if necessary, failure and retry counts.</p>
</li>
<li>
<p>Clean up.</p>
</li>
<li>
<p>Look for new work (if none, they go to sleep).</p>
</li>
</ul>
<p>The Scheduler dynamically sizes the slave pool as required.</p>
</div>
<!-- class="sect2" -->
<a id="i1006857"></a>
<div id="ADMIN12379" class="sect2">
<h3 class="sect2">Using the Sche<a id="sthref2978"></a>duler in Real Application Clusters Environments</h3>
<p>In an Oracle Real Application Clusters (Oracle RAC) environment, the Scheduler uses one job table for each database and one job coordinator for each instance. The job coordinators communicate with each other to keep information current. The Scheduler attempts to balance the load of the jobs of a job class across all available instances when the job class has no service affinity, or across the instances assigned to a particular service when the job class does have service affinity.</p>
<p><a href="#i1106864">Figure 28-7</a> illustrates a typical Oracle RAC architecture, with the job coordinator for each instance exchanging information with the others.</p>
<div id="ADMIN13085" class="figure">
<p class="titleinfigure"><a id="i1106864"></a>Figure 28-7 Oracle RAC Architecture and the Scheduler</p>
<img width="435" height="405" src="img/admin067.gif" alt="Description of Figure 28-7 follows" /><br />
<a id="sthref2979" href="img_text/admin067.htm">Description of "Figure 28-7 Oracle RAC Architecture and the Scheduler"</a><br />
<br /></div>
<!-- class="figure" -->
<a id="BGBFBBEC"></a>
<div id="ADMIN12380" class="sect3">
<h4 class="sect3">Service Affinity when Using the Scheduler</h4>
<p>The Scheduler enables you to specify the database service under which a job should be run (service affinity). This ensures better availability than instance affinity because it guarantees that other nodes can be dynamically assigned to the service if an instance goes down. Instance affinity does not have this capability, so, when an instance goes down, none of the jobs with an affinity to that instance can run until the instance comes back up. <a href="#i1006875">Figure 28-8</a> illustrates a typical example of how services and instances could be used.</p>
<div id="ADMIN13086" class="figure">
<p class="titleinfigure"><a id="i1006875"></a>Figure 28-8 Service Affinity and the Scheduler</p>
<img width="551" height="245" src="img/admin068.gif" alt="Description of Figure 28-8 follows" /><br />
<a id="sthref2980" href="img_text/admin068.htm">Description of "Figure 28-8 Service Affinity and the Scheduler"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In <a href="#i1006875">Figure 28-8</a>, you could change the properties of the services and the Scheduler automatically recognizes the change.</p>
<p>Each job class can specify a database service. If a service is not specified, the job class belongs to an internal service that is guaranteed to be mapped to every running instance.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBJCFCB"></a>
<div id="ADMIN12727" class="sect1">
<h2 class="sect1">Scheduler Sup<a id="sthref2981"></a><a id="sthref2982"></a>port for Oracle Data Guard</h2>
<p>Beginning with Oracle Database 11<span class="italic">g</span> Release 1, the Scheduler can run jobs based on whether a database is a primary database or a logical standby in an Oracle Data Guard environment.</p>
<p>For a physical standby database, any changes made to Scheduler objects or any database changes made by Scheduler jobs on the primary database are applied to the physical standby like any other database changes.</p>
<p>For the primary database and logical standby databases, there is additional functionality that enables you to specify that a job can run only when the database is in the role of the primary database or a logical standby. You do this using the <code dir="ltr">DBMS_SCHEDULER.SET_ATTRIBUTE</code> procedure to set the <code dir="ltr">database_role</code> job attribute to one of two values: <code dir="ltr">'PRIMARY'</code> or <code dir="ltr">'LOGICAL</code> <code dir="ltr">STANDBY'</code>. (To run a job in both roles, you can make a copy of the job and set <code dir="ltr">database_role</code> to <code dir="ltr">'PRIMARY'</code> for one job and to <code dir="ltr">'LOGICAL</code> <code dir="ltr">STANDBY'</code> for the other). On switchover or failover, the Scheduler automatically switches to running jobs specific to the new role. DML is replicated to the job event log so that on failover, there is an available record of what ran successfully on the primary database until it failed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="schedadmin.htm#i1014139">"Examples of Setting Attributes"</a> for an example of setting the <code dir="ltr">database_role</code> attribute</p>
</li>
<li>
<p><a href="schedadmin.htm#BAJBJCCF">"Example of Creating a Job In an Oracle Data Guard Environment"</a></p>
</li>
<li>
<p><a class="olink SBYDB" href="../e41134/toc.htm"><span class="italic">Oracle Data Guard Concepts and Administration</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="CHDDGBDF"></a>
<div id="ADMIN13175" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Oracle Scheduler and Editions</h2>
<p><a id="sthref2983"></a><a id="sthref2984"></a>Scheduler jobs always use the database default edition.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS020" href="../../appdev.112/e41502/adfns_editions.htm#ADFNS020"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for information on editions and edition-based redefinition</div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1326">
<tr>
<td class="cellalignment1335">
<table class="cellalignment1331">
<tr>
<td class="cellalignment1330"><a href="dbrm.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1330"><a href="scheduse.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1337">
<table class="cellalignment1329">
<tr>
<td class="cellalignment1330"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1330"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1330"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1330"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1330"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1330"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
