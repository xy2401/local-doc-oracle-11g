<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Scheduling Jobs with Oracle Scheduler</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1055" />
<meta name="dcterms.created" content="2015-05-05T8:27:37Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Administrator's Guide" />
<meta name="dcterms.identifier" content="E25494-07" />
<meta name="dcterms.isVersionOf" content="ADMIN" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="schedover.htm" title="Previous" type="text/html" />
<link rel="Next" href="schedadmin.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25494.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">39/49</span> <!-- End Header -->
<div id="ADMIN034" class="chapter"><a id="g1046708"></a> <a id="i1033533"></a>
<h1 class="chapter"><span class="secnum">29</span> Scheduling Jobs with Oracle Scheduler</h1>
<p><a id="sthref2985"></a><a id="sthref2986"></a>In this chapter:</p>
<ul>
<li>
<p><a href="#i1028727">About Scheduler Objects and Their Naming</a></p>
</li>
<li>
<p><a href="#i1006395">Creating, Running, and Managing Jobs</a></p>
</li>
<li>
<p><a href="#i1022811">Creating and Managing Programs to Define Jobs</a></p>
</li>
<li>
<p><a href="#i1022969">Creating and Managing Schedules to Define Jobs</a></p>
</li>
<li>
<p><a href="#CHDDDIJB">Using Events to Start Jobs</a></p>
</li>
<li>
<p><a href="#CHDEFJGF">Creating and Managing Job Chains</a></p>
</li>
<li>
<p><a href="#CIAEGDJB">Prioritizing Jobs</a></p>
</li>
<li>
<p><a href="#CIAEACGH">Monitoring Jobs</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
This chapter describes how to use the <code dir="ltr">DBMS_SCHEDULER</code> package to work with Scheduler objects. You can accomplish the same tasks using Oracle Enterprise Manager.
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for <code dir="ltr">DBMS_SCHEDULER</code> information and the Oracle Enterprise Manager online help for information on Oracle Scheduler pages.</p>
</div>
<a id="i1028727"></a>
<div id="ADMIN12381" class="sect1">
<h2 class="sect1">About Scheduler Obje<a id="sthref2987"></a>cts and Their Naming</h2>
<p>You operate Oracle Scheduler by creating and managing a set of Scheduler objects. Each Scheduler object is a complete database schema object of the form <code dir="ltr">[schema.]name</code>. Scheduler objects follow the naming rules for database objects exactly and share the SQL namespace with other database objects.</p>
<p>Follow SQL naming rules to name Scheduler objects in the <code dir="ltr">DBMS_SCHEDULER</code> package. By default, Scheduler object names are uppercase unless they are surrounded by double quotes. For example, when creating a job, <code dir="ltr">job_name =&gt; 'my_job'</code> is the same as <code dir="ltr">job_name =&gt; 'My_Job'</code> and <code dir="ltr">job_name =&gt; 'MY_JOB'</code>, but different from <code dir="ltr">job_name =&gt; '"my_job"'</code>. These naming rules are also followed in those cases where comma-delimited lists of Scheduler object names are used within the <code dir="ltr">DBMS_SCHEDULER</code> package.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF00223" href="../../server.112/e41084/sql_elements008.htm#SQLRF00223"><span class="italic">Oracle Database SQL Language Reference</span></a> for details regarding naming objects</p>
</li>
<li>
<p><a href="schedover.htm#BGBJHJDC">"About Jobs and Supporting Scheduler Objects"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1006395"></a>
<div id="ADMIN12382" class="sect1">
<h2 class="sect1">Creating, Running, and Managing<a id="sthref2988"></a> Jobs</h2>
<p>A job is the combination of a schedule and a program, along with any additional arguments required by the program. This section introduces you to basic job tasks, and discusses the following topics:</p>
<ul>
<li>
<p><a href="#i1013041">Job Tasks and Their Procedures</a></p>
</li>
<li>
<p><a href="#i1009668">Creating Jobs</a></p>
</li>
<li>
<p><a href="#i1015297">Altering Jobs</a></p>
</li>
<li>
<p><a href="#i1021522">Running Jobs</a></p>
</li>
<li>
<p><a href="#i1019785">Stopping Jobs</a></p>
</li>
<li>
<p><a href="#i1009723">Dropping Jobs</a></p>
</li>
<li>
<p><a href="#i1009724">Disabling Jobs</a></p>
</li>
<li>
<p><a href="#i1009725">Enabling Jobs</a></p>
</li>
<li>
<p><a href="#i1021521">Copying Jobs</a></p>
</li>
<li>
<p><a href="#CHDGIDFD">Viewing the Job Log</a></p>
</li>
<li>
<p><a href="#CHDHJIDC">Viewing stdout and stderr for External Jobs</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="schedover.htm#i1106309">"Jobs"</a> for an overview of jobs.</div>
<a id="i1013041"></a>
<div id="ADMIN12383" class="sect2">
<h3 class="sect2">Job Tasks and Their Procedures</h3>
<p><a href="#g1033963">Table 29-1</a> illustrates common job tasks and their appropriate procedures and privileges:</p>
<div id="ADMIN13087" class="tblformal">
<p class="titleintable"><a id="sthref2989"></a><a id="g1033963"></a>Table 29-1 Job Tasks and Their Procedures</p>
<table class="cellalignment1338" title="Job Tasks and Their Procedures" summary="Column one lists common job tasks; column 2 displays the procedure that performs the task: column 3 displays the privileges needed for the task." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t5">Task</th>
<th class="cellalignment1334" id="r1c2-t5">Procedure</th>
<th class="cellalignment1334" id="r1c3-t5">Privilege Needed</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t5" headers="r1c1-t5">
<p>Create a job</p>
</td>
<td class="cellalignment1335" headers="r2c1-t5 r1c2-t5">
<p><code dir="ltr">CREATE_JOB</code> or <code dir="ltr">CREATE_JOBS</code></p>
</td>
<td class="cellalignment1335" headers="r2c1-t5 r1c3-t5">
<p><code dir="ltr">CREATE</code> <code dir="ltr">JOB</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t5" headers="r1c1-t5">
<p>Alter a job</p>
</td>
<td class="cellalignment1335" headers="r3c1-t5 r1c2-t5">
<p><code dir="ltr">SET_ATTRIBUTE</code> or <code dir="ltr">SET_JOB_ATTRIBUTES</code></p>
</td>
<td class="cellalignment1335" headers="r3c1-t5 r1c3-t5">
<p><code dir="ltr">ALTER</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t5" headers="r1c1-t5">
<p>Run a job</p>
</td>
<td class="cellalignment1335" headers="r4c1-t5 r1c2-t5">
<p><code dir="ltr">RUN_JOB</code></p>
</td>
<td class="cellalignment1335" headers="r4c1-t5 r1c3-t5">
<p><code dir="ltr">ALTER</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t5" headers="r1c1-t5">
<p>Copy a job</p>
</td>
<td class="cellalignment1335" headers="r5c1-t5 r1c2-t5">
<p><code dir="ltr">COPY_JOB</code></p>
</td>
<td class="cellalignment1335" headers="r5c1-t5 r1c3-t5">
<p><code dir="ltr">ALTER</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r6c1-t5" headers="r1c1-t5">
<p>Drop a job</p>
</td>
<td class="cellalignment1335" headers="r6c1-t5 r1c2-t5">
<p><code dir="ltr">DROP_JOB</code></p>
</td>
<td class="cellalignment1335" headers="r6c1-t5 r1c3-t5">
<p><code dir="ltr">ALTER</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r7c1-t5" headers="r1c1-t5">
<p>Stop a job</p>
</td>
<td class="cellalignment1335" headers="r7c1-t5 r1c2-t5">
<p><code dir="ltr">STOP_JOB</code></p>
</td>
<td class="cellalignment1335" headers="r7c1-t5 r1c3-t5">
<p><code dir="ltr">ALTER</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r8c1-t5" headers="r1c1-t5">
<p>Disable a job</p>
</td>
<td class="cellalignment1335" headers="r8c1-t5 r1c2-t5">
<p><code dir="ltr">DISABLE</code></p>
</td>
<td class="cellalignment1335" headers="r8c1-t5 r1c3-t5">
<p><code dir="ltr">ALTER</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r9c1-t5" headers="r1c1-t5">
<p>Enable a job</p>
</td>
<td class="cellalignment1335" headers="r9c1-t5 r1c2-t5">
<p><code dir="ltr">ENABLE</code></p>
</td>
<td class="cellalignment1335" headers="r9c1-t5 r1c3-t5">
<p><code dir="ltr">ALTER</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>See <a href="schedadmin.htm#i1011204">"Scheduler Privileges"</a> for further information regarding privileges.</p>
</div>
<!-- class="sect2" -->
<a id="i1009668"></a>
<div id="ADMIN12384" class="sect2">
<h3 class="sect2">Creatin<a id="sthref2990"></a><a id="sthref2991"></a>g Jobs</h3>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CHDEAHCA">Overview of Creating Jobs</a></p>
</li>
<li>
<p><a href="#CHDBEDBG">Specifying a Job Action and Job Schedule</a></p>
</li>
<li>
<p><a href="#CIAFHJEE">Specifying Job Credentials and Job Destinations</a></p>
</li>
<li>
<p><a href="#CIAEBDIA">Creating Multiple-Destination Jobs</a></p>
</li>
<li>
<p><a href="#i1025412">Setting Job Arguments</a></p>
</li>
<li>
<p><a href="#CHDHBJJI">Setting Additional Job Attributes</a></p>
</li>
<li>
<p><a href="#CHDFDEEC">Creating Detached Jobs</a></p>
</li>
<li>
<p><a href="#CHDCJFEJ">Creating Multiple Jobs in a Single Transaction</a></p>
</li>
<li>
<p><a href="#CIAJCFHE">Techniques for External Jobs</a></p>
</li>
</ul>
<a id="CHDEAHCA"></a>
<div id="ADMIN12501" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Overview of Creating Jobs</h4>
<p>You create one or more jobs using the <code dir="ltr">DBMS_SCHEDULER.CREATE_JOB</code> or <code dir="ltr">DBMS_SCHEDULER.CREATE_JOBS</code> procedures or Enterprise Manager. You use the <code dir="ltr">CREATE_JOB</code> procedure to create a single job. This procedure is overloaded to enable you to create different types of jobs that are based on different objects. You can create multiple jobs in a single transaction using the <code dir="ltr">CREATE_JOBS</code> procedure.</p>
<p>You must have the <code dir="ltr">CREATE</code> <code dir="ltr">JOB</code> privilege to create a job in your own schema, and the <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> privilege to create a job in any schema except <code dir="ltr">SYS</code>.</p>
<p>For each job being created, you specify a job type, an action, and a schedule. You can also optionally specify a credential name, a destination or destination group name, a job class, and other attributes. As soon as you enable a job, it is automatically run by the Scheduler at its next scheduled date and time. By default, jobs are disabled when created and must be enabled with <code dir="ltr">DBMS_SCHEDULER.ENABLE</code> to run. You can also set the <code dir="ltr">enabled</code> argument of the <code dir="ltr">CREATE_JOB</code> procedure to <code dir="ltr">TRUE</code>, in which case the job is ready to be automatically run, according to its schedule, as soon as you create it.</p>
<p>Some job attributes cannot be set with <code dir="ltr">CREATE_JOB</code>, and instead must be set with <code dir="ltr">DBMS_SCHEDULER.SET_ATTRIBUTE</code>. For example, to set the <code dir="ltr">logging_level</code> attribute for a job, you must call <code dir="ltr">SET_ATTRIBUTE</code> after calling <code dir="ltr">CREATE_JOB</code>.</p>
<p>You can create a job in another schema by specifying <code dir="ltr">schema.job_name</code>. The creator of a job is, therefore, not necessarily the job owner. The job owner is the user in whose schema the job is created. The NLS environment of the job, when it runs, is the existing environment at the time the job was created.</p>
<p><a href="#CHDGBEDA">Example 29-1</a> demonstrates creating a database job called <code dir="ltr">update_sales</code>, which calls a package procedure in the <code dir="ltr">OPS</code> schema that updates a sales summary table:</p>
<div id="ADMIN13088" class="example">
<p class="titleinexample"><a id="CHDGBEDA"></a>Example 29-1 Creating a Job</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_JOB (
   job_name           =&gt;  'update_sales',
   job_type           =&gt;  'STORED_PROCEDURE',
   job_action         =&gt;  'OPS.SALES_PKG.UPDATE_SALES_SUMMARY',
   start_date         =&gt;  '28-APR-08 07.00.00 PM Australia/Sydney',
   repeat_interval    =&gt;  'FREQ=DAILY;INTERVAL=2', /* every other day */
   end_date           =&gt;  '20-NOV-08 07.00.00 PM Australia/Sydney',
   auto_drop          =&gt;   FALSE,
   job_class          =&gt;  'batch_update_jobs',
   comments           =&gt;  'My new job');
END;
/
</pre></div>
<!-- class="example" -->
<p>Because no <code dir="ltr">destination_name</code> attribute is specified, the job runs on the originating (local) database. The job runs as the user who created the job.</p>
<p>The <code dir="ltr">repeat_interval</code> argument specifies that this job runs every other day until it reaches the end date and time. Another way to limit the number of times that a repeating job runs is to set its <code dir="ltr">max_runs</code> attribute to a positive number.</p>
<p>The job is disabled when it is created, by default. You must enable it with <code dir="ltr">DBMS_SCHEDULER.ENABLE</code> before the Scheduler will automatically run it.</p>
<p>Jobs are set to be automatically dropped by default after they complete. Setting the <code dir="ltr">auto_drop</code> attribute to <code dir="ltr">FALSE</code> causes the job to persist. Note that repeating jobs are not auto-dropped unless the job end date passes, the maximum number of runs (<code dir="ltr">max_runs</code>) is reached, or the maximum number of failures is reached (<code dir="ltr">max_failures</code>).</p>
<p>After a job is created, it can be queried using the <code dir="ltr">*_SCHEDULER_JOBS</code> views.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFHJEE">"Specifying Job Credentials and Job Destinations"</a></div>
</div>
<!-- class="sect3" -->
<a id="CHDBEDBG"></a>
<div id="ADMIN12502" class="sect3">
<h4 class="sect3">Specifying a Job Action and Job Schedule</h4>
<p>Because the <code dir="ltr">CREATE_JOB</code> procedure is overloaded, there are several different ways of using it. In addition to specifying the job action and job repeat interval as job attributes as shown in <a href="#CHDGBEDA">Example 29-1</a>, known as specifying the job action and job schedule <span class="italic">inline</span>, you can create a job that points to a program object (program) to specify the job action, a schedule object (schedule) to specify the repeat interval, or both a program and schedule. This is discussed in the following sections:</p>
<ul>
<li>
<p><a href="#i1019596">Creating Jobs Using a Named Program</a></p>
</li>
<li>
<p><a href="#i1019182">Creating Jobs Using a Named Schedule</a></p>
</li>
<li>
<p><a href="#i1019183">Creating Jobs Using Named Programs and Schedules</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="schedover.htm#i1106287">"Programs"</a></p>
</li>
<li>
<p><a href="schedover.htm#i1106296">"Schedules"</a></p>
</li>
</ul>
</div>
<a id="i1019596"></a>
<div id="ADMIN12388" class="sect4">
<h5 class="sect4">Creating Jobs Using a Named Program</h5>
<p>You can create a job by pointing to a named program instead of inlining its action. To create a job using a named program, you specify the value for <code dir="ltr">program_name</code> in the <code dir="ltr">CREATE_JOB</code> procedure when creating the job and do not specify the values for <code dir="ltr">job_type</code>, <code dir="ltr">job_action</code>, and <code dir="ltr">number_of_arguments</code>.</p>
<p>To use an existing program when creating a job, the owner of the job must be the owner of the program or have <code dir="ltr">EXECUTE</code> privileges on it. The following PL/SQL block is an example of a <code dir="ltr">CREATE_JOB</code> procedure with a named program that creates a regular job called <code dir="ltr">my_new_job1</code>:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_JOB (
   job_name          =&gt;  'my_new_job1',
   program_name      =&gt;  'my_saved_program', 
   repeat_interval   =&gt;  'FREQ=DAILY;BYHOUR=12',
   comments          =&gt;  'Daily at noon');
END;
/
</pre>
<p>T<a id="sthref2992"></a><a id="sthref2993"></a>he following PL/SQL block creates a <a id="sthref2994"></a>lightweight job. Lightweight jobs must reference a program, and the program type must be '<code dir="ltr">PLSQL_BLOCK</code>' or '<code dir="ltr">STORED_PROCEDURE</code>'. In addition, the program must be already enabled when you create the job.</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_JOB (
   job_name         =&gt;  'my_lightweight_job1',
   program_name     =&gt;  'polling_prog_n2',
   repeat_interval  =&gt;  'FREQ=SECONDLY;INTERVAL=10',
   end_date         =&gt;  '30-APR-09 04.00.00 AM Australia/Sydney',
   job_style        =&gt; 'LIGHTWEIGHT',
   comments         =&gt; 'Job that polls device n2 every 10 seconds');
END;
/
</pre></div>
<!-- class="sect4" -->
<a id="i1019182"></a>
<div id="ADMIN12389" class="sect4">
<h5 class="sect4">Creating Jobs Using a Named Schedule</h5>
<p>You can also create a job by pointing to a named schedule instead of inlining its schedule. To create a job using a named schedule, you specify the value for <code dir="ltr">schedule_name</code> in the <code dir="ltr">CREATE_JOB</code> procedure when creating the job and do not specify the values for <code dir="ltr">start_date</code>, <code dir="ltr">repeat_interval</code>, and <code dir="ltr">end_date</code>.</p>
<p>You can use any named schedule to create a job because all schedules are created with access to <code dir="ltr">PUBLIC</code>. The following <code dir="ltr">CREATE_JOB</code> procedure has a named schedule and creates a regular job called <code dir="ltr">my_new_job2</code>:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_JOB (
   job_name                 =&gt;  'my_new_job2', 
   job_type                 =&gt;  'PLSQL_BLOCK',
   job_action               =&gt;  'BEGIN SALES_PKG.UPDATE_SALES_SUMMARY; END;',
   schedule_name            =&gt;  'my_saved_schedule');
END;
/
</pre></div>
<!-- class="sect4" -->
<a id="i1019183"></a>
<div id="ADMIN12390" class="sect4">
<h5 class="sect4">Creating Jobs Using Named Programs and Schedules</h5>
<p>A job can also be created by pointing to both a named program and a named schedule. For example, the following <code dir="ltr">CREATE_JOB</code> procedure creates a regular job called <code dir="ltr">my_new_job3</code>, based on the existing program, <code dir="ltr">my_saved_program1</code>, and the existing schedule, <code dir="ltr">my_saved_schedule1</code>:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_JOB (
   job_name            =&gt;  'my_new_job3', 
   program_name        =&gt;  'my_saved_program1', 
   schedule_name       =&gt;  'my_saved_schedule1');
END;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1022811">"Creating and Managing Programs to Define Jobs"</a></p>
</li>
<li>
<p><a href="#i1022969">"Creating and Managing Schedules to Define Jobs"</a></p>
</li>
<li>
<p><a href="#CHDDDIJB">"Using Events to Start Jobs"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CIAFHJEE"></a>
<div id="ADMIN13373" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Specifying Job Credentials and Job Destinations</h4>
<p>For local external jobs, remote external jobs, and remote database jobs, you must specify the credentials under which the job runs. You do so by creating a credential object and assigning it to the <code dir="ltr">credential_name</code> job attribute.</p>
<p>For remote external jobs and remote database jobs, you specify the job destination by creating a destination object and assigning it to the <code dir="ltr">destination_name</code> job attribute. A job with a <code dir="ltr">NULL</code> <code dir="ltr">destination_name</code> attribute runs on the host where the job is created.</p>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CIAJCAAI">Credential and Destination Tasks and Their Procedures</a></p>
</li>
<li>
<p><a href="#CIAHDDCJ">Creating Credentials</a></p>
</li>
<li>
<p><a href="#CIAHFHFA">Creating Destinations</a></p>
</li>
<li>
<p><a href="#CIACDDII">Creating Destination Groups for Multiple-Destination Jobs</a></p>
</li>
<li>
<p><a href="#CIAFAHAJ">Example: Creating a Remote Database Job</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="schedover.htm#BGBDCCCE">"Credentials"</a></p>
</li>
<li>
<p><a href="schedover.htm#CHDDFGIF">"Destinations"</a></p>
</li>
<li>
<p><a href="#CIAEBDIA">"Creating Multiple-Destination Jobs"</a></p>
</li>
</ul>
</div>
<a id="CIAJCAAI"></a>
<div id="ADMIN13374" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Credential and Destination Tasks and Their Procedures</h5>
<p><a href="#CIAJFHIE">Table 29-2</a> illustrates credential and destination tasks and their procedures and privileges:</p>
<div id="ADMIN13375" class="tblformalwide">
<p class="titleintable"><a id="sthref2995"></a><a id="CIAJFHIE"></a>Table 29-2 Credential and Destination Tasks and Their Procedures</p>
<table class="cellalignment1333" title="Credential and Destination Tasks and Their Procedures" summary="Column 1: Task, column 2: procedure to call, column 3: privileges needed." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t10">Task</th>
<th class="cellalignment1334" id="r1c2-t10">Procedure</th>
<th class="cellalignment1334" id="r1c3-t10">Privilege Needed</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t10" headers="r1c1-t10">
<p>Create a credential</p>
</td>
<td class="cellalignment1335" headers="r2c1-t10 r1c2-t10">
<p><code dir="ltr">CREATE_CREDENTIAL</code></p>
</td>
<td class="cellalignment1335" headers="r2c1-t10 r1c3-t10">
<p><code dir="ltr">CREATE</code> <code dir="ltr">JOB</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t10" headers="r1c1-t10">
<p>Drop a credential</p>
</td>
<td class="cellalignment1335" headers="r3c1-t10 r1c2-t10">
<p><code dir="ltr">DROP_CREDENTIAL</code></p>
</td>
<td class="cellalignment1335" headers="r3c1-t10 r1c3-t10">
<p><code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t10" headers="r1c1-t10">
<p>Create an external destination</p>
</td>
<td class="cellalignment1335" headers="r4c1-t10 r1c2-t10">
<p>(none)</p>
</td>
<td class="cellalignment1335" headers="r4c1-t10 r1c3-t10">
<p>See <a href="#CIAHFHFA">"Creating Destinations"</a></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t10" headers="r1c1-t10">
<p>Drop an external destination</p>
</td>
<td class="cellalignment1335" headers="r5c1-t10 r1c2-t10">
<p><code dir="ltr">DROP_AGENT_DESTINATION</code></p>
</td>
<td class="cellalignment1335" headers="r5c1-t10 r1c3-t10">
<p><code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r6c1-t10" headers="r1c1-t10">
<p>Create a database destination</p>
</td>
<td class="cellalignment1335" headers="r6c1-t10 r1c2-t10">
<p><code dir="ltr">CREATE_DATABASE_DESTINATION</code></p>
</td>
<td class="cellalignment1335" headers="r6c1-t10 r1c3-t10">
<p><code dir="ltr">CREATE</code> <code dir="ltr">JOB</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r7c1-t10" headers="r1c1-t10">
<p>Drop a database destination</p>
</td>
<td class="cellalignment1335" headers="r7c1-t10 r1c2-t10">
<p><code dir="ltr">DROP_DATABASE_DESTINATION</code></p>
</td>
<td class="cellalignment1335" headers="r7c1-t10 r1c3-t10">
<p><code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r8c1-t10" headers="r1c1-t10">
<p>Create a destination group</p>
</td>
<td class="cellalignment1335" headers="r8c1-t10 r1c2-t10">
<p><code dir="ltr">CREATE_GROUP</code></p>
</td>
<td class="cellalignment1335" headers="r8c1-t10 r1c3-t10">
<p><code dir="ltr">CREATE</code> <code dir="ltr">JOB</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r9c1-t10" headers="r1c1-t10">
<p>Drop a destination group</p>
</td>
<td class="cellalignment1335" headers="r9c1-t10 r1c2-t10">
<p><code dir="ltr">DROP_GROUP</code></p>
</td>
<td class="cellalignment1335" headers="r9c1-t10 r1c3-t10">
<p><code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r10c1-t10" headers="r1c1-t10">
<p>Add members to a destination group</p>
</td>
<td class="cellalignment1335" headers="r10c1-t10 r1c2-t10">
<p><code dir="ltr">ADD_GROUP_MEMBER</code></p>
</td>
<td class="cellalignment1335" headers="r10c1-t10 r1c3-t10">
<p><code dir="ltr">ALTER</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r11c1-t10" headers="r1c1-t10">
<p>Remove members from a destination group</p>
</td>
<td class="cellalignment1335" headers="r11c1-t10 r1c2-t10">
<p><code dir="ltr">REMOVE_GROUP_MEMBER</code></p>
</td>
<td class="cellalignment1335" headers="r11c1-t10 r1c3-t10">
<p><code dir="ltr">ALTER</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect4" -->
<a id="CIAHDDCJ"></a>
<div id="ADMIN13376" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Creating Credentials</h5>
<p><a id="sthref2996"></a>A <span class="bold">credential</span> is a user name and password pair stored in a dedicated database object. You assign a credential to a job so that it can authenticate with an Oracle database or the operating system before running.</p>
<p class="itemizedlisttitle">To create a credential:&nbsp;</p>
<ul>
<li>
<p>Call the <code dir="ltr">DBMS_SCHEDULER.CREATE_CREDENTIAL</code> procedure.</p>
</li>
</ul>
<p>You must have the <code dir="ltr">CREATE</code> <code dir="ltr">JOB</code> privilege to create a credential in your own schema, and the <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> privilege to create a credential in any schema except <code dir="ltr">SYS</code>. A credential can be used only by a job whose owner has <code dir="ltr">EXECUTE</code> privileges on the credential or whose owner also owns the credential. Because a credential belongs to a schema like any other schema object, you use the <code dir="ltr">GRANT</code> SQL statement to grant privileges on a credential.</p>
<div id="ADMIN13377" class="example">
<p class="titleinexample"><a id="CIAJDADA"></a>Example 29-2 Creating a Credential</p>
<pre dir="ltr">
BEGIN
 DBMS_SCHEDULER.CREATE_CREDENTIAL('DW_CREDENTIAL', 'dwuser', 'dW001515');
END;
/

GRANT EXECUTE ON DW_CREDENTIAL TO salesuser;
</pre></div>
<!-- class="example" -->
<p>You can query the <code dir="ltr">*_SCHEDULER_CREDENTIALS</code> views to see a list of credentials in the database. Credential passwords are stored obfuscated and are not displayed in the <code dir="ltr">*_SCHEDULER_CREDENTIALS</code> views.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="schedover.htm#BGBDCCCE">"Credentials"</a> for more information about credentials</div>
</div>
<!-- class="sect4" -->
<a id="CIAHFHFA"></a>
<div id="ADMIN13378" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Creating Destinations</h5>
<p><a id="sthref2998"></a><a id="sthref2999"></a><a id="sthref3000"></a>A <span class="bold">destination</span> is a Scheduler object that defines a location for running a job. You designate the locations where a job runs by specifying either a single destination or a destination group in the <code dir="ltr">destination_name</code> attribute of the job. If you leave the <code dir="ltr">destination_name</code> attribute <code dir="ltr">NULL</code>, the job runs on the local host (the host where the job was created).</p>
<p>Use external destinations to specify locations where remote external jobs run. Use database destinations to specify locations where remote database jobs run.</p>
<p>You do not need object privileges to use a destination created by another user.</p>
<p class="itemizedlisttitle">To create an external destination:&nbsp;</p>
<ul>
<li>
<p>Register a remote Scheduler agent with the database.</p>
<p>See <a href="schedadmin.htm#BAJDFHBE">"Installing and Configuring the Scheduler Agent on a Remote Host"</a> for instructions.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
There is no <code dir="ltr">DBMS_SCHEDULER</code> package procedure to create an external destination. You create an external destination implicitly by registering a remote agent.
<p>You can also register a local Scheduler agent if you have other database instances on the same host that are targets for remote jobs. This creates an external destination that references the local host.</p>
</div>
<p>The external destination name is automatically set to the agent name. To verify that the external destination was created, query the views <code dir="ltr">DBA_SCHEDULER_EXTERNAL_DESTS</code> or <code dir="ltr">ALL_SCHEDULER_EXTERNAL_DESTS</code>.</p>
<p class="itemizedlisttitle">To create a database destination:&nbsp;</p>
<ul>
<li>
<p>Call the <code dir="ltr">DBMS_SCHEDULER.CREATE_DATABASE_DESTINATION</code> procedure.</p>
<p>You must specify the name of an external destination as a procedure argument. This designates the remote host that the database destination points to. You also specify a net service name or complete connect descriptor that identifies the database instance being connected to. If you specify a net service name, it must be resolved by the local <code dir="ltr">tnsnames.ora</code> file. If you do not specify a database instance, the remote Scheduler agent connects to its default database, which is specified in the agent configuration file.</p>
</li>
</ul>
<p>To create a database destination, you must have the <code dir="ltr">CREATE JOB</code> system privilege. To create a database destination in a schema other than your own, you must have the <code dir="ltr">CREATE ANY JOB</code> privilege.</p>
<div id="ADMIN13379" class="example">
<p class="titleinexample"><a id="CIAFDEIB"></a>Example 29-3 Creating a Database Destination</p>
<p>The following example creates a database destination named <code dir="ltr">DBHOST1_ORCLDW</code>. For this example, assume the following:</p>
<ul>
<li>
<p>You installed a Scheduler agent on the remote host <code dir="ltr">dbhost1.example.com</code>, and you registered the agent with the local database.</p>
</li>
<li>
<p>You did not modify the agent configuration file to set the agent name. Therefore the agent name and the external destination name default to <code dir="ltr">DBHOST1</code>.</p>
</li>
<li>
<p>You used Net Configuration Assistant on the local host to create a connect descriptor in tnsnames.ora for the Oracle Database instance named <code dir="ltr">orcldw</code>, which resides on the remote host <code dir="ltr">dbhost1.example.com</code>. You assigned a net service name (alias) of <code dir="ltr">ORCLDW</code> to this connect descriptor.</p>
</li>
</ul>
<pre dir="ltr">
BEGIN
 DBMS_SCHEDULER.CREATE_DATABASE_DESTINATION (
  destination_name     =&gt; 'DBHOST1_ORCLDW',
  agent                =&gt; 'DBHOST1',
  tns_name             =&gt; 'ORCLDW',
  comments             =&gt; 'Instance named orcldw on host dbhost1.example.com');
END;
/
</pre>
<p>To verify that the database destination was created, query the views <code dir="ltr">*_SCHEDULER_DB_DESTS</code>.</p>
</div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="schedover.htm#CHDDFGIF">"Destinations"</a> for more information about destinations</p>
</li>
<li>
<p><a href="schedover.htm#i1106309">"Jobs"</a> to learn about remote external jobs and remote database jobs</p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" -->
<a id="CIACDDII"></a>
<div id="ADMIN13380" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Creating Destination Groups for Multiple-Destination Jobs</h5>
<p>To create a job that runs on multiple destinations, you must create a destination group and assign that group to the <code dir="ltr">destination_name</code> attribute of the job. You can specify group members (destinations) when you create the group, or you can add group members at a later time.</p>
<p class="itemizedlisttitle">To create a destination group:&nbsp;</p>
<ul>
<li>
<p>Call the <code dir="ltr">DBMS_SCHEDULER.CREATE_GROUP</code> procedure.</p>
</li>
</ul>
<p>For remote external jobs you must specify a group of type '<code dir="ltr">EXTERNAL_DEST</code>', and all group members must be external destinations. For remote database jobs, you must specify a group of type '<code dir="ltr">DB_DEST</code>', and all members must be database destinations.</p>
<p>Members of destination groups have the following format:</p>
<pre dir="ltr">
[[<span class="italic">schema</span>.]<span class="italic">credential</span>@][<span class="italic">schema</span>.]<span class="italic">destination</span>
</pre>
<p>where:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">credential</span></code> is the name of an existing credential.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">destination</span></code> is the name of an existing database destination or external destination</p>
</li>
</ul>
<p>The credential portion of a destination member is optional. If omitted, the job using this destination member uses its default credential.</p>
<p>You can include another group of the same type as a member of a destination group. Upon group creation, the Scheduler expands the included group into its members.</p>
<p>If you want the local host to be one of many destinations on which a job runs, you can include the keyword <code dir="ltr">LOCAL</code> as a group member for either type of destination group. <code dir="ltr">LOCAL</code> can be preceded by a credential only in an external destination group.</p>
<p>A group is owned by the user who creates it. You must have the <code dir="ltr">CREATE</code> <code dir="ltr">JOB</code> system privilege to create a group in your own schema, and the <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> system privilege to create a group in another schema. You can grant object privileges on a group to other users by granting <code dir="ltr">SELECT</code> on the group.</p>
<div id="ADMIN13381" class="example">
<p class="titleinexample"><a id="CIAEDJJI"></a>Example 29-4 Creating a Database Destination Group</p>
<p>This example creates a database destination group. Because some members do not include a credential, a job using this destination group must have default credentials.</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_GROUP(
    GROUP_NAME    =&gt; 'all_dbs',
    GROUP_TYPE    =&gt; 'DB_DEST',
    MEMBER        =&gt; 'oltp_admin@orcl, orcldw1, LOCAL',
    COMMENTS      =&gt; 'All databases managed by me');
END;
/
</pre>
<p>The following code adds another member to the group.</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.ADD_GROUP_MEMBER(
    GROUP_NAME    =&gt; 'all_dbs',
    MEMBER        =&gt; 'dw_admin@orcldw2');
END;
/
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="schedover.htm#CHDCFBGH">"Groups"</a> for an overview of groups.</div>
</div>
<!-- class="sect4" -->
<a id="CIAFAHAJ"></a>
<div id="ADMIN13382" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Example: Creating a Remote Database Job</h5>
<p>The following example creates a remote database job by specifying a database destination object in the <code dir="ltr">destination_name</code> object of the job. A credential must also be specified so the job can authenticate with the remote database. The example uses the credential created in <a href="#CIAJDADA">Example 29-2</a> and the database destination created in <a href="#CIAFDEIB">Example 29-3</a>.</p>
<pre dir="ltr">
BEGIN
 DBMS_SCHEDULER.CREATE_JOB (
   job_name            =&gt;  'SALES_SUMMARY1', 
   job_type            =&gt;  'STORED_PROCEDURE',
   job_action          =&gt;  'SALES.SALES_REPORT1',
   start_date          =&gt;  '15-JUL-09 11.00.00 PM Europe/Warsaw',
   repeat_interval     =&gt;  'FREQ=DAILY',
   credential_name     =&gt;  'DW_CREDENTIAL',
   destination_name    =&gt;  'DBHOST1_ORCLDW');
END;
/
</pre></div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CIAEBDIA"></a>
<div id="ADMIN13383" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating Multiple-Destination Jobs</h4>
<p>You can create a job that runs on multiple destinations, but that is managed from a single location. A typical reason to do this is to run a database maintenance job on all of the databases that you administer. Rather than create the job on each database, you create the job once and designate multiple destinations for the job. From the database where you created the job (the <span class="italic">local database</span>), you can monitor the state and results of all instances of the job at all locations.</p>
<p class="itemizedlisttitle">To create a multiple-destination job:&nbsp;</p>
<ul>
<li>
<p>Call the <code dir="ltr">DBMS_SCHEDULER.CREATE_JOB</code> procedure and set the <code dir="ltr">destination_name</code> attribute of the job to the name of database destination group or external destination group.</p>
<p>If not all destination group members include a credential prefix (the schema), assign a default credential to the job.</p>
<p>To include the local host or local database as one of the destinations on which the job runs, ensure that the keyword <code dir="ltr">LOCAL</code> is one of the members of the destination group.</p>
</li>
</ul>
<p>To obtain a list of destination groups, submit this query:</p>
<pre dir="ltr">
SELECT owner, group_name, group_type, number_of_members FROM all_scheduler_groups
  WHERE group_type = 'DB_DEST' or group_type = 'EXTERNAL_DEST';

OWNER           GROUP_NAME      GROUP_TYPE    NUMBER_OF_MEMBERS
--------------- --------------- ------------- -----------------
DBA1            ALL_DBS         DB_DEST                       4
DBA1            ALL_HOSTS       EXTERNAL_DEST                 4
</pre>
<p>The following example creates a multiple-destination database job, using the database destination group created in <a href="#CIAEDJJI">Example 29-4</a>. Because this is a system administration job, it uses a credential with system administrator privileges.</p>
<pre dir="ltr">
BEGIN
 DBMS_SCHEDULER.CREATE_CREDENTIAL('DBA_CREDENTIAL', 'dba1', 'sYs040533');
 DBMS_SCHEDULER.CREATE_JOB (
   job_name            =&gt;  'MAINT_SET1', 
   job_type            =&gt;  'STORED_PROCEDURE',
   job_action          =&gt;  'MAINT_PROC1',
   start_date          =&gt;  '15-JUL-09 11.00.00 PM Europe/Warsaw',
   repeat_interval     =&gt;  'FREQ=DAILY',
   credential_name     =&gt;  'DBA_CREDENTIAL',
   destination_name    =&gt;  'ALL_DBS');
END;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="schedover.htm#CHDCIEII">"Multiple-Destination Jobs"</a></p>
</li>
<li>
<p><a href="#CIABJJEE">"Monitoring Multiple Destination Jobs"</a></p>
</li>
<li>
<p><a href="schedover.htm#CHDCFBGH">"Groups"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="i1025412"></a>
<div id="ADMIN12386" class="sect3">
<h4 class="sect3">Setting Job Arguments</h4>
<p>After creating a job, you may need to set job arguments if:</p>
<ul>
<li>
<p>The inline job action is a stored procedure or other executable that requires arguments</p>
</li>
<li>
<p>The job references a named program object and you want to override one or more default program arguments</p>
</li>
<li>
<p>The job references a named program object and one or more of the program arguments were not assigned a default value</p>
</li>
</ul>
<p>To set job arguments, use the <code dir="ltr">SET_JOB_ARGUMENT_VALUE</code> or <code dir="ltr">SET_JOB_ANYDATA_VALUE</code> procedures or Enterprise Manager. <code dir="ltr">SET_JOB_ANYDATA_VALUE</code> is used for complex data types that cannot be represented as a <code dir="ltr">VARCHAR2</code> string.</p>
<p>An example of a job that might need arguments is one that starts a reporting program that requires a start date and end date. The following code example sets the end date job argument, which is the second argument expected by the reporting program:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE (
   job_name                =&gt; 'ops_reports',
   argument_position       =&gt; 2,
   argument_value          =&gt; '12-DEC-03');
END;
/
</pre>
<p>If you use this procedure on an argument whose value has already been set, it will be overwritten. You can set argument values using either the argument name or the argument position. To use argument name, the job must reference a named program object, and the argument must have been assigned a name in the program object. If a program is inlined, only setting by position is supported. Arguments are not supported for jobs of type '<code dir="ltr">PLSQL_BLOCK</code>'.</p>
<p>To remove a value that has been set, use the <code dir="ltr">RESET_JOB_ARGUMENT</code> procedure. This procedure can be used for both regular and <code dir="ltr">ANYDATA</code> arguments.</p>
<p><code dir="ltr">SET_JOB_ARGUMENT_VALUE</code> only supports arguments of SQL type. Therefore, argument values that are not of SQL type, such as booleans, are not supported as program or job arguments.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDIGJED">"Defining Program Arguments"</a></div>
</div>
<!-- class="sect3" -->
<a id="CHDHBJJI"></a>
<div id="ADMIN12385" class="sect3">
<h4 class="sect3">Setting Additional Job Attributes</h4>
<p>After creating a job, you can set additional job attributes or change attribute values by using the <code dir="ltr">SET_ATTRIBUTE</code> or <code dir="ltr">SET_JOB_ATTRIBUTES</code> procedures. You can also set job attributes with Enterprise Manager. Although many job attributes can be set with the call to <code dir="ltr">CREATE_JOB</code>, some attributes, such as <code dir="ltr">destination</code> and <code dir="ltr">credential_name</code>, can be set only with <code dir="ltr">SET_ATTRIBUTE</code> or <code dir="ltr">SET_JOB_ATTRIBUTES</code> after the job is created.</p>
</div>
<!-- class="sect3" -->
<a id="CHDFDEEC"></a>
<div id="ADMIN12515" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating Detached Jobs</h4>
<p>A detached job must point to a program object (program) that has its <code dir="ltr">detached</code> attribute set to <code dir="ltr">TRUE</code>.</p>
<div id="ADMIN13094" class="example">
<p class="titleinexample"><a id="CHDCCAIE"></a>Example 29-5 Creating a Detached Job That Performs a Cold Backup</p>
<p>T<a id="sthref3005"></a>his example for Linux and UNIX creates a nightly job that performs a cold backup of the database. It contains three steps.</p>
<p><span class="bold">Step 1&mdash;Create the Script That Invokes RMAN</span></p>
<p>Create a shell script that calls an RMAN script to perform a cold backup. The shell script is located in $ORACLE_HOME/scripts/coldbackup.sh. It must be executable by the user who installed Oracle Database (typically the user <code dir="ltr">oracle</code>).</p>
<pre dir="ltr">
#!/bin/sh
 
export ORACLE_HOME=/u01/app/oracle/product/11.2.0/db_1
export ORACLE_SID=orcl
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ORACLE_HOME/lib
 
$ORACLE_HOME/bin/rman TARGET / @$ORACLE_HOME/scripts/coldbackup.rman
  trace /u01/app/oracle/backup/coldbackup.out &amp;
exit 0
</pre></div>
<!-- class="example" -->
<p><span class="bold">Step 2&mdash;Create the RMAN Script</span></p>
<p>Create an RMAN script that performs the cold backup and then ends the job. The script is located in $ORACLE_HOME/scripts/coldbackup.rman.</p>
<pre dir="ltr">
run {
# Shut down database for backups and put into MOUNT mode
shutdown immediate
startup mount
 
# Perform full database backup
backup full format "/u01/app/oracle/backup/%d_FULL_%U" (database) ;
 
# Open database after backup
alter database open;
 
# Call notification routine to indicate job completed successfully
sql " BEGIN  DBMS_SCHEDULER.END_DETACHED_JOB_RUN(''sys.backup_job'', 0,
  null); END; ";
}
</pre>
<p><span class="bold">Step 3&mdash;Create the Job and Use a Detached Program</span></p>
<p>Submit the following PL/SQL block:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_PROGRAM(
    program_name   =&gt; 'sys.backup_program',
    program_type   =&gt; 'executable',
    program_action =&gt; '?/scripts/coldbackup.sh',
    enabled        =&gt;  TRUE);

  DBMS_SCHEDULER.SET_ATTRIBUTE('sys.backup_program', 'detached', TRUE);
 
  DBMS_SCHEDULER.CREATE_JOB(
    job_name        =&gt; 'sys.backup_job',
    program_name    =&gt; 'sys.backup_program',
    repeat_interval =&gt; 'FREQ=DAILY;BYHOUR=1;BYMINUTE=0');

  DBMS_SCHEDULER.ENABLE('sys.backup_job');
END;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="schedover.htm#CHDBDBDA">"Detached Jobs"</a></div>
</div>
<!-- class="sect3" -->
<a id="CHDCJFEJ"></a>
<div id="ADMIN12516" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating Multiple Jobs in a Single Transaction</h4>
<p>If you must create many jobs, you may be able to reduce transaction overhead and experience a performance gain if you use the <code dir="ltr">CREATE_JOBS</code> procedure. <a href="#BAJICIFE">Example 29-6</a> demonstrates how to use this procedure to create multiple jobs in a single transaction.</p>
<div id="ADMIN13095" class="example">
<p class="titleinexample"><a id="BAJICIFE"></a>Example 29-6 Creating Multiple Jobs in a Single Transaction</p>
<pre dir="ltr">
DECLARE
 newjob sys.job_definition;
 newjobarr sys.job_definition_array;
BEGIN
 -- Create an array of JOB_DEFINITION object types
 newjobarr := sys.job_definition_array();

 -- Allocate sufficient space in the array
 newjobarr.extend(5);

 -- Add definitions for 5 jobs
 FOR i IN 1..5 LOOP
   -- Create a JOB_DEFINITION object type
   newjob := sys.job_definition(job_name =&gt; 'TESTJOB' || to_char(i),
                     job_style =&gt; 'REGULAR',
                     program_name =&gt; 'PROG1',
                     repeat_interval =&gt; 'FREQ=HOURLY',
                     start_date =&gt; systimestamp + interval '600' second,
                     max_runs =&gt; 2,
                     auto_drop =&gt; FALSE,
                     enabled =&gt; TRUE
                    );

   -- Add it to the array
   newjobarr(i) := newjob;
 END LOOP;

 -- Call CREATE_JOBS to create jobs in one transaction
 DBMS_SCHEDULER.CREATE_JOBS(newjobarr, 'TRANSACTIONAL');
END;
/

PL/SQL procedure successfully completed.

SELECT JOB_NAME FROM USER_SCHEDULER_JOBS;
 
JOB_NAME
------------------------------
TESTJOB1
TESTJOB2
TESTJOB3
TESTJOB4
TESTJOB5
 
5 rows selected.
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="schedover.htm#CHDECJDB">"Lightweight Jobs"</a></div>
</div>
<!-- class="sect3" -->
<a id="CIAJCFHE"></a>
<div id="ADMIN13384" class="sect3">
<h4 class="sect3">Techniques for External Jobs</h4>
<p>This section contains the following examples, which demonstrate some practical techniques for external jobs:</p>
<ul>
<li>
<p><a href="#CHDJHBAH">Creating a Local External Job That Runs a DOS Command</a></p>
</li>
<li>
<p><a href="#CHDIDGAE">Creating a Local External Job and Retrieving stdout</a></p>
</li>
</ul>
<div id="ADMIN13090" class="example">
<p class="titleinexample"><a id="CHDJHBAH"></a>Example 29-7 Creating a Local External Job That Runs a DOS Command</p>
<p>This example demonstrates how to create a local external job on Windows that runs a DOS built-in command (in this case, <code dir="ltr">mkdir</code>). The job runs <code dir="ltr">cmd.exe</code> with the <code dir="ltr">/c</code> option.</p>
<pre dir="ltr">
BEGIN
 DBMS_SCHEDULER.CREATE_JOB(
   job_name             =&gt; 'MKDIR_JOB',
   job_type             =&gt; 'EXECUTABLE',
   number_of_arguments  =&gt; 3,
   job_action           =&gt; '\windows\system32\cmd.exe',
   auto_drop            =&gt; FALSE,
   credential_name      =&gt; 'TESTCRED');

 DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE('mkdir_job',1,'/c');
 DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE('mkdir_job',2,'mkdir');
 DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE('mkdir_job',3,'\temp\extjob_test_dir');
 DBMS_SCHEDULER.ENABLE('MKDIR_JOB');
END;
/
</pre></div>
<!-- class="example" -->
<div id="ADMIN13093" class="example">
<p class="titleinexample"><a id="CHDIDGAE"></a>Example 29-8 Creating a Local External Job and Retrieving stdout</p>
<p><a id="sthref3006"></a><a id="sthref3007"></a><a id="sthref3008"></a>This example for Linux and UNIX shows how to create and run a local external job and then use the <code dir="ltr">GET_FILE</code> procedure to retrieve the job's stdout output. For local external jobs, stdout output is stored in a log file in <span class="italic">ORACLE_HOME</span>/scheduler/log. It is not necessary to supply this path to <code dir="ltr">GET_FILE</code>; you supply only the file name, which you generate by querying the log views for the job's external log ID and then appending "_stdout".</p>
<pre dir="ltr">
-- User scott must have CREATE JOB and CREATE EXTERNAL JOB privileges
grant create job, create external job to scott ;
 
connect scott/<span class="italic">password</span>
set serveroutput on
 
-- Create a credential for the job to use
exec dbms_scheduler.create_credential('my_cred','<span class="italic">host_username</span>','<span class="italic">host_passwd</span>')
 
-- Create a job that lists a directory. After running, the job is dropped.
begin
 DBMS_SCHEDULER.CREATE_JOB(
  job_name            =&gt; 'lsdir',
  job_type            =&gt; 'EXECUTABLE',
  job_action          =&gt; '/bin/ls',
  number_of_arguments =&gt; 1,
  enabled             =&gt; false,
  auto_drop           =&gt; true,
  credential_name     =&gt; 'my_cred');
 DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE('lsdir',1,'/tmp');
 DBMS_SCHEDULER.ENABLE('lsdir');
end;
/
 
-- Wait a bit for the job to run, and then check the job results.
select job_name, status, error#, actual_start_date, additional_info
 from user_scheduler_job_run_details where job_name='LSDIR';
 
-- Now use the external log id from the additional_info column to
-- formulate the log file name and retrieve the output
declare
 my_blob blob;
 log_id varchar2(50);
begin
 select regexp_substr(additional_info,'job[_0-9]*') into log_id
   from user_scheduler_job_run_details where job_name='LSDIR';
 dbms_lob.createtemporary(my_blob, false);
 dbms_scheduler.get_file(
   source_file     =&gt; log_id ||'_stdout',
   credential_name =&gt; 'my_cred',
   file_contents   =&gt; my_blob,
   source_host     =&gt; null);
 dbms_output.put_line(my_blob);
end;
/
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
For a remote external job, the method is the same, except that:
<ul>
<li>
<p>You set the job's <code dir="ltr">destination_name</code> attribute.</p>
</li>
<li>
<p>You designate a source host for the <code dir="ltr">GET_FILE</code> procedure.</p>
</li>
</ul>
<p><code dir="ltr">GET_FILE</code> automatically searches the correct host location for log files for both local and remote external jobs.</p>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink DBSEG30038" href="../../network.112/e36292/authentication.htm#DBSEG30038"><span class="italic">Oracle Database Security Guide</span></a> for more information about external authentication</p>
</li>
<li>
<p><a href="schedover.htm#CHDJABEG">"External Jobs"</a></p>
</li>
<li>
<p><a href="#CHDHJIDC">"Viewing stdout and stderr for External Jobs"</a></p>
</li>
<li>
<p><a href="#CHDFIBJF">"Stopping External Jobs"</a></p>
</li>
<li>
<p><a href="schedadmin.htm#CHDEDGEF">"Troubleshooting Remote Jobs"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1015297"></a>
<div id="ADMIN12392" class="sect2">
<h3 class="sect2">Alter<a id="sthref3009"></a><a id="sthref3010"></a>ing Jobs</h3>
<p>You alter a job by modifying its attributes. You do so using the <code dir="ltr">SET_ATTRIBUTE</code>, <code dir="ltr">SET_ATTRIBUTE_NULL</code>, or <code dir="ltr">SET_JOB_ATTRIBUTES</code> package procedures or Enterprise Manager. See the <code dir="ltr">CREATE_JOB</code> procedure in <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for details on job attributes.</p>
<p>All jobs can be altered, and, except for the job name, all job attributes can be changed. If there is a running instance of the job when the change is made, it is not affected by the call. The change is only seen in future runs of the job.</p>
<p>In general, you should not alter a job that was automatically created for you by the database. Jobs that were created by the database have the column <code dir="ltr">SYSTEM</code> set to <code dir="ltr">TRUE</code> in job views. The attributes of a job are available in the <code dir="ltr">*_SCHEDULER_JOBS</code> views.</p>
<p>It is valid for running jobs to alter their own job attributes. However, these changes do not take effect until the next scheduled run of the job.</p>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">SET_ATTRIBUTE</code>, <code dir="ltr">SET_ATTRIBUTE_NULL</code>, and <code dir="ltr">SET_JOB_ATTRIBUTES</code> procedures.</p>
<p>The following example changes the <code dir="ltr">repeat_interval</code> of the job <code dir="ltr">update_sales</code> to once per week on Wednesday.</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.SET_ATTRIBUTE (
   name         =&gt;  'update_sales',
   attribute    =&gt;  'repeat_interval',
   value        =&gt;  'freq=weekly; byday=wed');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="i1021522"></a>
<div id="ADMIN12393" class="sect2">
<h3 class="sect2">Runni<a id="sthref3011"></a><a id="sthref3012"></a>ng Jobs</h3>
<p>There are three ways in which a job can be run:</p>
<ul>
<li>
<p>According to the job schedule&mdash;In this case, provided that the job is enabled, the job is automatically picked up by the Scheduler job coordinator and run under the control of a job slave. The job runs as the user who is the job owner, or in the case of a local external job with a credential, as the user named in the credential. To find out whether the job succeeded, you must query the job views (<code dir="ltr">*_SCHEDULER_JOBS</code>) or the job log (<code dir="ltr">*_SCHEDULER_JOB_LOG</code> and <code dir="ltr">*_SCHEDULER_JOB_RUN_DETAILS</code>). See <a href="schedover.htm#i1006840">"How Jobs Execute"</a> for more information job slaves and the Scheduler architecture.</p>
</li>
<li>
<p>When an event occurs&mdash;Enabled event-based jobs start when a specified event is received on an event queue or when a file watcher raises a file arrival event. (See <a href="#CHDDDIJB">"Using Events to Start Jobs"</a>.) Event-based jobs also run under the control of a job slave and run as the user who owns the job, or in the case of a local external job with a credential, as the user named in the credential. To find out whether the job succeeded, you must query the job views or the job log.</p>
</li>
<li>
<p>By calling <code dir="ltr">DBMS_SCHEDULER.RUN_JOB</code>&mdash;You can use the <code dir="ltr">RUN_JOB</code> procedure to test a job or to run it outside of its specified schedule. You can run the job asynchronously, which is similar to the previous two methods of running a job, or synchronously, in which the job runs in the session that called <code dir="ltr">RUN_JOB</code>, and as the user logged in to that session. The <code dir="ltr">use_current_session</code> argument of <code dir="ltr">RUN_JOB</code> determines whether a job runs synchronously or asynchronously.</p>
<p><code dir="ltr">RUN_JOB</code> accepts a comma-delimited list of job names.</p>
<p>The following example asynchronously runs two jobs:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.RUN_JOB(
    JOB_NAME            =&gt; 'DSS.ETLJOB1, DSS.ETLJOB2',
    USE_CURRENT_SESSION =&gt; FALSE);
END;
/
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
It is not necessary to call <code dir="ltr">RUN_JOB</code> to run a job according to its schedule. Provided that job is enabled, the Scheduler runs it automatically.</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1019785"></a>
<div id="ADMIN12399" class="sect2">
<h3 class="sect2">Stop<a id="sthref3013"></a><a id="sthref3014"></a>ping Jobs</h3>
<p>You stop one or more running jobs using the <code dir="ltr">STOP_JOB</code> procedure or Enterprise Manager. <code dir="ltr">STOP_JOB</code> accepts a comma-delimited list of jobs, job classes, and job destination IDs. A <a id="sthref3015"></a><span class="bold">job destination ID</span> is a number, assigned by the Scheduler, that represents a unique combination of a job, a credential, and a destination. It serves as a convenient method for identifying a particular child job of a multiple-destination job and for stopping just that child. You obtain the job destination ID for a child job from the <code dir="ltr">*_SCHEDULER_JOB_DESTS</code> views.</p>
<p>If a job class is supplied, all running jobs in the job class are stopped. For example, the following statement stops job <code dir="ltr">job1</code>, all jobs in the job class <code dir="ltr">dw_jobs</code>, and two child jobs of a multiple-destination job:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.STOP_JOB('job1, sys.dw_jobs, 984, 1223');
END;
/
</pre>
<p>All instances of the designated jobs are stopped. After stopping a job, the state of a one-time job is set to <code dir="ltr">STOPPED</code>, and the state of a repeating job is set to <code dir="ltr">SCHEDULED</code> (because the next run of the job is scheduled). In addition, an entry is made in the job log with <code dir="ltr">OPERATION</code> set to '<code dir="ltr">STOPPED</code>', and <code dir="ltr">ADDITIONAL_INFO</code> set to '<code dir="ltr">REASON="Stop job called by user:</code> <code dir="ltr"><span class="codeinlineitalic">username"</span></code>'.</p>
<p>By default, the Scheduler tries to gracefully stop a job using an interrupt mechanism. This method gives control back to the slave process, which can collect statistics of the job run. If the <code dir="ltr">force</code> option is set to <code dir="ltr">TRUE</code>, the job is abruptly terminated and certain run-time statistics might not be available for the job run.</p>
<p>Stopping a job that is running a chain automatically stops all running steps (by calling <code dir="ltr">STOP_JOB</code> with the <code dir="ltr">force</code> option set to <code dir="ltr">TRUE</code> on each step).</p>
<p>You can use the <code dir="ltr">commit_semantics</code> argument of <code dir="ltr">STOP_JOB</code> to control the outcome if multiple jobs are specified and errors occur when trying to stop one or more jobs. If you set this argument to <code dir="ltr">ABSORB_ERRORS</code>, the procedure may be able to continue after encountering an error and attempt to stop the remaining jobs. If the procedure indicates that errors occurred, you can query the view <code dir="ltr">SCHEDULER_BATCH_ERRORS</code> to determine the nature of the errors. See <a href="#i1009723">"Dropping Jobs"</a> for a more detailed discussion of commit semantics.</p>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">STOP_JOB</code> procedure.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
When a job is stopped, only the current transaction is rolled back. This can cause data inconsistency.</div>
<a id="CHDFIBJF"></a>
<div id="ADMIN12400" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Stopping External Jobs</h4>
<p>The Scheduler offers implementors of external jobs a mechanism to gracefully clean up after their external jobs when <code dir="ltr">STOP_JOB</code> is called with <code dir="ltr">force</code> set to <code dir="ltr">FALSE</code>. The following applies only to local external jobs created without credentials on any platform, and remote external jobs on the UNIX and Linux platforms.</p>
<p>On UNIX and Linux, a <code dir="ltr">SIGTERM</code> signal is sent to the process launched by the Scheduler. The implementor of the external job is expected to trap the <code dir="ltr">SIGTERM</code> in an interrupt handler, clean up whatever work the job has done, and exit. On Windows, <code dir="ltr">STOP_JOB</code> with <code dir="ltr">force</code> set to <code dir="ltr">FALSE</code> is supported only on Windows XP, Windows 2003, and later operating systems. On those platforms, the process launched by the Scheduler is a console process. To stop it, the Scheduler sends a <code dir="ltr">CTRL-BREAK</code> to the process. The <code dir="ltr">CTRL_BREAK</code> can be handled by registering a handler with the <code dir="ltr">SetConsoleCtrlHandler()</code> routine.</p>
</div>
<!-- class="sect3" -->
<div id="ADMIN12674" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref3016"></a>
<h4 class="sect3">Stopping a Chain Job</h4>
<p>If a job pointing to a chain is stopped, all steps of the running chain that are running are stopped.</p>
<p>See <a href="#CHDDBCCJ">"Stopping Individual Chain Steps"</a> for information about stopping individual chain steps.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1009723"></a>
<div id="ADMIN12401" class="sect2">
<h3 class="sect2">Droppi<a id="sthref3017"></a><a id="sthref3018"></a>ng Jobs</h3>
<p>You drop one or more jobs using the <code dir="ltr">DROP_JOB</code> procedure or Enterprise Manager. <code dir="ltr">DROP_JOB</code> accepts a comma-delimited list of jobs and job classes. If a job class is supplied, all jobs in the job class are dropped, although the job class itself is not dropped. (The <code dir="ltr">DROP_JOB_CLASS</code> procedure should be used to drop a job class. See <a href="#i1011997">"Dropping Job Classes"</a> for information about how to drop job classes.) You cannot use job destination IDs with <code dir="ltr">DROP_JOB</code> to drop a child job of a multiple-destination job.</p>
<p>The following statement drops jobs <code dir="ltr">job1</code> and <code dir="ltr">job3</code>, and all jobs in job classes <code dir="ltr">jobclass1</code> and <code dir="ltr">jobclass2</code>:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.DROP_JOB ('job1, job3, sys.jobclass1, sys.jobclass2');
END;
/
</pre>
<p>If a job is running at the time of the procedure call, the attempt to drop the job fails. You can modify this default behavior by setting either the <code dir="ltr">force</code> or <code dir="ltr">defer</code> option.</p>
<p>When you set the <code dir="ltr">force</code> option to <code dir="ltr">TRUE</code>, the Scheduler first attempts to stop the running job by using an interrupt mechanism&mdash;calling <code dir="ltr">STOP_JOB</code> with the <code dir="ltr">force</code> option set to <code dir="ltr">FALSE</code>. If the job is successfully stopped, the job is then dropped. Alternatively, you can call <code dir="ltr">STOP_JOB</code> to first stop the job and then call <code dir="ltr">DROP_JOB</code>. If <code dir="ltr">STOP_JOB</code> fails, you can call <code dir="ltr">STOP_JOB</code> with the <code dir="ltr">force</code> option, provided you have the <code dir="ltr">MANAGE SCHEDULER</code> privilege. You can then drop the job. By default, <code dir="ltr">force</code> is set to <code dir="ltr">FALSE</code> for both the <code dir="ltr">STOP_JOB</code> and <code dir="ltr">DROP_JOB</code> procedures.</p>
<p>When you set the <code dir="ltr">defer</code> option to <code dir="ltr">TRUE</code>, the running job is allowed to complete and is then dropped. The <code dir="ltr">force</code> and <code dir="ltr">defer</code> options are mutually exclusive; setting both results in an error.</p>
<p>When you specify multiple jobs to drop, the <code dir="ltr">commit_semantics</code> argument determines the outcome when an error occurs on one of the jobs. The following are the possible values for this argument:</p>
<ul>
<li>
<p><code dir="ltr">STOP_ON_FIRST_ERROR</code>, the default&mdash;The call returns on the first error and the previous drop operations that were successful are committed to disk.</p>
</li>
<li>
<p><code dir="ltr">TRANSACTIONAL</code>&mdash;The call returns on the first error and the previous drop operations before the error are rolled back. <code dir="ltr">force</code> must be <code dir="ltr">FALSE</code>.</p>
</li>
<li>
<p><code dir="ltr">ABSORB_ERRORS</code>&mdash;The call tries to absorb any errors, attempts to drop the rest of the jobs, and commits all the drops that were successful.</p>
</li>
</ul>
<p>Setting <code dir="ltr">commit_semantics</code> is valid only when no job classes are included in the <code dir="ltr">job_name</code> list. When you include job classes, default commit semantics (<code dir="ltr">STOP_ON_FIRST_ERROR</code>) are in effect.</p>
<p>The following example drops the jobs <code dir="ltr">myjob1</code> and <code dir="ltr">myjob2</code> with the <code dir="ltr">defer</code> option and with transactional commit semantics:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.DROP_JOB(
     job_name         =&gt; 'myjob1, myjob2',
     defer            =&gt; TRUE,
     commit_semantics =&gt; 'TRANSACTIONAL');
END;
/
</pre>
<p>This next example illustrates the <code dir="ltr">ABSORB_ERRORS</code> commit semantics. Assume that <code dir="ltr">myjob1</code> is running when the procedure is called and that <code dir="ltr">myjob2</code> is not.</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.DROP_JOB(
     job_name         =&gt; 'myjob1, myjob2',
     commit_semantics =&gt; 'ABSORB_ERRORS');
END;
/
Error report:
ORA-27362: batch API call completed with errors
</pre>
<p>You can query the view <a id="sthref3019"></a><code dir="ltr">SCHEDULER_BATCH_ERRORS</code> to determine the nature of the errors.</p>
<pre dir="ltr">
SELECT object_name, error_code, error_message FROM scheduler_batch_errors;

OBJECT_NAME    ERROR CODE ERROR_MESSAGE
-------------- ---------- ---------------------------------------------------
STEVE.MYJOB1        27478 "ORA-27478: job "STEVE.MYJOB1" is running
</pre>
<p>Checking <code dir="ltr">USER_SCHEDULER_JOBS</code>, you would find that <code dir="ltr">myjob2</code> was successfully dropped and that <code dir="ltr">myjob1</code> is still present.</p>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">DROP_JOB</code> procedure.</p>
</div>
<!-- class="sect2" -->
<a id="i1009724"></a>
<div id="ADMIN12402" class="sect2">
<h3 class="sect2">Disabli<a id="sthref3020"></a><a id="sthref3021"></a>ng Jobs</h3>
<p>You disable one or more jobs using the <code dir="ltr">DISABLE</code> procedure or Enterprise Manager. A job can also become disabled for other reasons. For example, a job will be disabled when the job class it belongs to is dropped. A job is also disabled if either the program or the schedule that it points to is dropped. Note that if the program or schedule that the job points to is disabled, the job will not be disabled and will therefore result in an error when the Scheduler tries to run the job.</p>
<p>Disabling a job means that, although the metadata of the job is there, it should not run and the job coordinator will not pick up these jobs for processing. When a job is disabled, its <code dir="ltr">state</code> in the job table is changed to <code dir="ltr">disabled</code>.</p>
<p>When a job is disabled with the <code dir="ltr">force</code> option set to <code dir="ltr">FALSE</code> and the job is currently running, an error is returned. When <code dir="ltr">force</code> is set to <code dir="ltr">TRUE</code>, the job is disabled, but the currently running instance is allowed to finish.</p>
<p>If <code dir="ltr">commit_semantics</code> is set to <code dir="ltr">STOP_ON_FIRST_ERROR</code>, then the call returns on the first error and the previous disable operations that were successful are committed to disk. If <code dir="ltr">commit_semantics</code> is set to <code dir="ltr">TRANSACTIONAL</code> and <code dir="ltr">force</code> is set to <code dir="ltr">FALSE</code>, then the call returns on the first error and the previous disable operations before the error are rolled back. If <code dir="ltr">commit_semantics</code> is set to <code dir="ltr">ABSORB_ERRORS</code>, then the call tries to absorb any errors and attempts to disable the rest of the jobs and commits all the disable operations that were successful. If the procedure indicates that errors occurred, you can query the view <code dir="ltr">SCHEDULER_BATCH_ERRORS</code> to determine the nature of the errors.</p>
<p>By default, <code dir="ltr">commit_semantics</code> is set to <code dir="ltr">STOP_ON_FIRST_ERROR</code>.</p>
<p>You can also disable several jobs in one call by providing a comma-delimited list of job names or job class names to the <code dir="ltr">DISABLE</code> procedure call. For example, the following statement combines jobs with job classes:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.DISABLE('job1, job2, job3, sys.jobclass1, sys.jobclass2');
END;
/
</pre>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">DISABLE</code> procedure.</p>
</div>
<!-- class="sect2" -->
<a id="i1009725"></a>
<div id="ADMIN12403" class="sect2">
<h3 class="sect2">Enab<a id="sthref3022"></a><a id="sthref3023"></a>ling Jobs</h3>
<p>You enable one or more jobs by using the <code dir="ltr">ENABLE</code> procedure or Enterprise Manager. The effect of using this procedure is that the job will now be picked up by the job coordinator for processing. Jobs are created disabled by default, so you must enable them before they can run. When a job is enabled, a validity check is performed. If the check fails, the job is not enabled.</p>
<p>If you enable a disabled job, it begins to run immediately according to its schedule. Enabling a disabled job also resets the job <code dir="ltr">RUN_COUNT</code>, <code dir="ltr">FAILURE_COUNT</code>, and <code dir="ltr">RETRY_COUNT</code> attributes.</p>
<p>If <code dir="ltr">commit_semantics</code> is set to <code dir="ltr">STOP_ON_FIRST_ERROR</code>, then the call returns on the first error and the previous enable operations that were successful are committed to disk. If <code dir="ltr">commit_semantics</code> is set to <code dir="ltr">TRANSACTIONAL</code>, then the call returns on the first error and the previous enable operations before the error are rolled back. If <code dir="ltr">commit_semantics</code> is set to <code dir="ltr">ABSORB_ERRORS</code>, then the call tries to absorb any errors and attempts to enable the rest of the jobs and commits all the enable operations that were successful. If the procedure indicates that errors occurred, you can query the view <code dir="ltr">SCHEDULER_BATCH_ERRORS</code> to determine the nature of the errors.</p>
<p>By default, <code dir="ltr">commit_semantics</code> is set to <code dir="ltr">STOP_ON_FIRST_ERROR</code>.</p>
<p>You can enable several jobs in one call by providing a comma-delimited list of job names or job class names to the <code dir="ltr">ENABLE</code> procedure call. For example, the following statement combines jobs with job classes:</p>
<pre dir="ltr">
BEGIN
 DBMS_SCHEDULER.ENABLE ('job1, job2, job3, 
   sys.jobclass1, sys.jobclass2, sys.jobclass3');
END;
/
</pre>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">ENABLE</code> procedure.</p>
</div>
<!-- class="sect2" -->
<a id="i1021521"></a>
<div id="ADMIN12391" class="sect2">
<h3 class="sect2">Copyin<a id="sthref3024"></a><a id="sthref3025"></a>g Jobs</h3>
<p>You copy a job using the <code dir="ltr">COPY_JOB</code> procedure or Enterprise Manager. This call copies all the attributes of the old job to the new job (except job name). The new job is created disabled.</p>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">COPY_JOB</code> procedure.</p>
</div>
<!-- class="sect2" -->
<a id="CHDHJIDC"></a>
<div id="ADMIN12675" class="sect2">
<h3 class="sect2">Viewing std<a id="sthref3026"></a>out and stde<a id="sthref3027"></a><a id="sthref3028"></a><a id="sthref3029"></a><a id="sthref3030"></a><a id="sthref3031"></a>rr for External Jobs</h3>
<p>External jobs with credentials write stdout and stderr to log files. Local external jobs write to log files in the directory <span class="italic">ORACLE_HOME</span>/scheduler/log. Remote external jobs write to log files in the directory <span class="italic">AGENT_HOME</span>/data/log. You can retrieve the contents of these files with <code dir="ltr">DBMS_SCHEDULER.GET_FILE</code>. File names consist of the string "_stdout" or "_stderr" appended to a job log ID. You obtain the job log ID for a job by querying the <code dir="ltr">ADDITIONAL_INFO</code> column of the <code dir="ltr">*_SCHEDULER_JOB_RUN_DETAILS</code> views and parsing for a name/value pair that looks similar to this:</p>
<pre dir="ltr">
EXTERNAL_LOG_ID="job_71035_3158"
</pre>
<p>An example file name is job_71035_3158_stdout. <a href="#CHDIDGAE">Example 29-8, "Creating a Local External Job and Retrieving stdout"</a> illustrates how to retrieve stdout output. Although this example is for a local external job, the method is the same for remote external jobs.</p>
<p>In addition, when a local external job or remote external job writes output to <code dir="ltr">stderr</code>, the first 200 bytes are recorded in the <code dir="ltr">ADDITIONAL_INFO</code> column of the <code dir="ltr">*_SCHEDULER_JOB_RUN_DETAILS</code> views. The information is in a name/value pair that looks like this:</p>
<pre dir="ltr">
STANDARD_ERROR="<span class="italic">text</span>"
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr">ADDITIONAL_INFO</code> column can have multiple name/value pairs. The order is indeterminate, so you must parse the field to locate the <code dir="ltr">STANDARD_ERROR</code> name/value pair.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about <code dir="ltr">DBMS_SCHEDULER.GET_FILE</code></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1022811"></a>
<div id="ADMIN12404" class="sect1">
<h2 class="sect1">Creating and Managing Programs to Define Jobs<a id="sthref3032"></a></h2>
<p>A program is a collection of metadata about a particular task. You optionally use a program to help define a job. This section introduces you to basic program tasks, and discusses the following topics:</p>
<ul>
<li>
<p><a href="#i1022839">Program Tasks and Their Procedures</a></p>
</li>
<li>
<p><a href="#i1022890">Creating Programs</a></p>
</li>
<li>
<p><a href="#i1022924">Altering Programs</a></p>
</li>
<li>
<p><a href="#i1022932">Dropping Programs</a></p>
</li>
<li>
<p><a href="#i1022939">Disabling Programs</a></p>
</li>
<li>
<p><a href="#i1022948">Enabling Programs</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="schedover.htm#i1106287">"Programs"</a> for an overview of programs.</div>
<a id="i1022839"></a>
<div id="ADMIN12405" class="sect2">
<h3 class="sect2">Program Tasks and Their Procedures</h3>
<p><a href="#g1033899">Table 29-3</a> illustrates common program tasks and their appropriate procedures and privileges:</p>
<div id="ADMIN13097" class="tblformal">
<p class="titleintable"><a id="sthref3033"></a><a id="g1033899"></a>Table 29-3 Program Tasks and Their Procedures</p>
<table class="cellalignment1338" title="Program Tasks and Their Procedures" summary="Column 1 lists some common program tasks; column 2 displays the procedure that will perform the task; column 3 lists the privileges required to perform the task." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t26">Task</th>
<th class="cellalignment1334" id="r1c2-t26">Procedure</th>
<th class="cellalignment1334" id="r1c3-t26">Privilege Needed</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t26" headers="r1c1-t26">
<p>Create a program</p>
</td>
<td class="cellalignment1335" headers="r2c1-t26 r1c2-t26">
<p><code dir="ltr">CREATE_PROGRAM</code></p>
</td>
<td class="cellalignment1335" headers="r2c1-t26 r1c3-t26">
<p><code dir="ltr">CREATE</code> <code dir="ltr">JOB</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t26" headers="r1c1-t26">
<p>Alter a program</p>
</td>
<td class="cellalignment1335" headers="r3c1-t26 r1c2-t26">
<p><code dir="ltr">SET_ATTRIBUTE</code></p>
</td>
<td class="cellalignment1335" headers="r3c1-t26 r1c3-t26">
<p><code dir="ltr">ALTER</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t26" headers="r1c1-t26">
<p>Drop a program</p>
</td>
<td class="cellalignment1335" headers="r4c1-t26 r1c2-t26">
<p><code dir="ltr">DROP_PROGRAM</code></p>
</td>
<td class="cellalignment1335" headers="r4c1-t26 r1c3-t26">
<p><code dir="ltr">ALTER</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t26" headers="r1c1-t26">
<p>Disable a program</p>
</td>
<td class="cellalignment1335" headers="r5c1-t26 r1c2-t26">
<p><code dir="ltr">DISABLE</code></p>
</td>
<td class="cellalignment1335" headers="r5c1-t26 r1c3-t26">
<p><code dir="ltr">ALTER</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r6c1-t26" headers="r1c1-t26">
<p>Enable a program</p>
</td>
<td class="cellalignment1335" headers="r6c1-t26 r1c2-t26">
<p><code dir="ltr">ENABLE</code></p>
</td>
<td class="cellalignment1335" headers="r6c1-t26 r1c3-t26">
<p><code dir="ltr">ALTER</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>See <a href="schedadmin.htm#i1011204">"Scheduler Privileges"</a> for further information regarding privileges.</p>
</div>
<!-- class="sect2" -->
<a id="i1022890"></a>
<div id="ADMIN12406" class="sect2">
<h3 class="sect2">Creating Pro<a id="sthref3034"></a><a id="sthref3035"></a>grams</h3>
<p>You create programs by using the <code dir="ltr">CREATE_PROGRAM</code> procedure or Enterprise Manager. By default, programs are created in the schema of the creator. To create a program in another user's schema, you must qualify the program name with the schema name. For other users to use your programs, they must have <code dir="ltr">EXECUTE</code> privileges on the program, therefore, once a program has been created, you have to grant the <code dir="ltr">EXECUTE</code> privilege on it. An example of creating a program is the following, which creates a program called <code dir="ltr">my_program1</code>:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_PROGRAM (
   program_name           =&gt; 'my_program1',
   program_action         =&gt; '/usr/local/bin/date',
   program_type           =&gt; 'EXECUTABLE',
   comments               =&gt; 'My comments here');
END;
/
</pre>
<p>Programs are created in the disabled state by default; you must enable them before you can enable jobs that point to them.</p>
<p>Do not attempt to enable a program that requires arguments before you define all program arguments, which you must do in a <code dir="ltr">DEFINE_</code><code dir="ltr"><span class="codeinlineitalic">XXX</span></code><code dir="ltr">_ARGUMENT</code> procedure as described in <a href="#CHDIGJED">"Defining Program Arguments"</a>.</p>
<a id="CHDIGJED"></a>
<div id="ADMIN12407" class="sect3">
<h4 class="sect3">Defining Program Arguments</h4>
<p>After creating a program, you can define program arguments. Arguments are defined by position in the calling sequence, with an optional argument name and optional default value. If no default value is defined for a program argument, the job that references the program must supply an argument value. (The job can also override a default value.) All argument values must be defined before the job can be enabled.</p>
<p>To set program argument values, use the <code dir="ltr">DEFINE_PROGRAM_ARGUMENT</code> or <code dir="ltr">DEFINE_ANYDATA_ARGUMENT</code> procedures. <code dir="ltr">DEFINE_ANYDATA_ARGUMENT</code> is used for complex types that must be encapsulated in an <code dir="ltr">ANYDATA</code> object. An example of a program that might need arguments is one that starts a reporting program that requires a start date and end date. The following code example sets the end date argument, which is the second argument expected by the reporting program. The example also assigns a name to the argument so that you can refer to the argument by name (instead of position) from other package procedures, including <code dir="ltr">SET_JOB_ANYDATA_VALUE</code> and <code dir="ltr">SET_JOB_ARGUMENT_VALUE</code>.</p>
<pre dir="ltr">
BEGIN
 DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT (
   program_name            =&gt; 'operations_reporting',
   argument_position       =&gt; 2,
   argument_name           =&gt; 'end_date',
   argument_type           =&gt; 'VARCHAR2',
   default_value           =&gt; '12-DEC-03');
END;
/
</pre>
<p>Valid values for the <code dir="ltr">argument_type</code> argument are only SQL data types, therefore booleans are not supported. For external executables, only string types such as <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code> are permitted.</p>
<p>You can drop a program argument either by name or by position, as in the following:</p>
<pre dir="ltr">
BEGIN
 DBMS_SCHEDULER.DROP_PROGRAM_ARGUMENT (
   program_name            =&gt; 'operations_reporting',
   argument_position       =&gt; 2);

 DBMS_SCHEDULER.DROP_PROGRAM_ARGUMENT (
   program_name            =&gt; 'operations_reporting',
   argument_name           =&gt; 'end_date');
END;
/
</pre>
<p>In some special cases, program logic is dependent on the Scheduler environment. The Scheduler has some predefined metadata arguments that can be passed as an argument to the program for this purpose. For example, for some jobs whose schedule is a window name, it is useful to know how much longer the window will be open when the job is started. This is possible by defining the window end time as a metadata argument to the program.</p>
<p>If a program needs access to specific job metadata, you can define a special metadata argument using the <code dir="ltr">DEFINE_METADATA_ARGUMENT</code> procedure, so values will be filled in by the Scheduler when the program is executed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025412">"Setting Job Arguments"</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1022924"></a>
<div id="ADMIN12408" class="sect2">
<h3 class="sect2">Altering Pr<a id="sthref3036"></a><a id="sthref3037"></a>ograms</h3>
<p>You alter a program by modifying its attributes. You can use Enterprise Manager or the <code dir="ltr">DBMS_SCHEDULER.SET_ATTRIBUTE</code> and <code dir="ltr">DBMS_SCHEDULER.SET_ATTRIBUTE_NULL</code> package procedures to alter programs. See the <code dir="ltr">DBMS_SCHEDULER.CREATE_PROGRAM</code> procedure in <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for details on program attributes.</p>
<p>If any currently running jobs use the program that you altered, they continue to run with the program as defined before the alter operation.</p>
<p>The following example changes the executable that program <code dir="ltr">my_program1</code> runs:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.SET_ATTRIBUTE (
   name           =&gt; 'my_program1',
   attribute      =&gt; 'program_action',
   value          =&gt; '/usr/local/bin/salesreports1');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="i1022932"></a>
<div id="ADMIN12409" class="sect2">
<h3 class="sect2">Dropping<a id="sthref3038"></a><a id="sthref3039"></a> Programs</h3>
<p>You drop one or more programs using the <code dir="ltr">DROP_PROGRAM</code> procedure or Enterprise Manager.</p>
<p>Running jobs that point to the program are not affected by the <code dir="ltr">DROP_PROGRAM</code> call, and are allowed to continue. Any arguments that pertain to the program are also dropped when the program is dropped. You can drop several programs in one call by providing a comma-delimited list of program names. For example, the following statement drops three programs:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.DROP_PROGRAM('program1, program2, program3');
END;
/
</pre>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">DROP_PROGRAM</code> procedure.</p>
</div>
<!-- class="sect2" -->
<a id="i1022939"></a>
<div id="ADMIN12410" class="sect2">
<h3 class="sect2">Disabling P<a id="sthref3040"></a><a id="sthref3041"></a>rograms</h3>
<p>You disable one or more programs using the <code dir="ltr">DISABLE</code> procedure or Enterprise Manager. When a program is disabled, the status is changed to <code dir="ltr">disabled</code>. A disabled program implies that, although the metadata is still there, jobs that point to this program cannot run.</p>
<p>Running jobs that point to the program are not affected by the <code dir="ltr">DISABLE</code> call, and are allowed to continue. Any argument that pertains to the program will not be affected when the program is disabled.</p>
<p>A program can also become disabled for other reasons. For example, if a program argument is dropped or <code dir="ltr">number_of_arguments</code> is changed so that all arguments are no longer defined.</p>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">DISABLE</code> procedure.</p>
</div>
<!-- class="sect2" -->
<a id="i1022948"></a>
<div id="ADMIN12411" class="sect2">
<h3 class="sect2">Enabling Pro<a id="sthref3042"></a><a id="sthref3043"></a>grams</h3>
<p>You enable one or more programs using the <code dir="ltr">ENABLE</code> procedure or Enterprise Manager. When a program is enabled, the enabled flag is set to <code dir="ltr">TRUE</code>. Programs are created disabled by default, therefore, you have to enable them before you can enable jobs that point to them. Before programs are enabled, validity checks are performed to ensure that the action is valid and that all arguments are defined.</p>
<p>You can enable several programs in one call by providing a comma-delimited list of program names to the <code dir="ltr">ENABLE</code> procedure call. For example, the following statement enables three programs:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.ENABLE('program1, program2, program3');
END;
/
</pre>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">ENABLE</code> procedure.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1022969"></a>
<div id="ADMIN12412" class="sect1">
<h2 class="sect1">Creating and Managing Schedules to Define Jobs<a id="sthref3044"></a></h2>
<p>You optionally use a schedule object (a schedule) to define when a job should be run. Schedules can be shared among users by creating and saving them as objects in the database.</p>
<p>This section introduces you to basic schedule tasks, and discusses the following topics:</p>
<ul>
<li>
<p><a href="#i1022989">Schedule Tasks and Their Procedures</a></p>
</li>
<li>
<p><a href="#i1023028">Creating Schedules</a></p>
</li>
<li>
<p><a href="#i1023058">Altering Schedules</a></p>
</li>
<li>
<p><a href="#i1023066">Dropping Schedules</a></p>
</li>
<li>
<p><a href="#i1023312">Setting the Repeat Interval</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="schedover.htm#i1106296">"Schedules"</a> for an overview of schedules.</p>
</li>
<li>
<p><a href="#i1010604">"Managing Job Scheduling and Job Priorities with Windows"</a> and <a href="#i1011367">"Managing Job Scheduling and Job Priorities with Window Groups"</a> for a method of scheduling jobs while managing job resource utilization</p>
</li>
</ul>
</div>
<a id="i1022989"></a>
<div id="ADMIN12413" class="sect2">
<h3 class="sect2">Schedule Tasks and Their Procedures</h3>
<p><a href="#g1033935">Table 29-4</a> illustrates common schedule tasks and the procedures you use to handle them.</p>
<div id="ADMIN13098" class="tblformal">
<p class="titleintable"><a id="sthref3045"></a><a id="g1033935"></a>Table 29-4 Schedule Tasks and Their Procedures</p>
<table class="cellalignment1338" title="Schedule Tasks and Their Procedures" summary="Column 1 liss some common schedule tasks; column 2 displays the procedure that will perform the task; column 3 list the privileges required for the task." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t29">Task</th>
<th class="cellalignment1334" id="r1c2-t29">Procedure</th>
<th class="cellalignment1334" id="r1c3-t29">Privilege Needed</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t29" headers="r1c1-t29">
<p>Create a schedule</p>
</td>
<td class="cellalignment1335" headers="r2c1-t29 r1c2-t29">
<p><code dir="ltr">CREATE_SCHEDULE</code></p>
</td>
<td class="cellalignment1335" headers="r2c1-t29 r1c3-t29">
<p><code dir="ltr">CREATE</code> <code dir="ltr">JOB</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t29" headers="r1c1-t29">
<p>Alter a schedule</p>
</td>
<td class="cellalignment1335" headers="r3c1-t29 r1c2-t29">
<p><code dir="ltr">SET_ATTRIBUTE</code></p>
</td>
<td class="cellalignment1335" headers="r3c1-t29 r1c3-t29">
<p><code dir="ltr">ALTER</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t29" headers="r1c1-t29">
<p>Drop a schedule</p>
</td>
<td class="cellalignment1335" headers="r4c1-t29 r1c2-t29">
<p><code dir="ltr">DROP_SCHEDULE</code></p>
</td>
<td class="cellalignment1335" headers="r4c1-t29 r1c3-t29">
<p><code dir="ltr">ALTER</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or be the owner</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>See <a href="schedadmin.htm#i1011204">"Scheduler Privileges"</a> for further information regarding privileges.</p>
</div>
<!-- class="sect2" -->
<a id="i1023028"></a>
<div id="ADMIN12414" class="sect2">
<h3 class="sect2">Creating Sche<a id="sthref3046"></a><a id="sthref3047"></a>dules</h3>
<p>You create schedules by using the <code dir="ltr">CREATE_SCHEDULE</code> procedure or Enterprise Manager. Schedules are created in the schema of the user creating the schedule, and are enabled when first created. You can create a schedule in another user's schema. Once a schedule has been created, it can be used by other users. The schedule is created with access to <code dir="ltr">PUBLIC</code>. Therefore, there is no need to explicitly grant access to the schedule. An example of creating a schedule is the following statement:</p>
<pre dir="ltr">
BEGIN
 DBMS_SCHEDULER.CREATE_SCHEDULE (
  schedule_name     =&gt; 'my_stats_schedule',
  start_date        =&gt; SYSTIMESTAMP,
  end_date          =&gt; SYSTIMESTAMP + INTERVAL '30' day,
  repeat_interval   =&gt; 'FREQ=HOURLY; INTERVAL=4',
  comments          =&gt; 'Every 4 hours');
END;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">CREATE_SCHEDULE</code> procedure.</p>
</li>
<li>
<p><a href="#CHDGGCJE">"Creating an Event Schedule"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i1023058"></a>
<div id="ADMIN12415" class="sect2">
<h3 class="sect2">Altering Sc<a id="sthref3048"></a><a id="sthref3049"></a>hedules</h3>
<p>You alter a schedule by using the <code dir="ltr">SET_ATTRIBUTE</code> and <code dir="ltr">SET_ATTRIBUTE_NULL</code> package procedures or Enterprise Manager. Altering a schedule changes the definition of the schedule. With the exception of schedule name, all attributes can be changed. The attributes of a schedule are available in the <code dir="ltr">*_SCHEDULER_SCHEDULES</code> views.</p>
<p>If a schedule is altered, the change will not affect running jobs and open windows that use this schedule. The change will only be in effect the next time the jobs runs or the window opens.</p>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">SET_ATTRIBUTE</code> procedure.</p>
</div>
<!-- class="sect2" -->
<a id="i1023066"></a>
<div id="ADMIN12416" class="sect2">
<h3 class="sect2">Droppi<a id="sthref3050"></a><a id="sthref3051"></a>ng Schedules</h3>
<p>You drop a schedule using the <code dir="ltr">DROP_SCHEDULE</code> procedure or Enterprise Manager. This procedure call will delete the schedule object from the database.</p>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">DROP_SCHEDULE</code> procedure.</p>
</div>
<!-- class="sect2" -->
<a id="i1023312"></a>
<div id="ADMIN10040" class="sect2">
<h3 class="sect2">Setting the Repe<a id="sthref3052"></a>at Interval</h3>
<p>You control when and how often a job repeats by setting the <code dir="ltr">repeat_interval</code> attribute of the job itself or of the named schedule that the job references. You can set <code dir="ltr">repeat_interval</code> with <code dir="ltr">DBMS_SCHEDULER</code> package procedures or with Enterprise Manager.</p>
<p>The result of evaluating the <code dir="ltr">repeat_interval</code> is a set of timestamps. The Scheduler runs the job at each timestamp. Note that the start date from the job or schedule also helps determine the resulting set of timestamps. (See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about <code dir="ltr">repeat_interval</code> evaluation.) If no value for <code dir="ltr">repeat_interval</code> is specified, the job runs only once at the specified start date.</p>
<p>Immediately after a job is started, the <code dir="ltr">repeat_interval</code> is evaluated to determine the next scheduled execution time of the job. The next scheduled execution time might arrive while the job is still running. A new instance of the job, however, will not be started until the current one completes.</p>
<p>There are two ways to specify the repeat interval:</p>
<ul>
<li>
<p><a href="#i1023132">Using the Scheduler Calendaring Syntax</a></p>
</li>
<li>
<p><a href="#i1023479">Using a PL/SQL Expression</a></p>
</li>
</ul>
<a id="i1023132"></a>
<div id="ADMIN12417" class="sect3">
<h4 class="sect3">Using the Scheduler Calendaring Syntax<a id="sthref3053"></a><a id="sthref3054"></a></h4>
<p>The primary method of setting how often a job will repeat is by setting the <code dir="ltr">repeat_interval</code> attribute with a Scheduler calendaring expression. See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for a detailed description of the calendaring syntax for <code dir="ltr">repeat_interval</code> as well as the <code dir="ltr">CREATE_SCHEDULE</code> procedure.</p>
<p class="subhead2"><a id="ADMIN12676"></a>Examples of Cal<a id="sthref3055"></a><a id="sthref3056"></a>endaring Expressions</p>
<p>The following examples illustrate simple repeat intervals. For simplicity, it is assumed that there is no contribution to the evaluation results by the start date.</p>
<p>Run every Friday. (All three examples are equivalent.)</p>
<pre dir="ltr">
FREQ=DAILY; BYDAY=FRI;
FREQ=WEEKLY; BYDAY=FRI;
FREQ=YEARLY; BYDAY=FRI;
</pre>
<p>Run every other Friday.</p>
<pre dir="ltr">
FREQ=WEEKLY; INTERVAL=2; BYDAY=FRI;
</pre>
<p>Run on the last day of every month.</p>
<pre dir="ltr">
FREQ=MONTHLY; BYMONTHDAY=-1;
</pre>
<p>Run on the next to last day of every month.</p>
<pre dir="ltr">
FREQ=MONTHLY; BYMONTHDAY=-2;
</pre>
<p>Run on March 10th. (Both examples are equivalent)</p>
<pre dir="ltr">
FREQ=YEARLY; BYMONTH=MAR; BYMONTHDAY=10;
FREQ=YEARLY; BYDATE=0310;
</pre>
<p>Run every 10 days.</p>
<pre dir="ltr">
FREQ=DAILY; INTERVAL=10;
</pre>
<p>Run daily at 4, 5, and 6PM.</p>
<pre dir="ltr">
FREQ=DAILY; BYHOUR=16,17,18;
</pre>
<p>Run on the 15th day of every other month.</p>
<pre dir="ltr">
FREQ=MONTHLY; INTERVAL=2; BYMONTHDAY=15;
</pre>
<p>Run on the 29th day of every month.</p>
<pre dir="ltr">
FREQ=MONTHLY; BYMONTHDAY=29;
</pre>
<p>Run on the second Wednesday of each month.</p>
<pre dir="ltr">
FREQ=MONTHLY; BYDAY=2WED;
</pre>
<p>Run on the last Friday of the year.</p>
<pre dir="ltr">
FREQ=YEARLY; BYDAY=-1FRI;
</pre>
<p>Run every 50 hours.</p>
<pre dir="ltr">
FREQ=HOURLY; INTERVAL=50;
</pre>
<p>Run on the last day of every other month.</p>
<pre dir="ltr">
FREQ=MONTHLY; INTERVAL=2; BYMONTHDAY=-1;
</pre>
<p>Run hourly for the first three days of every month.</p>
<pre dir="ltr">
FREQ=HOURLY; BYMONTHDAY=1,2,3;
</pre>
<p>Here are some more complex repeat intervals:</p>
<p>Run on the last workday of every month (assuming that workdays are Monday through Friday).</p>
<pre dir="ltr">
FREQ=MONTHLY; BYDAY=MON,TUE,WED,THU,FRI; BYSETPOS=-1
</pre>
<p>Run on the last workday of every month, excluding company holidays. (This example references an existing named schedule called <code dir="ltr">Company_Holidays</code>.)</p>
<pre dir="ltr">
FREQ=MONTHLY; BYDAY=MON,TUE,WED,THU,FRI; EXCLUDE=Company_Holidays; BYSETPOS=-1
</pre>
<p>Run at noon every Friday and on company holidays.</p>
<pre dir="ltr">
FREQ=YEARLY;BYDAY=FRI;BYHOUR=12;INCLUDE=Company_Holidays
</pre>
<p>Run on these three holidays: July 4th, Memorial Day, and Labor Day. (This example references three existing named schedules&mdash;<code dir="ltr">JUL4</code>, <code dir="ltr">MEM</code>, and <code dir="ltr">LAB</code>&mdash;where each defines a single date corresponding to a holiday.)</p>
<pre dir="ltr">
JUL4,MEM,LAB
</pre>
<p class="subhead2"><a id="ADMIN12677"></a>Examples of Calendaring Expression Evaluation</p>
<p>A repeat interval of "<code dir="ltr">FREQ=MINUTELY;INTERVAL=2;BYHOUR=17; BYMINUTE=2,4,5,50,51,7;</code>" with a start date of 28-FEB-2004 23:00:00 will generate the following schedule:</p>
<pre dir="ltr">
SUN 29-FEB-2004 17:02:00
SUN 29-FEB-2004 17:04:00
SUN 29-FEB-2004 17:50:00
MON 01-MAR-2004 17:02:00
MON 01-MAR-2004 17:04:00
MON 01-MAR-2004 17:50:00
...
</pre>
<p>A repeat interval of "<code dir="ltr">FREQ=MONTHLY;BYMONTHDAY=15,-1</code>" with a start date of 29-DEC-2003 9:00:00 will generate the following schedule:</p>
<pre dir="ltr">
WED 31-DEC-2003 09:00:00
THU 15-JAN-2004 09:00:00
SAT 31-JAN-2004 09:00:00
SUN 15-FEB-2004 09:00:00
SUN 29-FEB-2004 09:00:00
MON 15-MAR-2004 09:00:00
WED 31-MAR-2004 09:00:00
...
</pre>
<p>A repeat interval of "<code dir="ltr">FREQ=MONTHLY;</code>" with a start date of 29-DEC-2003 9:00:00 will generate the following schedule. (Note that because there is no <code dir="ltr">BYMONTHDAY</code> clause, the day of month is retrieved from the start date.)</p>
<pre dir="ltr">
MON 29-DEC-2003 09:00:00
THU 29-JAN-2004 09:00:00
SUN 29-FEB-2004 09:00:00
MON 29-MAR-2004 09:00:00
...
</pre>
<p class="subhead2"><a id="ADMIN12678"></a>Example of Using a Calendaring Expression</p>
<p>As an example of using the calendaring syntax, consider the following statement:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_JOB (
   job_name             =&gt; 'scott.my_job1',
   start_date           =&gt; '15-JUL-04 01.00.00 AM Europe/Warsaw',
   repeat_interval      =&gt; 'FREQ=MINUTELY; INTERVAL=30;',
   end_date             =&gt; '15-SEP-04 01.00.00 AM Europe/Warsaw',
   comments             =&gt; 'My comments here');
END;
/
</pre>
<p>This creates <code dir="ltr">my_job1</code> in <code dir="ltr">scott</code>. It will run for the first time on July 15th and then run until September 15. The job is run every 30 minutes.</p>
</div>
<!-- class="sect3" -->
<a id="i1023479"></a>
<div id="ADMIN12418" class="sect3">
<h4 class="sect3">Using a PL/SQL Expression</h4>
<p>When you need more complicated capabilities than the calendaring syntax provides, you can use PL/SQL expressions. You cannot, however, use PL/SQL expressions for windows or in named schedules. The PL/SQL expression must evaluate to a date or a timestamp. Other than this restriction, there are no limitations, so with sufficient programming, you can create every possible repeat interval. As an example, consider the following statement:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_JOB (
   job_name             =&gt; 'scott.my_job2', 
   start_date           =&gt; '15-JUL-04 01.00.00 AM Europe/Warsaw',
   repeat_interval      =&gt; 'SYSTIMESTAMP + INTERVAL '30' MINUTE',
   end_date             =&gt; '15-SEP-04 01.00.00 AM Europe/Warsaw',
   comments             =&gt; 'My comments here');
END;
/
</pre>
<p>This creates <code dir="ltr">my_job1</code> in <code dir="ltr">scott</code>. It will run for the first time on July 15th and then every 30 minutes until September 15. The job is run every 30 minutes because <code dir="ltr">repeat_interval</code> is set to <code dir="ltr">SYSTIMESTAMP + INTERVAL '30' MINUTE</code>, which returns a date 30 minutes into the future.</p>
</div>
<!-- class="sect3" -->
<div id="ADMIN12419" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref3057"></a>
<h4 class="sect3">Differences Between PL/SQL Expression and Calendaring Syntax Behavior</h4>
<p>The following are important differences in behavior between a calendaring expression and PL/SQL repeat interval:</p>
<ul>
<li>
<p>Start date</p>
<p>Using the calendaring syntax, the start date is a reference date only. Therefore, the schedule is valid as of this date. It does not mean that the job will start on the start date.</p>
<p>Using a PL/SQL expression, the start date represents the actual time that the job will start executing for the first time.</p>
</li>
</ul>
<ul>
<li>
<p>Next run time</p>
<p>Using the calendaring syntax, the next time the job will run is fixed.</p>
<p>Using the PL/SQL expression, the next time the job will run depends on the actual start time of the current run of the job. As an example of the difference, if a job started at 2:00 PM and its schedule was to repeat every 2 hours, then, if the repeat interval was specified with the calendaring syntax, it would repeat at 4, 6 and so on. If PL/SQL was used and the job started at 2:10, then the job would repeat at 4:10, and if the next job actually started at 4:11, then the subsequent run would be at 6:11.</p>
</li>
</ul>
<p>To illustrate these two points, consider a situation where you have a start date of 15-July-2003 1:45:00 and you want it to repeat every two hours. A calendar expression of "<code dir="ltr">FREQ=HOURLY; INTERVAL=2; BYMINUTE=0;</code>" will generate the following schedule:</p>
<pre dir="ltr">
TUE 15-JUL-2003  03:00:00
TUE 15-JUL-2003  05:00:00
TUE 15-JUL-2003  07:00:00
TUE 15-JUL-2003  09:00:00
TUE 15-JUL-2003  11:00:00
...
</pre>
<p>Note that the calendar expression repeats every two hours on the hour.</p>
<p>A PL/SQL expression of "<code dir="ltr">SYSTIMESTAMP + interval '2' hour</code>", however, might have a run time of the following:</p>
<pre dir="ltr">
TUE 15-JUL-2003  01:45:00
TUE 15-JUL-2003  03:45:05
TUE 15-JUL-2003  05:45:09
TUE 15-JUL-2003  07:45:14
TUE 15-JUL-2003  09:45:20
...
</pre></div>
<!-- class="sect3" -->
<div id="ADMIN12420" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref3058"></a>
<h4 class="sect3">Repeat Intervals and Daylight Savings</h4>
<p>For repeating jobs, the next time a job is scheduled to run is stored in a timestamp with time zone column. When using the calendaring syntax, the time zone is retrieved from <code dir="ltr">start_date</code>. For more information on what happens when <code dir="ltr">start_date</code> is not specified, see <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
<p>In the case of repeat intervals that are based on PL/SQL expressions, the time zone is part of the timestamp that is returned by the PL/SQL expression. In both cases, it is important to use region names. For example, <code dir="ltr">"Europe/Istanbul"</code>, instead of absolute time zone offsets such as <code dir="ltr">"+2:00"</code>. Only when a time zone is specified as a region name will the Scheduler follow daylight savings adjustments that apply to that region.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDDDIJB"></a>
<div id="ADMIN10020" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Events to Start Jobs<a id="sthref3059"></a></h2>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#BGBEGFFI">About Events</a></p>
</li>
<li>
<p><a href="#CHDIAJEB">Starting Jobs with Events Raised by Your Application</a></p>
</li>
<li>
<p><a href="#CIAJIADA">Starting a Job When a File Arrives on a System</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="schedadmin.htm#BAJJAGHI">"Examples of Creating Jobs and Schedules Based on Events"</a></p>
</li>
<li>
<p><a href="#CHDEFJGF">"Creating and Managing Job Chains"</a> for information on how to use events with chains to achieve precise control over process flow</p>
</li>
</ul>
</div>
<a id="BGBEGFFI"></a>
<div id="ADMIN12361" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Events<a id="sthref3060"></a></h3>
<p>An <span class="bold">event</span> is a message sent by one application or system process to another to indicate that some action or occurrence has been detected. An event is <span class="bold">raised</span> (sent) by one application or process, and <span class="bold">consumed</span> (received) by one or more applications or processes.</p>
<p>There are two kinds of events consumed by the Scheduler:</p>
<ul>
<li>
<p>Events raised by your application</p>
<p>An application can raise an event to be consumed by the Scheduler. The Scheduler reacts to the event by starting a job. For example, when an inventory tracking system notices that the inventory has gone below a certain threshold, it can raise an event that starts an inventory replenishment job.</p>
<p>See <a href="#CHDIAJEB">"Starting Jobs with Events Raised by Your Application"</a>.</p>
</li>
<li>
<p>File arrival events raised by a file watcher</p>
<p>You can create a file watcher&mdash;a Scheduler object introduced in Oracle Database 11<span class="italic">g</span> Release 2&mdash;to watch for the arrival of a file on a system. You can then configure a job to start when the file watcher detects the presence of the file. For example, a data warehouse for a chain of stores loads data from end-of-day revenue reports uploaded from the point-of-sale systems in the stores. The data warehouse load job starts each time a new end-of-day report arrives.</p>
<p>See <a href="#CIAJIADA">"Starting a Job When a File Arrives on a System"</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADQUE" href="../e11013/toc.htm"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a> for more information on Advanced Queuing</p>
</li>
<li>
<p><a href="#CHDJHFEC">"Monitoring Job State with Events Raised by the Scheduler"</a> for information about how your application can consume job state change events raised by the Scheduler</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDIAJEB"></a>
<div id="ADMIN12448" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Starting Jobs with Events Raised by Your Application<a id="sthref3061"></a></h3>
<p>Your application can raise an event to notify the Scheduler to start a job. A job started in this way is referred to as an event-based job. You can create a named schedule that references an event instead of containing date, time, and recurrence information. If a job is given such a schedule (an <span class="bold">event schedule</span>), the job runs when the event is raised.</p>
<p>To raise an event to notify the Scheduler to start a job, your application enqueues a message onto an Oracle Streams Advanced Queuing queue that was specified when setting up the job. When the job starts, it can optionally retrieve the message content of the event.</p>
<p>To create an event-based job, you must set these two additional attributes:</p>
<ul>
<li>
<p><code dir="ltr">queue_spec</code></p>
<p>A queue specification that includes the name of the queue where your application enqueues messages to raise job start events, or in the case of a secure queue, the queue name followed by a comma and the agent name.</p>
</li>
<li>
<p><code dir="ltr">event_condition</code></p>
<p>A conditional expression based on message properties that must evaluate to TRUE for the message to start the job. The expression must have the syntax of an Oracle Streams Advanced Queuing rule. Accordingly, you can include user data properties in the expression, provided that the message payload is an object type, and that you prefix object attributes in the expression with <code dir="ltr">tab.user_data</code>.</p>
<p>For more information on rules, see the <code dir="ltr">DBMS_AQADM</code>.<code dir="ltr">ADD_SUBSCRIBER</code> procedure in <a class="olink ARPLS005" href="../../appdev.112/e40758/d_aqadm.htm#ARPLS005"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
<p>The following example sets <code dir="ltr">event_condition</code> to select only low-inventory events that occur after midnight and before 9:00 a.m. Assume that the message payload is an object with two attributes called <code dir="ltr">event_type</code> and <code dir="ltr">event_timestamp</code>.</p>
<pre dir="ltr">
event_condition = 'tab.user_data.event_type = ''LOW_INVENTORY'' and 
extract hour from tab.user_data.event_timestamp &lt; 9'
</pre></li>
</ul>
<p>You can specify <code dir="ltr">queue_spec</code> and <code dir="ltr">event_condition</code> as inline job attributes, or you can create an <span class="bold">event schedule</span> with these attributes and point to this schedule from the job.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Scheduler runs the event-based job for each occurrence of an event that matches <code dir="ltr">event_condition</code>. However, by default, events that occur while the job is already running are ignored; the event gets consumed, but does not trigger another run of the job. Beginning in Oracle Database 11<span class="italic">g</span> Release 1, you can change this default behavior by setting the job attribute <code dir="ltr">PARALLEL_INSTANCES</code> to <code dir="ltr">TRUE</code>. In this case, an instance of the job is started for every instance of the event, and all job instances are lightweight jobs. See the <code dir="ltr">SET_ATTRIBUTE</code> procedure in <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for details.</div>
<p><a href="#CHDIEIIG">Table 29-5</a> describes common administration tasks involving events raised by an application (and consumed by the Scheduler) and the procedures associated with them.</p>
<div id="ADMIN13105" class="tblformalwide">
<p class="titleintable"><a id="sthref3062"></a><a id="CHDIEIIG"></a>Table 29-5 Event Tasks and Their Procedures for Events Raised by an Application</p>
<table class="cellalignment1333" title="Event Tasks and Their Procedures for Events Raised by an Application" summary="Event Tasks and Their Procedures" dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t34">Task</th>
<th class="cellalignment1334" id="r1c2-t34">Procedure</th>
<th class="cellalignment1334" id="r1c3-t34">Privilege Needed</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t34" headers="r1c1-t34">
<p><a href="#CHDHJEFI">Creating an Event-Based Job</a></p>
</td>
<td class="cellalignment1335" headers="r2c1-t34 r1c2-t34">
<p><code dir="ltr">CREATE_JOB</code></p>
</td>
<td class="cellalignment1335" headers="r2c1-t34 r1c3-t34">
<p><code dir="ltr">CREATE</code> <code dir="ltr">JOB</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t34" headers="r1c1-t34">
<p><a href="#CHDJGHEA">Altering an Event-Based Job</a></p>
</td>
<td class="cellalignment1335" headers="r3c1-t34 r1c2-t34">
<p><code dir="ltr">SET_ATTRIBUTE</code></p>
</td>
<td class="cellalignment1335" headers="r3c1-t34 r1c3-t34">
<p><code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or ownership of the job being altered or ALTER privileges on the job</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t34" headers="r1c1-t34">
<p><a href="#CHDGGCJE">Creating an Event Schedule</a></p>
</td>
<td class="cellalignment1335" headers="r4c1-t34 r1c2-t34">
<p><code dir="ltr">CREATE_EVENT_SCHEDULE</code></p>
</td>
<td class="cellalignment1335" headers="r4c1-t34 r1c3-t34">
<p><code dir="ltr">CREATE</code> <code dir="ltr">JOB</code> or <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t34" headers="r1c1-t34">
<p><a href="#CHDBGBDI">Altering an Event Schedule</a></p>
</td>
<td class="cellalignment1335" headers="r5c1-t34 r1c2-t34">
<p><code dir="ltr">SET_ATTRIBUTE</code></p>
</td>
<td class="cellalignment1335" headers="r5c1-t34 r1c3-t34">
<p><code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> or ownership of the schedule being altered or ALTER privileges on the schedule</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADQUE" href="../e11013/toc.htm"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a> for information on how to create queues and enqueue messages.</div>
<a id="CHDHJEFI"></a>
<div id="ADMIN12449" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating an Eve<a id="sthref3063"></a><a id="sthref3064"></a>nt-Based Job<a id="sthref3065"></a></h4>
<p>You use the <code dir="ltr">CREATE_JOB</code> procedure or Enterprise Manager to create an event-based job. The job can include event information inline as job attributes or can specify event information by pointing to an event schedule.</p>
<p>Like jobs based on time schedules, event-based jobs are not auto-dropped unless the job end date passes, <code dir="ltr">max_runs</code> is reached, or the maximum number of failures (<code dir="ltr">max_failures</code>) is reached.</p>
<div id="ADMIN12450" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref3066"></a>
<h5 class="sect4">Specifying Event Information as Job Attributes</h5>
<p>To specify event information as job attributes, you use an alternate syntax of <code dir="ltr">CREATE_JOB</code> that includes the <code dir="ltr">queue_spec</code> and <code dir="ltr">event_condition</code> attributes.</p>
<p>The following example creates a job that starts when an application signals the Scheduler that inventory levels for an item have fallen to a low threshold level:</p>
<pre dir="ltr">
BEGIN
DBMS_SCHEDULER.CREATE_JOB (
   job_name            =&gt;  'process_lowinv_j1',
   program_name        =&gt;  'process_lowinv_p1',
   event_condition     =&gt;  'tab.user_data.event_type = ''LOW_INVENTORY''',
   queue_spec          =&gt;  'inv_events_q, inv_agent1',
   enabled             =&gt;  TRUE,
   comments            =&gt;  'Start an inventory replenishment job');
END;
/
</pre>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information regarding the <code dir="ltr">CREATE_JOB</code> procedure.</p>
</div>
<!-- class="sect4" -->
<div id="ADMIN12451" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref3067"></a>
<h5 class="sect4">Specifying Event Information in an Event Schedule</h5>
<p>To specify event information with an event schedule, you set the job's <code dir="ltr">schedule_name</code> attribute to the name of an event schedule, as shown in the following example:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_JOB (
   job_name            =&gt;  'process_lowinv_j1',
   program_name        =&gt;  'process_lowinv_p1',
   schedule_name       =&gt;  'inventory_events_schedule',
   enabled             =&gt;  TRUE,
   comments            =&gt;  'Start an inventory replenishment job');
END;
/
</pre>
<p>See <a href="#CHDGGCJE">"Creating an Event Schedule"</a> for more information.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CHDJGHEA"></a>
<div id="ADMIN12452" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Altering an Ev<a id="sthref3068"></a><a id="sthref3069"></a>ent-Based Job</h4>
<p>You alter an event-based job by using the <code dir="ltr">SET_ATTRIBUTE</code> procedure. For jobs that specify the event inline, you cannot set the <code dir="ltr">queue_spec</code> and <code dir="ltr">event_condition</code> attributes individually with <code dir="ltr">SET_ATTRIBUTE</code>. Instead, you must set an attribute called <code dir="ltr">event_spec</code>, and pass an event condition and queue specification as the third and fourth arguments, respectively, to <code dir="ltr">SET_ATTRIBUTE</code>.</p>
<p>The following is an example of using the <code dir="ltr">event_spec</code> attribute:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.SET_ATTRIBUTE ('my_job', 'event_spec', 
   'tab.user_data.event_type = ''LOW_INVENTORY''', 'inv_events_q, inv_agent1');
END;
/
</pre>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information regarding the <code dir="ltr">SET_ATTRIBUTE</code> procedure.</p>
</div>
<!-- class="sect3" -->
<a id="CHDGGCJE"></a>
<div id="ADMIN12453" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating an Ev<a id="sthref3070"></a><a id="sthref3071"></a>ent Schedule</h4>
<p>You can create a schedule that is based on an event. You can then reuse the schedule for multiple jobs. To do so, use the <code dir="ltr">CREATE_EVENT_SCHEDULE</code> procedure, or use Enterprise Manager. The following is an example of creating an event schedule:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_EVENT_SCHEDULE (
   schedule_name     =&gt;  'inventory_events_schedule',
   start_date        =&gt;  SYSTIMESTAMP,
   event_condition   =&gt;  'tab.user_data.event_type = ''LOW_INVENTORY''', 
   queue_spec        =&gt;  'inv_events_q, inv_agent1');
END;
/
</pre>
<p>You can drop an event schedule using the <code dir="ltr">DROP_SCHEDULE</code> procedure. See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information on <code dir="ltr">CREATE_EVENT_SCHEDULE</code>.</p>
</div>
<!-- class="sect3" -->
<a id="CHDBGBDI"></a>
<div id="ADMIN12454" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Altering an Ev<a id="sthref3072"></a><a id="sthref3073"></a>ent Schedule</h4>
<p>You alter the event information in an event schedule in the same way that you alter event information in a job. For more information, see <a href="#CHDJGHEA">"Altering an Event-Based Job"</a>.</p>
<p>The following example demonstrates how to use the <code dir="ltr">SET_ATTRIBUTE</code> procedure and the <code dir="ltr">event_spec</code> attribute to alter event information in an event schedule.</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.SET_ATTRIBUTE ('inventory_events_schedule', 'event_spec',
   'tab.user_data.event_type = ''LOW_INVENTORY''', 'inv_events_q, inv_agent1');
END;
/
</pre>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information regarding the <code dir="ltr">SET_ATTRIBUTE</code> procedure.</p>
</div>
<!-- class="sect3" -->
<div id="ADMIN12455" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref3074"></a>
<h4 class="sect3">Passing Event Mess<a id="sthref3075"></a><a id="sthref3076"></a>ages into an Event-Based Job</h4>
<p>Through a metadata argument, the Scheduler can pass to an event-based job the message content of the event that started the job. The following rules apply:</p>
<ul>
<li>
<p>The job must use a named program of type <code dir="ltr">STORED_PROCEDURE</code>.</p>
</li>
<li>
<p>One of the named program's arguments must be a metadata argument with <code dir="ltr">metadata_attribute</code> set to <code dir="ltr">EVENT_MESSAGE</code>.</p>
</li>
<li>
<p>The stored procedure that implements the program must have an argument at the position corresponding to the named program's metadata argument. The argument type must be the data type of the queue where your application queues the job-start event.</p>
</li>
</ul>
<p>If you use the <code dir="ltr">RUN_JOB</code> procedure to manually run a job that has an <code dir="ltr">EVENT_MESSAGE</code> metadata argument, the value passed to that argument is <code dir="ltr">NULL</code>.</p>
<p>The following example shows how to construct an event-based job that can receive the event message content:</p>
<pre dir="ltr">
create or replace procedure my_stored_proc (event_msg IN event_queue_type)
as
begin
  -- retrieve and process message body
end;
/ 
 
begin
  dbms_scheduler.create_program (
      program_name =&gt; 'my_prog',
      program_action=&gt; 'my_stored_proc',
      program_type =&gt; 'STORED_PROCEDURE',
      number_of_arguments =&gt; 1,
      enabled =&gt; FALSE) ;
 
  dbms_scheduler.define_metadata_argument (
      program_name =&gt; 'my_prog',
      argument_position =&gt; 1 ,
      metadata_attribute =&gt; 'EVENT_MESSAGE') ;
 
  dbms_scheduler.enable ('my_prog');
exception
  when others then raise ;
end ;
/
 
begin
  dbms_scheduler.create_job (
     job_name =&gt; 'my_evt_job' ,
     program_name =&gt; 'my_prog',
     schedule_name =&gt; 'my_evt_sch',
     enabled =&gt; true,
     auto_Drop =&gt; false) ;
exception
  when others then raise ;
end ;
/
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIAJIADA"></a>
<div id="ADMIN13285" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Starting a Job When a File Arrives on a System<a id="sthref3077"></a></h3>
<p>You can configure the Scheduler to start a job when a file arrives on the local system or a remote system. The job is an event-based job, and the file arrival event is raised by a file watcher, which is a Scheduler object introduced in Oracle Database 11<span class="italic">g</span> Release 2.</p>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CIAEJGJE">About File Watchers</a></p>
</li>
<li>
<p><a href="#CIAIIHHB">Enabling File Arrival Events from Remote Systems</a></p>
</li>
<li>
<p><a href="#CIABIEJA">Creating File Watchers and File Watcher Jobs</a></p>
</li>
<li>
<p><a href="#CIAHDFDJ">File Arrival Example</a></p>
</li>
<li>
<p><a href="#CIAIGCGH">Managing File Watchers</a></p>
</li>
<li>
<p><a href="#CIAIFBII">Viewing File Watcher Information</a></p>
</li>
</ul>
<a id="CIAEJGJE"></a>
<div id="ADMIN13286" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About File Watchers<a id="sthref3078"></a></h4>
<p>A <span class="bold">file watcher</span> is a Scheduler object that defines the location, name, and other properties of a file whose arrival on a system causes the Scheduler to start a job. You create a file watcher and then create any number of event-based jobs or event schedules that reference the file watcher. When the file watcher detects the arrival of the designated file, a newly arrived file, it raises a file arrival event.</p>
<p>A newly arrived file is a file that has been changed and therefore has a timestamp that is later than either the latest execution or the time that the file watcher job began monitoring the target file directory.</p>
<p>The way the file watcher determines whether a file is a newly arrived one or not is equivalent to repeatedly executing the Unix command <code dir="ltr">ls -lrt</code> or the Windows DOS command <code dir="ltr">dir /od</code> to watch for new files in a directory. Both these commands ensure that the recently modified file is listed at the end, that is the oldest first and the newest last.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The following behaviors:
<p>The UNIX <code dir="ltr">mv</code> command does not change the file modification time, while the <code dir="ltr">cp</code> command does.</p>
<p>The Windows <code dir="ltr">move</code>/<code dir="ltr">paste</code> and <code dir="ltr">copy</code>/<code dir="ltr">paste</code> commands do not change the file modification time. To do this, execute the following DOS command after the <code dir="ltr">move</code> or <code dir="ltr">copy</code> command: <code dir="ltr">copy /b file_name +,,</code></p>
</div>
<p>The <code dir="ltr">steady_state_duration</code> parameter of the <code dir="ltr">CREATE_FILE_WATCHER</code> procedure, described in <a class="olink ARPLS72299" href="../../appdev.112/e40758/d_sched.htm#ARPLS72299"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>, indicates the minimum time interval that the file must remain unchanged before the file watcher considers the file found. This cannot exceed one hour. If the parameter is <code dir="ltr">NULL</code>, an internal value is used.</p>
<p>The job started by the file arrival event can retrieve the event message to learn about the newly arrived file. The message contains the information required to find the file, open it, and process it.</p>
<p>A file watcher can watch for a file on the local system (the same host computer running Oracle Database) or a remote system. Remote systems must be running the Scheduler agent, and the agent must be registered with the database.</p>
<p>File watchers check for the arrival of files every 10 minutes. You can adjust this interval. See <a href="#CIADECID">"Changing the File Arrival Detection Interval"</a> for details.</p>
<p>You must have the <code dir="ltr">CREATE</code> <code dir="ltr">JOB</code> system privilege to create a file watcher in your own schema. You require the <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">JOB</code> system privilege to create a file watcher in a schema different from your own (except the <code dir="ltr">SYS</code> schema, which is disallowed). You can grant the <code dir="ltr">EXECUTE</code> object privilege on a file watcher so that jobs in different schemas can reference it. You can also grant the <code dir="ltr">ALTER</code> object privilege on a file watcher so that another user can modify it.</p>
<p>To use file watchers, the database Java virtual machine (JVM) component must be installed.</p>
</div>
<!-- class="sect3" -->
<a id="CIAIIHHB"></a>
<div id="ADMIN13287" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Enabling File Arrival Events from Remote Systems</h4>
<p>To receive file arrival events from a remote system, you must install the Scheduler agent on that system, and you must register the agent with the database. The remote system does not require a running Oracle Database instance to generate file arrival events.</p>
<p class="orderedlisttitle">To enable the raising of file arrival events at remote systems:&nbsp;</p>
<ol>
<li>
<p>Set up the local database to run remote external jobs.</p>
<p>See <a href="schedadmin.htm#BAJDDEBG">"Setting up Databases for Remote Jobs"</a> for instructions.</p>
</li>
<li>
<p>Install, configure, register, and start the Scheduler agent on the first remote system.</p>
<p>See <a href="schedadmin.htm#BAJDFHBE">"Installing and Configuring the Scheduler Agent on a Remote Host"</a> for instructions.</p>
<p>This adds the remote host to the list of external destinations maintained on the local database.</p>
</li>
<li>
<p>Repeat the previous step for each additional remote system.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIABIEJA"></a>
<div id="ADMIN13288" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating File Watchers and File Watcher Jobs<a id="sthref3080"></a></h4>
<p>You perform the following tasks to create a file watcher and create the event-based job that starts when the designated file arrives.</p>
<dl>
<dd><a id="ADMIN13478"></a><a id="sthref3081"></a></dd>
<dt class="seghead">Task 1&nbsp;&nbsp;&nbsp;- Create a Credential</dt>
<dd>
<p>The file watcher requires a Scheduler credential object (a credential) with which to authenticate with the host operating system for access to the file. See <a href="schedover.htm#BGBDCCCE">"Credentials"</a> for information on privileges required to create credentials.</p>
<p>Perform these steps:</p>
<ol>
<li>
<p>Create a credential for the operating system user that must have access to the watched-for file.</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_CREDENTIAL('WATCH_CREDENTIAL', 'salesapps', 'sa324w1');
END;
/
</pre></li>
<li>
<p>Grant the <code dir="ltr">EXECUTE</code> object privilege on the credential to the schema that owns the event-based job that the file watcher will start.</p>
<pre dir="ltr">
GRANT EXECUTE ON WATCH_CREDENTIAL to DSSUSER;
</pre></li>
</ol>
</dd>
<dd><a id="ADMIN13479"></a><a id="sthref3082"></a></dd>
<dt class="seghead">Task 2&nbsp;&nbsp;&nbsp;- Create a File Watcher</dt>
<dd>
<p>Perform these steps:</p>
<ol>
<li>
<p>Create the file watcher, assigning attributes as described in the <code dir="ltr">DBMS_SCHEDULER.CREATE_FILE_WATCHER</code> procedure documentation in <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>. You can specify wildcard parameters in the file name. A '?' prefix in the <code dir="ltr">DIRECTORY_PATH</code> attribute denotes the path to the Oracle home directory. A <code dir="ltr">NULL</code> <code dir="ltr">destination</code> indicates the local host. To watch for the file on a remote host, provide a valid external destination name, which you can obtain from the view <code dir="ltr">ALL_SCHEDULER_EXTERNAL_DESTS</code>.</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_FILE_WATCHER(
    FILE_WATCHER_NAME =&gt; 'EOD_FILE_WATCHER',
    DIRECTORY_PATH    =&gt; '?/eod_reports',
    FILE_NAME         =&gt; 'eod*.txt',
    CREDENTIAL_NAME   =&gt; 'WATCH_CREDENTIAL',
    DESTINATION       =&gt; NULL,
    ENABLED           =&gt; FALSE);
END;
/
</pre></li>
<li>
<p>Grant <code dir="ltr">EXECUTE</code> on the file watcher to any schema that owns an event-based job that references the file watcher.</p>
<pre dir="ltr">
GRANT EXECUTE ON EOD_FILE_WATCHER to DSSUSER;
</pre></li>
</ol>
</dd>
<dd><a id="ADMIN13480"></a><a id="sthref3083"></a></dd>
<dt class="seghead">Task 3&nbsp;&nbsp;&nbsp;- Create a Program Object with a Metadata Argument</dt>
<dd>
<p>So that your application can retrieve the file arrival event message content, which includes file name, file size, and so on, create a Scheduler program object with a metadata argument that references the event message.</p>
<p>Perform these steps:</p>
<ol>
<li>
<p>Create the program.</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_PROGRAM(
    PROGRAM_NAME        =&gt; 'DSSUSER.EOD_PROGRAM',
    PROGRAM_TYPE        =&gt; 'STORED_PROCEDURE',
    PROGRAM_ACTION      =&gt; 'EOD_PROCESSOR',
    NUMBER_OF_ARGUMENTS =&gt; 1,
    ENABLED             =&gt; FALSE);
END;
/
</pre></li>
<li>
<p>Define the metadata argument using the <code dir="ltr">event_message</code> attribute.</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.DEFINE_METADATA_ARGUMENT(
    PROGRAM_NAME       =&gt; 'DSSUSER.EOD_PROGRAM',
    METADATA_ATTRIBUTE =&gt; 'event_message',
    ARGUMENT_POSITION  =&gt; 1);
END;
/
</pre></li>
<li>
<p>Create the stored procedure that the program invokes.</p>
<p>The stored procedure that processes the file arrival event must have an argument of type <code dir="ltr">SYS.SCHEDULER_FILEWATCHER_RESULT</code>, which is the data type of the event message. The position of that argument must match the position of the defined metadata argument. The procedure can then access attributes of this abstract data type to learn about the arrived file.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for a description of the <code dir="ltr">DEFINE_METADATA_ARGUMENT</code> procedure</p>
</li>
<li>
<p><a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for a description of the <code dir="ltr">SYS.SCHEDULER_FILEWATCHER_RESULT</code> type</p>
</li>
</ul>
</div>
</dd>
<dd><a id="ADMIN13481"></a><a id="sthref3084"></a></dd>
<dt class="seghead">Task 4&nbsp;&nbsp;&nbsp;- Create an Event-Based Job That References the File Watcher</dt>
<dd>
<p>Create the event-based job as described in <a href="#CHDHJEFI">"Creating an Event-Based Job"</a>, with the following exception: instead of providing a queue specification in the <code dir="ltr">queue_spec</code> attribute, provide the name of the file watcher. You would typically leave the <code dir="ltr">event_condition</code> job attribute null, but you can provide a condition if desired.</p>
<p>As an alternative to setting the <code dir="ltr">queue_spec</code> attribute for the job, you can create an event schedule, reference the file watcher in the <code dir="ltr">queue_spec</code> attribute of the event schedule, and reference the event schedule in the <code dir="ltr">schedule_name</code> attribute of the job.</p>
<p>Perform these steps to prepare the event-based job:</p>
<ol>
<li>
<p>Create the job.</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_JOB(
    JOB_NAME        =&gt; 'DSSUSER.EOD_JOB',
    PROGRAM_NAME    =&gt; 'DSSUSER.EOD_PROGRAM',
    EVENT_CONDITION =&gt; NULL,
    QUEUE_SPEC      =&gt; 'EOD_FILE_WATCHER',
    AUTO_DROP       =&gt; FALSE,
    ENABLED         =&gt; FALSE);
END;
/
</pre></li>
<li>
<p>If you want the job to run for each instance of the file arrival event, even if the job is already processing a previous event, set the <code dir="ltr">parallel_instances</code> attribute to <code dir="ltr">TRUE</code>. With this setting, the job runs as a lightweight job so that multiple instances of the job can be started quickly. To discard file watcher events that occur while the event-based job is already processing another, leave the <code dir="ltr">parallel_instances</code> attribute <code dir="ltr">FALSE</code> (the default).</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.SET_ATTRIBUTE('DSSUSER.EOD_JOB','PARALLEL_INSTANCES',TRUE);
END;
/
</pre>
<p>For more information about this attribute, see the <code dir="ltr">SET_ATTRIBUTE</code> description in <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CHDGGCJE">"Creating an Event Schedule"</a></p>
</li>
<li>
<p><a href="#i1019183">"Creating Jobs Using Named Programs and Schedules"</a></p>
</li>
</ul>
</div>
</dd>
<dd><a id="ADMIN13482"></a><a id="CIAGABCA"></a></dd>
<dt class="seghead">Task 5&nbsp;&nbsp;&nbsp;- Enable All Objects</dt>
<dd>
<p>Enable the file watcher, the program, and the job.</p>
<pre dir="ltr">
BEGIN
   DBMS_SCHEDULER.ENABLE('DSSUSER.EOD_PROGRAM,DSSUSER.EOD_JOB,EOD_FILE_WATCHER');
END;
/
</pre></dd>
</dl>
</div>
<!-- class="sect3" -->
<a id="CIAHDFDJ"></a>
<div id="ADMIN13289" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">File Arrival Example</h4>
<p>In this example, an event-based job watches for the arrival of end-of-day sales reports onto the local host from various locations. As each report file arrives, a stored procedure captures information about the file and stores the information in a table called <code dir="ltr">eod_reports</code>. A regularly scheduled report aggregation job can then query this table, process all unprocessed files, and mark any newly processed files as processed.</p>
<p>It is assumed that the database user running the following code has been granted <code dir="ltr">EXECUTE</code> on the <code dir="ltr">SYS.SCHEDULER_FILEWATCHER_RESULT</code> data type.</p>
<pre dir="ltr">
begin
  dbms_scheduler.create_credential(
     credential_name =&gt; 'watch_credential',
     username        =&gt; 'pos1',
     password        =&gt; 'jk4545st');
end;
/
 
create table eod_reports (when timestamp, file_name varchar2(100), 
   file_size number, processed char(1));
 
create or replace procedure q_eod_report 
  (payload IN sys.scheduler_filewatcher_result) as 
begin
  insert into eod_reports values 
     (payload.file_timestamp,
      payload.directory_path || '/' || payload.actual_file_name,
      payload.file_size,
      'N');
end;
/
 
begin
  dbms_scheduler.create_program(
    program_name        =&gt; 'eod_prog',
    program_type        =&gt; 'stored_procedure',
    program_action      =&gt; 'q_eod_report',
    number_of_arguments =&gt; 1,
    enabled             =&gt; false);
  dbms_scheduler.define_metadata_argument(
    program_name        =&gt; 'eod_prog',
    metadata_attribute  =&gt; 'event_message',
    argument_position   =&gt; 1);
  dbms_scheduler.enable('eod_prog');
end;
/
 
begin
  dbms_scheduler.create_file_watcher(
    file_watcher_name =&gt; 'eod_reports_watcher',
    directory_path    =&gt; '?/eod_reports',
    file_name         =&gt; 'eod*.txt',
    credential_name   =&gt; 'watch_credential',
    destination       =&gt; null,
    enabled           =&gt; false);
end;
/
 
begin
  dbms_scheduler.create_job(
    job_name        =&gt; 'eod_job',
    program_name    =&gt; 'eod_prog',
    event_condition =&gt; 'tab.user_data.file_size &gt; 10',
    queue_spec      =&gt; 'eod_reports_watcher',
    auto_drop       =&gt; false,
    enabled         =&gt; false);
  dbms_scheduler.set_attribute('eod_job','parallel_instances',true);
end;
/
 
exec dbms_scheduler.enable('eod_reports_watcher,eod_job');
</pre></div>
<!-- class="sect3" -->
<a id="CIAIGCGH"></a>
<div id="ADMIN13290" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Managing File Watchers<a id="sthref3085"></a><a id="sthref3086"></a></h4>
<p>The <code dir="ltr">DBMS_SCHEDULER</code> PL/SQL package provides procedures for enabling, disabling, dropping, and setting attributes for file watchers.</p>
<p>The section contains:</p>
<ul>
<li>
<p><a href="#CIABBFIF">Enabling File Watchers</a></p>
</li>
<li>
<p><a href="#CIACBEJI">Altering File Watchers</a></p>
</li>
<li>
<p><a href="#CIABIIGH">Disabling and Dropping File Watchers</a></p>
</li>
<li>
<p><a href="#CIADECID">Changing the File Arrival Detection Interval</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code dir="ltr">DBMS_SCHEDULER</code> PL/SQL package</div>
<a id="CIABBFIF"></a>
<div id="ADMIN13291" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Enabling File Watchers</h5>
<p>If a file watcher is disabled, use <code dir="ltr">DBMS_SCHEDULER.ENABLE</code> to enable it, as shown in <a href="#CIAGABCA">Task 5, "- Enable All Objects"</a>.</p>
<p>You can enable a file watcher only if all of its attributes are set to legal values and the file watcher owner has <code dir="ltr">EXECUTE</code> privileges on the specified credential.</p>
</div>
<!-- class="sect4" -->
<a id="CIACBEJI"></a>
<div id="ADMIN13292" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Altering File Watchers</h5>
<p>Use the <code dir="ltr">DBMS_SCHEDULER.SET_ATTRIBUTE</code> and <code dir="ltr">DBMS_SCHEDULER.SET_ATTRIBUTE_NULL</code> package procedures to modify the attributes of a file watcher. See the <code dir="ltr">CREATE_FILE_WATCHER</code> procedure description for information about file watcher attributes.</p>
</div>
<!-- class="sect4" -->
<a id="CIABIIGH"></a>
<div id="ADMIN13293" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Disabling and Dropping File Watchers</h5>
<p>Use <code dir="ltr">DBMS_SCHEDULER.DISABLE</code> to disable a file watcher and <code dir="ltr">DBMS_SCHEDULER.DROP_FILE_WATCHER</code> to drop a file watcher. You cannot disable or drop a file watcher if there are jobs that depend on it. To force a disable or drop operation in this case, set the <code dir="ltr">FORCE</code> attribute to <code dir="ltr">TRUE</code>. If you force disabling or dropping a file watcher, jobs that depend on it become disabled.</p>
</div>
<!-- class="sect4" -->
<a id="CIADECID"></a>
<div id="ADMIN13294" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Changing the File Arrival Detection Interval</h5>
<p>File watchers check for the arrival of files every ten minutes by default. You can change this interval.</p>
<p class="orderedlisttitle">To change the file arrival detection interval:&nbsp;</p>
<ol>
<li>
<p>Connect to the database as the <code dir="ltr">SYS</code> user.</p>
</li>
<li>
<p>Change the <code dir="ltr">REPEAT_INTERVAL</code> attribute of the predefined schedule <code dir="ltr">SYS.FILE_WATCHER_SCHEDULE</code>. Use any valid calendaring syntax.</p>
<p>The following example changes the file arrival detection frequency to every two minutes.</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.SET_ATTRIBUTE('FILE_WATCHER_SCHEDULE', 'REPEAT_INTERVAL',
    'FREQ=MINUTELY;INTERVAL=2');
END;
/
</pre></li>
</ol>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CIAIFBII"></a>
<div id="ADMIN13295" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Viewing File Watcher Information</h4>
<p>You can view information about file watchers by querying the views <code dir="ltr">*_SCHEDULER_FILE_WATCHERS</code>.</p>
<pre dir="ltr">
SELECT file_watcher_name, destination, directory_path, file_name, credential_name 
   FROM dba_scheduler_file_watchers;

FILE_WATCHER_NAME    DESTINATION          DIRECTORY_PATH       FILE_NAME  CREDENTIAL_NAME
-------------------- -------------------- -------------------- ---------- ----------------
MYFW                 dsshost.example.com  /tmp                 abc        MYFW_CRED
EOD_FILE_WATCHER                          ?/eod_reports        eod*.txt   WATCH_CREDENTIAL
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN20759" href="../../server.112/e40402/statviews_2037.htm#REFRN20759"><span class="italic">Oracle Database Reference</span></a> for details on the <code dir="ltr">*_SCHEDULER_FILE_WATCHERS</code> views</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDEFJGF"></a>
<div id="ADMIN10021" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating and Managing Job C<a id="sthref3088"></a>hains</h2>
<p>A job chain ("chain") is a named series of tasks that are linked together for a combined objective. Chains are the means by which you can implement dependency based scheduling, in which jobs are started depending on the outcomes of one or more previous jobs.</p>
<p>To create and use a chain, you complete these tasks in order:</p>
<div class="inftblhruleinformal">
<table class="cellalignment1333" title="Steps to create a chain" summary="This table lists in the first column the steps required to create a chain. The second column contains a cross reference to the corresponding &quot;how to&quot; section for each step." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t41">Task</th>
<th class="cellalignment1334" id="r1c2-t41">See...</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t41" headers="r1c1-t41">1. Create a chain object</td>
<td class="cellalignment1335" headers="r2c1-t41 r1c2-t41"><a href="#CHDEAAEG">Creating Chains</a></td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t41" headers="r1c1-t41">2. Define the steps in the chain</td>
<td class="cellalignment1335" headers="r3c1-t41 r1c2-t41"><a href="#CHDGAJAG">Defining Chain Steps</a></td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t41" headers="r1c1-t41">3. Add rules</td>
<td class="cellalignment1335" headers="r4c1-t41 r1c2-t41"><a href="#CHDDEEIF">Adding Rules to a Chain</a></td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t41" headers="r1c1-t41">4. Enable the chain</td>
<td class="cellalignment1335" headers="r5c1-t41 r1c2-t41"><a href="#CHDDAEJA">Enabling Chains</a></td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r6c1-t41" headers="r1c1-t41">5. Create a job (the "chain job") that points to the chain</td>
<td class="cellalignment1335" headers="r6c1-t41 r1c2-t41"><a href="#CHDGFHHF">Creating Jobs for Chains</a></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblhruleinformal" -->
<p>Additional topics discussed in this section include:</p>
<ul>
<li>
<p><a href="#CHDCFBHG">Chain Tasks and Their Procedures</a></p>
</li>
<li>
<p><a href="#CHDHDGCD">Dropping Chains</a></p>
</li>
<li>
<p><a href="#CHDHFACE">Running Chains</a></p>
</li>
<li>
<p><a href="#CHDFDJDJ">Dropping Chain Rules</a></p>
</li>
<li>
<p><a href="#CHDFEJJI">Disabling Chains</a></p>
</li>
<li>
<p><a href="#CHDHIBBF">Dropping Chain Steps</a></p>
</li>
<li>
<p><a href="#CHDDDEEH">Stopping Chains</a></p>
</li>
<li>
<p><a href="#CHDDBCCJ">Stopping Individual Chain Steps</a></p>
</li>
<li>
<p><a href="#CHDCFEIE">Pausing Chains</a></p>
</li>
<li>
<p><a href="#CHDGGJCC">Skipping Chain Steps</a></p>
</li>
<li>
<p><a href="#CHDIGCBC">Running Part of a Chain</a></p>
</li>
<li>
<p><a href="#CHDJDAGJ">Monitoring Running Chains</a></p>
</li>
<li>
<p><a href="#CHDIEDIJ">Handling Stalled Chains</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="schedover.htm#BGBBEHHH">"Chains"</a> for an overview of chains</p>
</li>
<li>
<p><a href="schedadmin.htm#BAJHFHCD">"Examples of Creating Chains"</a></p>
</li>
</ul>
</div>
<a id="CHDCFBHG"></a>
<div id="ADMIN12456" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Chain Tasks and Their Procedures</h3>
<p><a href="#CHDJEJAJ">Table 29-6</a> illustrates common tasks involving chains and the procedures associated with them.</p>
<div id="ADMIN13106" class="tblformalwidemax">
<p class="titleintable"><a id="sthref3089"></a><a id="CHDJEJAJ"></a>Table 29-6 Chain Tasks and Their Procedures</p>
<table class="cellalignment1333" title="Chain Tasks and Their Procedures" summary="Column 1 lists some common window group tasks, column 2 lists the procedures used to perform the tasks; column 3 lists the privileges required to perform the tasks." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t43">Task</th>
<th class="cellalignment1334" id="r1c2-t43">Procedure</th>
<th class="cellalignment1334" id="r1c3-t43">Privilege Needed</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t43" headers="r1c1-t43">
<p>Create a chain</p>
</td>
<td class="cellalignment1335" headers="r2c1-t43 r1c2-t43">
<p><code dir="ltr">CREATE_CHAIN</code></p>
</td>
<td class="cellalignment1335" headers="r2c1-t43 r1c3-t43">
<p><code dir="ltr">CREATE JOB</code>, <code dir="ltr">CREATE EVALUATION CONTEXT</code>, <code dir="ltr">CREATE</code> <code dir="ltr">RULE</code>, and <code dir="ltr">CREATE RULE SET</code> if the owner. <code dir="ltr">CREATE ANY JOB</code>, <code dir="ltr">CREATE ANY RULE</code>, <code dir="ltr">CREATE ANY RULE SET</code>, and <code dir="ltr">CREATE ANY EVALUATION CONTEXT</code> otherwise</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t43" headers="r1c1-t43">
<p>Drop a chain</p>
</td>
<td class="cellalignment1335" headers="r3c1-t43 r1c2-t43">
<p><code dir="ltr">DROP_CHAIN</code></p>
</td>
<td class="cellalignment1335" headers="r3c1-t43 r1c3-t43">
<p>Ownership of the chain or <code dir="ltr">ALTER</code> privileges on the chain or <code dir="ltr">CREATE ANY JOB</code> privileges. If not owner, also requires <code dir="ltr">DROP ANY EVALUATION CONTEXT</code> and <code dir="ltr">DROP ANY RULE SET</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t43" headers="r1c1-t43">
<p>Alter a chain</p>
</td>
<td class="cellalignment1335" headers="r4c1-t43 r1c2-t43">
<p><code dir="ltr">SET_ATTRIBUTE</code></p>
</td>
<td class="cellalignment1335" headers="r4c1-t43 r1c3-t43">
<p>Ownership of the chain, or <code dir="ltr">ALTER</code> privileges on the chain or <code dir="ltr">CREATE ANY JOB</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t43" headers="r1c1-t43">
<p>Alter a running chain</p>
</td>
<td class="cellalignment1335" headers="r5c1-t43 r1c2-t43">
<p><code dir="ltr">ALTER_RUNNING_CHAIN</code></p>
</td>
<td class="cellalignment1335" headers="r5c1-t43 r1c3-t43">
<p>Ownership of the job, or <code dir="ltr">ALTER</code> privileges on the job or <code dir="ltr">CREATE ANY JOB</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r6c1-t43" headers="r1c1-t43">
<p>Run a chain</p>
</td>
<td class="cellalignment1335" headers="r6c1-t43 r1c2-t43">
<p><code dir="ltr">RUN_CHAIN</code></p>
</td>
<td class="cellalignment1335" headers="r6c1-t43 r1c3-t43">
<p><code dir="ltr">CREATE JOB</code> or <code dir="ltr">CREATE ANY JOB</code>. In addition, the owner of the new job must have <code dir="ltr">EXECUTE</code> privileges on the chain or <code dir="ltr">EXECUTE ANY PROGRAM</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r7c1-t43" headers="r1c1-t43">
<p>Add rules to a chain</p>
</td>
<td class="cellalignment1335" headers="r7c1-t43 r1c2-t43">
<p><code dir="ltr">DEFINE_CHAIN_RULE</code></p>
</td>
<td class="cellalignment1335" headers="r7c1-t43 r1c3-t43">
<p>Ownership of the chain, or <code dir="ltr">ALTER</code> privileges on the chain or <code dir="ltr">CREATE ANY JOB</code> privileges. <code dir="ltr">CREATE RULE</code> if the owner of the chain, <code dir="ltr">CREATE ANY RULE</code> otherwise</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r8c1-t43" headers="r1c1-t43">
<p>Alter rules in a chain</p>
</td>
<td class="cellalignment1335" headers="r8c1-t43 r1c2-t43">
<p><code dir="ltr">DEFINE_CHAIN_RULE</code></p>
</td>
<td class="cellalignment1335" headers="r8c1-t43 r1c3-t43">
<p>Ownership of the chain, or <code dir="ltr">ALTER</code> privileges on the chain or <code dir="ltr">CREATE ANY JOB</code> privileges. If not owner of the chain, requires <code dir="ltr">ALTER</code> privileges on the rule or <code dir="ltr">ALTER ANY RULE</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r9c1-t43" headers="r1c1-t43">
<p>Drop rules from a chain</p>
</td>
<td class="cellalignment1335" headers="r9c1-t43 r1c2-t43">
<p><code dir="ltr">DROP_CHAIN_RULE</code></p>
</td>
<td class="cellalignment1335" headers="r9c1-t43 r1c3-t43">
<p>Ownership of the chain, or <code dir="ltr">ALTER</code> privileges on the chain or <code dir="ltr">CREATE ANY JOB</code> privileges. <code dir="ltr">DROP ANY RULE</code> if not the owner of the chain</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r10c1-t43" headers="r1c1-t43">
<p>Enable a chain</p>
</td>
<td class="cellalignment1335" headers="r10c1-t43 r1c2-t43">
<p><code dir="ltr">ENABLE</code></p>
</td>
<td class="cellalignment1335" headers="r10c1-t43 r1c3-t43">
<p>Ownership of the chain, or <code dir="ltr">ALTER</code> privileges on the chain or <code dir="ltr">CREATE ANY JOB</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r11c1-t43" headers="r1c1-t43">
<p>Disable a chain</p>
</td>
<td class="cellalignment1335" headers="r11c1-t43 r1c2-t43">
<p><code dir="ltr">DISABLE</code></p>
</td>
<td class="cellalignment1335" headers="r11c1-t43 r1c3-t43">
<p>Ownership of the chain, or <code dir="ltr">ALTER</code> privileges on the chain or <code dir="ltr">CREATE ANY JOB</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r12c1-t43" headers="r1c1-t43">
<p>Create steps</p>
</td>
<td class="cellalignment1335" headers="r12c1-t43 r1c2-t43">
<p><code dir="ltr">DEFINE_CHAIN_STEP</code></p>
</td>
<td class="cellalignment1335" headers="r12c1-t43 r1c3-t43">
<p>Ownership of the chain, or <code dir="ltr">ALTER</code> privileges on the chain or <code dir="ltr">CREATE ANY JOB</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r13c1-t43" headers="r1c1-t43">
<p>Drop steps</p>
</td>
<td class="cellalignment1335" headers="r13c1-t43 r1c2-t43">
<p><code dir="ltr">DROP_CHAIN_STEP</code></p>
</td>
<td class="cellalignment1335" headers="r13c1-t43 r1c3-t43">
<p>Ownership of the chain, or <code dir="ltr">ALTER</code> privileges on the chain or <code dir="ltr">CREATE ANY JOB</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r14c1-t43" headers="r1c1-t43">
<p>Alter steps (including assigning additional attribute values to steps)</p>
</td>
<td class="cellalignment1335" headers="r14c1-t43 r1c2-t43">
<p><code dir="ltr">ALTER_CHAIN</code></p>
</td>
<td class="cellalignment1335" headers="r14c1-t43 r1c3-t43">
<p>Ownership of the chain, or <code dir="ltr">ALTER</code> privileges on the chain or <code dir="ltr">CREATE ANY JOB</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwidemax" --></div>
<!-- class="sect2" -->
<a id="CHDEAAEG"></a>
<div id="ADMIN12457" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating C<a id="sthref3090"></a><a id="sthref3091"></a>hains</h3>
<p>You create a chain by using the <code dir="ltr">CREATE_CHAIN</code> procedure. You must ensure that you have the required privileges first. See <a href="schedadmin.htm#BAJBEDFI">"Setting Chain Privileges"</a> for details.</p>
<p>After creating the chain object with <code dir="ltr">CREATE_CHAIN</code>, you define chain steps and chain rules separately.</p>
<p>The following is an example of creating a chain:</p>
<pre dir="ltr">
BEGIN
DBMS_SCHEDULER.CREATE_CHAIN (
   chain_name          =&gt; 'my_chain1',
   rule_set_name       =&gt; NULL,
   evaluation_interval =&gt; NULL,
   comments            =&gt; 'My first chain');
END;
/
</pre>
<p>The <code dir="ltr">rule_set_name</code> and <code dir="ltr">evaluation_interval</code> arguments are typically left <code dir="ltr">NULL</code>. <code dir="ltr">evaluation_interval</code> can define a repeating interval at which chain rules get evaluated. <code dir="ltr">rule_set_name</code> refers to a rule set as defined within Oracle Streams.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CHDDEEIF">"Adding Rules to a Chain"</a> for more information about the <code dir="ltr">evaluation_interval</code> attribute.</p>
</li>
<li>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information on <code dir="ltr">CREATE_CHAIN</code></p>
</li>
<li>
<p>See <a class="olink STRMS005" href="../../server.112/e17069/strms_adrules.htm#STRMS005"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information on rules and rule sets</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDGAJAG"></a>
<div id="ADMIN12458" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Defining C<a id="sthref3092"></a><a id="sthref3093"></a>hain Steps</h3>
<p>After creating a chain object, you define one or more chain steps. Each step can point to one of the following:</p>
<ul>
<li>
<p>A Scheduler program object (program)</p>
</li>
<li>
<p>Another chain (a nested chain)</p>
</li>
<li>
<p>An event schedule, inline event, or file watcher</p>
</li>
</ul>
<p>You define a step that points to a program or nested chain by using the <code dir="ltr">DEFINE_CHAIN_STEP</code> procedure. An example is the following, which adds two steps to <code dir="ltr">my_chain1</code>:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.DEFINE_CHAIN_STEP (
   chain_name      =&gt;  'my_chain1',
   step_name       =&gt;  'my_step1',
   program_name    =&gt;  'my_program1');
  DBMS_SCHEDULER.DEFINE_CHAIN_STEP (
   chain_name      =&gt;  'my_chain1',
   step_name       =&gt;  'my_step2',
   program_name    =&gt;  'my_chain2');
END;
/
</pre>
<p>The named program or chain does not have to exist when defining the step. However it must exist and be enabled when the chain runs, otherwise an error is generated.</p>
<p>You define a step that waits for an event to occur by using the <code dir="ltr">DEFINE_CHAIN_EVENT_STEP</code> procedure. Procedure arguments can point to an event schedule, can include an inline queue specification and event condition, or can include a file watcher name. This example creates a third chain step that waits for the event specified in the named event schedule:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.DEFINE_CHAIN_EVENT_STEP (
   chain_name           =&gt;  'my_chain1',
   step_name            =&gt;  'my_step3',
   event_schedule_name  =&gt;  'my_event_schedule');
END;
/
</pre>
<p>An event step does not wait for its event until the step is started.</p>
<p class="subhead2"><a id="ADMIN12680"></a>Steps That Run Local External Executables</p>
<p>After defining a step that runs a local external executable, you must use the <code dir="ltr">ALTER_CHAIN</code> procedure to assign a credential to the step, as shown in the following example:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.ALTER_CHAIN('chain1','step1','credential_name','MY_CREDENTIAL');
END;
/
</pre>
<p class="subhead2"><a id="ADMIN13385"></a>Steps That Run on Remote Destinations</p>
<p>After defining a step that is to run an external executable on a remote host or a database program unit on a remote database, you must use the <code dir="ltr">ALTER_CHAIN</code> procedure to assign both a credential and a destination to the step, as shown in the following example:</p>
<pre dir="ltr">
BEGIN
 DBMS_SCHEDULER.ALTER_CHAIN('chain1','step2','credential_name','DW_CREDENTIAL');
 DBMS_SCHEDULER.ALTER_CHAIN('chain1','step2','destination_name','DBHOST1_ORCLDW');
END;
/
</pre>
<p class="subhead2"><a id="ADMIN12682"></a>Making Steps Restartable</p>
<p>After a database recovery, by default steps that were running are marked as <code dir="ltr">STOPPED</code> and the chain continues. You can specify the chain steps to restart automatically after a database recovery by using <code dir="ltr">ALTER_CHAIN</code> to set the <code dir="ltr">restart_on_recovery</code> attribute to <code dir="ltr">TRUE</code> for those steps.</p>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information regarding the <code dir="ltr">DEFINE_CHAIN_STEP</code>, <code dir="ltr">DEFINE_CHAIN_EVENT_STEP</code>, and <code dir="ltr">ALTER_CHAIN</code> procedures.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BGBEGFFI">"About Events"</a></p>
</li>
<li>
<p><a href="#CIAEJGJE">"About File Watchers"</a></p>
</li>
<li>
<p><a href="schedover.htm#BGBDCCCE">"Credentials"</a></p>
</li>
<li>
<p><a href="schedover.htm#CHDDFGIF">"Destinations"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDDEEIF"></a>
<div id="ADMIN12459" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Adding Rules to a Chain<a id="sthref3094"></a><a id="sthref3095"></a><a id="sthref3096"></a><a id="sthref3097"></a></h3>
<p>You add a rule to a chain with the <code dir="ltr">DEFINE_CHAIN_RULE</code> procedure. You call this procedure once for each rule that you want to add to the chain.</p>
<p>Chain rules define when steps run, and define dependencies between steps. Each rule has a condition and an action. Whenever rules are evaluated, if a rule's condition evaluates to <code dir="ltr">TRUE</code>, its action is performed. The condition can contain Scheduler chain condition syntax or any syntax that is valid in a SQL <code dir="ltr">WHERE</code> clause. The syntax can include references to attributes of any chain step, including step completion status. A typical action is to run a specified step or to run a list of steps.</p>
<p>All chain rules work together to define the overall action of the chain. When the chain job starts and at the end of each step, all rules are evaluated to see what action or actions occur next. If more than one rule has a <code dir="ltr">TRUE</code> condition, multiple actions can occur. You can cause rules to also be evaluated at regular intervals by setting the <code dir="ltr">evaluation_interval</code> attribute of a chain.</p>
<p>Conditions are usually based on the outcome of one or more previous steps. For example, you might want one step to run if the two previous steps succeeded, and another to run if either of the two previous steps failed.</p>
<p>Scheduler chain condition syntax takes one of the following two forms:</p>
<pre dir="ltr">
<span class="italic">stepname</span> [NOT] {SUCCEEDED|FAILED|STOPPED|COMPLETED}
<span class="italic">stepname</span> ERROR_CODE {<span class="italic">comparision_operator</span>|[NOT] IN} {<span class="italic">integer</span>|<span class="italic">list_of_integers</span>}
</pre>
<p>You can combine conditions with boolean operators <code dir="ltr">AND</code>, <code dir="ltr">OR</code>, and <code dir="ltr">NOT()</code> to create conditional expressions. You can employ parentheses in your expressions to determine order of evaluation.</p>
<p><code dir="ltr">ERROR_CODE</code> can be set with the <code dir="ltr">RAISE_APPLICATION_ERROR</code> PL/SQL statement within the program assigned to the step. Although the error codes that your program sets in this way are negative numbers, when testing <code dir="ltr">ERROR_CODE</code> in a chain rule, you test for positive numbers. For example, if your program contains the following statement:</p>
<pre dir="ltr">
RAISE_APPLICATION_ERROR(-20100, errmsg);
</pre>
<p>your chain rule condition must be the following:</p>
<pre dir="ltr">
<span class="italic">stepname</span> ERROR_CODE=20100
</pre>
<p class="subhead2"><a id="ADMIN12683"></a>Step Attributes</p>
<p>The following is a list of step attributes that you can include in conditions when using SQL <code dir="ltr">WHERE</code> clause syntax:</p>
<br />
<code dir="ltr">completed</code><br />
<code dir="ltr">state</code><br />
<code dir="ltr">start_date</code><br />
<code dir="ltr">end_date</code><br />
<code dir="ltr">error_code</code><br />
<code dir="ltr">duration</code><br />
<p>The <code dir="ltr">completed</code> attribute is boolean and is <code dir="ltr">TRUE</code> when the <code dir="ltr">state</code> attribute is either <code dir="ltr">SUCCEEDED</code>, <code dir="ltr">FAILED</code>, or <code dir="ltr">STOPPED</code>.</p>
<p><a href="#CHDIFFFC">Table 29-7</a> shows the possible values for the <code dir="ltr">state</code> attribute. These values are visible in the <code dir="ltr">STATE</code> column of the <code dir="ltr">*_SCHEDULER_RUNNING_CHAINS</code> views.</p>
<div id="ADMIN13107" class="tblformal">
<p class="titleintable"><a id="sthref3098"></a><a id="CHDIFFFC"></a>Table 29-7 Values for the State Attribute of a Chain Step</p>
<table class="cellalignment1338" title="Values for the State Attribute of a Chain Step " summary="This table contains two columns: Value and Meaning. It has one row for every possible value of the state attribute of chain steps." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t46">State Attribute Value</th>
<th class="cellalignment1334" id="r1c2-t46">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t46" headers="r1c1-t46">
<p><code dir="ltr">NOT_STARTED</code></p>
</td>
<td class="cellalignment1335" headers="r2c1-t46 r1c2-t46">
<p>The step's chain is running, but the step has not yet started.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t46" headers="r1c1-t46">
<p><code dir="ltr">SCHEDULED</code></p>
</td>
<td class="cellalignment1335" headers="r3c1-t46 r1c2-t46">
<p>A rule started the step with an <code dir="ltr">AFTER</code> clause and the designated wait time has not yet expired.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t46" headers="r1c1-t46">
<p><code dir="ltr">RUNNING</code></p>
</td>
<td class="cellalignment1335" headers="r4c1-t46 r1c2-t46">
<p>The step is running. For an event step, the step was started and is waiting for an event.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t46" headers="r1c1-t46">
<p><code dir="ltr">PAUSED</code></p>
</td>
<td class="cellalignment1335" headers="r5c1-t46 r1c2-t46">
<p>The step's <code dir="ltr">PAUSE</code> attribute is set to <code dir="ltr">TRUE</code> and the step is paused. It must be unpaused before steps that depend on it can start.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r6c1-t46" headers="r1c1-t46">
<p><code dir="ltr">SUCCEEDED</code></p>
</td>
<td class="cellalignment1335" headers="r6c1-t46 r1c2-t46">
<p>The step completed successfully. The step's <code dir="ltr">ERROR_CODE</code> is 0.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r7c1-t46" headers="r1c1-t46">
<p><code dir="ltr">FAILED</code></p>
</td>
<td class="cellalignment1335" headers="r7c1-t46 r1c2-t46">
<p>The step completed with a failure. <code dir="ltr">ERROR_CODE</code> is nonzero.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r8c1-t46" headers="r1c1-t46">
<p><code dir="ltr">STOPPED</code></p>
</td>
<td class="cellalignment1335" headers="r8c1-t46 r1c2-t46">
<p>The step was stopped with the <code dir="ltr">STOP_JOB</code> procedure.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r9c1-t46" headers="r1c1-t46">
<p><code dir="ltr">STALLED</code></p>
</td>
<td class="cellalignment1335" headers="r9c1-t46 r1c2-t46">
<p>The step is a nested chain that has stalled.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>See the <code dir="ltr">DEFINE_CHAIN_RULE</code> procedure in <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for rules and examples for SQL <code dir="ltr">WHERE</code> clause syntax.</p>
<p class="subhead2"><a id="ADMIN12684"></a>Condition Examples Using Scheduler Chain Condition Syntax</p>
<p>These examples use Scheduler chain condition syntax.</p>
<p>Steps started by rules containing the following condition are started when the step named <code dir="ltr">form_validation_step</code> is completed (<code dir="ltr">SUCCEEDED</code>, <code dir="ltr">FAILED</code>, or <code dir="ltr">STOPPED</code>).</p>
<pre dir="ltr">
form_validation_step COMPLETED
</pre>
<p>The following condition is similar, but indicates that the step must have succeeded for the condition to be met.</p>
<pre dir="ltr">
form_validation_step SUCCEEDED
</pre>
<p>The next condition tests for an error. It is <code dir="ltr">TRUE</code> if the step <code dir="ltr">form_validation_step</code> failed with any error code other than 20001.</p>
<pre dir="ltr">
form_validation_step FAILED AND form_validation_step ERROR_CODE != 20001
</pre>
<p>See the <code dir="ltr">DEFINE_CHAIN_RULE</code> procedure in <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more examples.</p>
<p class="subhead2"><a id="ADMIN13492"></a>Condition Examples Using SQL WHERE Syntax</p>
<pre dir="ltr">
':step1.state=''SUCCEEDED'''
</pre>
<p class="subhead2"><a id="ADMIN12685"></a>Starting the Chain</p>
<p>At least one rule must have a condition that always evaluates to <code dir="ltr">TRUE</code> so that the chain can start when the chain job starts. The easiest way to accomplish this is to just set the condition to '<code dir="ltr">TRUE</code>' if you are using Schedule chain condition syntax, or '<code dir="ltr">1=1</code>' if you are using SQL syntax.</p>
<p class="subhead2"><a id="ADMIN12686"></a>Ending the Chain</p>
<p>At least one chain rule must contain an <code dir="ltr">action</code> of '<code dir="ltr">END</code>'. A chain job does not complete until one of the rules containing the <code dir="ltr">END</code> action evaluates to <code dir="ltr">TRUE</code>. Several different rules with different <code dir="ltr">END</code> actions are common, some with error codes, and some without.</p>
<p>If a chain has no more running steps or it is not waiting for an event to occur, and no rules containing the <code dir="ltr">END</code> action evaluate to <code dir="ltr">TRUE</code> (or there are no rules with the <code dir="ltr">END</code> action), the chain job enters the <code dir="ltr">CHAIN_STALLED</code> state. See <a href="#CHDIEDIJ">"Handling Stalled Chains"</a> for more information.</p>
<p class="subhead2"><a id="ADMIN12687"></a>Example of Defining Rules</p>
<p>The following example defines a rule that starts the chain at step <code dir="ltr">step1</code> and a rule that starts step <code dir="ltr">step2</code> when <code dir="ltr">step1</code> completes. <code dir="ltr">rule_name</code> and <code dir="ltr">comments</code> are optional and default to <code dir="ltr">NULL</code>. If you do use <code dir="ltr">rule_name</code>, you can later redefine that rule with another call to <code dir="ltr">DEFINE_CHAIN_RULE</code>. The new definition overwrites the previous one.</p>
<pre dir="ltr">
BEGIN
DBMS_SCHEDULER.DEFINE_CHAIN_RULE (
   chain_name   =&gt;   'my_chain1',
   condition    =&gt;   'TRUE',
   action       =&gt;   'START step1',
   rule_name    =&gt;   'my_rule1',
   comments     =&gt;   'start the chain');
DBMS_SCHEDULER.DEFINE_CHAIN_RULE (
   chain_name   =&gt;   'my_chain1',
   condition    =&gt;   'step1 completed',
   action       =&gt;   'START step2',
   rule_name    =&gt;   'my_rule2');
END;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information on the <code dir="ltr">DEFINE_CHAIN_RULE</code> procedure and Scheduler chain condition syntax</p>
</li>
<li>
<p><a href="schedadmin.htm#BAJHFHCD">"Examples of Creating Chains"</a></p>
</li>
</ul>
</div>
<div id="ADMIN12688" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref3099"></a>
<h4 class="sect3">Setting an Evaluation Interval for Chain Rules</h4>
<p>The Scheduler evaluates all chain rules at the start of the chain job and at the end of each chain step. You can configure a chain to also have its rules evaluated at a repeating time interval, such as once per hour. This capability is useful to start chain steps based on time of day or based on occurrences external to the chain. Here are some examples:</p>
<ul>
<li>
<p>A chain step is resource-intensive and must therefore run at off-peak hours. You could condition the step on both the completion of another step and on the time of day being after 6:00 p.m and before midnight. The Scheduler would then have to evaluate rules every so often to determine when this condition becomes <code dir="ltr">TRUE</code>.</p>
</li>
<li>
<p>A step must wait for data to arrive in a table from some other process that is external to the chain. You could condition this step on both the completion of another step and on a particular table containing rows. The Scheduler would then have to evaluate rules every so often to determine when this condition becomes <code dir="ltr">TRUE</code>. The condition would use SQL <code dir="ltr">WHERE</code> clause syntax, and would be similar to the following:</p>
<pre dir="ltr">
':step1.state=''SUCCEEDED'' AND select count(*) from oe.sync_table &gt; 0'
</pre></li>
</ul>
<p>To set an evaluation interval for a chain, you set the <code dir="ltr">evaluation_interval</code> attribute when you create the chain. The data type for this attribute is <code dir="ltr">INTERVAL</code> <code dir="ltr">DAY</code> <code dir="ltr">TO</code> <code dir="ltr">SECOND</code>.</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_CHAIN (
   chain_name          =&gt; 'my_chain1',
   rule_set_name       =&gt; NULL,
   evaluation_interval =&gt; INTERVAL '30' MINUTE,
   comments            =&gt; 'Chain with 30 minute evaluation interval');
END;
/
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDDAEJA"></a>
<div id="ADMIN12460" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Enab<a id="sthref3100"></a><a id="sthref3101"></a>ling Chains</h3>
<p>You enable a chain with the <code dir="ltr">ENABLE</code> procedure. A chain must be enabled before it can be run by a job. Enabling an already enabled chain does not return an error.</p>
<p>The following example enables chain <code dir="ltr">my_chain1</code>:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.ENABLE ('my_chain1');
END;
/
</pre>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information regarding the <code dir="ltr">ENABLE</code> procedure.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Chains are automatically disabled by the Scheduler when:
<ul>
<li>
<p>The program that one of the chain steps points to is dropped</p>
</li>
<li>
<p>The nested chain that one of the chain steps points to is dropped</p>
</li>
<li>
<p>The event schedule that one of the chain event steps points to is dropped</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDGFHHF"></a>
<div id="ADMIN12461" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating Jobs f<a id="sthref3102"></a><a id="sthref3103"></a>or Chains</h3>
<p>To run a chain, you must either use the <code dir="ltr">RUN_CHAIN</code> procedure or create and schedule a job of type '<code dir="ltr">CHAIN</code>' (a <span class="bold">chain job</span>). The job action must refer to the chain name, as shown in the following example:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_JOB (
   job_name        =&gt; 'chain_job_1',
   job_type        =&gt; 'CHAIN',
   job_action      =&gt; 'my_chain1',
   repeat_interval =&gt; 'freq=daily;byhour=13;byminute=0;bysecond=0',
   enabled         =&gt; TRUE);
END;
/
</pre>
<p>For every step of a chain job that is running, the Scheduler creates a <span class="bold">step job</span> with the same job name and owner as the chain job. Each step job additionally has a job subname to uniquely identify it. The job subname is included as a column in the views <code dir="ltr">*_SCHEDULER_RUNNING_JOBS</code>, <code dir="ltr">*_SCHEDULER_JOB_LOG</code>, and <code dir="ltr">*_SCHEDULER_JOB_RUN_DETAILS</code>. The job subname is normally the same as the step name except in the following cases:</p>
<ul>
<li>
<p>For nested chains, the current step name may have already been used as a job subname. In this case, the Scheduler appends '<code dir="ltr"><span class="codeinlineitalic">_N</span></code>' to the step name, where <code dir="ltr"><span class="codeinlineitalic">N</span></code> is an integer that results in a unique job subname.</p>
</li>
<li>
<p>If there is a failure when creating a step job, the Scheduler logs a <code dir="ltr">FAILED</code> entry in the job log views (<code dir="ltr">*_SCHEDULER_JOB_LOG</code> and <code dir="ltr">*_SCHEDULER_JOB_RUN_DETAILS</code>) with the job subname set to '<code dir="ltr"><span class="codeinlineitalic">step_name_</span></code><code dir="ltr">0</code>'.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information on the CREATE_JOB procedure.</p>
</li>
<li>
<p><a href="#CHDHFACE">"Running Chains"</a> for another way to run a chain without creating a chain job.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDHDGCD"></a>
<div id="ADMIN12462" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Drop<a id="sthref3104"></a><a id="sthref3105"></a>ping Chains</h3>
<p>You drop a chain, including its steps and rules, by using the <code dir="ltr">DROP_CHAIN</code> procedure. An example of dropping a chain is the following, which drops <code dir="ltr">my_chain1</code>:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.DROP_CHAIN (
   chain_name   =&gt; 'my_chain1',
   force        =&gt; TRUE);
END;
/
</pre>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information regarding the <code dir="ltr">DROP_CHAIN</code> procedure.</p>
</div>
<!-- class="sect2" -->
<a id="CHDHFACE"></a>
<div id="ADMIN12463" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Running C<a id="sthref3106"></a><a id="sthref3107"></a>hains</h3>
<p>You can use the following two procedures to run a chain immediately:</p>
<ul>
<li>
<p><code dir="ltr">RUN_JOB</code></p>
</li>
<li>
<p><code dir="ltr">RUN_CHAIN</code></p>
</li>
</ul>
<p>If you already created a chain job for a chain, you can use the <code dir="ltr">RUN_JOB</code> procedure to run that job (and thus run the chain), but you must set the <code dir="ltr">use_current_session</code> argument of <code dir="ltr">RUN_JOB</code> to <code dir="ltr">FALSE</code>.</p>
<p>You can use the <code dir="ltr">RUN_CHAIN</code> procedure to run a chain without having to first create a chain job for the chain. You can also use <code dir="ltr">RUN_CHAIN</code> to run only part of a chain.</p>
<p><code dir="ltr">RUN_CHAIN</code> creates a temporary job to run the specified chain. If you supply a job name, the job is created with that name, otherwise a default job name is assigned.</p>
<p>If you supply a list of <span class="italic">start steps</span>, only those steps are started when the chain begins running. (Steps that would normally have started do not run if they are not in the list.) If no list of start steps is given, the chain starts normally&mdash;that is, an initial evaluation is done to see which steps to start running. An example is the following, which immediately runs the chain <code dir="ltr">my_chain1</code>:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.RUN_CHAIN (
   chain_name    =&gt;  'my_chain1',
   job_name      =&gt;  'partial_chain_job',
   start_steps   =&gt;  'my_step2, my_step4');
END;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CHDIGCBC">"Running Part of a Chain"</a></p>
</li>
<li>
<p><a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information regarding the <code dir="ltr">RUN_CHAIN</code> procedure.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDFDJDJ"></a>
<div id="ADMIN12464" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Drop<a id="sthref3108"></a><a id="sthref3109"></a><a id="sthref3110"></a>ping Chain Rules</h3>
<p>You drop a rule from a chain by using the <code dir="ltr">DROP_CHAIN_RULE</code> procedure. An example is the following, which drops <code dir="ltr">my_rule1</code>:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.DROP_CHAIN_RULE (
   chain_name   =&gt;   'my_chain1',
   rule_name    =&gt;   'my_rule1',
   force        =&gt;   TRUE);
END;
/
</pre>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information regarding the <code dir="ltr">DROP_CHAIN_RULE</code> procedure.</p>
</div>
<!-- class="sect2" -->
<a id="CHDFEJJI"></a>
<div id="ADMIN12465" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Disabl<a id="sthref3111"></a><a id="sthref3112"></a>ing Chains</h3>
<p>You disable a chain by using the <code dir="ltr">DISABLE</code> procedure. An example is the following, which disables <code dir="ltr">my_chain1</code>:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.DISABLE ('my_chain1');
END;
/
</pre>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information regarding the <code dir="ltr">DISABLE</code> procedure.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Chains are automatically disabled by the Scheduler when:
<ul>
<li>
<p>The program that one of the chain steps points to is dropped</p>
</li>
<li>
<p>The nested chain that one of the chain steps points to is dropped</p>
</li>
<li>
<p>The event schedule that one of the chain event steps points to is dropped</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDHIBBF"></a>
<div id="ADMIN12466" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Dropp<a id="sthref3113"></a><a id="sthref3114"></a>ing Chain Steps</h3>
<p>You drop a step from a chain by using the <code dir="ltr">DROP_CHAIN_STEP</code> procedure. An example is the following, which drops <code dir="ltr">my_step2</code> from <code dir="ltr">my_chain2</code>:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.DROP_CHAIN_STEP (
   chain_name   =&gt;   'my_chain2',
   step_name    =&gt;   'my_step2',
   force        =&gt;    TRUE);
END;
/
</pre>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information regarding the <code dir="ltr">DROP_CHAIN_STEP</code> procedure.</p>
</div>
<!-- class="sect2" -->
<a id="CHDDDEEH"></a>
<div id="ADMIN12689" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Stop<a id="sthref3115"></a><a id="sthref3116"></a>ping Chains</h3>
<p>To stop a running chain, you call <code dir="ltr">DBMS_SCHEDULER.STOP_JOB</code>, passing the name of the chain job (the job that started the chain). When you stop a chain job, all steps of the chain that are running are stopped and the chain ends.</p>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information regarding the <code dir="ltr">STOP_JOB</code> procedure.</p>
</div>
<!-- class="sect2" -->
<a id="CHDDBCCJ"></a>
<div id="ADMIN12690" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Stopp<a id="sthref3117"></a><a id="sthref3118"></a>ing Individual Chain Steps</h3>
<p>There are two ways to stop individual chain steps:</p>
<ul>
<li>
<p>By creating a chain rule that stops one or more steps when the rule condition is met.</p>
</li>
<li>
<p>By calling the <code dir="ltr">STOP_JOB</code> procedure.</p>
<p>For each step to stop, you must specify the schema name, chain job name, and step job subname.</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.STOP_JOB('oe.chainrunjob.stepa');
END;
/
</pre>
<p>In this example, <code dir="ltr">chainrunjob</code> is the chain job name and <code dir="ltr">stepa</code> is the step job subname. The step job subname is typically the same as the step name, but not always. You can obtain the step job subname from the <code dir="ltr">STEP_JOB_SUBNAME</code> column of the <code dir="ltr">*_SCHEDULER_RUNNING_CHAINS</code> views.</p>
</li>
</ul>
<p>When you stop a chain step, its <code dir="ltr">state</code> is set to <code dir="ltr">STOPPED</code> and the chain rules are evaluated to determine the steps to run next.</p>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information regarding the <code dir="ltr">STOP_JOB</code> procedure.</p>
</div>
<!-- class="sect2" -->
<a id="CHDCFEIE"></a>
<div id="ADMIN12691" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Pausing Cha<a id="sthref3119"></a><a id="sthref3120"></a><a id="sthref3121"></a>ins</h3>
<p>You can pause an entire chain or individual branches of a chain. You do so by setting the <code dir="ltr">PAUSE</code> attribute of one or more steps to <code dir="ltr">TRUE</code> with <code dir="ltr">DBMS_SCHEDULER.ALTER_CHAIN</code> or <code dir="ltr">ALTER_RUNNING_CHAIN</code>. Pausing chain steps enables you to suspend the running of the chain after those steps run.</p>
<p>When you pause a step, after the step runs, its <code dir="ltr">state</code> attribute changes to <code dir="ltr">PAUSED</code>, and its <code dir="ltr">completed</code> attribute remains <code dir="ltr">FALSE</code>. Steps that depend on the completion of the paused step are therefore not run. If you reset the <code dir="ltr">PAUSE</code> attribute to <code dir="ltr">FALSE</code> for a paused step, its <code dir="ltr">state</code> attribute is set to its completion state (<code dir="ltr">SUCCEEDED</code>, <code dir="ltr">FAILED</code>, or <code dir="ltr">STOPPED</code>), and steps that are awaiting the completion of the paused step can then run.</p>
<div id="ADMIN13108" class="figure">
<p class="titleinfigure"><a id="CHDCHJAJ"></a>Figure 29-1 Chain with Step 3 Paused</p>
<img width="503" height="347" src="img/admin081.gif" alt="Description of Figure 29-1 follows" /><br />
<a id="sthref3122" href="img_text/admin081.htm">Description of "Figure 29-1 Chain with Step 3 Paused"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In <a href="#CHDCHJAJ">Figure 29-1</a>, Step 3 is paused. Until Step 3 is unpaused, Step 5 will not run. If you were to pause only Step 2, then Steps 4, 6, and 7 would not run. However Steps 1, 3, and 5 could run. In either case, you are suspending only one branch of the chain.</p>
<p>To pause an entire chain, you pause all steps of the chain. To unpause a chain, you unpause one, many, or all of the chain steps. With the chain in <a href="#CHDCHJAJ">Figure 29-1</a>, pausing Step 1 would also achieve the pausing of the entire chain after Step 1 runs.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The <code dir="ltr">DBMS_SCHEDULER.ALTER_CHAIN</code> and <code dir="ltr">DBMS_SCHEDULER.ALTER_RUNNING_CHAIN</code> procedures in <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></div>
</div>
<!-- class="sect2" -->
<a id="CHDGGJCC"></a>
<div id="ADMIN12692" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Skipping Ch<a id="sthref3123"></a><a id="sthref3124"></a>ain Steps</h3>
<p>You can skip one or more steps in a chain. You do so by setting the <code dir="ltr">SKIP</code> attribute of one or more steps to <code dir="ltr">TRUE</code> with <code dir="ltr">DBMS_SCHEDULER.ALTER_CHAIN</code> or <code dir="ltr">ALTER_RUNNING_CHAIN</code>. If a step's <code dir="ltr">SKIP</code> attribute is <code dir="ltr">TRUE</code>, then when a chain condition to run that step is met, instead of being run, the step is treated as if it has immediately succeeded. Setting <code dir="ltr">SKIP</code> to <code dir="ltr">TRUE</code> has no effect on a step that is running, that is scheduled to run after a delay, or that has already run.</p>
<p>Skipping steps is especially useful when testing chains. For example, when testing the chain shown in <a href="#CHDCHJAJ">Figure 29-1</a>, skipping Step 7 could shorten testing time considerably, because this step is a nested chain.</p>
</div>
<!-- class="sect2" -->
<a id="CHDIGCBC"></a>
<div id="ADMIN12693" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Running Part of a Chain</h3>
<p>There are two ways to run only a part of a chain:</p>
<ul>
<li>
<p>Use the <code dir="ltr">ALTER_CHAIN</code> procedure to set the <code dir="ltr">PAUSE</code> attribute to <code dir="ltr">TRUE</code> for one or more steps, and then either start the chain job with <code dir="ltr">RUN_JOB</code> or start the chain with <code dir="ltr">RUN_CHAIN</code>. Any steps that depend on the paused steps do not run. (However, the paused steps do run.)</p>
<p>The disadvantage of this method is that you must set the <code dir="ltr">PAUSE</code> attribute back to <code dir="ltr">FALSE</code> for the affected steps for future runs of the chain.</p>
</li>
<li>
<p>Use the <code dir="ltr">RUN_CHAIN</code> procedure to start only certain steps of the chain, skipping those steps that you do not want to run.</p>
<p>This is a more straightforward approach and also enables you to set the initial state of steps before starting them.</p>
</li>
</ul>
<p>You may have to use both of these methods to skip steps both at the beginning and end of a chain.</p>
<p>See the discussion of the <code dir="ltr">RUN_CHAIN</code> procedure in <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGGJCC">"Skipping Chain Steps"</a></div>
</div>
<!-- class="sect2" -->
<a id="CHDJDAGJ"></a>
<div id="ADMIN12694" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Monito<a id="sthref3125"></a><a id="sthref3126"></a>ring Running Chains</h3>
<p>You can view the status of running chains with the following two views:</p>
<br />
<code dir="ltr">*_SCHEDULER_RUNNING_JOBS</code><br />
<code dir="ltr">*_SCHEDULER_RUNNING_CHAINS</code><br />
<p>The <code dir="ltr">*_SCHEDULER_RUNNING_JOBS</code> views contain one row for the chain job and one row for each running step. The <code dir="ltr">*_SCHEDULER_RUNNING_CHAINS</code> views contain one row for each chain step (including any nested chains) and include run status for each step (<code dir="ltr">NOT_STARTED</code>, <code dir="ltr">RUNNING</code>, <code dir="ltr">STOPPED</code>, <code dir="ltr">SUCCEEDED</code>, and so on).</p>
<p>See <a class="olink REFRN" href="../e40402/toc.htm"><span class="italic">Oracle Database Reference</span></a> for details on these views.</p>
</div>
<!-- class="sect2" -->
<a id="CHDIEDIJ"></a>
<div id="ADMIN12468" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Handling Sta<a id="sthref3127"></a><a id="sthref3128"></a>lled Chains</h3>
<p>At the completion of a step, the chain rules are always evaluated to determine the next steps to run. If none of the rules cause another step to start, none cause the chain to end, and the <code dir="ltr">evaluation_interval</code> for the chain is <code dir="ltr">NULL</code>, the chain enters the <span class="bold">stalled</span> state. When a chain is stalled, no steps are running, no steps are scheduled to run (after waiting a designated time interval), and no event steps are waiting for an event. The chain can make no further progress unless you manually intervene. In this case, the state of the job that is running the chain is set to <code dir="ltr">CHAIN_STALLED</code>. (However, the job is still listed in the <code dir="ltr">*_SCHEDULER_RUNNING_JOBS</code> views.)</p>
<p>You can troubleshoot a stalled chain with the views <code dir="ltr">ALL_SCHEDULER_RUNNING_CHAINS</code>, which shows the state of all steps in the chain (including any nested chains), and <code dir="ltr">ALL_SCHEDULER_CHAIN_RULES</code>, which contains all the chain rules.</p>
<p>You can enable the chain to continue by altering the <code dir="ltr">state</code> of one of its steps with the <code dir="ltr">ALTER_RUNNING_CHAIN</code> procedure. For example, if step 11 is waiting for step 9 to succeed before it can start, and if it makes sense to do so, you can set the <code dir="ltr">state</code> of step 9 to '<code dir="ltr">SUCCEEDED</code>'.</p>
<p>Alternatively, if one or more rules are incorrect, you can use the <code dir="ltr">DEFINE_CHAIN_RULE</code> procedure to replace them (using the same rule names), or to create new rules. The new and updated rules apply to the running chain and all future chain runs. After adding or updating rules, you must run <code dir="ltr">EVALUATE_RUNNING_CHAIN</code> on the stalled chain job to trigger any required actions.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIAEGDJB"></a>
<div id="ADMIN13296" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Prioritizing Jobs</h2>
<p>You prioritize Oracle Scheduler jobs using three Scheduler objects: job classes, windows, and window groups. These objects prioritize jobs by associating jobs with database resource manager consumer groups. This in turn controls the amount of resources allocated to these jobs. In addition, job classes enable you to set relative priorities among a group of jobs if all jobs in the group are allocated identical resource levels.</p>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#i1013452">Managing Job Priorities with Job Classes</a></p>
</li>
<li>
<p><a href="#i1016329bis">Setting Relative Job Priorities Within a Job Class</a></p>
</li>
<li>
<p><a href="#i1010604">Managing Job Scheduling and Job Priorities with Windows</a></p>
</li>
<li>
<p><a href="#i1011367">Managing Job Scheduling and Job Priorities with Window Groups</a></p>
</li>
<li>
<p><a href="#CIAFEFFA">Allocating Resources Among Jobs Using Resource Manager</a></p>
</li>
<li>
<p><a href="#CIAJFDIF">Example of Resource Allocation for Jobs</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dbrm.htm#g1021210">Chapter 27, "Managing Resources with Oracle Database Resource Manager"</a></div>
<a id="i1013452"></a>
<div id="ADMIN12421" class="sect2">
<h3 class="sect2">Managing Job Priorities with Job C<a id="sthref3129"></a>lasses</h3>
<p>Job classes provide a way to group jobs for prioritization. They also provide a way to easily assign a set of attribute values to member jobs. Job classes influence the priorities of their member jobs through job class attributes that relate to the database resource manager. See <a href="#CIAFEFFA">"Allocating Resources Among Jobs Using Resource Manager"</a> for details.</p>
<p>There is a default job class that is created with the database. If you create a job without specifying a job class, the job will be assigned to this default job class (<code dir="ltr">DEFAULT_JOB_CLASS)</code>. The default job class has the <code dir="ltr">EXECUTE</code> privilege granted to <code dir="ltr">PUBLIC</code> so any database user who has the privilege to create a job can create a job in the default job class.</p>
<p>This section introduces you to basic job class tasks, and discusses the following topics:</p>
<ul>
<li>
<p><a href="#i1013483">Job Class Tasks and Their Procedures</a></p>
</li>
<li>
<p><a href="#i1010485">Creating Job Classes</a></p>
</li>
<li>
<p><a href="#i1013484">Altering Job Classes</a></p>
</li>
<li>
<p><a href="#i1011997">Dropping Job Classes</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="schedover.htm#i1106378">"Job Classes"</a> for an overview of job classes.</div>
<a id="i1013483"></a>
<div id="ADMIN12422" class="sect3">
<h4 class="sect3">Job Class Tasks and Their Procedures</h4>
<p><a href="#g1034003">Table 29-8</a> illustrates common job class tasks and their appropriate procedures and privileges:</p>
<div id="ADMIN13099" class="tblformal">
<p class="titleintable"><a id="sthref3130"></a><a id="g1034003"></a>Table 29-8 Job Class Tasks and Their Procedures</p>
<table class="cellalignment1338" title="Job Class Tasks and Their Procedures" summary="Column 1 lists some common job class tasks; column 2 lists the procedure used to perform the task; column 3 lists the privileges needed to perform the task." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t56">Task</th>
<th class="cellalignment1334" id="r1c2-t56">Procedure</th>
<th class="cellalignment1334" id="r1c3-t56">Privilege Needed</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t56" headers="r1c1-t56">
<p>Create a job class</p>
</td>
<td class="cellalignment1335" headers="r2c1-t56 r1c2-t56">
<p><code dir="ltr">CREATE_JOB_CLASS</code></p>
</td>
<td class="cellalignment1335" headers="r2c1-t56 r1c3-t56">
<p><code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t56" headers="r1c1-t56">
<p>Alter a job class</p>
</td>
<td class="cellalignment1335" headers="r3c1-t56 r1c2-t56">
<p><code dir="ltr">SET_ATTRIBUTE</code></p>
</td>
<td class="cellalignment1335" headers="r3c1-t56 r1c3-t56">
<p><code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t56" headers="r1c1-t56">
<p>Drop a job class</p>
</td>
<td class="cellalignment1335" headers="r4c1-t56 r1c2-t56">
<p><code dir="ltr">DROP_JOB_CLASS</code></p>
</td>
<td class="cellalignment1335" headers="r4c1-t56 r1c3-t56">
<p><code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>See <a href="schedadmin.htm#i1011204">"Scheduler Privileges"</a> for further information regarding privileges.</p>
</div>
<!-- class="sect3" -->
<a id="i1010485"></a>
<div id="ADMIN12423" class="sect3">
<h4 class="sect3">Creating Jo<a id="sthref3131"></a><a id="sthref3132"></a>b Classes</h4>
<p>You create a job class using the <code dir="ltr">CREATE_JOB_CLASS</code> procedure or Enterprise Manager. Job classes are always created in the SYS schema.</p>
<p>The following statement creates a job class for all finance jobs:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_JOB_CLASS (
   job_class_name             =&gt;  'finance_jobs', 
   resource_consumer_group    =&gt;  'finance_group');
END;
/
</pre>
<p>All jobs in this job class are assigned to the <code dir="ltr">finance_group</code> resource consumer group.</p>
<p>To query job classes, use the <code dir="ltr">*_SCHEDULER_JOB_CLASSES</code> views.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dbrm.htm#CFHBIJIA">"About Resource Consumer Groups"</a></div>
</div>
<!-- class="sect3" -->
<a id="i1013484"></a>
<div id="ADMIN12424" class="sect3">
<h4 class="sect3">Altering <a id="sthref3133"></a><a id="sthref3134"></a>Job Classes</h4>
<p>You alter a job class by using the <code dir="ltr">SET_ATTRIBUTE</code> procedure or Enterprise Manager. Other than the job class name, all the attributes of a job class can be altered. The attributes of a job class are available in the <code dir="ltr">*_SCHEDULER_JOB_CLASSES</code> views.</p>
<p>When a job class is altered, running jobs that belong to the class are not affected. The change only takes effect for jobs that have not started running yet.</p>
</div>
<!-- class="sect3" -->
<a id="i1011997"></a>
<div id="ADMIN12425" class="sect3">
<h4 class="sect3">Dropping Jo<a id="sthref3135"></a><a id="sthref3136"></a>b Classes</h4>
<p>You drop one or more job classes using the <code dir="ltr">DROP_JOB_CLASS</code> procedure or Enterprise Manager. Dropping a job class means that all the metadata about the job class is removed from the database.</p>
<p>You can drop several job classes in one call by providing a comma-delimited list of job class names to the <code dir="ltr">DROP_JOB_CLASS</code> procedure call. For example, the following statement drops three job classes:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.DROP_JOB_CLASS('jobclass1, jobclass2, jobclass3');
END;
/
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1016329bis"></a>
<div id="ADMIN12045" class="sect2">
<h3 class="sect2">Setting Relative Job Priorities Within a Job Class<a id="sthref3137"></a><a id="sthref3138"></a></h3>
<p>You can change the relative priorities of jobs within the same job class by using the <code dir="ltr">SET_ATTRIBUTE</code> procedure. Job priorities must be in the range of 1-5, where 1 is the highest priority. For example, the following statement changes the job priority for <code dir="ltr">my_job1</code> to a setting of 1:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.SET_ATTRIBUTE (
   name           =&gt;   'my_emp_job1',
   attribute      =&gt;   'job_priority',
   value          =&gt;   1);
END;
/
</pre>
<p>You can verify that the attribute was changed by issuing the following statement:</p>
<pre dir="ltr">
SELECT JOB_NAME, JOB_PRIORITY FROM DBA_SCHEDULER_JOBS;

JOB_NAME                       JOB_PRIORITY
------------------------------ ------------
MY_EMP_JOB                                3
MY_EMP_JOB1                               1
MY_NEW_JOB1                               3
MY_NEW_JOB2                               3
MY_NEW_JOB3                               3
</pre>
<p>Overall priority of a job within the system is determined first by the combination of the resource consumer group that the job's job class is assigned to and the current resource plan, and then by relative priority within the job class.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CIAFEFFA">"Allocating Resources Among Jobs Using Resource Manager"</a></p>
</li>
<li>
<p><a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">SET_ATTRIBUTE</code> procedure</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i1010604"></a>
<div id="ADMIN12426" class="sect2">
<h3 class="sect2">Managing Job Scheduling and Job Priorities with Win<a id="sthref3139"></a>dows</h3>
<p>Windows provide a way to automatically activate different resource plans at different times. Running jobs can then see a change in the resources that are allocated to them when there is a change in resource plan. A job can name a window in its <code dir="ltr">schedule_name</code> attribute. The Scheduler then starts the job with the window "opens." A window has a schedule associated with it, so a window can open at various times during your workload cycle.</p>
<p>The key attributes of a window are its:</p>
<ul>
<li>
<p>Schedule</p>
<p>This controls when the window is in effect.</p>
</li>
<li>
<p>Duration</p>
<p>This controls how long the window is open.</p>
</li>
<li>
<p>Resource plan</p>
<p>This names the resource plan that activates when the window opens.</p>
</li>
</ul>
<p>Only one window can be in effect at any given time. Windows belong to the <code dir="ltr">SYS</code> schema.</p>
<p>All window activity is logged in the <code dir="ltr">*_SCHEDULER_WINDOW_LOG</code> views, otherwise known as the <span class="bold">win<a id="sthref3140"></a><a id="sthref3141"></a><a id="sthref3142"></a>dow logs</span>. See <a href="schedadmin.htm#i1016070">"Window Log"</a> for examples of window logging.</p>
<p>This section introduces you to basic window tasks, and discusses the following topics:</p>
<ul>
<li>
<p><a href="#i1013537">Window Tasks and Their Procedures</a></p>
</li>
<li>
<p><a href="#i1009193">Creating Windows</a></p>
</li>
<li>
<p><a href="#i1013593">Dropping Windows</a></p>
</li>
<li>
<p><a href="#i1013565">Opening Windows</a></p>
</li>
<li>
<p><a href="#i1013566">Closing Windows</a></p>
</li>
<li>
<p><a href="#i1013593">Dropping Windows</a></p>
</li>
<li>
<p><a href="#i1013594">Disabling Windows</a></p>
</li>
<li>
<p><a href="#i1013609">Enabling Windows</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="schedover.htm#i1106396">"Windows"</a> for an overview of windows.</div>
<a id="i1013537"></a>
<div id="ADMIN12427" class="sect3">
<h4 class="sect3">Window Tasks and Their Procedures</h4>
<p><a href="#g1034023">Table 29-9</a> illustrates common window tasks and the procedures you use to handle them.</p>
<div id="ADMIN13100" class="tblformal">
<p class="titleintable"><a id="sthref3143"></a><a id="g1034023"></a>Table 29-9 Window Tasks and Their Procedures</p>
<table class="cellalignment1338" title="Window Tasks and Their Procedures" summary="Column 1 lists some common window tasks; column 2 lists the procedures used for performing the tasks; column 3 lists the privileges required to perform the task." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t60">Task</th>
<th class="cellalignment1334" id="r1c2-t60">Procedure</th>
<th class="cellalignment1334" id="r1c3-t60">Privilege Needed</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t60" headers="r1c1-t60">
<p>Create a window</p>
</td>
<td class="cellalignment1335" headers="r2c1-t60 r1c2-t60">
<p><code dir="ltr">CREATE_WINDOW</code></p>
</td>
<td class="cellalignment1335" headers="r2c1-t60 r1c3-t60">
<p><code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t60" headers="r1c1-t60">
<p>Open a window</p>
</td>
<td class="cellalignment1335" headers="r3c1-t60 r1c2-t60">
<p><code dir="ltr">OPEN_WINDOW</code></p>
</td>
<td class="cellalignment1335" headers="r3c1-t60 r1c3-t60">
<p><code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t60" headers="r1c1-t60">
<p>Close a window</p>
</td>
<td class="cellalignment1335" headers="r4c1-t60 r1c2-t60">
<p><code dir="ltr">CLOSE_WINDOW</code></p>
</td>
<td class="cellalignment1335" headers="r4c1-t60 r1c3-t60">
<p><code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t60" headers="r1c1-t60">
<p>Alter a window</p>
</td>
<td class="cellalignment1335" headers="r5c1-t60 r1c2-t60">
<p><code dir="ltr">SET_ATTRIBUTE</code></p>
</td>
<td class="cellalignment1335" headers="r5c1-t60 r1c3-t60">
<p><code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r6c1-t60" headers="r1c1-t60">
<p>Drop a window</p>
</td>
<td class="cellalignment1335" headers="r6c1-t60 r1c2-t60">
<p><code dir="ltr">DROP_WINDOW</code></p>
</td>
<td class="cellalignment1335" headers="r6c1-t60 r1c3-t60">
<p><code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r7c1-t60" headers="r1c1-t60">
<p>Disable a window</p>
</td>
<td class="cellalignment1335" headers="r7c1-t60 r1c2-t60">
<p><code dir="ltr">DISABLE</code></p>
</td>
<td class="cellalignment1335" headers="r7c1-t60 r1c3-t60">
<p><code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r8c1-t60" headers="r1c1-t60">
<p>Enable a window</p>
</td>
<td class="cellalignment1335" headers="r8c1-t60 r1c2-t60">
<p><code dir="ltr">ENABLE</code></p>
</td>
<td class="cellalignment1335" headers="r8c1-t60 r1c3-t60">
<p><code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>See <a href="schedadmin.htm#i1011204">"Scheduler Privileges"</a> for further information regarding privileges.</p>
</div>
<!-- class="sect3" -->
<a id="i1009193"></a>
<div id="ADMIN12428" class="sect3">
<h4 class="sect3">Creating Win<a id="sthref3144"></a><a id="sthref3145"></a>dows</h4>
<p>You can use Enterprise Manager or the <code dir="ltr">DBMS_SCHEDULER.CREATE_WINDOW</code> package procedure to create windows. When using the package procedure, you can leave the <code dir="ltr">resource_plan</code> parameter <code dir="ltr">NULL</code>. In this case, when the window opens, the current plan remains in effect.</p>
<p>You must have the <code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code> privilege to create windows.</p>
<p>When you specify a schedule for a window, the Scheduler does not check if there is already a window defined for that schedule. Therefore, this may result in windows that overlap. Also, using a named schedule that has a PL/SQL expression as its repeat interval is not supported for windows</p>
<p>See the <code dir="ltr">CREATE_WINDOW</code> procedure in <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for details on window attributes.</p>
<p>The following example creates a window named <code dir="ltr">daytime</code> that enables the <code dir="ltr">mixed_workload_plan</code> resource plan during office hours:</p>
<pre dir="ltr">
BEGIN
   DBMS_SCHEDULER.CREATE_WINDOW (
     window_name      =&gt; 'daytime',
     resource_plan    =&gt; 'mixed_workload_plan',
     start_date       =&gt; '28-APR-09 08.00.00 AM',
     repeat_interval  =&gt; 'freq=daily; byday=mon,tue,wed,thu,fri',
     duration         =&gt; interval '9' hour,
     window_priority  =&gt; 'low',
     comments         =&gt; 'OLTP transactions have priority');
END;
/
</pre>
<p>To verify that the window was created properly, query the view <code dir="ltr">DBA_SCHEDULER_WINDOWS</code>. As an example, issue the following statement:</p>
<pre dir="ltr">
SELECT WINDOW_NAME, RESOURCE_PLAN, DURATION, REPEAT_INTERVAL FROM DBA_SCHEDULER_WINDOWS;

WINDOW_NAME   RESOURCE_PLAN         DURATION       REPEAT_INTERVAL
-----------   -------------------   -------------  ---------------
DAYTIME       MIXED_WORKLOAD_PLAN   +000 09:00:00  freq=daily; byday=mon,tue,wed,thu,fri
</pre></div>
<!-- class="sect3" -->
<a id="schedusealtwindow47"></a>
<div id="ADMIN12429" class="sect3">
<h4 class="sect3">Altering Win<a id="sthref3146"></a><a id="sthref3147"></a>dows</h4>
<p>You alter a window by modifying its attributes. You do so with the <code dir="ltr">SET_ATTRIBUTE</code> and <code dir="ltr">SET_ATTRIBUTE_NULL</code> procedures or Enterprise Manager. With the exception of <code dir="ltr">WINDOW_NAME</code>, all the attributes of a window can be changed when it is altered. See the <code dir="ltr">CREATE_WINDOW</code> procedure in <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for window attribute details.</p>
<p>When a window is altered, it does not affect an active window. The changes only take effect the next time the window opens.</p>
<p>All windows can be altered. If you alter a window that is disabled, it will remain disabled after it is altered. An enabled window will be automatically disabled, altered, and then reenabled, if the validity checks performed during the enable process are successful.</p>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">SET_ATTRIBUTE</code> and <code dir="ltr">SET_ATTRIBUTE_NULL</code> procedures.</p>
</div>
<!-- class="sect3" -->
<a id="i1013565"></a>
<div id="ADMIN12430" class="sect3">
<h4 class="sect3">Openin<a id="sthref3148"></a><a id="sthref3149"></a>g Windows</h4>
<p>When a window opens, the Scheduler switches to the resource plan that has been associated with it during its creation. If there are jobs running when the window opens, the resources allocated to them might change due to the switch in resource plan.</p>
<p>There are two ways a window can open:</p>
<ul>
<li>
<p>According to the window's schedule</p>
</li>
<li>
<p>Manually, using the <code dir="ltr">OPEN_WINDOW</code> procedure</p>
<p>This procedure opens the window independent of its schedule. This window will open and the resource plan associated with it will take effect immediately. Only an enabled window can be manually opened.</p>
<p>In the <code dir="ltr">OPEN_WINDOW</code> procedure, you can specify the time interval that the window should be open for, using the <code dir="ltr">duration</code> attribute. The duration is of type interval day to second. If the duration is not specified, then the window will be opened for the regular duration as stored with the window.</p>
<p>Opening a window manually has no impact on regular scheduled runs of the window.</p>
<p>When a window that was manually opened closes, the rules about overlapping windows are applied to determine which other window should be opened at that time if any at all.</p>
<p>You can force a window to open even if there is one already open by setting the <code dir="ltr">force</code> option to <code dir="ltr">TRUE</code> in the <code dir="ltr">OPEN_WINDOW</code> call or Enterprise Manager.</p>
<p>When the <code dir="ltr">force</code> option is set to <code dir="ltr">TRUE</code>, the Scheduler automatically closes any window that is open at that time, even if it has a higher priority. For the duration of this manually opened window, the Scheduler does not open any other scheduled windows even if they have a higher priority. You can open a window that is already open. In this case, the window stays open for the duration specified in the call, from the time the <code dir="ltr">OPEN_WINDOW</code> command was issued.</p>
<p>Consider an example to illustrate this. <code dir="ltr">window1</code> was created with a duration of four hours. It has how been open for two hours. If at this point you reopen <code dir="ltr">window1</code> using the <code dir="ltr">OPEN_WINDOW</code> call and do not specify a duration, then <code dir="ltr">window1</code> will be open for another four hours because it was created with that duration. If you specified a duration of 30 minutes, the window will close in 30 minutes.</p>
</li>
</ul>
<p>When a window opens, an entry is made in the window log.</p>
<p>A window can fail to switch resource plans if the current resource plan has been manually switched using the <code dir="ltr">ALTER</code> <code dir="ltr">SYSTEM</code> statement with the <code dir="ltr">FORCE</code> option, or using the <code dir="ltr">DBMS_RESOURCE_MANAGER.SWITCH_PLAN</code> package procedure with the <code dir="ltr">allow_scheduler_plan_switches</code> argument set to <code dir="ltr">FALSE</code>. In this case, the failure to switch resource plans is written to the window log.</p>
<p>See <a class="olink ARPLS" href="../../appdev.112/e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">OPEN_WINDOW</code> procedure and the <code dir="ltr">DBMS_RESOURCE_MANAGER.SWITCH_PLAN</code> procedure.</p>
</div>
<!-- class="sect3" -->
<a id="i1013566"></a>
<div id="ADMIN12431" class="sect3">
<h4 class="sect3">Closing Windo<a id="sthref3150"></a><a id="sthref3151"></a>ws</h4>
<p>There are two ways a window can close:</p>
<ul>
<li>
<p>Based on a schedule</p>
<p>A window will close based on the schedule defined at creation time.</p>
</li>
<li>
<p>Manually, using the <code dir="ltr">CLOSE_WINDOW</code> procedure</p>
<p>The <code dir="ltr">CLOSE_WINDOW</code> procedure will close an open window prematurely.</p>
</li>
</ul>
<p>A closed window means that it is no longer in effect. When a window is closed, the Scheduler will switch the resource plan to the one that was in effect outside the window or in the case of overlapping windows to another window. If you try to close a window that does not exist or is not open, an error is generated.</p>
<p>A job that is running will not close when the window it is running in closes unless the attribute <code dir="ltr">stop_on_window_close</code> was set to <code dir="ltr">TRUE</code> when the job was created. However, the resources allocated to the job may change because the resource plan may change.</p>
<p>When a running job has a window group as its schedule, the job will not be stopped when its window is closed if another window that is also a member of the same window group then becomes active. This is the case even if the job was created with the attribute <code dir="ltr">stop_on_window_close</code> set to <code dir="ltr">TRUE</code>.</p>
<p>When a window is closed, an entry will be added to the window log <code dir="ltr">DBA_SCHEDULER_WINDOW_LOG</code>.</p>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">CLOSE_WINDOW</code> procedure.</p>
</div>
<!-- class="sect3" -->
<a id="i1013593"></a>
<div id="ADMIN12432" class="sect3">
<h4 class="sect3">Drop<a id="sthref3152"></a><a id="sthref3153"></a>ping Windows</h4>
<p>You drop one or more windows using the <code dir="ltr">DROP_WINDOW</code> procedure or Enterprise Manager. When a window is dropped, all metadata about the window is removed from the <code dir="ltr">*_SCHEDULER_WINDOWS</code> views. All references to the window are removed from window groups.</p>
<p>You can drop several windows in one call by providing a comma-delimited list of window names or window group names to the <code dir="ltr">DROP_WINDOW</code> procedure. For example, the following statement drops both windows and window groups:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.DROP_WINDOW ('window1, window2, window3, 
   windowgroup1, windowgroup2');
END;
/
</pre>
<p>Note that if a window group name is provided, then the windows in the window group are dropped, but the window group is not dropped. To drop the window group, you must use the <code dir="ltr">DROP_WINDOW_GROUP</code> procedure.</p>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">DROP_WINDOW</code> procedure.</p>
</div>
<!-- class="sect3" -->
<a id="i1013594"></a>
<div id="ADMIN12433" class="sect3">
<h4 class="sect3">Disabling Wi<a id="sthref3154"></a><a id="sthref3155"></a>ndows</h4>
<p>You disable one or more windows using the <code dir="ltr">DISABLE</code> procedure or with Enterprise Manager. Therefore, the window will not open. However, the metadata of the window is still there, so it can be reenabled. Because the <code dir="ltr">DISABLE</code> procedure is used for several Scheduler objects, when disabling windows, they must be preceded by <code dir="ltr">SYS</code>.</p>
<p>A window can also become disabled for other reasons. For example, a window will become disabled when it is at the end of its schedule. Also, if a window points to a schedule that no longer exists, it becomes disabled.</p>
<p>If there are jobs that have the window as their schedule, you will not be able to disable the window unless you set <code dir="ltr">force</code> to <code dir="ltr">TRUE</code> in the procedure call. By default, <code dir="ltr">force</code> is set to <code dir="ltr">FALSE</code>. When the window is disabled, those jobs that have the window as their schedule will not be disabled.</p>
<p>You can disable several windows in one call by providing a comma-delimited list of window names or window group names to the <code dir="ltr">DISABLE</code> procedure call. For example, the following statement disables both windows and window groups:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.DISABLE ('sys.window1, sys.window2, 
   sys.window3, sys.windowgroup1, sys.windowgroup2');
END;
/
</pre>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">DISABLE</code> procedure.</p>
</div>
<!-- class="sect3" -->
<a id="i1013609"></a>
<div id="ADMIN12434" class="sect3">
<h4 class="sect3">Enabling <a id="sthref3156"></a><a id="sthref3157"></a>Windows</h4>
<p>You enable one or more windows using the <code dir="ltr">ENABLE</code> procedure or Enterprise Manager. An enabled window is one that can be opened. Windows are, by default, created <code dir="ltr">enabled</code>. When a window is enabled using the <code dir="ltr">ENABLE</code> procedure, a validity check is performed and only if this is successful will the window be enabled. When a window is enabled, it is logged in the window log table. Because the <code dir="ltr">ENABLE</code> procedure is used for several Scheduler objects, when enabling windows, they must be preceded by <code dir="ltr">SYS</code>.</p>
<p>You can enable several windows in one call by providing a comma-delimited list of window names. For example, the following statement enables three windows:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.ENABLE ('sys.window1, sys.window2, sys.window3');
END;
/
</pre>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about the <code dir="ltr">ENABLE</code> procedure.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1011367"></a>
<div id="ADMIN12437" class="sect2">
<h3 class="sect2">Managing Job Scheduling and Job Priorities with Window Groups<a id="sthref3158"></a></h3>
<p>Window groups provide an easy way to schedule jobs that must run during multiple time periods throughout the day, week, and so on. If you create a window group, add windows to it, and then name this window group in a job's <code dir="ltr">schedule_name</code> attribute, the job runs during all the windows in the window group.</p>
<p>Window groups reside in the <code dir="ltr">SYS</code> schema. This section introduces you to basic window group tasks, and discusses the following topics:</p>
<ul>
<li>
<p><a href="#i1013630">Window Group Tasks and Their Procedures</a></p>
</li>
<li>
<p><a href="#i1013653">Creating Window Groups</a></p>
</li>
<li>
<p><a href="#i1013654">Dropping Window Groups</a></p>
</li>
<li>
<p><a href="#i1014032">Adding a Member to a Window Group</a></p>
</li>
<li>
<p><a href="#i1014033">Removing a Member from a Window Group</a></p>
</li>
<li>
<p><a href="#i1014719">Enabling a Window Group</a></p>
</li>
<li>
<p><a href="#i1014720">Disabling a Window Group</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="schedover.htm#i1106418">"Window Groups"</a> for an overview of window groups.</div>
<a id="i1013630"></a>
<div id="ADMIN12438" class="sect3">
<h4 class="sect3">Window Group Tasks and Their Procedures</h4>
<p><a href="#g1033851">Table 29-10</a> illustrates common window group tasks and the procedures you use to handle them.</p>
<div id="ADMIN13103" class="tblformal">
<p class="titleintable"><a id="sthref3159"></a><a id="g1033851"></a>Table 29-10 Window Group Tasks and Their Procedures</p>
<table class="cellalignment1338" title="Window Group Tasks and Their Procedures" summary="Column 1 lists some common window group tasks, column 2 lists the procedures used to perform the tasks; column 3 lists the privileges required to perform the tasks." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t62">Task</th>
<th class="cellalignment1334" id="r1c2-t62">Procedure</th>
<th class="cellalignment1334" id="r1c3-t62">Privilege Needed</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t62" headers="r1c1-t62">
<p>Create a window group</p>
</td>
<td class="cellalignment1335" headers="r2c1-t62 r1c2-t62">
<p><code dir="ltr">CREATE_GROUP</code></p>
</td>
<td class="cellalignment1335" headers="r2c1-t62 r1c3-t62">
<p><code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t62" headers="r1c1-t62">
<p>Drop a window group</p>
</td>
<td class="cellalignment1335" headers="r3c1-t62 r1c2-t62">
<p><code dir="ltr">DROP_GROUP</code></p>
</td>
<td class="cellalignment1335" headers="r3c1-t62 r1c3-t62">
<p><code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t62" headers="r1c1-t62">
<p>Add a member to a window group</p>
</td>
<td class="cellalignment1335" headers="r4c1-t62 r1c2-t62">
<p><code dir="ltr">ADD_GROUP_MEMBER</code></p>
</td>
<td class="cellalignment1335" headers="r4c1-t62 r1c3-t62">
<p><code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t62" headers="r1c1-t62">
<p>Drop a member from a window group</p>
</td>
<td class="cellalignment1335" headers="r5c1-t62 r1c2-t62">
<p><code dir="ltr">REMOVE_GROUP_MEMBER</code></p>
</td>
<td class="cellalignment1335" headers="r5c1-t62 r1c3-t62">
<p><code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r6c1-t62" headers="r1c1-t62">
<p>Enable a window group</p>
</td>
<td class="cellalignment1335" headers="r6c1-t62 r1c2-t62">
<p><code dir="ltr">ENABLE</code></p>
</td>
<td class="cellalignment1335" headers="r6c1-t62 r1c3-t62">
<p><code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r7c1-t62" headers="r1c1-t62">
<p>Disable a window group</p>
</td>
<td class="cellalignment1335" headers="r7c1-t62 r1c2-t62">
<p><code dir="ltr">DISABLE</code></p>
</td>
<td class="cellalignment1335" headers="r7c1-t62 r1c3-t62">
<p><code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>See <a href="schedadmin.htm#i1011204">"Scheduler Privileges"</a> for further information regarding privileges.</p>
</div>
<!-- class="sect3" -->
<a id="i1013653"></a>
<div id="ADMIN12439" class="sect3">
<h4 class="sect3">Creating Wi<a id="sthref3160"></a><a id="sthref3161"></a>ndow Groups</h4>
<p>You create a window group by using the <code dir="ltr">DBMS_SCHEDULER.CREATE_GROUP</code> procedure, specifying a group type of '<code dir="ltr">WINDOW</code>'. You can specify the member windows of the group when you create the group, or you can add them later using the <code dir="ltr">ADD_GROUP_MEMBER</code> procedure. A window group cannot be a member of another window group. You can, however, create a window group that has no members.</p>
<p>If you create a window group and you specify a member window that does not exist, an error is generated and the window group is not created. If a window is already a member of a window group, it is not added again.</p>
<p>Window groups are created in the <code dir="ltr">SYS</code> schema. Window groups, like windows, are created with access to <code dir="ltr">PUBLIC</code>, therefore, no privileges are required to access window groups.</p>
<p>The following statement creates a window group called <code dir="ltr">downtime</code> and adds two windows (<code dir="ltr">weeknights</code> and <code dir="ltr">weekends</code>) to it:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.CREATE_GROUP (
   group_name   =&gt;  'downtime',
   group_type   =&gt;  'WINDOW',
   member       =&gt;  'weeknights, weekends');
END;
/
</pre>
<p>To verify the window group contents, issue the following queries as a user with the <code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code> privilege:</p>
<pre dir="ltr">
SELECT group_name, enabled, number_of_members FROM dba_scheduler_groups
  WHERE group_type = 'WINDOW';

GROUP_NAME     ENABLED  NUMBER_OF_MEMBERS
-------------- -------- -----------------
DOWNTIME       TRUE                     2

SELECT group_name, member_name FROM dba_scheduler_group_members;

GROUP_NAME      MEMBER_NAME
--------------- --------------------
DOWNTIME        "SYS"."WEEKENDS"
DOWNTIME        "SYS"."WEEKNIGHTS"
</pre></div>
<!-- class="sect3" -->
<a id="i1013654"></a>
<div id="ADMIN12440" class="sect3">
<h4 class="sect3">Dropping Windo<a id="sthref3162"></a><a id="sthref3163"></a>w Groups</h4>
<p>You drop one or more window groups by using the <code dir="ltr">DROP_GROUP</code> procedure. This call will drop the window group but not the windows that are members of this window group. To drop all the windows that are members of this group but not the window group itself, you can use the <code dir="ltr">DROP_WINDOW</code> procedure and provide the name of the window group to the call.</p>
<p>You can drop several window groups in one call by providing a comma-delimited list of window group names to the <code dir="ltr">DROP_GROUP</code> procedure call. You must precede each window group name with the <code dir="ltr">SYS</code> schema. For example, the following statement drops three window groups:</p>
<pre dir="ltr">
BEGIN
DBMS_SCHEDULER.DROP_GROUP('sys.windowgroup1, sys.windowgroup2, sys.windowgroup3');
END;
/
</pre></div>
<!-- class="sect3" -->
<a id="i1014032"></a>
<div id="ADMIN12441" class="sect3">
<h4 class="sect3">Adding a Member to a Window Group</h4>
<p>You add windows to a window group by using the <code dir="ltr">ADD_GROUP_MEMBER</code> procedure.</p>
<p>You can add several members to a window group in one call, by specifying a comma-delimited list of windows. For example, the following statement adds two windows to the window group <code dir="ltr">window_group1</code>:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.ADD_GROUP_MEMBER ('sys.windowgroup1','window2, window3');
END;
/
</pre>
<p>If an already open window is added to a window group, the Scheduler will not start jobs that point to this window group until the next window in the window group opens.</p>
</div>
<!-- class="sect3" -->
<a id="i1014033"></a>
<div id="ADMIN12442" class="sect3">
<h4 class="sect3">Removing a Mem<a id="sthref3164"></a>ber from a Window Group</h4>
<p>You can remove one or more windows from a window group by using the <code dir="ltr">REMOVE_GROUP_MEMBER</code> procedure. Jobs with the <code dir="ltr">stop_on_window_close</code> flag set will only be stopped when a window closes. Dropping an open window from a window group has no impact on this.</p>
<p>You can remove several members from a window group in one call by specifying a comma-delimited list of windows. For example, the following statement drops two windows:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.REMOVE_GROUP_MEMBER('sys.window_group1', 'window2, window3');
END;
/
</pre></div>
<!-- class="sect3" -->
<a id="i1014719"></a>
<div id="ADMIN12443" class="sect3">
<h4 class="sect3">Enabling a Wi<a id="sthref3165"></a><a id="sthref3166"></a>ndow Group</h4>
<p>You enable one or more window groups using the <code dir="ltr">ENABLE</code> procedure. By default, window groups are created <code dir="ltr">ENABLED</code>. For example:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.ENABLE('sys.windowgroup1, sys.windowgroup2, sys.windowgroup3');
END;
/
</pre></div>
<!-- class="sect3" -->
<a id="i1014720"></a>
<div id="ADMIN12444" class="sect3">
<h4 class="sect3">Disabling <a id="sthref3167"></a><a id="sthref3168"></a>a Window Group</h4>
<p>You disable a window group using the <code dir="ltr">DISABLE</code> procedure. A job with a disabled window group as its schedule does not run when the member windows open. Disabling a window group does not disable its member windows.</p>
<p>You can also disable several window groups in one call by providing a comma-delimited list of window group names. For example, the following statement disables three window groups:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.DISABLE('sys.windowgroup1, sys.windowgroup2, sys.windowgroup3');
END;
/
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIAFEFFA"></a>
<div id="ADMIN12470" class="sect2">
<h3 class="sect2">Allocating Resources Among Jobs Using Resource Manager</h3>
<p>The Database Resource Manager (Resource Manager) controls how resources are allocated among database sessions. It not only controls asynchronous sessions like Scheduler jobs, but also synchronous sessions like user sessions. It groups all "units of work" in the database into resource consumer groups and uses a resource plan to specify how the resources are allocated among the various consumer groups. The primary system resource that the Resource Manager allocates is CPU.</p>
<p>For Scheduler jobs, resources are allocated by first assigning each job to a job class, and then associating a job class with a consumer group. Resources are then distributed among the Scheduler jobs and other sessions within the consumer group. You can also assign relative priorities to the jobs in a job class, and resources are distributed to those jobs accordingly.</p>
<p>You can manually change the current resource plan at any time. Another way to change the current resource plan is by creating Scheduler windows. Windows have a resource plan attribute. When a window opens, the current plan is switched to the window's resource plan.</p>
<p>The Scheduler tries to limit the number of jobs that are running simultaneously so that at least some jobs can complete, rather than running a lot of jobs concurrently but without enough resources for any of them to complete.</p>
<p>The Scheduler and the Resource Manager are tightly integrated. The job coordinator obtains database resource availability from the Resource Manager. Based on that information, the coordinator determines how many jobs to start. It will only start jobs from those job classes that will have enough resources to run. The coordinator will keep starting jobs in a particular job class that maps to a consumer group until the Resource Manager determines that the maximum resource allocated for that consumer group has been reached. Therefore, there might be jobs in the job table that are ready to run but will not be picked up by the job coordinator because there are no resources to run them. Therefore, there is no guarantee that a job will run at the exact time that it was scheduled. The coordinator picks up jobs from the job table on the basis of which consumer groups still have resources available.</p>
<p>The Resource Manager continues to manage the resources that are assigned to each running job based on the specified resource plan. Keep in mind that the Resource Manager can only manage database processes. The active management of resources does not apply to external jobs.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Resource Manager is active only when CPU utilization approaches 100%.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dbrm.htm#g1021210">Chapter 27, "Managing Resources with Oracle Database Resource Manager"</a></div>
</div>
<!-- class="sect2" -->
<a id="CIAJFDIF"></a>
<div id="ADMIN12471" class="sect2">
<h3 class="sect2">Example of Resource Allocation for Jobs</h3>
<p>The following example illustrates how resources are allocated for jobs. Assume that the active resource plan is called "Night Plan" and that there are three job classes: <code dir="ltr">JC1</code>, which maps to consumer group <code dir="ltr">DW</code>; <code dir="ltr">JC2</code>, which maps to consumer group <code dir="ltr">OLTP</code>; and <code dir="ltr">JC3</code>, which maps to the default consumer group. <a href="#i1022706">Figure 29-2</a> offers a simple graphical illustration of this scenario.</p>
<div id="ADMIN13109" class="figure">
<p class="titleinfigure"><a id="i1022706"></a>Figure 29-2 Sample Resource Plan</p>
<img width="311" height="150" src="img/admin066.gif" alt="Description of Figure 29-2 follows" /><br />
<a id="sthref3169" href="img_text/admin066.htm">Description of "Figure 29-2 Sample Resource Plan"</a><br />
<br /></div>
<!-- class="figure" -->
<p>This resource plan clearly gives priority to jobs that are part of job class <code dir="ltr">JC1</code>. Consumer group <code dir="ltr">DW</code> gets 60% of the resources, thus jobs that belong to job class <code dir="ltr">JC1</code> will get 60% of the resources. Consumer group <code dir="ltr">OLTP</code> has 30% of the resources, which implies that jobs in job class <code dir="ltr">JC2</code> will get 30% of the resources. The consumer group <code dir="ltr">Other</code> specifies that all other consumer groups will be getting 10% of the resources. Therefore, all jobs that belong in job class <code dir="ltr">JC3</code> will share 10% of the resources and can get a maximum of 10% of the resources.</p>
<p>Note that resources that remain unused by one consumer group are available from use by the other consumer groups. So if the jobs in job class JC1 do not fully use the allocated 60%, the unused portion is available for use by jobs in classes JC2 and JC3. Note also that the Resource Manager does not begin to restrict resource usage at all until CPU usage reaches 100%. See <a href="dbrm.htm#g1021210">Chapter 27, "Managing Resources with Oracle Database Resource Manager"</a> for more information.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIAEACGH"></a>
<div id="ADMIN13297" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Monitoring Jobs<a id="sthref3170"></a><a id="sthref3171"></a><a id="sthref3172"></a></h2>
<p>There are several ways to monitor Scheduler jobs:</p>
<ul>
<li>
<p>Viewing the job log</p>
<p>The job log includes the data dictionary views <code dir="ltr">*_SCHEDULER_JOB_LOG</code> and <code dir="ltr">*_SCHEDULER_JOB_RUN_DETAILS</code>, where:</p>
<p>* = {<code dir="ltr">DBA</code>|<code dir="ltr">ALL</code>|<code dir="ltr">USER</code>}</p>
<p>See <a href="#CHDGIDFD">"Viewing the Job Log"</a>.</p>
</li>
<li>
<p>Querying additional data dictionary views</p>
<p>Query views such as <code dir="ltr">DBA_SCHEDULER_RUNNING_JOBS</code> and <code dir="ltr">DBA_SCHEDULER_RUNNING_CHAINS</code> to show the status and details of running jobs and chains.</p>
</li>
<li>
<p>Writing applications that receive job state events from the Scheduler</p>
<p>See <a href="#CHDJHFEC">"Monitoring Job State with Events Raised by the Scheduler"</a></p>
</li>
<li>
<p>Configuring jobs to send e-mail notifications upon a state change</p>
<p>See <a href="#CIAIEJEJ">"Monitoring Job State with E-mail Notifications"</a></p>
</li>
</ul>
<a id="CHDGIDFD"></a>
<div id="ADMIN12517" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Viewing the Job Log<a id="sthref3173"></a></h3>
<p>You can view information about job runs, job state changes, and job failures in the job log. The job log shows results for both local and remote jobs. The job log is implemented as the following two data dictionary views:</p>
<ul>
<li>
<p><code dir="ltr">*_SCHEDULER_JOB_LOG</code></p>
</li>
<li>
<p><code dir="ltr">*_SCHEDULER_JOB_RUN_DETAILS</code></p>
</li>
</ul>
<p>Depending on the logging level that is in effect, the Scheduler can make job log entries whenever a job is run and when a job is created, dropped, enabled, and so on. For a job that has a repeating schedule, the Scheduler makes multiple entries in the job log&mdash;one for each job instance. Each log entry provides information about a particular run, such as the job completion status.</p>
<p>The following example shows job log entries for a repeating job that has a value of 4 for the <code dir="ltr">max_runs</code> attribute:</p>
<pre dir="ltr">
SELECT job_name, job_class, operation, status FROM USER_SCHEDULER_JOB_LOG;

JOB_NAME         JOB_CLASS            OPERATION       STATUS
---------------- -------------------- --------------- ----------
JOB1             CLASS1               RUN             SUCCEEDED
JOB1             CLASS1               RUN             SUCCEEDED
JOB1             CLASS1               RUN             SUCCEEDED
JOB1             CLASS1               RUN             SUCCEEDED
JOB1             CLASS1               COMPLETED
</pre>
<p>You can control how frequently information is written to the job log by setting the <code dir="ltr">logging_level</code> attribute of either a job or a job class. <a href="#CHDFDFAB">Table 29-11</a> shows the possible values for <code dir="ltr">logging_level</code>.</p>
<div id="ADMIN13096" class="tblformal">
<p class="titleintable"><a id="sthref3174"></a><a id="CHDFDFAB"></a>Table 29-11 Job Logging Levels</p>
<table class="cellalignment1338" title="Job Logging Levels" summary="This table has two columns named Logging Level and Description. It describes the four possible logging levels for a job or job class." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t65">Logging Level</th>
<th class="cellalignment1334" id="r1c2-t65">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t65" headers="r1c1-t65">
<p><code dir="ltr">DBMS_SCHEDULER.LOGGING_OFF</code></p>
</td>
<td class="cellalignment1335" headers="r2c1-t65 r1c2-t65">
<p>No logging is performed.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t65" headers="r1c1-t65">
<p><code dir="ltr">DBMS_SCHEDULER.LOGGING_FAILED_RUNS</code></p>
</td>
<td class="cellalignment1335" headers="r3c1-t65 r1c2-t65">
<p>A log entry is made only if the job fails.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t65" headers="r1c1-t65">
<p><code dir="ltr">DBMS_SCHEDULER.LOGGING_RUNS</code></p>
</td>
<td class="cellalignment1335" headers="r4c1-t65 r1c2-t65">
<p>A log entry is made each time the job is run.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t65" headers="r1c1-t65">
<p><code dir="ltr">DBMS_SCHEDULER.LOGGING_FULL</code></p>
</td>
<td class="cellalignment1335" headers="r5c1-t65 r1c2-t65">
<p>A log entry is made every time the job runs and for every operation performed on a job, including create, enable/disable, update (with <code dir="ltr">SET_ATTRIBUTE</code>), stop, and drop.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>Log entries for job runs are not made until after the job run completes successfully, fails, or is stopped.</p>
<p>The following example shows job log entries for a complete job lifecycle. In this case, the logging level for the job class is <code dir="ltr">LOGGING_FULL</code>, and the job is a non-repeating job. After the first successful run, the job is enabled again, so it runs once more. It is then stopped and dropped.</p>
<pre dir="ltr">
SELECT to_char(log_date, 'DD-MON-YY HH24:MI:SS') TIMESTAMP, job_name,
  job_class, operation, status FROM USER_SCHEDULER_JOB_LOG
  WHERE job_name = 'JOB2' ORDER BY log_date;

TIMESTAMP            JOB_NAME  JOB_CLASS  OPERATION  STATUS
-------------------- --------- ---------- ---------- ---------
18-DEC-07 23:10:56   JOB2      CLASS1     CREATE
18-DEC-07 23:12:01   JOB2      CLASS1     UPDATE
18-DEC-07 23:12:31   JOB2      CLASS1     ENABLE
18-DEC-07 23:12:41   JOB2      CLASS1     RUN        SUCCEEDED
18-DEC-07 23:13:12   JOB2      CLASS1     ENABLE
18-DEC-07 23:13:18   JOB2                 RUN        STOPPED
18-DEC-07 23:19:36   JOB2      CLASS1     DROP
</pre>
<div id="ADMIN12518" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref3175"></a>
<h4 class="sect3">Run Details</h4>
<p>For every row in <code dir="ltr">*_SCHEDULER_JOB_LOG</code> for which the operation is <code dir="ltr">RUN</code>, <code dir="ltr">RETRY_RUN</code>, or <code dir="ltr">RECOVERY_RUN</code>, there is a corresponding row in the <code dir="ltr">*_SCHEDULER_JOB_RUN_DETAILS</code> view. Rows from the two different views are correlated with their <code dir="ltr">LOG_ID</code> columns. You can consult the run details views to determine why a job failed or was stopped.</p>
<pre dir="ltr">
SELECT to_char(log_date, 'DD-MON-YY HH24:MI:SS') TIMESTAMP, job_name, status,
   SUBSTR(additional_info, 1, 40) ADDITIONAL_INFO
   FROM user_scheduler_job_run_details ORDER BY log_date;

TIMESTAMP            JOB_NAME   STATUS    ADDITIONAL_INFO
-------------------- ---------- --------- ----------------------------------------
18-DEC-07 23:12:41   JOB2       SUCCEEDED
18-DEC-07 23:12:18   JOB2       STOPPED   REASON="Stop job called by user:'SYSTEM'
19-DEC-07 14:12:20   REMOTE_16  FAILED    ORA-29273: HTTP request failed ORA-06512
</pre>
<p>The run details views also contain actual job start times and durations.</p>
</div>
<!-- class="sect3" -->
<div id="ADMIN12519" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref3176"></a>
<h4 class="sect3">Precedence of Logging Levels in Jobs and Job Classes</h4>
<p>Both jobs and job classes have a <code dir="ltr">logging_level</code> attribute, with possible values listed in <a href="#CHDFDFAB">Table 29-11</a>. The default logging level for job classes is <code dir="ltr">LOGGING_RUNS</code>, and the default level for individual jobs is <code dir="ltr">LOGGING_OFF</code>. If the logging level of the job class is higher than that of a job in the class, then the logging level of the job class takes precedence. Thus, by default, all job runs are recorded in the job log.</p>
<p>For job classes that have very short and highly frequent jobs, the overhead of recording every single run might be too much and you might choose to turn the logging off or set logging to occur only when jobs fail. However, you might prefer to have a complete audit trail of everything that happens with jobs in a specific class, in which case you would enable full logging for that class.</p>
<p>To ensure that there is an audit trail for all jobs, the individual job creator must not be able to turn logging off. The Scheduler supports this by making the class-specified level the minimum level at which job information is logged. A job creator can only enable more logging for an individual job, not less. Thus, leaving all individual job logging levels set to <code dir="ltr">LOGGING_OFF</code> ensures that all jobs in a class get logged as specified in the class.</p>
<p>This functionality is provided for debugging purposes. For example, if the class-specific level is set to record job runs and logging is turned off at the job level, the Scheduler still logs job runs. If, however, the job creator turns on full logging and the class-specific level is set to record runs only, the higher logging level of the job takes precedence and all operations on this individual job are logged. This way, an end user can test his job by turning on full logging.</p>
<p>To set the logging level of an individual job, you must use the <code dir="ltr">SET_ATTRIBUTE</code> procedure on that job. For example, to turn on full logging for a job called <code dir="ltr">mytestjob</code>, issue the following statement:</p>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.SET_ATTRIBUTE (
   'mytestjob', 'logging_level', DBMS_SCHEDULER.LOGGING_FULL);
END;
/
</pre>
<p>Only a user with the <code dir="ltr">MANAGE</code> <code dir="ltr">SCHEDULER</code> privilege can set the logging level of a job class.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="schedadmin.htm#i1007245">"Monitoring and Managing Window and Job Logs"</a> for more information about setting the job class logging level</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIABJJEE"></a>
<div id="ADMIN13386" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Monitoring Multiple Destination Jobs</h3>
<p>For multiple-destination jobs, the overall parent job state depends on the outcome of the child jobs. For example, if all child jobs succeed, the parent job state is set to <code dir="ltr">SUCCEEDED</code>. If all fail, the parent job state is set to <code dir="ltr">FAILED</code>. If some fail and some succeed, the parent job state is set to <code dir="ltr">SOME</code> <code dir="ltr">FAILED</code>.</p>
<p>Due to situations that might arise on some destinations that delay the start of child jobs, there might be a significant delay before the parent job state is finalized. For repeating multiple-destination jobs, there might even be a situation in which some child jobs are on their next scheduled run while others are still working on the previous scheduled run. In this case, the parent job state is set to <code dir="ltr">INCOMPLETE</code>. Eventually, however, lagging child jobs may catch up to their siblings, in which case the final state of the parent job can be determined.</p>
<p>Table <a href="#CIAHFIBI">Table 29-12</a> lists the contents of the job monitoring views for multiple-destination jobs.</p>
<div id="ADMIN13387" class="tblformal">
<p class="titleintable"><a id="sthref3177"></a><a id="CIAHFIBI"></a>Table 29-12 Scheduler Data Dictionary View Contents for Multiple-Destination Jobs</p>
<table class="cellalignment1338" title="Scheduler Data Dictionary View Contents for Multiple-Destination Jobs" summary="This table has 2 columns: Column one names one of the scheduler data dictionary views, and column 2 explains what&rsquo;s in that view for multi-dest jobs." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t67">View Name</th>
<th class="cellalignment1334" id="r1c2-t67">Contents</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t67" headers="r1c1-t67">
<p><code dir="ltr">*_SCHEDULER_JOBS</code></p>
</td>
<td class="cellalignment1335" headers="r2c1-t67 r1c2-t67">
<p>One entry for the parent job</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t67" headers="r1c1-t67">
<p><code dir="ltr">*_SCHEDULER_RUNNING_JOBS</code></p>
</td>
<td class="cellalignment1335" headers="r3c1-t67 r1c2-t67">
<p>One entry for the parent job when it starts and an entry for each running child job</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t67" headers="r1c1-t67">
<p><code dir="ltr">*_SCHEDULER_JOB_LOG</code></p>
</td>
<td class="cellalignment1335" headers="r4c1-t67 r1c2-t67">
<p>One entry for the parent job when it starts (operation = '<code dir="ltr">MULTIDEST_START</code>'), one entry for each child job when the child job completes, and one entry for the parent job when the last child job completes and thus the parent completes (operation = '<code dir="ltr">MULTIDEST_RUN</code>')</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t67" headers="r1c1-t67">
<p><code dir="ltr">*_SCHEDULER_JOB_RUN_DETAILS</code></p>
</td>
<td class="cellalignment1335" headers="r5c1-t67 r1c2-t67">
<p>One entry for each child job when the child job completes, and one entry for the parent job when the last child job completes and thus the parent completes</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r6c1-t67" headers="r1c1-t67">
<p><code dir="ltr">*_SCHEDULER_JOB_DESTS</code></p>
</td>
<td class="cellalignment1335" headers="r6c1-t67 r1c2-t67">
<p>One entry for each destination of the parent job</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a id="sthref3178"></a>In the <code dir="ltr">*_SCHEDULER_JOB_DESTS</code> views, you can determine the unique job destination ID (<code dir="ltr">job_dest_id</code>) that is assigned to each child job. This ID represents the unique combination of a job, a credential, and a destination. You can use this ID with the <code dir="ltr">STOP_JOB</code> procedure. You can also monitor the job state of each child job with the <code dir="ltr">*_SCHEDULER_JOB_DESTS</code> views.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="schedover.htm#CHDCIEII">"Multiple-Destination Jobs"</a></p>
</li>
<li>
<p><a href="#CIAEBDIA">"Creating Multiple-Destination Jobs"</a></p>
</li>
<li>
<p><a href="schedadmin.htm#i1006377">"Scheduler Data Dictionary Views"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDJHFEC"></a>
<div id="ADMIN12445" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Monitoring Job State with Events Raised by the Scheduler<a id="sthref3179"></a></h3>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CIAHFBFI">About Job State Events</a></p>
</li>
<li>
<p><a href="#CHDIDCGJ">Altering a Job to Raise Job State Events</a></p>
</li>
<li>
<p><a href="#CIAJAAHG">Consuming Job State Events with your Application</a></p>
</li>
</ul>
<a id="CIAHFBFI"></a>
<div id="ADMIN13298" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About Job State Events</h4>
<p>You can configure a job so that the Scheduler raises an event when the job changes state. The Scheduler can raise an event when a job starts, when a job completes, when a job exceeds its allotted run time, and so on. The consumer of the event is your application, which takes some action in response to the event. For example, if due to a high system load, a job is still not started 30 minutes after its scheduled start time, the Scheduler can raise an event that causes a handler application to stop lower priority jobs to free up system resources. The Scheduler can raise job state events for local (regular) jobs, remote database jobs, local external jobs, and remote external jobs.</p>
<p><a href="#CIAHCEBE">Table 29-13</a> describes the job state event types raised by the Scheduler.</p>
<div id="ADMIN13299" class="tblformal">
<p class="titleintable"><a id="sthref3180"></a><a id="CIAHCEBE"></a>Table 29-13 Job State Event Types Raised by the Scheduler</p>
<table class="cellalignment1338" title="Job State Event Types Raised by the Scheduler" summary="This table describes the event types that are bit flags in the raise_events attribute" dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t69">Event Type</th>
<th class="cellalignment1334" id="r1c2-t69">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t69" headers="r1c1-t69">
<p><code dir="ltr">job_all_events</code></p>
</td>
<td class="cellalignment1335" headers="r2c1-t69 r1c2-t69">
<p>Not an event, but a constant that provides an easy way for you to enable all events</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t69" headers="r1c1-t69">
<p><code dir="ltr">job_broken</code></p>
</td>
<td class="cellalignment1335" headers="r3c1-t69 r1c2-t69">
<p>The job has been disabled and has changed to the <code dir="ltr">BROKEN</code> state because it exceeded the number of failures defined by the <code dir="ltr">max_failures</code> job attribute</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t69" headers="r1c1-t69">
<p><code dir="ltr">job_chain_stalled</code></p>
</td>
<td class="cellalignment1335" headers="r4c1-t69 r1c2-t69">
<p>A job running a chain was put into the <code dir="ltr">CHAIN_STALLED</code> state. A running chain becomes stalled if there are no steps running or scheduled to run and the chain <code dir="ltr">evaluation_interval</code> is set to <code dir="ltr">NULL</code>. No progress will be made in the chain unless there is manual intervention.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t69" headers="r1c1-t69">
<p><code dir="ltr">job_completed</code></p>
</td>
<td class="cellalignment1335" headers="r5c1-t69 r1c2-t69">
<p>The job completed because it reached its <code dir="ltr">max_runs</code> or <code dir="ltr">end_date</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r6c1-t69" headers="r1c1-t69">
<p><code dir="ltr">job_disabled</code></p>
</td>
<td class="cellalignment1335" headers="r6c1-t69 r1c2-t69">
<p>The job was disabled by the Scheduler or by a call to <code dir="ltr">SET_ATTRIBUTE</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r7c1-t69" headers="r1c1-t69">
<p><code dir="ltr">job_failed</code></p>
</td>
<td class="cellalignment1335" headers="r7c1-t69 r1c2-t69">
<p>The job failed, either by throwing an error or by abnormally terminating</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r8c1-t69" headers="r1c1-t69">
<p><code dir="ltr">job_over_max_dur</code></p>
</td>
<td class="cellalignment1335" headers="r8c1-t69 r1c2-t69">
<p>The job exceeded the maximum run duration specified by its <code dir="ltr">max_run_duration</code> attribute.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r9c1-t69" headers="r1c1-t69">
<p><code dir="ltr">job_run_completed</code></p>
</td>
<td class="cellalignment1335" headers="r9c1-t69 r1c2-t69">
<p>A job run either failed, succeeded, or was stopped</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r10c1-t69" headers="r1c1-t69">
<p><code dir="ltr">job_sch_lim_reached</code></p>
</td>
<td class="cellalignment1335" headers="r10c1-t69 r1c2-t69">
<p>The job's schedule limit was reached. The job was not started because the delay in starting the job exceeded the value of the <code dir="ltr">schedule_limit</code> job attribute.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r11c1-t69" headers="r1c1-t69">
<p><code dir="ltr">job_started</code></p>
</td>
<td class="cellalignment1335" headers="r11c1-t69 r1c2-t69">
<p>The job started</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r12c1-t69" headers="r1c1-t69">
<p><code dir="ltr">job_stopped</code></p>
</td>
<td class="cellalignment1335" headers="r12c1-t69 r1c2-t69">
<p>The job was stopped by a call to <code dir="ltr">STOP_JOB</code></p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r13c1-t69" headers="r1c1-t69">
<p><code dir="ltr">job_succeeded</code></p>
</td>
<td class="cellalignment1335" headers="r13c1-t69 r1c2-t69">
<p>The job completed successfully</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>You enable the raising of job state events by setting the <code dir="ltr">raise_events</code> job attribute. By default, a job does not raise any job state events.</p>
<p>The Scheduler uses Oracle Streams Advanced Queuing to raise events. When raising a job state change event, the Scheduler enqueues a message onto a default event queue. Your applications subscribe to this queue, dequeue event messages, and take appropriate actions.</p>
<p>After you enable job state change events for a job, the Scheduler raises these events by enqueuing messages onto the Scheduler event queue <code dir="ltr">SYS.SCHEDULER$_EVENT_QUEUE</code>. This queue is a secure queue, so depending on your application, you may have to configure the queue to enable certain users to perform operations on it. See <a class="olink STRMS" href="../e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information on secure queues.</p>
<p>To prevent unlimited growth of the Scheduler event queue, events raised by the Scheduler expire in 24 hours by default. (Expired events are deleted from the queue.) You can change this expiry time by setting the <code dir="ltr">event_expiry_time</code> Scheduler attribute with the <code dir="ltr">SET_SCHEDULER_ATTRIBUTE</code> procedure. See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CHDIDCGJ"></a>
<div id="ADMIN12446" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Altering a Job to Raise Job State Events</h4>
<p>To enable job state events to be raised for a job, you use the <code dir="ltr">SET_ATTRIBUTE</code> procedure to turn on bit flags in the <code dir="ltr">raise_events</code> job attribute. Each bit flag represents a different job state to raise an event for. For example, turning on the least significant bit enables <code dir="ltr">job</code> <code dir="ltr">started</code> events to be raised. To enable multiple state change event types in one call, you add the desired bit flag values together and supply the result as an argument to <code dir="ltr">SET_ATTRIBUTE</code>.</p>
<p>The following example enables multiple state change events for job <code dir="ltr">dw_reports</code>. It enables the following event types, both of which indicate some kind of error.</p>
<ul>
<li>
<p><code dir="ltr">JOB_FAILED</code></p>
</li>
<li>
<p><code dir="ltr">JOB_SCH_LIM_REACHED</code></p>
</li>
</ul>
<pre dir="ltr">
BEGIN
  DBMS_SCHEDULER.SET_ATTRIBUTE('dw_reports', 'raise_events',
   DBMS_SCHEDULER.JOB_FAILED + DBMS_SCHEDULER.JOB_SCH_LIM_REACHED);
END;
/
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
You do not need to enable the <code dir="ltr">JOB_OVER_MAX_DUR</code> event with the <code dir="ltr">raise_events</code> job attribute; it is always enabled.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The discussion of <code dir="ltr">DBMS_SCHEDULER</code>.<code dir="ltr">SET_ATTRIBUTE</code> in <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for the names and values of job state bit flags</div>
</div>
<!-- class="sect3" -->
<a id="CIAJAAHG"></a>
<div id="ADMIN12447" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Consuming Job State Events with your Application</h4>
<p>To consume job state events, your application must subscribe to the Scheduler event queue <code dir="ltr">SYS.SCHEDULER$_EVENT_QUEUE</code>. This queue is a secure queue and is owned by <code dir="ltr">SYS</code>. To create a subscription to this queue for a user, do the following:</p>
<ol>
<li>
<p>Log in to the database as the <code dir="ltr">SYS</code> user or as a user with the <code dir="ltr">MANAGE</code> <code dir="ltr">ANY</code> <code dir="ltr">QUEUE</code> privilege.</p>
</li>
<li>
<p>Subscribe to the queue using a new or existing agent.</p>
</li>
<li>
<p>Run the package procedure <code dir="ltr">DBMS_AQADM.ENABLE_DB_ACCESS</code> as follows:</p>
<pre dir="ltr">
DBMS_AQADM.ENABLE_DB_ACCESS(<span class="italic">agent_name</span>, <span class="italic">db_username</span>);
</pre>
<p>where <code dir="ltr"><span class="codeinlineitalic">agent_name</span></code> references the agent that you used to subscribe to the events queue, and <code dir="ltr"><span class="codeinlineitalic">db_username</span></code> is the user for whom you want to create a subscription.</p>
</li>
</ol>
<p>There is no need to grant dequeue privileges to the user. The dequeue privilege is granted on the Scheduler event queue to <code dir="ltr">PUBLIC</code>.</p>
<p>As an alternative, the user can subscribe to the Scheduler event queue using the <code dir="ltr">ADD_EVENT_QUEUE_SUBSCRIBER</code> procedure, as shown in the following example:</p>
<pre dir="ltr">
DBMS_SCHEDULER.ADD_EVENT_QUEUE_SUBSCRIBER(<span class="italic">subscriber_name</span>);
</pre>
<p>where <code dir="ltr"><span class="codeinlineitalic">subscriber_name</span></code> is the name of the Oracle Streams Advanced Queuing (AQ) agent to be used to subscribe to the Scheduler event queue. (If it is <code dir="ltr">NULL</code>, an agent is created whose name is the user name of the calling user.) This call both creates a subscription to the Scheduler event queue and grants the user permission to dequeue using the designated agent. The subscription is rule-based. The rule permits the user to see only events raised by jobs that the user owns, and filters out all other messages. After the subscription is in place, the user can either poll for messages at regular intervals or register with AQ for notification.</p>
<p>See <a class="olink ADQUE" href="../e11013/toc.htm"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a> for more information.</p>
<p class="subhead2"><a id="ADMIN12679"></a>Scheduler Event Queue</p>
<p>The Scheduler event queue <code dir="ltr">SYS.SCHEDULER$_EVENT_QUEUE</code> is of type <code dir="ltr">scheduler$_event_info</code>. See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for details on this type.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIAIEJEJ"></a>
<div id="ADMIN13300" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Monitoring Job State with E-mail Notification<a id="sthref3181"></a><a id="sthref3182"></a><a id="sthref3183"></a>s</h3>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#CIAFGIHH">About E-mail Notifications</a></p>
</li>
<li>
<p><a href="#CIACIFBF">Adding E-mail Notifications for a Job</a></p>
</li>
<li>
<p><a href="#CIAJJAJE">Removing E-mail Notifications for a Job</a></p>
</li>
<li>
<p><a href="#CIACIGDF">Viewing Information About E-mail Notifications</a></p>
</li>
</ul>
<a id="CIAFGIHH"></a>
<div id="ADMIN13301" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About E-mail Notifications</h4>
<p>You can configure a job to send e-mail notifications when it changes state. The job state events for which e-mails can be sent are listed in <a href="#CIAHCEBE">Table 29-13</a>. E-mail notifications can be sent to multiple recipients, and can be triggered by any event in a list of job state events that you specify. You can also provide a filter condition, and only job state events that match the filter condition generate notifications. You can include variables like job owner, job name, event type, error code, and error message in both the subject and body of the message. The Scheduler automatically sets values for these variables before sending the e-mail notification.</p>
<p>You can configure many job state e-mail notifications for a single job. The notifications can differ by job state event list, recipients, and filter conditions.</p>
<p>For example, you can configure a job to send an e-mail to both the principle DBA and one of the senior DBAs whenever the job fails with error code 600 or 700. You can also configure the same job to send a notification to only the principle DBA if the job fails to start at its scheduled time.</p>
<p>Before you can configure jobs to send e-mail notifications, you must set the Scheduler attribute <code dir="ltr">email_server</code> to the address of the SMTP server to use to send the e-mail. You may also optionally set the Scheduler attribute <code dir="ltr">email_sender</code> to a default sender e-mail address for those jobs that do not specify a sender.</p>
<p>The Scheduler includes support for the SSL and TLS protocols when communicating with the SMTP server. The Scheduler also supports SMTP servers that require authentication.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="schedadmin.htm#CHDCCDFD">"Setting Scheduler Preferences"</a> for details about setting e-mail notification&ndash;related attributes</div>
</div>
<!-- class="sect3" -->
<a id="CIACIFBF"></a>
<div id="ADMIN13302" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Adding E-mail Notifications for a Job</h4>
<p>You use the <code dir="ltr">DBMS_SCHEDULER.ADD_JOB_EMAIL_NOTIFICATION</code> package procedure to add e-mail notifications for a job.</p>
<pre dir="ltr">
BEGIN
 DBMS_SCHEDULER.ADD_JOB_EMAIL_NOTIFICATION (
  job_name   =&gt;  'EOD_JOB',
  recipients =&gt;  'jsmith@example.com, rjones@example.com',
  sender     =&gt;  'do_not_reply@example.com',
  subject    =&gt;  'Scheduler Job Notification-%job_owner%.%job_name%-%event_type%',
  body       =&gt;   '%event_type% occurred at %event_timestamp%. %error_message%',
  events     =&gt;  'JOB_FAILED, JOB_BROKEN, JOB_DISABLED, JOB_SCH_LIM_REACHED');
END;
/
</pre>
<p>Note the variables, enclosed in the '%' character, used in the <code dir="ltr">subject</code> and <code dir="ltr">body</code> arguments. When you specify multiple recipients and multiple events, each recipient is notified when any of the specified events is raised. You can verify this by querying the view <code dir="ltr">USER_SCHEDULER_NOTIFICATIONS</code>.</p>
<pre dir="ltr">
SELECT JOB_NAME, RECIPIENT, EVENT FROM USER_SCHEDULER_NOTIFICATIONS;

JOB_NAME    RECIPIENT            EVENT
----------- -------------------- -------------------
EOD_JOB     jsmith@example.com   JOB_FAILED
EOD_JOB     jsmith@example.com   JOB_BROKEN
EOD_JOB     jsmith@example.com   JOB_SCH_LIM_REACHED
EOD_JOB     jsmith@example.com   JOB_DISABLED
EOD_JOB     rjones@example.com   JOB_FAILED
EOD_JOB     rjones@example.com   JOB_BROKEN
EOD_JOB     rjones@example.com   JOB_SCH_LIM_REACHED
EOD_JOB     rjones@example.com   JOB_DISABLED
</pre>
<p>You call <code dir="ltr">ADD_JOB_EMAIL_NOTIFICATION</code> once for each different set of notifications that you want to configure for a job. You must specify <code dir="ltr">job_name</code> and <code dir="ltr">recipients</code>. All other arguments have defaults. The default <code dir="ltr">sender</code> is defined by a Scheduler attribute, as described in the previous section. See the <code dir="ltr">ADD_JOB_EMAIL_NOTIFICATION</code> procedure in <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for defaults for the <code dir="ltr">subject</code>, <code dir="ltr">body</code>, and <code dir="ltr">events</code> arguments.</p>
<p>The following example configures an additional e-mail notification for the same job for a different event. This example accepts the defaults for the <code dir="ltr">sender</code>, <code dir="ltr">subject</code>, and <code dir="ltr">body</code> arguments.</p>
<pre dir="ltr">
BEGIN
 DBMS_SCHEDULER.ADD_JOB_EMAIL_NOTIFICATION (
  job_name         =&gt;  'EOD_JOB',
  recipients       =&gt;  'jsmith@example.com',
  events           =&gt;  'JOB_OVER_MAX_DUR');
END;
/
</pre>
<p>This example could have also omitted the <code dir="ltr">events</code> argument to accept event defaults.</p>
<p>The next example is similar to the first, except that it uses a filter condition to specify that an e-mail notification is to be sent only when the error number that causes the job to fail is 600 or 700.</p>
<pre dir="ltr">
BEGIN
 DBMS_SCHEDULER.ADD_JOB_EMAIL_NOTIFICATION (
  job_name         =&gt; 'EOD_JOB',
  recipients       =&gt; 'jsmith@example.com, rjones@example.com',
  sender           =&gt; 'do_not_reply@example.com',
  subject          =&gt; 'Job Notification-%job_owner%.%job_name%-%event_type%',
  body             =&gt;  '%event_type% at %event_timestamp%. %error_message%',
  events           =&gt; 'JOB_FAILED',
  filter_condition =&gt; ':event.error_code=600 or :event.error_code=700');
END;
/
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The <code dir="ltr">ADD_JOB_EMAIL_NOTIFICATION</code> procedure in <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></div>
</div>
<!-- class="sect3" -->
<a id="CIAJJAJE"></a>
<div id="ADMIN13303" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Removing E-mail Notifications for a Job</h4>
<p>You use the <code dir="ltr">DBMS_SCHEDULER.REMOVE_JOB_EMAIL_NOTIFICATION</code> package procedure to remove e-mail notifications for a job.</p>
<pre dir="ltr">
BEGIN
 DBMS_SCHEDULER.REMOVE_JOB_EMAIL_NOTIFICATION (
  job_name   =&gt;  'EOD_JOB',
  recipients =&gt;  'jsmith@example.com, rjones@example.com',
  events     =&gt;  'JOB_DISABLED, JOB_SCH_LIM_REACHED');
END;
/
</pre>
<p>When you specify multiple recipients and multiple events, the notification for each specified event is removed for each recipient. Running the same query as that of the previous section, the results are now the following:</p>
<pre dir="ltr">
SELECT JOB_NAME, RECIPIENT, EVENT FROM USER_SCHEDULER_NOTIFICATIONS;

JOB_NAME    RECIPIENT            EVENT
----------- -------------------- -------------------
EOD_JOB     jsmith@example.com   JOB_FAILED
EOD_JOB     jsmith@example.com   JOB_BROKEN
EOD_JOB     rjones@example.com   JOB_FAILED
EOD_JOB     rjones@example.com   JOB_BROKEN
</pre>
<p>Additional rules for specifying <code dir="ltr">REMOVE_JOB_EMAIL_NOTIFICATION</code> arguments are as follows:</p>
<ul>
<li>
<p>If you leave the <code dir="ltr">events</code> argument <code dir="ltr">NULL</code>, notifications for all events for the specified recipients are removed.</p>
</li>
<li>
<p>If you leave <code dir="ltr">recipients</code> <code dir="ltr">NULL</code>, notifications for all recipients for the specified events are removed.</p>
</li>
<li>
<p>If you leave both <code dir="ltr">recipients</code> and <code dir="ltr">events</code> <code dir="ltr">NULL</code>, then all notifications for the job are removed.</p>
</li>
<li>
<p>If you include a recipient and event for which you did not previously create a notification, no error is generated.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The <code dir="ltr">REMOVE_JOB_EMAIL_NOTIFICATION</code> procedure in <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></div>
</div>
<!-- class="sect3" -->
<a id="CIACIGDF"></a>
<div id="ADMIN13304" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Viewing Information About E-mail Notifications</h4>
<p>As demonstrated in the previous sections, you can view information about current e-mail notifications by querying the views <code dir="ltr">*_SCHEDULER_NOTIFICATIONS</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN20763" href="../../server.112/e40402/statviews_2047.htm#REFRN20763"><span class="italic">Oracle Database Reference</span></a> for details on these views</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1326">
<tr>
<td class="cellalignment1335">
<table class="cellalignment1331">
<tr>
<td class="cellalignment1330"><a href="schedover.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1330"><a href="schedadmin.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1337">
<table class="cellalignment1329">
<tr>
<td class="cellalignment1330"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1330"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1330"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1330"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1330"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1330"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
