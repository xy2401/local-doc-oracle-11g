<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Managing Tablespaces</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1055" />
<meta name="dcterms.created" content="2015-05-05T8:27:35Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Administrator's Guide" />
<meta name="dcterms.identifier" content="E25494-07" />
<meta name="dcterms.isVersionOf" content="ADMIN" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="archredo.htm" title="Previous" type="text/html" />
<link rel="Next" href="dfiles.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25494.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">22/49</span> <!-- End Header -->
<div id="ADMIN011" class="chapter"><a id="g1029288"></a> <a id="i1010516"></a>
<h1 class="chapter"><span class="secnum">14</span> Managing Tablespaces</h1>
<p>In this chapter:</p>
<ul>
<li>
<p><a href="#i1006157">Guidelines for Managing Tablespaces</a></p>
</li>
<li>
<p><a href="#i1006225">Creating Tablespaces</a></p>
</li>
<li>
<p><a href="#i1006699">Specifying Nonstandard Block Sizes for Tablespaces</a></p>
</li>
<li>
<p><a href="#i1006743">Controlling the Writing of Redo Records</a></p>
</li>
<li>
<p><a href="#i1006770">Altering Tablespace Availability</a></p>
</li>
<li>
<p><a href="#i1010339">Using Read-Only Tablespaces</a></p>
</li>
<li>
<p><a href="#BABDFCAE">Altering and Maintaining Tablespaces</a></p>
</li>
<li>
<p><a href="#i1009261">Renaming Tablespaces</a></p>
</li>
<li>
<p><a href="#i1007008">Dropping Tablespaces</a></p>
</li>
<li>
<p><a href="#i1011659">Managing the SYSAUX Tablespace</a></p>
</li>
<li>
<p><a href="#i1007031">Diagnosing and Repairing Locally Managed Tablespace Problems</a></p>
</li>
<li>
<p><a href="#i1007147">Migrating the SYSTEM Tablespace to a Locally Managed Tablespace</a></p>
</li>
<li>
<p><a href="#i1007169">Transporting Tablespaces Between Databases</a></p>
</li>
<li>
<p><a href="#i1007631">Tablespace Data Dictionary Views</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT402" href="../../server.112/e40540/logical.htm#CNCPT402"><span class="italic">Oracle Database Concepts</span></a> for a complete discussion of database structure, space management, tablespaces, and data files</p>
</li>
<li>
<p><a href="omf.htm#g1018000">Chapter 17, "Using Oracle Managed Files"</a> for information about creating data files and temp files that are both created and managed by the Oracle Database server</p>
</li>
</ul>
</div>
<a id="i1006157"></a>
<div id="ADMIN11356" class="sect1">
<h2 class="sect1">Guidelines for Managing Tablespaces<a id="sthref1506"></a></h2>
<p>A tablespace is a database storage unit that groups related logical structures together. The database data files are stored in tablespaces. Before working with tablespaces of an Oracle Database, familiarize yourself with the guidelines provided in the following sections:</p>
<ul>
<li>
<p><a href="#i1006183">Using Multiple Tablespaces</a></p>
</li>
<li>
<p><a href="#i1106207">Assigning Tablespace Quotas to Users</a></p>
</li>
</ul>
<a id="i1006183"></a>
<div id="ADMIN11357" class="sect2">
<h3 class="sect2">Using Multiple Tablespaces</h3>
<p><a id="sthref1507"></a>Using multiple tablespaces allows you more flexibility in performing database operations. When a database has multiple tablespaces, you can:</p>
<ul>
<li>
<p>Separate user data from data dictionary data to reduce I/O contention.</p>
</li>
<li>
<p>Separate data of one application from the data of another to prevent multiple applications from being affected if a tablespace must be taken offline.</p>
</li>
<li>
<p>Store the data files of different tablespaces on different disk drives to reduce I/O contention.</p>
</li>
<li>
<p>Take individual tablespaces offline while others remain online, providing better overall availability.</p>
</li>
<li>
<p>Optimizing tablespace use by reserving a tablespace for a particular type of database use, such as high update activity, read-only activity, or temporary segment storage.</p>
</li>
<li>
<p>Back up individual tablespaces.</p>
</li>
</ul>
<p>Some operating systems set a limit on the number of files that can be open simultaneously. Such limits can affect the number of tablespaces that can be simultaneously online. To avoid exceeding your operating system limit, plan your tablespaces efficiently. Create only enough tablespaces to fulfill your needs, and create these tablespaces with as few files as possible. If you must increase the size of a tablespace, then add one or two large data files, or create data files with autoextension enabled, rather than creating many small data files.</p>
<p>Review your data in light of these factors and decide how many tablespaces you need for your database design.</p>
</div>
<!-- class="sect2" -->
<a id="i1106207"></a>
<div id="ADMIN11358" class="sect2">
<h3 class="sect2">Assigning Tablespace Quotas to Users</h3>
<p><a id="sthref1508"></a><a id="sthref1509"></a><a id="sthref1510"></a><a id="sthref1511"></a>Grant to users who will be creating tables, clusters, materialized views, indexes, and other objects the privilege to create the object and a <span class="bold">quota</span> (space allowance or limit) in the tablespace intended to hold the object segment.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For PL/SQL objects such as packages, procedures, and functions, users only need the privileges to create the objects. No explicit tablespace quota is required to create these PL/SQL objects.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DBSEG002" href="../../network.112/e36292/users.htm#DBSEG002"><span class="italic">Oracle Database Security Guide</span></a> for information about creating users and assigning tablespace quotas.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006225"></a>
<div id="ADMIN11359" class="sect1">
<h2 class="sect1">Creating Tablespaces<a id="sthref1512"></a><a id="sthref1513"></a><a id="sthref1514"></a><a id="sthref1515"></a><a id="sthref1516"></a></h2>
<p>Before you can create a tablespace, you must create a database to contain it. The primary tablespace in any database is the <code dir="ltr">SYSTEM</code> tablespace, which contains information basic to the functioning of the database server, such as the data dictionary and the system rollback segment. The <code dir="ltr">SYSTEM</code> tablespace is the first tablespace created at database creation. It is managed as any other tablespace, but requires a higher level of privilege and is restricted in some ways. For example, you cannot rename or drop the <code dir="ltr">SYSTEM</code> tablespace or take it offline.</p>
<p>The <code dir="ltr">SYSAUX</code> tablespace, which acts as an auxiliary tablespace to the <code dir="ltr">SYSTEM</code> tablespace, is also always created when you create a database. It contains the schemas used by various Oracle products and features, so that those products do not require their own tablespaces. As for the <code dir="ltr">SYSTEM</code> tablespace, management of the <code dir="ltr">SYSAUX</code> tablespace requires a higher level of security and you cannot rename or drop it. The management of the <code dir="ltr">SYSAUX</code> tablespace is discussed separately in <a href="#i1011659">"Managing the SYSAUX Tablespace"</a>.</p>
<p>The steps for creating tablespaces vary by operating system, but the first step is always to use your operating system to create a directory structure in which your data files will be allocated. On most operating systems, you specify the size and fully specified filenames of data files when you create a new tablespace or alter an existing tablespace by adding data files. Whether you are creating a new tablespace or modifying an existing one, the database automatically allocates and formats the data files as specified.</p>
<p>To create a new tablespace, use the SQL statement <code dir="ltr">CREATE TABLESPACE</code> or <code dir="ltr">CREATE TEMPORARY TABLESPACE</code>. You must have the <code dir="ltr">CREATE TABLESPACE</code> system privilege to create a tablespace. Later, you can use the <code dir="ltr">ALTER TABLESPACE</code> or <code dir="ltr">ALTER DATABASE</code> statements to alter the tablespace. You must have the <code dir="ltr">ALTER TABLESPACE</code> or <code dir="ltr">ALTER DATABASE</code> system privilege, correspondingly.</p>
<p>You can also use the <code dir="ltr">CREATE UNDO TABLESPACE</code> statement to create a special type of tablespace called an <span class="bold">undo tablespace</span>, which is specifically designed to contain undo records. These are records generated by the database that are used to roll back, or undo, changes to the database for recovery, read consistency, or as requested by a <code dir="ltr">ROLLBACK</code> statement. Creating and managing undo tablespaces is the subject of <a href="undo.htm#g1012303">Chapter 16, "Managing Undo"</a>.</p>
<p>The creation and maintenance of permanent and temporary tablespaces are discussed in the following sections:</p>
<ul>
<li>
<p><a href="#i1013496">Locally Managed Tablespaces</a></p>
</li>
<li>
<p><a href="#i1010733">Bigfile Tablespaces</a></p>
</li>
<li>
<p><a href="#CIHGCFBB">Compressed Tablespaces</a></p>
</li>
<li>
<p><a href="#BABBJGAF">Encrypted Tablespaces</a></p>
</li>
<li>
<p><a href="#i1013552">Temporary Tablespaces</a></p>
</li>
<li>
<p><a href="#i1008609">Multiple Temporary Tablespaces: Using Tablespace Groups</a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="create.htm#g1034097">Chapter 2, "Creating and Configuring an Oracle Database"</a> and your Oracle Database installation documentation for your operating system for information about tablespaces that are created at database creation</p>
</li>
<li>
<p><a class="olink SQLRF" href="../e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about the syntax and semantics of the <code dir="ltr">CREATE TABLESPACE</code>, <code dir="ltr">CREATE TEMPORARY TABLESPACE</code>, <code dir="ltr">ALTER TABLESPACE</code>, and <code dir="ltr">ALTER DATABASE</code> statements.</p>
</li>
<li>
<p><a href="create.htm#i1014072">"Specifying Database Block Sizes"</a> for information about initialization parameters necessary to create tablespaces with nonstandard block sizes</p>
</li>
</ul>
</div>
</li>
</ul>
<a id="i1013496"></a>
<div id="ADMIN11360" class="sect2">
<h3 class="sect2">Locally Managed Tablespa<a id="sthref1517"></a>ces<a id="sthref1518"></a></h3>
<p>Locally managed tablespaces track all extent information in the tablespace itself by using bitmaps, resulting in the following benefits:</p>
<ul>
<li>
<p>Fast, concurrent space operations. Space allocations and deallocations modify locally managed resources (bitmaps stored in header files).</p>
</li>
<li>
<p>Enhanced performance</p>
</li>
<li>
<p>Readable standby databases are allowed, because locally managed temporary tablespaces do not generate any undo or redo.</p>
</li>
<li>
<p>Space allocation is simplified, because when the <code dir="ltr">AUTOALLOCATE</code> clause is specified, the database automatically selects the appropriate extent size.</p>
</li>
<li>
<p>User reliance on the data dictionary is reduced, because the necessary information is stored in file headers and bitmap blocks.</p>
</li>
<li>
<p>Coalescing free extents is unnecessary for locally managed tablespaces.</p>
</li>
</ul>
<p>All tablespaces, including the <a id="sthref1519"></a><code dir="ltr">SYSTEM</code> tablespace, can be locally managed.</p>
<p>The <code dir="ltr">DBMS_SPACE_ADMIN</code> package provides maintenance procedures for locally managed tablespaces.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="create.htm#i1011260">"Creating a Locally Managed SYSTEM Tablespace"</a>, <a href="#i1007147">"Migrating the SYSTEM Tablespace to a Locally Managed Tablespace"</a>, and <a href="#i1007031">"Diagnosing and Repairing Locally Managed Tablespace Problems"</a></p>
</li>
<li>
<p><a href="#i1010733">"Bigfile Tablespaces"</a> for information about creating another type of locally managed tablespace that contains only a single data file or temp file.</p>
</li>
<li>
<p><a class="olink ARPLS057" href="../../appdev.112/e40758/d_spadmn.htm#ARPLS057"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information on the <code dir="ltr">DBMS_SPACE_ADMIN</code> package</p>
</li>
</ul>
</div>
<a id="BABGAFBJ"></a>
<div id="ADMIN11361" class="sect3">
<h4 class="sect3">Creating a Locally Managed Tablespace</h4>
<p>Create a locally managed tablespace by specifying <code dir="ltr">LOCAL</code> in the <code dir="ltr">EXTENT MANAGEMENT</code> clause of the <code dir="ltr">CREATE TABLESPACE</code> statement. This is the default for new permanent tablespaces, but you must specify the <code dir="ltr">EXTENT</code> <code dir="ltr">MANAGEMENT</code> <code dir="ltr">LOCAL</code> clause to specify either the <code dir="ltr">AUTOALLOCATE</code> clause or the <code dir="ltr">UNIFORM</code> clause. You can have the database manage extents for you automatically with the <code dir="ltr">AUTOALLOCATE</code> clause (the default), or you can specify that the tablespace is managed with uniform extents of a specific size (<code dir="ltr">UNIFORM</code>).</p>
<p>If you expect the tablespace to contain objects of varying sizes requiring many extents with different extent sizes, then <code dir="ltr">AUTOALLOCATE</code> is the best choice. <code dir="ltr">AUTOALLOCATE</code> is also a good choice if it is not important for you to have a lot of control over space allocation and deallocation, because it simplifies tablespace management. Some space may be wasted with this setting, but the benefit of having Oracle Database manage your space most likely outweighs this drawback.</p>
<p>If you want exact control over unused space, and you can predict exactly the space to be allocated for an object or objects and the number and size of extents, then <code dir="ltr">UNIFORM</code> is a good choice. This setting ensures that you will never have unusable space in your tablespace.</p>
<p>When you do not explicitly specify the type of extent management, Oracle Database determines extent management as follows:</p>
<ul>
<li>
<p>If the <code dir="ltr">CREATE TABLESPACE</code> statement omits the <code dir="ltr">DEFAULT</code> storage clause, then the database creates a locally managed autoallocated tablespace.</p>
</li>
<li>
<p>If the <code dir="ltr">CREATE TABLESPACE</code> statement includes a <code dir="ltr">DEFAULT</code> storage clause, then the database considers the following:</p>
<ul>
<li>
<p>If you specified the <code dir="ltr">MINIMUM EXTENT</code> clause, the database evaluates whether the values of <code dir="ltr">MINIMUM EXTENT</code>, <code dir="ltr">INITIAL</code>, and <code dir="ltr">NEXT</code> are equal and the value of <code dir="ltr">PCTINCREASE</code> is 0. If so, the database creates a locally managed uniform tablespace with extent size = <code dir="ltr">INITIAL</code>. If the <code dir="ltr">MINIMUM EXTENT</code>, <code dir="ltr">INITIAL</code>, and <code dir="ltr">NEXT</code> parameters are not equal, or if <code dir="ltr">PCTINCREASE</code> is not 0, the database ignores any extent storage parameters you may specify and creates a locally managed, autoallocated tablespace.</p>
</li>
<li>
<p>If you did not specify <code dir="ltr">MINIMUM EXTENT</code> clause, the database evaluates only whether the storage values of <code dir="ltr">INITIAL</code> and <code dir="ltr">NEXT</code> are equal and <code dir="ltr">PCTINCREASE</code> is 0. If so, the tablespace is locally managed and uniform. Otherwise, the tablespace is locally managed and autoallocated.</p>
</li>
</ul>
</li>
</ul>
<p>The following statement creates a locally managed tablespace named <code dir="ltr">lmtbsb</code> and specifies <code dir="ltr">AUTOALLOCATE</code>:</p>
<pre dir="ltr">
CREATE TABLESPACE lmtbsb DATAFILE '/u02/oracle/data/lmtbsb01.dbf' SIZE 50M
    EXTENT MANAGEMENT LOCAL AUTOALLOCATE;
</pre>
<p><code dir="ltr">AUTOALLOCATE</code> causes the tablespace to be system managed with a minimum extent size of 64K.</p>
<p>The alternative to <code dir="ltr">AUTOALLOCATE</code> is <code dir="ltr">UNIFORM</code>. which specifies that the tablespace is managed with extents of uniform size. You can specify that size in the <code dir="ltr">SIZE</code> clause of <code dir="ltr">UNIFORM</code>. If you omit <code dir="ltr">SIZE</code>, then the default size is 1M.</p>
<p>The following example creates a tablespace with uniform 128K extents. (In a database with 2K blocks, each extent would be equivalent to 64 database blocks). Each 128K extent is represented by a bit in the extent bitmap for this file.</p>
<pre dir="ltr">
CREATE TABLESPACE lmtbsb DATAFILE '/u02/oracle/data/lmtbsb01.dbf' SIZE 50M
    EXTENT MANAGEMENT LOCAL UNIFORM SIZE 128K;
</pre>
<p>You cannot specify the <code dir="ltr">DEFAULT</code> storage clause, <code dir="ltr">MINIMUM EXTENT</code>, or <code dir="ltr">TEMPORARY</code> when you explicitly specify <code dir="ltr">EXTENT MANAGEMENT LOCAL</code>. To create a temporary locally managed tablespace, use the <code dir="ltr">CREATE TEMPORARY TABLESPACE</code> statement.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you allocate a data file for a locally managed tablespace, you should allow space for metadata used for space management (the extent bitmap or space header segment) which are part of user space. For example, if you specify the <code dir="ltr">UNIFORM</code> clause in the extent management clause but you omit the <code dir="ltr">SIZE</code> parameter, then the default extent size is 1MB. In that case, the size specified for the data file must be larger (at least one block plus space for the bitmap) than 1MB.</div>
</div>
<!-- class="sect3" -->
<a id="i1006343"></a>
<div id="ADMIN10065" class="sect3">
<h4 class="sect3">Specifying Segment Space Management in <a id="sthref1520"></a><a id="sthref1521"></a><a id="sthref1522"></a>Locally Managed Tablespaces</h4>
<p>In a locally managed tablespace, there are two methods that Oracle Database can use to manage segment space: automatic and manual. Manual segment space management uses linked lists called "freelists" to manage free space in the segment, while automatic segment space management uses bitmaps. Automatic segment space management is the more efficient method, and is the default for all new permanent, locally managed tablespaces.</p>
<p>Automatic segment space management delivers better space utilization than manual segment space management. It is also self-tuning, in that it scales with increasing number of users or instances. In an Oracle Real Application Clusters environment, automatic segment space management allows for a dynamic affinity of space to instances. In addition, for many standard workloads, application performance with automatic segment space management is better than the performance of a well-tuned application using manual segment space management.</p>
<p>Although automatic segment space management is the default for all new permanent, locally managed tablespaces, you can explicitly enable it with the <code dir="ltr">SEGMENT SPACE MANAGEMENT AUTO</code> clause.</p>
<p>The following statement creates tablespace <code dir="ltr">lmtbsb</code> with automatic segment space management:</p>
<pre dir="ltr">
CREATE TABLESPACE lmtbsb DATAFILE '/u02/oracle/data/lmtbsb01.dbf' SIZE 50M
    EXTENT MANAGEMENT LOCAL 
    SEGMENT SPACE MANAGEMENT AUTO;
</pre>
<p>The <code dir="ltr">SEGMENT SPACE MANAGEMENT MANUAL</code> clause disables automatic segment space management.</p>
<p>The segment space management that you specify at tablespace creation time applies to all segments subsequently created in the tablespace. You cannot change the segment space management mode of a tablespace.</p>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>If you set extent management to <code dir="ltr">LOCAL</code> <code dir="ltr">UNIFORM</code>, then you must ensure that each extent contains at least 5 database blocks.</p>
</li>
<li>
<p>If you set extent management to <code dir="ltr">LOCAL</code> <code dir="ltr">AUTOALLOCATE</code>, and if the database block size is 16K or greater, then Oracle manages segment space by creating extents with a minimum size of 5 blocks rounded up to 64K.</p>
</li>
<li>
<p>You cannot specify automatic segment space management for the <code dir="ltr">SYSTEM</code> tablespace.</p>
</li>
</ul>
</div>
<p>Locally managed tablespaces using automatic segment space management can be created as single-file or bigfile tablespaces, as described in <a href="#i1010733">"Bigfile Tablespaces"</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1010733"></a>
<div id="ADMIN01102" class="sect2">
<h3 class="sect2">Bigfile Tablespaces<a id="sthref1523"></a><a id="sthref1524"></a><a id="sthref1525"></a><a id="sthref1526"></a></h3>
<p>A <span class="bold">bigfile tablespace</span> is a tablespace with a single, but potentially very large (up to 4G blocks) data file. Traditional smallfile tablespaces, in contrast, can contain multiple data files, but the files cannot be as large. The benefits of bigfile tablespaces are the following:</p>
<ul>
<li>
<p>A bigfile tablespace with 8K blocks can contain a 32 terabyte data file. A bigfile tablespace with 32K blocks can contain a 128 terabyte data file. The maximum number of data files in an Oracle Database is limited (usually to 64K files). Therefore, bigfile tablespaces can significantly enhance the storage capacity of an Oracle Database.</p>
</li>
<li>
<p>Bigfile tablespaces can reduce the number of data files needed for a database. An additional benefit is that the <code dir="ltr">DB_FILES</code> initialization parameter and <code dir="ltr">MAXDATAFILES</code> parameter of the <code dir="ltr">CREATE DATABASE</code> and <code dir="ltr">CREATE CONTROLFILE</code> statements can be adjusted to reduce the amount of SGA space required for data file information and the size of the control file.</p>
</li>
<li>
<p>Bigfile tablespaces simplify database management by providing data file transparency. SQL syntax for the <code dir="ltr">ALTER</code> <code dir="ltr">TABLESPACE</code> statement lets you perform operations on tablespaces, rather than the underlying individual data files.</p>
</li>
</ul>
<p>Bigfile tablespaces are supported only for locally managed tablespaces with automatic segment space management, with three exceptions: locally managed undo tablespaces, temporary tablespaces, and the <code dir="ltr">SYSTEM</code> tablespace.</p>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>Bigfile tablespaces are intended to be used with Automatic Storage Management (Oracle ASM) or other logical volume managers that supports striping or RAID, and dynamically extensible logical volumes.</p>
</li>
<li>
<p>Avoid creating bigfile tablespaces on a system that does not support striping because of negative implications for parallel query execution and RMAN backup parallelization.</p>
</li>
<li>
<p>Using bigfile tablespaces on platforms that do not support large file sizes is not recommended and can limit tablespace capacity. See your operating system specific documentation for information about maximum supported file sizes.</p>
</li>
</ul>
</div>
<a id="i1008496"></a>
<div id="ADMIN11363" class="sect3">
<h4 class="sect3">Creating a Bigfile Tablespace<a id="sthref1527"></a></h4>
<p>To create a bigfile tablespace, specify the <a id="sthref1528"></a><code dir="ltr">BIGFILE</code> keyword of the <code dir="ltr">CREATE</code> <code dir="ltr">TABLESPACE</code> statement (<code dir="ltr">CREATE</code> <code dir="ltr">BIGFILE</code> <code dir="ltr">TABLESPACE</code> ...). Oracle Database automatically creates a locally managed tablespace with automatic segment space management. You can, but need not, specify <code dir="ltr">EXTENT</code> <code dir="ltr">MANAGEMENT</code> <code dir="ltr">LOCAL</code> and <code dir="ltr">SEGMENT</code> <code dir="ltr">SPACE</code> <code dir="ltr">MANAGEMENT</code> <code dir="ltr">AUTO</code> in this statement. However, the database returns an error if you specify <code dir="ltr">EXTENT</code> <code dir="ltr">MANAGEMENT</code> <code dir="ltr">DICTIONARY</code> or <code dir="ltr">SEGMENT</code> <code dir="ltr">SPACE</code> <code dir="ltr">MANAGEMENT</code> <code dir="ltr">MANUAL</code>. The remaining syntax of the statement is the same as for the <code dir="ltr">CREATE TABLESPACE</code> statement, but you can only specify one data file. For example:</p>
<pre dir="ltr">
CREATE BIGFILE TABLESPACE bigtbs 
    DATAFILE '/u02/oracle/data/bigtbs01.dbf' SIZE 50G
...
</pre>
<p>You can specify <code dir="ltr">SIZE</code> in kilobytes (K), megabytes (M), gigabytes (G), or terabytes (T).</p>
<p>If the default tablespace type was set to <code dir="ltr">BIGFILE</code> at database creation, you need not specify the keyword <code dir="ltr">BIGFILE</code> in the <code dir="ltr">CREATE TABLESPACE</code> statement. A bigfile tablespace is created by default.</p>
<p>If the default tablespace type was set to <code dir="ltr">BIGFILE</code> at database creation, but you want to create a traditional (smallfile) tablespace, then specify a <code dir="ltr">CREATE</code> <code dir="ltr">SMALLFILE</code> <code dir="ltr">TABLESPACE</code> statement to override the default tablespace type for the tablespace that you are creating.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="create.htm#i1015204">"Supporting Bigfile Tablespaces During Database Creation"</a></div>
</div>
<!-- class="sect3" -->
<div id="ADMIN11365" class="sect3"><a id="sthref1529"></a>
<h4 class="sect3">Identifying a Bigfile Tablespace</h4>
<p>The following views contain a <code dir="ltr">BIGFILE</code> column that identifies a tablespace as a bigfile tablespace:</p>
<ul>
<li>
<p><code dir="ltr">DBA_TABLESPACES</code></p>
</li>
<li>
<p><code dir="ltr">USER_TABLESPACES</code></p>
</li>
<li>
<p><code dir="ltr">V$TABLESPACE</code></p>
</li>
</ul>
<p>You can also identify a bigfile tablespace by the relative file number of its single data file. That number is 1024 on most platforms, but 4096 on OS/390. <a id="sthref1530"></a></p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHGCFBB"></a>
<div id="ADMIN13316" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref1531"></a><a id="sthref1532"></a>Compressed Tablespaces</h3>
<p>You can specify that all tables created in a tablespace are compressed by default. You specify the type of table compression using the <code dir="ltr">DEFAULT</code> keyword, followed by one of the compression type clauses used when creating a table.</p>
<p>The following statement indicates that all tables created in the tablespace are to use OLTP compression, unless otherwise specified:</p>
<pre dir="ltr">
CREATE TABLESPACE ... DEFAULT COMPRESS FOR OLTP ... ;
</pre>
<p>You can override the default tablespace compression specification when you create a table in that tablespace.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="tables.htm#CJAGFBFG">"Consider Using Table Compression"</a> for information about the various types of table compression</p>
</li>
<li>
<p><a class="olink SQLRF01403" href="../../server.112/e41084/statements_7003.htm#SQLRF01403"><span class="italic">Oracle Database SQL Language Reference</span></a> for the exact syntax to use when creating a tablespace with a default compression type</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABBJGAF"></a>
<div id="ADMIN12327" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Encrypted <a id="sthref1533"></a><a id="sthref1534"></a>Tablespaces</h3>
<p>You can encrypt any permanent tablespace to protect sensitive data. Tablespace encryption is completely transparent to your applications, so no application modification is necessary. Encrypted tablespaces primarily protect your data from unauthorized access by means other than through the database. For example, when encrypted tablespaces are written to backup media for travel from one Oracle database to another or for travel to an off-site facility for storage, they remain encrypted. Also, encrypted tablespaces protect data from users who try to circumvent the security features of the database and access database files directly through the operating system file system.</p>
<p>Tablespace encryption does not address all security issues. It does not, for example, provide access control from within the database. Any user who is granted privileges on objects stored in an encrypted tablespace can access those objects without providing any kind of additional password or key.</p>
<p>When you encrypt a tablespace, all tablespace blocks are encrypted. All segment types are supported for encryption, including tables, clusters, indexes, LOBs (<code dir="ltr">BASICFILE</code> and <code dir="ltr">SECUREFILE</code>), table and index partitions, and so on.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
There is no need to use LOB encryption on <code dir="ltr">SECUREFILE</code> LOBs stored in an encrypted tablespace.</div>
<p>To maximize security, data from an encrypted tablespace is automatically encrypted when written to the undo tablespace, to the redo logs, and to any temporary tablespace. There is no need to explicitly create encrypted undo or temporary tablespaces, and in fact, you cannot specify encryption for those tablespace types.</p>
<p>For partitioned tables and indexes that have different partitions in different tablespaces, it is permitted to use both encrypted and non-encrypted tablespaces in the same table or index.</p>
<p><a id="sthref1535"></a><a id="sthref1536"></a><a id="sthref1537"></a>Tablespace encryption uses the transparent data encryption feature of Oracle Database, which requires that you create an <span class="italic">Oracle wallet</span> to store the master encryption key for the database. The wallet must be open before you can create the encrypted tablespace and before you can store or retrieve encrypted data. When you open the wallet, it is available to all session, and it remains open until you explicitly close it or until the database is shut down.</p>
<p>To encrypt a tablespace, you must open the database with the <code dir="ltr">COMPATIBLE</code> initialization parameter set to 11.1.0 or higher. The default setting for <code dir="ltr">COMPATIBLE</code> for a new Oracle Database 11<span class="italic">g</span> Release 2 installation is 11.2.0. Any user who can create a tablespace can create an encrypted tablespace.</p>
<p>Transparent data encryption supports industry-standard encryption algorithms, including the following Advanced Encryption Standard (AES) and Triple Data Encryption Standard (3DES) algorithms:</p>
<ul>
<li>
<p>AES256</p>
</li>
<li>
<p>AES192</p>
</li>
<li>
<p>AES128</p>
</li>
<li>
<p>3DES168</p>
</li>
</ul>
<p>The encryption key length is implied by the algorithm name. For example, the AES128 algorithm uses 128-bit keys. You specify the algorithm to use when you create the tablespace, and different tablespaces can use different algorithms. Although longer key lengths theoretically provide greater security, there is a trade-off in CPU overhead. If you do not specify the algorithm in your <code dir="ltr">CREATE</code> <code dir="ltr">TABLESPACE</code> statement, AES128 is the default. There is no disk space overhead for encrypting a tablespace.</p>
<p class="subhead2"><a id="ADMIN12597"></a>Examples</p>
<p>The following statement creates an encrypted tablespace with the default encryption algorithm:</p>
<pre dir="ltr">
CREATE TABLESPACE securespace
DATAFILE '/u01/app/oracle/oradata/orcl/secure01.dbf' SIZE 100M
ENCRYPTION
DEFAULT STORAGE(ENCRYPT);
</pre>
<p>The following statement creates the same tablespace with the AES256 algorithm:</p>
<pre dir="ltr">
CREATE TABLESPACE securespace
DATAFILE '/u01/app/oracle/oradata/orcl/secure01.dbf' SIZE 100M
ENCRYPTION USING 'AES256'
DEFAULT STORAGE(ENCRYPT);
</pre>
<p class="subhead2"><a id="ADMIN12598"></a>Restrictions</p>
<p>The following are restrictions for encrypted tablespaces:</p>
<ul>
<li>
<p>You cannot encrypt an existing tablespace with an <code dir="ltr">ALTER</code> <code dir="ltr">TABLESPACE</code> statement. However, you can use Data Pump or SQL statements such as <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> <code dir="ltr">AS</code> <code dir="ltr">SELECT</code> or <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> <code dir="ltr">MOVE</code> to move existing table data into an encrypted tablespace.</p>
</li>
<li>
<p>Encrypted tablespaces are subject to restrictions when transporting to another database. See <a href="#i1007233">"Limitations on Transportable Tablespace Use"</a>.</p>
</li>
<li>
<p>When recovering a database with encrypted tablespaces (for example after a <code dir="ltr">SHUTDOWN</code> <code dir="ltr">ABORT</code> or a catastrophic error that brings down the database instance), you must open the Oracle wallet after database mount and before database open, so the recovery process can decrypt data blocks and redo.</p>
</li>
</ul>
<p>In addition, see <a class="olink ASOAG9518" href="../../network.112/e40393/asotrans.htm#ASOAG9518"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for general restrictions for transparent data encryption.</p>
<p class="subhead2"><a id="ADMIN12599"></a>Querying Tablespace Encryption Information</p>
<p>The <code dir="ltr">DBA_TABLESPACES</code> and <code dir="ltr">USER_TABLESPACES</code> data dictionary views include a column named <code dir="ltr">ENCRYPTED</code>. This column contains <code dir="ltr">YES</code> for encrypted tablespaces.</p>
<p>The view <a id="sthref1538"></a><code dir="ltr">V$ENCRYPTED_TABLESPACES</code> lists all currently encrypted tablespaces. The following query displays the name and encryption algorithm of encrypted tablespaces:</p>
<pre dir="ltr">
SELECT t.name, e.encryptionalg algorithm 
FROM  v$tablespace t, v$encrypted_tablespaces e
WHERE t.ts# = e.ts#;
 
NAME                           ALGORITHM 
------------------------------ --------- 
SECURESPACE                    AES256  
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink TDPSG40043" href="../../server.112/e10575/tdpsg_securing_data.htm#TDPSG40043"><span class="italic">Oracle Database 2 Day + Security Guide</span></a> for more information about transparent data encryption and for instructions for creating and opening wallets</p>
</li>
<li>
<p><a href="tables.htm#CJAGJDGF">"Consider Encrypting Columns That Contain Sensitive Data"</a> for an alternative to encrypting an entire tablespace</p>
</li>
<li>
<p><a class="olink RACAD510" href="../../rac.112/e41960/design.htm#RACAD510"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> for information on using an Oracle wallet in an Oracle Real Application Clusters environment</p>
</li>
<li>
<p><a class="olink SQLRF01403" href="../../server.112/e41084/statements_7003.htm#SQLRF01403"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the <code dir="ltr">CREATE</code> <code dir="ltr">TABLESPACE</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i1013552"></a>
<div id="ADMIN11366" class="sect2">
<h3 class="sect2">Temporary Tablespaces<a id="sthref1539"></a></h3>
<p>A <span class="bold">temporary tablespace</span> contains transient data that persists only for the duration of the session. Temporary tablespaces can improve the concurrency of multiple sort operations that do not fit in memory and can improve the efficiency of space management operations during sorts.</p>
<p>Temporary tablespaces are used to store the following:</p>
<ul>
<li>
<p>Intermediate sort results</p>
</li>
<li>
<p>Temporary tables and temporary indexes</p>
</li>
<li>
<p>Temporary LOBs</p>
</li>
<li>
<p>Temporary B-trees</p>
</li>
</ul>
<p>Within a temporary tablespace, all sort operations for a particular instance share a single <span class="italic">sort segment</span>, and sort segments exist for every instance that performs sort operations that require temporary space. A sort segment is created by the first statement after startup that uses the temporary tablespace for sorting, and is released only at shutdown.</p>
<p>By default, a single temporary tablespace named <code dir="ltr">TEMP</code> is created for each new Oracle Database installation. You can create additional temporary tablespaces with the <code dir="ltr">CREATE</code> <code dir="ltr">TABLESPACE</code> statement. You can assign a temporary tablespace to each database user with the <code dir="ltr">CREATE USER</code> or <code dir="ltr">ALTER USER</code> statement. A single temporary tablespace can be shared by multiple users.</p>
<p>You cannot explicitly create objects in a temporary tablespace.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The exception to the preceding statement is a temporary table. When you create a temporary table, its rows are stored in your default temporary tablespace, unless you create the table in a new temporary tablespace. See <a href="tables.htm#i1006400">"Creating a Temporary Table"</a> for more information.</div>
<p class="subhead2"><a id="ADMIN12600"></a>Default Temporary Tablespace</p>
<p>Users who are not explicitly assigned a temporary tablespace use the database default temporary tablespace, which for new installations is <code dir="ltr">TEMP</code>. You can change the default temporary tablespace for the database with the following command:</p>
<pre dir="ltr">
ALTER DATABASE DEFAULT TEMPORARY TABLESPACE <span class="italic">tablespace_name</span>;
</pre>
<p>To determine the current default temporary tablespace for the database, run the following query:</p>
<pre dir="ltr">
SELECT PROPERTY_NAME, PROPERTY_VALUE FROM DATABASE_PROPERTIES WHERE
   PROPERTY_NAME='DEFAULT_TEMP_TABLESPACE';

PROPERTY_NAME              PROPERTY_VALUE
-------------------------- ------------------------------
DEFAULT_TEMP_TABLESPACE    TEMP
</pre>
<p class="subhead2"><a id="ADMIN12601"></a>Space Allocation in a Temporary Tablespace</p>
<p>You can view the allocation and deallocation of space in a temporary tablespace sort segment using the <code dir="ltr">V$SORT_SEGMENT</code> view. The <code dir="ltr">V$TEMPSEG_USAGE</code> view identifies the current sort users in those segments.</p>
<p>When a sort operation that uses temporary space completes, allocated extents in the sort segment are not deallocated; they are just marked as free and available for reuse. The <code dir="ltr">DBA_TEMP_FREE_SPACE</code> view displays the total allocated and free space in each temporary tablespace. See <a href="#BABDAHAJ">"Viewing Space Usage for Temporary Tablespaces"</a> for more information. You can manually shrink a locally managed temporary tablespace that has a large amount of unused space. See <a href="#CFHJFBBJ">"Shrinking a Locally Managed Temporary Tablespace"</a> for details.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink DBSEG002" href="../../network.112/e36292/users.htm#DBSEG002"><span class="italic">Oracle Database Security Guide</span></a> for information about creating users and assigning temporary tablespaces</p>
</li>
<li>
<p><a class="olink CNCPT1092" href="../../server.112/e40540/logical.htm#CNCPT1092"><span class="italic">Oracle Database Concepts</span></a> for more information about the default temporary tablespace</p>
</li>
<li>
<p><a class="olink REFRN" href="../e40402/toc.htm"><span class="italic">Oracle Database Reference</span></a> for more information about the <code dir="ltr">V$SORT_SEGMENT</code>, <code dir="ltr">V$TEMPSEG_USAGE</code>, and <code dir="ltr">DBA_TEMP_FREE_SPACE</code> views</p>
</li>
<li>
<p><a class="olink PFGRF01401" href="../../server.112/e41573/memory.htm#PFGRF01401"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for a discussion on tuning sorts</p>
</li>
</ul>
</div>
<a id="i1009563"></a>
<div id="ADMIN11367" class="sect3">
<h4 class="sect3">Creating a Locally Managed Temporary Tablespace<a id="sthref1540"></a></h4>
<p>Because space management is much simpler and more efficient in locally managed tablespaces, they are ideally suited for temporary tablespaces. <a id="sthref1541"></a><a id="sthref1542"></a>Locally managed temporary tablespaces use <span class="bold"><a id="sthref1543"></a><a id="sthref1544"></a><a id="sthref1545"></a>temp files</span>, which do not modify data outside of the temporary tablespace or generate any redo for temporary tablespace data. Because of this, they enable you to perform on-disk sorting operations in a read-only or standby database.</p>
<p>You also use different views for viewing information about temp files than you would for data files. The <code dir="ltr">V$TEMPFILE</code> and <code dir="ltr">DBA_TEMP_FILES</code> views are analogous to the <code dir="ltr">V$DATAFILE</code> and <code dir="ltr">DBA_DATA_FILES</code> views.</p>
<p>To create a locally managed temporary tablespace, you use the <a id="sthref1546"></a><code dir="ltr">CREATE TEMPORARY TABLESPACE</code> statement, which requires that you have the <code dir="ltr">CREATE TABLESPACE</code> system privilege.</p>
<p>The following statement creates a temporary tablespace in which each extent is 16M. Each 16M extent (which is the equivalent of 8000 blocks when the standard block size is 2K) is represented by a bit in the bitmap for the file.</p>
<pre dir="ltr">
CREATE TEMPORARY TABLESPACE lmtemp TEMPFILE '/u02/oracle/data/lmtemp01.dbf' 
     SIZE 20M REUSE
     EXTENT MANAGEMENT LOCAL UNIFORM SIZE 16M;
</pre>
<p>The extent management clause is optional for temporary tablespaces because all temporary tablespaces are created with locally managed extents of a uniform size. The default for <code dir="ltr">SIZE</code> is 1M. To specify another value for <code dir="ltr">SIZE</code>, you can do so as shown in the preceding statement.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
On some operating systems, the database does not allocate space for the temp file until the temp file blocks are actually accessed. This delay in space allocation results in faster creation and resizing of temp files, but it requires that sufficient disk space is available when the temp files are later used. See your operating system documentation to determine whether the database allocates temp file space in this way on your system.</div>
</div>
<!-- class="sect3" -->
<div id="ADMIN11368" class="sect3"><a id="sthref1547"></a>
<h4 class="sect3">Creating a Bigfile Temporary Tablespace</h4>
<p>Just as for regular tablespaces, you can create single-file (bigfile) temporary tablespaces. Use the <a id="sthref1548"></a><a id="sthref1549"></a><a id="sthref1550"></a><a id="sthref1551"></a><code dir="ltr">CREATE BIGFILE TEMPORARY TABLESPACE</code> statement to create a single-temp file tablespace. See the sections <a href="#i1008496">"Creating a Bigfile Tablespace"</a> and <a href="#i1008507">"Altering a Bigfile Tablespace"</a> for information about bigfile tablespaces, but consider that you are creating temporary tablespaces that use temp files instead of data files.</p>
</div>
<!-- class="sect3" -->
<a id="BABDAHAJ"></a>
<div id="ADMIN12315" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Viewing Space Usage for Temporary Tablespaces</h4>
<p>The <code dir="ltr">DBA_TEMP_FREE_SPACE</code> dictionary view contains information about space usage for each temporary tablespace. The information includes the space allocated and the free space. You can query this view for these statistics using the following command.</p>
<pre dir="ltr">
SELECT * from DBA_TEMP_FREE_SPACE;
 
TABLESPACE_NAME                     TABLESPACE_SIZE ALLOCATED_SPACE FREE_SPACE
----------------------------------- --------------- --------------- ----------
TEMP                                250609664       250609664       249561088
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1008609"></a>
<div id="ADMIN01103" class="sect2">
<h3 class="sect2">Multiple Temporary Tablespaces: Using Tablespace Groups</h3>
<p><a id="sthref1552"></a><a id="sthref1553"></a>A <span class="bold">tablespace group</span> enables a user to consume temporary space from multiple tablespaces. Using a tablespace group, rather than a single temporary tablespace, can alleviate problems caused where one tablespace is inadequate to hold the results of a sort, particularly on a table that has many partitions. A tablespace group enables parallel execution servers in a single parallel operation to use multiple temporary tablespaces.</p>
<p>A tablespace group has the following characteristics:</p>
<ul>
<li>
<p>It contains at least one tablespace. There is no explicit limit on the maximum number of tablespaces that are contained in a group.</p>
</li>
<li>
<p>It shares the namespace of tablespaces, so its name cannot be the same as any tablespace.</p>
</li>
<li>
<p>You can specify a tablespace group name wherever a tablespace name would appear when you assign a default temporary tablespace for the database or a temporary tablespace for a user.</p>
</li>
</ul>
<p>You do not explicitly create a tablespace group. Rather, it is created implicitly when you assign the first temporary tablespace to the group. The group is deleted when the last temporary tablespace it contains is removed from it.</p>
<p>The view <code dir="ltr">DBA_TABLESPACE_GROUPS</code> lists tablespace groups and their member tablespaces.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DBSEG10240" href="../../network.112/e36292/users.htm#DBSEG10240"><span class="italic">Oracle Database Security Guide</span></a> for more information about assigning a temporary tablespace or tablespace group to a user</div>
<div id="ADMIN11370" class="sect3"><a id="sthref1554"></a>
<h4 class="sect3">Creating a Tablespace Group</h4>
<p>You create a tablespace group implicitly when you include the <code dir="ltr">TABLESPACE GROUP</code> clause in the <code dir="ltr">CREATE TEMPORARY TABLESPACE</code> or <code dir="ltr">ALTER TABLESPACE</code> statement and the specified tablespace group does not currently exist.</p>
<p>For example, if neither <code dir="ltr">group1</code> nor <code dir="ltr">group2</code> exists, then the following statements create those groups, each of which has only the specified tablespace as a member:</p>
<pre dir="ltr">
CREATE TEMPORARY TABLESPACE lmtemp2 TEMPFILE '/u02/oracle/data/lmtemp201.dbf'
     SIZE 50M
     TABLESPACE GROUP group1;

ALTER TABLESPACE lmtemp TABLESPACE GROUP group2;
</pre></div>
<!-- class="sect3" -->
<div id="ADMIN11371" class="sect3"><a id="sthref1555"></a>
<h4 class="sect3">Changing Members of a Tablespace Group</h4>
<p>You can add a tablespace to an existing tablespace group by specifying the existing group name in the <code dir="ltr">TABLESPACE GROUP</code> clause of the <code dir="ltr">CREATE TEMPORARY TABLESPACE</code> or <code dir="ltr">ALTER TABLESPACE</code> statement.</p>
<p>The following statement adds a tablespace to an existing group. It creates and adds tablespace <code dir="ltr">lmtemp3</code> to <code dir="ltr">group1</code>, so that <code dir="ltr">group1</code> contains tablespaces <code dir="ltr">lmtemp2</code> and <code dir="ltr">lmtemp3</code>.</p>
<pre dir="ltr">
CREATE TEMPORARY TABLESPACE lmtemp3 TEMPFILE '/u02/oracle/data/lmtemp301.dbf'
     SIZE 25M
     TABLESPACE GROUP group1;
</pre>
<p>The following statement also adds a tablespace to an existing group, but in this case because tablespace <code dir="ltr">lmtemp2</code> already belongs to <code dir="ltr">group1</code>, it is in effect moved from <code dir="ltr">group1</code> to <code dir="ltr">group2</code>:</p>
<pre dir="ltr">
ALTER TABLESPACE lmtemp2 TABLESPACE GROUP group2;
</pre>
<p>Now <code dir="ltr">group2</code> contains both <code dir="ltr">lmtemp</code> and <code dir="ltr">lmtemp2</code>, while <code dir="ltr">group1</code> consists of only <code dir="ltr">tmtemp3</code>.</p>
<p>You can remove a tablespace from a group as shown in the following statement:</p>
<pre dir="ltr">
ALTER TABLESPACE lmtemp3 TABLESPACE GROUP '';
</pre>
<p>Tablespace <code dir="ltr">lmtemp3</code> no longer belongs to any group. Further, since there are no longer any members of <code dir="ltr">group1</code>, this results in the implicit deletion of <code dir="ltr">group1</code>.</p>
</div>
<!-- class="sect3" -->
<div id="ADMIN11372" class="sect3"><a id="sthref1556"></a>
<h4 class="sect3">Assigning a Tablespace Group as the Default Temporary Tablespace<a id="sthref1557"></a><a id="sthref1558"></a></h4>
<p>Use the <code dir="ltr">ALTER DATABASE...DEFAULT</code> <code dir="ltr">TEMPORARY</code> <code dir="ltr">TABLESPACE</code> statement to assign a tablespace group as the default temporary tablespace for the database. For example:</p>
<pre dir="ltr">
ALTER DATABASE DEFAULT TEMPORARY TABLESPACE group2;
</pre>
<p>Any user who has not explicitly been assigned a temporary tablespace will now use tablespaces <code dir="ltr">lmtemp</code> and <code dir="ltr">lmtemp2</code>.</p>
<p>If a tablespace group is specified as the default temporary tablespace, you cannot drop any of its member tablespaces. You must first remove the tablespace from the tablespace group. Likewise, you cannot drop a single temporary tablespace as long as it is the default temporary tablespace.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006699"></a>
<div id="ADMIN11373" class="sect1">
<h2 class="sect1">Specifying Nonstandard Block Sizes for Tablespaces<a id="sthref1559"></a><a id="sthref1560"></a><a id="sthref1561"></a><a id="sthref1562"></a><a id="sthref1563"></a><a id="sthref1564"></a><a id="sthref1565"></a></h2>
<p>You can create tablespaces with block sizes different from the standard database block size, which is specified by the <code dir="ltr">DB_BLOCK_SIZE</code> initialization parameter. This feature lets you transport tablespaces with unlike block sizes between databases.</p>
<p>Use the <code dir="ltr">BLOCKSIZE</code> clause of the <code dir="ltr">CREATE TABLESPACE</code> statement to create a tablespace with a block size different from the database standard block size. In order for the <code dir="ltr">BLOCKSIZE</code> clause to succeed, you must have already set the <a id="sthref1566"></a><a id="sthref1567"></a><code dir="ltr">DB_CACHE_SIZE</code> and at least one <code dir="ltr">DB_nK_CACHE_SIZE</code> initialization parameter. Further, and the integer you specify in the <code dir="ltr">BLOCKSIZE</code> clause must correspond with the setting of one <code dir="ltr">DB_nK_CACHE_SIZE</code> parameter setting. Although redundant, specifying a <code dir="ltr">BLOCKSIZE</code> equal to the standard block size, as specified by the <code dir="ltr">DB_BLOCK_SIZE</code> initialization parameter, is allowed.</p>
<p>The following statement creates tablespace <code dir="ltr">lmtbsb</code>, but specifies a block size that differs from the standard database block size (as specified by the <code dir="ltr">DB_BLOCK_SIZE</code> initialization parameter):</p>
<pre dir="ltr">
CREATE TABLESPACE lmtbsb DATAFILE '/u02/oracle/data/lmtbsb01.dbf' SIZE 50M
    EXTENT MANAGEMENT LOCAL UNIFORM SIZE 128K
    BLOCKSIZE 8K; 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="create.htm#i1014072">"Specifying Database Block Sizes"</a></p>
</li>
<li>
<p><a href="memory.htm#i1014186">"Setting the Buffer Cache Initialization Parameters"</a> for information about the <code dir="ltr">DB_CACHE_SIZE</code> and <code dir="ltr">DB_nK_CACHE_SIZE</code> parameter settings</p>
</li>
<li>
<p><a href="#i1007169">"Transporting Tablespaces Between Databases"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1006743"></a>
<div id="ADMIN11374" class="sect1">
<h2 class="sect1">Controlling the Writing of Redo Records<a id="sthref1568"></a><a id="sthref1569"></a><a id="sthref1570"></a><a id="sthref1571"></a><a id="sthref1572"></a></h2>
<p>For some database operations, you can control whether the database generates redo records. Without redo, no media recovery is possible. However, suppressing redo generation can improve performance, and may be appropriate for easily recoverable operations. An example of such an operation is a <code dir="ltr">CREATE TABLE...AS SELECT</code> statement, which can be repeated in case of database or instance failure.</p>
<p>Specify the <code dir="ltr">NOLOGGING</code> clause in the <code dir="ltr">CREATE TABLESPACE</code> statement to suppress redo when these operations are performed for objects within the tablespace. If you do not include this clause, or if you specify <code dir="ltr">LOGGING</code> instead, then the database generates redo when changes are made to objects in the tablespace. Redo is never generated for temporary segments or in temporary tablespaces, regardless of the logging attribute.</p>
<p>The logging attribute specified at the tablespace level is the default attribute for objects created within the tablespace. You can override this default logging attribute by specifying <code dir="ltr">LOGGING</code> or <code dir="ltr">NOLOGGING</code> at the schema object level--for example, in a <code dir="ltr">CREATE TABLE</code> statement.</p>
<p>If you have a standby database, <code dir="ltr">NOLOGGING</code> mode causes problems with the availability and accuracy of the standby database. To overcome this problem, you can specify <code dir="ltr">FORCE LOGGING</code> mode. When you include the <code dir="ltr">FORCE LOGGING</code> clause in the <code dir="ltr">CREATE TABLESPACE</code> statement, you force the generation of redo records for all operations that make changes to objects in a tablespace. This overrides any specification made at the object level.</p>
<p>If you transport a tablespace that is in <code dir="ltr">FORCE LOGGING</code> mode to another database, the new tablespace will not maintain the <code dir="ltr">FORCE LOGGING</code> mode.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF30009" href="../../server.112/e41084/clauses005.htm#SQLRF30009"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about operations that can be done in <code dir="ltr">NOLOGGING</code> mode</p>
</li>
<li>
<p><a href="create.htm#i1009449">"Specifying FORCE LOGGING Mode"</a> for more information about <code dir="ltr">FORCE LOGGING</code> mode and for information about the effects of the <code dir="ltr">FORCE LOGGING</code> clause used with the <code dir="ltr">CREATE DATABASE</code> statement</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1006770"></a>
<div id="ADMIN11375" class="sect1">
<h2 class="sect1">Altering Tablespace Availability</h2>
<p>You can take an online tablespace offline so that it is temporarily unavailable for general use. The rest of the database remains open and available for users to access data. Conversely, you can bring an offline tablespace online to make the schema objects within the tablespace available to database users. The database must be open to alter the availability of a tablespace.</p>
<p>To alter the availability of a tablespace, use the <code dir="ltr">ALTER TABLESPACE</code> statement. You must have the <code dir="ltr">ALTER TABLESPACE</code> or <code dir="ltr">MANAGE TABLESPACE</code> system privilege.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dfiles.htm#i1006391">"Altering Data File Availability"</a> for information about altering the availability of individual data files within a tablespace</div>
<a id="i1006775"></a>
<div id="ADMIN11376" class="sect2">
<h3 class="sect2">Taking Tablespaces Offline</h3>
<p><a id="sthref1573"></a><a id="sthref1574"></a><a id="sthref1575"></a><a id="sthref1576"></a>You may want to take a tablespace offline for any of the following reasons:</p>
<ul>
<li>
<p>To make a portion of the database unavailable while allowing normal access to the remainder of the database</p>
</li>
<li>
<p>To perform an offline tablespace backup (even though a tablespace can be backed up while online and in use)</p>
</li>
<li>
<p>To make an application and its group of tables temporarily unavailable while updating or maintaining the application</p>
</li>
<li>
<p>To rename or relocate tablespace data files</p>
<p>See <a href="dfiles.htm#i1006457">"Renaming and Relocating Data Files"</a> for details.</p>
</li>
</ul>
<p>When a tablespace is taken offline, the database takes all the associated files offline.</p>
<p>You cannot take the following tablespaces offline:</p>
<ul>
<li>
<p><code dir="ltr">SYSTEM</code></p>
</li>
<li>
<p>The undo tablespace</p>
</li>
<li>
<p>Temporary tablespaces</p>
</li>
</ul>
<p>Before taking a tablespace offline, consider altering the tablespace allocation of any users who have been assigned the tablespace as a default tablespace. Doing so is advisable because those users will not be able to access objects in the tablespace while it is offline.</p>
<p>You can specify any of the following parameters as part of the <code dir="ltr">ALTER TABLESPACE...OFFLINE</code> statement:<a id="sthref1577"></a></p>
<div class="inftblruleinformal">
<table class="cellalignment1333" title="Taking a Tablespace Offline" summary="Column 1 lists the clauses that can be specified when taking a tablespace offline. Column 2 explains the meaning of the clause." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t21">Clause</th>
<th class="cellalignment1334" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t21" headers="r1c1-t21"><code dir="ltr">NORMAL</code></td>
<td class="cellalignment1335" headers="r2c1-t21 r1c2-t21">A tablespace can be taken offline normally if no error conditions exist for any of the data files of the tablespace. No data file in the tablespace can be currently offline as the result of a write error. When you specify <code dir="ltr">OFFLINE NORMAL</code>, the database takes a checkpoint for all data files of the tablespace as it takes them offline. <code dir="ltr">NORMAL</code> is the default.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t21" headers="r1c1-t21"><code dir="ltr">TEMPORARY</code></td>
<td class="cellalignment1335" headers="r3c1-t21 r1c2-t21">A tablespace can be taken offline temporarily, even if there are error conditions for one or more files of the tablespace. When you specify <code dir="ltr">OFFLINE TEMPORARY</code>, the database takes offline the data files that are not already offline, checkpointing them as it does so.
<p>If no files are offline, but you use the temporary clause, media recovery is not required to bring the tablespace back online. However, if one or more files of the tablespace are offline because of write errors, and you take the tablespace offline temporarily, the tablespace requires recovery before you can bring it back online.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t21" headers="r1c1-t21"><code dir="ltr">IMMEDIATE</code></td>
<td class="cellalignment1335" headers="r4c1-t21 r1c2-t21">A tablespace can be taken offline immediately, without the database taking a checkpoint on any of the data files. When you specify <code dir="ltr">OFFLINE IMMEDIATE</code>, media recovery for the tablespace is required before the tablespace can be brought online. You cannot take a tablespace offline immediately if the database is running in <code dir="ltr">NOARCHIVELOG</code> mode.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblruleinformal" -->
<div class="infobox-note">
<p class="notep1">Caution:</p>
If you must take a tablespace offline, use the <code dir="ltr">NORMAL</code> clause (the default) if possible. This setting guarantees that the tablespace will not require recovery to come back online, even if after incomplete recovery you reset the redo log sequence using an <code dir="ltr">ALTER DATABASE OPEN RESETLOGS</code> statement.</div>
<p>Specify <code dir="ltr">TEMPORARY</code> only when you cannot take the tablespace offline normally. In this case, only the files taken offline because of errors need to be recovered before the tablespace can be brought online. Specify <code dir="ltr">IMMEDIATE</code> only after trying both the normal and temporary settings.</p>
<p>The following example takes the <code dir="ltr">users</code> tablespace offline normally:</p>
<pre dir="ltr">
ALTER TABLESPACE users OFFLINE NORMAL;
</pre></div>
<!-- class="sect2" -->
<a id="i1006832"></a>
<div id="ADMIN11377" class="sect2">
<h3 class="sect2">Bringing Tablespaces Online</h3>
<p>You can bring any tablespace in an Oracle Database online whenever the database is open. A tablespace is normally online so that the data contained within it is available to database users.</p>
<p>If a tablespace to be brought online was not taken offline "cleanly" (that is, using the <code dir="ltr">NORMAL</code> clause of the <code dir="ltr">ALTER TABLESPACE OFFLINE</code> statement), you must first perform media recovery on the tablespace before bringing it online. Otherwise, the database returns an error and the tablespace remains offline.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink BRADV" href="../../backup.112/e10642/toc.htm"><span class="italic">Oracle Database Backup and Recovery User's Guide</span></a> for information about performing media recovery</div>
<p><a id="sthref1578"></a>The following statement brings the <code dir="ltr">users</code> tablespace online:</p>
<pre dir="ltr">
ALTER TABLESPACE users ONLINE;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1010339"></a>
<div id="ADMIN11378" class="sect1">
<h2 class="sect1">Using Read-Only Tablespaces<a id="sthref1579"></a></h2>
<p>Making a tablespace read-only prevents write operations on the data files in the tablespace. The primary purpose of read-only tablespaces is to eliminate the need to perform backup and recovery of large, static portions of a database. Read-only tablespaces also provide a way to protecting historical data so that users cannot modify it. Making a tablespace read-only prevents updates on all tables in the tablespace, regardless of a user's update privilege level.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Making a tablespace read-only cannot in itself be used to satisfy archiving or data publishing requirements, because the tablespace can only be brought online in the database in which it was created. However, you can meet such requirements by using the transportable tablespace feature, as described in <a href="#i1007169">"Transporting Tablespaces Between Databases"</a>.</div>
<p>You can drop items, such as tables or indexes, from a read-only tablespace, but you cannot create or alter objects in a read-only tablespace. You can execute statements that update the file description in the data dictionary, such as <code dir="ltr">ALTER TABLE...ADD</code> or <code dir="ltr">ALTER TABLE...MODIFY</code>, but you will not be able to use the new description until the tablespace is made read/write.</p>
<p>Read-only tablespaces can be transported to other databases. And, since read-only tablespaces can never be updated, they can reside on CD-ROM or WORM (Write Once-Read Many) devices.</p>
<p>The following topics are discussed in this section:</p>
<ul>
<li>
<p><a href="#i1006906">Making a Tablespace Read-Only</a></p>
</li>
<li>
<p><a href="#i1006969">Making a Read-Only Tablespace Writable</a></p>
</li>
<li>
<p><a href="#i1006979">Creating a Read-Only Tablespace on a WORM Device</a></p>
</li>
<li>
<p><a href="#i1006990">Delaying the Opening of Data Files in Read-Only Tablespaces</a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1007169">"Transporting Tablespaces Between Databases"</a></div>
</li>
</ul>
<a id="i1006906"></a>
<div id="ADMIN11379" class="sect2">
<h3 class="sect2">Making a Tablespace Read-Only<a id="sthref1580"></a></h3>
<p>All tablespaces are initially created as read/write. Use the <code dir="ltr">READ ONLY</code><a id="sthref1581"></a> clause in the <code dir="ltr">ALTER TABLESPACE</code> statement to change a tablespace to read-only. You must have the <code dir="ltr">ALTER TABLESPACE</code> or <code dir="ltr">MANAGE TABLESPACE</code> system privilege.</p>
<p>Before you can make a tablespace read-only, the following conditions must be met.</p>
<ul>
<li>
<p>The tablespace must be online. This is necessary to ensure that there is no undo information that must be applied to the tablespace.</p>
</li>
<li>
<p>The tablespace cannot be the active undo tablespace or <code dir="ltr"><a id="sthref1582"></a>SYSTEM</code> tablespace.</p>
</li>
<li>
<p>The tablespace must not currently be involved in an online backup, because the end of a backup updates the header file of all data files in the tablespace.</p>
</li>
<li>
<p>The tablespace cannot be a temporary tablespace.</p>
</li>
</ul>
<p>For better performance while accessing data in a read-only tablespace, you can issue a query that accesses all of the blocks of the tables in the tablespace just before making it read-only. A simple query, such as <code dir="ltr">SELECT COUNT (*)</code>, executed against each table ensures that the data blocks in the tablespace can be subsequently accessed most efficiently. This eliminates the need for the database to check the status of the transactions that most recently modified the blocks.</p>
<p>The following statement makes the <code dir="ltr">flights</code> tablespace read-only:</p>
<pre dir="ltr">
ALTER TABLESPACE flights READ ONLY;
</pre>
<p>You can issue the <code dir="ltr">ALTER TABLESPACE...READ ONLY</code> statement while the database is processing transactions. After the statement is issued, the tablespace is put into a transitional read-only mode, and the <code dir="ltr">ALTER</code> command waits for existing transactions to complete by committing or by rolling back. No further DML operations are allowed to the tablespace, and if a DML statement attempts further changes, then an error is returned.</p>
<p>The <code dir="ltr">ALTER TABLESPACE...READ ONLY</code> statement waits for the following transactions to either commit or roll back before returning: transactions that have pending or uncommitted changes to the tablespace and that were started before you issued the statement. If a transaction started before the statement remains active, but rolls back to a savepoint, rolling back its changes to the tablespace, then the statement no longer waits for this active transaction.</p>
<p>If you find it is taking a long time for the <code dir="ltr">ALTER TABLESPACE</code> statement to complete, then you can identify the transactions that are preventing the read-only state from taking effect. You can then notify the owners of those transactions and decide whether to terminate the transactions, if necessary.</p>
<p>The following example identifies the transaction entry for the <code dir="ltr">ALTER TABLESPACE...READ ONLY</code> statement and displays its session address (<code dir="ltr">saddr</code>):</p>
<pre dir="ltr">
SELECT SQL_TEXT, SADDR 
    FROM V$SQLAREA,V$SESSION
    WHERE V$SQLAREA.ADDRESS = V$SESSION.SQL_ADDRESS    
        AND SQL_TEXT LIKE 'alter tablespace%'; 

SQL_TEXT                                 SADDR   
---------------------------------------- --------
alter tablespace tbs1 read only          80034AF0
</pre>
<p>The start SCN of each active transaction is stored in the <code dir="ltr">V$TRANSACTION</code> view. Displaying this view sorted by ascending start SCN lists the transactions in execution order. From the preceding example, you already know the session address of the transaction entry for the read-only statement, and you can now locate it in the <code dir="ltr">V$TRANSACTION</code> view. All transactions with smaller start SCN, which indicates an earlier execution, can potentially hold up the quiesce and subsequent read-only state of the tablespace.</p>
<pre dir="ltr">
SELECT SES_ADDR, START_SCNB 
    FROM V$TRANSACTION
    ORDER BY START_SCNB;

SES_ADDR START_SCNB
-------- ----------
800352A0       3621   --&gt; waiting on this txn
80035A50       3623   --&gt; waiting on this txn
80034AF0       3628   --&gt; this is the ALTER TABLESPACE statement
80037910       3629   --&gt; don't care about this txn
</pre>
<p>You can now find the owners of the blocking transactions.</p>
<pre dir="ltr">
SELECT T.SES_ADDR, S.USERNAME, S.MACHINE
   FROM V$SESSION S, V$TRANSACTION T
   WHERE T.SES_ADDR = S.SADDR
   ORDER BY T.SES_ADDR

SES_ADDR USERNAME             MACHINE
-------- -------------------- --------------------
800352A0 DAVIDB               DAVIDBLAP             --&gt; Contact this user
80035A50 MIKEL                LAB61                 --&gt; Contact this user
80034AF0 DBA01                STEVEFLAP           
80037910 NICKD                NICKDLAP
</pre>
<p>After making the tablespace read-only, it is advisable to back it up immediately. As long as the tablespace remains read-only, no further backups of the tablespace are necessary, because no changes can be made to it.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink BRADV" href="../../backup.112/e10642/toc.htm"><span class="italic">Oracle Database Backup and Recovery User's Guide</span></a></div>
</div>
<!-- class="sect2" -->
<a id="i1006969"></a>
<div id="ADMIN11380" class="sect2">
<h3 class="sect2">Making a Read-Only Tablespace Writable<a id="sthref1583"></a></h3>
<p>Use the <code dir="ltr">READ WRITE<a id="sthref1584"></a></code> keywords in the <code dir="ltr">ALTER TABLESPACE</code> statement to change a tablespace to allow write operations. You must have the <code dir="ltr">ALTER TABLESPACE</code> or <code dir="ltr">MANAGE TABLESPACE</code> system privilege.</p>
<p>A prerequisite to making the tablespace read/write is that all of the data files in the tablespace, as well as the tablespace itself, must be online. Use the <code dir="ltr">DATAFILE...ONLINE</code> clause of the <code dir="ltr">ALTER DATABASE</code> statement to bring a data file online. The <code dir="ltr">V$DATAFILE</code> view lists the current status of data files.</p>
<p>The following statement makes the <code dir="ltr">flights</code> tablespace writable:</p>
<pre dir="ltr">
ALTER TABLESPACE flights READ WRITE;
</pre>
<p>Making a read-only tablespace writable updates the control file entry for the data files, so that you can use the read-only version of the data files as a starting point for recovery.</p>
</div>
<!-- class="sect2" -->
<a id="i1006979"></a>
<div id="ADMIN11381" class="sect2">
<h3 class="sect2">Creating a Read-Only Tablespace on a WORM Device</h3>
<p><a id="sthref1585"></a><a id="sthref1586"></a>Follow these steps to create a <a id="sthref1587"></a>read-only tablespace on a CD-ROM or WORM (Write Once-Read Many) device.</p>
<ol>
<li>
<p>Create a writable tablespace on another device. Create the objects that belong in the tablespace and insert your data.</p>
</li>
<li>
<p>Alter the tablespace to make it read-only.</p>
</li>
<li>
<p>Copy the data files of the tablespace onto the WORM device. Use operating system commands to copy the files.</p>
</li>
<li>
<p>Take the tablespace offline.</p>
</li>
<li>
<p>Rename the data files to coincide with the names of the data files you copied onto your WORM device. Use <code dir="ltr">ALTER TABLESPACE</code> with the <code dir="ltr">RENAME DATAFILE</code> clause. Renaming the data files changes their names in the control file.</p>
</li>
<li>
<p>Bring the tablespace back online.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1006990"></a>
<div id="ADMIN11382" class="sect2">
<h3 class="sect2">Delaying the Opening of Data Files in Read-Only Tablespaces</h3>
<p>When substantial portions of a very large database are stored in <a id="sthref1588"></a>read-only tablespaces that are located on slow-access devices or hierarchical storage, you should consider setting the <code dir="ltr">READ_ONLY_OPEN_DELAYED</code> initialization parameter to <code dir="ltr">TRUE</code>. This speeds certain operations, primarily opening the database, by causing data files in read-only tablespaces to be accessed for the first time only when an attempt is made to read data stored within them.</p>
<p>Setting <code dir="ltr">READ_ONLY_OPEN_DELAYED=TRUE</code> has the following side-effects:</p>
<ul>
<li>
<p>A missing or bad read-only file is not detected at open time. It is only discovered when there is an attempt to access it.</p>
</li>
<li>
<p><code dir="ltr">ALTER SYSTEM CHECK DATAFILES</code> does not check read-only files.</p>
</li>
<li>
<p><code dir="ltr">ALTER TABLESPACE...ONLINE</code> and <code dir="ltr">ALTER DATABASE</code> <code dir="ltr">DATAFILE...ONLINE</code> do not check read-only files. They are checked only upon the first access.</p>
</li>
<li>
<p><code dir="ltr">V$RECOVER_FILE</code>, <code dir="ltr">V$BACKUP</code>, and <code dir="ltr">V$DATAFILE_HEADER</code> do not access read-only files. Read-only files are indicated in the results list with the error "<code dir="ltr">DELAYED OPEN</code>", with zeroes for the values of other columns.</p>
</li>
<li>
<p><code dir="ltr">V$DATAFILE</code> does not access read-only files. Read-only files have a size of "0" listed.</p>
</li>
<li>
<p><code dir="ltr">V$RECOVERY_LOG</code> does not access read-only files. Logs they could need for recovery are not added to the list.</p>
</li>
<li>
<p><code dir="ltr">ALTER DATABASE NOARCHIVELOG</code> does not access read-only files.It proceeds even if there is a read-only file that requires recovery.</p>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p><code dir="ltr">RECOVER DATABASE</code> and <code dir="ltr">ALTER DATABASE OPEN RESETLOGS</code> continue to access all read-only data files regardless of the parameter value. To avoid accessing read-only files for these operations, take those files offline.</p>
</li>
<li>
<p>If a backup control file is used, the read-only status of some files may be inaccurate. This can cause some of these operations to return unexpected results. Care should be taken in this situation.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABDFCAE"></a>
<div id="ADMIN12490" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Altering and Maintaining Tablespaces<a id="sthref1589"></a></h2>
<p>This section covers various subjects that relate to altering and maintaining tablespaces.</p>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CHDHJGJI">Increasing the Size of a Tablespace</a></p>
</li>
<li>
<p><a href="#BABFDDCI">Altering a Locally Managed Tablespace</a></p>
</li>
<li>
<p><a href="#i1008507">Altering a Bigfile Tablespace</a></p>
</li>
<li>
<p><a href="#i1006555">Altering a Locally Managed Temporary Tablespace</a></p>
</li>
<li>
<p><a href="#CFHJFBBJ">Shrinking a Locally Managed Temporary Tablespace</a></p>
</li>
</ul>
<a id="CHDHJGJI"></a>
<div id="ADMIN13453" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Increasing the Size of a Tablespace<a id="sthref1590"></a><a id="sthref1591"></a></h3>
<p>You can increase the size of a tablespace by either increasing the size of a data file in the tablespace or adding one. See <a href="dfiles.htm#i1006333">"Changing Data File Size"</a> and <a href="dfiles.htm#i1006242">"Creating Data Files and Adding Data Files to a Tablespace"</a> for more information.</p>
<p>Additionally, you can enable automatic file extension (<code dir="ltr">AUTOEXTEND</code>) to data files and bigfile tablespaces. See <a href="dfiles.htm#i1006344">"Enabling and Disabling Automatic Extension for a Data File"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABFDDCI"></a>
<div id="ADMIN11362" class="sect2">
<h3 class="sect2">Altering a Locally Managed Tablespace</h3>
<p>You cannot alter a locally managed tablespace to a locally managed temporary tablespace, nor can you change its method of segment space management. Coalescing free extents is unnecessary for locally managed tablespaces. However, you can use the <code dir="ltr">ALTER TABLESPACE</code> statement on locally managed tablespaces for some operations, including the following:</p>
<ul>
<li>
<p>Adding a data file. For example:</p>
<pre dir="ltr">
ALTER TABLESPACE lmtbsb
   ADD DATAFILE '/u02/oracle/data/lmtbsb02.dbf' SIZE 1M;
</pre></li>
<li>
<p>Altering tablespace availability (<code dir="ltr">ONLINE</code>/<code dir="ltr">OFFLINE</code>). See <a href="#i1006770">"Altering Tablespace Availability"</a>.</p>
</li>
<li>
<p>Making a tablespace read-only or read/write. See <a href="#i1010339">"Using Read-Only Tablespaces"</a>.</p>
</li>
<li>
<p>Renaming a data file, or enabling or disabling the autoextension of the size of a data file in the tablespace. See <a href="dfiles.htm#g1017522">Chapter 15, "Managing Data Files and Temp Files"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1008507"></a>
<div id="ADMIN11364" class="sect2">
<h3 class="sect2">Altering a Bigfile Tablespace</h3>
<p>Two clauses of the <code dir="ltr">ALTER TABLESPACE</code> statement support data file transparency when you are using bigfile tablespaces:</p>
<ul>
<li>
<p><code dir="ltr"><a id="sthref1592"></a>RESIZE</code>: The <code dir="ltr">RESIZE</code> clause lets you resize the single data file in a bigfile tablespace to an absolute size, without referring to the data file. For example:</p>
<pre dir="ltr">
ALTER TABLESPACE bigtbs RESIZE 80G;
</pre></li>
<li>
<p><code dir="ltr"><a id="sthref1593"></a>AUTOEXTEND</code> (used outside of the <code dir="ltr">ADD</code> <code dir="ltr">DATAFILE</code> clause):</p>
<p>With a bigfile tablespace, you can use the <code dir="ltr">AUTOEXTEND</code> clause outside of the <code dir="ltr">ADD</code> <code dir="ltr">DATAFILE</code> clause. For example:</p>
<pre dir="ltr">
ALTER TABLESPACE bigtbs AUTOEXTEND ON NEXT 20G;
</pre></li>
</ul>
<p>An error is raised if you specify an <code dir="ltr">ADD</code> <code dir="ltr">DATAFILE</code> clause for a bigfile tablespace<a id="sthref1594"></a>.</p>
</div>
<!-- class="sect2" -->
<a id="i1006555"></a>
<div id="ADMIN11369" class="sect2">
<h3 class="sect2">Altering a Locally Managed <a id="sthref1595"></a>Temporary Tablespace</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot use the <code dir="ltr">ALTER TABLESPACE</code> statement, with the <code dir="ltr">TEMPORARY</code> keyword, to change a locally managed permanent tablespace into a locally managed temporary tablespace. You must use the <code dir="ltr">CREATE TEMPORARY TABLESPACE</code> statement to create a locally managed temporary tablespace.</div>
<p>You can use <code dir="ltr">ALTER TABLESPACE</code> to add a temp file, take a temp file offline, or bring a temp file online, as illustrated in the following examples:</p>
<pre dir="ltr">
ALTER TABLESPACE lmtemp
   ADD TEMPFILE '/u02/oracle/data/lmtemp02.dbf' SIZE 18M REUSE;

ALTER TABLESPACE lmtemp TEMPFILE OFFLINE;
ALTER TABLESPACE lmtemp TEMPFILE ONLINE;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot take a temporary tablespace offline. Instead, you take its temp file offline. The view <code dir="ltr">V$TEMPFILE</code> displays online status for a temp file.</div>
<p>The <code dir="ltr">ALTER DATABASE</code> statement can be used to alter temp files.</p>
<p>The following statements take offline and bring online temp files. They behave identically to the last two <code dir="ltr">ALTER</code> <code dir="ltr">TABLESPACE</code> statements in the previous example.</p>
<pre dir="ltr">
ALTER DATABASE TEMPFILE '/u02/oracle/data/lmtemp02.dbf' OFFLINE;
ALTER DATABASE TEMPFILE '/u02/oracle/data/lmtemp02.dbf' ONLINE;
</pre>
<p>The following statement resizes a temp file:</p>
<pre dir="ltr">
ALTER DATABASE TEMPFILE '/u02/oracle/data/lmtemp02.dbf' RESIZE 18M;
</pre>
<p>The following statement drops a temp file and deletes its operating system file:</p>
<pre dir="ltr">
ALTER DATABASE TEMPFILE '/u02/oracle/data/lmtemp02.dbf' DROP
    INCLUDING DATAFILES;
</pre>
<p>The tablespace to which this temp file belonged remains. A message is written to the alert log for the temp file that was deleted. If an operating system error prevents the deletion of the file, the statement still succeeds, but a message describing the error is written to the alert log.</p>
<p>It is also possible to use the <code dir="ltr">ALTER DATABASE</code> statement to enable or disable the automatic extension of an existing temp file, and to rename a temp file. See <a class="olink SQLRF00802" href="../../server.112/e41084/statements_1004.htm#SQLRF00802"><span class="italic">Oracle Database SQL Language Reference</span></a> for the required syntax.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To rename a temp file, you take the temp file offline, use operating system commands to rename or relocate the temp file, and then use the <code dir="ltr">ALTER</code> <code dir="ltr">DATABASE</code> <code dir="ltr">RENAME</code> <code dir="ltr">FILE</code> command to update the database control files.</div>
</div>
<!-- class="sect2" -->
<a id="CFHJFBBJ"></a>
<div id="ADMIN12353" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Shrinking a <a id="sthref1596"></a><a id="sthref1597"></a>Locally Managed Temporary Tablespace</h3>
<p>Large sort operations performed by the database may result in a temporary tablespace growing and occupying a considerable amount of disk space. After the sort operation completes, the extra space is not released; it is just marked as free and available for reuse. Therefore, a single large sort operation might result in a large amount of allocated temporary space that remains unused after the sort operation is complete. For this reason, the database enables you to shrink locally managed temporary tablespaces and release unused space.</p>
<p>You use the <code dir="ltr">SHRINK SPACE</code> clause of the <code dir="ltr">ALTER TABLESPACE</code> statement to shrink a temporary tablespace, or the <code dir="ltr">SHRINK TEMPFILE</code> clause of the <code dir="ltr">ALTER TABLESPACE</code> statement to shrink a specific temp file of a temporary tablespace. Shrinking frees as much space as possible while maintaining the other attributes of the tablespace or temp file. The optional <code dir="ltr">KEEP</code> clause defines a minimum size for the tablespace or temp file.</p>
<p>Shrinking is an online operation, which means that user sessions can continue to allocate sort extents if needed, and already-running queries are not affected.</p>
<p>The following example shrinks the locally managed temporary tablespace <code dir="ltr">lmtmp1</code> while ensuring a minimum size of 20M.</p>
<pre dir="ltr">
ALTER TABLESPACE lmtemp1 SHRINK SPACE KEEP 20M;
</pre>
<p>The following example shrinks the temp file <code dir="ltr">lmtemp02.dbf</code> of the locally managed temporary tablespace <code dir="ltr">lmtmp2</code>. Because the <code dir="ltr">KEEP</code> clause is omitted, the database attempts to shrink the temp file to the minimum possible size.</p>
<pre dir="ltr">
ALTER TABLESPACE lmtemp2 SHRINK TEMPFILE '/u02/oracle/data/lmtemp02.dbf';
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1009261"></a>
<div id="ADMIN01104" class="sect1">
<h2 class="sect1">Renaming Tablespaces<a id="sthref1598"></a></h2>
<p>Using the <code dir="ltr">RENAME TO</code> clause of the <code dir="ltr"><a id="sthref1599"></a>ALTER TABLESPACE</code>, you can rename a permanent or temporary tablespace. For example, the following statement renames the <code dir="ltr">users</code> tablespace:</p>
<pre dir="ltr">
ALTER TABLESPACE users RENAME TO usersts;
</pre>
<p>When you rename a tablespace the database updates all references to the tablespace name in the data dictionary, control file, and (online) data file headers. The database does not change the tablespace ID so if this tablespace were, for example, the default tablespace for a user, then the renamed tablespace would show as the default tablespace for the user in the <code dir="ltr">DBA_USERS</code> view.</p>
<p>The following affect the operation of this statement:</p>
<ul>
<li>
<p>The <code dir="ltr">COMPATIBLE</code> parameter must be set to 10.0.0 or higher.</p>
</li>
<li>
<p>If the tablespace being renamed is the <a id="sthref1600"></a><a id="sthref1601"></a><a id="sthref1602"></a><code dir="ltr">SYSTEM</code> tablespace or the <code dir="ltr">SYSAUX</code> tablespace, then it will not be renamed and an error is raised.</p>
</li>
<li>
<p>If any data file in the tablespace is offline, or if the tablespace is offline, then the tablespace is not renamed and an error is raised.</p>
</li>
<li>
<p>If the tablespace is <a id="sthref1603"></a>read only, then <a id="sthref1604"></a><a id="sthref1605"></a>data file headers are not updated. This should not be regarded as corruption; instead, it causes a message to be written to the alert log indicating that data file headers have not been renamed. The data dictionary and control file are updated.</p>
</li>
<li>
<p>If the tablespace is the <a id="sthref1606"></a><a id="sthref1607"></a>default temporary tablespace, then the corresponding entry in the database properties table is updated and the <code dir="ltr"><a id="sthref1608"></a>DATABASE_PROPERTIES</code> view shows the new name.</p>
</li>
<li>
<p>If the tablespace is an <a id="sthref1609"></a>undo tablespace and if the following conditions are met, then the tablespace name is changed to the new tablespace name in the server parameter file (<code dir="ltr">SPFILE</code>).</p>
<ul>
<li>
<p>The server parameter file was used to start up the database.</p>
</li>
<li>
<p>The tablespace name is specified as the <code dir="ltr">UNDO_TABLESPACE</code> for any instance.</p>
</li>
</ul>
<p>If a traditional initialization parameter file (<code dir="ltr">PFILE</code>) is being used then a message is written to the alert log stating that the initialization parameter file must be manually changed.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1007008"></a>
<div id="ADMIN11383" class="sect1">
<h2 class="sect1">Dropping Tablespaces</h2>
<p><a id="sthref1610"></a><a id="sthref1611"></a>You can drop a tablespace and its contents (the segments contained in the tablespace) from the database if the tablespace and its contents are no longer required. You must have the <code dir="ltr">DROP</code> <code dir="ltr">TABLESPACE</code> system privilege to drop a tablespace.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
Once a tablespace has been dropped, the data in the tablespace is not recoverable. Therefore, ensure that all data contained in a tablespace to be dropped will not be required in the future. Also, immediately before and after dropping a tablespace from a database, back up the database completely. This is <span class="italic">strongly recommended</span> so that you can recover the database if you mistakenly drop a tablespace, or if the database experiences a problem in the future after the tablespace has been dropped.</div>
<p>When you drop a tablespace, the file pointers in the control file of the associated database are removed. You can optionally direct Oracle Database to delete the operating system files (data files) that constituted the dropped tablespace. If you do not direct the database to delete the data files at the same time that it deletes the tablespace, you must later use the appropriate commands of your operating system to delete them.</p>
<p>You cannot drop a tablespace that contains any active segments. For example, if a table in the tablespace is currently being used or the tablespace contains undo data needed to roll back uncommitted transactions, you cannot drop the tablespace. The tablespace can be online or offline, but it is best to take the tablespace offline before dropping it.</p>
<p>To drop a tablespace, use the <code dir="ltr">DROP TABLESPACE</code> statement. <a id="sthref1612"></a><a id="sthref1613"></a>The following statement drops the <code dir="ltr">users</code> tablespace, including the segments in the tablespace:</p>
<pre dir="ltr">
DROP TABLESPACE users INCLUDING CONTENTS;
</pre>
<p>If the tablespace is empty (does not contain any tables, views, or other structures), you do not need to specify the <code dir="ltr">INCLUDING CONTENTS</code> clause. Use the <code dir="ltr">CASCADE CONSTRAINTS</code> clause to drop all referential integrity constraints from tables outside the tablespace that refer to primary and unique keys of tables inside the tablespace.</p>
<p>To delete the data files associated with a tablespace at the same time that the tablespace is dropped, use the <code dir="ltr">INCLUDING CONTENTS AND DATAFILES</code> clause. The following statement drops the <code dir="ltr">users</code> tablespace and its associated data files:</p>
<pre dir="ltr">
DROP TABLESPACE users INCLUDING CONTENTS AND DATAFILES;
</pre>
<p>A message is written to the alert log for each data file that is deleted. If an operating system error prevents the deletion of a file, the <code dir="ltr">DROP TABLESPACE</code> statement still succeeds, but a message describing the error is written to the alert log.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dfiles.htm#i1006556">"Dropping Data Files"</a></div>
</div>
<!-- class="sect1" -->
<a id="i1011659"></a>
<div id="ADMIN11384" class="sect1">
<h2 class="sect1">Managing the SYSAUX Tablespace<a id="sthref1614"></a></h2>
<p>The <code dir="ltr">SYSAUX</code> tablespace was installed as an auxiliary tablespace to the <code dir="ltr">SYSTEM</code> tablespace when you created your database. Some database components that formerly created and used separate tablespaces now occupy the <code dir="ltr">SYSAUX</code> tablespace.</p>
<p>If the <code dir="ltr">SYSAUX</code> tablespace becomes unavailable, core database functionality will remain operational. The database features that use the <code dir="ltr">SYSAUX</code> tablespace could fail, or function with limited capability.</p>
<div id="ADMIN11385" class="sect2"><a id="sthref1615"></a>
<h3 class="sect2">Monitoring Occupants of the <a id="sthref1616"></a>SYSAUX Tablespace</h3>
<p>The list of registered occupants of the <code dir="ltr">SYSAUX</code> tablespace are discussed in <a href="create.htm#i1011308">"About the SYSAUX Tablespace"</a>. These components can use the <code dir="ltr">SYSAUX</code> tablespace, and their installation provides the means of establishing their occupancy of the <code dir="ltr">SYSAUX</code> tablespace.</p>
<p>You can monitor the occupants of the <code dir="ltr">SYSAUX</code> tablespace using the <code dir="ltr">V$SYSAUX_OCCUPANTS</code> view. This view lists the following information about the occupants of the <code dir="ltr">SYSAUX</code> tablespace:</p>
<ul>
<li>
<p>Name of the occupant</p>
</li>
<li>
<p>Occupant description</p>
</li>
<li>
<p>Schema name</p>
</li>
<li>
<p>Move procedure</p>
</li>
<li>
<p>Current space usage</p>
</li>
</ul>
<p>View information is maintained by the occupants.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN30271" href="../../server.112/e40402/dynviews_3089.htm#REFRN30271"><span class="italic">Oracle Database Reference</span></a> for a detailed description of the <code dir="ltr">V$SYSAUX_OCCUPANTS</code> view</div>
</div>
<!-- class="sect2" -->
<div id="ADMIN11386" class="sect2"><a id="sthref1617"></a>
<h3 class="sect2">Moving Occupants Out Of or Into the <a id="sthref1618"></a>SYSAUX Tablespace</h3>
<p>You will have an option at component install time to specify that you do not want the component to reside in <code dir="ltr">SYSAUX</code>. Also, if you later decide that the component should be relocated to a designated tablespace, you can use the move procedure for that component, as specified in the <code dir="ltr"><a id="sthref1619"></a>V$SYSAUX_OCCUPANTS</code> view, to perform the move.</p>
<p>The move procedure also lets you move a component from another tablespace into the <code dir="ltr">SYSAUX</code> tablespace.</p>
</div>
<!-- class="sect2" -->
<div id="ADMIN11387" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1620"></a>
<h3 class="sect2">Controlling the Size of the SYSAUX Tablespace</h3>
<p>The <code dir="ltr">SYSAUX</code> tablespace is occupied by several database components, and its total size is governed by the space consumed by those components. The space consumed by the components, in turn, depends on which features or functionality are being used and on the nature of the database workload.</p>
<p>The largest portion of the <code dir="ltr">SYSAUX</code> tablespace is occupied by the Automatic Workload Repository (AWR). The space consumed by the AWR is determined by several factors, including the number of active sessions in the system at any given time, the snapshot interval, and the historical data retention period. A typical system with an average of 10 concurrent active sessions may require approximately 200 to 300 MB of space for its AWR data.</p>
<p>The following table provides guidelines on sizing the <code dir="ltr">SYSAUX</code> tablespace based on the system configuration and expected load.</p>
<div class="inftblinformal">
<table class="cellalignment1333" title="SYSAUX Tablespace Sizing Guidelines" summary="This table has 4 rows and 4 columns. It should be read one row at a time. Columns are: Parameter/Recommendation, Small, Medium, and Large." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t34">Parameter/Recommendation</th>
<th class="cellalignment1334" id="r1c2-t34">Small</th>
<th class="cellalignment1334" id="r1c3-t34">Medium</th>
<th class="cellalignment1334" id="r1c4-t34">Large</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t34" headers="r1c1-t34">Number of CPUs</td>
<td class="cellalignment1335" headers="r2c1-t34 r1c2-t34">2</td>
<td class="cellalignment1335" headers="r2c1-t34 r1c3-t34">8</td>
<td class="cellalignment1335" headers="r2c1-t34 r1c4-t34">32</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t34" headers="r1c1-t34">Number of concurrently active sessions</td>
<td class="cellalignment1335" headers="r3c1-t34 r1c2-t34">10</td>
<td class="cellalignment1335" headers="r3c1-t34 r1c3-t34">20</td>
<td class="cellalignment1335" headers="r3c1-t34 r1c4-t34">100</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t34" headers="r1c1-t34">Number of user objects: tables and indexes</td>
<td class="cellalignment1335" headers="r4c1-t34 r1c2-t34">500</td>
<td class="cellalignment1335" headers="r4c1-t34 r1c3-t34">5,000</td>
<td class="cellalignment1335" headers="r4c1-t34 r1c4-t34">50,000</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t34" headers="r1c1-t34">Estimated <code dir="ltr">SYSAUX</code> size at steady state with default configuration</td>
<td class="cellalignment1335" headers="r5c1-t34 r1c2-t34">500 MB</td>
<td class="cellalignment1335" headers="r5c1-t34 r1c3-t34">2 GB</td>
<td class="cellalignment1335" headers="r5c1-t34 r1c4-t34">5 GB</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p>You can control the size of the AWR by changing the snapshot interval and historical data retention period. For more information on managing the AWR snapshot interval and retention period, see <a class="olink PFGRF02601" href="../../server.112/e41573/autostat.htm#PFGRF02601"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</p>
<p>Another major occupant of the <code dir="ltr">SYSAUX</code> tablespace is the embedded Oracle Enterprise Manager repository. This repository is used by Oracle Enterprise Manager Database Control to store its metadata. The size of this repository depends on database activity and on configuration-related information stored in the repository.</p>
<p>Other database components in the <code dir="ltr">SYSAUX</code> tablespace will grow in size only if their associated features (for example, Oracle Text and Oracle Streams) are in use. If the features are not used, then these components do not have any significant effect on the size of the <code dir="ltr">SYSAUX</code> tablespace.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007031"></a>
<div id="ADMIN10066" class="sect1">
<h2 class="sect1">Diagnosing and Repairing Lo<a id="sthref1621"></a>cally Managed Tablespace Problems</h2>
<p>Oracle Database includes the <code dir="ltr">DBMS_SPACE_ADMIN</code> package, which is a collection of aids for diagnosing and repairing problems in locally managed tablespaces.</p>
<p class="subhead2"><a id="ADMIN12602"></a>DBMS_SPACE_ADMIN Package Procedures</p>
<p>The following table lists the <a id="sthref1622"></a><a id="sthref1623"></a><a id="sthref1624"></a><a id="sthref1625"></a><code dir="ltr">DBMS_SPACE_ADMIN</code> package procedures. See <a class="olink ARPLS057" href="../../appdev.112/e40758/d_spadmn.htm#ARPLS057"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for details on each procedure.</p>
<div class="inftblruleinformalwide">
<table class="cellalignment1333" title="DBMS_SPACE_ADMIN Procedures" summary="Column 1 lists the procedures contained in the DBMS_SPACE_ADMIN package. Column 2 provides the description of each procedure." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t35">Procedure</th>
<th class="cellalignment1334" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t35" headers="r1c1-t35"><code dir="ltr">ASSM_SEGMENT_VERIFY</code></td>
<td class="cellalignment1335" headers="r2c1-t35 r1c2-t35">Verifies the integrity of segments created in tablespaces that have automatic segment space management enabled. Outputs a dump file named <code dir="ltr"><span class="codeinlineitalic">sid</span></code><code dir="ltr">_ora_</code><code dir="ltr"><span class="codeinlineitalic">process_id</span></code>.<code dir="ltr">trc</code> to the location that corresponds to the <code dir="ltr">Diag</code> <code dir="ltr">Trace</code> entry in the <code dir="ltr">V$DIAG_INFO</code> view.
<p>Use <code dir="ltr">SEGMENT_VERIFY</code> for tablespaces with manual segment space management.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t35" headers="r1c1-t35"><code dir="ltr">ASSM_TABLESPACE_VERIFY</code></td>
<td class="cellalignment1335" headers="r3c1-t35 r1c2-t35">Verifies the integrity of tablespaces that have automatic segment space management enabled. Outputs a dump file named <code dir="ltr"><span class="codeinlineitalic">sid</span></code><code dir="ltr">_ora_</code><code dir="ltr"><span class="codeinlineitalic">process_id</span></code>.<code dir="ltr">trc</code> to the location that corresponds to the <code dir="ltr">Diag</code> <code dir="ltr">Trace</code> entry in the <code dir="ltr">V$DIAG_INFO</code> view.
<p>Use <code dir="ltr">TABLESPACE_VERIFY</code> for tablespaces with manual segment space management.</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t35" headers="r1c1-t35"><code dir="ltr">DROP_EMPTY_SEGMENTS</code></td>
<td class="cellalignment1335" headers="r4c1-t35 r1c2-t35">Drops segments from empty tables or table partitions and dependent objects</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t35" headers="r1c1-t35"><code dir="ltr">MATERIALIZE_DEFERRED_SEGMENTS</code></td>
<td class="cellalignment1335" headers="r5c1-t35 r1c2-t35">Materializes segments for tables and table partitions with deferred segment creation and their dependent objects.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r6c1-t35" headers="r1c1-t35"><code dir="ltr">SEGMENT_CORRUPT</code></td>
<td class="cellalignment1335" headers="r6c1-t35 r1c2-t35">Marks the segment corrupt or valid so that appropriate error recovery can be done</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r7c1-t35" headers="r1c1-t35"><code dir="ltr">SEGMENT_DROP_CORRUPT</code></td>
<td class="cellalignment1335" headers="r7c1-t35 r1c2-t35">Drops a segment currently marked corrupt (without reclaiming space)</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r8c1-t35" headers="r1c1-t35"><code dir="ltr">SEGMENT_DUMP</code></td>
<td class="cellalignment1335" headers="r8c1-t35 r1c2-t35">Dumps the segment header and bitmap blocks of a specific segment to a dump file named <code dir="ltr"><span class="codeinlineitalic">sid</span></code><code dir="ltr">_ora_</code><code dir="ltr"><span class="codeinlineitalic">process_id</span></code>.<code dir="ltr">trc</code> in the location that corresponds to the <code dir="ltr">Diag</code> <code dir="ltr">Trace</code> entry in the <code dir="ltr">V$DIAG_INFO</code> view. Provides an option to select a slightly abbreviated dump, which includes segment header and includes bitmap block summaries, without percent-free states of each block.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r9c1-t35" headers="r1c1-t35"><code dir="ltr">SEGMENT_VERIFY</code></td>
<td class="cellalignment1335" headers="r9c1-t35 r1c2-t35">Verifies the consistency of the extent map of the segment</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r10c1-t35" headers="r1c1-t35"><code dir="ltr">TABLESPACE_FIX_BITMAPS</code></td>
<td class="cellalignment1335" headers="r10c1-t35 r1c2-t35">Marks the appropriate DBA range (extent) as free or used in bitmap</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r11c1-t35" headers="r1c1-t35"><code dir="ltr">TABLESPACE_FIX_SEGMENT_STATES</code></td>
<td class="cellalignment1335" headers="r11c1-t35 r1c2-t35">Fixes the state of the segments in a tablespace in which migration was stopped</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r12c1-t35" headers="r1c1-t35"><code dir="ltr">TABLESPACE_MIGRATE_FROM_LOCAL</code></td>
<td class="cellalignment1335" headers="r12c1-t35 r1c2-t35">Migrates a locally managed tablespace to dictionary-managed tablespace</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r13c1-t35" headers="r1c1-t35"><code dir="ltr">TABLESPACE_MIGRATE_TO_LOCAL</code></td>
<td class="cellalignment1335" headers="r13c1-t35 r1c2-t35">Migrates a dictionary-managed tablespace to a locally managed tablespace</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r14c1-t35" headers="r1c1-t35"><code dir="ltr">TABLESPACE_REBUILD_BITMAPS</code></td>
<td class="cellalignment1335" headers="r14c1-t35 r1c2-t35">Rebuilds the appropriate bitmaps</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r15c1-t35" headers="r1c1-t35"><code dir="ltr">TABLESPACE_REBUILD_QUOTAS</code></td>
<td class="cellalignment1335" headers="r15c1-t35 r1c2-t35">Rebuilds quotas for a specific tablespace</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r16c1-t35" headers="r1c1-t35"><code dir="ltr">TABLESPACE_RELOCATE_BITMAPS</code></td>
<td class="cellalignment1335" headers="r16c1-t35 r1c2-t35">Relocates the bitmaps to the specified destination</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r17c1-t35" headers="r1c1-t35"><code dir="ltr">TABLESPACE_VERIFY</code></td>
<td class="cellalignment1335" headers="r17c1-t35 r1c2-t35">Verifies that the bitmaps and extent maps for the segments in the tablespace are synchronized</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblruleinformalwide" -->
<p>The following scenarios describe typical situations in which you can use the <code dir="ltr">DBMS_SPACE_ADMIN</code> package to diagnose and resolve problems.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Some of these procedures can result in lost and unrecoverable data if not used properly. You should work with Oracle Support Services if you have doubts about these procedures.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS057" href="../../appdev.112/e40758/d_spadmn.htm#ARPLS057"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for details about the <code dir="ltr">DBMS_SPACE_ADMIN</code> package</p>
</li>
<li>
<p><a href="diag.htm#CHDJBHBJ">"Viewing ADR Locations with the V$DIAG_INFO View"</a></p>
</li>
</ul>
</div>
<div id="ADMIN11388" class="sect2"><a id="sthref1626"></a>
<h3 class="sect2">Scenario 1: Fixing Bitmap When Allocated Blocks are Marked Free (No Overlap)</h3>
<p>The <code dir="ltr">TABLESPACE_VERIFY</code> procedure discovers that a segment has allocated blocks that are marked free in the bitmap, but no overlap between segments is reported.</p>
<p>In this scenario, perform the following tasks:</p>
<ol>
<li>
<p>Call the <code dir="ltr">SEGMENT_DUMP</code> procedure to dump the ranges that the administrator allocated to the segment.</p>
</li>
<li>
<p>For each range, call the <code dir="ltr">TABLESPACE_FIX_BITMAPS</code> procedure with the <code dir="ltr">TABLESPACE_EXTENT_MAKE_USED</code> option to mark the space as used.</p>
</li>
<li>
<p>Call <code dir="ltr">TABLESPACE_REBUILD_QUOTAS</code> to rebuild quotas.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<div id="ADMIN11389" class="sect2"><a id="sthref1627"></a>
<h3 class="sect2">Scenario 2: Dropping a Corrupted Segment</h3>
<p>You cannot drop a segment because the bitmap has segment blocks marked "free". The system has automatically marked the segment corrupted.</p>
<p>In this scenario, perform the following tasks:</p>
<ol>
<li>
<p>Call the <code dir="ltr">SEGMENT_VERIFY</code> procedure with the <code dir="ltr">SEGMENT_VERIFY_EXTENTS_GLOBAL</code> option. If no overlaps are reported, then proceed with steps 2 through 5.</p>
</li>
<li>
<p>Call the <code dir="ltr">SEGMENT_DUMP</code> procedure to dump the DBA ranges allocated to the segment.</p>
</li>
<li>
<p>For each range, call <code dir="ltr">TABLESPACE_FIX_BITMAPS</code> with the <code dir="ltr">TABLESPACE_EXTENT_MAKE_FREE</code> option to mark the space as free.</p>
</li>
<li>
<p>Call <code dir="ltr">SEGMENT_DROP_CORRUPT</code> to drop the <code dir="ltr">SEG$</code> entry.</p>
</li>
<li>
<p>Call <code dir="ltr">TABLESPACE_REBUILD_QUOTAS</code> to rebuild quotas.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<div id="ADMIN11390" class="sect2"><a id="sthref1628"></a>
<h3 class="sect2">Scenario 3: Fixing Bitmap Where Overlap is Reported</h3>
<p>The <code dir="ltr">TABLESPACE_VERIFY</code> procedure reports some overlapping. Some of the real data must be sacrificed based on previous internal errors.</p>
<p>After choosing the object to be sacrificed, in this case say, table <code dir="ltr">t1</code>, perform the following tasks:</p>
<ol>
<li>
<p>Make a list of all objects that <code dir="ltr">t1</code> overlaps.</p>
</li>
<li>
<p>Drop table <code dir="ltr">t1</code>. If necessary, follow up by calling the <code dir="ltr">SEGMENT_DROP_CORRUPT</code> procedure.</p>
</li>
<li>
<p>Call the <code dir="ltr">SEGMENT_VERIFY</code> procedure on all objects that <code dir="ltr">t1</code> overlapped. If necessary, call the <code dir="ltr">TABLESPACE_FIX_BITMAPS</code> procedure to mark appropriate bitmap blocks as used.</p>
</li>
<li>
<p>Rerun the <code dir="ltr">TABLESPACE_VERIFY</code> procedure to verify that the problem is resolved.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<div id="ADMIN11391" class="sect2"><a id="sthref1629"></a>
<h3 class="sect2">Scenario 4: Correcting Media Corruption of Bitmap Blocks</h3>
<p>A set of bitmap blocks has media corruption.</p>
<p>In this scenario, perform the following tasks:</p>
<ol>
<li>
<p>Call the <code dir="ltr">TABLESPACE_REBUILD_BITMAPS</code> procedure, either on all bitmap blocks, or on a single block if only one is corrupt.</p>
</li>
<li>
<p>Call the <code dir="ltr">TABLESPACE_REBUILD_QUOTAS</code> procedure to rebuild quotas.</p>
</li>
<li>
<p>Call the <code dir="ltr">TABLESPACE_VERIFY</code> procedure to verify that the bitmaps are consistent.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<div id="ADMIN11392" class="sect2"><a id="sthref1630"></a>
<h3 class="sect2">Scenario 5: Migrating from a Dictionary-Managed to a Locally Managed Tablespace</h3>
<p>Use the <code dir="ltr">TABLESPACE_MIGRATE_TO_LOCAL</code> procedure to migrate a dictionary-managed tablespace to a locally managed tablespace. This operation is done online, but space management operations are blocked until the migration has been completed. Therefore, you can read or modify data while the migration is in progress, but if you are loading a large amount of data that requires the allocation of additional extents, then the operation may be blocked.</p>
<p>Assume that the database block size is 2K and the existing extent sizes in tablespace <code dir="ltr">tbs_1</code> are 10, 50, and 10,000 blocks (used, used, and free). The <code dir="ltr">MINIMUM EXTENT</code> value is 20K (10 blocks). Allow the system to choose the bitmap allocation unit. The value of 10 blocks is chosen, because it is the highest common denominator and does not exceed <code dir="ltr">MINIMUM EXTENT</code>.</p>
<p>The statement to convert <code dir="ltr">tbs_1</code> to a locally managed tablespace is as follows:</p>
<pre dir="ltr">
EXEC DBMS_SPACE_ADMIN.TABLESPACE_MIGRATE_TO_LOCAL ('tbs_1');
</pre>
<p>If you choose to specify an allocation unit size, it must be a factor of the unit size calculated by the system.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007147"></a>
<div id="ADMIN11393" class="sect1">
<h2 class="sect1">Migrating the SYSTEM Tablespace to a <a id="sthref1631"></a><a id="sthref1632"></a><a id="sthref1633"></a>Locally Managed Tablespace</h2>
<p>Use the <code dir="ltr">DBMS_SPACE_ADMIN.TABLESPACE_MIGRATE_TO_LOCAL</code> procedure to migrate the <code dir="ltr"><a id="sthref1634"></a>SYSTEM</code> tablespace from dictionary-managed to locally managed.</p>
<p>Before performing the migration the following conditions must be met:</p>
<ul>
<li>
<p>The database has a default temporary tablespace that is not <code dir="ltr">SYSTEM.</code></p>
</li>
<li>
<p>There are no rollback segments in the dictionary-managed tablespace.</p>
</li>
<li>
<p>There is at least one online rollback segment in a locally managed tablespace, or if using automatic undo management, an undo tablespace is online.</p>
</li>
<li>
<p>All tablespaces other than the tablespace containing the undo space (that is, the tablespace containing the rollback segment or the undo tablespace) are in read-only mode.</p>
</li>
<li>
<p>The <code dir="ltr">SYSAUX</code> tablespace is offline.</p>
</li>
<li>
<p>The system is in restricted mode.</p>
</li>
<li>
<p>There is a cold backup of the database.</p>
</li>
</ul>
<p>All of these conditions, except for the cold backup, are enforced by the <code dir="ltr">TABLESPACE_MIGRATE_TO_LOCAL</code> procedure.</p>
<p>The following statement performs the migration:</p>
<pre dir="ltr">
SQL&gt; EXECUTE DBMS_SPACE_ADMIN.TABLESPACE_MIGRATE_TO_LOCAL('SYSTEM');
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
After the <code dir="ltr">SYSTEM</code> tablespace is migrated to locally managed, any dictionary-managed tablespaces in the database cannot be made read/write. If you want to use the dictionary-managed tablespaces in read/write mode, then Oracle recommends that you first migrate these tablespaces to locally managed before migrating the <code dir="ltr">SYSTEM</code> tablespace.</div>
</div>
<!-- class="sect1" -->
<a id="i1007169"></a>
<div id="ADMIN11394" class="sect1">
<h2 class="sect1">Transporting Tablespaces Between Databases</h2>
<p><a id="sthref1635"></a>This section describes how to transport tablespaces between databases, and contains the following topics:</p>
<ul>
<li>
<p><a href="#i1007197">Introduction to Transportable Tablespaces</a></p>
</li>
<li>
<p><a href="#i1010932">About Transporting Tablespaces Across Platforms</a></p>
</li>
<li>
<p><a href="#i1007233">Limitations on Transportable Tablespace Use</a></p>
</li>
<li>
<p><a href="#i1007244">Compatibility Considerations for Transportable Tablespaces</a></p>
</li>
<li>
<p><a href="#i1007252">Transporting Tablespaces Between Databases: A Procedure and Example</a></p>
</li>
<li>
<p><a href="#i1007525">Using Transportable Tablespaces: Scenarios</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must be using the Enterprise Edition of Oracle Database Release 8<span class="italic">i</span> or later to generate a transportable tablespace set. However, you can use any edition of Oracle Database 8<span class="italic">i</span> or later to import a transportable tablespace set into an Oracle database on the same platform. To import a transportable tablespace set into an Oracle database on a different platform, both databases must have compatibility set to at least 10.0.0. See <a href="#i1007244">"Compatibility Considerations for Transportable Tablespaces"</a> for a discussion of database compatibility for transporting tablespaces across release levels.</div>
<a id="i1007197"></a>
<div id="ADMIN01101" class="sect2">
<h3 class="sect2">Introduction to Transpo<a id="sthref1636"></a>rtable Tablespaces</h3>
<p>You can use the Transportable Tablespaces feature to copy a set of tablespaces from one Oracle Database to another.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This method for transporting tablespaces requires that you place the tablespaces to be transported in read-only mode until you complete the transporting process. If this is undesirable, you can use the Transportable Table<a id="sthref1637"></a>spaces from Backup feature, described in <a class="olink BRADV05141" href="../../backup.112/e10642/rcmttbsb.htm#BRADV05141"><span class="italic">Oracle Database Backup and Recovery User's Guide</span></a>.</div>
<p>The tablespaces being transported can be either dictionary managed or locally managed. Starting with Oracle9<span class="italic">i</span>, the transported tablespaces are not required to be of the same block size as the destination database standard block size.</p>
<p>Moving data using transportable tablespaces is much faster than performing either an export/import or unload/load of the same data. This is because the data files containing all of the actual data are just copied to the destination location, and you use Data Pump to transfer only the metadata of the tablespace objects to the new database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Beginning with Oracle Database 11g Release 1, you must use Data Pump for transportable tablespaces. The only circumstance under which you can use the original import and export utilities, IMP and EXP, is for a backward migration of XMLType data to a database version 10<span class="italic">g</span> Release 2 or earlier. See <a class="olink SUTIL" href="../e22490/toc.htm"><span class="italic">Oracle Database Utilities</span></a> for more information on these utilities and to <a class="olink ADXDB" href="../../appdev.112/e23094/toc.htm"><span class="italic">Oracle XML DB Developer's Guide</span></a> for more information on XMLTypes.</div>
<p>The transportable tablespace feature is useful in several scenarios, including:</p>
<ul>
<li>
<p>Exporting and importing partitions in data warehousing tables</p>
</li>
<li>
<p>Publishing structured data on CDs</p>
</li>
<li>
<p>Copying multiple read-only versions of a tablespace on multiple databases</p>
</li>
<li>
<p>Archiving historical data</p>
</li>
<li>
<p>Performing tablespace point-in-time-recovery (TSPITR)</p>
</li>
</ul>
<p>These scenarios are discussed in <a href="#i1007525">"Using Transportable Tablespaces: Scenarios"</a>.</p>
<p>There are two ways to transport a tablespace:</p>
<ul>
<li>
<p>Manually, following the steps described in this section. This involves issuing commands to SQL*Plus, RMAN, and Data Pump.</p>
</li>
<li>
<p>Using the Transport Tablespaces Wizard in Enterprise Manager</p>
<p><span class="bold">To run the Transpo<a id="sthref1638"></a>rt Tablespaces Wizard:</span></p>
<ol>
<li>
<p>Log in to Enterprise Manager with a user that has the <code dir="ltr">EXP_FULL_DATABASE</code> role.</p>
</li>
<li>
<p>At the top of the Database Home page, click <span class="bold">Data Movement</span> to view the Data Movement page.</p>
</li>
<li>
<p>Under Move Database Files, click <span class="bold">Transport Tablespaces</span>.</p>
</li>
</ol>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DWHSG8301" href="../../server.112/e25554/transport.htm#DWHSG8301"><span class="italic">Oracle Database Data Warehousing Guide</span></a> for information about using transportable tablespaces in a data warehousing environment</div>
</div>
<!-- class="sect2" -->
<a id="i1010932"></a>
<div id="ADMIN11395" class="sect2">
<h3 class="sect2">About Transporting Tablespaces Across Platforms</h3>
<p>Starting with Oracle Database Release 10<span class="italic">g</span>, you can transport tablespaces across platforms. This functionality can be used to:</p>
<ul>
<li>
<p>Allow a database to be migrated from one platform to another</p>
</li>
<li>
<p>Provide an easier and more efficient means for content providers to publish structured data and distribute it to customers running Oracle Database on different platforms</p>
</li>
<li>
<p>Simplify the distribution of data from a data warehouse environment to data marts, which are often running on smaller platforms</p>
</li>
<li>
<p>Enable the sharing of read-only tablespaces between Oracle Database installations on different operating systems or platforms, assuming that your storage system is accessible from those platforms and the platforms all have the same endianness, as described in the sections that follow.</p>
</li>
</ul>
<p>Many, but not all, platforms are supported for cross-platform tablespace transport. You can query the <code dir="ltr">V$TRANSPORTABLE_PLATFORM</code> view to see the platforms that are supported, and to determine each platform's endian format (byte ordering). The following query displays the platforms that support cross-platform tablespace transport:</p>
<pre dir="ltr">
SQL&gt; COLUMN PLATFORM_NAME FORMAT A36
SQL&gt; SELECT * FROM V$TRANSPORTABLE_PLATFORM ORDER BY PLATFORM_NAME;

PLATFORM_ID PLATFORM_NAME                        ENDIAN_FORMAT
----------- ------------------------------------ --------------
          6 AIX-Based Systems (64-bit)           Big
         16 Apple Mac OS                         Big
         19 HP IA Open VMS                       Little
         15 HP Open VMS                          Little
          5 HP Tru64 UNIX                        Little
          3 HP-UX (64-bit)                       Big
          4 HP-UX IA (64-bit)                    Big
         18 IBM Power Based Linux                Big
          9 IBM zSeries Based Linux              Big
         10 Linux IA (32-bit)                    Little
         11 Linux IA (64-bit)                    Little
         13 Linux x86 64-bit                     Little
          7 Microsoft Windows IA (32-bit)        Little
          8 Microsoft Windows IA (64-bit)        Little
         12 Microsoft Windows x86 64-bit         Little
         17 Solaris Operating System (x86)       Little
         20 Solaris Operating System (x86-64)    Little
          1 Solaris[tm] OE (32-bit)              Big
          2 Solaris[tm] OE (64-bit)              Big
 
19 rows selected.
</pre>
<p>If the source platform and the destination platform are of different endianness, then an additional step must be done on either the source or destination platform to convert the tablespace being transported to the destination format. If they are of the same endianness, then no conversion is necessary and tablespaces can be transported as if they were on the same platform.</p>
<p>Before a tablespace can be transported to a different platform, the data file header must identify the platform to which it belongs. In an Oracle Database with compatibility set to 10.0.0 or later, you can accomplish this by making the data file read/write at least once.</p>
</div>
<!-- class="sect2" -->
<a id="i1007233"></a>
<div id="ADMIN11396" class="sect2">
<h3 class="sect2">Limitations on Transportable Tablespace Use</h3>
<p>Be aware of the following limitations as you plan to <a id="sthref1639"></a><a id="sthref1640"></a><a id="sthref1641"></a><a id="sthref1642"></a>transport tablespaces:</p>
<ul>
<li>
<p>The source and the destination databases must use compatible database character sets. That is, one of the following must be true:</p>
<ul>
<li>
<p>The database character sets of the source and the target databases are the same.</p>
</li>
<li>
<p>The source database character set is a strict (binary) subset of the target database character set, and the following three conditions are true:</p>
<ul>
<li>
<p>The source database is in version 10.1.0.3 or higher.</p>
</li>
<li>
<p>The tablespaces to be transported contain no table columns with character length semantics or the maximum character width is the same in both the source and target database character sets.</p>
</li>
<li>
<p>The tablespaces to be transported contain no columns with the <code dir="ltr">CLOB</code> data type, or the source and the target database character sets are both single-byte or both multibyte.</p>
</li>
</ul>
</li>
<li>
<p>The source database character set is a strict (binary) subset of the target database character set, and the following two conditions are true:</p>
<ul>
<li>
<p>The source database is in a version lower than 10.1.0.3.</p>
</li>
<li>
<p>The maximum character width is the same in the source and target database character sets.</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>The source and the target databases must use compatible national character sets. Specifically, one of the following must be true:</p>
<ul>
<li>
<p>The national character sets of the source and target databases are the same.</p>
</li>
<li>
<p>The source database is in version 10.1.0.3 or higher and the tablespaces to be transported contain no columns with <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code>, or <code dir="ltr">NCLOB</code> data type.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The subset-superset relationship between character sets recognized by Oracle Database is documented in the <a class="olink NLSPG584" href="../../server.112/e10729/applocaledata.htm#NLSPG584"><span class="italic">Oracle Database Globalization Support Guide</span></a>.</div>
</li>
<li>
<p>You cannot transport a tablespace to a destination database that contains a tablespace of the same name. However, before the transport operation, you can rename either the tablespace to be transported or the destination tablespace.</p>
</li>
<li>
<p>Objects with underlying objects (such as materialized views) or contained objects (such as partitioned tables) are not transportable unless all of the underlying or contained objects are in the tablespace set.</p>
</li>
<li>
<p>Encrypted tablespaces have the following the limitations:</p>
<ul>
<li>
<p>Before transporting an encrypted tablespace, you must copy the Oracle wallet manually to the destination database, unless the master encryption key is stored in a Hardware Security Module (HSM) device instead of an Oracle wallet. When copying the wallet, the wallet password remains the same in the destination database. However, it is recommended that you change the password on the destination database so that each database has its own wallet password. See <a class="olink ASOAG" href="../../network.112/e40393/toc.htm"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for information about HSM devices, about determining the location of the Oracle wallet, and about changing the wallet password with Oracle Wallet Manager.</p>
</li>
<li>
<p>You cannot transport an encrypted tablespace to a database that already has an Oracle wallet for transparent data encryption. In this case, you must use Oracle Data Pump to export the tablespace's schema objects and then import them to the destination database. You can optionally take advantage of Oracle Data Pump features that enable you to maintain encryption for the data while it is being exported and imported. See <a class="olink SUTIL200" href="../../server.112/e22490/dp_export.htm#SUTIL200"><span class="italic">Oracle Database Utilities</span></a> for more information.</p>
</li>
<li>
<p>You cannot transport an encrypted tablespace to a platform with different endianness.</p>
</li>
</ul>
</li>
<li>
<p>Tablespaces that do not use block encryption but that contain tables with encrypted columns cannot be transported. You must use Oracle Data Pump to export and import the tablespace's schema objects. You can take advantage of Oracle Data Pump features that enable you to maintain encryption for the data while it is being exported and imported. See <a class="olink SUTIL200" href="../../server.112/e22490/dp_export.htm#SUTIL200"><span class="italic">Oracle Database Utilities</span></a> for more information.</p>
</li>
<li>
<p>Beginning with Oracle Database 10<span class="italic">g</span> Release 2, you can transport tablespaces that contain XMLTypes. Beginning with Oracle Database 11<span class="italic">g</span> Release 1, you must use only Data Pump to export and import the tablespace metadata for tablespaces that contain XMLTypes.</p>
<p>The following query returns a list of tablespaces that contain XMLTypes:</p>
<pre dir="ltr">
select distinct p.tablespace_name from dba_tablespaces p, 
  dba_xml_tables x, dba_users u, all_all_tables t where
  t.table_name=x.table_name and t.tablespace_name=p.tablespace_name
  and x.owner=u.username
</pre>
<p>See <a class="olink ADXDB" href="../../appdev.112/e23094/toc.htm"><span class="italic">Oracle XML DB Developer's Guide</span></a> for information on XMLTypes.</p>
<p>Transporting tablespaces with XMLTypes has the following limitations:</p>
<ul>
<li>
<p>The destination database must have XML DB installed.</p>
</li>
<li>
<p>Schemas referenced by XMLType tables cannot be the XML DB standard schemas.</p>
</li>
<li>
<p>Schemas referenced by XMLType tables cannot have cyclic dependencies.</p>
</li>
<li>
<p>XMLType tables with row level security are not supported, because they cannot be exported or imported.</p>
</li>
<li>
<p>If the schema for a transported XMLType table is not present in the destination database, it is imported and registered. If the schema already exists in the destination database, an error is returned unless the <code dir="ltr">ignore=y</code> option is set.</p>
</li>
<li>
<p>If an XMLType table uses a schema that is dependent on another schema, the schema that is depended on is not exported. The import succeeds only if that schema is already in the destination database.</p>
</li>
</ul>
</li>
</ul>
<p>Additional limitations include the following:</p>
<p><a id="ADMIN12604"></a><span class="subhead3">SYSTEM Tablespace Objects&nbsp;</span>You cannot transport the SYSTEM tablespace or objects owned by the user SYS. Some examples of such objects are PL/SQL, Java classes, callouts, views, synonyms, users, privileges, dimensions, directories, and sequences.</p>
<p><a id="ADMIN12605"></a><span class="subhead3">Opaque Types&nbsp;</span>Types whose interpretation is application-specific and opaque to the database (such as <code dir="ltr">RAW</code>, <code dir="ltr">BFILE</code>, and the AnyTypes) can be transported, but they are not converted as part of the cross-platform transport operation. Their actual structure is known only to the application, so the application must address any endianness issues after these types are moved to the new platform. Types and objects that use these opaque types, either directly or indirectly, are also subject to this limitation.</p>
<p><a id="ADMIN12606"></a><span class="subhead3">Floating-Point Numbers&nbsp;</span> <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> types are transportable using Data Pump.</p>
</div>
<!-- class="sect2" -->
<a id="i1007244"></a>
<div id="ADMIN11397" class="sect2">
<h3 class="sect2">Compatibility Considerations for Transportable Tablespaces</h3>
<p><a id="sthref1643"></a>When you create a transportable tablespace set, Oracle Database computes the lowest compatibility level at which the destination database must run. This is referred to as the compatibility level of the transportable set. Beginning with Oracle Database 11<span class="italic">g</span>, a tablespace can always be transported to a database with the same or higher compatibility setting, whether the destination database is on the same or a different platform. The database signals an error if the compatibility level of the transportable set is higher than the compatibility level of the destination database.</p>
<p>The following table shows the minimum compatibility requirements of the source and destination tablespace in various scenarios. The source and destination database need not have the same compatibility setting.</p>
<div id="ADMIN13046" class="tblformal">
<p class="titleintable"><a id="sthref1644"></a><a id="sthref1645"></a>Table 14-1 Minimum Compatibility Requirements</p>
<table class="cellalignment1338" title="Minimum Compatibility Requirements" summary="The leftmost column lists three database scenarios. The second and third columns shows the minimum compatibility requirements for the source and target tablespace, respectively." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t44" rowspan="2">Transport Scenario</th>
<th class="cellalignment1334" id="r1c2-t44" colspan="2">Minimum Compatibility Setting</th>
</tr>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r2c1-t44" headers="r1c1-t44 r1c1-t44">Source Database</th>
<th class="cellalignment1334" id="r2c2-t44" headers="r1c1-t44 r2c1-t44 r1c2-t44">Destination Database</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t44" headers="r1c1-t44 r2c1-t44">
<p>Databases on the same platform</p>
</td>
<td class="cellalignment1335" headers="r3c1-t44 r1c2-t44 r2c2-t44">
<p>8.0</p>
</td>
<td class="cellalignment1335" headers="r3c1-t44 r1c2-t44">
<p>8.0</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t44" headers="r1c1-t44 r2c1-t44">
<p>Tablespace with different database block size than the destination database</p>
</td>
<td class="cellalignment1335" headers="r4c1-t44 r1c2-t44 r2c2-t44">
<p>9.0</p>
</td>
<td class="cellalignment1335" headers="r4c1-t44 r1c2-t44">
<p>9.0</p>
</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t44" headers="r1c1-t44 r2c1-t44">
<p>Databases on different platforms</p>
</td>
<td class="cellalignment1335" headers="r5c1-t44 r1c2-t44 r2c2-t44">
<p>10.0</p>
</td>
<td class="cellalignment1335" headers="r5c1-t44 r1c2-t44">
<p>10.0</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="i1007252"></a>
<div id="ADMIN10140" class="sect2">
<h3 class="sect2">Transporting Tablespaces Between Databases: A Procedure<a id="sthref1646"></a> and Example</h3>
<p>The following list of tasks summarizes the process of transporting a tablespace. Details for each task are provided in the subsequent example.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This method of generating a transportable tablespace requires that you temporarily make the tablespace read-only. If this is undesirable, you can use the alternate method known as transportable tablespace from backup. See <a class="olink BRADV05141" href="../../backup.112/e10642/rcmttbsb.htm#BRADV05141"><span class="italic">Oracle Database Backup and Recovery User's Guide</span></a> for details.</div>
<ol>
<li>
<p>For cross-platform transport, check the endian format of both platforms by querying the <code dir="ltr">V$TRANSPORTABLE_PLATFORM</code> view.</p>
<p>Ignore this task if you are transporting your tablespace set to the same platform.</p>
</li>
<li>
<p>Pick a self-contained set of tablespaces.</p>
</li>
<li>
<p>At the source database, place the set of tablespaces in read-only mode and generate a transportable tablespace set.</p>
<p>A <span class="bold">transportab<a id="sthref1647"></a>le tablespace set</span> (or <span class="bold">transportable set</span>) consists of data files for the set of tablespaces being transported and an export file containing structural information (metadata) for the set of tablespaces. You use Data Pump to perform the export.</p>
<p>If you are transporting the tablespace set to a platform with different endianness from the source platform, you must convert the tablespace set to the endianness of the destination platform. You can perform a source-side conversion at this step in the procedure, or you can perform a destination-side conversion as part of Task 4.</p>
</li>
<li>
<p>Transport the tablespace set.</p>
<p>Copy the data files and the export file to a place that is accessible to the destination database.</p>
<p>If you transported the tablespace set to a platform with different endianness from the source platform, and you have not performed a source-side conversion to the endianness of the destination platform, perform a destination-side conversion now.</p>
</li>
<li>
<p>(Optional) Restore tablespaces to read/write mode.</p>
</li>
<li>
<p>At the destination database, import the tablespace set.</p>
<p>Invoke the Data Pump utility to import the metadata for the tablespace set.</p>
</li>
</ol>
<p class="subhead1"><a id="ADMIN12607"></a>Example</p>
<p>These tasks for transporting a tablespace are illustrated more fully in the example that follows, where it is assumed the following data files and tablespaces exist:</p>
<div class="inftblruleinformal">
<table class="cellalignment1333" title="Example Tablespaces and Datafiles" summary="This table lists the assumptions for the following example. Column 1 provides the tablespace name, column 2 lists its datafile." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t46">Tablespace</th>
<th class="cellalignment1334" id="r1c2-t46">Data File</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t46" headers="r1c1-t46"><code dir="ltr">sales_1</code></td>
<td class="cellalignment1335" headers="r2c1-t46 r1c2-t46">/u01/app/oracle/oradata/salesdb/sales_101.dbf</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t46" headers="r1c1-t46"><code dir="ltr">sales_2</code></td>
<td class="cellalignment1335" headers="r3c1-t46 r1c2-t46">/u01/app/oracle/oradata/salesdb/sales_201.dbf</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblruleinformal" -->
<div id="ADMIN11398" class="sect3"><a id="sthref1648"></a>
<h4 class="sect3">Task 1: Determine if Platforms are Supported and Determine Endianness</h4>
<p>This task is only necessary if you are transporting the tablespace set to a platform different from the source platform.</p>
<p>If you are transporting the tablespace set to a platform different from the source platform, then determine if cross-platform tablespace transport is supported for both the source and destination platforms, and determine the endianness of each platform. If both platforms have the same endianness, no conversion is necessary. Otherwise you must do a conversion of the tablespace set either at the source or destination database.</p>
<p>If you are transporting <code dir="ltr">sales_1</code> and <code dir="ltr">sales_2</code> to a different platform, you can execute the following query on each platform. If the query returns a row, the platform supports cross-platform tablespace transport.</p>
<pre dir="ltr">
SELECT d.PLATFORM_NAME, ENDIAN_FORMAT
     FROM V$TRANSPORTABLE_PLATFORM tp, V$DATABASE d
     WHERE tp.PLATFORM_NAME = d.PLATFORM_NAME;
</pre>
<p>The following is the query result from the source platform:</p>
<pre dir="ltr">
PLATFORM_NAME                      ENDIAN_FORMAT
---------------------------------- --------------
Solaris[tm] OE (32-bit)            Big
</pre>
<p>The following is the result from the destination platform:</p>
<pre dir="ltr">
PLATFORM_NAME                      ENDIAN_FORMAT
---------------------------------- --------------
Microsoft Windows IA (32-bit)      Little
</pre>
<p>You can see that the endian formats are different and thus a conversion is necessary for transporting the tablespace set.</p>
</div>
<!-- class="sect3" -->
<div id="ADMIN11399" class="sect3"><a id="sthref1649"></a>
<h4 class="sect3">Task 2: Pick a Self-Contained Set of Tablespaces</h4>
<p>There may be logical or physical dependencies between objects in the transportable set and those outside of the set.<a id="sthref1650"></a> You can only transport a set of tablespaces that is self-contained. In this context "self-contained" means that there are no references from inside the set of tablespaces pointing outside of the tablespaces. Some examples of self contained tablespace violations are:</p>
<ul>
<li>
<p>An index inside the set of tablespaces is for a table outside of the set of tablespaces.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
It is not a violation if a corresponding index for a table is outside of the set of tablespaces.</div>
</li>
<li>
<p>A partitioned table is partially contained in the set of tablespaces.</p>
<p>The tablespace set you want to copy must contain either all partitions of a partitioned table, or none of the partitions of a partitioned table. To transport a subset of a partition table, you must exchange the partitions into tables.</p>
<p>See <a class="olink VLDBG1156" href="../../server.112/e25523/part_admin002.htm#VLDBG1156"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a> for information about exchanging partitions.</p>
</li>
<li>
<p>A referential integrity constraint points to a table across a set boundary.</p>
<p>When transporting a set of tablespaces, you can choose to include referential integrity constraints. However, doing so can affect whether a set of tablespaces is self-contained. If you decide not to transport constraints, then the constraints are not considered as pointers.</p>
</li>
<li>
<p>A table inside the set of tablespaces contains a <code dir="ltr">LOB</code> column that points to <code dir="ltr">LOB</code>s outside the set of tablespaces.</p>
</li>
<li>
<p>An XML DB schema (*.xsd) that was registered by user A imports a global schema that was registered by user B, and the following is true: the default tablespace for user A is tablespace A, the default tablespace for user B is tablespace B, and only tablespace A is included in the set of tablespaces.</p>
</li>
</ul>
<p>To determine whether a set of tablespaces is self-contained, you can invoke the <code dir="ltr">TRANSPORT_SET_CHECK</code> procedure in the Oracle supplied package <code dir="ltr">DBMS_TTS</code>. You must have been granted the <code dir="ltr">EXECUTE_CATALOG_ROLE</code> role (initially signed to <code dir="ltr">SYS</code>) to execute this procedure.</p>
<p>When you invoke the <code dir="ltr">DBMS_TTS</code> package, you specify the list of tablespaces in the transportable set to be checked for self containment. You can optionally specify if constraints must be included. For strict or full containment, you must additionally set the <code dir="ltr">TTS_FULL_CHECK</code> parameter to <code dir="ltr">TRUE</code>.</p>
<p>The strict or full containment check is for cases that require capturing not only references going outside the transportable set, but also those coming into the set. Tablespace Point-in-Time Recovery (TSPITR) is one such case where dependent objects must be fully contained or fully outside the transportable set.</p>
<p>For example, it is a violation to perform TSPITR on a tablespace containing a table <code dir="ltr">t</code> but not its index <code dir="ltr">i</code> because the index and data will be inconsistent after the transport. A full containment check ensures that there are no dependencies going outside or coming into the transportable set. See the example for TSPITR in the <a class="olink BRADV89796" href="../../backup.112/e10642/rcmtspit.htm#BRADV89796"><span class="italic">Oracle Database Backup and Recovery User's Guide</span></a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The default for transportable tablespaces is to check for self containment rather than full containment.</div>
<p>The following statement can be used to determine whether tablespaces <code dir="ltr">sales_1</code> and <code dir="ltr">sales_2</code> are self-contained, with referential integrity constraints taken into consideration (indicated by <code dir="ltr">TRUE</code>).</p>
<pre dir="ltr">
EXECUTE DBMS_TTS.TRANSPORT_SET_CHECK('sales_1,sales_2', TRUE);
</pre>
<p>After invoking this PL/SQL package, you can see all violations by selecting from the <code dir="ltr">TRANSPORT_SET_VIOLATIONS</code> view<span class="italic">.</span> If the set of tablespaces is self-contained, this view is empty. The following example illustrates a case where there are two violations: a foreign key constraint, <code dir="ltr">dept_fk</code>, across the tablespace set boundary, and a partitioned table, <code dir="ltr">jim.sales</code>, that is partially contained in the tablespace set.</p>
<pre dir="ltr">
SQL&gt; SELECT * FROM TRANSPORT_SET_VIOLATIONS;

VIOLATIONS
---------------------------------------------------------------------------
Constraint DEPT_FK between table JIM.EMP in tablespace SALES_1 and table
JIM.DEPT in tablespace OTHER
Partitioned table JIM.SALES is partially contained in the transportable set
</pre>
<p>These violations must be resolved before <code dir="ltr">sales_1</code> and <code dir="ltr">sales_2</code> are transportable. As noted in the next task, one choice for bypassing the integrity constraint violation is to not export the integrity constraints.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS063" href="../../appdev.112/e40758/d_tts.htm#ARPLS063"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code dir="ltr">DBMS_TTS</code> package</p>
</li>
<li>
<p><a class="olink BRADV89796" href="../../backup.112/e10642/rcmtspit.htm#BRADV89796"><span class="italic">Oracle Database Backup and Recovery User's Guide</span></a> for information specific to using the <code dir="ltr">DBMS_TTS</code> package for TSPITR</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="CIHFFBBC"></a>
<div id="ADMIN11400" class="sect3">
<h4 class="sect3">Task 3: Generate a Transportable Tablespace Set</h4>
<p>After ensuring you have a self-contained set of tablespaces that you want to transport, generate a transportable tablespace set by completing the following steps:</p>
<ol>
<li>
<p>Start SQL*Plus and connect to the database as an administrator or as a user who has either the <code dir="ltr">ALTER</code> <code dir="ltr">TABLESPACE</code> or <code dir="ltr">MANAGE</code> <code dir="ltr">TABLESPACE</code> system privilege.</p>
<p>See <a href="dba.htm#BABGCGFB">"Connecting to the Database with SQL*Plus"</a> for instructions.</p>
</li>
<li>
<p>Make all tablespaces in the set read-only.</p>
<pre dir="ltr">
SQL&gt; ALTER TABLESPACE sales_1 READ ONLY;

Tablespace altered.

SQL&gt; ALTER TABLESPACE sales_2 READ ONLY;

Tablespace altered.
</pre></li>
<li>
<p>Invoke the Data Pump export utility as user <code dir="ltr">system</code> and specify the tablespaces in the transportable set.</p>
<pre dir="ltr">
SQL&gt; HOST

$ expdp system dumpfile=expdat.dmp directory=data_pump_dir 
        transport_tablespaces=sales_1,sales_2 logfile=tts_export.log

Password: <span class="italic">password</span>
</pre>
<p>You must always specify <code dir="ltr">TRANSPORT_TABLESPACES</code>, which determines the mode of the export operation. In this example:</p>
<ul>
<li>
<p>The <code dir="ltr">DUMPFILE</code> parameter specifies the name of the structural information export file to be created, <code dir="ltr">expdat.dmp</code>.</p>
</li>
<li>
<p>The <code dir="ltr">DIRECTORY</code> parameter specifies the directory object that points to the operating system or Oracle Automatic Storage Management location of the dump file. You must create the <code dir="ltr">DIRECTORY</code> object before invoking Data Pump, and you must grant the <code dir="ltr">READ</code> and <code dir="ltr">WRITE</code> object privileges on the directory to <code dir="ltr">PUBLIC</code>. See <a class="olink SQLRF01207" href="../../server.112/e41084/statements_5007.htm#SQLRF01207"><span class="italic">Oracle Database SQL Language Reference</span></a> for information on the <code dir="ltr">CREATE</code> <code dir="ltr">DIRECTORY</code> command.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The directory object <code dir="ltr">DATA_PUMP_DIR</code> is automatically created when you install Oracle Database. Read and write access to this directory is automatically granted to the <code dir="ltr">DBA</code> role, and thus to users <code dir="ltr">SYS</code> and <code dir="ltr">SYSTEM</code>. If the <code dir="ltr">DIRECTORY</code> parameter is omitted, <code dir="ltr">DATA_PUMP_DIR</code> is used as the default directory.</div>
</li>
<li>
<p>The <code dir="ltr">LOGFILE</code> parameter specifies the file name of the log file to be written by the export utility. The log file is written to the same directory as the dump file.</p>
</li>
<li>
<p><code dir="ltr">EXPDP</code> prompts for the password for the <code dir="ltr">system</code> account if you do not specify it on the command line.</p>
</li>
<li>
<p>Triggers and indexes are included in the export operation by default.</p>
</li>
</ul>
<p>To perform a transport tablespace operation with a strict containment check, use the <code dir="ltr">TRANSPORT_FULL_CHECK</code> parameter, as shown in the following example:</p>
<pre dir="ltr">
expdp system dumpfile=expdat.dmp directory=data_pump_dir
      transport_tablespaces=sales_1,sales_2 transport_full_check=y
      logfile=tts_export.log
</pre>
<p>In this case, the Data Pump export utility verifies that there are no dependencies between the objects inside the transportable set and objects outside the transportable set. If the tablespace set being transported is not self-contained, then the export fails and indicates that the transportable set is not self-contained. You must then return to Task 2 to resolve all violations.</p>
<div class="infobox-note">
<p class="notep1">Notes:</p>
The Data Pump utility is used to export only data dictionary structural information (metadata) for the tablespaces. No actual data is unloaded, so this operation goes relatively quickly even for large tablespace sets.</div>
</li>
<li>
<p>Check the log file for errors, and take note of the dump file and data files that you must transport to the destination database. <code dir="ltr">EXPDP</code> outputs the names and paths of these files in messages like these:</p>
<pre dir="ltr">
******************************************************************************
Dump file set for SYSTEM.SYS_EXPORT_TRANSPORTABLE_01 is:
  /u01/app/oracle/admin/salesdb/dpdump/expdat.dmp
******************************************************************************
Datafiles required for transportable tablespace SALES_1:
  /u01/app/oracle/oradata/salesdb/sales_101.dbf
Datafiles required for transportable tablespace SALES_2:
  /u01/app/oracle/oradata/salesdb/sales_201.dbf
</pre></li>
<li>
<p>When finished, exit back to SQL*Plus:</p>
<pre dir="ltr">
$ EXIT
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SUTIL200" href="../../server.112/e22490/dp_export.htm#SUTIL200"><span class="italic">Oracle Database Utilities</span></a> for information about using the Data Pump utility</div>
</li>
</ol>
<p>If <code dir="ltr">sales_1</code> and <code dir="ltr">sales_2</code> are being transported to a different platform, and the endianness of the platforms is different, and if you want to convert before transporting the tablespace set, then convert the data files composing the <code dir="ltr">sales_1</code> and <code dir="ltr">sales_2</code> tablespaces:</p>
<ol>
<li>
<p>From SQL*Plus, return to the host system:</p>
<pre dir="ltr">
SQL&gt; HOST
</pre></li>
<li>
<p>Start RMAN and connect to the source database:</p>
<pre dir="ltr">
$ RMAN TARGET /

Recovery Manager: Release 11.2.0.0.1 

Copyright (c) 1982, 2007, Oracle.  All rights reserved.

connected to target database: salesdb (DBID=3295731590)
</pre></li>
<li id="CIHDAADJ">
<p>Use the RMAN <code dir="ltr">CONVERT</code> <code dir="ltr">TABLESPACE</code> command to convert the data files into a temporary location on the source platform.</p>
<p>In this example, assume that the temporary location, directory <code dir="ltr">/tmp</code>, has already been created. The converted data files are assigned names by the system.</p>
<pre dir="ltr">
RMAN&gt; CONVERT TABLESPACE sales_1,sales_2 
2&gt; TO PLATFORM 'Microsoft Windows IA (32-bit)'
3&gt; FORMAT '/tmp/%U';

Starting conversion at source at 30-SEP-08
using channel ORA_DISK_1
channel ORA_DISK_1: starting datafile conversion
input datafile file number=00007 name=/u01/app/oracle/oradata/salesdb/sales_101.dbf
<span class="bold">converted datafile=/tmp/data_D-SALESDB_I-1192614013_TS-SALES_1_FNO-7_03jru08s</span>
channel ORA_DISK_1: datafile conversion complete, elapsed time: 00:00:45
channel ORA_DISK_1: starting datafile conversion
input datafile file number=00008 name=/u01/app/oracle/oradata/salesdb/sales_201.dbf
<span class="bold">converted datafile=/tmp/data_D-SALESDB_I-1192614013_TS-SALES_2_FNO-8_04jru0aa</span>
channel ORA_DISK_1: datafile conversion complete, elapsed time: 00:00:25
Finished conversion at source at 30-SEP-08
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink RCMRF192" href="../../backup.112/e10643/rcmsynta012.htm#RCMRF192"><span class="italic">Oracle Database Backup and Recovery Reference</span></a> for a description of the RMAN <code dir="ltr">CONVERT</code> command</div>
</li>
<li>
<p>Exit Recovery Manager:</p>
<pre dir="ltr">
RMAN&gt; exit
Recovery Manager complete.
</pre></li>
</ol>
</div>
<!-- class="sect3" -->
<div id="ADMIN11401" class="sect3"><a id="sthref1651"></a>
<h4 class="sect3">Task 4: Transport the Tablespace Set</h4>
<p>Complete the following steps:</p>
<ol>
<li>
<p>Transport <span class="italic">both the data files and the export (dump) file</span> of the tablespaces to a place that is accessible to the destination database. To accomplish this, do one of the following:</p>
<ul>
<li>
<p>If no endianness conversion of the tablespace set is needed, or if you already converted the tablespace set:</p>
<ol>
<li>
<p>Transport the dump file to the directory pointed to by the <code dir="ltr">DATA_PUMP_DIR</code> directory object, or to any other directory of your choosing.</p>
<p>Run the following query to determine the location of <code dir="ltr">DATA_PUMP_DIR</code>:</p>
<pre dir="ltr">
SELECT * FROM DBA_DIRECTORIES WHERE DIRECTORY_NAME = 'DATA_PUMP_DIR';

OWNER      DIRECTORY_NAME   DIRECTORY_PATH
---------- ---------------- -----------------------------------
SYS        DATA_PUMP_DIR    C:\app\orauser\admin\orawin\dpdump\
</pre></li>
<li>
<p>Transport the data files to the location of the existing data files of the destination database.</p>
<p>On the UNIX and Linux platforms, this location is typically /u01/app/oracle/oradata/<span class="italic">SID</span>/ or +<span class="italic">DISKGROUP</span>/<span class="italic">SID</span>/datafile/.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you converted the data files, obtain the new names and locations of the data files from the <code dir="ltr">CONVERT</code> <code dir="ltr">TABLESPACE</code> command output, as shown in Step <a href="#CIHDAADJ">3</a> of <a href="#CIHFFBBC">Task 3: Generate a Transportable Tablespace Set</a>.</div>
</li>
</ol>
</li>
<li>
<p>If you intend to perform endianness conversion after transporting to the destination host:</p>
<ol>
<li>
<p>Transport the dump file to the directory pointed to by the <code dir="ltr">DATA_PUMP_DIR</code> directory object, or to any other directory of your choosing.</p>
</li>
<li>
<p>Transport the data files to a temporary location on the destination host (for example, /tmp or C:\TEMP). During conversion, you can move the converted data files to the location of the existing data files of the destination database.</p>
</li>
</ol>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
If both the source and destination are file systems, you can transport using:
<ul>
<li>
<p>Any facility for copying flat files (for example, an operating system copy utility or ftp)</p>
</li>
<li>
<p>The <code dir="ltr">DBMS_FILE_TRANSFER</code> package</p>
</li>
<li>
<p>RMAN</p>
</li>
<li>
<p>Any facility for publishing on CDs</p>
</li>
</ul>
<p>If either the source or destination is an Oracle Automatic Storage Management (Oracle ASM) disk group, you can use:</p>
<ul>
<li>
<p>ftp to or from the <code dir="ltr">/sys/asm</code> virtual folder in the XML DB repository</p>
<p>See <a class="olink OSTMG10001" href="../../server.112/e18951/asmfiles.htm#OSTMG10001"><span class="italic">Oracle Automatic Storage Management Administrator's Guide</span></a> for more information.</p>
</li>
<li>
<p>The <code dir="ltr">DBMS_FILE_TRANSFER</code> package</p>
</li>
<li>
<p>RMAN</p>
</li>
</ul>
</div>
<div class="infobox-note">
<p class="notep1">Caution:</p>
Exercise caution when using the UNIX <code dir="ltr">dd</code> utility to copy raw-device files between databases. The <code dir="ltr">dd</code> utility can be used to copy an entire source raw-device file, or it can be invoked with options that instruct it to copy only a specific range of blocks from the source raw-device file.
<p>It is difficult to ascertain actual data file size for a raw-device file because of hidden control information that is stored as part of the data file. Thus, it is advisable when using the <code dir="ltr">dd</code> utility to specify copying the entire source raw-device file contents.</p>
</div>
</li>
<li>
<p>If you are transporting the tablespace set to a platform with endianness that is different from the source platform, and you have not yet converted the tablespace set, do so now with RMAN.</p>
<p>The following example places the converted data files into C:\app\orauser\oradata\orawin\, which is the location of the existing data files for the destination database:</p>
<pre dir="ltr">
C:\&gt;RMAN TARGET /
 
Recovery Manager: Release 11.2.0.0.1 
 
Copyright (c) 1982, 2007, Oracle.  All rights reserved.

connected to target database: ORAWIN (DBID=3462152886)

RMAN&gt; CONVERT DATAFILE 
2&gt;'C:\Temp\sales_101.dbf',
3&gt;'C:\Temp\sales_201.dbf'
4&gt;TO PLATFORM="Microsoft Windows IA (32-bit)"
5&gt;FROM PLATFORM="Solaris[tm] OE (32-bit)"
6&gt;DB_FILE_NAME_CONVERT=
7&gt;'C:\Temp\', 'C:\app\orauser\oradata\orawin\'
8&gt; PARALLELISM=4;
</pre>
<p>You identify the data files by filename, not by tablespace name. Until the tablespace metadata is imported, the destination instance has no way of knowing the desired tablespace names.</p>
<p>If the source location, the target location, or both do not use Oracle Automatic Storage Management (Oracle ASM), then the source and target platforms are optional. RMAN determines the source platform by examining the data file, and the target platform defaults to the platform of the host running the conversion.</p>
<p>If both the source and target locations use Oracle ASM, then you must specify the source and target platforms in the <code dir="ltr">DB_FILE_NAME_CONVERT</code> clause.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dfiles.htm#i1008252">"Copying Files Using the Database Server"</a> for information about using the <code dir="ltr">DBMS_FILE_TRANSFER</code> package to copy the files that are being transported and their metadata</div>
</div>
<!-- class="sect3" -->
<div id="ADMIN12892" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1652"></a>
<h4 class="sect3">Task 5: (Optional) Restore Tablespaces to Read/Write Mode</h4>
<p>Make the transported tablespaces read/write again at the source database, as follows:</p>
<pre dir="ltr">
ALTER TABLESPACE sales_1 READ WRITE;
ALTER TABLESPACE sales_2 READ WRITE;
</pre>
<p>You can postpone this task to first ensure that the import process succeeds.</p>
</div>
<!-- class="sect3" -->
<div id="ADMIN11402" class="sect3"><a id="sthref1653"></a>
<h4 class="sect3">Task 6: Import the Tablespace Set</h4>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are transporting a <a id="sthref1654"></a><a id="sthref1655"></a>tablespace of a different block size than the standard block size of the database receiving the tablespace set, then you must first have a <code dir="ltr">DB_</code><code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">K_CACHE_SIZE</code> initialization parameter entry in the receiving database parameter file.
<p>For example, if you are transporting a tablespace with an 8K block size into a database with a 4K standard block size, then you must include a <code dir="ltr"><a id="sthref1656"></a><a id="sthref1657"></a>DB_8K_CACHE_SIZE</code> initialization parameter entry in the parameter file. If it is not already included in the parameter file, this parameter can be set using the <code dir="ltr">ALTER SYSTEM SET</code> statement.</p>
<p>See <a class="olink REFRN10027" href="../../server.112/e40402/initparams046.htm#REFRN10027"><span class="italic">Oracle Database Reference</span></a> for information about specifying values for the <code dir="ltr">DB_</code><code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">K_CACHE_SIZE</code> initialization parameter.</p>
</div>
<p>Any privileged user can perform this task. To import a tablespace set, complete the following steps:</p>
<ol>
<li>
<p>Import the tablespace metadata using the Data Pump Import utility, <code dir="ltr">impdp</code>:</p>
<pre dir="ltr">
impdp system dumpfile=expdat.dmp directory=data_pump_dir
   TRANSPORT_DATAFILES=
   c:\app\orauser\oradata\orawin\sales_101.dbf,
   c:\app\orauser\oradata\orawin\sales_201.dbf
   remap_schema=sales1:crm1  remap_schema=sales2:crm2
   logfile=tts_import.log

Password: <span class="italic">password</span>
</pre>
<p>In this example we specify the following:</p>
<ul>
<li>
<p>The <code dir="ltr">DUMPFILE</code> parameter specifies the exported file containing the metadata for the tablespaces to be imported.</p>
</li>
<li>
<p>The <code dir="ltr">DIRECTORY</code> parameter specifies the directory object that identifies the location of the dump file.</p>
</li>
<li>
<p>The <code dir="ltr">TRANSPORT_DATAFILES</code> parameter identifies all of the data files containing the tablespaces to be imported.</p>
</li>
<li>
<p>The <code dir="ltr">REMAP_SCHEMA</code> parameter changes the ownership of database objects. If you do not specify <code dir="ltr">REMAP_SCHEMA</code>, all database objects (such as tables and indexes) are created in the same user schema as in the source database, and those users must already exist in the destination database. If they do not exist, then the import utility returns an error. In this example, objects in the tablespace set owned by <code dir="ltr">sales1</code> in the source database will be owned by <code dir="ltr">crm1</code> in the destination database after the tablespace set is imported. Similarly, objects owned by <code dir="ltr">sales2</code> in the source database will be owned by <code dir="ltr">crm2</code> in the destination database. In this case, the destination database is not required to have users <code dir="ltr">sales1</code> and <code dir="ltr">sales2</code>, but must have users <code dir="ltr">crm1</code> and <code dir="ltr">crm2</code>.</p>
</li>
<li>
<p>The <code dir="ltr">LOGFILE</code> parameter specifies the file name of the log file to be written by the import utility. The log file is written to the directory from which the dump file is read.</p>
</li>
</ul>
<p>After this statement executes successfully, all tablespaces in the set being copied remain in read-only mode. Check the import log file to ensure that no error has occurred.</p>
<p>When dealing with a large number of data files, specifying the list of data file names in the statement line can be a laborious process. It can even exceed the statement line limit. In this situation, you can use an import parameter file. For example, you can invoke the Data Pump import utility as follows:</p>
<pre dir="ltr">
impdp system parfile='par.f'
</pre>
<p>where the parameter file, <code dir="ltr">par.f</code> contains the following:</p>
<pre dir="ltr">
DUMPFILE=expdat.dmp 
DIRECTORY=data_pump_dir
TRANSPORT_DATAFILES=
C:\app\orauser\oradata\orawin\sales_101.dbf,
C:\app\orauser\oradata\orawin\sales_201.dbf
REMAP_SCHEMA=sales1:crm1  REMAP_SCHEMA=sales2:crm2
LOGFILE=tts_import.log
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SUTIL" href="../e22490/toc.htm"><span class="italic">Oracle Database Utilities</span></a> for information about using the import utility</div>
</li>
<li>
<p>If required, put the tablespaces into read/write mode on the destination database.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1007525"></a>
<div id="ADMIN11403" class="sect2">
<h3 class="sect2">Using Transportable Tablespaces: Scenarios<a id="sthref1658"></a></h3>
<p>The following sections describe some uses for transportable tablespaces:</p>
<ul>
<li>
<p><a href="#i1007549">Transporting and Attaching Partitions for Data Warehousing</a></p>
</li>
<li>
<p><a href="#i1007587">Publishing Structured Data on CDs</a></p>
</li>
<li>
<p><a href="#i1007595">Mounting the Same Tablespace Read-Only on Multiple Databases</a></p>
</li>
<li>
<p><a href="#i1007603">Archiving Historical Data Using Transportable Tablespaces</a></p>
</li>
<li>
<p><a href="#i1007616">Using Transportable Tablespaces to Perform TSPITR</a></p>
</li>
</ul>
<a id="i1007549"></a>
<div id="ADMIN11404" class="sect3">
<h4 class="sect3">Transporting and Attaching Partitions for Data Warehousing</h4>
<p>Typical enterprise data warehouses contain one or more large fact tables. These fact tables can be partitioned by date, making the enterprise data warehouse a historical database. You can build indexes to speed up star queries. Oracle recommends that you build local indexes for such historically partitioned tables to avoid rebuilding global indexes every time you drop the oldest partition from the historical database.</p>
<p>Suppose every month you would like to load one month of data into the data warehouse. There is a large fact table in the data warehouse called <code dir="ltr">sales</code>, which has the following columns:</p>
<pre dir="ltr">
CREATE TABLE sales (invoice_no NUMBER,
   sale_year  INT NOT NULL,
   sale_month INT NOT NULL,
   sale_day   INT NOT NULL)
   PARTITION BY RANGE (sale_year, sale_month, sale_day)
     (partition jan98 VALUES LESS THAN (1998, 2, 1),
      partition feb98 VALUES LESS THAN (1998, 3, 1),
      partition mar98 VALUES LESS THAN (1998, 4, 1),
      partition apr98 VALUES LESS THAN (1998, 5, 1),
      partition may98 VALUES LESS THAN (1998, 6, 1),
      partition jun98 VALUES LESS THAN (1998, 7, 1));
</pre>
<p>You create a local non-prefixed index:</p>
<pre dir="ltr">
CREATE INDEX sales_index ON sales(invoice_no) LOCAL;
</pre>
<p>Initially, all partitions are empty, and are in the same default tablespace. Each month, you want to create one partition and attach it to the partitioned <code dir="ltr">sales</code> table.</p>
<p>Suppose it is July 1998, and you would like to load the July sales data into the partitioned table. In a staging database, you create a new tablespace, <code dir="ltr">ts_jul</code>. You also create a table, <code dir="ltr">jul_sales</code>, in that tablespace with the same column types as the <code dir="ltr">sales</code> table. You can create the table <code dir="ltr">jul_sales</code> using the <code dir="ltr">CREATE</code> <code dir="ltr">TABLE</code> ... <code dir="ltr">AS</code> <code dir="ltr">SELECT</code> statement. After creating and populating <code dir="ltr">jul_sales</code>, you can also create an index, <code dir="ltr">jul_sale_index</code>, for the table, indexing the same column as the local index in the <code dir="ltr">sales</code> table. After building the index, transport the tablespace <code dir="ltr">ts_jul</code> to the data warehouse.</p>
<p>In the data warehouse, add a partition to the <code dir="ltr">sales</code> table for the July sales data. This also creates another partition for the local non-prefixed index:</p>
<pre dir="ltr">
ALTER TABLE sales ADD PARTITION jul98 VALUES LESS THAN (1998, 8, 1);
</pre>
<p>Attach the transported table <code dir="ltr">jul_sales</code> to the table <code dir="ltr">sales</code> by exchanging it with the new partition:</p>
<pre dir="ltr">
ALTER TABLE sales EXCHANGE PARTITION jul98 WITH TABLE jul_sales 
   INCLUDING INDEXES
   WITHOUT VALIDATION;
</pre>
<p>This statement places the July sales data into the new partition <code dir="ltr">jul98</code>, attaching the new data to the partitioned table. This statement also converts the index <code dir="ltr">jul_sale_index</code> into a partition of the local index for the <code dir="ltr">sales</code> table. This statement should return immediately, because it only operates on the structural information and it simply switches database pointers. If you know that the data in the new partition does not overlap with data in previous partitions, you are advised to specify the <code dir="ltr">WITHOUT VALIDATION</code> clause. Otherwise, the statement goes through all the new data in the new partition in an attempt to validate the range of that partition.</p>
<p>If all partitions of the <code dir="ltr">sales</code> table came from the same staging database (the staging database is never destroyed), the exchange statement always succeeds. In general, however, if data in a partitioned table comes from different databases, the exchange operation might fail. For example, if the <code dir="ltr">jan98</code> partition of <code dir="ltr">sales</code> did not come from the same staging database, the preceding exchange operation can fail, returning the following error:</p>
<pre dir="ltr">
ORA-19728: data object number conflict between table JUL_SALES and partition JAN98 in table SALES
</pre>
<p>To resolve this conflict, move the offending partition by issuing the following statement:</p>
<pre dir="ltr">
ALTER TABLE sales MOVE PARTITION jan98;
</pre>
<p>Then retry the exchange operation.</p>
<p>After the exchange succeeds, you can safely drop <code dir="ltr">jul_sales</code> and <code dir="ltr">jul_sale_index</code> (both are now empty). Thus you have successfully loaded the July sales data into your data warehouse.</p>
</div>
<!-- class="sect3" -->
<a id="i1007587"></a>
<div id="ADMIN11405" class="sect3">
<h4 class="sect3">Publishing Structured Data on CDs</h4>
<p>Transportable tablespaces provide a way to publish structured data on CDs. A data provider can load a tablespace with data to be published, generate the transportable set, and copy the transportable set to a CD. This CD can then be distributed.</p>
<p>When customers receive this CD, they can add the CD contents to an existing database without having to copy the data files from the CD to disk storage. For example, suppose on a Windows NT system D: drive is the CD drive. You can import a transportable set with data file <code dir="ltr">catalog.f</code> and export file <code dir="ltr">expdat.dmp</code> as follows:</p>
<pre dir="ltr">
IMPDP <span class="italic">system/password</span> DUMPFILE=expdat.dmp DIRECTORY=dpump_dir
   TRANSPORT_DATAFILES='D:\catalog.f'  
</pre>
<p>You can remove the CD while the database is still up. Subsequent queries to the tablespace return an error indicating that the database cannot open the data files on the CD. However, operations to other parts of the database are not affected. Placing the CD back into the drive makes the tablespace readable again.</p>
<p>Removing the CD is the same as removing the data files of a read-only tablespace. If you shut down and restart the database, the database indicates that it cannot find the removed data file and does not open the database (unless you set the initialization parameter <code dir="ltr">READ_ONLY_OPEN_DELAYED</code> to <code dir="ltr">TRUE</code>). When <code dir="ltr">READ_ONLY_OPEN_DELAYED</code> is set to <code dir="ltr">TRUE</code>, the database reads the file only when someone queries the transported tablespace. Thus, when transporting a tablespace from a CD, you should always set the <code dir="ltr">READ_ONLY_OPEN_DELAYED</code> initialization parameter to <code dir="ltr">TRUE</code>, unless the CD is permanently attached to the database.</p>
</div>
<!-- class="sect3" -->
<a id="i1007595"></a>
<div id="ADMIN11406" class="sect3">
<h4 class="sect3">Mounting the Same Tablespace Read-Only on Multiple Databases</h4>
<p>You can use transportable tablespaces to mount a tablespace read-only on multiple databases. In this way, separate databases can share the same data on disk instead of duplicating data on separate disks. The tablespace data files must be accessible by all databases. To avoid database corruption, the tablespace must remain read-only in all the databases mounting the tablespace.</p>
<p>The following are two scenarios for mounting the same tablespace read-only on multiple databases:</p>
<ul>
<li>
<p>The tablespace originates in a database that is separate from the databases that will share the tablespace.</p>
<p>You generate a transportable set in the source database, put the transportable set onto a disk that is accessible to all databases, and then import the metadata into each database on which you want to mount the tablespace.</p>
</li>
<li>
<p>The tablespace already belongs to one of the databases that will share the tablespace.</p>
<p>It is assumed that the data files are already on a shared disk. In the database where the tablespace already exists, you make the tablespace read-only, generate the transportable set, and then import the tablespace into the other databases, leaving the data files in the same location on the shared disk.</p>
</li>
</ul>
<p>You can make a disk accessible by multiple computers in several ways. You can use either a cluster file system or raw disk. You can also use network file system (NFS), but be aware that if a user queries the shared tablespace while NFS is down, the database will hang until the NFS operation times out.</p>
<p>Later, you can drop the read-only tablespace in some of the databases. Doing so does not modify the data files for the tablespace. Thus, the drop operation does not corrupt the tablespace. Do not make the tablespace read/write unless only one database is mounting the tablespace.</p>
</div>
<!-- class="sect3" -->
<a id="i1007603"></a>
<div id="ADMIN11407" class="sect3">
<h4 class="sect3">Archiving Historical Data Using Transportable Tablespaces</h4>
<p>Since a transportable tablespace set is a self-contained set of files that can be imported into any Oracle Database, you can archive old/historical data in an enterprise data warehouse using the transportable tablespace procedures described in this chapter.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DWHSG8301" href="../../server.112/e25554/transport.htm#DWHSG8301"><span class="italic">Oracle Database Data Warehousing Guide</span></a> for more details</div>
</div>
<!-- class="sect3" -->
<a id="i1007616"></a>
<div id="ADMIN11408" class="sect3">
<h4 class="sect3">Using Transportable Tablespaces to Perform TSPITR</h4>
<p>You can use transportable tablespaces to perform tablespace point-in-time recovery (TSPITR).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink BRADV009" href="../../backup.112/e10642/rcmtspit.htm#BRADV009"><span class="italic">Oracle Database Backup and Recovery User's Guide</span></a> for information about how to perform TSPITR using transportable tablespaces</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADMIN11409" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1659"></a>
<h3 class="sect2">Moving Databases Across Platforms Using Transportable Tablespaces</h3>
<p>You can use the transportable tablespace feature to migrate a database to a different platform by creating a new database on the destination platform and performing a transport of all the user tablespaces. See <a class="olink BRADV05432" href="../../backup.112/e10642/rcmxplat.htm#BRADV05432"><span class="italic">Oracle Database Backup and Recovery User's Guide</span></a> for more information.</p>
<p>You cannot transport the <code dir="ltr">SYSTEM</code> tablespace. Therefore, objects such as sequences, PL/SQL packages, and other objects that depend on the <code dir="ltr">SYSTEM</code> tablespace are not transported. You must either create these objects manually on the destination database, or use Data Pump to transport the objects that are not moved by transportable tablespace.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007631"></a>
<div id="ADMIN11410" class="sect1">
<h2 class="sect1">Tablespace Data Dictionary Views<a id="sthref1660"></a><a id="sthref1661"></a></h2>
<p>The following data dictionary and dynamic performance views provide useful information about the tablespaces of a database.</p>
<div class="inftblruleinformalwide">
<table class="cellalignment1333" title="Viewing Information About Tablespaces" summary="Column 1 lists the views that are used to contain information about the tablespaces of the database. Column 1 lists the view, column 2 describes each view." dir="ltr">
<thead>
<tr class="cellalignment1327">
<th class="cellalignment1334" id="r1c1-t62">View</th>
<th class="cellalignment1334" id="r1c2-t62">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r2c1-t62" headers="r1c1-t62"><code dir="ltr">V$TABLESPACE</code></td>
<td class="cellalignment1335" headers="r2c1-t62 r1c2-t62">Name and number of all tablespaces from the control file.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r3c1-t62" headers="r1c1-t62"><a id="sthref1662"></a><code dir="ltr">V$ENCRYPTED_TABLESPACES</code></td>
<td class="cellalignment1335" headers="r3c1-t62 r1c2-t62">Name and encryption algorithm of all encrypted tablespaces.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r4c1-t62" headers="r1c1-t62"><code dir="ltr">DBA_TABLESPACES</code>, <code dir="ltr">USER_TABLESPACES</code></td>
<td class="cellalignment1335" headers="r4c1-t62 r1c2-t62">Descriptions of all (or user accessible) tablespaces.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r5c1-t62" headers="r1c1-t62"><code dir="ltr">DBA_TABLESPACE_GROUPS</code></td>
<td class="cellalignment1335" headers="r5c1-t62 r1c2-t62">Displays the tablespace groups and the tablespaces that belong to them.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r6c1-t62" headers="r1c1-t62"><code dir="ltr">DBA_SEGMENTS</code>, <code dir="ltr">USER_SEGMENTS</code></td>
<td class="cellalignment1335" headers="r6c1-t62 r1c2-t62">Information about segments within all (or user accessible) tablespaces.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r7c1-t62" headers="r1c1-t62"><code dir="ltr">DBA_EXTENTS</code>, <code dir="ltr">USER_EXTENTS</code></td>
<td class="cellalignment1335" headers="r7c1-t62 r1c2-t62">Information about data extents within all (or user accessible) tablespaces.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r8c1-t62" headers="r1c1-t62"><code dir="ltr">DBA_FREE_SPACE</code>, <code dir="ltr">USER_FREE_SPACE</code></td>
<td class="cellalignment1335" headers="r8c1-t62 r1c2-t62">Information about free extents within all (or user accessible) tablespaces.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r9c1-t62" headers="r1c1-t62"><code dir="ltr">DBA_TEMP_FREE_SPACE</code></td>
<td class="cellalignment1335" headers="r9c1-t62 r1c2-t62">Displays the total allocated and free space in each temporary tablespace.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r10c1-t62" headers="r1c1-t62"><code dir="ltr">V$DATAFILE</code></td>
<td class="cellalignment1335" headers="r10c1-t62 r1c2-t62">Information about all data files, including tablespace number of owning tablespace.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r11c1-t62" headers="r1c1-t62"><code dir="ltr">V$TEMPFILE</code></td>
<td class="cellalignment1335" headers="r11c1-t62 r1c2-t62">Information about all temp files, including tablespace number of owning tablespace.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r12c1-t62" headers="r1c1-t62"><code dir="ltr">DBA_DATA_FILES</code></td>
<td class="cellalignment1335" headers="r12c1-t62 r1c2-t62">Shows files (data files) belonging to tablespaces.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r13c1-t62" headers="r1c1-t62"><code dir="ltr">DBA_TEMP_FILES</code></td>
<td class="cellalignment1335" headers="r13c1-t62 r1c2-t62">Shows files (temp files) belonging to temporary tablespaces.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r14c1-t62" headers="r1c1-t62"><code dir="ltr">V$TEMP_EXTENT_MAP</code></td>
<td class="cellalignment1335" headers="r14c1-t62 r1c2-t62">Information for all extents in all locally managed temporary tablespaces.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r15c1-t62" headers="r1c1-t62"><code dir="ltr">V$TEMP_EXTENT_POOL</code></td>
<td class="cellalignment1335" headers="r15c1-t62 r1c2-t62">For locally managed temporary tablespaces: the state of temporary space cached and used for by each instance.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r16c1-t62" headers="r1c1-t62"><code dir="ltr">V$TEMP_SPACE_HEADER</code></td>
<td class="cellalignment1335" headers="r16c1-t62 r1c2-t62">Shows space used/free for each temp file.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r17c1-t62" headers="r1c1-t62"><code dir="ltr">DBA_USERS</code></td>
<td class="cellalignment1335" headers="r17c1-t62 r1c2-t62">Default and temporary tablespaces for all users.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r18c1-t62" headers="r1c1-t62"><code dir="ltr">DBA_TS_QUOTAS</code></td>
<td class="cellalignment1335" headers="r18c1-t62 r1c2-t62">Lists tablespace quotas for all users.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r19c1-t62" headers="r1c1-t62"><code dir="ltr">V$SORT_SEGMENT</code></td>
<td class="cellalignment1335" headers="r19c1-t62 r1c2-t62">Information about every sort segment in a given instance. The view is only updated when the tablespace is of the <code dir="ltr">TEMPORARY</code> type.</td>
</tr>
<tr class="cellalignment1327">
<td class="cellalignment1335" id="r20c1-t62" headers="r1c1-t62"><code dir="ltr">V$TEMPSEG_USAGE</code></td>
<td class="cellalignment1335" headers="r20c1-t62 r1c2-t62">Describes temporary (sort) segment usage by user for temporary or permanent tablespaces.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblruleinformalwide" -->
<p>The following are just a few examples of using some of these views.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN" href="../e40402/toc.htm"><span class="italic">Oracle Database Reference</span></a> for complete description of these views</div>
<div id="ADMIN11411" class="sect2"><a id="sthref1663"></a>
<h3 class="sect2">Example 1: Listing Tablespaces and Default Storage Parameters</h3>
<p><a id="sthref1664"></a>To list the names and default storage parameters of all tablespaces in a database, use the following query on the <code dir="ltr">DBA_TABLESPACES</code> view:</p>
<pre dir="ltr">
SELECT TABLESPACE_NAME "TABLESPACE",
   INITIAL_EXTENT "INITIAL_EXT",
   NEXT_EXTENT "NEXT_EXT",
   MIN_EXTENTS "MIN_EXT",
   MAX_EXTENTS "MAX_EXT",
   PCT_INCREASE
   FROM DBA_TABLESPACES;

TABLESPACE  INITIAL_EXT  NEXT_EXT  MIN_EXT   MAX_EXT    PCT_INCREASE  
----------  -----------  --------  -------   -------    ------------ 
RBS             1048576   1048576        2        40               0
SYSTEM           106496    106496        1        99               1
TEMP             106496    106496        1        99               0
TESTTBS           57344     16384        2        10               1
USERS             57344     57344        1        99               1
</pre></div>
<!-- class="sect2" -->
<div id="ADMIN11412" class="sect2"><a id="sthref1665"></a>
<h3 class="sect2">Example 2: Listing the Data Files and Associated Tablespaces of a Database</h3>
<p><a id="sthref1666"></a><a id="sthref1667"></a>To list the names, sizes, and associated tablespaces of a database, enter the following query on the <code dir="ltr">DBA_DATA_FILES</code> view:</p>
<pre dir="ltr">
SELECT  FILE_NAME, BLOCKS, TABLESPACE_NAME
   FROM DBA_DATA_FILES;

FILE_NAME                                      BLOCKS  TABLESPACE_NAME
------------                               ----------  -------------------
/U02/ORACLE/IDDB3/DBF/RBS01.DBF                  1536  RBS
/U02/ORACLE/IDDB3/DBF/SYSTEM01.DBF               6586  SYSTEM
/U02/ORACLE/IDDB3/DBF/TEMP01.DBF                 6400  TEMP
/U02/ORACLE/IDDB3/DBF/TESTTBS01.DBF              6400  TESTTBS
/U02/ORACLE/IDDB3/DBF/USERS01.DBF                 384  USERS
</pre></div>
<!-- class="sect2" -->
<div id="ADMIN11413" class="sect2"><a id="sthref1668"></a>
<h3 class="sect2">Example 3: Displaying Statistics for Free Space (Extents) of Each Tablespace</h3>
<p><a id="sthref1669"></a><a id="sthref1670"></a>To produce statistics about free extents and coalescing activity for each tablespace in the database, enter the following query:</p>
<pre dir="ltr">
SELECT TABLESPACE_NAME "TABLESPACE", FILE_ID,
   COUNT(*)    "PIECES",
   MAX(blocks) "MAXIMUM",
   MIN(blocks) "MINIMUM",
   AVG(blocks) "AVERAGE",
   SUM(blocks) "TOTAL"
   FROM DBA_FREE_SPACE
GROUP BY TABLESPACE_NAME, FILE_ID;

TABLESPACE    FILE_ID  PIECES   MAXIMUM    MINIMUM  AVERAGE    TOTAL
----------    -------  ------   -------    -------  -------   ------
RBS                 2       1       955        955      955      955
SYSTEM              1       1       119        119      119      119
TEMP                4       1      6399       6399     6399     6399
TESTTBS             5       5      6364          3     1278     6390
USERS               3       1       363        363      363      363
</pre>
<p><code dir="ltr">PIECES</code> shows the number of free space extents in the tablespace file, <code dir="ltr">MAXIMUM</code> and <code dir="ltr">MINIMUM</code> show the largest and smallest contiguous area of space in database blocks, <code dir="ltr">AVERAGE</code> shows the average size in blocks of a free space extent, and <code dir="ltr">TOTAL</code> shows the amount of free space in each tablespace file in blocks. This query is useful when you are going to create a new object or you know that a segment is about to extend, and you want to ensure that there is enough space in the containing tablespace.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1326">
<tr>
<td class="cellalignment1335">
<table class="cellalignment1331">
<tr>
<td class="cellalignment1330"><a href="archredo.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1330"><a href="dfiles.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1337">
<table class="cellalignment1329">
<tr>
<td class="cellalignment1330"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1330"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1330"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1330"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1330"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1330"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
