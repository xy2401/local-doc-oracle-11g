<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Change Data Capture</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 070" />
<meta name="dcterms.created" content="2013-07-04T23:23:18Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Data Warehousing Guide" />
<meta name="dcterms.identifier" content="E25554-02" />
<meta name="dcterms.isVersionOf" content="DWHSG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="refresh.htm" title="Previous" type="text/html" />
<link rel="Next" href="part5.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25554.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">25/35</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='cdc'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript><a id="g1044340"></a><a id="DWHSG016"></a><a id="i1028295"></a>
<h1 class="chapter"><span class="secnum">17</span> Change Data Capture</h1>
<p>Change Data Capture efficiently identifies and captures data that has been added to, updated in, or removed from, Oracle relational tables and makes this change data available for use by applications or individuals.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle Change Data Capture will be de-supported in a future release of Oracle Database and will be replaced with Oracle GoldenGate. Therefore, Oracle strongly recommends that you use Oracle GoldenGate for new applications.
<p>For Oracle Database 11<span class="italic">g</span> Release 2 (11.2), Change Data Capture continues to function as in earlier releases. If you are currently using Change Data Capture, then you will be able to continue to do so for the foreseeable future. However, Change Data Capture will not be further enhanced, and will only be supported based on the current, documented functionality.</p>
</div>
<p>This chapter describes Change Data Capture in the following sections:</p>
<ul>
<li>
<p><a href="#i1025409">Overview of Change Data Capture</a></p>
</li>
<li>
<p><a href="#i1025452">Change Sources and Modes of Change Data Capture</a></p>
</li>
<li>
<p><a href="#i1025453">Change Sets</a></p>
</li>
<li>
<p><a href="#i1025454">Change Tables</a></p>
</li>
<li>
<p><a href="#i1025455">Getting Information About the Change Data Capture Environment</a></p>
</li>
<li>
<p><a href="#i1025456">Preparing to Publish Change Data</a></p>
</li>
<li>
<p><a href="#CHDJIBFH">Publishing Change Data</a></p>
</li>
<li>
<p><a href="#i1026908">Subscribing to Change Data</a></p>
</li>
<li>
<p><a href="#i1027192">Managing Published Data</a></p>
</li>
<li>
<p><a href="#CIHFDBII">Considerations for Synchronous Change Data Capture</a></p>
</li>
<li>
<p><a href="#i1027067">Considerations for Asynchronous Change Data Capture</a></p>
</li>
<li>
<p><a href="#i1027639">Implementation and System Configuration</a></p>
</li>
</ul>
<p>See <a class="olink ARPLS" href="../../appdev.112/e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for reference information about the Change Data Capture publish and subscribe PL/SQL packages.</p>
<a id="i1025409"></a><a id="DWHSG8392"></a>
<div class="sect1">
<h2 class="sect1">Overview of Change Data Capture</h2>
<p>Often, data warehousing involves the extraction and transportation of relational data from one or more production databases into a data warehouse for analysis. Change Data Capture quickly identifies and processes only the data that has changed and makes the change data available for further use.</p>
<a id="DWHSG8393"></a>
<div class="sect2"><a id="sthref493"></a>
<h3 class="sect2">Capturing Change Data Without Change Data Capture</h3>
<p>Prior to the introduction of Change Data Capture, there were a number of ways that users could capture change data, including table differencing and change-value selection.</p>
<p><a id="sthref494"></a><span class="bold">Table differencing</span> involves transporting a copy of an entire table from the source (production) database to the staging database (where the change data is captured), where an older version of the table already exists. Using the SQL <code>MINUS</code> operator, you can obtain the inserted and new versions of updated rows with the following query:</p>
<pre>
SELECT * FROM new_version 
MINUS SELECT * FROM old_version;
</pre>
<p>Moreover, you can obtain the deleted rows and old versions of updated rows with the following query:</p>
<pre>
SELECT * FROM old_version 
MINUS SELECT * FROM new_version;
</pre>
<p>However, there are several problems with this method:</p>
<ul>
<li>
<p>It requires that the new version of the entire table be transported to the staging database, not just the change data, thereby greatly increasing transport costs.</p>
</li>
<li>
<p>The computational cost of performing the two <code>MINUS</code> operations on the staging database can be very high.</p>
</li>
<li>
<p>Table differencing cannot capture data that have reverted to their old values. For example, suppose the price of a product changes several times between the old version and the new version of the product's table. If the price in the new version ends up being the same as the old, table differencing cannot detect that the price has fluctuated. Moreover, any intermediate price values between the old and new versions of the product's table cannot be captured using table differencing.</p>
</li>
<li>
<p>There is no way to determine which changes were made as part of the same transaction. For example, suppose a sales manager creates a special discount to close a deal. The fact that the creation of the discount and the creation of the sale occurred as part of the same transaction cannot be captured, unless the source database is specifically designed to do so.</p>
</li>
</ul>
<p><span class="bold"><a id="sthref495"></a>Change-value selection</span> involves capturing the data on the source database by selecting the new and changed data from the source tables based on the value of a specific column. For example, suppose the source table has a <code>LAST_UPDATE_DATE</code> column. To capture changes, you base your selection from the source table on the <code>LAST_UPDATE_DATE</code> column value.</p>
<p>However, there are also several limitations with this method:</p>
<ul>
<li>
<p>The overhead of capturing the change data must be borne on the source database, and you must run potentially expensive queries against the source table on the source database. The need for these queries may force you to add indexes that would otherwise be unneeded. There is no way to offload this overhead to the staging database.</p>
</li>
<li>
<p>This method is no better at capturing intermediate values than the table differencing method. If the price in the product's table fluctuates, you will not be able to capture all the intermediate values, or even tell if the price had changed, if the ending value is the same as it was the last time that you captured change data.</p>
</li>
<li>
<p>This method is also no better than the table differencing method at capturing which data changes were made together in the same transaction. If you need to capture information concerning which changes occurred together in the same transaction, you must include specific designs for this purpose in your source database.</p>
</li>
<li>
<p>The granularity of the change-value column may not be fine enough to uniquely identify the new and changed rows. For example, suppose the following:</p>
<ul>
<li>
<p>You capture data changes using change-value selection on a date column such as <code>LAST_UPDATE_DATE</code>.</p>
</li>
<li>
<p>The capture happens at a particular instant in time, 14-FEB-2003 17:10:00.</p>
</li>
<li>
<p>Additional updates occur to the table during the same second that you performed your capture.</p>
</li>
</ul>
<p>When you next capture data changes, you will select rows with a <code>LAST_UPDATE_DATE</code> strictly after 14-FEB-2003 17:10:00, and thereby miss the changes that occurred during the remainder of that second.</p>
<p>To use change-value selection, you either have to accept that anomaly, add an artificial change-value column with the granularity you need, or lock out changes to the source table during the capture process, thereby further burdening the performance of the source database.</p>
</li>
<li>
<p>You have to design your source database in advance with this capture mechanism in mind &ndash; all tables from which you wish to capture change data must have a change-value column. If you want to build a data warehouse with data sources from legacy systems, those legacy systems may not supply the necessary change-value columns you need.</p>
</li>
</ul>
<p>Change Data Capture does not depend on expensive and cumbersome table differencing or change-value selection mechanisms. Instead, it captures the change data resulting from <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> operations made to user tables. The change data is then stored in a relational table called a change table, and the change data is made available to applications or individuals in a controlled way.</p>
</div>
<!-- class="sect2" -->
<a id="DWHSG8394"></a>
<div class="sect2"><a id="sthref496"></a>
<h3 class="sect2">Capturing Change Data with Change Data Capture</h3>
<p>Change Data Capture can capture and publish committed change data in either of the following modes:</p>
<ul>
<li>
<p><span class="bold">Synchronous</span></p>
<p>Triggers on the source database allow change data to be captured immediately, as each SQL statement that performs a data manipulation language (DML) operation (<code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code>) is made. In this mode, change data is captured as part of the transaction modifying the source table. Synchronous Change Data Capture is available with Oracle Standard Edition and Enterprise Edition. This mode is described in detail in <a href="#CHDGABFJ">"Synchronous Change Data Capture"</a>.</p>
</li>
<li>
<p><span class="bold">Asynchronous</span></p>
<p>By taking advantage of the data sent to the redo log files, change data is captured after a SQL statement that performs a DML operation is committed. In this mode, change data is not captured as part of the transaction that is modifying the source table, and therefore has no effect on that transaction.</p>
<p>There are three modes of asynchronous Change Data Capture: HotLog, Distributed HotLog, and AutoLog. These modes are described in detail in <a href="#CHDIDHAA">"Asynchronous Change Data Capture"</a>.</p>
<p>Asynchronous Change Data Capture is built on, and provides a relational interface to, Oracle Streams. See <a class="olink STRMS" href="../e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information on Oracle Streams.</p>
</li>
</ul>
<p>The following list describes the advantages of capturing change <a id="sthref497"></a>data with Change Data Capture:</p>
<ul>
<li>
<p>Completeness</p>
<p>Change Data Capture can capture all effects of <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> operations, including data values before and after <code>UPDATE</code> operations.</p>
</li>
<li>
<p>Performance</p>
<p>Asynchronous Change Data Capture can be configured to have minimal performance impact on the source database.</p>
</li>
<li>
<p>Interface</p>
<p>Change Data Capture inc<a id="sthref498"></a><a id="sthref499"></a>ludes the <code>DBMS_CDC_PUBLISH</code> and <code>DBMS_CDC_SUBSCRIBE</code> packages, which provide easy-to-use publish and subscribe interfaces.</p>
</li>
<li>
<p>Cost</p>
<p>Change Data Capture reduces overhead cost because it simplifies the extraction of change data from the database and is part of the Oracle Database.</p>
</li>
</ul>
<p>Note that you cannot use any table that uses transparent data encryption as a source table for synchronous Change Data Capture. Asynchronous Change Data Capture supports transparent data encryption if both the source and staging databases have <code>COMPATIBLE</code> set to 11 or higher. Change Data Capture does not encrypt the data in the change table. A user who wants to encrypt a column in the change table can manually use an <code>ALTER</code> <code>TABLE</code> statement to encrypt the column in the change table. See <a class="olink STRMS" href="../e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information on Oracle Streams.</p>
<p>A Change Data Capture system is based on the interaction of publishers and subscribers to capture and distribute change data, as described in the next section.</p>
</div>
<!-- class="sect2" -->
<a id="DWHSG8395"></a>
<div class="sect2"><a id="sthref500"></a>
<h3 class="sect2">Publish and Subscribe Model</h3>
<p>Most Change Data Capture systems have one person who captures and publishes change data; this person is the <a id="sthref501"></a><a href="glossary.htm#i997080"><span class="xrefglossterm">publisher</span></a>. There can be multiple applications or individuals that access the change data; these applications and individuals are the <a id="sthref502"></a><a href="glossary.htm#i997155"><span class="xrefglossterm">subscribers</span></a>. Change Data Capture provides PL/SQL packages to accomplish the publish and subscribe tasks.</p>
<p>The following sections describe the roles of the publisher and subscriber in detail. Subsequent sections describe change sources, more about modes of Change Data Capture, and change tables.</p>
<a id="DWHSG8396"></a>
<div class="sect3"><a id="sthref503"></a>
<h4 class="sect3"><a id="sthref504"></a>Publisher</h4>
<p>The<a id="sthref505"></a> publisher is usually a database administrator (DBA) who creates and maintains the schema objects that make up the Change Data Capture system. For all modes of Change Data Capture, except Distributed HotLog, there is typically one publisher on the staging database. For the Distributed HotLog mode of Change Data Capture there needs to be a publisher defined on the source and staging databases. The following list describes the source and staging databases and the objects of interest to Change Data Capture on each:</p>
<ul>
<li>
<p><span class="bold"><a id="sthref506"></a>Source database</span></p>
<p>This is the production database that contains the data of interest. The following objects of interest to Change Data Capture reside on the source database:</p>
<ul>
<li>
<p>The source tables</p>
<p>The <a href="glossary.htm#i997356"><span class="xrefglossterm">source tables</span></a> are the production database tables that contain the data of interest. They may be all or a subset of the source database tables.</p>
</li>
<li>
<p>Redo log files</p>
<p>For asynchronous modes of change data capture, the change data is collected from either the online or archived redo log files (or both). For asynchronous AutoLog mode, archived redo log files are copied from the source database to the staging database.</p>
</li>
<li>
<p>Change source</p>
<p><a id="sthref507"></a>The <span class="bold">change source</span> is a logical representation of the source database. The method for representing the source varies, depending on the mode of Change Data Capture.</p>
<p>For the asynchronous Distributed HotLog mode of Change Database capture only, the change source resides on the source database. For the other modes of Change Data Capture, the change source resides on the staging database.</p>
<p>See <a href="#CHDJBCAH">"Asynchronous Distributed HotLog Mode"</a> for details about the Distributed HotLog change source.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold"><a id="sthref508"></a>Staging database</span></p>
<p>This is the database to which the captured change data is applied. Depending on the capture mode that the publisher uses, the staging database can be the same as, or different from, the source database. The following Change Data Capture objects reside on the staging database:</p>
<ul>
<li>
<p>Change table</p>
<p><a id="sthref509"></a>A <a href="glossary.htm#i997346"><span class="xrefglossterm">change table</span></a> is a relational table into which change data for a single source table is loaded. To subscribers, a change table is known as a <a id="sthref510"></a><a href="glossary.htm#i997350"><span class="xrefglossterm">publication</span></a>.</p>
</li>
<li>
<p>Change set</p>
<p>A <a href="glossary.htm#i997347"><span class="xrefglossterm">change set</span></a> is a set of change data that is guaranteed to be transactionally consistent. It contains one or more change tables.</p>
</li>
<li>
<p>Change source</p>
<p><a id="sthref511"></a>The change source for the following modes of Change Data Capture reside on the staging database:</p>
<ul>
<li>
<p>Synchronous - See <a href="#CHDGABFJ">"Synchronous Change Data Capture"</a> for details.</p>
</li>
<li>
<p>Asynchronous HotLog - See <a href="#CHDHDCIG">"Asynchronous HotLog Mode"</a> for details.</p>
</li>
<li>
<p>Asynchronous AutoLog - See <a href="#CHDBEDHE">"Asynchronous AutoLog Mode"</a> for details.</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>These are the main tasks performed by the publisher:</p>
<ul>
<li>
<p><a id="sthref512"></a>Determines the source databases and tables from which the subscribers are interested in viewing change data, and the mode (synchronous or one of the asynchronous modes) in which to capture the change data.</p>
</li>
<li>
<p>Uses the Oracle-supplied package, <code><a id="sthref513"></a>DBMS_CDC_PUBLISH</code>, to set up the system to capture change data from the source tables of interest.</p>
</li>
<li>
<p>Allows subscribers to have controlled access to the change data in the change tables by using the SQL <code>GRANT</code> and <code>REVOKE</code> statements to grant and revoke the <code>SELECT</code> privilege on change tables for users and roles. (Keep in mind, however, that subscribers use views, not change tables directly, to access change data.)</p>
</li>
</ul>
<p>In <a href="#i1025654">Figure 17-1</a>, the <a id="sthref514"></a>publisher determines that subscribers are interested in viewing change data from the <code>HQ</code> source database. In particular, subscribers are interested in change data from the <code>sh.sales</code> and <code>sh.promotions</code> source tables.</p>
<p>The publisher decides to use the asynchronous AutoLog mode of capturing change data. On the <code>DW</code> staging database, he creates a change source <code>HQ_SRC</code>, a change set, <code>SH_SET</code>, and two change tables: <code>sales_ct</code> and <code>promo_ct</code>. The <code>sales_ct</code> change table contains all the columns from the source table, <code>sh.sales</code>. For the <code>promo_ct</code> change table, however, the publisher has decided to exclude the <code>PROMO_COST</code> column.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1025654"></a><a id="DWHSG8397"></a>Figure 17-1 Publisher Components in a Change Data Capture System</p>
<img width="551" height="408" src="./dwhsg127.gif" alt="Description of Figure 17-1 follows" /><br />
<a id="sthref515" href="./img_text/dwhsg127.htm">Description of "Figure 17-1 Publisher Components in a Change Data Capture System"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<a id="DWHSG8398"></a>
<div class="sect3"><a id="sthref516"></a>
<h4 class="sect3"><a id="sthref517"></a>Subscribers</h4>
<p>The <a id="sthref518"></a>subscribers are consumers of the published change data. A subscriber performs the following tasks:</p>
<ul>
<li>
<p>Uses the Oracle supplied package, <code><a id="sthref519"></a>DBMS_CDC_SUBSCRIBE</code>, to:</p>
<ul>
<li>
<p>Create subscriptions</p>
<p><a id="sthref520"></a>A <a href="glossary.htm#i997353"><span class="xrefglossterm">subscription</span></a> controls access to the change data from one or more source tables of interest within a single change set. A subscription contains one or more subscriber views.</p>
<p><a id="sthref521"></a>A <span class="bold">subscriber view</span> is a view that specifies the change data from a specific publication in a subscription. The subscriber is restricted to seeing change data that the publisher has published and has granted the subscriber access to use. See <a href="#i1026908">"Subscribing to Change Data"</a> for more information on choosing a method for specifying a subscriber view.</p>
</li>
<li>
<p>Notify Change Data Capture when ready to receive a set of change data</p>
<p>A <a id="sthref522"></a><a href="glossary.htm#i997359"><span class="xrefglossterm">subscription window</span></a> defines the time range of rows in a publication that the subscriber can currently see in subscriber views. The oldest row in the window is called the <a id="sthref523"></a><a href="glossary.htm#i997362"><span class="xrefglossterm">low boundary</span></a>; the newest row in the window is called the <a id="sthref524"></a><a href="glossary.htm#i997365"><span class="xrefglossterm">high boundary</span></a>. Each subscription has its own subscription window that applies to all of its subscriber views.</p>
</li>
<li>
<p>Notify Change Data Capture when finished with a set of change data</p>
</li>
</ul>
</li>
<li>
<p>Uses <code>SELECT</code> statements to <a id="sthref525"></a>retrieve change data from the subscriber views.</p>
</li>
</ul>
<p>A <a id="sthref526"></a>subscriber has the privileges of the user account under which the subscriber is running, plus any additional privileges that have been granted to the subscriber.</p>
<p><a id="sthref527"></a>In <a href="#i1025667">Figure 17-2</a>, the subscriber is interested in a subset of columns that the publisher (in <a href="#i1025654">Figure 17-1</a>) has published. Note that the <span class="italic">publications</span> shown in <a href="#i1025667">Figure 17-2</a>, are represented as <span class="italic">change tables</span> in <a href="#i1025654">Figure 17-1</a>; this reflects the different terminology used by subscribers and publishers, respectively.</p>
<p>The subscriber creates a subscription, <code>sales_promos_list</code> and two subscriber views (<code>spl_sales</code> and <code>spl_promos</code>) on the <code>SH_SET</code> change set on the DW staging database. Within each subscriber view, the subscriber includes a subset of the columns that were made available by the publisher. Note that because the publisher did not create a change table that includes the <code>PROMO_COST</code> column, there is no way for the subscriber to view change data for that column. The subscriber need not be aware of the mode of change data capture employed by the publisher.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1025667"></a><a id="DWHSG8399"></a>Figure 17-2 Subscriber Components in a Change Data Capture System</p>
<img width="498" height="431" src="./dwhsg128.gif" alt="Description of Figure 17-2 follows" /><br />
<a id="sthref528" href="./img_text/dwhsg128.htm">Description of "Figure 17-2 Subscriber Components in a Change Data Capture System"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a id="sthref529"></a>Change Data Capture provides the following benefits for subscribers:</p>
<ul>
<li>
<p>Guarantees that each subscriber sees all the changes</p>
</li>
<li>
<p>Keeps track of multiple subscribers and gives each subscriber shared access to change data</p>
</li>
<li>
<p>Handles all the storage management by automatically removing data from change tables when it is no longer required by any of the subscribers. Keep in mind that Change Data Capture starts a job in the job queue that runs once every 24 hours for handling purging. Many things can go wrong with this job (such as if it is deleted or the schedule is changed), so this automatic processing depends on the job queue process being up and running and the Change Data Capture job being there. Also, in logical standby environments, the purge job is not submitted.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle provides the previously listed benefits only when the subscriber accesses change data through a subscriber view.</div>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1025452"></a><a id="DWHSG8400"></a>
<div class="sect1">
<h2 class="sect1">Change Sources and Modes of Change Data Capture</h2>
<p>Change Data Capture provides synchronous and asynchronous modes for capturing change data. The following sections summarize how each mode of Change Data Capture is performed, and the change source associated with each mode of Change Data Capture.</p>
<a id="CHDGABFJ"></a><a id="DWHSG8401"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Synchronous Change Data Capture</h3>
<p><a id="sthref530"></a>The synchronous mode uses triggers on the source database to capture change data. It has no latency because the change data is captured continuously and in real time on the source database. The change tables are populated when DML operations on the source table are committed.</p>
<p>There is a single, predefined synchronous change source, <a id="sthref531"></a><a id="sthref532"></a><code>SYNC_SOURCE</code>, that represents the source database. This is the only synchronous change source. It cannot be altered or dropped.</p>
<p>While the synchronous mode of Change Data Capture adds overhead to the source database at capture time, this mode can reduce costs (as compared to attempting to extract change data using table differencing or change-value section) by simplifying the extraction of change data.</p>
<p>Change tables for this mode of Change Data Capture must reside locally in the source database.</p>
<p><a href="#CHDDGAHA">Figure 17-3</a> illustrates the synchronous configuration. Triggers executed after DML operations occur on the source tables populate the change tables in the change sets within the <code>SYNC_SOURCE</code> change source.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDDGAHA"></a><a id="DWHSG8402"></a>Figure 17-3 Synchronous Change Data Capture Configuration</p>
<img width="477" height="399" src="./dwhsg124.gif" alt="Description of Figure 17-3 follows" /><br />
<a id="sthref533" href="./img_text/dwhsg124.htm">Description of "Figure 17-3 Synchronous Change Data Capture Configuration"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="CHDIDHAA"></a><a id="DWHSG8403"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Asynchronous Change Data Capture</h3>
<p>The asynchronous modes capture change data from the database redo log files after changes have been committed to the source database.</p>
<p>The <a id="sthref534"></a><a id="sthref535"></a>asynchronous modes of Change Data Capture are dependent on the level of supplemental logging enabled at the source database. Supplemental logging adds redo logging overhead at the source database, so it must be carefully balanced with the needs of the applications or individuals using Change Data Capture. See <a href="#i1027101">"Asynchronous Change Data Capture and Supplemental Logging"</a> for information on supplemental logging.</p>
<p>The three modes of capturing change data are described in the following sections:</p>
<ul>
<li>
<p><a href="#CHDHDCIG">Asynchronous HotLog Mode</a></p>
</li>
<li>
<p><a href="#CHDJBCAH">Asynchronous Distributed HotLog Mode</a></p>
</li>
<li>
<p><a href="#CHDBEDHE">Asynchronous AutoLog Mode</a></p>
</li>
</ul>
<a id="CHDHDCIG"></a><a id="DWHSG8404"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Asynchronous HotLog Mode</h4>
<p>I<a id="sthref536"></a>n the asynchronous HotLog mode, change data is captured from the online redo log file on the source database. There is a brief latency between the act of committing source table transactions and the arrival of change data.</p>
<p>There is a single, predefined HotLog change source, <a id="sthref537"></a><a id="sthref538"></a><code>HOTLOG_SOURCE</code>, that represents the current online redo log files of the source database. This is the only HotLog change source. It cannot be altered or dropped.</p>
<p>Change tables for this mode of Change Data Capture must reside locally in the source database.</p>
<p><a href="#CHDFEGBJ">Figure 17-4</a> illustrates the asynchronous HotLog configuration. The Logwriter Process (<code>LGWR</code>) records committed transactions in the online redo log files on the source database. Change Data Capture uses Oracle Streams processes to automatically populate the change tables in the change sets within the <code>HOTLOG_SOURCE</code> change source as newly committed transactions arrive.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDFEGBJ"></a><a id="DWHSG8405"></a>Figure 17-4 Asynchronous HotLog Configuration</p>
<img width="485" height="401" src="./dwhsg123.gif" alt="Description of Figure 17-4 follows" /><br />
<a id="sthref539" href="./img_text/dwhsg123.htm">Description of "Figure 17-4 Asynchronous HotLog Configuration"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<a id="CHDJBCAH"></a><a id="DWHSG8406"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Asynchronous Distributed HotLog Mode</h4>
<p><a id="sthref540"></a>In the asynchronous Distributed HotLog mode, change data is captured from the online redo log file on the source database.</p>
<p>There is no predefined <a id="sthref541"></a>Distributed HotLog change source. Unlike other modes of Change Data Capture, the Distributed HotLog mode splits change data capture activities and objects across the source and staging database. Change sources are defined on the source database by the staging database publisher.</p>
<p>A Distributed HotLog change source represents the current online redo log files of the source database. However, staging database publishers can define multiple Distributed HotLog change sources, each of which contains change sets on a different staging database. The source and staging database can be on different hardware platforms and be running different operating systems, however some restrictions apply. See <a href="#CHDGACCD">"Summary of Supported Distributed HotLog Configurations and Restrictions"</a> for information on these restrictions.</p>
<p><a href="#CHDFDIAF">Figure 17-5</a> illustrates the asynchronous Distributed HotLog configuration. The change source on the source database captures change data from the online redo log files and uses Streams to propagate it to the change set on the staging database. The change set on the staging database populates the change tables within the change set.</p>
<p>There are two publishers required for this mode of Change Data Capture, one on the source database and one on the staging database. The source database publisher defines a database link on the source database to connect to the staging database as the staging database publisher. The staging database publisher defines a database link on the staging database to connect to the source database on the source database publisher. All publishing operations are performed by the staging database publisher. See <a href="#CHDEHIIE">"Performing Asynchronous Distributed HotLog Publishing"</a> for details.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDFDIAF"></a><a id="DWHSG8407"></a>Figure 17-5 Asynchronous Distributed HotLog Configuration</p>
<img width="591" height="392" src="./dwhsg126.gif" alt="Description of Figure 17-5 follows" /><br />
<a id="sthref542" href="./img_text/dwhsg126.htm">Description of "Figure 17-5 Asynchronous Distributed HotLog Configuration"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<a id="CHDBEDHE"></a><a id="DWHSG8408"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Asynchronous AutoLog Mode</h4>
<p><a id="sthref543"></a>In the asynchronous AutoLog mode, change data is captured from a set of redo log files managed by redo transport services. <span class="bold">Redo transport services</span> control the automated transfer of redo log files from the source database to the staging database. Using database initialization parameters (described in <a href="#CIHDHJIF">"Initialization Parameters for Asynchronous AutoLog Publishing"</a>), the publisher configures redo transport services to copy the redo log files from the source database system to the staging database system and to automatically register the redo log files. Asynchronous AutoLog mode can obtain change data from either the source database online redo log or from source database archived redo logs. These options are known as asynchronous AutoLog online and asynchronous AutoLog archive.With the AutoLog online option, redo transport services is set up to copy redo data from the online redo log at the source database to the standby redo log at the staging database. Change sets are populated after individual source database transactions commit. There can only be one AutoLog online change source on a given staging database and it can contain only one change set.With the AutoLog archive option, redo transport services is set up to copy archived redo logs from the source database to the staging database. Change sets are populated as new archived redo log files arrive on the staging database. The degree of latency depends on the frequency of redo log file switches on the source database. The AutoLog archive option has a higher degree of latency than the AutoLog online option, but there can be as many AutoLog archive change sources as desired on a given staging database.</p>
<p>There is no predefined <a id="sthref544"></a>AutoLog change source. The publisher provides information about the source database to create an AutoLog change source. See <a href="#CIHHEDIG">"Performing Asynchronous AutoLog Publishing"</a> for details.</p>
<p><a href="#CIHHEGCB">Figure 17-6</a> shows a Change Data Capture asynchronous AutoLog online configuration in which the LGWR process on the source database copies redo data to both the online redo log file on the source database and to the standby redo log files on the staging database as specified by the <code>LOG_ARCHIVE_DEST_2</code> parameter. (Although the image presents this parameter as <code>LOG_ARCHIVE_DEST_2</code>, the integer value can be any value between 1 and 10.)</p>
<p>Note that the LGWR process uses Oracle Net to send redo data over the network to the remote file server (RFS) process. Transmitting redo data to a remote destination requires uninterrupted connectivity through Oracle Net.</p>
<p>On the staging database, the RFS process writes the redo data to the standby redo log files. Then, Change Data Capture uses Oracle Streams downstream capture to populate the change tables in the change sets within the AutoLog change source.</p>
<p>The source database and the staging database must be running on the same hardware, operating system, and Oracle version.</p>
<div class="figure">
<p class="titleinfigure"><a id="CIHHEGCB"></a><a id="DWHSG8409"></a>Figure 17-6 Asynchronous Autolog Online Change Data Capture Configuration</p>
<img width="663" height="432" src="./dwhsg122.gif" alt="Description of Figure 17-6 follows" /><br />
<a id="sthref545" href="./img_text/dwhsg122.htm">Description of "Figure 17-6 Asynchronous Autolog Online Change Data Capture Configuration"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a href="#CHDHBADH">Figure 17-7</a> shows a typical Change Data Capture asynchronous AutoLog archive configuration in which, when the redo log file switches on the source database, archiver processes archive the redo log file on the source database to the destination specified by the <code>LOG_ARCHIVE_DEST_1</code> parameter and copy the redo log file to the staging database as specified by the <code>LOG_ARCHIVE_DEST_2</code> parameter. (Although the image presents these parameters as <code>LOG_ARCHIVE_DEST_1</code> and <code>LOG_ARCHIVE_DEST_2</code>, the integer value in these parameter strings can be any value between 1 and 10.)</p>
<p>Note that the archiver processes use Oracle Net to send redo data over the network to the remote file server (RFS) process. Transmitting redo log files to a remote destination requires uninterrupted connectivity through Oracle Net.</p>
<p>On the staging database, the RFS process writes the redo data to the copied log files. Then, Change Data Capture uses Oracle Streams downstream capture to populate the change tables in the change sets within the AutoLog change source.</p>
<p>See <a class="olink SBYDB" href="../e41134/toc.htm"><span class="italic">Oracle Data Guard Concepts and Administration</span></a> for more information regarding Redo Transport Services.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDHBADH"></a><a id="DWHSG8410"></a>Figure 17-7 Asynchronous AutoLog Archive Change Data Capture Configuration</p>
<img width="663" height="489" src="./dwhsg125.gif" alt="Description of Figure 17-7 follows" /><br />
<a id="sthref546" href="./img_text/dwhsg125.htm">Description of "Figure 17-7 Asynchronous AutoLog Archive Change Data Capture Configuration"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1025453"></a><a id="DWHSG8411"></a>
<div class="sect1">
<h2 class="sect1">Change Sets</h2>
<p>A <a id="sthref547"></a><span class="bold">change set</span> is a logical grouping of change data that is guaranteed to be transactionally consistent and that can be managed as a unit. A change set is a member of one (and only one) change source.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Change Data Capture change sources can contain one or more change sets with the following restrictions:
<ol>
<li>
<p>All of the change sets for a Distributed HotLog change source must be on the same staging database</p>
</li>
<li>
<p>An AutoLog online change source can only contain one change set</p>
</li>
</ol>
</div>
<p>When a publisher includes two or more change tables in the same change set, subscribers can perform join operations across the tables represented within the change set and be assured of transactional consistency.</p>
<p>Conceptually, a change set shares the same mode as its change source. For example, an AutoLog change set is a change set contained in an AutoLog change source. Publishers define change sets using the <code>DBMS_CDC_PUBLISH.CREATE_CHANGE_SET</code> package. In the case of synchronous Change Data Capture, the publisher can also use a predefined change set, <a id="sthref548"></a><a id="sthref549"></a><a id="sthref550"></a><code>SYNC_SET</code>. The <code>SYNC_SET</code> change set, however, cannot be altered or dropped.</p>
<p>To keep the change tables in the change set from growing larger indefinitely, publishers can purge unneeded change data from change tables at the change set level. See <a href="#i1027449">"Purging Change Tables of Unneeded Data"</a> for more information on purging change data.</p>
<a id="DWHSG8412"></a>
<div class="sect2"><a id="sthref551"></a>
<h3 class="sect2">Valid Combinations of Change Sources and Change Sets</h3>
<p><a href="#g1029289">Table 17-1</a> summarizes the valid combinations of <a id="sthref552"></a><a id="sthref553"></a>change sources and change sets and indicates whether each is predefined or publisher-defined. In addition, it indicates whether the <a id="sthref554"></a>source database represented by the change source is local to or remote from the staging database, and whether the change source is used for synchronous or asynchronous Change Data Capture.</p>
<div class="tblformal">
<p class="titleintable"><a id="DWHSG8413"></a><a id="sthref555"></a><a id="g1029289"></a>Table 17-1 Summary of Change Sources and Change Sets</p>
<table class="cellalignment1381" title="Summary of Change Sources and Change Sets" summary="This table summarizes the valid combinations of change sources and change sets and indicates whether each is predefined or publisher-defined. In addition, this table indicates whether the change source represents a local or remote source databbase, and whether the change source is used for synchronous or asynchronous change data capture." >
<thead>
<tr class="cellalignment1372">
<th class="cellalignment1382" id="r1c1-t5">Mode</th>
<th class="cellalignment1382" id="r1c2-t5">Change Source</th>
<th class="cellalignment1382" id="r1c3-t5">Source Database Represented</th>
<th class="cellalignment1382" id="r1c4-t5">Associated Change Sets</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r2c1-t5" headers="r1c1-t5">
<p>Synchronous</p>
</td>
<td class="cellalignment1378" headers="r2c1-t5 r1c2-t5">
<p>Predefined <code>SYNC_SOURCE</code></p>
</td>
<td class="cellalignment1378" headers="r2c1-t5 r1c3-t5">
<p>Local</p>
</td>
<td class="cellalignment1378" headers="r2c1-t5 r1c4-t5">
<p>Predefined <code>SYNC_SET</code> and publisher-defined</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r3c1-t5" headers="r1c1-t5">
<p>Asynchronous HotLog</p>
</td>
<td class="cellalignment1378" headers="r3c1-t5 r1c2-t5">
<p>Predefined <code>HOTLOG_SOURCE</code></p>
</td>
<td class="cellalignment1378" headers="r3c1-t5 r1c3-t5">
<p>Local</p>
</td>
<td class="cellalignment1378" headers="r3c1-t5 r1c4-t5">
<p>Publisher-defined</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r4c1-t5" headers="r1c1-t5">
<p>Asynchronous Distributed HotLog</p>
</td>
<td class="cellalignment1378" headers="r4c1-t5 r1c2-t5">
<p>Publisher-defined</p>
</td>
<td class="cellalignment1378" headers="r4c1-t5 r1c3-t5">
<p>Remote</p>
</td>
<td class="cellalignment1378" headers="r4c1-t5 r1c4-t5">
<p>Publisher-defined. Change sets must all be on the same staging database</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r5c1-t5" headers="r1c1-t5">
<p>Asynchronous AutoLog online</p>
</td>
<td class="cellalignment1378" headers="r5c1-t5 r1c2-t5">
<p>Publisher-defined</p>
</td>
<td class="cellalignment1378" headers="r5c1-t5 r1c3-t5">
<p>Remote</p>
</td>
<td class="cellalignment1378" headers="r5c1-t5 r1c4-t5">
<p>Publisher-defined. There can only be one change set in an AutoLog online change source</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r6c1-t5" headers="r1c1-t5">
<p>Asynchronous AutoLog archive</p>
</td>
<td class="cellalignment1378" headers="r6c1-t5 r1c2-t5">
<p>Publisher-defined</p>
</td>
<td class="cellalignment1378" headers="r6c1-t5 r1c3-t5">
<p>Remote</p>
</td>
<td class="cellalignment1378" headers="r6c1-t5 r1c4-t5">
<p>Publisher-defined</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1025454"></a><a id="DWHSG8414"></a>
<div class="sect1">
<h2 class="sect1">Change Tables</h2>
<p>A given change table contains the change data resulting from DML operations performed on a given source table. A change table consists of two things: the change data itself, which is stored in a database table; and the system metadata necessary to maintain the change table, which includes control columns.</p>
<p>The publisher specifies the source columns that are to be included in the change table. Typically, for a change table to contain useful data, the publisher needs to include the primary key column in the change table along with any other columns of interest to subscribers. For example, suppose subscribers are interested in changes that occur to the <code>UNIT_COST</code> and the <code>UNIT_PRICE</code> columns in the <code>sh.costs</code> table. If the publisher does not include the <code>PROD_ID</code> column in the change table, subscribers will know only that the unit cost and unit price of some products have changed, but will be unable to determine for which products these changes have occurred.</p>
<p>There are optional and required control columns. The required control columns are always included in a change table; the optional ones are included if specified by the publisher when creating the change table. Control columns are managed by Change Data Capture. See <a href="#CHDCFGBH">"Understanding Change Table Control Columns"</a> and <a href="#CHDBAEJG">"Understanding TARGET_COLMAP$ and SOURCE_COLMAP$ Values"</a> for detailed information on control columns.</p>
</div>
<!-- class="sect1" -->
<a id="i1025455"></a><a id="DWHSG8415"></a>
<div class="sect1">
<h2 class="sect1">Getting Information About the Change Data Capture Environment</h2>
<p><a id="sthref556"></a>Information about the Change Data Capture environment is provided in the static data dictionary views described in <a href="#g1029399">Table 17-2</a> and <a href="#CHDDEDBE">Table 17-3</a>. <a href="#g1029399">Table 17-2</a> lists the views that are intended for use by publishers; the user must have the <a id="sthref557"></a><code>SELECT_CATALOG_ROLE</code> privilege to access the views listed in this table. <a href="#CHDDEDBE">Table 17-3</a> lists the views that are intended for use by subscribers. <a href="#CHDDEDBE">Table 17-3</a> includes views with the prefixes <code>ALL</code> and <code>USER</code>. These prefixes have the following general meanings:</p>
<ul>
<li>
<p>A view with the <code>ALL</code> prefix allows the user to display all the information accessible to the user, including information from the current user's schema as well as information from objects in other schemas, if the current user has access to those objects by way of grants of privileges or roles.</p>
</li>
<li>
<p>A view with the <code>USER</code> prefix allows the user to display all the information from the schema of the user issuing the query without the use of additional special privileges or roles.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To look at all the views (those intended for both the publisher and the subscriber), a user must have the <a id="sthref558"></a><code>SELECT_CATALOG_ROLE</code> privilege.</div>
</li>
</ul>
<div class="tblformal">
<p class="titleintable"><a id="DWHSG8416"></a><a id="sthref559"></a><a id="g1029399"></a>Table 17-2 Views Intended for Use by Change Data Capture Publishers</p>
<table class="cellalignment1381" title="Views Intended for Use by Change Data Capture Publishers" summary="This table lists the static data dictionary views that are intended for use by Change Data Capture publishers; the publisher must have the SELECT_CATALOG_ROLE privilege to access the views listed in this table" dir="ltr">
<thead>
<tr class="cellalignment1372">
<th class="cellalignment1382" id="r1c1-t7">View Name</th>
<th class="cellalignment1382" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r2c1-t7" headers="r1c1-t7">
<p><code>ALL_CHANGE_SOURCES</code></p>
</td>
<td class="cellalignment1378" headers="r2c1-t7 r1c2-t7">
<p>Describes existing change sources.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r3c1-t7" headers="r1c1-t7">
<p><code>ALL_CHANGE_PROPAGATIONS</code></p>
</td>
<td class="cellalignment1378" headers="r3c1-t7 r1c2-t7">
<p>Describes the Oracle Streams propagation associated with a given Distributed HotLog change source on the source database. This view is populated on the source database for 11.1 or 11.2 change sources or on the staging database for 9.2, 10.1 or 10.2 change sources.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r4c1-t7" headers="r1c1-t7">
<p><code>ALL_CHANGE_PROPAGATION_SETS</code></p>
</td>
<td class="cellalignment1378" headers="r4c1-t7 r1c2-t7">
<p>Describes the Oracle Streams propagation associated with a given Distributed HotLog change set on the staging database. This view is populated on the source database for 11.1 or 11.2 change sources or on the staging database for 9.2, 10.1 or 10.2 change sources.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r5c1-t7" headers="r1c1-t7">
<p><code>ALL_CHANGE_SETS</code></p>
</td>
<td class="cellalignment1378" headers="r5c1-t7 r1c2-t7">
<p>Describes existing change sets.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r6c1-t7" headers="r1c1-t7">
<p><code>ALL_CHANGE_TABLES</code></p>
</td>
<td class="cellalignment1378" headers="r6c1-t7 r1c2-t7">
<p>Describes existing change tables.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r7c1-t7" headers="r1c1-t7">
<p><code>DBA_SOURCE_TABLES</code></p>
</td>
<td class="cellalignment1378" headers="r7c1-t7 r1c2-t7">
<p>Describes all published source tables in the database.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r8c1-t7" headers="r1c1-t7">
<p><code>DBA_PUBLISHED_COLUMNS</code></p>
</td>
<td class="cellalignment1378" headers="r8c1-t7 r1c2-t7">
<p>Describes all published columns of source tables in the database.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r9c1-t7" headers="r1c1-t7">
<p><code>DBA_SUBSCRIPTIONS</code></p>
</td>
<td class="cellalignment1378" headers="r9c1-t7 r1c2-t7">
<p>Describes all subscriptions.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r10c1-t7" headers="r1c1-t7">
<p><code>DBA_SUBSCRIBED_TABLES</code></p>
</td>
<td class="cellalignment1378" headers="r10c1-t7 r1c2-t7">
<p>Describes all source tables to which any subscriber has subscribed.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r11c1-t7" headers="r1c1-t7">
<p><code>DBA_SUBSCRIBED_COLUMNS</code></p>
</td>
<td class="cellalignment1378" headers="r11c1-t7 r1c2-t7">
<p>Describes the columns of source tables to which any subscriber has subscribed.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="tblformal">
<p class="titleintable"><a id="DWHSG8417"></a><a id="sthref560"></a><a id="CHDDEDBE"></a>Table 17-3 Views Intended for Use by Change Data Capture Subscribers</p>
<table class="cellalignment1381" title="Views Intended for Use by Change Data Capture Subscribers" summary="This table lists the static data dictionary views that are intended for use by Change Data Capture subscribers." dir="ltr">
<thead>
<tr class="cellalignment1372">
<th class="cellalignment1382" id="r1c1-t8">View Name</th>
<th class="cellalignment1382" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r2c1-t8" headers="r1c1-t8">
<p><code>ALL_SOURCE_TABLES</code></p>
</td>
<td class="cellalignment1378" headers="r2c1-t8 r1c2-t8">
<p>Describes all public source tables for change tables that are owned by the current user.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r3c1-t8" headers="r1c1-t8">
<p><code>USER_SOURCE_TABLES</code></p>
</td>
<td class="cellalignment1378" headers="r3c1-t8 r1c2-t8">
<p>Describes all public source tables for change tables that are owned by the current user.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r4c1-t8" headers="r1c1-t8">
<p><code>ALL_PUBLISHED_COLUMNS</code></p>
</td>
<td class="cellalignment1378" headers="r4c1-t8 r1c2-t8">
<p>Describes all published columns of source tables for change tables that are owned by the current user.<a id="sthref561" href="#sthref561" onclick='footdisplay(1,"\u003ccode\u003eALL_PUBLISHED_COLUMNS\u003c/code\u003e, \u003ccode\u003eUSER_PUBLISHED_COLUMNS\u003c/code\u003e, and the view for \u003ccode\u003e*_SOURCE_TABLES\u003c/code\u003e are synonyms, so the user must have ownership to view the table or column information.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r5c1-t8" headers="r1c1-t8">
<p><code>USER_PUBLISHED_COLUMNS</code></p>
</td>
<td class="cellalignment1378" headers="r5c1-t8 r1c2-t8">
<p>Describes all published columns of source tables for change tables that are owned by the current user.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r6c1-t8" headers="r1c1-t8">
<p><code>ALL_SUBSCRIPTIONS</code></p>
</td>
<td class="cellalignment1378" headers="r6c1-t8 r1c2-t8">
<p>Describes all of the subscriptions created by the current user.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r7c1-t8" headers="r1c1-t8">
<p><code>USER_SUBSCRIPTIONS</code></p>
</td>
<td class="cellalignment1378" headers="r7c1-t8 r1c2-t8">
<p>Describes all of the subscriptions created by the current user.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r8c1-t8" headers="r1c1-t8">
<p><code>ALL_SUBSCRIBED_TABLES</code></p>
</td>
<td class="cellalignment1378" headers="r8c1-t8 r1c2-t8">
<p>Describes the source tables to which the current user has subscribed.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r9c1-t8" headers="r1c1-t8">
<p><code>USER_SUBSCRIBED_TABLES</code></p>
</td>
<td class="cellalignment1378" headers="r9c1-t8 r1c2-t8">
<p>Describes the source tables to which the current user has subscribed.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r10c1-t8" headers="r1c1-t8">
<p><code>ALL_SUBSCRIBED_COLUMNS</code></p>
</td>
<td class="cellalignment1378" headers="r10c1-t8 r1c2-t8">
<p>Describes the columns of source tables to which the current user has subscribed.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r11c1-t8" headers="r1c1-t8">
<p><code>USER_SUBSCRIBED_COLUMNS</code></p>
</td>
<td class="cellalignment1378" headers="r11c1-t8 r1c2-t8">
<p>Describes the columns of source tables to which the current user has subscribed.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup><code>ALL_PUBLISHED_COLUMNS</code>, <code>USER_PUBLISHED_COLUMNS</code>, and the view for <code>*_SOURCE_TABLES</code> are synonyms, so the user must have ownership to view the table or column information.</p>
<p>See <a class="olink REFRN002" href="../../server.112/e40402/statviews_part.htm#REFRN002"><span class="italic">Oracle Database Reference</span></a> for complete information about these views.</p>
</div>
<!-- class="sect1" -->
<a id="i1025456"></a><a id="DWHSG8418"></a>
<div class="sect1">
<h2 class="sect1">Preparing to Publish Change Data</h2>
<p><a id="sthref562"></a>This section describes the tasks the publisher should perform before starting to publish change data, information on creating publishers, information on selecting a mode in which to capture change data, instructions on setting up database links required for the asynchronous Distributed HotLog mode of Change Data Capture, and instructions on setting database initialization parameters required by Change Data Capture.</p>
<p>A <a id="sthref563"></a>publisher should do the following before performing the actual steps for publishing:</p>
<ul>
<li>
<p>Gather requirements from the subscribers.</p>
</li>
<li>
<p>Determine which source database contains the relevant source tables.</p>
</li>
<li>
<p>Choose the capture mode: synchronous, asynchronous HotLog, asynchronous Distributed HotLog, or asynchronous AutoLog, as described in <a href="#CHDGAGDJ">"Determining the Mode in Which to Capture Data"</a>.</p>
</li>
<li>
<p>Ensure that the source and staging database DBAs have set database initialization parameters, as described in <a href="#CHDFAGAG">"Setting Initialization Parameters for Change Data Capture Publishing"</a> and <a href="#CHDJIBFH">"Publishing Change Data"</a>.</p>
</li>
<li>
<p>Sets up database links from the source database to the staging database and from the staging database to the source database, as shown in <a href="#CHDEHIIE">"Performing Asynchronous Distributed HotLog Publishing"</a>. Be aware that this requires the source database publisher to know the username and password of the staging database publisher and the staging database publisher to know the username and password of the source database publisher.</p>
</li>
</ul>
<a id="CHDBHBAC"></a><a id="DWHSG8419"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating a User to Serve As a Publisher</h3>
<p>For all modes of Change Database Capture, the staging database DBA creates a user to serve as a publisher for Change Data Capture. In addition, for the asynchronous Distributed HotLog mode of Change Data Capture, the source database DBA also creates a user to serve as a publisher. On the source database, this publisher's only task is to create a database link from the source database to the staging database.</p>
<p>The <code>SYS</code> and <code>SYSTEM</code> users cannot be used as a Change Data Capture publisher, and a Change Data Capture publisher should not use the <code>SYSTEM</code> tablespace as its default tablespace.</p>
<p>The following sections describe how to set up a publisher as required for each mode of Change Data Capture.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If a publisher is dropped with a SQL <code>DROP USER CASCADE</code> statement, then all Change Data Capture objects owned by that publisher are dropped, except those that contain Change Data Capture objects owned by other publishers.For example, suppose publisher <code>CDCPUB1</code> owns the change set <code>CDCPUB1_SET</code> that contains the change table <code>CDCPUB2.SALES_CT</code>. Issuing a <code>DROP USER CASCADE</code> statement to drop <code>CDCPUB1</code> does not result in the <code>CDCPUB1_SET</code> change set being dropped. However, after all of the change tables contained within the change set have been dropped, any publisher can drop the <code>CDCPUB1_SET</code> change set with the <code>DBMS_CDC_PUBLISH.DROP_CHANGE_SET</code> subprogram.</div>
<a id="DWHSG8420"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref564"></a>
<h4 class="sect3">Granting Privileges and Roles to the Publisher</h4>
<p>Regardless of change data capture mode to be used, the staging database publisher must be granted the <a id="sthref565"></a><a id="sthref566"></a><a id="sthref567"></a>privileges and roles in the following list:</p>
<ul>
<li>
<p><a id="sthref568"></a><code>EXECUTE_CATALOG_ROLE</code> privilege</p>
</li>
<li>
<p><code><a id="sthref569"></a>SELECT_CATALOG_ROLE</code> privilege</p>
</li>
<li>
<p><a id="sthref570"></a><code>CREATE TABLE</code> and <code><a id="sthref571"></a>CREATE SESSION</code> privileges</p>
</li>
<li>
<p><code><a id="sthref572"></a>EXECUTE</code> on the <code>DBMS_CDC_PUBLISH</code> package</p>
</li>
</ul>
<p><a id="sthref573"></a><a id="sthref574"></a>For asynchronous HotLog, Distributed HotLog, and AutoLog publishing, the staging database publisher must be configured as an Oracle Streams administrator and also be granted the <code>CREATE</code> <code>SEQUENCE</code> privilege, as follows. (See <a class="olink STRMS" href="../e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information on configuring an Oracle Streams administrator.)</p>
<ul>
<li>
<p>Be granted the <code>CREATE SEQUENCE</code> privilege</p>
</li>
<li>
<p>Be granted the <a id="sthref575"></a><code>DBA</code> role</p>
</li>
<li>
<p>Be the <code>GRANTEE</code> specified in a <code>DBMS_STREAMS_AUTH.GRANT_ADMIN_PRIVILEGE</code> subprogram issued by the staging database DBA</p>
</li>
</ul>
<p>For asynchronous Distributed HotLog publishing, the <span class="italic">source</span> database publisher must be granted the <code>DBA</code> role and must be the grantee specified in a <code>DBMS_STREAMS_AUTH.GRANT_ADMIN_PRIVILEGE</code> subprogram.</p>
</div>
<!-- class="sect3" -->
<a id="DWHSG8421"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref576"></a>
<h4 class="sect3">Creating a Default Tablespace for the Publisher</h4>
<p>Oracle recommends that when <a id="sthref577"></a><a id="sthref578"></a>creating the publisher account on a staging database, the DBA specify a default tablespace for the publisher; the publisher should use this tablespace for any change tables he or she creates.</p>
</div>
<!-- class="sect3" -->
<a id="DWHSG8422"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref579"></a>
<h4 class="sect3">Password Files and Setting the REMOTE_LOGIN_PASSWORDFILE Parameter</h4>
<p>You must ensure that a password file has been generated. This occurs automatically when using the Database Configuration Assistant.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADMIN" href="../e25494/toc.htm"><span class="italic">Oracle Database Administrator's Guide</span></a></p>
</li>
<li>
<p><a href="#CIHFFDBI">"Database Configuration Assistant Considerations"</a> for more information on setting passwords</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDGAGDJ"></a><a id="DWHSG8423"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Determining the Mode in Which to Capture Data</h3>
<p>These factors influence the decision on the mode in which to capture change data:</p>
<ul>
<li>
<p>Whether or not the staging database is remote from the source database</p>
</li>
<li>
<p>Tolerance for latency between changes made on the source database and changes captured by Change Data Capture. Note that latency generally increases from Synchronous to Asynchronous AutoLog Archive in <a href="#g1029468">Table 17-4</a></p>
</li>
<li>
<p>Performance impact on the source database transactions and overall database performance</p>
</li>
<li>
<p>Whether the source and staging databases will be running on the same hardware, using the same operating systems, or using the same Oracle database release</p>
</li>
</ul>
<p><a href="#g1029468">Table 17-4</a> s<a id="sthref580"></a><a id="sthref581"></a><a id="sthref582"></a>ummarizes these factors that influence the mode d<a id="sthref583"></a>ecision.</p>
<div class="tblformalwide">
<p class="titleintable"><a id="DWHSG8424"></a><a id="sthref584"></a><a id="g1029468"></a>Table 17-4 Factors Influencing Choice of Change Data Capture Mode</p>
<table class="cellalignment1383" title="Factors Influencing Choice of Change Data Capture Mode" summary="This table summarizes the factors that influence the choice of Change Data Capture modes." dir="ltr">
<thead>
<tr class="cellalignment1372">
<th class="cellalignment1382" id="r1c1-t11">Mode</th>
<th class="cellalignment1382" id="r1c2-t11">Location of, Hardware, and Software on Staging Database</th>
<th class="cellalignment1382" id="r1c3-t11">Capture Mechanism</th>
<th class="cellalignment1382" id="r1c4-t11">Source Database Performance Impact</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r2c1-t11" headers="r1c1-t11">
<p>Synchronous</p>
</td>
<td class="cellalignment1378" headers="r2c1-t11 r1c2-t11">
<p><a id="sthref585"></a>Location must be the same as the source database and therefore hardware, operating system, and Oracle database release are the same as source system.</p>
</td>
<td class="cellalignment1378" headers="r2c1-t11 r1c3-t11">
<p><a id="sthref586"></a>Change data is automatically committed as part of the same transaction it reflects.</p>
</td>
<td class="cellalignment1378" headers="r2c1-t11 r1c4-t11">
<p><a id="sthref587"></a>Adds overhead to source database transactions to perform change data capture.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r3c1-t11" headers="r1c1-t11">
<p>Asynchronous HotLog</p>
</td>
<td class="cellalignment1378" headers="r3c1-t11 r1c2-t11">
<p><a id="sthref588"></a>Location must be the same as the source database and therefore hardware, operating system, and Oracle database release are the same as source system.</p>
</td>
<td class="cellalignment1378" headers="r3c1-t11 r1c3-t11">
<p><a id="sthref589"></a>Change data is captured from the current online redo log file. Change sets are populated automatically as new transactions are committed.</p>
</td>
<td class="cellalignment1378" headers="r3c1-t11 r1c4-t11">
<p><a id="sthref590"></a>Minimal impact on source database transactions to perform supplemental logging. Additional source database overhead to perform change data capture.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r4c1-t11" headers="r1c1-t11">
<p>Asynchronous Distributed HotLog</p>
</td>
<td class="cellalignment1378" headers="r4c1-t11 r1c2-t11">
<p>Location is remote from the source database. Hardware, operating system, and Oracle database release can be different from the source system.</p>
</td>
<td class="cellalignment1378" headers="r4c1-t11 r1c3-t11">
<p>Change data is captured from the current online redo log file. The change set is populated automatically as new committed transactions arrive on the staging database.</p>
</td>
<td class="cellalignment1378" headers="r4c1-t11 r1c4-t11">
<p><a id="sthref591"></a>Minimal impact on source database transactions to perform supplemental logging.</p>
<p>Some overhead on the source database is incurred when mining the online redo log files.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r5c1-t11" headers="r1c1-t11">
<p>Asynchronous AutoLog Online</p>
</td>
<td class="cellalignment1378" headers="r5c1-t11 r1c2-t11">
<p><a id="sthref592"></a>Location is remote from the source database. Hardware, operating system, and Oracle database release are the same as source system.</p>
</td>
<td class="cellalignment1378" headers="r5c1-t11 r1c3-t11">
<p><a id="sthref593"></a>Change data is captured from the standby redo log files. The change set is populated automatically as new committed transactions arrive on the staging database.</p>
</td>
<td class="cellalignment1378" headers="r5c1-t11 r1c4-t11">
<p><a id="sthref594"></a>Minimal impact on source database transactions to perform supplemental logging.</p>
<p>Minimal source database overhead for redo transport services.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r6c1-t11" headers="r1c1-t11">
<p>Asynchronous AutoLog Archive</p>
</td>
<td class="cellalignment1378" headers="r6c1-t11 r1c2-t11">
<p><a id="sthref595"></a>Location is remote from the source database. Hardware, operating system, and Oracle database release are the same as source system.</p>
</td>
<td class="cellalignment1378" headers="r6c1-t11 r1c3-t11">
<p><a id="sthref596"></a>Change data is captured from archived redo log files. Change sets are populated automatically as archived redo log files arrive on the staging database.</p>
</td>
<td class="cellalignment1378" headers="r6c1-t11 r1c4-t11">
<p><a id="sthref597"></a>Minimal impact on source database transactions to perform supplemental logging.</p>
<p>Minimal source database overhead for redo transport services.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<a id="CHDFAGAG"></a><a id="DWHSG8425"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Setting Initialization Parameters for Change Data Capture Publishing</h3>
<p>Initialization parameters must be set on the source or staging database, or both, for Change Data Capture to succeed. Which parameters to set depend on the mode in which Change Data Capture is publishing change data, and on whether the parameters are being set on the source or staging database.</p>
<p>The following sections describe the database initialization parameter settings for each mode of Change Data Capture. Sometimes the DBA is directed to add a value to a current setting. (The DBA can use the SQL <code>SHOW</code> <code>PARAMETERS</code> statement to see the current value of a setting.)</p>
<p>See <a class="olink REFRN" href="../e40402/toc.htm"><span class="italic">Oracle Database Reference</span></a> for general information about these database initialization parameters and <a class="olink STRMS" href="../e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about the database initialization parameters set for asynchronous publishing.</p>
<a id="DWHSG8426"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref598"></a>
<h4 class="sect3">Initialization Parameters for Synchronous Publishing</h4>
<p><a id="sthref599"></a>Set the <code>JAVA_POOL_SIZE</code> parameter as follows:</p>
<pre>
JAVA_POOL_SIZE = 50000000
</pre></div>
<!-- class="sect3" -->
<a id="DWHSG8427"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref600"></a>
<h4 class="sect3">Initialization Parameters for Asynchronous HotLog Publishing</h4>
<p><a href="#CIHJBCHJ">Table 17-5</a> lists the source database initialization parameters and their recommended settings for <a id="sthref601"></a>asynchronous HotLog publishing.</p>
<div class="tblformalwide">
<p class="titleintable"><a id="DWHSG8428"></a><a id="sthref602"></a><a id="CIHJBCHJ"></a>Table 17-5 Source Database Initialization Parameters for Asynchronous HotLog Publishing</p>
<table class="cellalignment1383" title="Source Database Initialization Parameters for Asynchronous HotLog Publishing" summary="This table lists the source database initialization parameters and their recommended settings for Asychronous HotLog publishing." dir="ltr">
<thead>
<tr class="cellalignment1372">
<th class="cellalignment1382" id="r1c1-t12">Parameter</th>
<th class="cellalignment1382" id="r1c2-t12">Recommended Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r2c1-t12" headers="r1c1-t12">
<p><code>COMPATIBLE</code></p>
</td>
<td class="cellalignment1378" headers="r2c1-t12 r1c2-t12">
<p>11.0</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r3c1-t12" headers="r1c1-t12">
<p><code>JAVA_POOL_SIZE</code></p>
</td>
<td class="cellalignment1378" headers="r3c1-t12 r1c2-t12">
<p>50000000</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r4c1-t12" headers="r1c1-t12">
<p><code>JOB_QUEUE_PROCESSES</code></p>
</td>
<td class="cellalignment1378" headers="r4c1-t12 r1c2-t12">
<p>(current value) + 2</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r5c1-t12" headers="r1c1-t12">
<p><code>PARALLEL_MAX_SERVERS</code></p>
</td>
<td class="cellalignment1378" headers="r5c1-t12 r1c2-t12">
<p>(current value) + (5 * (the number of change sets planned))</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r6c1-t12" headers="r1c1-t12">
<p><code>PROCESSES</code></p>
</td>
<td class="cellalignment1378" headers="r6c1-t12 r1c2-t12">
<p>(current value) + (7 * (the number of change sets planned))</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r7c1-t12" headers="r1c1-t12">
<p><code>SESSIONS</code></p>
</td>
<td class="cellalignment1378" headers="r7c1-t12 r1c2-t12">
<p>(current value) + (2 * (the number of change sets planned))</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r8c1-t12" headers="r1c1-t12">
<p><code>STREAMS_POOL_SIZE</code></p>
</td>
<td class="cellalignment1378" headers="r8c1-t12 r1c2-t12">
<ul>
<li>
<p>If the current value of the <code>STREAMS_POOL_SIZE</code> parameter is 50 MB or greater, then set this parameter to:</p>
<p>(current value) + ((the number of change sets planned) * (21 MB))</p>
</li>
<li>
<p>If the current value of the <code>STREAMS_POOL_SIZE</code> parameter is less than 50 MB, then set the value of this parameter to:</p>
<p>50 MB + ((the number of change sets planned) * (21 MB))</p>
</li>
</ul>
<p>See <a class="olink STRMS" href="../e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information on how the <code>STREAMS_POOL_SIZE</code> parameter is applied when changed dynamically.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r9c1-t12" headers="r1c1-t12">
<p><code>UNDO_RETENTION</code></p>
</td>
<td class="cellalignment1378" headers="r9c1-t12 r1c2-t12">
<p>3600</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect3" -->
<a id="CHDIEIFB"></a><a id="DWHSG8429"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Initialization Parameters for Asynchronous Distributed HotLog Publishing</h4>
<p><a href="#CHDDFAEB">Table 17-6</a> lists the source database initialization parameters and their recommended settings for <a id="sthref603"></a>asynchronous Distributed HotLog publishing when the source database is Oracle Database release 10.1.0, 10.2.0, 11.1.0, or 11.2.0.</p>
<p><a href="#CHDCGFJA">Table 17-7</a> lists the source database initialization parameters and their recommended settings for asynchronous Distributed HotLog publishing when the source database is Oracle Database release 9.2.</p>
<p><a href="#CHDBCDEI">Table 17-8</a> lists the staging database initialization parameters and their recommended settings for asynchronous Distributed HotLog publishing. These are the same regardless of which Oracle database release is being used for the source database.</p>
<div class="tblformalwide">
<p class="titleintable"><a id="DWHSG8430"></a><a id="sthref604"></a><a id="CHDDFAEB"></a>Table 17-6 Source Database (10.1.0, 10.2.0, 11.1.0, 11.2.0) Initialization Parameters for Asynchronous Distributed HotLog Publishing</p>
<table class="cellalignment1383" title="Source Database (10.1.0, 10.2.0, 11.1.0, 11.2.0) Initialization Parameters for Asynchronous Distributed HotLog Publishing" summary="This table lists the source database initialization parameters and their recommended settings for Asychronous HotLog publishing." dir="ltr">
<thead>
<tr class="cellalignment1372">
<th class="cellalignment1382" id="r1c1-t13">Parameter</th>
<th class="cellalignment1382" id="r1c2-t13">Recommended Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r2c1-t13" headers="r1c1-t13">
<p><code>COMPATIBLE</code></p>
</td>
<td class="cellalignment1378" headers="r2c1-t13 r1c2-t13">
<p>11.0, depending on the source Oracle database release</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r3c1-t13" headers="r1c1-t13">
<p><code>GLOBAL_NAMES</code></p>
</td>
<td class="cellalignment1378" headers="r3c1-t13 r1c2-t13">
<p><code>TRUE</code></p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r4c1-t13" headers="r1c1-t13">
<p><code>JOB_QUEUE_PROCESSES</code></p>
</td>
<td class="cellalignment1378" headers="r4c1-t13 r1c2-t13">
<p>(current value) + 2</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r5c1-t13" headers="r1c1-t13">
<p><code>OPEN_LINKS</code></p>
</td>
<td class="cellalignment1378" headers="r5c1-t13 r1c2-t13">
<p>4, or the number of Distributed HotLog change sources planned, whichever is greater.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r6c1-t13" headers="r1c1-t13">
<p><code>PARALLEL_MAX_SERVERS</code></p>
</td>
<td class="cellalignment1378" headers="r6c1-t13 r1c2-t13">
<p>(current value) + (3 * (the number of change sources planned))</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r7c1-t13" headers="r1c1-t13">
<p><code>PROCESSES</code></p>
</td>
<td class="cellalignment1378" headers="r7c1-t13 r1c2-t13">
<p>(current value) + (4 * (the number of change sources planned))</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r8c1-t13" headers="r1c1-t13">
<p><code>SESSIONS</code></p>
</td>
<td class="cellalignment1378" headers="r8c1-t13 r1c2-t13">
<p>(current value) + (the number of change sources planned)</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r9c1-t13" headers="r1c1-t13">
<p><code>STREAMS_POOL_SIZE</code></p>
</td>
<td class="cellalignment1378" headers="r9c1-t13 r1c2-t13">
<ul>
<li>
<p>If the current value of the <code>STREAMS_POOL_SIZE</code> parameter is 50 MB or greater, then set this parameter to:</p>
<p>(current value) + ((the number of change sources planned) * (20 MB))</p>
</li>
<li>
<p>If the current value of the <code>STREAMS_POOL_SIZE</code> parameter is less than 50 MB, then set the value of this parameter to:</p>
<p>50 MB + ((the number of change sets planned) * (20 MB))</p>
</li>
</ul>
<p>See <a class="olink STRMS" href="../e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information on how the <code>STREAMS_POOL_SIZE</code> parameter is applied when changed dynamically.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r10c1-t13" headers="r1c1-t13">
<p><code>UNDO_RETENTION</code></p>
</td>
<td class="cellalignment1378" headers="r10c1-t13 r1c2-t13">
<p>3600</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div class="tblformalwide">
<p class="titleintable"><a id="DWHSG8431"></a><a id="sthref605"></a><a id="CHDCGFJA"></a>Table 17-7 Source Database (9.2) Initialization Parameters for Asynchronous Distributed HotLog Publishing</p>
<table class="cellalignment1383" title="Source Database (9.2) Initialization Parameters for Asynchronous Distributed HotLog Publishing" summary="This table lists the source database initialization parameters and their recommended settings for Asychronous HotLog publishing." dir="ltr">
<thead>
<tr class="cellalignment1372">
<th class="cellalignment1382" id="r1c1-t14">Parameter</th>
<th class="cellalignment1382" id="r1c2-t14">Recommended Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r2c1-t14" headers="r1c1-t14">
<p><code>COMPATIBLE</code></p>
</td>
<td class="cellalignment1378" headers="r2c1-t14 r1c2-t14">
<p>9.2.0</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r3c1-t14" headers="r1c1-t14">
<p><code>GLOBAL_NAMES</code></p>
</td>
<td class="cellalignment1378" headers="r3c1-t14 r1c2-t14">
<p><code>TRUE</code></p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r4c1-t14" headers="r1c1-t14">
<p><code>JOB_QUEUE_PROCESSES</code></p>
</td>
<td class="cellalignment1378" headers="r4c1-t14 r1c2-t14">
<p>(current value) + 2</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r5c1-t14" headers="r1c1-t14">
<p><code>LOG_PARALLELISM</code></p>
</td>
<td class="cellalignment1378" headers="r5c1-t14 r1c2-t14">
<p>1</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r6c1-t14" headers="r1c1-t14">
<p><code>LOGMNR_MAX_PERSISTENT_SESSIONS</code></p>
</td>
<td class="cellalignment1378" headers="r6c1-t14 r1c2-t14">
<p>Value equal to the number of change sources planned</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r7c1-t14" headers="r1c1-t14">
<p><code>OPEN_LINKS</code></p>
</td>
<td class="cellalignment1378" headers="r7c1-t14 r1c2-t14">
<p>4, or the number of Distributed HotLog change sources planned, whichever is greater</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r8c1-t14" headers="r1c1-t14">
<p><code>PARALLEL_MAX_SERVERS</code></p>
</td>
<td class="cellalignment1378" headers="r8c1-t14 r1c2-t14">
<p>(current value) + (3 * (the number of change sources planned))</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r9c1-t14" headers="r1c1-t14">
<p><code>PROCESSES</code></p>
</td>
<td class="cellalignment1378" headers="r9c1-t14 r1c2-t14">
<p>(current value) + (4 * (the number of change sources planned))</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r10c1-t14" headers="r1c1-t14">
<p><code>SESSIONS</code></p>
</td>
<td class="cellalignment1378" headers="r10c1-t14 r1c2-t14">
<p>(current value) + (the number of change sources planned)</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r11c1-t14" headers="r1c1-t14">
<p><code>SHARED_POOL_SIZE</code></p>
</td>
<td class="cellalignment1378" headers="r11c1-t14 r1c2-t14">
<ul>
<li>
<p>If the current value of the <code>SHARED_POOL_SIZE</code> parameter is 50 MB or greater, then set this parameter to:</p>
<p>(current value) + ((the number of change sources planned) * (20 MB))</p>
</li>
<li>
<p>If the current value of the <code>SHARED_POOL_SIZE</code> parameter is less than 50 MB, then set the value of this parameter to:</p>
<p>50 MB + ((the number of change sources planned) * (20 MB))</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r12c1-t14" headers="r1c1-t14">
<p><code>UNDO_RETENTION</code></p>
</td>
<td class="cellalignment1378" headers="r12c1-t14 r1c2-t14">
<p>3600</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div class="tblformalwide">
<p class="titleintable"><a id="DWHSG8432"></a><a id="sthref606"></a><a id="CHDBCDEI"></a>Table 17-8 Staging Database (11.2.0) Initialization Parameters for Asynchronous Distributed HotLog Publishing</p>
<table class="cellalignment1383" title="Staging Database (11.2.0) Initialization Parameters for Asynchronous Distributed HotLog Publishing" summary="This table lists the source database initialization parameters and their recommended settings for Asychronous HotLog publishing." dir="ltr">
<thead>
<tr class="cellalignment1372">
<th class="cellalignment1382" id="r1c1-t15">Parameter</th>
<th class="cellalignment1382" id="r1c2-t15">Recommended Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r2c1-t15" headers="r1c1-t15">
<p><code>COMPATIBLE</code></p>
</td>
<td class="cellalignment1378" headers="r2c1-t15 r1c2-t15">
<p>11.0</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r3c1-t15" headers="r1c1-t15">
<p><code>GLOBAL_NAMES</code></p>
</td>
<td class="cellalignment1378" headers="r3c1-t15 r1c2-t15">
<p><code>TRUE</code></p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r4c1-t15" headers="r1c1-t15">
<p><code>JAVA_POOL_SIZE</code></p>
</td>
<td class="cellalignment1378" headers="r4c1-t15 r1c2-t15">
<p>50000000</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r5c1-t15" headers="r1c1-t15">
<p><code>OPEN_LINKS</code></p>
</td>
<td class="cellalignment1378" headers="r5c1-t15 r1c2-t15">
<p>4, or the number of Distributed HotLog change sets planned, whichever is greater.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r6c1-t15" headers="r1c1-t15">
<p><code>PARALLEL_MAX_SERVERS</code></p>
</td>
<td class="cellalignment1378" headers="r6c1-t15 r1c2-t15">
<p>(current value) + (2 * (the number of change sets planned))</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r7c1-t15" headers="r1c1-t15">
<p><code>PROCESSES</code></p>
</td>
<td class="cellalignment1378" headers="r7c1-t15 r1c2-t15">
<p>(current value) + (3 * (the number of change sets planned))</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r8c1-t15" headers="r1c1-t15">
<p><code>SESSIONS</code></p>
</td>
<td class="cellalignment1378" headers="r8c1-t15 r1c2-t15">
<p>(current value) + (the number of change sets planned)</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r9c1-t15" headers="r1c1-t15">
<p><code>STREAMS_POOL_SIZE</code></p>
</td>
<td class="cellalignment1378" headers="r9c1-t15 r1c2-t15">
<ul>
<li>
<p>If the current value of the <code>STREAMS_POOL_SIZE</code> parameter is 50 MB or greater, then set this parameter to:</p>
<p>(current value) + ((the number of change sets planned) * (11 MB))</p>
</li>
<li>
<p>If the current value of the <code>STREAMS_POOL_SIZE</code> parameter is less than 50 MB, then set the value of this parameter to:</p>
<p>50 MB + ((the number of change sets planned) * (11 MB))</p>
</li>
</ul>
<p>See <a class="olink STRMS" href="../e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information on how the <code>STREAMS_POOL_SIZE</code> parameter is applied when changed dynamically.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect3" -->
<a id="CIHDHJIF"></a><a id="DWHSG8433"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Initialization Parameters for Asynchronous AutoLog Publishing</h4>
<p><a href="#CHDJJIBD">Table 17-9</a> lists the database initialization parameters and their recommended settings for the <a id="sthref607"></a>asynchronous AutoLog publishing source database and <a href="#CHDHDFHI">Table 17-10</a> lists the database initialization parameters and their recommended settings for the <a id="sthref608"></a>asynchronous AutoLog <a id="sthref609"></a>publishing staging database.</p>
<div class="tblformalwide">
<p class="titleintable"><a id="DWHSG8434"></a><a id="sthref610"></a><a id="CHDJJIBD"></a>Table 17-9 Source Database Initialization Parameters for Asynchronous AutoLog Publishing</p>
<table class="cellalignment1383" title="Source Database Initialization Parameters for Asynchronous AutoLog Publishing" summary="This table lists the source database initialization parameters and their recommended settings for Asychronous AutoLog publishing." dir="ltr">
<thead>
<tr class="cellalignment1372">
<th class="cellalignment1382" id="r1c1-t16">Parameter</th>
<th class="cellalignment1382" id="r1c2-t16">Recommended Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r2c1-t16" headers="r1c1-t16">
<p><code>COMPATIBLE</code></p>
</td>
<td class="cellalignment1378" headers="r2c1-t16 r1c2-t16">
<p>11.0</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r3c1-t16" headers="r1c1-t16">
<p><code>LOG_ARCHIVE_DEST_1</code><a id="CHDGEJDB" href="#CHDGEJDB" onclick='footdisplay(1,"The integer value in this parameter can be any value between 1 and 10. In this manual, the values 1 and 2 are used. For each \u003ccode\u003eLOG_ARCHIVE_DEST_\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e parameter, there must be a corresponding \u003ccode\u003eLOG_ARCHIVE_DEST_STATE_\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e parameter that specifies the same value for \u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment1378" headers="r3c1-t16 r1c2-t16">
<p>The directory specification on the source database where its own archived redo log files are to be kept.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r4c1-t16" headers="r1c1-t16">
<p><code>LOG_ARCHIVE_DEST_2</code><a id="sthref611" href="#sthref611" onclick='footdisplay(1,"The integer value in this parameter can be any value between 1 and 10. In this manual, the values 1 and 2 are used. For each \u003ccode\u003eLOG_ARCHIVE_DEST_\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e parameter, there must be a corresponding \u003ccode\u003eLOG_ARCHIVE_DEST_STATE_\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e parameter that specifies the same value for \u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
<td class="cellalignment1378" headers="r4c1-t16 r1c2-t16">
<p>This parameter must include the <code>SERVICE</code>, <code>ARCH</code> or <code>LGWR ASYNC</code>, <code>OPTIONAL</code>, <code>NOREGISTER</code>, and <code>REOPEN</code> attributes so that redo transport services are configured to copy the redo log files from the source database to the staging database. This parameter must also include either the <code>VALID_FOR</code> or the <code>TEMPLATE</code> attribute depending on the AutoLog option. These attributes are set as follows:</p>
<ul>
<li>
<p><code>SERVICE</code> specifies the network name of the staging database.</p>
</li>
<li>
<p><code>ARCH</code> or <code>LGWR ASYNC</code></p>
<p>To use the AutoLog online option, specify <code>LGWR</code> <code>ASYNC</code>. <code>LGWR</code> <code>ASYNC</code> specifies that the log writer process (<code>LGWR</code>) copy redo data asynchronously to the staging database as the redo is generated on the source database. The copied redo data becomes available to Change Data Capture after its source database transaction commits.To use the AutoLog archive option, specify either <code>ARCH</code> or <code>LGWR</code> <code>ASYNC</code>. <code>ARCH</code> specifies that the archiver process (<code>ARCn</code>) copy the redo log files to the staging database after a source database log switch occurs. <code>LGWR</code> <code>ASYNC</code> specifies that the log writer process (<code>LGWR</code>) copy redo data asynchronously to the staging database as the redo is generated on the source database. For both <code>ARCH</code> and <code>LGWR</code> <code>ASYNC</code>, the copied redo data becomes available to Change Data Capture only after a source database log switch occurs when using the AutoLog archive option.</p>
</li>
<li>
<p><code>OPTIONAL</code> specifies that the copying of a redo log file to the staging database need not succeed before the corresponding online redo log at the source database can be overwritten. This is needed to avoid stalling operations on the source database due to a transmission failure to the staging database. The original redo log file remains available to the source database in either archived or backed up form, if it is needed.</p>
</li>
<li>
<p><code>NOREGISTER</code> specifies that the staging database location is not recorded in the staging database control file.</p>
</li>
<li>
<p><code>REOPEN</code> specifies the minimum number of seconds the log writer process (<code>LGWR</code>) or the archive process (<code>ARCn</code>) should wait before trying to access the staging database if a previous attempt to access this location failed.</p>
</li>
<li>
<p><code>VALID_FOR</code> When using the AutoLog online option, set <code>VALID_FOR</code> either to (<code>ONLINE_LOGFILE</code>, <code>PRIMARY_ROLE</code>) or (<code>ONLINE_LOGFILE</code>, <code>ALL_ROLES</code>) to enable redo data to be copied from the online redo log on the source database to the standby redo log at the staging database.</p>
</li>
<li>
<p><code>TEMPLATE</code> When using the AutoLog archive option, specify <code>TEMPLATE</code> to define a directory specification and a format template for the file name used for the archived redo log files that are copied to the staging database.<a id="CHDGCDAF" href="#CHDGCDAF" onclick='footdisplay(2,"In the format template, %t corresponds to the thread number, %s corresponds to the sequence number, and %r corresponds to the resetlogs ID. Together, these ensure that unique names are constructed for the copied redo log files. Each of these items must be present, but their ordering and format are flexible.")'><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r5c1-t16" headers="r1c1-t16">
<p><code>LOG_ARCHIVE_DEST_STATE_1</code><a id="sthref612" href="#sthref612" onclick='footdisplay(1,"The integer value in this parameter can be any value between 1 and 10. In this manual, the values 1 and 2 are used. For each \u003ccode\u003eLOG_ARCHIVE_DEST_\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e parameter, there must be a corresponding \u003ccode\u003eLOG_ARCHIVE_DEST_STATE_\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e parameter that specifies the same value for \u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
<td class="cellalignment1378" headers="r5c1-t16 r1c2-t16">
<p><code>ENABLE</code></p>
<p>Indicates that redo transport services can transmit archived redo log files to this destination.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r6c1-t16" headers="r1c1-t16">
<p><code>LOG_ARCHIVE_DEST_STATE_2</code><a id="sthref613" href="#sthref613" onclick='footdisplay(1,"The integer value in this parameter can be any value between 1 and 10. In this manual, the values 1 and 2 are used. For each \u003ccode\u003eLOG_ARCHIVE_DEST_\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e parameter, there must be a corresponding \u003ccode\u003eLOG_ARCHIVE_DEST_STATE_\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e parameter that specifies the same value for \u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
<td class="cellalignment1378" headers="r6c1-t16 r1c2-t16">
<p><code>ENABLE</code></p>
<p>Indicates that redo transport services can transmit redo log files to this destination.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r7c1-t16" headers="r1c1-t16">
<p><code>LOG_ARCHIVE_FORMAT</code><a id="sthref614" href="#sthref614" onclick='footdisplay(2,"In the format template, %t corresponds to the thread number, %s corresponds to the sequence number, and %r corresponds to the resetlogs ID. Together, these ensure that unique names are constructed for the copied redo log files. Each of these items must be present, but their ordering and format are flexible.")'><sup class="footnotenumber">Footref&nbsp;2</sup></a></p>
</td>
<td class="cellalignment1378" headers="r7c1-t16 r1c2-t16">
<p><code>"arch_%s_%t_%r.dbf"</code></p>
<p>Specifies a format template for the default file name when archiving redo log files.<a id="sthref615" href="#sthref615" onclick='footdisplay(2,"In the format template, %t corresponds to the thread number, %s corresponds to the sequence number, and %r corresponds to the resetlogs ID. Together, these ensure that unique names are constructed for the copied redo log files. Each of these items must be present, but their ordering and format are flexible.")'><sup class="footnotenumber">Footref&nbsp;2</sup></a> The string value (<code>arch</code>) and the file name extension (.<code>dbf</code>) do not have to be exactly as specified here.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r8c1-t16" headers="r1c1-t16">
<p><code>REMOTE_ARCHIVE_ENABLE</code></p>
</td>
<td class="cellalignment1378" headers="r8c1-t16 r1c2-t16">
<p><code>TRUE</code></p>
<p>Indicates that this source database can send redo log files to remote destinations.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>The integer value in this parameter can be any value between 1 and 10. In this manual, the values 1 and 2 are used. For each <code>LOG_ARCHIVE_DEST_</code><code><span class="codeinlineitalic">n</span></code> parameter, there must be a corresponding <code>LOG_ARCHIVE_DEST_STATE_</code><code><span class="codeinlineitalic">n</span></code> parameter that specifies the same value for <code><span class="codeinlineitalic">n</span></code>.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>In the format template, %t corresponds to the thread number, %s corresponds to the sequence number, and %r corresponds to the resetlogs ID. Together, these ensure that unique names are constructed for the copied redo log files. Each of these items must be present, but their ordering and format are flexible.</p>
<div class="tblformalwide">
<p class="titleintable"><a id="DWHSG8435"></a><a id="sthref616"></a><a id="CHDHDFHI"></a>Table 17-10 Staging Database Initialization Parameters for Asynchronous AutoLog Publishing</p>
<table class="cellalignment1383" title="Staging Database Initialization Parameters for Asynchronous AutoLog Publishing " summary="This table lists the recommended settings for the Asychronous HotLog publishing staging database." dir="ltr">
<thead>
<tr class="cellalignment1372">
<th class="cellalignment1382" id="r1c1-t17">Parameter</th>
<th class="cellalignment1382" id="r1c2-t17">Recommended Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r2c1-t17" headers="r1c1-t17">
<p><code>COMPATIBLE</code></p>
</td>
<td class="cellalignment1378" headers="r2c1-t17 r1c2-t17">
<p>11.2.0</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r3c1-t17" headers="r1c1-t17">
<p><code>GLOBAL_NAMES</code></p>
</td>
<td class="cellalignment1378" headers="r3c1-t17 r1c2-t17">
<p><code>TRUE</code></p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r4c1-t17" headers="r1c1-t17">
<p><code>JAVA_POOL_SIZE</code></p>
</td>
<td class="cellalignment1378" headers="r4c1-t17 r1c2-t17">
<p>50000000</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r5c1-t17" headers="r1c1-t17">
<p><code>LOG_ARCHIVE_DEST_1</code><a id="CIHDHICJ" href="#CIHDHICJ" onclick='footdisplay(1,"The integer value in this parameter can be any value between 1 and 10. In this manual, the values 1 and 2 are used. For each \u003ccode\u003eLOG_ARCHIVE_DEST_\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e parameter, there must be a corresponding \u003ccode\u003eLOG_ARCHIVE_DEST_STATE_\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e parameter that specifies the same value for \u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment1378" headers="r5c1-t17 r1c2-t17">
<p>The directory specification on the staging database where its own archived redo log files are to be kept. If the staging database has an AutoLog online change source, the following attributes should be specified:</p>
<ul>
<li>
<p><code>LOCATION</code> specifies a unique directory path name for the staging database's own archived redo log files.</p>
</li>
<li>
<p>Set <code>VALID_FOR</code> either to (<code>ONLINE_LOGFILE</code>, <code>PRIMARY_ROLE</code>) or (<code>ONLINE_LOGFILE</code>, <code>ALL_ROLES</code>) to enable the online redo log file to be archived locally.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r6c1-t17" headers="r1c1-t17">
<p><code>LOG_ARCHIVE_DEST_2</code><a id="sthref617" href="#sthref617" onclick='footdisplay(1,"The integer value in this parameter can be any value between 1 and 10. In this manual, the values 1 and 2 are used. For each \u003ccode\u003eLOG_ARCHIVE_DEST_\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e parameter, there must be a corresponding \u003ccode\u003eLOG_ARCHIVE_DEST_STATE_\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e parameter that specifies the same value for \u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
<td class="cellalignment1378" headers="r6c1-t17 r1c2-t17">
<p>If the staging database has an AutoLog online change source, this specifies the standby redo log files on the staging database that receive change data from the source database. It is very important to specify a unique location for these standby redo log files so that they do not overwrite the staging database's own archived log files.</p>
<ul>
<li>
<p><code>LOCATION</code> specifies a unique directory path name for the staging database's standby redo log files.</p>
</li>
<li>
<p><code>MANDATORY</code> specifies that a standby redo log file must be successfully archived before it can be overwritten.</p>
</li>
<li>
<p>Set <code>VALID_FOR</code> either to (<code>STANDBY_LOGFILE</code>, <code>PRIMARY_ROLE</code>) or (<code>STANDBY_LOGFILE</code>, <code>ALL_ROLES</code>) to enable the staging database to receive change data from the source database and write it to the staging database standby log files.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r7c1-t17" headers="r1c1-t17">
<p><code>LOG_ARCHIVE_DEST_STATE_1</code><a id="sthref618" href="#sthref618" onclick='footdisplay(1,"The integer value in this parameter can be any value between 1 and 10. In this manual, the values 1 and 2 are used. For each \u003ccode\u003eLOG_ARCHIVE_DEST_\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e parameter, there must be a corresponding \u003ccode\u003eLOG_ARCHIVE_DEST_STATE_\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e parameter that specifies the same value for \u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
<td class="cellalignment1378" headers="r7c1-t17 r1c2-t17">
<p><code>ENABLE</code></p>
<p>Indicates that redo transport services can transmit archived redo log files to this destination.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r8c1-t17" headers="r1c1-t17">
<p><code>LOG_ARCHIVE_DEST_STATE_2</code><a id="sthref619" href="#sthref619" onclick='footdisplay(1,"The integer value in this parameter can be any value between 1 and 10. In this manual, the values 1 and 2 are used. For each \u003ccode\u003eLOG_ARCHIVE_DEST_\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e parameter, there must be a corresponding \u003ccode\u003eLOG_ARCHIVE_DEST_STATE_\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e parameter that specifies the same value for \u003ccode\u003e\u003cspan class=\"codeinlineitalic\"\u003en\u003c/span\u003e\u003c/code\u003e.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
<td class="cellalignment1378" headers="r8c1-t17 r1c2-t17">
<p><code>ENABLE</code></p>
<p>Indicates that redo transport services can transmit redo log files to this destination.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r9c1-t17" headers="r1c1-t17">
<p><code>LOG_ARCHIVE_FORMAT</code><a id="sthref620" href="#sthref620" onclick='footdisplay(2,"Specifies a format template for the default file name when archiving redo log files. The string value (&lt;code&gt;arch&lt;/code&gt;) and the file name extension (&lt;code&gt;.dbf&lt;/code&gt;) do not have to be exactly as specified here.")'><sup class="footnotenumber">Footref&nbsp;2</sup></a></p>
</td>
<td class="cellalignment1378" headers="r9c1-t17 r1c2-t17">
<p><code>"arch_%s_%t_%r.dbf"</code></p>
<p>Specifies a format template for the default file name when archiving redo log files<a id="CIHIFHGH" href="#CIHIFHGH" onclick='footdisplay(2,"In the format template, %t corresponds to the thread number, %s corresponds to the sequence number, and %r corresponds to the resetlogs ID. Together, these ensure that unique names are constructed for the copied redo log files. Each of these items must be present, but their ordering and format are flexible.")'><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a>. The string value (<code>arch</code>) and the file name extension (<code>.dbf</code>) do not have to be exactly as specified here.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r10c1-t17" headers="r1c1-t17">
<p><code>JOB_QUEUE_PROCESSES</code></p>
</td>
<td class="cellalignment1378" headers="r10c1-t17 r1c2-t17">
<p>2</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r11c1-t17" headers="r1c1-t17">
<p><code>PARALLEL_MAX_SERVERS</code></p>
</td>
<td class="cellalignment1378" headers="r11c1-t17 r1c2-t17">
<p>(current value) + (5 * (the number of change sets planned))</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r12c1-t17" headers="r1c1-t17">
<p><code>PROCESSES</code></p>
</td>
<td class="cellalignment1378" headers="r12c1-t17 r1c2-t17">
<p>(current value) + (7 * (the number of change sets planned))</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r13c1-t17" headers="r1c1-t17">
<p><code>REMOTE_ARCHIVE_ENABLE</code></p>
</td>
<td class="cellalignment1378" headers="r13c1-t17 r1c2-t17">
<p><code>TRUE</code></p>
<p>Indicates that this staging database can receive remotely archived redo log files.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r14c1-t17" headers="r1c1-t17">
<p><code>SESSIONS</code></p>
</td>
<td class="cellalignment1378" headers="r14c1-t17 r1c2-t17">
<p>(current value)+ (2 * (the number of change sets planned))</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r15c1-t17" headers="r1c1-t17">
<p><code>STREAMS_POOL_SIZE</code></p>
</td>
<td class="cellalignment1378" headers="r15c1-t17 r1c2-t17">
<ul>
<li>
<p>If the current value of the <code>STREAMS_POOL_SIZE</code> parameter is 50 MB or greater, then set this parameter to:</p>
<p>(current value) + ((the number of change sets planned) * (21 MB))</p>
</li>
<li>
<p>If the current value of the <code>STREAMS_POOL_SIZE</code> parameter is less than 50 MB, then set the value of this parameter to:</p>
<p>50 MB + ((the number of change sets planned) * (21 MB))</p>
</li>
</ul>
<p>See <a class="olink STRMS" href="../e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information on how the <code>STREAMS_POOL_SIZE</code> parameter is applied when changed dynamically.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r16c1-t17" headers="r1c1-t17">
<p><code>UNDO_RETENTION</code></p>
</td>
<td class="cellalignment1378" headers="r16c1-t17 r1c2-t17">
<p>3600</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>The integer value in this parameter can be any value between 1 and 10. In this manual, the values 1 and 2 are used. For each <code>LOG_ARCHIVE_DEST_</code><code><span class="codeinlineitalic">n</span></code> parameter, there must be a corresponding <code>LOG_ARCHIVE_DEST_STATE_</code><code><span class="codeinlineitalic">n</span></code> parameter that specifies the same value for <code><span class="codeinlineitalic">n</span></code>.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>In the format template, %t corresponds to the thread number, %s corresponds to the sequence number, and %r corresponds to the resetlogs ID. Together, these ensure that unique names are constructed for the copied redo log files. Each of these items must be present, but their ordering and format are flexible.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1027948"></a><a id="DWHSG8436"></a>
<div class="sect2">
<h3 class="sect2">Adjusting Initialization Parameter Values When Oracle Streams Values Change</h3>
<p><a id="sthref621"></a>Asynchronous Change Data Capture uses an Oracle Streams configuration for each change set. This Streams configuration consists of a <a id="sthref622"></a><a id="sthref623"></a><a id="sthref624"></a><a id="sthref625"></a>Streams capture process and a Streams apply process, with an accompanying queue and queue table. Each Streams configuration uses additional processes, parallel execution servers, and memory. For details about the Streams architecture, see <a class="olink STRMS" href="../e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a>.</p>
<p>If anything in your configuration changes, initialization parameters may need to be adjusted. See <a href="#CHDHDFHI">Table 17-10, "Staging Database Initialization Parameters for Asynchronous AutoLog Publishing"</a> for more information.</p>
</div>
<!-- class="sect2" -->
<a id="DWHSG8437"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref626"></a>
<h3 class="sect2">Tracking Changes to the CDC Environment</h3>
<p>You can track when partition maintenance operations, direct-path loads, and DDL operations occur in a change table. To do this, set the <code>ddl_markers</code> flag in the <code>DBMS_CDC_PUBLISH.CREATE_CHANGE_TABLE</code> procedure.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDJIBFH"></a><a id="DWHSG8438"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Publishing Change Data</h2>
<p>The following sections provide step-by-step instructions on performing the various types of publishing:</p>
<ul>
<li>
<p><a href="#i1025616">Performing Synchronous Publishing</a></p>
</li>
<li>
<p><a href="#i1025631">Performing Asynchronous HotLog Publishing</a></p>
</li>
<li>
<p><a href="#CHDEHIIE">Performing Asynchronous Distributed HotLog Publishing</a></p>
</li>
<li>
<p><a href="#CIHHEDIG">Performing Asynchronous AutoLog Publishing</a></p>
</li>
</ul>
<a id="i1025616"></a><a id="DWHSG8439"></a>
<div class="sect2">
<h3 class="sect2">Performing Synchronous Publishing</h3>
<p><a id="sthref627"></a>For synchronous Change Data Capture, the publisher must use the predefined change source, <code>SYNC_SOURCE</code>. The publisher can define new change sets or can use the predefined change set, <code>SYNC_SET</code>. <a id="sthref628"></a>The publisher must not create change tables on source tables owned by <code>SYS</code> or <code>SYSTEM</code> because triggers do not fire and therefore changes are not captured.</p>
<p>This example shows how to create a change set. If the publisher wants to use the predefined <code>SYNC_SET</code>, he or she should skip Step 3 and specify <code>SYNC_SET</code> as the change set name in the remaining steps.</p>
<p>This example assumes that the publisher and the source database DBA are two different people.</p>
<p>Note that for synchronous Change Data Capture, the source database and the staging database are the same.</p>
<dl>
<dd><a id="sthref629"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Source Database DBA: Set the JAVA_POOL_SIZE parameter.</dt>
<dd>
<p>The source database DBA sets the database initialization parameters, as described in <a href="#CHDFAGAG">"Setting Initialization Parameters for Change Data Capture Publishing"</a>.</p>
<pre>
java_pool_size = 50000000
</pre></dd>
<dd><a id="sthref630"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Source Database DBA: Create and grant privileges to the publisher.</dt>
<dd>
<p>The source database DBA creates a user (for example, <code>cdcpub</code>), to serve as the Change Data Capture publisher and grants the necessary privileges to the publisher so that he or she can perform the operations needed to create Change Data Capture change sets and change tables on the source database, as described in <a href="#CHDBHBAC">"Creating a User to Serve As a Publisher"</a>. This example assumes that the tablespace <code>ts_cdcpub</code> has already been created.</p>
<pre>
CREATE USER cdcpub IDENTIFIED EXTERNALLY DEFAULT TABLESPACE ts_cdcpub
QUOTA UNLIMITED ON SYSTEM
QUOTA UNLIMITED ON SYSAUX;
GRANT CREATE SESSION TO cdcpub;
GRANT CREATE TABLE TO cdcpub;
GRANT CREATE TABLESPACE TO cdcpub;
GRANT CREATE JOB TO cdcpub;
GRANT UNLIMITED TABLESPACE TO cdcpub;
GRANT SELECT_CATALOG_ROLE TO cdcpub;
GRANT EXECUTE_CATALOG_ROLE TO cdcpub;
GRANT ALL ON sh.sales TO cdcpub;
GRANT ALL ON sh.products TO cdcpub;
GRANT EXECUTE ON DBMS_CDC_PUBLISH TO cdcpub;
</pre></dd>
<dd><a id="sthref631"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Staging Database Publisher: Create a change set.</dt>
<dd>
<p>The publisher uses the <code>DBMS_CDC_PUBLISH.CREATE_CHANGE_SET</code> procedure on the staging database to create change sets.</p>
<p>The following example shows how to create a change set called <code>CHICAGO_DAILY</code>:</p>
<pre>
BEGIN
    DBMS_CDC_PUBLISH.CREATE_CHANGE_SET( 
    change_set_name    =&gt; 'CHICAGO_DAILY', 
    description        =&gt; 'Change set for sales history info', 
    change_source_name =&gt; 'SYNC_SOURCE');
END;
/
</pre>
<p>The change set captures changes from the predefined change source <code>SYNC_SOURCE</code>. Because <code>begin_date</code> and <code>end_date</code> parameters cannot be specified for synchronous change sets, capture begins at the earliest available change data and continues capturing change data indefinitely.</p>
</dd>
<dd><a id="CHDFBIIH"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Staging Database Publisher: Create a change table.</dt>
<dd>
<p>The publisher uses the <code>DBMS_CDC_PUBLISH.CREATE_CHANGE_TABLE</code> procedure to create change tables.</p>
<p>The publisher can set the <code>options_string</code> field of the <code>DBMS_CDC_PUBLISH.CREATE_CHANGE_TABLE</code> procedure to have more control over the physical properties and tablespace properties of the change table. The <code>options_string</code> field can contain any option, except partitioning, that is available in the <code>CREATE TABLE</code> statement.</p>
<p>The following example creates a change table that captures changes that occur on a source table. The example uses the sample schema table <code>sh.products</code> as the source table. It assumes that the publisher has already created the <code>TS_CHICAGO_DAILY</code> tablespace.</p>
<pre>
BEGIN
   DBMS_CDC_PUBLISH.CREATE_CHANGE_TABLE(
</pre>
<pre>
   owner             =&gt; 'cdcpub',
   change_table_name =&gt; 'products_ct', 
   change_set_name   =&gt; 'CHICAGO_DAILY',
   source_schema     =&gt; 'SH',
   source_table      =&gt; 'PRODUCTS',
   column_type_list  =&gt; 'PROD_ID NUMBER(6), 
                         PROD_NAME VARCHAR2(50),
                         PROD_LIST_PRICE NUMBER(8,2)', 
   capture_values    =&gt; 'both',
   rs_id             =&gt; 'y', 
   row_id            =&gt; 'n',
   user_id           =&gt; 'n',
   timestamp         =&gt; 'n',
   object_id         =&gt; 'n',
   source_colmap     =&gt; 'y',
   target_colmap     =&gt; 'y',
   options_string    =&gt; 'TABLESPACE TS_CHICAGO_DAILY');
END;
 /
</pre>
<pre>
</pre>
<p>This statement creates a change table named <code>products_ct</code> within the change set <code>CHICAGO_DAILY</code>. The <code>column_type_list</code> parameter identifies the columns captured by the change table. The <code>source_schema</code> and <code>source_table</code> parameters identify the schema and source table that reside in the source database.</p>
<p>The <code>capture_values</code> setting in the example indicates that for update operations, the change data contains two separate rows for each row that changed: one row contains the row values before the update occurred, and the other row contains the row values after the update occurred.</p>
<p>See <a href="#i1027418">"Managing Change Tables"</a> for more information.</p>
</dd>
<dd><a id="sthref632"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Staging Database Publisher: Grant access to subscribers.</dt>
<dd>
<p>The publisher controls subscriber access to change data by granting and revoking the <code>SELECT</code> privilege on change tables for users and roles. The publisher grants access to specific change tables. Without this step, a subscriber cannot access any change data. This example assumes that user <code>subscriber1</code> already exists.</p>
<pre>
GRANT SELECT ON cdcpub.products_ct TO subscriber1;
</pre>
<p>The Change Data Capture synchronous system is now ready for <code>subscriber1</code> to create subscriptions.</p>
</dd>
</dl>
</div>
<!-- class="sect2" -->
<a id="i1025631"></a><a id="DWHSG8440"></a>
<div class="sect2">
<h3 class="sect2">Performing Asynchronous HotLog Publishing</h3>
<p><a id="sthref633"></a>Change Data Capture uses Oracle Streams local capture to perform asynchronous HotLog publishing. See <a class="olink STRMS" href="../e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information on Streams local capture.</p>
<p>For HotLog Change Data Capture, the publisher must use the predefined change source, <code>HOTLOG_SOURCE</code>, and must create the change sets and the change tables that contain the changes. The staging database is always the source database. This example assumes that the publisher and the source database DBA are two different people.</p>
<p>Note that for asynchronous HotLog Change Data Capture, the source database and the staging database are the same.</p>
<p>The following steps set up redo logging, Oracle Streams, and Change Data Capture for asynchronous HotLog publishing:</p>
<dl>
<dd><a id="sthref634"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Source Database DBA: Set the database initialization parameters.</dt>
<dd>
<p>The source database DBA sets the database initialization parameters, as described in <a href="#CHDFAGAG">"Setting Initialization Parameters for Change Data Capture Publishing"</a>. In this example, one change set is defined and the current value of the <code>STREAMS_POOL_SIZE</code> parameter is 50 MB.</p>
<pre>
compatible = 11.0
java_pool_size = 50000000
job_queue_processes = 2
</pre>
<pre>
parallel_max_servers = <span class="italic">&lt;current value&gt;</span> + 5
processes = <span class="italic">&lt;current value&gt;</span> + 7
sessions = &lt;current value&gt; + 2
streams_pool_size = &lt;current value&gt; + 21 MB
undo_retention = 3600
</pre></dd>
<dd><a id="sthref635"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Source Database DBA: Alter the source database.</dt>
<dd>
<p>The source database DBA performs the following three tasks. The second is required. The first and third are optional, but recommended. It is assumed that the database is currently running in <code>ARCHIVELOG</code> mode.</p>
</dd>
</dl>
<ol>
<li>
<p>Place the database into <code>FORCE</code> <code>LOGGING</code> logging mode to protect against unlogged direct write operations in the source database that cannot be captured by asynchronous Change Data Capture:</p>
<pre>
ALTER DATABASE FORCE LOGGING;
</pre>
<p>Note that logging can also be enforced at the tablespace or at the table level.</p>
</li>
<li>
<p>Enable supplemental logging. Supplemental logging places additional column data into a redo log file whenever an <code>UPDATE</code> operation is performed. Minimally, database-level minimal supplemental logging must be enabled for any Change Data Capture source database:</p>
<pre>
ALTER DATABASE ADD SUPPLEMENTAL LOG DATA;
</pre></li>
<li>
<p>Create an unconditional log group on all columns to be captured in the source table. Source table columns that are unchanged and are not in an unconditional log group, will be null in the change table, instead of reflecting their actual source table values. (This example captures rows in the <code>sh.products</code> table only. The source database DBA would repeat this step for each source table for which change tables will be created.)</p>
<pre>
ALTER TABLE sh.products
ADD SUPPLEMENTAL LOG GROUP log_group_products
  (PROD_ID, PROD_NAME, PROD_LIST_PRICE) ALWAYS;
</pre>
<p>If you intend to capture all the column values in a row whenever a column in that row is updated, you can use the following statement instead of listing each column one-by-one in the <code>ALTER</code> <code>TABLE</code> statement. However, do not use this form of the <code>ALTER</code> <code>TABLE</code> statement if all columns are not needed. Logging all columns incurs more overhead than logging selected columns.</p>
<pre>
ALTER TABLE sh.products ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
</pre>
<p>See <a class="olink ADMIN11332" href="../../server.112/e25494/archredo.htm#ADMIN11332"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about running a database in <code>ARCHIVELOG</code> mode and for information on <code>FORCE</code> <code>LOGGING</code> mode; see <a href="#i1027101">"Asynchronous Change Data Capture and Supplemental Logging"</a> and <a class="olink SUTIL" href="../e22490/toc.htm"><span class="italic">Oracle Database Utilities</span></a> for more information about supplemental logging.</p>
</li>
</ol>
<dl>
<dd><a id="sthref636"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Source Database DBA: Create and grant privileges to the publisher.</dt>
<dd>
<p>The source database DBA creates a user, (for example, <code>cdcpub</code>), to serve as the Change Data Capture publisher and grants the necessary privileges to the publisher so that he or she can perform the underlying Oracle Streams operations needed to create Change Data Capture change sets and change tables on the source database, as described in <a href="#CHDBHBAC">"Creating a User to Serve As a Publisher"</a>. This example assumes that the <code>ts_cdcpub</code> tablespace has already been created.</p>
<pre>
CREATE USER cdcpub IDENTIFIED EXTERNALLY DEFAULT TABLESPACE ts_cdcpub
QUOTA UNLIMITED ON SYSTEM 
QUOTA UNLIMITED ON SYSAUX;
GRANT CREATE SESSION TO cdcpub;
GRANT CREATE TABLE TO cdcpub;
GRANT CREATE TABLESPACE TO cdcpub;
GRANT UNLIMITED TABLESPACE TO cdcpub;
GRANT SELECT_CATALOG_ROLE TO cdcpub;
GRANT EXECUTE_CATALOG_ROLE TO cdcpub;
GRANT CREATE SEQUENCE TO cdcpub;
GRANT DBA TO cdcpub;
GRANT EXECUTE on DBMS_CDC_PUBLISH TO cdcpub;

EXECUTE DBMS_STREAMS_AUTH.GRANT_ADMIN_PRIVILEGE(GRANTEE =&gt; 'cdcpub');
</pre>
<p>Note that for HotLog Change Data Capture, the source database and the staging database are the same database.</p>
</dd>
<dd><a id="sthref637"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Source Database DBA: Prepare the source tables.</dt>
<dd>
<p>The source database DBA must prepare the source tables on the source database for asynchronous Change Data Capture by instantiating each source table. Instantiating each source table causes the underlying Oracle Streams environment to record the information it needs to capture each source table's changes. The source table structure and the column datatypes must be supported by Change Data Capture. See <a href="#i1027969">"Datatypes and Table Structures Supported for Asynchronous Change Data Capture"</a> for more information.</p>
<pre>
BEGIN
DBMS_CAPTURE_ADM.PREPARE_TABLE_INSTANTIATION(TABLE_NAME =&gt; 'sh.products');
END;
/
</pre></dd>
<dd><a id="sthref638"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Staging Database Publisher: Create change sets.</dt>
<dd>
<p>The publisher uses the <code>DBMS_CDC_PUBLISH.CREATE_CHANGE_SET</code> procedure on the staging database to create change sets. Note that when Change Data Capture creates a change set, its associated Oracle Streams capture and apply processes are also created (but not started).</p>
<p>The following example creates a change set called <code>CHICAGO_DAILY</code> that captures changes starting today, and stops capturing change data 5 days from now.</p>
<pre>
BEGIN
       DBMS_CDC_PUBLISH.CREATE_CHANGE_SET(
       change_set_name =&gt; 'CHICAGO_DAILY',
       description =&gt; 'Change set for product info',
       change_source_name =&gt; 'HOTLOG_SOURCE',
       stop_on_ddl =&gt; 'y',
       begin_date =&gt; sysdate,
       end_date =&gt; sysdate+5);
END;
/
</pre>
<p>The change set captures changes from the predefined <code>HOTLOG_SOURCE</code> change source.</p>
</dd>
<dd><a id="sthref639"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Staging Database Publisher: Create the change tables that will contain the changes to the source tables.</dt>
<dd>
<p>The publisher uses the <code>DBMS_CDC_PUBLISH.CREATE_CHANGE_TABLE</code> procedure on the staging database to create change tables.</p>
<p>The publisher creates one or more change tables for each source table to be published, specifies which columns should be included, and specifies the combination of before and after images of the change data to capture.</p>
<p>The following example creates a change table on the staging database that captures changes made to a source table on the source database. The example uses the sample table <code>sh.products</code> as the source table.</p>
<pre>
BEGIN
   DBMS_CDC_PUBLISH.CREATE_CHANGE_TABLE(
   owner              =&gt; 'cdcpub',
   change_table_name  =&gt; 'products_ct', 
   change_set_name    =&gt; 'CHICAGO_DAILY',
   source_schema      =&gt; 'SH',
   source_table       =&gt; 'PRODUCTS',
   column_type_list   =&gt; 'PROD_ID NUMBER(6), PROD_NAME VARCHAR2(50),
      PROD_LIST_PRICE NUMBER(8,2)',
   capture_values     =&gt; 'both',
   rs_id              =&gt; 'y',
   row_id             =&gt; 'n',
   user_id            =&gt; 'n',
   timestamp          =&gt; 'n',
   object_id          =&gt; 'n',
   source_colmap      =&gt; 'n',
   target_colmap      =&gt; 'y',
   options_string     =&gt; 'TABLESPACE TS_CHICAGO_DAILY');
END;
/
</pre>
<p>This statement creates a change table named <code>products_ct</code> within change set <code>CHICAGO_DAILY</code>. The <code>column_type_list</code> parameter identifies the columns to be captured by the change table. The <code>source_schema</code> and <code>source_table</code> parameters identify the schema and source table that reside on the source database.</p>
<p>The <code>capture_values</code> setting in this statement indicates that for update operations, the change data will contain two separate rows for each row that changed: one row will contain the row values before the update occurred and the other row will contain the row values after the update occurred.</p>
<p>The <code>options_string</code> parameter in this statement specifies a tablespace for the change table. (This example assumes that the publisher previously created the <code>TS_CHICAGO_DAILY</code> tablespace.)</p>
<p>See <a href="#i1027418">"Managing Change Tables"</a> for more information.</p>
</dd>
<dd><a id="sthref640"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Staging Database Publisher: Enable the change set.</dt>
<dd>
<p>Because asynchronous change sets are always disabled when they are created, the publisher must alter the change set to enable it. The Oracle Streams capture and apply processes are started when the change set is enabled.</p>
<pre>
BEGIN
   DBMS_CDC_PUBLISH.ALTER_CHANGE_SET(
      change_set_name =&gt; 'CHICAGO_DAILY',
      enable_capture =&gt; 'y');
END;
/
</pre></dd>
<dd><a id="sthref641"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Staging Database Publisher: Grant access to subscribers.</dt>
<dd>
<p>The publisher controls subscriber access to change data by granting and revoking the <code>SELECT</code> privilege on change tables for users and roles. The publisher grants access to specific change tables. Without this step, a subscriber cannot access change data. This example assumes that user <code>subscriber1</code> already exists.</p>
<pre>
GRANT SELECT ON cdcpub.products_ct TO subscriber1;
</pre>
<p>The Change Data Capture asynchronous HotLog system is now ready for <code>subscriber1</code> to create subscriptions.</p>
</dd>
</dl>
</div>
<!-- class="sect2" -->
<a id="CHDEHIIE"></a><a id="DWHSG8441"></a>
<div class="sect2">
<h3 class="sect2">Performing Asynchronous Distributed HotLog Publishing</h3>
<p>For Distributed HotLog Change Data Capture, the staging database is remote from the source database. However, steps must be performed on both the source database and the staging database to set up database links, Oracle Streams, and Change Data Capture. Tasks must be performed by a source database DBA, a staging database DBA, and a publisher on each database, as follows:</p>
<ul>
<li>
<p>The source database DBA sets up Oracle Net, database initialization parameters, alters the source database to enable force logging and supplemental logging, and creates the source database publisher.</p>
</li>
<li>
<p>The staging database DBA sets database initialization parameters and creates a staging database publisher.</p>
</li>
<li>
<p>The source database publisher sets up a database link from the source database to the staging database.</p>
</li>
<li>
<p>The staging database publisher sets up a database link from the staging database to the source database, creates new change sources, change sets, and the change tables that will contain the changes that are made to individual source tables, and grants necessary privileges to subscribers.</p>
</li>
</ul>
<p>This example assumes that the source database DBA, the staging database DBA, and the publishers are four different people.</p>
<dl>
<dd><a id="sthref642"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Source Database DBA: Prepare the source database.</dt>
<dd>
<p>The source database DBA performs the following tasks:</p>
</dd>
</dl>
<ol>
<li>
<p>Configures Oracle Net so that the source database can communicate with the staging database. See <a class="olink NETAG" href="../../network.112/e41945/toc.htm"><span class="italic">Oracle Database Net Services Administrator's Guide</span></a> for information about Oracle Net.</p>
</li>
<li>
<p>Sets the database initialization parameters on the source database as described in <a href="#CHDFAGAG">"Setting Initialization Parameters for Change Data Capture Publishing"</a>. In the following code example, the source database is Oracle Database release 11.2, the number of planned change sources is 1, and the current value of the <code>STREAMS_POOL_SIZE</code> parameter is 50 MB:</p>
<pre>
compatible = 11.0
global_names = true
job_queue_processes = <span class="italic">&lt;current value&gt;</span> + 2
open_links = 4
</pre>
<pre>
parallel_max_servers = <span class="italic">&lt;current value&gt;</span> + 3
processes = <span class="italic">&lt;current value&gt;</span> + 4
sessions = &lt;current value&gt; + 1
streams_pool_size = <span class="italic">&lt;current value&gt;</span> + 20 MB
undo_retention = 3600
</pre></li>
</ol>
<dl>
<dd><a id="sthref643"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Staging Database DBA: Set the database initialization parameters.</dt>
<dd>
<p>The staging database DBA performs the following tasks:</p>
<ol>
<li>
<p>Sets the database initialization parameters on the staging database, as described in <a href="#CHDFAGAG">"Setting Initialization Parameters for Change Data Capture Publishing"</a>. In this example, one change set will be defined and the current value for the <code>STREAMS_POOL_SIZE</code> parameter is 50 MB or greater:</p>
<pre>
compatible = 11.0
global_names = true
java_pool_size = 50000000
open_links = 4
job_queue_processes = 2
parallel_max_servers = &lt;current_value&gt; + 2
processes = &lt;current_value&gt; + 3
sessions = &lt;current value&gt; + 1
streams_pool_size = &lt;current_value&gt; + 11 MB
undo_retention = 3600
</pre></li>
</ol>
</dd>
</dl>
<dl>
<dd><a id="sthref644"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Source Database DBA: Alter the source database.</dt>
<dd>
<p>The source database DBA performs the following three tasks. The second is required. The first and third are optional, but recommended. It is assumed that the database is currently running in <code>ARCHIVELOG</code> mode.</p>
</dd>
</dl>
<ol>
<li>
<p>Place the database into <code>FORCE</code> <code>LOGGING</code> logging mode to protect against unlogged direct writes in the source database that cannot be captured by asynchronous Change Data Capture:</p>
<pre>
ALTER DATABASE FORCE LOGGING;
</pre></li>
<li>
<p>Enable supplemental logging. Supplemental logging places additional column data into a redo log file whenever an update operation is performed.</p>
<pre>
ALTER DATABASE ADD SUPPLEMENTAL LOG DATA;
</pre></li>
<li>
<p>Create an unconditional log group on all columns to be captured in the source table. Source table columns that are unchanged and are not in an unconditional log group, will be null in the change table, instead of reflecting their actual source table values. (This example captures rows in the <code>sh.products</code> table only. The source database DBA would repeat this step for each source table for which change tables will be created).</p>
<pre>
ALTER TABLE sh.products
ADD SUPPLEMENTAL LOG GROUP log_group_products
    (PROD_ID, PROD_NAME, PROD_LIST_PRICE) ALWAYS;
</pre>
<p>If you intend to capture all the column values in a row whenever a column in that row is updated, you can use the following statement instead of listing each column one-by-one in the <code>ALTER</code> <code>TABLE</code> statement. However, do not use this form of the <code>ALTER</code> <code>TABLE</code> statement if all columns are not needed. Logging all columns incurs more overhead than logging selected columns.</p>
<pre>
ALTER TABLE sh.products ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADMIN11332" href="../../server.112/e25494/archredo.htm#ADMIN11332"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about running a database in <code>ARCHIVELOG</code> mode</p>
</li>
<li>
<p><a href="#i1027101">"Asynchronous Change Data Capture and Supplemental Logging"</a> for more information on supplemental logging</p>
</li>
<li>
<p><a class="olink SUTIL" href="../e22490/toc.htm"><span class="italic">Oracle Database Utilities</span></a> for more information on supplemental logging</p>
</li>
</ul>
</div>
</li>
</ol>
<dl>
<dd><a id="sthref645"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Source Database DBA: Create and grant privileges to the publisher.</dt>
<dd>
<p>The source database DBA creates a user, (for example, <code>source_cdcpub</code>), to serve as the source database publisher and grants the necessary privileges to the publisher so that he or she can set up a database link from the source database to connect to the staging database publisher, as described in <a href="#CHDBHBAC">"Creating a User to Serve As a Publisher"</a>. For example:</p>
<pre>
CREATE USER source_cdcpub IDENTIFIED EXTERNALLY
   QUOTA UNLIMITED ON SYSTEM
   QUOTA UNLIMITED ON SYSAUX;
GRANT CREATE SESSION TO source_cdcpub;
GRANT DBA TO source_cdcpub;
GRANT CREATE DATABASE LINK TO source_cdcpub;
GRANT EXECUTE on DBMS_CDC_PUBLISH TO source_cdcpub;
GRANT EXECUTE_CATALOG_ROLE TO source_cdcpub;
GRANT SELECT_CATALOG_ROLE TO source_cdcpub;
EXECUTE DBMS_STREAMS_AUTH.GRANT_ADMIN_PRIVILEGE(
      GRANTEE=&gt; 'source_cdcpub');
</pre></dd>
</dl>
<dl>
<dd><a id="sthref646"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Staging Database DBA: Create and grant privileges to the publisher.</dt>
<dd>
<p>The staging database DBA creates a user, (for example, <code>staging_cdcpub</code>), to serve as the Change Data Capture publisher and grants the necessary privileges to the publisher so that he or she can perform underlying Oracle Streams operations, create a database link from the staging database to connect to the source database publisher, create the change sources on the source database, and the change sets and change tables on the staging database, as described in <a href="#CHDBHBAC">"Creating a User to Serve As a Publisher"</a>. For example:</p>
<pre>
CREATE USER staging_cdcpub IDENTIFIED EXTERNALLY
   DEFAULT TABLESPACE ts_cdcpub
   QUOTA UNLIMITED ON SYSTEM;
GRANT CREATE SESSION TO staging_cdcpub;
GRANT CREATE TABLE TO staging_cdcpub;
GRANT CREATE TABLESPACE TO staging_cdcpub;
GRANT UNLIMITED TABLESPACE TO staging_cdcpub;
GRANT SELECT_CATALOG_ROLE TO staging_cdcpub;
GRANT EXECUTE_CATALOG_ROLE TO staging_cdcpub;
GRANT CONNECT, RESOURCE, DBA TO staging_cdcpub;
GRANT CREATE SEQUENCE TO staging_cdcpub;
EXECUTE DBMS_STREAMS_AUTH.GRANT_ADMIN_PRIVILEGE(grantee =&gt; 'staging_cdcpub');
GRANT CREATE DATABASE LINK TO staging_cdcpub;
</pre></dd>
<dd><a id="sthref647"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Source Database Publisher: Create Database Link</dt>
<dd>
<p>The source database publisher creates a link from the source database to the staging database. Because the <code>GLOBAL_NAMES</code> initialization parameter is set to <code>TRUE</code>, the database link name will be same as that of the staging database. It connects to the staging database using the username and password of the staging database publisher. In this example, the name of the staging database is <code>staging_db</code>:</p>
<pre>
CREATE DATABASE LINK staging_db
CONNECT TO staging_cdcpub IDENTIFIED BY Stg395V3
USING 'staging_db';
</pre>
<p>For detailed information on database links, see <a class="olink ADMIN02801" href="../../server.112/e25494/ds_concepts.htm#ADMIN02801"><span class="italic">Oracle Database Administrator's Guide</span></a>.</p>
</dd>
<dd><a id="sthref648"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Staging Database Publisher: Create Database Link</dt>
<dd>
<p>The staging database publisher creates a link from the staging database to the source database. Again, because the <code>GLOBAL_NAMES</code> initialization parameter is set to <code>TRUE</code>, the database link name will be the same as that of the source database. It connects to the source database using the username and password of the source database publisher. In this example, the name of the source database is <code>source_db</code>:</p>
<pre>
CREATE DATABASE LINK source_db
CONNECT TO source_cdcpub IDENTIFIED BY Lvh412A7
USING 'source_db';
</pre>
<p>Note that this database link must exist when creating, altering or dropping Distributed HotLog change sources, change sets and change tables. However, this database link is not required for change capture to occur. Once the required Distributed HotLog change sources, change sets and change tables are in place and enabled, this database link can be dropped without interrupting change capture. This database link would need to be re-created to create, alter or drop Distributed HotLog change sources, change sets and change tables.</p>
</dd>
<dd><a id="sthref649"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Staging Database Publisher: Identify the change source database and create the change sources.</dt>
<dd>
<p>The staging database publisher uses the <code>DBMS_CDC_PUBLISH.CREATE_HOTLOG_CHANGE_SOURCE</code> procedure on the staging database to create the Distributed HotLog change sources on the source database.</p>
<p>Note that when Change Data Capture creates a change source, its associated Oracle Streams capture process is also created (but not started).</p>
<p>The publisher creates the Distributed HotLog change source and specifies the database link defined from the staging database to the source database. The name of the database link is the same as the name of the source database:</p>
<pre>
BEGIN
   DBMS_CDC_PUBLISH.CREATE_HOTLOG_CHANGE_SOURCE(
       change_source_name =&gt; 'CHICAGO',
       description =&gt; 'test source',
       source_database =&gt; 'source_db');
END;
/
</pre></dd>
<dd><a id="sthref650"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Staging Database Publisher: Create change sets.</dt>
<dd>
<p>The publisher uses the <code>DBMS_CDC_PUBLISH.CREATE_CHANGE_SET</code> procedure on the staging database to create a change set. A Distributed HotLog change source can contain one or more change sets on the same staging database. The publisher cannot provide beginning and ending dates.</p>
<p>Note that when Change Data Capture creates a change set, its associated Oracle Streams apply process is also created (but not started).</p>
<p>The following example shows how to create a change set called <code>CHICAGO_DAILY</code> that captures changes starting today, and continues capturing change data indefinitely. (If, at some time in the future, the publisher decides that he or she wants to stop capturing change data for this change set, he or she should disable the change set and then drop it.)</p>
<pre>
BEGIN
   DBMS_CDC_PUBLISH.CREATE_CHANGE_SET(
       change_set_name =&gt; 'CHICAGO_DAILY',
       description =&gt; 'change set for product info',
       change_source_name =&gt; 'CHICAGO',
       stop_on_ddl =&gt; 'y');
END;
/
</pre></dd>
<dd><a id="sthref651"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;Staging Database Publisher: Create the change tables.</dt>
<dd>
<p>The publisher uses the <code>DBMS_CDC_PUBLISH.CREATE_CHANGE_TABLE</code> procedure on the staging database to create change tables.</p>
<p>The publisher creates one or more change tables for each source table to be published, specifies which columns should be included, and specifies the combination of before and after images of the change data to capture.</p>
<p>The publisher can set the <code>options_string</code> field of the <code>DBMS_CDC_PUBLISH.CREATE_CHANGE_TABLE</code> procedure to have more control over the physical properties and tablespace properties of the change tables. The <code>options_string</code> field can contain any option available (except partitioning) on the <code>CREATE</code> <code>TABLE</code> statement. In this example, it specifies a tablespace for the change set. (This example assumes that the publisher previously created the <code>TS_CHICAGO_DAILY</code> tablespace.)</p>
<p>The following example creates a change table on the staging database that captures changes made to a source table in the source database. The example uses the sample table <code>sh.products</code>.</p>
<pre>
BEGIN
   DBMS_CDC_PUBLISH.CREATE_CHANGE_TABLE(
       owner             =&gt; 'staging_cdcpub',
       change_table_name =&gt; 'products_ct',
       change_set_name   =&gt; 'CHICAGO_DAILY',
       source_schema     =&gt; 'SH',
       source_table      =&gt; 'PRODUCTS',
       column_type_list  =&gt; 'PROD_ID NUMBER(6), PROD_NAME VARCHAR2(50),
          PROD_LIST_PRICE NUMBER(8,2),
          JOB_ID VARCHAR2(10), DEPARTMENT_ID NUMBER(4)',
       capture_values    =&gt; 'both',
       rs_id             =&gt; 'y',
       row_id            =&gt; 'n',
       user_id           =&gt; 'n',
       timestamp         =&gt; 'n',
       object_id         =&gt; 'n',
       source_colmap     =&gt; 'n',
       target_colmap     =&gt; 'y',
       options_string    =&gt; 'TABLESPACE TS_CHICAGO_DAILY');
END;
/
</pre>
<p>This example creates a change table named <code>products_ct</code> within change set <code>CHICAGO_DAILY</code>. The <code>column_type_list</code> parameter identifies the columns captured by the change table. The <code>source_schema</code> and <code>source_table</code> parameters identify the schema and source table that reside in the source database, not the staging database.</p>
<p>The <code>capture_values</code> setting in the example indicates that for update operations, the change data will contain two separate rows for each row that changed: one row will contain the row values before the update occurred and the other row will contain the row values after the update occurred. Note that for Distributed HotLog change sets, the <code>object_id</code> and <code>source_colmap</code> capture values must be set to <code>'n'</code>. If the change source is 9.2 or 10.1, <code>row_id</code> and <code>user_id</code> must also be <code>'n'</code>.</p>
<p>See <a href="#i1027418">"Managing Change Tables"</a> for more information.</p>
</dd>
<dd><a id="sthref652"></a></dd>
<dt class="seghead">Step 11&nbsp;&nbsp;&nbsp;Staging Database Publisher: Enable the change source.</dt>
<dd>
<p>Because Distributed HotLog change sources are always disabled when they are created, the publisher must alter the change source to enable it. The Oracle Streams capture process is started when the change source is enabled.</p>
<pre>
BEGIN
  DBMS_CDC_PUBLISH.ALTER_HOTLOG_CHANGE_SOURCE(
    change_source_name =&gt; 'CHICAGO',
    enable_source      =&gt; 'Y');
END;
/
</pre></dd>
<dd><a id="sthref653"></a></dd>
<dt class="seghead">Step 12&nbsp;&nbsp;&nbsp;Staging Database Publisher: Enable the change set.</dt>
<dd>
<p>Because asynchronous change sets are always disabled when they are created, the publisher must alter the change set to enable it. The Oracle Streams apply processes is started when the change set is enabled.</p>
<pre>
BEGIN
   DBMS_CDC_PUBLISH.ALTER_CHANGE_SET(
       change_set_name =&gt; 'CHICAGO_DAILY',
       enable_capture  =&gt; 'y');
END;
/
</pre></dd>
<dd><a id="sthref654"></a></dd>
<dt class="seghead">Step 13&nbsp;&nbsp;&nbsp;Staging Database Publisher: Grant access to subscribers.</dt>
<dd>
<p>The publisher controls subscriber access to change data by granting and revoking the <code>SELECT</code> privilege on change tables for users and roles on the staging database. The publisher grants access to specific change tables. Without this step, a subscriber cannot access any change data. This example assumes that user <code>subscriber1</code> already exists.</p>
<pre>
GRANT SELECT ON staging_cdcpub.products_ct TO subscriber1;
</pre>
<p>The Change Data Capture Distributed HotLog system is now ready for <code>subscriber1</code> to create subscriptions.</p>
</dd>
</dl>
</div>
<!-- class="sect2" -->
<a id="CIHHEDIG"></a><a id="DWHSG8442"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Performing Asynchronous AutoLog Publishing</h3>
<p><a id="sthref655"></a><a id="sthref656"></a>Change Data Capture uses Oracle Streams downstream capture to perform asynchronous AutoLog publishing. The Change Data Capture staging database is considered a downstream database in the Streams environment. The asynchronous AutoLog online option uses Streams real-time downstream capture. The asynchronous AutoLog archive option uses Streams archived-log downstreams capture. See <a class="olink STRMS" href="../e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information on Streams downstream capture.</p>
<p>For asynchronous AutoLog Change Data Capture, the publisher creates new change sources, as well as the change sets and the change tables that will contain the changes that are made to individual source tables.</p>
<p>Steps must be performed on both the source database and the staging database to set up redo transport services, Streams, and Change Data Capture for asynchronous AutoLog publishing. Because the source database and staging database are usually on separate systems, this example assumes that the source database DBA, the staging database DBA, and the publisher are different people.</p>
<dl>
<dd><a id="sthref657"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Source Database DBA: Prepare to copy redo log files from the source database.</dt>
<dd>
<p>The source database DBA and the staging database DBA must set up redo transport services to copy redo log files from the source database to the staging database and to prepare the staging database to receive these redo log files, as follows:</p>
</dd>
</dl>
<ol>
<li>
<p>The source database DBA configures Oracle Net so that the source database can communicate with the staging database. See <a class="olink NETAG" href="../../network.112/e41945/toc.htm"><span class="italic">Oracle Database Net Services Administrator's Guide</span></a> for information about Oracle Net.</p>
</li>
<li>
<p>The source database DBA sets the database initialization parameters on the source database as described in <a href="#CHDFAGAG">"Setting Initialization Parameters for Change Data Capture Publishing"</a>. In the following code examples, <code>STAGINGDB</code> is the network name of the staging database.</p>
<p>The following is an example for the AutoLog online option:</p>
<pre>
compatible = 11.0
log_archive_dest_1 ="location=/oracle/dbs mandatory reopen=5"
log_archive_dest_2 ="service=stagingdb lgwr async optional noregister reopen=5
                     valid_for=(online_logfile,primary_role)" 
log_archive_dest_state_1 = enable
log_archive_dest_state_2 = enable
log_archive_format="arch_%s_%t_%r.dbf"
</pre>
<p>The following is an example for the AutoLog archive option:</p>
<pre>
compatible = 11.0
log_archive_dest_1="location=/oracle/dbs mandatory reopen=5"
log_archive_dest_2 = "service=stagingdb arch optional noregister reopen=5
                      template=/usr/oracle/dbs/arch_%s_%t_%r.dbf" 
log_archive_dest_state_1 = enable
log_archive_dest_state_2 = enable
log_archive_format="arch_%s_%t_%r.dbf"
</pre>
<p>See <a class="olink SBYDB" href="../e41134/toc.htm"><span class="italic">Oracle Data Guard Concepts and Administration</span></a> for information on redo transport services.</p>
</li>
</ol>
<dl>
<dd><a id="sthref658"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Staging Database DBA: Set the database initialization parameters.</dt>
<dd>
<p>The staging database must be run in <code>ARCHIVELOG</code> mode for Asynchronous Autolog CDC. The staging database DBA sets the database initialization parameters on the staging database, as described in <a href="#CHDFAGAG">"Setting Initialization Parameters for Change Data Capture Publishing"</a>. In these examples, one change set will be defined and the current value for the <code>STREAMS_POOL_SIZE</code> is 50 MB or greater.</p>
<p>The following is an example for the AutoLog online option:</p>
<pre>
compatible = 11.0
global_names = true
java_pool_size = 50000000
log_archive_dest_1="location=/oracle/dbs mandatory reopen=5
                    valid_for=(online_logfile,primary_role)"
log_archive_dest_2="location=/usr/oracle/dbs mandatory
                    valid_for=(standby_logfile,primary_role)"
log_archive_dest_state_1=enable
log_archive_dest_state_2=enable
log_archive_format="arch_%s_%t_%r.dbf"
job_queue_processes = 2
parallel_max_servers = &lt;current_value&gt; + 5
processes = &lt;current_value&gt; + 7
sessions = &lt;current value&gt; + 2
streams_pool_size = &lt;current_value&gt; + 21 MB
undo_retention = 3600
</pre>
<p>The following is an example for the AutoLog archive option:</p>
<pre>
compatible = 11.0
global_names = true
java_pool_size = 50000000
log_archive_dest_1="location=/oracle/dbs mandatory reopen=5
                    valid_for=(online_logfile,primary_role)"
log_archive_dest_2="location=/oracle/stdby mandatory
                    valid_for=(standby_logfile,primary_role)"
log_archive_dest_state_1=enable
log_archive_dest_state_2=enable
log_archive_format="arch_%s_%t_%r.dbf"
job_queue_processes = 2
parallel_max_servers = &lt;current_value&gt; + 5
processes = &lt;current_value&gt; + 7
sessions = &lt;current value&gt; + 2
streams_pool_size = &lt;current_value&gt; + 21 MB
undo_retention = 3600
</pre></dd>
</dl>
<dl>
<dd><a id="sthref659"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Source Database DBA: Alter the source database.</dt>
<dd>
<p>The source database DBA performs the following three tasks. The second is required. The first and third are optional, but recommended. It is assumed that the database is currently running in <code>ARCHIVELOG</code> mode.</p>
</dd>
</dl>
<ol>
<li>
<p>Place the database into <code>FORCE</code> <code>LOGGING</code> logging mode to protect against unlogged direct writes in the source database that cannot be captured by asynchronous Change Data Capture:</p>
<pre>
ALTER DATABASE FORCE LOGGING;
</pre></li>
<li>
<p>Enable supplemental logging. Supplemental logging places additional column data into a redo log file whenever an update operation is performed.</p>
<pre>
ALTER DATABASE ADD SUPPLEMENTAL LOG DATA;
</pre></li>
<li>
<p>Create an unconditional log group on all columns to be captured in the source table. Source table columns that are unchanged and are not in an unconditional log group, will be null in the change table, instead of reflecting their actual source table values. (This example captures rows in the <code>sh.products</code> table only. The source database DBA would repeat this step for each source table for which change tables will be created).</p>
<pre>
ALTER TABLE sh.products
ADD SUPPLEMENTAL LOG GROUP log_group_products
    (PROD_ID, PROD_NAME, PROD_LIST_PRICE) ALWAYS;
</pre>
<p>If you intend to capture all the column values in a row whenever a column in that row is updated, you can use the following statement instead of listing each column one-by-one in the <code>ALTER</code> <code>TABLE</code> statement. However, do not use this form of the <code>ALTER</code> <code>TABLE</code> statement if all columns are not needed. Logging all columns incurs more overhead than logging selected columns.</p>
<pre>
ALTER TABLE sh.products ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
</pre>
<p>See <a class="olink ADMIN" href="../e25494/toc.htm"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about running a database in <code>ARCHIVELOG</code> mode. See <a href="#i1027101">"Asynchronous Change Data Capture and Supplemental Logging"</a> and <a class="olink SUTIL" href="../e22490/toc.htm"><span class="italic">Oracle Database Utilities</span></a> for more information on supplemental logging.</p>
</li>
</ol>
<dl>
<dd><a id="sthref660"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Staging Database DBA: Create Standby Redo Log Files</dt>
<dd>
<p>This step is only needed for the AutoLog online option.</p>
<p>The staging database DBA must create the actual standby redo log files on the staging database:</p>
<ol>
<li>
<p>Determine the log file size used on the source database because the standby redo log files must be the same size or larger. You can query <code>V$LOG</code> on the source database to determine the source database log file size.</p>
</li>
<li>
<p>Determine the number of standby log file groups required on the staging database. This must be at least one more than the number of online log file groups on the source database. You can query <code>V$LOG</code> on the source database to determine the number of online log file groups on the source database.</p>
</li>
<li>
<p>Use the SQL statement <code>ALTER</code> <code>DATABASE</code> <code>ADD</code> <code>STANDBY</code> <code>LOGFILE</code> to add the standby log file groups to the staging database:</p>
<pre>
ALTER DATABASE ADD STANDBY LOGFILE GROUP 3
    ('/oracle/dbs/slog3a.rdo', '/oracle/dbs/slog3b.rdo') SIZE 500M;
</pre>
<p>You can query <code>V$STANDBY_LOG</code> on the staging database to ensure that the standby log file groups have been added successfully.</p>
</li>
</ol>
</dd>
</dl>
<dl>
<dd><a id="sthref661"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Staging Database DBA: Create and grant privileges to the publisher.</dt>
<dd>
<p>The staging database DBA creates a user, (for example, <code>cdcpub</code>), to serve as the Change Data Capture publisher and grants the necessary privileges to the publisher so that he or she can perform the underlying Oracle Streams operations needed to create Change Data Capture change sources, change sets, and change tables on the staging database, as described in <a href="#CHDBHBAC">"Creating a User to Serve As a Publisher"</a>. For example:</p>
<pre>
CREATE USER cdcpub IDENTIFIED EXTERNALLY DEFAULT TABLESPACE ts_cdcpub
   QUOTA UNLIMITED ON SYSTEM
   QUOTA UNLIMITED ON SYSAUX;
GRANT CREATE SESSION TO cdcpub;
GRANT CREATE TABLE TO cdcpub;
GRANT CREATE TABLESPACE TO cdcpub;
GRANT UNLIMITED TABLESPACE TO cdcpub;
GRANT SELECT_CATALOG_ROLE TO cdcpub;
GRANT EXECUTE_CATALOG_ROLE TO cdcpub;
GRANT DBA TO cdcpub;
GRANT CREATE SEQUENCE TO cdcpub;
GRANT EXECUTE on DBMS_CDC_PUBLISH TO cdcpub;
EXECUTE DBMS_STREAMS_AUTH.GRANT_ADMIN_PRIVILEGE(grantee =&gt; 'cdcpub');
</pre></dd>
<dd><a id="sthref662"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Source Database DBA: Build the LogMiner data dictionary.</dt>
<dd>
<p>The source <a id="sthref663"></a>database DBA builds a LogMiner data dictionary at the source database so that redo transport services can transport this data dictionary to the staging database. This LogMiner data dictionary build provides the table definitions as they were just prior to beginning to capture change data. Change Data Capture automatically updates the data dictionary with any source table data definition language (DDL) operations that are made during the course of change data capture to ensure that the dictionary is always synchronized with the source database tables.</p>
<p>When building the LogMiner data dictionary, the source database DBA should get the SCN value of the data dictionary build. In Step 8, when the publisher creates a change source, he or she will need to provide this value as the <code>first_scn</code> parameter.</p>
<pre>
SET SERVEROUTPUT ON
VARIABLE f_scn NUMBER;
BEGIN
    :f_scn := 0;
    DBMS_CAPTURE_ADM.BUILD(:f_scn);
    DBMS_OUTPUT.PUT_LINE('The first_scn value is ' || :f_scn);
END;
/
The first_scn value is 207722
</pre>
<p>For asynchronous AutoLog publishing to work, it is critical that the source database DBA build the data dictionary (and the build completes) before the source tables are prepared. The source database DBA must be careful to follow Step 6 and Step 7 in the order they are presented here.</p>
<p>See <a class="olink STRMS" href="../e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information on the LogMiner data dictionary.</p>
</dd>
<dd><a id="sthref664"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Source Database DBA: Prepare the source tables.</dt>
<dd>
<p>The source database DBA must prepare the source tables on the source database for asynchronous Change Data Capture by instantiating each source table so that the underlying Oracle Streams environment records the information it needs to capture each source table's changes. The source table structure and the column datatypes must be supported by Change Data Capture. See <a href="#i1027969">"Datatypes and Table Structures Supported for Asynchronous Change Data Capture"</a> for more information.</p>
<pre>
BEGIN
   DBMS_CAPTURE_ADM.PREPARE_TABLE_INSTANTIATION(
       TABLE_NAME =&gt; 'sh.products');
END;
/
</pre></dd>
<dd><a id="sthref665"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Source Database DBA: Get the global name of the source database.</dt>
<dd>
<p>In Step 8, the publisher will need to reference the global name of the source database. The global name of the source database will be used on the staging database to create the AutoLog change source. The source database DBA can query the <code>GLOBAL_NAME</code> column in the <code>GLOBAL_NAME</code> view on the source database to retrieve this information for the publisher:</p>
<pre>
SELECT GLOBAL_NAME FROM GLOBAL_NAME;
GLOBAL_NAME                                                                     
----------------------------------------------------------------------------
HQDB 
</pre></dd>
<dd><a id="sthref666"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Staging Database Publisher: Identify each change source database and create the change sources.</dt>
<dd>
<p>The publisher uses the <code>DBMS_CDC_PUBLISH.CREATE_AUTOLOG_CHANGE_SOURCE</code> procedure on the staging database to create change sources.</p>
<p>The process of managing the capture system begins with the creation of a change source. A change source describes the source database from which the data will be captured, and manages the relationship between the source database and the staging database. A change source always specifies the SCN of a data dictionary build from the source database as its <code>first_scn</code> parameter.</p>
<p>The publisher gets the SCN of the data dictionary build and the global database name from the source database DBA (as shown in Step 5 and Step 7, respectively). If the publisher cannot get the value to use for the <code>first_scn</code> parameter value from the source database DBA, then, with the appropriate privileges, he or she can query the <code>V$ARCHIVED_LOG</code> view on the source database to determine the value. This is described in the <code>DBMS_CDC_PUBLISH</code> chapter of the <a class="olink ARPLS023" href="../../appdev.112/e40758/d_cdcpub.htm#ARPLS023"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
<p>On the staging database, the publisher creates the AutoLog change source and specifies the global name as the <code>source_database</code> parameter value and the SCN of the data dictionary build as the <code>first_scn</code> parameter value. To create an AutoLog online change source:</p>
<pre>
BEGIN
   DBMS_CDC_PUBLISH.CREATE_AUTOLOG_CHANGE_SOURCE(
       change_source_name  =&gt; 'CHICAGO',
       description         =&gt; 'test source',
       source_database     =&gt; 'HQDB',
       first_scn           =&gt; 207722,
       online_log          =&gt; 'y');
END;
/
</pre>
<p>To create an AutoLog archive change source:</p>
<pre>
BEGIN
   DBMS_CDC_PUBLISH.CREATE_AUTOLOG_CHANGE_SOURCE(
       change_source_name   =&gt; 'CHICAGO',
       description          =&gt; 'test source',
       source_database      =&gt; 'HQDB',
       first_scn            =&gt; 207722);
END;
/
</pre></dd>
<dd><a id="sthref667"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;Staging Database Publisher: Create change sets.</dt>
<dd>
<p>The publisher uses the <code>DBMS_CDC_PUBLISH.CREATE_CHANGE_SET</code> procedure on the staging database to create change sets. The publisher can optionally provide beginning and ending dates to indicate where to begin and end the data capture.</p>
<p>Note that when Change Data Capture creates a change set, its associated Oracle Streams capture and apply processes are also created (but not started).</p>
<p>The following example shows how to create a change set called <code>CHICAGO_DAILY</code> that captures changes starting today, and continues capturing change data indefinitely. (If, at some time in the future, the publisher decides that he or she wants to stop capturing change data for this change set, he or she should disable the change set and then drop it.)</p>
<pre>
BEGIN
   DBMS_CDC_PUBLISH.CREATE_CHANGE_SET(
       change_set_name    =&gt; 'CHICAGO_DAILY',
       description        =&gt; 'change set for product info',
       change_source_name =&gt; 'CHICAGO',
       stop_on_ddl        =&gt; 'y');
END;
/
</pre></dd>
<dd><a id="sthref668"></a></dd>
<dt class="seghead">Step 11&nbsp;&nbsp;&nbsp;Staging Database Publisher: Create the change tables.</dt>
<dd>
<p>The publisher uses the <code>DBMS_CDC_PUBLISH.CREATE_CHANGE_TABLE</code> procedure on the staging database to create change tables.</p>
<p>The publisher creates one or more change tables for each source table to be published, specifies which columns should be included, and specifies the combination of before and after images of the change data to capture.</p>
<p>The publisher can set the <code>options_string</code> field of the <code>DBMS_CDC_PUBLISH.CREATE_CHANGE_TABLE</code> procedure to have more control over the physical properties and tablespace properties of the change tables. The <code>options_string</code> field can contain any option available (except partitioning) on the <code>CREATE</code> <code>TABLE</code> statement. In this example, it specifies a tablespace for the change set. (This example assumes that the publisher previously created the <code>TS_CHICAGO_DAILY</code> tablespace.)</p>
<p>The following example creates a change table on the staging database that captures changes made to a source table in the source database. The example uses the sample table <code>sh.products</code>.</p>
<pre>
BEGIN
   DBMS_CDC_PUBLISH.CREATE_CHANGE_TABLE(
       owner             =&gt; 'cdcpub',
       change_table_name =&gt; 'products_ct',
       change_set_name   =&gt; 'CHICAGO_DAILY',
       source_schema     =&gt; 'SH',
       source_table      =&gt; 'PRODUCTS',
       column_type_list  =&gt; 'PROD_ID NUMBER(6), PROD_NAME VARCHAR2(50),
          PROD_LIST_PRICE NUMBER(8,2)',
          JOB_ID VARCHAR2(10), DEPARTMENT_ID NUMBER(4)',
       capture_values    =&gt; 'both',
       rs_id             =&gt; 'y',
       row_id            =&gt; 'n',
       user_id           =&gt; 'n',
       timestamp         =&gt; 'n',
       object_id         =&gt; 'n',
       source_colmap     =&gt; 'n',
       target_colmap     =&gt; 'y',
       options_string    =&gt; 'TABLESPACE TS_CHICAGO_DAILY');
END;
/
</pre>
<p>This example creates a change table named <code>products_ct</code> within change set <code>CHICAGO_DAILY</code>. The <code>column_type_list</code> parameter identifies the columns captured by the change table. The <code>source_schema</code> and <code>source_table</code> parameters identify the schema and source table that reside in the source database, not the staging database.</p>
<p>The <code>capture_values</code> setting in the example indicates that for update operations, the change data will contain two separate rows for each row that changed: one row will contain the row values before the update occurred and the other row will contain the row values after the update occurred.</p>
<p>See <a href="#i1027418">"Managing Change Tables"</a> for more information.</p>
</dd>
<dd><a id="sthref669"></a></dd>
<dt class="seghead">Step 12&nbsp;&nbsp;&nbsp;Staging Database Publisher: Enable the change set.</dt>
<dd>
<p>Because asynchronous change sets are always disabled when they are created, the publisher must alter the change set to enable it. The Oracle Streams capture and apply processes are started when the change set is enabled.</p>
<pre>
BEGIN
   DBMS_CDC_PUBLISH.ALTER_CHANGE_SET(
       change_set_name =&gt; 'CHICAGO_DAILY',
       enable_capture  =&gt; 'y');
END;
/
</pre></dd>
<dd><a id="sthref670"></a></dd>
<dt class="seghead">Step 13&nbsp;&nbsp;&nbsp;Source Database DBA: Switch the redo log files at the source database.</dt>
<dd>
<p>To begin capturing data, a log file must be archived. The source database DBA can initiate the process by switching the current redo log file:</p>
<pre>
ALTER SYSTEM SWITCH LOGFILE;
</pre></dd>
<dd><a id="sthref671"></a></dd>
<dt class="seghead">Step 14&nbsp;&nbsp;&nbsp;Staging Database Publisher: Grant access to subscribers.</dt>
<dd>
<p>The publisher controls subscriber access to change data by granting and revoking the SQL <code>SELECT</code> privilege on change tables for users and roles on the staging database. The publisher grants access to specific change tables. Without this step, a subscriber cannot access any change data. This example assumes that user <code>subscriber1</code> already exists.</p>
<pre>
GRANT SELECT ON cdcpub.products_ct TO subscriber1;
</pre>
<p>The Change Data Capture asynchronous AutoLog system is now ready for <code>subscriber1</code> to create subscriptions.</p>
</dd>
</dl>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1026908"></a><a id="DWHSG8443"></a>
<div class="sect1">
<h2 class="sect1">Subscribing to Change Data</h2>
<p><a id="sthref672"></a>When a publisher creates a change table, Change Data Capture assigns it a publication ID and maintains a list of all the publication IDs in the <code>DBA_PUBLISHED_COLUMNS</code> view. A <span class="bold">publication ID</span> is a numeric value that Change Data Capture assigns to each change table defined by the publisher.</p>
<p>The subscribers register their interest in one or more source tables, and obtain subscriptions to these tables. Assuming sufficient access privileges, the subscribers may subscribe to any source tables for which the publisher has created one or more change tables by doing one of the following:</p>
<ul>
<li>
<p>Specifying the source tables and columns of interest.</p>
<p>When there are multiple publications that contain the columns of interest, then Change Data Capture selects one on behalf of the user.</p>
</li>
<li>
<p>Specifying the publication IDs and columns of interest.</p>
<p>When there are multiple publications on a single source table and these publications share some columns, the subscriber should specify publication IDs (rather than source tables) if any of the shared columns will be used in a single subscription.</p>
</li>
</ul>
<p>The following steps provide an example to demonstrate both scenarios:</p>
<dl>
<dd><a id="sthref673"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Find the source tables for which the subscriber has access privileges.</dt>
<dd>
<p>The subscriber queries the <code>DBA_SOURCE_TABLES</code> view to see all the published source tables for which the subscriber has access privileges:</p>
<pre>
SELECT * FROM DBA_SOURCE_TABLES;

SOURCE_SCHEMA_NAME             SOURCE_TABLE_NAME
------------------------------ ------------------------------
SH                             PRODUCTS
</pre></dd>
<dd><a id="sthref674"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Find the change set names and columns for which the subscriber has access privileges.</dt>
<dd>
<p>The subscriber queries the <code>DBA_PUBLISHED_COLUMNS</code> view to see all the change sets, columns, and publication IDs for the <code>sh.products</code> table for which the subscriber has access privileges:</p>
<pre>
SELECT UNIQUE CHANGE_SET_NAME, COLUMN_NAME, PUB_ID 
FROM DBA_PUBLISHED_COLUMNS
WHERE SOURCE_SCHEMA_NAME ='SH' AND SOURCE_TABLE_NAME = 'PRODUCTS';

CHANGE_SET_NAME     COLUMN_NAME        PUB_ID
----------------    ------------------ ------------ 
CHICAGO_DAILY       PROD_ID            41494
CHICAGO_DAILY       PROD_LIST_PRICE    41494
CHICAGO_DAILY       PROD_NAME          41494
</pre></dd>
<dd><a id="sthref675"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Create a subscription.</dt>
<dd>
<p>The subscriber calls the <code>DBMS_CDC_SUBSCRIBE</code>.<code>CREATE_SUBSCRIPTION</code> procedure to create a subscription.</p>
<p>The following example shows how the subscriber identifies the change set of interest (<code>CHICAGO_DAILY</code>), and then specifies a unique subscription name that will be used throughout the life of the subscription:</p>
<pre>
BEGIN
       DBMS_CDC_SUBSCRIBE.CREATE_SUBSCRIPTION(
       change_set_name   =&gt; 'CHICAGO_DAILY',
       description       =&gt; 'Change data for PRODUCTS',
       subscription_name =&gt; 'SALES_SUB');
END;
/
</pre></dd>
<dd><a id="sthref676"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Subscribe to a source table and the columns in the source table.</dt>
<dd>
<p>The subscriber calls the <code>DBMS_CDC_SUBSCRIBE</code>.<code>SUBSCRIBE</code> procedure to specify which columns of the source tables are of interest to the subscriber.</p>
<p>A subscription can contain one or more source tables referenced by the same change set.</p>
<p>In the following example, the subscriber wants to see the <code>PROD_ID</code>, <code>PROD_NAME</code>, and <code>PROD_LIST_PRICE</code> columns from the <code>PRODUCTS</code> table. Because all these columns are contained in the same publication (and the subscriber has privileges to access that publication) as shown in the query in Step 2, the following call can be used:</p>
<pre>
BEGIN
       DBMS_CDC_SUBSCRIBE.SUBSCRIBE(
       subscription_name =&gt; 'SALES_SUB',
       source_schema     =&gt; 'SH',
       source_table      =&gt; 'PRODUCTS',
       column_list       =&gt; 'PROD_ID, PROD_NAME, PROD_LIST_PRICE',
       subscriber_view   =&gt; 'SALES_VIEW');
END;
/
</pre>
<p>However, assume that for security reasons the publisher has not created a single change table that includes all these columns. Suppose that instead of the results shown in Step 2, the query of the <code>DBA_PUBLISHED_COLUMNS</code> view shows that the columns of interest are included in multiple publications as shown in the following example:</p>
<pre>
SELECT UNIQUE CHANGE_SET_NAME, COLUMN_NAME, PUB_ID 
FROM DBA_PUBLISHED_COLUMNS
WHERE SOURCE_SCHEMA_NAME ='SH' AND SOURCE_TABLE_NAME = 'PRODUCTS';

CHANGE_SET_NAME     COLUMN_NAME        PUB_ID
----------------    ------------------ ------------ 
CHICAGO_DAILY       PROD_ID            34883
CHICAGO_DAILY       PROD_NAME          34885
CHICAGO_DAILY       PROD_LIST_PRICE    34883
CHICAGO_DAILY       PROD_ID            34885
</pre>
<p>This returned data shows that the <code>PROD_ID</code> column is included in both publication 34883 and publication 34885. A single subscribe call must specify columns available in a single publication. Therefore, if the subscriber wants to subscribe to columns in both publications, using <code>PROD_ID</code> to join across the subscriber views, then the subscriber must use two calls, each specifying a different publication ID:</p>
<pre>
BEGIN
       DBMS_CDC_SUBSCRIBE.SUBSCRIBE(
       subscription_name =&gt; 'MULTI_PUB',
       publication_id    =&gt; 34885,
       column_list       =&gt; 'PROD_ID, PROD_NAME',
       subscriber_view   =&gt; 'prod_idname');

       DBMS_CDC_SUBSCRIBE.SUBSCRIBE(
       subscription_name =&gt; 'MULTI_PUB',
       publication_id    =&gt; 34883, 
       column_list       =&gt; 'PROD_ID, PROD_LIST_PRICE',
       subscriber_view   =&gt; 'prod_price'); 
END; 
/
</pre>
<p>Note that each <code>DBMS_CDC_SUBSCRIBE.SUBSCRIBE</code> call specifies a unique subscriber view.</p>
</dd>
<dd><a id="sthref677"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Activate the subscription.</dt>
<dd>
<p>The subscriber calls the <code>DBMS_CDC_SUBSCRIBE</code><code>.ACTIVATE_SUBSCRIPTION</code> procedure to activate the subscription.</p>
<p>A subscriber calls this procedure when finished subscribing to source tables (or publications), and ready to receive change data. Whether subscribing to one or multiple source tables, the subscriber needs to call the <code>ACTIVATE_SUBSCRIPTION</code> procedure only once.</p>
<p>The <code>ACTIVATE_SUBSCRIPTION</code> procedure creates empty subscriber views. At this point, <code>DBMS_CDC_SUBSCRIBE.SUBSCRIBE</code> calls can be made.</p>
<pre>
BEGIN
   DBMS_CDC_SUBSCRIBE.ACTIVATE_SUBSCRIPTION(
       subscription_name =&gt; 'SALES_SUB');
END;
/
</pre></dd>
<dd><a id="sthref678"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Get the next set of change data.</dt>
<dd>
<p>The subscriber calls the <code>DBMS_CDC_SUBSCRIBE.EXTEND_WINDOW</code> procedure to get the next available set of change data. This sets the high boundary of the subscription window. For example:</p>
<pre>
 BEGIN
   DBMS_CDC_SUBSCRIBE.EXTEND_WINDOW(
       subscription_name =&gt; 'SALES_SUB');
END;
/
</pre>
<p>If this is the subscriber's first call to the <code>EXTEND_WINDOW</code> procedure, then the subscription window contains all the change data in the publication. Otherwise, all the new change data that was created since the last call to the <code>EXTEND_WINDOW</code> procedure is added to the subscription window.</p>
<p>If no new change data has been added, then the subscription window remains unchanged.</p>
</dd>
<dd><a id="sthref679"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Read and query the contents of the subscriber views.</dt>
<dd>
<p>The subscriber uses the SQL <code>SELECT</code> statement on the subscriber view to query the change data (within the current boundaries of the subscription window). The subscriber can do this for each subscriber view in the subscription. For example:</p>
<pre>
SELECT PROD_ID, PROD_NAME, PROD_LIST_PRICE FROM SALES_VIEW;

PROD_ID    PROD_NAME                                          PROD_LIST_PRICE
---------- -------------------------------------------------- ---------------
30         And 2 Crosscourt Tee Kids                          14.99
30         And 2 Crosscourt Tee Kids                          17.66
10         Gurfield&amp; Murks Pleated Trousers                   17.99
10         Gurfield&amp; Murks Pleated Trousers                   21.99
</pre>
<p>The subscriber view name, <code>SALES_VIEW</code>, was specified when the subscriber called the <code>DBMS_CDC_SUBSCRIBE.SUBSCRIBE</code> procedure in Step 4.</p>
</dd>
<dd><a id="sthref680"></a></dd>
<dt class="seghead">Step 8&nbsp;&nbsp;&nbsp;Indicate that the current set of change data is no longer needed.</dt>
<dd>
<p>The subscriber uses the <code>DBMS_CDC_SUBSCRIBE</code>.<code>PURGE_WINDOW</code> procedure to let Change Data Capture know that the subscriber no longer needs the current set of change data. This helps Change Data Capture to manage the amount of data in the change table and sets the low boundary of the subscription window. Calling the <code>DBMS_CDC_SUBSCRIBE</code>.<code>PURGE_WINDOW</code> procedure causes the subscription window to be empty. See <a href="#i1027449">"Purging Change Tables of Unneeded Data"</a> for details on how the <code>DBMS_CDC_SUBSCRIBE</code>.<code>PURGE_WINDOW</code> works.</p>
<p>For example:</p>
<pre>
BEGIN
   DBMS_CDC_SUBSCRIBE.PURGE_WINDOW(
       subscription_name =&gt; 'SALES_SUB');
END;
/
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Before using <code>DBMS_CDC_PUBLISH.PURGE</code>, call <code>DBMS_CDC_SUBSCRIBE.EXTEND_WINDOW</code>, which protects the data that is still needed by the subscriber and makes the publisher aware that there is some important data that should not be purged.</div>
</dd>
<dd><a id="sthref681"></a></dd>
<dt class="seghead">Step 9&nbsp;&nbsp;&nbsp;Repeat Steps 6 through 8.</dt>
<dd>
<p>The subscriber repeats Steps 6 through 8 as long as the subscriber is interested in additional change data.</p>
</dd>
<dd><a id="sthref682"></a></dd>
<dt class="seghead">Step 10&nbsp;&nbsp;&nbsp;End the subscription.</dt>
<dd>
<p>The subscriber uses the <code>DBMS_CDC_SUBSCRIBE</code>.<code>DROP_SUBSCRIPTION</code> procedure to end the subscription. This is necessary to prevent the publications that underlie the subscription from holding change data indefinitely.</p>
<pre>
BEGIN
   DBMS_CDC_SUBSCRIBE.DROP_SUBSCRIPTION(
       subscription_name =&gt; 'SALES_SUB');
END;
/
</pre></dd>
</dl>
</div>
<!-- class="sect1" -->
<a id="i1027192"></a><a id="DWHSG8444"></a>
<div class="sect1">
<h2 class="sect1">Managing Published Data</h2>
<p>This section provides information about the management tasks involved in managing change sets and change tables. For the most part, these tasks are the responsibility of the publisher. However, to purge unneeded data from the change tables, both the publisher and the subscribers have responsibilities as described in <a href="#i1027449">"Purging Change Tables of Unneeded Data"</a></p>
<p>The following topics are covered in this section:</p>
<ul>
<li>
<p><a href="#BABBDEJD">Managing Asynchronous Change Sources</a></p>
</li>
<li>
<p><a href="#i1027214">Managing Asynchronous Change Sets</a></p>
</li>
<li>
<p><a href="#i1027418">Managing Change Tables</a></p>
</li>
<li>
<p><a href="#i1027532">Exporting and Importing Change Data Capture Objects Using Oracle Data Pump</a></p>
</li>
<li>
<p><a href="#i1027579">Impact on Subscriptions When the Publisher Makes Changes</a></p>
</li>
</ul>
<a id="BABBDEJD"></a><a id="DWHSG8445"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Managing Asynchronous Change Sources</h3>
<p>This section provides information about tasks that the publisher can perform to manage asynchronous change sources. The following topic is covered:</p>
<ul>
<li>
<p><a href="#BABHGJIH">Enabling And Disabling Asynchronous Distributed HotLog Change Sources</a></p>
</li>
</ul>
<a id="BABHGJIH"></a><a id="DWHSG8446"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Enabling And Disabling Asynchronous Distributed HotLog Change Sources</h4>
<p>The publisher can enable and disable asynchronous Distributed HotLog change sources. When a change source is disabled, it cannot process new change data until the change source is enabled.</p>
<p>Asynchronous Distributed HotLog change sources are always created disabled.</p>
<p>The publisher can enable the <code>PRODUCTS_SOURCE</code> asynchronous Distributed HotLog change source with the following call:</p>
<pre>
BEGIN
DBMS_CDC_PUBLISH.ALTER_HOTLOG_CHANGE_SOURCE(
change_source_name =&gt; 'PRODUCTS_SOURCE',
enable_source      =&gt; 'y');
END;
/
</pre>
<p>The Oracle Streams capture process for the change source is started when the change source is enabled.The publisher can disable the <code>PRODUCTS_SOURCE</code> asynchronous Distributed HotLog change source using the same call, but with enable_source set to <code>'n'</code>. The Oracle Streams capture process for the change source is stopped when the change source is disabled.</p>
<p>An asynchronous Distributed HotLog change source and its change sets must be enabled separately in order to process change data and populate change tables. See <a href="#i1027252">"Enabling and Disabling Asynchronous Change Sets"</a> for more information.</p>
<p>Although a disabled change source cannot process new change data, it does not lose any change data, provided the necessary archived redo log files remain available until the change source and its changes sets are enabled and can process them. Oracle recommends that change sources and change sets be enabled as much as possible to avoid accumulating archived redo log files. See <a href="#CHDBHJAE">"Asynchronous Change Data Capture and Redo Log Files"</a> for more information.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1027214"></a><a id="DWHSG8447"></a>
<div class="sect2">
<h3 class="sect2">Managing Asynchronous Change Sets</h3>
<p><a id="sthref683"></a><a id="sthref684"></a>This section provides information about tasks that the publisher can perform to manage asynchronous change sets. The following topics are covered:</p>
<ul>
<li>
<p><a href="#i1027238">Creating Asynchronous Change Sets with Starting and Ending Dates</a></p>
</li>
<li>
<p><a href="#i1027252">Enabling and Disabling Asynchronous Change Sets</a></p>
</li>
<li>
<p><a href="#i1027287">Stopping Capture on DDL for Asynchronous Change Sets</a></p>
</li>
<li>
<p><a href="#CHDGJABD">Recovering from Errors Returned on Asynchronous Change Sets</a></p>
</li>
</ul>
<a id="i1027238"></a><a id="DWHSG8448"></a>
<div class="sect3">
<h4 class="sect3">Creating Asynchronous Change Sets with Starting and Ending Dates</h4>
<p><a id="sthref685"></a><a id="sthref686"></a>Change sets associated with asynchronous HotLog and AutoLog change sources can optionally specify starting and ending dates to limit the change data they capture. (Change sets associated with Distributed HotLog change sources cannot specify starting and ending dates). A change set with no starting date begins capture with the earliest available change data. A change set with no ending date continues capturing change data indefinitely.</p>
<p>The following example creates a change set, <code>PRODUCTS_SET</code>, in the AutoLog change source, <code>HQ_SOURCE,</code> that starts capture two days from now and continues indefinitely:</p>
<pre>
BEGIN
DBMS_CDC_PUBLISH.CREATE_CHANGE_SET(
</pre>
<pre>
change_set_name    =&gt; 'PRODUCTS_SET',
description        =&gt; 'Products Application Change Set',
change_source_name =&gt; 'HQ_SOURCE',
stop_on_ddl        =&gt; 'Y',
begin_date         =&gt; sysdate+2);
</pre>
<pre>
END;
/
</pre></div>
<!-- class="sect3" -->
<a id="i1027252"></a><a id="DWHSG8449"></a>
<div class="sect3">
<h4 class="sect3">Enabling and Disabling Asynchronous Change Sets</h4>
<p><a id="sthref687"></a><a id="sthref688"></a><a id="sthref689"></a><a id="sthref690"></a>The publisher can enable and disable asynchronous change sets. When a change set is disabled, it cannot process new change data until the change set is enabled.</p>
<p>Synchronous change sets are always created enabled. Asynchronous change sets are always created disabled.</p>
<p>The publisher can enable the <code>PRODUCTS_SET</code> asynchronous change set with the following call:</p>
<pre>
BEGIN
DBMS_CDC_PUBLISH.ALTER_CHANGE_SET(
</pre>
<pre>
change_set_name =&gt; 'PRODUCTS_SET',
enable_capture  =&gt; 'y');
</pre>
<pre>
END;
/
</pre>
<p>For asynchronous HotLog and AutoLog change sets, the Oracle Streams capture and apply processes are started when the change set is enabled. For asynchronous Distributed HotLog change sets, the Oracle Streams apply process is started when the change set is enabled.</p>
<p>The publisher can disable the <code>PRODUCTS_SET</code> asynchronous change set using the same call, but with <code>enable_capture</code> set to <code>'n'</code>. For asynchronous HotLog and AutoLog change sets, the Oracle Streams capture and apply processes are stopped when the change set is disabled. For asynchronous Distributed HotLog change sets, the Oracle Streams apply process is stopped when the change set is disabled.</p>
<p>An asynchronous Distributed HotLog change source and its change sets must be enabled separately in order to process change data and populate change tables. See <a href="#BABHGJIH">"Enabling And Disabling Asynchronous Distributed HotLog Change Sources"</a> for more information.</p>
<p><a id="sthref691"></a>Although a disabled change set cannot process new change data, it does not lose any change data if the necessary archived redo log files remain available until the change set is enabled and processes them. Oracle recommends that change sets be enabled as much as possible to avoid accumulating archived redo log files. See <a href="#CHDBHJAE">"Asynchronous Change Data Capture and Redo Log Files"</a> for more information.</p>
<p>Change Data Capture can automatically disable an asynchronous change set if there is an internal capture error. The publisher must check the alert log for more information, take any necessary actions to adjust to the DDL or recover from the internal error, and explicitly enable the change set. See <a href="#CHDGJABD">"Recovering from Errors Returned on Asynchronous Change Sets"</a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="i1027287"></a><a id="DWHSG8450"></a>
<div class="sect3">
<h4 class="sect3">Stopping Capture on DDL for Asynchronous Change Sets</h4>
<p><a id="sthref692"></a><a id="sthref693"></a>The publisher can specify that a change set be automatically disabled by Change Data Capture if DDL is encountered. Some DDL commands can adversely affect capture, such as dropping a source table column that is being captured. If the change set stops on DDL, the publisher has a chance to analyze and fix the problem before capture proceeds. If the change set does not stop on DDL, internal capture errors are possible after DDL occurs.</p>
<p>The publisher can specify whether a change set stops on DDL when creating or altering the change set. The publisher can alter the <code>PRODUCTS_SET</code> change set to stop on DDL with the following call:</p>
<pre>
BEGIN
DBMS_CDC_PUBLISH.ALTER_CHANGE_SET(
</pre>
<pre>
change_set_name  =&gt; 'PRODUCTS_SET',
stop_on_ddl      =&gt; 'y');
</pre>
<pre>
END;
/
</pre>
<p>The publisher can alter the <code>PRODUCTS_SET</code> change set so that it does not stop on DDL by setting <code>stop_on_ddl</code> to <code>'n'</code>.</p>
<p>If a DDL statement causes processing to stop, a message is written to the alert log indicating the DDL statement and change set involved. For example, if a <code>TRUNCATE TABLE</code> DDL statement causes the <code>PRODUCTS_SET</code> change set to stop processing, the alert log contains lines such as the following:</p>
<pre>
Change Data Capture received DDL for change set PRODUCTS_SET
Change Data Capture received DDL and stopping: truncate table products
</pre>
<p><a id="sthref694"></a>Because they do not affect the column data itself, the following DDL statements do not cause Change Data Capture to stop capturing change data when the <code>stop_on_ddl</code> parameter is set to <code>'Y'</code>:</p>
<ul>
<li>
<p><code>ANALYZE TABLE</code></p>
</li>
<li>
<p><code>LOCK TABLE</code></p>
</li>
<li>
<p><code>GRANT</code> privileges to access a table</p>
</li>
<li>
<p><code>REVOKE</code> privileges to access a table</p>
</li>
<li>
<p><code>COMMENT</code> on a table</p>
</li>
<li>
<p><code>COMMENT</code> on a column</p>
</li>
</ul>
<p>These statements can be issued on the source database without concern for their impact on Change Data Capture processing. For example, when an <code>ANALYZE</code> <code>TABLE</code> command is issued on the <code>PRODUCTS</code> source table, the alert log on the staging database will contain a line similar to the following when the <code>stop_on_ddl</code> parameter is set to <code>'Y'</code>:</p>
<pre>
Change Data Capture received DDL and ignoring: analyze table products compute statistics
</pre></div>
<!-- class="sect3" -->
<a id="CHDGJABD"></a><a id="DWHSG8451"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Recovering from Errors Returned on Asynchronous Change Sets</h4>
<p><a id="sthref695"></a><a id="sthref696"></a><a id="sthref697"></a>Errors during asynchronous Change Data Capture are possible due to a variety of circumstances. If a change set stops on DDL, that DDL must be removed before capture can continue. If a change set does not stop on DDL, but a DDL change occurs that affects capture, it can result in an Oracle error. There are also system conditions that can cause Oracle errors, such as being out of disk space.</p>
<p>In all these cases, the change set is disabled and marked as having an error. Subscriber procedures detect when a change set has an error and return the following message:</p>
<pre>
ORA-31514: change set disabled due to capture error
</pre>
<p>The publisher must check the alert log for more information and attempt to fix the underlying problem. The publisher can then attempt to recover from the error by calling <code>ALTER_CHANGE_SET</code> with the <code>recover_after_error</code> and <code>remove_ddl</code> parameters set to '<code>y</code>'.</p>
<p>The publisher can repeat this procedure as many times as necessary to resolve the problem. When recovery succeeds, the error is removed from the change set and the publisher can enable the asynchronous change set (as described in <a href="#i1027252">"Enabling and Disabling Asynchronous Change Sets"</a>).</p>
<p>The publisher should be aware that if there are multiple consecutive DDLs, the change set stops for each one separately. For example, suppose there are two consecutive DDLs. When the change set stops for the first DDL, the publisher must remove that DDL and then re-enable capture for the change set. The change set will then stop for the second DDL. The publisher must remove the second DDL and re-enable capture for the change set again.</p>
<p>If more information is needed to resolve capture errors, the publisher can query the <code>DBA_APPLY_ERROR</code> view to see information about Streams apply errors; capture errors correspond to Streams apply errors. The publisher must always use the <code>DBMS_CDC_PUBLISH.ALTER_CHANGE_SET</code> procedure to recover from capture errors because both Streams and Change Data Capture actions are needed for recovery and only the <code>DBMS_CDC_PUBLISH.ALTER_CHANGE_SET</code> procedure performs both sets of actions. See <a class="olink STRMS" href="../e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information about the error queue and apply errors.</p>
<p>The following two scenarios demonstrate how a publisher might investigate and then recover from two different types of errors returned to Change Data Capture:</p>
<a id="DWHSG8452"></a>
<div class="sect4"><a id="sthref698"></a>
<h5 class="sect4"><a id="sthref699"></a>An Error Due to Running Out of Disk Space</h5>
<p>The publisher can view the contents of the alert log to determine which error is being returned for a given change set and which SCN is not being processed. For example, the alert log may contain lines such as the following (where LCR refers to a logical change record):</p>
<pre>
Change Data Capture has encountered error number: 1688 for change set: 
   CHICAGO_DAILY
Change Data Capture did not process LCR with scn 219337
</pre>
<p>The publisher can determine the message associated with the error number specified in the alert log by querying the <code>DBA_APPLY_ERROR</code> view for the error message text, where the <code>APPLY_NAME</code> in the <code>DBA_APPLY_ERROR</code> view equals the <code>APPLY_NAME</code> of the change set specified in the alert log. For example:</p>
<pre>
SQL&gt; SELECT ERROR_MESSAGE FROM DBA_APPLY_ERROR
       WHERE APPLY_NAME =
      (SELECT APPLY_NAME FROM ALL_CHANGE_SETS WHERE SET_NAME ='CHICAGO_DAILY');

ERROR_MESSAGE 
-------------------------------------------------------------------------------- 
ORA-01688: unable to extend table LOGADMIN.CT1 partition P1 by 32 in tablespace 
    TS_CHICAGO_DAILY 
</pre>
<p>After taking action to fix the problem that is causing the error, the publisher can attempt to recover from the error. For example, the publisher can attempt to recover the <code>CHICAGO_DAILY</code> change set after an error with the following call:</p>
<pre>
BEGIN
DBMS_CDC_PUBLISH.ALTER_CHANGE_SET(
  change_set_name     =&gt; 'CHICAGO_DAILY',
  recover_after_error =&gt; 'y');
END;
/
</pre>
<p>If the recovery does not succeed, then an error is returned and the publisher can take further action to attempt to resolve the problem. The publisher can retry the recovery procedure as many times as necessary to resolve the problem.</p>
<div align="center">
<div class="inftblinformal"><br />
<table class="cellalignment1386">
<tbody>
<tr class="cellalignment1372">
<td class="cellalignment1378">
<p class="notep1">Note:</p>
When recovery succeeds, the publisher must remember to enable the change set. After being enabled, the change data capture operation will proceed with the logical change record (LCR) where the error occurred. No change data will be lost.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
</div>
<!-- class="sect4" -->
<a id="DWHSG8453"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref700"></a>
<h5 class="sect4"><a id="sthref701"></a>An Error Due to Stopping on DDL</h5>
<p>Suppose a SQL <code>TRUNCATE</code> <code>TABLE</code> statement is issued against the <code>PRODUCTS</code> source table and the <code>stop_on_ddl</code> parameter is set to <code>'Y'</code>, then an error such as the following is returned from an attempt to enable the change set:</p>
<pre>
ERROR at line 1:
ORA-31468: cannot process DDL change record
ORA-06512: at "SYS.DBMS_CDC_PUBLISH", line 79
ORA-06512: at line 2
</pre>
<p>The alert log will contain lines similar to the following:</p>
<pre>
Mon Jun  9 16:13:44 2003
Change Data Capture received DDL for change set PRODUCTS_SET
Change Data Capture received DDL and stopping: truncate table products
Mon Jun  9 16:13:50 2003
Change Data Capture did not process LCR with scn 219777
Streams Apply Server P001 pid=19 OS id=11730 stopped
Streams Apply Reader P000 pid=17 OS id=11726 stopped
Streams Apply Server P000 pid=17 OS id=11726 stopped
Streams Apply Server P001 pid=19 OS id=11730 stopped
Streams AP01 with pid=15, OS id=11722 stopped
</pre>
<p>Because the <code>TRUNCATE</code> <code>TABLE</code> statement removes all rows from a table, the publisher will want to notify subscribers before taking action to re-enable Change Data Capture processing. He or she might suggest to subscribers that they purge and extend their subscription windows. The publisher can then attempt to restore Change Data Capture processing by altering the change set and specifying the <code><a id="sthref702"></a>remove_ddl</code> <code>=&gt;</code> <code>'Y'</code> parameter along with the <code>recover_after_error</code> <code>=&gt;</code> <code>'Y'</code> parameter, as follows:</p>
<pre>
BEGIN
DBMS_CDC_PUBLISH.ALTER_CHANGE_SET(
</pre>
<pre>
  change_set_name     =&gt; 'PRODUCTS_SET',
  recover_after_error =&gt; 'y',
  remove_ddl          =&gt; 'y');
</pre>
<pre>
END;
/
</pre>
<p>After this procedure completes, the alert log will contain lines similar to the following:</p>
<pre>
Mon Jun  9 16:20:17 2003
Change Data Capture received DDL and ignoring: truncate table products
The scn for the truncate statement is 202998
</pre>
<p>Now, the publisher must enable the change set. All change data that occurred after the <code>TRUNCATE TABLE</code> statement will be reflected in the change table. No change data will be lost.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="DWHSG8454"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref703"></a>
<h3 class="sect2">Managing Synchronous Change Sets</h3>
<p>The publisher can enable and disable synchronous change sets. When a change set is disabled, it cannot process new change data until the change set is enabled.</p>
<a id="DWHSG8455"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref704"></a>
<h4 class="sect3">Enabling and Disabling Synchronous Change Sets</h4>
<p>Synchronous change sets are always created enabled. Asynchronous change sets are always created disabled.</p>
<p>The publisher can enable the <code>PRODUCTS_SET</code> synchronous change set with the following call:</p>
<pre>
BEGIN
DBMS_CDC_PUBLISH.ALTER_CHANGE_SET(
</pre>
<pre>
change_set_name =&gt; 'PRODUCTS_SET',
enable_capture  =&gt; 'y');
</pre>
<pre>
END;
/
</pre>
<p>The publisher can disable the <code>PRODUCTS_SET</code> synchronous change set using the same call, but with <code>enable_capture</code> set to <code>'n'</code>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1027418"></a><a id="DWHSG8456"></a>
<div class="sect2">
<h3 class="sect2">Managing Change Tables</h3>
<p><a id="sthref705"></a>All change table management tasks are the responsibility of the publisher with one exception: purging change tables of unneeded data. This task requires action from both the publisher and the subscriber to work most effectively.</p>
<p>The following topics are discussed in this section:</p>
<ul>
<li>
<p><a href="#CHDGECAI">Creating Change Tables</a></p>
</li>
<li>
<p><a href="#CHDCFGBH">Understanding Change Table Control Columns</a></p>
</li>
<li>
<p><a href="#CHDBAEJG">Understanding TARGET_COLMAP$ and SOURCE_COLMAP$ Values</a></p>
</li>
<li>
<p><a href="#CIHIAJEG">Using Change Markers</a></p>
</li>
<li>
<p><a href="#CIHCHGGC">Controlling Subscriber Access to Change Tables</a></p>
</li>
<li>
<p><a href="#i1027449">Purging Change Tables of Unneeded Data</a></p>
</li>
<li>
<p><a href="#i1027511">Dropping Change Tables</a></p>
</li>
</ul>
<a id="CHDGECAI"></a><a id="DWHSG8457"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref706"></a><a id="sthref707"></a>Creating Change Tables</h4>
<p>When creating change tables, the publisher should be aware that Oracle recommends the following:</p>
<ul>
<li>
<p><a id="sthref708"></a><a id="sthref709"></a>For all modes of Change Data Capture, publishers should not create change tables in system tablespaces.</p>
<p>Either of the following methods can be used to ensure that change tables are created in tablespaces managed by the publisher. The first method creates all the change tables created by the publisher in a single tablespace, while the second method allows the publisher to specify a different tablespace for each change table.</p>
<ul>
<li>
<p>When the database administrator creates the account for the publisher, he or she can specify a default tablespace. For example:</p>
<pre>
CREATE USER cdcpub DEFAULT TABLESPACE ts_cdcpub;
</pre></li>
<li>
<p>When the publisher creates a change table, he or she can use the <code>options_string</code> parameter to specify a tablespace for the change table being created. See Step 4 in <a href="#i1025616">"Performing Synchronous Publishing"</a> for an example.</p>
</li>
</ul>
<p>If both methods are used, the tablespace specified by the publisher in the <code>options_string</code> parameter takes precedence over the default tablespace specified in the SQL <code>CREATE</code> <code>USER</code> statement.</p>
</li>
<li>
<p>For asynchronous Change Data Capture, the publisher should be certain that the source table that will be referenced in a <code>DBMS_CDC_PUBLISH.CREATE_CHANGE_TABLE</code> procedure has been created prior to calling this procedure, particularly if the change set that will be specified in the procedure has the <code>stop_on_ddl</code> parameter set to <code>'Y'</code>.</p>
<p>Suppose the publisher created a change set with the <code>stop_on_ddl</code> parameter set to <code>'Y'</code>, then created the change table, and then the source table was created. In this scenario, the DDL that creates the source table would trigger the <code>stop_on_ddl</code> condition and cause Change Data Capture processing to stop.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The publisher must not attempt to control a change table's p<a id="sthref710"></a><a id="sthref711"></a>artitioning properties. Change Data Capture automatically manages the change table partitioning as part of its change table management.</div>
</li>
<li>
<p>For asynchronous Change Data Capture, the source database DBA should create an unconditional log group for all source table columns that will be captured in a change table. This should be done before any change tables are created on a source table. If an unconditional log group is not created for source table columns to be captured, then when an update DML operation occurs, some unchanged user column values in change tables will be null instead of reflecting the actual source table value. This will require the publisher to evaluate the <code>TARGET_COLMAP$</code> control column to distinguish unchanged column values from column values that are actually null. See <a href="#i1027101">"Asynchronous Change Data Capture and Supplemental Logging"</a> for information on creating unconditional log groups and see <a href="#CHDCFGBH">"Understanding Change Table Control Columns"</a> for information on control columns.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CHDCFGBH"></a><a id="DWHSG8458"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Understanding Change Table Control Columns</h4>
<p><a id="sthref712"></a>A change table consists of two things: the change data itself, which is stored in a database table, and the system metadata necessary to maintain the change table, which includes control columns.</p>
<p><a href="#CHDBCGCB">Table 17-11</a> describes the control columns for a change table, including the column name, datatype, mode, whether the column is optional or not, and a description.</p>
<p>The mode indicates the type of Change Data Capture associated with the column. A value of <code>ALL</code> indicates that the column is associated with the synchronous mode and all modes of asynchronous Change Data Capture. Note that for both synchronous and asynchronous Change Data Capture, if the subscriber wants a query of a subscriber view to return <a id="sthref713"></a><a id="sthref714"></a>DML changes in the order in which they occurred, the query should order data by <code>CSCN$</code> and then <code>RSID$</code>.</p>
<p>A control column is considered optional if the publisher can choose to exclude it from a change table. <a href="#CHDBCGCB">Table 17-11</a> identifies which control columns are optional under what modes. All optional control columns are specified with a parameter in the <code>DBMS_CDC_PUBLISH.CREATE_CHANGE_TABLE</code> procedure. The syntax for the <code>DBMS_CDC_PUBLISH.CREATE_CHANGE_TABLE</code> procedure is documented in <a class="olink ARPLS023" href="../../appdev.112/e40758/d_cdcpub.htm#ARPLS023"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
<div class="tblformalwide">
<p class="titleintable"><a id="DWHSG8459"></a><a id="sthref715"></a><a id="CHDBCGCB"></a>Table 17-11 Control Columns for a Change Table</p>
<table class="cellalignment1383" title="Control Columns for a Change Table" summary="This table describes the control columns for a change table, including the column name, datatype, mode, and a description." dir="ltr">
<thead>
<tr class="cellalignment1372">
<th class="cellalignment1382" id="r1c1-t22">Column</th>
<th class="cellalignment1382" id="r1c2-t22">Datatype</th>
<th class="cellalignment1382" id="r1c3-t22">Mode</th>
<th class="cellalignment1382" id="r1c4-t22">Optional Column</th>
<th class="cellalignment1382" id="r1c5-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r2c1-t22" headers="r1c1-t22">
<p><code><a id="sthref716"></a><a id="sthref717"></a>OPERATION$</code></p>
</td>
<td class="cellalignment1378" headers="r2c1-t22 r1c2-t22">
<p><code>CHAR(2)</code></p>
</td>
<td class="cellalignment1378" headers="r2c1-t22 r1c3-t22">
<p>All</p>
</td>
<td class="cellalignment1378" headers="r2c1-t22 r1c4-t22">
<p>No</p>
</td>
<td class="cellalignment1378" headers="r2c1-t22 r1c5-t22">
<p>The value in this column can be any one of the following<a id="sthref718" href="#sthref718" onclick='footdisplay(1,"If you specify a query based on this column, specify the \u003ccode\u003eI\u003c/code\u003e or \u003ccode\u003eD\u003c/code\u003e column values as \"I \" or \"D \", respectively. The \u003ccode\u003eOPERATION$\u003c/code\u003e column is a 2-character column; values are left-justified and space-filled. A query that specifies a value of \"I\" or \"D\" will return no values. ")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a>:</p>
<p><code>I</code>: Indicates this row represents an insert operation</p>
<p><code>UO</code>: Indicates this row represents the before-image of an updated source table row for the following cases:</p>
<ul>
<li>
<p>Asynchronous Change Data Capture</p>
</li>
<li>
<p>Synchronous Change Data Capture when the change table includes a primary key-based object ID and a captured column that is not a primary key has changed.</p>
</li>
</ul>
<p><code>UU</code>: Indicates this row represents the before-image of an updated source table row for synchronous Change Data Capture, in cases other than those represented by <code>UO</code>.</p>
<p><code>UN</code>: Indicates this row represents the after-image of an updated source table row.</p>
<p><code>D</code>: Indicates this row represents a delete operation.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r3c1-t22" headers="r1c1-t22">
<p><code><a id="sthref719"></a><a id="sthref720"></a>CSCN$</code></p>
</td>
<td class="cellalignment1378" headers="r3c1-t22 r1c2-t22">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1378" headers="r3c1-t22 r1c3-t22">
<p>All</p>
</td>
<td class="cellalignment1378" headers="r3c1-t22 r1c4-t22">
<p>No</p>
</td>
<td class="cellalignment1378" headers="r3c1-t22 r1c5-t22">
<p>For synchronous CDC, the value for the <code>EXTEND_WINDOW</code> operation. For asynchronous CDC, the value for the DML operation.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r4c1-t22" headers="r1c1-t22">
<p><code>DDLDESC$</code></p>
</td>
<td class="cellalignment1378" headers="r4c1-t22 r1c2-t22">
<p><code>CLOB</code></p>
</td>
<td class="cellalignment1378" headers="r4c1-t22 r1c3-t22">
<p>Asynchronous</p>
</td>
<td class="cellalignment1378" headers="r4c1-t22 r1c4-t22">
<p>Yes</p>
</td>
<td class="cellalignment1378" headers="r4c1-t22 r1c5-t22">
<p>A clob containing the actual DDL statement executed.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r5c1-t22" headers="r1c1-t22">
<p><code>DDLPDOBJN$</code></p>
</td>
<td class="cellalignment1378" headers="r5c1-t22 r1c2-t22">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1378" headers="r5c1-t22 r1c3-t22">
<p>Asynchronous</p>
</td>
<td class="cellalignment1378" headers="r5c1-t22 r1c4-t22">
<p>Yes</p>
</td>
<td class="cellalignment1378" headers="r5c1-t22 r1c5-t22">
<p>This is not used in this release.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r6c1-t22" headers="r1c1-t22">
<p><code>DDLOPER$</code></p>
</td>
<td class="cellalignment1378" headers="r6c1-t22 r1c2-t22">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1378" headers="r6c1-t22 r1c3-t22">
<p>Asynchronous</p>
</td>
<td class="cellalignment1378" headers="r6c1-t22 r1c4-t22">
<p>Yes</p>
</td>
<td class="cellalignment1378" headers="r6c1-t22 r1c5-t22">
<p>A bit vector that indicates what kind of DDL operation happened.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r7c1-t22" headers="r1c1-t22">
<p><code><a id="sthref721"></a><a id="sthref722"></a>RSID$</code></p>
</td>
<td class="cellalignment1378" headers="r7c1-t22 r1c2-t22">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1378" headers="r7c1-t22 r1c3-t22">
<p>All</p>
</td>
<td class="cellalignment1378" headers="r7c1-t22 r1c4-t22">
<p>Yes</p>
</td>
<td class="cellalignment1378" headers="r7c1-t22 r1c5-t22">
<p>Unique row sequence ID within this transaction.<a id="sthref723" href="#sthref723" onclick='footdisplay(2,"You can use the \u003ccode\u003eRSID$\u003c/code\u003e column to associate the after-image with the before-image of a given operation. The value of the after-image \u003ccode\u003eRSID$\u003c/code\u003e column always matches the value of the before-image \u003ccode\u003eRSID$\u003c/code\u003e column value for a given update operation.")'><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a> The <code>RSID$</code> column reflects an operation's capture order within a transaction, but not across transactions. The publisher cannot use the <code>RSID$</code> column value by itself to order committed operations across transactions; it must be used in conjunction with the <code>CSCN$</code> column value.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r8c1-t22" headers="r1c1-t22">
<p><code><a id="sthref724"></a><a id="sthref725"></a>SOURCE_COLMAP$</code></p>
</td>
<td class="cellalignment1378" headers="r8c1-t22 r1c2-t22">
<p><code>RAW(128)</code></p>
</td>
<td class="cellalignment1378" headers="r8c1-t22 r1c3-t22">
<p>Synchronous</p>
</td>
<td class="cellalignment1378" headers="r8c1-t22 r1c4-t22">
<p>Yes</p>
</td>
<td class="cellalignment1378" headers="r8c1-t22 r1c5-t22">
<p>Bit mask<a id="CHDHIFHD" href="#CHDHIFHD" onclick='footdisplay(3,"A bit mask is an array of binary values that indicate which columns in a row have been updated.")'><sup class="tablefootnote">Foot&nbsp;3&nbsp;</sup></a> of updated columns in the source table.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r9c1-t22" headers="r1c1-t22">
<p><code><a id="sthref726"></a><a id="sthref727"></a>TARGET_COLMAP$</code></p>
</td>
<td class="cellalignment1378" headers="r9c1-t22 r1c2-t22">
<p><code>RAW(128)</code></p>
</td>
<td class="cellalignment1378" headers="r9c1-t22 r1c3-t22">
<p>All</p>
</td>
<td class="cellalignment1378" headers="r9c1-t22 r1c4-t22">
<p>Yes</p>
</td>
<td class="cellalignment1378" headers="r9c1-t22 r1c5-t22">
<p>Bit mask<a id="sthref728" href="#sthref728" onclick='footdisplay(3,"A bit mask is an array of binary values that indicate which columns in a row have been updated.")'><sup class="footnotenumber">Footref&nbsp;3</sup></a> of updated columns in the change table.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r10c1-t22" headers="r1c1-t22">
<p><code><a id="sthref729"></a><a id="sthref730"></a>COMMIT_TIMESTAMP$</code></p>
</td>
<td class="cellalignment1378" headers="r10c1-t22 r1c2-t22">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1378" headers="r10c1-t22 r1c3-t22">
<p>All</p>
</td>
<td class="cellalignment1378" headers="r10c1-t22 r1c4-t22">
<p>No</p>
</td>
<td class="cellalignment1378" headers="r10c1-t22 r1c5-t22">
<p>Commit time of this transaction.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r11c1-t22" headers="r1c1-t22">
<p><code><a id="sthref731"></a><a id="sthref732"></a>TIMESTAMP$</code></p>
</td>
<td class="cellalignment1378" headers="r11c1-t22 r1c2-t22">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1378" headers="r11c1-t22 r1c3-t22">
<p>All</p>
</td>
<td class="cellalignment1378" headers="r11c1-t22 r1c4-t22">
<p>Yes</p>
</td>
<td class="cellalignment1378" headers="r11c1-t22 r1c5-t22">
<p>Time when the operation occurred in the source table.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r12c1-t22" headers="r1c1-t22">
<p><code><a id="sthref733"></a><a id="sthref734"></a>USERNAME$</code></p>
</td>
<td class="cellalignment1378" headers="r12c1-t22 r1c2-t22">
<p><code>VARCHAR2(30)</code></p>
</td>
<td class="cellalignment1378" headers="r12c1-t22 r1c3-t22">
<p>All</p>
</td>
<td class="cellalignment1378" headers="r12c1-t22 r1c4-t22">
<p>Yes</p>
</td>
<td class="cellalignment1378" headers="r12c1-t22 r1c5-t22">
<p>Name of the user who caused the operation. Value is always <code>NULL</code> for change sources created on Oracle Databases prior to release 10.2.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r13c1-t22" headers="r1c1-t22">
<p><code><a id="sthref735"></a><a id="sthref736"></a>ROW_ID$</code></p>
</td>
<td class="cellalignment1378" headers="r13c1-t22 r1c2-t22">
<p><code>ROW_ID</code></p>
</td>
<td class="cellalignment1378" headers="r13c1-t22 r1c3-t22">
<p>All</p>
</td>
<td class="cellalignment1378" headers="r13c1-t22 r1c4-t22">
<p>Yes</p>
</td>
<td class="cellalignment1378" headers="r13c1-t22 r1c5-t22">
<p>Row ID of affected row in source table. Value is always NULL for change sources created on Oracle Databases prior to release 10.2.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r14c1-t22" headers="r1c1-t22">
<p><code><a id="sthref737"></a><a id="sthref738"></a>XIDUSN$</code></p>
</td>
<td class="cellalignment1378" headers="r14c1-t22 r1c2-t22">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1378" headers="r14c1-t22 r1c3-t22">
<p>Asynchronous</p>
</td>
<td class="cellalignment1378" headers="r14c1-t22 r1c4-t22">
<p>No</p>
</td>
<td class="cellalignment1378" headers="r14c1-t22 r1c5-t22">
<p>Transaction ID undo segment number.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r15c1-t22" headers="r1c1-t22">
<p><code><a id="sthref739"></a><a id="sthref740"></a>XIDSLT$</code></p>
</td>
<td class="cellalignment1378" headers="r15c1-t22 r1c2-t22">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1378" headers="r15c1-t22 r1c3-t22">
<p>Asynchronous</p>
</td>
<td class="cellalignment1378" headers="r15c1-t22 r1c4-t22">
<p>No</p>
</td>
<td class="cellalignment1378" headers="r15c1-t22 r1c5-t22">
<p>Transaction ID slot number.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r16c1-t22" headers="r1c1-t22">
<p><code><a id="sthref741"></a><a id="sthref742"></a>XIDSEQ$</code></p>
</td>
<td class="cellalignment1378" headers="r16c1-t22 r1c2-t22">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1378" headers="r16c1-t22 r1c3-t22">
<p>Asynchronous</p>
</td>
<td class="cellalignment1378" headers="r16c1-t22 r1c4-t22">
<p>No</p>
</td>
<td class="cellalignment1378" headers="r16c1-t22 r1c5-t22">
<p>Transaction ID sequence number.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r17c1-t22" headers="r1c1-t22">
<p><code><a id="sthref743"></a><a id="sthref744"></a>SYS_NC_OID$</code></p>
</td>
<td class="cellalignment1378" headers="r17c1-t22 r1c2-t22">
<p><code>RAW(16)</code></p>
</td>
<td class="cellalignment1378" headers="r17c1-t22 r1c3-t22">
<p>Synchronous</p>
</td>
<td class="cellalignment1378" headers="r17c1-t22 r1c4-t22">
<p>Yes</p>
</td>
<td class="cellalignment1378" headers="r17c1-t22 r1c5-t22">
<p>Object ID.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>If you specify a query based on this column, specify the <code>I</code> or <code>D</code> column values as "I " or "D ", respectively. The <code>OPERATION$</code> column is a 2-character column; values are left-justified and space-filled. A query that specifies a value of "I" or "D" will return no values.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>You can use the <code>RSID$</code> column to associate the after-image with the before-image of a given operation. The value of the after-image <code>RSID$</code> column always matches the value of the before-image <code>RSID$</code> column value for a given update operation.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;3&nbsp;</sup>A bit mask is an array of binary values that indicate which columns in a row have been updated.</p>
</div>
<!-- class="sect3" -->
<a id="CHDBAEJG"></a><a id="DWHSG8460"></a>
<div class="sect3">
<h4 class="sect3">Understanding TARGET_COLMAP$ and SOURCE_COLMAP$ Values</h4>
<p><a id="sthref745"></a>The <code><a id="sthref746"></a><a id="sthref747"></a>TARGET_COLMAP$</code> and <code><a id="sthref748"></a><a id="sthref749"></a>SOURCE_COLMAP$</code> columns are used to indicate which columns in a row have changed. The <code>TARGET_COLMAP$</code> column indicates which columns in the change table row have changed. The <code>SOURCE_COLMAP$</code> column (which is included for synchronous change tables only) indicates which columns in a source table row have changed.</p>
<p>Because the datatype of the <code>TARGET_COLMAP$</code> and the <code>SOURCE_COLMAP$</code> columns is <code>RAW(128)</code>, each column can hold 128 bytes of binary information. This binary information consists of words strung together with the low order byte on the left and the high order byte on the right. By default, when the field is displayed, the system interprets each byte and displays a value for each. <a href="#i1025844">Example 17-1</a> provides a sample <code>TARGET_COLMAP$</code> value. The text following the example explains how to interpret this data.</p>
<div class="example">
<p class="titleinexample"><a id="i1025844"></a><a id="DWHSG8461"></a>Example 17-1 Sample TARGET_COLMAP$ VALUE</p>
<pre>
FE110000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000
</pre>
<p>In <a href="#i1025844">Example 17-1</a>, the first 'FE' is the low order byte and the last '00' is the high order byte. To correctly interpret the meaning of the values, you must consider which bits are set in each byte. The bits in the bitmap are counted starting at zero. The first bit is bit 0, the second bit is bit 1, and so on. Bit 0 is always ignored. For the other bits, if a particular bit is set to 1, it means that the value for that column has been changed.</p>
<p>To interpret the string of bytes as presented in the <a href="#i1025844">Example 17-1</a>, you read from left to right. The first byte is the string 'FE'. Broken down into bits (again from left to right) this string is "1111 1110", which maps to columns " 7,6,5,4 3,2,1,-" in the change table (where the hyphen represents the ignored bit). The first bit tells you if column 7 in the change table has changed. The right-most bit is ignored. The values in <a href="#i1025844">Example 17-1</a> indicate that the first 7 columns have a value present. This is typical - the first several columns in a change table are control columns.</p>
<p>The next byte in <a href="#i1025844">Example 17-1</a> is the string '11'. Broken down into bits, this string is "0001 0001", which maps to columns "15,14,13,12 11,10,9,8" in the change table. These bits indicate that columns 8 and 12 are changed. Columns 9, 10, 11, 13, 14, 15, are not changed. The rest of the string is all '00', indicating that none of the other columns has been changed.</p>
<p>A publisher can issue the following query to determine the mapping of column numbers to column names:</p>
<pre>
SELECT COLUMN_NAME, COLUMN_ID FROM ALL_TAB_COLUMNS 
WHERE OWNER='PUBLISHER_STEWART' AND TABLE_NAME='MY_CT';

COLUMN_NAME                    COLUMN_ID
------------------------------ ----------
OPERATION$                           1
CSCN$                                2
COMMIT_TIMESTAMP$                    3
XIDUSN$                              4
XIDSLT$                              5
XIDSEQ$                              6
RSID$                                7
TARGET_COLMAP$                       8
C_ID                                 9
C_KEY                                10
C_ZIP                                11

COLUMN_NAME                     COLUMN_ID
------------------------------ ----------
C_DATE                               12
C_1                                  13
C_3                                  14
C_5                                  15
C_7                                  16
C_9                                  17
</pre>
<p>Using <a href="#i1025844">Example 17-1</a>, the publisher can conclude that following columns were changed in the particular change row in the change table represented by this <code>TARGET_COLMAP$</code> value: <code>OPERATION$</code>, <code>CSCN$</code>, <code>COMMIT_TIMESTAMP$</code>, <code>XIDUSN$</code>, <code>XIDSLT$</code>, <code>XIDSEQ$</code>, <code>RSID$</code>, <code>TARGET_COLMAP$</code>, and <code>C_DATE</code>.</p>
<p>Note that Change Data Capture generates values for all control columns in all change rows, so the bits corresponding to control columns are always set to 1 in every <code>TARGET_COLMAP$</code> column. Bits that correspond to user columns that have changed are set to 1 for the <code>OPERATION$</code> column values <code>UN</code> and <code>I</code>, as appropriate. (See <a href="#CHDBCGCB">Table 17-11</a> for information about the <code>OPERATION$</code> column values.) Also note that if you use asynchronous CDC, you will always see a 1 for the columns that were included in the <code>UPDATE</code> <code>SET</code> clause, irrespective of whether the value was actually changed from its original value. For synchronous CDC, you will only see a 1 if the value was changed from its original value.</p>
<p>A common use for the values in the <code>TARGET_COLMAP$</code> column is for determining the meaning of a null value in a change table. A column value in a change table can be null for two reasons: the value was changed to null by a user or application, or Change Data Capture inserted a null value into the column because a value was not present in the redo data from the source table. If a user changed the value to null, the bit for that column will be set to 1; if Change Data Capture set the value to null, then the column will be set to 0.</p>
<p>Values in the <code>SOURCE_COLMAP$</code> column are interpreted in a similar manner, with the following exceptions:</p>
</div>
<!-- class="example" -->
<ul>
<li>
<p>The <code>SOURCE_COLMAP$</code> column refers to columns of source tables, not columns of change tables.</p>
</li>
<li>
<p>The <code>SOURCE_COLMAP$</code> column does not reference control columns because these columns are not present in the source table.</p>
</li>
<li>
<p>Changed source columns are set to 1 in the <code>SOURCE_COLMAP$</code> column for <code>OPERATION$</code> column values <code>UO</code>, <code>UU</code>, <code>UN</code>, and <code>I</code>, as appropriate. (See <a href="#CHDBCGCB">Table 17-11</a> for information about the <code>OPERATION$</code> column values.)</p>
</li>
<li>
<p>The <code>SOURCE_COLMAP$</code> column is valid only for synchronous change tables.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHIAJEG"></a><a id="DWHSG8462"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using Change Markers</h4>
<p>The following example illustrates how to use change markers. First, create the change set:</p>
<pre>
BEGIN
   DBMS_CDC_PUBLISH.CREATE_CHANGE_SET (
      CHANGE_SET_NAME     =&gt; 'async_set1',
      CHANGE_SOURCE_NAME  =&gt; 'HOTLOG_SOURCE',
      STOP_ON_DDL         =&gt; 'N',
      BEGIN_DATE          =&gt; SYSDATE,
      END_DATE            =&gt; SYSDATE+5);

PL/SQL procedure successfully completed
</pre>
<p>Next, create the change table. Note that this should have the three DDL markers <code>ddloper$</code>, <code>ddldesc$</code>, and <code>ddlpdobjn$</code>.</p>
<pre>
BEGIN
   DBMS_CDC_PUBLISH.CREATE_CHANGE_TABLE (
      OWNER             =&gt; 'tcdcpub',
      CHANGE_TABLE_NAME =&gt; 'cdc_psales_act',
      CHANGE_SET_NAME   =&gt; 'async_set1',
      SOURCE_SCHEMA     =&gt; 'tcdcpub',
      SOURCE_TABLE      =&gt; 'cdc_psales',
      COLUMN_TYPE_LIST  =&gt; 'PROD_IC NUMBER(6)
         NUMBER, TIME_ID DATE',
      CAPTURE_VALUES    =&gt; 'both',
      RS_ID             =&gt; 'N',
      ROW_ID            =&gt; 'N',
      USER_ID           =&gt; 'N',
      TIMESTAMP         =&gt; 'N',
      OBJECT_ID         =&gt; 'N',
      SOURCE_COLMAP     =&gt; 'N',
      TARGET_COLMAP     =&gt; 'Y',
      OPTIONS_STRING    =&gt; NULL,
      DDL_MARKERS       =&gt; 'Y');
END;
/

PL/SQL procedure successfully completed.
describe cdc_psales_act;

Name                    Null?     Type
---------------------------------------
OPERATION$                        CHAR(2)
CSCN$                             NUMBER
COMMIT_TIMESTAMP                  DATE
XIDUSN$                           NUMBER
XIDSLT$                           NUMBER
XIDSEQ$                           NUMBER
TARGET_COLMAP$                    RAW(128)
DDLOPER$                          NUMBER
DDLDESC$                          CLOB
DDLPDOBJN$                        NUMBER
PROD_D                            NUMBER(6)
CUST_ID                           NUMBER
TIME_ID                           DATE
</pre>
<p>Then, enable capture for the change set:</p>
<pre>
BEGIN
   DBMS_CDC_PUBLISH.ALTER_CHANGE_SET (
      CHANGE_SET_NAME  =&gt; 'asynch_set1',
      ENABLE_CAPTURE   =&gt; 'Y');
END;
.
PL/SQL procedure successfully completed
</pre>
<p>Finally, issue a DDL statement and see if it is captured:</p>
<pre>
ALTER TABLE cdc_psales DROP PARTITION Dec_06;

SELECT ddloper$, DECODE(ddloper$, NULL, 'NULL',
       DBMS_CDC_PUBLISH.GET_DDLOPER(ddloper$)) 
          AS DDL_OPER
FROM cdc_psales_act
WHERE DDLOPER$ IS NOT NULL
ORDER BY cscn$;

ddloper$            DDL_OPER
---------------------------------
512                 Drop Partition
1 row selected.

SELECT ddldesc$
FROM cdc_psales_act
WHERE ddloper$
IS NOT NULL 
ORDER BY cscn;

DDLDESC$
------------------------
alter table cdc_psales drop partition Dec_06
1 row selected.
</pre></div>
<!-- class="sect3" -->
<a id="CIHCHGGC"></a><a id="DWHSG8463"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Controlling Subscriber Access to Change Tables</h4>
<p><a id="sthref750"></a>The publisher grants privileges to subscribers to allow them access to change tables. Because privileges on source tables are not propagated to change tables, a subscriber might have privileges to perform a <code>SELECT</code> operation on a source table, but might not have privileges to perform a <code>SELECT</code> operation on a change table that references that source table.</p>
<p>The <a id="sthref751"></a><a id="sthref752"></a>publisher controls subscriber access to change data by using the <a id="sthref753"></a>SQL <code>GRANT</code> and <a id="sthref754"></a><code>REVOKE</code> statements to grant and revoke the <code>SELECT</code> privilege on change tables for users and roles. The publisher must grant the <code>SELECT</code> privilege before a subscriber can subscribe to the change table.</p>
<p>The publisher must not grant any <a id="sthref755"></a><a id="sthref756"></a>DML access (use of <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code> statements) to the subscribers on the change tables because a subscriber might inadvertently change the data in the change table, making it inconsistent with its source. Furthermore, the publisher should avoid creating change tables in schemas to which subscribers have DML access.</p>
</div>
<!-- class="sect3" -->
<a id="i1027449"></a><a id="DWHSG8464"></a>
<div class="sect3">
<h4 class="sect3">Purging Change Tables of Unneeded Data</h4>
<p><a id="sthref757"></a>This section describes purge operations. For optimum results, purge operations require action from the subscribers. Each subscriber indicates when he or she is done using change data, and then Change Data Capture or the publisher actually removes (purges) data that is no longer being used by any subscriber from the change table, as follows:</p>
<ul>
<li>
<p>Subscriber</p>
<p><a id="sthref758"></a>When finished using change data, a subscriber must call the <a id="sthref759"></a><a id="sthref760"></a><code>DBMS_CDC_SUBSCRIBE.PURGE_WINDOW</code> procedure. This indicates to Change Data Capture and the publisher that the change data is no longer needed by this subscriber. The <code>DBMS_CDC_SUBSCRIBE.PURGE_WINDOW</code> procedure does not physically remove rows from the change tables; however, the data is removed logically from the subscriber view and can no longer be selected.</p>
<p>In addition, as shown in <a href="#i1026908">"Subscribing to Change Data"</a> beginning, the subscriber should call the <code>DBMS_CDC_SUBSCRIBE.DROP_SUBSCRIPTION</code> procedure to drop unneeded subscriptions.</p>
<p>See <a class="olink ARPLS65553" href="../../appdev.112/e40758/d_cdcsub.htm#ARPLS65553"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code>DBMS_CDC_SUBSCRIBE.DROP_SUBSCRIPTION</code> and the <code>DBMS_CDC_SUBSCRIBE.PURGE_WINDOW</code> procedures.</p>
</li>
<li>
<p>Change Data Capture</p>
<p><a id="sthref761"></a>Change Data Capture creates a purge job using the <a id="sthref762"></a><a id="sthref763"></a><code>DBMS_SCHEDULER</code> package (which runs under the account of the publisher who created the first change table). This purge job calls the <a id="sthref764"></a><a id="sthref765"></a><code>DBMS_CDC_PUBLISH.PURGE</code> procedure to remove data that subscribers are no longer using from the change tables. This job has the name <code>cdc$_default_purge_job</code>. By default, this job runs every 24 hours. You can change the schedule of this job using <code>DBMS_SCHEDULER.SET_ATTRIBUTE</code> and set the <code>repeat_interval</code> attribute. You can verify or modify any other attributes with the <code>DBMS_SCHEDULER</code> package.</p>
<p>This ensures that the size of the change tables does not grow without limit. The call to the <code>DBMS_CDC_PUBLISH.PURGE</code> procedure evaluates all active subscription windows to determine which change data is still needed. It will not purge any data that could be referenced by one or more subscribers with active subscription windows.</p>
<p>See <a class="olink ARPLS72235" href="../../appdev.112/e40758/d_sched.htm#ARPLS72235"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code>DBMS_SCHEDULER</code> package.</p>
</li>
<li>
<p>Publisher</p>
<p><a id="sthref766"></a>The publisher can manually execute a purge operation at any time. The publisher has the ability to perform purge operations at a finer granularity than the automatic purge operation performed by Change Data Capture. There are three purge operations available to the publisher:</p>
<ul>
<li>
<p><code><a id="sthref767"></a><a id="sthref768"></a>DBMS_CDC_PUBLISH.PURGE</code></p>
<p><a id="sthref769"></a><a id="sthref770"></a>Purges all change tables on the staging database. This is the same <code>PURGE</code> operation as is performed automatically by Change Data Capture.</p>
</li>
<li>
<p><code><a id="sthref771"></a><a id="sthref772"></a>DBMS_CDC_PUBLISH.PURGE_CHANGE_SET</code></p>
<p><a id="sthref773"></a><a id="sthref774"></a>Purges all the change tables in a named change set.</p>
</li>
<li>
<p><code><a id="sthref775"></a><a id="sthref776"></a>DBMS_CDC_PUBLISH.PURGE_CHANGE_TABLE</code></p>
<p><a id="sthref777"></a><a id="sthref778"></a>Purges a named changed table.</p>
</li>
</ul>
</li>
</ul>
<p>Thus, calls to the <code>DBMS_CDC_SUBSCRIBE.PURGE_WINDOW</code> procedure by subscribers and calls to the <code>PURGE</code> procedure by Change Data Capture (or one of the <code>PURGE</code> procedures by the publisher) work together: when each subscriber purges a subscription window, it indicates change data that is no longer needed; the <code>PURGE</code> procedure evaluates the sum of the input from all the subscribers before actually purging data. You can purge a table by using the <code>PURGE_CHANGE_TABLE</code> procedure, and you can purge all the change tables in a change set with the <code>PURGE_CHANGE_SET</code> procedure.</p>
<p>If <code>force</code> is set to <code>N</code>, Oracle Database tries to purge with the most efficient means (using a table lock), but does not guarantee it. Setting <code>force</code> to <code>Y</code> guarantees this purge.</p>
<p>Note that it is possible that a subscriber could fail to call <code>PURGE_WINDOW</code>, with the result being that unneeded rows would not be deleted by the purge job. The publisher can query the <code>DBA_SUBSCRIPTIONS</code> view to determine if this is happening, however, the publisher should first consider that subscribers may still be using the change data. In extreme circumstances, a publisher may decide to manually drop an active subscription so that space can be reclaimed. One such circumstance is a subscriber that is an applications program that fails to call the <code>PURGE_WINDOW</code> procedure when appropriate. The <code>DBMS_CDC_PUBLISH.DROP_SUBSCRIPTION</code> procedure lets the publisher drop active subscriptions if circumstances require it; however, the publisher should first consider that subscribers may still be using the change data.</p>
<p>Before using <code>DBMS_CDC_PUBLISH.PURGE</code>, it is important to execute <code>DBMS_CDC_SUBSCRIBE.EXTEND_WINDOW</code>, which protects the data and ensures that the publisher is aware of the required data that is needed by the subscriber. Without running the <code>EXTEND_WINDOW</code> procedure, the purge job will work as expected and it will purge all the data irrespective of whether data has been consumed or not by the subscriber.</p>
</div>
<!-- class="sect3" -->
<a id="i1027511"></a><a id="DWHSG8465"></a>
<div class="sect3">
<h4 class="sect3">Dropping Change Tables</h4>
<p><a id="sthref779"></a><a id="sthref780"></a>To drop a change table, the publisher must call the <a id="sthref781"></a><a id="sthref782"></a><code>DBMS_CDC_PUBLISH.DROP_CHANGE_TABLE</code> procedure. This procedure ensures that both the change table itself and the Change Data Capture metadata for the table are dropped. If the publisher tries to use a SQL <code>DROP</code> <code>TABLE</code> statement on a change table, it will fail with the following error:</p>
<pre>
<a id="sthref783"></a><a id="sthref784"></a>ORA-31496 must use DBMS_CDC_PUBLISH.DROP_CHANGE_TABLE to drop change tables
</pre>
<p>The <code>DBMS_CDC_PUBLISH.DROP_CHANGE_TABLE</code> procedure also safeguards the publisher from inadvertently <a id="sthref785"></a>dropping a change table while there are active subscribers using the change table. If <code>DBMS_CDC_PUBLISH.DROP_CHANGE_TABLE</code> is called while subscriptions are active, the procedure will fail with the foll<a id="sthref786"></a><a id="sthref787"></a>owing error:</p>
<pre>
ORA-31424 change table has active subscriptions
</pre>
<p>If the publisher still wants to drop the change table, in spite of active subscriptions, he or she must call the <code>DROP_CHANGE_TABLE</code> procedure using the <code>force_flag =&gt; 'Y'</code> parameter. This tells Change Data Capture to override its normal safeguards and allow the change table to be dropped despite active subscriptions. The subscriptions will no longer be valid, and subscribers will lose access to the change data.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The<a id="sthref788"></a> <code>DROP</code> <code>USER</code> <code>CASCADE</code> statement will drop all the publisher's change tables, and if any other users have active subscriptions to the (dropped) change table, these will no longer be valid. In addition to dropping the change tables, the <code>DROP</code> <code>USER</code> <code>CASCADE</code> statement drops any change sources, change sets, and <a id="sthref789"></a>subscriptions that are owned by the user specified in the <code>DROP</code> <code>USER</code> <code>CASCADE</code> statement.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1027532"></a><a id="DWHSG8466"></a>
<div class="sect2">
<h3 class="sect2">Exporting and Importing Change Data Capture Objects Using Oracle Data Pump</h3>
<p><a id="sthref790"></a><a id="sthref791"></a><a id="sthref792"></a><a id="sthref793"></a><a id="sthref794"></a><a id="sthref795"></a><a id="sthref796"></a><a id="sthref797"></a>Oracle Data Pump is the supported export and import utility for Change Data Capture.</p>
<p>The following sections describe restrictions, provide examples, and describe publisher considerations for using Oracle Data Pump with Change Data Capture:</p>
<ul>
<li>
<p><a href="#CHDJFBFI">Restrictions on Using Oracle Data Pump with Change Data Capture</a></p>
</li>
<li>
<p><a href="#CHDFHAGC">Examples of Oracle Data Pump Export and Import Commands</a></p>
</li>
<li>
<p><a href="#CHDCICFH">Publisher Considerations for Exporting and Importing Change Tables</a></p>
</li>
<li>
<p><a href="#CHDHJJJJ">Re-Creating AutoLog Change Data Capture Objects After an Import Operation</a></p>
</li>
</ul>
<a id="CHDJFBFI"></a><a id="DWHSG8467"></a>
<div class="sect3">
<h4 class="sect3">Restrictions on Using Oracle Data Pump with Change Data Capture</h4>
<p>Change Data Capture change sources, change sets, change tables, and subscriptions are exported and imported by the Oracle Data Pump <code>expdp</code> and <code>impdp</code> commands with the following restrictions.</p>
<ul>
<li>
<p>Change Data Capture objects are exported and imported only as part of full database export and import operations (those in which the <code>expdp</code> and <code>impdb</code> commands specify the <code>FULL=y</code> parameter). <a id="sthref798"></a><a id="sthref799"></a>Schema-level import and export operations include some underlying objects (for example, the table underlying a change table), but not the Change Data Capture metadata needed for change data capture to occur.</p>
</li>
<li>
<p>A user doing an import of Change Data Capture objects needs the following privileges:</p>
<ul>
<li>
<p>either <code>CREATE</code> <code>SEQUENCE</code> or <code>CREATE</code> <code>ANY</code> <code>SEQUENCE</code></p>
<p>If the user doing the import is the original publisher, then <code>CREATE</code> <code>SEQUENCE</code> will suffice.</p>
</li>
<li>
<p><code>ALTER</code> <code>DATABASE</code></p>
</li>
<li>
<p>either <code>EXP_FULL_DATABASE</code> or <code>IMP_FULL_DATABASE</code></p>
<p>Access to the import package by <code>PUBLIC</code> has been removed and access is only to those that have either <code>EXP_FULL_DATABASE</code> or <code>IMP_FULL_DATABASE</code>.</p>
</li>
</ul>
</li>
<li>
<p>AutoLog change sources, change sets, and change tables are not supported. See <a href="#CHDHJJJJ">"Re-Creating AutoLog Change Data Capture Objects After an Import Operation"</a>.</p>
</li>
<li>
<p>You should export <a id="sthref800"></a><a id="sthref801"></a><a id="sthref802"></a><a id="sthref803"></a>asynchronous change sets and change tables at a time when users are not making DDL and DML changes to the database being exported.</p>
</li>
<li>
<p>When <a id="sthref804"></a><a id="sthref805"></a><a id="sthref806"></a><a id="sthref807"></a>importing asynchronous change sets and change tables, you must also import the underlying Oracle Streams configuration; set the Oracle Data Pump import parameter <code>STREAMS_CONFIGURATION</code> to <code>y</code> explicitly (or implicitly by accepting the default), so that the necessary Streams objects are imported. If you perform an import operation and specify <code>STREAMS_CONFIGURATION</code><code>=</code><code>n</code>, then imported asynchronous change sets and change tables will not be able to continue capturing change data.</p>
</li>
<li>
<p>Change Data Capture objects never overwrite existing objects when they are imported (similar to the effect of the import command <code>TABLE_EXISTS_ACTION = skip</code> parameter for tables). Change Data Capture generates warnings in the import log for these cases.</p>
</li>
<li>
<p>Change Data Capture objects are validated at the end of an import operation to determine if all expected underlying objects are present in the correct form. Change Data Capture generates validation warnings in the import log if it detects validation problems. Imported Change Data Capture objects with validation warnings usually cannot continue capturing change data.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CHDFHAGC"></a><a id="DWHSG8468"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Examples of Oracle Data Pump Export and Import Commands</h4>
<p>The following are examples of Data Pump export and import commands that support Change Data Capture objects:</p>
<pre>
&gt; expdp DIRECTORY=dpump_dir FULL=y
&gt; impdp DIRECTORY=dpump_dir FULL=y STREAMS_CONFIGURATION=y
</pre>
<p>See <a class="olink SUTIL" href="../e22490/toc.htm"><span class="italic">Oracle Database Utilities</span></a> for information on Oracle Data Pump.</p>
</div>
<!-- class="sect3" -->
<a id="CHDCICFH"></a><a id="DWHSG8469"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Publisher Considerations for Exporting and Importing Change Tables</h4>
<p>The following are publisher considerations for exporting and importing change tables:</p>
<ul>
<li>
<p>When change tables are imported, the job queue is checked for a Change Data Capture purge job. If no purge job is found, then one is submitted automatically (using the <code>DBMS_CDC_PUBLISH.PURGE</code> procedure). If a change table is imported, but no subscriptions are taken out before the purge job runs (24 hours later, by default), then all rows in the table will be purged.</p>
<p>The publisher can use one of the following methods to prevent the purging of data from a change table:</p>
<ul>
<li>
<p>Suspend the purge job using the <code>DBMS_SCHEDULER</code> package to either disable the job (using the <code>STOP_JOB</code> procedure) or execute the job sometime in the future when there are subscriptions (using the <code>SET_ATTRIBUTE</code> procedure).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you disable the purge job, you must remember to reset it once subscriptions have been activated. This prevents the change table from growing indefinitely.</div>
</li>
<li>
<p>Create a temporary subscription to preserve the change table data until real subscriptions appear. Then, drop the temporary subscription.</p>
</li>
</ul>
</li>
<li>
<p>When <a id="sthref808"></a><a id="sthref809"></a>importing data into a source table for which a change table already exists, the imported data is also recorded in any associated change tables.</p>
<p>Assume that the publisher has a source table <code>SALES</code> that has an associated change table <code>ct_sales.</code> When the publisher imports data into <code>SALES</code>, that data is also recorded in <code>ct_sales</code>.</p>
</li>
<li>
<p>When imp<a id="sthref810"></a>ort<a id="sthref811"></a>ing a change table having the optional control <code>ROW_ID</code> column, the <code>ROW_ID</code> columns stored in the change table have meaning only if the associated source table has not been imported. If a source table is re-created or imported, each row will have a new <code>ROW_ID</code> that is unrelated to the <code>ROW_ID</code> that was previously recorded in a change table.</p>
</li>
</ul>
<p>The original level of export and import support available in Oracle9<span class="italic">i</span> Database is retained for backward compatibility. Synchronous change tables that reside in the <code>SYNC_SET</code> change set can be exported as part of a full database, schema, or individual table export operation and can be imported as needed. The following Change Data Capture objects are not included in the original export and import support: change sources, change sets, change tables that do not reside in the <code>SYNC_SET</code> change set, and subscriptions.</p>
</div>
<!-- class="sect3" -->
<a id="CHDHJJJJ"></a><a id="DWHSG8470"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Re-Creating AutoLog Change Data Capture Objects After an Import Operation</h4>
<p>After a Data Pump full database import operation completes for a database containing AutoLog Change Data Capture objects, the following steps must be performed to restore these objects:</p>
<ol>
<li>
<p>The publisher must manually drop the database objects underlying AutoLog Change Data Capture objects.</p>
</li>
<li>
<p>The publisher must re-create the AutoLog change sources, change sets, and change tables using the appropriate <code>DBMS_CDC_PUBLISH</code> procedures.</p>
</li>
<li>
<p>Subscribers must re-create their subscriptions to the AutoLog change sets.</p>
</li>
</ol>
<p>Change data may be lost in the interval between a Data Pump full database export operation involving AutoLog Change Data Capture objects and their re-creation after a Data Pump full database import operation in the preceding step. This can be minimized by preventing changes to the source tables during this interval, if possible.</p>
<p>Before re-creating an AutoLog Change Data Capture configuration after a Data Pump import operation, you must first drop the underlying objects: the table underlying a change table, subscriber views, a sequence used by the change set, and a Streams apply process, queue and queue table. <a href="#CHDIBIJE">Table 17-12</a> presents each underlying object and the method you use to drop it up after a Data Pump import operation.</p>
<div class="tblformal">
<p class="titleintable"><a id="DWHSG8471"></a><a id="sthref812"></a><a id="CHDIBIJE"></a>Table 17-12 Methods to Drop Objects After a Data Pump Import Operation</p>
<table class="cellalignment1381" title="Methods to Drop Objects After a Data Pump Import Operation" summary="This table lists objects and how to drop them to prepare for AutoLog Change Data Capture after a Data Pump Import operation." dir="ltr">
<thead>
<tr class="cellalignment1372">
<th class="cellalignment1382" id="r1c1-t25">Object</th>
<th class="cellalignment1382" id="r1c2-t25">SQL Statement or PL/SQL Package to Drop Object</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r2c1-t25" headers="r1c1-t25">
<p>Table</p>
</td>
<td class="cellalignment1378" headers="r2c1-t25 r1c2-t25">
<p>SQL <code>DROP TABLE</code> statement</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r3c1-t25" headers="r1c1-t25">
<p>Subscriber View</p>
</td>
<td class="cellalignment1378" headers="r3c1-t25 r1c2-t25">
<p>SQL <code>DROP VIEW</code> statement</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r4c1-t25" headers="r1c1-t25">
<p>Sequence Used by Change Set</p>
</td>
<td class="cellalignment1378" headers="r4c1-t25 r1c2-t25">
<p>SQL <code>DROP SEQUENCE</code> statement</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r5c1-t25" headers="r1c1-t25">
<p>Streams Apply Process</p>
</td>
<td class="cellalignment1378" headers="r5c1-t25 r1c2-t25">
<p>PL/SQL <code>DBMS_APPLY_ADM.DROP_APPLY()</code> package</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r6c1-t25" headers="r1c1-t25">
<p>Streams Queue</p>
</td>
<td class="cellalignment1378" headers="r6c1-t25 r1c2-t25">
<p>PL/SQL <code>DBMS_AQADM.DROP_QUEUE()</code> package</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r7c1-t25" headers="r1c1-t25">
<p>Streams Queue Table</p>
</td>
<td class="cellalignment1378" headers="r7c1-t25 r1c2-t25">
<p>PL/SQL <code>DBMS_AQADM.DROP_QUEUE_TABLE()</code> package</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>You can obtain the name of the sequence used by a change set by querying the <code>ALL_SEQUENCES</code> view for a sequence name that begins with <code>CDC$</code> and contains at least the initial characters of the change set name.</p>
<p>You can obtain the names of the Streams objects by querying the <code>DBA_APPLY</code>, <code>DBA_QUEUES</code>, and <code>DBA_QUEUE_TABLES</code> views for names that begin with <code>CDC$</code> and contain at least the initial characters of the change set name.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1027579"></a><a id="DWHSG8472"></a>
<div class="sect2">
<h3 class="sect2">Impact on Subscriptions When the Publisher Makes Changes</h3>
<p><a id="i1027581"></a><a id="sthref813"></a>The Change Data Capture environment is dynamic. The publisher can add and drop change tables at any time. The publisher can also add columns to and drop columns from existing change tables at any time. The following list describes how changes to the Change Data Capture environment affect subscriptions:</p>
<a id="i1027584"></a>
<ul>
<li>
<p>Subscribers do not get explicit notification if the publisher adds a new change table or adds columns to an existing change table. A subscriber can check the <a id="sthref814"></a><a id="sthref815"></a><code>ALL_PUBLISHED_COLUMNS</code> view to see if new columns have been added, and whether or not the subscriber has access to them.</p>
</li>
<li>
<p><a id="i1027589"></a><a href="#g1029241">Table 17-13</a> describes what happens when the publisher adds a column to a <a id="sthref816"></a>change table.</p>
</li>
</ul>
<div class="tblformal">
<p class="titleintable"><a id="DWHSG8473"></a><a id="sthref817"></a><a id="g1029241"></a>Table 17-13 Effects of Publisher Adding a Column to a Change Table</p>
<table class="cellalignment1381" title="Effects of Publisher Adding a Column to a Change Table" summary="This table describes what happens when the publisher adds a column to a change table." dir="ltr">
<thead>
<tr class="cellalignment1372">
<th class="cellalignment1382" id="r1c1-t26">If the publisher adds</th>
<th class="cellalignment1382" id="r1c2-t26">And . . .</th>
<th class="cellalignment1382" id="r1c3-t26">Then . . .</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r2c1-t26" headers="r1c1-t26">
<p>A user column</p>
</td>
<td class="cellalignment1378" headers="r2c1-t26 r1c2-t26">
<p>A new subscription includes this column</p>
</td>
<td class="cellalignment1378" headers="r2c1-t26 r1c3-t26">
<p>The subscription window for this subscription starts at the point the column was added.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r3c1-t26" headers="r1c1-t26">
<p>A user column</p>
</td>
<td class="cellalignment1378" headers="r3c1-t26 r1c2-t26">
<p>A new subscription does not include this newly added column</p>
</td>
<td class="cellalignment1378" headers="r3c1-t26 r1c3-t26">
<p>The subscription window for this subscription starts at the earliest available change data. The new column will not be seen.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r4c1-t26" headers="r1c1-t26">
<p>A user column</p>
</td>
<td class="cellalignment1378" headers="r4c1-t26 r1c2-t26">
<p>A subscription exists</p>
</td>
<td class="cellalignment1378" headers="r4c1-t26 r1c3-t26">
<p>The subscription window for this subscription remains unchanged.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r5c1-t26" headers="r1c1-t26">
<p>A control column</p>
</td>
<td class="cellalignment1378" headers="r5c1-t26 r1c2-t26">
<p>A new subscription is created</p>
</td>
<td class="cellalignment1378" headers="r5c1-t26 r1c3-t26">
<p>The subscription window for this subscription starts at the earliest available change data. The subscription can see the control column immediately. All change table rows that existed prior to adding the control column will have the null value for the newly added control column.</p>
</td>
</tr>
<tr class="cellalignment1372">
<td class="cellalignment1378" id="r6c1-t26" headers="r1c1-t26">
<p>A control column</p>
</td>
<td class="cellalignment1378" headers="r6c1-t26 r1c2-t26">
<p>A subscription exists</p>
</td>
<td class="cellalignment1378" headers="r6c1-t26 r1c3-t26">
<p>This subscription can see the new control columns after the subscription window is purged (<code>DBMS_CDC_PUBLISH.PURGE_WINDOW</code> procedure) such that the low boundary for the window crosses over the point when the control column was added.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHFDBII"></a><a id="DWHSG8474"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Considerations for Synchronous Change Data Capture</h2>
<p>The following sections provide information that the publisher should be aware of when using the synchronous mode of Change Data Capture:</p>
<ul>
<li>
<p><a href="#CHDFBAID">Restriction on Direct-Path INSERT</a></p>
</li>
<li>
<p><a href="#CIHGFFHH">Datatypes and Table Structures Supported for Synchronous Change Data Capture</a></p>
</li>
<li>
<p><a href="#CHDJFBEC">Limitation on Restoring Source Tables from the Recycle Bin</a></p>
</li>
</ul>
<a id="CHDFBAID"></a><a id="DWHSG8475"></a>
<div class="sect2">
<h3 class="sect2">Restriction on Direct-Path INSERT</h3>
<p><a id="sthref818"></a><a id="sthref819"></a><a id="sthref820"></a>Synchronous Change Data Capture does not support the direct-path <code>INSERT</code> statement (and, by association, the <code>MERGE</code> statement and the <code>multi_table_insert</code> clause of the <code>INSERT</code> statement).</p>
<p>When the publisher creates a change table in synchronous mode, Change Data Capture creates triggers on the source table. Because a direct-path <code>INSERT</code> statement disables all database triggers, any rows inserted into the source table using the SQL statement for direct-path <code>INSERT</code> in parallel DML mode will not be captured in the change table.</p>
<p>Similarly, Change Data Capture cannot capture the inserted rows from multitable insert and merge operations because these statements use a direct-path <code>INSERT</code> statement. The direct-path <code>INSERT</code> statement does not return an error message to indicate that the triggers used by Change Data Capture did not fire.</p>
<p>See <a class="olink SQLRF" href="../e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information regarding the direct-path <code>INSERT</code> statement and triggers.</p>
</div>
<!-- class="sect2" -->
<a id="CIHGFFHH"></a><a id="DWHSG8476"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Datatypes and Table Structures Supported for Synchronous Change Data Capture</h3>
<p>Synchronous Change Data Capture supports columns of all built-in Oracle datatypes except the following:</p>
<ul>
<li>
<p><code>BFILE</code></p>
</li>
<li>
<p><code>BLOB</code></p>
</li>
<li>
<p><code>CLOB</code></p>
</li>
<li>
<p><code>LONG</code></p>
</li>
<li>
<p><code>NCLOB</code></p>
</li>
<li>
<p><code>ROWID</code></p>
</li>
<li>
<p><code>UROWID</code></p>
</li>
<li>
<p>object types (for example, XMLType)</p>
</li>
</ul>
<p>In addition, virtual columns are not supported. Furthermore, Change Data Capture does not support the usage of quoted identifiers; as a consequence, the usage of reserved keywords with Change Data Capture is not supported. See <span class="italic">Oracle Database SQL Language Reference</span> for a list of reserved keywords.</p>
<p>Synchronous Change Data Capture does not support the following table structures:</p>
<ul>
<li>
<p>Source tables that are temporary tables</p>
</li>
<li>
<p>Source tables that are object tables</p>
</li>
<li>
<p>Index-organized tables with columns of unsupported datatypes (including <code>LOB</code> columns) or with overflow segments</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDJFBEC"></a><a id="DWHSG8477"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Limitation on Restoring Source Tables from the Recycle Bin</h3>
<p>If the source table for a synchronous change table is dropped and then restored from the recycle bin, changes are no longer captured in that change table. The publisher must create a new synchronous change table to capture future changes to the restored source table.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1027067"></a><a id="DWHSG8478"></a>
<div class="sect1">
<h2 class="sect1">Considerations for Asynchronous Change Data Capture</h2>
<p>The following sections provide information that the publisher and the source and staging database DBAs should be aware of when using the asynchronous mode of Change Data Capture:</p>
<ul>
<li>
<p><a href="#CHDBHJAE">Asynchronous Change Data Capture and Redo Log Files</a></p>
</li>
<li>
<p><a href="#i1027101">Asynchronous Change Data Capture and Supplemental Logging</a></p>
</li>
<li>
<p><a href="#CHDGHHCE">Asynchronous Change Data Capture and Oracle Streams Components</a></p>
</li>
<li>
<p><a href="#i1027969">Datatypes and Table Structures Supported for Asynchronous Change Data Capture</a></p>
</li>
<li>
<p><a href="#CIHJJCHH">Restrictions for NOLOGGING and UNRECOVERABLE Operations</a></p>
</li>
</ul>
<a id="CHDBHJAE"></a><a id="DWHSG8479"></a>
<div class="sect2">
<h3 class="sect2">Asynchronous Change Data Capture and Redo Log Files</h3>
<p><a id="sthref821"></a><a id="sthref822"></a>The asynchronous mode of Change Data Capture uses redo log files, as follows:</p>
<ul>
<li>
<p>HotLog</p>
<p>Asynchronous HotLog and Distributed HotLog read the source database online redo log files whenever possible and the archived redo log files otherwise.</p>
</li>
<li>
<p>AutoLog</p>
<p>Asynchronous AutoLog Change Data Capture reads redo log files that have been copied from the source database to the staging database by redo transport services.</p>
<p>When using the AutoLog online option, the destination attribute must be <code>LGWR</code> <code>ASYNC</code>. Redo transport services copies redo data from the online redo log at the source database to the standby redo log at the staging database. Change Data Capture obtains the change data after the source database transaction commits.</p>
<p>When using the AutoLog archive option, the destination attribute can be <code>ARCH</code> or <code>LGWR</code> <code>ASYNC</code>. In <code>ARCH</code> mode, redo transport services copies archived redo log files to the staging database after a log switch occurs on the source database. In <code>LGWR</code> mode, redo transport services copies redo data to the staging database while it is being written to the online redo log file on the source database.</p>
</li>
</ul>
<p><a id="sthref823"></a>For log files to be archived, the source databases for asynchronous Change Data Capture must run in <code>ARCHIVELOG</code> mode, as specified with the following SQL statement:</p>
<pre>
ALTER DATABASE ARCHIVELOG;
</pre>
<p>See <a class="olink ADMIN11332" href="../../server.112/e25494/archredo.htm#ADMIN11332"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about running a database in <code>ARCHIVELOG</code> mode.</p>
<p><a id="sthref824"></a>A redo log file used by Change Data Capture must remain available on the staging database until Change Data Capture has captured it. However, it is not necessary that the redo log file remain available until the Change Data Capture subscriber is done with the change data.</p>
<p>To determine which redo log files are no longer needed by Change Data Capture for a given change set, the publisher alters the change set's Streams capture process, which causes Streams to perform some internal cleanup and populates the <code>DBA_LOGMNR_PURGED_LOG</code> view. The publisher follows these steps:</p>
<ol>
<li>
<p>Uses the following query on the staging database to get the three SCN values needed to determine an appropriate new <code>first_scn</code> value for the change set, <code>CHICAGO_DAILY:</code></p>
<pre>
SELECT cap.CAPTURE_NAME, cap.FIRST_SCN, cap.APPLIED_SCN, 
        cap.REQUIRED_CHECKPOINT_SCN
FROM DBA_CAPTURE cap, ALL_CHANGE_SETS cset
WHERE cset.SET_NAME = 'CHICAGO_DAILY' AND
      cap.CAPTURE_NAME = cset.CAPTURE_NAME;

CAPTURE_NAME                    FIRST_SCN APPLIED_SCN REQUIRED_CHECKPOINT_SCN
------------------------------ ---------- ----------- -----------------------
CDC$C_CHICAGO_DAILY                778059      778293                  778293
</pre></li>
<li>
<p>Determines a new <code>first_scn</code> value that is greater than or equal to the original <code>first_scn</code> value and less than or equal to the <code>applied_scn</code> and <code>required_checkpoint_scn</code> values returned by the query in step 1. In this example, this value is 778293, and the capture process name is <code>CDC$C_CHICAGO_DAILY</code>, therefore the publisher can alter the <code>first_scn</code> value for the capture process as follows:</p>
<pre>
BEGIN
DBMS_CAPTURE_ADM.ALTER_CAPTURE(
  capture_name =&gt; 'CDC$C_CHICAGO_DAILY',
  first_scn    =&gt; 778293);
END;
/
</pre>
<p>If there is not an SCN value that meets these criteria, then the change set needs all of its redo log files.</p>
</li>
<li>
<p>Queries the <code>DBA_LOGMNR_PURGED_LOG</code> view to see any log files that are no longer needed by Change Data Capture:</p>
<pre>
SELECT FILE_NAME
FROM DBA_LOGMNR_PURGED_LOG;
</pre>
<div align="center">
<div class="inftblinformal"><br />
<table class="cellalignment1386">
<tbody>
<tr class="cellalignment1372">
<td class="cellalignment1378">
<p class="notep1">Note:</p>
Redo log files may be required on the staging database for purposes other than Change Data Capture. Before deleting a redo log file, the publisher should be sure that no other users need it.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
</li>
</ol>
<p>See the information on setting the first SCN for an existing capture process and on capture process checkpoints in <a class="olink STRMS" href="../e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information.</p>
<p>The <code>first_scn</code> value can be updated for all change sets in an AutoLog change source by using the <code>DBMS_CDC_PUBLISH.ALTER_AUTOLOG_CHANGE_SOURCE</code> <code>first_scn</code> parameter. Note that the new <code>first_scn</code> value must meet the criteria stated in Step 2 of the preceding list for all change sets in the AutoLog change source.</p>
<p>Both the size of the redo log files and the frequency with which a log switch occurs can affect the generation of the archived log files at the source database. For Change Data Capture, the most important factor in deciding what size to make a redo log file is the tolerance for latency between when a change is made and when that change data is available to subscribers. However, because the Oracle Database software attempts a check point at each log switch, if the redo log file is too small, frequent log switches will lead to frequent checkpointing and negatively impact the performance of the source database.</p>
<p>See <a class="olink SBYDB" href="../e41134/toc.htm"><span class="italic">Oracle Data Guard Concepts and Administration</span></a> for step-by-step instructions on monitoring log file archival information. Substitute the terms source and staging database for the Oracle Data Guard terms primary database and archiving destinations, respectively.</p>
<p>When using redo transport services to supply redo log files to an AutoLog change source, gaps in the sequence of redo log files are automatically detected and resolved. If a situation arises where it is necessary to manually add a log file to an AutoLog change set, the publisher can use instructions on explicitly assigning log files to a downstream capture process described in <a class="olink STRMS" href="../e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a>. These instructions require the name of the capture process for the AutoLog change set. The publisher can obtain the name of the capture process for an AutoLog change set from the <code>ALL_CHANGE_SETS</code> data dictionary view.</p>
</div>
<!-- class="sect2" -->
<a id="i1027101"></a><a id="DWHSG8480"></a>
<div class="sect2">
<h3 class="sect2">Asynchronous Change Data Capture and Supplemental Logging</h3>
<p><a id="sthref825"></a><a id="sthref826"></a>The asynchronous modes of Change Data Capture work best with appropriate supplemental logging on the source database. (Supplemental logging is not used by synchronous Change Data Capture.)</p>
<p>The source database DBA must enable some form of database-level supplemental logging. The following example enables minimal database-level supplemental logging:</p>
<pre>
ALTER DATABASE ADD SUPPLEMENTAL LOG DATA;
</pre>
<p>In addition, Oracle recommends that the source database DBA:</p>
<ul>
<li>
<p>Supplementally log all source table columns that are part of a primary key or function to uniquely identify a row. This can be done using database-level or table-level identification key logging, or through a table-level unconditional log group.</p>
</li>
<li>
<p>Create an unconditional log group for all source table columns that are captured by any asynchronous change table. This should be done before any change tables are created on a source table.</p>
<pre>
ALTER TABLE sh.promotions
ADD SUPPLEMENTAL LOG GROUP log_group_cust
(PROMO_NAME, PROMO_SUBCATEGORY, PROMO_CATEGORY) ALWAYS;
</pre>
<p>If an unconditional log group is not created for all source table columns to be captured, then when an update DML operation occurs, some unchanged user column values in change tables will be null instead of reflecting the actual source table value.</p>
<p>For example, suppose a source table contains two columns, <code>X</code> and <code>Y</code>, and that the source database DBA has defined an unconditional log group for that table that includes only column <code>Y</code>. Furthermore, assume that a user updates only column <code>Y</code> in that table row. When the subscriber views the change data for that row, the value of the unchanged column <code>X</code> will be null. However, because the actual column value for <code>X</code> is excluded from the redo log file and therefore cannot be included in the change table, the subscriber cannot assume that the actual source table value for column <code>X</code> is null. The subscriber must rely on the contents of the <code>TARGET_COLMAP$</code> control column to determine whether the actual source table value for column <code>X</code> is null or it is unchanged.</p>
</li>
</ul>
<p>See <a class="olink SUTIL" href="../e22490/toc.htm"><span class="italic">Oracle Database Utilities</span></a> for more information on the various types of supplemental logging.</p>
</div>
<!-- class="sect2" -->
<a id="CHDGHHCE"></a><a id="DWHSG8481"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Asynchronous Change Data Capture and Oracle Streams Components</h3>
<p>Asynchronous Change Data Capture generates components of Oracle Streams to capture change data and to populate change sets. These components must not be reused or shared for any other purposes. For example, the capture queue that Change Data Capture generates for a Distributed HotLog change source should not be used as the source queue for new user-created Streams propagations.</p>
<p>For HotLog and AutoLog modes, each change set contains a Streams capture process, queue, queue table and apply process. The staging database publisher owns all of these objects.For Distributed HotLog mode, each change source resides on the source database and contains a Streams capture process, queue and queue table. Each change set resides on the staging database and contains a Streams apply process. When the first change set in a change source is created, Change Data Capture generates a queue and queue table on the staging database to be shared among all change sets in the change source. Change Data Capture also generates a Streams Propagation on the source database from the change source queue to the change set queue on the staging database. The source database publisher owns the source database objects and the staging database publisher owns the staging database objects.</p>
<p><a href="#CIHBFAGC">Figure 17-8</a> illustrates an example of how Streams components are used in an asynchronous Distributed HotLog Change Data Capture environment. In this example, there is a Distributed HotLog change source <code>disthot_change_src</code> on the source database and two change sets, <code>Change_Set_1</code> and <code>Change_Set_2</code>, on the staging database.</p>
<div class="figure">
<p class="titleinfigure"><a id="CIHBFAGC"></a><a id="DWHSG8482"></a>Figure 17-8 Streams Components in an Asynchronous Distributed HotLog Change Data Capture System</p>
<img width="509" height="296" src="./dwhsg129.gif" alt="Description of Figure 17-8 follows" /><br />
<a id="sthref827" href="./img_text/dwhsg129.htm">Description of "Figure 17-8 Streams Components in an Asynchronous Distributed HotLog Change Data Capture System"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="i1027969"></a><a id="DWHSG8483"></a>
<div class="sect2">
<h3 class="sect2">Datatypes and Table Structures Supported for Asynchronous Change Data Capture</h3>
<p><a id="sthref828"></a>Asynchronous Change Data Capture supports columns of all built-in Oracle datatypes except the following:</p>
<ul>
<li>
<p><code>BFILE</code></p>
</li>
<li>
<p><code>LONG</code></p>
</li>
<li>
<p><code>ROWID</code></p>
</li>
<li>
<p><code>UROWID</code></p>
</li>
<li>
<p>object types (for example, XMLType)</p>
</li>
</ul>
<p>In addition, virtual columns are not supported. Furthermore, Change Data Capture does not support the usage of quoted identifiers; as a consequence, the usage of reserved keywords with Change Data Capture is not supported. See <span class="italic">Oracle Database SQL Language Reference</span> for a list of reserved keywords.</p>
<p>Asynchronous Change Data Capture does not support the following table structures:</p>
<ul>
<li>
<p>Source tables that are temporary tables</p>
</li>
<li>
<p>Source tables that are object tables</p>
</li>
<li>
<p>Index-organized tables with columns of unsupported datatypes (including <code>LOB</code> columns) or with overflow segments</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIHJJCHH"></a><a id="DWHSG8484"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Restrictions for NOLOGGING and UNRECOVERABLE Operations</h3>
<p>If you use the <code>NOLOGGING</code> or <code>UNRECOVERABLE</code> keyword for a SQL operation, asynchronous Change Data Capture cannot capture the changes from that operation. Similarly, if you use the <code>UNRECOVERABLE</code> clause in the control file for a SQL*Loader direct path load, then the changes from that direct load cannot be captured by asynchronous Change Data Capture.</p>
<p>See <a class="olink SQLRF" href="../e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about the <code>NOLOGGING</code> and <code>UNRECOVERABLE</code> keywords and <a class="olink SUTIL" href="../e22490/toc.htm"><span class="italic">Oracle Database Utilities</span></a> for information about direct path loads and SQL*Loader.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1027639"></a><a id="DWHSG8485"></a>
<div class="sect1">
<h2 class="sect1">Implementation and System Configuration</h2>
<p>Change Data Capture comes packaged with the appropriate Oracle drivers already installed with which you can implement either asynchronous or synchronous data capture. The synchronous mode of Change Data Capture is included with the Standard Edition, but the asynchronous mode requires you have the Enterprise Edition.</p>
<p>In addition, note that Change Data Capture uses <a id="sthref829"></a>Java. Therefore, when you install Oracle Database, ensure that Java is enabled.</p>
<p><a id="sthref830"></a><a id="sthref831"></a>Change Data Capture places system triggers on the SQL <code>CREATE</code> <code>TABLE</code>, <code>ALTER</code> <code>TABLE</code>, and <code>DROP</code> <code>TABLE</code> statements. If system triggers are disabled on the source database, Change Data Capture will not function correctly. Therefore, you should never disable system triggers.</p>
<p>To remove Change Data Capture from the database, the SQL script <a id="sthref832"></a><a id="sthref833"></a><a id="sthref834"></a><a id="sthref835"></a><code>rmcdc.sql</code> is provided in the <code>admin</code> directory. This will remove the system triggers that Change Data Capture places on the SQL <code>CREATE</code> <code>TABLE</code>, <code>ALTER</code> <code>TABLE</code>, and <code>DROP</code> <code>TABLE</code> statements. In addition, <code>rmcdc.sql</code> removes all Java classes used by Change Data Capture. Note that after <code>rmcdc.sql</code> is called, Change Data Capture will no longer operate on the system. If the system administrator decides to remove the Java Virtual Machine from a database, <code>rmcdc.sql</code> must be called before <code>rmjvm</code> is called.</p>
<p>To reinstall Change Data Capture, the SQL script <a id="sthref836"></a><a id="sthref837"></a><code>initcdc.sql</code> is provided in the <code>admin</code> directory. It creates the Change Data Capture system triggers and Java classes that are required by Change Data Capture. Note that the Java Virtual Machine must be available to reinstall Change Data Capture.</p>
<a id="CIHFFDBI"></a><a id="DWHSG8486"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Database Configuration Assistant Considerations</h3>
<p>All of the predefined templates provided with the Database Configuration Assistant support the Oracle Change Data Capture feature. The predefined templates are:</p>
<ul>
<li>
<p>General Purpose</p>
</li>
<li>
<p>Data Warehouse</p>
</li>
<li>
<p>Transaction Processing</p>
</li>
<li>
<p>New Database</p>
</li>
</ul>
<p>If you choose the New Database option to build a custom database, note that Oracle JVM is selected by default in the Additional database configurations dialog box. Do not change this setting; Oracle Change Data Capture requires the Oracle JVM feature.</p>
</div>
<!-- class="sect2" -->
<a id="CHDGACCD"></a><a id="DWHSG8487"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Summary of Supported Distributed HotLog Configurations and Restrictions</h3>
<p>The following sections describe the supported configurations for the Distributed HotLog mode of Change Data Capture as well as the restrictions.</p>
<a id="DWHSG8488"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref838"></a>
<h4 class="sect3">Oracle Database Releases for Source and Staging Databases</h4>
<p>The Distributed HotLog mode of Change Data Capture allows the following combinations of Oracle Database releases for the source and staging databases:</p>
<ul>
<li>
<p>The source database can be Oracle Database release 9.2 (9.2.0.6 or higher patch set), 10.1, 10.2, 11.1, or 11.2.</p>
</li>
<li>
<p>The staging database can be Oracle Database release 11.1 or 11.2.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
When a release 9.2 or 10.1 Oracle Database serves as the source database for the Distributed HotLog mode of Change Data Capture, metadata for the source database is stored on the staging database, whereas metadata for an Oracle Database release 11.1 or 11.2 source database is stored on the source database. Therefore, to view the metadata for an Oracle Database release 9.2 or 10.1 source database, the publisher must query the <code>CHANGE_SOURCES</code> data dictionary view on the staging database, and to view the metadata for an Oracle Database release 11.1 or 11.2 source database, the publisher must query the <code>CHANGE_SOURCES</code> data dictionary view on the source database.</div>
</div>
<!-- class="sect3" -->
<a id="DWHSG8489"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref839"></a>
<h4 class="sect3">Upgrading a Distributed HotLog Change Source to Oracle Release 11 (11.1 or 11.2)</h4>
<p>As mentioned in the previous topic, the metadata for an Oracle Database release 11 Distributed HotLog change source is stored on the source database, but the metadata for a release 9.2 or 10.1 change source is stored on the staging database.</p>
<p>When you upgrade a release 10.2 Oracle Database to release 11, then there is additional metadata movement required.</p>
<p>When you upgrade a release 9.2 or 10.1 Oracle Database to release 11, Change Data Capture does not move the source database metadata from the staging database to the source database as part of the upgrade operation. However, the first time the change source is enabled after the upgrade (using the <code>DBMS_CDC_PUBLISH.ALTER_HOTLOG_CHANGE_SOURCE</code> procedure), Change Data Capture detects that the metadata needs to be upgraded and moved to the source database and does so automatically.</p>
<p>If the publisher prefers to not alter the change source immediately after an upgrade, the change source metadata can remain on the staging database until a more appropriate time. Oracle recommends that the source database metadata not be left on the staging database indefinitely after an upgrade to Oracle Database release 11 so that information about the Distributed HotLog change source becomes available in the data dictionary views on the source database.</p>
</div>
<!-- class="sect3" -->
<a id="DWHSG8490"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref840"></a>
<h4 class="sect3">Hardware Platforms and Operating Systems</h4>
<p>The Distributed HotLog mode of Change Data Capture supports the use of different hardware platforms or operating systems (or both) for the source and staging databases.</p>
</div>
<!-- class="sect3" -->
<a id="DWHSG8491"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref841"></a>
<h4 class="sect3">Requirements for Multiple Publishers on the Staging Database</h4>
<p>If there are multiple publishers on the staging database for the Distributed HotLog mode of Change Data capture, and one publisher defines a change table in another publisher's Distributed HotLog change set, then Change Data Capture uses the database link established by publisher who created the change set to access the source database. Therefore, the database link to the source database established by the publisher who created the change set must be intact for the change table to be successfully created. If the change set publisher's database link is not present when creating a change table, an error is returned indicating that the connection description for the remote database was not found.</p>
</div>
<!-- class="sect3" -->
<a id="DWHSG8492"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref842"></a>
<h4 class="sect3">Requirements for Database Links</h4>
<p>The database link from the source database to the staging database must exist for the life of a Distributed HotLog change source.</p>
<p>The database link from the staging database to the source database must exist when creating, altering or dropping Distributed HotLog change sources, change sets and change tables. However, this database link is not required for change capture to occur. Once the required Distributed HotLog change sources, change sets and change tables are in place and enabled, this database link can be dropped without interrupting change capture. This database link would need to be re-created to create, alter or drop Distributed HotLog change sources, change sets and change tables.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1371">
<tr>
<td class="cellalignment1378">
<table class="cellalignment1376">
<tr>
<td class="cellalignment1375"><a href="refresh.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1375"><a href="part5.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1380">
<table class="cellalignment1374">
<tr>
<td class="cellalignment1375"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1375"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1375"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1375"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1375"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1375"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
