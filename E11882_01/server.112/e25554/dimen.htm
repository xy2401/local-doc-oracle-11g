<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Dimensions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 070" />
<meta name="dcterms.created" content="2013-07-04T23:23:16Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Data Warehousing Guide" />
<meta name="dcterms.identifier" content="E25554-02" />
<meta name="dcterms.isVersionOf" content="DWHSG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="advmv.htm" title="Previous" type="text/html" />
<link rel="Next" href="part4.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25554.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">18/35</span> <!-- End Header --><a id="g1011059"></a><a id="DWHSG010"></a><a id="i1006812"></a>
<h1 class="chapter"><span class="secnum">11</span> Dimensions</h1>
<p>This chapter discusses using dimensions in a data warehouse: It contains the following topics:</p>
<ul>
<li>
<p><a href="#i1006214">What are Dimensions?</a></p>
</li>
<li>
<p><a href="#i1006266">Creating Dimensions</a></p>
</li>
<li>
<p><a href="#i1006440">Viewing Dimensions</a></p>
</li>
<li>
<p><a href="#i1006498">Using Dimensions with Constraints</a></p>
</li>
<li>
<p><a href="#BABFGCCC">Validating Dimensions</a></p>
</li>
<li>
<p><a href="#i1006554">Altering Dimensions</a></p>
</li>
<li>
<p><a href="#i1006586">Deleting Dimensions</a></p>
</li>
</ul>
<a id="i1006214"></a><a id="DWHSG8256"></a>
<div class="sect1">
<h2 class="sect1">What are Dimensions?</h2>
<p><a id="sthref306"></a>A <a href="glossary.htm#i996878"><span class="xrefglossterm">dimension</span></a> is a structure that categorizes data in order to enable users to answer business questions. Commonly used dimensions are customers, products, and time. For example, each sales channel of a clothing retailer might gather and store data regarding sales and reclamations of their Cloth assortment. The retail chain management can build a data warehouse to analyze the sales of its products across all stores over time and help answer questions such as:</p>
<ul>
<li>
<p>What is the effect of promoting one product on the sale of a related product that is not promoted?</p>
</li>
<li>
<p>What are the sales of a product before and after a promotion?</p>
</li>
<li>
<p>How does a promotion affect the various distribution channels?</p>
</li>
</ul>
<p>The data in the retailer's data warehouse system has two important components: <a id="sthref307"></a>dimensions and <a id="sthref308"></a>facts. The dimensions are products, customers, promotions, channels, and time. One approach for identifying your dimensions is to review your reference tables, such as a product table that contains everything about a product, or a promotion table containing all information about promotions. The facts are sales (units sold) and profits. A data warehouse contains facts about the sales of each product at on a daily basis.</p>
<p>A typical relational implementation for such a data warehouse is a star schema. The fact information is stored in what is called a fact table, whereas the dimensional information is stored in dimension tables. In our example, each sales transaction record is uniquely defined as for each customer, for each product, for each sales channel, for each promotion, and for each day (time).</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a href="schemas.htm#g1008401">Chapter 20, "Schema Modeling Techniques"</a> for further details</div>
<p>In Oracle Database, the dimensional information itself is stored in a dimension table. In addition, the database object dimension helps to organize and group dimensional information into hierarchies. This represents natural <code>1:n</code> relationships between columns or column groups (the levels of a hierarchy) that cannot be represented with constraint conditions.<a id="sthref309"></a><a id="sthref310"></a><a id="sthref311"></a><a id="sthref312"></a> Going up a level in the hierarchy is called rolling up the data and going down a level in the hierarchy is called <a id="sthref313"></a>drilling down the data. In the retailer example:</p>
<ul>
<li>
<p>Within the <code>time</code> dimension, months roll up to quarters, quarters roll up to years, and years roll up to all years.</p>
</li>
<li>
<p>Within the <code>product</code> dimension, products roll up to subcategories, subcategories roll up to categories, and categories roll up to all products.</p>
</li>
<li>
<p>Within the <code>customer</code> dimension, customers roll up to <code>city</code>. Then cities roll up to <code>state</code>. Then states roll up to <code>country</code>. Then countries roll up to <code>subregion</code>. Finally, subregions roll up to <code>region</code>, as shown in <a href="#BABFBBEB">Figure 11-1</a>.</p>
</li>
</ul>
<div class="figure">
<p class="titleinfigure"><a id="BABFBBEB"></a><a id="DWHSG8257"></a>Figure 11-1 Sample Rollup for a Customer Dimension</p>
<img width="112" height="350" src="./dwhsg072.gif" alt="Description of Figure 11-1 follows" /><br />
<a id="sthref314" href="./img_text/dwhsg072.htm">Description of "Figure 11-1 Sample Rollup for a Customer Dimension"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Data analysis typically starts at higher levels in the dimensional hierarchy and gradually drills down if the situation warrants such analysis.</p>
<p>Dimensions do not have to be defined. However, if your application uses dimensional modeling, it is worth spending time creating them as it can yield significant benefits, because they help query rewrite perform more complex types of rewrite. Dimensions are also beneficial to certain types of materialized view refresh operations and with the SQL Access Advisor. They are only mandatory if you use the SQL Access Advisor (a GUI tool for materialized view and index management) without a workload to recommend which materialized views and indexes to create, drop, or retain.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="qrbasic.htm#g1045551">Chapter 18, "Basic Query Rewrite"</a> for further details regarding query rewrite</p>
</li>
<li>
<p><a class="olink PFGRF008" href="../../server.112/e41573/advisor.htm#PFGRF008"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for further details regarding the SQL Access Advisor</p>
</li>
</ul>
</div>
<p>In spite of the benefits of dimensions, you must not create dimensions in any schema that does not fully satisfy the dimensional relationships described in this chapter. Incorrect results can be returned from queries otherwise.</p>
</div>
<!-- class="sect1" -->
<a id="i1006266"></a><a id="DWHSG8258"></a>
<div class="sect1">
<h2 class="sect1">Creating Dimensions</h2>
<p><a id="sthref315"></a>Before you can create a dimension object, the dimension tables must exist in the database possibly containing the dimension data. For example, if you create a customer dimension, one or more tables must exist that contain the city, state, and country information. In a star schema data warehouse, these dimension tables already exist. It is therefore a simple task to identify which ones will be used.</p>
<p>Now you can draw the hierarchies of a dimension as shown in <a href="#BABFBBEB">Figure 11-1</a>. For example, <code>city</code> is a child of <code>state</code> (because you can aggregate city-level data up to state), and <code>country</code>. This hierarchical information will be stored in the database object dimension.</p>
<p>In the case of normalized or partially normalized dimension representation (a dimension that is stored in more than one table), identify how these tables are joined. Note whether the joins between the dimension tables can guarantee that each child-side row joins with one and only one parent-side row. In the case of denormalized dimensions, determine whether the child-side columns uniquely determine the parent-side (or attribute) columns. If you use constraints to represent these relationships, they can be enabled with the <code>NOVALIDATE</code> and <code>RELY</code> clauses if the relationships represented by the constraints are guaranteed by other means.</p>
<p>You <a id="sthref316"></a><a id="sthref317"></a>may <a id="sthref318"></a>want the capability to skip <code>NULL</code> levels in a dimension. An example of this is with Puerto Rico. You may want Puerto Rico to be included within a region of North America, but not include it within the state category. If you want this capability, use the <code>SKIP</code> <code>WHEN</code> <code>NULL</code> clause. See the sample dimension later in this section for more information and <a class="olink SQLRF" href="../e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for syntax and restrictions.</p>
<p>You create a dimension using either the <a id="sthref319"></a><code>CREATE</code> <code>DIMENSION</code> statement or the Dimension Wizard in Oracle Enterprise Manager. Within the <code>CREATE</code> <code>DIMENSION</code> statement, use the <code>LEVEL</code> clause to identify the names of the dimension levels.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF01206" href="../../server.112/e41084/statements_5006.htm#SQLRF01206"><span class="italic">Oracle Database SQL Language Reference</span></a> for a complete description of the <code>CREATE</code> <code>DIMENSION</code> statement</div>
<p>This customer dimension contains a single hierarchy with a geographical rollup, with arrows drawn from the child level to the parent level, as shown in <a href="#BABFBBEB">Figure 11-1</a>.</p>
<p>Each arrow in this graph indicates that for any child there is one and only one parent. For example, each city must be contained in exactly one state and each state must be contained in exactly one country. States that belong to more than one country violate hierarchical integrity. Also, you must use th<a id="sthref320"></a><a id="sthref321"></a>e <code>SKIP</code> <code>WHEN</code> <code>NULL</code> clause if you want to include cities that do not belong to a state, such as Washington D.C. Hierarchical integrity is necessary for the correct operation of management functions for materialized views that include aggregates.</p>
<p>For example, you can declare a dimension <code>products_dim</code>, which contains levels <code>product</code>, <code>subcategory</code>, and <code>category</code>:</p>
<pre>
CREATE DIMENSION products_dim
       LEVEL product           IS (products.prod_id)
       LEVEL subcategory       IS (products.prod_subcategory)
       LEVEL category          IS (products.prod_category) ...
</pre>
<p>Each level in the dimension must correspond to one or more columns in a table in the database. Thus, level <code>product</code> is identified by the column <code>prod_id</code> in the products table and level <code>subcategory</code> is identified by a column called <code>prod_subcategory</code> in the same table.</p>
<p>In this example, the database tables are denormalized and all the columns exist in the same table. However, this is not a prerequisite for creating dimensions. <a href="#i1006414">"Using Normalized Dimension Tables"</a> shows how to create a dimension <code>customers_dim</code> that has a normalized schema design using the <code>JOIN</code> <code>KEY</code> clause.</p>
<p>The next step is to declare the relationship between the levels with the <code>HIERARCHY</code> statement and give that hierarchy a name. A hierarchical relationship is a functional dependency from one level of a hierarchy to the next level in the hierarchy. Using the level names defined previously, the <code>CHILD</code> <code>OF</code> relationship denotes that each child's level value is associated with one and only one parent level value. The following statement declares a hierarchy <code>prod_rollup</code> and defines the relationship between products, subcategory, and category:</p>
<pre>
HIERARCHY prod_rollup 
 (product         CHILD OF
  subcategory     CHILD OF
  category)
</pre>
<p>In addition to the <code>1:n</code> hierarchical relationships, dimensions also include <code>1:1</code> attribute relationships between the hierarchy levels and their dependent, determined dimension attributes. For example, the dimension <code>times_dim</code>, as defined in <a class="olink COMSC" href="../e10831/toc.htm"><span class="italic">Oracle Database Sample Schemas</span></a>, has columns <code>fiscal_month_desc</code>, <code>fiscal_month_name</code>, and <code>days_in_fiscal_month</code>. Their relationship is defined as follows:</p>
<pre>
LEVEL fis_month IS TIMES.FISCAL_MONTH_DESC
...
ATTRIBUTE fis_month DETERMINES
      (fiscal_month_name, days_in_fiscal_month)
</pre>
<p>The <code><a id="sthref322"></a>ATTRIBUTE</code> ... <code>DETERMINES</code> clause relates <code>fis_month</code> to <code>fiscal_month_name and days_in_fiscal_month</code>. Note that this is a unidirectional determination. It is only guaranteed, that for a specific <code>fiscal_month</code>, for example, <code>1999-11</code>, you will find exactly one matching values for <code>fiscal_month_name</code>, for example, <code>November</code> and <code>days_in_fiscal_month</code>, for example, 28. You cannot determine a specific <code>fiscal_month_desc</code> based on the <code>fiscal_month_name</code>, which is <code>November</code> for every fiscal year.</p>
<p>In this example, suppose a query were issued that queried by <code>fiscal_month_name</code> instead of <code>fiscal_month_desc</code>. Because this <code>1:1</code> relationship exists between the attribute and the level, an already aggregated materialized view containing <code>fiscal_month_desc</code> can be joined back to the dimension information and used to identify the data.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="qrbasic.htm#g1045551">Chapter 18, "Basic Query Rewrite"</a> for further details of using dimensional information</div>
<p>A sample dimension definition follows:</p>
<pre>
CREATE DIMENSION products_dim
    LEVEL product           IS (products.prod_id)
    LEVEL subcategory       IS (products.prod_subcategory) [SKIP WHEN NULL]
    LEVEL category          IS (products.prod_category)
    HIERARCHY prod_rollup (
         product         CHILD OF
         subcategory     CHILD OF
         category)
    ATTRIBUTE product DETERMINES
     (products.prod_name, products.prod_desc,
      prod_weight_class, prod_unit_of_measure,
      prod_pack_size, prod_status, prod_list_price, prod_min_price)
    ATTRIBUTE subcategory DETERMINES
     (prod_subcategory, prod_subcategory_desc)
    ATTRIBUTE category DETERMINES
     (prod_category, prod_category_desc);
</pre>
<p>Alternatively, the <code><span class="codeinlineitalic">extended_attribute_clause</span></code> could have been used instead of the <code><span class="codeinlineitalic">attribute_clause</span></code>, as shown in the following example:</p>
<pre>
CREATE DIMENSION products_dim
    LEVEL product           IS (products.prod_id)
    LEVEL subcategory       IS (products.prod_subcategory)
    LEVEL category          IS (products.prod_category)
    HIERARCHY prod_rollup (
         product         CHILD OF
         subcategory     CHILD OF
         category
        )
    ATTRIBUTE product_info LEVEL product DETERMINES
     (products.prod_name, products.prod_desc,
      prod_weight_class, prod_unit_of_measure,
      prod_pack_size, prod_status, prod_list_price, prod_min_price)
    ATTRIBUTE subcategory DETERMINES
     (prod_subcategory, prod_subcategory_desc)
    ATTRIBUTE category DETERMINES
     (prod_category, prod_category_desc);
</pre>
<p>The design, creation, and maintenance of dimensions is part of the design, creation, and maintenance of your data warehouse schema. Once the dimension has been created, verify that it meets these requirements:</p>
<ul>
<li>
<p>There must be a <code>1:n</code> relationship between a parent and children. A parent can have one or more children, but a child can have only one parent.</p>
</li>
<li>
<p>There must be a <code>1:1</code> attribute relationship between hierarchy levels and their dependent dimension attributes. For example, if there is a column <code>fiscal_month_desc</code>, then a possible attribute relationship would be <code>fiscal_month_desc</code> to <code>fiscal_month_name</code>. For skip <code>NULL</code> levels, if a row of the relation of a skip level has a <code>NULL</code> value for the level column, then that row must have a <code>NULL</code> value for the attribute-relationship column, too.</p>
</li>
<li>
<p>If the columns of a parent level and child level are in different relations, then the connection between them also requires a <code>1:n</code> join relationship. Each row of the child table must join with one and only one row of the parent table unless you use the <code>SKIP</code> <code>WHEN</code> <code>NULL</code> clause. This relationship is stronger than referential integrity alone, because it requires that the child join key must be non-null, that referential integrity must be maintained from the child join key to the parent join key, and that the parent join key must be unique.</p>
</li>
<li>
<p>You must ensure (using database constraints if necessary) that the columns of each hierarchy level are non-null unless you use the <code>SKIP</code> <code>WHEN</code> <code>NULL</code> clause and that hierarchical integrity is maintained.</p>
</li>
<li>
<p>An optional join key is a join key that connects the immediate non-skip child (if such a level exists), <code>CHILDLEV</code>, of a skip level to the nearest non-skip ancestor (again, if such a level exists), <code>ANCLEV</code>, of the skip level in the hierarchy. Also, this joinkey is allowed only when <code>CHILDLEV</code> and <code>ANCLEV</code> are defined over different relations.</p>
</li>
<li>
<p>The hierarchies of a dimension can overlap or be disconnected from each other. However, the columns of a hierarchy level cannot be associated with more than one dimension.</p>
</li>
<li>
<p>Join relationships that form cycles in the dimension graph are not supported. For example, a hierarchy level cannot be joined to itself either directly or indirectly.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
The information stored with a dimension objects is only declarative. The previously discussed relationships are not enforced with the creation of a dimension object. You should validate any dimension definition with the <code>DBMS_DIMENSION.VALIDATE_DIMENSION</code> procedure, as discussed in <a href="#BABFGCCC">"Validating Dimensions"</a>.</div>
</li>
</ul>
<a id="i1007404"></a><a id="DWHSG8259"></a>
<div class="sect2">
<h3 class="sect2">Dropping and Creating Attributes with Columns</h3>
<p>You can use the attribute clause in a <code>CREATE</code> <code>DIMENSION</code> statement to specify one or multiple columns that are uniquely determined by a hierarchy level.</p>
<p>If you use the <code><span class="codeinlineitalic">extended_attribute_clause</span></code> to create multiple columns determined by a hierarchy level, you can drop one attribute column without dropping them all. Alternatively, you can specify an attribute name for each attribute clause <code>CREATE</code> or <code>ALTER</code> <code>DIMENSION</code> statement so that an attribute name is specified for each attribute clause where multiple level-to-column relationships can be individually specified.</p>
<p>The following statement illustrates how you can drop a single column without dropping all columns:</p>
<pre>
CREATE DIMENSION products_dim
LEVEL product         IS (products.prod_id)
LEVEL subcategory     IS (products.prod_subcategory)
LEVEL category        IS (products.prod_category)
HIERARCHY prod_rollup (
          product        CHILD OF
          subcategory    CHILD OF category)
ATTRIBUTE product DETERMINES
         (products.prod_name, products.prod_desc,
          prod_weight_class, prod_unit_of_measure,
          prod_pack_size,prod_status, prod_list_price, prod_min_price)
ATTRIBUTE subcategory_att DETERMINES
         (prod_subcategory, prod_subcategory_desc)
ATTRIBUTE category DETERMINES
         (prod_category, prod_category_desc);

ALTER DIMENSION products_dim
DROP ATTRIBUTE subcategory_att LEVEL subcategory COLUMN prod_subcategory;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF01206" href="../../server.112/e41084/statements_5006.htm#SQLRF01206"><span class="italic">Oracle Database SQL Language Reference</span></a> for a complete description of the <code>CREATE</code> <code>DIMENSION</code> statement</div>
</div>
<!-- class="sect2" -->
<a id="DWHSG8260"></a>
<div class="sect2"><a id="sthref323"></a>
<h3 class="sect2">Multiple Hierarchies</h3>
<p><a id="sthref324"></a><a id="sthref325"></a>A single dimension definition can contain multiple hierarchies. Suppose our retailer wants to track the sales of certain items over time. The first step is to define the time dimension over which sales will be tracked. <a href="#i1006380">Figure 11-2</a> illustrates a dimension <code>times_dim</code> with two time hierarchies.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1006380"></a><a id="DWHSG8261"></a>Figure 11-2 times_dim Dimension with Two Time Hierarchies</p>
<img width="254" height="291" src="./dwhsg075.gif" alt="Description of Figure 11-2 follows" /><br />
<a id="sthref326" href="./img_text/dwhsg075.htm">Description of "Figure 11-2 times_dim Dimension with Two Time Hierarchies"</a><br />
<br /></div>
<!-- class="figure" -->
<p>From the illustration, you can construct the hierarchy of the denormalized <code>time_dim</code> dimension's <code>CREATE</code> <code>DIMENSION</code> statement as follows. The complete <code>CREATE</code> <code>DIMENSION</code> statement as well as the <code>CREATE</code> <code>TABLE</code> statement are shown in <a class="olink COMSC" href="../e10831/toc.htm"><span class="italic">Oracle Database Sample Schemas</span></a>.</p>
<pre>
CREATE DIMENSION times_dim
   LEVEL day         IS times.time_id
   LEVEL month       IS times.calendar_month_desc
   LEVEL quarter     IS times.calendar_quarter_desc
   LEVEL year        IS times.calendar_year
   LEVEL fis_week    IS times.week_ending_day
   LEVEL fis_month   IS times.fiscal_month_desc
   LEVEL fis_quarter IS times.fiscal_quarter_desc
   LEVEL fis_year    IS times.fiscal_year
   HIERARCHY cal_rollup    (
             day     CHILD OF
             month   CHILD OF
             quarter CHILD OF
             year
   )
   HIERARCHY fis_rollup    (
             day         CHILD OF
             fis_week    CHILD OF
             fis_month   CHILD OF
             fis_quarter CHILD OF
             fis_year
   ) &lt;attribute determination clauses&gt;;
</pre></div>
<!-- class="sect2" -->
<a id="i1006414"></a><a id="DWHSG8262"></a>
<div class="sect2">
<h3 class="sect2">Using Normalized Dimension Tables</h3>
<p><a id="sthref327"></a>The tables used to define a dimension may be normalized or denormalized and the individual hierarchies can be normalized or denormalized. If the levels of a hierarchy come from the same table, it is called a fully denormalized hierarchy. For example, <code>cal_rollup</code> in the <code>times_dim</code> dimension is a denormalized hierarchy. If levels of a hierarchy come from different tables, such a hierarchy is either a fully or partially normalized hierarchy. This section shows how to define a normalized hierarchy.</p>
<p>Suppose the tracking of a customer's location is done by city, state, and country. This data is stored in the tables customers and countries. The customer dimension <code>customers_dim</code> is partially normalized because the data entities <code>cust_id</code> and <code>country_id</code> are taken from different tables. The clause <code>JOIN</code> <code>KEY</code> within the dimension definition specifies how to join together the levels in the hierarchy. The dimension statement is partially shown in the following. The complete <code>CREATE</code> <code>DIMENSION</code> statement as well as the <code>CREATE</code> <code>TABLE</code> statement are shown in <a class="olink COMSC" href="../e10831/toc.htm"><span class="italic">Oracle Database Sample Schemas</span></a>.</p>
<pre>
CREATE DIMENSION customers_dim
   LEVEL customer  IS (customers.cust_id)
   LEVEL city      IS (customers.cust_city)
   LEVEL state     IS (customers.cust_state_province)
   LEVEL country   IS (countries.country_id)
   LEVEL subregion IS (countries.country_subregion)
   LEVEL region IS (countries.country_region)
   HIERARCHY geog_rollup (
      customer        CHILD OF
      city            CHILD OF
      state           CHILD OF
      country         CHILD OF
      subregion       CHILD OF
      region
   JOIN KEY (customers.country_id) REFERENCES country);
</pre>
<p>If you use the <code>SKIP</code> <code>WHEN</code> <code>NULL</code> clause, you can use the <code>JOIN</code> <code>KEY</code> clause to link levels that have a missing level in their hierarchy. For example, the following statement enables a state level that has been declared as <code>SKIP</code> <code>WHEN</code> <code>NULL</code> to join city and country:</p>
<pre>
JOIN KEY (city.country_id) REFERENCES country;
</pre>
<p>This ensures that the rows at customer and city levels can still be associated with the rows of country, subregion, and region levels.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006440"></a><a id="DWHSG8263"></a>
<div class="sect1">
<h2 class="sect1">Viewing Dimensions</h2>
<p>Dimensions can be viewed through one of two methods:</p>
<ul>
<li>
<p><a href="#i1006479">Using Oracle Enterprise Manager</a></p>
</li>
<li>
<p><a href="#i1006841">Using the DESCRIBE_DIMENSION Procedure</a></p>
</li>
</ul>
<a id="i1006479"></a><a id="DWHSG8264"></a>
<div class="sect2">
<h3 class="sect2">Using Oracle Enterprise Manager</h3>
<p>All of the dimensions that exist in the data warehouse can be viewed using Oracle Enterprise Manager. Select the <span class="bold">Dimension</span> object from within the <span class="bold">Schema</span> icon to display all of the dimensions. Select a specific dimension to graphically display its hierarchy, levels, and any attributes that have been defined.</p>
</div>
<!-- class="sect2" -->
<a id="i1006841"></a><a id="DWHSG8265"></a>
<div class="sect2">
<h3 class="sect2">Using the DESCRIBE_DIMENSION Procedure</h3>
<p>To view the definition of a dimension, use the <code>DESCRIBE_DIMENSION</code> procedure in the <code>DBMS_DIMENSION</code> package. <a id="sthref328"></a>For example, if a dimension is created in the <code>sh</code> sample schema with the following statements:</p>
<pre>
CREATE DIMENSION channels_dim
        LEVEL channel       IS (channels.channel_id)
        LEVEL channel_class IS (channels.channel_class)
        HIERARCHY channel_rollup (
                channel CHILD OF channel_class)
        ATTRIBUTE channel DETERMINES (channel_desc)
        ATTRIBUTE channel_class DETERMINES (channel_class);
</pre>
<p>Execute the <code>DESCRIBE_DIMENSION</code> procedure as follows:</p>
<pre>
SET SERVEROUTPUT ON FORMAT WRAPPED;  --to improve the display of info
EXECUTE DBMS_DIMENSION.DESCRIBE_DIMENSION('SH.CHANNELS_DIM');
</pre>
<p>You then see the following output results:</p>
<pre>
EXECUTE DBMS_DIMENSION.DESCRIBE_DIMENSION('SH.CHANNELS_DIM'); 
  DIMENSION SH.CHANNELS_DIM 
    LEVEL CHANNEL IS SH.CHANNELS.CHANNEL_ID 
    LEVEL CHANNEL_CLASS IS SH.CHANNELS.CHANNEL_CLASS 

    HIERARCHY CHANNEL_ROLLUP ( 
             CHANNEL CHILD OF 
             CHANNEL_CLASS) 

    ATTRIBUTE CHANNEL LEVEL CHANNEL DETERMINES
SH.CHANNELS.CHANNEL_DESC 
    ATTRIBUTE CHANNEL_CLASS LEVEL CHANNEL_CLASS DETERMINES
SH.CHANNELS.CHANNEL_CLASS
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006498"></a><a id="DWHSG8266"></a>
<div class="sect1">
<h2 class="sect1">Using Dimensions with Constraints</h2>
<p><a id="sthref329"></a>Constraints <a id="sthref330"></a>play an important role with dimensions. Full referential integrity is sometimes enabled in data warehouses, but not always. This is because operational databases normally have full referential integrity and you can ensure that the data flowing into your data warehouse never violates the already established integrity rules.</p>
<p>It is recommended that constraints be enabled and, if validation time is a concern, then the <code>NOVALIDATE</code> clause should be used as follows:</p>
<pre>
ENABLE NOVALIDATE CONSTRAINT pk_time;
</pre>
<p>Primary and foreign keys should be implemented also. Referential integrity constraints and <code>NOT</code> <code>NULL</code> constraints on the fact tables provide information that query rewrite can use to extend the usefulness of materialized views.</p>
<p>In addition, you should use the <code>RELY</code> clause to inform query rewrite that it can rely upon the constraints being correct as follows:</p>
<pre>
ALTER TABLE time MODIFY CONSTRAINT pk_time RELY;
</pre>
<p>This information is also used for query rewrite. See <a href="qrbasic.htm#g1045551">Chapter 18, "Basic Query Rewrite"</a> for more information.</p>
<p>If you use the <code>SKIP</code> <code>WHEN</code> <code>NULL</code> clause, at least one of the referenced level columns should not have <code>NOT</code> <code>NULL</code> constraints.</p>
</div>
<!-- class="sect1" -->
<a id="BABFGCCC"></a><a id="DWHSG8267"></a>
<div class="sect1">
<h2 class="sect1">Validating Dimensions</h2>
<p><a id="sthref331"></a><a id="sthref332"></a>The information of a dimension object is declarative only and not enforced by the database. If the relationships described by the dimensions are incorrect, incorrect results could occur. Therefore, you should verify the relationships specified by <code>CREATE</code> <code>DIMENSION</code> using the <code>DBMS_DIMENSION.VALIDATE_DIMENSION</code> procedure periodically.</p>
<p>This procedure is easy to use and has only four parameters:</p>
<ul>
<li>
<p><code>dimension</code>: the owner and name.</p>
</li>
<li>
<p><code>incremental</code>: set to <code>TRUE</code> to check only the new rows for tables of this dimension.</p>
</li>
<li>
<p><code>check_nulls</code>: set to <code>TRUE</code> to verify that all columns that are not in the levels containing a <code>SKIP</code> <code>WHEN</code> <code>NULL</code> clause are not null.</p>
</li>
<li>
<p><code>statement_id</code>: a user-supplied unique identifier to identify the result of each run of the procedure.</p>
</li>
</ul>
<p>The following example validates the dimension <code>TIME_FN</code> in the <code>sh</code> schema:</p>
<pre>
@utldim.sql 
EXECUTE DBMS_DIMENSION.VALIDATE_DIMENSION ('SH.TIME_FN', FALSE, TRUE, 
  'my first example');
</pre>
<p>Before running the <code>VALIDATE_DIMENSION</code> procedure, you need to create a local table, <code>DIMENSION_EXCEPTIONS</code>, by running the provided script <code>utldim.sql</code>. If the <code>VALIDATE_DIMENSION</code> procedure encounters any errors, they are placed in this table. Querying this table will identify the exceptions that were found. The following illustrates a sample:</p>
<pre>
SELECT * FROM dimension_exceptions
WHERE statement_id = 'my first example';

STATEMENT_ID       OWNER  TABLE_NAME  DIMENSION_NAME   RELATIONSHIP   BAD_ROWID
------------       -----  ----------  --------------   ------------   ---------
my first example   SH     MONTH       TIME_FN          FOREIGN KEY    AAAAuwAAJAAAARwAAA
</pre>
<p>However, rather than query this table, it may be better to query the rowid of the invalid row to retrieve the actual row that has violated the constraint. In this example, the dimension <code>TIME_FN</code> is checking a table called <code>month</code>. It has found a row that violates the constraints. Using the rowid, you can see exactly which row in the month table is causing the problem, as in the following:</p>
<pre>
SELECT * FROM month
WHERE rowid IN (SELECT bad_rowid
                FROM dimension_exceptions
                WHERE statement_id = 'my first example');

MONTH    QUARTER   FISCAL_QTR    YEAR    FULL_MONTH_NAME    MONTH_NUMB
------   -------   ----------    ----    ---------------    ----------
199903     19981        19981    1998              March             3
</pre></div>
<!-- class="sect1" -->
<a id="i1006554"></a><a id="DWHSG8268"></a>
<div class="sect1">
<h2 class="sect1">Altering Dimensions</h2>
<p><a id="sthref333"></a><a id="sthref334"></a>You can modify a dimension using the <code>ALTER</code> <code>DIMENSION</code> statement. You can add or drop a level, hierarchy, or attribute from the dimension using this command.</p>
<p>Referring to the time dimension in <a href="#i1006380">Figure 11-2</a>, you can remove the attribute <code>fis_year</code>, drop the hierarchy <code>fis_rollup</code>, or remove the level <code>fiscal_year</code>. In addition, you can add a new level called <code>f_year</code> as in the following:</p>
<pre>
ALTER DIMENSION times_dim DROP ATTRIBUTE fis_year;
ALTER DIMENSION times_dim DROP HIERARCHY fis_rollup;
ALTER DIMENSION times_dim DROP LEVEL fis_year;
ALTER DIMENSION times_dim ADD LEVEL f_year IS times.fiscal_year;
</pre>
<p>If you used the <code><span class="codeinlineitalic">extended_attribute_clause</span></code> when creating the dimension, you can drop one attribute column without dropping all attribute columns. This is illustrated in <a href="#i1007404">"Dropping and Creating Attributes with Columns"</a>, which shows the following statement:</p>
<pre>
ALTER DIMENSION product_dim 
DROP ATTRIBUTE size LEVEL prod_type COLUMN Prod_TypeSize;
</pre>
<p>If you try to remove anything with further dependencies inside the dimension, Oracle Database rejects the altering of the dimension. A dimension becomes invalid if you change any schema object that the dimension is referencing. For example, if the table on which the dimension is defined is altered, the dimension becomes invalid.</p>
<p>You can modify a dimension by adding a level containing a <code>SKIP</code> <code>WHEN</code> <code>NULL</code> clause, as in the following statement:</p>
<pre>
ALTER DIMENSION times_dim
ADD LEVEL f_year IS times.fiscal_year SKIP WHEN NULL;
</pre>
<p>You cannot, however, modify a level that contains a <code>SKIP</code> <code>WHEN</code> <code>NULL</code> clause. Instead, you need to drop the level and re-create it.</p>
<p>To check the status of a dimension, view the contents of the column <code>invalid</code> in the <code>ALL_DIMENSIONS</code> data dictionary view. To revalidate the dimension, use the <code>COMPILE</code> option as follows:</p>
<pre>
ALTER DIMENSION times_dim COMPILE;
</pre>
<p>Dimensions can also be modified or deleted using Oracle Enterprise Manager.</p>
</div>
<!-- class="sect1" -->
<a id="i1006586"></a><a id="DWHSG8269"></a>
<div class="sect1">
<h2 class="sect1">Deleting Dimensions</h2>
<p><a id="sthref335"></a><a id="sthref336"></a>A dimension is removed using the <code>DROP</code> <code>DIMENSION</code> statement. For example, you could issue the following statement:</p>
<pre>
DROP DIMENSION times_dim;
</pre></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1371">
<tr>
<td class="cellalignment1378">
<table class="cellalignment1376">
<tr>
<td class="cellalignment1375"><a href="advmv.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1375"><a href="part4.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1380">
<table class="cellalignment1374">
<tr>
<td class="cellalignment1375"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1375"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1375"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1375"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1375"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1375"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
