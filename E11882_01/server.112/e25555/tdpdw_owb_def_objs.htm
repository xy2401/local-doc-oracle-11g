<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Defining Warehouses in Oracle Warehouse Builder</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.1 Build 005" />
<meta name="dcterms.created" content="2012-02-07T20:3:10Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database 2 Day + Data Warehousing Guide" />
<meta name="dcterms.identifier" content="E25555-03" />
<meta name="dcterms.isVersionOf" content="TDPDW" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2007, 2012,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="tdpdw_owb_sources.htm" title="Previous" type="text/html" />
<link rel="Next" href="part2.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25555.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/20</span> <!-- End Header --><a id="CHDICECI"></a>
<h1 class="chapter"><span class="secnum">4</span> <a id="TDPDW10400"></a>Defining Warehouses in Oracle Warehouse Builder</h1>
<p>Using Oracle Warehouse Builder (OWB), you can design a data warehouse that is either relational or dimensional.</p>
<p>Warehouse Builder explicitly separates dimensional design from physical implementation. You can choose either a relational implementation or a multidimensional implementation for the dimensional objects using a simple click operation. Therefore, you can implement the same dimensional object as a relational target warehouse or a multidimensional warehouse.</p>
<p>This chapter shows you how to design a dimensional model implemented as a relational target warehouse. You model a small data warehouse consisting of a cube and two dimensions. Although you can use Warehouse Builder to model complex snowflake schemas, for the purposes of this demonstration, you model a simple star schema consisting of a cube with foreign key references to the two dimensions.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHHGJFD">General Steps for Defining a Relational Target Warehouse</a></p>
</li>
<li>
<p><a href="#CIHHIDAE">Identifying the Warehouse Target Schema</a></p>
</li>
<li>
<p><a href="#i113670">About Flat File Sources in Warehouse Builder</a></p>
</li>
<li>
<p><a href="#BEIIDJJC">About Dimensions</a></p>
</li>
<li>
<p><a href="#CIHEGHCH">About Cubes</a></p>
</li>
</ul>
<a id="CIHHGJFD"></a><a id="TDPDW00177"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">General Steps for Defining a Relational Target Warehouse</h2>
<p>This section provides a procedure for defining a relational target schema.</p>
<p class="subhead2"><a id="sthref62"></a>To define a relational target warehouse:</p>
<ol>
<li>
<p>Designate a schema as the warehouse target schema as described in <a href="#CIHHIDAE">"Identifying the Warehouse Target Schema"</a>.</p>
</li>
<li>
<p>Define or import source and target objects into the warehouse target module.</p>
<p>In general, you can right-click any node in the warehouse target module and select either <span class="bold">New</span> or <span class="bold">Import.</span> Warehouse Builder starts the appropriate wizard to guide you. Click <span class="bold">Help</span> for additional information.</p>
<p>The types of objects you add to the warehouse target module depend on the type of your source data and the purpose of the data warehouse.</p>
<p>To continue with the exercises presented in this guide, see <a href="#CIHHFCJD">"Exercise: Adding External Tables to the Target Module"</a> and <a href="#BEIFBDIH">"Exercise: Understanding Dimensions"</a>.</p>
</li>
<li>
<p>Configure the source and target objects.</p>
<p>Some objects require additional configuration. After you import or define an object in the warehouse module, right-click and select <span class="bold">Configure</span> to review the settings and make changes as necessary.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="CIHHIDAE"></a><a id="TDPDW00178"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Identifying the Warehouse Target Schema</h2>
<p>In a traditional data warehousing implementation, there is typically only one target schema, which is the data warehouse target.</p>
<p class="subhead2"><a id="sthref63"></a>To designate a schema as the data warehouse target schema:</p>
<ol>
<li>
<p>Register the schema in Warehouse Builder.</p>
<p>In the Globals Navigator panel, expand the Security node. Right-click the <span class="bold">Users</span> node and select <span class="bold">New User</span>.</p>
<p>In the Select DB User to Register page of the Create User Wizard, select <span class="bold">Create DB User</span> and follow the prompts. Click <span class="bold">Help</span> or the F1 key if you need more information.</p>
<p>For the purposes of the demonstration, create a new schema and call it <code>EXPENSE_WH</code>.</p>
</li>
<li>
<p>Specify the location information for the new schema.</p>
<p>In the Locations Navigator, right-click and select <span class="bold">New Oracle Location</span> from <span class="bold">Locations</span> under the Oracle node.</p>
<p>Create a location named <code>EXPENSE_WH_LOCATION</code>. Select the option to test the connection.</p>
</li>
<li>
<p>In the Projects Navigator, associate a module with the schema location.</p>
<p>Recall that in <a href="tdpdw_owb_sources.htm#BABIBEGA">"Example: Importing Metadata from Flat Files"</a>, you created a module to correspond to a location from which you import metadata. In a similar way, you must create a module to correspond to the location for the target schema.</p>
<p>In the <code>OWB_DEMO</code> project, expand the Databases node, right-click the Oracle node, and select <span class="bold">New Oracle Module</span>. Follow the prompts in the Create Module Wizard. Ensure that you designate the module status as <code>Warehouse Target.</code></p>
<p>For the purposes of the demonstration, name the module <code>EXPENSE_WH.</code></p>
</li>
<li>
<p>Familiarize yourself with the new data warehouse target schema.</p>
<p>In the Projects Navigator, expand the node for the newly defined warehouse target module. Notice the various types of objects listed under the node. These are the types of objects that you can either define in or import into the module.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="i113670"></a>
<div class="sect1">
<h2 class="sect1"><a id="TDPDW12009"></a>About Flat File Sources in Warehouse Builder</h2>
<p>The types of objects you add to the target module have implications on the ETL logic you subsequently design. If your source data originates from flat files, you can choose to generate either SQL*Loader code or SQL code. Each type of code has its own advantages.</p>
<p>To utilize SQL*Loader in Warehouse Builder, import the flat files as described in <a href="tdpdw_owb_sources.htm#BABIBEGA">"Example: Importing Metadata from Flat Files"</a>. To utilize SQL, however, you must define an external table in the warehouse module as described in <a href="#CIHHFCJD">"Exercise: Adding External Tables to the Target Module"</a>.</p>
<a id="CIHHFCJD"></a><a id="TDPDW00179"></a>
<div class="sect2">
<h3 class="sect2">Exercise: Adding External Tables to the Target Module</h3>
<p><span class="bold">External tables</span> are tables<a id="sthref64"></a> that represent data from flat files in a relational format. They are read-only tables that act like regular source tables in Warehouse Builder. <a id="sthref65"></a>Each external table you create corresponds to a single record type in an existing flat file.</p>
<p>The objective of this exercise is to create the necessary external tables for the two flat files that were previously imported. Because both files have a single record type, you must create only one external table for each file.</p>
<p class="subhead2"><a id="sthref66"></a>To add external tables to the target warehouse module:</p>
<ol>
<li>
<p>In the Projects Navigator, expand the Databases node and then the Oracle node.</p>
</li>
<li>
<p>Expand the target module where you want to create the external table.</p>
<p>Expand the <code>EXPENSE_WH</code> module.</p>
</li>
<li>
<p>Right-click the External Tables node and select <span class="bold">New External Table.</span></p>
<p>Warehouse Builder displays the <a id="sthref67"></a><a id="sthref68"></a><a id="sthref69"></a>Create External Table wizard. Follow the prompts.</p>
<p>Name the external table <code>EXPENSE_CATEGORIES.</code>When prompted to select a flat file, select <code>EXPENSE_CATEGORIES_CSV.</code></p>
</li>
<li>
<p>Repeat the previous step to create an external table called <code>EXPENSE_DATA</code> to represent <code>EXPORT_CSV.</code></p>
</li>
<li>
<p>Configure the physical file system details for the two external tables.</p>
<p>Right-click an external table from the module and select <span class="bold">Configure.</span> On the DataFiles node, right-click and select <span class="bold">Create.</span> Accept the default name, <code>NEW_DATAFILE_1.</code> Enter the name of the flat file from which the external table inherits data. Therefore, specify the data file name as <code>expense_categories.csv</code> for one external table and <code>export.csv</code> for the other.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEIIDJJC"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="TDPDW12010"></a>About Dimensions</h2>
<p>A <span class="bold">dimension</span> is a structure that organizes data. Examples of commonly used dimensions are Customers, Time, and Products.</p>
<p>For relational dimensions, using dimensions improves query performance because users often analyze data by drilling down on known hierarchies. An example of a hierarchy is the Time hierarchy of year, quarter, month, day. Oracle Database uses these defined hierarchies by rewriting queries that retrieve data from materialized views rather than detail tables.</p>
<p>Typical relational dimension tables have the following characteristics:</p>
<ul>
<li>
<p>A single-column primary key populated with values called warehouse keys.</p>
<p>Warehouse keys provide administrative control over the dimension, support techniques that preserve dimension history, and reduce the size of cubes.</p>
</li>
<li>
<p>One or more hierarchies that are explicitly defined as dimension objects. Hierarchies maximize the number of <a id="sthref70"></a>query rewrites performed by the Oracle server.</p>
</li>
<li>
<p>Dimensions are the primary organizational unit of data in a star schema. Examples of some commonly used dimensions are Customer, Product, and Time.</p>
</li>
</ul>
<p>A dimension consists of a set of levels and a set of hierarchies defined over these levels. When you create a dimension, you define the following:</p>
<ul>
<li>
<p><span class="bold">Dimension Attributes:</span> A descriptive characteristic of a dimension member. It has a name and a data type.</p>
</li>
<li>
<p><span class="bold">Levels:</span> Defines the level of aggregation of data. For example, the Products dimension can have the following levels: Total, Groups, and Product.</p>
</li>
<li>
<p><span class="bold">Level attributes:</span> A descriptive characteristic of a level member. Each level in the dimension has a set of level attributes.</p>
</li>
<li>
<p><span class="bold">Hierarchies:</span> A logical structure that uses ordered levels or a set of data values (for a value-based hierarchy) as a means of organizing data. A hierarchy describes parent-child relationships among a set of levels.</p>
</li>
</ul>
<a id="BEIFBDIH"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="TDPDW12011"></a>Exercise: Understanding Dimensions</h3>
<p>To understand the basic concepts and design of a dimension, you will examine a predefined dimension.</p>
<p class="subhead2"><a id="sthref71"></a>To become familiar with the dimensions:</p>
<ol>
<li>
<p>Open the <code>PRODUCTS</code> dimension in the Dimension Editor.</p>
<p>In the Projects Navigator, navigate to <code>OWB_DEMO,</code> Databases, Oracle, <code>SALES_WH,</code> and then expand Dimensions. Double-click <code>PRODUCTS.</code></p>
<p>Warehouse Builder starts the Dimension Editor. The Dimension Editor is the single interface where you can design, create, and manage a variety of database or dimensional objects.</p>
</li>
<li>
<p>Observe the dimension attributes.</p>
<p>A dimension attribute is a descriptive characteristic of a dimension member. It has a name and a data type. A dimension attribute is applicable to one or more levels in the dimension. They are implemented as level attributes to store data.</p>
<p>The list of dimension attributes must include all the attributes that you may need for any of the levels in the dimension.</p>
<p>For example, the Products dimension has a dimension attribute called Description. This attribute is applicable to all the levels (Total, Groups, and Products) and stores the description for each of the members of these levels.</p>
</li>
<li>
<p>Observe the levels.</p>
<p>The levels in a dimension represent the level of aggregation of data. A dimension must contain at least one level, except when a dimension contains a value-based hierarchy. Every level must have level attributes and a level identifier.</p>
<p>For example, the dimension Products can have the following levels: Total, Groups, and Product.</p>
</li>
</ol>
<div class="sect3"><a id="sthref72"></a>
<h4 class="sect3"><a id="TDPDW12012"></a>About Levels</h4>
<p>Every level must have two identifiers: a surrogate identifier and a business identifier. When you create a dimension, each level must implement the dimension attributes marked as the surrogate identifier and business identifier (attributes, in the case of a composite business identifier) of the dimension.</p>
<p>A surrogate identifier uniquely identifies each level record across all the levels of the dimension. It must be composed of a single attribute. Surrogate identifiers enable you to hook facts to any dimension level as opposed to the lowest dimension level only.</p>
<p>For a dimension that has a relational implementation, the surrogate identifier must be of the data type <code>NUMBER</code>. Because the value of the surrogate identifier must be unique across all dimension levels, you use the same sequence to generate the surrogate identifier of all the dimension levels.</p>
<p>For a relational implementation, the surrogate identifier serves the following purposes:</p>
<ul>
<li>
<p>If a child level is stored in a different table from the parent level, each child level record stores the surrogate identifier of the parent record.</p>
</li>
<li>
<p>In a fact table, each cube record stores only the surrogate identifier of the dimension record to which it refers. By storing the surrogate identifier, the size of the fact table that implements the cube is reduced.</p>
</li>
</ul>
<p>A business identifier consists of a user-selected list of attributes. The business identifier must be unique across the level and is always derived from the natural key of the data source. The business identifier uniquely identifies the member. For example, the business identifier of a Product level can be its Universal Product Code (UPC), which is a unique code for each product.</p>
<p>The business identifier does the following:</p>
<ul>
<li>
<p>Identifies a record in business terms</p>
</li>
<li>
<p>Provides a logical link between the fact and the dimension or between two levels</p>
</li>
<li>
<p>Enables the lookup of a surrogate key</p>
</li>
</ul>
<p>When you populate a child level in a dimension, you must specify the business identifier of its parent level. When you populate a cube, you must specify the business identifier of the dimension level to which the cube refers.</p>
<p>A parent identifier is used to annotate the parent reference in a value-based hierarchy.</p>
<p>For example, an <code>EMPLOYEE</code> dimension with a value-based hierarchy, has the following dimension attributes: <code>ID</code>, <code>FIRST_NAME</code>, <code>LAST_NAME</code>, <code>EMAIL</code>, <code>PHONE</code>, <code>JOB_ID</code>, <code>HIRE_DATE</code>, and <code>MANAGER_ID</code>. In this dimension, <code>ID</code> is the surrogate identifier and <code>MANAGER_ID</code> is the parent identifier.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref73"></a>
<h4 class="sect3"><a id="TDPDW12013"></a>Defining <a id="sthref74"></a><a id="sthref75"></a>Level Attributes</h4>
<p>A level attribute is a descriptive characteristic of a level member. Each level in the dimension has a set of level attributes. To define level attributes, you select the dimension attributes that the level will implement. A level attribute has a distinct name and a data type. The data type is inherited from the dimension attribute that the level attribute implements. The name of the level attribute can be modified to be different from that of the dimension attribute that it implements.</p>
<p>Every level must implement the attribute marked as the surrogate identifier and the business identifier in the set of the dimension attributes.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref76"></a>
<h4 class="sect3"><a id="TDPDW12014"></a>Defining <a id="sthref77"></a><a id="sthref78"></a>Hierarchies</h4>
<p>A dimension hierarchy is a logical structure that uses ordered levels or a set of data values (for a value-based hierarchy) as a means of organizing data. A hierarchy describes parent-child relationships among a set of levels. A level-based hierarchy must have at least one level. A level can be part of more than one hierarchy.</p>
<p>For example, the Time dimension can have the following two hierarchies:</p>
<p>Fiscal Hierarchy: Fiscal Year &gt; Fiscal Quarter &gt; Fiscal Month &gt; Fiscal Week &gt; Day</p>
<p>Calendar Hierarchy: Calendar Year &gt; Calendar Quarter &gt; Calendar Month &gt; Day</p>
<p>All hierarchies must be strict 1:<span class="italic">n</span> relationships. One record in a parent level corresponds to multiple records in a child level, but one record in a child level corresponds to only one parent record within a hierarchy.</p>
</div>
<!-- class="sect3" -->
<a id="CHDEHGJD"></a>
<div class="sect3">
<h4 class="sect3"><a id="TDPDW12015"></a><a id="sthref79"></a><a id="sthref80"></a>Dimension Roles</h4>
<p>A dimension role is an alias for a dimension. In a data warehouse, a cube can refer to the same dimension multiple times, without requiring the dimension to be stored multiple times. Multiple references to the same dimension may cause confusion. To avoid confusion, you create an alias for each reference to the dimension, thus allowing the joins to be instantly understandable. In such cases, the same dimension performs different dimension roles in the cube.</p>
<p>For example, a sales record can have the following three time values:</p>
<ul>
<li>
<p>Time the order is booked</p>
</li>
<li>
<p>Time the order is shipped</p>
</li>
<li>
<p>Time the order is fulfilled</p>
</li>
</ul>
<p>Instead of creating three time dimensions and populating them with data, you can use dimension roles. Model one time dimension and create the following three roles for the time dimension: order booked time, order shipped time, and order fulfillment time. The sales cube can refer to the order time, ship time, and fulfillment time dimensions.</p>
<p>When the dimension is stored in the database, only one dimension is created, and each dimension role references this dimension. When the dimension is stored in the OLAP catalog, Warehouse Builder creates a dimension for each dimension role. Thus, if a time dimension has three roles, three dimensions are created in the OLAP catalog. However, all three dimensions are mapped to the same underlying table. This is a workaround because the OLAP catalog does not support dimension roles.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Dimension roles can be created for dimensions that have a relational implementation only.</div>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref81"></a>
<h4 class="sect3"><a id="TDPDW12016"></a><a id="sthref82"></a>Level Relationships</h4>
<p>A level relationship is an association between levels in a dimension hierarchy. Level relationships are implemented using level attributes that store the reference to the parent level in the hierarchy.</p>
<p>For example, the Products dimension has the following hierarchy: Total &gt; Groups &gt; Product. Warehouse Builder creates two level relationships: Product to Groups and Groups to Total. Two new attributes implement this level relationship: one in the Product level and one in the Groups level. These attributes store the surrogate ID of the parent level.</p>
</div>
<!-- class="sect3" -->
<a id="CIHBAEBJ"></a>
<div class="sect3">
<h4 class="sect3"><a id="TDPDW12017"></a><a id="sthref83"></a>Dimension Example</h4>
<p>An example of a dimension is the Products dimension that you use to organize product data. <a href="#BEIDGFHE">Table 4-1</a> lists the levels in the Products dimension and the surrogate identifier and business identifier for each of the levels in the dimension.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref84"></a><a id="BEIDGFHE"></a>Table 4-1 Products Dimension Level Details</p>
<table class="cellalignment1443" title="Products Dimension Level Details" summary="This table describes the levels and level attributes of the Products dimension." dir="ltr">
<thead>
<tr class="cellalignment1434">
<th class="cellalignment1444" id="r1c1-t3">Level</th>
<th class="cellalignment1444" id="r1c2-t3">Attribute Name</th>
<th class="cellalignment1444" id="r1c3-t3">Identifier</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r2c1-t3" headers="r1c1-t3">
<p>Total</p>
</td>
<td class="cellalignment1440" headers="r2c1-t3 r1c2-t3">
<p>ID</p>
</td>
<td class="cellalignment1440" headers="r2c1-t3 r1c3-t3">
<p>Surrogate</p>
</td>
</tr>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r3c1-t3" headers="r1c1-t3">&nbsp;</td>
<td class="cellalignment1440" headers="r3c1-t3 r1c2-t3">
<p>Name</p>
</td>
<td class="cellalignment1440" headers="r3c1-t3 r1c3-t3">
<p>Business</p>
</td>
</tr>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r4c1-t3" headers="r1c1-t3">&nbsp;</td>
<td class="cellalignment1440" headers="r4c1-t3 r1c2-t3">
<p>Description</p>
</td>
<td class="cellalignment1440" headers="r4c1-t3 r1c3-t3">&nbsp;</td>
</tr>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r5c1-t3" headers="r1c1-t3">
<p>Groups</p>
</td>
<td class="cellalignment1440" headers="r5c1-t3 r1c2-t3">
<p>ID</p>
</td>
<td class="cellalignment1440" headers="r5c1-t3 r1c3-t3">
<p>Surrogate</p>
</td>
</tr>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r6c1-t3" headers="r1c1-t3">&nbsp;</td>
<td class="cellalignment1440" headers="r6c1-t3 r1c2-t3">
<p>Name</p>
</td>
<td class="cellalignment1440" headers="r6c1-t3 r1c3-t3">
<p>Business</p>
</td>
</tr>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r7c1-t3" headers="r1c1-t3">&nbsp;</td>
<td class="cellalignment1440" headers="r7c1-t3 r1c2-t3">
<p>Description</p>
</td>
<td class="cellalignment1440" headers="r7c1-t3 r1c3-t3">&nbsp;</td>
</tr>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r8c1-t3" headers="r1c1-t3">
<p>Product</p>
</td>
<td class="cellalignment1440" headers="r8c1-t3 r1c2-t3">
<p>ID</p>
</td>
<td class="cellalignment1440" headers="r8c1-t3 r1c3-t3">
<p>Surrogate</p>
</td>
</tr>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r9c1-t3" headers="r1c1-t3">&nbsp;</td>
<td class="cellalignment1440" headers="r9c1-t3 r1c2-t3">
<p>UPC</p>
</td>
<td class="cellalignment1440" headers="r9c1-t3 r1c3-t3">
<p>Business</p>
</td>
</tr>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r10c1-t3" headers="r1c1-t3">&nbsp;</td>
<td class="cellalignment1440" headers="r10c1-t3 r1c2-t3">
<p>Name</p>
</td>
<td class="cellalignment1440" headers="r10c1-t3 r1c3-t3">&nbsp;</td>
</tr>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r11c1-t3" headers="r1c1-t3">&nbsp;</td>
<td class="cellalignment1440" headers="r11c1-t3 r1c2-t3">
<p>Description</p>
</td>
<td class="cellalignment1440" headers="r11c1-t3 r1c3-t3">&nbsp;</td>
</tr>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r12c1-t3" headers="r1c1-t3">&nbsp;</td>
<td class="cellalignment1440" headers="r12c1-t3 r1c2-t3">
<p>Package Type</p>
</td>
<td class="cellalignment1440" headers="r12c1-t3 r1c3-t3">&nbsp;</td>
</tr>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r13c1-t3" headers="r1c1-t3">&nbsp;</td>
<td class="cellalignment1440" headers="r13c1-t3 r1c2-t3">
<p>Package Size</p>
</td>
<td class="cellalignment1440" headers="r13c1-t3 r1c3-t3">&nbsp;</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>The Products dimension contains the following hierarchy:</p>
<p>Hierarchy 1: Total &gt; Groups &gt; Product</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref85"></a>
<h4 class="sect3"><a id="TDPDW12018"></a>Control Rows</h4>
<p>Warehouse Builder creates control rows that enable you to link fact data to a dimension at any level. For example, you may want to reuse a Time dimension in two different cubes to record the budget data at the month level and the actual data at the day level. Because of the way dimensions are loaded with control rows, you can perform this action without any additional definitions. Each member in a dimension hierarchy is represented using a single record.</p>
<p>All control rows have negative dimension key values starting from -2. For each level value of higher levels, a row is generated that can act as a unique linking row to the fact table. All the lower levels in this linking or control rows are nulled out.</p>
<p>Consider the Products dimension described in <a href="#CIHBAEBJ">"Dimension Example"</a>. You load data into this dimension from a table that contains four categories of products. Warehouse Builder inserts control rows in the dimension as shown in <a href="#BCGIGGFI">Table 4-2</a>. These rows enable you to link to a cube at any dimension level. Note that the table does not contain all the dimension attribute values.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref86"></a><a id="BCGIGGFI"></a>Table 4-2 Control Rows Created for the Products Dimension</p>
<table class="cellalignment1443" title="Control Rows Created for the Products Dimension" summary="This table provides an example of control rows." dir="ltr">
<thead>
<tr class="cellalignment1434">
<th class="cellalignment1444" id="r1c1-t4">Dimension Key</th>
<th class="cellalignment1444" id="r1c2-t4">Total Name</th>
<th class="cellalignment1444" id="r1c3-t4">Groups Name</th>
<th class="cellalignment1444" id="r1c4-t4">Product Name</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r2c1-t4" headers="r1c1-t4">
<p>-3</p>
</td>
<td class="cellalignment1440" headers="r2c1-t4 r1c2-t4">
<p>TOTAL</p>
</td>
<td class="cellalignment1440" headers="r2c1-t4 r1c3-t4">&nbsp;</td>
<td class="cellalignment1440" headers="r2c1-t4 r1c4-t4">&nbsp;</td>
</tr>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r3c1-t4" headers="r1c1-t4">
<p>-9</p>
</td>
<td class="cellalignment1440" headers="r3c1-t4 r1c2-t4">
<p>TOTAL</p>
</td>
<td class="cellalignment1440" headers="r3c1-t4 r1c3-t4">
<p>Hardware</p>
</td>
<td class="cellalignment1440" headers="r3c1-t4 r1c4-t4">&nbsp;</td>
</tr>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r4c1-t4" headers="r1c1-t4">
<p>-10</p>
</td>
<td class="cellalignment1440" headers="r4c1-t4 r1c2-t4">
<p>TOTAL</p>
</td>
<td class="cellalignment1440" headers="r4c1-t4 r1c3-t4">
<p>Software</p>
</td>
<td class="cellalignment1440" headers="r4c1-t4 r1c4-t4">&nbsp;</td>
</tr>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r5c1-t4" headers="r1c1-t4">
<p>-11</p>
</td>
<td class="cellalignment1440" headers="r5c1-t4 r1c2-t4">
<p>TOTAL</p>
</td>
<td class="cellalignment1440" headers="r5c1-t4 r1c3-t4">
<p>Electronics</p>
</td>
<td class="cellalignment1440" headers="r5c1-t4 r1c4-t4">&nbsp;</td>
</tr>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r6c1-t4" headers="r1c1-t4">
<p>-12</p>
</td>
<td class="cellalignment1440" headers="r6c1-t4 r1c2-t4">
<p>TOTAL</p>
</td>
<td class="cellalignment1440" headers="r6c1-t4 r1c3-t4">
<p>Peripherals</p>
</td>
<td class="cellalignment1440" headers="r6c1-t4 r1c4-t4">&nbsp;</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>To obtain the real number of rows in a dimension, count the number of rows by including a <code>WHERE</code> clause that excludes the <code>NULL</code> rows. For example, to obtain a count on Products, count the number of rows including a <code>WHERE</code> clause to exclude <code>NULL</code> rows in Product.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BEIGGBDE"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="TDPDW12019"></a><a id="sthref87"></a>Implementing a Dimension</h3>
<p>Implementing a dimension consists of specifying how the dimension and its data are physically stored. Warehouse Builder enables several types of implementations for dimensional objects, including multi-dimensional implementations. However, this guide describes a relational implementation only.</p>
<a id="CIHIHABI"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="TDPDW12020"></a><a id="sthref88"></a><a id="sthref89"></a>Star Schema</h4>
<p>In a star schema implementation, Warehouse Builder stores the dimension data in a single table. Because the same table or view stores data for more than one dimension level, you must specify a dimension key column in the table. The dimension key column is the primary key for the dimension. This column also forms the foreign key reference to the cube.</p>
<p>Each level implements a subset of dimension attributes. By default, the level attribute name is the same as the dimension attribute name. To avoid name conflicts caused by all level data being stored in the same table, Warehouse Builder uses the following guidelines for naming in a star table:</p>
<ul>
<li>
<p>If the level attribute name is not unique, Warehouse Builder prefixes it with the name of the level.</p>
</li>
<li>
<p>If the level attribute name is unique, Warehouse Builder does not use any prefix.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
To ensure that no prefixes are used, you must explicitly change the level attribute name in the Create Dimension wizard or the Data Object Editor.</div>
<p>For example, if you implement the Products dimension using a star schema, Warehouse Builder uses a single table to implement all the levels in the dimension.</p>
<div class="figure">
<p class="titleinfigure"><a id="BEIEHDAC"></a>Figure 4-1 Star Schema Implementation of Products Dimension</p>
<img width="547" height="465" src="img/star_implementation.gif" alt="Description of Figure 4-1 follows" title="Description of Figure 4-1 follows" /><br />
<a id="sthref90" href="img_text/star_implementation.htm">Description of "Figure 4-1 Star Schema Implementation of Products Dimension"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<a id="BABEIGAD"></a>
<div class="sect3">
<h4 class="sect3"><a id="TDPDW12021"></a>Binding</h4>
<p>When you perform binding, you specify the database columns that will store the data of each attribute and level relationship in the dimension. You can perform either auto binding or manual binding for a dimension.</p>
<p><a id="BABBICDE"></a><span class="subhead3">Auto Binding&nbsp;</span> When you perform auto binding, Warehouse Builder binds the dimension object attributes to the database columns that store their data. When you perform auto binding for the first time, Warehouse Builder also creates the tables that are used to store the dimension data.</p>
<p>When you perform auto binding on a dimension that is already bound, Warehouse Builder uses the following <a id="sthref91"></a><a id="sthref92"></a>rules:</p>
<ul>
<li>
<p>If the implementation method of the dimension remains the same, Warehouse Builder rebinds the dimensional object to the existing implementation objects.</p>
<p>For example, you create a Products dimension using the star schema implementation method and perform auto binding. The dimension data is stored in a table called <code>PRODUCTS</code>. You modify the dimension definition at a later date but retain the implementation method as star schema. When you now auto bind the Products dimension, Warehouse Builder rebinds the Products dimension attributes to the same implementation tables.</p>
</li>
<li>
<p>If the implementation method of a dimension is changed, Warehouse Builder deletes the old implementation objects and creates a new set of implementation tables. If you want to retain the old implementation objects, you must first unbind the dimensional object and then perform auto binding. For more information about implementation methods, see <a href="#CIHIHABI">"Star Schema"</a>.</p>
<p>For example, you create a Products dimension using the star schema implementation method and bind it to the implementation table. You now edit this dimension and change its implementation method to snowflake schema. When you now perform auto binding for the modified Products dimension, Warehouse Builder deletes the table that stores the dimension data, creates new implementation tables, and binds the dimension attributes and relationships to the new implementation tables.</p>
</li>
</ul>
<p class="subhead2"><a id="sthref93"></a>To perform auto binding:</p>
<ol>
<li>
<p>In the Projects Navigator, select the dimension.</p>
</li>
<li>
<p>From the <span class="bold">File</span> menu, choose <span class="bold">Bind</span>.</p>
<p>If the Bind option is not enabled, then check if the dimension is a relational dimension and that the Manual options is not set in the Implementation section of the Storage tab.</p>
</li>
</ol>
<p>Auto binding uses the implementation settings described in <a href="#CIHIHABI">"Star Schema"</a>.</p>
<p><a id="BABGHCDH"></a><span class="subhead3">Manual Binding&nbsp;</span>You would typically use manual binding to bind existing tables to a dimension. Use manual binding if no auto binding or rebinding is required.</p>
<p class="subhead2"><a id="sthref94"></a>To perform manual binding for a dimension:</p>
<ol>
<li>
<p>Create the implementation objects (tables or views) that you will use to store the dimension data.</p>
<p>In the case of relational dimensions, create the sequence used to load the surrogate identifier of the dimension. You can also choose to use an existing sequence.</p>
</li>
<li>
<p>In the Projects Navigator, right-click the dimension and select <span class="bold">Open</span>.</p>
<p>The Dimension Editor is opened.</p>
</li>
<li>
<p>Go to the Physical Bindings tab.</p>
</li>
<li>
<p>From the Component Palette, drag and drop the operator that represents the implementation object onto the canvas.</p>
<p>Warehouse Builder displays the Add a New or Existing <span class="italic">Object</span> dialog box. For example, if the dimension data is stored in a table, drag a Table operator from the Component Palette and drop it onto the canvas. The Add a New or Existing Table dialog box is displayed.</p>
</li>
<li>
<p>Choose the <span class="bold">Select an existing</span> <span class="bolditalic">Object</span> option and then select the data object from the list of objects displayed in the selection tree.</p>
</li>
<li>
<p>Click <span class="bold">OK</span>.</p>
<p>A node representing the object that you just added is displayed on the canvas.</p>
</li>
<li>
<p>If more than one data object is used to store the dimension data, perform steps 4 to 6 for each data object.</p>
</li>
<li>
<p>Map the attributes in each level of the dimension to the columns that store their data. Hold down your mouse on the dimension attribute, drag, and then drop on the column that stores the attribute value.</p>
<p>Also map the level relationships to the database column that store their data.</p>
<p>For example, for the Products dimension described in <a href="#CIHBAEBJ">"Dimension Example"</a>, the attribute <code>Name</code> in the <code>Groups</code> level of the <code>Products</code> dimension is stored in the <code>Group_name</code> attribute of the <code>Products_tab</code> table. Hold down the mouse on the <code>Name</code> attribute, drag, and drop on the <code>Group_name</code> attribute of the <code>Products_tab</code> table.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHEGHCH"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="TDPDW12022"></a><a id="sthref95"></a>About Cubes</h2>
<p>Cubes contain measures and link to one or more dimensions. The axes of a cube contain dimension members and the body of the cube contains measure values. Most measures are additive. For example, sales data can be organized into a cube whose edges contain values for Time, Products, and Customers dimensions and whose body contains values from the measures Value sales, and Dollar sales.</p>
<p>A cube is linked to dimension tables over foreign key constraints. Because data integrity is vital, these constraints are critical in a data warehousing environment. The constraints enforce referential integrity during the daily operations of the data warehouse.</p>
<p>Data analysis applications typically aggregate data across many dimensions. This enables them to look for anomalies or unusual patterns in the data. Using cubes is the most efficient way of performing these type of operations. In a relational implementation, when you design dimensions with warehouse keys, the cube row length is usually reduced. This is because warehouse keys are shorter than their natural counterparts. This results is a smaller amount of storage space needed for the cube data.</p>
<p>A typical cube contains:</p>
<ul>
<li>
<p>A primary key defined on a set of foreign key reference columns or, in the case of a data list, on an artificial key or a set of warehouse key columns. When the cube is a data list, the foreign key reference columns do not uniquely identify each row in the cube.</p>
</li>
<li>
<p>A set of foreign key reference columns that link the table with its dimensions.</p>
</li>
</ul>
<a id="BEIGGDGC"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="TDPDW12023"></a>Defining a Cube</h3>
<p>A cube consists of the set of measures defined over a set of dimensions. To create a cube, you must define the following:</p>
<ul>
<li>
<p><a href="#CIHHAAGF">Cube Measures</a></p>
</li>
<li>
<p><a href="#CIHCAIGH">Cube Dimensionality</a></p>
</li>
</ul>
<a id="CIHHAAGF"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="TDPDW12024"></a>Cube <a id="sthref96"></a>Measures</h4>
<p>A measure is data, usually numeric and additive, that can be examined and analyzed. Examples of measures include sales, cost, and profit. A cube must have one or more measures. You can also perform aggregation of measures. Only numeric measures can be aggregated.</p>
</div>
<!-- class="sect3" -->
<a id="CIHCAIGH"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="TDPDW12025"></a>Cube <a id="sthref97"></a>Dimensionality</h4>
<p>A cube is defined by a set of dimensions. A cube can refer to a level that is not the lowest level in a dimension.</p>
<p>For cubes that use a pure relational implementation, you can reuse the same dimension multiple times with the help of dimension roles. For more information about dimension roles, see <a href="#CHDEHGJD">"Dimension Roles"</a>.</p>
<p>Before you validate a cube, ensure that all the dimensions that the cube references are valid.</p>
<p class="subhead2"><a id="sthref98"></a>To define a dimension reference, specify the following:</p>
<ul>
<li>
<p>The dimension and the level within the dimension to which the cube refers.</p>
<p>For a cube that uses a relational implementation, you can refer to intermediate levels in a dimension. Warehouse Builder supports a reference to the non surrogate identifier of a level, for example, the business keys.</p>
</li>
<li>
<p>For dimensions that use a relational implementation, a dimension role for each dimension to indicate what role the dimension reference is performing in the cube. Specifying the dimension role is optional.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref99"></a>
<h4 class="sect3"><a id="TDPDW12026"></a><a id="sthref100"></a>Cube Example</h4>
<p>The Sales cube stores aggregated sales data. It contains the following two measures: <code>Value_sales</code> and <code>Dollar_sales</code>.</p>
<ul>
<li>
<p><code>Value_sales</code> stores the amount of the sale in terms of the quantity sold.</p>
</li>
<li>
<p><code>Dollar_sales</code> stores the amount of the sale.</p>
</li>
</ul>
<p><a href="#CIHBCCII">Table 4-3</a> describes the dimensionality of the Sales cube. It lists the name of the dimension and the dimension level that the cube references.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref101"></a><a id="CIHBCCII"></a>Table 4-3 Dimensionality of the Sales Cube</p>
<table class="cellalignment1443" title="Dimensionality of the Sales Cube" summary="This table contains two columns that list the dimension name and dimension level to which the Sales cube references." dir="ltr">
<thead>
<tr class="cellalignment1434">
<th class="cellalignment1444" id="r1c1-t6">Dimension Name</th>
<th class="cellalignment1444" id="r1c2-t6">Level Name</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r2c1-t6" headers="r1c1-t6">
<p>Products</p>
</td>
<td class="cellalignment1440" headers="r2c1-t6 r1c2-t6">
<p>Product</p>
</td>
</tr>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r3c1-t6" headers="r1c1-t6">
<p>Customers</p>
</td>
<td class="cellalignment1440" headers="r3c1-t6 r1c2-t6">
<p>Customer</p>
</td>
</tr>
<tr class="cellalignment1434">
<td class="cellalignment1440" id="r4c1-t6" headers="r1c1-t6">
<p>Times</p>
</td>
<td class="cellalignment1440" headers="r4c1-t6 r1c2-t6">
<p>Day</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BEIBFICJ"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="TDPDW12027"></a>Implementing a Cube</h3>
<p>When you implement a cube, you specify the physical storage details for the cube. As with dimensions, Warehouse Builder enables you to implement cubes in relational or multidimensional forms. The relational implementation is described in this guide.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref102"></a>
<h4 class="sect3"><a id="TDPDW12028"></a><a id="sthref103"></a><a id="sthref104"></a>Relational Implementation of a Cube</h4>
<p>The database object used to store the cube data is called a fact table. A cube must be implemented using only one fact table. The fact table contains columns for the cube measures and dimension references.</p>
<p class="subhead2"><a id="sthref105"></a>To implement a cube:</p>
<ul>
<li>
<p>Select a table or materialized view that will store the cube data.</p>
</li>
<li>
<p>For each measure, select a column that will store the measure data.</p>
</li>
<li>
<p>For each dimension reference, select a column that will store the dimension reference.</p>
<p>Each dimension reference corresponds to a column on the fact table and optionally a foreign key from the fact table to the dimension table. The 1:<span class="italic">n</span> relationships from the fact tables to the dimension tables must be enforced.</p>
</li>
</ul>
<div class="figure">
<p class="titleinfigure"><a id="CIHEGGCC"></a>Figure 4-2 Implementation of the Sales Cube</p>
<img width="581" height="287" src="img/cube_impl_rel.gif" alt="Description of Figure 4-2 follows" title="Description of Figure 4-2 follows" /><br />
<a id="sthref106" href="img_text/cube_impl_rel.htm">Description of "Figure 4-2 Implementation of the Sales Cube"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref107"></a>
<h4 class="sect3"><a id="TDPDW12029"></a>Binding</h4>
<p>When you perform binding, you specify the database columns that will store the data of each measure and dimension reference of the cube. You can perform auto binding or manual binding for a cube.</p>
<p><a id="sthref108"></a><span class="subhead3">Auto Binding&nbsp;</span>When you perform auto binding, Warehouse Builder creates the table that stores the cube data and then binds the cube measures and references to the database columns. For detailed steps on performing auto binding, see <a href="#BABBICDE">"Auto Binding"</a>.</p>
<p>When you perform auto binding for a cube, ensure that you auto bind the dimensions that a cube references before you auto bind the cube. You will not be able to deploy the cube if any dimension that the cube references was auto bound after the cube was last auto bound.</p>
<p>For example, you create the <code>SALES</code> cube that references the <code>TIMES</code> and <code>PRODUCTS</code> dimensions and perform auto binding for the cube. You later modify the definition of the <code>PRODUCTS</code> dimension. If you now attempt to auto bind the SALES cube again, Warehouse Builder generates an error. You must first auto bind the PRODUCTS dimensions and then auto bind the cube.</p>
<p><a id="sthref109"></a><span class="subhead3">Manual Binding&nbsp;</span>In manual binding, you must first create the table or view that stores the cube data and then map the cube references and measures to the database columns that store their data. Alternatively, you can use an existing database table or view to store the cube data.</p>
<p class="subhead2"><a id="sthref110"></a>To perform manual binding for a cube:</p>
<ol>
<li>
<p>Create the table or view that stores the cube data.</p>
</li>
<li>
<p>In the Projects Navigator, right-click the cube and select <span class="bold">Open</span>.</p>
<p>The Cube Editor is opened.</p>
</li>
<li>
<p>Go to the Physical Bindings tab.</p>
</li>
<li>
<p>From the Component Palette, drag and drop the operator that represents the implementation object onto the canvas.</p>
<p>Warehouse Builder displays the Add a New or Existing <span class="italic">Object</span> dialog box. For example, if the cube data is stored in a table, drag a Table operator from the Component Palette and drop it onto the canvas. The Add a New or Existing Table dialog box is displayed.</p>
</li>
<li>
<p>Choose <span class="bold">Select an existing</span> <span class="bolditalic">object</span> and then select the data object from the list of objects displayed in the selection tree.</p>
</li>
<li>
<p>Click <span class="bold">OK</span>.</p>
<p>A node representing the object that you just added is displayed on the canvas.</p>
</li>
<li>
<p>Map the measures and dimension references of the cube to the columns that store the cube data. Hold down your mouse on the measure or dimension reference, drag, and then drop on the data object attribute that stores the measure or dimension reference.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1433">
<tr>
<td class="cellalignment1440">
<table class="cellalignment1438">
<tr>
<td class="cellalignment1437"><a href="tdpdw_owb_sources.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1437"><a href="part2.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2007, 2012,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1442">
<table class="cellalignment1436">
<tr>
<td class="cellalignment1437"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1437"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1437"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1437"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1437"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1437"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
