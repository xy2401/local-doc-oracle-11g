<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>SQL for Reporting and Analysis</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.1 Build 005" />
<meta name="dcterms.created" content="2012-02-07T20:3:12Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database 2 Day + Data Warehousing Guide" />
<meta name="dcterms.identifier" content="E25555-03" />
<meta name="dcterms.isVersionOf" content="TDPDW" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2007, 2012,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="part3.htm" title="Previous" type="text/html" />
<link rel="Next" href="part4.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25555.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">13/20</span> <!-- End Header --><a id="CIHDFAJG"></a><a id="TDPDW007"></a>
<h1 class="chapter"><span class="secnum">7</span> SQL for Reporting and Analysis</h1>
<p>This chapter describes how to produce effective business reports derived from business queries, and includes the following topics:</p>
<ul>
<li>
<p><a href="#CIHBEIDH">Use of SQL Analytic Capabilities to Answer Business Queries</a></p>
</li>
<li>
<p><a href="#CIHFDGIA">Use of Partition Outer Join to Handle Sparse Data</a></p>
</li>
<li>
<p><a href="#CIHCFHJE">Use of the WITH Clause to Simplify Business Queries</a></p>
</li>
</ul>
<a id="CIHBEIDH"></a><a id="TDPDW0071"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Use of SQL Analytic Capabilities to Answer Business Queries</h2>
<p>Oracle <a id="sthref177"></a><a id="sthref178"></a>Database has enhanced SQL's analytical processing capabilities by introducing a family of aggregate and analytic SQL functions. These functions enable you to calculate ranking, percentiles, and moving averages, and allow you to answer queries such as the following:</p>
<ul>
<li>
<p>What are the top 10 products sold by country?</p>
</li>
<li>
<p>What is the weekly moving average for products in stock?</p>
</li>
<li>
<p>What percentage of total sales occurs during the fourth quarter?</p>
</li>
<li>
<p>How much higher is the average discount in the fourth quarter than the discount for the yearly average?</p>
</li>
<li>
<p>What would be the profitability ranking of existing oil refineries if 20 percent of the refineries in a country were closed?</p>
</li>
</ul>
<p>Aggregate functions are a fundamental part of data warehousing because they enable you to derive different types of totals and then use these totals for additional calculations. To improve aggregate performance in your data warehouse, Oracle Database provides several extensions to the <code>GROUP</code> <code>BY</code> clause. The <code>CUBE</code>, <code>ROLLUP</code>, <code>GROUPING</code>, and <code>GROUPING</code> <code>SETS</code> functions make querying and reporting easier and faster. The <code>ROLLUP</code> function calculates aggregations such as <code>SUM</code>, <code>COUNT</code>, <code>MAX</code>, <code>MIN</code>, and <code>AVG</code> at increasing levels of aggregation, from an individual detailed level to a summary total. The <code>CUBE</code> function is an extension similar to <code>ROLLUP</code>, enabling a single statement to calculate all possible combinations of aggregations.</p>
<p>Analytic functions compute an aggregate value based on a group of rows. These functions differ from aggregate functions in that they return multiple rows for each group. This group of rows is called a <span class="bold">window</span>. This window enables calculations such as moving average or cumulative total. For each row, a window of rows is defined. This window determines the range of rows used to perform the calculations for the current row. Window sizes can be based on either a logical interval such as time or a physical number of rows. Some functions are used only with windows and are often referred to as window functions.</p>
<p>To enhance performance, aggregate and analytic functions can each perform in parallel: multiple processes can simultaneously execute all of these functions. These capabilities make calculations, analysis, and reporting easier and more efficient, thereby enhancing data warehouse performance, scalability, and simplicity.</p>
<p>You can take advantage of the advanced SQL and PL/SQL capabilities Oracle Database offers to convert business queries into SQL. This section describes these advanced capabilities, and contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHHGGEG">How to Add Totals to Reports Using the ROLLUP Function</a></p>
</li>
<li>
<p><a href="#CIHJJGGF">How to Separate Totals at Different Levels Using the CUBE Function</a></p>
</li>
<li>
<p><a href="#CIHJBHHD">How to Add Subtotals Using the GROUPING Function</a></p>
</li>
<li>
<p><a href="#CIHBGFGB">How to Combine Aggregates Using the GROUPING SETS Function</a></p>
</li>
<li>
<p><a href="#CIHJHECD">How to Calculate Rankings Using the RANK Function</a></p>
</li>
<li>
<p><a href="#CIHIBABC">How to Calculate Relative Contributions to a Total</a></p>
</li>
<li>
<p><a href="#CIHICDAE">How to Perform Interrow Calculations with Window Functions</a></p>
</li>
<li>
<p><a href="#CIHFCAEA">How to Calculate a Moving Average Using a Window Function</a></p>
</li>
</ul>
<a id="CIHHGGEG"></a><a id="TDPDW00711"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">How to Add Totals to Reports Using the ROLLUP Function</h3>
<p>The <code>ROLLUP</code> function enables a <code>SELECT</code> stateme<a id="sthref179"></a>nt to calculate multiple levels of subtotals across a specified group of dimensions and a grand total. The <code>ROLLUP</code> function is a simple extension to the <code>GROUP</code> <code>BY</code> clause, so its syntax is easy to use. The <code>ROLLUP</code> function is highly efficient, adding minimal overhead to a query.The action of the <code>ROLLUP</code> function is straightforward: it creates subtotals that roll up from the most detailed level to a grand total, following a grouping list specified in the <code>ROLLUP</code> function. The <code>ROLLUP</code> function takes as its argument an ordered list of grouping columns. First, it calculates the standard aggregate values specified in the <code>GROUP</code> <code>BY</code> clause. Then, it creates progressively higher-level subtotals, moving from right to left through the list of grouping columns. Finally, it creates a grand total.</p>
<a id="TDPDW00719"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref180"></a>
<h4 class="sect3">When to Use the ROLLUP Function</h4>
<p>When your tasks involve subtotals, particularly when the subtotals are along a hierarchical dimension such as time or geography, use the <code>ROLLUP</code> function. A <code>ROLLUP</code> function can also simplify and speed up the maintenance of materialized views.</p>
</div>
<!-- class="sect3" -->
<a id="TDPDW00720"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref181"></a>
<h4 class="sect3">Example: Using the ROLLUP Function</h4>
<p>A common request when preparing business reports is to find quarterly sales revenue across different product categories, in order by the amount of revenue. The following query achieves this and is used for the starting point for building more complicated queries later.</p>
<p class="subhead2"><a id="sthref182"></a>To use the ROLLUP function:</p>
<pre>
SELECT t.calendar_quarter_desc quarter
, p.prod_category category
, TO_CHAR(SUM(s.amount_sold),'L999G999G990D00') revenue
FROM times t
, products p
, sales s
WHERE t.time_id = s.time_id
AND   p.prod_id = s.prod_id
AND   s.time_id BETWEEN TO_DATE('01-JAN-2001','dd-MON-yyyy') 
AND TO_DATE('31-DEC-2001','dd-MON-yyyy')
GROUP BY t.calendar_quarter_desc, p.prod_category
ORDER BY t.calendar_quarter_desc
, SUM(s.amount_sold);

QUARTER  CATEGORY                                  REVENUE
-------  ------------------------------            --------------
2001-01  Software/Other                               $860,819.81
2001-01  Electronics                                $1,239,287.71
2001-01  Hardware                                   $1,301,343.45
2001-01  Photo                                      $1,370,706.38
2001-01  Peripherals and Accessories                $1,774,940.09
2001-02  Software/Other                               $872,157.38
2001-02  Electronics                                $1,144,187.90
2001-02  Hardware                                   $1,557,059.59
2001-02  Photo                                      $1,563,475.51
2001-02  Peripherals and Accessories                $1,785,588.01
2001-03  Software/Other                               $877,630.85
2001-03  Electronics                                $1,017,536.82
2001-03  Photo                                      $1,607,315.63
2001-03  Hardware                                   $1,651,454.29
2001-03  Peripherals and Accessories                $2,042,061.04
2001-04  Software/Other                               $943,296.36
2001-04  Hardware                                   $1,174,512.68
2001-04  Electronics                                $1,303,838.52
2001-04  Photo                                      $1,792,131.39
2001-04  Peripherals and Accessories                $2,257,118.57
</pre>
<p>This query is useful, but you may want to see the totals for different categories in the same report. The following example shows how you can use the <code>ROLLUP</code> function to add the totals to the original query.</p>
<pre>
SELECT t.calendar_quarter_desc quarter
, p.prod_category category
, TO_CHAR(SUM(s.amount_sold),'L999G999G990D00') revenue
FROM times t
, products p
, sales s
WHERE t.time_id = s.time_id
AND   p.prod_id = s.prod_id
AND   s.time_id BETWEEN TO_DATE('01-JAN-2001','dd-MON-yyyy') 
AND TO_DATE('31-DEC-2001','dd-MON-yyyy')
GROUP BY <span class="bold">ROLLUP</span>(t.calendar_quarter_desc, p.prod_category)
ORDER BY t.calendar_quarter_desc
, SUM(s.amount_sold);
 
QUARTER   CATEGORY                                   REVENUE
-------   ------------------------------             -------------
2001-01   Software/Other                               $860,819.81
2001-01   Electronics                                $1,239,287.71
2001-01   Hardware                                   $1,301,343.45
2001-01   Photo                                      $1,370,706.38
2001-01   Peripherals and Accessories                $1,774,940.09
2001-01                                              $6,547,097.44
2001-02   Software/Other                               $872,157.38
2001-02   Electronics                                $1,144,187.90
2001-02   Hardware                                   $1,557,059.59
2001-02   Photo                                      $1,563,475.51
2001-02   Peripherals and Accessories                $1,785,588.01
2001-02                                              $6,922,468.39
2001-03   Software/Other                               $877,630.85
2001-03   Electronics                                $1,017,536.82
2001-03   Photo                                      $1,607,315.63
2001-03   Hardware                                   $1,651,454.29
2001-03   Peripherals and Accessories                $2,042,061.04
2001-03                                              $7,195,998.63
2001-04   Software/Other                               $943,296.36
2001-04   Hardware                                   $1,174,512.68
2001-04   Electronics                                $1,303,838.52
2001-04   Photo                                      $1,792,131.39
2001-04   Peripherals and Accessories                $2,257,118.57
2001-04                                              $7,470,897.52
                                                    $28,136,461.98
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHJJGGF"></a><a id="TDPDW00712"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="TDPDW7772"></a>How to Separate Totals at Different Levels Using the CUBE Function</h3>
<p>The <code>CUBE</code> functio<a id="sthref183"></a>n takes a specified set of grouping columns and creates subtotals for all of the possible combinations. In terms of multidimensional analysis, the <code>CUBE</code> function generates all the subtotals that can be calculated for a data cube with the specified dimensions. If you have specified <code>CUBE(time, region, department)</code>, the result set will include all the values that would be included in an equivalent <code>ROLLUP</code> function plus additional combinations.</p>
<a id="TDPDW00738"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref184"></a>
<h4 class="sect3">When to Use the CUBE Function</h4>
<p>Consider using the <code>CUBE</code> function in any situation requiring <span class="bold">cross-tabular</span> <span class="bold">reports</span>. The data needed for cross-tabular reports can be generated with a single <code>SELECT</code> statement using the <code>CUBE</code> function. Similar to <code>ROLLUP</code>, the <code>CUBE</code> function can be helpful in generating materialized views. Note that population of materialized views is faster if the query containing a <code>CUBE</code> function executes in parallel.</p>
</div>
<!-- class="sect3" -->
<a id="TDPDW00734"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref185"></a>
<h4 class="sect3">Example: Using the CUBE Function</h4>
<p>You may want to get not only quarterly totals but also totals for the different product categories for the selected period. The <code>CUBE</code> function enables this calculation, as shown in the following example.</p>
<p class="subhead2"><a id="sthref186"></a>To use the CUBE function:</p>
<pre>
SELECT t.calendar_quarter_desc quarter
, p.prod_category category
, TO_CHAR(SUM(s.amount_sold),'L999G999G990D00') revenue
FROM times t
, products p
, sales s
WHERE t.time_id = s.time_id
AND   p.prod_id = s.prod_id
AND   s.time_id BETWEEN TO_DATE('01-JAN-2001','dd-MON-yyyy') 
AND TO_DATE('31-DEC-2001','dd-MON-yyyy')
GROUP BY <span class="bold">CUBE</span>(t.calendar_quarter_desc, p.prod_category)
ORDER BY t.calendar_quarter_desc
, SUM(s.amount_sold);
 
QUARTER   CATEGORY                                   REVENUE
-------   ------------------------------             -------------
2001-01   Software/Other                               $860,819.81
2001-01   Electronics                                $1,239,287.71
2001-01   Hardware                                   $1,301,343.45
2001-01   Photo                                      $1,370,706.38
2001-01   Peripherals and Accessories                $1,774,940.09
2001-01                                              $6,547,097.44
2001-02   Software/Other                               $872,157.38
2001-02   Electronics                                $1,144,187.90
2001-02   Hardware                                   $1,557,059.59
2001-02   Photo                                      $1,563,475.51
2001-02   Peripherals and Accessories                $1,785,588.01
2001-02                                              $6,922,468.39
2001-03   Software/Other                               $877,630.85
2001-03   Electronics                                $1,017,536.82
2001-03   Photo                                      $1,607,315.63
2001-03   Hardware                                   $1,651,454.29
2001-03   Peripherals and Accessories                $2,042,061.04
2001-03                                              $7,195,998.63
2001-04   Software/Other                               $943,296.36
2001-04   Hardware                                   $1,174,512.68
2001-04   Electronics                                $1,303,838.52
2001-04   Photo                                      $1,792,131.39
2001-04   Peripherals and Accessories                $2,257,118.57
2001-04                                              $7,470,897.52
          Software/Other                             $3,553,904.40
          Electronics                                $4,704,850.95
          Hardware                                   $5,684,370.01
          Photo                                      $6,333,628.91
          Peripherals and Accessories                $7,859,707.71
                                                    $28,136,461.98
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHJBHHD"></a><a id="TDPDW00713"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">How to Add Subtotals Using the GROUPING Function</h3>
<p>Two challen<a id="sthref187"></a>ges arise with the use of the <code>ROLLUP</code> and <code>CUBE</code> functions. How can you programmatically determine which result set rows are subtotals, and how do you find the exact level of aggregation for a given subtotal? You often need to use subtotals in calculations such as percentage-of-totals, so you need a way to determine which rows are the subtotals. What happens if query results contain both stored <code>NULL</code> values and null values created by a <code>ROLLUP</code> or <code>CUBE</code> function? How can you differentiate between the two?</p>
<p>The <code>GROUPING</code> function handles this problem. Using a single column as its argument, the <code>GROUPING</code> function returns 1 when it encounters a null value created by a <code>ROLLUP</code> or <code>CUBE</code> function. That is, if the null value indicates the row is a subtotal, the <code>GROUPING</code> function returns a value of 1. Any other type of value, including a stored <code>NULL</code> value, returns a value of 0.</p>
<a id="TDPDW00722"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref188"></a>
<h4 class="sect3">When to Use the GROUPING Function</h4>
<p>When you must handle <code>NULL</code> values or null values created by a <code>ROLLUP</code> or <code>CUBE</code> operation, use the <code>GROUPING</code> function. One reason you may want to work with null values is to put a description in null fields, for example, text describing that a number represents a total.</p>
</div>
<!-- class="sect3" -->
<a id="TDPDW00723"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref189"></a>
<h4 class="sect3">Example: Using the GROUPING Function</h4>
<p>You might want more descriptive columns in your report because it is not always clear when a value represents a total. The <code>GROUPING</code> function enables you to insert labels showing totals in the results of the query as shown in the following example.</p>
<p class="subhead2"><a id="sthref190"></a>To use the GROUPING function:</p>
<pre>
SELECT DECODE(<span class="bold">GROUPING</span>(t.calendar_quarter_desc)
             , 0, t.calendar_quarter_desc
             , 1, 'TOTAL'
             ) quarter
, DECODE(<span class="bold">GROUPING</span>(p.prod_category) 
        , 0,  p.prod_category
        , 1, 'TOTAL'
        ) category
, TO_CHAR(SUM(s.amount_sold),'L999G999G990D00') revenue
FROM times t
, products p
, sales s
WHERE t.time_id = s.time_id
AND   p.prod_id = s.prod_id
AND   s.time_id BETWEEN TO_DATE('01-JAN-2001','dd-MON-yyyy') 
AND TO_DATE('31-DEC-2001','dd-MON-yyyy')
GROUP BY CUBE(t.calendar_quarter_desc, p.prod_category)
ORDER BY t.calendar_quarter_desc
, SUM(s.amount_sold);
 
QUARTER   CATEGORY                           REVENUE
-------   ------------------------------     -------------
2001-01   Software/Other                       $860,819.81
2001-01   Electronics                        $1,239,287.71
2001-01   Hardware                           $1,301,343.45
2001-01   Photo                              $1,370,706.38
2001-01   Peripherals and Accessories        $1,774,940.09
2001-01   TOTAL                              $6,547,097.44
2001-02   Software/Other                       $872,157.38
2001-02   Electronics                        $1,144,187.90
2001-02   Hardware                           $1,557,059.59
2001-02   Photo                              $1,563,475.51
2001-02   Peripherals and Accessories        $1,785,588.01
2001-02   TOTAL                              $6,922,468.39
2001-03   Software/Other                       $877,630.85
2001-03   Electronics                        $1,017,536.82
2001-03   Photo                              $1,607,315.63
2001-03   Hardware                           $1,651,454.29
2001-03   Peripherals and Accessories        $2,042,061.04
2001-03   TOTAL                              $7,195,998.63
2001-04   Software/Other                       $943,296.36
2001-04   Hardware                           $1,174,512.68
2001-04   Electronics                        $1,303,838.52
2001-04   Photo                              $1,792,131.39
2001-04   Peripherals and Accessories        $2,257,118.57
2001-04   TOTAL                              $7,470,897.52
TOTAL     Software/Other                     $3,553,904.40
TOTAL     Electronics                        $4,704,850.95
TOTAL     Hardware                           $5,684,370.01
TOTAL     Photo                              $6,333,628.91
TOTAL     Peripherals and Accessories        $7,859,707.71
TOTAL     TOTAL                             $28,136,461.98
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHBGFGB"></a><a id="TDPDW00714"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="TDPDW00999"></a>How to Combine Aggregates Using the GROUPING SETS Function</h3>
<p>You can selecti<a id="sthref191"></a>vely specify the set of groups that you want to create using the <code>GROUPING</code> <code>SETS</code> function within a <code>GROUP</code> <code>BY</code> clause. This enables precise specification across multiple dimensions without computing the whole data cube. In other words, not all dimension totals are required.</p>
<a id="TDPDW00724"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref192"></a>
<h4 class="sect3">When to Use the GROUPING SETS Function</h4>
<p>When you want particular subtotals in a data cube, but not all that are possible, use the <code>GROUPING</code> <code>SETS</code> function.</p>
</div>
<!-- class="sect3" -->
<a id="TDPDW00725"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref193"></a>
<h4 class="sect3">Example: Using the GROUPING SETS Function</h4>
<p>You may want to see the total sales numbers based on sales channel. Instead of adding a separate query to retrieve the totals per channel class, you can use the <code>GROUPING</code> <code>SETS</code> function as shown in the following example.</p>
<p class="subhead2"><a id="sthref194"></a>To use the GROUPING SETS function:</p>
<pre>
SELECT DECODE(GROUPING(t.calendar_quarter_desc)
             , 0, t.calendar_quarter_desc
             , 1, 'TOTAL'
             ) quarter
, DECODE(GROUPING(c.channel_class)
        , 0, c.channel_class
        , 1 , '--all--'
        ) channel
, DECODE(GROUPING(p.prod_category)
        , 0,  p.prod_category
        , 1, 'TOTAL'
        ) category
, TO_CHAR(SUM(s.amount_sold),'L999G999G990D00') revenue
FROM times t
, products p
, channels c
, sales s
WHERE t.time_id = s.time_id
AND   p.prod_id = s.prod_id
AND   c.channel_id = s.channel_id
AND   s.time_id BETWEEN TO_DATE('01-JAN-2001','dd-MON-yyyy') 
AND TO_DATE('31-DEC-2001','dd-MON-yyyy')
GROUP BY <span class="bold">GROUPING</span> <span class="bold">SETS</span>(c.channel_class, 
    CUBE(t.calendar_quarter_desc, p.prod_category))
ORDER BY t.calendar_quarter_desc
, SUM(s.amount_sold);
 
QUARTER  CHANNEL       CATEGORY                     REVENUE
-------  ------------- ---------------------------- -------------
2001-01  --all--       Software/Other                 $860,819.81
2001-01  --all--       Electronics                  $1,239,287.71
2001-01  --all--       Hardware                     $1,301,343.45
2001-01  --all--       Photo                        $1,370,706.38
2001-01  --all--       Peripherals and Accessories  $1,774,940.09
2001-01  --all--       TOTAL                        $6,547,097.44
2001-02  --all--       Software/Other                 $872,157.38
2001-02  --all--       Electronics                  $1,144,187.90
2001-02  --all--       Hardware                     $1,557,059.59
2001-02  --all--       Photo                        $1,563,475.51
2001-02  --all--       Peripherals and Accessories  $1,785,588.01
2001-02  --all--       TOTAL                        $6,922,468.39
2001-03  --all--       Software/Other                 $877,630.85
2001-03  --all--       Electronics                  $1,017,536.82
2001-03  --all--       Photo                        $1,607,315.63
2001-03  --all--       Hardware                     $1,651,454.29
2001-03  --all--       Peripherals and Accessories  $2,042,061.04
2001-03  --all--       TOTAL                        $7,195,998.63
2001-04  --all--       Software/Other                 $943,296.36
2001-04  --all--       Hardware                     $1,174,512.68
2001-04  --all--       Electronics                  $1,303,838.52
2001-04  --all--       Photo                        $1,792,131.39
2001-04  --all--       Peripherals and Accessories  $2,257,118.57
2001-04  --all--       TOTAL                        $7,470,897.52
TOTAL    --all--       Software/Other               $3,553,904.40
TOTAL    --all--       Electronics                  $4,704,850.95
TOTAL    --all--       Hardware                     $5,684,370.01
TOTAL    --all--       Photo                        $6,333,628.91
TOTAL    Indirect      TOTAL                        $6,709,496.66
TOTAL    --all--       Peripherals and Accessories  $7,859,707.71
TOTAL    Others        TOTAL                        $8,038,529.96
TOTAL    Direct        TOTAL                       $13,388,435.36
TOTAL    --all--       TOTAL                       $28,136,461.98
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHJHECD"></a><a id="TDPDW00715"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">How to Calculate Rankings Using the RANK Function</h3>
<p>Business<a id="sthref195"></a> information processing requires advanced calculations, including complex ranking, subtotals, moving averages, and lead/lag comparisons. These aggregation and analysis tasks are essential in creating business intelligence queries and are accomplished by the use of window functions.</p>
<a id="TDPDW00726"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref196"></a>
<h4 class="sect3">When to Use the RANK Function</h4>
<p>When you want to perform complex queries and analyze the query results, use the <code>RANK</code> function.</p>
</div>
<!-- class="sect3" -->
<a id="TDPDW00727"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref197"></a>
<h4 class="sect3"><a id="TDPDW01727"></a>Example: Using the RANK Function</h4>
<p>Users would like to see an additional column that shows the rank of any revenue number within the quarter. The following example shows using the <code>RANK</code> function to achieve this.</p>
<p class="subhead2"><a id="sthref198"></a>To use the RANK function:</p>
<pre>
SELECT DECODE(GROUPING(t.calendar_quarter_desc)
             , 0, t.calendar_quarter_desc
             , 1, 'TOTAL'
             ) quarter
, DECODE(GROUPING(t.calendar_quarter_desc) + GROUPING(p.prod_category)
        , 0, <span class="bold">RANK()</span> OVER (PARTITION BY t.calendar_quarter_desc 
    ORDER BY SUM(s.amount_sold))
        , 1, null
        ) ranking
, DECODE(GROUPING(c.channel_class)
        , 0, c.channel_class
        , 1 , '--all--'
        ) channel
, DECODE(GROUPING(p.prod_category)
        , 0,  p.prod_category
        , 1, 'TOTAL'
        ) category
, TO_CHAR(SUM(s.amount_sold),'L999G999G990D00') revenue
FROM times t
, products p
, channels c
, sales s
WHERE t.time_id = s.time_id
AND   p.prod_id = s.prod_id
AND   c.channel_id = s.channel_id
AND   s.time_id BETWEEN TO_DATE('01-JAN-2001','dd-MON-yyyy') 
 AND TO_DATE('31-DEC-2001','dd-MON-yyyy')
GROUP BY GROUPING SETS(c.channel_class, 
CUBE(t.calendar_quarter_desc, p.prod_category))
ORDER BY t.calendar_quarter_desc
, SUM(s.amount_sold);
 
QUARTER  RANKING  CHANNEL    CATEGORY                       REVENUE
-------  -------  --------   ----------------------------   --------------
2001-01        1  --all--    Software/Other                    $860,819.81
2001-01        2  --all--    Electronics                     $1,239,287.71
2001-01        3  --all--    Hardware                        $1,301,343.45
2001-01        4  --all--    Photo                           $1,370,706.38
2001-01        5  --all--    Peripherals and Accessories     $1,774,940.09
2001-01           --all--    TOTAL                           $6,547,097.44
2001-02        1  --all--    Software/Other                    $872,157.38
2001-02        2  --all--    Electronics                     $1,144,187.90
2001-02        3  --all--    Hardware                        $1,557,059.59
2001-02        4  --all--    Photo                           $1,563,475.51
2001-02        5  --all--    Peripherals and Accessories     $1,785,588.01
2001-02           --all--    TOTAL                           $6,922,468.39
2001-03        1  --all--    Software/Other                    $877,630.85
2001-03        2  --all--    Electronics                     $1,017,536.82
2001-03        3  --all--    Photo                           $1,607,315.63
2001-03        4  --all--    Hardware                        $1,651,454.29
2001-03        5  --all--    Peripherals and Accessories     $2,042,061.04
2001-03           --all--    TOTAL                           $7,195,998.63
2001-04        1  --all--    Software/Other                    $943,296.36
2001-04        2  --all--    Hardware                        $1,174,512.68
2001-04        3  --all--    Electronics                     $1,303,838.52
2001-04        4  --all--    Photo                           $1,792,131.39
2001-04        5  --all--    Peripherals and Accessories     $2,257,118.57
2001-04           --all--    TOTAL                           $7,470,897.52
TOTAL             --all--    Software/Other                  $3,553,904.40
TOTAL             --all--    Electronics                     $4,704,850.95
TOTAL             --all--    Hardware                        $5,684,370.01
TOTAL             --all--    Photo                           $6,333,628.91
TOTAL             Indirect   TOTAL                           $6,709,496.66
TOTAL             --all--    Peripherals and Accessories     $7,859,707.71
TOTAL             Others     TOTAL                           $8,038,529.96
TOTAL             Direct     TOTAL                          $13,388,435.36
TOTAL             --all--    TOTAL                          $28,136,461.98

In this example, the PARTITION BY clause defines the boundaries for the RANK function.
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHIBABC"></a><a id="TDPDW00716"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">How to Calculate Relative Contributions to a Total</h3>
<p>A common<a id="sthref199"></a> business intelligence request is to calculate the contribution of every product category to the total revenue based on a given time period.</p>
<a id="TDPDW00728"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref200"></a>
<h4 class="sect3">Example: Calculating Relative Contributions to a Total</h4>
<p>You want to get the differences for revenue numbers on a quarter-by-quarter basis. As shown in the following example, you can use a window function with a <code>PARTITION</code> <code>BY</code> product category to achieve this.</p>
<p class="subhead2"><a id="sthref201"></a>To calculate relative contributions to a total:</p>
<pre>
SELECT DECODE(GROUPING(t.calendar_quarter_desc)
             , 0, t.calendar_quarter_desc
             , 1, 'TOTAL'
             ) quarter
, DECODE(GROUPING(t.calendar_quarter_desc) + GROUPING(p.prod_category)
        , 0, RANK() OVER (PARTITION BY t.calendar_quarter_desc 
 ORDER BY SUM(s.amount_sold))
        , 1, null
        ) RANKING
, DECODE(GROUPING(c.channel_class)
        , 0, c.channel_class
        , 1 , '--all--'
        ) channel
, DECODE(GROUPING(p.prod_category)
        , 0,  p.prod_category
        , 1, 'TOTAL'
        ) category
, TO_CHAR(SUM(s.amount_sold),'L999G999G990D00') revenue
, TO_CHAR(100 * RATIO_TO_REPORT(SUM(s.amount_sold)) 
OVER (PARTITION BY (TO_CHAR(GROUPING(p.prod_category) || 
 t.calendar_quarter_desc))),'990D0') percent
FROM times t
, products p
, channels c
, sales s
WHERE t.time_id = s.time_id
AND   p.prod_id = s.prod_id
AND   c.channel_id = s.channel_id
AND   s.time_id BETWEEN TO_DATE('01-JAN-2001','dd-MON-yyyy') 
   AND TO_DATE('31-DEC-2001','dd-MON-yyyy')
GROUP BY GROUPING SETS(c.channel_class, 
      CUBE(t.calendar_quarter_desc, p.prod_category))
ORDER BY t.calendar_quarter_desc
, SUM(s.amount_sold);
 
QUARTER  RANKING  CHANNEL  CATEGORY         REVENUE         PERC
-------  -------  -------  -------------    ------------    ----
2001-01        1  --all--  Software/Other     $860,819.81   13.1
2001-01        2  --all--  Electronics      $1,239,287.71   18.9
2001-01        3  --all--  Hardware         $1,301,343.45   19.9
2001-01        4  --all--  Photo            $1,370,706.38   20.9
2001-01        5  --all--  Peripherals      $1,774,940.09   27.1
2001-01           --all--  TOTAL            $6,547,097.44  100.0
2001-02        1  --all--  Software/Other     $872,157.38   12.6
2001-02        2  --all--  Electronics      $1,144,187.90   16.5
2001-02        3  --all--  Hardware         $1,557,059.59   22.5
2001-02        4  --all--  Photo            $1,563,475.51   22.6
2001-02        5  --all--  Peripherals      $1,785,588.01   25.8
2001-02           --all--  TOTAL            $6,922,468.39  100.0
2001-03        1  --all--  Software/Other     $877,630.85   12.2
2001-03        2  --all--  Electronics      $1,017,536.82   14.1
2001-03        3  --all--  Photo            $1,607,315.63   22.3
2001-03        4  --all--  Hardware         $1,651,454.29   22.9
2001-03        5  --all--  Peripherals      $2,042,061.04   28.4
2001-03           --all--  TOTAL            $7,195,998.63  100.0
2001-04        1  --all--  Software/Other     $943,296.36   12.6
2001-04        2  --all--  Hardware         $1,174,512.68   15.7 
2001-04        3  --all--  Electronics      $1,303,838.52   17.5
2001-04        4  --all--  Photo            $1,792,131.39   24.0
2001-04        5  --all--  Peripherals      $2,257,118.57   30.2
2001-04           --all--  TOTAL            $7,470,897.52  100.0
TOTAL             --all--  Software/Other   $3,553,904.40   12.6
TOTAL             --all--  Electronics      $4,704,850.95   16.7
TOTAL             --all--  Hardware         $5,684,370.01   20.2
TOTAL             --all--  Photo            $6,333,628.91   22.5
TOTAL            Indirect  TOTAL            $6,709,496.66   11.9
TOTAL             --all--  Peripherals      $7,859,707.71   27.9
TOTAL              Others  TOTAL            $8,038,529.96   14.3
TOTAL              Direct  TOTAL           $13,388,435.36   23.8
TOTAL             --all--  TOTAL           $28,136,461.98   50.0

"Peripherals" was used instead of "Peripherals and Accessories" to save space.
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHICDAE"></a><a id="TDPDW00717"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">How to Perform Interrow Calculations with Window Functions</h3>
<p>A common<a id="sthref202"></a> business intelligence question is how a particular result relates to another result. To do this in a single query, you can use window functions and perform interrow calculations in a single statement.</p>
<a id="TDPDW00729"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref203"></a>
<h4 class="sect3">Example: Performing Interrow Calculations</h4>
<p>You may want to know the contribution of every product category to the total revenue for each quarter. You can use the window function <code>RATIO_TO_REPORT</code> to achieve this result, as shown in the following example. Note that you must use concatenation with <code>GROUPING(p.prod_category)</code> to preclude the total from the <code>RATIO_TO_REPORT</code> per quarter.</p>
<p class="subhead2"><a id="sthref204"></a>To perform interrow calculations:</p>
<pre>
SELECT DECODE(GROUPING(t.calendar_quarter_desc)
             , 0, t.calendar_quarter_desc
             , 1, 'TOTAL'
             ) quarter
, DECODE(GROUPING(t.calendar_quarter_desc) + GROUPING(p.prod_category)
        , 0, RANK() OVER (PARTITION BY t.calendar_quarter_desc 
ORDER BY SUM(s.amount_sold))
        , 1, null
        ) RANKING
, DECODE(GROUPING(c.channel_class)
        , 0, c.channel_class
        , 1 , '--all--'
        ) channel
, DECODE(GROUPING(p.prod_category)
        , 0,  p.prod_category
        , 1, 'TOTAL'
        ) category
, TO_CHAR(SUM(s.amount_sold),'L999G999G990D00') revenue
, TO_CHAR(100 * RATIO_TO_REPORT(SUM(s.amount_sold)) 
OVER (PARTITION BY (TO_CHAR(GROUPING(p.prod_category) || 
t.calendar_quarter_desc))),'990D0') percent
, DECODE(GROUPING(t.calendar_quarter_desc) + GROUPING(p.prod_category)
        , 0, TO_CHAR(SUM(s.amount_sold) - LAG(SUM(s.amount_sold),1) 
         OVER (PARTITION BY p.prod_category 
         ORDER BY t.calendar_quarter_desc),'L999G990D00')
        , 1, null
        ) q_q_diff
FROM times t
, products p
, channels c
, sales s
WHERE t.time_id = s.time_id
AND   p.prod_id = s.prod_id
AND   c.channel_id = s.channel_id
AND   s.time_id BETWEEN TO_DATE('01-JAN-2001','dd-MON-yyyy') 
   AND TO_DATE('31-DEC-2001','dd-MON-yyyy')
GROUP BY GROUPING SETS(c.channel_class, 
      CUBE(t.calendar_quarter_desc, p.prod_category))
ORDER BY t.calendar_quarter_desc
, SUM(s.amount_sold);
 
QUARTER  RANKING  CHANNEL  CATEGORY         REVENUE         PERC     Q_Q_DIFF
-------  -------  -------  -------------    ------------    ----     ----------
2001-01        1  --all--  Software/Other     $860,819.81   13.1
2001-01        2  --all--  Electronics      $1,239,287.71   18.9
2001-01        3  --all--  Hardware         $1,301,343.45   19.9
2001-01        4  --all--  Photo            $1,370,706.38   20.9
2001-01        5  --all--  Peripherals      $1,774,940.09   27.1
2001-01           --all--  TOTAL            $6,547,097.44  100.0
2001-02        1  --all--  Software/Other     $872,157.38   12.6      $11,337.57
2001-02        2  --all--  Electronics      $1,144,187.90   16.5     -$95,099.81
2001-02        3  --all--  Hardware         $1,557,059.59   22.5     $255,716.14
2001-02        4  --all--  Photo            $1,563,475.51   22.6     $192,769.13
2001-02        5  --all--  Peripherals      $1,785,588.01   25.8      $10,647.92
2001-02           --all--  TOTAL            $6,922,468.39  100.0
2001-03        1  --all--  Software/Other     $877,630.85   12.2       $5,473.47
2001-03        2  --all--  Electronics      $1,017,536.82   14.1    -$126,651.08
2001-03        3  --all--  Photo            $1,607,315.63   22.3      $43,840.12
2001-03        4  --all--  Hardware         $1,651,454.29   22.9      $94,394.70
2001-03        5  --all--  Peripherals      $2,042,061.04   28.4     $256,473.03
2001-03           --all--  TOTAL            $7,195,998.63  100.0
2001-04        1  --all--  Software/Other     $943,296.36   12.6      $65,665.51
2001-04        2  --all--  Hardware         $1,174,512.68   15.7    -$476,941.61
2001-04        3  --all--  Electronics      $1,303,838.52   17.5     $286,301.70
2001-04        4  --all--  Photo            $1,792,131.39   24.0     $184,815.76
2001-04        5  --all--  Peripherals      $2,257,118.57   30.2     $215,057.53
2001-04           --all--  TOTAL            $7,470,897.52  100.0
TOTAL             --all--  Software/Other   $3,553,904.40   12.6
TOTAL             --all--  Electronics      $4,704,850.95   16.7
TOTAL             --all--  Hardware         $5,684,370.01   20.2
TOTAL             --all--  Photo            $6,333,628.91   22.5
TOTAL            Indirect  TOTAL            $6,709,496.66   11.9
TOTAL             --all--  Peripherals      $7,859,707.71   27.9
TOTAL              Others  TOTAL            $8,038,529.96   14.3
TOTAL              Direct  TOTAL           $13,388,435.36   23.8
TOTAL             --all--  TOTAL           $28,136,461.98   50.0

"Peripherals" was used instead of "Peripherals and Accessories" to save space.
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHFCAEA"></a><a id="TDPDW00718"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">How to Calculate a Moving Average Using a Window Function</h3>
<p>You can c<a id="sthref205"></a>reate moving aggregations with window functions. A moving aggregation can be based on a number of physical rows, or it can be a logical time period. Window functions use the <code>PARTITION</code> keyword, and, for each row in a partition, you can define a sliding window of data. This window determines the range of rows used to perform the calculations for the current row. Window sizes can be based on either a physical number of rows or a logical interval such as time. The window has a starting row and an ending row. Depending on its definition, the window can move at one or both ends. For instance, a window defined for a cumulative <code>SUM</code> function would have its starting row fixed at the first row of its partition, and its ending row would slide from the starting point to the last row of the partition. In contrast, a window defined for a moving average would have both its starting and ending points slide so that they maintain a constant physical or logical range.</p>
<p>Window functions are commonly used to calculate moving and cumulative versions of <code>SUM</code>, <code>AVERAGE</code>, <code>COUNT</code>, <code>MAX</code>, <code>MIN</code>, and many more functions. They can be used only in the <code>SELECT</code> and <code>ORDER</code> <code>BY</code> clauses of the query. Window functions include the <code>FIRST_VALUE</code> function, which returns the first value in the window; and the <code>LAST_VALUE</code> function, which returns the last value in the window. These functions provide access to more than one row of a table without requiring a self-join.</p>
<a id="TDPDW00730"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref206"></a>
<h4 class="sect3">Example: Calculating a Moving Average</h4>
<p>The following example shows a query that retrieves a 7-day moving average of product revenue per product, using a logical time interval.</p>
<p class="subhead2"><a id="sthref207"></a>To calculate a moving average:</p>
<pre>
SELECT time_id
, prod_name
, TO_CHAR(revenue,'L999G990D00') revenue
, TO_CHAR(AVG(revenue) OVER (PARTITION BY prod_name ORDER BY time_id 
  RANGE INTERVAL '7' DAY PRECEDING),'L999G990D00') mv_7day_avg
FROM
( SELECT s.time_id, p.prod_name, SUM(s.amount_sold) revenue
  FROM products p
  , sales s
  WHERE p.prod_id = s.prod_id
  AND s.time_id BETWEEN TO_DATE('25-JUN-2001','dd-MON-yyyy')
                    AND TO_DATE('16-JUL-2001','dd-MON-yyyy')
  AND p.prod_name LIKE '%Memory%'
  AND p.prod_category = 'Photo'
  GROUP BY s.time_id, p.prod_name
)
ORDER BY time_id, prod_name;
 
TIME_ID     PROD_NAME           REVENUE             MV_7DAY_AVG
---------   -----------------   ------------------  --------------
26-JUN-01   256MB Memory Card              $560.15         $560.15
30-JUN-01   256MB Memory Card              $844.00         $702.08
02-JUL-01   128MB Memory Card            $3,283.74       $3,283.74
02-JUL-01   256MB Memory Card            $3,903.32       $1,769.16
03-JUL-01   256MB Memory Card              $699.37       $1,501.71
08-JUL-01   128MB Memory Card            $3,283.74       $3,283.74
08-JUL-01   256MB Memory Card            $3,903.32       $2,835.34
10-JUL-01   256MB Memory Card              $138.82       $1,580.50
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHFDGIA"></a><a id="TDPDW0072"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Use of Partition Outer Join to Handle Sparse Data</h2>
<p>Data i<a id="sthref208"></a><a id="sthref209"></a><a id="sthref210"></a>s usually stored in sparse form. That is, if no value exists for a given combination of dimension values, no row exists in the <span class="bold">fact</span> <span class="bold">table</span> (the table in a data warehouse that contains the important facts, frequently sales). However, a reader of a business report may want to view the data in <span class="bold">dense</span> form, with rows for all combinations of dimension values displayed even when no fact table data exists for them. For example, if a product did not sell during a particular time period, you may still want to see the product for that time period with zero sales value next to it. Moreover, time series calculations can be performed most easily when data is dense along the time dimension. This is because dense data will fill a consistent number of rows for each period, which makes it simple to use window functions with physical offsets.</p>
<p>Data <span class="bold">densification</span> is the process of converting sparse data into dense form. To overcome the problem of sparsity, you can use a partition outer join to fill the gaps in a time series or any dimension. This type of join extends the conventional outer join syntax by applying the outer join to each logical partition defined in a query. Oracle Database logically partitions the rows in your query based on the expression you specify in the <code>PARTITION</code> <code>BY</code> clause. The result of a partition outer join is a <code>UNION</code> operation of the outer joins of each of the partitions in the logically partitioned table with the table on the other side of the join. Note that you can use this type of join to fill the gaps in any dimension, not just the time dimension.</p>
<a id="TDPDW00721"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref211"></a>
<h3 class="sect2">When to Use Partition Outer Join</h3>
<p>When you want to fill in missing rows in a result set or perform time series calculations, use a partition outer join.</p>
</div>
<!-- class="sect2" -->
<a id="TDPDW00736"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref212"></a>
<h3 class="sect2">Example: Using Partition Outer Join</h3>
<p>You may want to see how a particular product sold over the duration of a number of weeks. In this example, memory cards from the Photo category are used. Because these products are not sold frequently, there may be weeks that a product is not sold at all. To make convenient comparisons, you must make the data dense using the partition outer join as shown in the following example.</p>
<p class="subhead2"><a id="sthref213"></a>To use partition outer join:</p>
<pre>
SELECT tim.week_ending_day
, rev.prod_name product
, nvl(SUM(rev.amount_sold),0) revenue
FROM (SELECT p.prod_name, s.time_id, s.amount_sold
      FROM products p
      , sales s
      WHERE s.prod_id = p.prod_id
      AND p.prod_category = 'Photo'
      AND p.prod_name LIKE '%Memory%'
      AND s.time_id BETWEEN TO_DATE('25-JUN-2001','dd-MON-yyyy')
                        AND TO_DATE('16-JUL-2001','dd-MON-yyyy')
     ) rev
  PARTITION BY (prod_name)
  RIGHT OUTER JOIN (SELECT time_id, week_ending_day FROM times
                    WHERE week_ending_day 
                    BETWEEN TO_DATE('01-JUL-2001','dd-MON-yyyy') 
                    AND TO_DATE('16-JUL-2001','dd-MON-yyyy')
                   ) tim
  ON (rev.time_id = tim.time_id)
GROUP BY tim.week_ending_day
, rev.prod_name
ORDER BY tim.week_ending_day
, rev.prod_name;
 
WEEK_ENDI   PRODUCT                                   REVENUE
---------   ----------------------------------------  ----------
01-JUL-01   128MB Memory Card                                  0
01-JUL-01   256MB Memory Card                            1404.15
08-JUL-01   128MB Memory Card                            6567.48
08-JUL-01   256MB Memory Card                            8506.01
15-JUL-01   128MB Memory Card                                  0
15-JUL-01   256MB Memory Card                             138.82
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHCFHJE"></a><a id="TDPDW0073"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Use of the WITH Clause to Simplify Business Queries</h2>
<p>Queries t<a id="sthref214"></a>hat make extensive use of window functions and different types of joins and access many tables can become complex. The <code>WITH</code> clause enables you to eliminate much of this complexity by incrementally building up the query. It lets you reuse the same query block in a <code>SELECT</code> statement when it occurs more than once within a complex query. Oracle Database retrieves the results of a query block and stores them in the user's temporary tablespace.</p>
<a id="CIHFFFDG"></a><a id="TDPDW00731"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">When to Use the WITH Clause</h3>
<p>When a query has multiple references to the same query block and there are joins and aggregations, use the <code>WITH</code> clause.</p>
</div>
<!-- class="sect2" -->
<a id="TDPDW00732"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref215"></a>
<h3 class="sect2">Example: Using the WITH Clause</h3>
<p>Assume you want to compare the sales of memory card products in the Photo category for the first 3 week endings in July 2001. The following query takes into account that some products may not have sold at all in that period, and it returns the increase or decrease in revenue relative to the week before. Finally, the query retrieves the percentage contribution of the memory card sales for that particular week. Due to the use of the <code>WITH</code> clause, individual sections of the query are not complex.</p>
<p class="subhead2"><a id="sthref216"></a>To use the WITH clause:</p>
<pre>
WITH sales_numbers AS
( SELECT s.prod_id, s.amount_sold, t.week_ending_day
  FROM sales s
  , times t
  , products p
  WHERE s.time_id = t.time_id
  AND s.prod_id = p.prod_id
  AND p.prod_category = 'Photo'
  AND p.prod_name LIKE '%Memory%'
  AND t.week_ending_day BETWEEN TO_DATE('01-JUL-2001','dd-MON-yyyy') 
                            AND TO_DATE('16-JUL-2001','dd-MON-yyyy')
)
, product_revenue AS 
( SELECT p.prod_name product, s.week_ending_day, SUM(s.amount_sold) revenue
  FROM products p
    LEFT OUTER JOIN (SELECT prod_id, amount_sold, week_ending_day 
                     FROM sales_numbers) s
    ON (s.prod_id = p.prod_id)
  WHERE p.prod_category = 'Photo'
  AND p.prod_name LIKE '%Memory%'
  GROUP BY p.prod_name, s.week_ending_day
)
, weeks AS
( SELECT distinct week_ending_day week FROM times WHERE week_ending_day
  BETWEEN TO_DATE('01-JUL-2001','dd-MON-yyyy') 
  AND TO_DATE('16-JUL-2001','dd-MON-yyyy')
)
, complete_product_revenue AS
( SELECT w.week, pr.product, nvl(pr.revenue,0) revenue
  FROM product_revenue pr
    PARTITION BY (product)
    RIGHT OUTER JOIN weeks w
    ON (w.week = pr.week_ending_day)
)
SELECT week
, product
, TO_CHAR(revenue,'L999G990D00') revenue
, TO_CHAR(revenue - lag(revenue,1) OVER (PARTITION BY product 
     ORDER BY week),'L999G990D00') w_w_diff
, TO_CHAR(100 * RATIO_TO_REPORT(revenue) OVER (PARTITION BY week),'990D0') percentage
FROM complete_product_revenue
ORDER BY week, product;
 
WEEK       PRODUCT                REVENUE      W_W_DIFF             PERCENT
---------  -----------------      -------      --------             -------
01-JUL-01  128MB Memory Card        $0.00                               0.0
01-JUL-01  256MB Memory Card    $1,404.15                             100.0
01-JUL-01   64MB Memory Card        $0.00                               0.0
08-JUL-01  128MB Memory Card    $6,567.48     $6,567.48                43.6
08-JUL-01  256MB Memory Card    $8,506.01     $7,101.86                56.4
08-JUL-01   64MB Memory Card        $0.00         $0.00                 0.0
15-JUL-01  128MB Memory Card        $0.00    -$6,567.48                 0.0
15-JUL-01  256MB Memory Card      $138.82    -$8,367.19               100.0
15-JUL-01   64MB Memory Card        $0.00         $0.00                 0.0
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1433">
<tr>
<td class="cellalignment1440">
<table class="cellalignment1438">
<tr>
<td class="cellalignment1437"><a href="part3.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1437"><a href="part4.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2007, 2012,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1442">
<table class="cellalignment1436">
<tr>
<td class="cellalignment1437"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1437"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1437"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1437"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1437"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1437"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
