<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Programmatic Interfaces</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1058" />
<meta name="dcterms.created" content="2015-07-23T1:11:27Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database User's Guide" />
<meta name="dcterms.identifier" content="E27507-03" />
<meta name="dcterms.isVersionOf" content="DFSUG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2007, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="plsql.htm" title="Previous" type="text/html" />
<link rel="Next" href="utm.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e27507.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/13</span> <!-- End Header -->
<div id="DFSUG156" class="chapter"><a id="BABHJGHG"></a>
<h1 class="chapter"><span class="secnum">5</span> Programmatic Interfaces</h1>
<p>This chapter provides BS2000/OSD-specific information that supplements the documentation for the individual precompilers (such as Pro*C) and host language calls (Oracle Call Interface). It includes information about the following topics:</p>
<ul>
<li>
<p><a href="#BABFJHED">Overview</a></p>
</li>
<li>
<p><a href="#BABIJADJ">Building and Running a Programmatic Interface Application</a></p>
</li>
<li>
<p><a href="#BABFCBJJ">Pro*C/C++</a></p>
</li>
<li>
<p><a href="#BABBCHGI">Pro*COBOL</a></p>
</li>
<li>
<p><a href="#BABCIFJF">The Oracle Call Interface</a></p>
</li>
<li>
<p><a href="#CHDHFIAB">Oracle Database Applications in POSIX</a></p>
</li>
<li>
<p><a href="#BABFJIJB">The Object Type Translator</a></p>
</li>
</ul>
<a id="BABFJHED"></a>
<div id="DFSUG157" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">5.1</span> Overview</h2>
<p>Oracle <a id="sthref81"></a><a id="sthref82"></a>Programmatic Interfaces are tools for application designers who want to use SQL statements to access an Oracle Database from within high-level language programs. The following types of programmatic interfaces are available:</p>
<ul>
<li>
<p>The Precompiler Interface, which is a programming tool that enables you to embed SQL statements in high-level language source code.</p>
</li>
<li>
<p>The Oracle Call Interface (OCI), that enables to create high-level language applications that use function calls to access an Oracle database and control all phases of SQL statement execution.</p>
</li>
</ul>
<p>Under BS2000/OSD, the Oracle Database precompilers support programs written in C, C++, and COBOL programming languages.</p>
<p>For more detailed information about Oracle <a id="sthref83"></a><a id="sthref84"></a>Precompilers, see <a class="olink ZZPRE" href="../../appdev.112/e10830/toc.htm"><span class="italic">Oracle Database Programmer's Guide to the Oracle Precompilers</span></a> and the appropriate supplementary publications from either <a class="olink LNPCC" href="../../appdev.112/e10825/toc.htm"><span class="italic">Pro*C/C++ Programmer's Guide</span></a> or <a class="olink LNPCB" href="../../appdev.112/e10826/toc.htm"><span class="italic">Pro*COBOL Programmer's Guide</span></a>.</p>
<div id="DFSUG158" class="sect2"><a id="sthref85"></a>
<h3 class="sect2"><span class="secnum">5.1.1</span> Architecture of the Programmatic Interfaces</h3>
<p>All precompiler and Oracle Call Interface (OCI) applications are link-edited with a small stub module. The stub module dynamically loads the bulk code of the Oracle precompiler software from the <code dir="ltr">ORALOAD</code> library (by using the <code dir="ltr">BIND</code> system macro). Programs written in the following languages can be combined:</p>
<ul>
<li>
<p>Pro*C/C++</p>
</li>
<li>
<p>Pro*COBOL (COBOL85 and COBOL2000)</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
OCI C and OCI COBOL programs cannot be combined together; any attempt to do so results in execution errors. The entries into the Oracle Database used by OCI C and OCI COBOL (for example, OLOGON) have identical names but different argument lists (for OCI COBOL, all arguments are by reference, that is, the parameter list contains all pointers, whereas for OCI C, the numeric arguments are by value).</div>
<p>Oracle precompilers generate different <code dir="ltr">SQLLIB</code> function names for different languages. The following names are used:</p>
<ul>
<li>
<p><code dir="ltr">SQ0XXX:</code> COBOL</p>
</li>
<li>
<p><code dir="ltr">SQ2XXX:</code> C</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="DFSUG159" class="sect2"><a id="sthref86"></a>
<h3 class="sect2"><span class="secnum">5.1.2</span> PL/SQL Support</h3>
<p>The precompilers support PL/SQL as described in the <a class="olink LNPLS" href="../../appdev.112/e25519/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>. When using PL/SQL, you must specify <code dir="ltr">SQLCHECK=FULL</code> or <code dir="ltr">SQLCHECK=SEMANTICS</code> on the precompiler option line. The default is <code dir="ltr">SQLCHECK=NONE</code>. When requesting <code dir="ltr">SQLCHECK</code>, the precompiler must connect to a database. So, ensure that you provide the necessary connection information. (You may also want to set the <code dir="ltr">DEFAULT_CONNECTION</code> variable in the <code dir="ltr">ORAENV</code> file).</p>
<p>When <code dir="ltr">SQLCHECK=SEMANTICS</code> you must also specify <code dir="ltr">USERID=username/password</code>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABIJADJ"></a>
<div id="DFSUG160" class="sect1">
<h2 class="sect1"><span class="secnum">5.2</span> Building and Running a Programmatic Interface Application</h2>
<p>To build and run a programmatic interface application, perform the following steps:</p>
<ol>
<li>
<p>Edit your source code, including embedded SQL, as outlined in the generic precompiler documentation.</p>
</li>
<li>
<p>Pre-process the source with the corresponding pre-processor.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must use WE8BS2000 as client character set during precompilation (set in <code dir="ltr">ORAENV</code> file). Any other character set might lead to problems with concatenation sign ("||").
<p>You do not need to precompile to build an OCI C or an OCI COBOL application.</p>
</div>
</li>
<li>
<p>Compile the application.</p>
</li>
<li>
<p>Link the application, including the stub module <code dir="ltr">PROSTUB</code> from the <code dir="ltr">PRO.LIB</code>.</p>
</li>
<li>
<p>Identify the <code dir="ltr">ORALOAD</code> library by using a <code dir="ltr">SET-FILE-LINK</code> command. (Usually, this is included in the <code dir="ltr">ORAENV</code> procedure).</p>
</li>
<li>
<p>Run the application with the <code dir="ltr">START-PROG</code> command. The supporting Oracle Database module is dynamically loaded from the <code dir="ltr">ORALOAD</code> library.</p>
</li>
<li>
<p>You can find sample BS2000 procedures for precompiling, compiling, and linking in the installation user ID: <code dir="ltr">$ORAC1120.P.PROC, $ORAC1120.P.PROCOB and $ORAC1120.P.PROLNK</code>.</p>
</li>
</ol>
<p><a href="#BABIIBGD">Figure 5-1</a> illustrates the sequence of events outlined in the preceding numbered list and how the programmatic interfaces use the program libraries.</p>
<div id="DFSUG275" class="figure">
<p class="titleinfigure"><a id="BABIIBGD"></a>Figure 5-1 Usage of Program Libraries by Programmatic Interfaces</p>
<img width="552" height="432" src="img/fig5_1.gif" alt="Description of Figure 5-1 follows" /><br />
<a id="sthref87" href="img_text/fig5_1.htm">Description of "Figure 5-1 Usage of Program Libraries by Programmatic Interfaces"</a><br />
<br /></div>
<!-- class="figure" -->
<p>For more information, see the specific notes for the programmatic interfaces in this chapter.</p>
<div id="DFSUG161" class="sect2"><a id="sthref88"></a>
<h3 class="sect2"><span class="secnum">5.2.1</span> Existing Applications</h3>
<p>Existing applications must be pre-processed, compiled, and linked anew.</p>
</div>
<!-- class="sect2" -->
<div id="DFSUG162" class="sect2"><a id="marker2656"></a>
<h3 class="sect2"><span class="secnum">5.2.2</span> <a id="sthref89"></a>Precompilers</h3>
<p>Oracle Database precompilers on BS2000/OSD support LMS libraries for the following files:</p>
<ul>
<li>
<p><a href="#BABHGHHI">Include Files</a></p>
</li>
<li>
<p><a href="#BABHJBEB">User-Specific Configuration Files</a></p>
</li>
<li>
<p><a href="#BABJJDHE">Input, Output, and List-files</a></p>
</li>
</ul>
<p>This functionality improves the possibility of saving disk resources and provides clarity by grouping files in different libraries.</p>
<p>All LMS library elements to be used must be of element-type "S." Pro* generates elements of type "S" if libraries are used. When you use LMS library elements, the precompiler builds temporary files with the prefix "#T." which are deleted when the preprocessing completes successfully.</p>
<p>When you use LMS library elements, the element name that you specify must be the full element name including the suffix. Pro* does not append the suffix to the element name.</p>
<a id="BABHGHHI"></a>
<div id="DFSUG163" class="sect3">
<h4 class="sect3"><span class="secnum">5.2.2.1</span> Include Files</h4>
<p>All standard include files are shipped in the LMS library, <code dir="ltr">$ORAC1120.PRO.INCLUDE.LIB</code>. You must specify this library or a user-defined include library for <code dir="ltr">EXEC SQL INCLUDE</code> statements using the <code dir="ltr">INCLUDE</code> precompiler option, as follows:</p>
<pre dir="ltr">
* INCLUDE=$ORAC1120.PRO.INCLUDE.LIB \
* INCLUDE=mylibrary
</pre>
<p>where <code dir="ltr"><span class="codeinlineitalic">mylibrary</span></code> is the BS2000 file name of the user-defined library, such as <code dir="ltr">PROC.INCLIB</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The order in which you specify different INCLUDE-options affects the performance of precompilation. You should place commonly-used files before rarely-used ones.</div>
</div>
<!-- class="sect3" -->
<a id="BABHJBEB"></a>
<div id="DFSUG164" class="sect3">
<h4 class="sect3"><span class="secnum">5.2.2.2</span> User-Specific Configuration Files</h4>
<p>You can also specify a user-specific configuration file as an LMS-element using the following syntax:</p>
<pre dir="ltr">
* CONFIG=<span class="italic">my_config_lib</span><span class="italic">[config_element]</span>
</pre>
<p>where <code dir="ltr"><span class="codeinlineitalic">my_config_lib</span></code> is the BS2000 file name of the configuration library and <span class="italic">config_element</span> is the full name of the element.</p>
<p>You must use brackets when specifying the configuration element, as shown in the following example.</p>
<pre dir="ltr">
* CONFIG=CONFIG.LIB[PROCOB.CFG]
</pre></div>
<!-- class="sect3" -->
<a id="BABJJDHE"></a>
<div id="DFSUG165" class="sect3">
<h4 class="sect3"><span class="secnum">5.2.2.3</span> Input, Output, and List-files</h4>
<p>Besides using BS2000 files, you can also use LMS library elements for precompiler I/O using the options <code dir="ltr">INAME</code>, <code dir="ltr">ONAME</code>, and <code dir="ltr">LNAME</code>.</p>
<p>If you do not specify a library file name and an element from it, then the Oracle precompilers generate ISAM BS2000 files by default. The only option that you <span class="italic">must</span> enter is the <code dir="ltr">INAME</code> option. That can be either a BS2000 file name (<code dir="ltr">SAM</code> or <code dir="ltr">ISAM</code>) or a library file name and the name of an element from it.</p>
<p>For example:</p>
<pre dir="ltr">
* INAME=my_input_lib[my_element]\
* ONAME=my_output_lib[my_element]\
* LNAME=my_list_lib[my_element]
</pre>
<p>where <code dir="ltr"><span class="codeinlineitalic">my_input_lib</span></code> is the BS2000 file name of the particular library and <code dir="ltr"><span class="codeinlineitalic">my_element</span></code> is the name of the element including the specific suffix.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must use brackets when specifying the appropriate element.</div>
<p>In the following example, Pro*C generates a BS2000-ISAM-output file called <code dir="ltr">SAMPLE.C</code> as the <code dir="ltr">ONAME</code> option has been omitted:</p>
<pre dir="ltr">
* INAME=INPUT.LIB[SAMPLE.PC] \ 
* LNAME=LIST.LIB[SAMPLE.LST]
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="DFSUG166" class="sect2"><a id="sthref90"></a>
<h3 class="sect2"><span class="secnum">5.2.3</span> Additional Remarks</h3>
<p>The following are additional remarks on this release of Oracle Database 11<span class="italic">g</span> Release 2 (11.2) for Fujitsu BS2000/OSD:</p>
<ul>
<li>
<p>Only compilers and compiler versions supporting the ILCS Standard Linkage are supported. If the Oracle Database detects a call from a user program not using Standard Linkage conventions, then it terminates the task and displays message number 5002 or 5003.</p>
</li>
<li>
<p>If <code dir="ltr">ONAME</code> is not specified when starting a precompiler, then the precompiler generates a default name which consists of the last part of <code dir="ltr">INAME</code> with the relevant suffix. For example, if the name of the C program you want to compile is <code dir="ltr"><span class="codeinlineitalic">MYPROG.PERS.TEST.PC</span></code>, and if <code dir="ltr">ONAME</code> is omitted, then Pro*C generates an output file with the name <code dir="ltr">TEST.C</code>.</p>
</li>
<li>
<p>If you work with float variables, then you may encounter rounding problems. The workaround is to declare the float variables as double variables instead.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABFCBJJ"></a>
<div id="DFSUG167" class="sect1"><a id="marker443"></a>
<h2 class="sect1"><span class="secnum">5.3</span> <a id="sthref91"></a><a id="sthref92"></a>Pro*C/C++</h2>
<p>This section describes the procedure for using Pro*C/C++.</p>
<div id="DFSUG168" class="sect2"><a id="sthref93"></a>
<h3 class="sect2"><span class="secnum">5.3.1</span> <a id="sthref94"></a>Starting Pro*C</h3>
<p>To start the Pro*C precompiler, enter the following:</p>
<pre dir="ltr">
/START-PROGRAM $ORAC1120.PROC
* INAME=myprog<span class="italic">.PC ONAME=myprog.C [</span><span class="italic">options</span><span class="italic">]</span>
</pre>
<p>where:</p>
<p><code dir="ltr"><span class="codeinlineitalic">myprog</span></code> is the name of the C program you want to compile and link.</p>
<p><code dir="ltr"><span class="codeinlineitalic">options</span></code> is one of the <code dir="ltr">PROC</code> options. For a list and description of the valid options, see <a class="olink LNPCC" href="../../appdev.112/e10825/toc.htm"><span class="italic">Pro*C/C++ Programmer's Guide</span></a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must use one Precompiler-option <code dir="ltr">INCLUDE</code> for each path you want to specify, unlike as described in <a class="olink LNPCC" href="../../appdev.112/e10825/toc.htm"><span class="italic">Pro*C/C++ Programmer's Guide</span></a>. A list as allowed for the option <code dir="ltr">SYS_INCLUDE</code> may cause the precompiler to loop. See Include-Option for Pro*C/C++.</div>
</div>
<!-- class="sect2" -->
<div id="DFSUG169" class="sect2"><a id="sthref95"></a>
<h3 class="sect2"><span class="secnum">5.3.2</span> Pro*C Include, System Configuration and Demo Files</h3>
<p>The Pro*C include files, demo files, and system configuration file are shipped under:</p>
<pre dir="ltr">
$ORAC1120.PRO.INCLUDE.LIB
$ORAC1120.C.DEMO.*.PC
$ORAC1120.UTM.DEMO.*.PC
$ORAC1120.CONFIG.PCSCFG.CFG
</pre>
<p>An example of a compilation and precompilation procedure is included in the Oracle Database Software under the name <code dir="ltr">$ORAC1120.P.PROC</code>.</p>
</div>
<!-- class="sect2" -->
<div id="DFSUG170" class="sect2"><a id="sthref96"></a>
<h3 class="sect2"><span class="secnum">5.3.3</span> SQLLIB Calls</h3>
<p>To code explicit C calls to <code dir="ltr">SQLLIB</code> functions, then you must call <code dir="ltr">SQ2</code><code dir="ltr"><span class="codeinlineitalic">XXX</span></code> instead of <code dir="ltr">SQL</code><code dir="ltr"><span class="codeinlineitalic">XXX</span></code>. For example, call <code dir="ltr">SQ2CEX</code> instead of <code dir="ltr">SQLCEX</code>.</p>
</div>
<!-- class="sect2" -->
<div id="DFSUG171" class="sect2"><a id="sthref97"></a>
<h3 class="sect2"><span class="secnum">5.3.4</span> Linking Pro*C</h3>
<p>To link a Pro*C program, you need:</p>
<ul>
<li>
<p>The Common Run-Time Environment, <code dir="ltr">CRTE</code>.</p>
</li>
<li>
<p>The Pro* library (<code dir="ltr">$ORAC1120.PRO.LIB</code>), which contains the stub module, <code dir="ltr">PROSTUB.</code> At run time, this module loads the pre-linked module, <code dir="ltr">ORAPRO</code>, which contains the actual <code dir="ltr">SQLLIB</code> code.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must use <code dir="ltr">BINDER</code> instead of <code dir="ltr">TSOSLNK</code>.</div>
<p>To link your program, you should create your user-specific link procedure. An example of such a link procedure is included in the Oracle Database Software under the name, <code dir="ltr">$ORAC1120.P.PROLNK</code>.</p>
</div>
<!-- class="sect2" -->
<div id="DFSUG172" class="sect2"><a id="sthref98"></a>
<h3 class="sect2"><span class="secnum">5.3.5</span> The Pro*C SQLCPR.H Header File</h3>
<p>If you are making calls to Pro*C functions, such as <code dir="ltr">sq2cls()</code> or <code dir="ltr">sq2glm()</code>, then you can include the <code dir="ltr">SQLCPR.H</code> file in the C programs to verify that you have called the functions correctly.</p>
<p>In the Pro*C programs, add the following line:</p>
<pre dir="ltr">
EXEC SQL INCLUDE SQLCPR
</pre>
<p>as you would for <code dir="ltr">SQLCA</code> or <code dir="ltr">SQLDA</code>.</p>
</div>
<!-- class="sect2" -->
<div id="DFSUG173" class="sect2"><a id="sthref99"></a>
<h3 class="sect2"><span class="secnum">5.3.6</span> UTM Applications</h3>
<p>You can use Pro*C to write UTM program units. For UTM programming rules, see <a class="olink DFSIG" href="../../install.112/e27508/toc.htm"><span class="italic">Oracle Database Installation and Administration Guide for Fujitsu BS2000/OSD</span></a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABBCHGI"></a>
<div id="DFSUG174" class="sect1"><a id="marker503"></a>
<h2 class="sect1"><span class="secnum">5.4</span> <a id="sthref100"></a><a id="sthref101"></a>Pro*COBOL</h2>
<p>This section describes the procedure for using Pro*COBOL. You must follow these considerations when using Pro*COBOL:</p>
<ul>
<li>
<p>Host variables of the type <code dir="ltr">PIC S9(</code><code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">)</code> with <code dir="ltr"><span class="codeinlineitalic">n</span></code> =8 and <code dir="ltr"><span class="codeinlineitalic">n &gt;10</span></code> are not supported.</p>
</li>
<li>
<p>When using Pro*COBOL, be careful about the following constructions with paragraphs and <code dir="ltr">EXEC</code> statements, because the precompiler generates a paragraph heading for the code generated from these <code dir="ltr">EXEC</code> statements.</p>
<div class="inftblinformal">
<table class="cellalignment1734" title="Pro*COBOL Precompiler Results" summary="Table displaying precompiler output of Pro*COBOL" dir="ltr">
<thead>
<tr class="cellalignment1725">
<th class="cellalignment1735" id="r1c1-t8"><span class="italic">Before precompiling</span></th>
<th class="cellalignment1735" id="r1c2-t8"><span class="italic">After precompiling</span></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1725">
<td class="cellalignment1731" id="r2c1-t8" headers="r1c1-t8">COB-LABEL1.</td>
<td class="cellalignment1731" headers="r2c1-t8 r1c2-t8">COB-LABEL1</td>
</tr>
<tr class="cellalignment1725">
<td class="cellalignment1731" id="r3c1-t8" headers="r1c1-t8">.</td>
<td class="cellalignment1731" headers="r3c1-t8 r1c2-t8">.</td>
</tr>
<tr class="cellalignment1725">
<td class="cellalignment1731" id="r4c1-t8" headers="r1c1-t8">.</td>
<td class="cellalignment1731" headers="r4c1-t8 r1c2-t8">.</td>
</tr>
<tr class="cellalignment1725">
<td class="cellalignment1731" id="r5c1-t8" headers="r1c1-t8">EXEC SQL....</td>
<td class="cellalignment1731" headers="r5c1-t8 r1c2-t8">SQL-LABEL1.</td>
</tr>
<tr class="cellalignment1725">
<td class="cellalignment1731" id="r6c1-t8" headers="r1c1-t8">.</td>
<td class="cellalignment1731" headers="r6c1-t8 r1c2-t8">.</td>
</tr>
<tr class="cellalignment1725">
<td class="cellalignment1731" id="r7c1-t8" headers="r1c1-t8">.</td>
<td class="cellalignment1731" headers="r7c1-t8 r1c2-t8">.</td>
</tr>
<tr class="cellalignment1725">
<td class="cellalignment1731" id="r8c1-t8" headers="r1c1-t8">COB-LABEL2.</td>
<td class="cellalignment1731" headers="r8c1-t8 r1c2-t8">COB-LABEL2.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></li>
</ul>
<p>Before precompiling, the statement <code dir="ltr">PERFORM COB-LABEL1</code> runs the code in paragraph <code dir="ltr">COB-LABEL1</code> until the <code dir="ltr">COB-LABEL2</code> heading is reached. However, the precompiler generates a paragraph heading, <code dir="ltr">SQL-LABEL1</code>, for the code generated from the <code dir="ltr">EXEC SQL</code> statement.</p>
<p>As a result, after precompiling, <code dir="ltr">PERFORM COB-LABEL1</code> runs the code in the paragraph <code dir="ltr">COB-LABEL1</code> until <code dir="ltr">the SQL-LABEL1</code> heading is reached. The workaround for this problem is to use <code dir="ltr">SECTIONS</code> or to run <code dir="ltr">PERFORM COB-LABEL1 THRU COB-LABEL2</code>.</p>
<p>A <code dir="ltr">COPY</code> statement as first statement in <code dir="ltr">WORKING STORAGE SECTION</code> may result in wrong code generation if copied structures are to be continued by non-copied code because the precompiler generates its data definitions before the first data definition of the source program. To avoid this action, insert one <code dir="ltr">FILLER</code> definition as first line in <code dir="ltr">WORKING-STORAGE SECTION</code>, as follows:</p>
<pre dir="ltr">
01 FILLER PIC X
</pre>
<ul>
<li>
<p>The default data type for <code dir="ltr">PIC X</code> variables has changed in version 8.1.7 from <code dir="ltr">VARCHAR2</code> to <code dir="ltr">CHARF</code>. A precompiler option provides backward compatibility: <code dir="ltr">PICX={VARCHAR2 | CHARF (default)}</code>.</p>
</li>
</ul>
<p>This option is allowed only on the command line or in a configuration file. The new default action is consistent with the usual COBOL move action.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Using the default <code dir="ltr">PICX=CHARF</code> when precompiling existing applications may result in run-time error <code dir="ltr">ORA-1403: no data found</code>.</div>
<p>For more information, see chapter "<a class="olink LNPCB014" href="../../appdev.112/e10826/pco14opt.htm#LNPCB014">Precompiler Options</a>" in <span class="italic">Pro*COBOL Programmer's Guide</span>.</p>
<div id="DFSUG175" class="sect2"><a id="sthref102"></a>
<h3 class="sect2"><span class="secnum">5.4.1</span> Starting Pro*COBOL</h3>
<p><a id="sthref103"></a>To start the Pro*COBOL precompiler, enter the following command:</p>
<pre dir="ltr">
/START-PROGRAM $ORAC1120.PROCOB
* INAME=myprog<span class="italic">.PCO ONAME=myprog.COB [options]</span>
</pre>
<p>where:</p>
<p><code dir="ltr"><span class="codeinlineitalic">myprog</span></code> specifies the COBOL program to compile and link</p>
<p><code dir="ltr"><span class="codeinlineitalic">options</span></code> is one of the PROCOB options described in the <a class="olink LNPCB" href="../../appdev.112/e10826/toc.htm"><span class="italic">Pro*COBOL Programmer's Guide</span></a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <span class="italic">PROCOB</span> option MAXLITERAL defaults to 180, not 256, as shown in the <a class="olink LNPCB" href="../../appdev.112/e10826/toc.htm"><span class="italic">Pro*COBOL Programmer's Guide</span></a>. The option FORMAT=TERMINAL is not supported.</div>
</div>
<!-- class="sect2" -->
<div id="DFSUG176" class="sect2"><a id="sthref104"></a>
<h3 class="sect2"><span class="secnum">5.4.2</span> Pro*COBOL Include, System Configuration, and Demo Files</h3>
<p>The Pro*COBOL include files, demo files, and system configuration file are shipped under:</p>
<pre dir="ltr">
$ORAC1120.PRO.INCLUDE.LIB
$ORAC1120.COBOL.DEMO.*.PCO 
$ORAC1120.UTM.DEMO.*.PCO 
$ORAC1120.CONFIG.PCBCFG.CFG
</pre>
<p>An example of a compilation and precompilation procedure is included in your Oracle Database Software under the name <code dir="ltr">$ORAC1120.P.PROCOB2000</code>.</p>
</div>
<!-- class="sect2" -->
<div id="DFSUG177" class="sect2"><a id="sthref105"></a>
<h3 class="sect2"><span class="secnum">5.4.3</span> SQLLIB Calls</h3>
<p>To code explicit COBOL calls to <code dir="ltr">SQLLIB</code> functions, then call <code dir="ltr">SQ0</code><code dir="ltr"><span class="codeinlineitalic">XXX</span></code> instead of <code dir="ltr">SQL</code><code dir="ltr"><span class="codeinlineitalic">XXX</span></code><span class="italic">.</span> For example, call <code dir="ltr">SQ0ADR</code> instead of <code dir="ltr">SQLADR</code>.</p>
</div>
<!-- class="sect2" -->
<div id="DFSUG178" class="sect2"><a id="sthref106"></a>
<h3 class="sect2"><span class="secnum">5.4.4</span> Linking Pro*COBOL</h3>
<p>To link a Pro*COBOL program, you need:</p>
<ul>
<li>
<p>The Common Run-Time Environment, <code dir="ltr">CRTE</code>.</p>
</li>
<li>
<p>The Pro* Library (<code dir="ltr">$ORAC1120.PRO.LIB</code>), which contains the stub module, <code dir="ltr">PROSTUB.</code> At run time, this module loads the pre-linked module, <code dir="ltr">ORAPRO</code>, which contains the actual <code dir="ltr">SQLLIB</code> code.</p>
</li>
<li>
<p>Unicode is only supported with COBOL2000. This might generate calls to the BS2000-Macro <code dir="ltr">NLSCNV</code>. To resolve the <code dir="ltr">GNLCNV</code> entry, use the system XHCS library. For more information about the <code dir="ltr">GNLCNV</code> entry, see <span class="italic">Fujitsu User's Guide XHCS for BS2000</span>.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must use <code dir="ltr">BINDER</code> instead of <code dir="ltr">TSOSLNK</code>.</div>
<p>To link your program, you should create your own user-specific link procedure. An example of such a link procedure is included on your Oracle Database Software under the name, <code dir="ltr">$ORAC1120.P.PROLNK</code>.</p>
</div>
<!-- class="sect2" -->
<div id="DFSUG179" class="sect2"><a id="sthref107"></a>
<h3 class="sect2"><span class="secnum">5.4.5</span> openUTM Applications</h3>
<p>You can use Pro*COBOL to write openUTM (Universal Transaction Monitor) program units. For openUTM programming rules, see <a class="olink DFSIG" href="../../install.112/e27508/toc.htm"><span class="italic">Oracle Database Installation and Administration Guide for Fujitsu BS2000/OSD</span></a>. Program units written in Pro*C and Pro*COBOL can be combined.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCIFJF"></a>
<div id="DFSUG180" class="sect1"><a id="marker673"></a>
<h2 class="sect1"><span class="secnum">5.5</span> The <a id="sthref108"></a><a id="sthref109"></a>Oracle <a id="sthref110"></a>Call Interface</h2>
<p>Under BS2000/OSD, the Oracle Call Interface supports the C and COBOL languages.</p>
<p>When you use the set of host language calls that comprise the Oracle Call Interface, you can access the data in an Oracle database by programs written in the C and COBOL programming languages. <span class="italic">OCI</span> calls are fully described in the <a class="olink LNOCI" href="../../appdev.112/e10646/toc.htm"><span class="italic">Oracle Call Interface Programmer's Guide</span></a>.</p>
<p>For restrictions, see <a class="olink DFSIG122" href="../../install.112/e27508/relnotes.htm#DFSIG122">"Known Problems, Restrictions and Workarounds"</a> in <a class="olink DFSIG" href="../../install.112/e27508/toc.htm"><span class="italic">Oracle Database Installation and Administration Guide for Fujitsu BS2000/OSD</span></a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The precompiler products from Oracle offer a higher level interface to the Oracle Database. One precompiler call is translated to several OCI calls. As the precompilers are simpler to use, and in a few cases offer more or different functionality than OCI, you may prefer to use the precompilers for some applications.</div>
<div id="DFSUG181" class="sect2"><a id="marker3895"></a>
<h3 class="sect2"><span class="secnum">5.5.1</span> <a id="sthref111"></a>Linking OCI</h3>
<p>To link OCI program files, you need:</p>
<ul>
<li>
<p>The Common Run-Time Environment, <span class="italic">CRTE</span>.</p>
</li>
<li>
<p>The Pro* Library (<code dir="ltr">$ORAC1120.PRO.LIB</code>), which contains the stub modules <code dir="ltr">OCI$COB</code> and <code dir="ltr">PROSTUB.</code> At run time, <code dir="ltr">PROSTUB</code> loads the prelinked module <code dir="ltr">ORAPRO</code>, which contains the actual <code dir="ltr">SQLLIB</code> code.</p>
</li>
</ul>
<p>When linking OCI COBOL programs, <code dir="ltr">OCI$COB</code> must always be included <span class="bold">before</span> <code dir="ltr">PROSTUB</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must use BINDER instead of TSOSLNK.</div>
<p>To link your program, you should create your own user-specific link procedure. An example of such a link procedure is included in your Oracle Database Software under the name <code dir="ltr">$ORAC1120.P.PROLNK</code>.</p>
<p>For example, to link your program using the following sample procedure:</p>
<pre dir="ltr">
/CALL-PROCEDURE $ORAC1120.P.PROLNK,dir,module,TYPE=OCIC
</pre>
<p>or:</p>
<pre dir="ltr">
/CALL-PROCEDURE $ORAC1120.P.PROLNK,dir,module,TYPE=OCICOB
</pre>
<p>where the module to be linked is stored in <code dir="ltr"><span class="codeinlineitalic">dir</span></code><code dir="ltr">.LIB</code>.</p>
<p>Example files are shipped under:</p>
<pre dir="ltr">
$ORAC1120.RDBMS.DEMO.*.C 
$ORAC1120.RDBMS.DEMO.*.COB
</pre></div>
<!-- class="sect2" -->
<div id="DFSUG186" class="sect2"><a id="sthref112"></a>
<h3 class="sect2"><span class="secnum">5.5.2</span> Optional Parameters</h3>
<p>C does not support optional parameters. Hence, all parameters must be specified. (See the sample C program).</p>
<p>If a length parameter is -1, then the length is determined by scanning the associated string parameter for a null byte. Missing address parameters may be specified as <code dir="ltr">NULL</code>. In C, the -1 should be cast to the proper type.</p>
<p>For COBOL, you may omit optional trailing parameters; the call interface provides default values.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDHFIAB"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">5.6</span> Oracle Database Applications in POSIX</h2>
<p>Starting with Oracle Database 11.2.0.4, application programs cannot only run in the &rdquo;normal&rdquo; BS2000 environment but also in the POSIX environment. This section describes how you can build Oracle Database applications that can run in the POSIX environment.</p>
<p>You must precompile and compile the Pro* application or OCI application as described in the previous chapters.</p>
<p>When linking the application, you have to include Oracle stub module PROSTUBX instead of PROSTUB and you must add the following lines in the BS2000 procedure for linking:</p>
<pre dir="ltr">
/   SET-FILE-LINK BLSLIB01,$.SYSLNK.CRTE.POSIX
/   SET-FILE-LINK BLSLIB02,$.SYSLIB.POSIX-SOCKETS.&lt;version_number&gt;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
These two libraries must be the first libraries in the search order for the resolution of unresolved external references.</div>
<p>To start an Oracle Database application in the POSIX environment by using BS2000 SDF commands, set the BS2000 SDF-P variable <code dir="ltr">SYSPOSIX.PROGRAM-ENVIRONMENT</code> to <code dir="ltr">SHELL</code>.</p>
<p>You can set additional POSIX environment variables by using the BS2000 SDF-P variable <code dir="ltr">SYSPOSIX</code>.</p>
<p>The following example shows how to set the SDF-P variable <code dir="ltr">SYSPOSIX</code> to run an application in the POSIX environment:</p>
<pre dir="ltr">
/DECL-VAR SYSPOSIX,TYPE=*STRUCT(DEF=*DYN),SCOPE=*TASK(STATE=*ANY)
/SET-VAR SYSPOSIX.PROGRAM-ENVIRONMENT='SHELL'
/SET-VAR SYSPOSIX.ORACLE-HOME='&lt;oracle_home_path&gt;'
/SET-VAR SYSPOSIX.ORACLE-SID='&lt;oracle_sid&gt;'
</pre></div>
<!-- class="sect1" -->
<a id="BABFJIJB"></a>
<div id="DFSUG187" class="sect1">
<h2 class="sect1"><span class="secnum">5.7</span> The Object Type Translator</h2>
<p>This section describes the port-specific notes for using the Object Type Translator (OTT).</p>
<div id="DFSUG188" class="sect2"><a id="sthref113"></a>
<h3 class="sect2"><span class="secnum">5.7.1</span> Starting OTT</h3>
<p>The OTT is based on Java and can only be started in the POSIX environment. You must use the JDBC Thin driver to connect to the database. The connect string is specified in the url-option, as follows:</p>
<pre dir="ltr">
url=jdbc:oracle:thin:@<span class="codeinlineitalic">hostname</span>:<span class="codeinlineitalic">port</span>:<span class="codeinlineitalic">sid</span>
</pre>
<p>In the following example, OTT will connect to the database with the service identifier <code dir="ltr">orcl,</code> on the host <code dir="ltr">myhost,</code> that has a TCP/IP listener on port 1521.</p>
<p>For example:</p>
<pre dir="ltr">
ott userid=scott/tiger url=jdbc:oracle:thin:@myhost:1521:orcl intype=demoin.typ outtype=demoout.typ code=c hfile=demo.h
</pre>
<p>For more information about Object Type Translator, see <a class="olink LNPCC" href="../../appdev.112/e10825/toc.htm"><span class="italic">Pro*C/C++ Programmer's Guide.</span></a></p>
<div class="infobox-note">
<p class="notep1">See Also:</p>
<a class="olink LNPCC" href="../../appdev.112/e10825/toc.htm"><span class="italic">Pro*C/C++ Programmer's Guide</span></a> for more information about Object Type Translator</div>
</div>
<!-- class="sect2" -->
<div id="DFSUG189" class="sect2"><a id="sthref114"></a>
<h3 class="sect2"><span class="secnum">5.7.2</span> OTT System Configuration File</h3>
<p>The OTT system configuration file is shipped under:</p>
<pre dir="ltr">
$ORACLE_HOME/precomp/admin/ottcfg.cfg
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1724">
<tr>
<td class="cellalignment1731">
<table class="cellalignment1729">
<tr>
<td class="cellalignment1728"><a href="plsql.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1728"><a href="utm.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2007, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1733">
<table class="cellalignment1727">
<tr>
<td class="cellalignment1728"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1728"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1728"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1728"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1728"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1728"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
