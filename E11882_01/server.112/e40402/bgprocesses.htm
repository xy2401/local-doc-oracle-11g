<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Background Processes</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1067" />
<meta name="dcterms.created" content="2015-08-14T13:20:33Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Reference" />
<meta name="dcterms.identifier" content="E40402-18" />
<meta name="dcterms.isVersionOf" content="REFRN" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="stats002.htm" title="Previous" type="text/html" />
<link rel="Next" href="index.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e40402.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">2169/2170</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='bgprocesses'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote&nbsp; ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote&nbsp; ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="REFRN104" class="appendix"><a id="CHDHBIIJ"></a>
<h1 class="appendix"><span class="secnum">F</span> Background Processes</h1>
<p><a href="#BBBDIIHC">Table F-1</a> describes Oracle Database background processes. In this context, a <span class="bold">background process</span> is defined as any process that is listed in <code >V$PROCESS</code> and has a non-null value in the <code dir="ltr">pname</code> column.</p>
<p>The External Properties column lists the type of instance in which the process runs. If the process is specific to a particular feature, then the column names the feature.</p>
<div class="tblruleformalwidemax">
<p class="titleintable"><a id="sthref4607"></a><a id="BBBDIIHC"></a>Table F-1 Background Processes</p>
<table class="cellalignment1590" title="Background Processes" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1581">
<th class="cellalignment1591" id="r1c1-t2">Name</th>
<th class="cellalignment1591" id="r1c2-t2">Expanded Name</th>
<th class="cellalignment1591" id="r1c3-t2">Short Description</th>
<th class="cellalignment1591" id="r1c4-t2">Long Description</th>
<th class="cellalignment1591" id="r1c5-t2">External Properties</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r2c1-t2" headers="r1c1-t2">
<p>ABMR</p>
</td>
<td class="cellalignment1587" headers="r2c1-t2 r1c2-t2">
<p>Auto BMR Background Process</p>
</td>
<td class="cellalignment1587" headers="r2c1-t2 r1c3-t2">
<p>Coordinates execution of tasks such as filtering duplicate block media recovery requests and performing flood control</p>
</td>
<td class="cellalignment1587" headers="r2c1-t2 r1c4-t2">
<p>When a process submits a block media recovery request to ABMR, it dynamically spawns slave processes (BMR<span class="italic">n</span>) to perform the recovery. ABMR and BMR<span class="italic">n</span> terminate after being idle for a long time.</p>
<p><span class="bold">See Also:</span> <a class="olink BRADV157" href="../../backup.112/e10642/rcmblock.htm#BRADV157"><span class="italic">Oracle Database Backup and Recovery User's Guide</span></a></p>
</td>
<td class="cellalignment1587" headers="r2c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r3c1-t2" headers="r1c1-t2">
<p>ACFS</p>
</td>
<td class="cellalignment1587" headers="r3c1-t2 r1c2-t2">
<p>ASM Cluster File System CSS Process</p>
</td>
<td class="cellalignment1587" headers="r3c1-t2 r1c3-t2">
<p>Tracks the cluster membership in CSS and informs the file system driver of membership changes</p>
</td>
<td class="cellalignment1587" headers="r3c1-t2 r1c4-t2">
<p>ACFS delivers CSS membership changes to the Oracle cluster file system. These membership changes are required for the file system to maintain file system consistency within the cluster.</p>
</td>
<td class="cellalignment1587" headers="r3c1-t2 r1c5-t2">
<p>ASM instance, Oracle RAC</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r4c1-t2" headers="r1c1-t2">
<p>ACMS</p>
</td>
<td class="cellalignment1587" headers="r4c1-t2 r1c2-t2">
<p>Atomic Control File to Memory Service Process</p>
</td>
<td class="cellalignment1587" headers="r4c1-t2 r1c3-t2">
<p>Coordinates consistent updates to a control file resource with its SGA counterpart on all instances in an Oracle RAC environment</p>
</td>
<td class="cellalignment1587" headers="r4c1-t2 r1c4-t2">
<p>The ACMS process works with a coordinating caller to ensure that an operation is executed on every instance in Oracle RAC despite failures. ACMS is the process in which a distributed operation is called. As a result, this process can exhibit a variety of behaviors. In general, ACMS is limited to small, nonblocking state changes for a limited set of cross-instance operations.</p>
</td>
<td class="cellalignment1587" headers="r4c1-t2 r1c5-t2">
<p>Database instance, Oracle RAC</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r5c1-t2" headers="r1c1-t2">
<p>AP<span class="italic">nn</span></p>
</td>
<td class="cellalignment1587" headers="r5c1-t2 r1c2-t2">
<p>Logical Standby / Streams Apply Process Coordinator Process</p>
</td>
<td class="cellalignment1587" headers="r5c1-t2 r1c3-t2">
<p>Obtains transactions from the reader server and passes them to apply servers</p>
</td>
<td class="cellalignment1587" headers="r5c1-t2 r1c4-t2">
<p>The coordinator process name is AP<span class="italic">nn</span>, where <span class="italic">nn</span> can include letters and numbers.</p>
<p><span class="bold">See Also:</span> <a class="olink STRMS146" href="../../server.112/e17069/strms_apply.htm#STRMS146"><span class="italic">Oracle Streams Concepts and Administration</span></a></p>
</td>
<td class="cellalignment1587" headers="r5c1-t2 r1c5-t2">
<p>Database instance, Data Guard, Oracle Streams</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r6c1-t2" headers="r1c1-t2">
<p>ARB<span class="italic">n</span></p>
</td>
<td class="cellalignment1587" headers="r6c1-t2 r1c2-t2">
<p>ASM Rebalance Process</p>
</td>
<td class="cellalignment1587" headers="r6c1-t2 r1c3-t2">
<p>Rebalances data extents within an ASM disk group</p>
</td>
<td class="cellalignment1587" headers="r6c1-t2 r1c4-t2">
<p>Possible processes are ARB0-ARB9 and ARBA.</p>
</td>
<td class="cellalignment1587" headers="r6c1-t2 r1c5-t2">
<p>ASM instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r7c1-t2" headers="r1c1-t2">
<p>ARC<span class="italic">n</span></p>
</td>
<td class="cellalignment1587" headers="r7c1-t2 r1c2-t2">
<p>Archiver Process</p>
</td>
<td class="cellalignment1587" headers="r7c1-t2 r1c3-t2">
<p>Copies the redo log files to archival storage when they are full or an online redo log switch occurs</p>
</td>
<td class="cellalignment1587" headers="r7c1-t2 r1c4-t2">
<p>ARC<span class="italic">n</span> processes exist only when the database is in <code dir="ltr">ARCHIVELOG</code> mode and automatic archiving is enabled, in which case ARC<span class="italic">n</span> automatically archives online redo log files. LGWR cannot reuse and overwrite an online redo log group until it has been archived.</p>
<p>The database starts multiple archiver processes as needed to ensure that the archiving of filled online redo logs does not fall behind. Possible processes include ARC0-ARC9 and ARCa-ARCt.</p>
<p>The <code dir="ltr">LOG_ARCHIVE_MAX_PROCESSES</code> initialization parameter specifies the number of ARC<span class="italic">n</span> processes that the database initially invokes.</p>
<p><span class="bold">See Also:</span> <a class="olink CNCPT1257" href="../../server.112/e40540/process.htm#CNCPT1257"><span class="italic">Oracle Database Concepts</span></a> and <a class="olink ADMIN008" href="../../server.112/e25494/archredo.htm#ADMIN008"><span class="italic">Oracle Database Administrator's Guide</span></a></p>
</td>
<td class="cellalignment1587" headers="r7c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r8c1-t2" headers="r1c1-t2">
<p>ASMB</p>
</td>
<td class="cellalignment1587" headers="r8c1-t2 r1c2-t2">
<p>ASM Background Process</p>
</td>
<td class="cellalignment1587" headers="r8c1-t2 r1c3-t2">
<p>Communicates with the ASM instance, managing storage and providing statistics</p>
</td>
<td class="cellalignment1587" headers="r8c1-t2 r1c4-t2">
<p>ASMB runs in ASM instances when the ASMCMD <code dir="ltr">cp</code> command runs or when the database instance first starts if the server parameter file is stored in ASM. ASMB also runs with Oracle Cluster Registry on ASM.</p>
</td>
<td class="cellalignment1587" headers="r8c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r9c1-t2" headers="r1c1-t2">
<p>AS<span class="italic">nn</span></p>
</td>
<td class="cellalignment1587" headers="r9c1-t2 r1c2-t2">
<p>Logical Standby / Streams Apply Process Reader Server or Apply Server</p>
</td>
<td class="cellalignment1587" headers="r9c1-t2 r1c3-t2">
<ul>
<li>
<p>Computes dependencies between logical change records (LCRs) and assembles messages into transactions (Reader Server)</p>
</li>
<li>
<p>Applies LCRs to database objects or passes LCRs and user messages to their appropriate apply handlers (Apply Server)</p>
</li>
</ul>
</td>
<td class="cellalignment1587" headers="r9c1-t2 r1c4-t2">
<p>When the reader server finishes computing dependencies between LCRs and assembling transactions, it returns the assembled transactions to the coordinator process. Query <code dir="ltr">V$STREAMS_APPLY_READER</code> for information about the reader server background process.</p>
<p>An apply server receives the transactions from the coordinator background process, and either applies database changes in LCRs or sends LCRs or messages to apply handlers. Apply servers can also enqueue a queue. If an apply server encounters an error, then it then tries to resolve the error with a user-specified conflict handler or error handler. If an apply server cannot resolve an error, then it rolls back the transaction and places the entire transaction, including all of its messages, in the error queue. When an apply server commits a completed transaction, this transaction has been applied. When an apply server places a transaction in the error queue and commits, this transaction also has been applied. Query <code dir="ltr">V$STREAMS_APPLY_SERVER</code> for information about the apply server background process.</p>
<p>The coordinator process name is AS<span class="italic">nn</span>, where <span class="italic">nn</span> can include letters and numbers.</p>
</td>
<td class="cellalignment1587" headers="r9c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r10c1-t2" headers="r1c1-t2">
<p>BMR<span class="italic">n</span></p>
</td>
<td class="cellalignment1587" headers="r10c1-t2 r1c2-t2">
<p>Automatic Block Media Recovery Slave Pool Process</p>
</td>
<td class="cellalignment1587" headers="r10c1-t2 r1c3-t2">
<p>Fetches blocks from a real-time readable standby database</p>
</td>
<td class="cellalignment1587" headers="r10c1-t2 r1c4-t2">
<p>When a process submits a block media recovery request to ABMR, it dynamically spawns slave processes (BMR<span class="italic">n</span>) to perform the recovery. BMR<span class="italic">n</span> processes fetch blocks from a real-time readable standby database. ABMR and BMR<span class="italic">n</span> terminate after being idle for a long time.</p>
<p><span class="bold">See Also:</span> <a class="olink BRADV157" href="../../backup.112/e10642/rcmblock.htm#BRADV157"><span class="italic">Oracle Database Backup and Recovery User's Guide</span></a></p>
</td>
<td class="cellalignment1587" headers="r10c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r11c1-t2" headers="r1c1-t2">
<p>B<span class="italic">nnn</span></p>
</td>
<td class="cellalignment1587" headers="r11c1-t2 r1c2-t2">
<p>ASM Blocking Slave Process for GMON</p>
</td>
<td class="cellalignment1587" headers="r11c1-t2 r1c3-t2">
<p>Performs maintenance actions on ASM disk groups</p>
</td>
<td class="cellalignment1587" headers="r11c1-t2 r1c4-t2">
<p>B<span class="italic">nnn</span> performs actions that require waiting for resources on behalf of GMON. GMON must be highly available and cannot wait.</p>
<p>A B<span class="italic">nnn</span> slave is spawned when a disk is taken offline in an ASM disk group. Offline timer processing and drop of the disk are performed in this slave. Up to five process (B000 to B004) can exist depending on the load.</p>
</td>
<td class="cellalignment1587" headers="r11c1-t2 r1c5-t2">
<p>ASM instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r12c1-t2" headers="r1c1-t2">
<p>CJQ0</p>
</td>
<td class="cellalignment1587" headers="r12c1-t2 r1c2-t2">
<p>Job Queue Coordinator Process</p>
</td>
<td class="cellalignment1587" headers="r12c1-t2 r1c3-t2">
<p>Selects jobs that need to be run from the data dictionary and spawns job queue slave processes (J<span class="italic">nnn</span>) to run the jobs</p>
</td>
<td class="cellalignment1587" headers="r12c1-t2 r1c4-t2">
<p>CJQ0 is automatically started and stopped as needed by Oracle Scheduler.</p>
<p>The <code dir="ltr">JOB_QUEUE_PROCESSES</code> initialization parameter specifies the maximum number of processes that can be created for the execution of jobs. CJQ0 starts only as many job queue processes as required by the number of jobs to run and available resources.</p>
<p><span class="bold">See Also:</span> <a class="olink CNCPT1252" href="../../server.112/e40540/process.htm#CNCPT1252"><span class="italic">Oracle Database Concepts</span></a> and <a class="olink ADMIN12376" href="../../server.112/e25494/schedover.htm#ADMIN12376"><span class="italic">Oracle Database Administrator's Guide</span></a></p>
</td>
<td class="cellalignment1587" headers="r12c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r13c1-t2" headers="r1c1-t2">
<p>CKPT</p>
</td>
<td class="cellalignment1587" headers="r13c1-t2 r1c2-t2">
<p>Checkpoint Process</p>
</td>
<td class="cellalignment1587" headers="r13c1-t2 r1c3-t2">
<p>Signals DBW<span class="italic">n</span> at checkpoints and updates all the data files and control files of the database to indicate the most recent checkpoint</p>
</td>
<td class="cellalignment1587" headers="r13c1-t2 r1c4-t2">
<p>At specific times CKPT starts a checkpoint request by messaging DBW<span class="italic">n</span> to begin writing dirty buffers. On completion of individual checkpoint requests, CKPT updates data file headers and control files to record most recent checkpoint.</p>
<p><span class="bold">See Also:</span> <a class="olink CNCPT1252" href="../../server.112/e40540/process.htm#CNCPT1252"><span class="italic">Oracle Database Concepts</span></a></p>
</td>
<td class="cellalignment1587" headers="r13c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r14c1-t2" headers="r1c1-t2">
<p>CP<span class="italic">nn</span></p>
</td>
<td class="cellalignment1587" headers="r14c1-t2 r1c2-t2">
<p>Streams Capture Process</p>
</td>
<td class="cellalignment1587" headers="r14c1-t2 r1c3-t2">
<p>Captures database changes from the redo log by using the infrastructure of LogMiner</p>
</td>
<td class="cellalignment1587" headers="r14c1-t2 r1c4-t2">
<p>The capture process name is CP<span class="italic">nn</span>, where <span class="italic">nn</span> can include letters and numbers. The underlying LogMiner process name is MS<span class="italic">nn</span>, where <span class="italic">nn</span> can include letters and numbers. The capture process includes one reader server that reads the redo log and divides it into regions, one or more preparer servers that scan the redo log, and one builder server that merges redo records from the preparer servers. Each reader server, preparer server, and builder server is a process. Query the <code dir="ltr">V$STREAMS_CAPTURE</code> view for information about this background process.</p>
<p><span class="bold">See Also:</span> <a class="olink STRMS178" href="../../server.112/e17069/strms_capture.htm#STRMS178"><span class="italic">Oracle Streams Concepts and Administration</span></a></p>
</td>
<td class="cellalignment1587" headers="r14c1-t2 r1c5-t2">
<p>Database instance, Oracle Streams</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r15c1-t2" headers="r1c1-t2">
<p>CS<span class="italic">nn</span></p>
</td>
<td class="cellalignment1587" headers="r15c1-t2 r1c2-t2">
<p>I/O Calibration Process</p>
</td>
<td class="cellalignment1587" headers="r15c1-t2 r1c3-t2">
<p>Issues I/Os to storage as part of storage calibration.</p>
</td>
<td class="cellalignment1587" headers="r15c1-t2 r1c4-t2">
<p>CS<span class="italic">nn</span> slave processes are started on execution of the <code dir="ltr">DBMS_RESOURCE_MANAGER.CALIBRATE_IO()</code> procedure. There is one slave process per CPU on each node of the database.</p>
</td>
<td class="cellalignment1587" headers="r15c1-t2 r1c5-t2">
<p>Database instance, Oracle RAC</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r16c1-t2" headers="r1c1-t2">
<p>CTWR</p>
</td>
<td class="cellalignment1587" headers="r16c1-t2 r1c2-t2">
<p>Change Tracking Writer Process</p>
</td>
<td class="cellalignment1587" headers="r16c1-t2 r1c3-t2">
<p>Tracks changed data blocks as part of the Recovery Manager block change tracking feature</p>
</td>
<td class="cellalignment1587" headers="r16c1-t2 r1c4-t2">
<p>CTWR tracks changed blocks as redo is generated at a primary database and as redo is applied at a standby database. The process is slightly different depending on the type of database.</p>
<p><span class="bold">See Also:</span> <a class="olink BRADV89533" href="../../backup.112/e10642/rcmbckba.htm#BRADV89533"><span class="italic">Oracle Database Backup and Recovery User's Guide</span></a></p>
</td>
<td class="cellalignment1587" headers="r16c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r17c1-t2" headers="r1c1-t2">
<p>CX<span class="italic">nn</span></p>
</td>
<td class="cellalignment1587" headers="r17c1-t2 r1c2-t2">
<p>Streams Propagation Sender Process</p>
</td>
<td class="cellalignment1587" headers="r17c1-t2 r1c3-t2">
<p>Sends LCRs to a propagation receiver</p>
</td>
<td class="cellalignment1587" headers="r17c1-t2 r1c4-t2">
<p>The propagation sender process name is CX<span class="italic">nn</span>, where <span class="italic">nn</span> can include letters and numbers. In an Oracle Streams combined capture and apply optimization, the propagation sender sends LCRs directly to the propagation receiver to improve performance. The propagation receiver passes the LCRs to an apply process. Query <code dir="ltr">V$PROPAGATION_SENDER</code> for information about a propagation sender.</p>
</td>
<td class="cellalignment1587" headers="r17c1-t2 r1c5-t2">
<p>Database instance, Oracle Streams</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r18c1-t2" headers="r1c1-t2">
<p>DBRM</p>
</td>
<td class="cellalignment1587" headers="r18c1-t2 r1c2-t2">
<p>Database Resource Manager Process</p>
</td>
<td class="cellalignment1587" headers="r18c1-t2 r1c3-t2">
<p>Sets resource plans and performs other tasks related to the Database Resource Manager</p>
</td>
<td class="cellalignment1587" headers="r18c1-t2 r1c4-t2">
<p>If a resource plan is not enabled, then this process is idle.</p>
<p><span class="bold">See Also:</span> <a class="olink ADMIN027" href="../../server.112/e25494/dbrm.htm#ADMIN027"><span class="italic">Oracle Database Administrator's Guide</span></a></p>
</td>
<td class="cellalignment1587" headers="r18c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r19c1-t2" headers="r1c1-t2">
<p>DBW<span class="italic">n</span></p>
</td>
<td class="cellalignment1587" headers="r19c1-t2 r1c2-t2">
<p>Database Writer Process</p>
</td>
<td class="cellalignment1587" headers="r19c1-t2 r1c3-t2">
<p>Writes modified blocks from the database buffer cache to the data files</p>
</td>
<td class="cellalignment1587" headers="r19c1-t2 r1c4-t2">
<p>The primary responsibility of DBW<span class="italic">n</span> is to write data blocks to disk. DBW<span class="italic">n</span> also handles checkpoints, file open synchronization, and logging of Block Written records.</p>
<p>In many cases the blocks that DBW<span class="italic">n</span> writes are scattered throughout the disk. Thus, the writes tend to be slower than the sequential writes performed by LGWR. DBW<span class="italic">n</span> performs multiblock writes when possible to improve efficiency. The number of blocks written in a multiblock write varies by operating system.</p>
<p>The <code dir="ltr">DB_WRITER_PROCESSES</code> initialization parameter specifies the number of DBW<span class="italic">n</span> processes (DBW0-DBW9 and DBWa-DBWz). The database selects an appropriate default setting for this parameter or adjusts a user-specified setting based on the number of CPUs and processor groups.</p>
<p><span class="bold">See Also:</span> <a class="olink CNCPT1250" href="../../server.112/e40540/process.htm#CNCPT1250"><span class="italic">Oracle Database Concepts</span></a> and <a class="olink PFGRF024" href="../../server.112/e41573/instance_tune.htm#PFGRF024"><span class="italic">Oracle Database Performance Tuning Guide</span></a></p>
</td>
<td class="cellalignment1587" headers="r19c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r20c1-t2" headers="r1c1-t2">
<p>DIA0</p>
</td>
<td class="cellalignment1587" headers="r20c1-t2 r1c2-t2">
<p>Diagnostic Process</p>
</td>
<td class="cellalignment1587" headers="r20c1-t2 r1c3-t2"><br />
Detects and resolves hangs and deadlocks</td>
<td class="cellalignment1587" headers="r20c1-t2 r1c4-t2">&nbsp;</td>
<td class="cellalignment1587" headers="r20c1-t2 r1c5-t2">
<p>ASM and Database instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r21c1-t2" headers="r1c1-t2">
<p>DIAG</p>
</td>
<td class="cellalignment1587" headers="r21c1-t2 r1c2-t2">
<p>Diagnostic Capture Process</p>
</td>
<td class="cellalignment1587" headers="r21c1-t2 r1c3-t2"><br />
Performs diagnostic dumps</td>
<td class="cellalignment1587" headers="r21c1-t2 r1c4-t2"><br />
DIAG performs diagnostic dumps requested by other processes and dumps triggered by process or instance termination. In Oracle RAC, DIAG performs global diagnostic dumps requested by remote instances.</td>
<td class="cellalignment1587" headers="r21c1-t2 r1c5-t2">
<p>ASM and Database instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r22c1-t2" headers="r1c1-t2">
<p>DM<span class="italic">nn</span></p>
</td>
<td class="cellalignment1587" headers="r22c1-t2 r1c2-t2">
<p>Data Pump Master Process</p>
</td>
<td class="cellalignment1587" headers="r22c1-t2 r1c3-t2">
<p>Coordinates the Data Pump job tasks performed by Data Pump worker processes and handles client interactions</p>
</td>
<td class="cellalignment1587" headers="r22c1-t2 r1c4-t2">
<p>The Data Pump master (control) process is started during job creation and coordinates all tasks performed by the Data Pump job. It handles all client interactions and communication, establishes all job contexts, and coordinates all worker process activities on behalf of the job.</p>
</td>
<td class="cellalignment1587" headers="r22c1-t2 r1c5-t2">
<p>Database instance, Data Pump</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r23c1-t2" headers="r1c1-t2">
<p>DMON</p>
</td>
<td class="cellalignment1587" headers="r23c1-t2 r1c2-t2">
<p>Data Guard Broker Monitor Process</p>
</td>
<td class="cellalignment1587" headers="r23c1-t2 r1c3-t2">
<p>Manages and monitors a database that is part of a Data Guard broker configuration</p>
</td>
<td class="cellalignment1587" headers="r23c1-t2 r1c4-t2">
<p>When you start the Data Guard broker, a DMON process is created. DMON runs for every database instance that is managed by the broker. DMON interacts with the local database and the DMON processes of the other databases to perform the requested function. DMON also monitors the health of the broker configuration and ensures that every database has a consistent description of the configuration.</p>
<p>DMON maintains profiles about all database objects in the broker configuration in a binary configuration file. A copy of this file is maintained by the DMON process for each of the databases that belong to the broker configuration. The process is created when the <code dir="ltr">DG_BROKER_START</code> initialization parameter is set to <code dir="ltr">true</code>.</p>
<p><span class="bold">See Also:</span> <a class="olink DGBKR001" href="../../server.112/e40771/concepts.htm#DGBKR001"><span class="italic">Oracle Data Guard Broker</span></a></p>
</td>
<td class="cellalignment1587" headers="r23c1-t2 r1c5-t2">
<p>Database instance, Data Guard</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r24c1-t2" headers="r1c1-t2">
<p>D<span class="italic">nnn</span></p>
</td>
<td class="cellalignment1587" headers="r24c1-t2 r1c2-t2">
<p>Dispatcher Process</p>
</td>
<td class="cellalignment1587" headers="r24c1-t2 r1c3-t2">
<p>Performs network communication in the shared server architecture</p>
</td>
<td class="cellalignment1587" headers="r24c1-t2 r1c4-t2">
<p>In the shared server architecture, clients connect to a dispatcher process, which creates a virtual circuit for each connection. When the client sends data to the server, the dispatcher receives the data into the virtual circuit and places the active circuit on the common queue to be picked up by an idle shared server. The shared server then reads the data from the virtual circuit and performs the database work necessary to complete the request. When the shared server must send data to the client, the server writes the data back into the virtual circuit and the dispatcher sends the data to the client. After the shared server completes the client request, the server releases the virtual circuit back to the dispatcher and is free to handle other clients.</p>
<p>Several initialization parameters relate to shared servers. The principal parameters are: <code dir="ltr">DISPATCHERS</code>, <code dir="ltr">SHARED_SERVERS</code>, <code dir="ltr">MAX_SHARED_SERVERS</code>, <code dir="ltr">LOCAL_LISTENER</code>, <code dir="ltr">REMOTE_LISTENER</code>.</p>
<p><span class="bold">See Also:</span> <a class="olink CNCPT904" href="../../server.112/e40540/dist_pro.htm#CNCPT904"><span class="italic">Oracle Database Concepts</span></a></p>
</td>
<td class="cellalignment1587" headers="r24c1-t2 r1c5-t2">
<p>Database instance, shared servers</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r25c1-t2" headers="r1c1-t2">
<p>DR<span class="italic">nn</span></p>
</td>
<td class="cellalignment1587" headers="r25c1-t2 r1c2-t2">
<p>ASM Disk Resynchronization Slave Process</p>
</td>
<td class="cellalignment1587" headers="r25c1-t2 r1c3-t2">
<p>Resynchronizes the contents of an offline disk</p>
</td>
<td class="cellalignment1587" headers="r25c1-t2 r1c4-t2">
<p>When a disk online SQL command is issued on a disk or disks that are offline, ASM spawns DR<span class="italic">nn</span>. Depending on the load, more than one slave may be spawned.</p>
</td>
<td class="cellalignment1587" headers="r25c1-t2 r1c5-t2">
<p>ASM Instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r26c1-t2" headers="r1c1-t2">
<p>DSKM</p>
</td>
<td class="cellalignment1587" headers="r26c1-t2 r1c2-t2">
<p>Slave Diskmon Process</p>
</td>
<td class="cellalignment1587" headers="r26c1-t2 r1c3-t2">
<p>Acts as the conduit between the database, ASM instances, and the Master Diskmon daemon to communicate information to Exadata storage</p>
</td>
<td class="cellalignment1587" headers="r26c1-t2 r1c4-t2">
<p>This process is active only if Exadata Storage is used. DSKM performs operations related to Exadata I/O fencing and Exadata cell failure handling.</p>
</td>
<td class="cellalignment1587" headers="r26c1-t2 r1c5-t2">
<p>ASM instance, Exadata</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r27c1-t2" headers="r1c1-t2">
<p>DW<span class="italic">nn</span></p>
</td>
<td class="cellalignment1587" headers="r27c1-t2 r1c2-t2">
<p>Data Pump Worker Process</p>
</td>
<td class="cellalignment1587" headers="r27c1-t2 r1c3-t2">
<p>Performs Data Pump tasks as assigned by the Data Pump master process</p>
</td>
<td class="cellalignment1587" headers="r27c1-t2 r1c4-t2">
<p>The Data Pump worker process is responsible for performing tasks that are assigned by the Data Pump master process, such as the loading and unloading of metadata and data.</p>
</td>
<td class="cellalignment1587" headers="r27c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r28c1-t2" headers="r1c1-t2">
<p>EMNC</p>
</td>
<td class="cellalignment1587" headers="r28c1-t2 r1c2-t2">
<p>EMON Coordinator Process</p>
</td>
<td class="cellalignment1587" headers="r28c1-t2 r1c3-t2">
<p>Coordinates database event management and notifications</p>
</td>
<td class="cellalignment1587" headers="r28c1-t2 r1c4-t2">
<p>EMNC coordinates event management and notification activity in the database, including Streams Event Notifications, Continuous Query Notifications, and Fast Application Notifications.</p>
</td>
<td class="cellalignment1587" headers="r28c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r29c1-t2" headers="r1c1-t2">
<p>E<span class="italic">nnn</span></p>
</td>
<td class="cellalignment1587" headers="r29c1-t2 r1c2-t2">
<p>EMON Slave Process</p>
</td>
<td class="cellalignment1587" headers="r29c1-t2 r1c3-t2">
<p>Performs database event management and notifications</p>
</td>
<td class="cellalignment1587" headers="r29c1-t2 r1c4-t2">
<p>The database event management and notification load is distributed among the EMON slave processes. These processes work on the system notifications in parallel, offering a capability to process a larger volume of notifications, a faster response time, and a lower shared memory use for staging notifications.</p>
</td>
<td class="cellalignment1587" headers="r29c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r30c1-t2" headers="r1c1-t2">
<p>FBDA</p>
</td>
<td class="cellalignment1587" headers="r30c1-t2 r1c2-t2">
<p>Flashback Data Archiver Process</p>
</td>
<td class="cellalignment1587" headers="r30c1-t2 r1c3-t2">
<p>Archives historical rows for tracked tables into flashback data archives and manages archive space, organization, and retention</p>
</td>
<td class="cellalignment1587" headers="r30c1-t2 r1c4-t2">
<p>When a transaction that modifies a tracked table commits, FBDA stores the pre-image of the rows in the archive. FDBA maintains metadata on the current rows and tracks how much data has been archived.</p>
<p>FBDA is also responsible for automatically managing the flashback data archive for space, organization (partitioning tablespaces), and retention. FBDA also keeps track of how far the archiving of tracked transactions has progressed.</p>
<p><span class="bold">See Also:</span> <a class="olink ADFNS01011" href="../../appdev.112/e41502/adfns_flashback.htm#ADFNS01011"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a></p>
</td>
<td class="cellalignment1587" headers="r30c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r31c1-t2" headers="r1c1-t2">
<p>FD<span class="italic">nn</span></p>
</td>
<td class="cellalignment1587" headers="r31c1-t2 r1c2-t2">
<p>Oracle ASM Stale FD Cleanup Slave Process</p>
</td>
<td class="cellalignment1587" headers="r31c1-t2 r1c3-t2">
<p>Cleans up Oracle ASM stale file descriptors on foreground processes</p>
</td>
<td class="cellalignment1587" headers="r31c1-t2 r1c4-t2">
<p>This process cleans up Oracle ASM stale file descriptors on foreground processes if an Oracle ASM disk is globally closed.</p>
</td>
<td class="cellalignment1587" headers="r31c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r32c1-t2" headers="r1c1-t2">
<p>FMON</p>
</td>
<td class="cellalignment1587" headers="r32c1-t2 r1c2-t2">
<p>File Mapping Monitor Process</p>
</td>
<td class="cellalignment1587" headers="r32c1-t2 r1c3-t2">
<p>Manages mapping information for the Oracle Database file mapping interface</p>
</td>
<td class="cellalignment1587" headers="r32c1-t2 r1c4-t2">
<p>The <code dir="ltr">DBMS_STORAGE_MAP</code> package enables you to control the mapping operations. When instructed by the user, FMON builds mapping information and stores it in the SGA, refreshes the information when a change occurs, saves the information to the data dictionary, and restores it to the SGA at instance startup.</p>
<p>FMON is started by the database whenever the <code dir="ltr">FILE_MAPPING</code> initialization parameter is set to <code dir="ltr">true</code>.</p>
</td>
<td class="cellalignment1587" headers="r32c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r33c1-t2" headers="r1c1-t2">
<p>FSFP</p>
</td>
<td class="cellalignment1587" headers="r33c1-t2 r1c2-t2">
<p>Data Guard Broker Fast Start Failover Pinger Process</p>
</td>
<td class="cellalignment1587" headers="r33c1-t2 r1c3-t2">
<p>Maintains fast-start failover state between the primary and target standby databases</p>
</td>
<td class="cellalignment1587" headers="r33c1-t2 r1c4-t2">
<p>FSFP is created when fast-start failover is enabled.</p>
</td>
<td class="cellalignment1587" headers="r33c1-t2 r1c5-t2">
<p>Database instance, Data Guard</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r34c1-t2" headers="r1c1-t2">
<p>GCR<span class="italic">n</span><a id="sthref4608" href="#sthref4608" onclick='footdisplay(1,"This background process is available starting with Oracle Database 11\u003cspan class=\"italic\"\u003eg\u003c/span\u003e Release 2 (11.2.0.2).")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment1587" headers="r34c1-t2 r1c2-t2">
<p>Global Conflict Resolution Slave Process</p>
</td>
<td class="cellalignment1587" headers="r34c1-t2 r1c3-t2">
<p>Performs synchronous tasks on behalf of LMHB</p>
</td>
<td class="cellalignment1587" headers="r34c1-t2 r1c4-t2">
<p>GCR<span class="italic">n</span> processes are transient slaves that are started and stopped as required by LMHB to perform synchronous or resource intensive tasks.</p>
</td>
<td class="cellalignment1587" headers="r34c1-t2 r1c5-t2">
<p>Database and ASM instances, Oracle RAC</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r35c1-t2" headers="r1c1-t2">
<p>GEN0</p>
</td>
<td class="cellalignment1587" headers="r35c1-t2 r1c2-t2">
<p>General Task Execution Process</p>
</td>
<td class="cellalignment1587" headers="r35c1-t2 r1c3-t2">
<p>Performs required tasks including SQL and DML</p>
</td>
<td class="cellalignment1587" headers="r35c1-t2 r1c4-t2">&nbsp;</td>
<td class="cellalignment1587" headers="r35c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r36c1-t2" headers="r1c1-t2">
<p>GMON</p>
</td>
<td class="cellalignment1587" headers="r36c1-t2 r1c2-t2">
<p>ASM Disk Group Monitor Process</p>
</td>
<td class="cellalignment1587" headers="r36c1-t2 r1c3-t2">
<p>Monitors all mounted ASM disk groups</p>
</td>
<td class="cellalignment1587" headers="r36c1-t2 r1c4-t2">
<p>GMON monitors all the disk groups mounted in an ASM instance and is responsible for maintaining consistent disk membership and status information. Membership changes result from adding and dropping disks, whereas disk status changes result from taking disks offline or bringing them online.</p>
</td>
<td class="cellalignment1587" headers="r36c1-t2 r1c5-t2">
<p>ASM instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r37c1-t2" headers="r1c1-t2">
<p>GTX<span class="italic">n</span></p>
</td>
<td class="cellalignment1587" headers="r37c1-t2 r1c2-t2">
<p>Global Transaction Process</p>
</td>
<td class="cellalignment1587" headers="r37c1-t2 r1c3-t2">
<p>Provides transparent support for XA global transactions in an Oracle RAC environment</p>
</td>
<td class="cellalignment1587" headers="r37c1-t2 r1c4-t2">
<p>These processes help maintain the global information about XA global transactions throughout the cluster. Also, the processes help perform two-phase commit for global transactions anywhere in the cluster so that an Oracle RAC database behaves as a single system to the externally coordinated distributed transactions.</p>
<p>The <code dir="ltr">GLOBAL_TXN_PROCESSES</code> initialization parameter specifies the number of GTX<span class="italic">n</span> processes, where <span class="italic">n</span> is 0-9 or a-j. The database automatically tunes the number of these processes based on the workload of XA global transactions. You can disable these processes by setting the parameter to 0. If you try to run XA global transactions with these process disabled, an error is returned.</p>
<p><span class="bold">See Also:</span> <a class="olink RACAD7147" href="../../rac.112/e41960/hafeats.htm#RACAD7147"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a></p>
</td>
<td class="cellalignment1587" headers="r37c1-t2 r1c5-t2">
<p>Database instance, Oracle RAC</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r38c1-t2" headers="r1c1-t2">
<p>I<span class="italic">nnn</span></p>
</td>
<td class="cellalignment1587" headers="r38c1-t2 r1c2-t2">
<p>Disk and Tape I/O Slave Process</p>
</td>
<td class="cellalignment1587" headers="r38c1-t2 r1c3-t2">
<p>Serves as an I/O slave process spawned on behalf of DBWR, LGWR, or an RMAN backup session</p>
</td>
<td class="cellalignment1587" headers="r38c1-t2 r1c4-t2">
<p>I/O slave process can be configured on platforms where asynchronous I/O support is not available. These slaves are started by setting the corresponding slave enable parameter in the server parameter file. The I/O slaves simulate the asynchronous I/O behavior when the underlying platform does not have native support for asynchronous I/O.</p>
</td>
<td class="cellalignment1587" headers="r38c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r39c1-t2" headers="r1c1-t2">
<p>INSV</p>
</td>
<td class="cellalignment1587" headers="r39c1-t2 r1c2-t2">
<p>Data Guard Broker Instance Slave Process</p>
</td>
<td class="cellalignment1587" headers="r39c1-t2 r1c3-t2">
<p>Performs Data Guard broker communication among instances in an Oracle RAC environment</p>
</td>
<td class="cellalignment1587" headers="r39c1-t2 r1c4-t2">
<p>INSV is created when the <code dir="ltr">DG_BROKER_START</code> initialization parameter is set to <code dir="ltr">true</code>.</p>
</td>
<td class="cellalignment1587" headers="r39c1-t2 r1c5-t2">
<p>Database instance, Data Guard</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r40c1-t2" headers="r1c1-t2">
<p>J<span class="italic">nnn</span></p>
</td>
<td class="cellalignment1587" headers="r40c1-t2 r1c2-t2">
<p>Job Queue Slave Process</p>
</td>
<td class="cellalignment1587" headers="r40c1-t2 r1c3-t2">
<p>Executes jobs assigned by the job coordinator</p>
</td>
<td class="cellalignment1587" headers="r40c1-t2 r1c4-t2">
<p>Job slave processes are created or awakened by the job coordinator when it is time for a job to be executed.</p>
<p>Job slaves gather all the metadata required to run the job from the data dictionary. The slave processes start a database session as the owner of the job, execute triggers, and then execute the job. After the job is complete, the slave processes commit and then execute appropriate triggers and close the session. The slave can repeat this operation in case additional jobs need to be run.</p>
</td>
<td class="cellalignment1587" headers="r40c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r41c1-t2" headers="r1c1-t2">
<p>LCK0</p>
</td>
<td class="cellalignment1587" headers="r41c1-t2 r1c2-t2">
<p>Instance Enqueue Background Process</p>
</td>
<td class="cellalignment1587" headers="r41c1-t2 r1c3-t2">
<p>Manages global enqueue requests and cross-instance broadcasts</p>
</td>
<td class="cellalignment1587" headers="r41c1-t2 r1c4-t2">
<p>The process handles all requests for resources other than data blocks. For examples, LCK0 manages library and row cache requests.</p>
</td>
<td class="cellalignment1587" headers="r41c1-t2 r1c5-t2">
<p>Database and ASM instances, Oracle RAC</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r42c1-t2" headers="r1c1-t2">
<p>LGWR</p>
</td>
<td class="cellalignment1587" headers="r42c1-t2 r1c2-t2">
<p>Log Writer Process</p>
</td>
<td class="cellalignment1587" headers="r42c1-t2 r1c3-t2">
<p>Writes redo entries to the online redo log</p>
</td>
<td class="cellalignment1587" headers="r42c1-t2 r1c4-t2">
<p>Redo log entries are generated in the redo log buffer of the system global area (SGA). LGWR writes the redo log entries sequentially into a redo log file. If the database has a multiplexed redo log, then LGWR writes the redo log entries to a group of redo log files.</p>
<p><span class="bold">See Also:</span> <a class="olink CNCPT1251" href="../../server.112/e40540/process.htm#CNCPT1251"><span class="italic">Oracle Database Concepts</span></a> and <a class="olink ADMIN11305" href="../../server.112/e25494/onlineredo.htm#ADMIN11305"><span class="italic">Oracle Database Administrator's Guide</span></a></p>
</td>
<td class="cellalignment1587" headers="r42c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r43c1-t2" headers="r1c1-t2">
<p>LMD0</p>
</td>
<td class="cellalignment1587" headers="r43c1-t2 r1c2-t2">
<p>Global Enqueue Service Daemon 0 Process</p>
</td>
<td class="cellalignment1587" headers="r43c1-t2 r1c3-t2">
<p>Manages incoming remote resource requests from other instances</p>
</td>
<td class="cellalignment1587" headers="r43c1-t2 r1c4-t2">
<p>LMD0 processes enqueue resources managed under Global Enqueue Service. In particular, LMD0 processes incoming enqueue request messages and controls access to global enqueues. It also performs distributed deadlock detections.</p>
</td>
<td class="cellalignment1587" headers="r43c1-t2 r1c5-t2">
<p>Database and ASM instances, Oracle RAC</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r44c1-t2" headers="r1c1-t2">
<p>LMHB</p>
</td>
<td class="cellalignment1587" headers="r44c1-t2 r1c2-t2">
<p>Global Cache/Enqueue Service Heartbeat Monitor</p>
</td>
<td class="cellalignment1587" headers="r44c1-t2 r1c3-t2">
<p>Monitor the heartbeat of LMON, LMD, and LMS<span class="italic">n</span> processes</p>
</td>
<td class="cellalignment1587" headers="r44c1-t2 r1c4-t2">
<p>LMHB monitors LMON, LMD, and LMS<span class="italic">n</span> processes to ensure they are running normally without blocking or spinning.</p>
</td>
<td class="cellalignment1587" headers="r44c1-t2 r1c5-t2">
<p>Database and ASM instances, Oracle RAC</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r45c1-t2" headers="r1c1-t2">
<p>LMON</p>
</td>
<td class="cellalignment1587" headers="r45c1-t2 r1c2-t2">
<p>Global Enqueue Service Monitor Process</p>
</td>
<td class="cellalignment1587" headers="r45c1-t2 r1c3-t2">
<p>Monitors an Oracle RAC cluster to manage global resources</p>
</td>
<td class="cellalignment1587" headers="r45c1-t2 r1c4-t2">
<p>LMON maintains instance membership within Oracle RAC. The process detects instance transitions and performs reconfiguration of GES and GCS resources.</p>
<p><span class="bold">See Also:</span> <a class="olink RACAD7275" href="../../rac.112/e41960/admcon.htm#RACAD7275"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a></p>
</td>
<td class="cellalignment1587" headers="r45c1-t2 r1c5-t2">
<p>Database and ASM instances, Oracle RAC</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r46c1-t2" headers="r1c1-t2">
<p>LMS<span class="italic">n</span></p>
</td>
<td class="cellalignment1587" headers="r46c1-t2 r1c2-t2">
<p>Global Cache Service Process</p>
</td>
<td class="cellalignment1587" headers="r46c1-t2 r1c3-t2">
<p>Manages resources and provides resource control among Oracle RAC instances</p>
</td>
<td class="cellalignment1587" headers="r46c1-t2 r1c4-t2">
<p>LMS, where <span class="italic">n</span> is 0-9 or a-z, maintains a lock database for Global Cache Service (GCS) and buffer cache resources. This process receives, processes, and sends GCS requests, block transfers, and other GCS-related messages.</p>
<p><span class="bold">See Also:</span> <a class="olink RACAD7275" href="../../rac.112/e41960/admcon.htm#RACAD7275"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a></p>
</td>
<td class="cellalignment1587" headers="r46c1-t2 r1c5-t2">
<p>Database and ASM instances, Oracle RAC</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r47c1-t2" headers="r1c1-t2">
<p>LSP0</p>
</td>
<td class="cellalignment1587" headers="r47c1-t2 r1c2-t2">
<p>Logical Standby Coordinator Process</p>
</td>
<td class="cellalignment1587" headers="r47c1-t2 r1c3-t2">
<p>Schedules transactions for Data Guard SQL Apply</p>
</td>
<td class="cellalignment1587" headers="r47c1-t2 r1c4-t2">
<p>LSP0 is the initial process created upon startup of Data Guard SQL Apply. In addition to managing LogMiner and Apply processes, LSP0 is responsible for maintaining inter-transaction dependencies and appropriately scheduling transactions with applier processes. LSP0 is also responsible for detecting and enabling runtime parameter changes for the SQL Apply product as a whole.</p>
</td>
<td class="cellalignment1587" headers="r47c1-t2 r1c5-t2">
<p>Database instance, Data Guard</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r48c1-t2" headers="r1c1-t2">
<p>LSP1</p>
</td>
<td class="cellalignment1587" headers="r48c1-t2 r1c2-t2">
<p>Logical Standby Dictionary Build Process</p>
</td>
<td class="cellalignment1587" headers="r48c1-t2 r1c3-t2">
<p>Performs a logical standby dictionary build on a primary database</p>
</td>
<td class="cellalignment1587" headers="r48c1-t2 r1c4-t2">
<p>The LSP1 process is spawned on a logical standby database that is intended to become the new primary database. A logical standby database becomes a primary database by means of switchover or failover. The dictionary is necessary for logical standby databases to interpret the redo of the new primary database.</p>
</td>
<td class="cellalignment1587" headers="r48c1-t2 r1c5-t2">
<p>Database instance, Data Guard</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r49c1-t2" headers="r1c1-t2">
<p>LSP2</p>
</td>
<td class="cellalignment1587" headers="r49c1-t2 r1c2-t2">
<p>Logical Standby Set Guard Process</p>
</td>
<td class="cellalignment1587" headers="r49c1-t2 r1c3-t2">
<p>Determines which database objects will be protected by the database guard</p>
</td>
<td class="cellalignment1587" headers="r49c1-t2 r1c4-t2">
<p>The LSP2 process is created as needed during startup of SQL Apply to update the list of objects that are protected by the database guard.</p>
</td>
<td class="cellalignment1587" headers="r49c1-t2 r1c5-t2">
<p>Database instance, Data Guard</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r50c1-t2" headers="r1c1-t2">
<p>L<span class="italic">nnn</span></p>
</td>
<td class="cellalignment1587" headers="r50c1-t2 r1c2-t2">
<p>Pooled Server Process</p>
</td>
<td class="cellalignment1587" headers="r50c1-t2 r1c3-t2">
<p>Handles client requests in Database Resident Connection Pooling</p>
</td>
<td class="cellalignment1587" headers="r50c1-t2 r1c4-t2">
<p>In Database Resident Connection Pooling, clients connect to a connection broker process. When a connection becomes active, the connection broker hands off the connection to a compatible pooled server process. The pooled server process performs network communication directly on the client connection and processes requests until the client releases the server. After being released, the connection is returned to the broker for monitoring, leaving the server free to handle other clients.</p>
<p><span class="bold">See Also:</span> <a class="olink CNCPT1896" href="../../server.112/e40540/dist_pro.htm#CNCPT1896"><span class="italic">Oracle Database Concepts</span></a></p>
</td>
<td class="cellalignment1587" headers="r50c1-t2 r1c5-t2">
<p>Database instance, Database Resident Connection Pooling</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r51c1-t2" headers="r1c1-t2">
<p>MARK</p>
</td>
<td class="cellalignment1587" headers="r51c1-t2 r1c2-t2">
<p>Mark AU for Resynchronization Coordinator Process</p>
</td>
<td class="cellalignment1587" headers="r51c1-t2 r1c3-t2">
<p>Marks ASM allocation units as stale following a missed write to an offline disk</p>
</td>
<td class="cellalignment1587" headers="r51c1-t2 r1c4-t2">
<p>MARK essentially tracks which extents require resynchronization for offline disks. This process runs in the database instance and is started when the database instance first begins using the ASM instance. If required, MARK can also be started on demand when disks go offline in the ASM redundancy disk group.</p>
</td>
<td class="cellalignment1587" headers="r51c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r52c1-t2" headers="r1c1-t2">
<p>MMAN</p>
</td>
<td class="cellalignment1587" headers="r52c1-t2 r1c2-t2">
<p>Memory Manager Process</p>
</td>
<td class="cellalignment1587" headers="r52c1-t2 r1c3-t2">
<p>Serves as the instance memory manager</p>
</td>
<td class="cellalignment1587" headers="r52c1-t2 r1c4-t2">
<p>This process performs the resizing of memory components on the instance.</p>
</td>
<td class="cellalignment1587" headers="r52c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r53c1-t2" headers="r1c1-t2">
<p>MMNL</p>
</td>
<td class="cellalignment1587" headers="r53c1-t2 r1c2-t2">
<p>Manageability Monitor Lite Process</p>
</td>
<td class="cellalignment1587" headers="r53c1-t2 r1c3-t2">
<p>Performs tasks relating to manageability, including active session history sampling and metrics computation</p>
</td>
<td class="cellalignment1587" headers="r53c1-t2 r1c4-t2">
<p>MMNL performs many tasks relating to manageability, including session history capture and metrics computation.</p>
</td>
<td class="cellalignment1587" headers="r53c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r54c1-t2" headers="r1c1-t2">
<p>MMON</p>
</td>
<td class="cellalignment1587" headers="r54c1-t2 r1c2-t2">
<p>Manageability Monitor Process</p>
</td>
<td class="cellalignment1587" headers="r54c1-t2 r1c3-t2">
<p>Performs or schedules many manageability tasks</p>
</td>
<td class="cellalignment1587" headers="r54c1-t2 r1c4-t2">
<p>MMON performs many tasks related to manageability, including taking Automatic Workload Repository snapshots and performing Automatic Database Diagnostic Monitor analysis.</p>
</td>
<td class="cellalignment1587" headers="r54c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r55c1-t2" headers="r1c1-t2">
<p>M<span class="italic">nnn</span></p>
</td>
<td class="cellalignment1587" headers="r55c1-t2 r1c2-t2">
<p>MMON Slave Process</p>
</td>
<td class="cellalignment1587" headers="r55c1-t2 r1c3-t2">
<p>Performs manageability tasks on behalf of MMON</p>
</td>
<td class="cellalignment1587" headers="r55c1-t2 r1c4-t2">
<p>M<span class="italic">nnn</span> performs manageability tasks dispatched to them by MMON. Tasks performed include taking Automatic Workload Repository snapshots and Automatic Database Diagnostic Monitor analysis.</p>
</td>
<td class="cellalignment1587" headers="r55c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r56c1-t2" headers="r1c1-t2">
<p>MRP0</p>
</td>
<td class="cellalignment1587" headers="r56c1-t2 r1c2-t2">
<p>Managed Standby Recovery Process</p>
</td>
<td class="cellalignment1587" headers="r56c1-t2 r1c3-t2">
<p>Coordinates the application of redo on a physical standby database</p>
</td>
<td class="cellalignment1587" headers="r56c1-t2 r1c4-t2">
<p>MRP0 is spawned at the start of redo apply on a physical standby database. This process handles the extraction of redo and coordinates the application of that redo on a physical standby database.</p>
<p><span class="bold">See Also:</span> <a class="olink SBYDB4797" href="../../server.112/e41134/manage_ps.htm#SBYDB4797"><span class="italic">Oracle Data Guard Concepts and Administration</span></a></p>
</td>
<td class="cellalignment1587" headers="r56c1-t2 r1c5-t2">
<p>Database instance, Data Guard</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r57c1-t2" headers="r1c1-t2">
<p>MS<span class="italic">nn</span></p>
</td>
<td class="cellalignment1587" headers="r57c1-t2 r1c2-t2">
<p>LogMiner Worker Process</p>
</td>
<td class="cellalignment1587" headers="r57c1-t2 r1c3-t2">
<p>Reads redo log files and translates and assembles into transactions</p>
</td>
<td class="cellalignment1587" headers="r57c1-t2 r1c4-t2">
<p>Multiple MS<span class="italic">nn</span> processes can exists, where <span class="italic">n</span> is 0-9 or a-Z. A minimum of three MS<span class="italic">nn</span> processes work as a group to provide transactions to a LogMiner client, for example, a logical standby database. There may be more than one such group, for example, Downstream Capture sessions.</p>
</td>
<td class="cellalignment1587" headers="r57c1-t2 r1c5-t2">
<p>Database instance, Logical Standby, Oracle Streams</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r58c1-t2" headers="r1c1-t2">
<p>N<span class="italic">nnn</span></p>
</td>
<td class="cellalignment1587" headers="r58c1-t2 r1c2-t2">
<p>Connection Broker Process</p>
</td>
<td class="cellalignment1587" headers="r58c1-t2 r1c3-t2">
<p>Monitors idle connections and hands off active connections in Database Resident Connection Pooling</p>
</td>
<td class="cellalignment1587" headers="r58c1-t2 r1c4-t2">
<p>In Database Resident Connection Pooling, clients connect to a connection broker process. When a connection becomes active, the connection broker hands off the connection to a compatible pooled server process. The pooled server process performs network communication directly on the client connection and processes requests until the client releases the server. After being released, the connection is returned to the broker for monitoring, leaving the server free to handle other clients.</p>
<p><span class="bold">See Also:</span> <a class="olink CNCPT1896" href="../../server.112/e40540/dist_pro.htm#CNCPT1896"><span class="italic">Oracle Database Concepts</span></a></p>
</td>
<td class="cellalignment1587" headers="r58c1-t2 r1c5-t2">
<p>Database instance, Database Resident Connection Pooling</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r59c1-t2" headers="r1c1-t2">
<p>NSA<span class="italic">n</span></p>
</td>
<td class="cellalignment1587" headers="r59c1-t2 r1c2-t2">
<p>Redo Transport NSA1 Process</p>
</td>
<td class="cellalignment1587" headers="r59c1-t2 r1c3-t2">
<p>Ships redo from current online redo logs to remote standby destinations configured for ASYNC transport</p>
</td>
<td class="cellalignment1587" headers="r59c1-t2 r1c4-t2">
<p>NSA<span class="italic">n</span> can run as multiple processes, where <span class="italic">n</span> is 1-9 or A-V.</p>
<p><span class="bold">See Also:</span> <a class="olink SBYDB" href="../e41134/toc.htm"><span class="italic">Oracle Data Guard Concepts and Administration</span></a></p>
</td>
<td class="cellalignment1587" headers="r59c1-t2 r1c5-t2">
<p>Database instance, Data Guard</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r60c1-t2" headers="r1c1-t2">
<p>NSS<span class="italic">n</span></p>
</td>
<td class="cellalignment1587" headers="r60c1-t2 r1c2-t2">
<p>Redo Transport NSS1 Process</p>
</td>
<td class="cellalignment1587" headers="r60c1-t2 r1c3-t2">
<p>Acts as a slave for LGWR when SYNC transport is configured for a remote standby destination</p>
</td>
<td class="cellalignment1587" headers="r60c1-t2 r1c4-t2">
<p>NSS<span class="italic">n</span> can run as multiple processes, where <span class="italic">n</span> is 1-9 or A-V.</p>
<p><span class="bold">See Also:</span> <a class="olink SBYDB" href="../e41134/toc.htm"><span class="italic">Oracle Data Guard Concepts and Administration</span></a></p>
</td>
<td class="cellalignment1587" headers="r60c1-t2 r1c5-t2">
<p>Database instance, Data Guard</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r61c1-t2" headers="r1c1-t2">
<p>NSV<span class="italic">n</span></p>
</td>
<td class="cellalignment1587" headers="r61c1-t2 r1c2-t2">
<p>Data Guard Broker NetSlave Process</p>
</td>
<td class="cellalignment1587" headers="r61c1-t2 r1c3-t2">
<p>Performs broker network communications between databases in a Data Guard environment</p>
</td>
<td class="cellalignment1587" headers="r61c1-t2 r1c4-t2">
<p>NSV<span class="italic">n</span> is created when a Data Guard broker configuration is enabled. There can be as many NSV<span class="italic">n</span> processes (where <span class="italic">n</span> is 0- 9 and A-U) created as there are databases in the Data Guard broker configuration.</p>
</td>
<td class="cellalignment1587" headers="r61c1-t2 r1c5-t2">
<p>Database instance, Data Guard</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r62c1-t2" headers="r1c1-t2">
<p>OCF<span class="italic">n</span></p>
</td>
<td class="cellalignment1587" headers="r62c1-t2 r1c2-t2">
<p>ASM CF Connection Pool Process</p>
</td>
<td class="cellalignment1587" headers="r62c1-t2 r1c3-t2">
<p>Maintains a connection to the ASM instance for metadata operations</p>
</td>
<td class="cellalignment1587" headers="r62c1-t2 r1c4-t2">&nbsp;</td>
<td class="cellalignment1587" headers="r62c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r63c1-t2" headers="r1c1-t2">
<p>O<span class="italic">nnn</span></p>
</td>
<td class="cellalignment1587" headers="r63c1-t2 r1c2-t2">
<p>ASM Connection Pool Process</p>
</td>
<td class="cellalignment1587" headers="r63c1-t2 r1c3-t2">
<p>Maintains a connection to the ASM instance for metadata operations</p>
</td>
<td class="cellalignment1587" headers="r63c1-t2 r1c4-t2">
<p>O<span class="italic">nnn</span> slave processes are spawned on demand. These processes communicate with the ASM instance.</p>
</td>
<td class="cellalignment1587" headers="r63c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r64c1-t2" headers="r1c1-t2">
<p>PING</p>
</td>
<td class="cellalignment1587" headers="r64c1-t2 r1c2-t2">
<p>Interconnect Latency Measurement Process</p>
</td>
<td class="cellalignment1587" headers="r64c1-t2 r1c3-t2">
<p>Assesses latencies associated with communications for each pair of cluster instances</p>
</td>
<td class="cellalignment1587" headers="r64c1-t2 r1c4-t2">
<p>Every few seconds, the process in one instance sends messages to each instance. The message is received by PING on the target instance. The time for the round trip is measured and collected.</p>
</td>
<td class="cellalignment1587" headers="r64c1-t2 r1c5-t2">
<p>Database and ASM instances, Oracle RAC</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r65c1-t2" headers="r1c1-t2">
<p>PMON</p>
</td>
<td class="cellalignment1587" headers="r65c1-t2 r1c2-t2">
<p>Process Monitor</p>
</td>
<td class="cellalignment1587" headers="r65c1-t2 r1c3-t2">
<p>Monitors the other background processes and performs process recovery when a server or dispatcher process terminates abnormally</p>
</td>
<td class="cellalignment1587" headers="r65c1-t2 r1c4-t2">
<p>PMON periodically performs cleanup of all the following:</p>
<ul>
<li>
<p>Processes that died abnormally</p>
</li>
<li>
<p>Sessions that were killed</p>
</li>
<li>
<p>Detached transactions that have exceeded their idle timeout</p>
</li>
<li>
<p>Detached network connections which have exceeded their idle timeout</p>
</li>
</ul>
<p>In addition, PMON monitors, spawns, and stops the following as needed:</p>
<ul>
<li>
<p>Dispatcher and shared server processes</p>
</li>
<li>
<p>Job queue processes</p>
</li>
<li>
<p>Pooled server processes for database resident connection pooling</p>
</li>
<li>
<p>Restartable background processes</p>
</li>
</ul>
<p>PMON is also responsible for registering information about the instance and dispatcher processes with the network listener.</p>
<p><span class="bold">See Also:</span> <a class="olink CNCPT1254" href="../../server.112/e40540/process.htm#CNCPT1254"><span class="italic">Oracle Database Concepts</span></a> and <a class="olink NETAG1080" href="../../network.112/e41945/net_arch.htm#NETAG1080"><span class="italic">Oracle Database Net Services Administrator's Guide</span></a></p>
</td>
<td class="cellalignment1587" headers="r65c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r66c1-t2" headers="r1c1-t2">
<p>P<span class="italic">nnn</span></p>
</td>
<td class="cellalignment1587" headers="r66c1-t2 r1c2-t2">
<p>Parallel Query Slave Process</p>
</td>
<td class="cellalignment1587" headers="r66c1-t2 r1c3-t2">
<p>Perform parallel execution of a SQL statement (query, DML, or DDL)</p>
</td>
<td class="cellalignment1587" headers="r66c1-t2 r1c4-t2">
<p>Parallel Query has two components: a foreground process that acts as query coordinator and a set of parallel slaves (P<span class="italic">nnn</span>) that are background processes. These background processes are spawned or reused during the start of a parallel statement. They receive and carry out units of work sent from the query coordinator.</p>
<p>The maximum number of P<span class="italic">nnn</span> processes is controlled by the initialization parameter <code dir="ltr">PARALLEL_MAX_SERVERS</code>. Slave processes are numbered from 0 to the <code dir="ltr">PARALLEL_MAX_SERVERS</code> setting. If the query is a <code dir="ltr">GV$</code> query, then these background processes are numbered backward, starting from PZ99.</p>
</td>
<td class="cellalignment1587" headers="r66c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r67c1-t2" headers="r1c1-t2">
<p>PR<span class="italic">nn</span></p>
</td>
<td class="cellalignment1587" headers="r67c1-t2 r1c2-t2">
<p>Parallel Recovery Process</p>
</td>
<td class="cellalignment1587" headers="r67c1-t2 r1c3-t2">
<p>Performs tasks assigned by the coordinator process performing parallel recovery</p>
</td>
<td class="cellalignment1587" headers="r67c1-t2 r1c4-t2">
<p>PR<span class="italic">nn</span> serves as a slave process for the coordinator process performing parallel media recovery and carries out tasks assigned by the coordinator. The default number of these processes is based on number of CPUs.</p>
</td>
<td class="cellalignment1587" headers="r67c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r68c1-t2" headers="r1c1-t2">
<p>PSP0</p>
</td>
<td class="cellalignment1587" headers="r68c1-t2 r1c2-t2">
<p>Process Spawner Process</p>
</td>
<td class="cellalignment1587" headers="r68c1-t2 r1c3-t2">
<p>Spawns Oracle background processes after initial instance startup</p>
</td>
<td class="cellalignment1587" headers="r68c1-t2 r1c4-t2">&nbsp;</td>
<td class="cellalignment1587" headers="r68c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r69c1-t2" headers="r1c1-t2">
<p>QMNC</p>
</td>
<td class="cellalignment1587" headers="r69c1-t2 r1c2-t2">
<p>AQ Coordinator Process</p>
</td>
<td class="cellalignment1587" headers="r69c1-t2 r1c3-t2">
<p>Monitors AQ</p>
</td>
<td class="cellalignment1587" headers="r69c1-t2 r1c4-t2">
<p>QMNC is responsible for facilitating various background activities required by AQ and Oracle Streams: time management of messages, management of nonpersistent queues, cleanup of resources, and so on. QMNC dynamically spawns Q<span class="italic">nnn</span> processes as needed for performing these tasks.</p>
<p>Note that if the <code dir="ltr">AQ_TM_PROCESSES</code> initialization parameter is set to 0, this process will not start. The database writes the following message to the alert log: <code dir="ltr">WARNING: AQ_TM_PROCESSES is set to 0. System might be adversely affected</code>.</p>
</td>
<td class="cellalignment1587" headers="r69c1-t2 r1c5-t2">
<p>Database instance, Advanced Queuing</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r70c1-t2" headers="r1c1-t2">
<p>Q<span class="italic">nnn</span></p>
</td>
<td class="cellalignment1587" headers="r70c1-t2 r1c2-t2">
<p>AQ Server Class Process</p>
</td>
<td class="cellalignment1587" headers="r70c1-t2 r1c3-t2">
<p>Performs various AQ-related background task for QMNC</p>
</td>
<td class="cellalignment1587" headers="r70c1-t2 r1c4-t2">
<p>Q<span class="italic">nnn</span> acts as a slave process for QMNC and carry out tasks assigned by QMNC. The number of these processes is dynamically managed by QMNC based on load.</p>
</td>
<td class="cellalignment1587" headers="r70c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r71c1-t2" headers="r1c1-t2">
<p>RBAL</p>
</td>
<td class="cellalignment1587" headers="r71c1-t2 r1c2-t2">
<p>ASM Rebalance Master Process</p>
</td>
<td class="cellalignment1587" headers="r71c1-t2 r1c3-t2">
<p>Coordinates rebalance activity</p>
</td>
<td class="cellalignment1587" headers="r71c1-t2 r1c4-t2">
<p>In an ASM instance, it coordinates rebalance activity for disk groups. In a database instances, it manages ASM disk groups.</p>
</td>
<td class="cellalignment1587" headers="r71c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r72c1-t2" headers="r1c1-t2">
<p>RCBG</p>
</td>
<td class="cellalignment1587" headers="r72c1-t2 r1c2-t2">
<p>Result Cache Background Process</p>
</td>
<td class="cellalignment1587" headers="r72c1-t2 r1c3-t2">
<p>Handles result cache messages</p>
</td>
<td class="cellalignment1587" headers="r72c1-t2 r1c4-t2">
<p>This process is used for handling invalidation and other messages generated by server processes attached to other instances in Oracle RAC.</p>
</td>
<td class="cellalignment1587" headers="r72c1-t2 r1c5-t2">
<p>Database instance, Oracle RAC</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r73c1-t2" headers="r1c1-t2">
<p>RECO</p>
</td>
<td class="cellalignment1587" headers="r73c1-t2 r1c2-t2">
<p>Recoverer Process</p>
</td>
<td class="cellalignment1587" headers="r73c1-t2 r1c3-t2">
<p>Resolves distributed transactions that are pending because of a network or system failure in a distributed database</p>
</td>
<td class="cellalignment1587" headers="r73c1-t2 r1c4-t2">
<p>RECO uses the information in the pending transaction table to finalize the status of in-doubt transactions. At timed intervals, the local RECO attempts to connect to remote databases and automatically complete the commit or rollback of the local portion of any pending distributed transactions. All transactions automatically resolved by RECO are removed from the pending transaction table.</p>
<p><span class="bold">See Also:</span> <a class="olink CNCPT1254" href="../../server.112/e40540/process.htm#CNCPT1254"><span class="italic">Oracle Database Concepts</span></a> and <a class="olink NETAG1080" href="../../network.112/e41945/net_arch.htm#NETAG1080"><span class="italic">Oracle Database Net Services Administrator's Guide</span></a></p>
</td>
<td class="cellalignment1587" headers="r73c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r74c1-t2" headers="r1c1-t2">
<p>RMS<span class="italic">n</span></p>
</td>
<td class="cellalignment1587" headers="r74c1-t2 r1c2-t2">
<p>Oracle RAC Management Process</p>
</td>
<td class="cellalignment1587" headers="r74c1-t2 r1c3-t2">
<p>Performs manageability tasks for Oracle RAC</p>
</td>
<td class="cellalignment1587" headers="r74c1-t2 r1c4-t2">
<p>RMS<span class="italic">n</span> performs a variety of tasks, including creating resources related to Oracle RAC when new instances are added to a cluster.</p>
<p><span class="bold">See Also:</span> <a class="olink RACAD7275" href="../../rac.112/e41960/admcon.htm#RACAD7275"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a></p>
</td>
<td class="cellalignment1587" headers="r74c1-t2 r1c5-t2">
<p>Database instance, Oracle RAC</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r75c1-t2" headers="r1c1-t2">
<p>R<span class="italic">nnn</span></p>
</td>
<td class="cellalignment1587" headers="r75c1-t2 r1c2-t2">
<p>ASM Block Remap Slave Process</p>
</td>
<td class="cellalignment1587" headers="r75c1-t2 r1c3-t2">
<p>Remaps a block with a read error</p>
</td>
<td class="cellalignment1587" headers="r75c1-t2 r1c4-t2">
<p>A database instance reading from an ASM disk group can encounter an error during a read. If possible, ASM asynchronously schedules a R<span class="italic">nnn</span> slave process to remap this bad block from a mirror copy.</p>
</td>
<td class="cellalignment1587" headers="r75c1-t2 r1c5-t2">
<p>ASM instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r76c1-t2" headers="r1c1-t2">
<p>RP<span class="italic">nn</span></p>
</td>
<td class="cellalignment1587" headers="r76c1-t2 r1c2-t2">
<p>Capture Processing Worker Process</p>
</td>
<td class="cellalignment1587" headers="r76c1-t2 r1c3-t2">
<p>Processes a set of workload capture files</p>
</td>
<td class="cellalignment1587" headers="r76c1-t2 r1c4-t2">
<p>RP<span class="italic">nn</span> are worker processes spawned by calling <code dir="ltr">DBMS_WORKLOAD_REPLAY.PROCESS_CAPTURE(capture_dir,parallel_level)</code>. Each worker process is assigned a set of workload capture files to process.</p>
<p>Worker processes execute in parallel without needing to communicate with each other. After each process is finished processing its assigned files, it exits and informs its parent process.</p>
<p>The number of worker processes is controlled by the <code dir="ltr">parallel_level</code> parameter of <code dir="ltr">DBMS_WORKLOAD_REPLAY.PROCESS_CAPTURE</code>. By default, <code dir="ltr">parallel_level</code> is null. Then, the number of worker processes is computed as follows:</p>
<pre dir="ltr">
SELECT VALUE 
FROM   V$PARAMETER 
WHERE  NAME='cpu_count';
</pre>
<p>When <code dir="ltr">parallel_level</code> is <code dir="ltr">1</code>, no worker processes are spawned.</p>
</td>
<td class="cellalignment1587" headers="r76c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r77c1-t2" headers="r1c1-t2">
<p>RSM0</p>
</td>
<td class="cellalignment1587" headers="r77c1-t2 r1c2-t2">
<p>Data Guard Broker Worker Process</p>
</td>
<td class="cellalignment1587" headers="r77c1-t2 r1c3-t2">
<p>Performs monitoring management tasks related to Data Guard on behalf of DMON</p>
</td>
<td class="cellalignment1587" headers="r77c1-t2 r1c4-t2">
<p>The process is created when a Data Guard broker configuration is enabled.</p>
</td>
<td class="cellalignment1587" headers="r77c1-t2 r1c5-t2">
<p>Database instance, Data Guard</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r78c1-t2" headers="r1c1-t2">
<p>RSMN</p>
</td>
<td class="cellalignment1587" headers="r78c1-t2 r1c2-t2">
<p>Remote Slave Monitor Process</p>
</td>
<td class="cellalignment1587" headers="r78c1-t2 r1c3-t2">
<p>Manages background slave process creation and communication on remote instances in Oracle RAC</p>
</td>
<td class="cellalignment1587" headers="r78c1-t2 r1c4-t2">
<p>This background process manages the creation of slave processes and the communication with their coordinators and peers. These background slave processes perform tasks on behalf of a coordinating process running in another cluster instance.</p>
</td>
<td class="cellalignment1587" headers="r78c1-t2 r1c5-t2">
<p>Database instance, Oracle RAC</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r79c1-t2" headers="r1c1-t2">
<p>RVWR</p>
</td>
<td class="cellalignment1587" headers="r79c1-t2 r1c2-t2">
<p>Recovery Writer Process</p>
</td>
<td class="cellalignment1587" headers="r79c1-t2 r1c3-t2">
<p>Writes flashback data to the flashback logs in the fast recovery area</p>
</td>
<td class="cellalignment1587" headers="r79c1-t2 r1c4-t2">
<p>RVWR writes flashback data from the flashback buffer in the SGA to the flashback logs. RVWR also creates flashback logs and performs some tasks for flashback log automatic management.</p>
</td>
<td class="cellalignment1587" headers="r79c1-t2 r1c5-t2">
<p>Database instance, Flashback Database</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r80c1-t2" headers="r1c1-t2">
<p>SMCO</p>
</td>
<td class="cellalignment1587" headers="r80c1-t2 r1c2-t2">
<p>Space Management Coordinator Process</p>
</td>
<td class="cellalignment1587" headers="r80c1-t2 r1c3-t2">
<p>Coordinates the execution of various space management tasks</p>
</td>
<td class="cellalignment1587" headers="r80c1-t2 r1c4-t2">
<p>This background process coordinates the execution of various space management tasks, including proactive space allocation and space reclamation. SMCO dynamically spawns slave processes (W<span class="italic">nnn</span>) to implement these tasks.</p>
</td>
<td class="cellalignment1587" headers="r80c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r81c1-t2" headers="r1c1-t2">
<p>SMON</p>
</td>
<td class="cellalignment1587" headers="r81c1-t2 r1c2-t2">
<p>System Monitor Process</p>
</td>
<td class="cellalignment1587" headers="r81c1-t2 r1c3-t2">
<p>Performs critical tasks such as instance recovery and dead transaction recovery, and maintenance tasks such as temporary space reclamation, data dictionary cleanup, and undo tablespace management</p>
</td>
<td class="cellalignment1587" headers="r81c1-t2 r1c4-t2">
<p>SMON performs many database maintenance tasks, including the following:</p>
<ul>
<li>
<p>Creates and manages the temporary tablespace metadata</p>
</li>
<li>
<p>Reclaims space used by orphaned temporary segments</p>
</li>
<li>
<p>Maintains the undo tablespace by onlining, offlining, and shrinking the undo segments based on undo space usage statistics</p>
</li>
<li>
<p>Cleans up the data dictionary when it is in a transient and inconsistent state</p>
</li>
<li>
<p>Maintains the SCN to time mapping table used to support Oracle Flashback features</p>
</li>
</ul>
<p>In an Oracle RAC database, the SMON process of one instance can perform instance recovery for other instances that have failed.</p>
<p>SMON is resilient to internal and external errors raised during background activities.</p>
<p><span class="bold">See Also:</span> <a class="olink CNCPT1253" href="../../server.112/e40540/process.htm#CNCPT1253"><span class="italic">Oracle Database Concepts</span></a></p>
</td>
<td class="cellalignment1587" headers="r81c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r82c1-t2" headers="r1c1-t2">
<p>S<span class="italic">nnn</span></p>
</td>
<td class="cellalignment1587" headers="r82c1-t2 r1c2-t2">
<p>Shared Server Process</p>
</td>
<td class="cellalignment1587" headers="r82c1-t2 r1c3-t2">
<p>Handles client requests in the shared server architecture</p>
</td>
<td class="cellalignment1587" headers="r82c1-t2 r1c4-t2">
<p>In the shared server architecture, clients connect to a dispatcher process, which creates a virtual circuit for each connection. When the client sends data to the server, the dispatcher receives the data into the virtual circuit and places the active circuit on the common queue to be picked up by an idle shared server. The shared server then reads the data from the virtual circuit and performs the database work necessary to complete the request. When the shared server must send data to the client, the server writes the data back into the virtual circuit and the dispatcher sends the data to the client. After the shared server completes the client request, the server releases the virtual circuit back to the dispatcher and is free to handle other clients.</p>
<p>Several initialization parameters relate to shared servers. The principal parameters are: <code dir="ltr">DISPATCHERS</code>, <code dir="ltr">SHARED_SERVERS</code>, <code dir="ltr">MAX_SHARED_SERVERS</code>, <code dir="ltr">LOCAL_LISTENER</code>, <code dir="ltr">REMOTE_LISTENER</code>.</p>
<p><span class="bold">See Also:</span> <a class="olink CNCPT904" href="../../server.112/e40540/dist_pro.htm#CNCPT904"><span class="italic">Oracle Database Concepts</span></a></p>
</td>
<td class="cellalignment1587" headers="r82c1-t2 r1c5-t2">
<p>Database instance, shared servers</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r83c1-t2" headers="r1c1-t2">
<p>TEM<span class="italic">n</span></p>
</td>
<td class="cellalignment1587" headers="r83c1-t2 r1c2-t2">
<p>ASM disk Test Error Emulation Process</p>
</td>
<td class="cellalignment1587" headers="r83c1-t2 r1c3-t2">
<p>Emulates I/O errors on ASM disks through named events</p>
</td>
<td class="cellalignment1587" headers="r83c1-t2 r1c4-t2">
<p>I/O errors can be emulated on ASM disk I/O through named events. The scope can be the process, instance, or even cluster. Optionally, a set of AUs can be chosen for error emulation.</p>
</td>
<td class="cellalignment1587" headers="r83c1-t2 r1c5-t2">
<p>ASM instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r84c1-t2" headers="r1c1-t2">
<p>VBG<span class="italic">n</span></p>
</td>
<td class="cellalignment1587" headers="r84c1-t2 r1c2-t2">
<p>Volume Background Process</p>
</td>
<td class="cellalignment1587" headers="r84c1-t2 r1c3-t2">
<p>Communicates between the ASM instance and the operating system volume driver</p>
</td>
<td class="cellalignment1587" headers="r84c1-t2 r1c4-t2">
<p>VBG<span class="italic">n</span> handles messages originating from the volume driver in the operating system and sends them to the ASM instance.</p>
<p>VBG<span class="italic">n</span> can run as multiple processes, where <span class="italic">n</span> is 0-9.</p>
</td>
<td class="cellalignment1587" headers="r84c1-t2 r1c5-t2">
<p>ASM instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r85c1-t2" headers="r1c1-t2">
<p>VDBG</p>
</td>
<td class="cellalignment1587" headers="r85c1-t2 r1c2-t2">
<p>Volume Driver Process</p>
</td>
<td class="cellalignment1587" headers="r85c1-t2 r1c3-t2">
<p>Forwards ASM requests to perform various volume-related tasks</p>
</td>
<td class="cellalignment1587" headers="r85c1-t2 r1c4-t2">
<p>VDBG handles requests to lock or unlock an extent for rebalancing, volume resize, disk offline, add or drop a disk, force and dismount disk group to the Dynamic Volume Manager driver.</p>
</td>
<td class="cellalignment1587" headers="r85c1-t2 r1c5-t2">
<p>ASM instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r86c1-t2" headers="r1c1-t2">
<p>VKRM</p>
</td>
<td class="cellalignment1587" headers="r86c1-t2 r1c2-t2">
<p>Virtual Scheduler for Resource Manager Process</p>
</td>
<td class="cellalignment1587" headers="r86c1-t2 r1c3-t2">
<p>Serves as centralized scheduler for Resource Manager activity</p>
</td>
<td class="cellalignment1587" headers="r86c1-t2 r1c4-t2">
<p>VKRM manages the CPU scheduling for all managed Oracle processes. The process schedules managed processes in accordance with an active resource plan.</p>
</td>
<td class="cellalignment1587" headers="r86c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r87c1-t2" headers="r1c1-t2">
<p>VKTM</p>
</td>
<td class="cellalignment1587" headers="r87c1-t2 r1c2-t2">
<p>Virtual Keeper of Time Process</p>
</td>
<td class="cellalignment1587" headers="r87c1-t2 r1c3-t2">
<p>Provides a wall clock time and reference time for time interval measurements</p>
</td>
<td class="cellalignment1587" headers="r87c1-t2 r1c4-t2">
<p>VKTM acts as a time publisher for an Oracle instance. VKTM publishes two sets of time: a wall clock time using a seconds interval and a higher resolution time (which is not wall clock time) for interval measurements. The VKTM timer service centralizes time tracking and offloads multiple timer calls from other clients.</p>
</td>
<td class="cellalignment1587" headers="r87c1-t2 r1c5-t2">
<p>Database and ASM instances</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r88c1-t2" headers="r1c1-t2">
<p>VMB0</p>
</td>
<td class="cellalignment1587" headers="r88c1-t2 r1c2-t2">
<p>Volume Membership Process</p>
</td>
<td class="cellalignment1587" headers="r88c1-t2 r1c3-t2">
<p>Maintains cluster membership on behalf of the ASM volume driver</p>
</td>
<td class="cellalignment1587" headers="r88c1-t2 r1c4-t2">
<p>This process membership in the cluster as an I/O-capable client on behalf of the ASM volume driver.</p>
</td>
<td class="cellalignment1587" headers="r88c1-t2 r1c5-t2">
<p>ASM instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r89c1-t2" headers="r1c1-t2">
<p>V<span class="italic">nnn</span></p>
</td>
<td class="cellalignment1587" headers="r89c1-t2 r1c2-t2">
<p>ASM Volume I/O Slave Process</p>
</td>
<td class="cellalignment1587" headers="r89c1-t2 r1c3-t2">
<p>Initializes ASM volume contents during creation</p>
</td>
<td class="cellalignment1587" headers="r89c1-t2 r1c4-t2">
<p>This process is responsible for initializing the ASM volume during creation.</p>
</td>
<td class="cellalignment1587" headers="r89c1-t2 r1c5-t2">
<p>ASM instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r90c1-t2" headers="r1c1-t2">
<p>W<span class="italic">nnn</span></p>
</td>
<td class="cellalignment1587" headers="r90c1-t2 r1c2-t2">
<p>Space Management Slave Process</p>
</td>
<td class="cellalignment1587" headers="r90c1-t2 r1c3-t2">
<p>Performs various background space management tasks, including proactive space allocation and space reclamation</p>
</td>
<td class="cellalignment1587" headers="r90c1-t2 r1c4-t2">
<p>W<span class="italic">nnn</span> processes are slave processes dynamically spawned by SMCO to perform space management tasks in the background. These tasks include preallocating space into locally managed tablespace and SecureFiles segments based on space usage growth analysis, and reclaiming space from dropped segments. At most 10 W<span class="italic">nnn</span> slaves can run on one database instance. After being started, the slave acts as an autonomous agent. After it finishes task execution, it automatically picks up another task from the queue. The process terminates itself after being idle for a long time.</p>
</td>
<td class="cellalignment1587" headers="r90c1-t2 r1c5-t2">
<p>Database instance</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r91c1-t2" headers="r1c1-t2">
<p>XDMG</p>
</td>
<td class="cellalignment1587" headers="r91c1-t2 r1c2-t2">
<p>Exadata Automation Manager</p>
</td>
<td class="cellalignment1587" headers="r91c1-t2 r1c3-t2">
<p>Initiates automation tasks involved in managing Exadata storage</p>
</td>
<td class="cellalignment1587" headers="r91c1-t2 r1c4-t2">
<p>XDMG monitors all configured Exadata cells for state changes, such as a bad disk getting replaced, and performs the required tasks for such events. Its primary tasks are to watch for inaccessible disks and cells and when they become accessible again, and to initiate the ASM ONLINE operation. The ONLINE operation is handled by XDWK.</p>
</td>
<td class="cellalignment1587" headers="r91c1-t2 r1c5-t2">
<p>ASM instance, Exadata</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r92c1-t2" headers="r1c1-t2">
<p>XDWK</p>
</td>
<td class="cellalignment1587" headers="r92c1-t2 r1c2-t2">
<p>Exadata Automation Manager</p>
</td>
<td class="cellalignment1587" headers="r92c1-t2 r1c3-t2">
<p>Performs automation tasks requested by XDMG</p>
</td>
<td class="cellalignment1587" headers="r92c1-t2 r1c4-t2">
<p>XDWK gets started when asynchronous actions such as ONLINE, DROP, and ADD an ASM disk are requested by XDMG. After a 5 minute period of inactivity, this process will shut itself down.</p>
</td>
<td class="cellalignment1587" headers="r92c1-t2 r1c5-t2">
<p>ASM instance, Exadata</p>
</td>
</tr>
<tr class="cellalignment1581">
<td class="cellalignment1587" id="r93c1-t2" headers="r1c1-t2">
<p>X<span class="italic">nnn</span></p>
</td>
<td class="cellalignment1587" headers="r93c1-t2 r1c2-t2">
<p>ASM Disk Expel Slave Process</p>
</td>
<td class="cellalignment1587" headers="r93c1-t2 r1c3-t2">
<p>Performs ASM post-rebalance activities</p>
</td>
<td class="cellalignment1587" headers="r93c1-t2 r1c4-t2">
<p>This process expels dropped disks at the end of an ASM rebalance.</p>
</td>
<td class="cellalignment1587" headers="r93c1-t2 r1c5-t2">
<p>ASM instance</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformalwidemax" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>This background process is available starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2).</p>
</div>
<!-- class="appendix" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1580">
<tr>
<td class="cellalignment1587">
<table class="cellalignment1585">
<tr>
<td class="cellalignment1584"><a href="stats002.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1584"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1589">
<table class="cellalignment1583">
<tr>
<td class="cellalignment1584"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1584"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1584"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1584"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1584"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1584"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
