<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Data Integrity</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1056" />
<meta name="dcterms.created" content="2015-05-25T13:34:1Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Concepts" />
<meta name="dcterms.identifier" content="E40540-04" />
<meta name="dcterms.isVersionOf" content="CNCPT" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="schemaob.htm" title="Previous" type="text/html" />
<link rel="Next" href="datadict.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e40540.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/30</span> <!-- End Header -->
<div id="CNCPT021" class="chapter"><a id="g20134"></a> <a id="i6686"></a>
<h1 class="chapter"><span class="secnum">5</span> Data Integrity</h1>
<p>This chapter explains how integrity constraints enforce the business rules associated with a database and prevent the entry of invalid information into tables.</p>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#i3786">Introduction to Data Integrity</a></p>
</li>
<li>
<p><a href="#CHDFHCIE">Types of Integrity Constraints</a></p>
</li>
<li>
<p><a href="#CHDJCHEI">States of Integrity Constraints</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="tablecls.htm#i5663">"Overview of Tables"</a></div>
<a id="i3786"></a>
<div id="CNCPT122" class="sect1">
<h2 class="sect1">Introduction to Data Integrity</h2>
<p><a id="sthref597"></a><a id="sthref598"></a>Business rules specify conditions and relationships that must always be true or must always be false. For example, each company defines its own policies about salaries, employee numbers, inventory tracking, and so on. <a id="sthref599"></a><a id="sthref600"></a><a id="sthref601"></a>It is important that data maintain <span class="bold">data integrity</span>, which is adherence to these rules, as determined by the database administrator or application developer.</p>
<div id="CNCPT33333" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref602"></a>
<h3 class="sect2">Techniques for Guaranteeing Data Integrity</h3>
<p>When designing a database application, developers have various options for guaranteeing the integrity of data stored in the database. These options include:</p>
<ul>
<li>
<p><a id="sthref603"></a>Enforcing business rules with triggered stored database procedures, as described in <a href="srvrside.htm#i13313">"Overview of Triggers"</a></p>
</li>
<li>
<p>Using stored procedures to completely control access to data, as described in <a href="srvrside.htm#i19998">"Introduction to Server-Side Programming"</a></p>
</li>
<li>
<p>Enforcing business rules in the code of a database application</p>
</li>
<li>
<p>Using Oracle Database <span class="bold">integrity constraints</span>, which are rules defined at the column or object level that restrict values in the database</p>
</li>
</ul>
<p>This chapter explains the basic concepts of integrity constraints.</p>
</div>
<!-- class="sect2" -->
<a id="CHDDHFAJ"></a>
<div id="CNCPT33334" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Advantages of Integrity Constraints</h3>
<p>An integrity constraint is a <a href="glossary.htm#CHDBJDFF"><span class="xrefglossterm">schema object</span></a> that is created and dropped using SQL. To enforce data integrity, use integrity constraints unless it is not possible. Advantages of integrity constraints over alternatives for enforcing data integrity include:</p>
<ul>
<li>
<p>Declarative ease</p>
<p>Because you define integrity constraints using SQL statements, no additional programming is required when you define or alter a table. The SQL statements are easy to write and eliminate programming errors.</p>
</li>
<li>
<p>Centralized rules</p>
<p>Integrity constraints are defined for tables and are stored in the <a href="glossary.htm#CHDJJJGD"><span class="xrefglossterm">data dictionary</span></a> (see <a href="datadict.htm#i1012">"Overview of the Data Dictionary"</a>). Thus, data entered by all applications must adhere to the same integrity constraints. If the rules change at the table level, then applications need not change. Also, applications can use metadata in the data dictionary to immediately inform users of violations, even before the database checks the SQL statement.</p>
</li>
<li>
<p>Flexibility when loading data</p>
<p>You can disable integrity constraints temporarily to avoid performance overhead when loading large amounts of data. When the data load is complete, you can re-enable the integrity constraints.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink TDDDG32200" href="../../appdev.112/e10766/tdddg_objects.htm#TDDDG32200"><span class="italic">Oracle Database 2 Day Developer's Guide</span></a> and <a class="olink TDDDG32200" href="../../appdev.112/e10766/tdddg_objects.htm#TDDDG32200"><span class="italic">Oracle Database 2 Day Developer's Guide</span></a> to learn how to maintain data integrity</p>
</li>
<li>
<p><a class="olink ADMQS08213" href="../../server.112/e10897/schema.htm#ADMQS08213"><span class="italic">Oracle Database 2 Day DBA</span></a>and <a class="olink ADMIN11537" href="../../server.112/e25494/general.htm#ADMIN11537"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn how to manage integrity constraints</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDFHCIE"></a>
<div id="CNCPT322" class="sect1">
<h2 class="sect1">Types of Integrity Constraints</h2>
<p>Oracle Database enables you to apply constraints both at the table and column level. A constraint specified as part of the definition of a column or attribute is called <a id="sthref604"></a><a id="sthref605"></a>an <span class="bold">inline</span> specification. A constraint specified as part of the table definition is called an <span class="bold">out-of-line</span> specification.</p>
<p>The term <a href="glossary.htm#i432445"><span class="xrefglossterm">key</span></a> is used in the definitions of several types of integrity constraints. A key is the column or set of columns included in the definition of certain types of integrity constraints. Keys describe the relationships between the tables and columns of a relational database. Individual values in a key are <a id="sthref606"></a>called <span class="bold">key values</span>.</p>
<p><a href="#CHDDBDEC">Table 5-1</a> describes the types of constraints. Each can be specified either inline or out-of-line, except for <code dir="ltr">NOT NULL</code>, which must be inline.</p>
<div id="CNCPT88884" class="tblruleformalwide">
<p class="titleintable"><a id="sthref607"></a><a id="CHDDBDEC"></a>Table 5-1 Types of Constraints</p>
<table class="cellalignment1460" title="Types of Constraints" summary="Types of constraints" dir="ltr">
<thead>
<tr class="cellalignment1449">
<th class="cellalignment1459" id="r1c1-t4">Constraint Type</th>
<th class="cellalignment1459" id="r1c2-t4">Description</th>
<th class="cellalignment1459" id="r1c3-t4">See Also</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r2c1-t4" headers="r1c1-t4">
<p><code dir="ltr">NOT NULL</code></p>
</td>
<td class="cellalignment1455" headers="r2c1-t4 r1c2-t4">
<p><a id="sthref608"></a><a id="sthref609"></a>Allows or disallows inserts or updates of rows containing a <a href="glossary.htm#i432506"><span class="xrefglossterm">null</span></a> in a specified column.</p>
</td>
<td class="cellalignment1455" headers="r2c1-t4 r1c3-t4">
<p><a href="#CHDJDDGH">"NOT NULL Integrity Constraints"</a></p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r3c1-t4" headers="r1c1-t4">
<p>Unique key</p>
</td>
<td class="cellalignment1455" headers="r3c1-t4 r1c2-t4">
<p><a id="sthref610"></a><a id="sthref611"></a>Prohibits multiple rows from having the same value in the same column or combination of columns but allows some values to be null.</p>
</td>
<td class="cellalignment1455" headers="r3c1-t4 r1c3-t4">
<p><a href="#CHDCJAAE">"Unique Constraints"</a></p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r4c1-t4" headers="r1c1-t4">
<p>Primary key</p>
</td>
<td class="cellalignment1455" headers="r4c1-t4 r1c2-t4">
<p><a id="sthref612"></a><a id="sthref613"></a>Combines a <code dir="ltr">NOT NULL</code> constraint and a unique constraint. It prohibits multiple rows from having the same value in the same column or combination of columns and prohibits values from being null.</p>
</td>
<td class="cellalignment1455" headers="r4c1-t4 r1c3-t4">
<p><a href="#CHDDBJBB">"Primary Key Constraints"</a></p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r5c1-t4" headers="r1c1-t4">
<p>Foreign key</p>
</td>
<td class="cellalignment1455" headers="r5c1-t4 r1c2-t4">
<p><a id="sthref614"></a><a id="sthref615"></a>Designates a column as the foreign key and establishes a relationship between the foreign key and a primary or unique key, called the <span class="bold">referenced key</span>.</p>
</td>
<td class="cellalignment1455" headers="r5c1-t4 r1c3-t4">
<p><a href="#CHDIIGBG">"Foreign Key Constraints"</a></p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r6c1-t4" headers="r1c1-t4">
<p>Check</p>
</td>
<td class="cellalignment1455" headers="r6c1-t4 r1c2-t4">
<p><a id="sthref616"></a><a id="sthref617"></a>Requires a database value to obey a specified condition.</p>
</td>
<td class="cellalignment1455" headers="r6c1-t4 r1c3-t4">
<p><a href="#CHDGBFBJ">"Check Constraints"</a></p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r7c1-t4" headers="r1c1-t4">
<p><code dir="ltr">REF</code></p>
</td>
<td class="cellalignment1455" headers="r7c1-t4 r1c2-t4">
<p><a id="sthref618"></a><a id="sthref619"></a>Dictates types of data manipulation allowed on values in a <code dir="ltr">REF</code> column and how these actions affect dependent values. In an object-relational database, a built-in data type called a <code dir="ltr">REF</code> encapsulates a reference to a row object of a specified object type. Referential integrity constraints on <code dir="ltr">REF</code> columns ensure that there is a row object for the <code dir="ltr">REF</code>.</p>
</td>
<td class="cellalignment1455" headers="r7c1-t4 r1c3-t4">
<p><a class="olink ADOBJ00805" href="../../appdev.112/e11822/adobjdes.htm#ADOBJ00805"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a> to learn about <code dir="ltr">REF</code> constraints</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformalwide" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="tablecls.htm#i5663">"Overview of Tables"</a></p>
</li>
<li>
<p><a class="olink SQLRF52180" href="../../server.112/e41084/clauses002.htm#SQLRF52180"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn more about the types of constraints</p>
</li>
</ul>
</div>
<a id="CHDJDDGH"></a>
<div id="CNCPT1641" class="sect2">
<h3 class="sect2">NOT NULL Integrity Constraints</h3>
<p><a id="sthref620"></a><a id="sthref621"></a><a id="sthref622"></a><a id="sthref623"></a>A <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint requires that a column of a table contain no null values. A <span class="bold">null</span> is the absence of a value. By default, all columns in a table allow nulls.</p>
<p><code dir="ltr">NOT NULL</code> constraints are intended for columns that must not lack values. For example, the <code dir="ltr">hr.employees</code> table requires a value in the <code dir="ltr">last_name</code> column. An attempt to insert an employee row without a last name generates an error:</p>
<pre dir="ltr">
SQL&gt; INSERT INTO hr.employees (employee_id, last_name) values (999, 'Smith');
.
.
.
ERROR at line 1:
ORA-01400: cannot insert NULL into ("HR"."EMPLOYEES"."LAST_NAME")
</pre>
<p>You can only add a column with a <code dir="ltr">NOT NULL</code> constraint if the table does not contain any rows or if you specify a default value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink TDDDG32220" href="../../appdev.112/e10766/tdddg_objects.htm#TDDDG32220"><span class="italic">Oracle Database 2 Day Developer's Guide</span></a> for examples of adding <code dir="ltr">NOT NULL</code> constraints to a table</p>
</li>
<li>
<p><a class="olink SQLRF30038" href="../../server.112/e41084/clauses002.htm#SQLRF30038"><span class="italic">Oracle Database SQL Language Reference</span></a> for restrictions on using <code dir="ltr">NOT NULL</code> constraints</p>
</li>
<li>
<p><a class="olink ADFNS265" href="../../appdev.112/e41502/adfns_constraints.htm#ADFNS265"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> to learn when to use the <code dir="ltr">NOT NULL</code> constraint</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDCJAAE"></a>
<div id="CNCPT1642" class="sect2">
<h3 class="sect2">Unique Constraints</h3>
<p><a id="sthref624"></a><a id="sthref625"></a><a id="sthref626"></a>A <span class="bold">unique key constraint</span> requires that every value in a column or set of columns be unique. No rows of a table may have duplicate values in a column (the <span class="bold">unique key</span>) or set of columns (the <span class="bold">composite unique key</span>) with a unique key constraint.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The term <span class="bold">key</span> refers only to the columns defined in the integrity constraint. Because the database enforces a unique constraint by implicitly creating or reusing an <a href="glossary.htm#i432409"><span class="xrefglossterm">index</span></a> on the key columns, the term <span class="bold">unique key</span> is sometimes incorrectly used as a synonym for <span class="bold">unique key constraint</span> or <span class="bold">unique index</span>.</div>
<p>Unique key constraints are appropriate for any column where duplicate values are not allowed. Unique constraints differ from primary key constraints, whose purpose is to identify each table row uniquely, and typically contain values that have no significance other than being unique. Examples of unique keys include:</p>
<ul>
<li>
<p>A customer phone number, where the primary key is the customer number</p>
</li>
<li>
<p>A department name, where the primary key is the department number</p>
</li>
</ul>
<p>As shown in <a href="tablecls.htm#CBBEHJCH">Example 2-1</a>, a unique key constraint exists on the <code dir="ltr">email</code> column of the <code dir="ltr">hr.employees</code> table. The relevant part of the statement is as follows:</p>
<pre dir="ltr">
CREATE TABLE employees    ( ...
    , email          VARCHAR2(25)
        CONSTRAINT   emp_email_nn  NOT NULL ...
    , CONSTRAINT     emp_email_uk  UNIQUE (email) ... );
</pre>
<p>The <code dir="ltr">emp_email_uk</code> constraint ensures that no two employees have the same email address, as shown in <a href="#CHDJJAJA">Example 5-1</a>.</p>
<div id="CNCPT88885" class="example">
<p class="titleinexample"><a id="CHDJJAJA"></a>Example 5-1 Unique Constraint</p>
<pre dir="ltr">
SQL&gt; SELECT employee_id, last_name, email FROM employees WHERE email = 'PFAY';
 
EMPLOYEE_ID LAST_NAME                 EMAIL
----------- ------------------------- -------------------------
        202 Fay                       PFAY

SQL&gt; INSERT INTO employees (employee_id, last_name, email, hire_date, job_id)    
  1  VALUES (999,'Fay','PFAY',SYSDATE,'ST_CLERK');
.
.
.
ERROR at line 1:
ORA-00001: unique constraint (HR.EMP_EMAIL_UK) violated
</pre></div>
<!-- class="example" -->
<p><a id="sthref627"></a>Unless a <code dir="ltr">NOT NULL</code> constraint is also defined, a null always satisfies a unique key constraint. Thus, columns with both unique key constraints and <code dir="ltr">NOT NULL</code> constraints are typical. This combination forces the user to enter values in the unique key and eliminates the possibility that new row data conflicts with existing row data.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<a id="sthref628"></a><a id="sthref629"></a>Because of the search mechanism for unique key constraints on multiple columns, you cannot have identical values in the non-null columns of a partially null composite unique key constraint.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="indexiot.htm#CHDHCICB">"Unique and Nonunique Indexes"</a></p>
</li>
<li>
<p><a class="olink TDDDG192" href="../../appdev.112/e10766/tdddg_objects.htm#TDDDG192"><span class="italic">Oracle Database 2 Day Developer's Guide</span></a> for examples of adding <code dir="ltr">UNIQUE</code> constraints to a table</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDDBJBB"></a>
<div id="CNCPT1646" class="sect2">
<h3 class="sect2">Primary Key Constraints</h3>
<p><a id="sthref630"></a><a id="sthref631"></a>In a <span class="bold">primary key constraint</span>, the values in the group of one or more columns subject to the constraint uniquely identify the row. Each table can have one <span class="bold">primary key</span>, which in effect names the row and ensures that no duplicate rows exist.</p>
<p>A primary key can be natural or a surrogate. <a id="sthref632"></a><a id="sthref633"></a>A <span class="bold">natural key</span> is a meaningful identifier made of existing attributes in a table. For example, a natural key could be a postal code in a lookup table. In contrast, <a id="sthref634"></a><a id="sthref635"></a>a <span class="bold">surrogate key</span> is a system-generated incrementing identifier that ensures uniqueness within a table. Typically, surrogate keys are generated by a <a id="sthref636"></a><a href="glossary.htm#i996746"><span class="xrefglossterm">sequence</span></a>.</p>
<p>The Oracle Database implementation of the primary key constraint guarantees that the following statements are true:</p>
<ul>
<li>
<p>No two rows have duplicate values in the specified column or set of columns.</p>
</li>
<li>
<p>The primary key columns do not allow nulls.</p>
</li>
</ul>
<p>A typical situation calling for a primary key is the numeric identifier for an employee. Each employee must have a unique ID. A employee must be described by one and only one row in the <code dir="ltr">employees</code> table.</p>
<p><a href="#CHDJJAJA">Example 5-1</a> indicates that an existing employee has the employee ID of 202, where the employee ID is the primary key. The following example shows an attempt to add an employee with the same employee ID and an employee with no ID:</p>
<pre dir="ltr">
SQL&gt; INSERT INTO employees (employee_id, last_name, email, hire_date, job_id)    
  1  VALUES (202,'Chan','ICHAN',SYSDATE,'ST_CLERK');
.
.
.
ERROR at line 1:
ORA-00001: unique constraint (HR.EMP_EMP_ID_PK) violated

SQL&gt; INSERT INTO employees (last_name) VALUES ('Chan');
.
.
.
ERROR at line 1:
ORA-01400: cannot insert NULL into ("HR"."EMPLOYEES"."EMPLOYEE_ID")
</pre>
<p><a id="sthref637"></a><a id="sthref638"></a><a id="sthref639"></a><a id="sthref640"></a><a id="sthref641"></a>The database enforces primary key constraints with an <a href="glossary.htm#i432409"><span class="xrefglossterm">index</span></a>. Usually, a primary key constraint created for a column implicitly creates a unique index and a <code dir="ltr">NOT NULL</code> constraint. Note the following exceptions to this rule:</p>
<ul>
<li>
<p>In some cases, as when you create a primary key with a <a id="sthref642"></a><a id="sthref643"></a><a href="glossary.htm#CHDIBAAA"><span class="xrefglossterm">deferrable constraint</span></a>, the generated index is not unique.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can explicitly create a unique index with <a id="sthref644"></a>the <code dir="ltr">CREATE UNIQUE INDEX</code> statement.</div>
</li>
<li>
<p>If a usable index exists when a primary key constraint is created, then the constraint reuses this index and does not implicitly create a new one.</p>
</li>
</ul>
<p>By default the name of the implicitly created index is the name of the primary key constraint. You can also specify a user-defined name for an index. You can specify storage options for the index by including the <code dir="ltr">ENABLE</code> clause in the <code dir="ltr">CREATE TABLE</code> or <code dir="ltr">ALTER TABLE</code> statement used to create the constraint.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink TDDDG193" href="../../appdev.112/e10766/tdddg_objects.htm#TDDDG193"><span class="italic">Oracle Database 2 Day Developer's Guide</span></a> and <a class="olink ADFNS00607" href="../../appdev.112/e41502/adfns_constraints.htm#ADFNS00607"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> to learn how to add primary key constraints to a table</div>
</div>
<!-- class="sect2" -->
<a id="CHDIIGBG"></a>
<div id="CNCPT1649" class="sect2">
<h3 class="sect2">Foreign Key Constraints</h3>
<p><a id="sthref645"></a><a id="sthref646"></a>Whenever two tables contain one or more common columns, Oracle Database can enforce the relationship between the two tables through a <span class="bold">foreign key constraint</span>, also called a <span class="bold">referential integrity constraint</span>. The constraint requires that for each value in the column on which the constraint is defined, the value in the other specified other table and column must match. An example of a referential integrity rule is an employee can work for only an existing department.</p>
<p><a href="#BABHECEH">Table 5-2</a> lists terms associated with referential integrity constraints.</p>
<div id="CNCPT88886" class="tblhruleformal">
<p class="titleintable"><a id="sthref647"></a><a id="BABHECEH"></a>Table 5-2 Referential Integrity Constraint Terms</p>
<table class="cellalignment1460" title="Referential Integrity Constraint Terms" summary="This table lists terms associated with referential integrity constraints." dir="ltr">
<thead>
<tr class="cellalignment1449">
<th class="cellalignment1459" id="r1c1-t12">Term</th>
<th class="cellalignment1459" id="r1c2-t12">Definition</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r2c1-t12" headers="r1c1-t12">
<p>Foreign key</p>
</td>
<td class="cellalignment1455" headers="r2c1-t12 r1c2-t12">
<p><a id="sthref648"></a><a id="sthref649"></a>The column or set of columns included in the definition of the constraint that reference a referenced key. For example, the <code dir="ltr">department_id</code> column in <code dir="ltr">employees</code> is a foreign key that references the <code dir="ltr">department_id</code> column in <code dir="ltr">departments</code>.</p>
<p>Foreign keys may be defined as multiple columns. However, <a id="sthref650"></a>a <span class="bold">composite foreign key</span> must reference a composite primary or unique key with the same number of columns and the same data types.</p>
<p>The value of foreign keys can match either the referenced primary or unique key value, or be null. If any column of a composite foreign key is null, then the non-null portions of the key do not have to match any corresponding portion of a parent key.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r3c1-t12" headers="r1c1-t12">
<p>Referenced key</p>
</td>
<td class="cellalignment1455" headers="r3c1-t12 r1c2-t12">
<p><a id="sthref651"></a><a id="sthref652"></a>The unique key or primary key of the table referenced by a foreign key. For example, the <code dir="ltr">department_id</code> column in <code dir="ltr">departments</code> is the referenced key for the <code dir="ltr">department_id</code> column in <code dir="ltr">employees</code>.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r4c1-t12" headers="r1c1-t12">
<p>Dependent or child table</p>
</td>
<td class="cellalignment1455" headers="r4c1-t12 r1c2-t12">
<p>The table that includes the foreign key. This table is dependent on the values present in the referenced unique or primary key. For example, the <code dir="ltr">employees</code> table is a child of <code dir="ltr">departments</code>.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r5c1-t12" headers="r1c1-t12">
<p>Referenced or parent table</p>
</td>
<td class="cellalignment1455" headers="r5c1-t12 r1c2-t12">
<p>The table that is referenced by the foreign key of the child table. It is this table's referenced key that determines whether specific inserts or updates are allowed in the child table. For example, the <code dir="ltr">departments</code> table is a parent of <code dir="ltr">employees</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p><a href="#i3773">Figure 5-1</a> shows a foreign key on the <code dir="ltr">employees.department_id</code> column. It guarantees that every value in this column must match a value in the <code dir="ltr">departments.department_id</code> column. Thus, no erroneous department numbers can exist in the <code dir="ltr">employees.department_id</code> column.</p>
<div id="CNCPT88887" class="figure">
<p class="titleinfigure"><a id="i3773"></a>Figure 5-1 Referential Integrity Constraints</p>
<img width="668" height="666" src="img/cncpt056.gif" alt="Description of Figure 5-1 follows" /><br />
<a id="sthref653" href="img_text/cncpt056.htm">Description of "Figure 5-1 Referential Integrity Constraints"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink TDDDG195" href="../../appdev.112/e10766/tdddg_objects.htm#TDDDG195"><span class="italic">Oracle Database 2 Day Developer's Guide</span></a> and <a class="olink ADFNS00611" href="../../appdev.112/e41502/adfns_constraints.htm#ADFNS00611"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> to learn how to add foreign key constraints to a table</div>
<div id="CNCPT1650" class="sect3"><a id="sthref654"></a>
<h4 class="sect3">Self-Referential Integrity Constraints</h4>
<p><a href="#i3776">Figure 5-2</a> shows <a id="sthref655"></a><a id="sthref656"></a>a <span class="bold">self-referential integrity constraint</span>. In this case, a foreign key references a parent key in the same table.</p>
<p>In <a href="#i3776">Figure 5-2</a>, the referential integrity constraint ensures that every value in the <code dir="ltr">employees.manager_id</code> column corresponds to an existing value in the <code dir="ltr">employees.employee_id</code> column. For example, the manager for employee 102 must exist in the <code dir="ltr">employees</code> table. This constraint eliminates the possibility of erroneous employee numbers in the <code dir="ltr">manager_id</code> column.</p>
<div id="CNCPT88888" class="figure">
<p class="titleinfigure"><a id="i3776"></a>Figure 5-2 Single Table Referential Constraints</p>
<img width="668" height="380" src="img/cncpt057.gif" alt="Description of Figure 5-2 follows" /><br />
<a id="sthref657" href="img_text/cncpt057.htm">Description of "Figure 5-2 Single Table Referential Constraints"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<div id="CNCPT33335" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref658"></a>
<h4 class="sect3">Nulls and Foreign Keys</h4>
<p><a id="sthref659"></a>The relational model permits the value of foreign keys to match either the referenced primary or unique key value, or be null. For example, a user could insert a row into <code dir="ltr">hr.employees</code> without specifying a department ID.</p>
<p>If any column of a composite foreign key is null, then the non-null portions of the key do not have to match any corresponding portion of a parent key.</p>
</div>
<!-- class="sect3" -->
<div id="CNCPT33336" class="sect3"><a id="sthref660"></a>
<h4 class="sect3">Parent Key Modifications and Foreign Keys</h4>
<p>The relationship between foreign key and parent key has implications for deletion of parent keys. For example, if a user attempts to delete the record for this department, then what happens to the records for employees in this department?</p>
<p>When a parent key is modified<a id="sthref661"></a><a id="sthref662"></a><a id="sthref663"></a><a id="sthref664"></a>, referential integrity constraints can specify the following actions to be performed on dependent rows in a child table:</p>
<ul>
<li>
<p>No action on deletion or update</p>
<p>In the normal case, users cannot modify referenced key values if the results would violate referential integrity. For example, if <code dir="ltr">employees.department_id</code> is a foreign key to <code dir="ltr">departments</code>, and if employees belong to a particular department, then an attempt to delete the row for this department violates the constraint.</p>
</li>
<li>
<p>Cascading deletions</p>
<p><a id="sthref665"></a><a id="sthref666"></a>A deletion <span class="bold">cascades</span> (<code dir="ltr">DELETE CASCADE</code>) when rows containing referenced key values are deleted, causing all rows in child tables with dependent foreign key values to also be deleted. For example, the deletion of a row in <code dir="ltr">departments</code> causes rows for all employees in this department to be deleted.</p>
</li>
<li>
<p>Deletions that set null</p>
<p>A deletion <span class="bold">sets null</span> (<code dir="ltr">DELETE SET NULL</code>) when rows containing referenced key values are deleted, causing all rows in child tables with dependent foreign key values to set those values to null. For example, the deletion of a department row sets the <code dir="ltr">department_id</code> column value to null for employees in this department.</p>
</li>
</ul>
<p><a href="#g14265">Table 5-3</a> outlines the <a id="sthref667"></a>DML statements allowed by the different referential actions on the key values in the parent table, and the foreign key values in the child table.</p>
<div id="CNCPT88889" class="tblformal">
<p class="titleintable"><a id="sthref668"></a><a id="g14265"></a>Table 5-3 DML Statements Allowed by Update and Delete No Action</p>
<table class="cellalignment1458" title="DML Statements Allowed by Update and Delete No Action" summary="DML Statements Allowed by Update and Delete No Action" dir="ltr">
<thead>
<tr class="cellalignment1449">
<th class="cellalignment1459" id="r1c1-t14">DML Statement</th>
<th class="cellalignment1459" id="r1c2-t14">Issued Against Parent Table</th>
<th class="cellalignment1459" id="r1c3-t14">Issued Against Child Table</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r2c1-t14" headers="r1c1-t14">
<p><code dir="ltr">INSERT</code></p>
</td>
<td class="cellalignment1455" headers="r2c1-t14 r1c2-t14">
<p>Always OK if the parent key value is unique</p>
</td>
<td class="cellalignment1455" headers="r2c1-t14 r1c3-t14">
<p>OK only if the foreign key value exists in the parent key or is partially or all null</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r3c1-t14" headers="r1c1-t14">
<p><code dir="ltr">UPDATE NO</code> <code dir="ltr">ACTION</code></p>
</td>
<td class="cellalignment1455" headers="r3c1-t14 r1c2-t14">
<p>Allowed if the statement does not leave any rows in the child table without a referenced parent key value</p>
</td>
<td class="cellalignment1455" headers="r3c1-t14 r1c3-t14">
<p>Allowed if the new foreign key value still references a referenced key value</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r4c1-t14" headers="r1c1-t14">
<p><code dir="ltr">DELETE NO</code> <code dir="ltr">ACTION</code></p>
</td>
<td class="cellalignment1455" headers="r4c1-t14 r1c2-t14">
<p>Allowed if no rows in the child table reference the parent key value</p>
</td>
<td class="cellalignment1455" headers="r4c1-t14 r1c3-t14">
<p>Always OK</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r5c1-t14" headers="r1c1-t14">
<p><code dir="ltr">DELETE CASCADE</code></p>
</td>
<td class="cellalignment1455" headers="r5c1-t14 r1c2-t14">
<p>Always OK</p>
</td>
<td class="cellalignment1455" headers="r5c1-t14 r1c3-t14">
<p>Always OK</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r6c1-t14" headers="r1c1-t14">
<p><code dir="ltr">DELETE SET</code> <code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment1455" headers="r6c1-t14 r1c2-t14">
<p>Always OK</p>
</td>
<td class="cellalignment1455" headers="r6c1-t14 r1c3-t14">
<p>Always OK</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Other referential actions not supported by <code dir="ltr">FOREIGN KEY</code> integrity constraints of Oracle Database can be enforced using database triggers. See <a href="srvrside.htm#i13313">"Overview of Triggers"</a>.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF52202" href="../../server.112/e41084/clauses002.htm#SQLRF52202"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn about the <code dir="ltr">ON DELETE</code> clause</div>
</div>
<!-- class="sect3" -->
<div id="CNCPT1657" class="sect3"><a id="sthref669"></a>
<h4 class="sect3">Indexes and Foreign Keys</h4>
<p>As a general rule, Oracle recommends indexing foreign keys in heap-organized tables. An exception for nonpartitioned tables is when the matching unique or primary key is never updated or deleted.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Additional considerations apply to non-heap data structures such as index-organized tables and table clusters.</div>
<p>Indexing the foreign keys in child tables provides the following benefits:</p>
<ul>
<li>
<p>Prevents a full table lock on the child table. Instead, the database acquires a row lock on the index.</p>
</li>
<li>
<p>Removes the need for a <a id="sthref670"></a><a id="sthref671"></a><a href="glossary.htm#CHDCGIFF"><span class="xrefglossterm">full table scan</span></a> of the child table. As an illustration, assume that a user removes the record for department 10 from the <code dir="ltr">departments</code> table. If <code dir="ltr">employees.department_id</code> is not indexed, then the database must scan <code dir="ltr">employees</code> to determine whether any employees exist in department 10.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="consist.htm#BABCAHDJ">"Locks and Foreign Keys"</a> and <a href="indexiot.htm#i5671">"Overview of Indexes"</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDGBFBJ"></a>
<div id="CNCPT1660" class="sect2">
<h3 class="sect2">Check Constraints</h3>
<p><a id="sthref672"></a><a id="sthref673"></a><a id="sthref674"></a>A <span class="bold">check constraint</span> on a column or set of columns requires that a specified <a href="glossary.htm#CHDJFAAI"><span class="xrefglossterm">condition</span></a> be true or unknown for every row. If DML results in the condition of the constraint evaluating to false, then the SQL statement is rolled back.</p>
<p>The chief benefit of check constraints is the ability to enforce very specific integrity rules. For example, you could use check constraints to enforce the following rules in the <code dir="ltr">hr.employees</code> table:</p>
<ul>
<li>
<p>The <code dir="ltr">salary</code> column must not have a value greater than 10000.</p>
</li>
<li>
<p>The <code dir="ltr">commission</code> column must have a value that is not greater than the salary.</p>
</li>
</ul>
<p>The following example creates a maximum salary constraint on <code dir="ltr">employees</code> and demonstrates what happens when a statement attempts to insert a row containing a salary that exceeds the maximum:</p>
<pre dir="ltr">
SQL&gt; ALTER TABLE employees ADD CONSTRAINT max_emp_sal CHECK (salary &lt; 10001);
SQL&gt; INSERT INTO employees (employee_id,last_name,email,hire_date,job_id,salary)
  1  VALUES (999,'Green','BGREEN',SYSDATE,'ST_CLERK',20000);
.
.
.
ERROR at line 1:
ORA-02290: check constraint (HR.MAX_EMP_SAL) violated
</pre>
<p>A single column can have multiple check constraints that reference the column in its definition. For example, the <code dir="ltr">salary</code> column could have one constraint that prevents values over 10000 and a separate constraint that prevents values less than 500.</p>
<p>If multiple check constraints exist for a column, then you must design them so that their aims do not conflict. No order of evaluation of the conditions can be assumed. The database does not verify that check conditions are not mutually exclusive.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF52204" href="../../server.112/e41084/clauses002.htm#SQLRF52204"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn about restrictions for check constraints</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDJCHEI"></a>
<div id="CNCPT33337" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">States of Integrity Constraints</h2>
<p>As part of constraint definition, you can specify how and when Oracle Database should enforce the constraint, thereby determining <a id="sthref675"></a>the <span class="bold">constraint state</span>.</p>
<div id="CNCPT33339" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref676"></a>
<h3 class="sect2">Checks for Modified and Existing Data</h3>
<p><a id="sthref677"></a>The database enables you to specify whether a constraint applies to existing data or future data. If a constraint is <span class="bold">enabled</span>, then the database checks new data as it is entered or updated. Data that does not conform to the constraint cannot enter the database. For example, enabling a <code dir="ltr">NOT NULL</code> constraint on <code dir="ltr">employees.department_id</code> guarantees that every future row has a department ID. If a constraint is <span class="bold">disabled</span>, then the table can contain rows that violate the constraint.</p>
<p><a id="sthref678"></a>You can set constraints to <span class="bold">validate</span> (<code dir="ltr">VALIDATE</code>) or not validate (<code dir="ltr">NOVALIDATE</code>) existing data. If <code dir="ltr">VALIDATE</code> is specified, then existing data must conform to the constraint. For example, enabling a <code dir="ltr">NOT NULL</code> constraint on <code dir="ltr">employees.department_id</code> and setting it to <code dir="ltr">VALIDATE</code> checks that every existing row has a department ID. If <code dir="ltr">NOVALIDATE</code> is specified, then existing data need not conform to the constraint.</p>
<p>The behavior of <code dir="ltr">VALIDATE</code> and <code dir="ltr">NOVALIDATE</code> always depends on whether the constraint is enabled or disabled. <a href="#CHDEAFJA">Table 5-4</a> summarizes the relationships.</p>
<div id="CNCPT88890" class="tblruleformal">
<p class="titleintable"><a id="sthref679"></a><a id="CHDEAFJA"></a>Table 5-4 Checks on Modified and Existing Data</p>
<table class="cellalignment1460" title="Checks on Modified and Existing Data" summary="Checks on Modified and Existing Data" dir="ltr">
<thead>
<tr class="cellalignment1449">
<th class="cellalignment1459" id="r1c1-t20">Modified Data</th>
<th class="cellalignment1459" id="r1c2-t20">Existing Data</th>
<th class="cellalignment1459" id="r1c3-t20">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r2c1-t20" headers="r1c1-t20">
<p><code dir="ltr">ENABLE</code></p>
</td>
<td class="cellalignment1455" headers="r2c1-t20 r1c2-t20">
<p><code dir="ltr">VALIDATE</code></p>
</td>
<td class="cellalignment1455" headers="r2c1-t20 r1c3-t20">
<p>Existing and future data must obey the constraint. An attempt to apply a new constraint to a populated table results in an error if existing rows violate the constraint.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r3c1-t20" headers="r1c1-t20">
<p><code dir="ltr">ENABLE</code></p>
</td>
<td class="cellalignment1455" headers="r3c1-t20 r1c2-t20">
<p><code dir="ltr">NOVALIDATE</code></p>
</td>
<td class="cellalignment1455" headers="r3c1-t20 r1c3-t20">
<p>The database checks the constraint, but it need not be true for all rows. Thus, existing rows can violate the constraint, but new or modified rows must conform to the rules.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r4c1-t20" headers="r1c1-t20">
<p><code dir="ltr">DISABLE</code></p>
</td>
<td class="cellalignment1455" headers="r4c1-t20 r1c2-t20">
<p><code dir="ltr">VALIDATE</code></p>
</td>
<td class="cellalignment1455" headers="r4c1-t20 r1c3-t20">
<p>The database disables the constraint, drops its index, and prevents modification of the constrained columns.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r5c1-t20" headers="r1c1-t20">
<p><code dir="ltr">DISABLE</code></p>
</td>
<td class="cellalignment1455" headers="r5c1-t20 r1c2-t20">
<p><code dir="ltr">NOVALIDATE</code></p>
</td>
<td class="cellalignment1455" headers="r5c1-t20 r1c3-t20">
<p>The constraint is not checked and is not necessarily true.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF52214" href="../../server.112/e41084/clauses002.htm#SQLRF52214"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn about constraint states</div>
</div>
<!-- class="sect2" -->
<a id="CHDIECJG"></a>
<div id="CNCPT522" class="sect2">
<h3 class="sect2">Deferrable Constraints</h3>
<p>Every constraint is either in a <span class="bold">not deferrable</span> (default) or <span class="bold">deferrable</span> state. This state determines when Oracle Database checks the constraint for validity. The following graphic depicts the options for deferrable constraints.</p>
<img width="399" height="152" src="img/cncpt313.gif" alt="Description of cncpt313.gif follows" /><br />
<a id="sthref680" href="img_text/cncpt313.htm">Description of the illustration cncpt313.gif</a><br />
<br />
<div id="CNCPT88891" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref681"></a>
<h4 class="sect3">Nondeferrable Constraints</h4>
<p>If a constraint is not deferrable, then Oracle Database never defers the validity check of the constraint to the end of the transaction. Instead, the database checks the constraint at the end of each statement. If the constraint is violated, then the statement rolls back.</p>
<p>For example, assume that you create a nondeferrable <code dir="ltr">NOT NULL</code> constraint for the <code dir="ltr">employees.last_name</code> column. If a user attempts to insert a row with no last name, then the database immediately rolls back the statement because the <code dir="ltr">NOT NULL</code> constraint is violated. No row is inserted.</p>
</div>
<!-- class="sect3" -->
<div id="CNCPT88892" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref682"></a>
<h4 class="sect3">Deferrable Constraints</h4>
<p><a id="sthref683"></a>A <a href="glossary.htm#CHDIBAAA"><span class="xrefglossterm">deferrable constraint</span></a> permits a transaction to use the <code dir="ltr">SET CONSTRAINT</code> clause to defer checking of this constraint until a <code dir="ltr">COMMIT</code> statement is issued. If you make changes to the database that might violate the constraint, then this setting effectively lets you disable the constraint until all the changes are complete.</p>
<p><a id="sthref684"></a>You can set the default behavior for when the database checks the deferrable constraint. You can specify either of the following attributes:</p>
<ul>
<li>
<p><code dir="ltr">INITIALLY IMMEDIATE</code></p>
<p>The database checks the constraint immediately after each statement executes. If the constraint is violated, then the database rolls back the statement.</p>
</li>
<li>
<p><code dir="ltr">INITIALLY DEFERRED</code></p>
<p>The database checks the constraint when a <code dir="ltr">COMMIT</code> is issued. If the constraint is violated, then the database rolls back the transaction.</p>
</li>
</ul>
<p>Assume that a deferrable <code dir="ltr">NOT NULL</code> constraint on <code dir="ltr">employees.last_name</code> is set to <code dir="ltr">INITIALLY DEFERRED</code>. A user creates a transaction with 100 <code dir="ltr">INSERT</code> statements, some of which have null values for <code dir="ltr">last_name</code>. When the user attempts to commit, the database rolls back all 100 statements. However, if this constraint were set to <code dir="ltr">INITIALLY IMMEDIATE</code>, then the database would not roll back the transaction.</p>
<p>If a constraint causes an action, then the database considers this action as part of the statement that caused it, whether the constraint is deferred or immediate. For example, deleting a row in <code dir="ltr">departments</code> causes the deletion of all rows in <code dir="ltr">employees</code> that reference the deleted department row. In this case, the deletion from <code dir="ltr">employees</code> is considered part of the <code dir="ltr">DELETE</code> statement executed against <code dir="ltr">departments</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF52216" href="../../server.112/e41084/clauses002.htm#SQLRF52216"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about constraint attributes and their default values</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDEEIHA"></a>
<div id="CNCPT422" class="sect2">
<h3 class="sect2">Examples of Constraint Checking</h3>
<p><a id="sthref685"></a><a id="sthref686"></a><a id="sthref687"></a>Some examples may help illustrate when Oracle Database performs the checking of constraints. Assume the following:</p>
<ul>
<li>
<p>The <code dir="ltr">employees</code> table has the structure shown in <a href="#i3776">Figure 5-2</a>.</p>
</li>
<li>
<p>The self-referential constraint makes entries in the <code dir="ltr">manager_id</code> column dependent on the values of the <code dir="ltr">employee_id</code> column.</p>
</li>
</ul>
<div id="CNCPT33341" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref688"></a>
<h4 class="sect3">Insertion of a Value in a Foreign Key Column When No Parent Key Value Exists</h4>
<p>Consider the insertion of the first row into the <code dir="ltr">employees</code> table. No rows currently exist, so how can a row be entered if the value in the <code dir="ltr">manager_id</code> column cannot reference any existing value in the <code dir="ltr">employee_id</code> column? Some possibilities are:</p>
<ul>
<li>
<p>A null can be entered for the <code dir="ltr">manager_id</code> column of the first row, if the <code dir="ltr">manager_id</code> column does not have a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint defined on&nbsp;it.</p>
<p>Because nulls are allowed in foreign keys, this row is inserted into the table.</p>
</li>
<li>
<p>The same value can be entered in the <code dir="ltr">employee_id</code> and <code dir="ltr">manager_id</code> columns, specifying that the employee is his or her own manager.</p>
<p>This case reveals that Oracle Database performs its constraint checking <span class="italic">after</span> the statement has been completely run. To allow a row to be entered with the same values in the parent key and the foreign key, the database must first run the statement (that is, insert the new row) and then determine whether any row in the table has an <code dir="ltr">employee_id</code> that corresponds to the <code dir="ltr">manager_id</code> of the new row.</p>
</li>
<li>
<p>A multiple row <code dir="ltr">INSERT</code> statement, such as an <code dir="ltr">INSERT</code> statement with nested <code dir="ltr">SELECT</code> statement, can insert rows that reference one another.</p>
<p>For example, the first row might have 200 for employee ID and 300 for manager ID, while the second row has 300 for employee ID and 200 for manager. Constraint checking is deferred until the complete execution of the statement. All rows are inserted first, and then all rows are checked for constraint violations.</p>
</li>
</ul>
<p><a id="sthref689"></a><a id="sthref690"></a>Default values are included as part of an <code dir="ltr">INSERT</code> statement before the statement is parsed. Thus, default column values are subject to all integrity constraint checking.</p>
</div>
<!-- class="sect3" -->
<div id="CNCPT33342" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref691"></a>
<h4 class="sect3">An Update of All Foreign Key and Parent Key Values</h4>
<p>Consider the same self-referential integrity constraint in a different scenario. The company has been sold. Because of this sale, all employee numbers must be updated to be the current value plus 5000 to coordinate with the employee numbers of the new company. Because manager numbers are really employee numbers (see <a href="#i3782">Figure 5-3</a>), the manager numbers must also increase by 5000.</p>
<div id="CNCPT88893" class="figure">
<p class="titleinfigure"><a id="i3782"></a>Figure 5-3 The employees Table Before Updates</p>
<img width="206" height="98" src="img/cncpt058.gif" alt="Description of Figure 5-3 follows" /><br />
<a id="sthref692" href="img_text/cncpt058.htm">Description of "Figure 5-3 The employees Table Before Updates"</a><br />
<br /></div>
<!-- class="figure" -->
<p>You could execute the following SQL statement to update the values:</p>
<pre dir="ltr">
UPDATE employees SET employee_id = employee_id + 5000,
  manager_id = manager_id + 5000;
</pre>
<p>Although a constraint is defined to verify that each <code dir="ltr">manager_id</code> value matches an <code dir="ltr">employee_id</code> value, the preceding statement is legal because the database effectively checks constraints after the statement completes. <a href="#i3784">Figure 5-4</a> shows that the database performs the actions of the entire SQL statement before checking constraints.</p>
<div id="CNCPT88894" class="figure">
<p class="titleinfigure"><a id="i3784"></a>Figure 5-4 Constraint Checking</p>
<img width="668" height="137" src="img/cncpt059.gif" alt="Description of Figure 5-4 follows" /><br />
<a id="sthref693" href="img_text/cncpt059.htm">Description of "Figure 5-4 Constraint Checking"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The examples in this section illustrate the constraint checking mechanism during <code dir="ltr">INSERT</code> and <code dir="ltr">UPDATE</code> statements, but the database uses the same mechanism for all types of DML statements. The same mechanism is used for all types of constraints, not just self-referential constraints.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<a id="sthref694"></a><a id="sthref695"></a>Operations on a <a href="glossary.htm#i432872"><span class="xrefglossterm">view</span></a> or <a href="glossary.htm#i996759"><span class="xrefglossterm">synonym</span></a> are subject to the integrity constraints defined on the base tables.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1448">
<tr>
<td class="cellalignment1455">
<table class="cellalignment1453">
<tr>
<td class="cellalignment1452"><a href="schemaob.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1452"><a href="datadict.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1457">
<table class="cellalignment1451">
<tr>
<td class="cellalignment1452"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1452"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1452"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1452"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1452"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1452"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
