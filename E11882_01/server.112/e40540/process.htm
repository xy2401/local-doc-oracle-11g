<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Process Architecture</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1056" />
<meta name="dcterms.created" content="2015-05-25T13:34:5Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Concepts" />
<meta name="dcterms.identifier" content="E40540-04" />
<meta name="dcterms.isVersionOf" content="CNCPT" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="memory.htm" title="Previous" type="text/html" />
<link rel="Next" href="dist_pro.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e40540.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">23/30</span> <!-- End Header -->
<div id="CNCPT008" class="chapter"><a id="i16977"></a>
<h1 class="chapter"><span class="secnum">15</span> Process Architecture</h1>
<p><a id="sthref1803"></a><a id="sthref1804"></a><a id="sthref1805"></a>This chapter discusses the processes in an Oracle database.</p>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#i7241">Introduction to Processes</a></p>
</li>
<li>
<p><a href="#i7265">Overview of Client Processes</a></p>
</li>
<li>
<p><a href="#BABGAGIB">Overview of Server Processes</a></p>
</li>
<li>
<p><a href="#BABIDJJA">Overview of Background Processes</a></p>
</li>
</ul>
<a id="i7241"></a>
<div id="CNCPT901" class="sect1">
<h2 class="sect1">Introduction to Processes</h2>
<p><a id="CNCPT903"></a>A <a href="glossary.htm#CBAJIHIJ"><span class="xrefglossterm">process</span></a> is a mechanism in an operating system that can run a series of steps. The mechanism depends on the operating system. For example, on Linux an Oracle background process is a Linux process. On Windows, an Oracle background process is a thread of execution within a process.</p>
<p>Code modules are run by processes. <a id="sthref1806"></a><a id="sthref1807"></a><a id="sthref1808"></a><a id="sthref1809"></a><a id="sthref1810"></a><a id="sthref1811"></a>All connected Oracle Database users must run the following modules to access a database <a href="glossary.htm#CBAFGFCJ"><span class="xrefglossterm">instance</span></a>:</p>
<ul>
<li>
<p>Application or Oracle Database utility</p>
<p>A database user runs a database application, such as a <a href="glossary.htm#CHDHFAFC"><span class="xrefglossterm">precompiler</span></a> program or a database tool such as SQL*Plus, that issues SQL statements to a database.</p>
</li>
<li>
<p>Oracle database code</p>
<p>Each user has Oracle database code executing on his or her behalf that interprets and processes the application's SQL statements.</p>
</li>
</ul>
<p>A process normally runs in its own private memory area. Most processes can periodically write to an associated <span class="bold">trace file</span> (see <a href="startup.htm#i21745">"Trace Files"</a>).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="cncptdba.htm#CHDFEAEB">"Tools for Database Administrators"</a> and <a href="cncptdev.htm#CHDCDEBH">"Tools for Database Developers"</a></div>
<a id="i16690"></a>
<div id="CNCPT1245" class="sect2">
<h3 class="sect2">Multiple-Process Oracle Database Systems</h3>
<p><span class="bold"><a id="sthref1812"></a><a id="sthref1813"></a><a id="sthref1814"></a><a id="sthref1815"></a><a id="sthref1816"></a>Multiple-process Oracle</span> (also called <span class="bold">multiuser Oracle</span>) uses several processes to run different parts of the Oracle Database code and additional processes for the users&mdash;either one process for each connected user or one or more processes shared by multiple users. Most databases are multiuser because a primary advantages of a database is managing data needed by multiple users simultaneously.</p>
<p>Each process in a database instance performs a specific job. By dividing the work of the database and applications into several processes, multiple users and applications can connect to an instance simultaneously while the system gives good performance.</p>
</div>
<!-- class="sect2" -->
<a id="i16695"></a>
<div id="CNCPT1246" class="sect2">
<h3 class="sect2">Types of Processes</h3>
<p>A database instance contains or interacts with the following types of processes:</p>
<ul>
<li>
<p><span class="bold">Client processes</span> run the application or Oracle tool code.</p>
</li>
<li>
<p><span class="bold">Oracle processes</span> run the Oracle database code. Oracle processes including the following subtypes:</p>
<ul>
<li>
<p><span class="bold">Background processes</span> start with the database instance and perform maintenance tasks such as performing <a href="glossary.htm#CHDIAJFJ"><span class="xrefglossterm">instance recovery</span></a>, cleaning up processes, writing redo buffers to disk, and so on.</p>
</li>
<li>
<p><span class="bold">Server processes</span> perform work based on a client request.</p>
<p>For example, these processes parse SQL queries, place them in the <a href="glossary.htm#CBAIACIC"><span class="xrefglossterm">shared pool</span></a>, create and execute a <a href="glossary.htm#CHDICHFA"><span class="xrefglossterm">query plan</span></a> for each <a href="glossary.htm#CHDGABIG"><span class="xrefglossterm">query</span></a>, and read buffers from the <a href="glossary.htm#BGBHGEDC"><span class="xrefglossterm">database buffer cache</span></a> or from disk.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Server processes, and the process memory allocated in these processes, run in the instance. The instance continues to function when server processes terminate.</div>
</li>
<li>
<p><span class="bold">Slave processes</span> perform additional tasks for a background or server process.</p>
</li>
</ul>
</li>
</ul>
<p>The process structure varies depending on the operating system and the choice of Oracle Database options. For example, the code for connected users can be configured for <a href="glossary.htm#CBAIBCHE"><span class="xrefglossterm">dedicated server</span></a> or <a href="glossary.htm#CBAGDHDC"><span class="xrefglossterm">shared server</span></a> connections. In a shared server architecture, each server process t<a id="sthref1817"></a><a id="sthref1818"></a>hat runs database code can serve multiple client processes.</p>
<p><a href="#BABHJDHD">Figure 15-1</a> shows a <a href="glossary.htm#CBAICBIA"><span class="xrefglossterm">system global area (SGA)</span></a> and background processes using dedicated server connections. For each user connection, the application is run by a <a href="glossary.htm#CBADEIIA"><span class="xrefglossterm">client process</span></a> that is different from the dedicated server process that runs the database code. Each client process is associated with its own server process, which has its own <a href="glossary.htm#CHDCHGAJ"><span class="xrefglossterm">program global area (PGA)</span></a>.</p>
<div id="CNCPT89079" class="figure">
<p class="titleinfigure"><a id="BABHJDHD"></a>Figure 15-1 Oracle Processes and the SGA</p>
<img width="648" height="611" src="img/cncpt283.gif" alt="Description of Figure 15-1 follows" /><br />
<a id="sthref1819" href="img_text/cncpt283.htm">Description of "Figure 15-1 Oracle Processes and the SGA"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="dist_pro.htm#i16565">"Dedicated Server Architecture"</a> and <a href="dist_pro.htm#i19036">"Shared Server Architecture"</a></p>
</li>
<li>
<p>Your Oracle Database operating system-specific documentation for more details on configuration choices</p>
</li>
<li>
<p><a class="olink REFRN30186" href="../../server.112/e40402/dynviews_2101.htm#REFRN30186"><span class="italic">Oracle Database Reference</span></a> to learn about the <code dir="ltr">V$PROCESS</code> view</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i7265"></a>
<div id="CNCPT902" class="sect1">
<h2 class="sect1">Overview of Client Processes</h2>
<p><a id="sthref1820"></a><a id="sthref1821"></a><a id="sthref1822"></a>When a user runs an application such as a Pro*C program or SQL*Plus, the operating system creates a client process (sometimes called a <span class="bold">user process</span>) to run the user application. The client application has Oracle Database libraries linked into it that provide the APIs required to communicate with the database.</p>
<div id="CNCPT9836" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1823"></a>
<h3 class="sect2">Client and Server Processes</h3>
<p>Client processes differ in important ways from the Oracle processes interacting directly with the instance. The Oracle processes servicing the client process can read from and write to the SGA, whereas the client process cannot. A client process can run on a host other than the database host, whereas Oracle processes cannot.</p>
<p>For example, assume that a user on a client host starts SQL*Plus and connects over the network to database <code dir="ltr">sample</code> on a different host (the database instance is not started):</p>
<pre dir="ltr">
SQL&gt; CONNECT SYS@inst1 AS SYSDBA
Enter password: *********
Connected to an idle instance.
</pre>
<p>On the client host, a search of the processes for either <code dir="ltr">sqlplus</code> or <code dir="ltr">sample</code> shows only the <code dir="ltr">sqlplus</code> client process:</p>
<pre dir="ltr">
% ps -ef | grep -e sample -e sqlplus | grep -v grep
clientuser 29437 29436  0 15:40 pts/1    00:00:00 sqlplus           as sysdba
</pre>
<p>On the database host, a search of the processes for either <code dir="ltr">sqlplus</code> or <code dir="ltr">sample</code> shows a server process with a nonlocal connection, but no client process:</p>
<pre dir="ltr">
% ps -ef | grep -e sample -e sqlplus | grep -v grep
serveruser 29441     1  0 15:40 ?        00:00:00 oraclesample (LOCAL=NO)
</pre></div>
<!-- class="sect2" -->
<a id="i18532"></a>
<div id="CNCPT1247" class="sect2">
<h3 class="sect2">Connections and Sessions</h3>
<p><a id="sthref1824"></a><a id="sthref1825"></a><a id="sthref1826"></a><a id="sthref1827"></a>A <a href="glossary.htm#CBAFHDAD"><span class="xrefglossterm">connection</span></a> is a physical communication pathway between a client process and a database instance. A communication pathway is established using available interprocess communication mechanisms or network software. Typically, a connection occurs between a client process and a server process or dispatcher, but it can also occur between a client process and Oracle Connection Manager (CMAN).</p>
<p><a id="sthref1828"></a><a id="sthref1829"></a><a id="sthref1830"></a><a id="sthref1831"></a>A <a href="glossary.htm#CBAHEBIG"><span class="xrefglossterm">session</span></a> is a logical entity in the database instance memory that represents the state of a current user login to a database. For example, when a user is <a id="sthref1832"></a><a id="sthref1833"></a>authenticated by the database with a password, a session is established for this user. A session lasts from the time the user is authenticated by the database until the time the user disconnects or exits the database application.</p>
<p>A single connection can have 0, 1, or more sessions established on it. The sessions are independent: a commit in one session does not affect <a href="glossary.htm#CHDJEBHA"><span class="xrefglossterm">transactions</span></a> in other sessions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If Oracle Net <a href="glossary.htm#CHDGAAIF"><span class="xrefglossterm">connection pooling</span></a> is configured, then it is possible for a connection to drop but leave the sessions intact.</div>
<p>Multiple sessions can exist concurrently for a single database user. As shown in <a href="#BABDBIJC">Figure 15-2</a>, user <code dir="ltr">hr</code> can have multiple connections to a database. In dedicated server connections, the database creates a server process on behalf of each connection. Only the client process that causes the dedicated server to be created uses it. In a shared server connection, many client processes access a single shared server process.</p>
<div id="CNCPT89080" class="figure">
<p class="titleinfigure"><a id="BABDBIJC"></a>Figure 15-2 One Session for Each Connection</p>
<img width="497" height="300" src="img/cncpt237.gif" alt="Description of Figure 15-2 follows" /><br />
<a id="sthref1834" href="img_text/cncpt237.htm">Description of "Figure 15-2 One Session for Each Connection"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a href="#BABBCEEF">Figure 15-3</a> illustrates a case in which user <code dir="ltr">hr</code> has a single connection to a database, but this connection has two sessions.</p>
<div id="CNCPT89081" class="figure">
<p class="titleinfigure"><a id="BABBCEEF"></a>Figure 15-3 Two Sessions in One Connection</p>
<img width="495" height="182" src="img/cncpt238.gif" alt="Description of Figure 15-3 follows" /><br />
<a id="sthref1835" href="img_text/cncpt238.htm">Description of "Figure 15-3 Two Sessions in One Connection"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Generating an autotrace report of SQL statement execution statistics re-creates the scenario in <a href="#BABBCEEF">Figure 15-3</a>. <a href="#BABCADBG">Example 15-2</a> connects SQL*Plus to the database as user <code dir="ltr">SYSTEM</code> and enables tracing, thus creating a new session (sample output included).</p>
<div id="CNCPT89082" class="example">
<p class="titleinexample"><a id="BABGDIIB"></a>Example 15-1 One Connection with Two Sessions</p>
<pre dir="ltr">
SQL&gt; SELECT SID, SERIAL#, PADDR FROM V$SESSION WHERE USERNAME = USER;

SID SERIAL# PADDR
--- ------- --------
 90      91 3BE2E41C
 
SQL&gt; SET AUTOTRACE ON STATISTICS;
SQL&gt; SELECT SID, SERIAL#, PADDR FROM V$SESSION WHERE USERNAME = USER;
 
SID SERIAL# PADDR
--- ------- --------
 88      93 3BE2E41C
 90      91 3BE2E41C
...
SQL&gt; DISCONNECT
</pre></div>
<!-- class="example" -->
<p>The <code dir="ltr">DISCONNECT</code> command in <a href="#BABGDIIB">Example 15-1</a> actually ends the <span class="italic">sessions</span>, not the connection. Opening a new terminal and connecting to the instance as a different user, the query in <a href="#BABCADBG">Example 15-2</a> shows that the connection from <a href="#BABGDIIB">Example 15-1</a> is still active.</p>
<div id="CNCPT89083" class="example">
<p class="titleinexample"><a id="BABCADBG"></a>Example 15-2 Connection with No Sessions</p>
<pre dir="ltr">
SQL&gt; CONNECT dba1@inst1
Password: ********
Connected.
SQL&gt; SELECT PROGRAM FROM V$PROCESS WHERE ADDR = HEXTORAW('3BE2E41C');

PROGRAM
------------------------------------------------
oracle@stbcs09-1 (TNS V1-V3)
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="dist_pro.htm#i19036">"Shared Server Architecture"</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABGAGIB"></a>
<div id="CNCPT1248" class="sect1">
<h2 class="sect1">Overview of Server Processes</h2>
<p><a id="sthref1836"></a><a id="sthref1837"></a><a id="sthref1838"></a><a id="sthref1839"></a><a id="sthref1840"></a>Oracle Database creates <span class="bold">server processes</span> to handle the requests of client processes connected to the instance. A client process always communicates with a database through a separate server process.</p>
<p>Server processes created on behalf of a database application can perform one or more of the following tasks:</p>
<ul>
<li>
<p>Parse and run SQL statements issued through the application, including creating and executing the <a href="glossary.htm#CHDICHFA"><span class="xrefglossterm">query plan</span></a> (see <a href="sqllangu.htm#CHDDAGAA">"Stages of SQL Processing"</a>)</p>
</li>
<li>
<p>Execute PL/SQL code</p>
</li>
<li>
<p>Read data blocks from data files into the database buffer cache (the DBW<span class="italic">n</span> background process has the task of writing modified blocks back to disk)</p>
</li>
<li>
<p>Return results in such a way that the application can process the information</p>
</li>
</ul>
<div id="CNCPT9838" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1841"></a>
<h3 class="sect2">Dedicated Server Processes</h3>
<p>In dedicated server connections, the client connection is associated with one and only one server process (see <a href="dist_pro.htm#i16565">"Dedicated Server Architecture"</a>). On Linux, 20 client processes connected to a database instance are serviced by 20 server processes.</p>
<p>Each client process communicates directly with its server process. This server process is dedicated to its client process for the duration of the session. The server process stores process-specific information and the <a href="glossary.htm#CHDBAHBB"><span class="xrefglossterm">UGA</span></a> in its PGA (see <a href="memory.htm#BGBBGGHE">"PGA Usage in Dedicated and Shared Server Modes"</a>).</p>
</div>
<!-- class="sect2" -->
<div id="CNCPT9839" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1842"></a>
<h3 class="sect2">Shared Server Processes</h3>
<p>In shared server connections, client applications connect over a network to a <span class="bold">dispatcher process</span>, not a server process (see <a href="dist_pro.htm#i19036">"Shared Server Architecture"</a>). For example, 20 client processes can connect to a single dispatcher process.</p>
<p>The dispatcher process receives requests from connected clients and puts them into a request queue in the <a href="glossary.htm#CHDBFFGF"><span class="xrefglossterm">large pool</span></a> (see <a href="memory.htm#BGBGHJAA">"Large Pool"</a>). The first available shared server process takes the request from the queue and processes it. Afterward, the shared server place the result into the dispatcher response queue. The dispatcher process monitors this queue and transmits the result to the client.</p>
<p>Like a dedicated server process, a shared server process has its own PGA. However, the UGA for a session is in the SGA so that any shared server can access session data.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABIDJJA"></a>
<div id="CNCPT1249" class="sect1">
<h2 class="sect1">Overview of Background Processes</h2>
<p>A multiprocess Oracle database uses some additional processes called <span class="bold">background processes</span><a id="sthref1843"></a><a id="sthref1844"></a>. The background processes perform maintenance tasks required to operate the database and to maximize performance for multiple users.</p>
<p>Each background process has a separate task, but works with the other processes. For example, the LGWR process writes data from the <a href="glossary.htm#CHDECICH"><span class="xrefglossterm">redo log buffer</span></a> to the <a href="glossary.htm#CBAIJCIB"><span class="xrefglossterm">online redo log</span></a>. When a filled log file is ready to be archived, <code dir="ltr">LGWR</code> signals another process to archive the file.</p>
<p>Oracle Database creates background processes automatically when a database instance starts. An instance can have many background processes, not all of which always exist in every database configuration. The following query lists the background processes running on your database:</p>
<pre dir="ltr">
SELECT PNAME 
FROM   V$PROCESS 
WHERE  PNAME IS NOT NULL 
ORDER BY PNAME;
</pre>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#BABHDAGI">Mandatory Background Processes</a></p>
</li>
<li>
<p><a href="#BABJHBGA">Optional Background Processes</a></p>
</li>
<li>
<p><a href="#BABDJBDI">Slave Processes</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN104" href="../../server.112/e40402/bgprocesses.htm#REFRN104"><span class="italic">Oracle Database Reference</span></a> for descriptions of all the background processes</div>
<a id="BABHDAGI"></a>
<div id="CNCPT9840" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Mandatory Background Processes</h3>
<p>The <span class="bold">mandatory background processes</span> are present in all typical database configurations. These processes run by default in a database instance started with a minimally configured initialization parameter file (see <a href="startup.htm#BABGCIDC">Example 13-1</a>).</p>
<p>This section describes the following mandatory background processes:</p>
<ul>
<li>
<p><a href="#BABBCDGA">Process Monitor Process (PMON)</a></p>
</li>
<li>
<p><a href="#BABJAIBD">System Monitor Process (SMON)</a></p>
</li>
<li>
<p><a href="#BABHDJGD">Database Writer Process (DBW<span class="bolditalic">n</span>)</a></p>
</li>
<li>
<p><a href="#BABJEHBC">Log Writer Process (LGWR)</a></p>
</li>
<li>
<p><a href="#BABHFGFF">Checkpoint Process (CKPT)</a></p>
</li>
<li>
<p><a href="#BABCJBII">Manageability Monitor Processes (MMON and MMNL)</a></p>
</li>
<li>
<p><a href="#BABIDBBD">Recoverer Process (RECO)</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink REFRN104" href="../../server.112/e40402/bgprocesses.htm#REFRN104"><span class="italic">Oracle Database Reference</span></a> for descriptions of other mandatory processes, including MMAN, DIAG, VKTM, DBRM, and PSP0</p>
</li>
<li>
<p><a class="olink RACAD7275" href="../../rac.112/e41960/admcon.htm#RACAD7275"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> and <a class="olink CWADD90953" href="../../rac.112/e41959/intro.htm#CWADD90953"><span class="italic">Oracle Clusterware Administration and Deployment Guide</span></a> for more information about background processes specific to Oracle RAC and Oracle Clusterware</p>
</li>
</ul>
</div>
<a id="BABBCDGA"></a>
<div id="CNCPT1254" class="sect3">
<h4 class="sect3">Process Monitor Process (PMON)<a id="sthref1845"></a><a id="sthref1846"></a><a id="sthref1847"></a><a id="sthref1848"></a><a id="sthref1849"></a><a id="sthref1850"></a><a id="sthref1851"></a></h4>
<p>The <span class="bold">process monitor (PMON)</span> monitors the other background processes and performs process recovery when a server or dispatcher process terminates abnormally. PMON is responsible for cleaning up the database buffer cache and freeing resources that the client process was using. For example, PMON resets the status of the active <a href="glossary.htm#CHDBGFEC"><span class="xrefglossterm">transaction table</span></a>, releases <a href="glossary.htm#CHDHEBFJ"><span class="xrefglossterm">locks</span></a> that are no longer required, and removes the process ID from the list of active processes.</p>
<p>PMON also registers information about the instance and dispatcher processes with the <span class="bold">Oracle Net listener</span> (see <a href="dist_pro.htm#BHCFJAJE">"The Oracle Net Listener"</a>). When an instance starts, PMON polls the listener to determine whether it is running. If the listener is running, then PMON passes it relevant parameters. If it is not running, then PMON periodically attempts to contact it.</p>
</div>
<!-- class="sect3" -->
<a id="BABJAIBD"></a>
<div id="CNCPT1253" class="sect3">
<h4 class="sect3">System Monitor Process (SMON)<a id="sthref1852"></a><a id="sthref1853"></a><a id="sthref1854"></a><a id="sthref1855"></a><a id="sthref1856"></a></h4>
<p>The <span class="bold">system monitor process (SMON)</span> is in charge of a variety of system-level cleanup duties. The duties assigned to SMON include:</p>
<ul>
<li>
<p>Performing instance recovery, if necessary, at instance startup. <a id="sthref1857"></a><a id="sthref1858"></a><a id="sthref1859"></a><a id="sthref1860"></a>In an Oracle RAC database, the SMON process of one database instance can perform instance recovery for a failed instance.</p>
</li>
<li>
<p>Recovering terminated transactions that were skipped during instance recovery because of file-read or tablespace offline errors. SMON recovers the transactions when the tablespace or file is brought back online.</p>
</li>
<li>
<p>Cleaning up unused temporary <a href="glossary.htm#CHDCFJBF"><span class="xrefglossterm">segments</span></a>. For example, Oracle Database allocates extents when creating an index. If the operation fails, then SMON cleans up the temporary space.</p>
</li>
<li>
<p>Coalescing contiguous free extents within dictionary-managed tablespaces.</p>
</li>
</ul>
<p>SMON checks regularly to see whether it is needed. Other processes can call SMON if they detect a need for it.</p>
</div>
<!-- class="sect3" -->
<a id="BABHDJGD"></a>
<div id="CNCPT1250" class="sect3">
<h4 class="sect3">Database Writer Process (DBW<span class="bolditalic">n</span>)</h4>
<p><a id="sthref1861"></a><a id="sthref1862"></a><a id="sthref1863"></a>The<a id="sthref1864"></a><a id="sthref1865"></a> <span class="bold">database writer process (DBWn)</span> writes the contents of database buffers to data files. DBW<span class="italic">n</span> processes write modified buffers in the database buffer cache to disk (see <a href="memory.htm#i10221">"Database Buffer Cache"</a>).<a id="sthref1866"></a></p>
<p>Although one database writer process (DBW0) is adequate for most systems, you can configure additional processes&mdash;DBW1 through DBW9 and DBWa through DBWj&mdash;to improve write performance if your system modifies data heavily. These additional DBW<span class="italic">n</span> processes are not useful on uniprocessor systems.</p>
<p>The DBW<span class="italic">n</span> process writes dirty buffers to disk under the following conditions:</p>
<ul>
<li>
<p><a id="sthref1867"></a>When a server process cannot find a clean reusable buffer after scanning a threshold number of buffers, it signals DBW<span class="italic">n</span> to write. DBW<span class="italic">n</span> writes dirty buffers to disk asynchronously if possible while performing other processing.</p>
</li>
<li>
<p><a id="sthref1868"></a><a id="sthref1869"></a>DBW<span class="italic">n</span> periodically writes buffers to advance the <a href="glossary.htm#CHDDBJEH"><span class="xrefglossterm">checkpoint</span></a>, which is the position in the <a href="glossary.htm#CBAEJAED"><span class="xrefglossterm">redo thread</span></a> from which instance recovery begins (see <a href="startup.htm#BABGDACG">"Overview of Checkpoints"</a>). The log position of the checkpoint is determined by the oldest <a id="sthref1870"></a>dirty buffer in the buffer cache.</p>
</li>
</ul>
<p>In many cases the blocks that DBW<span class="italic">n</span> writes are scattered throughout the disk. Thus, the writes tend to be slower than the sequential writes performed by LGWR. DBW<span class="italic">n</span> performs multiblock writes when possible to improve efficiency. The number of blocks written in a multiblock write varies by operating system.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink PFGRF94511" href="../../server.112/e41573/instance_tune.htm#PFGRF94511"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for advice on configuring, monitoring, and tuning DBW<span class="italic">n</span></div>
</div>
<!-- class="sect3" -->
<a id="BABJEHBC"></a>
<div id="CNCPT1251" class="sect3">
<h4 class="sect3">Log Writer Process (LGWR)<a id="sthref1871"></a><a id="sthref1872"></a><a id="sthref1873"></a><a id="sthref1874"></a><a id="sthref1875"></a><a id="sthref1876"></a></h4>
<p>The <span class="bold">log writer process (LGWR)</span> manages the redo log buffer. LGWR writes one contiguous portion of the buffer to the online redo log. By separating the tasks of modifying database buffers, performing scattered writes of dirty buffers to disk, and performing fast sequential writes of redo to disk, the database improves performance.</p>
<p>In the following circumstances, LGWR writes all redo entries that have been copied into the buffer since the last time it wrote:</p>
<ul>
<li>
<p>A user commits a transaction (see <a href="transact.htm#BHAIDBHC">"Committing Transactions"</a>).</p>
</li>
<li>
<p>An online redo <a href="glossary.htm#CHDDAFFC"><span class="xrefglossterm">log switch</span></a> occurs.</p>
</li>
<li>
<p>Three seconds have passed since LGWR last wrote.</p>
</li>
<li>
<p>The redo log buffer is one-third full or contains 1 MB of buffered data.</p>
</li>
<li>
<p>DBW<span class="italic">n</span> must write modified buffers to disk.</p>
<p><a id="sthref1877"></a><a id="sthref1878"></a><a id="sthref1879"></a>Before DBW<span class="italic">n</span> can write a dirty buffer, redo records associated with changes to the buffer must be written to disk (the <span class="bold">write-ahead protocol</span>). If DBW<span class="italic">n</span> finds that some redo records have not been written, it signals LGWR to write the records to disk and waits for LGWR to complete before writing the data buffers to disk.</p>
</li>
</ul>
<div id="CNCPT89084" class="sect4"><a id="sthref1880"></a>
<h5 class="sect4">LGWR and Commits</h5>
<p><a id="sthref1881"></a><a id="sthref1882"></a><a id="sthref1883"></a><a id="sthref1884"></a><a id="sthref1885"></a><a id="sthref1886"></a><a id="sthref1887"></a>Oracle Database uses a <span class="bold">fast commit</span> mechanism to improve performance for committed transactions. When a user issues a <code dir="ltr">COMMIT</code> statement, the transaction is assigned a <a href="glossary.htm#CBAEHCGH"><span class="xrefglossterm">system change number (SCN)</span></a>. LGWR puts a commit record in the redo log buffer and writes it to disk immediately, along with the commit SCN and transaction's redo entries.</p>
<p>The redo log buffer is circular. When LGWR writes redo entries from the redo log buffer to an online redo log file, server processes can copy new entries over the entries in the redo log buffer that have been written to disk. LGWR normally writes fast enough to ensure that space is always available in the buffer for new entries, even when access to the online redo log is heavy.</p>
<p>The atomic write of the redo entry containing the transaction's commit record is the single event that determines the transaction has committed. Oracle Database returns a success code to the committing transaction although the data buffers have not yet been written to disk. The corresponding changes to data blocks are deferred until it is efficient for DBW<span class="italic">n</span> to write them to the data files.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
LGWR can write redo log entries to disk before a transaction commits. The changes that are protected by the redo entries become permanent only if the transaction later commits.</div>
<p><a id="sthref1888"></a><a id="sthref1889"></a><a id="sthref1890"></a><a id="sthref1891"></a><a id="sthref1892"></a>When activity is high, LGWR can use <span class="bold">group commits</span>. For example, a user commits, causing LGWR to write the transaction's redo entries to disk. During this write other users commit. LGWR cannot write to disk to commit these transactions until its previous write completes. Upon completion, LGWR can write the list of redo entries of waiting transactions (not yet committed) in one operation. In this way, the database minimizes disk I/O and maximizes performance. If commits requests continue at a high rate, then every write by LGWR can contain multiple commit records.</p>
</div>
<!-- class="sect4" -->
<div id="CNCPT89085" class="sect4"><a id="sthref1893"></a>
<h5 class="sect4">LGWR and Inaccessible Files</h5>
<p>LGWR writes synchronously to the active mirrored group of online redo log files. If a log file is inaccessible, then LGWR continues writing to other files in the group and writes an error to the LGWR trace file and the <a href="glossary.htm#CHDJEHBI"><span class="xrefglossterm">alert log</span></a>. If all files in a group are damaged, or if the group is unavailable because it has not been archived, then LGWR cannot continue to function.<a id="sthref1894"></a><a id="sthref1895"></a><a id="sthref1896"></a><a id="sthref1897"></a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="physical.htm#i1006187">"How Oracle Database Writes to the Online Redo Log"</a> and <a href="memory.htm#i21738">"Redo Log Buffer"</a></p>
</li>
<li>
<p><a class="olink PFGRF94347" href="../../server.112/e41573/memory.htm#PFGRF94347"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for information about how to monitor and tune the performance of LGWR</p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="BABHFGFF"></a>
<div id="CNCPT1252" class="sect3">
<h4 class="sect3">Checkpoint Process (CKPT)<a id="sthref1898"></a></h4>
<p>The <span class="bold">checkpoint process (CKPT)</span> updates the control file and data file headers with checkpoint information and signals DBW<span class="italic">n</span> to write blocks to disk. Checkpoint information includes the checkpoint position, SCN, location in online redo log to begin recovery, and so on. As shown in <a href="#BABEACIA">Figure 15-4</a>, CKPT does not write data blocks to data files or redo blocks to online redo log files.</p>
<div id="CNCPT89086" class="figure">
<p class="titleinfigure"><a id="BABEACIA"></a>Figure 15-4 Checkpoint Process</p>
<img width="281" height="371" src="img/cncpt228.gif" alt="Description of Figure 15-4 follows" /><br />
<a id="sthref1899" href="img_text/cncpt228.htm">Description of "Figure 15-4 Checkpoint Process"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="startup.htm#BABGDACG">"Overview of Checkpoints"</a></div>
</div>
<!-- class="sect3" -->
<a id="BABCJBII"></a>
<div id="CNCPT89087" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Manageability Monitor Processes (MMON and MMNL)</h4>
<p>The <span class="bold">manageability monitor process (MMON)</span> performs many tasks related to the <a href="glossary.htm#CBAFCAEG"><span class="xrefglossterm">Automatic Workload Repository (AWR)</span></a>. For example, MMON writes when a <span class="bold">metric</span> violates its threshold value, taking snapshots, and capturing statistics value for recently modified SQL objects.</p>
<p>The <span class="bold">manageability monitor lite process (MMNL)</span> writes statistics from the Active Session History (ASH) buffer in the SGA to disk. MMNL writes to disk when the ASH buffer is full.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="cncptdba.htm#CHDFIJCG">"Automatic Workload Repository (AWR)"</a> and <a href="cncptdba.htm#CHDEBGGC">"Active Session History (ASH)"</a></div>
</div>
<!-- class="sect3" -->
<a id="BABIDBBD"></a>
<div id="CNCPT1255" class="sect3">
<h4 class="sect3">Recoverer Process (RECO)<a id="sthref1900"></a><a id="sthref1901"></a><a id="sthref1902"></a><a id="sthref1903"></a><a id="sthref1904"></a><a id="sthref1905"></a></h4>
<p>In a <a href="glossary.htm#CHDDEGFA"><span class="xrefglossterm">distributed database</span></a>, the <span class="bold">recoverer process (RECO)</span> automatically resolves failures in <a href="glossary.htm#CHDDCCEC"><span class="xrefglossterm">distributed transactions</span></a>. The RECO process of a node automatically connects to other databases involved in an in-doubt distributed transaction. When RECO reestablishes a connection between the databases, it automatically resolves all in-doubt transactions, removing from each database's pending transaction table any rows that correspond to the resolved transactions.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN12287" href="../../server.112/e25494/ds_txnman.htm#ADMIN12287"><span class="italic">Oracle Database Administrator's Guide</span></a> for more information about transaction recovery in distributed systems</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABJHBGA"></a>
<div id="CNCPT9841" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Optional Background Processes</h3>
<p>An <span class="bold">optional background process</span> is any background process not defined as mandatory. Most optional background processes are specific to tasks or features. For example, background processes that support <a id="sthref1906"></a>Oracle Streams <a id="sthref1907"></a>Advanced Queuing (AQ) or <a href="glossary.htm#CHDGIHGG"><span class="xrefglossterm">Oracle Automatic Storage Management (Oracle ASM)</span></a> are only available when these features are enabled.</p>
<p>This section describes some common optional processes:</p>
<ul>
<li>
<p><a href="#BABHGHBE">Archiver Processes (ARC<span class="bolditalic">n</span>)</a></p>
</li>
<li>
<p><a href="#BABDECGE">Job Queue Processes (CJQ0 and Jnnn)</a></p>
</li>
<li>
<p><a href="#BABGGHEI">Flashback Data Archiver Process (FBDA)</a></p>
</li>
<li>
<p><a href="#BABFECBJ">Space Management Coordinator Process (SMCO)</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="cmntopc.htm#BABJAFEG">"Oracle Streams Advanced Queuing (AQ)"</a></p>
</li>
<li>
<p><a class="olink REFRN104" href="../../server.112/e40402/bgprocesses.htm#REFRN104"><span class="italic">Oracle Database Reference</span></a> for descriptions of background processes specific to AQ and ASM</p>
</li>
</ul>
</div>
<a id="BABHGHBE"></a>
<div id="CNCPT1257" class="sect3">
<h4 class="sect3">Archiver Processes (ARC<span class="bolditalic">n</span>)<a id="sthref1908"></a><a id="sthref1909"></a><a id="sthref1910"></a></h4>
<p>The <span class="bold">archiver processes (ARCn)</span> copy online redo log files to offline storage after a redo log switch<a id="sthref1911"></a><a id="sthref1912"></a> occurs. These processes can also collect transaction redo data and transmit it to <a href="glossary.htm#CHDCBIBF"><span class="xrefglossterm">standby database</span></a> destinations. <a id="sthref1913"></a>ARC<span class="italic">n</span> processes exist <span class="italic">only</span> when the database is in <a href="glossary.htm#CHDGFJDI"><span class="xrefglossterm">ARCHIVELOG mode</span></a> and automatic archiving is enabled.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="physical.htm#CHDJBHEH">"Archived Redo Log Files"</a></p>
</li>
<li>
<p><a class="olink ADMIN11337" href="../../server.112/e25494/archredo.htm#ADMIN11337"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn how to adjust the number of archiver processes</p>
</li>
<li>
<p><a class="olink PFGRF94397" href="../../server.112/e41573/iodesign.htm#PFGRF94397"><span class="italic">Oracle Database Performance Tuning Guide</span></a> to learn how to tune archiver performance</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BABDECGE"></a>
<div id="CNCPT1256" class="sect3">
<h4 class="sect3">Job Queue Processes (CJQ0 and Jnnn)<a id="sthref1914"></a><a id="sthref1915"></a><a id="sthref1916"></a><a id="sthref1917"></a><a id="sthref1918"></a></h4>
<p>Oracle Database uses <span class="bold">job queue processes</span> to run user jobs, often in batch mode. A <span class="bold">job</span> is a user-defined task scheduled to run one or more times. For example, you can use a job queue to schedule a long-running update in the background. Given a start date and a time interval, the job queue processes attempt to run the job at the next occurrence of the interval.</p>
<p>Oracle Database manages job queue processes dynamically, thereby enabling job queue clients to use more job queue processes when required. The database releases resources used by the new processes when they are idle.</p>
<p>Dynamic job queue processes can run a large number of jobs concurrently at a given interval. The sequence of events is as follows:</p>
<ol>
<li>
<p>The <span class="bold">job coordinator process (CJQ0)</span> is automatically started and stopped as needed by Oracle Scheduler (see <a href="cncptdba.htm#CHDGEFDA">"Oracle Scheduler"</a>). The coordinator process periodically selects jobs that need to be run from the system <code dir="ltr">JOB$</code> table. New jobs selected are ordered by time.</p>
</li>
<li>
<p>The coordinator process dynamically spawns <span class="bold">job queue slave processes (Jnnn)</span> to run the jobs.</p>
</li>
<li>
<p>The job queue process runs one of the jobs that was selected by the CJQ0 process for execution. Each job queue process runs one job at a time to completion.</p>
</li>
<li>
<p>After the process finishes execution of a single job, it polls for more jobs. If no jobs are scheduled for execution, then it enters a sleep state, from which it wakes up at periodic intervals and polls for more jobs. If the process does not find any new jobs, then it terminates after a preset interval.</p>
</li>
</ol>
<p>The initialization parameter <code dir="ltr">JOB_QUEUE_PROCESSES</code> represents the maximum number of job queue processes that can concurrently run on an instance. However, clients should not assume that all job queue processes are available for job execution.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The coordinator process is not started if the initialization parameter <code dir="ltr">JOB_QUEUE_PROCESSES</code> is set to 0.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADMIN034" href="../../server.112/e25494/scheduse.htm#ADMIN034"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn about Oracle Scheduler jobs</p>
</li>
<li>
<p><a class="olink ADQUE2530" href="../../server.112/e11013/componet.htm#ADQUE2530"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a> to learn about AQ background processes</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BABGGHEI"></a>
<div id="CNCPT89089" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Flashback Data Archiver Process (FBDA)</h4>
<p>The <span class="bold">flashback data archiver process (FBDA)</span> archives historical rows of tracked tables into Flashback Data Archives. When a transaction containing DML on a tracked table commits, this process stores the pre-image of the rows into the Flashback Data Archive. It also keeps metadata on the current rows.</p>
<p>FBDA automatically manages the flashback data archive for space, organization, and retention. Additionally, the process keeps track of how far the archiving of tracked transactions has occurred.</p>
</div>
<!-- class="sect3" -->
<a id="BABFECBJ"></a>
<div id="CNCPT89090" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Space Management Coordinator Process (SMCO)</h4>
<p>The SMCO process coordinates the execution of various space management related tasks, such as proactive space allocation and space reclamation. SMCO dynamically spawns slave processes (W<span class="italic">nnn</span>) to implement the task.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS01011" href="../../appdev.112/e41502/adfns_flashback.htm#ADFNS01011"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> to learn about Flashback Data Archive</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABDJBDI"></a>
<div id="CNCPT9847" class="sect2">
<h3 class="sect2">Slave Processes</h3>
<p><span class="bold">Slave processes</span> are background processes that perform work on behalf of other processes. This section describes some slave processes used by Oracle Database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN104" href="../../server.112/e40402/bgprocesses.htm#REFRN104"><span class="italic">Oracle Database Reference</span></a> for descriptions of Oracle Database slave processes</div>
<div id="CNCPT9848" class="sect3"><a id="sthref1919"></a>
<h4 class="sect3">I/O Slave Processes</h4>
<p><span class="bold">I/O slave processes (Innn)</span> simulate asynchronous I/O for systems and devices that do not support it. In <span class="bold">asynchronous I/O</span>, there is no timing requirement for transmission, enabling other processes to start before the transmission has finished.</p>
<p>For example, assume that an application writes 1000 blocks to a disk on an operating system that does not support asynchronous I/O. Each write occurs sequentially and waits for a confirmation that the write was successful. With asynchronous disk, the application can write the blocks in bulk and perform other work while waiting for a response from the operating system that all blocks were written.</p>
<p>To simulate asynchronous I/O, one process oversees several slave processes. The <span class="bold">invoker process</span> assigns work to each of the slave processes, who wait for each write to complete and report back to the invoker when done. In true asynchronous I/O the operating system waits for the I/O to complete and reports back to the process, while in simulated asynchronous I/O the slaves wait and report back to the invoker.</p>
<p>The database supports different types of I/O slaves, including the following:</p>
<ul>
<li>
<p>I/O slaves for Recovery Manager (RMAN)</p>
<p>When using RMAN to back up or restore data, you can make use of I/O slaves for both disk and tape devices.</p>
</li>
<li>
<p>Database writer slaves</p>
<p>If it is not practical to use multiple database writer processes, such as when the computer has one CPU, then the database can distribute I/O over multiple slave processes. DBWR is the only process that scans the buffer cache LRU list for blocks to be written to disk. However, I/O slaves perform the I/O for these blocks.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink PFGRF94511" href="../../server.112/e41573/instance_tune.htm#PFGRF94511"><span class="italic">Oracle Database Backup and Recovery User's Guide</span></a> to learn more about I/O slaves for backup and restore operations</p>
</li>
<li>
<p><a class="olink PFGRF024" href="../../server.112/e41573/instance_tune.htm#PFGRF024"><span class="italic">Oracle Database Performance Tuning Guide</span></a> to learn more about database writer slaves</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="CNCPT1475" class="sect3"><a id="sthref1920"></a>
<h4 class="sect3">Parallel Query Slaves</h4>
<p>In<a id="sthref1921"></a><a id="sthref1922"></a><a id="sthref1923"></a><a id="sthref1924"></a><a id="sthref1925"></a> <span class="bold"><a id="sthref1926"></a>parallel execution</span> or <span class="bold">parallel processing</span>, multiple processes work together simultaneously to run a single SQL statement. By dividing the work among multiple processes, Oracle Database can run the statement more quickly. For example, four processes handle four different quarters in a year instead of one process handling all four quarters by itself.</p>
<p>Parallel execution reduces response time for data-intensive operations on large databases such as data warehouses. Symmetric multiprocessing (SMP) and clustered system gain the largest performance benefits from parallel execution because statement processing can be split up among multiple CPUs. Parallel execution can also benefit certain types of <a href="glossary.htm#CHDBBEFA"><span class="xrefglossterm">OLTP</span></a> and hybrid systems.</p>
<p>In Oracle RAC systems, the service placement of a particular service controls parallel execution. Specifically, parallel processes run on the nodes on which you have configured the service. By default, Oracle Database runs the parallel process only on the instance that offers the service used to connect to the database. This does not affect other parallel operations such as parallel recovery or the processing of <code dir="ltr">GV$</code> queries.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink DWHSG" href="../e25554/toc.htm"><span class="italic">Oracle Database Data Warehousing Guide</span></a> and <a class="olink VLDBG010" href="../../server.112/e25523/parallel.htm#VLDBG010"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a> to learn more about parallel execution</p>
</li>
<li>
<p><a class="olink RACAD7124" href="../../rac.112/e41960/hafeats.htm#RACAD7124"><span class="italic">Oracle Real Application Clusters Administration and Deployment Guide</span></a> for considerations regarding parallel execution in Oracle RAC environments</p>
</li>
</ul>
</div>
<div id="CNCPT9850" class="sect4"><a id="sthref1927"></a>
<h5 class="sect4">Serial Execution</h5>
<p>In <span class="bold">serial execution</span>, a single server process performs all necessary processing for the sequential execution of a SQL statement. For example, to perform a <a href="glossary.htm#CHDDJAFD"><span class="xrefglossterm">full table scan</span></a> such as <code dir="ltr">SELECT</code> * <code dir="ltr">FROM employees</code>, one server process performs all of the work, as shown in <a href="#i3067">Figure 15-5</a>.</p>
<div id="CNCPT89091" class="figure">
<p class="titleinfigure"><a id="i3067"></a>Figure 15-5 Serial Full Table Scan</p>
<img width="518" height="141" src="img/cncpt016.gif" alt="Description of Figure 15-5 follows" /><br />
<a id="sthref1928" href="img_text/cncpt016.htm">Description of "Figure 15-5 Serial Full Table Scan "</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect4" -->
<a id="BABBJDEG"></a>
<div id="CNCPT220" class="sect4">
<h5 class="sect4">Parallel Execution</h5>
<p>In <span class="bold">parallel execution</span>, the server process acts as the <span class="bold">parallel execution coordinator</span> responsible for parsing the query, allocating and controlling the slave processes, and sending output to the user. <a id="sthref1929"></a>Given a <a href="glossary.htm#CHDICHFA"><span class="xrefglossterm">query plan</span></a> for a SQL query, the coordinator breaks down each <a href="glossary.htm#CHDIACCD"><span class="xrefglossterm">operator</span></a> in a SQL query into parallel pieces, runs them in the order specified in the query, and integrates the partial results produced by the slave processes executing the operators.</p>
<p><a id="sthref1930"></a><a id="sthref1931"></a><a id="sthref1932"></a><a id="sthref1933"></a><a id="sthref1934"></a><a id="sthref1935"></a><a id="sthref1936"></a><a id="sthref1937"></a><a id="sthref1938"></a><a id="sthref1939"></a><a id="sthref1940"></a><a href="#i3086">Figure 15-6</a> shows a parallel scan of the <code dir="ltr">employees</code> table. The table is divided dynamically (<span class="bold">dynamic partitioning</span>) into load units called <span class="bold">granules</span>. Each granule is a range of data blocks of the table read by a single slave process, called a <span class="bold">parallel execution server</span>, which uses <code dir="ltr">P</code><code dir="ltr"><span class="codeinlineitalic">nnn</span></code> as a name format.</p>
<div id="CNCPT89092" class="figure">
<p class="titleinfigure"><a id="i3086"></a>Figure 15-6 Parallel Full Table Scan</p>
<img width="659" height="239" src="img/cncpt017.gif" alt="Description of Figure 15-6 follows" /><br />
<a id="sthref1941" href="img_text/cncpt017.htm">Description of "Figure 15-6 Parallel Full Table Scan"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The database maps granules to execution servers at execution time. When an execution server finishes reading the rows corresponding to a granule, and when granules remain, it obtains another granule from the coordinator. This operation continues until the table has been read. The execution servers send results back to the coordinator, which assembles the pieces into the desired <a href="glossary.htm#CHDCGIFF"><span class="xrefglossterm">full table scan</span></a>.</p>
<p>The number of parallel execution servers assigned to a single operation is the <span class="bold">degree of parallelism</span> for an operation. Multiple operations within the same SQL statement all have the same degree of parallelism.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink VLDBG010" href="../../server.112/e25523/parallel.htm#VLDBG010"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a> to learn how to use parallel execution</p>
</li>
<li>
<p><a class="olink DWHSG8371" href="../../server.112/e25554/refresh.htm#DWHSG8371"><span class="italic">Oracle Database Data Warehousing Guide</span></a> to learn about recommended initialization parameters for parallelism</p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1448">
<tr>
<td class="cellalignment1455">
<table class="cellalignment1453">
<tr>
<td class="cellalignment1452"><a href="memory.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1452"><a href="dist_pro.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1457">
<table class="cellalignment1451">
<tr>
<td class="cellalignment1452"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1452"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1452"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1452"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1452"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1452"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
