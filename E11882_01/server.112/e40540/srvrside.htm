<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Server-Side Programming: PL/SQL and Java</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1056" />
<meta name="dcterms.created" content="2015-05-25T13:34:2Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Concepts" />
<meta name="dcterms.identifier" content="E40540-04" />
<meta name="dcterms.isVersionOf" content="CNCPT" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="sqllangu.htm" title="Previous" type="text/html" />
<link rel="Next" href="part_txn.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e40540.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">13/30</span> <!-- End Header -->
<div id="CNCPT036" class="chapter"><a id="g23577"></a>
<h1 class="chapter"><span class="secnum">8</span> Server-Side Programming: PL/SQL and Java</h1>
<p><a href="sqllangu.htm#g35564">Chapter 7, "SQL"</a> explains the Structured Query Language (SQL) language and how the database processes SQL statements. This chapter explains how <span class="bold">Procedural Language/SQL (PL/SQL)</span> or Java programs stored in the database can use SQL.</p>
<p>This chapter includes the following topics:</p>
<ul>
<li>
<p><a href="#i19998">Introduction to Server-Side Programming</a></p>
</li>
<li>
<p><a href="#i8536">Overview of PL/SQL</a></p>
</li>
<li>
<p><a href="#i7579">Overview of Java in Oracle Database</a></p>
</li>
<li>
<p><a href="#i13313">Overview of Triggers</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sqllangu.htm#g35564">Chapter 7, "SQL"</a></div>
<a id="i19998"></a>
<div id="CNCPT1758" class="sect1">
<h2 class="sect1">Introduction to Server-Side Programming</h2>
<p><a id="sthref986"></a>In a nonprocedural language such as SQL, the set of data to be operated on is specified, but not the operations to be performed or the manner in which they are to be carried out. In a procedural language program, most statement execution depends on previous or subsequent statements and on control structures, such as loops or conditional branches, that are not available in SQL.</p>
<p>For an illustration of the difference between procedural and nonprocedural languages, suppose that the following SQL statement queries the <code dir="ltr">employees</code> table:</p>
<pre dir="ltr">
SELECT employee_id, department_id, last_name, salary FROM employees;
</pre>
<p>The preceding statement requests data, but does not apply logic to the data. However, suppose you want an application to determine whether each employee in the data set deserves a raise based on salary and department performance. A necessary condition of a raise is that the employee did not receive more than three raises in the last five years. If a raise is called for, then the application must adjust the salary and email the manager; otherwise, the application must update a report.</p>
<p>The problem is how procedural database applications requiring conditional logic and program flow control can use SQL. The basic development approaches are as follows:</p>
<ul>
<li>
<p><a id="sthref987"></a>Use <span class="bold">client-side programming</span> to embed SQL statements in applications written in procedural languages such as C, C++, or Java</p>
<p>You can place SQL statements in source code and submit it to <a id="sthref988"></a>a <a href="glossary.htm#CHDHFAFC"><span class="xrefglossterm">precompiler</span></a> or Java translator before compilation. Alternatively, you can eliminate the precompilation step and use an API such as Java Database Connectivity (JDBC) or Oracle Call Interface (OCI) to enable the application to interact with the database.</p>
</li>
<li>
<p>Use <span class="bold">server-side programming</span> to develop data logic that resides in the database</p>
<p>An application can explicitly invoke stored subprograms (procedures and functions), written in PL/SQL (pronounced <span class="italic">P L sequel</span>) or Java. You can also create a <a id="sthref989"></a><a href="glossary.htm#CBAHGBBD"><span class="xrefglossterm">trigger</span></a>, which is named program unit that is stored in the database and invoked in response to a specified event.</p>
</li>
</ul>
<p>This chapter explains the second approach. The principal benefit of server-side <a id="sthref990"></a><a id="sthref991"></a>programming is that functionality built into the database can be deployed anywhere. The database and not the application determines the best way to perform tasks on a given operating system. Also, subprograms increase scalability by centralizing application processing on the server, enabling clients to reuse code. Because subprogram calls are quick and efficient, a single call can start a compute-intensive stored subprogram, reducing network traffic.</p>
<p>You can use the following languages to store data logic in Oracle Database:</p>
<ul>
<li>
<p>PL/SQL</p>
<p>PL/SQL is the Oracle Database procedural extension to SQL. PL/SQL is integrated with the database, supporting all Oracle SQL statements, functions, and <a href="glossary.htm#CHDBIHHE"><span class="xrefglossterm">data types</span></a>. Applications written in database APIs can invoke PL/SQL stored subprograms and send PL/SQL code blocks to the database for execution.</p>
</li>
<li>
<p>Java</p>
<p>Oracle Database also provides support for developing, storing, and deploying Java applications. Java stored subprograms run in the database and are independent of programs that run in the middle tier. Java stored subprograms interface with SQL using a similar execution model to PL/SQL.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="cncptdev.htm#CHDIAAIB">"Client-Side Database Programming"</a> to learn about embedding SQL with precompilers and APIs</p>
</li>
<li>
<p><a class="olink TDDDG10000" href="../../appdev.112/e10766/tdddg_intro.htm#TDDDG10000"><span class="italic">Oracle Database 2 Day Developer's Guide</span></a> for an introduction to Oracle Database application development</p>
</li>
<li>
<p><a class="olink ADFNS00109" href="../../appdev.112/e41502/adfns_environments.htm#ADFNS00109"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> to learn how to choose a programming environment</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i8536"></a>
<div id="CNCPT416" class="sect1">
<h2 class="sect1">Overview of PL/SQL</h2>
<p><a id="sthref992"></a><a id="sthref993"></a><a id="sthref994"></a><a id="sthref995"></a>PL/SQL provides a server-side, stored procedural language that is easy-to-use, seamless with SQL, robust, portable, and secure. You can access and manipulate database data using procedural <a href="glossary.htm#CHDBHJCF"><span class="xrefglossterm">schema objects</span></a> called <span class="bold">PL/SQL program units</span>.</p>
<p>PL/SQL program units generally are categorized as follows:</p>
<ul>
<li>
<p><a id="sthref996"></a><a id="sthref997"></a>A <span class="bold">subprogram</span> is a PL/SQL block that is stored in the database and can be called by name from an application. When you create a subprogram, the database parses the subprogram and stores its parsed representation in the database. You can declare a subprogram as a procedure or a function.</p>
</li>
<li>
<p><a id="sthref998"></a><a id="sthref999"></a>An <span class="bold">anonymous block</span> is a PL/SQL block that appears in your application and is not named or stored in the database. In many applications, PL/SQL blocks can appear wherever SQL statements can appear.</p>
</li>
</ul>
<p>The PL/SQL compiler and interpreter are embedded in Oracle SQL Developer, giving developers a consistent and leveraged development model on both client and server. Also, PL/SQL <a href="glossary.htm#CHDBBFEI"><span class="xrefglossterm">stored procedures</span></a> can be called from several database clients, such as Pro*C, JDBC, ODBC, or OCI, and from Oracle Reports and Oracle Forms.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="cncptdev.htm#CHDCDEBH">"Tools for Database Developers"</a></p>
</li>
<li>
<p><a class="olink LNPLS001" href="../../appdev.112/e25519/overview.htm#LNPLS001"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for complete information about PL/SQL, including packages</p>
</li>
</ul>
</div>
<a id="i18617"></a>
<div id="CNCPT1776" class="sect2">
<h3 class="sect2">PL/SQL Subprograms</h3>
<p><a id="sthref1000"></a><a id="sthref1001"></a>A <span class="bold">PL/SQL subprogram</span> is a named PL/SQL block that permits the caller to supply parameters that can be input only, output only, or input and output values. A subprogram solves a specific problem or performs related tasks and serves as a building block for modular, maintainable database applications.</p>
<p>A subprogram is either a <span class="bold">procedure</span> or a <span class="bold">function</span>. Procedures and functions are identical except that functions always return a single value to the caller, whereas procedures do not. The term <span class="bold">procedure</span> in this chapter means <span class="bold">procedure</span> <span class="italic">or</span> <span class="bold">function</span>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPCC" href="../../appdev.112/e10825/toc.htm"><span class="italic">Pro*C/C++ Programmer's Guide</span></a> and <a class="olink LNPCB006" href="../../appdev.112/e10826/pco06pls.htm#LNPCB006"><span class="italic">Pro*COBOL Programmer's Guide</span></a> to learn about stored procedures in these languages</p>
</li>
<li>
<p><a class="olink LNPLS174" href="../../appdev.112/e25519/overview.htm#LNPLS174"><span class="variable">Oracle Database PL/SQL Language Reference</span></a></p>
</li>
</ul>
</div>
<a id="CIHHFJBA"></a>
<div id="CNCPT1777" class="sect3">
<h4 class="sect3">Advantages of PL/SQL Subprograms</h4>
<p><a id="sthref1002"></a>As explained in <a href="#i19998">"Introduction to Server-Side Programming"</a>, server-side programming has many advantages over client-side programming. PL/SQL subprograms provide the following advantages:</p>
<a id="i18704"></a>
<ul>
<li id="i18722">
<p>Improved performance</p>
<ul>
<li>
<p>The amount of information that an application must send over a network is small compared with issuing individual SQL statements or sending the text of an entire PL/SQL block to Oracle Database, because the information is sent only once and thereafter invoked when it is used.</p>
</li>
<li>
<p>The compiled form of a procedure is readily available in the database, so no compilation is required at execution time.</p>
</li>
<li>
<p>If the procedure is present in the <a id="sthref1003"></a><a href="glossary.htm#CBAIACIC"><span class="xrefglossterm">shared pool</span></a> of the <a href="glossary.htm#CHDBHJGC"><span class="xrefglossterm">SGA</span></a>, then the database need not retrieve it from disk and can begin execution immediately.</p>
</li>
</ul>
</li>
<li id="i18728">
<p>Memory allocation</p>
<p><a id="sthref1004"></a><a id="sthref1005"></a>Because stored procedures take advantage of the shared memory capabilities of Oracle Database, it must load only a single copy of the procedure into memory for execution by multiple users. Sharing code among users results in a substantial reduction in database memory requirements for applications.</p>
</li>
<li id="i18732">
<p>Improved productivity</p>
<p>Stored procedures increase development productivity. By designing applications around a common set of procedures, you can avoid redundant coding. For example, you can write procedures to manipulate rows in the <code dir="ltr">employees</code> table. Any application can call these procedures without requiring SQL statements to be rewritten. If the methods of data management change, then only the procedures must be modified, not the applications that use the procedures.</p>
<p>Stored procedures are perhaps the best way to achieve code reuse. Because any client application written in any language that connects to the database can invoke stored procedures, they provide maximum code reuse in all environments.</p>
</li>
<li id="i18735">
<p>Integrity</p>
<p>Stored procedures improve the integrity and consistency of your applications. By developing applications around a common group of procedures, you reduce the likelihood of coding errors.</p>
<p>For example, you can test a subprogram to guarantee that it returns an accurate result and, after it is verified, reuse it in any number of applications without retesting. If the data structures referenced by the procedure are altered, then you must only recompile the procedure. Applications that call the procedure do not necessarily require modifications.</p>
</li>
<li>
<p>Security with definer's rights procedures</p>
<p><a id="sthref1006"></a><a id="sthref1007"></a><a id="sthref1008"></a><a id="sthref1009"></a>Stored procedures can help enforce data security (see <a href="cmntopc.htm#i2332">"Overview of Database Security"</a>). <a id="sthref1010"></a>A <span class="bold">definer's rights procedure</span> executes with the <a href="glossary.htm#CHDCDGFD"><span class="xrefglossterm">privileges</span></a> of its owner, not its current user. Thus, you can restrict the database operations that users perform by allowing them to access data only through procedures and functions that run with the definer's privileges<a id="sthref1011"></a>.</p>
<p>For example, you can grant users access to a procedure that updates a table but not grant access to the table itself. When a user invokes the procedure, it runs with the privileges of its owner. Users who have only the privilege to run the procedure (but not privileges to query, update, or delete from the underlying tables) can invoke the procedure but not manipulate table data in any other way.</p>
</li>
<li id="i18719">
<p>Inherited privileges and schema context with invoker's rights procedures</p>
<p>An <span class="bold">invoker's rights procedure</span> executes in the current user's schema with the current user's privileges. In other words, an invoker's rights procedure is not tied to a particular user or schema. Invoker's rights procedures make it easy for application developers to centralize application logic, even when the underlying data is divided among user schemas.</p>
<p>For example, an <code dir="ltr">hr_manager</code> user who runs an update procedure on the <code dir="ltr">hr.employees</code> table can update salaries, whereas an <code dir="ltr">hr_clerk</code> who runs the same procedure is restricted to updating address data.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS008" href="../../appdev.112/e25519/subprograms.htm#LNPLS008"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for an overview of PL/SQL subprograms</p>
</li>
<li>
<p><a class="olink DBSEG50010" href="../../network.112/e36292/authorization.htm#DBSEG50010"><span class="italic">Oracle Database Security Guide</span></a> to learn more about definer's and invoker's rights</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="CNCPT88931" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1012"></a>
<h4 class="sect3">Creation of PL/SQL Subprograms</h4>
<p>A subprogram created at the schema level with the <code dir="ltr">CREATE PROCEDURE</code> or <code dir="ltr">CREATE FUNCTION</code> statement is a <span class="bold">standalone stored subprogram</span>. Subprograms defined in a package are called <span class="bold">package subprograms</span> and are considered a part of the package. The database stores subprograms in the <a id="sthref1013"></a><a href="glossary.htm#CHDJCHJA"><span class="xrefglossterm">data dictionary</span></a> as schema objects.</p>
<p>A subprogram has a specification, which includes descriptions of any parameters, and a body. <a href="#BABIAJHG">Example 8-1</a> shows part of a creation statement for the standalone PL/SQL procedure <code dir="ltr">hire_employees</code>. The procedure inserts a row into the <code dir="ltr">employees</code> table.</p>
<div id="CNCPT88932" class="example">
<p class="titleinexample"><a id="BABIAJHG"></a>Example 8-1 PL/SQL Procedure</p>
<pre dir="ltr">
CREATE PROCEDURE hire_employees 
  (p_last_name VARCHAR2, p_job_id VARCHAR2, p_manager_id NUMBER, p_hire_date DATE, 
   p_salary NUMBER, p_commission_pct NUMBER, p_department_id NUMBER)
IS
BEGIN
.
.
.
  INSERT INTO employees (employee_id, last_name, job_id, manager_id, hire_date, 
    salary, commission_pct, department_id)
  VALUES (emp_sequence.NEXTVAL, p_last_name, p_job_id, p_manager_id, p_hire_date,   
    p_salary, p_commission_pct, p_department_id);
.
.
.
END;
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink TDDDG41000" href="../../appdev.112/e10766/tdddg_subprograms.htm#TDDDG41000"><span class="italic">Oracle Database 2 Day Developer's Guide</span></a> to learn how to create subprograms</p>
</li>
<li>
<p><a class="olink LNPLS01373" href="../../appdev.112/e25519/create_procedure.htm#LNPLS01373"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> to learn about the <code dir="ltr">CREATE PROCEDURE</code> command</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="CNCPT88933" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1014"></a>
<h4 class="sect3">Execution of PL/SQL Subprograms</h4>
<p><a id="sthref1015"></a>Users can execute a subprogram interactively by:</p>
<ul>
<li>
<p>Using an Oracle tool, such as SQL*Plus or SQL Developer (see <a href="cncptdev.htm#CHDCDEBH">"Tools for Database Developers"</a>)</p>
</li>
<li>
<p>Calling it explicitly in the code of a database application, such as an Oracle Forms or precompiler application (see <a href="cncptdev.htm#CHDIAAIB">"Client-Side Database Programming"</a>)</p>
</li>
<li>
<p>Calling it explicitly in the code of another procedure or trigger<a id="sthref1016"></a></p>
</li>
</ul>
<p><a href="#i18663">Figure 8-1</a> shows different database applications calling <code dir="ltr">hire_employees</code>.</p>
<div id="CNCPT88934" class="figure">
<p class="titleinfigure"><a id="i18663"></a>Figure 8-1 Calling a PL/SQL Stored Procedure</p>
<img width="470" height="338" src="img/cncpt073.gif" alt="Description of Figure 8-1 follows" /><br />
<a id="sthref1017" href="img_text/cncpt073.htm">Description of "Figure 8-1 Calling a PL/SQL Stored Procedure"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Alternatively, a privileged user can use Oracle Enterprise Manager or SQL*Plus to run the <code dir="ltr">hire_employees</code> procedure using a statement such as the following:</p>
<pre dir="ltr">
EXECUTE hire_employees ('TSMITH', 'CLERK', 1037, SYSDATE, 500, NULL, 20); 
</pre>
<p>The preceding statement inserts a new record for <code dir="ltr">TSMITH</code> in the <code dir="ltr">employees</code> table.</p>
<p>A stored procedure depends on the objects referenced in its body. The database automatically tracks and manages these dependencies. For example, if you alter the definition of the <code dir="ltr">employees</code> table referenced by the <code dir="ltr">hire_employees</code> procedure in a manner that would affect this procedure, then the procedure must be recompiled to validate that it still works as designed. Usually, the database automatically administers such dependency management.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS008" href="../../appdev.112/e25519/subprograms.htm#LNPLS008"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> to learn how to use PL/SQL subprograms</p>
</li>
<li>
<p><a class="olink SQPUG043" href="../../server.112/e16604/ch_twelve022.htm#SQPUG043"><span class="italic">SQL*Plus User's Guide and Reference</span></a> to learn about <a id="sthref1018"></a>the <code dir="ltr">EXECUTE</code> command</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i18829"></a>
<div id="CNCPT1784" class="sect2">
<h3 class="sect2">PL/SQL Packages</h3>
<p><a id="sthref1019"></a><a id="sthref1020"></a>A <span class="bold">PL/SQL package</span> is a group of related subprograms, along with the <a href="glossary.htm#CHDGJIIC"><span class="xrefglossterm">cursors</span></a> and variables they use, stored together in the database for continued use as a unit. Packaged subprograms can be called explicitly by applications or users.</p>
<p>Oracle Database includes many <span class="bold">supplied packages</span> that extend database functionality and provide PL/SQL access to SQL features. For example, <a id="sthref1021"></a>the <code dir="ltr">UTL_HTTP</code> package enables HTTP callouts from PL/SQL and SQL to access data on the Internet or to call Oracle Web Server Cartridges. You can use the supplied packages when creating applications or as a source of ideas when creating your own stored procedures.</p>
<div id="CNCPT1785" class="sect3"><a id="sthref1022"></a>
<h4 class="sect3">Advantages of PL/SQL Packages</h4>
<p><a id="sthref1023"></a>PL/SQL packages provide the following advantages:</p>
<ul>
<li>
<p>Encapsulation</p>
<p>Packages enable you to <span class="bold">encapsulate</span> or group stored procedures, variables, data types, and so on in a named, stored unit. Encapsulation provides better organization during development and also more flexibility. You can create specifications and reference public procedures without actually creating the package body. Encapsulation simplifies privilege management. Granting the privilege for a package makes package constructs accessible to the grantee.</p>
</li>
<li>
<p>Data security</p>
<p><a id="sthref1024"></a><a id="sthref1025"></a>The methods of package definition enable you to specify which variables, cursors, and procedures are public and private. Public means that it is directly accessible to the user of a package. Private means that it is hidden from the user of a package.</p>
<p>For example, a package can contain 10 procedures. You can define the package so that only three procedures are public and therefore available for execution by a user of the package. The remaining procedures are private and can only be accessed by the procedures within the package. Do not confuse public and private package variables with grants to <code dir="ltr">PUBLIC</code>.</p>
</li>
<li>
<p>Better performance</p>
<p><a id="sthref1026"></a>An entire package is loaded into memory in small chunks when a procedure in the package is called for the first time. This load is completed in one operation, as opposed to the separate loads required for standalone procedures. When calls to related packaged procedures occur, no disk I/O is needed to run the compiled code in memory.</p>
<p><a id="i18898"></a>A package body can be replaced and recompiled without affecting the specification. As a result, schema objects that reference a package's constructs (always through the specification) need not be recompiled unless the package specification is also replaced. By using packages, unnecessary recompilations can be minimized, resulting in less impact on overall database performance.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="CNCPT88935" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1027"></a>
<h4 class="sect3">Creation of PL/SQL Packages</h4>
<p>You create a package in two parts: the specification and the body. The package <span class="bold">specification</span> declares all public constructs of the package, whereas the <span class="bold">body</span> defines all constructs (public and private) of the package.</p>
<p><a href="#BABIAJHG">Example 8-1</a> shows part of a statement that creates the package specification for <code dir="ltr">employees_management</code>, which encapsulates several subprograms used to manage an employee database. Each part of the package is created with a different statement.</p>
<div id="CNCPT88936" class="example">
<p class="titleinexample"><a id="sthref1028"></a>Example 8-2 PL/SQL Package</p>
<pre dir="ltr">
CREATE PACKAGE employees_management AS 
  FUNCTION hire_employees (last_name VARCHAR2, job_id VARCHAR2, manager_id NUMBER, 
    salary NUMBER, commission_pct NUMBER, department_id NUMBER) RETURN NUMBER; 
  PROCEDURE fire_employees(employee_id NUMBER); 
  PROCEDURE salary_raise(employee_id NUMBER, salary_incr NUMBER); 
.
.
.
  no_sal EXCEPTION;
END employees_management;
</pre></div>
<!-- class="example" -->
<p>The specification declares the function <code dir="ltr">hire_employees</code>, the procedures <code dir="ltr">fire_employees</code> and <code dir="ltr">salary_raise</code>, and the exception <code dir="ltr">no_sal</code>. All of these public program objects are available to users who have access to the package.</p>
<p>The <code dir="ltr">CREATE PACKAGE BODY</code> command defines objects declared in the specification. The package body must be created in the same schema as the package. After creating the package, you can develop applications that call any of these public procedures or functions or raise any of the public exceptions of the package.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS01371" href="../../appdev.112/e25519/create_package.htm#LNPLS01371"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> to learn about the <code dir="ltr">CREATE PACKAGE</code> command</div>
</div>
<!-- class="sect3" -->
<div id="CNCPT88937" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1029"></a>
<h4 class="sect3">Execution of PL/SQL Package Subprograms</h4>
<p>You can reference package contents from database triggers, stored subprograms, 3GL application programs, and Oracle tools. <a href="#i18841">Figure 8-2</a> shows database applications invoking procedures and functions in the <code dir="ltr">employees_management</code> package.</p>
<div id="CNCPT88938" class="figure">
<p class="titleinfigure"><a id="i18841"></a>Figure 8-2 Calling Subprograms in a PL/SQL Package</p>
<img width="668" height="417" src="img/cncpt075.gif" alt="Description of Figure 8-2 follows" /><br />
<a id="sthref1030" href="img_text/cncpt075.htm">Description of "Figure 8-2 Calling Subprograms in a PL/SQL Package"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a id="sthref1031"></a><a id="sthref1032"></a>Database applications explicitly call packaged procedures as necessary. After being granted the privileges for the <code dir="ltr">employees_management</code> package, a user can explicitly run any of the procedures contained in it. For example, SQL*Plus can issue the following statement to run the <code dir="ltr">hire_employees</code> package procedure:</p>
<pre dir="ltr">
EXECUTE employees_management.hire_employees ('TSMITH', 'CLERK', 1037, SYSDATE, 500, NULL, 20);
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS009" href="../../appdev.112/e25519/packages.htm#LNPLS009"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for an introduction to PL/SQL packages</p>
</li>
<li>
<p><a class="olink ADFNS009" href="../../appdev.112/e41502/adfns_packages.htm#ADFNS009"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> to learn how to code PL/SQL packages</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHDEGHD"></a>
<div id="CNCPT1779" class="sect2">
<h3 class="sect2">PL/SQL Anonymous Blocks</h3>
<p>An <span class="bold">anonymous block</span> is an unnamed, nonpersistent PL/SQL unit. <a id="sthref1033"></a>Typical uses for anonymous blocks include:</p>
<ul>
<li>
<p>Initiating calls to subprograms and package constructs</p>
</li>
<li>
<p>Isolating exception handling</p>
</li>
<li>
<p>Managing control by nesting code within other PL/SQL blocks</p>
</li>
</ul>
<p>Anonymous blocks do not have the code reuse advantages of stored subprograms. <a href="#CHDJGEBD">Table 8-1</a> summarizes the differences between the two types of program units.</p>
<div id="CNCPT88939" class="tblruleformal">
<p class="titleintable"><a id="sthref1034"></a><a id="CHDJGEBD"></a>Table 8-1 Differences Between Anonymous Blocks and Subprograms</p>
<table class="cellalignment1460" title="Differences Between Anonymous Blocks and Subprograms" summary="Differences Between Anonymous Blocks and Subprograms" dir="ltr">
<thead>
<tr class="cellalignment1449">
<th class="cellalignment1459" id="r1c1-t11">Is the PL/SQL Unit ...</th>
<th class="cellalignment1459" id="r1c2-t11">Anonymous Blocks</th>
<th class="cellalignment1459" id="r1c3-t11">Subprograms</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r2c1-t11" headers="r1c1-t11">
<p>Specified with a name?</p>
</td>
<td class="cellalignment1455" headers="r2c1-t11 r1c2-t11">
<p>No</p>
</td>
<td class="cellalignment1455" headers="r2c1-t11 r1c3-t11">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r3c1-t11" headers="r1c1-t11">
<p>Compiled with every reuse?</p>
</td>
<td class="cellalignment1455" headers="r3c1-t11 r1c2-t11">
<p>No</p>
</td>
<td class="cellalignment1455" headers="r3c1-t11 r1c3-t11">
<p>No</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r4c1-t11" headers="r1c1-t11">
<p>Stored in the database?</p>
</td>
<td class="cellalignment1455" headers="r4c1-t11 r1c2-t11">
<p>No</p>
</td>
<td class="cellalignment1455" headers="r4c1-t11 r1c3-t11">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r5c1-t11" headers="r1c1-t11">
<p>Invocable by other applications?</p>
</td>
<td class="cellalignment1455" headers="r5c1-t11 r1c2-t11">
<p>No</p>
</td>
<td class="cellalignment1455" headers="r5c1-t11 r1c3-t11">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r6c1-t11" headers="r1c1-t11">
<p>Capable of returning bind variable values?</p>
</td>
<td class="cellalignment1455" headers="r6c1-t11 r1c2-t11">
<p>Yes</p>
</td>
<td class="cellalignment1455" headers="r6c1-t11 r1c3-t11">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r7c1-t11" headers="r1c1-t11">
<p>Capable of returning function values?</p>
</td>
<td class="cellalignment1455" headers="r7c1-t11 r1c2-t11">
<p>No</p>
</td>
<td class="cellalignment1455" headers="r7c1-t11 r1c3-t11">
<p>Yes</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r8c1-t11" headers="r1c1-t11">
<p>Capable of accepting parameters?</p>
</td>
<td class="cellalignment1455" headers="r8c1-t11 r1c2-t11">
<p>No</p>
</td>
<td class="cellalignment1455" headers="r8c1-t11 r1c3-t11">
<p>Yes</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformal" -->
<p>An anonymous block consists of an optional declarative part, an executable part, and one or more optional exception handlers. The following sample anonymous block selects an employee last name into a variable and prints the name:</p>
<pre dir="ltr">
DECLARE
  v_lname VARCHAR2(25);
BEGIN
  SELECT last_name INTO v_lname
  FROM employees
  WHERE employee_id = 101;
  DBMS_OUTPUT.PUT_LINE('Employee last name is '||v_lname);
END;
</pre>
<p>Oracle Database compiles the PL/SQL block and places it in the shared pool of the SGA, but it does not store the source code or compiled version in the database for reuse beyond the current instance. Unlike triggers, an anonymous block is compiled each time it is loaded into memory. Shared SQL allows anonymous PL/SQL blocks in the shared pool to be reused and shared until they are flushed out of the shared pool.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS311" href="../../appdev.112/e41502/adfns_packages.htm#ADFNS311"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> to learn more about anonymous PL/SQL blocks</div>
</div>
<!-- class="sect2" -->
<a id="CIHBDJCD"></a>
<div id="CNCPT1770" class="sect2">
<h3 class="sect2">PL/SQL Language Constructs</h3>
<p><a id="sthref1035"></a>PL/SQL blocks can include a variety of different PL/SQL language constructs. These constructs including the following:</p>
<ul>
<li>
<p>Variables and constants</p>
<p>You can declare these constructs within a procedure, function, or package. You can use a variable or constant in a SQL or PL/SQL statement to capture or provide a value when one is needed.</p>
</li>
<li>
<p>Cursors</p>
<p>You can declare a <a id="sthref1036"></a><a href="glossary.htm#CHDCDGBB"><span class="xrefglossterm">cursor</span></a> explicitly within a procedure, function, or package to facilitate record-oriented processing of Oracle Database data. The PL/SQL engine can also declare cursors implicitly.</p>
</li>
<li>
<p>Exceptions</p>
<p>PL/SQL lets you explicitly handle internal and user-defined error conditions, called <span class="bold"><a id="sthref1037"></a><a id="sthref1038"></a>exceptions</span>, that arise during processing of PL/SQL code.</p>
</li>
</ul>
<p><a id="sthref1039"></a><a id="sthref1040"></a><a id="sthref1041"></a><a id="sthref1042"></a>PL/SQL can run <span class="bold">dynamic SQL</span> statements whose complete text is not known until run time. Dynamic SQL statements are stored in character strings that are entered into, or built by, the program at run time. This technique enables you to create general purpose procedures. For example, you can create a procedure that operates on a table whose name is not known until run time.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS011" href="../../appdev.112/e25519/dynamic.htm#LNPLS011"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for details about dynamic SQL</p>
</li>
<li>
<p><a class="olink ARPLS058" href="../../appdev.112/e40758/d_sql.htm#ARPLS058"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> to learn how to use dynamic SQL in the <code dir="ltr">DBMS_SQL</code> package</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CIHGDADH"></a>
<div id="CNCPT1786" class="sect2">
<h3 class="sect2">PL/SQL Collections and Records</h3>
<p>Many programming techniques use collection types such as arrays, bags, lists, nested tables, sets, and trees. To support these techniques in database applications, PL/SQL provides the data types <code dir="ltr">TABLE</code> and <code dir="ltr">VARRAY</code>, which enable you to declare associative arrays, nested tables, and variable-size arrays.</p>
<a id="CIHBDFCB"></a>
<div id="CNCPT1787" class="sect3">
<h4 class="sect3">Collections</h4>
<p><a id="sthref1043"></a><a id="sthref1044"></a><a id="sthref1045"></a><a id="sthref1046"></a>A <span class="bold">collection</span> is an ordered group of elements, all of the same type. Each element has a unique subscript that determines its position in the collection. To create a collection, you first define a collection type, and then declare a variable of that type.</p>
<p>Collections work like the arrays found in most third-generation programming languages. Also, collections can be passed as parameters. So, you can use them to move columns of data into and out of database tables or between client-side applications and stored subprograms.</p>
</div>
<!-- class="sect3" -->
<a id="CIHJIJBB"></a>
<div id="CNCPT1788" class="sect3">
<h4 class="sect3">Records</h4>
<p>A <span class="bold">record</span> is a composite variable that can store data values of different types, similar to a struct type in C, C++, or Java. Records are useful for holding data from table rows, or certain columns from table rows.</p>
<p>Suppose you have data about an employee such as name, salary, and hire date. These items are dissimilar in type but logically related. A record containing a field for each item lets you treat the data as a logical unit.</p>
<p>You can use the <code dir="ltr">%ROWTYPE</code> attribute to declare a record that represents a table row or row fetched from a cursor. With user-defined records, you can declare your own fields.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS005" href="../../appdev.112/e25519/composites.htm#LNPLS005"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for detailed information on using collections and records</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHGDBBG"></a>
<div id="CNCPT1767" class="sect2">
<h3 class="sect2">How PL/SQL Runs</h3>
<p>PL/SQL supports both <span class="bold">native execution</span> and <span class="bold">interpreted execution</span>. In interpreted execution, PL/SQL source code is compiled into a so-called bytecode representation, which is run by a portable virtual computer implemented as part of Oracle Database. In native execution, which offers the best performance on computationally intensive program units, the source code of PL/SQL program units is compiled directly to object code for the given platform. This object code is linked into Oracle Database.</p>
<p><a id="sthref1047"></a><a id="sthref1048"></a>The <span class="bold">PL/SQL engine</span> is the tool used to define, compile, and run PL/SQL program units. This engine is a special component of many Oracle products, including Oracle Database. <a id="sthref1049"></a>While many Oracle products have PL/SQL components, this section specifically covers the program units that can be stored in Oracle Database and processed using Oracle Database PL/SQL engine. The PL/SQL capabilities of each Oracle tool are described in the documentation for this tool.</p>
<p><a href="#BABFIHDH">Figure 8-3</a> illustrates the PL/SQL engine contained in Oracle Database.</p>
<div id="CNCPT88940" class="figure">
<p class="titleinfigure"><a id="BABFIHDH"></a>Figure 8-3 The PL/SQL Engine and Oracle Database</p>
<img width="540" height="375" src="img/cncpt070.gif" alt="Description of Figure 8-3 follows" /><br />
<a id="sthref1050" href="img_text/cncpt070.htm">Description of "Figure 8-3 The PL/SQL Engine and Oracle Database"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a id="sthref1051"></a><a id="sthref1052"></a><a id="sthref1053"></a><a id="sthref1054"></a>The program unit is stored in a database. When an application calls a stored procedure, the database loads the compiled program unit into the <a id="sthref1055"></a><a href="glossary.htm#CBAIACIC"><span class="xrefglossterm">shared pool</span></a> in the <a href="glossary.htm#CBAICBIA"><span class="xrefglossterm">system global area (SGA)</span></a> (see <a href="memory.htm#i10223">"Shared Pool"</a>). The PL/SQL and SQL statement executors work together to process the statements in the procedure.</p>
<p>You can call a stored procedure from another PL/SQL block, which can be either an anonymous block or another stored procedure. For example, you can call a stored procedure from Oracle Forms.</p>
<p>A PL/SQL procedure executing on Oracle Database can call <a id="sthref1056"></a><a id="sthref1057"></a>an <span class="bold">external procedure</span> or function written in the C programming language and stored in a shared library. The C routine runs in a separate address space from that of Oracle Database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS00103" href="../../appdev.112/e25519/overview.htm#LNPLS00103"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> to learn about PL/SQL architecture</p>
</li>
<li>
<p><a class="olink ADFNS1402" href="../../appdev.112/e41502/adfns_externproc.htm#ADFNS1402"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> to learn more about external procedures</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i7579"></a>
<div id="CNCPT616" class="sect1">
<h2 class="sect1"><a id="sthref1058"></a>Overview of Java in Oracle Database</h2>
<p>Java has emerged as the object-oriented programming language of choice. Java includes the following features:</p>
<ul>
<li>
<p>A Java Virtual Machine (JVM), which provides the basis for platform independence</p>
</li>
<li>
<p>Automated storage management techniques, such as garbage collection</p>
</li>
<li>
<p>Language syntax that borrows from C and enforces strong typing</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
This chapter assumes that you have some familiarity with the Java language.</div>
<p>The database provides Java programs with a dynamic data-processing engine that supports complex queries and multiple views of data. Client requests are assembled as data queries for immediate processing. Query results are generated dynamically.</p>
<p>The combination of Java and Oracle Database helps you create component-based, network-centric applications that can be easily updated as business needs change. In addition, you can move applications and data stores off the desktop and onto intelligent networks and network-centric servers. More importantly, you can access these applications and data stores from any client device.</p>
<p><a id="sthref1059"></a><a href="#BABECJGF">Figure 8-4</a> shows a traditional two-tier, client/server configuration in which clients call Java stored procedures in the same way that they call PL/SQL subprograms.</p>
<div id="CNCPT88941" class="figure">
<p class="titleinfigure"><a id="BABECJGF"></a>Figure 8-4 Two-Tier Client/Server Configuration</p>
<img width="432" height="306" src="img/cncpt236.gif" alt="Description of Figure 8-4 follows" /><br />
<a id="sthref1060" href="img_text/cncpt236.htm">Description of "Figure 8-4 Two-Tier Client/Server Configuration"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink TDPJD101" href="../../appdev.112/e12137/introduction.htm#TDPJD101"><span class="italic">Oracle Database 2 Day + Java Developer's Guide</span></a> for an introduction to using Java with Oracle Database</div>
<a id="i25622"></a>
<div id="CNCPT1797" class="sect2">
<h3 class="sect2">Overview of the Java Virtual Machine (JVM)</h3>
<p><a id="sthref1061"></a>A <span class="bold">JVM</span> is a virtual processor that runs compiled Java code. Java source code compiles to low-level machine instructions, known as <span class="bold">bytecodes</span>, that are platform independent. The Java bytecodes are interpreted through the JVM into platform-dependent actions.</p>
<div id="CNCPT820" class="sect3"><a id="sthref1062"></a>
<h4 class="sect3">Overview of Oracle JVM</h4>
<p><span class="bold">Oracle JVM</span> is a <a id="sthref1063"></a>complete, Java2-compliant environment for running pure Java applications. It is compatible with the JLS and the JVM specifications. It supports the standard Java binary format and <a id="sthref1064"></a>APIs. In addition, Oracle Database adheres to standard Java language semantics, including dynamic class loading at run time.</p>
<p><a href="#i21492">Figure 8-5</a> illustrates how Oracle Java applications reside on top of the Java core class libraries, which reside on top of the Oracle JVM. Because the Oracle Java support system is located within the database, the JVM interacts with database libraries, instead of directly interacting with the operating system.</p>
<div id="CNCPT88942" class="figure">
<p class="titleinfigure"><a id="i21492"></a>Figure 8-5 Java Component Structure</p>
<img width="204" height="387" src="img/cncpt206.gif" alt="Description of Figure 8-5 follows" /><br />
<a id="sthref1065" href="img_text/cncpt206.htm">Description of "Figure 8-5 Java Component Structure"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Unlike other Java environments, Oracle JVM is embedded within Oracle Database. Some important differences exist between Oracle JVM and typical client JVMs. For example, in a standard Java environment, you run a Java application through the interpreter by issuing the following command on the command line, where <code dir="ltr"><span class="codeinlineitalic">classname</span></code> is the name of the class that you want the JVM to interpret first:</p>
<pre dir="ltr">
java <span class="italic">classname</span>
</pre>
<p>The preceding command causes the application to run within a process on your operating system. However, if you are not using the command-line interface, then you must load the application into the database, publish the interface, and then run the application within a database <a href="glossary.htm#CHDJCHJA"><span class="xrefglossterm">data dictionary</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
See <a class="olink JJDEV01300" href="../../java.112/e10588/chone.htm#JJDEV01300"><span class="italic">Oracle Database Java Developer's Guide</span></a> for a description of other differences between the Oracle JVM and typical client JVMs</div>
</div>
<!-- class="sect3" -->
<div id="CNCPT821" class="sect3"><a id="sthref1066"></a>
<h4 class="sect3">Main Components of Oracle JVM</h4>
<p><a id="sthref1067"></a>Oracle JVM runs in the same process space and address space as the database kernel by sharing its memory heaps and directly accessing its relational data. This design optimizes memory use and increases throughput.</p>
<p>Oracle JVM provides a run-time environment for Java objects. It fully supports Java data structures, method dispatch, exception handling, and language-level threads. It also supports all the core Java class libraries, including <code dir="ltr">java.lang</code>, <code dir="ltr">java.io</code>, <code dir="ltr">java.net</code>, <code dir="ltr">java.math</code>, and <code dir="ltr">java.util</code>.</p>
<p><a href="#BABJJHIA">Figure 8-6</a> shows the main components of Oracle JVM.</p>
<div id="CNCPT88943" class="figure">
<p class="titleinfigure"><a id="BABJJHIA"></a>Figure 8-6 Main Components of Oracle JVM</p>
<img width="480" height="269" src="img/cncpt254.gif" alt="Description of Figure 8-6 follows" /><br />
<a id="sthref1068" href="img_text/cncpt254.htm">Description of "Figure 8-6 Main Components of Oracle JVM"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Oracle JVM embeds the standard Java namespace in the database schemas. This feature lets Java programs access Java objects stored in Oracle Database and <a id="sthref1069"></a>application servers across the enterprise.</p>
<p>In addition, Oracle JVM is tightly integrated with the scalable, shared memory architecture of the database. Java programs use call, session, and object lifetimes efficiently without user intervention. As a result, Oracle JVM and middle-tier Java business objects can be scaled, even when they have session-long state.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJDEV01300" href="../../java.112/e10588/chone.htm#JJDEV01300"><span class="italic">Oracle Database Java Developer's Guide</span></a> for a description of the main components of Oracle JVM</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i25632"></a>
<div id="CNCPT1804" class="sect2">
<h3 class="sect2">Java Programming Environment</h3>
<p>Oracle furnishes enterprise application developers with an end-to-end Java solution for creating, deploying, and managing Java applications. The solution consists of client-side and server-side programmatic interfaces, tools to support Java development, and a Java Virtual Machine integrated with Oracle Database. All these products are compatible with Java standards.</p>
<p>The Java programming environment consists of the following additional features:</p>
<ul>
<li>
<p>Java stored procedures as the Java equivalent and companion for PL/SQL. Java stored procedures are tightly integrated with PL/SQL. You can call Java stored procedures from PL/SQL packages and procedures from Java stored procedures.</p>
</li>
<li>
<p>The JDBC and SQLJ programming interfaces for accessing SQL data.</p>
</li>
<li>
<p>Tools and scripts that assist in developing, loading, and managing classes.</p>
</li>
</ul>
<a id="i25662"></a>
<div id="CNCPT1805" class="sect3">
<h4 class="sect3">Java Stored Procedures</h4>
<p>A <span class="bold">Java stored procedure</span> <a id="sthref1070"></a>is a Java method published to SQL and stored in the database. Like a PL/SQL subprogram, a Java procedure can be invoked directly with products like SQL*Plus or indirectly with a trigger. You can access it from any Oracle Net client&mdash;OCI, precompiler, or JDBC.</p>
<p><code dir="ltr"><span class="codeinlineitalic"><a id="sthref1071"></a></span></code>To publish Java methods, you write <span class="bold">call specifications</span>, which map Java method names, parameter types, and return types to their SQL counterparts. When called by client applications, a Java stored procedure can accept arguments, reference Java classes, and return Java result values.</p>
<p>Applications calling the Java method by referencing the name of the call specification. The run-time system looks up the call specification definition in the Oracle data dictionary and runs the corresponding Java method.</p>
<p>In addition, you can use Java to develop powerful programs independently of PL/SQL. Oracle Database provides a fully compliant implementation of the Java programming language and JVM.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJDEV" href="../../java.112/e10588/toc.htm"><span class="italic">Oracle Database Java Developer's Guide</span></a> explains how to write stored procedures in Java, how to access them from PL/SQL, and how to access PL/SQL functionality from Java</div>
</div>
<!-- class="sect3" -->
<div id="CNCPT823" class="sect3"><a id="sthref1072"></a>
<h4 class="sect3">Java and PL/SQL Integration</h4>
<p>You can call existing PL/SQL programs from Java and Java programs from PL/SQL. This solution protects and leverages your PL/SQL and Java code.</p>
<p><a id="sthref1073"></a>Oracle Database offers two different approaches for accessing SQL data from Java, <a id="sthref1074"></a>JDBC and <a id="sthref1075"></a>SQLJ. Both approaches are available on the client and server. As a result, you can deploy applications on the client and server without modifying the code.</p>
<div id="CNCPT825" class="sect4"><a id="sthref1076"></a>
<h5 class="sect4">JDBC Drivers</h5>
<p>JDBC is a <a id="sthref1077"></a>database access protocol that enables you to connect to a database and run SQL statements and queries to the database. The core Java class libraries provide only one JDBC API, <code dir="ltr">java.sql</code>. However, JDBC is designed to enable vendors to supply drivers that offer the necessary specialization for a particular database. Oracle <a id="sthref1078"></a>provides the distinct JDBC drivers shown in the following table.</p>
<div class="inftblinformal">
<table class="cellalignment1460" title="table" summary="table" dir="ltr">
<thead>
<tr class="cellalignment1449">
<th class="cellalignment1459" id="r1c1-t21">Driver</th>
<th class="cellalignment1459" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r2c1-t21" headers="r1c1-t21">JDBC Thin driver</td>
<td class="cellalignment1455" headers="r2c1-t21 r1c2-t21">You can use the JDBC Thin driver to write pure Java applications and applets that access Oracle SQL data. The JDBC Thin driver is especially well-suited for Web-based applications and applets, because you can dynamically download it from a Web page, similar to any other Java applet.</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r3c1-t21" headers="r1c1-t21">JDBC OCI driver</td>
<td class="cellalignment1455" headers="r3c1-t21 r1c2-t21">The JDBC OCI driver accesses Oracle-specific native code, that is, non-Java code, and libraries on the client or middle tier, providing a performance boost compared to the JDBC Thin driver, at the cost of significantly larger size and client-side installation.</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r4c1-t21" headers="r1c1-t21">JDBC server-side internal driver</td>
<td class="cellalignment1455" headers="r4c1-t21 r1c2-t21">Oracle Database uses the server-side internal driver when the Java code runs on the server. It allows Java applications running in Oracle JVM on the server to access locally defined data, that is, data on the same system and in the same process, with JDBC. It provides a performance boost, because of its ability to use the underlying Oracle RDBMS libraries directly, without the overhead of an intervening network connection between the Java code and SQL data. By supporting the same Java-SQL interface on the server, Oracle Database does not require you to rework code when deploying it.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="cncptdev.htm#CHDCAFAF">"ODBC and JDBC"</a></p>
</li>
<li>
<p><a class="olink TDPJD136" href="../../appdev.112/e12137/getconn.htm#TDPJD136"><span class="italic">Oracle Database 2 Day + Java Developer's Guide</span></a> and <a class="olink JJDBC" href="../../java.112/e16548/toc.htm"><span class="italic">Oracle Database JDBC Developer's Guide</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" -->
<a id="BABEHAFG"></a>
<div id="CNCPT826" class="sect4">
<h5 class="sect4">SQLJ</h5>
<p><span class="bold">SQLJ</span> <a id="sthref1079"></a>is an ANSI standard for embedding SQL statements in Java programs. You can use SQLJ in stored procedures, triggers, and methods within the Oracle Database environment. In addition, you can combine SQLJ programs with JDBC.</p>
<p>SQLJ provides a simple, but powerful, way to develop client-side and middle-tier applications that access databases from Java (see <a href="cncptdev.htm#CHDIEHED">"SQLJ"</a>). A developer writes a program using SQLJ and then uses <a id="sthref1080"></a>the <span class="bold">SQLJ translator</span> to translate <a id="sthref1081"></a>embedded SQL to pure JDBC-based Java code. At run time, the program can communicate with multi-vendor databases using standard JDBC drivers.</p>
<p>The following example shows a simple SQLJ executable statement:</p>
<pre dir="ltr">
String name;
#sql  { SELECT first_name INTO :name FROM employees WHERE employee_id=112 };
System.out.println("Name is " + name + ", employee number = " + employee_id);
</pre>
<p>Because Oracle Database provides a complete Java environment, you cannot compile SQLJ programs on a client that will run on the database. Instead, you can compile them directly on the server.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JSQLJ" href="../../java.112/e10590/toc.htm"><span class="italic">Oracle Database SQLJ Developer's Guide</span></a></div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i13313"></a>
<div id="CNCPT118" class="sect1">
<h2 class="sect1">Overview of Triggers</h2>
<p><a id="sthref1082"></a>A database <a href="glossary.htm#CBAHGBBD"><span class="xrefglossterm">trigger</span></a> is a compiled stored program unit, written in either PL/SQL or Java, that Oracle Database invokes ("fires") automatically whenever one of the following operations occurs:</p>
<ol>
<li>
<p><a href="glossary.htm#CBADGAJE"><span class="xrefglossterm">DML</span></a> statements on a particular table or view, issued by any user</p>
<p>DML statements modify data in schema objects. For example, inserting and deleting rows are DML operations.</p>
</li>
<li>
<p><a href="glossary.htm#CHDFBCII"><span class="xrefglossterm">DDL</span></a> statements issued either by a particular user or any user</p>
<p>DDL statements define schema objects. For example, creating a table and adding a column are DDL operations.</p>
</li>
<li>
<p>Database events</p>
<p>User login or logoff, errors, and database startup or shutdown are events that can invoke triggers.</p>
</li>
</ol>
<p>Triggers are schema objects that are similar to subprograms but differ in the way they are invoked. A subprogram is explicitly run by a user, application, or trigger. Triggers are implicitly invoked by the database when a triggering event occurs.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="sqllangu.htm#i1225">"Overview of SQL Statements"</a> to learn about DML and DDL</p>
</li>
<li>
<p><a href="startup.htm#BABDBBAJ">"Overview of Instance Startup and Shutdown"</a></p>
</li>
</ul>
</div>
<div id="CNCPT88945" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1083"></a>
<h3 class="sect2">Advantages of Triggers</h3>
<p>The correct use of triggers enables you to build and deploy applications that are more robust and that use the database more effectively. You can use triggers to:<a id="sthref1084"></a><a id="sthref1085"></a></p>
<ul>
<li>
<p>Automatically generate derived column values</p>
</li>
<li>
<p>Prevent invalid transactions</p>
</li>
<li>
<p>Provide <a id="sthref1086"></a>auditing and event logging</p>
</li>
<li>
<p>Record information about table access</p>
</li>
</ul>
<p>You can use triggers to enforce low-level business rules common for all client applications. For example, several applications may access the <code dir="ltr">employees</code> table. If a trigger on this table ensures the format of inserted data, then this business logic does not need to be reproduced in every client. Because the trigger cannot be circumvented by the application, the business logic in the trigger is used automatically.</p>
<p>You can use both triggers and integrity constraints to define and enforce any type of integrity rule. However, Oracle strongly recommends that you only use triggers to enforce complex business rules not definable using an <a href="glossary.htm#CBABGDBI"><span class="xrefglossterm">integrity constraint</span></a> (see <a href="datainte.htm#i3786">"Introduction to Data Integrity"</a>).</p>
<p>Excessive use of triggers can result in complex interdependencies that can be difficult to maintain in a large application. For example, when a trigger is invoked, a SQL statement within its trigger action potentially can fire other triggers, <a id="sthref1087"></a>resulting in <span class="bold">cascading triggers</span> that can produce unintended effects.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink TDDDG50000" href="../../appdev.112/e10766/tdddg_triggers.htm#TDDDG50000"><span class="italic">Oracle Database 2 Day Developer's Guide</span></a> and <a class="olink LNPLS2002" href="../../appdev.112/e25519/triggers.htm#LNPLS2002"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for guidelines and restrictions when planning triggers for your application</div>
</div>
<!-- class="sect2" -->
<div id="CNCPT318" class="sect2"><a id="sthref1088"></a>
<h3 class="sect2">Types of Triggers</h3>
<p>Triggers can be categorized according to their means of invocation and the type of actions they perform. Oracle Database supports the following types of triggers:</p>
<ul>
<li>
<p>Row triggers</p>
<p><a id="sthref1089"></a><a id="sthref1090"></a>A <span class="bold">row trigger</span> fires each time the table is affected by the triggering statement. For example, if a statement updates multiple rows, then a row trigger fires once for each row affected by the <code dir="ltr">UPDATE</code>. If a triggering statement affects no rows, then a row trigger is not run. Row triggers are useful if the code in the trigger action depends on data provided by the triggering statement or rows that are affected.</p>
</li>
<li>
<p>Statement triggers</p>
<p><a id="sthref1091"></a>A <span class="bold">statement trigger</span> is fired once on behalf of the triggering statement, regardless of the number of rows affected by the triggering statement. For example, if a statement deletes 100 rows from a table, a statement-level <code dir="ltr">DELETE</code> trigger is fired only once. Statement triggers are useful if the code in the trigger action does not depend on the data provided by the triggering statement or the rows affected.</p>
</li>
<li>
<p><code dir="ltr">INSTEAD OF</code> triggers</p>
<p>An <a id="sthref1092"></a><a id="sthref1093"></a><a id="sthref1094"></a><a id="sthref1095"></a><code dir="ltr"><span class="codeinlinebold">INSTEAD OF</span></code> <span class="bold">trigger</span> is fired by Oracle Database instead of executing the triggering statement. These triggers are useful for transparently modifying views that cannot be modified directly through DML statements.</p>
</li>
<li>
<p>Event triggers</p>
<p>You can use triggers to publish information about database events to subscribers. Event triggers are divided into the following categories:</p>
<ul>
<li>
<p>A <span class="bold">system event trigger</span> can be caused by events such as database instance startup and shutdown or error messages.</p>
</li>
<li>
<p>A <span class="bold">user event trigger</span> is fired because of events related to user logon and logoff, DDL statements, and DML statements.</p>
</li>
</ul>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink TDDDG51000" href="../../appdev.112/e10766/tdddg_triggers.htm#TDDDG51000"><span class="italic">Oracle Database 2 Day Developer's Guide</span></a></p>
</li>
<li>
<p><a class="olink LNPLS2005" href="../../appdev.112/e25519/triggers.htm#LNPLS2005"><span class="italic">Oracle Database PL/SQL Language Reference</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="CNCPT88946" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1096"></a>
<h3 class="sect2">Timing for Triggers</h3>
<p><a id="sthref1097"></a><a id="sthref1098"></a><a id="sthref1099"></a><a id="sthref1100"></a><a id="sthref1101"></a>You can define the <span class="bold">trigger timing</span><span class="italic">&mdash;</span>whether the trigger action is to be run before or after the triggering statement. A <span class="bold">simple trigger</span> is a single trigger on a table that enables you to specify actions for exactly one of the following timing points:</p>
<ul>
<li>
<p>Before the firing statement</p>
</li>
<li>
<p>Before each row affected by the firing statement</p>
</li>
<li>
<p>After each row affected by the firing statement</p>
</li>
<li>
<p>After the firing statement</p>
</li>
</ul>
<p>For statement and row triggers, a <code dir="ltr">BEFORE</code> trigger can enhance security and enable business rules before making changes to the database. The <code dir="ltr">AFTER</code> trigger is ideal for logging actions.</p>
<p>A <span class="bold">compound trigger</span> can fire at multiple timing points. Compound triggers help program an approach in which the actions that you implement for various timing points share common data.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS2005" href="../../appdev.112/e25519/triggers.htm#LNPLS2005"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> to learn about compound triggers</div>
</div>
<!-- class="sect2" -->
<div id="CNCPT218" class="sect2"><a id="sthref1102"></a>
<h3 class="sect2">Creation of Triggers</h3>
<p>The <code dir="ltr">CREATE TRIGGER</code> statement creates or replaces a database trigger. A PL/SQL trigger has the following general syntactic form:</p>
<pre dir="ltr">
CREATE TRIGGER <span class="italic">trigger_name</span>
  <span class="italic">triggering_statement</span>
  [<span class="italic">trigger_restriction</span>]
BEGIN
 <span class="italic">triggered_action</span>;
END;
</pre>
<p><a id="sthref1103"></a>A PL/SQL trigger has the following basic components:</p>
<ul>
<li>
<p>Trigger name</p>
<p>The name must be unique with respect to other triggers in the same schema. For example, the name may be <code dir="ltr">part_reorder_trigger</code>.</p>
</li>
<li>
<p>The trigger event or statement</p>
<p>A triggering event or statement is the SQL statement, database event, or user event that causes a trigger to be invoked. For example, a user updates a table.</p>
</li>
<li>
<p>Trigger restriction</p>
<p><a id="sthref1104"></a><a id="sthref1105"></a>A trigger restriction specifies a <a id="sthref1106"></a><a id="sthref1107"></a>Boolean <a href="glossary.htm#CHDDJACC"><span class="xrefglossterm">expression</span></a> that must be <code dir="ltr">true</code> for the trigger to fire. For example, the trigger is not invoked unless the number of available parts is less than a present reorder amount.</p>
</li>
<li>
<p>Triggered action</p>
<p>A triggered action is the procedure that contains the SQL statements and code to be run when a triggering statement is issued and the trigger restriction evaluates to true. For example, a user inserts a row into a pending orders table.</p>
</li>
</ul>
<p>Suppose that you create the <code dir="ltr">orders</code> and <code dir="ltr">lineitems</code> tables as follows:</p>
<pre dir="ltr">
CREATE TABLE orders
( order_id NUMBER PRIMARY KEY,
  /* other attributes */
  line_items_count NUMBER DEFAULT 0 );

CREATE TABLE lineitems
( order_id REFERENCES orders,
  seq_no   NUMBER,
  /* other attributes */
  CONSTRAINT lineitems PRIMARY KEY(order_id,seq_no) );
</pre>
<p>The <code dir="ltr">orders</code> table contains a row for each unique order, whereas the <code dir="ltr">lineitems</code> table contains a row for each item in an order. <a href="#BABCDBJA">Example 8-3</a> shows a sample trigger that automatically updates the <code dir="ltr">orders</code> table with the number of items in an order.</p>
<div id="CNCPT88947" class="example">
<p class="titleinexample"><a id="BABCDBJA"></a>Example 8-3 lineitems_trigger</p>
<pre dir="ltr">
CREATE OR REPLACE TRIGGER lineitems_trigger
  AFTER INSERT OR UPDATE OR DELETE ON lineitems 
  FOR EACH ROW
BEGIN
  IF (INSERTING OR UPDATING)
  THEN
    UPDATE orders SET line_items_count = NVL(line_items_count,0)+1
    WHERE order_id = :new.order_id;
  END IF;
  IF (DELETING OR UPDATING)
  THEN
    UPDATE orders SET line_items_count = NVL(line_items_count,0)-1
    WHERE order_id = :old.order_id;
  END IF;
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#BABCDBJA">Example 8-3</a>, the triggering statement is an <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, or <code dir="ltr">DELETE</code> on the <code dir="ltr">lineitems</code> table. No triggering restriction exists. The trigger is invoked for each row changed. The trigger has access to the old and new column values of the current row affected by the triggering statement. Two correlation names exist for every column of the table being modified: the old value (<code dir="ltr">:old</code>), and the new value (<code dir="ltr">:new</code>).</p>
<p>If rows in <code dir="ltr">lineitems</code> are inserted or updated for an order, then after the action the trigger calculates the number of items in this order and updates the <code dir="ltr">orders</code> table with the count. <a href="#CHDFJHHG">Table 8-2</a> illustrates a scenario in which a customer initiates two orders and adds and removes line items from the orders.</p>
<div id="CNCPT88948" class="tblruleformalwidemax">
<p class="titleintable"><a id="sthref1108"></a><a id="CHDFJHHG"></a>Table 8-2 Row-Level Trigger Scenario</p>
<table class="cellalignment1460" title="Row-Level Trigger Scenario" summary="Row-level scenario" dir="ltr">
<thead>
<tr class="cellalignment1449">
<th class="cellalignment1459" id="r1c1-t28">SQL Statement</th>
<th class="cellalignment1459" id="r1c2-t28">Triggered SQL Statement</th>
<th class="cellalignment1459" id="r1c3-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r2c1-t28" headers="r1c1-t28">
<pre dir="ltr">
SQL&gt; INSERT INTO orders
(order_id) VALUES (78);
 
1 row created. 
</pre></td>
<td class="cellalignment1455" headers="r2c1-t28 r1c2-t28">&nbsp;</td>
<td class="cellalignment1455" headers="r2c1-t28 r1c3-t28">
<p>The customer creates an order with ID 78. At this point the customer has no items in the order.</p>
<p>Because no action is performed on the <code dir="ltr">lineitems</code> table, the trigger is not invoked.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r3c1-t28" headers="r1c1-t28">
<pre dir="ltr">
SQL&gt; INSERT INTO orders
(order_id) VALUES (92);
 
1 row created. 
</pre></td>
<td class="cellalignment1455" headers="r3c1-t28 r1c2-t28">&nbsp;</td>
<td class="cellalignment1455" headers="r3c1-t28 r1c3-t28">
<p>The customer creates a separate order with ID 92. At this point the customer has no items in the order.</p>
<p>Because no action is performed on the <code dir="ltr">lineitems</code> table, the trigger is not invoked.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r4c1-t28" headers="r1c1-t28">
<pre dir="ltr">
SQL&gt; INSERT INTO lineitems
(order_id, seq_no) VALUES (78,1);
 
1 row created. 
</pre></td>
<td class="cellalignment1455" headers="r4c1-t28 r1c2-t28">
<pre dir="ltr">
UPDATE orders SET
line_items_count = NVL(NULL,0)+1
WHERE order_id = 78;
</pre></td>
<td class="cellalignment1455" headers="r4c1-t28 r1c3-t28">
<p>The customer adds an item to order 78.</p>
<p>The <code dir="ltr">INSERT</code> invokes the trigger. The triggered statement increases the line item count for order 78 from 0 to 1.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r5c1-t28" headers="r1c1-t28">
<pre dir="ltr">
SQL&gt; INSERT INTO lineitems
(order_id, seq_no) VALUES (78,2);
 
1 row created. 
</pre></td>
<td class="cellalignment1455" headers="r5c1-t28 r1c2-t28">
<pre dir="ltr">
UPDATE orders SET 
line_items_count = NVL(1,0)+1
WHERE order_id = 78;
</pre></td>
<td class="cellalignment1455" headers="r5c1-t28 r1c3-t28">
<p>The customer adds an additional item to order 78.</p>
<p>The <code dir="ltr">INSERT</code> invokes the trigger. The triggered statement increases the line item count for order 78 from 1 to 2.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r6c1-t28" headers="r1c1-t28">
<pre dir="ltr">
SQL&gt; SELECT * FROM orders;

 ORDER_ID LINE_ITEMS_COUNT
--------- ----------------
      78                2
      92                0
</pre></td>
<td class="cellalignment1455" headers="r6c1-t28 r1c2-t28">&nbsp;</td>
<td class="cellalignment1455" headers="r6c1-t28 r1c3-t28">
<p>The customer queries the status of the two orders. Order 78 contains two items. Order 92 contains no items.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r7c1-t28" headers="r1c1-t28">
<pre dir="ltr">
SQL&gt; SELECT * FROM lineitems;
 
  ORDER_ID     SEQ_NO
---------- ----------
        78          1
        78          2
</pre></td>
<td class="cellalignment1455" headers="r7c1-t28 r1c2-t28">&nbsp;</td>
<td class="cellalignment1455" headers="r7c1-t28 r1c3-t28">
<p>The customer queries the status of the line items. Each item is uniquely identified by the order ID and the sequence number.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r8c1-t28" headers="r1c1-t28">
<pre dir="ltr">
SQL&gt; UPDATE lineitems SET order_id = 92;

2 rows updated.
</pre></td>
<td class="cellalignment1455" headers="r8c1-t28 r1c2-t28">
<pre dir="ltr">
UPDATE orders SET 
line_items_count = NVL(NULL,0)+1
WHERE order_id = 92;

UPDATE orders SET 
line_items_count = NVL(2,0)-1
WHERE order_id = 78;
</pre>
<pre dir="ltr">
UPDATE orders SET 
line_items_count = NVL(1,0)+1
WHERE order_id = 92;

UPDATE orders SET 
line_items_count = NVL(1,0)-1
WHERE order_id = 78;
</pre></td>
<td class="cellalignment1455" headers="r8c1-t28 r1c3-t28">
<p>The customer moves the line items that were in order 78 to order 92.</p>
<p>The <code dir="ltr">UPDATE</code> statement changes 2 rows in the <code dir="ltr">lineitems</code> tables, which invokes the trigger once for each row.</p>
<p>Each time the trigger is invoked, both <code dir="ltr">IF</code> conditions in the trigger are met. The first condition increments the count for order 92, whereas the second condition decreases the count for order 78. Thus, four total <code dir="ltr">UPDATE</code> statements are run.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r9c1-t28" headers="r1c1-t28">
<pre dir="ltr">
SQL&gt; SELECT * FROM orders;

 ORDER_ID LINE_ITEMS_COUNT
--------- ----------------
       78                0
       92                2
</pre></td>
<td class="cellalignment1455" headers="r9c1-t28 r1c2-t28">
<pre dir="ltr">
</pre></td>
<td class="cellalignment1455" headers="r9c1-t28 r1c3-t28">
<p>The customer queries the status of the two orders. The net effect is that the line item count for order 92 has increased from 0 to 2, whereas the count for order 78 has decreased from 2 to 0.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r10c1-t28" headers="r1c1-t28">
<pre dir="ltr">
SQL&gt; SELECT * FROM lineitems;
 
  ORDER_ID     SEQ_NO
---------- ----------
        92          1
        92          2
</pre></td>
<td class="cellalignment1455" headers="r10c1-t28 r1c2-t28">
<pre dir="ltr">
</pre></td>
<td class="cellalignment1455" headers="r10c1-t28 r1c3-t28">
<p>The customer queries the status of the line items. Each item is uniquely identified by the order ID and the sequence number.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r11c1-t28" headers="r1c1-t28">
<pre dir="ltr">
SQL&gt; DELETE FROM lineitems;
 
2 rows deleted.
</pre></td>
<td class="cellalignment1455" headers="r11c1-t28 r1c2-t28">
<pre dir="ltr">
UPDATE orders SET 
line_items_count = NVL(2,0)-1
WHERE order_id = 92;
 
UPDATE orders SET 
line_items_count = NVL(1,0)-1
WHERE order_id = 92;
</pre></td>
<td class="cellalignment1455" headers="r11c1-t28 r1c3-t28">
<p>The customer now removes all line items from all orders.</p>
<p>The <code dir="ltr">DELETE</code> statement changes 2 rows in the <code dir="ltr">lineitems</code> tables, which invokes the trigger once for each row. For each trigger invocation, only one <code dir="ltr">IF</code> condition in the trigger is met. Each time the condition decreases the count for order 92 by 1. Thus, two total <code dir="ltr">UPDATE</code> statements are run.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r12c1-t28" headers="r1c1-t28">
<pre dir="ltr">
SQL&gt; SELECT * FROM orders;

 ORDER_ID LINE_ITEMS_COUNT
--------- ----------------
       78                0
       92                0

SQL&gt; SELECT * FROM lineitems;
 
no rows selected
</pre></td>
<td class="cellalignment1455" headers="r12c1-t28 r1c2-t28">
<pre dir="ltr">
</pre></td>
<td class="cellalignment1455" headers="r12c1-t28 r1c3-t28">
<p>The customer queries the status of the two orders. Neither order contains line items.</p>
<p>The customer also queries the status of the line items. No items exist.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformalwidemax" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink TDDDG52000" href="../../appdev.112/e10766/tdddg_triggers.htm#TDDDG52000"><span class="italic">Oracle Database 2 Day Developer's Guide</span></a> and <a class="olink LNPLS020" href="../../appdev.112/e25519/triggers.htm#LNPLS020"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> to learn how to create triggers</p>
</li>
<li>
<p><a class="olink LNPLS01374" href="../../appdev.112/e25519/create_trigger.htm#LNPLS01374"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> to learn about the <code dir="ltr">CREATE TRIGGER</code> command</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="CNCPT1697" class="sect2"><a id="sthref1109"></a>
<h3 class="sect2">Execution of Triggers</h3>
<p><a id="sthref1110"></a><a id="sthref1111"></a>Oracle Database executes a trigger internally using the same steps as for subprogram execution. The only subtle difference is that a user has the right to fire a trigger if he or she has the privilege to run the triggering statement. With this exception, the database validates and runs triggers the same way as stored subprograms.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS020" href="../../appdev.112/e25519/triggers.htm#LNPLS020"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> to learn more about trigger execution</div>
</div>
<!-- class="sect2" -->
<div id="CNCPT1696" class="sect2"><a id="sthref1112"></a>
<h3 class="sect2">Storage of Triggers</h3>
<p><a id="sthref1113"></a><a id="sthref1114"></a><a id="sthref1115"></a><a id="sthref1116"></a><a id="sthref1117"></a>Oracle Database stores PL/SQL triggers in compiled form in a database schema, just like PL/SQL stored procedures. When a <code dir="ltr"><a id="sthref1118"></a>CREATE TRIGGER</code> statement commits, the compiled PL/SQL code is stored in the database and the source code of the PL/SQL trigger is removed from the <a href="glossary.htm#CBAIACIC"><span class="xrefglossterm">shared pool</span></a>.</p>
<p><a href="#BABJAIBB">Figure 8-7</a> shows a database application with SQL statements that implicitly invoke PL/SQL triggers. <a id="sthref1119"></a>The triggers are stored separately from their associated tables.</p>
<div id="CNCPT88949" class="figure">
<p class="titleinfigure"><a id="BABJAIBB"></a>Figure 8-7 Triggers</p>
<img width="576" height="339" src="img/cncpt076.gif" alt="Description of Figure 8-7 follows" /><br />
<a id="sthref1120" href="img_text/cncpt076.htm">Description of "Figure 8-7 Triggers"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Java triggers are stored in the same manner as PL/SQL triggers. However, a Java trigger references Java code that was separately compiled with a <code dir="ltr">CALL</code> statement. Thus, creating a Java trigger involves creating Java code and creating the trigger that references this Java code.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS2007" href="../../appdev.112/e25519/triggers.htm#LNPLS2007"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> to learn about compiling and storing triggers</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1448">
<tr>
<td class="cellalignment1455">
<table class="cellalignment1453">
<tr>
<td class="cellalignment1452"><a href="sqllangu.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1452"><a href="part_txn.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1457">
<table class="cellalignment1451">
<tr>
<td class="cellalignment1452"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1452"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1452"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1452"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1452"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1452"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
