<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Tables and Table Clusters</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1056" />
<meta name="dcterms.created" content="2015-05-25T13:34:0Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Concepts" />
<meta name="dcterms.identifier" content="E40540-04" />
<meta name="dcterms.isVersionOf" content="CNCPT" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="part_datstr.htm" title="Previous" type="text/html" />
<link rel="Next" href="indexiot.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e40540.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/30</span> <!-- End Header -->
<div id="CNCPT010" class="chapter"><a id="g49419"></a> <a id="i31718"></a>
<h1 class="chapter"><span class="secnum">2</span> Tables and Table Clusters</h1>
<p><a id="sthref45"></a>This chapter provides an introduction to schema objects and discusses tables, which are the most common types of schema objects.</p>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#i22627">Introduction to Schema Objects</a></p>
</li>
<li>
<p><a href="#i5663">Overview of Tables</a></p>
</li>
<li>
<p><a href="#i25478">Overview of Table Clusters</a></p>
</li>
</ul>
<a id="i22627"></a>
<div id="CNCPT111" class="sect1">
<h2 class="sect1">Introduction to Schema Objects</h2>
<p><a id="sthref46"></a><a id="sthref47"></a>A database <a href="glossary.htm#i996727"><span class="xrefglossterm">schema</span></a> is a logical container for data structures, called <span class="bold">schema objects</span>. Examples of schema objects are tables and indexes. Schema objects are created and manipulated with <a href="glossary.htm#i432766"><span class="xrefglossterm">SQL</span></a>.</p>
<p><a id="sthref48"></a>A <a href="glossary.htm#CHDIDAEB"><span class="xrefglossterm">database user</span></a> has a password and various database <a href="glossary.htm#CHDCDGFD"><span class="xrefglossterm">privileges</span></a>. Each user owns a single schema, which has the same name as the user. The schema contains the data for the user owning the schema. For example, the <code dir="ltr">hr</code> user owns the <code dir="ltr">hr</code> schema, which contains schema objects such as the <code dir="ltr">employees</code> table. In a production database, the schema owner usually represents a database application rather than a person.</p>
<p>Within a schema, each schema object of a particular type has a unique name. For example, <code dir="ltr">hr.employees</code> refers to the table <code dir="ltr">employees</code> in the <code dir="ltr">hr</code> schema. <a href="#CBBHBEIE">Figure 2-1</a> depicts a schema owner named <code dir="ltr">hr</code> and schema objects within the <code dir="ltr">hr</code> schema.</p>
<div id="CNCPT88799" class="figure">
<p class="titleinfigure"><a id="CBBHBEIE"></a>Figure 2-1 HR Schema</p>
<img width="498" height="251" src="img/cncpt230.gif" alt="Description of Figure 2-1 follows" /><br />
<a id="sthref49" href="img_text/cncpt230.htm">Description of "Figure 2-1 HR Schema"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="cmntopc.htm#i2332">"Overview of Database Security"</a> to learn more about users and privileges</div>
<div id="CNCPT88800" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref50"></a>
<h3 class="sect2">Schema Object Types</h3>
<p><a id="sthref51"></a>The most important schema objects in a relational database are tables. A <a href="glossary.htm#i432801"><span class="xrefglossterm">table</span></a> stores data in rows.</p>
<p>Oracle SQL enables you to create and manipulate many other types of schema objects, including the following:</p>
<ul>
<li>
<p>Indexes</p>
<p>Indexes are schema objects that contains an entry for each indexed row of the table or <a href="glossary.htm#CHDJGGGF"><span class="xrefglossterm">table cluster</span></a> and provide direct, fast access to rows. Oracle Database supports several types of index. An index-organized table is a table in which the data is stored in an index structure. See <a href="indexiot.htm#BABHJAJF">Chapter 3, "Indexes and Index-Organized Tables"</a>.</p>
</li>
<li>
<p>Partitions</p>
<p>Partitions are pieces of large tables and indexes. Each partition has its own name and may optionally have its own storage characteristics. See <a href="schemaob.htm#CFAGCECI">"Overview of Partitions"</a>.</p>
</li>
<li>
<p>Views</p>
<p>Views are customized presentations of data in one or more tables or other views. You can think of them as stored queries. Views do not actually contain data. See <a href="schemaob.htm#i20690">"Overview of Views"</a>.</p>
</li>
<li>
<p>Sequences</p>
<p>A sequence is a user-created object that can be shared by multiple users to generate integers. Typically, sequences are used to generate <a href="glossary.htm#i432585"><span class="xrefglossterm">primary key</span></a> values. See <a href="schemaob.htm#i5667">"Overview of Sequences"</a>.</p>
</li>
<li>
<p>Dimensions</p>
<p>A dimension defines a parent-child relationship between pairs of column sets, where all the columns of a column set must come from the same table. Dimensions are commonly used to categorize data such as customers, products, and time. See <a href="schemaob.htm#i18190">"Overview of Dimensions"</a>.</p>
</li>
<li>
<p>Synonyms</p>
<p>A synonym is an alias for another schema object. Because a synonym is simply an alias, it requires no storage other than its definition in the <a href="glossary.htm#CHDJJJGD"><span class="xrefglossterm">data dictionary</span></a>. See <a href="schemaob.htm#i5669">"Overview of Synonyms"</a>.</p>
</li>
<li>
<p>PL/SQL subprograms and packages</p>
<p>PL/SQL is the Oracle procedural extension of SQL. A <span class="bold">PL/SQL subprogram</span> is a named PL/SQL block that can be invoked with a set of parameters. A <span class="bold">PL/SQL package</span> groups logically related PL/SQL types, variables, and subprograms. See <a href="srvrside.htm#i18617">"PL/SQL Subprograms"</a> and <a href="srvrside.htm#i18829">"PL/SQL Packages"</a>.</p>
</li>
</ul>
<p>Other types of objects are also stored in the database and can be created and manipulated with SQL statements but are not contained in a schema. These objects include database <a id="sthref52"></a>users, <a id="sthref53"></a><a href="glossary.htm#CHDEBCJB"><span class="xrefglossterm">roles</span></a>, <a id="sthref54"></a><a href="glossary.htm#CHDDIDCJ"><span class="xrefglossterm">contexts</span></a>, and <a id="sthref55"></a><a href="glossary.htm#CHDFHJCC"><span class="xrefglossterm">directory objects</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADMQS008" href="../../server.112/e10897/schema.htm#ADMQS008"><span class="italic">Oracle Database 2 Day DBA</span></a> and <a class="olink ADMIN021" href="../../server.112/e25494/general.htm#ADMIN021"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn how to manage schema objects</p>
</li>
<li>
<p><a class="olink SQLRF20003" href="../../server.112/e41084/sql_elements007.htm#SQLRF20003"><span class="italic">Oracle Database SQL Language Reference</span></a> for more about schema objects and database objects</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="CNCPT88801" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref56"></a>
<h3 class="sect2">Schema Object Storage</h3>
<p><a id="sthref57"></a>Some schema objects store data in logical storage structures called <a href="glossary.htm#CHDCFJBF"><span class="xrefglossterm">segments</span></a>. For example, a nonpartitioned <a id="sthref58"></a><a id="sthref59"></a><a href="glossary.htm#CHDBJDCA"><span class="xrefglossterm">heap-organized table</span></a> or an index creates a segment. Other schema objects, such as views and sequences, consist of metadata only. This section describes only schema objects that have segments.</p>
<p>Oracle Database stores a schema object logically within a <a id="sthref60"></a><a href="glossary.htm#i996731"><span class="xrefglossterm">tablespace</span></a>. There is no relationship between schemas and tablespaces: a tablespace can contain objects from different schemas, and the objects for a schema can be contained in different tablespaces. The data of each object is physically contained in one or more data files.</p>
<p><a href="#i5716">Figure 2-2</a> shows a possible configuration of table and index segments, tablespaces, and data files. The data segment for one table spans two data files, which are both part of the same tablespace. A segment cannot span multiple tablespaces.</p>
<div id="CNCPT88802" class="figure">
<p class="titleinfigure"><a id="i5716"></a>Figure 2-2 Segments, Tablespaces, and Data Files</p>
<img width="620" height="542" src="img/cncpt284.gif" alt="Description of Figure 2-2 follows" /><br />
<a id="sthref61" href="img_text/cncpt284.htm">Description of "Figure 2-2 Segments, Tablespaces, and Data Files"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="logical.htm#g23847">Chapter 12, "Logical Storage Structures"</a> to learn about tablespaces and segments</p>
</li>
<li>
<p><a class="olink ADMQS006" href="../../server.112/e10897/storage.htm#ADMQS006"><span class="italic">Oracle Database 2 Day DBA</span></a> and <a class="olink ADMIN014" href="../../server.112/e25494/schema.htm#ADMIN014"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn how to manage storage for schema objects</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="CNCPT1859" class="sect2"><a id="sthref62"></a>
<h3 class="sect2">Schema Object Dependencies</h3>
<p><a id="sthref63"></a><a id="sthref64"></a>Some schema objects reference other objects, creating <span class="bold">schema object dependencies</span>. For example, a view contains a <a href="glossary.htm#CHDGABIG"><span class="xrefglossterm">query</span></a> that references tables or other views, while a <a href="glossary.htm#CBAIDJHG"><span class="xrefglossterm">PL/SQL</span></a> subprogram invokes other subprograms. If the definition of object A references object B, then A is a <span class="bold">dependent object</span> with respect to B and B is a <span class="bold">referenced object</span> with respect to A.</p>
<p>Oracle Database provides an automatic mechanism to ensure that a dependent object is always up to date with respect to its referenced objects. When a dependent object is created, the database tracks dependencies between the dependent object and its referenced objects. When a referenced object changes in a way that might affect a dependent object, the dependent object is marked invalid. For example, if a user drops a table, no view based on the dropped table is usable.</p>
<p>An invalid dependent object must be recompiled against the new definition of a referenced object before the dependent object is usable. Recompilation occurs automatically when the invalid dependent object is referenced.</p>
<p>As an illustration of how schema objects can create dependencies, the following sample script creates a table <code dir="ltr">test_table</code> and then a procedure that queries this table:</p>
<pre dir="ltr">
CREATE TABLE test_table ( col1 INTEGER, col2 INTEGER );

CREATE OR REPLACE PROCEDURE test_proc
AS
BEGIN
 FOR x IN ( SELECT col1, col2 FROM test_table )
 LOOP
   -- process data
   NULL;
 END LOOP;
END;
/
</pre>
<p>The following query of the status of procedure <code dir="ltr">test_proc</code> shows that it is valid:</p>
<pre dir="ltr">
SQL&gt; SELECT OBJECT_NAME, STATUS FROM USER_OBJECTS WHERE OBJECT_NAME = 'TEST_PROC';
 
OBJECT_NAME STATUS
----------- -------
TEST_PROC   VALID
</pre>
<p>After adding the <code dir="ltr">col3</code> column to <code dir="ltr">test_table</code>, the procedure is still valid because the procedure has no dependencies on this column:</p>
<pre dir="ltr">
SQL&gt; ALTER TABLE test_table ADD col3 NUMBER;
 
Table altered.
 
SQL&gt; SELECT OBJECT_NAME, STATUS FROM USER_OBJECTS WHERE OBJECT_NAME = 'TEST_PROC';
 
OBJECT_NAME STATUS
----------- -------
TEST_PROC   VALID
</pre>
<p>However, changing the data type of the <code dir="ltr">col1</code> column, which the <code dir="ltr">test_proc</code> procedure depends on in, invalidates the procedure:</p>
<pre dir="ltr">
SQL&gt; ALTER TABLE test_table MODIFY col1 VARCHAR2(20);
 
Table altered.
 
SQL&gt; SELECT OBJECT_NAME, STATUS FROM USER_OBJECTS WHERE OBJECT_NAME = 'TEST_PROC';
 
OBJECT_NAME STATUS
----------- -------
TEST_PROC   INVALID
</pre>
<p>Running or recompiling the procedure makes it valid again, as shown in the following example:</p>
<pre dir="ltr">
SQL&gt; EXECUTE test_proc
 
PL/SQL procedure successfully completed.
 
SQL&gt; SELECT OBJECT_NAME, STATUS FROM USER_OBJECTS WHERE OBJECT_NAME = 'TEST_PROC';
 
OBJECT_NAME STATUS
----------- -------
TEST_PROC   VALID
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN11556" href="../../server.112/e25494/general.htm#ADMIN11556"><span class="italic">Oracle Database Administrator's Guide</span></a> and <a class="olink ADFNS99966" href="../../appdev.112/e41502/adfns_dependencies.htm#ADFNS99966"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> to learn how to manage schema object dependencies</div>
</div>
<!-- class="sect2" -->
<a id="CBBJFFCH"></a>
<div id="CNCPT88803" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">SYS and SYSTEM Schemas</h3>
<p>All Oracle databases include <a id="sthref65"></a>default administrative <a id="sthref66"></a>accounts. Administrative accounts are highly <a id="sthref67"></a>privileged and are intended only for DBAs authorized to perform tasks such as <a id="sthref68"></a>starting and stopping the database, managing memory and storage, creating and managing database users, and so on.</p>
<p><a id="sthref69"></a>The administrative account <code dir="ltr">SYS</code> is automatically created when a database is created. This account can perform all database administrative functions. The <code dir="ltr">SYS</code> schema stores the base tables and views for the <a id="sthref70"></a><a href="glossary.htm#CHDJCHJA"><span class="xrefglossterm">data dictionary</span></a>. These base tables and views are critical for the operation of Oracle Database. Tables in the <code dir="ltr">SYS</code> schema are manipulated only by the database and must never be modified by any user.</p>
<p><a id="sthref71"></a>The <code dir="ltr">SYSTEM</code> account is also automatically created when a database is created. The <code dir="ltr">SYSTEM</code> schema stores additional tables and views that display administrative information, and internal tables and views used by various Oracle Database options and tools. Never use the <code dir="ltr">SYSTEM</code> schema to store tables of interest to nonadministrative users.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="cmntopc.htm#i15474">"User Accounts"</a> and <a href="startup.htm#i1049">"Connection with Administrator Privileges"</a></p>
</li>
<li>
<p><a class="olink ADMQS12002" href="../../server.112/e10897/users_secure.htm#ADMQS12002"><span class="italic">Oracle Database 2 Day DBA</span></a> and <a class="olink ADMIN11042" href="../../server.112/e25494/dba.htm#ADMIN11042"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn about <code dir="ltr">SYS</code>, <code dir="ltr">SYSTEM</code>, and other administrative accounts</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="CNCPT88804" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref72"></a>
<h3 class="sect2">Sample Schemas</h3>
<p><a id="sthref73"></a><a id="sthref74"></a>An Oracle database may include <span class="bold">sample schemas</span>, which are a set of interlinked schemas that enable Oracle documentation and Oracle instructional materials to illustrate common database tasks. The <code dir="ltr">hr</code> schema is a sample schema that contains information about employees, departments and locations, work histories, and so on.</p>
<p><a href="#CBBJICEB">Figure 2-3</a> is an entity-relationship diagram of the tables in the <code dir="ltr">hr</code> schema. Most examples in this manual use objects from this schema.</p>
<div id="CNCPT88805" class="figure">
<p class="titleinfigure"><a id="CBBJICEB"></a>Figure 2-3 HR Schema</p>
<img width="438" height="327" src="img/cncpt292.gif" alt="Description of Figure 2-3 follows" /><br />
<a id="sthref75" href="img_text/cncpt292.htm">Description of "Figure 2-3 HR Schema"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink COMSC" href="../e10831/toc.htm"><span class="italic">Oracle Database Sample Schemas</span></a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i5663"></a>
<div id="CNCPT211" class="sect1">
<h2 class="sect1">Overview of Tables</h2>
<p>A <a href="glossary.htm#i432801"><span class="xrefglossterm">table</span></a> is the basic unit of data organization in an Oracle database. A table describes an <span class="bold">entity</span>, which is something of significance about which information must be recorded. For example, an employee could be an entity.</p>
<p>Oracle Database tables fall into the following basic categories:</p>
<ul>
<li>
<p>Relational tables</p>
<p>Relational tables have simple columns and are the most common table type. <a href="#CBBEHJCH">Example 2-1</a> shows <a id="sthref76"></a>a <code dir="ltr">CREATE TABLE</code> statement for a relational table.</p>
</li>
<li>
<p>Object tables</p>
<p>The columns correspond to the top-level attributes of an <a href="glossary.htm#i996725"><span class="xrefglossterm">object type</span></a>. See <a href="#CBBEAGHF">"Object Tables"</a>.</p>
</li>
</ul>
<p>You can create a relational table with the following organizational characteristics:</p>
<ul>
<li>
<p>A <a href="glossary.htm#CHDBJDCA"><span class="xrefglossterm">heap-organized table</span></a> does not store rows in any particular order. The <code dir="ltr">CREATE TABLE</code> statement creates a heap-organized table by default.</p>
</li>
<li>
<p>An <a href="glossary.htm#CHDJJFII"><span class="xrefglossterm">index-organized table</span></a> orders rows according to the <a id="sthref77"></a>primary key values. For some applications, index-organized tables enhance performance and use disk space more efficiently. See <a href="indexiot.htm#CBBJEBIH">"Overview of Index-Organized Tables"</a>.</p>
</li>
<li>
<p><a id="sthref78"></a><a id="sthref79"></a>An <span class="bold">external table</span> is a read-only table whose metadata is stored in the database but whose data in stored outside the database. See <a href="#CBBBCHFC">"External Tables"</a>.</p>
</li>
</ul>
<p><a id="sthref80"></a>A table is either <span class="bold">permanent</span> or <span class="bold">temporary</span>. A permanent table definition and data persist across sessions. A <a id="sthref81"></a><a href="glossary.htm#CHDBJHFE"><span class="xrefglossterm">temporary table</span></a> <a id="sthref82"></a>definition persists in the same way as a permanent table definition, but the data exists only for the duration of a <a href="glossary.htm#i432826"><span class="xrefglossterm">transaction</span></a> or <a href="glossary.htm#i432744"><span class="xrefglossterm">session</span></a>. Temporary tables are useful in applications where a <a id="sthref83"></a><a id="sthref84"></a>result set must be held temporarily, perhaps because the result is constructed by running multiple operations.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BABBBHAF">Columns and Rows</a></p>
</li>
<li>
<p><a href="#BABCFICD">Example: CREATE TABLE and ALTER TABLE Statements</a></p>
</li>
<li>
<p><a href="#CBBCFGEJ">Oracle Data Types</a></p>
</li>
<li>
<p><a href="#BABEHIIB">Integrity Constraints</a></p>
</li>
<li>
<p><a href="#CBBEAGHF">Object Tables</a></p>
</li>
<li>
<p><a href="#CBBBADBI">Temporary Tables</a></p>
</li>
<li>
<p><a href="#CBBBCHFC">External Tables</a></p>
</li>
<li>
<p><a href="#i20438">Table Storage</a></p>
</li>
<li>
<p><a href="#CBBFAAII">Table Compression</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMQS082" href="../../server.112/e10897/schema.htm#ADMQS082"><span class="italic">Oracle Database 2 Day DBA</span></a> and <a class="olink ADMIN015" href="../../server.112/e25494/tables.htm#ADMIN015"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn how to manage tables</div>
<a id="BABBBHAF"></a>
<div id="CNCPT88806" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Columns and Rows</h3>
<p>A table definition includes a <span class="bold">table name</span> and set of columns. <a id="sthref85"></a>A <a href="glossary.htm#CBACIBFC"><span class="xrefglossterm">column</span></a> identifies an attribute of the entity described by the table. For example, the column <code dir="ltr">employee_id</code> in the <code dir="ltr">employees</code> table refers to the employee ID attribute of an employee entity.<a id="sthref86"></a></p>
<p>In general, you give each column a <span class="bold">column name</span>, a <a href="glossary.htm#CHDCCIHA"><span class="xrefglossterm">data type</span></a>, and a <span class="bold">width</span> when you create a table. For example, the data type for <code dir="ltr">employee_id</code> is <code dir="ltr">NUMBER(6)</code>, indicating that this column can only contain numeric data up to 6 digits in width. The width can be predetermined by the data type, as with <code dir="ltr">DATE</code>.</p>
<p>A table can contain a <a id="sthref87"></a><a id="sthref88"></a><a href="glossary.htm#CHDIBJGA"><span class="xrefglossterm">virtual column</span></a>, which unlike a nonvirtual column does not consume disk space. The database derives the values in a virtual column on demand by computing a set of user-specified <a href="glossary.htm#CHDGHBJB"><span class="xrefglossterm">expressions</span></a> or functions. For example, the virtual column <code dir="ltr">income</code> could be a function of the <code dir="ltr">salary</code> and <code dir="ltr">commission_pct</code> columns.</p>
<p>After you create a table, you can insert, query, delete, and update rows using SQL. A <a id="sthref89"></a><a href="glossary.htm#i432693"><span class="xrefglossterm">row</span></a> is a collection of column information corresponding to a record in a table. For example, a row in the <code dir="ltr">employees</code> table describes the attributes of a specific employee.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN12494" href="../../server.112/e25494/tables.htm#ADMIN12494"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn how to manage virtual columns</div>
</div>
<!-- class="sect2" -->
<a id="BABCFICD"></a>
<div id="CNCPT88807" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Example: CREATE TABLE and ALTER TABLE Statements</h3>
<p>The Oracle SQL command to create a table <a id="sthref90"></a>is <code dir="ltr">CREATE TABLE</code>. <a href="#CBBEHJCH">Example 2-1</a> shows the <code dir="ltr">CREATE TABLE</code> statement for the <code dir="ltr">employees</code> table in the <code dir="ltr">hr</code> sample schema. The statement specifies columns such as <code dir="ltr">employee_id</code>, <code dir="ltr">first_name</code>, and so on, specifying a data type such as <code dir="ltr">NUMBER</code> or <code dir="ltr">DATE</code> for each column.</p>
<div id="CNCPT88808" class="example">
<p class="titleinexample"><a id="CBBEHJCH"></a>Example 2-1 CREATE TABLE employees</p>
<pre dir="ltr">
CREATE TABLE employees
    ( employee_id    NUMBER(6)
    , first_name     VARCHAR2(20)
    , last_name      VARCHAR2(25)
         CONSTRAINT     emp_last_name_nn  NOT NULL
    , email          VARCHAR2(25)
        CONSTRAINT     emp_email_nn  NOT NULL
    , phone_number   VARCHAR2(20)
    , hire_date      DATE
        CONSTRAINT     emp_hire_date_nn  NOT NULL
    , job_id         VARCHAR2(10)
        CONSTRAINT     emp_job_nn  NOT NULL
    , salary         NUMBER(8,2)
    , commission_pct NUMBER(2,2)
    , manager_id     NUMBER(6)
    , department_id  NUMBER(4)
    , CONSTRAINT     emp_salary_min
                     CHECK (salary &gt; 0)
    , CONSTRAINT     emp_email_uk
                     UNIQUE (email)
    ) ;
</pre></div>
<!-- class="example" -->
<p><a href="#BABCDDEF">Example 2-2</a> shows an <code dir="ltr">ALTER TABLE</code> statement that adds <a href="glossary.htm#CHDBFDIE"><span class="xrefglossterm">integrity constraints</span></a> to the <code dir="ltr">employees</code> table. Integrity constraints enforce business rules and prevent the entry of invalid information into tables.</p>
<div id="CNCPT89156" class="example">
<p class="titleinexample"><a id="BABCDDEF"></a>Example 2-2 ALTER TABLE employees</p>
<pre dir="ltr">
ALTER TABLE employees
ADD ( CONSTRAINT     emp_emp_id_pk
                       PRIMARY KEY (employee_id)
    , CONSTRAINT     emp_dept_fk
                       FOREIGN KEY (department_id)
                         REFERENCES departments
    , CONSTRAINT     emp_job_fk
                       FOREIGN KEY (job_id)
                         REFERENCES jobs (job_id)
    , CONSTRAINT     emp_manager_fk
                       FOREIGN KEY (manager_id)
                         REFERENCES employees
    ) ;
</pre></div>
<!-- class="example" -->
<p><a href="#CBBHDADC">Example 2-3</a> shows 8 rows and 6 columns of the <code dir="ltr">hr.employees</code> table.</p>
<div id="CNCPT88809" class="example">
<p class="titleinexample"><a id="CBBHDADC"></a>Example 2-3 Rows in the employees Table</p>
<pre dir="ltr">
EMPLOYEE_ID FIRST_NAME  LAST_NAME      SALARY COMMISSION_PCT DEPARTMENT_ID
----------- ----------- ------------- ------- -------------- -------------
        100 Steven      King            24000                           90
        101 Neena       Kochhar         17000                           90
        102 Lex         De Haan         17000                           90
        103 Alexander   Hunold           9000                           60
        107 Diana       Lorentz          4200                           60
        149 Eleni       Zlotkey         10500             .2            80
        174 Ellen       Abel            11000             .3            80
        178 Kimberely   Grant            7000            .15
</pre></div>
<!-- class="example" -->
<p><a id="sthref91"></a>The output in <a href="#CBBHDADC">Example 2-3</a> illustrates some of the following important characteristics of tables, columns, and rows:</p>
<ul>
<li>
<p>A row of the table describes the attributes of one employee: name, salary, department, and so on. For example, the first row in the output shows the record for the employee named Steven King.</p>
</li>
<li>
<p>A column describes an attribute of the employee. In the example, the <code dir="ltr">employee_id</code> column is the <a id="sthref92"></a><a id="sthref93"></a><a href="glossary.htm#i432585"><span class="xrefglossterm">primary key</span></a>, which means that every employee is uniquely identified by employee ID. Any two employees are guaranteed not to have the same employee ID.</p>
</li>
<li>
<p>A non-key column can contain rows with identical values. In the example, the salary value for employees 101 and 102 is the same: <code dir="ltr">17000</code>.</p>
</li>
<li>
<p>A <a id="sthref94"></a><a href="glossary.htm#i996900"><span class="xrefglossterm">foreign key</span></a> column refers to a primary or unique key in the same table or a different table. In this example, the value of <code dir="ltr">90</code> in <code dir="ltr">department_id</code> corresponds to the <code dir="ltr">department_id</code> column of the <code dir="ltr">departments</code> table.</p>
</li>
<li>
<p><a id="sthref95"></a>A <span class="bold">field</span> is the intersection of a row and column. It can contain only one value. For example, the field for the department ID of employee 104 contains the value <code dir="ltr">60</code>.</p>
</li>
<li>
<p>A field can lack a value. In this case, the field is said to contain <a id="sthref96"></a>a <a href="glossary.htm#i432506"><span class="xrefglossterm">null</span></a> value. The value of the <code dir="ltr">commission_pct</code> column for employee 100 is null, whereas the value in the field for employee 149 is <code dir="ltr">.2</code>. A column allows nulls unless <a id="sthref97"></a>a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> or primary key integrity constraint has been defined on this column, in which case no row can be inserted without a value for this column.<a id="sthref98"></a><a id="sthref99"></a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF01402" href="../../server.112/e41084/statements_7002.htm#SQLRF01402"><span class="italic">Oracle Database SQL Language Reference</span></a> for <code dir="ltr">CREATE TABLE</code> syntax and semantics</div>
</div>
<!-- class="sect2" -->
<a id="CBBCFGEJ"></a>
<div id="CNCPT113" class="sect2">
<h3 class="sect2">Oracle Data Types</h3>
<p><a id="sthref100"></a>Each column has a <span class="bold">data type</span>, which is associated with a specific storage format, constraints, and valid range of values. The data type of a value associates a fixed set of properties with the value. These properties cause Oracle Database to treat values of one data type differently from values of another. For example, you can multiply values of the <code dir="ltr">NUMBER</code> data type, but not values of the <code dir="ltr">RAW</code> data type.</p>
<p>When you create a table, you must specify a data type for each of its columns. Each value subsequently inserted in a column assumes the column data type.</p>
<p>Oracle Database provides several built-in <a id="sthref101"></a>data types. The most commonly used data types fall into the following categories:</p>
<ul>
<li>
<p><a href="#CBBEICCJ">Character Data Types</a></p>
</li>
<li>
<p><a href="#CBBFFHEB">Numeric Data Types</a></p>
</li>
<li>
<p><a href="#CBBGJHJC">Datetime Data Types</a></p>
</li>
<li>
<p><a href="#CBBBHABC">Rowid Data Types</a></p>
</li>
<li>
<p><a href="#CBBIIIED">Format Models and Data Types</a></p>
</li>
</ul>
<p>Other important categories of built-in types include raw, large objects (LOBs), and collections. <a id="sthref102"></a><a id="sthref103"></a><a id="sthref104"></a><a id="sthref105"></a>PL/SQL has data types for constants and variables, which include <code dir="ltr">BOOLEAN</code>, <a id="sthref106"></a>reference types, <a id="sthref107"></a>composite types (records), and <a id="sthref108"></a>user-defined types.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="cncptdev.htm#CHDHBGHD">"Overview of LOBs"</a></p>
</li>
<li>
<p><a class="olink SQLRF0021" href="../../server.112/e41084/sql_elements001.htm#SQLRF0021"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn about built-in SQL data types</p>
</li>
<li>
<p><a class="olink LNPLS003" href="../../appdev.112/e25519/datatypes.htm#LNPLS003"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> to learn about PL/SQL data types</p>
</li>
<li>
<p><a class="olink ADFNS0002" href="../../appdev.112/e41502/adfns_sqltypes.htm#ADFNS0002"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for information about how to use the built-in data types</p>
</li>
</ul>
</div>
<a id="CBBEICCJ"></a>
<div id="CNCPT213" class="sect3">
<h4 class="sect3">Character Data Types</h4>
<p><a id="sthref109"></a><a id="sthref110"></a>Character data types store character (alphanumeric) data in strings. The most commonly used character data <a id="sthref111"></a>type is<a id="sthref112"></a> <code dir="ltr">VARCHAR2</code>, which is the most efficient option for storing character data.</p>
<p>The byte values correspond to the character encoding scheme, generally called a<a id="sthref113"></a> <span class="bold">character set</span> <a id="sthref114"></a>or <span class="bold">code page</span>. The database character set is established at database creation. Examples of character sets are 7-bit <a id="sthref115"></a>ASCII, <a id="sthref116"></a>EBCDIC, and<a id="sthref117"></a><a id="sthref118"></a> Unicode UTF-8.</p>
<p>The length semantics of character data types can be measured in bytes or characters. <span class="glossaryterm"><a id="sthref119"></a><a id="sthref120"></a>Byte semantics</span> treat strings as a sequence of bytes. This is the default for character data types. <span class="glossaryterm">Character semantics</span> treat strings as a sequence of characters. A character is technically a <a id="sthref121"></a>code point of the database character set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="cncptdev.htm#CHDHHEDD">"Character Sets"</a></p>
</li>
<li>
<p><a class="olink TDDDG31000" href="../../appdev.112/e10766/tdddg_objects.htm#TDDDG31000"><span class="italic">Oracle Database 2 Day Developer's Guide</span></a> and <a class="olink ADFNS00302" href="../../appdev.112/e41502/adfns_sqltypes.htm#ADFNS00302"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> and to learn how to select a character data type</p>
</li>
</ul>
</div>
<div id="CNCPT1821" class="sect4"><a id="sthref122"></a>
<h5 class="sect4">VARCHAR2 and CHAR Data Types</h5>
<p>The <code dir="ltr">VARCHAR2</code> data type stores variable-length character literals. The terms <span class="bold">literal</span> and <span class="bold">constant value</span> are synonymous and refer to a fixed data value. For example, <code dir="ltr">'LILA'</code>, <code dir="ltr">'St. George Island'</code>, and <code dir="ltr">'101'</code> are all character literals; <code dir="ltr">5001</code> is a numeric literal. Character literals are enclosed in single quotation marks so that the database can distinguish them from schema object names.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This manual uses the terms <span class="bold">text literal</span>, <span class="bold">character literal</span>, and <span class="bold">string</span> interchangeably.</div>
<p>When you create a table with a <code dir="ltr">VARCHAR2</code> column, you specify a maximum string length. In <a href="#CBBEHJCH">Example 2-1</a>, the <code dir="ltr">last_name</code> column has a data type of <code dir="ltr">VARCHAR2(25)</code>, which means that any name stored in the column can have a maximum of 25 bytes.</p>
<p>For each row, Oracle Database stores each value in the column as a variable-length field unless a value exceeds the maximum length, in which case the database returns an error. For example, in a single-byte character set, if you enter 10 characters for the <code dir="ltr">last_name</code> column value in a row, then the column in the row piece stores only 10 characters (10 bytes), not 25. Using <code dir="ltr">VARCHAR2</code> reduces space consumption.</p>
<p><code dir="ltr"><span class="codeinlineitalic"><a id="sthref123"></a><a id="sthref124"></a></span></code>In contrast to <code dir="ltr">VARCHAR2</code>, <code dir="ltr">CHAR</code> stores fixed-length character strings. When you create a table with a <code dir="ltr">CHAR</code> column, the column requires a string length. The default is 1 byte. The database uses blanks to pad the value to the specified length.</p>
<p>Oracle Database compares <code dir="ltr">VARCHAR2</code> values using nonpadded comparison semantics and compares <code dir="ltr">CHAR</code> values using blank-padded comparison semantics.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF51040" href="../../server.112/e41084/sql_elements002.htm#SQLRF51040"><span class="italic">Oracle Database SQL Language Reference</span></a> for details about blank-padded and nonpadded comparison semantics</div>
</div>
<!-- class="sect4" -->
<div id="CNCPT1825" class="sect4"><a id="sthref125"></a>
<h5 class="sect4">NCHAR and NVARCHAR2 Data Types</h5>
<p>The <code dir="ltr">NCHAR</code> and <code dir="ltr">NVARCHAR2</code> <a id="sthref126"></a><a id="sthref127"></a><a id="sthref128"></a><a id="sthref129"></a>data types store Unicode character data. <span class="bold">Unicode</span> is a universal encoded character set that can store information in any language using a single character set. <code dir="ltr">NCHAR</code> stores fixed-length character strings that correspond to the national character set, whereas <code dir="ltr">NVARCHAR2</code> stores variable length character strings.</p>
<p>You specify a national character set when creating a database. The character set of <code dir="ltr">NCHAR</code> and <code dir="ltr">NVARCHAR2</code> data types must be either <code dir="ltr">AL16UTF16</code> or <code dir="ltr">UTF8</code>. Both character sets use Unicode encoding.</p>
<p>When you create a table with an <code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code> column, the maximum size is always in character length semantics. Character length semantics is the default and only length semantics for <code dir="ltr">NCHAR</code> or <code dir="ltr">NVARCHAR2</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NLSPG0071" href="../../server.112/e10729/ch7progrunicode.htm#NLSPG0071"><span class="italic">Oracle Database Globalization Support Guide</span></a> for information about Oracle's globalization support feature</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CBBFFHEB"></a>
<div id="CNCPT313" class="sect3">
<h4 class="sect3">Numeric Data Types</h4>
<p><a id="sthref130"></a><a id="sthref131"></a>The Oracle Database numeric data types store fixed and floating-point numbers, zero, and infinity. Some numeric types also store values that are the undefined result of an operation, which is known as "not a number" or NAN.</p>
<p>Oracle Database stores numeric data in variable-length format. Each value is stored in scientific notation, with 1 byte used to store the exponent. The database uses up to 20 bytes to store the <span class="bold">mantissa</span>, which is the part of a floating-point number that contains its significant digits. Oracle Database does not store leading and trailing zeros.</p>
<div id="CNCPT1832" class="sect4"><a id="sthref132"></a>
<h5 class="sect4">NUMBER Data Type</h5>
<p><a id="sthref133"></a><a id="sthref134"></a>The <code dir="ltr">NUMBER</code> data type stores fixed and floating-point numbers. The database can store numbers of virtually any magnitude. This data is guaranteed to be portable among different operating systems running Oracle Database. The <code dir="ltr">NUMBER</code> data type is recommended for most cases in which you must store numeric data.</p>
<p>You specify a fixed-point number in the form <code dir="ltr">NUMBER</code><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">p</span></code><code dir="ltr">,</code><code dir="ltr"><span class="codeinlineitalic">s</span></code><code dir="ltr">)</code>, where <code dir="ltr"><span class="codeinlineitalic">p</span></code> and <code dir="ltr"><span class="codeinlineitalic">s</span></code> refer to the following characteristics:</p>
<ul>
<li>
<p>Precision</p>
<p>The <span class="bold">precision</span> specifies the total number of digits. If a precision is not specified, then the column stores the values exactly as provided by the application without any rounding.</p>
</li>
<li>
<p>Scale</p>
<p>The <span class="bold">scale</span> specifies the number of digits from the decimal point to the least significant digit. <span class="bold">Positive scale</span> counts digits to the right of the decimal point up to and including the least significant digit. <span class="bold">Negative scale</span> counts digits to the left of the decimal point up to but not including the least significant digit. If you specify a precision without a scale, as in <code dir="ltr">NUMBER(6)</code>, then the scale is 0.</p>
</li>
</ul>
<p>In <a href="#CBBEHJCH">Example 2-1</a>, the <code dir="ltr">salary</code> column is type <code dir="ltr">NUMBER(8,2)</code>, so the precision is 8 and the scale is 2. Thus, the database stores a salary of 100,000 as <code dir="ltr">100000.00</code>.</p>
</div>
<!-- class="sect4" -->
<div id="CNCPT1834" class="sect4"><a id="sthref135"></a>
<h5 class="sect4">Floating-Point Numbers</h5>
<p>Oracle Database provides two <a id="sthref136"></a>numeric data types exclusively for floati<a id="sthref137"></a>ng-point numbers: <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code>. These types support all of the basic functionality provided by the <code dir="ltr">NUMBER</code> data type. However, while <code dir="ltr">NUMBER</code> uses decimal precision, <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> use binary precision, which enables faster arithmetic calculations and usually reduces storage requirements.</p>
<p><code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> are approximate numeric data types. They store approximate representations of decimal values, rather than exact representations. For example, the value 0.1 cannot be exactly represented by either <code dir="ltr">BINARY_DOUBLE</code> or <code dir="ltr">BINARY_FLOAT</code>. They are frequently used for scientific computations. Their behavior is similar to the data types <code dir="ltr">FLOAT</code> and <code dir="ltr">DOUBLE</code> in Java and XMLSchema.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF00222" href="../../server.112/e41084/sql_elements001.htm#SQLRF00222"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn about precision, scale, and other characteristics of numeric types</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CBBGJHJC"></a>
<div id="CNCPT413" class="sect3">
<h4 class="sect3">Datetime Data Types</h4>
<p><a id="sthref138"></a><a id="sthref139"></a>The <span class="bold">datetime</span> data types are<a id="sthref140"></a><a id="sthref141"></a> <code dir="ltr">DATE</code> and <code dir="ltr">TIMESTAMP</code>. Oracle Database provides comprehensive time zone support for time stamps.</p>
<div id="CNCPT88810" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref142"></a>
<h5 class="sect4">DATE Data Type</h5>
<p><a id="sthref143"></a><a id="sthref144"></a>The <code dir="ltr">DATE</code> data type stores date and time. Although datetimes can be represented in character or number data types, <code dir="ltr">DATE</code> has special associated properties. The <code dir="ltr">hire_date</code> column in <a href="#CBBEHJCH">Example 2-1</a> has a <code dir="ltr">DATE</code> data type.</p>
<p>The database stores dates internally as numbers. Dates are stored in fixed-length fields of 7 bytes each, corresponding to century, year, month, day, hour, minute, and second.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Dates fully support arithmetic operations, so you add to and subtract from dates just as you can with numbers. See <a class="olink ADFNS202" href="../../appdev.112/e41502/adfns_sqltypes.htm#ADFNS202"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a>.</div>
<p>The database displays dates according to the specified<a id="sthref145"></a><a id="sthref146"></a> <span class="bold">format model</span>. A format model is a character literal that describes the format of a datetime in a character string. The standard date format is <code dir="ltr">DD-MON-RR</code>, which displays dates in the form <code dir="ltr">01-JAN-11</code>.</p>
<p><a id="sthref147"></a><a id="sthref148"></a><code dir="ltr">RR</code> is similar to <code dir="ltr">YY</code> (the last two digits of the year), but the century of the return value varies according to the specified two-digit year and the last two digits of the current year. Assume that in 1999 the database displays <code dir="ltr">01-JAN-11</code>. If the date format uses <code dir="ltr">RR</code>, then <code dir="ltr">11</code> specifies <code dir="ltr">2011</code>, whereas if the format uses <code dir="ltr">YY</code>, then <code dir="ltr">11</code> specifies <code dir="ltr">1911</code>. You can change the default date format at both the <a href="glossary.htm#i432427"><span class="xrefglossterm">instance</span></a> and the <a href="glossary.htm#i432744"><span class="xrefglossterm">session</span></a> level.</p>
<p>Oracle Database stores time in 24-hour format&mdash;<code dir="ltr">HH:MI:SS</code>. If no time portion is entered, then by default the time in a date field is <code dir="ltr">00:00:00 A.M</code>. In a time-only entry, the date portion defaults to the first day of the current month.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADFNS182" href="../../appdev.112/e41502/adfns_sqltypes.htm#ADFNS182"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for more information about centuries and date format masks</p>
</li>
<li>
<p><a class="olink SQLRF00212" href="../../server.112/e41084/sql_elements004.htm#SQLRF00212"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about datetime format codes</p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" -->
<div id="CNCPT1841" class="sect4"><a id="sthref149"></a>
<h5 class="sect4">TIMESTAMP Data Type<a id="sthref150"></a></h5>
<p>The <code dir="ltr">TIMESTAMP</code> data type is an extension of the <code dir="ltr">DATE</code> <a id="sthref151"></a><a id="sthref152"></a>data type. It stores fractional seconds in addition to the information stored in the <code dir="ltr">DATE</code> data type. The <code dir="ltr">TIMESTAMP</code> data type is useful for storing precise time values, such as in applications that must track event order.</p>
<p><a id="sthref153"></a>The <code dir="ltr">DATETIME</code> data types <code dir="ltr">TIMESTAMP WITH TIME ZONE</code> and <code dir="ltr">TIMESTAMP WITH LOCAL TIME ZONE</code> are time-zone aware. When a user selects the data, the value is adjusted to the time zone of the user session. This data type is useful for collecting and evaluating date information across geographic regions.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF00203" href="../../server.112/e41084/sql_elements001.htm#SQLRF00203"><span class="italic">Oracle Database SQL Language Reference</span></a> for details about the syntax of creating and entering data in time stamp columns</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CBBBHABC"></a>
<div id="CNCPT88811" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Rowid Data Types</h4>
<p>Every row stored in the database has an address. Oracle Database uses <a id="sthref154"></a><a id="sthref155"></a>a <code dir="ltr">ROWID</code> data type to store the <a id="sthref156"></a><a id="sthref157"></a><a id="sthref158"></a><a id="sthref159"></a>address (<a href="glossary.htm#CHDEFIHG"><span class="xrefglossterm">rowid</span></a>) of every row in the database. Rowids fall into the following categories:</p>
<ul>
<li>
<p><span class="bold">Physical rowids</span> store the addresses of rows in heap-organized tables, table clusters, and table and index partitions.</p>
</li>
<li>
<p><span class="bold">Logical rowids</span> store the addresses of rows in index-organized tables.</p>
</li>
<li>
<p><span class="bold">Foreign rowids</span> are identifiers in foreign tables, such as DB2 tables accessed through a gateway. They are not standard Oracle Database rowids.</p>
</li>
</ul>
<p>A data type called the <span class="bold">universal rowid</span>, or<a id="sthref160"></a><a id="sthref161"></a> <code dir="ltr">UROWID</code>, supports all kinds of rowids.</p>
<div id="CNCPT88812" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref162"></a>
<h5 class="sect4">Use of Rowids</h5>
<p>Oracle Database uses rowids internally for the construction of indexes. A <a href="glossary.htm#BGBFAGFF"><span class="xrefglossterm">B-tree index</span></a>, which is the most common type, contains an ordered list of keys divided into ranges. Each key is associated with a rowid that points to the associated row's address for fast access. End users and application developers can also use rowids for several important functions:</p>
<ul>
<li>
<p>Rowids are the fastest means of accessing particular rows.</p>
</li>
<li>
<p>Rowids provide the ability to see how a table is organized.</p>
</li>
<li>
<p>Rowids are unique identifiers for rows in a given table.</p>
</li>
</ul>
<p>You can also create tables with columns defined using the <code dir="ltr">ROWID</code> data type. For example, you can define an exception table with a column of data type <code dir="ltr">ROWID</code> to store the rowids of rows that violate integrity constraints. Columns defined using the <code dir="ltr">ROWID</code> data type behave like other table columns: values can be updated, and so on.</p>
</div>
<!-- class="sect4" -->
<div id="CNCPT88813" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref163"></a>
<h5 class="sect4">ROWID Pseudocolumn</h5>
<p>Every table in an Oracle database has <a id="sthref164"></a>a <span class="bold">pseudocolumn</span> named <code dir="ltr">ROWID</code>. A pseudocolumn behaves like a table column, but is not actually stored in the table. You can select from pseudocolumns, but you cannot insert, update, or delete their values. A pseudocolumn is also similar to a <a id="sthref165"></a><a id="sthref166"></a>SQL <a href="glossary.htm#CHDEJCBB"><span class="xrefglossterm">function</span></a> without arguments. Functions without arguments typically return the same value for every row in the <a id="sthref167"></a><a id="sthref168"></a>result set, whereas pseudocolumns typically return a different value for each row.</p>
<p>Values of the <code dir="ltr">ROWID</code> pseudocolumn are strings representing the address of each row. These strings have the data type <code dir="ltr">ROWID</code>. This pseudocolumn is not evident when listing the structure of a table by executing <code dir="ltr">SELECT</code> or <code dir="ltr">DESCRIBE</code>, nor does the pseudocolumn consume space. However, the rowid of each row can be retrieved with a SQL query using the reserved word <code dir="ltr">ROWID</code> as a column name.</p>
<p><a href="#CBBFADGH">Example 2-4</a> queries the <code dir="ltr">ROWID</code> pseudocolumn to show the rowid of the row in the <code dir="ltr">employees</code> table for employee 100.</p>
<div id="CNCPT88814" class="example">
<p class="titleinexample"><a id="CBBFADGH"></a>Example 2-4 ROWID Pseudocolumn</p>
<pre dir="ltr">
SQL&gt; SELECT ROWID FROM employees WHERE employee_id = 100;
 
ROWID
------------------
AAAPecAAFAAAABSAAA
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="logical.htm#BABFFFCE">"Rowid Format"</a></p>
</li>
<li>
<p><a class="olink ADFNS00306" href="../../appdev.112/e41502/adfns_sqltypes.htm#ADFNS00306"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> to learn how to identify rows by address</p>
</li>
<li>
<p><a class="olink SQLRF50998" href="../../server.112/e41084/sql_elements001.htm#SQLRF50998"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn about rowid types</p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CBBIIIED"></a>
<div id="CNCPT88815" class="sect3">
<h4 class="sect3">Format Models and Data Types</h4>
<p><a id="sthref169"></a>A <span class="bold">format model</span> is a character literal that describes the format of datetime or numeric data stored in a character string. A format model does not change the internal representation of the value in the database.</p>
<p>When you convert a character string into a date or number, a format model determines how the database interprets the string. In SQL, you can use a format model as an argument of <a id="sthref170"></a><a id="sthref171"></a>the <code dir="ltr">TO_CHAR</code> and <code dir="ltr">TO_DATE</code> functions to format a value to be returned from the database or to format a value to be stored in the database.</p>
<p>The following statement selects the salaries of the employees in Department 80 and uses the <code dir="ltr">TO_CHAR</code> function to convert these salaries into character values with the format specified by the number format model <code dir="ltr">'$99,990.99'</code>:</p>
<pre dir="ltr">
SQL&gt; SELECT last_name employee, TO_CHAR(salary, '$99,990.99')
  2  FROM   employees
  3  WHERE  department_id = 80 AND last_name = 'Russell';
 
EMPLOYEE                  TO_CHAR(SAL
------------------------- -----------
Russell                    $14,000.00
</pre>
<p>The following example updates a hire date using the <code dir="ltr">TO_DATE</code> function with the format mask <code dir="ltr">'YYYY MM DD'</code> to convert the string <code dir="ltr">'1998 05 20'</code> to a <code dir="ltr">DATE</code> value:</p>
<pre dir="ltr">
SQL&gt; UPDATE employees
  2  SET hire_date = TO_DATE('1998 05 20','YYYY MM DD')
  3  WHERE last_name = 'Hunold';
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF00210" href="../../server.112/e41084/sql_elements004.htm#SQLRF00210"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn more about format models</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABEHIIB"></a>
<div id="CNCPT88816" class="sect2">
<h3 class="sect2">Integrity Constraints</h3>
<p><span class="bold">Integrity constraints</span> are <a id="sthref172"></a>named rules that restrict the values for one or more columns in a table. These rules prevent invalid data entry into tables. Also, constraints can prevent the deletion of a table when certain dependencies exist.</p>
<p>If a constraint is enabled, then the database checks data as it is entered or updated. Data that does not conform to the constraint is prevented from being entered. If a constraint is disabled, then data that does not conform to the constraint can be allowed to enter the database.</p>
<p>In <a href="#CBBEHJCH">Example 2-1</a>, the <code dir="ltr">CREATE TABLE</code> statement specifies <code dir="ltr">NOT NULL</code> constraints for the <code dir="ltr">last_name</code>, <code dir="ltr">email</code>, <code dir="ltr">hire_date</code>, and <code dir="ltr">job_id</code> columns. The constraint clauses identify the columns and the conditions of the constraint. These constraints ensure that the specified columns contain no null values. For example, an attempt to insert a new employee without a job ID generates an error.</p>
<p>You can create a constraint when or after you create a table. Constraints can be temporarily disabled if needed. The database stores constraints in the <a id="sthref173"></a><a href="glossary.htm#CHDJJJGD"><span class="xrefglossterm">data dictionary</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="datainte.htm#g20134">Chapter 5, "Data Integrity"</a> to learn about integrity constraints</p>
</li>
<li>
<p><a class="olink SQLRF52180" href="../../server.112/e41084/clauses002.htm#SQLRF52180"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn about SQL constraint clauses</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CBBEAGHF"></a>
<div id="CNCPT88817" class="sect2">
<h3 class="sect2">Object Tables</h3>
<p><a id="sthref174"></a><a id="sthref175"></a>An Oracle <span class="bold">object type</span> is a user-defined type with a name, attributes, and methods. Object types make it possible to model real-world entities such as customers and purchase orders as objects in the database.</p>
<p>An object type defines a logical structure, but does not create storage. <a href="#CBBCJGBD">Example 2-5</a> creates an object type named <code dir="ltr">department_typ</code>.</p>
<div id="CNCPT88818" class="example">
<p class="titleinexample"><a id="CBBCJGBD"></a>Example 2-5 Object Type</p>
<pre dir="ltr">
CREATE TYPE department_typ AS OBJECT
   ( d_name     VARCHAR2(100),
     d_address  VARCHAR2(200) );
/
</pre></div>
<!-- class="example" -->
<p><a id="sthref176"></a><a id="sthref177"></a>An <span class="bold">object table</span> is a special kind of table in which each row represents an object. The <code dir="ltr">CREATE TABLE</code> statement in <a href="#CBBEHJEE">Example 2-6</a> creates an object table named <code dir="ltr">departments_obj_t</code> of the object type <code dir="ltr">department_typ</code>. The attributes (columns) of this table are derived from the definition of the object type. The <code dir="ltr">INSERT</code> statement inserts a row into this table.</p>
<div id="CNCPT88819" class="example">
<p class="titleinexample"><a id="CBBEHJEE"></a>Example 2-6 Object Table</p>
<pre dir="ltr">
CREATE TABLE departments_obj_t OF department_typ;
INSERT INTO departments_obj_t 
  VALUES ('hr', '10 Main St, Sometown, CA');
</pre></div>
<!-- class="example" -->
<p>Like a relational column, an object table can contain rows of just one kind of thing, namely, object instances of the same declared type as the table. By default, every row object in an object table has an associated logical <span class="bold">object identifier (OID)</span> that uniquely identifies it in an object table. The OID column of an object table is a hidden column.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADOBJ001" href="../../appdev.112/e11822/adobjint.htm#ADOBJ001"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a> to learn about object-relational features in Oracle Database</p>
</li>
<li>
<p><a class="olink SQLRF01506" href="../../server.112/e41084/statements_8001.htm#SQLRF01506"><span class="italic">Oracle Database SQL Language Reference</span></a> for <code dir="ltr">CREATE TYPE</code> syntax and semantics</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CBBBADBI"></a>
<div id="CNCPT1138" class="sect2">
<h3 class="sect2">Temporary Tables</h3>
<p><a id="sthref178"></a><a id="sthref179"></a>Oracle Database <span class="bold">temporary tables</span> hold data that exists only for the duration of a transaction or session. Data in a temporary table is private to the session, which means that each session can only see and modify its own data.</p>
<p>Temporary tables are useful in applications where a <a id="sthref180"></a><a id="sthref181"></a>result set must be buffered. For example, a scheduling application enables college students to create optional semester course schedules. Each schedule is represented by a row in a temporary table. During the session, the schedule data is private. When the student decides on a schedule, the application moves the row for the chosen schedule to a permanent table. At the end of the session, the schedule data in the temporary data is automatically dropped.</p>
<div id="CNCPT88820" class="sect3"><a id="sthref182"></a>
<h4 class="sect3">Temporary Table Creation</h4>
<p>The<a id="sthref183"></a> <code dir="ltr">CREATE GLOBAL TEMPORARY TABLE</code> statement creates a temporary table. The <code dir="ltr">ON COMMIT</code> clause specifies whether the table data is transaction-specific (default) or session-specific.</p>
<p>Unlike temporary tables in some other relational databases, when you create a temporary table in an Oracle database, you create a static table definition. The temporary table is a persistent object described in the data dictionary, but appears empty until your session inserts data into the table. You create a temporary table for the database itself, not for every PL/SQL <a href="glossary.htm#CHDJCAFC"><span class="xrefglossterm">stored procedure</span></a>.</p>
<p>Because temporary tables are statically defined, you can create indexes for them with the<a id="sthref184"></a> <code dir="ltr">CREATE INDEX</code> statement. Indexes created on temporary tables are also temporary. The data in the index has the same session or transaction scope as the data in the temporary table. You can also create a <a href="glossary.htm#i432872"><span class="xrefglossterm">view</span></a> or <a href="glossary.htm#i432836"><span class="xrefglossterm">trigger</span></a> on a temporary table.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADMIN11633" href="../../server.112/e25494/tables.htm#ADMIN11633"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn how create and manage temporary tables</p>
</li>
<li>
<p><a class="olink SQLRF01402" href="../../server.112/e41084/statements_7002.htm#SQLRF01402"><span class="italic">Oracle Database SQL Language Reference</span></a> for <code dir="ltr">CREATE GLOBAL TEMPORARY TABLE</code> syntax and semantics</p>
</li>
<li>
<p><a href="schemaob.htm#i20690">"Overview of Views"</a> and <a href="srvrside.htm#i13313">"Overview of Triggers"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="CNCPT1139" class="sect3"><a id="sthref185"></a>
<h4 class="sect3">Segment Allocation in Temporary Tables</h4>
<p><a id="sthref186"></a><a id="sthref187"></a>Like permanent tables, temporary tables are defined in the data dictionary. Temporary segments are allocated when data is first inserted. Until data is loaded in a session the table appears empty. Temporary segments are deallocated at the end of the transaction for transaction-specific temporary tables and at the end of the session for session-specific temporary tables.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="logical.htm#i5696">"Temporary Segments"</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CBBBCHFC"></a>
<div id="CNCPT1141" class="sect2">
<h3 class="sect2">External Tables<a id="sthref188"></a></h3>
<p>An <span class="bold">external table</span> accesses data in external sources as if this data were in a table in the database. You can use SQL, PL/SQL, and Java to query the external data.</p>
<p>External tables are useful for querying flat files. For example, a SQL-based application may need to access records in a text file. The records are in the following form:</p>
<pre dir="ltr">
100,Steven,King,SKING,515.123.4567,17-JUN-03,AD_PRES,31944,150,90
101,Neena,Kochhar,NKOCHHAR,515.123.4568,21-SEP-05,AD_VP,17000,100,90 
102,Lex,De Haan,LDEHAAN,515.123.4569,13-JAN-01,AD_VP,17000,100,90
</pre>
<p>You could create an external table, copy the file to the location specified in the external table definition, and use SQL to query the records in the text file.</p>
<p>External tables are also valuable for performing <a href="glossary.htm#CHDCDBDC"><span class="xrefglossterm">ETL</span></a> tasks common in <a href="glossary.htm#CHDCBJAD"><span class="xrefglossterm">data warehouse</span></a> environments. For example, external tables enable the pipelining of the data loading phase with the transformation phase, eliminating the need to stage data inside the database in preparation for further processing inside the database. See <a href="cmntopc.htm#i30644">"Overview of Data Warehousing and Business Intelligence"</a>.</p>
<div id="CNCPT88821" class="sect3"><a id="sthref189"></a>
<h4 class="sect3">External Table Creation</h4>
<p>Internally, creating an external table means creating metadata in the data dictionary. Unlike an ordinary table, an external table does not describe data stored in the database, nor does it describe how data is stored externally. Rather, external table metadata describes how the external table layer must <span class="italic">present</span> data to the database.</p>
<p>A <code dir="ltr">CREATE TABLE ... ORGANIZATION EXTERNAL</code> statement has two parts. The <span class="bold">external table definition</span> describes the column types. This definition is like a view that enables SQL to query external data without loading it into the database. The second part of the statement maps the external data to the columns.</p>
<p>External tables are read-only unless created with <code dir="ltr">CREATE TABLE AS SELECT</code> with the <code dir="ltr">ORACLE_DATAPUMP</code> access driver. Restrictions for external tables include no support for indexed columns, virtual columns, and column objects.</p>
</div>
<!-- class="sect3" -->
<div id="CNCPT88822" class="sect3"><a id="sthref190"></a>
<h4 class="sect3">External Table Access Drivers</h4>
<p><a id="sthref191"></a>An <span class="bold">access driver</span> is an <a id="sthref192"></a>API that interprets the external data for the database. The access driver runs inside the database, which uses the driver to read the data in the external table. The access driver and the external table layer are responsible for performing the transformations required on the data in the data file so that it matches the external table definition. <a href="#CBBGABBH">Figure 2-4</a> represents how external data is accessed.</p>
<div id="CNCPT88823" class="figure">
<p class="titleinfigure"><a id="CBBGABBH"></a>Figure 2-4 External Tables</p>
<img width="504" height="293" src="img/cncpt231.gif" alt="Description of Figure 2-4 follows" /><br />
<a id="sthref193" href="img_text/cncpt231.htm">Description of "Figure 2-4 External Tables"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Oracle provides the <code dir="ltr">ORACLE_LOADER</code> (default) and <code dir="ltr">ORACLE_DATAPUMP</code> access drivers for external tables. For both drivers, the external files are not Oracle data files.</p>
<p><code dir="ltr">ORACLE_LOADER</code> enables read-only access to external files using SQL*Loader. You cannot create, update, or append to an external file using the <code dir="ltr">ORACLE_LOADER</code> driver.</p>
<p>The <code dir="ltr">ORACLE_DATAPUMP</code> driver enables you to <span class="bold">unload</span> external data. This operation involves reading data from the database and inserting the data into an external table, represented by one or more external files. After external files are created, the database cannot update or append data to them. The driver also enables you to <span class="bold">load</span> external data, which involves reading an external table and loading its data into a database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADMIN01507" href="../../server.112/e25494/tables.htm#ADMIN01507"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn about managing external tables, external connections, and <a href="glossary.htm#CHDFHJCC"><span class="xrefglossterm">directory objects</span></a></p>
</li>
<li>
<p><a class="olink SUTIL011" href="../../server.112/e22490/et_concepts.htm#SUTIL011"><span class="italic">Oracle Database Utilities</span></a> to learn about external tables</p>
</li>
<li>
<p><a class="olink SQLRF54502" href="../../server.112/e41084/statements_7002.htm#SQLRF54502"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about creating and querying external tables</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i20438"></a>
<div id="CNCPT1128" class="sect2">
<h3 class="sect2">Table Storage</h3>
<p><a id="sthref194"></a><a id="sthref195"></a>Oracle Database uses a <a href="glossary.htm#CHDDJICF"><span class="xrefglossterm">data segment</span></a> in a tablespace to hold table data. As explained in <a href="logical.htm#i10303">"User Segments"</a>, a segment contains <a href="glossary.htm#CHDEBDJI"><span class="xrefglossterm">extents</span></a> made up of <a href="glossary.htm#CHDBACIH"><span class="xrefglossterm">data blocks</span></a>.</p>
<p>The data segment for a table (or cluster data segment, when dealing with a <a href="glossary.htm#CHDJGGGF"><span class="xrefglossterm">table cluster</span></a>) is located in either the default tablespace of the table owner or in a tablespace named in the <code dir="ltr">CREATE TABLE</code> statement.</p>
<a id="CHDJHGEF"></a>
<div id="CNCPT1131" class="sect3">
<h4 class="sect3">Table Organization</h4>
<p>By default, a table is organized as a <span class="bold">heap</span>, which means that the database places rows where they fit best rather than in a user-specified order. Thus, a heap-organized table is an unordered collection of rows. As users add rows, the database places the rows in the first available free space in the data segment. Rows are not guaranteed to be retrieved in the order in which they were inserted.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Index-organized tables use a different principle of organization. See <a href="indexiot.htm#CBBJEBIH">"Overview of Index-Organized Tables"</a>.</div>
<p>The <code dir="ltr">hr.departments</code> table is a heap-organized table. It has columns for department ID, name, manager ID, and location ID. As rows are inserted, the database stores them wherever they fit. A data block in the table segment might contain the unordered rows shown in <a href="#CBBFDFCG">Example 2-7</a>.</p>
<div id="CNCPT88824" class="example">
<p class="titleinexample"><a id="CBBFDFCG"></a>Example 2-7 Rows in Departments Table</p>
<pre dir="ltr">
50,Shipping,121,1500
120,Treasury,,1700
70,Public Relations,204,2700
30,Purchasing,114,1700
130,Corporate Tax,,1700
10,Administration,200,1700
110,Accounting,205,1700
</pre></div>
<!-- class="example" -->
<p><a id="sthref196"></a><a id="sthref197"></a><a id="sthref198"></a>The column order is the same for all rows in a table. The database usually stores columns in the order in which they were listed in the <code dir="ltr">CREATE TABLE</code> statement, but this order is not guaranteed. For example, if a table has a column of type <code dir="ltr">LONG</code>, then Oracle Database always stores this column last in the row. Also, if you add a new column to a table, then the new column becomes the last column stored.</p>
<p>A table can contain <a id="sthref199"></a><a id="sthref200"></a>a <span class="bold">virtual column</span>, which unlike normal columns does not consume space on disk. The database derives the values in a virtual column on demand by computing a set of user-specified expressions or functions. You can index virtual columns, collect <a id="sthref201"></a><a id="sthref202"></a>statistics on them, and create integrity constraints. Thus, virtual columns are much like nonvirtual columns.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF54465" href="../../server.112/e41084/statements_7002.htm#SQLRF54465"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn about virtual columns</div>
</div>
<!-- class="sect3" -->
<a id="i4383"></a>
<div id="CNCPT1129" class="sect3">
<h4 class="sect3">Row Storage</h4>
<p>The database stores rows in data blocks. <a id="sthref203"></a><a id="sthref204"></a>Each <a id="sthref205"></a>row of a table containing data for less than 256 columns is contained in one or more <span class="bold">row pieces</span>.</p>
<p>If possible, Oracle Database stores each row as one row piece. However, if all of the row data cannot be inserted into a single data block, or if an update to an existing row causes the row to outgrow its data block, then the database stores the row using multiple row pieces (see <a href="logical.htm#CIHEIFJC">"Data Block Format"</a>).</p>
<p><a id="sthref206"></a>Rows in a table cluster contain the same information as rows in nonclustered tables. Additionally, rows in a table cluster contain information that references the cluster key to which they belong.</p>
</div>
<!-- class="sect3" -->
<a id="i20957"></a>
<div id="CNCPT1130" class="sect3">
<h4 class="sect3">Rowids of Row Pieces</h4>
<p><a id="sthref207"></a><a id="sthref208"></a>A <a href="glossary.htm#CHDEFIHG"><span class="xrefglossterm">rowid</span></a> is effectively a 10-byte physical address of a row. As explained in <a href="#CBBBHABC">"Rowid Data Types"</a>, every row in a heap-organized table has a rowid unique to this table that corresponds to the physical address of a row piece. For table clusters, rows in different tables that are in the same data block can have the same rowid.</p>
<p>Oracle Database uses rowids internally for the construction of indexes. For example, each key in a <a id="sthref209"></a><a id="sthref210"></a>B-tree index is associated with a rowid that points to the address of the associated row for fast access (see <a href="indexiot.htm#CBBECABB">"B-Tree Indexes"</a>). Physical rowids provide the fastest possible access to a table row, enabling the database to retrieve a row in as little as a single I/O.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="logical.htm#BABFFFCE">"Rowid Format"</a></div>
</div>
<!-- class="sect3" -->
<div id="CNCPT1134" class="sect3"><a id="sthref211"></a>
<h4 class="sect3">Storage of Null Values</h4>
<p><a id="sthref212"></a>A <span class="bold">null</span> is the absence of a value in a column. Nulls indicate missing, unknown, or inapplicable data.</p>
<p>Nulls are stored in the database if they fall between columns with data values. In these cases, they require 1 byte to store the length of the column (zero). Trailing nulls in a row require no storage because a new row header signals that the remaining columns in the previous row are null. For example, if the last three columns of a table are null, then no data is stored for these columns.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF30037" href="../../server.112/e41084/sql_elements005.htm#SQLRF30037"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn more about null values</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CBBFAAII"></a>
<div id="CNCPT1132" class="sect2">
<h3 class="sect2">Table Compression</h3>
<p>The database can use <a href="glossary.htm#CHDJCICJ"><span class="xrefglossterm">table compression</span></a> to reduce the amount of storage required for the table.<a id="sthref213"></a><a id="sthref214"></a> Compression saves disk space, reduces memory use in the <a id="sthref215"></a><a href="glossary.htm#BGBHGEDC"><span class="xrefglossterm">database buffer cache</span></a>, and in some cases speeds query execution. Table compression is transparent to database applications.</p>
<div id="CNCPT89136" class="sect3"><a id="sthref216"></a>
<h4 class="sect3">Basic and Advanced Row Compression</h4>
<p>Dictionary-based table compression provides good compression ratios for heap-organized tables. Oracle Database supports the following types of dictionary-based table compression:</p>
<ul>
<li>
<p><a id="sthref217"></a>Basic table compression</p>
<p>This type of compression is intended for bulk load operations. The database does not compress data modified using conventional DML. You must use direct path loads, <code dir="ltr">ALTER TABLE . . . MOVE</code> operations, or online table redefinition to achieve basic compression.</p>
</li>
<li>
<p>Advanced row compression</p>
<p>This type of compression is intended for OLTP applications and compresses data manipulated by any SQL operation.</p>
</li>
</ul>
<p>For basic and advanced row compression, the database stores compressed rows in <span class="bold">row-major format</span>. All columns of one row are stored together, followed by all columns of the next row, and so on (see <a href="logical.htm#i20134">Figure 12-7</a>). Duplicate values are replaced with a short reference to a symbol table stored at the beginning of the block. Thus, information needed to re-create the uncompressed data is stored in the data block itself.</p>
<p>Compressed data blocks look much like normal data blocks. Most database features and functions that work on regular data blocks also work on compressed blocks.</p>
<p><a id="CNCPT89138"></a>You can declare compression at the tablespace, table, partition, or subpartition level. If specified at the tablespace level, then all tables created in the tablespace are compressed by default.</p>
<p>The following statement applies OLTP compression to the <code dir="ltr">orders</code> table:</p>
<pre dir="ltr">
ALTER TABLE oe.orders COMPRESS FOR OLTP;
</pre>
<p>The following example of a partial <code dir="ltr">CREATE TABLE</code> statement specifies OLTP compression for one partition and basic compression for the other partition:</p>
<pre dir="ltr">
CREATE TABLE sales (
    prod_id     NUMBER     NOT NULL,
    cust_id     NUMBER     NOT NULL, ... )
 PCTFREE 5 NOLOGGING NOCOMPRESS
 PARTITION BY RANGE (time_id)
 ( partition sales_2010 VALUES LESS THAN(TO_DATE(...)) COMPRESS BASIC,
   partition sales_2011 VALUES LESS THAN (MAXVALUE) COMPRESS FOR OLTP );
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="logical.htm#BABGEAAF">"Data Block Compression"</a> to learn about the format of compressed data blocks</p>
</li>
<li>
<p><a class="olink ADMIN11630" href="../../server.112/e25494/tables.htm#ADMIN11630"><span class="italic">Oracle Database Administrator's Guide</span></a> and <a class="olink PFGRF94152" href="../../server.112/e41573/build_db.htm#PFGRF94152"><span class="italic">Oracle Database Performance Tuning Guide</span></a> to learn about table compression</p>
</li>
<li>
<p><a href="cncptdba.htm#CHDGHBBF">"SQL*Loader"</a> to learn about using SQL*Loader for direct path loads</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="CNCPT89198" class="sect3"><a id="sthref218"></a>
<h4 class="sect3">Hybrid Columnar Compression</h4>
<p><a id="sthref219"></a><a id="sthref220"></a>With Hybrid Columnar Compression, the database stores the same column for a group of rows together. The data block does not store data in row-major format, but uses a combination of both row and columnar methods.</p>
<p>Storing column data together, with the same data type and similar characteristics, dramatically increases the storage savings achieved from compression. The database compresses data manipulated by any SQL operation, although compression levels are higher for direct path loads. Database operations work transparently against compressed objects, so no application changes are required.</p>
<div id="CNCPT89201" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref221"></a>
<h5 class="sect4">Types of Hybrid Columnar Compression</h5>
<p>If your underlying storage supports Hybrid Columnar Compression, then you can specify the following compression types, depending on your requirements:</p>
<ul>
<li>
<p><a id="sthref222"></a>Warehouse compression</p>
<p>This type of compression is optimized to save storage space, and is intended for data warehouse applications.</p>
</li>
<li>
<p><a id="sthref223"></a>Online archival compression</p>
<p>This type of compression is optimized for maximum compression levels, and is intended for historical data and data that does not change.</p>
</li>
</ul>
<p>To achieve warehouse or online archival compression, you must use direct path loads, <code dir="ltr">ALTER TABLE . . . MOVE</code> operations, or online table redefinition.</p>
<p>Hybrid Columnar Compression is optimized for Data Warehousing and decision support applications on Exadata storage. Exadata maximizes the performance of queries on tables that are compressed using Hybrid Columnar Compression, taking advantage of the processing power, memory, and Infiniband network bandwidth that are integral to the Exadata storage server.</p>
<p>Other Oracle storage systems support Hybrid Columnar Compression, and deliver the same space savings as on Exadata storage, but do not deliver the same level of query performance. For these storage systems, Hybrid Columnar Compression is ideal for in-database archiving of older data that is infrequently accessed.</p>
</div>
<!-- class="sect4" -->
<div id="CNCPT89202" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref224"></a>
<h5 class="sect4">Compression Units</h5>
<p>Hybrid Columnar Compression uses a logical construct called a <span class="bold">compression unit</span> to store a set of rows. When you load data into a table, the database stores groups of rows in columnar format, with the values for each column stored and compressed together. After the database has compressed the column data for a set of rows, the database fits the data into the compression unit.</p>
<p>For example, you apply Hybrid Columnar Compression to a <code dir="ltr">daily_sales</code> table. At the end of every day, you populate the table with items and the number sold, with the item ID and date forming a composite primary key. <a href="#CIHCJIHA">Table 2-1</a> shows a subset of the rows in <code dir="ltr">daily_sales</code>.</p>
<div id="CNCPT89199" class="tblformal">
<p class="titleintable"><a id="sthref225"></a><a id="CIHCJIHA"></a>Table 2-1 Sample Table daily_sales</p>
<table class="cellalignment1458" title="Sample Table daily_sales" summary="Rows in daily sales table" dir="ltr">
<thead>
<tr class="cellalignment1449">
<th class="cellalignment1459" id="r1c1-t32">Item_ID</th>
<th class="cellalignment1459" id="r1c2-t32">Date</th>
<th class="cellalignment1459" id="r1c3-t32">Num_Sold</th>
<th class="cellalignment1459" id="r1c4-t32">Shipped_From</th>
<th class="cellalignment1459" id="r1c5-t32">Restock</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r2c1-t32" headers="r1c1-t32">
<p>1000</p>
</td>
<td class="cellalignment1455" headers="r2c1-t32 r1c2-t32">
<p>01-JUN-11</p>
</td>
<td class="cellalignment1455" headers="r2c1-t32 r1c3-t32">
<p>2</p>
</td>
<td class="cellalignment1455" headers="r2c1-t32 r1c4-t32">
<p>WAREHOUSE1</p>
</td>
<td class="cellalignment1455" headers="r2c1-t32 r1c5-t32">
<p>Y</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r3c1-t32" headers="r1c1-t32">
<p>1001</p>
</td>
<td class="cellalignment1455" headers="r3c1-t32 r1c2-t32">
<p>01-JUN-11</p>
</td>
<td class="cellalignment1455" headers="r3c1-t32 r1c3-t32">
<p>0</p>
</td>
<td class="cellalignment1455" headers="r3c1-t32 r1c4-t32">
<p>WAREHOUSE3</p>
</td>
<td class="cellalignment1455" headers="r3c1-t32 r1c5-t32">
<p>N</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r4c1-t32" headers="r1c1-t32">
<p>1002</p>
</td>
<td class="cellalignment1455" headers="r4c1-t32 r1c2-t32">
<p>01-JUN-11</p>
</td>
<td class="cellalignment1455" headers="r4c1-t32 r1c3-t32">
<p>1</p>
</td>
<td class="cellalignment1455" headers="r4c1-t32 r1c4-t32">
<p>WAREHOUSE3</p>
</td>
<td class="cellalignment1455" headers="r4c1-t32 r1c5-t32">
<p>N</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r5c1-t32" headers="r1c1-t32">
<p>1003</p>
</td>
<td class="cellalignment1455" headers="r5c1-t32 r1c2-t32">
<p>01-JUN-11</p>
</td>
<td class="cellalignment1455" headers="r5c1-t32 r1c3-t32">
<p>0</p>
</td>
<td class="cellalignment1455" headers="r5c1-t32 r1c4-t32">
<p>WAREHOUSE2</p>
</td>
<td class="cellalignment1455" headers="r5c1-t32 r1c5-t32">
<p>N</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r6c1-t32" headers="r1c1-t32">
<p>1004</p>
</td>
<td class="cellalignment1455" headers="r6c1-t32 r1c2-t32">
<p>01-JUN-11</p>
</td>
<td class="cellalignment1455" headers="r6c1-t32 r1c3-t32">
<p>2</p>
</td>
<td class="cellalignment1455" headers="r6c1-t32 r1c4-t32">
<p>WAREHOUSE1</p>
</td>
<td class="cellalignment1455" headers="r6c1-t32 r1c5-t32">
<p>N</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r7c1-t32" headers="r1c1-t32">
<p>1005</p>
</td>
<td class="cellalignment1455" headers="r7c1-t32 r1c2-t32">
<p>01-JUN-11</p>
</td>
<td class="cellalignment1455" headers="r7c1-t32 r1c3-t32">
<p>1</p>
</td>
<td class="cellalignment1455" headers="r7c1-t32 r1c4-t32">
<p>WAREHOUSE2</p>
</td>
<td class="cellalignment1455" headers="r7c1-t32 r1c5-t32">
<p>N</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>Assume that the rows in <a href="#CIHCJIHA">Table 2-1</a> are stored in one compression unit. Hybrid Columnar Compression stores the values for each column together, and then uses multiple algorithms to compress each column. The database chooses the algorithms based on a variety of factors, including the data type of the column, the cardinality of the actual values in the column, and the compression level chosen by the user.</p>
<p>As shown in <a href="#CIHEAJFA">Figure 2-5</a>, each compression unit can span multiple data blocks. The values for a particular column may or may not span multiple blocks.</p>
<div id="CNCPT89200" class="figure">
<p class="titleinfigure"><a id="CIHEAJFA"></a>Figure 2-5 Compression Unit</p>
<img width="629" height="243" src="img/sagug004.gif" alt="Description of Figure 2-5 follows" /><br />
<a id="sthref226" href="img_text/sagug004.htm">Description of "Figure 2-5 Compression Unit"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Hybrid Columnar Compression has implications for row locking (see <a href="consist.htm#BABIGJBI">"Row Locks (TX)"</a>). When an update occurs for a row in an uncompressed data block, only the updated row is locked. In contrast, the database must lock all rows in the compression unit if an update is made to any row in the unit. Updates to rows using Hybrid Columnar Compression cause rowids to change.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When tables use Hybrid Columnar Compression, Oracle DML locks larger blocks of data (compression units), which may reduce concurrency.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink DBLIC2152" href="../../license.112/e47877/editions.htm#DBLIC2152"><span class="italic">Oracle Database Licensing Information</span></a> to learn about licensing requirements for Hybrid Columnar Compression</p>
</li>
<li>
<p><a class="olink ADMIN11630" href="../../server.112/e25494/tables.htm#ADMIN11630"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn how to use Hybrid Columnar Compression</p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i25478"></a>
<div id="CNCPT608" class="sect1">
<h2 class="sect1">Overview of Table Clusters</h2>
<p><a id="sthref227"></a><a id="sthref228"></a>A <a href="glossary.htm#CHDJGGGF"><span class="xrefglossterm">table cluster</span></a> is a group of tables that share common columns and store related data in the same blocks. When tables are clustered, a single <a id="sthref229"></a><a href="glossary.htm#i432306"><span class="xrefglossterm">data block</span></a> can contain rows from multiple tables. For example, a block can store rows from both the <code dir="ltr">employees</code> and <code dir="ltr">departments</code> tables rather than from only a single table.</p>
<p><a id="sthref230"></a><a id="sthref231"></a>The <span class="bold">cluster key</span> is the column or columns that the clustered tables have in common. For example, the <code dir="ltr">employees</code> and <code dir="ltr">departments</code> tables share the <code dir="ltr">department_id</code> column. You specify the cluster key when creating the table cluster and when creating every table added to the table cluster.</p>
<p>The <span class="bold">cluster key value</span> is the value of the cluster key columns for a particular set of rows. All data that contains the same cluster key value, such as <code dir="ltr">department_id=20</code>, is physically stored together. Each cluster key value is stored only once in the cluster and the cluster index, no matter how many rows of different tables contain the value.</p>
<p>For an analogy, suppose an HR manager has two book cases: one with boxes of employees folders and the other with boxes of departments folders. Users often ask for the folders for all employees in a particular department. To make retrieval easier, the manager rearranges all the boxes in a single book case. She divides the boxes by department ID. Thus, all folders for employees in department 20 and the folder for department 20 itself are in one box; the folders for employees in department 100 and the folder for department 100 are in a different box, and so on.</p>
<p>You can consider clustering tables when they are primarily queried (but not modified) and records from the tables are frequently queried together or joined. Because table clusters store related rows of different tables in the same data blocks, properly used table clusters offer the following benefits over nonclustered tables:</p>
<ul>
<li>
<p>Disk I/O is reduced for <a id="sthref232"></a><a href="glossary.htm#CHDICCFG"><span class="xrefglossterm">joins</span></a> of clustered tables.</p>
</li>
<li>
<p>Access time improves for joins of clustered tables.</p>
</li>
<li>
<p>Less storage is required to store related table and index data because the cluster key value is not stored repeatedly for each row.</p>
</li>
</ul>
<p>Typically, clustering tables is not appropriate in the following situations:</p>
<ul>
<li>
<p>The tables are frequently updated.</p>
</li>
<li>
<p>The tables frequently require a <a href="glossary.htm#CHDCGIFF"><span class="xrefglossterm">full table scan</span></a>.</p>
</li>
<li>
<p>The tables require truncating.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink PFGRF94791" href="../../server.112/e41573/data_acc.htm#PFGRF94791"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for guidelines on when to use table clusters</div>
<a id="CFABHBAG"></a>
<div id="CNCPT88825" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Overview of Indexed Clusters</h3>
<p>An <span class="bold">indexed cluster</span> is a table cluster that uses an index to locate data. The <span class="bold">cluster index</span> is a <a id="sthref233"></a><a id="sthref234"></a><a id="sthref235"></a>B-tree index on the cluster key. A cluster index must be created before any rows can be inserted into clustered tables.</p>
<p>Assume that you create the cluster <code dir="ltr">employees_departments_cluster</code> with the cluster key <code dir="ltr">department_id</code>, as shown in <a href="#CBBBCEAD">Example 2-8</a>. Because the <code dir="ltr">HASHKEYS</code> clause is not specified, this cluster is an indexed cluster. <a id="sthref236"></a>Afterward, you create an index named <code dir="ltr">idx_emp_dept_cluster</code> on this cluster key.</p>
<div id="CNCPT88826" class="example">
<p class="titleinexample"><a id="CBBBCEAD"></a>Example 2-8 Indexed Cluster</p>
<pre dir="ltr">
CREATE CLUSTER employees_departments_cluster
   (department_id NUMBER(4))
SIZE 512;

CREATE INDEX idx_emp_dept_cluster ON CLUSTER employees_departments_cluster;
</pre></div>
<!-- class="example" -->
<p>You then create the <code dir="ltr">employees</code> and <code dir="ltr">departments</code> tables in the cluster, specifying the <code dir="ltr">department_id</code> column as the cluster key, as follows (the ellipses mark the place where the column specification goes):</p>
<pre dir="ltr">
CREATE TABLE employees ( ... )
   CLUSTER employees_departments_cluster (department_id);
 
CREATE TABLE departments ( ... )
   CLUSTER employees_departments_cluster (department_id);
</pre>
<p>Finally, you add rows to the <code dir="ltr">employees</code> and <code dir="ltr">departments</code> tables. The database physically stores all rows for each department from the <code dir="ltr">employees</code> and <code dir="ltr">departments</code> tables in the same data blocks. The database stores the rows in a heap and locates them with the index.</p>
<p><a href="#i30164">Figure 2-6</a> shows the <code dir="ltr">employees_departments_cluster</code> table cluster, which contains <code dir="ltr">employees</code> and <code dir="ltr">departments</code>. The database stores rows for employees in department 20 together, department 110 together, and so on. If the tables are not clustered, then the database does not ensure that the related rows are stored together.</p>
<div id="CNCPT88827" class="figure">
<p class="titleinfigure"><a id="i30164"></a>Figure 2-6 Clustered Table Data</p>
<img width="654" height="569" src="img/cncpt023.gif" alt="Description of Figure 2-6 follows" /><br />
<a id="sthref237" href="img_text/cncpt023.htm">Description of "Figure 2-6 Clustered Table Data"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The B-tree cluster index associates the cluster key value with the <span class="bold">database block address (DBA)</span> of the block containing the data. For example, the index entry for key 20 shows the address of the block that contains data for employees in department 20:</p>
<pre dir="ltr">
20,AADAAAA9d
</pre>
<p>The cluster index is separately managed, just like an index on a nonclustered table, and can exist in a separate tablespace from the table cluster.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="indexiot.htm#i5671">"Overview of Indexes"</a></p>
</li>
<li>
<p><a class="olink ADMIN018" href="../../server.112/e25494/clustrs.htm#ADMIN018"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn how to create and manage indexed clusters</p>
</li>
<li>
<p><a class="olink SQLRF01201" href="../../server.112/e41084/statements_5001.htm#SQLRF01201"><span class="italic">Oracle Database SQL Language Reference</span></a> for <code dir="ltr">CREATE CLUSTER</code> syntax and semantics</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABJJGHI"></a>
<div id="CNCPT609" class="sect2">
<h3 class="sect2">Overview of Hash Clusters</h3>
<p><a id="sthref238"></a><a id="sthref239"></a><a id="sthref240"></a>A <span class="bold">hash cluster</span> is like an indexed cluster, except the index key is replaced with a <a id="sthref241"></a><a href="glossary.htm#CHDGDJJH"><span class="xrefglossterm">hash function</span></a>. No separate cluster index exists. In a hash cluster, the data is the index.</p>
<p><a id="sthref242"></a><a id="sthref243"></a><a id="sthref244"></a>With an indexed table or indexed cluster, Oracle Database locates table rows using key values stored in a separate index. To find or store a row in an indexed table or table cluster, the database must perform at least two I/Os:</p>
<ul>
<li>
<p>One or more I/Os to find or store the key value in the index</p>
</li>
<li>
<p>Another I/O to read or write the row in the table or table cluster</p>
</li>
</ul>
<p>To find or store a row in a hash cluster, Oracle Database applies the hash function to the cluster key value of the row. The resulting hash value corresponds to a data block in the cluster, which the database reads or writes on behalf of the issued statement.</p>
<p>Hashing is an optional way of storing table data to improve the performance of data retrieval. Hash clusters may be beneficial when the following conditions are met:</p>
<ul>
<li>
<p>A table is queried much more often than modified.</p>
</li>
<li>
<p>The hash key column is queried frequently with equality conditions, for example, <code dir="ltr">WHERE department_id=20</code>. For such queries, the cluster key value is hashed. The hash key value points directly to the disk area that stores the rows.</p>
</li>
<li>
<p>You can reasonably guess the number of hash keys and the size of the data stored with each key value.</p>
</li>
</ul>
<div id="CNCPT88828" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref245"></a>
<h4 class="sect3">Hash Cluster Creation</h4>
<p><a id="sthref246"></a>The <span class="bold">cluster key</span>, like the key of an indexed cluster, is a single column or composite key shared by the tables in the cluster. <a id="sthref247"></a>The <span class="bold">hash key values</span> are actual or possible values inserted into the cluster key column. For example, if the cluster key is <code dir="ltr">department_id</code>, then hash key values could be 10, 20, 30, and so on.</p>
<p>Oracle Database uses a hash function that accepts an infinite number of hash key values as input and sorts them into a finite number of buckets. Each bucket has a unique numeric ID known as a <span class="bold">hash value</span>. Each hash value maps to the database block address for the block that stores the rows corresponding to the hash key value (department 10, 20, 30, and so on).</p>
<p>To create a hash cluster, you use the same <code dir="ltr">CREATE CLUSTER</code> statement as for an indexed cluster, with the addition of a hash key. The number of hash values for the cluster depends on the hash key. In <a href="#CBBIGHDA">Example 2-9</a>, the number of departments that are likely to exist is 100, so <code dir="ltr">HASHKEYS</code> is set to <code dir="ltr">100</code>.</p>
<div id="CNCPT88829" class="example">
<p class="titleinexample"><a id="CBBIGHDA"></a>Example 2-9 Hash Cluster</p>
<pre dir="ltr">
CREATE CLUSTER employees_departments_cluster
   (department_id NUMBER(4))
SIZE 8192 HASHKEYS 100;
</pre></div>
<!-- class="example" -->
<p>After you create <code dir="ltr">employees_departments_cluster</code>, you can create the <code dir="ltr">employees</code> and <code dir="ltr">departments</code> tables in the cluster. You can then load data into the hash cluster just as in the indexed cluster described in <a href="#CBBBCEAD">Example 2-8</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN019" href="../../server.112/e25494/hash.htm#ADMIN019"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn how to create and manage hash clusters</div>
</div>
<!-- class="sect3" -->
<div id="CNCPT89178" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref248"></a>
<h4 class="sect3">Hash Cluster Queries</h4>
<p><a id="sthref249"></a>The database, not the user, determines how to hash the key values input by the user. For example, assume that users frequently execute queries such as the following, entering different department ID numbers for <code dir="ltr">p_id</code>:</p>
<pre dir="ltr">
SELECT *
FROM   employees
WHERE  department_id = :p_id;
 
SELECT * 
FROM   departments 
WHERE  department_id = :p_id;

SELECT * 
FROM   employees e, departments d 
WHERE  e.department_id = d.department_id
AND    d.department_id = :p_id;
</pre>
<p>If a user queries employees in <code dir="ltr">department_id</code><code dir="ltr">=20</code>, then the database might hash this value to bucket 77. If a user queries employees in <code dir="ltr">department_id</code>=<code dir="ltr">10</code>, then the database might hash this value to bucket 15. The database uses the internally generated hash value to locate the block that contains the employee rows for the requested department.</p>
<p><a href="#CBBGGEGH">Figure 2-7</a> depicts a hash cluster segment as a horizontal row of blocks. As shown in the graphic, a query can retrieve data in a single I/O.</p>
<div id="CNCPT88830" class="figure">
<p class="titleinfigure"><a id="CBBGGEGH"></a>Figure 2-7 Retrieving Data from a Hash Cluster</p>
<img width="629" height="245" src="img/cncpt329.gif" alt="Description of Figure 2-7 follows" /><br />
<a id="sthref250" href="img_text/cncpt329.htm">Description of "Figure 2-7 Retrieving Data from a Hash Cluster"</a><br />
<br /></div>
<!-- class="figure" -->
<p>A limitation of hash clusters is the unavailability of <a id="sthref251"></a>range scans on nonindexed cluster keys (see <a href="indexiot.htm#BABHDGHB">"Index Range Scan"</a>). Assume that no separate index exists for the hash cluster created in <a href="#CBBIGHDA">Example 2-9</a>. A query for departments with IDs between 20 and 100 cannot use the hashing algorithm because it cannot hash every possible value between 20 and 100. Because no index exists, the database must perform a full scan.</p>
</div>
<!-- class="sect3" -->
<div id="CNCPT88831" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref252"></a>
<h4 class="sect3">Hash Cluster Variations</h4>
<p><a id="sthref253"></a>A <span class="bold">single-table hash cluster</span> is an optimized version of a hash cluster that supports only one table at a time. A one-to-one mapping exists between hash keys and rows. A single-table hash cluster can be beneficial when users require rapid access to a table by <a id="sthref254"></a>primary key. For example, users often look up an employee record in the <code dir="ltr">employees</code> table by <code dir="ltr">employee_id</code>.</p>
<p>A <span class="bold">sorted hash cluster</span> stores the rows corresponding to each value of the hash function in such a way that the database can efficiently return them in sorted order. The database performs the optimized sort internally. For applications that always consume data in sorted order, this technique can mean faster retrieval of data. For example, an application might always sort on the <code dir="ltr">order_date</code> column of the <code dir="ltr">orders</code> table.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN01901" href="../../server.112/e25494/hash.htm#ADMIN01901"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn how to create single-table and sorted hash clusters</div>
</div>
<!-- class="sect3" -->
<div id="CNCPT88832" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref255"></a>
<h4 class="sect3">Hash Cluster Storage</h4>
<p><a id="sthref256"></a>Oracle Database allocates space for a hash cluster differently from an indexed cluster. In <a href="#CBBIGHDA">Example 2-9</a>, <code dir="ltr">HASHKEYS</code> specifies the number of departments likely to exist, whereas <code dir="ltr">SIZE</code> specifies the size of the data associated with each department. The database computes a storage space value based on the following formula:</p>
<pre dir="ltr">
HASHKEYS * SIZE / database_block_size
</pre>
<p>Thus, if the block size is 4096 bytes in <a href="#CBBIGHDA">Example 2-9</a>, then the database allocates at least 200 blocks to the hash cluster.</p>
<p>Oracle Database does not limit the number of hash key values that you can insert into the cluster. For example, even though <code dir="ltr">HASHKEYS</code> is <code dir="ltr">100</code>, nothing prevents you from inserting 200 unique departments in the <code dir="ltr">departments</code> table. However, the efficiency of the hash cluster retrieval diminishes when the number of hash values exceeds the number of hash keys.</p>
<p>To illustrate the retrieval issues, assume that block 100 in <a href="#CBBGGEGH">Figure 2-7</a> is completely full with rows for department 20. A user inserts a new department with <code dir="ltr">department_id</code> 43 into the <code dir="ltr">departments</code> table. The number of departments exceeds the <code dir="ltr">HASHKEYS</code> value, so the database hashes <code dir="ltr">department_id</code> 43 to hash value 77, which is the same hash value used for <code dir="ltr">department_id</code> 20. Hashing multiple input values to the same output value is called <a id="sthref257"></a>a <span class="bold">hash collision</span>.</p>
<p>When users insert rows into the cluster for department 43, the database cannot store these rows in block 100, which is full. The database links block 100 to a new overflow block, say block 200, and stores the inserted rows in the new block. Both block 100 and 200 are now eligible to store data for either department. As shown in <a href="#CIHFHBFE">Figure 2-8</a>, a query of either department 20 or 43 now requires <span class="italic">two</span> I/Os to retrieve the data: block 100 and its associated block 200. You can solve this problem by re-creating the cluster with a different <code dir="ltr">HASHKEYS</code> value.</p>
<div id="CNCPT89179" class="figure">
<p class="titleinfigure"><a id="CIHFHBFE"></a>Figure 2-8 Retrieving Data from a Hash Cluster When a Hash Collision Occurs</p>
<img width="629" height="423" src="img/cncpt331.gif" alt="Description of Figure 2-8 follows" /><br />
<a id="sthref258" href="img_text/cncpt331.htm">Description of "Figure 2-8 Retrieving Data from a Hash Cluster When a Hash Collision Occurs"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN11762" href="../../server.112/e25494/hash.htm#ADMIN11762"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn how to manage space in hash clusters</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1448">
<tr>
<td class="cellalignment1455">
<table class="cellalignment1453">
<tr>
<td class="cellalignment1452"><a href="part_datstr.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1452"><a href="indexiot.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1457">
<table class="cellalignment1451">
<tr>
<td class="cellalignment1452"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1452"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1452"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1452"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1452"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1452"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
