<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Transactions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1056" />
<meta name="dcterms.created" content="2015-05-25T13:34:3Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Concepts" />
<meta name="dcterms.identifier" content="E40540-04" />
<meta name="dcterms.isVersionOf" content="CNCPT" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1993, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="consist.htm" title="Previous" type="text/html" />
<link rel="Next" href="part_dbarch.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e40540.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">16/30</span> <!-- End Header -->
<div id="CNCPT016" class="chapter"><a id="g11401"></a> <a id="i6564"></a>
<h1 class="chapter"><span class="secnum">10</span> Transactions</h1>
<p><a id="sthref1295"></a>This chapter defines a transaction and describes how the database processes transactions.</p>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#i1666">Introduction to Transactions</a></p>
</li>
<li>
<p><a href="#i8072">Overview of Transaction Control</a></p>
</li>
<li>
<p><a href="#i7733">Overview of Autonomous Transactions</a></p>
</li>
<li>
<p><a href="#CHDJCBCF">Overview of Distributed Transactions</a></p>
</li>
</ul>
<a id="i1666"></a>
<div id="CNCPT117" class="sect1">
<h2 class="sect1">Introduction to Transactions</h2>
<p><a id="sthref1296"></a><a id="sthref1297"></a><a id="sthref1298"></a><a id="sthref1299"></a>A <span class="bold">transaction</span> is a logical, atomic unit of work that contains one or more SQL statements. A transaction groups SQL statements so that they are either all <span class="bold">committed</span>, which means they are applied to the database, or all <span class="bold">rolled back</span>, which means they are undone from the database. Oracle Database assigns every transaction a unique identifier called <a id="sthref1300"></a>a <span class="bold">transaction ID</span>.</p>
<p>All Oracle transactions comply with the basic properties of a database transaction, known <a id="sthref1301"></a><a id="sthref1302"></a>as <span class="bold">ACID</span> <span class="bold">properties</span>. ACID is an acronym for the following:</p>
<ul>
<li>
<p>Atomicity</p>
<p>All tasks of a transaction are performed or none of them are. There are no partial transactions. For example, if a transaction starts updating 100 rows, but the system fails after 20 updates, then the database rolls back the changes to these 20 rows.</p>
</li>
<li>
<p>Consistency</p>
<p>The transaction takes the database from one consistent state to another consistent state. For example, in a banking transaction that debits a savings account and credits a checking account, a failure must not cause the database to credit only one account, which would lead to inconsistent data.</p>
</li>
<li>
<p>Isolation</p>
<p>The effect of a transaction is not visible to other transactions until the transaction is committed. For example, one user updating the <code dir="ltr">hr.employees</code> table does not see the uncommitted changes to <code dir="ltr">employees</code> made concurrently by another user. Thus, it appears to users as if transactions are executing serially.</p>
</li>
<li>
<p>Durability</p>
<p>Changes made by committed transactions are permanent. After a transaction completes, the database ensures through its recovery mechanisms that changes from the transaction are not lost.</p>
</li>
</ul>
<p>The use of transactions is one of the most important ways that a database management system differs from a file system.</p>
<div id="CNCPT037" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1303"></a>
<h3 class="sect2">Sample Transaction: Account Debit and Credit</h3>
<p>To illustrate the concept of a transaction, consider a banking database. When a customer transfers money from a savings account to a checking account, the transaction must consist of three separate operations:</p>
<ul>
<li>
<p>Decrement the savings account</p>
</li>
<li>
<p>Increment the checking account</p>
</li>
<li>
<p>Record the transaction in the transaction journal</p>
</li>
</ul>
<p>Oracle Database must allow for two situations. If all three SQL statements maintain the accounts in proper balance, then the effects of the transaction can be applied to the database. However, if a problem such as insufficient funds, invalid account number, or a hardware failure prevents one or two of the statements in the transaction from completing, then the database must roll back the entire transaction so that the balance of all accounts is correct.</p>
<p><a href="#i974">Figure 10-1</a> illustrates a banking transaction. The first statement subtracts $500 from savings account 3209. The second statement adds $500 to checking account 3208. The third statement inserts a record of the transfer into the journal table. The final statement commits the transaction.</p>
<div id="CNCPT88951" class="figure">
<p class="titleinfigure"><a id="i974"></a>Figure 10-1 A Banking Transaction</p>
<img width="504" height="368" src="img/cncpt025.gif" alt="Description of Figure 10-1 follows" /><br />
<a id="sthref1304" href="img_text/cncpt025.htm">Description of "Figure 10-1 A Banking Transaction"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<div id="CNCPT038" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1305"></a>
<h3 class="sect2">Structure of a Transaction</h3>
<p>A database transaction consists of one or more statements. Specifically, a transaction consists of one of the following:</p>
<ul>
<li>
<p>One or more data manipulation language (DML) statements that together constitute an atomic change to the database</p>
</li>
<li>
<p>One data definition language (DDL) statement</p>
</li>
</ul>
<p>A transaction has a beginning and an end.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sqllangu.htm#i1225">"Overview of SQL Statements"</a></div>
<div id="CNCPT88952" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1306"></a>
<h4 class="sect3">Beginning of a Transaction</h4>
<p><a id="sthref1307"></a>A transaction begins when the first executable SQL statement is encountered. <a id="sthref1308"></a>An <span class="bold">executable SQL statement</span> is a SQL statement that generates calls to a database <a href="glossary.htm#CBAFGFCJ"><span class="xrefglossterm">instance</span></a>, including DML and DDL statements and <a id="sthref1309"></a>the <code dir="ltr">SET TRANSACTION</code> statement.</p>
<p>When a transaction begins, Oracle Database assigns the transaction to an available <a href="glossary.htm#CHDDFBFI"><span class="xrefglossterm">undo data</span></a> <a id="sthref1310"></a>segment to record the undo entries for the new transaction. A transaction ID is not allocated until an undo segment <a id="sthref1311"></a><a id="sthref1312"></a>and <a href="glossary.htm#CHDBGFEC"><span class="xrefglossterm">transaction table</span></a> slot are allocated, which occurs during the first DML statement. A <a id="sthref1313"></a>transaction ID is unique to a transaction and represents the undo segment number, slot, and sequence number.</p>
<p>The following example execute an <code dir="ltr">UPDATE</code> statement to begin a transaction and queries <code dir="ltr">V$TRANSACTION</code> for details about the transaction:</p>
<pre dir="ltr">
SQL&gt; UPDATE hr.employees SET salary=salary; 

107 rows updated.
 
SQL&gt; SELECT XID AS "txn id", XIDUSN AS "undo seg", XIDSLOT AS "slot", 
  2  XIDSQN AS "seq", STATUS AS "txn status"
  3  FROM V$TRANSACTION;
 
txn id             undo seg       slot        seq txn status
---------------- ---------- ---------- ---------- ----------------
0600060037000000          6          6         55 ACTIVE
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="logical.htm#CHDGJJEJ">"Undo Segments"</a></div>
</div>
<!-- class="sect3" -->
<div id="CNCPT88953" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1314"></a>
<h4 class="sect3">End of a Transaction</h4>
<p><a id="sthref1315"></a>A transaction ends when any of the following actions occurs:</p>
<ul>
<li>
<p>A user issues a <code dir="ltr">COMMIT</code> or <code dir="ltr">ROLLBACK</code> statement <span class="italic">without</span> a <code dir="ltr">SAVEPOINT</code> clause.</p>
<p><a id="sthref1316"></a>In a <span class="bold">commit</span>, a user explicitly or implicitly requested that the changes in the transaction be made permanent. Changes made by the transaction are permanent and visible to other users only after a transaction commits. The transaction shown in <a href="#i974">Figure 10-1</a> ends with a commit.</p>
</li>
<li>
<p>A user runs a DDL command such as <code dir="ltr">CREATE</code>, <code dir="ltr">DROP</code>, <code dir="ltr">RENAME</code>, or <code dir="ltr">ALTER</code>.</p>
<p>The database issues an implicit <code dir="ltr">COMMIT</code> statement before and after every DDL statement. If the current transaction contains DML statements, then Oracle Database first commits the transaction and then runs and commits the DDL statement as a new, single-statement transaction.</p>
</li>
<li>
<p>A user exits normally from most Oracle Database utilities and tools, causing the current transaction to be implicitly committed. The commit behavior when a user disconnects is application-dependent and configurable.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<a id="sthref1317"></a>Applications should always explicitly commit or undo transactions before program termination.</div>
</li>
<li>
<p>A client process terminates abnormally, causing the transaction to be implicitly rolled back using metadata stored in the transaction table and the undo segment.</p>
</li>
</ul>
<p>After one transaction ends, the next executable SQL statement automatically starts the following transaction. The following example executes an <code dir="ltr">UPDATE</code> to start a transaction, ends the transaction with a <code dir="ltr">ROLLBACK</code> statement, and then executes an <code dir="ltr">UPDATE</code> to start a new transaction (note that the transaction IDs are different):</p>
<pre dir="ltr">
SQL&gt; UPDATE hr.employees SET salary=salary; 
107 rows updated.
 
SQL&gt; SELECT XID, STATUS FROM V$TRANSACTION;
 
XID              STATUS
---------------- ----------------
0800090033000000 ACTIVE
 
SQL&gt; ROLLBACK;
 
Rollback complete.
 
SQL&gt; SELECT XID FROM V$TRANSACTION;
 
no rows selected
 
SQL&gt; UPDATE hr.employees SET last_name=last_name;
 
107 rows updated.
 
SQL&gt; SELECT XID, STATUS FROM V$TRANSACTION;
 
XID              STATUS
---------------- ----------------
0900050033000000 ACTIVE
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="cncptdba.htm#CHDFEAEB">"Tools for Database Administrators"</a> and <a href="cncptdev.htm#CHDCDEBH">"Tools for Database Developers"</a></p>
</li>
<li>
<p><a class="olink SQLRF01110" href="../../server.112/e41084/statements_4010.htm#SQLRF01110"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn about <code dir="ltr">COMMIT</code></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BHADFHBF"></a>
<div id="CNCPT1115" class="sect2">
<h3 class="sect2">Statement-Level Atomicity</h3>
<p>Oracle Database supports<a id="sthref1318"></a><a id="sthref1319"></a> <span class="bold">statement-level atomicity</span>, which means that a SQL statement is an atomic unit of work and either completely succeeds or completely fails.</p>
<p>A successful statement is different from a committed transaction<a id="sthref1320"></a>. A single SQL statement executes successfully if the database parses and runs it without error as an atomic unit, as when all rows are changed in a multirow update.</p>
<p>If a SQL statement causes an error during execution, then it is not successful and so all effects of the statement are rolled back. This operation is a <a id="sthref1321"></a><a id="sthref1322"></a><a href="glossary.htm#CHDBCFDG"><span class="xrefglossterm">statement-level rollback</span></a>. This operation has the following characteristics:</p>
<ul>
<li>
<p>A SQL statement that does not succeed causes the loss only of work it would have performed itself.</p>
<p>The unsuccessful statement does not cause the loss of any work that preceded it in the current transaction. <a id="sthref1323"></a>For example, if the execution of the second <code dir="ltr">UPDATE</code> statement in <a href="#i974">Figure 10-1</a> causes an error and is rolled back, then the work performed by the first <code dir="ltr">UPDATE</code> statement is not rolled back. The first <code dir="ltr">UPDATE</code> statement can be committed or rolled back explicitly by the user.</p>
</li>
<li>
<p>The effect of the rollback is as if the statement had never been run.</p>
<p>Any side effects of an atomic statement, for example, <a id="sthref1324"></a><a href="glossary.htm#CHDBBAJJ"><span class="xrefglossterm">triggers</span></a> invoked upon execution of the statement, are considered part of the atomic statement. Either all work generated as part of the atomic statement succeeds or none does.</p>
</li>
</ul>
<p>An example of an error causing a statement-level rollback is an attempt to insert a duplicate <a href="glossary.htm#CBAEEECI"><span class="xrefglossterm">primary key</span></a>. <a id="sthref1325"></a>Single SQL statements involved in a <a href="glossary.htm#CHDIHIAG"><span class="xrefglossterm">deadlock</span></a>, which is competition for the same data, can also cause a statement-level rollback. However, errors discovered during SQL statement parsing<span class="italic">,</span> such as a syntax error, have not yet been run and so do not cause a statement-level rollback.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="sqllangu.htm#CHDHFFHA">"SQL Parsing"</a></p>
</li>
<li>
<p><a href="consist.htm#BABDDBCG">"Locks and Deadlocks"</a></p>
</li>
<li>
<p><a href="srvrside.htm#i13313">"Overview of Triggers"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDIAFFH"></a>
<div id="CNCPT039" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">System Change Numbers (SCNs)</h3>
<p><a id="sthref1326"></a>A <a href="glossary.htm#CBAEHCGH"><span class="xrefglossterm">system change number (SCN)</span></a> is a logical, internal time stamp used by Oracle Database. SCNs order events that occur within the database, which is necessary to satisfy the ACID properties of a transaction. Oracle Database uses SCNs to mark the SCN before which all changes are known to be on disk so that recovery avoids applying unnecessary redo. The database also uses SCNs to mark the point at which no redo exists for a set of data so that recovery can stop.</p>
<p>SCNs occur in a monotonically increasing sequence. Oracle Database can use an SCN like a clock because an observed SCN indicates a logical point in time and repeated observations return equal or greater values. If one event has a lower SCN than another event, then it occurred at an earlier time with respect to the database. Several events may share the same SCN, which means that they occurred at the same time with respect to the database.</p>
<p>Every transaction has an SCN. For example, if a transaction updates a row, then the database records the SCN at which this update occurred. Other modifications in this transaction have the same SCN. When a transaction commits, the database records an SCN for this commit.</p>
<p>Oracle Database increments SCNs in the <a href="glossary.htm#CBAICBIA"><span class="xrefglossterm">system global area (SGA)</span></a>. When a transaction modifies data, the database writes a new SCN to the <a href="glossary.htm#CHDDFBFI"><span class="xrefglossterm">undo data</span></a> segment assigned to the transaction. The log writer process then writes the commit record of the transaction immediately to the <a href="glossary.htm#CBAIJCIB"><span class="xrefglossterm">online redo log</span></a>. The commit record has the unique SCN of the transaction. Oracle Database also uses SCNs as part of its <a href="glossary.htm#CHDIAJFJ"><span class="xrefglossterm">instance recovery</span></a> and <a href="glossary.htm#CHDHGHAE"><span class="xrefglossterm">media recovery</span></a> mechanisms.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="startup.htm#CEGCHJGF">"Overview of Instance Recovery"</a> and <a href="cncptdba.htm#CHDFHDCG">"Backup and Recovery"</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i8072"></a>
<div id="CNCPT1118" class="sect1">
<h2 class="sect1">Overview of Transaction Control</h2>
<p><span class="bold">Transaction control</span> is the management of changes made by DML statements and the grouping of DML statements into transactions. In general, application designers are concerned with transaction control so that work is accomplished in logical units and data is kept consistent.</p>
<p>Transaction control involves using the following statements, as described in <a href="sqllangu.htm#i18511">"Transaction Control Statements"</a>:</p>
<ul>
<li>
<p>The <code dir="ltr">COMMIT</code> statement ends the current transaction and makes all changes performed in the transaction permanent. <code dir="ltr">COMMIT</code> also erases all savepoints in the transaction and releases transaction locks.</p>
</li>
<li>
<p>The <code dir="ltr">ROLLBACK</code> statement reverses the work done in the current transaction; it causes all data changes since the last <code dir="ltr">COMMIT</code> or <code dir="ltr">ROLLBACK</code> to be discarded. <a id="sthref1327"></a>The <code dir="ltr">ROLLBACK TO SAVEPOINT</code> statement undoes the changes since the last savepoint but does not end the entire transaction.</p>
</li>
<li>
<p><a id="sthref1328"></a>The <code dir="ltr">SAVEPOINT</code> statement identifies a point in a transaction to which you can later roll back.</p>
</li>
</ul>
<p>The session in <a href="#CHDCIJGA">Table 10-1</a> illustrates the basic concepts of transaction control.</p>
<div id="CNCPT88954" class="tblruleformal">
<p class="titleintable"><a id="sthref1329"></a><a id="CHDCIJGA"></a>Table 10-1 Transaction Control</p>
<table class="cellalignment1460" title="Transaction Control" summary="Transaction control" dir="ltr">
<thead>
<tr class="cellalignment1449">
<th class="cellalignment1459" id="r1c1-t8">Time</th>
<th class="cellalignment1459" id="r1c2-t8">Session</th>
<th class="cellalignment1459" id="r1c3-t8">Explanation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r2c1-t8" headers="r1c1-t8">
<p>t0</p>
</td>
<td class="cellalignment1455" headers="r2c1-t8 r1c2-t8">
<pre dir="ltr">
COMMIT;
</pre></td>
<td class="cellalignment1455" headers="r2c1-t8 r1c3-t8">
<p>This statement ends any existing transaction in the session.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r3c1-t8" headers="r1c1-t8">
<p>t1</p>
</td>
<td class="cellalignment1455" headers="r3c1-t8 r1c2-t8">
<pre dir="ltr">
SET TRANSACTION NAME 'sal_update';
</pre></td>
<td class="cellalignment1455" headers="r3c1-t8 r1c3-t8">
<p>This statement begins a transaction and names it <code dir="ltr">sal_update</code>.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r4c1-t8" headers="r1c1-t8">
<p>t2</p>
</td>
<td class="cellalignment1455" headers="r4c1-t8 r1c2-t8">
<pre dir="ltr">
UPDATE employees
    SET salary = 7000 
    WHERE last_name = 'Banda';
</pre></td>
<td class="cellalignment1455" headers="r4c1-t8 r1c3-t8">
<p>This statement updates the salary for Banda to 7000.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r5c1-t8" headers="r1c1-t8">
<p>t3</p>
</td>
<td class="cellalignment1455" headers="r5c1-t8 r1c2-t8">
<pre dir="ltr">
SAVEPOINT after_banda_sal;
</pre></td>
<td class="cellalignment1455" headers="r5c1-t8 r1c3-t8">
<p>This statement creates a savepoint named <code dir="ltr">after_banda_sal</code>, enabling changes in this transaction to be rolled back to this point.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r6c1-t8" headers="r1c1-t8">
<p>t4</p>
</td>
<td class="cellalignment1455" headers="r6c1-t8 r1c2-t8">
<pre dir="ltr">
UPDATE employees
    SET salary = 12000 
    WHERE last_name = 'Greene';
</pre></td>
<td class="cellalignment1455" headers="r6c1-t8 r1c3-t8">
<p>This statement updates the salary for Greene to 12000.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r7c1-t8" headers="r1c1-t8">
<p>t5</p>
</td>
<td class="cellalignment1455" headers="r7c1-t8 r1c2-t8">
<pre dir="ltr">
SAVEPOINT after_greene_sal;
</pre></td>
<td class="cellalignment1455" headers="r7c1-t8 r1c3-t8">
<p>This statement creates a savepoint named <code dir="ltr">after_greene_sal</code>, enabling changes in this transaction to be rolled back to this point.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r8c1-t8" headers="r1c1-t8">
<p>t6</p>
</td>
<td class="cellalignment1455" headers="r8c1-t8 r1c2-t8">
<pre dir="ltr">
ROLLBACK TO SAVEPOINT
    after_banda_sal;
</pre></td>
<td class="cellalignment1455" headers="r8c1-t8 r1c3-t8">
<p>This statement rolls back the transaction to t3, undoing the update to Greene's salary at t4. The <code dir="ltr">sal_update</code> transaction has <span class="italic">not</span> ended.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r9c1-t8" headers="r1c1-t8">
<p>t7</p>
</td>
<td class="cellalignment1455" headers="r9c1-t8 r1c2-t8">
<pre dir="ltr">
UPDATE employees
    SET salary = 11000 
    WHERE last_name = 'Greene';
</pre></td>
<td class="cellalignment1455" headers="r9c1-t8 r1c3-t8">
<p>This statement updates the salary for Greene to 11000 in transaction <code dir="ltr">sal_update</code>.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r10c1-t8" headers="r1c1-t8">
<p>t8</p>
</td>
<td class="cellalignment1455" headers="r10c1-t8 r1c2-t8">
<pre dir="ltr">
ROLLBACK;
</pre></td>
<td class="cellalignment1455" headers="r10c1-t8 r1c3-t8">
<p>This statement rolls back all changes in transaction <code dir="ltr">sal_update</code>, ending the transaction.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r11c1-t8" headers="r1c1-t8">
<p>t9</p>
</td>
<td class="cellalignment1455" headers="r11c1-t8 r1c2-t8">
<pre dir="ltr">
SET TRANSACTION NAME 'sal_update2';
</pre></td>
<td class="cellalignment1455" headers="r11c1-t8 r1c3-t8">
<p>This statement begins a new transaction in the session and names it <code dir="ltr">sal_update2</code>.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r12c1-t8" headers="r1c1-t8">
<p>t10</p>
</td>
<td class="cellalignment1455" headers="r12c1-t8 r1c2-t8">
<pre dir="ltr">
UPDATE employees
    SET salary = 7050 
    WHERE last_name = 'Banda';
</pre></td>
<td class="cellalignment1455" headers="r12c1-t8 r1c3-t8">
<p>This statement updates the salary for Banda to 7050.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r13c1-t8" headers="r1c1-t8">
<p>t11</p>
</td>
<td class="cellalignment1455" headers="r13c1-t8 r1c2-t8">
<pre dir="ltr">
UPDATE employees
    SET salary = 10950 
    WHERE last_name = 'Greene';
</pre></td>
<td class="cellalignment1455" headers="r13c1-t8 r1c3-t8">
<p>This statement updates the salary for Greene to 10950.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r14c1-t8" headers="r1c1-t8">
<p>t12</p>
</td>
<td class="cellalignment1455" headers="r14c1-t8 r1c2-t8">
<pre dir="ltr">
COMMIT;
</pre></td>
<td class="cellalignment1455" headers="r14c1-t8 r1c3-t8">
<p>This statement commits all changes made in transaction <code dir="ltr">sal_update2</code>, ending the transaction. The commit guarantees that the changes are saved in the online redo log files.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF30043" href="../../server.112/e41084/statements_1001.htm#SQLRF30043"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn about transaction control statements</div>
<a id="i5619"></a>
<div id="CNCPT1122" class="sect2">
<h3 class="sect2">Transaction Names</h3>
<p><a id="sthref1330"></a><a id="sthref1331"></a>A <span class="bold">transaction name</span> is an optional, user-specified tag that serves as a reminder of the work that the transaction is performing. You name a transaction with the <code dir="ltr">SET TRANSACTION</code> <code dir="ltr">...</code> <code dir="ltr">NAME</code> statement, which if used must be first statement of the transaction. In <a href="#CHDCIJGA">Table 10-1</a>, the first transaction was named <code dir="ltr">sal_update</code> and the second was named <code dir="ltr">sal_update2</code>.</p>
<p>Transaction names provide the following advantages:</p>
<ul>
<li>
<p>It is easier to monitor long-running transactions and to resolve <a id="sthref1332"></a><a id="sthref1333"></a>in-doubt <a href="glossary.htm#CHDDCCEC"><span class="xrefglossterm">distributed transactions</span></a>.</p>
</li>
<li>
<p>You can view transaction names along with transaction IDs in applications. For example, a database administrator can view transaction names in Oracle Enterprise Manager (Enterprise Manager) when monitoring system activity.</p>
</li>
<li>
<p>The database writes transaction names to the transaction auditing redo record, so you can use LogMiner to search for a specific transaction in the redo log.</p>
</li>
<li>
<p>You can use transaction names to find a specific transaction in data dictionary views such as <code dir="ltr">V$TRANSACTION</code>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="cncptdba.htm#CHDHBAAI">"Oracle Enterprise Manager"</a></p>
</li>
<li>
<p><a class="olink REFRN30291" href="../../server.112/e40402/dynviews_3114.htm#REFRN30291"><span class="italic">Oracle Database Reference</span></a> to learn about <code dir="ltr">V$TRANSACTION</code></p>
</li>
<li>
<p><a class="olink SQLRF01705" href="../../server.112/e41084/statements_10005.htm#SQLRF01705"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn about <code dir="ltr">SET TRANSACTION</code></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="CNCPT88955" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1334"></a>
<h3 class="sect2">Active Transactions</h3>
<p><a id="sthref1335"></a><a id="sthref1336"></a>An <span class="bold">active transaction</span> has started but not yet committed or rolled back. In <a href="#CHDCIJGA">Table 10-1</a>, the first statement to modify data in the <code dir="ltr">sal_update</code> transaction is the update to Banda's salary. From the successful execution of this update until the <code dir="ltr">ROLLBACK</code> statement ends the transaction, the <code dir="ltr">sal_update</code> transaction is active.</p>
<p>Data changes made by a transaction are temporary until the transaction is committed or rolled back. Before the transaction ends, the state of the data is as follows:</p>
<ul>
<li>
<p><a id="sthref1337"></a>Oracle Database has generated <a href="glossary.htm#CHDDFBFI"><span class="xrefglossterm">undo data</span></a> information in the <a href="glossary.htm#CBAICBIA"><span class="xrefglossterm">system global area (SGA)</span></a>.</p>
<p>The undo data contains the old data values changed by the SQL statements of the transaction. See <a href="consist.htm#BABHFAIJ">"Read Consistency in the Read Committed Isolation Level"</a>.</p>
</li>
<li>
<p><a id="sthref1338"></a>Oracle Database has generated redo in the <a href="glossary.htm#CBAIJCIB"><span class="xrefglossterm">online redo log</span></a> buffer of the SGA.</p>
<p>The redo log record contains the change to the data block and the change to the undo block. See <a href="memory.htm#i21738">"Redo Log Buffer"</a>.</p>
</li>
<li>
<p>Changes have been made to the database buffers of the SGA.</p>
<p>The data changes for a committed transaction, stored in the database buffers of the SGA, are not necessarily written immediately to the data files by the <a href="glossary.htm#CBAJDCEI"><span class="xrefglossterm">database writer (DBW)</span></a>. The disk write can happen before or after the commit. See <a href="memory.htm#i10221">"Database Buffer Cache"</a>.</p>
</li>
<li>
<p>The rows affected by the data change are locked.</p>
<p>Other users cannot change the data in the affected rows, nor can they see the uncommitted changes. See <a href="consist.htm#BABHIGGC">"Summary of Locking Behavior"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i4327"></a>
<div id="CNCPT1121" class="sect2">
<h3 class="sect2">Savepoints</h3>
<p><a id="sthref1339"></a><a id="sthref1340"></a><a id="sthref1341"></a>A <span class="bold">savepoint</span> is a user-declared intermediate marker within the context of a transaction. Internally, this marker resolves to an SCN. Savepoints divide a long transaction into smaller parts.</p>
<p>If you use savepoints in a long transaction, then you have the option later of rolling back work performed before the current point in the transaction but after a declared savepoint within the transaction. Thus, if you make an error, you do not need to resubmit every statement. <a href="#CHDCIJGA">Table 10-1</a> creates savepoint <code dir="ltr">after_banda_sal</code> so that the update to the Greene salary can be rolled back to this savepoint.</p>
<a id="CHDGHIBB"></a>
<div id="CNCPT88956" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Rollback to Savepoint</h4>
<p>A <a id="sthref1342"></a><a id="sthref1343"></a><a id="sthref1344"></a><a id="sthref1345"></a><a id="sthref1346"></a><span class="bold">rollback to a savepoint</span> in an uncommitted transaction means undoing any changes made after the specified savepoint, but it does not mean a rollback of the transaction itself. <a id="sthref1347"></a><a id="sthref1348"></a><a id="sthref1349"></a>When a transaction is rolled back to a savepoint, as when the <code dir="ltr">ROLLBACK TO SAVEPOINT after_banda_sal</code> is run in <a href="#CHDCIJGA">Table 10-1</a>, the following occurs:</p>
<ol>
<li>
<p>Oracle Database rolls back only the statements run after the savepoint.</p>
<p>In <a href="#CHDCIJGA">Table 10-1</a>, the <code dir="ltr">ROLLBACK TO SAVEPOINT</code> causes the <code dir="ltr">UPDATE</code> for Greene to be rolled back, but not the <code dir="ltr">UPDATE</code> for Banda.</p>
</li>
<li>
<p>Oracle Database preserves the savepoint specified in the <code dir="ltr">ROLLBACK TO SAVEPOINT</code> statement, but all subsequent savepoints are lost.</p>
<p>In <a href="#CHDCIJGA">Table 10-1</a>, the <code dir="ltr">ROLLBACK TO SAVEPOINT</code> causes the <code dir="ltr">after_greene_sal</code> savepoint to be lost.</p>
</li>
<li>
<p>Oracle Database releases all table and row locks acquired after the specified savepoint but retains all data locks acquired previous to the savepoint.</p>
</li>
</ol>
<p>The transaction remains active and can be continued.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF01610" href="../../server.112/e41084/statements_9021.htm#SQLRF01610"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn about the <code dir="ltr">ROLLBACK</code> and <code dir="ltr">SAVEPOINT</code> statements</p>
</li>
<li>
<p><a class="olink LNPLS00608" href="../../appdev.112/e25519/static.htm#LNPLS00608"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> to learn about transaction processing and control</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="CNCPT88957" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1350"></a>
<h4 class="sect3">Enqueued Transactions</h4>
<p><a id="sthref1351"></a><a id="sthref1352"></a>Depending on the scenario, transactions waiting for previously locked resources may still be blocked after a rollback to savepoint. When a transaction is blocked by another transaction it enqueues on the blocking transaction itself, so that the entire blocking transaction must commit or roll back for the blocked transaction to continue.</p>
<p>In the scenario shown in <a href="#CHDGIIFB">Table 10-2</a>, session 1 rolls back to a savepoint created before it executed a DML statement. However, session 2 is still blocked because it is waiting for the session 1 transaction to complete.</p>
<div id="CNCPT88958" class="tblruleformalwide">
<p class="titleintable"><a id="sthref1353"></a><a id="CHDGIIFB"></a>Table 10-2 Rollback to Savepoint Example</p>
<table class="cellalignment1460" title="Rollback to Savepoint Example" summary="Extended example showing a rollback to savepoint" dir="ltr">
<thead>
<tr class="cellalignment1449">
<th class="cellalignment1459" id="r1c1-t12">Time</th>
<th class="cellalignment1459" id="r1c2-t12">Session 1</th>
<th class="cellalignment1459" id="r1c3-t12">Session 2</th>
<th class="cellalignment1459" id="r1c4-t12">Session 3</th>
<th class="cellalignment1459" id="r1c5-t12">Explanation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r2c1-t12" headers="r1c1-t12">
<p>t0</p>
</td>
<td class="cellalignment1455" headers="r2c1-t12 r1c2-t12">
<pre dir="ltr">
UPDATE employees 
 SET salary = 7000 
 WHERE last_name = 
 'Banda';
</pre></td>
<td class="cellalignment1455" headers="r2c1-t12 r1c3-t12">
<pre dir="ltr">
</pre></td>
<td class="cellalignment1455" headers="r2c1-t12 r1c4-t12">
<pre dir="ltr">
</pre></td>
<td class="cellalignment1455" headers="r2c1-t12 r1c5-t12">
<p>Session 1 begins a transaction. The session places an exclusive lock on the <code dir="ltr">Banda</code> row (TX) and a subexclusive table lock (SX) on the table.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r3c1-t12" headers="r1c1-t12">
<p>t1</p>
</td>
<td class="cellalignment1455" headers="r3c1-t12 r1c2-t12">
<pre dir="ltr">
SAVEPOINT 
 after_banda_sal;
</pre></td>
<td class="cellalignment1455" headers="r3c1-t12 r1c3-t12">&nbsp;</td>
<td class="cellalignment1455" headers="r3c1-t12 r1c4-t12">&nbsp;</td>
<td class="cellalignment1455" headers="r3c1-t12 r1c5-t12">
<p>Session 1 creates a savepoint named <code dir="ltr">after_banda_sal</code>.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r4c1-t12" headers="r1c1-t12">
<p>t2</p>
</td>
<td class="cellalignment1455" headers="r4c1-t12 r1c2-t12">
<pre dir="ltr">
UPDATE employees 
 SET salary = 12000 
 WHERE last_name =  
 'Greene';
</pre></td>
<td class="cellalignment1455" headers="r4c1-t12 r1c3-t12">
<pre dir="ltr">
</pre></td>
<td class="cellalignment1455" headers="r4c1-t12 r1c4-t12">
<pre dir="ltr">
</pre></td>
<td class="cellalignment1455" headers="r4c1-t12 r1c5-t12">
<p>Session 1 locks the <code dir="ltr">Greene</code> row.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r5c1-t12" headers="r1c1-t12">
<p>t3</p>
</td>
<td class="cellalignment1455" headers="r5c1-t12 r1c2-t12">
<pre dir="ltr">
</pre></td>
<td class="cellalignment1455" headers="r5c1-t12 r1c3-t12">
<pre dir="ltr">
UPDATE employees 
 SET salary = 14000 
 WHERE last_name = 
 'Greene';
</pre></td>
<td class="cellalignment1455" headers="r5c1-t12 r1c4-t12">
<pre dir="ltr">
</pre></td>
<td class="cellalignment1455" headers="r5c1-t12 r1c5-t12">
<p>Session 2 attempts to update the <code dir="ltr">Greene</code> row, but fails to acquire a lock because session 1 has a lock on this row. No transaction has begun in session 2.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r6c1-t12" headers="r1c1-t12">
<p>t4</p>
</td>
<td class="cellalignment1455" headers="r6c1-t12 r1c2-t12">
<pre dir="ltr">
ROLLBACK
 TO SAVEPOINT 
 after_banda_sal;
</pre></td>
<td class="cellalignment1455" headers="r6c1-t12 r1c3-t12">
<pre dir="ltr">
</pre></td>
<td class="cellalignment1455" headers="r6c1-t12 r1c4-t12">
<pre dir="ltr">
</pre></td>
<td class="cellalignment1455" headers="r6c1-t12 r1c5-t12">
<p>Session 1 rolls back the update to the salary for <code dir="ltr">Greene</code>, which releases the row lock for <code dir="ltr">Greene</code>. The table lock acquired at t0 is not released.</p>
<p>At this point, session 2 is <span class="italic">still</span> blocked by session 1 because session 2 enqueues on the session 1 <span class="italic">transaction</span>, which has not yet completed.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r7c1-t12" headers="r1c1-t12">
<p>t5</p>
</td>
<td class="cellalignment1455" headers="r7c1-t12 r1c2-t12">
<pre dir="ltr">
</pre></td>
<td class="cellalignment1455" headers="r7c1-t12 r1c3-t12">
<pre dir="ltr">
</pre></td>
<td class="cellalignment1455" headers="r7c1-t12 r1c4-t12">
<pre dir="ltr">
UPDATE employees 
 SET salary = 11000 
 WHERE last_name =
 'Greene';
</pre></td>
<td class="cellalignment1455" headers="r7c1-t12 r1c5-t12">
<p>The <code dir="ltr">Greene</code> row is currently unlocked, so session 3 acquires a lock for an update to the <code dir="ltr">Greene</code> row. This statement begins a transaction in session 3.</p>
</td>
</tr>
<tr class="cellalignment1449">
<td class="cellalignment1455" id="r8c1-t12" headers="r1c1-t12">
<p>t6</p>
</td>
<td class="cellalignment1455" headers="r8c1-t12 r1c2-t12">
<pre dir="ltr">
COMMIT;
</pre></td>
<td class="cellalignment1455" headers="r8c1-t12 r1c3-t12">
<pre dir="ltr">
</pre></td>
<td class="cellalignment1455" headers="r8c1-t12 r1c4-t12">
<pre dir="ltr">
</pre></td>
<td class="cellalignment1455" headers="r8c1-t12 r1c5-t12">
<p>Session 1 commits, ending its transaction. Session 2 is now enqueued for its update to the <code dir="ltr">Greene</code> row behind the transaction in session 3.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformalwide" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="consist.htm#CIHJAGGI">"Lock Duration"</a> to learn more about when Oracle Database releases locks</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i836"></a>
<div id="CNCPT1120" class="sect2">
<h3 class="sect2">Rollback of Transactions</h3>
<p>A <a id="sthref1354"></a><a id="sthref1355"></a><a id="sthref1356"></a><a id="sthref1357"></a><a id="sthref1358"></a><span class="bold">rollback</span> of an uncommitted transaction undoes any changes to data that have been performed by SQL statements within the transaction. After a transaction has been rolled back, the effects of the work done in the transaction no longer exist.</p>
<p>In rolling back an entire transaction, without referencing any savepoints, Oracle Database performs the following actions:</p>
<ul>
<li>
<p>Undoes all changes made by all the SQL statements in the transaction by using the corresponding undo segments</p>
<p>The transaction table entry for every active transaction contains a pointer to all the undo data (in reverse order of application) for the transaction. The database reads the data from the undo segment, reverses the operation, and then marks the undo entry as applied. Thus, if a transaction inserts a row, then a rollback deletes it. If a transaction updates a row, then a rollback reverses the update. If a transaction deletes a row, then a rollback reinserts it. In <a href="#CHDCIJGA">Table 10-1</a>, the <code dir="ltr">ROLLBACK</code> reverses the updates to the salaries of Greene and Banda.</p>
</li>
<li>
<p>Releases all the locks of data held by the transaction</p>
</li>
<li>
<p>Erases all savepoints in the transaction</p>
<p>In <a href="#CHDCIJGA">Table 10-1</a>, the <code dir="ltr">ROLLBACK</code> deletes the savepoint <code dir="ltr">after_banda_sal</code>. The <code dir="ltr">after_greene_sal</code> savepoint was removed by the <code dir="ltr">ROLLBACK TO SAVEPOINT</code> statement.</p>
</li>
<li>
<p>Ends the transaction</p>
<p>In <a href="#CHDCIJGA">Table 10-1</a>, the <code dir="ltr">ROLLBACK</code> leaves the database in the same state as it was after the initial <code dir="ltr">COMMIT</code> was executed.</p>
</li>
</ul>
<p>The duration of a rollback is a function of the amount of data modified.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="logical.htm#CHDGJJEJ">"Undo Segments"</a></div>
</div>
<!-- class="sect2" -->
<a id="BHAIDBHC"></a>
<div id="CNCPT1119" class="sect2">
<h3 class="sect2">Committing Transactions</h3>
<p>A <span class="bold"><a id="sthref1359"></a><a id="sthref1360"></a>commit</span> ends the current transaction and makes permanent all changes performed in the transaction. In <a href="#CHDCIJGA">Table 10-1</a>, a second transaction begins with <code dir="ltr">sal_update2</code> and ends with an explicit <code dir="ltr">COMMIT</code> statement. The changes that resulted from the two <code dir="ltr">UPDATE</code> statements are now made permanent.</p>
<p>When a transaction commits, the following actions occur:</p>
<ul>
<li>
<p><a id="sthref1361"></a>A <a href="glossary.htm#CBAEHCGH"><span class="xrefglossterm">system change number (SCN)</span></a> is generated for the <code dir="ltr">COMMIT</code>.</p>
<p>The i<a id="sthref1362"></a><a id="sthref1363"></a>nternal <a href="glossary.htm#CHDBGFEC"><span class="xrefglossterm">transaction table</span></a> for the associated <a href="glossary.htm#CHDJCAGE"><span class="xrefglossterm">undo tablespace</span></a> records that the transaction has committed. The corresponding unique SCN of the transaction is assigned and recorded in the transaction table. See <a href="consist.htm#BABCJIDI">"Serializable Isolation Level"</a>.</p>
</li>
<li>
<p>The <a href="glossary.htm#CHDJEJEE"><span class="xrefglossterm">log writer (LGWR)</span></a> process writes remaining redo log entries in the redo log buffers to the online redo log and writes the transaction SCN to the online redo log. <span class="italic">This atomic event constitutes the commit of the transaction.</span></p>
</li>
<li>
<p><a id="sthref1364"></a>Oracle Database releases locks held on rows and tables.</p>
<p>Users who were enqueued waiting on locks held by the uncommitted transaction are allowed to proceed with their work.</p>
</li>
<li>
<p>Oracle Database deletes savepoints.</p>
<p>In <a href="#CHDCIJGA">Table 10-1</a>, no savepoints existed in the <code dir="ltr">sal_update</code> transaction so no savepoints were erased.</p>
</li>
<li>
<p>Oracle Database performs a <span class="bold">commit cleanout</span>.</p>
<p>If modified blocks containing data from the committed transaction are still in the SGA, and if no other session is modifying them, then the database removes lock-related transaction information from the blocks. Ideally, the <code dir="ltr">COMMIT</code> cleans out the blocks so that a subsequent <code dir="ltr">SELECT</code> does not have to perform this task.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Because a block cleanout generates redo, a query may generate redo and thus cause blocks to be written during the next <a href="glossary.htm#CHDDBJEH"><span class="xrefglossterm">checkpoint</span></a>.</div>
</li>
<li>
<p><a id="sthref1365"></a>Oracle Database marks the transaction complete.</p>
</li>
</ul>
<p>After a transaction commits, users can view the changes.</p>
<p>Typically, a commit is a fast operation, regardless of the transaction size. The speed of a commit does not increase with the size of the data modified in the transaction. The lengthiest part of the commit is the physical disk I/O performed by LGWR. However, the amount of time spent by LGWR is reduced because it has been incrementally writing the contents of the redo log buffer in the background.</p>
<p>The default behavior is for LGWR to write redo to the online redo log synchronously and for transactions to wait for the buffered redo to be on disk before returning a commit to the user. However, for lower transaction commit latency, application developers can specify that redo be written asynchronously so that transactions need not wait for the redo to be on disk and can return from the <code dir="ltr">COMMIT</code> call immediately.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS592" href="../../appdev.112/e25519/static.htm#LNPLS592"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information on asynchronous commit</p>
</li>
<li>
<p><a href="consist.htm#i5338">"Locking Mechanisms"</a></p>
</li>
<li>
<p><a href="process.htm#BABIDJJA">"Overview of Background Processes"</a> for more information about LGWR</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i7733"></a>
<div id="CNCPT417" class="sect1">
<h2 class="sect1">Overview of Autonomous Transactions</h2>
<p>An <span class="bold"><a id="sthref1366"></a>autonomous transaction</span> is an independent transaction that can be called from another transaction, called the <span class="bold">main transaction</span>. You can suspend the calling transaction, perform SQL operations and commit or undo them in the autonomous transaction, and then resume the calling transaction.</p>
<p>Autonomous transactions are useful for actions that must be performed independently, regardless of whether the calling transaction commits or rolls back. For example, in a stock purchase transaction, you want to commit customer data regardless of whether the overall stock purchase goes through. Additionally, you want to log error messages to a debug table even if the overall transaction rolls back.</p>
<p>Autonomous transactions have the following characteristics:</p>
<ul>
<li>
<p>The autonomous transaction does not see uncommitted changes made by the main transaction and does not share locks or resources with the main transaction.</p>
</li>
<li>
<p>Changes in an autonomous transaction are visible to other transactions upon commit of the autonomous transactions. Thus, users can access the updated information without having to wait for the main transaction to commit.</p>
</li>
<li>
<p>Autonomous transactions can start other autonomous transactions. There are no limits, other than resource limits, on how many levels of autonomous transactions can be called.</p>
</li>
</ul>
<p><a id="sthref1367"></a>In PL/SQL, an autonomous transaction executes within an <span class="bold">autonomous scope</span>, which is a routine marked with the pragma <code dir="ltr">AUTONOMOUS_TRANSACTION</code>. In this context, routines include top-level anonymous PL/SQL blocks and PL/SQL subprograms and triggers. <a id="sthref1368"></a>A <span class="bold">pragma</span> is a directive that instructs the compiler to perform a compilation option. The pragma <code dir="ltr">AUTONOMOUS_TRANSACTION</code> instructs the database that this procedure, when executed, is to be executed as a new autonomous transaction that is independent of its parent transaction.</p>
<p><a href="#CHDDGDCJ">Figure 10-2</a> shows how control flows from the main routine (MT) to an autonomous routine and back again. The main routine is <code dir="ltr">proc1</code> and the autonomous routine is <code dir="ltr">proc2</code>. The autonomous routine can commit multiple transactions (AT1 and AT2) before control returns to the main routine.</p>
<div id="CNCPT88959" class="figure">
<p class="titleinfigure"><a id="CHDDGDCJ"></a>Figure 10-2 Transaction Control Flow</p>
<img width="504" height="236" src="img/cncpt288.gif" alt="Description of Figure 10-2 follows" /><br />
<a id="sthref1369" href="img_text/cncpt288.htm">Description of "Figure 10-2 Transaction Control Flow"</a><br />
<br /></div>
<!-- class="figure" -->
<p>When you enter the executable section of an autonomous routine, the main routine suspends. When you exit the autonomous routine, the main routine resumes.</p>
<p>In <a href="#CHDDGDCJ">Figure 10-2</a>, the <code dir="ltr">COMMIT</code> inside <code dir="ltr">proc1</code> makes permanent not only its own work but any outstanding work performed in its <a href="glossary.htm#CBAHEBIG"><span class="xrefglossterm">session</span></a>. However, a <code dir="ltr">COMMIT</code> in <code dir="ltr">proc2</code> makes permanent only the work performed in the <code dir="ltr">proc2</code> transaction. Thus, the <code dir="ltr">COMMIT</code> statements in transactions AT1 and AT2 have no effect on the MT transaction.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS00205" href="../../appdev.112/e41502/adfns_sqlproc.htm#ADFNS00205"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> and <a class="olink LNPLS00609" href="../../appdev.112/e25519/static.htm#LNPLS00609"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> to learn how to use autonomous transactions</div>
</div>
<!-- class="sect1" -->
<a id="CHDJCBCF"></a>
<div id="CNCPT1125" class="sect1">
<h2 class="sect1">Overview of Distributed Transactions</h2>
<p><a id="sthref1370"></a>A <a href="glossary.htm#CHDDEGFA"><span class="xrefglossterm">distributed database</span></a> is a set of databases in a distributed system that can appear to applications as a single data source. <a id="sthref1371"></a><a id="sthref1372"></a>A <span class="bold">distributed transaction</span> is a transaction that includes one or more statements that update data on two or more distinct nodes of a distributed database, using a schema object called a <a href="glossary.htm#CHDFCGFA"><span class="xrefglossterm">database link</span></a>. A database link describes how one database instance can log in to another database instance.</p>
<p>Unlike a transaction on a local database, a distributed transaction alters data on multiple databases. Consequently, distributed transaction processing is more complicated because the database must coordinate the committing or rolling back of the changes in a transaction as an atomic unit. The entire transaction must commit or roll back. Oracle Database must coordinate transaction control over a network and maintain data consistency, even if a network or system failure occurs. <a id="sthref1373"></a><a id="sthref1374"></a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN031" href="../../server.112/e25494/ds_txns.htm#ADMIN031"><span class="italic">Oracle Database Administrator's Guide</span></a></div>
<div id="CNCPT041" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1375"></a>
<h3 class="sect2">Two-Phase Commit</h3>
<p><a id="sthref1376"></a>The <span class="bold">two-phase commit</span> mechanism guarantees that <span class="italic">all</span> databases participating in a distributed transaction either all commit or all undo the statements in the transaction. The mechanism also protects implicit DML performed by integrity constraints, remote procedure calls, and triggers.</p>
<p>In a two-phase commit among multiple databases, one database coordinates the distributed transaction. The initiating node is called the <span class="bold">global coordinator</span>. The coordinator asks the other databases if they are prepared to commit. If any database responds with a no, then the entire transaction is rolled back. If all databases vote yes, then the coordinator broadcasts a message to make the commit permanent on each of the databases.</p>
<p>The two-phase commit mechanism is transparent to users who issue distributed transactions. In fact, users need not even know the transaction is distributed. A <code dir="ltr">COMMIT</code> statement denoting the end of a transaction automatically triggers the two-phase commit mechanism. No coding or complex statement syntax is required to include distributed transactions within the body of a database application.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN12222" href="../../server.112/e25494/ds_txns.htm#ADMIN12222"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn about the two-phase commit mechanism</div>
</div>
<!-- class="sect2" -->
<div id="CNCPT042" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1377"></a>
<h3 class="sect2">In-Doubt Transactions</h3>
<p><a id="sthref1378"></a>An <span class="bold">in-doubt distributed transaction</span> occurs when a two-phase commit was interrupted by any type of system or network failure. For example, two databases report to the coordinating database that they were prepared to commit, but the coordinating database instance fails immediately after receiving the messages. The two databases who are prepared to commit are now left hanging while they await notification of the outcome.</p>
<p><a id="sthref1379"></a><a id="sthref1380"></a>The recoverer (<code dir="ltr">RECO</code>) background process automatically resolves the outcome of in-doubt distributed transactions. After the failure is repaired and communication is reestablished, the <code dir="ltr">RECO</code> process of each local Oracle database automatically commits or rolls back any in-doubt distributed transactions consistently on all involved nodes.</p>
<p>In the event of a long-term failure, Oracle Database enables each local administrator to manually commit or undo any distributed transactions that are in doubt because of the failure. This option enables the local database administrator to free any locked resources that are held indefinitely because of the long-term failure.</p>
<p>If a database must be recovered to a past time, then database recovery facilities enable database administrators at other sites to return their databases to the earlier point in time. This operation ensures that the global database remains consistent.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="process.htm#BABIDBBD">"Recoverer Process (RECO)"</a></p>
</li>
<li>
<p><a class="olink ADMIN12252" href="../../server.112/e25494/ds_txnman.htm#ADMIN12252"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn how to manage in-doubt transactions</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1448">
<tr>
<td class="cellalignment1455">
<table class="cellalignment1453">
<tr>
<td class="cellalignment1452"><a href="consist.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1452"><a href="part_dbarch.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1993, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1457">
<table class="cellalignment1451">
<tr>
<td class="cellalignment1452"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1452"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1452"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1452"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1452"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1452"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
