<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Syntax for Subclauses</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1075" />
<meta name="dcterms.created" content="2016-01-04T16:54:56Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database SQL Language Quick Reference" />
<meta name="dcterms.identifier" content="E41085-04" />
<meta name="dcterms.isVersionOf" content="SQLQR" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2003, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="sqlqr05.htm" title="Previous" type="text/html" />
<link rel="Next" href="sqlqr06.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e41085.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">13/23</span> <!-- End Header --><a id="i110327"></a>
<div id="SQLQR533" class="sect1"><!-- infolevel="all" infotype="General" -->
<h1 class="sect1"><a id="sthref868"></a>Syntax for Subclauses</h1>
<p>The sections that follow show the syntax for each subclause found in:</p>
<ul>
<li>
<p><a href="sqlqr01.htm#g1000176">Chapter 1, "SQL Statements"</a></p>
</li>
<li>
<p><a href="sqlqr02.htm#g1002239">Chapter 2, "SQL Functions"</a></p>
</li>
<li>
<p><a href="sqlqr03.htm#g997148">Chapter 3, "SQL Expressions"</a></p>
</li>
<li>
<p><a href="sqlqr04.htm#g997627">Chapter 4, "SQL Conditions"</a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF" href="../e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for detailed information about Oracle SQL</div>
</li>
</ul>
<p class="subhead2"><a id="SQLQR534"></a><span class="italic"><a id="sthref869"></a>activate_standby_db_clause</span></p>
<pre dir="ltr">
ACTIVATE
     [ PHYSICAL | LOGICAL ]
     STANDBY DATABASE
     [ FINISH APPLY ]
</pre>
<p class="subhead2"><a id="SQLQR535"></a><span class="italic"><a id="sthref870"></a>add_binding_clause</span></p>
<pre dir="ltr">
ADD BINDING
  (parameter_type [, parameter_type ]...)
  RETURN (return_type)
  [ implementation_clause ]
  using_function_clause
</pre>
<p class="subhead2"><a id="SQLQR536"></a><span class="italic"><a id="sthref871"></a>add_column_clause</span></p>
<pre dir="ltr">
ADD
   {column_definition | virtual_column_definition
      [, column_definition | virtual_column_definition] ...
   }
   [ column_properties ]
   [ out_of_line_part_storage [, out_of_line_part_storage]...]
</pre>
<p class="subhead2"><a id="SQLQR537"></a><span class="italic"><a id="sthref872"></a>add_disk_clause</span></p>
<pre dir="ltr">
ADD
  { [ QUORUM | REGULAR ] [ FAILGROUP failgroup_name ]
    DISK qualified_disk_clause [, qualified_disk_clause ]...
  }...
</pre>
<p class="subhead2"><a id="SQLQR538"></a><span class="italic"><a id="sthref873"></a>add_hash_index_partition</span></p>
<pre dir="ltr">
ADD PARTITION
   [ partition_name ]
   [ TABLESPACE tablespace_name ]
   [ key_compression ]
   [ parallel_clause ]
</pre>
<p class="subhead2"><a id="SQLQR539"></a><span class="italic"><a id="sthref874"></a>add_hash_partition_clause</span></p>
<pre dir="ltr">
partitioning_storage_clause
[ update_index_clauses ]
[ parallel_clause ]
</pre>
<p class="subhead2"><a id="SQLQR540"></a><span class="italic"><a id="sthref875"></a>add_hash_subpartition</span></p>
<pre dir="ltr">
ADD individual_hash_subparts
   [ dependent_tables_clause ]
   [ update_index_clauses ]
   [ parallel_clause ]
</pre>
<p class="subhead2"><a id="SQLQR541"></a><span class="italic"><a id="sthref876"></a>add_list_partition_clause</span></p>
<pre dir="ltr">
list_values_clause
[ table_partition_description ]
[ ( { range_subpartition_desc [, range_subpartition_desc] ...
    | list_subpartition_desc [, list_subpartition_desc] ...
    | individual_hash_subparts [, individual_hash_subparts] ...
    }
  ) | hash_subparts_by_quantity ]
[ update_index_clauses ]
</pre>
<p class="subhead2"><a id="SQLQR542"></a><span class="italic"><a id="sthref877"></a>add_list_subpartition</span></p>
<pre dir="ltr">
ADD list_subpartition_desc [ dependent_tables_clause ] [ update_index_clauses ]
</pre>
<p class="subhead2"><a id="SQLQR543"></a><span class="italic"><a id="sthref878"></a>add_logfile_clauses</span></p>
<pre dir="ltr">
ADD [ STANDBY ] LOGFILE
   { 
     { [ INSTANCE 'instance_name' ] | [ THREAD 'integer' ] }
     [ GROUP integer ] redo_log_file_spec
       [, [ GROUP integer ] redo_log_file_spec ]...
   | MEMBER 'filename' [ REUSE ] [, 'filename' [ REUSE ] ]...
        TO logfile_descriptor [, logfile_descriptor ]...
   }
</pre>
<p class="subhead2"><a id="SQLQR544"></a><span class="italic"><a id="sthref879"></a>add_mv_log_column_clause</span></p>
<pre dir="ltr">
ADD (column)
</pre>
<p class="subhead2"><a id="SQLQR545"></a><span class="italic"><a id="sthref880"></a>add_overflow_clause</span></p>
<pre dir="ltr">
ADD OVERFLOW [ segment_attributes_clause ]
  [ ( PARTITION [ segment_attributes_clause ]
    [, PARTITION [ segment_attributes_clause ] ]...
    )
  ]
</pre>
<p class="subhead2"><a id="SQLQR546"></a><span class="italic"><a id="sthref881"></a>add_range_partition_clause</span></p>
<pre dir="ltr">
range_values_clause
[ table_partition_description ]
[ ( { range_subpartition_desc [, range_subpartition_desc] ...
    | list_subpartition_desc [, list_subpartition_desc] ...
    | individual_hash_subparts [, individual_hash_subparts] ...
    }
  ) | hash_subparts_by_quantity ]
[ update_index_clauses ]
</pre>
<p class="subhead2"><a id="SQLQR547"></a><span class="italic"><a id="sthref882"></a>add_range_subpartition</span></p>
<pre dir="ltr">
ADD range_subpartition_desc [ dependent_tables_clause ] [ update_index_clauses ]
</pre>
<p class="subhead2"><a id="SQLQR548"></a><span class="italic"><a id="sthref883"></a>add_system_partition_clause</span></p>
<pre dir="ltr">
[BEFORE { partition_name | partition_number }]
[table_partition_description]
[update_index_clauses]
</pre>
<p class="subhead2"><a id="SQLQR549"></a><span class="italic"><a id="sthref884"></a>add_table_partition</span></p>
<pre dir="ltr">
ADD PARTITION [ partition ]
  { add_range_partition_clause
  | add_hash_partition_clause
  | add_list_partition_clause
  } [ dependent_tables_clause ]
</pre>
<p class="subhead2"><a id="SQLQR550"></a><span class="italic"><a id="sthref885"></a>add_volume_clause</span></p>
<pre dir="ltr">
ADD VOLUME asm_volume SIZE size_clause [redundancy_clause]
  [ STRIPE_WIDTH integer {K | M} ]
  [ STRIPE_COLUMNS integer ]
  [ ATTRIBUTE (disk_region_clause) ]
</pre>
<p class="subhead2"><a id="SQLQR551"></a><span class="italic"><a id="sthref886"></a>alias_file_name</span></p>
<pre dir="ltr">
+diskgroup_name [ (template_name) ] /alias_name
</pre>
<p class="subhead2"><a id="SQLQR552"></a><span class="italic"><a id="sthref887"></a>allocate_extent_clause</span></p>
<pre dir="ltr">
ALLOCATE EXTENT
  [ ( { SIZE size_clause
      | DATAFILE 'filename'
      | INSTANCE integer
      } ...
    )
  ]
</pre>
<p class="subhead2"><a id="SQLQR553"></a><span class="italic"><a id="sthref888"></a>alter_datafile_clause</span></p>
<pre dir="ltr">
DATAFILE
   { 'filename' | filenumber }
     [, 'filename' | filenumber ]...
   }
   { ONLINE
   | OFFLINE [ FOR DROP ]
   | RESIZE size_clause
   | autoextend_clause
   | END BACKUP
   }
</pre>
<p class="subhead2"><a id="SQLQR554"></a><span class="italic"><a id="sthref889"></a>alter_external_table</span></p>
<pre dir="ltr">
{ add_column_clause
| modify_column_clauses
| drop_column_clause
| parallel_clause
| external_data_properties
| REJECT LIMIT { integer | UNLIMITED }
| PROJECT COLUMN { ALL | REFERENCED }
}
  [ add_column_clause
  | modify_column_clauses
  | drop_column_clause
  | parallel_clause
  | external_data_properties
  | REJECT LIMIT { integer | UNLIMITED }
  | PROJECT COLUMN { ALL | REFERENCED }
  ]...
</pre>
<p class="subhead2"><a id="SQLQR555"></a><span class="italic"><a id="sthref890"></a>alter_index_partitioning</span></p>
<pre dir="ltr">
{ modify_index_default_attrs
| add_hash_index_partition
| modify_index_partition
| rename_index_partition
| drop_index_partition
| split_index_partition
| coalesce_index_partition
| modify_index_subpartition
}
</pre>
<p class="subhead2"><a id="SQLQR556"></a><span class="italic"><a id="sthref891"></a>alter_interval_partitioning</span></p>
<pre dir="ltr">
{ SET INTERVAL ( [ expr ] )
| SET STORE IN ( tablespace [, tablespace]... )
}
</pre>
<p class="subhead2"><a id="SQLQR557"></a><span class="italic"><a id="sthref892"></a>alter_iot_clauses</span></p>
<pre dir="ltr">
{ index_org_table_clause
| alter_overflow_clause
| alter_mapping_table_clauses
| COALESCE
}
</pre>
<p class="subhead2"><a id="SQLQR558"></a><span class="italic"><a id="sthref893"></a>alter_mapping_table_clauses</span></p>
<pre dir="ltr">
MAPPING TABLE
  { allocate_extent_clause
  | deallocate_unused_clause
  }
</pre>
<p class="subhead2"><a id="SQLQR559"></a><span class="italic"><a id="sthref894"></a>alter_mv_refresh</span></p>
<pre dir="ltr">
REFRESH
   { { FAST | COMPLETE | FORCE }
   | ON { DEMAND | COMMIT }
   | { START WITH | NEXT } date
   | WITH PRIMARY KEY
   | USING
        { DEFAULT MASTER ROLLBACK SEGMENT
        | MASTER ROLLBACK SEGMENT rollback_segment
        }
   | USING { ENFORCED | TRUSTED } CONSTRAINTS
   }
</pre>
<p class="subhead2"><a id="SQLQR560"></a><span class="italic"><a id="sthref895"></a>alter_overflow_clause</span></p>
<pre dir="ltr">
{ add_overflow_clause
| OVERFLOW
     { segment_attributes_clause
     | allocate_extent_clause
     | shrink_clause
     | deallocate_unused_clause
     }...
}
</pre>
<p class="subhead2"><a id="SQLQR561"></a><span class="italic"><a id="sthref896"></a>alter_session_set_clause</span></p>
<pre dir="ltr">
SET { { parameter_name = parameter_value }...
    | EDITION = edition_name
    }
</pre>
<p class="subhead2"><a id="SQLQR562"></a><span class="italic"><a id="sthref897"></a>alter_system_reset_clause</span></p>
<pre dir="ltr">
parameter_name
   [ { SCOPE = SPFILE 
     | SID = { 'sid' | '*' }
     }...
   ]
</pre>
<p class="subhead2"><a id="SQLQR563"></a><span class="italic"><a id="sthref898"></a>alter_system_set_clause</span></p>
<pre dir="ltr">
{ set_parameter_clause
| USE_STORED_OUTLINES = (TRUE | FALSE | category_name)
| GLOBAL_TOPIC_ENABLED = (TRUE | FALSE)
}
</pre>
<p class="subhead2"><a id="SQLQR564"></a><span class="italic"><a id="sthref899"></a>alter_table_partitioning</span></p>
<pre dir="ltr">
{ modify_table_default_attrs
| alter_interval_partitioning
| set_subpartition_template
| modify_table_partition
| modify_table_subpartition
| move_table_partition
| move_table_subpartition
| add_table_partition
| coalesce_table_partition
| coalesce_table_subpartition
| drop_table_partition
| drop_table_subpartition
| rename_partition_subpart
| truncate_partition_subpart
| split_table_partition
| split_table_subpartition
| merge_table_partitions
| merge_table_subpartitions
| exchange_partition_subpart
}
</pre>
<p class="subhead2"><a id="SQLQR565"></a><span class="italic"><a id="sthref900"></a>alter_table_properties</span></p>
<pre dir="ltr">
{ { { physical_attributes_clause
    | logging_clause
    | table_compression
    | supplemental_table_logging
    | allocate_extent_clause
    | deallocate_unused_clause
    | { CACHE | NOCACHE }
    | RESULT_CACHE ( MODE {DEFAULT | FORCE} )
    | upgrade_table_clause
    | records_per_block_clause
    | parallel_clause
    | row_movement_clause
    | flashback_archive_clause
    }...
  | RENAME TO new_table_name
  } [ alter_iot_clauses ] [ alter_XMLSchema_clause ]
| { shrink_clause 
  | READ ONLY 
  | READ WRITE 
  | REKEY encryption_spec 
  }
}
</pre>
<p class="subhead2"><a id="SQLQR566"></a><span class="italic"><a id="sthref901"></a>alter_tempfile_clause</span></p>
<pre dir="ltr">
TEMPFILE
   { 'filename' [, 'filename' ]...
   | filenumber [, filenumber ]...
   }
   { RESIZE size_clause
   | autoextend_clause
   | DROP [ INCLUDING DATAFILES ]
   | ONLINE
   | OFFLINE
   }
</pre>
<p class="subhead2"><a id="SQLQR567"></a><span class="italic"><a id="sthref902"></a>alter_varray_col_properties</span></p>
<pre dir="ltr">
MODIFY VARRAY varray_item
   ( modify_LOB_parameters )
</pre>
<p class="subhead2"><a id="SQLQR568"></a><span class="italic"><a id="sthref903"></a>alter_XMLSchema_clause</span></p>
<pre dir="ltr">
{ ALLOW ANYSCHEMA
| ALLOW NONSCHEMA
| DISALLOW NONSCHEMA
}
</pre>
<p class="subhead2"><a id="SQLQR569"></a><span class="italic"><a id="sthref904"></a>analytic_clause</span></p>
<pre dir="ltr">
[ query_partition_clause ]
[ order_by_clause [ windowing_clause ] ]
</pre>
<p class="subhead2"><a id="SQLQR570"></a><span class="italic"><a id="sthref905"></a>archive_log_clause</span></p>
<pre dir="ltr">
ARCHIVE LOG
   [  INSTANCE 'instance_name' ]
   { { SEQUENCE integer
     | CHANGE integer
     | CURRENT [ NOSWITCH ]
     | GROUP integer
     | LOGFILE 'filename'
          [ USING BACKUP CONTROLFILE ]
     | NEXT
     | ALL
     }
     [ TO 'location' ]
   }
</pre>
<p class="subhead2"><a id="SQLQR571"></a><span class="italic"><a id="sthref906"></a>array_DML_clause</span></p>
<pre dir="ltr">
[ WITH | WITHOUT ]
ARRAY DML
[ ([ schema. ]type
   [, [ schema. ]varray_type ])
    [, ([ schema. ]type
        [, [ schema. ]varray_type ])...
]
</pre>
<p class="subhead2"><a id="SQLQR572"></a><span class="italic"><a id="sthref907"></a>ASM_filename</span></p>
<pre dir="ltr">
{ fully_qualified_file_name
| numeric_file_name
| incomplete_file_name
| alias_file_name
}
</pre>
<p class="subhead2"><a id="SQLQR573"></a><span class="italic"><a id="sthref908"></a>attribute_clause</span></p>
<pre dir="ltr">
ATTRIBUTE level DETERMINES
   { dependent_column
   | ( dependent_column
       [, dependent_column ]... )
   }
</pre>
<p class="subhead2"><a id="SQLQR574"></a><span class="italic"><a id="sthref909"></a>audit_operation_clause</span></p>
<pre dir="ltr">
{ { sql_statement_shortcut
  | ALL
  | ALL STATEMENTS
  } [, { sql_statement_shortcut
       | ALL
       }
    ]
| { system_privilege
  | ALL PRIVILEGES
  } [, { system_privilege
       | ALL PRIVILEGES
       }
    ]
}
</pre>
<p class="subhead2"><a id="SQLQR575"></a><span class="italic"><a id="sthref910"></a>audit_schema_object_clause</span></p>
<pre dir="ltr">
{ sql_operation [, object_option]
| ALL
} auditing_on_clause
</pre>
<p class="subhead2"><a id="SQLQR576"></a><span class="italic"><a id="sthref911"></a>auditing_by_clause</span></p>
<pre dir="ltr">
BY user [, user ]...
</pre>
<p class="subhead2"><a id="SQLQR577"></a><span class="italic"><a id="sthref912"></a>auditing_on_clause</span></p>
<pre dir="ltr">
ON { [ schema. ] object
   | DIRECTORY directory_name
   | MINING MODEL [ schema. ] model
   | DEFAULT
   }
</pre>
<p class="subhead2"><a id="SQLQR578"></a><span class="italic"><a id="sthref913"></a>autoextend_clause</span></p>
<pre dir="ltr">
AUTOEXTEND
   { OFF
   | ON [ NEXT size_clause ]
        [ maxsize_clause ]
   }
</pre>
<p class="subhead2"><a id="SQLQR579"></a><span class="italic"><a id="sthref914"></a>binding_clause</span></p>
<pre dir="ltr">
BINDING
   (parameter_type [, parameter_type ]...)
   RETURN return_type
   [ implementation_clause ]
   using_function_clause
    [, (parameter_type [, parameter_type ]...)
       RETURN return_type
       [ implementation_clause ]
       using_function_clause
    ]...
</pre>
<p class="subhead2"><a id="SQLQR580"></a><span class="italic"><a id="sthref915"></a>bitmap_join_index_clause</span></p>
<pre dir="ltr">
[ schema.]table
   ( [ [ schema. ]table. | t_alias. ]column
     [ ASC | DESC  ]
       [, [ [ schema. ]table. | t_alias. ]column
          [ ASC | DESC ]
       ]...
   )
   FROM [ schema. ]table [ t_alias ]
          [, [ schema. ]table [ t_alias ]
        ]...
   WHERE condition
      [ local_partitioned_index ] index_attributes
</pre>
<p class="subhead2"><a id="SQLQR581"></a><span class="italic"><a id="sthref916"></a>build_clause</span></p>
<pre dir="ltr">
BUILD { IMMEDIATE | DEFERRED }
</pre>
<p class="subhead2"><a id="SQLQR582"></a><span class="italic"><a id="sthref917"></a>cell_assignment</span></p>
<pre dir="ltr">
measure_column [ { { condition
                   | expr
                   | single_column_for_loop
                   }
                     [, { condition
                        | expr
                        | single_column_for_loop
                        }
                     ]...
                 | multi_column_for_loop
                 }
               ]

Note: The outer square brackets are part of the syntax.
      In this case, they do not indicate optionality.
</pre>
<p class="subhead2"><a id="SQLQR583"></a><span class="italic"><a id="sthref918"></a>cell_reference_options</span></p>
<pre dir="ltr">
[ { IGNORE | KEEP } NAV ]
[ UNIQUE { DIMENSION | SINGLE REFERENCE } ]
</pre>
<p class="subhead2"><a id="SQLQR584"></a><span class="italic"><a id="sthref919"></a>character_set_clause</span></p>
<pre dir="ltr">
CHARACTER SET character_set
</pre>
<p class="subhead2"><a id="SQLQR585"></a><span class="italic"><a id="sthref920"></a>check_datafiles_clause</span></p>
<pre dir="ltr">
CHECK DATAFILES [ GLOBAL | LOCAL ]
</pre>
<p class="subhead2"><a id="SQLQR586"></a><span class="italic"><a id="sthref921"></a>check_diskgroup_clause</span></p>
<pre dir="ltr">
CHECK [ REPAIR | NOREPAIR ]
</pre>
<p class="subhead2"><a id="SQLQR587"></a><span class="italic"><a id="sthref922"></a>checkpoint_clause</span></p>
<pre dir="ltr">
CHECKPOINT [ GLOBAL | LOCAL ]
</pre>
<p class="subhead2"><a id="SQLQR588"></a><span class="italic"><a id="sthref923"></a>cluster_index_clause</span></p>
<pre dir="ltr">
CLUSTER [ schema. ] cluster index_attributes
</pre>
<p class="subhead2"><a id="SQLQR589"></a><span class="italic"><a id="sthref924"></a>coalesce_index_partition</span></p>
<pre dir="ltr">
COALESCE PARTITION [ parallel_clause ]
</pre>
<p class="subhead2"><a id="SQLQR590"></a><span class="italic"><a id="sthref925"></a>coalesce_table_partition</span></p>
<pre dir="ltr">
COALESCE PARTITION [ update_index_clauses ] [ parallel_clause ]
</pre>
<p class="subhead2"><a id="SQLQR591"></a><span class="italic"><a id="sthref926"></a>coalesce_table_subpartition</span></p>
<pre dir="ltr">
COALESCE SUBPARTITION subpartition [update_index_clauses] [parallel_clause]
</pre>
<p class="subhead2"><a id="SQLQR592"></a><span class="italic"><a id="sthref927"></a>column_association</span></p>
<pre dir="ltr">
COLUMNS [ schema. ]table.column
          [, [ schema. ]table.column ]...
   using_statistics_type
</pre>
<p class="subhead2"><a id="SQLQR593"></a><a id="sthref928"></a><span class="italic">column_clauses</span></p>
<pre dir="ltr">
{ { add_column_clause
  | modify_column_clauses
  | drop_column_clause
  }...
| rename_column_clause
| { modify_collection_retrieval }...
| { modify_LOB_storage_clause }...
| { alter_varray_col_properties }...
}
</pre>
<p class="subhead2"><a id="SQLQR594"></a><span class="italic"><a id="sthref929"></a>column_definition</span></p>
<pre dir="ltr">
column datatype [ SORT ]
  [ DEFAULT expr ]
  [ ENCRYPT encryption_spec ]
  [ ( { inline_constraint }... )
  | inline_ref_constraint
  ]
</pre>
<p class="subhead2"><a id="SQLQR595"></a><span class="italic"><a id="sthref930"></a>column_properties</span></p>
<pre dir="ltr">
{ object_type_col_properties
| nested_table_col_properties
| { varray_col_properties | LOB_storage_clause }
    [ (LOB_partition_storage [, LOB_partition_storage ]...) ]
| XMLType_column_properties
}...
</pre>
<p class="subhead2"><a id="SQLQR596"></a><span class="italic"><a id="sthref931"></a>commit_switchover_clause</span></p>
<pre dir="ltr">
{ PREPARE | COMMIT } TO SWITCHOVER
[ TO { { [ PHYSICAL | LOGICAL ] PRIMARY
     | [ PHYSICAL ] STANDBY
     } [ { WITH | WITHOUT } SESSION SHUTDOWN
         { WAIT | NOWAIT }
       ]
     | LOGICAL STANDBY
     }
| CANCEL
]
</pre>
<p class="subhead2"><a id="SQLQR597"></a><span class="italic"><a id="sthref932"></a>composite_hash_partitions</span></p>
<pre dir="ltr">
PARTITION BY HASH (column [, column ] ...)
  { subpartition_by_range
  | subpartition_by_list
  | subpartition_by_hash
  }
  { individual_hash_partitions
  | hash_partitions_by_quantity
  }
</pre>
<p class="subhead2"><a id="SQLQR598"></a><span class="italic"><a id="sthref933"></a>composite_list_partitions</span></p>
<pre dir="ltr">
PARTITION BY LIST ( column )
  { subpartition_by_range
  | subpartition_by_list
  | subpartition_by_hash
  }
( list_partition_desc [, list_partition_desc ]... )

</pre>
<p class="subhead2"><a id="SQLQR599"></a><span class="italic"><a id="sthref934"></a>composite_range_partitions</span></p>
<pre dir="ltr">
PARTITION BY RANGE ( column [, column]... )
  [ INTERVAL ( expr ) [ STORE IN ( tablespace [, tablespace]... ) ]]
  { subpartition_by_range
  | subpartition_by_list
  | subpartition_by_hash
  }
( range_partition_desc [, range_partition_desc ]... )

</pre>
<p class="subhead2"><a id="SQLQR600"></a><span class="italic"><a id="sthref935"></a>conditional_insert_clause</span></p>
<pre dir="ltr">
[ ALL | FIRST ]
WHEN condition
THEN insert_into_clause
  [ values_clause ]
  [ error_logging_clause ]
  [ insert_into_clause [ values_clause ] [ error_logging_clause ] ]...
[ WHEN condition
  THEN insert_into_clause
    [ values_clause ]
    [ error_logging_clause ]
    [ insert_into_clause [ values_clause ] [ error_logging_clause ] ]...
]...
[ ELSE insert_into_clause
  [ values_clause ]
  [ error_logging_clause ]
   [ insert_into_clause [ values_clause ] [ error_logging_clause ] ]...
]
</pre>
<p class="subhead2"><a id="SQLQR601"></a><span class="italic"><a id="sthref936"></a>constraint</span></p>
<pre dir="ltr">
{ inline_constraint
| out_of_line_constraint
| inline_ref_constraint
| out_of_line_ref_constraint
}
</pre>
<p class="subhead2"><a id="SQLQR602"></a><span class="italic"><a id="sthref937"></a>constraint_clauses</span></p>
<pre dir="ltr">
{ ADD { { out_of_line_constraint }...
      | out_of_line_REF_constraint
      }
| MODIFY { CONSTRAINT constraint_name
         | PRIMARY KEY
         | UNIQUE (column [, column ]...)
         } constraint_state [ CASCADE ]
| RENAME CONSTRAINT old_name TO new_name
| { drop_constraint_clause }...
}
</pre>
<p class="subhead2"><a id="SQLQR603"></a><span class="italic"><a id="sthref938"></a>constraint_state</span></p>
<pre dir="ltr">
[ [ [ NOT ] DEFERRABLE ]
  [ INITIALLY { IMMEDIATE | DEFERRED } ]
| [ INITIALLY { IMMEDIATE | DEFERRED } ]
  [ [ NOT ] DEFERRABLE ]
]
[ RELY | NORELY ]
[ using_index_clause ]
[ ENABLE | DISABLE ]
[ VALIDATE | NOVALIDATE ]
[ exceptions_clause ]
</pre>
<p class="subhead2"><a id="SQLQR604"></a><a id="sthref939"></a><span class="italic">context_clause</span></p>
<pre dir="ltr">
[ WITH INDEX CONTEXT,
  SCAN CONTEXT implementation_type
  [ COMPUTE ANCILLARY DATA ]
]
[ WITH COLUMN CONTEXT ]
</pre>
<p class="subhead2"><a id="SQLQR605"></a><span class="italic"><a id="sthref940"></a>controlfile_clauses</span></p>
<pre dir="ltr">
{ CREATE [ LOGICAL | PHYSICAL ]
     STANDBY CONTROLFILE AS
     'filename' [ REUSE ]
| BACKUP CONTROLFILE TO
     { 'filename' [ REUSE ]
     | trace_file_clause
     }
}
</pre>
<p class="subhead2"><a id="SQLQR606"></a><span class="italic"><a id="sthref941"></a>convert_database_clause</span></p>
<pre dir="ltr">
CONVERT TO ( PHYSICAL | SNAPSHOT ) STANDBY
</pre>
<p class="subhead2"><a id="SQLQR607"></a><span class="italic"><a id="sthref942"></a>cost_matrix_clause</span></p>
<pre dir="ltr">
COST
  { MODEL [AUTO]
  | ( class_value [, class_value]... )
        VALUES ( ( cost_value [, cost_value]...) 
                 [ , (cost_value [, cost_value]... ) ]...
               )
  }
</pre>
<p class="subhead2"><a id="SQLQR608"></a><span class="italic"><a id="sthref943"></a>create_datafile_clause</span></p>
<pre dir="ltr">
CREATE DATAFILE
   { 'filename' | filenumber }
     [, 'filename' | filenumber ]...
   }
   [ AS { file_specification
          [, file_specification ]...
        | NEW
        }
   ]
</pre>
<p class="subhead2"><a id="SQLQR609"></a><span class="italic"><a id="sthref944"></a>create_mv_refresh</span></p>
<pre dir="ltr">
{ REFRESH
  { { FAST | COMPLETE | FORCE }
  | { ON DEMAND 
    | ON COMMIT 
    }
  | { START WITH date |
      NEXT date 
    }...
  | WITH { PRIMARY KEY | ROWID }
  | USING
     { DEFAULT [ MASTER | LOCAL ] ROLLBACK SEGMENT
     | [ MASTER | LOCAL ] ROLLBACK SEGMENT rollback_segment
     }...
  | USING
     { ENFORCED | TRUSTED } CONSTRAINTS
  }...
| NEVER REFRESH
}
</pre>
<p class="subhead2"><a id="SQLQR989"></a><span class="italic"><a id="sthref945"></a>cycle_clause</span></p>
<pre dir="ltr">
{CYCLE c_alias [, c_alias]...
    SET cycle_mark_c_alias TO cycle_value
    DEFAULT no_cycle_value
}
</pre>
<p class="subhead2"><a id="SQLQR610"></a><span class="italic"><a id="sthref946"></a>database_file_clauses</span></p>
<pre dir="ltr">
{ RENAME FILE  'filename' [, 'filename' ]...
   TO 'filename'
| create_datafile_clause
| alter_datafile_clause
| alter_tempfile_clause
}
</pre>
<p class="subhead2"><a id="SQLQR611"></a><span class="italic"><a id="sthref947"></a>database_logging_clauses</span></p>
<pre dir="ltr">
{ LOGFILE
    [ GROUP integer ] file_specification
      [, [ GROUP integer ] file_specification ]...
| MAXLOGFILES integer
| MAXLOGMEMBERS integer
| MAXLOGHISTORY integer
| { ARCHIVELOG | NOARCHIVELOG }
| FORCE LOGGING
}
</pre>
<p class="subhead2"><a id="SQLQR612"></a><span class="italic"><a id="sthref948"></a>datafile_tempfile_clauses</span></p>
<pre dir="ltr">
{ ADD { DATAFILE | TEMPFILE }
   [ file_specification [, file_specification ]... ]
| DROP {DATAFILE | TEMPFILE } { 'filename' | file_number }
| SHRINK TEMPFILE { 'filename' | file_number } [KEEP size_clause]
| RENAME DATAFILE 'filename' [, 'filename' ]...
    TO 'filename' [, 'filename' ]...
| { DATAFILE | TEMPFILE } { ONLINE | OFFLINE }
}
</pre>
<p class="subhead2"><a id="SQLQR613"></a><span class="italic"><a id="sthref949"></a>datafile_tempfile_spec</span></p>
<pre dir="ltr">
[ 'filename' | 'ASM_filename' ]
[ SIZE size_clause ]
[ REUSE ]
[ autoextend_clause ]
</pre>
<p class="subhead2"><a id="SQLQR614"></a><a id="sthref950"></a><span class="italic">db_user_proxy_clauses</span></p>
<pre dir="ltr">
[ WITH
  { ROLE { role_name [, role_name]...
         | ALL EXCEPT role_name [, role_name]...
         }
  | NO ROLES
  }
]
[ AUTHENTICATION REQUIRED ]
</pre>
<p class="subhead2"><a id="SQLQR615"></a><a id="sthref951"></a><span class="italic">dblink</span></p>
<pre dir="ltr">
database[.domain [.domain ]... ] [ @ connection_qualifier ]
</pre>
<p class="subhead2"><a id="SQLQR616"></a><a id="sthref952"></a><span class="italic">dblink_authentication</span></p>
<pre dir="ltr">
AUTHENTICATED BY user IDENTIFIED BY password
</pre>
<p class="subhead2"><a id="SQLQR617"></a><a id="sthref953"></a><span class="italic">deallocate_unused_clause</span></p>
<pre dir="ltr">
DEALLOCATE UNUSED [ KEEP size_clause ]
</pre>
<p class="subhead2"><a id="SQLQR618"></a><span class="italic"><a id="sthref954"></a>default_cost_clause</span></p>
<pre dir="ltr">
DEFAULT COST (cpu_cost, io_cost, network_cost)
</pre>
<p class="subhead2"><a id="SQLQR619"></a><span class="italic"><a id="sthref955"></a>default_selectivity_clause</span></p>
<pre dir="ltr">
DEFAULT SELECTIVITY default_selectivity
</pre>
<p class="subhead2"><a id="SQLQR620"></a><span class="italic"><a id="sthref956"></a>default_settings_clauses</span></p>
<pre dir="ltr">
{ DEFAULT EDITION = edition_name
| SET DEFAULT
     { BIGFILE | SMALLFILE } TABLESPACE
| DEFAULT TABLESPACE tablespace
| DEFAULT TEMPORARY TABLESPACE
     { tablespace | tablespace_group_name }
| RENAME GLOBAL_NAME TO
     database.domain [.domain ]...
| { ENABLE BLOCK CHANGE TRACKING
    [ USING FILE 'filename' [ REUSE ] ]
  | DISABLE BLOCK CHANGE TRACKING
  }
| flashback_mode_clause
| set_time_zone_clause
}
</pre>
<p class="subhead2"><a id="SQLQR621"></a><span class="italic"><a id="sthref957"></a>default_tablespace</span></p>
<pre dir="ltr">
DEFAULT TABLESPACE tablespace
[ DATAFILE datafile_tempfile_spec ]
[ extent_management_clause ]
</pre>
<p class="subhead2"><a id="SQLQR622"></a><span class="italic"><a id="sthref958"></a>default_temp_tablespace</span></p>
<pre dir="ltr">
  [ BIGFILE | SMALLFILE ]
DEFAULT TEMPORARY TABLESPACE tablespace
  [ TEMPFILE file_specification [, file_specification ]...]
  [ extent_management_clause ]
</pre>
<p class="subhead2"><a id="SQLQR623"></a><span class="italic"><a id="sthref959"></a>deferred_segment_creation</span></p>
<pre dir="ltr">
SEGMENT CREATION { IMMEDIATE | DEFERRED }
</pre>
<p class="subhead2"><a id="SQLQR624"></a><span class="italic"><a id="sthref960"></a>dependent_tables_clause</span></p>
<pre dir="ltr">
DEPENDENT TABLES
( table ( partition_spec [, partition_spec]... 
          [, table ( partition_spec [, partition_spec]... ]
        )
)
</pre>
<p class="subhead2"><a id="SQLQR625"></a><span class="italic"><a id="sthref961"></a>dimension_join_clause</span></p>
<pre dir="ltr">
{ JOIN KEY
   { child_key_column
   | (child_key_column [, child_key_column ]...)
   }
  REFERENCES parent_level
}...
</pre>
<p class="subhead2"><a id="SQLQR626"></a><span class="italic"><a id="sthref962"></a>disk_offline_clause</span></p>
<pre dir="ltr">
OFFLINE
  { [QUORUM | REGULAR] DISK disk_name [, disk_name ] ...
  | DISKS IN [QUORUM | REGULAR] FAILGROUP failgroup_name [, failgroup_name ]...
  } ... [timeout_clause]
</pre>
<p class="subhead2"><a id="SQLQR627"></a><span class="italic"><a id="sthref963"></a>disk_online_clause</span></p>
<pre dir="ltr">
ONLINE
  { { [QUORUM | REGULAR] DISK disk_name [, disk_name]...
    | DISKS IN [QUORUM | REGULAR] FAILGROUP failgroup_name [, failgroup_name]...
    } ...
  | ALL
  } [ WAIT | NOWAIT ]
</pre>
<p class="subhead2"><a id="SQLQR628"></a><span class="italic"><a id="sthref964"></a>disk_region_clause</span></p>
<pre dir="ltr">
[ HOT | COLD ] [ MIRRORHOT | MIRRORCOLD ]
</pre>
<p class="subhead2"><a id="SQLQR629"></a><span class="italic"><a id="sthref965"></a>diskgroup_alias_clauses</span></p>
<pre dir="ltr">
{ ADD ALIAS
    'alias_name' FOR 'filename'
    [, 'alias_name' FOR 'filename' ]...
| DROP ALIAS 'alias_name' [, 'alias_name' ]...
| RENAME ALIAS
    'old_alias_name' TO 'new_alias_name'
    [, 'old_alias_name' TO 'new_alias_name' ]...
}
</pre>
<p class="subhead2"><a id="SQLQR630"></a><span class="italic"><a id="sthref966"></a>diskgroup_attributes</span></p>
<pre dir="ltr">
SET ATTRIBUTE 'attribute_name' = 'attribute_value'
</pre>
<p class="subhead2"><a id="SQLQR631"></a><span class="italic"><a id="sthref967"></a>diskgroup_availability</span></p>
<pre dir="ltr">
{ MOUNT [ RESTRICTED | NORMAL ] 
           [ FORCE | NOFORCE ]
| DISMOUNT [ FORCE | NOFORCE ]
}
</pre>
<p class="subhead2"><a id="SQLQR632"></a><span class="italic"><a id="sthref968"></a>diskgroup_directory_clauses</span></p>
<pre dir="ltr">
{ ADD DIRECTORY 'filename' [, 'filename' ]...
| DROP DIRECTORY
    'filename' [ FORCE | NOFORCE ]
    [, 'filename' [ FORCE | NOFORCE ] ]...
| RENAME DIRECTORY
    'old_dir_name' TO 'new_dir_name'
    [, 'old_dir_name' TO 'new_dir_name' ]...
}
</pre>
<p class="subhead2"><a id="SQLQR633"></a><span class="italic"><a id="sthref969"></a>diskgroup_template_clauses</span></p>
<pre dir="ltr">
{ { ADD | MODIFY } TEMPLATE template_name qualified_template_clause
      [, template_name qualified_template_clause ]...
| DROP TEMPLATE template_name [, template_name ]...
}
</pre>
<p class="subhead2"><a id="SQLQR634"></a><span class="italic"><a id="sthref970"></a>diskgroup_volume_clauses</span></p>
<pre dir="ltr">
{ add_volume_clause
| modify_volume_clause
| RESIZE VOLUME asm_volume SIZE size_clause
| DROP VOLUME asm_volume
}
</pre>
<p class="subhead2"><a id="SQLQR635"></a><span class="italic"><a id="sthref971"></a>distributed_recov_clauses</span></p>
<pre dir="ltr">
{ ENABLE | DISABLE } DISTRIBUTED RECOVERY
</pre>
<p class="subhead2"><a id="SQLQR636"></a><span class="italic"><a id="sthref972"></a>dml_table_expression_clause</span></p>
<pre dir="ltr">
{ [ schema. ]
  { table
    [ partition_extension_clause
    | @ dblink
    ]
  | { view | materialized view } [ @ dblink ]
  }
| ( subquery [ subquery_restriction_clause ] )
| table_collection_expression
}
</pre>
<p class="subhead2"><a id="SQLQR637"></a><span class="italic"><a id="sthref973"></a>domain_index_clause</span></p>
<pre dir="ltr">
indextype
   [ local_domain_index_clause ]
   [ parallel_clause ]
   [ PARAMETERS ('ODCI_parameters') ]
</pre>
<p class="subhead2"><a id="SQLQR638"></a><a id="sthref974"></a><span class="italic">drop_binding_clause</span></p>
<pre dir="ltr">
DROP BINDING (parameter_type [, parameter_type ]...)
  [ FORCE ]
</pre>
<p class="subhead2"><a id="SQLQR639"></a><span class="italic"><a id="sthref975"></a>drop_column_clause</span></p>
<pre dir="ltr">
{ SET UNUSED { COLUMN column
             | (column [, column ]...)
             }
  [ { CASCADE CONSTRAINTS | INVALIDATE }... ]
| DROP { COLUMN column
       | (column [, column ]...)
       }
  [ { CASCADE CONSTRAINTS | INVALIDATE }... ]
  [ CHECKPOINT integer ]
| DROP { UNUSED COLUMNS
       | COLUMNS CONTINUE
       }
  [ CHECKPOINT integer ]
}
</pre>
<p class="subhead2"><a id="SQLQR640"></a><span class="italic"><a id="sthref976"></a>drop_constraint_clause</span></p>
<pre dir="ltr">
DROP
   { { PRIMARY KEY
     | UNIQUE (column [, column ]...)
     }
     [ CASCADE ]
     [ { KEEP | DROP } INDEX ]
   | CONSTRAINT constraint_name
     [ CASCADE ]
   }
</pre>
<p class="subhead2"><a id="SQLQR641"></a><span class="italic"><a id="sthref977"></a>drop_disk_clause</span></p>
<pre dir="ltr">
DROP
{ [QUORUM | REGULAR] DISK
    disk_name [ FORCE | NOFORCE ]
    [, disk_name [ FORCE | NOFORCE ] ]...
| DISKS IN [QUORUM | REGULAR] FAILGROUP
    failgroup_name [ FORCE | NOFORCE ]
    [, failgroup_name [ FORCE | NOFORCE ] ]...
}
</pre>
<p class="subhead2"><a id="SQLQR642"></a><span class="italic"><a id="sthref978"></a>drop_diskgroup_file_clause</span></p>
<pre dir="ltr">
DROP FILE 'filename' [, 'filename' ]...
</pre>
<p class="subhead2"><a id="SQLQR643"></a><span class="italic"><a id="sthref979"></a>drop_index_partition</span></p>
<pre dir="ltr">
DROP PARTITION partition_name
</pre>
<p class="subhead2"><a id="SQLQR644"></a><span class="italic"><a id="sthref980"></a>drop_logfile_clauses</span></p>
<pre dir="ltr">
DROP [ STANDBY ] LOGFILE
   { logfile_descriptor
     [, logfile_descriptor ]...
   | MEMBER 'filename'
            [, 'filename' ]...
   }
</pre>
<p class="subhead2"><a id="SQLQR645"></a><span class="italic"><a id="sthref981"></a>drop_table_partition</span></p>
<pre dir="ltr">
DROP partition_extended_name
   [ update_index_clauses [ parallel_clause ] ]
</pre>
<p class="subhead2"><a id="SQLQR646"></a><span class="italic"><a id="sthref982"></a>drop_table_subpartition</span></p>
<pre dir="ltr">
DROP subpartition_extended_name
   [ update_index_clauses [ parallel_clause ] ]
</pre>
<p class="subhead2"><a id="SQLQR647"></a><span class="italic"><a id="sthref983"></a>ds_iso_format</span></p>
<pre dir="ltr">
[-] P [days D]
  [T [hours H] [minutes M] [seconds [. frac_secs] S ] ]
</pre>
<p class="subhead2"><a id="SQLQR648"></a><span class="italic"><a id="sthref984"></a>else_clause</span></p>
<pre dir="ltr">
ELSE else_expr
</pre>
<p class="subhead2"><a id="SQLQR649"></a><span class="italic"><a id="sthref985"></a>enable_disable_clause</span></p>
<pre dir="ltr">
{ ENABLE | DISABLE }
[ VALIDATE | NOVALIDATE ]
{ UNIQUE (column [, column ]...)
| PRIMARY KEY
| CONSTRAINT constraint_name
}
[ using_index_clause ]
[ exceptions_clause ]
[ CASCADE ]
[ { KEEP | DROP } INDEX ]
</pre>
<p class="subhead2"><a id="SQLQR650"></a><span class="italic"><a id="sthref986"></a>enable_disable_volumes</span></p>
<pre dir="ltr">
{ ENABLE | DISABLE } VOLUME
  { asm_volume [, asm_volume]...
  | ALL
  }
</pre>
<p class="subhead2"><a id="SQLQR651"></a><a id="sthref987"></a><span class="italic">encryption_spec</span></p>
<pre dir="ltr">
  [ USING 'encrypt_algorithm' ]
  [ IDENTIFIED BY password ]
  [ 'integrity_algorithm' ]
  [ [ NO ] SALT ]
</pre>
<p class="subhead2"><a id="SQLQR652"></a><span class="italic"><a id="sthref988"></a>end_session_clauses</span></p>
<pre dir="ltr">
{ DISCONNECT SESSION 'integer1, integer2'
     [ POST_TRANSACTION ]
| KILL SESSION 'integer1, integer2 [, @integer3]'
}
[ IMMEDIATE ]
</pre>
<p class="subhead2"><a id="SQLQR653"></a><span class="italic"><a id="sthref989"></a>error_logging_clause</span></p>
<pre dir="ltr">
LOG ERRORS 
  [ INTO [schema.] table ]
  [ (simple_expression) ]
  [ REJECT LIMIT { integer | UNLIMITED } ]
</pre>
<p class="subhead2"><a id="SQLQR654"></a><span class="italic"><a id="sthref990"></a>exceptions_clause</span></p>
<pre dir="ltr">
EXCEPTIONS INTO [ schema. ] table
</pre>
<p class="subhead2"><a id="SQLQR655"></a><span class="italic"><a id="sthref991"></a>exchange_partition_subpart</span></p>
<pre dir="ltr">
EXCHANGE { partition_extended_name
         | subpartition_extended_name
         }
   WITH TABLE [ schema. ] table
   [ { INCLUDING | EXCLUDING } INDEXES ]
   [ { WITH | WITHOUT } VALIDATION ]
   [ exceptions_clause ]
   [ update_index_clauses [ parallel_clause ] ]
</pre>
<p class="subhead2"><a id="SQLQR656"></a><span class="italic"><a id="sthref992"></a>expr</span></p>
<pre dir="ltr">
{ simple_expression
| compound_expression
| case_expression
| cursor_expression
| datetime_expression
| function_expression
| interval_expression
| object_access_expression
| scalar_subquery_expression
| model_expression
| type_constructor_expression
| variable_expression
}
</pre>
<p class="subhead2"><a id="SQLQR657"></a><span class="italic"><a id="sthref993"></a>expression_list</span></p>
<pre dir="ltr">
{ expr [, expr ]...
| ( [expr [, expr ]] ...)
}
</pre>
<p class="subhead2"><a id="SQLQR658"></a><a id="sthref994"></a><span class="italic">extended_attribute_clause</span></p>
<pre dir="ltr">
ATTRIBUTE attribute
  { LEVEL level
    DETERMINES { dependent_column
               | (dependent_column [, dependent_column ]... )
               }
  }...
</pre>
<p class="subhead2"><a id="SQLQR659"></a><span class="italic"><a id="sthref995"></a>extent_management_clause</span></p>
<pre dir="ltr">
EXTENT MANAGEMENT LOCAL
  [ AUTOALLOCATE
  | UNIFORM [ SIZE size_clause ]
  ]
</pre>
<p class="subhead2"><a id="SQLQR660"></a><span class="italic"><a id="sthref996"></a>external_data_properties</span></p>
<pre dir="ltr">
DEFAULT DIRECTORY directory
[ ACCESS PARAMETERS
  { (opaque_format_spec)
  | USING CLOB subquery
  }
]
LOCATION
   ([ directory: ] 'location_specifier'
      [, [ directory: ] 'location_specifier' ]...
   )
</pre>
<p class="subhead2"><a id="SQLQR661"></a><span class="italic"><a id="sthref997"></a>external_table_clause</span></p>
<pre dir="ltr">
([ TYPE access_driver_type ]
 external_data_properties
)
[ REJECT LIMIT { integer | UNLIMITED } ]
</pre>
<p class="subhead2"><a id="SQLQR662"></a><span class="italic"><a id="sthref998"></a>file_owner_clause</span></p>
<pre dir="ltr">
SET OWNERSHIP { OWNER = user | GROUP = usergroup 
                  [, OWNER = user | GROUP = usergroup ]...
              } FOR FILE 'filename' [, 'filename']...
</pre>
<p class="subhead2"><a id="SQLQR663"></a><span class="italic"><a id="sthref999"></a>file_permissions_clause</span></p>
<pre dir="ltr">
SET PERMISSION { OWNER | GROUP | OTHER }
  = { NONE | READ ONLY | READ WRITE }
  [, { OWNER | GROUP | OTHER | ALL }
    = { NONE | READ ONLY | READ WRITE } ]...
    FOR FILE 'filename' [, 'filename']...
</pre>
<p class="subhead2"><a id="SQLQR664"></a><span class="italic"><a id="sthref1000"></a>file_specification</span></p>
<pre dir="ltr">
{ datafile_tempfile_spec
| redo_log_file_spec
}
</pre>
<p class="subhead2"><a id="SQLQR665"></a><span class="italic"><a id="sthref1001"></a>flashback_archive_clause</span></p>
<pre dir="ltr">
FLASHBACK ARCHIVE [flashback_archive] | NO FLASHBACK ARCHIVE
</pre>
<p class="subhead2"><a id="SQLQR666"></a><span class="italic"><a id="sthref1002"></a>flashback_archive_quota</span></p>
<pre dir="ltr">
QUOTA integer { M | G | T | P | E }
</pre>
<p class="subhead2"><a id="SQLQR667"></a><span class="italic"><a id="sthref1003"></a>flashback_archive_retention</span></p>
<pre dir="ltr">
RETENTION integer {YEAR | MONTH | DAY}
</pre>
<p class="subhead2"><a id="SQLQR668"></a><span class="italic"><a id="sthref1004"></a>flashback_mode_clause</span></p>
<pre dir="ltr">
FLASHBACK { ON | OFF }
</pre>
<p class="subhead2"><a id="SQLQR669"></a><span class="italic"><a id="sthref1005"></a>flashback_query_clause</span></p>
<pre dir="ltr">
{ VERSIONS BETWEEN
    { SCN | TIMESTAMP }
    { expr | MINVALUE } AND { expr | MAXVALUE }
| AS OF { SCN | TIMESTAMP } expr
}
</pre>
<p class="subhead2"><a id="SQLQR670"></a><a id="sthref1006"></a><span class="italic">for_update_clause</span></p>
<pre dir="ltr">
FOR UPDATE
  [ OF [ [ schema. ] { table | view } . ] column
         [, [ [ schema. ] { table | view } . ] column
         ]...
  ]
  [ { NOWAIT | WAIT integer 
    |  SKIP LOCKED
    }
  ]
</pre>
<p class="subhead2"><a id="SQLQR671"></a><span class="italic"><a id="sthref1007"></a>full_database_recovery</span></p>
<pre dir="ltr">
[ STANDBY ] DATABASE
[ { UNTIL { CANCEL
          | TIME date
          | CHANGE integer
          | CONSISTENT
          }
  | USING BACKUP CONTROLFILE
  }...
]
</pre>
<p class="subhead2"><a id="SQLQR672"></a><span class="italic"><a id="sthref1008"></a>fully_qualified_file_name</span></p>
<pre dir="ltr">
+diskgroup_name/db_name/file_type/
   file_type_tag.filenumber.incarnation_number
</pre>
<p class="subhead2"><a id="SQLQR673"></a><span class="italic"><a id="sthref1009"></a>function_association</span></p>
<pre dir="ltr">
{ FUNCTIONS
     [ schema. ]function [, [ schema. ]function ]...
| PACKAGES
     [ schema. ]package [, [ schema. ]package ]...
| TYPES
     [ schema. ]type [, [ schema. ]type ]...
| INDEXES
     [ schema. ]index [, [ schema. ]index ]...
| INDEXTYPES
     [ schema. ]indextype [, [ schema. ]indextype ]...
}
{ using_statistics_type
| { default_cost_clause [, default_selectivity_clause ]
  | default_selectivity_clause [, default_cost_clause ]
  }
}
</pre>
<p class="subhead2"><a id="SQLQR674"></a><span class="italic"><a id="sthref1010"></a>general_recovery</span></p>
<pre dir="ltr">
RECOVER
[ AUTOMATIC ]
[ FROM 'location' ]
{ { full_database_recovery
  | partial_database_recovery
  | LOGFILE 'filename'
  }
  [ { TEST
    | ALLOW integer CORRUPTION
    | parallel_clause
    }...
  ]
| CONTINUE [ DEFAULT ]
| CANCEL
}
</pre>
<p class="subhead2"><a id="SQLQR675"></a><a id="sthref1011"></a><span class="italic">global_partitioned_index</span></p>
<pre dir="ltr">
GLOBAL PARTITION BY
   { RANGE (column_list)
        (index_partitioning_clause)
   | HASH (column_list)
        { individual_hash_partitions
        | hash_partitions_by_quantity
        }
   }
</pre>
<p class="subhead2"><a id="SQLQR676"></a><span class="italic"><a id="sthref1012"></a>grant_object_privileges</span></p>
<pre dir="ltr">
{ object_privilege | ALL [ PRIVILEGES ] }
  [ (column [, column ]...) ]
    [, { object_privilege | ALL [ PRIVILEGES ] }
       [ (column [, column ]...) ]
    ]...
on_object_clause
TO grantee_clause
  [ WITH HIERARCHY OPTION ]
  [ WITH GRANT OPTION ]
</pre>
<p class="subhead2"><a id="SQLQR677"></a><span class="italic"><a id="sthref1013"></a>grant_system_privileges</span></p>
<pre dir="ltr">
{ system_privilege
| role
| ALL PRIVILEGES
}
  [, { system_privilege
     | role
     | ALL PRIVILEGES
     }
  ]...
TO grantee_clause
  [ WITH ADMIN OPTION ]
</pre>
<p class="subhead2"><a id="SQLQR678"></a><span class="italic"><a id="sthref1014"></a>grantee_clause</span></p>
<pre dir="ltr">
{ user [ IDENTIFIED BY password ]
| role
| PUBLIC
}
  [, { user [ IDENTIFIED BY password ]
     | role
     | PUBLIC
     } 
  ]...
</pre>
<p class="subhead2"><a id="SQLQR679"></a><span class="italic"><a id="sthref1015"></a>group_by_clause</span></p>
<pre dir="ltr">
GROUP BY
   { expr
   | rollup_cube_clause
   | grouping_sets_clause
   }
     [, { expr
        | rollup_cube_clause
        | grouping_sets_clause
        }
     ]...
   [ HAVING condition ]
</pre>
<p class="subhead2"><a id="SQLQR680"></a><span class="italic"><a id="sthref1016"></a>grouping_expression_list</span></p>
<pre dir="ltr">
expression_list [, expression_list ]...
</pre>
<p class="subhead2"><a id="SQLQR681"></a><span class="italic"><a id="sthref1017"></a>grouping_sets_clause</span></p>
<pre dir="ltr">
GROUPING SETS
({ rollup_cube_clause | grouping_expression_list })
</pre>
<p class="subhead2"><a id="SQLQR682"></a><span class="italic"><a id="sthref1018"></a>hash_partitions</span></p>
<pre dir="ltr">
PARTITION BY HASH (column [, column ] ...)
{ individual_hash_partitions
| hash_partitions_by_quantity
}
</pre>
<p class="subhead2"><a id="SQLQR683"></a><a id="sthref1019"></a><span class="italic">hash_partitions_by_quantity</span></p>
<pre dir="ltr">
PARTITIONS hash_partition_quantity
[ STORE IN (tablespace [, tablespace ]...) ]
[ table_compression | key_compression ]
[ OVERFLOW STORE IN (tablespace [, tablespace ]...) ]
</pre>
<p class="subhead2"><a id="SQLQR684"></a><a id="sthref1020"></a><span class="italic">hash_subparts_by_quantity</span></p>
<pre dir="ltr">
SUBPARTITIONS integer [STORE IN ( tablespace [, tablespace]... )]
</pre>
<p class="subhead2"><a id="SQLQR685"></a><span class="italic"><a id="sthref1021"></a>hierarchical_query_clause</span></p>
<pre dir="ltr">
{ CONNECT BY [ NOCYCLE ] condition [ START WITH condition ]
| START WITH condition CONNECT BY [ NOCYCLE ] condition
}
</pre>
<p class="subhead2"><a id="SQLQR686"></a><span class="italic"><a id="sthref1022"></a>hierarchy_clause</span></p>
<pre dir="ltr">
HIERARCHY hierarchy
(child_level { CHILD OF parent_level }...
  [ dimension_join_clause ]
)
</pre>
<p class="subhead2"><a id="SQLQR687"></a><span class="italic"><a id="sthref1023"></a>implementation_clause</span></p>
<pre dir="ltr">
{ ANCILLARY TO primary_operator
    ( parameter_type [, parameter_type ]...)
      [, primary_operator
         ( parameter_type [, parameter_type ]...)
      ]...
| context_clause
}
</pre>
<p class="subhead2"><a id="SQLQR688"></a><span class="italic"><a id="sthref1024"></a>incomplete_file_name</span></p>
<pre dir="ltr">
+diskgroup_name [ (template_name) ]
</pre>
<p class="subhead2"><a id="SQLQR689"></a><a id="sthref1025"></a><span class="italic">index_attributes</span></p>
<pre dir="ltr">
[ { physical_attributes_clause
  | logging_clause
  | ONLINE
  | TABLESPACE { tablespace | DEFAULT }
  | key_compression
  | { SORT | NOSORT }
  | REVERSE
  | VISIBLE | INVISIBLE
  | parallel_clause
  }...
]
</pre>
<p class="subhead2"><a id="SQLQR690"></a><span class="italic"><a id="sthref1026"></a>index_expr</span></p>
<pre dir="ltr">
{ column | column_expression }
</pre>
<p class="subhead2"><a id="SQLQR691"></a><a id="sthref1027"></a><span class="italic">index_org_overflow_clause</span></p>
<pre dir="ltr">
  [ INCLUDING column_name ]
OVERFLOW [ segment_attributes_clause ]
</pre>
<p class="subhead2"><a id="SQLQR692"></a><a id="sthref1028"></a><span class="italic">index_org_table_clause</span></p>
<pre dir="ltr">
[ { mapping_table_clause
  | PCTTHRESHOLD integer
  | key_compression
  }...
]
[ index_org_overflow_clause ]
</pre>
<p class="subhead2"><a id="SQLQR693"></a><a id="sthref1029"></a><span class="italic">index_partition_description</span></p>
<pre dir="ltr">
PARTITION
[ partition
   [ { segment_attributes_clause
     | key_compression
     }...
   | PARAMETERS ( 'ODCI_parameters' )
   ] [ UNUSABLE ]
]
</pre>
<p class="subhead2"><a id="SQLQR694"></a><span class="italic"><a id="sthref1030"></a>index_partitioning_clause</span></p>
<pre dir="ltr">
PARTITION [ partition ]
   VALUES LESS THAN (literal[, literal]... )
   [ segment_attributes_clause ]
</pre>
<p class="subhead2"><a id="SQLQR695"></a><span class="italic"><a id="sthref1031"></a>index_properties</span></p>
<pre dir="ltr">
[ { { global_partitioned_index
    | local_partitioned_index
    }
  | index_attributes
  }...
| INDEXTYPE IS { domain_index_clause
               | XMLIndex_clause
               }
]
</pre>
<p class="subhead2"><a id="SQLQR696"></a><span class="italic"><a id="sthref1032"></a>index_subpartition_clause</span></p>
<pre dir="ltr">
{ STORE IN (tablespace[, tablespace ]...)
| (SUBPARTITION
      [ subpartition ][ TABLESPACE tablespace ] [ key_compression ] [ UNUSABLE ]
   [, SUBPARTITION
         [ subpartition ][ TABLESPACE tablespace ] [ key_compression ] [ UNUSABLE ]
   ]...
  )
}
</pre>
<p class="subhead2"><a id="SQLQR697"></a><span class="italic"><a id="sthref1033"></a>individual_hash_partitions</span></p>
<pre dir="ltr">
PARTITION [partition] [partitioning_storage_clause]
  [, PARTITION [partition] [partitioning_storage_clause]]...
</pre>
<p class="subhead2"><a id="SQLQR698"></a><span class="italic"><a id="sthref1034"></a>individual_hash_subparts</span></p>
<pre dir="ltr">
SUBPARTITION [subpartition] [partitioning_storage_clause]
</pre>
<p class="subhead2"><a id="SQLQR699"></a><span class="italic"><a id="sthref1035"></a>inline_constraint</span></p>
<pre dir="ltr">
[ CONSTRAINT constraint_name ]
{ [ NOT ] NULL
| UNIQUE
| PRIMARY KEY
| references_clause
| CHECK (condition)
}
[ constraint_state ]
</pre>
<p class="subhead2"><a id="SQLQR700"></a><a id="sthref1036"></a><span class="italic">inline_ref_constraint</span></p>
<pre dir="ltr">
{ SCOPE  IS [ schema. ] scope_table
| WITH ROWID
| [ CONSTRAINT constraint_name ]
  references_clause
  [ constraint_state ]
}
</pre>
<p class="subhead2"><a id="SQLQR701"></a><span class="italic"><a id="sthref1037"></a>inner_cross_join_clause</span></p>
<pre dir="ltr">
{ [ INNER ] JOIN table_reference
    { ON condition
    | USING (column [, column ]...)
    }
| { CROSS
  | NATURAL [ INNER ]
  }
  JOIN table_reference
}
</pre>
<p class="subhead2"><a id="SQLQR702"></a><span class="italic"><a id="sthref1038"></a>insert_into_clause</span></p>
<pre dir="ltr">
INTO dml_table_expression_clause [ t_alias ]
[ (column [, column ]...) ]
</pre>
<p class="subhead2"><a id="SQLQR703"></a><a id="sthref1039"></a><span class="italic">instance_clauses</span></p>
<pre dir="ltr">
{ ENABLE | DISABLE } INSTANCE 'instance_name'
</pre>
<p class="subhead2"><a id="SQLQR704"></a><span class="italic"><a id="sthref1040"></a>integer</span></p>
<pre dir="ltr">
[ + | - ] digit [ digit ]...
</pre>
<p class="subhead2"><a id="SQLQR705"></a><a id="sthref1041"></a><span class="italic">interval_day_to_second</span></p>
<pre dir="ltr">
INTERVAL '{ integer | integer time_expr | time_expr }'
{ { DAY | HOUR | MINUTE } [ (leading_precision) ]
| SECOND [ (leading_precision [, fractional_seconds_precision ]) ]
}
[ TO { DAY | HOUR | MINUTE | SECOND [ (fractional_seconds_precision) ] } ]
</pre>
<p class="subhead2"><a id="SQLQR706"></a><span class="italic"><a id="sthref1042"></a>interval_year_to_month</span></p>
<pre dir="ltr">
INTERVAL 'integer [- integer ]'
{ YEAR | MONTH } [ (precision) ] [ TO { YEAR | MONTH } ]
</pre>
<p class="subhead2"><a id="SQLQR707"></a><span class="italic"><a id="sthref1043"></a>into_clause</span></p>
<pre dir="ltr">
INTO [ schema. ] table
</pre>
<p class="subhead2"><a id="SQLQR708"></a><span class="italic"><a id="sthref1044"></a>invoker_rights_clause</span></p>
<pre dir="ltr">
AUTHID { CURRENT_USER | DEFINER }
</pre>
<p class="subhead2"><a id="SQLQR709"></a><a id="sthref1045"></a><span class="italic">join_clause</span></p>
<pre dir="ltr">
table_reference
  { inner_cross_join_clause | outer_join_clause }...
</pre>
<p class="subhead2"><a id="SQLQR710"></a><span class="italic"><a id="sthref1046"></a>key_compression</span></p>
<pre dir="ltr">
{ COMPRESS [ integer ]
| NOCOMPRESS
}
</pre>
<p class="subhead2"><a id="SQLQR711"></a><span class="italic"><a id="sthref1047"></a>level_clause</span></p>
<pre dir="ltr">
LEVEL level IS
   { level_table.level_column
   | (level_table.level_column
      [, level_table.level_column ]...
     )
   }
</pre>
<p class="subhead2"><a id="SQLQR712"></a><span class="italic"><a id="sthref1048"></a>list_partition_desc</span></p>
<pre dir="ltr">
PARTITION [partition]
list_values_clause
table_partition_description
  [ ( range_subpartition_desc [, range_subpartition_desc]...
      | list_subpartition_desc, [, list_subpartition_desc]...
      | individual_hash_subparts [, individual_hash_subparts]...
    )
    | hash_subparts_by_quantity
  ]

</pre>
<p class="subhead2"><a id="SQLQR713"></a><span class="italic"><a id="sthref1049"></a>list_partitions</span></p>
<pre dir="ltr">
PARTITION BY LIST (column)
(PARTITION [ partition ]
    list_values_clause table_partition_description
  [, PARTITION [ partition ]
        list_values_clause table_partition_description
  ]...
)
</pre>
<p class="subhead2"><a id="SQLQR714"></a><span class="italic"><a id="sthref1050"></a>list_subpartition_desc</span></p>
<pre dir="ltr">
SUBPARTITION [subpartition]
  list_values_clause
  [partitioning_storage_clause]
</pre>
<p class="subhead2"><a id="SQLQR715"></a><span class="italic"><a id="sthref1051"></a>list_values_clause</span></p>
<pre dir="ltr">
VALUES ({ literal | NULL }
        [, { literal | NULL }]...
       | DEFAULT
       )
</pre>
<p class="subhead2"><a id="SQLQR716"></a><span class="italic"><a id="sthref1052"></a>LOB_compression_clause</span></p>
<pre dir="ltr">
{ COMPRESS [HIGH | MEDIUM | LOW ]
| NOCOMPRESS
}
</pre>
<p class="subhead2"><a id="SQLQR717"></a><span class="italic"><a id="sthref1053"></a>LOB_deduplicate_clause</span></p>
<pre dir="ltr">
{ DEDUPLICATE   
| KEEP_DUPLICATES
}
</pre>
<p class="subhead2"><a id="SQLQR718"></a><span class="italic"><a id="sthref1054"></a>LOB_parameters</span></p>
<pre dir="ltr">
{ { ENABLE | DISABLE } STORAGE IN ROW
  | CHUNK integer
  | PCTVERSION integer
  | FREEPOOLS integer
  | LOB_retention_clause
  | LOB_deduplicate_clause
  | LOB_compression_clause
  | { ENCRYPT encryption_spec | DECRYPT }
  | { CACHE | NOCACHE | CACHE READS } [ logging_clause ] 
}...
</pre>
<p class="subhead2"><a id="SQLQR719"></a><a id="sthref1055"></a><span class="italic">LOB_partition_storage</span></p>
<pre dir="ltr">
PARTITION partition
{ LOB_storage_clause | varray_col_properties }...
  [ (SUBPARTITION subpartition
     { LOB_partitioning_storage | varray_col_properties }...
    )
]
</pre>
<p class="subhead2"><a id="SQLQR720"></a><a id="sthref1056"></a><span class="italic">LOB_partitioning_storage</span></p>
<pre dir="ltr">
LOB (LOB_item) STORE AS [BASICFILE | SECUREFILE]
  [ LOB_segname [ (TABLESPACE tablespace) ]
  | (TABLESPACE tablespace)
  ]
</pre>
<p class="subhead2"><a id="SQLQR721"></a><a id="sthref1057"></a><span class="italic">LOB_retention_storage</span></p>
<pre dir="ltr">
RETENTION [ MAX | MIN integer | AUTO | NONE ]
</pre>
<p class="subhead2"><a id="SQLQR722"></a><a id="sthref1058"></a><span class="italic">LOB_storage_clause</span></p>
<pre dir="ltr">
LOB
{ (LOB_item [, LOB_item ]...)
     STORE AS { {SECUREFILE | BASICFILE}
              | (LOB_storage_parameters)
              }...
| (LOB_item)
     STORE AS { {SECUREFILE | BASICFILE}
              | LOB_segname 
              | (LOB_storage_parameters)
              }...
}
</pre>
<p class="subhead2"><a id="SQLQR723"></a><span class="italic"><a id="sthref1059"></a>LOB_storage_parameters</span></p>
<pre dir="ltr">
{ { TABLESPACE tablespace
  | LOB_parameters [storage_clause]
  }...
| storage_clauase
}
</pre>
<p class="subhead2"><a id="SQLQR724"></a><span class="italic"><a id="sthref1060"></a>local_domain_index_clause</span></p>
<pre dir="ltr">
LOCAL
  [ ( PARTITION partition [ PARAMETERS ( 'ODCI_parameters' ) ]
      [,  PARTITION partition [ PARAMETERS ('ODCI_parameters') ]]...
    )
  ]
</pre>
<p class="subhead2"><a id="SQLQR725"></a><span class="italic"><a id="sthref1061"></a>local_partitioned_index</span></p>
<pre dir="ltr">
LOCAL
[ on_range_partitioned_table
| on_list_partitioned_table
| on_hash_partitioned_table
| on_comp_partitioned_table
]
</pre>
<p class="subhead2"><a id="SQLQR726"></a><span class="italic"><a id="sthref1062"></a>local_XMLIndex_clause</span></p>
<pre dir="ltr">
LOCAL
  [ ( PARTITION partition [ XMLIndex_parameters_clause ]
      [, PARTITION partition [ XMLIndex_parameters)clause ]]...
    )
  ]
</pre>
<p class="subhead2"><a id="SQLQR727"></a><a id="sthref1063"></a><span class="italic">logfile_clause</span></p>
<pre dir="ltr">
LOGFILE
[ GROUP integer ] file_specification
  [, [ GROUP integer ] file_specification ]...
</pre>
<p class="subhead2"><a id="SQLQR728"></a><a id="sthref1064"></a><span class="italic">logfile_clauses</span></p>
<pre dir="ltr">
{ { ARCHIVELOG [ MANUAL ]
  | NOARCHIVELOG
  }
| [ NO ] FORCE LOGGING
| RENAME FILE 'filename' [, 'filename' ]...
    TO 'filename'
| CLEAR [ UNARCHIVED ]
    LOGFILE logfile_descriptor [, logfile_descriptor ]...
    [ UNRECOVERABLE DATAFILE ]
| add_logfile_clauses
| drop_logfile_clauses
| switch_logfile_clause
| supplemental_db_logging
}
</pre>
<p class="subhead2"><a id="SQLQR729"></a><span class="italic"><a id="sthref1065"></a>logfile_descriptor</span></p>
<pre dir="ltr">
{ GROUP integer
| ('filename' [, 'filename' ]...)
| 'filename'
}
</pre>
<p class="subhead2"><a id="SQLQR730"></a><span class="italic"><a id="sthref1066"></a>logging_clause</span></p>
<pre dir="ltr">
{ LOGGING | NOLOGGING |  FILESYSTEM_LIKE_LOGGING }
</pre>
<p class="subhead2"><a id="SQLQR731"></a><span class="italic"><a id="sthref1067"></a>main_model</span></p>
<pre dir="ltr">
[ MAIN main_model_name ]
model_column_clauses
[ cell_reference_options ]
model_rules_clause
</pre>
<p class="subhead2"><a id="SQLQR732"></a><span class="italic"><a id="sthref1068"></a>managed_standby_recovery</span></p>
<pre dir="ltr">
RECOVER
{ MANAGED STANDBY DATABASE
    [ { USING CURRENT LOGFILE
      | DISCONNECT [FROM SESSION]
      | NODELAY
      | UNTIL CHANGE integer
      | UNTIL CONSISTENT
      | parallel_clause
      }...
    | FINISH
    | CANCEL
    ]
| TO LOGICAL STANDBY { db_name | KEEP IDENTITY }
}
</pre>
<p class="subhead2"><a id="SQLQR733"></a><span class="italic"><a id="sthref1069"></a>mapping_table_clauses</span></p>
<pre dir="ltr">
{ MAPPING TABLE | NOMAPPING }
</pre>
<p class="subhead2"><a id="SQLQR734"></a><span class="italic"><a id="sthref1070"></a>materialized_view_props</span></p>
<pre dir="ltr">
[ column_properties ]
[ table_partitioning_clauses ]
[ CACHE | NOCACHE ]
[ parallel_clause ]
[ build_clause ]
</pre>
<p class="subhead2"><a id="SQLQR735"></a><span class="italic"><a id="sthref1071"></a>maximize_standby_db_clause</span></p>
<pre dir="ltr">
SET STANDBY DATABASE TO MAXIMIZE
{ PROTECTION | AVAILABILITY | PERFORMANCE }
</pre>
<p class="subhead2"><a id="SQLQR736"></a><span class="italic"><a id="sthref1072"></a>maxsize_clause</span></p>
<pre dir="ltr">
MAXSIZE { UNLIMITED | size_clause }
</pre>
<p class="subhead2"><a id="SQLQR737"></a><a id="sthref1073"></a><span class="italic">merge_insert_clause</span></p>
<pre dir="ltr">
WHEN NOT MATCHED THEN
INSERT [ (column [, column ]...) ]
VALUES ({ expr | DEFAULT }
           [, { expr | DEFAULT } ]...
       )
[ where_clause ]
</pre>
<p class="subhead2"><a id="SQLQR738"></a><span class="italic"><a id="sthref1074"></a>merge_table_partitions</span></p>
<pre dir="ltr">
MERGE PARTITIONS
   partition | { FOR ( partition_key_value [, partition_key_value ]... ) },
   partition | { FOR ( partition_key_value [, partition_key_value ]... ) }
   [ INTO partition_spec ]
   [ dependent_tables_clause ]
   [ update_index_clauses ]
   [ parallel_clause ]

</pre>
<p class="subhead2"><a id="SQLQR739"></a><span class="italic"><a id="sthref1075"></a>merge_table_subpartitions</span></p>
<pre dir="ltr">
MERGE SUBPARTITIONS
   subpartition | { FOR ( subpartition_key_value [, subpartition_key_value ]... ) },
   subpartition | { FOR ( subpartition_key_value [, subpartition_key_value ]... ) }
   [ INTO { range_subpartition_desc 
          | list_subpartition_desc
          }
   ]
   [ dependent_tables_clause ]
   [ update_index_clauses ]
   [ parallel_clause ]

</pre>
<p class="subhead2"><a id="SQLQR740"></a><span class="italic"><a id="sthref1076"></a>merge_update_clause</span></p>
<pre dir="ltr">
WHEN MATCHED THEN
UPDATE SET column = { expr | DEFAULT }
           [, column = { expr | DEFAULT } ]...
[ where_clause ]
[ DELETE where_clause ]
</pre>
<p class="subhead2"><a id="SQLQR741"></a><span class="italic"><a id="sthref1077"></a>mining_attribute_clause</span></p>
<pre dir="ltr">
USING
{ * 
| { [ schema . ] table . * 
  | expr [ AS alias ]
  }
    [, { [ schema . ] table . * 
       | expr [ AS alias ]
       }
    ]...
}
</pre>
<p class="subhead2"><a id="SQLQR742"></a><span class="italic"><a id="sthref1078"></a>model_clause</span></p>
<pre dir="ltr">
MODEL
   [ cell_reference_options ]
   [ return_rows_clause ]
   [ reference_model ]...
main_model
</pre>
<p class="subhead2"><a id="SQLQR743"></a><span class="italic"><a id="sthref1079"></a>model_column</span></p>
<pre dir="ltr">
expr [ [ AS ] c_alias ]
</pre>
<p class="subhead2"><a id="SQLQR744"></a><a id="sthref1080"></a><span class="italic">model_column_clauses</span></p>
<pre dir="ltr">
[ PARTITION BY (expr [ c_alias ] [, expr [c_alias] ]...) ]
DIMENSION BY (expr [c_alias] [, expr [c_alias] ]...)
MEASURES (expr [c_alias] [, expr [c_alias] ]...)
</pre>
<p class="subhead2"><a id="SQLQR745"></a><span class="italic"><a id="sthref1081"></a>model_iterate_clause</span></p>
<pre dir="ltr">
ITERATE ( number ) [ UNTIL ( condition ) ]
</pre>
<p class="subhead2"><a id="SQLQR746"></a><span class="italic"><a id="sthref1082"></a>model_rules_clause</span></p>
<pre dir="ltr">
[ RULES
  [ { UPDATE | UPSERT [ ALL ] } ]
  [ { AUTOMATIC | SEQUENTIAL } ORDER ]
  [ model_iterate_clause ]
]
( [ { UPDATE | UPSERT [ ALL ] } ]
cell_assignment [ order_by_clause ] = expr
  [,  [ { UPDATE | UPSERT [ ALL ] } ]
    cell_assignment [ order_by_clause ] = expr
  ]...
)
</pre>
<p class="subhead2"><a id="SQLQR747"></a><span class="italic"><a id="sthref1083"></a>modify_col_properties</span></p>
<pre dir="ltr">
column [ datatype ]
       [ DEFAULT expr ]
       [ { ENCRYPT encryption_spec } | DECRYPT ]
       [ inline_constraint ... ]
       [ LOB_storage_clause ]
       [ alter_XMLSchema_clause ]
</pre>
<p class="subhead2"><a id="SQLQR748"></a><span class="italic"><a id="sthref1084"></a>modify_col_substitutable</span></p>
<pre dir="ltr">
COLUMN column
[ NOT ] SUBSTITUTABLE AT ALL LEVELS
[ FORCE ]
</pre>
<p class="subhead2"><a id="SQLQR749"></a><a id="sthref1085"></a><span class="italic">modify_collection_retrieval</span></p>
<pre dir="ltr">
MODIFY NESTED TABLE collection_item
RETURN AS { LOCATOR | VALUE }
</pre>
<p class="subhead2"><a id="SQLQR750"></a><span class="italic"><a id="sthref1086"></a>modify_column_clauses</span></p>
<pre dir="ltr">
MODIFY { (modify_col_properties [, modify_col_properties] ...)
       | modify_col_substitutable
       }
</pre>
<p class="subhead2"><a id="SQLQR751"></a><span class="italic"><a id="sthref1087"></a>modify_diskgroup_file</span></p>
<pre dir="ltr">
MODIFY FILE 'filename' ATTRIBUTE ( disk_region_clause )
  [, 'filename' ATTRIBUTE ( disk_region_clause ) ]...
</pre>
<p class="subhead2"><a id="SQLQR752"></a><span class="italic"><a id="sthref1088"></a>modify_hash_partition</span></p>
<pre dir="ltr">
MODIFY partition_extended_name
  { partition_attributes
  | alter_mapping_table_clause
  | [ REBUILD ] UNUSABLE LOCAL INDEXES
  }
</pre>
<p class="subhead2"><a id="SQLQR753"></a><span class="italic"><a id="sthref1089"></a>modify_index_default_attrs</span></p>
<pre dir="ltr">
MODIFY DEFAULT ATTRIBUTES
   [ FOR PARTITION partition ]
   { physical_attributes_clause
   | TABLESPACE { tablespace | DEFAULT }
   | logging_clause
   }...
</pre>
<p class="subhead2"><a id="SQLQR754"></a><span class="italic"><a id="sthref1090"></a>modify_index_partition</span></p>
<pre dir="ltr">
MODIFY PARTITION partition
{ { deallocate_unused_clause
  | allocate_extent_clause
  | physical_attributes_clause
  | logging_clause
  | key_compression
  }...
| PARAMETERS ('ODCI_parameters')
| COALESCE
| UPDATE BLOCK REFERENCES
| UNUSABLE
}
</pre>
<p class="subhead2"><a id="SQLQR755"></a><a id="sthref1091"></a><span class="italic">modify_index_subpartition</span></p>
<pre dir="ltr">
MODIFY SUBPARTITION subpartition
{ UNUSABLE
| allocate_extent_clause
| deallocate_unused_clause
}
</pre>
<p class="subhead2"><a id="SQLQR756"></a><span class="italic"><a id="sthref1092"></a>modify_list_partition</span></p>
<pre dir="ltr">
MODIFY partition_extended_name
  { partition_attributes
  | { ADD | DROP } VALUES (literal[ , literal ]...)
  | { add_range_subpartition
    | add_list_subpartition
    | add_hash_subpartition 
    }
  | COALESCE SUBPARTITION [ update_index_clauses ][ parallel_clause ]
  | [ REBUILD ] UNUSABLE LOCAL INDEXES
  }
</pre>
<p class="subhead2"><a id="SQLQR757"></a><span class="italic"><a id="sthref1093"></a>modify_LOB_parameters</span></p>
<pre dir="ltr">
{ storage_clause
| PCTVERSION integer
| FREEPOOLS integer
| REBUILD FREEPOOLS
| LOB_retention_clause
| LOB_deduplicate_clause
| LOB_compression_clause
| { ENCRYPT encryption_spec | DECRYPT }
| { CACHE 
  | { NOCACHE | CACHE READS } [ logging_clause ]
  }
| allocate_extent_clause
| shrink_clause
| deallocate_unused_clause
} ...
</pre>
<p class="subhead2"><a id="SQLQR758"></a><span class="italic"><a id="sthref1094"></a>modify_LOB_storage_clause</span></p>
<pre dir="ltr">
MODIFY LOB (LOB_item)
   (modify_LOB_parameters)
</pre>
<p class="subhead2"><a id="SQLQR759"></a><a id="sthref1095"></a><span class="italic">modify_mv_column_clause</span></p>
<pre dir="ltr">
MODIFY ( column [ ENCRYPT encryption_spec
       | DECRYPT ] 
       )
</pre>
<p class="subhead2"><a id="SQLQR760"></a><a id="sthref1096"></a><span class="italic">modify_range_partition</span></p>
<pre dir="ltr">
MODIFY partition_extended_name
   { partition_attributes
   | { add_range_subpartition
     | add_hash_subpartition
     | add_list_subpartition
     }
   | COALESCE SUBPARTITION
        [ update_index_clauses ]
        [ parallel_clause ]
   | alter_mapping_table_clause
   | [ REBUILD ] UNUSABLE LOCAL INDEXES
   }
</pre>
<p class="subhead2"><a id="SQLQR761"></a><a id="sthref1097"></a><span class="italic">modify_table_default_attrs</span></p>
<pre dir="ltr">
MODIFY DEFAULT ATTRIBUTES
   [ FOR partition_extended_name ]
   [ deferred_segment_creation ]
   [ segment_attributes_clause ]
   [ table_compression ]
   [ PCTTHRESHOLD integer ]
   [ key_compression ]
   [ alter_overflow_clause ]
   [ { LOB (LOB_item) | VARRAY varray } (LOB_parameters) ]...
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can specify <code dir="ltr">deferred_segment_creation</code> in this clause starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2).</div>
<p class="subhead2"><a id="SQLQR762"></a><span class="italic"><a id="sthref1098"></a>modify_table_partition</span></p>
<pre dir="ltr">
{ modify_range_partition
| modify_hash_partition
| modify_list_partition
}
</pre>
<p class="subhead2"><a id="SQLQR763"></a><span class="italic"><a id="sthref1099"></a>modify_table_subpartition</span></p>
<pre dir="ltr">
MODIFY subpartition_extended_name
{ allocate_extent_clause
| deallocate_unused_cluse
| shrink_clause
| { { LOB LOB_item | VARRAY varray } (modify_LOB_parameters) }...
| [ REBUILD ] UNUSABLE LOCAL INDEXES
| { ADD | DROP } VALUES ( literal [, literal]... )
}
</pre>
<p class="subhead2"><a id="SQLQR764"></a><span class="italic"><a id="sthref1100"></a>modify_volume_clause</span></p>
<pre dir="ltr">
MODIFY VOLUME asm_volume
  [ ATTRIBUTE (disk_region_clause) ]
  [ MOUNTPATH 'mountpath_name' ]
  [ USAGE 'usage_name' ]
</pre>
<p class="subhead2"><a id="SQLQR765"></a><span class="italic"><a id="sthref1101"></a>move_mv_log_clause</span></p>
<pre dir="ltr">
MOVE segment_attributes_clause [parallel_clause]
</pre>
<p class="subhead2"><a id="SQLQR766"></a><span class="italic"><a id="sthref1102"></a>move_table_clause</span></p>
<pre dir="ltr">
MOVE [ ONLINE ]
   [ segment_attributes_clause ]
   [ table_compression ]
   [ index_org_table_clause ]
   [ { LOB_storage_clause | varray_col_properties }... ]
   [ parallel_clause ]
</pre>
<p class="subhead2"><a id="SQLQR767"></a><span class="italic"><a id="sthref1103"></a>move_table_partition</span></p>
<pre dir="ltr">
MOVE partition_extended_name
   [ MAPPING TABLE ]
   [ table_partition_description ]
   [ update_index_clauses ]
   [ parallel_clause ]
</pre>
<p class="subhead2"><a id="SQLQR768"></a><span class="italic"><a id="sthref1104"></a>move_table_subpartition</span></p>
<pre dir="ltr">
MOVE subpartition_extended_name [ partitioning_storage_clause ]
     [ update_index_clauses ] [ parallel_clause ]
</pre>
<p class="subhead2"><a id="SQLQR769"></a><span class="italic"><a id="sthref1105"></a>multi_column_for_loop</span></p>
<pre dir="ltr">
FOR (dimension_column
      [, dimension_column ]...)
IN ( { (literal [, literal ]...)
       [ (literal [, literal ]...) ]...
     | subquery
     }
   )
</pre>
<p class="subhead2"><a id="SQLQR770"></a><span class="italic"><a id="sthref1106"></a>multi_table_insert</span></p>
<pre dir="ltr">
{ ALL
  { insert_into_clause [ values_clause ] [error_logging_clause] }...
| conditional_insert_clause
} subquery
</pre>
<p class="subhead2"><a id="SQLQR771"></a><a id="sthref1107"></a><span class="italic">multiset_except</span></p>
<pre dir="ltr">
nested_table1
MULTISET EXCEPT [ ALL | DISTINCT ]
nested_table2
</pre>
<p class="subhead2"><a id="SQLQR772"></a><span class="italic"><a id="sthref1108"></a>multiset_intersect</span></p>
<pre dir="ltr">
nested_table1
MULTISET INTERSECT [ ALL | DISTINCT ]
nested_table2
</pre>
<p class="subhead2"><a id="SQLQR773"></a><span class="italic"><a id="sthref1109"></a>multiset_union</span></p>
<pre dir="ltr">
nested_table1
MULTISET UNION [ ALL | DISTINCT ]
nested_table2
</pre>
<p class="subhead2"><a id="SQLQR774"></a><span class="italic"><a id="sthref1110"></a>mv_log_augmentation</span></p>
<pre dir="ltr">
ADD { { OBJECT ID
      | PRIMARY KEY
      | ROWID
      | SEQUENCE
      } [ (column [, column ]...) ]
    | (column [, column ]... )
    } [, { { OBJECT ID
           | PRIMARY KEY
           | ROWID
           | SEQUENCE
           }
           [ (column [, column ]...) ]
         | (column [, column ]...)
         }
      ]...
    [ new_values_clause ]
</pre>
<p class="subhead2"><a id="SQLQR775"></a><span class="italic"><a id="sthref1111"></a>mv_log_purge_clause</span></p>
<pre dir="ltr">
PURGE { IMMEDIATE [ SYNCHRONOUS | ASYNCHRONOUS ]  )
      | START WITH datetime_expr 
          [ NEXT datetime_expr 
          | REPEAT INTERVAL interval_expr 
          ]
      | [ START WITH datetime_expr ] { NEXT datetime_expr
                                     | REPEAT INTERVAL interval_expr
                                     }
      }
</pre>
<p class="subhead2"><a id="SQLQR776"></a><span class="italic"><a id="sthref1112"></a>nested_table_col_properties</span></p>
<pre dir="ltr">
NESTED TABLE
{ nested_item | COLUMN_VALUE }
[ substitutable_column_clause ]
[ LOCAL | GLOBAL ]
STORE AS storage_table
[ ( { (object_properties)
    | [ physical_properties ]
    | [ column_properties ]
    }...
  )
]
[ RETURN [ AS ] { LOCATOR | VALUE } ]
</pre>
<p class="subhead2"><a id="SQLQR777"></a><span class="italic"><a id="sthref1113"></a>nested_table_partition_spec</span></p>
<pre dir="ltr">
PARTITION partition [segment_attributes_clause]
</pre>
<p class="subhead2"><a id="SQLQR778"></a><span class="italic"><a id="sthref1114"></a>new_values_clause</span></p>
<pre dir="ltr">
{ INCLUDING | EXCLUDING } NEW VALUES
</pre>
<p class="subhead2"><a id="SQLQR779"></a><span class="italic"><a id="sthref1115"></a>number</span></p>
<pre dir="ltr">
[ + | - ]
{ digit [ digit ]... [ . ] [ digit [ digit ]... ]
| . digit [ digit ]...
}
[ [ e | E ] [ + | - ] digit [ digit ]... ] [ f | F | d | D ]
</pre>
<p class="subhead2"><a id="SQLQR780"></a><span class="italic"><a id="sthref1116"></a>numeric_file_name</span></p>
<pre dir="ltr">
+diskgroup_name.filenumber.incarnation_number
</pre>
<p class="subhead2"><a id="SQLQR781"></a><span class="italic"><a id="sthref1117"></a>object_properties</span></p>
<pre dir="ltr">
{ { column | attribute }
    [ DEFAULT expr ]
    [ { inline_constraint }...  | inline_ref_constraint ]
| { out_of_line_constraint
  | out_of_line_ref_constraint
  | supplemental_logging_props
  }
}
</pre>
<p class="subhead2"><a id="SQLQR782"></a><span class="italic"><a id="sthref1118"></a>object_table</span></p>
<pre dir="ltr">
OF
   [ schema. ] object_type
   [ object_table_substitution ]
   [ (object_properties) ]
   [ ON COMMIT { DELETE | PRESERVE } ROWS ]
   [ OID_clause ]
   [ OID_index_clause ]
   [ physical_properties ]
   [ table_properties ]
</pre>
<p class="subhead2"><a id="SQLQR783"></a><span class="italic"><a id="sthref1119"></a>object_table_substitution</span></p>
<pre dir="ltr">
[ NOT ] SUBSTITUTABLE AT ALL LEVELS
</pre>
<p class="subhead2"><a id="SQLQR784"></a><span class="italic"><a id="sthref1120"></a>object_type_col_properties</span></p>
<pre dir="ltr">
COLUMN column substitutable_column_clause
</pre>
<p class="subhead2"><a id="SQLQR785"></a><span class="italic"><a id="sthref1121"></a>object_view_clause</span></p>
<pre dir="ltr">
OF [ schema. ] type_name
{ WITH OBJECT { IDENTIFIER | ID }
  { DEFAULT | ( attribute [, attribute ]... ) }
| UNDER [ schema. ] superview
}
[ ( { out_of_line_constraint
    | attribute { inline_constraint }...
    }  [, { out_of_line_constraint
          | attribute { inline_constraint }...
          }
       ]...
  )
]
</pre>
<p class="subhead2"><a id="SQLQR786"></a><span class="italic"><a id="sthref1122"></a>OID_clause</span></p>
<pre dir="ltr">
OBJECT IDENTIFIER IS
{ SYSTEM GENERATED | PRIMARY KEY }
</pre>
<p class="subhead2"><a id="SQLQR787"></a><span class="italic"><a id="sthref1123"></a>OID_index_clause</span></p>
<pre dir="ltr">
OIDINDEX [ index ]
({ physical_attributes_clause
 | TABLESPACE tablespace
 }...
)
</pre>
<p class="subhead2"><a id="SQLQR788"></a><span class="italic"><a id="sthref1124"></a>on_comp_partitioned_table</span></p>
<pre dir="ltr">
[ STORE IN ( tablespace [, tablespace ]... ) ]
( PARTITION
    [ partition ]
    [ { segment_attributes_clause
      | key_compression
      }...
    ] [ UNUSABLE ] [ index_subpartition_clause ]
      [, PARTITION
           [ partition ]
           [ { segment_attributes_clause
             | key_compression
             }...
           ] [ UNUSABLE ] [ index_subpartition_clause ]
       ]...
)
</pre>
<p class="subhead2"><a id="SQLQR789"></a><span class="italic"><a id="sthref1125"></a>on_hash_partitioned_table</span></p>
<pre dir="ltr">
{ STORE IN (tablespace[, tablespace ]...)
| (PARTITION [ partition ] [ TABLESPACE tablespace ] [ key_compression ] [ UNUSABLE ]
   [, PARTITION [ partition ] [ TABLESPACE tablespace ] [ key_compression ] [ UNUSABLE ]] ...
  )
}
</pre>
<p class="subhead2"><a id="SQLQR790"></a><span class="italic"><a id="sthref1126"></a>on_list_partitioned_table</span></p>
<pre dir="ltr">
( PARTITION
    [ partition ]
    [ { segment_attributes_clause
      | key_compression
      }...
    ] [ UNUSABLE ]
      [, PARTITION
           [ partition ]
           [ { segment_attributes_clause
             | key_compression
             }...
           ] [ UNUSABLE ]
      ]...
)
</pre>
<p class="subhead2"><a id="SQLQR791"></a><span class="italic"><a id="sthref1127"></a>on_object_clause</span></p>
<pre dir="ltr">
ON { [ schema. ] object
   | DIRECTORY directory_name
   | EDITION edition_name
   | MINING MODEL [schema.] mining_model_name
   | JAVA { SOURCE | RESOURCE } [ schema. ] object
   }
</pre>
<p class="subhead2"><a id="SQLQR792"></a><span class="italic"><a id="sthref1128"></a>on_range_partitioned_table</span></p>
<pre dir="ltr">
( PARTITION
    [ partition ]
    [ { segment_attributes_clause
      | key_compression
      }...
    ] [ UNUSABLE ]
      [, PARTITION
          [ partition ]
          [ { segment_attributes_clause
            | key_compression
            }...
          ] [ UNUSABLE ]
     ]...
)
</pre>
<p class="subhead2"><a id="SQLQR793"></a><span class="italic"><a id="sthref1129"></a>order_by_clause</span></p>
<pre dir="ltr">
ORDER [ SIBLINGS ] BY
{ expr | position | c_alias }
[ ASC | DESC ]
[ NULLS FIRST | NULLS LAST ]
  [, { expr | position | c_alias }
     [ ASC | DESC ]
     [ NULLS FIRST | NULLS LAST ]
  ]...
</pre>
<p class="subhead2"><a id="SQLQR794"></a><span class="italic"><a id="sthref1130"></a>out_of_line_constraint</span></p>
<pre dir="ltr">
  [ CONSTRAINT constraint_name ]
{ UNIQUE (column [, column ]...)
| PRIMARY KEY (column [, column ]...)
| FOREIGN KEY (column [, column ]...) references_clause
| CHECK (condition)
} [ constraint_state ]
</pre>
<p class="subhead2"><a id="SQLQR795"></a><span class="italic"><a id="sthref1131"></a>out_of_line_part_storage</span></p>
<pre dir="ltr">
PARTITION partition
  { nested_table_col_properties | LOB_storage_clause | varray_col_properties }
    [ nested_table_col_properties | LOB_storage_clause | varray_col_properties ]...
[ (SUBPARTITION subpartition
   { nested_table_col_properties | LOB_storage_clause | varray_col_properties }
     [ nested_table_col_properties | LOB_storage_clause | varray_col_properties
     ]...
  )
]
</pre>
<p class="subhead2"><a id="SQLQR796"></a><span class="italic"><a id="sthref1132"></a>out_of_line_ref_constraint</span></p>
<pre dir="ltr">
{ SCOPE FOR ({ ref_col | ref_attr })
    IS [ schema. ] scope_table
| REF ({ ref_col | ref_attr }) WITH ROWID
| [ CONSTRAINT constraint_name ] FOREIGN KEY
    ( { ref_col [, ref_col ] | ref_attr [, ref_attr ] } ) references_clause
    [ constraint_state ]
}
</pre>
<p class="subhead2"><a id="SQLQR797"></a><span class="italic"><a id="sthref1133"></a>outer_join_clause</span></p>
<pre dir="ltr">
  [ query_partition_clause ] [ NATURAL ]
outer_join_type JOIN table_reference
  [ query_partition_clause ]
  [ ON condition
  | USING ( column [, column ]...)
  ]
</pre>
<p class="subhead2"><a id="SQLQR798"></a><span class="italic"><a id="sthref1134"></a>outer_join_type</span></p>
<pre dir="ltr">
{ FULL | LEFT | RIGHT } [ OUTER ]
</pre>
<p class="subhead2"><a id="SQLQR799"></a><span class="italic"><a id="sthref1135"></a>parallel_clause</span></p>
<pre dir="ltr">
{ NOPARALLEL | PARALLEL [ integer ] }
</pre>
<p class="subhead2"><a id="SQLQR800"></a><span class="italic"><a id="sthref1136"></a>partial_database_recovery</span></p>
<pre dir="ltr">
{ TABLESPACE tablespace [, tablespace ]...
| DATAFILE { 'filename' | filenumber }
             [, 'filename' | filenumber ]...
}
</pre>
<p class="subhead2"><a id="SQLQR801"></a><span class="italic"><a id="sthref1137"></a>partition_attributes</span></p>
<pre dir="ltr">
[ { physical_attributes_clause
  | logging_clause
  | allocate_extent_clause
  | deallocate_unused_clause
  | shrink_clause
  }...
]
[ OVERFLOW
  { physical_attributes_clause
  | logging_clause
  | allocate_extent_clause
  | deallocate_unused_clause
  }...
]
[ table_compression ]
[ { { LOB LOB_item | VARRAY varray } (modify_LOB_parameters) }...]
</pre>
<p class="subhead2"><a id="SQLQR802"></a><span class="italic"><a id="sthref1138"></a>partition_extended_name</span></p>
<pre dir="ltr">
PARTITION partition
| 
PARTITION FOR ( partition_key_value [, partition_key_value]... )
</pre>
<p class="subhead2"><a id="SQLQR803"></a><span class="italic"><a id="sthref1139"></a>partition_extension_clause</span></p>
<pre dir="ltr">
{ PARTITION (partition)
| PARTITION FOR (partition_key_value [, partition_key_value]...)
| SUBPARTITION (subpartition)
| SUBPARTITION FOR (subpartition_key_value [, subpartition_key_value]...)
}
</pre>
<p class="subhead2"><a id="SQLQR804"></a><span class="italic"><a id="sthref1140"></a>partition_spec</span></p>
<pre dir="ltr">
PARTITION [ partition ] [ table_partition_description ]
</pre>
<p class="subhead2"><a id="SQLQR805"></a><span class="italic"><a id="sthref1141"></a>partitioning_storage_clause</span></p>
<pre dir="ltr">
[ { TABLESPACE tablespace
  | OVERFLOW [TABLESPACE tablespace]
  | table_compression
  | key_compression
  | LOB_partitioning_storage
  | VARRAY varray_item STORE AS [SECUREFILE | BASICFILE] LOB LOB_segname
  }...
]
</pre>
<p class="subhead2"><a id="SQLQR806"></a><span class="italic"><a id="sthref1142"></a>password_parameters</span></p>
<pre dir="ltr">
{ { FAILED_LOGIN_ATTEMPTS
  | PASSWORD_LIFE_TIME
  | PASSWORD_REUSE_TIME
  | PASSWORD_REUSE_MAX
  | PASSWORD_LOCK_TIME
  | PASSWORD_GRACE_TIME
  }
  { expr | UNLIMITED | DEFAULT }
| PASSWORD_VERIFY_FUNCTION
  { function | NULL | DEFAULT }
}
</pre>
<p class="subhead2"><a id="SQLQR807"></a><span class="italic"><a id="sthref1143"></a>permanent_tablespace_clause</span></p>
<pre dir="ltr">
TABLESPACE tablespace
  [ DATAFILE file_specification [, file_specification ]... ]
{ MINIMUM EXTENT size_clause
| BLOCKSIZE integer [ K ]
| logging_clause
| FORCE LOGGING
| ENCRYPTION tablespace_encryption_spec
| DEFAULT [ table_compression ] [ storage_clause ]
| { ONLINE | OFFLINE }
| extent_management_clause
| segment_management_clause
| flashback_mode_clause
}...
</pre>
<p class="subhead2"><a id="SQLQR808"></a><span class="italic"><a id="sthref1144"></a>physical_attributes_clause</span></p>
<pre dir="ltr">
[ { PCTFREE integer
  | PCTUSED integer
  | INITRANS integer
  | storage_clause
  }...
]
</pre>
<p class="subhead2"><a id="SQLQR809"></a><span class="italic"><a id="sthref1145"></a>physical_properties</span></p>
<pre dir="ltr">
{ [deferred_segment_creation] segment_attributes_clause [ table_compression ]
| [deferred_segment_creation] ORGANIZATION
  { HEAP [ segment_attributes_clause ] [ table_compression ]
  | INDEX [ segment_attributes_clause ] index_org_table_clause
  | EXTERNAL external_table_clause
  }
| CLUSTER cluster (column [, column ]...)
}
</pre>
<p class="subhead2"><a id="SQLQR810"></a><span class="italic"><a id="sthref1146"></a>pivot_clause</span></p>
<pre dir="ltr">
PIVOT [ XML ]
  ( aggregate_function ( expr ) [[AS] alias ]
      [, aggregate_function ( expr ) [[AS] alias ] ]...
    pivot_for_clause
    pivot_in_clause
  )
</pre>
<p class="subhead2"><a id="SQLQR811"></a><span class="italic"><a id="sthref1147"></a>pivot_for_clause</span></p>
<pre dir="ltr">
FOR { column
    | ( column [, column]... )
    }
</pre>
<p class="subhead2"><a id="SQLQR812"></a><span class="italic"><a id="sthref1148"></a>pivot_in_clause</span></p>
<pre dir="ltr">
IN ( { { { expr
         | ( expr [, expr]... )
         } [ [ AS] alias]
       }...
     | subquery
     | ANY [, ANY]...
     }
   )
</pre>
<p class="subhead2"><a id="SQLQR813"></a><span class="italic"><a id="sthref1149"></a>proxy_clause</span></p>
<pre dir="ltr">
{ GRANT CONNECT THROUGH { ENTERPRISE USERS | db_user_proxy db_user_proxy_clauses }
| REVOKE CONNECT THROUGH { ENTERPRISE USERS | db_user_proxy }}

</pre>
<p class="subhead2"><a id="SQLQR814"></a><span class="italic"><a id="sthref1150"></a>qualified_disk_clause</span></p>
<pre dir="ltr">
search_string
[ NAME disk_name ]
[ SIZE size_clause ]
[ FORCE | NOFORCE ]
</pre>
<p class="subhead2"><a id="SQLQR815"></a><span class="italic"><a id="sthref1151"></a>qualified_template_clause</span></p>
<pre dir="ltr">
ATTRIBUTE
( redundancy_clause 
  striping_clause 
  disk_region_clause
)
</pre>
<p class="subhead2"><a id="SQLQR816"></a><span class="italic"><a id="sthref1152"></a>query_block</span></p>
<pre dir="ltr">
  [ subquery_factoring_clause ]
SELECT [ hint ] [ { { DISTINCT | UNIQUE } | ALL } ] select_list
  FROM { table_reference | join_clause | ( join_clause ) }
         [ , { table_reference | join_clause | (join_clause) } ] ...
  [ where_clause ]
  [ hierarchical_query_clause ]
  [ group_by_clause ]
  [ model_clause ]
</pre>
<p class="subhead2"><a id="SQLQR817"></a><span class="italic"><a id="sthref1153"></a>query_partition_clause</span></p>
<pre dir="ltr">
PARTITION BY
  { value_expr[, value_expr ]...
  | ( value_expr[, value_expr ]... )
  }
</pre>
<p class="subhead2"><a id="SQLQR818"></a><span class="italic"><a id="sthref1154"></a>query_table_expression</span></p>
<pre dir="ltr">
{ query_name
| [ schema. ]
  { table [ partition_extension_clause
          | @ dblink
          ]
  | { view | materialized view } [ @ dblink ]
  } [sample_clause]
| (subquery [ subquery_restriction_clause ])
| table_collection_expression
}
</pre>
<p class="subhead2"><a id="SQLQR819"></a><span class="italic"><a id="sthref1155"></a>quiesce_clauses</span></p>
<pre dir="ltr">
QUIESCE RESTRICTED | UNQUIESCE
</pre>
<p class="subhead2"><a id="SQLQR820"></a><span class="italic"><a id="sthref1156"></a>range_partition_desc</span></p>
<pre dir="ltr">
PARTITION [partition]
range_values_clause
table_partition_description
[ ( { range_subpartition_desc [, range_subpartition_desc] ...
    | list_subpartition_desc [, list_subpartition_desc] ...
    | individual_hash_subparts [, individual_hash_subparts] ...
    }
  ) | hash_subparts_by_quantity ]

</pre>
<p class="subhead2"><a id="SQLQR821"></a><span class="italic"><a id="sthref1157"></a>range_partitions</span></p>
<pre dir="ltr">
PARTITION BY RANGE (column[, column ]...)
  [ INTERVAL (expr) [ STORE IN ( tablespace [, tablespace]...) ]]
( PARTITION [ partition ]
    range_values_clause table_partition_description
      [, PARTITION [ partition ]
        range_values_clause table_partition_description
      ]...
)
</pre>
<p class="subhead2"><a id="SQLQR822"></a><span class="italic"><a id="sthref1158"></a>range_subpartition_desc</span></p>
<pre dir="ltr">
SUBPARTITION [subpartition] range_values_clause
  [partitioning_storage_clause]
</pre>
<p class="subhead2"><a id="SQLQR823"></a><span class="italic"><a id="sthref1159"></a>range_values_clause</span></p>
<pre dir="ltr">
VALUES LESS THAN
  ({ literal | MAXVALUE }
     [, { literal | MAXVALUE } ]...
  )
</pre>
<p class="subhead2"><a id="SQLQR824"></a><span class="italic"><a id="sthref1160"></a>rebalance_diskgroup_clause</span></p>
<pre dir="ltr">
REBALANCE [POWER integer] [WAIT | NOWAIT]
</pre>
<p class="subhead2"><a id="SQLQR825"></a><span class="italic"><a id="sthref1161"></a>rebuild_clause</span></p>
<pre dir="ltr">
REBUILD
  [ { PARTITION partition
    | SUBPARTITION subpartition
    }
  | { REVERSE | NOREVERSE }
  ]
  [ parallel_clause
  | TABLESPACE tablespace
  | PARAMETERS ( 'ODCI_parameters' )
  | XMLIndex_parameters_clause
  | ONLINE
  | physical_attributes_clause
  | key_compression
  | logging_clause
  ]...
</pre>
<p class="subhead2"><a id="SQLQR826"></a><span class="italic"><a id="sthref1162"></a>records_per_block_clause</span></p>
<pre dir="ltr">
{ MINIMIZE | NOMINIMIZE } RECORDS_PER_BLOCK
</pre>
<p class="subhead2"><a id="SQLQR827"></a><span class="italic"><a id="sthref1163"></a>recovery_clauses</span></p>
<pre dir="ltr">
{ general_recovery
| managed_standby_recovery
| BEGIN BACKUP
| END BACKUP
}
</pre>
<p class="subhead2"><a id="SQLQR828"></a><span class="italic"><a id="sthref1164"></a>redo_log_file_spec</span></p>
<pre dir="ltr">
[ 'filename | ASM_filename'
| ('filename | ASM_filename'
   [, 'filename | ASM_filename' ]...)
]
[ SIZE size_clause ]
[ BLOCKSIZE size_clause
[ REUSE ]
</pre>
<p class="subhead2"><a id="SQLQR829"></a><span class="italic"><a id="sthref1165"></a>redundancy_clause</span></p>
<pre dir="ltr">
[ MIRROR | HIGH | UNPROTECTED ]
</pre>
<p class="subhead2"><a id="SQLQR830"></a><span class="italic"><a id="sthref1166"></a>reference_model</span></p>
<pre dir="ltr">
REFERENCE reference_model_name ON (subquery)
  model_column_clauses [ cell_reference_options ]
</pre>
<p class="subhead2"><a id="SQLQR831"></a><span class="italic"><a id="sthref1167"></a>reference_partition_desc</span></p>
<pre dir="ltr">
PARTITION [partition] [table_partition_description] )
</pre>
<p class="subhead2"><a id="SQLQR832"></a><span class="italic"><a id="sthref1168"></a>reference_partitioning</span></p>
<pre dir="ltr">
PARTITION BY REFERENCE ( constraint ) 
  [ (reference_partition_desc...) ]
</pre>
<p class="subhead2"><a id="SQLQR833"></a><span class="italic"><a id="sthref1169"></a>references_clause</span></p>
<pre dir="ltr">
REFERENCES [ schema. ] object [ (column [, column ]...) ]
  [ON DELETE { CASCADE | SET NULL } ]
</pre>
<p class="subhead2"><a id="SQLQR834"></a><span class="italic"><a id="sthref1170"></a>register_logfile_clause</span></p>
<pre dir="ltr">
REGISTER [ OR REPLACE ]
  [ PHYSICAL | LOGICAL ]
LOGFILE [ file_specification  [, file_specification ]...
  [ FOR logminer_session_name ]
</pre>
<p class="subhead2"><a id="SQLQR835"></a><span class="italic"><a id="sthref1171"></a>relational_properties</span></p>
<pre dir="ltr">
{ column_definition
| virtual_column_definition
| { out_of_line_constraint
  | out_of_line_ref_constraint
  | supplemental_logging_props
  }
}
  [, { column_definition
     | virtual_column_definition
     | { out_of_line_constraint
       | out_of_line_ref_constraint
       | supplemental_logging_props
       }
     }
  ]...
</pre>
<p class="subhead2"><a id="SQLQR836"></a><span class="italic"><a id="sthref1172"></a>relational_table</span></p>
<pre dir="ltr">
[ (relational_properties) ]
[ ON COMMIT { DELETE | PRESERVE } ROWS ]
[ physical_properties ]
[ table_properties ]
</pre>
<p class="subhead2"><a id="SQLQR837"></a><span class="italic"><a id="sthref1173"></a>rename_column_clause</span></p>
<pre dir="ltr">
RENAME COLUMN old_name TO new_name
</pre>
<p class="subhead2"><a id="SQLQR838"></a><span class="italic"><a id="sthref1174"></a>rename_index_partition</span></p>
<pre dir="ltr">
RENAME
  { PARTITION partition | SUBPARTITION subpartition }
TO new_name
</pre>
<p class="subhead2"><a id="SQLQR839"></a><span class="italic"><a id="sthref1175"></a>rename_partition_subpart</span></p>
<pre dir="ltr">
RENAME { partition_extended_name
       | subpartition_extended_name
       } TO new_name
</pre>
<p class="subhead2"><a id="SQLQR840"></a><span class="italic"><a id="sthref1176"></a>resize_disk_clause</span></p>
<pre dir="ltr">
RESIZE
{ ALL [ SIZE size_clause ]
| [QUORUM | REGULAR] DISK
   disk_name [ SIZE size_clause ]
   [, disk_name [ SIZE size_clause ] ]...
| DISKS IN [QUORUM | REGULAR] FAILGROUP
    failgroup_name [ SIZE size_clause ]
    [, failgroup_name [ SIZE size_clause ] ]...
}
</pre>
<p class="subhead2"><a id="SQLQR841"></a><span class="italic"><a id="sthref1177"></a>resource_parameters</span></p>
<pre dir="ltr">
{ { SESSIONS_PER_USER
  | CPU_PER_SESSION
  | CPU_PER_CALL
  | CONNECT_TIME
  | IDLE_TIME
  | LOGICAL_READS_PER_SESSION
  | LOGICAL_READS_PER_CALL
  | COMPOSITE_LIMIT
  }
  { integer | UNLIMITED | DEFAULT }
| PRIVATE_SGA
  { size_clause | UNLIMITED | DEFAULT }
}
</pre>
<p class="subhead2"><a id="SQLQR842"></a><span class="italic"><a id="sthref1178"></a>return_rows_clause</span></p>
<pre dir="ltr">
RETURN { UPDATED | ALL } ROWS
</pre>
<p class="subhead2"><a id="SQLQR843"></a><span class="italic"><a id="sthref1179"></a>returning_clause</span></p>
<pre dir="ltr">
{ RETURN | RETURNING } expr [, expr ]...
INTO data_item [, data_item ]...
</pre>
<p class="subhead2"><a id="SQLQR844"></a><span class="italic"><a id="sthref1180"></a>revoke_object_privileges</span></p>
<pre dir="ltr">
{ object_privilege | ALL [ PRIVILEGES ] }
  [, { object_privilege | ALL [ PRIVILEGES ] } ]...
on_object_clause
FROM grantee_clause
[ CASCADE CONSTRAINTS | FORCE ]
</pre>
<p class="subhead2"><a id="SQLQR845"></a><span class="italic"><a id="sthref1181"></a>revoke_system_privileges</span></p>
<pre dir="ltr">
{ system_privilege
| role
| ALL PRIVILEGES
}
  [, { system_privilege
     | role
     | ALL PRIVILEGES
     }
  ]...
FROM grantee_clause
</pre>
<p class="subhead2"><a id="SQLQR846"></a><span class="italic"><a id="sthref1182"></a>rolling_migration_clauses</span></p>
<pre dir="ltr">
{ START ROLLING MIGRATION TO 'ASM_version'
| STOP ROLLING MIGRATION
}
</pre>
<p class="subhead2"><a id="SQLQR847"></a><span class="italic"><a id="sthref1183"></a>rollup_cube_clause</span></p>
<pre dir="ltr">
{ ROLLUP | CUBE } (grouping_expression_list)
</pre>
<p class="subhead2"><a id="SQLQR848"></a><span class="italic"><a id="sthref1184"></a>routine_clause</span></p>
<pre dir="ltr">
[ schema. ] [ type. | package. ]
{ function | procedure | method }
[ @dblink_name ]
( [ argument [, argument ]... ] )
</pre>
<p class="subhead2"><a id="SQLQR849"></a><span class="italic"><a id="sthref1185"></a>row_movement_clause</span></p>
<pre dir="ltr">
{ ENABLE | DISABLE } ROW MOVEMENT
</pre>
<p class="subhead2"><a id="SQLQR850"></a><span class="italic"><a id="sthref1186"></a>sample_clause</span></p>
<pre dir="ltr">
SAMPLE [ BLOCK ]
       (sample_percent)
       [ SEED (seed_value) ]
</pre>
<p class="subhead2"><a id="SQLQR851"></a><span class="italic"><a id="sthref1187"></a>scoped_table_ref_constraint</span></p>
<pre dir="ltr">
{ SCOPE FOR ({ ref_column | ref_attribute })
  IS [ schema. ] { scope_table_name | c_alias }
}
</pre>
<p class="subhead2"><a id="SQLQR852"></a><span class="italic"><a id="sthref1188"></a>search_clause</span></p>
<pre dir="ltr">
{ SEARCH
        { DEPTH FIRST BY c_alias [, c_alias]...
            [ ASC | DESC ]
            [ NULLS FIRST | NULLS LAST ]
         | BREADTH FIRST BY c_alias [, c_alias]...
            [ ASC | DESC ]
            [ NULLS FIRST | NULLS LAST ]
        }
        SET ordering_column
}
</pre>
<p class="subhead2"><a id="SQLQR853"></a><span class="italic"><a id="sthref1189"></a>searched_case_expression</span></p>
<pre dir="ltr">
{ WHEN condition THEN return_expr }...
</pre>
<p class="subhead2"><a id="SQLQR854"></a><span class="italic"><a id="sthref1190"></a>security_clause</span></p>
<pre dir="ltr">
GUARD { ALL | STANDBY | NONE }
</pre>
<p class="subhead2"><a id="SQLQR855"></a><span class="italic"><a id="sthref1191"></a>security_clauses</span></p>
<pre dir="ltr">
{ { ENABLE | DISABLE } RESTRICTED SESSION
  | SET ENCRYPTION WALLET OPEN
    IDENTIFIED BY { "wallet_password" | "HSM_auth_string" }
  | SET ENCRYPTION WALLET CLOSE
    [ IDENTIFIED BY { "wallet_password" | "HSM_auth_string" } ]
  | set_encryption_key
}
</pre>
<p class="subhead2"><a id="SQLQR856"></a><span class="italic"><a id="sthref1192"></a>segment_attributes_clause</span></p>
<pre dir="ltr">
{ physical_attributes_clause
| TABLESPACE tablespace
| logging_clause
}...
</pre>
<p class="subhead2"><a id="SQLQR857"></a><span class="italic"><a id="sthref1193"></a>segment_management_clause</span></p>
<pre dir="ltr">
SEGMENT SPACE MANAGEMENT { AUTO | MANUAL }
</pre>
<p class="subhead2"><a id="SQLQR858"></a><span class="italic"><a id="sthref1194"></a>select_list</span></p>
<pre dir="ltr">
{ [t_alias.] *
| { query_name.*
  | [ schema. ]
    { table | view | materialized view } .*
  | expr [ [ AS ] c_alias ]
  }
    [, { query_name.*
       | [ schema. ]
         { table | view | materialized view } .*
       | expr [ [ AS ] c_alias ]
       }
    ]...
}
</pre>
<p class="subhead2"><a id="SQLQR990"></a><span class="italic"><a id="sthref1195"></a>set_encryption_key</span></p>
<pre dir="ltr">
{ SET ENCRYPTION KEY
  {
    [ "certificate_id" ] IDENTIFIED BY "wallet_password"
    |
    IDENTIFIED BY "HSM_auth_string" [ MIGRATE USING "wallet_password" ]
  }
}
</pre>
<p class="subhead2"><a id="SQLQR859"></a><span class="italic"><a id="sthref1196"></a>set_parameter_clause</span></p>
<pre dir="ltr">
parameter_name =
   parameter_value [, parameter_value ]...
   [ COMMENT = string ]
   [ DEFERRED ]
   [ { SCOPE = { MEMORY | SPFILE | BOTH }
     | SID = { 'sid' | '*' }
     }...
   ]
</pre>
<p class="subhead2"><a id="SQLQR860"></a><span class="italic"><a id="sthref1197"></a>set_subpartition_template</span></p>
<pre dir="ltr">
SET SUBPARTITION TEMPLATE
   { ( range_subpartition_desc [, range_subpartition_desc]... )
   | ( list_subpartition_desc [, list_subpartition_desc]... )
   | ( individual_hash_subparts [, individual_hash_subparts]... )
   | ()
   | hash_subpartition_quantity
   }
</pre>
<p class="subhead2"><a id="SQLQR861"></a><span class="italic"><a id="sthref1198"></a>set_time_zone_clause</span></p>
<pre dir="ltr">
SET TIME_ZONE =
   '{ { + | - } hh : mi | time_zone_region }'
</pre>
<p class="subhead2"><a id="SQLQR862"></a><span class="italic"><a id="sthref1199"></a>shrink_clause</span></p>
<pre dir="ltr">
SHRINK SPACE [ COMPACT ] [ CASCADE ]
</pre>
<p class="subhead2"><a id="SQLQR863"></a><span class="italic"><a id="sthref1200"></a>shutdown_dispatcher_clause</span></p>
<pre dir="ltr">
SHUTDOWN [ IMMEDIATE ] dispatcher_name
</pre>
<p class="subhead2"><a id="SQLQR864"></a><span class="italic"><a id="sthref1201"></a>simple_case_expression</span></p>
<pre dir="ltr">
expr
  { WHEN comparison_expr THEN return_expr }...
</pre>
<p class="subhead2"><a id="SQLQR865"></a><span class="italic"><a id="sthref1202"></a>single_column_for_loop</span></p>
<pre dir="ltr">
FOR dimension_column
  { IN ( { literal [, literal ]...
         | subquery
         }
       )
  | [ LIKE pattern ] FROM literal TO literal
      { INCREMENT | DECREMENT } literal
  }
</pre>
<p class="subhead2"><a id="SQLQR866"></a><span class="italic"><a id="sthref1203"></a>single_table_insert</span></p>
<pre dir="ltr">
insert_into_clause
{ values_clause [ returning_clause ]
| subquery 
} [ error_logging_clause ]
</pre>
<p class="subhead2"><a id="SQLQR867"></a><span class="italic"><a id="sthref1204"></a>size_clause</span></p>
<pre dir="ltr">
integer [ K | M | G | T | P | E ]
</pre>
<p class="subhead2"><a id="SQLQR868"></a><span class="italic"><a id="sthref1205"></a>split_index_partition</span></p>
<pre dir="ltr">
SPLIT PARTITION partition_name_old
   AT (literal [, literal ]...)
   [ INTO (index_partition_description,
           index_partition_description
          )
   ]
   [ parallel_clause ]
</pre>
<p class="subhead2"><a id="SQLQR869"></a><span class="italic"><a id="sthref1206"></a>split_nested_table_part</span></p>
<pre dir="ltr">
NESTED TABLE column INTO
  ( PARTITION partition [segment_attributes_clause],
    PARTITION partition [segment_attributes_clause] [split_nested_table_part]
  ) [ split_nested_table_part ]
</pre>
<p class="subhead2"><a id="SQLQR870"></a><span class="italic"><a id="sthref1207"></a>split_table_partition</span></p>
<pre dir="ltr">
SPLIT partition_extended_name
  { AT (literal [, literal]... )
    [ INTO ( range_partition_desc, range_partition_desc ) ]
  | VALUES (literal [, literal] ... )
    [ INTO (list_partition_desc, list_partition_desc ) ]
  } [ split_nested_table_part]
    [ dependent_tables_clause ]
    [ update_index_clauses ]
    [ parallel_clause ]
</pre>
<p class="subhead2"><a id="SQLQR871"></a><span class="italic"><a id="sthref1208"></a>split_table_subpartition</span></p>
<pre dir="ltr">
SPLIT subpartition_extended_name
  { AT ( literal [, literal]... )
    [ INTO (range_subpartition_desc, range_subpartition_desc) ]
  | VALUES ({ literal | NULL  [, literal | NULL ]...})
    [ INTO (list_subpartition_desc, list_subpartition_desc) ]
  } [ dependent_tables_clause ]
    [ update_index_clauses ]
    [ parallel_clause ]
</pre>
<p class="subhead2"><a id="SQLQR872"></a><span class="italic"><a id="sthref1209"></a>sql_format</span></p>
<pre dir="ltr">
[+ | -] days hours : minutes : seconds [. frac_secs ]
</pre>
<p class="subhead2"><a id="SQLQR873"></a><span class="italic"><a id="sthref1210"></a>standby_database_clauses</span></p>
<pre dir="ltr">
{ activate_standby_db_clause
| maximize_standby_db_clause
| register_logfile_clause
| commit_switchover_clause
| start_standby_clause
| stop_standby_clause
| convert_database_clause
} [ parallel_clause ]
</pre>
<p class="subhead2"><a id="SQLQR874"></a><span class="italic"><a id="sthref1211"></a>start_standby_clause</span></p>
<pre dir="ltr">
START LOGICAL STANDBY APPLY
[ IMMEDIATE ]
[ NODELAY ]
[ NEW PRIMARY dblink
| INITIAL [ scn_value ]
| { SKIP FAILED TRANSACTION | FINISH }
]
</pre>
<p class="subhead2"><a id="SQLQR875"></a><span class="italic"><a id="sthref1212"></a>startup_clauses</span></p>
<pre dir="ltr">
{ MOUNT [ { STANDBY | CLONE } DATABASE ]
| OPEN
  { [ READ WRITE ]
      [ RESETLOGS | NORESETLOGS ]
        [ UPGRADE | DOWNGRADE ]
  | READ ONLY
  }
}
</pre>
<p class="subhead2"><a id="SQLQR876"></a><span class="italic"><a id="sthref1213"></a>still_image_object_types</span></p>
<pre dir="ltr">
{ SI_StillImage
| SI_AverageColor
| SI_PositionalColor
| SI_ColorHistogram
| SI_Texture
| SI_FeatureList
| SI_Color
}
</pre>
<p class="subhead2"><a id="SQLQR877"></a><span class="italic"><a id="sthref1214"></a>stop_standby_clause</span></p>
<pre dir="ltr">
{ STOP | ABORT } LOGICAL STANDBY APPLY
</pre>
<p class="subhead2"><a id="SQLQR878"></a><span class="italic"><a id="sthref1215"></a>storage_clause</span></p>
<pre dir="ltr">
STORAGE
({ INITIAL size_clause
 | NEXT size_clause
 | MINEXTENTS integer
 | MAXEXTENTS { integer | UNLIMITED }
 | maxsize_clause
 | PCTINCREASE integer
 | FREELISTS integer
 | FREELIST GROUPS integer
 | OPTIMAL [ size_clause | NULL ]
 | BUFFER_POOL { KEEP | RECYCLE | DEFAULT }
 | FLASH_CACHE { KEEP | NONE | DEFAULT }
 | ENCRYPT
 } ...
)
</pre>
<p class="subhead2"><a id="SQLQR879"></a><span class="italic"><a id="sthref1216"></a>storage_table_clause</span></p>
<pre dir="ltr">
WITH {SYSTEM | USER} MANAGED STORAGE TABLES
</pre>
<p class="subhead2"><a id="SQLQR880"></a><span class="italic"><a id="sthref1217"></a>string</span></p>
<pre dir="ltr">
[ {N | n} ]
{ '[ c ]...'
| { Q | q } 'quote_delimiter c [ c ]... quote_delimiter'
}
</pre>
<p class="subhead2"><a id="SQLQR881"></a><span class="italic"><a id="sthref1218"></a>striping_clause</span></p>
<pre dir="ltr">
[ FINE | COARSE ]
</pre>
<p class="subhead2"><a id="SQLQR882"></a><span class="italic"><a id="sthref1219"></a>subpartition_by_hash</span></p>
<pre dir="ltr">
SUBPARTITION BY HASH (column [, column ]...)
   [ SUBPARTITIONS integer
        [ STORE IN (tablespace [, tablespace ]...) ]
   | subpartition_template
   ]
</pre>
<p class="subhead2"><a id="SQLQR883"></a><span class="italic"><a id="sthref1220"></a>subpartition_by_list</span></p>
<pre dir="ltr">
SUBPARTITION BY LIST (column) [ subpartition_template ]
</pre>
<p class="subhead2"><a id="SQLQR884"></a><span class="italic"><a id="sthref1221"></a>subpartition_by_range</span></p>
<pre dir="ltr">
SUBPARTITION BY RANGE ( column [, column]... ) [subpartition_template]
</pre>
<p class="subhead2"><a id="SQLQR885"></a><span class="italic"><a id="sthref1222"></a>subpartition_extended_name</span></p>
<pre dir="ltr">
SUBPARTITION subpartition
| 
SUBPARTITION FOR ( subpartition_key_value [, subpartition_key_value]... )
</pre>
<p class="subhead2"><a id="SQLQR886"></a><span class="italic"><a id="sthref1223"></a>subpartition_template</span></p>
<pre dir="ltr">
SUBPARTITION TEMPLATE
  ( { range_subpartition_desc [, range_subpartition_desc] ...
    | list_subpartition_desc [, list_subpartition_desc] ...
    | individual_hash_subparts [, individual_hash_subparts] ...
    }
  ) | hash_subpartition_quantity
</pre>
<p class="subhead2"><a id="SQLQR887"></a><span class="italic"><a id="sthref1224"></a>subquery</span></p>
<pre dir="ltr">
{ query_block
| subquery { UNION [ALL] | INTERSECT | MINUS } subquery
    [ { UNION [ALL] | INTERSECT | MINUS } subquery ]...
| ( subquery )
} [ order_by_clause ]
</pre>
<p class="subhead2"><a id="SQLQR888"></a><span class="italic"><a id="sthref1225"></a>subquery_factoring_clause</span></p>
<pre dir="ltr">
WITH 
  query_name ([c_alias [, c_alias]...]) AS (subquery) [search_clause ] [cycle_clause]
  [, query_name ([c_alias [, c_alias]...]) AS (subquery) [search_clause] [cycle_clause]]...
</pre>
<p class="subhead2"><a id="SQLQR889"></a><span class="italic"><a id="sthref1226"></a>subquery_restriction_clause</span></p>
<pre dir="ltr">
WITH { READ ONLY
     | CHECK OPTION 
     } [ CONSTRAINT constraint ]
</pre>
<p class="subhead2"><a id="SQLQR890"></a><span class="italic"><a id="sthref1227"></a>substitutable_column_clause</span></p>
<pre dir="ltr">
{ [ ELEMENT ] IS OF [ TYPE ] ( [ONLY] type)
| [ NOT ] SUBSTITUTABLE AT ALL LEVELS
}
</pre>
<p class="subhead2"><a id="SQLQR891"></a><span class="italic"><a id="sthref1228"></a>supplemental_db_logging</span></p>
<pre dir="ltr">
{ ADD | DROP } SUPPLEMENTAL LOG
{ DATA
| supplemental_id_key_clause
| supplemental_plsql_clause
}
</pre>
<p class="subhead2"><a id="SQLQR892"></a><span class="italic"><a id="sthref1229"></a>supplemental_id_key_clause</span></p>
<pre dir="ltr">
DATA
( { ALL | PRIMARY KEY | UNIQUE | FOREIGN KEY }
    [, { ALL | PRIMARY KEY | UNIQUE | FOREIGN KEY } ]...
)
COLUMNS
</pre>
<p class="subhead2"><a id="SQLQR893"></a><span class="italic"><a id="sthref1230"></a>supplemental_log_grp_clause</span></p>
<pre dir="ltr">
GROUP log_group
(column [ NO LOG ]
  [, column [ NO LOG ] ]...)
  [ ALWAYS ]
</pre>
<p class="subhead2"><a id="SQLQR894"></a><span class="italic"><a id="sthref1231"></a>supplemental_logging_props</span></p>
<pre dir="ltr">
SUPPLEMENTAL LOG { supplemental_log_grp_clause
                 | supplemental_id_key_clause
                 }
</pre>
<p class="subhead2"><a id="SQLQR895"></a><span class="italic"><a id="sthref1232"></a>supplemental_plsql_clause</span></p>
<pre dir="ltr">
DATA FOR PROCEDURAL REPLICATION
</pre>
<p class="subhead2"><a id="SQLQR896"></a><span class="italic"><a id="sthref1233"></a>supplemental_table_logging</span></p>
<pre dir="ltr">
{ ADD SUPPLEMENTAL LOG
  { supplemental_log_grp_clause | supplemental_id_key_clause }
    [, SUPPLEMENTAL LOG
       { supplemental_log_grp_clause | supplemental_id_key_clause }
    ]...
| DROP SUPPLEMENTAL LOG
  { supplemental_id_key_clause | GROUP log_group }
    [, SUPPLEMENTAL LOG
       { supplemental_id_key_clause | GROUP log_group }
    ]...
}
</pre>
<p class="subhead2"><a id="SQLQR897"></a><span class="italic"><a id="sthref1234"></a>switch_logfile_clause</span></p>
<pre dir="ltr">
SWITCH ALL LOGFILES TO BLOCKSIZE integer
</pre>
<p class="subhead2"><a id="SQLQR898"></a><span class="italic"><a id="sthref1235"></a>system_partitioning</span></p>
<pre dir="ltr">
PARTITION BY SYSTEM [ PARTITIONS integer
                    | reference_partition_desc
                       [, reference_partition_desc ...]
                    ]
</pre>
<p class="subhead2"><a id="SQLQR899"></a><span class="italic"><a id="sthref1236"></a>table_collection_expression</span></p>
<pre dir="ltr">
TABLE (collection_expression) [ (+) ]
</pre>
<p class="subhead2"><a id="SQLQR900"></a><span class="italic"><a id="sthref1237"></a>table_compression</span></p>
<pre dir="ltr">
{ COMPRESS [ BASIC
           | FOR { OLTP
                 | { QUERY | ARCHIVE } [ LOW | HIGH ]
                 }
           ]
| NOCOMPRESS 
}
</pre>
<p class="subhead2"><a id="SQLQR901"></a><span class="italic"><a id="sthref1238"></a>table_index_clause</span></p>
<pre dir="ltr">
[ schema. ] table [ t_alias ]
(index_expr [ ASC | DESC ]
  [, index_expr [ ASC | DESC ] ]...)
  [ index_properties ]
</pre>
<p class="subhead2"><a id="SQLQR902"></a><span class="italic"><a id="sthref1239"></a>table_partition_description</span></p>
<pre dir="ltr">
[ deferred_segment_creation ]
[ segment_attributes_clause ]
[ table_compression | key_compression ]
[ OVERFLOW [ segment_attributes_clause ] ]
[ { LOB_storage_clause
  | varray_col_properties
  | nested_table_col_properties
  }...
]
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can specify <code dir="ltr">deferred_segment_creation</code> in this clause starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2).</div>
<p class="subhead2"><a id="SQLQR903"></a><span class="italic"><a id="sthref1240"></a>table_partitioning_clauses</span></p>
<pre dir="ltr">
{ range_partitions
| list_partitions
| hash_partitions
| composite_range_partitions
| composite_list_partitions
| composite_hash_partitions
| reference_partitioning
| system_partitioning
}
</pre>
<p class="subhead2"><a id="SQLQR904"></a><span class="italic"><a id="sthref1241"></a>table_properties</span></p>
<pre dir="ltr">
[ column_properties ]
[ table_partitioning_clauses ]
[ CACHE | NOCACHE ]
[ RESULT_CACHE ( MODE {DEFAULT | FORCE } ) ] 
[ parallel_clause ]
[ ROWDEPENDENCIES | NOROWDEPENDENCIES ]
[ enable_disable_clause ]...
[ row_movement_clause ]
[ flashback_archive_clause ]
[ AS subquery ]
</pre>
<p class="subhead2"><a id="SQLQR905"></a><span class="italic"><a id="sthref1242"></a>table_reference</span></p>
<pre dir="ltr">
{ ONLY (query_table_expression)
| query_table_expression [ pivot_clause | unpivot_clause ]
} [ flashback_query_clause ]
  [ t_alias ]
</pre>
<p class="subhead2"><a id="SQLQR906"></a><span class="italic"><a id="sthref1243"></a>tablespace_clauses</span></p>
<pre dir="ltr">
{ EXTENT MANAGEMENT LOCAL
| DATAFILE file_specification [, file_specification ]...
| SYSAUX DATAFILE file_specification [, file_specification ]...
| default_tablespace
| default_temp_tablespace
| undo_tablespace
}
</pre>
<p class="subhead2"><a id="SQLQR991"></a><a id="sthref1244"></a><span class="italic">tablespace_encryption_spec</span></p>
<pre dir="ltr">
[ USING 'encrypt_algorithm' ]
</pre>
<p class="subhead2"><a id="SQLQR907"></a><span class="italic"><a id="sthref1245"></a>tablespace_group_clause</span></p>
<pre dir="ltr">
TABLESPACE GROUP { tablespace_group_name | '' }
</pre>
<p class="subhead2"><a id="SQLQR908"></a><span class="italic"><a id="sthref1246"></a>tablespace_logging_clauses</span></p>
<pre dir="ltr">
{ logging_clause
| [ NO ] FORCE LOGGING
}
</pre>
<p class="subhead2"><a id="SQLQR909"></a><span class="italic"><a id="sthref1247"></a>tablespace_retention_clause</span></p>
<pre dir="ltr">
RETENTION { GUARANTEE | NOGUARANTEE }
</pre>
<p class="subhead2"><a id="SQLQR910"></a><span class="italic"><a id="sthref1248"></a>tablespace_state_clauses</span></p>
<pre dir="ltr">
{ { ONLINE
  | OFFLINE [ NORMAL | TEMPORARY | IMMEDIATE ]
  }
  | READ { ONLY | WRITE }
  | { PERMANENT | TEMPORARY }
}
</pre>
<p class="subhead2"><a id="SQLQR911"></a><span class="italic"><a id="sthref1249"></a>temporary_tablespace_clause</span></p>
<pre dir="ltr">
TEMPORARY TABLESPACE tablespace
  [ TEMPFILE file_specification [, file_specification ]... ]
  [ tablespace_group_clause ]
  [ extent_management_clause ]
</pre>
<p class="subhead2"><a id="SQLQR912"></a><span class="italic"><a id="sthref1250"></a>timeout_clause</span></p>
<pre dir="ltr">
DROP AFTER integer { M | H }
</pre>
<p class="subhead2"><a id="SQLQR913"></a><span class="italic"><a id="sthref1251"></a>trace_file_clause</span></p>
<pre dir="ltr">
TRACE
  [ AS 'filename' [ REUSE ] ]
  [ RESETLOGS | NORESETLOGS ]
</pre>
<p class="subhead2"><a id="SQLQR914"></a><span class="italic"><a id="sthref1252"></a>truncate_partition_subpart</span></p>
<pre dir="ltr">
TRUNCATE { partition_extended_name
         | subpartition_extended_name
         }
   [ { DROP [ ALL ] | REUSE } STORAGE ]
   [ update_index_clauses [ parallel_clause ] ]
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can specify the <code dir="ltr">ALL</code> keyword in this clause starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2).</div>
<p class="subhead2"><a id="SQLQR915"></a><span class="italic"><a id="sthref1253"></a>undo_tablespace</span></p>
<pre dir="ltr">
  [ BIGFILE | SMALLFILE ]
UNDO TABLESPACE tablespace
  [ TABLESPACE file_specification [, file_specification ]...]
</pre>
<p class="subhead2"><a id="SQLQR916"></a><span class="italic"><a id="sthref1254"></a>undo_tablespace_clause</span></p>
<pre dir="ltr">
UNDO TABLESPACE tablespace
  [ DATAFILE file_specification [, file_specification ]... ]
  [ extent_management_clause ]
  [ tablespace_retention_clause ]
</pre>
<p class="subhead2"><a id="SQLQR917"></a><span class="italic"><a id="sthref1255"></a>undrop_disk_clause</span></p>
<pre dir="ltr">
UNDROP DISKS
</pre>
<p class="subhead2"><a id="SQLQR918"></a><span class="italic"><a id="sthref1256"></a>unpivot_clause</span></p>
<pre dir="ltr">
UNPIVOT [ {INCLUDE | EXCLUDE} NULLS ]
( { column | ( column [, column]... ) }
  pivot_for_clause
  unpivot_in_clause
)
</pre>
<p class="subhead2"><a id="SQLQR919"></a><span class="italic"><a id="sthref1257"></a>unpivot_in_clause</span></p>
<pre dir="ltr">
IN
( { column | ( column [, column]... ) }
      [  AS { literal | ( literal [, literal]... ) } ]
        [, { column | ( column [, column]... ) }
          [  AS {literal | ( literal [, literal]... ) } ]
        ]...
)
</pre>
<p class="subhead2"><a id="SQLQR920"></a><span class="italic"><a id="sthref1258"></a>update_all_indexes_clause</span></p>
<pre dir="ltr">
UPDATE INDEXES
   [ ( index ( update_index_partition
             | update_index_subpartition
             )
        [, index ( update_index_partition
                 | update_index_subpartition
                 )
        ]...
      )
   ]
</pre>
<p class="subhead2"><a id="SQLQR921"></a><span class="italic"><a id="sthref1259"></a>update_global_index_clause</span></p>
<pre dir="ltr">
{ UPDATE | INVALIDATE } GLOBAL INDEXES
</pre>
<p class="subhead2"><a id="SQLQR922"></a><span class="italic"><a id="sthref1260"></a>update_index_clauses</span></p>
<pre dir="ltr">
{ update_global_index_clause
| update_all_indexes_clause
}
</pre>
<p class="subhead2"><a id="SQLQR923"></a><span class="italic"><a id="sthref1261"></a>update_index_partition</span></p>
<pre dir="ltr">
index_partition_description [ index_subpartition_clause ]
  [, index_partition_description [ index_subpartition_clause ] ]...
</pre>
<p class="subhead2"><a id="SQLQR924"></a><span class="italic"><a id="sthref1262"></a>update_index_subpartition</span></p>
<pre dir="ltr">
SUBPARTITION [ subpartition ]
   [ TABLESPACE tablespace ]
[, SUBPARTITION [ subpartition ]
      [ TABLESPACE tablespace ]
]...
</pre>
<p class="subhead2"><a id="SQLQR925"></a><span class="italic"><a id="sthref1263"></a>update_set_clause</span></p>
<pre dir="ltr">
SET
{ { (column [, column ]...) = (subquery)
  | column = { expr | (subquery) | DEFAULT }
  }
     [, { (column [, column]...) = (subquery)
        | column = { expr | (subquery) | DEFAULT }
        }
     ]...
| VALUE (t_alias) = { expr | (subquery) }
}
</pre>
<p class="subhead2"><a id="SQLQR926"></a><span class="italic"><a id="sthref1264"></a>upgrade_table_clause</span></p>
<pre dir="ltr">
UPGRADE [ [NOT ] INCLUDING DATA ]
   [ column_properties ]
</pre>
<p class="subhead2"><a id="SQLQR927"></a><span class="italic"><a id="sthref1265"></a>user_clauses</span></p>
<pre dir="ltr">
{ ADD USER user [, user]...
| DROP USER user [, user]... [CASCADE]
}
</pre>
<p class="subhead2"><a id="SQLQR928"></a><span class="italic"><a id="sthref1266"></a>usergroup_clauses</span></p>
<pre dir="ltr">
{ ADD USERGROUP usergroup WITH MEMBER user [, user]...
| MODIFY USERGROUP usergroup { ADD | DROP } MEMBER user [, user]...
| DROP USERGROUP usergroup 
}
</pre>
<p class="subhead2"><a id="SQLQR929"></a><span class="italic"><a id="sthref1267"></a>using_function_clause</span></p>
<pre dir="ltr">
USING [ schema. ] [ package. | type. ] function_name
</pre>
<p class="subhead2"><a id="SQLQR930"></a><span class="italic"><a id="sthref1268"></a>using_index_clause</span></p>
<pre dir="ltr">
USING INDEX
  { [ schema. ] index
  | (create_index_statement)
  | index_properties
  }
</pre>
<p class="subhead2"><a id="SQLQR931"></a><span class="italic"><a id="sthref1269"></a>using_statistics_type</span></p>
<pre dir="ltr">
USING { [ schema. ] statistics_type | NULL }
</pre>
<p class="subhead2"><a id="SQLQR932"></a><span class="italic"><a id="sthref1270"></a>using_type_clause</span></p>
<pre dir="ltr">
USING [ schema. ] implementation_type [ array_DML_clause ]
</pre>
<p class="subhead2"><a id="SQLQR933"></a><span class="italic"><a id="sthref1271"></a>validation_clauses</span></p>
<pre dir="ltr">
{ VALIDATE REF UPDATE [ SET DANGLING TO NULL ]
| VALIDATE STRUCTURE
     [ CASCADE { FAST | COMPLETE { OFFLINE | ONLINE } [ into_clause ] } ]
}
</pre>
<p class="subhead2"><a id="SQLQR934"></a><span class="italic"><a id="sthref1272"></a>values_clause</span></p>
<pre dir="ltr">
VALUES ({ expr | DEFAULT }
          [, { expr | DEFAULT } ]...
       )
</pre>
<p class="subhead2"><a id="SQLQR935"></a><span class="italic"><a id="sthref1273"></a>varray_col_properties</span></p>
<pre dir="ltr">
VARRAY varray_item 
{ [ substitutable_column_clause ] varray_storage_clause
| substitutable_column_clause
}
</pre>
<p class="subhead2"><a id="SQLQR936"></a><span class="italic"><a id="sthref1274"></a>varray_storage_clause</span></p>
<pre dir="ltr">
STORE AS [SECUREFILE | BASICFILE] LOB
{ [LOB_segname] ( LOB_storage_parameters )
| LOB_segname
}
</pre>
<p class="subhead2"><a id="SQLQR937"></a><span class="italic"><a id="sthref1275"></a>virtual_column_definition</span></p>
<pre dir="ltr">
column [datatype] [GENERATED ALWAYS] AS (column_expression)
   [VIRTUAL]
   [ inline_constraint [inline_constraint]... ]
</pre>
<p class="subhead2"><a id="SQLQR938"></a><span class="italic"><a id="sthref1276"></a>where_clause</span></p>
<pre dir="ltr">
WHERE condition
</pre>
<p class="subhead2"><a id="SQLQR939"></a><span class="italic"><a id="sthref1277"></a>windowing_clause</span></p>
<pre dir="ltr">
{ ROWS | RANGE }
{ BETWEEN
  { UNBOUNDED PRECEDING
  | CURRENT ROW
  | value_expr { PRECEDING | FOLLOWING }
  } 
  AND
  { UNBOUNDED FOLLOWING
  | CURRENT ROW
  | value_expr { PRECEDING | FOLLOWING }
  }
| { UNBOUNDED PRECEDING
  | CURRENT ROW
  | value_expr PRECEDING
  }
}
</pre>
<p class="subhead2"><a id="SQLQR940"></a><span class="italic"><a id="sthref1278"></a>XML_attributes_clause</span></p>
<pre dir="ltr">
XMLATTRIBUTES
  ( [ ENTITYESCAPING | NOENTITYESCAPING ]
    [ SCHEMACHECK | NOSCHEMACHECK ]
    value_expr [ { [AS] c_alias } | { AS EVALNAME value_expr } ]
      [, value_expr [ { [AS] c_alias } | { AS EVALNAME value_expr } ] ]...
  )
</pre>
<p class="subhead2"><a id="SQLQR941"></a><span class="italic"><a id="sthref1279"></a>XMLnamespaces_clause</span></p>
<pre dir="ltr">
XMLNAMESPACES
  ( { string AS identifier } | { DEFAULT string }
      [, { string AS identifier } | { DEFAULT string } ]...
  )
</pre>
<p class="subhead2"><a id="SQLQR942"></a><span class="italic"><a id="sthref1280"></a>XML_passing_clause</span></p>
<pre dir="ltr">
PASSING [ BY VALUE ] 
    expr [ AS identifier ]
      [, expr [ AS identifier ] 
      ]...
</pre>
<p class="subhead2"><a id="SQLQR943"></a><span class="italic"><a id="sthref1281"></a>XML_table_column</span></p>
<pre dir="ltr">
column
     { FOR ORDINALITY 
     | datatype [ PATH string ] [ DEFAULT expr ]
     }
</pre>
<p class="subhead2"><a id="SQLQR944"></a><span class="italic"><a id="sthref1282"></a>XMLindex_clause</span></p>
<pre dir="ltr">
[XDB.] XMLINDEX [ local_XMLIndex_clause ]
                [ parallel_clause ]
  [ XMLIndex_parameters_clause ]
</pre>
<p class="subhead2"><a id="SQLQR945"></a><span class="italic"><a id="sthref1283"></a>XMLSchema_spec</span></p>
<pre dir="ltr">
  [ XMLSCHEMA XMLSchema_URL ]
ELEMENT { element | XMLSchema_URL # element }
  [ { ALLOW | DISALLOW } NONSCHEMA ]
  [ { ALLOW | DISALLOW } ANYSCHEMA ]
</pre>
<p class="subhead2"><a id="SQLQR946"></a><span class="italic"><a id="sthref1284"></a>XMLTABLE_options</span></p>
<pre dir="ltr">
[ XML_passing_clause ]
[ COLUMNS XML_table_column [, XML_table_column]...]
</pre>
<p class="subhead2"><a id="SQLQR947"></a><span class="italic"><a id="sthref1285"></a>XMLType_column_properties</span></p>
<pre dir="ltr">
XMLTYPE [ COLUMN ] column
   [ XMLType_storage ]
   [ XMLSchema_spec ]
</pre>
<p class="subhead2"><a id="SQLQR948"></a><span class="italic"><a id="sthref1286"></a>XMLType_storage</span></p>
<pre dir="ltr">
STORE
{ AS
{ OBJECT RELATIONAL
| [SECUREFILE | BASICFILE]
  { CLOB | BINARY XML }
    [ { LOB_segname [ (LOB_parameters) ]
      | (LOB_parameters)
      }
    ]
}
| { ALL VARRAYS AS { LOBS | TABLES } }
}
</pre>
<p class="subhead2"><a id="SQLQR949"></a><span class="italic"><a id="sthref1287"></a>XMLType_table</span></p>
<pre dir="ltr">
OF XMLTYPE
  [ (oject_properties) ]
  [ XMLTYPE XMLType_storage ]
  [ XMLSchema_spec ]
  [ XMLType_virtual_columns ]
  [ ON COMMIT { DELETE | PRESERVE } ROWS ]
  [ OID_clause ]
  [ OID_index_clause ]
  [ physical_properties ]
  [ table_properties ]
</pre>
<p class="subhead2"><a id="SQLQR950"></a><span class="italic"><a id="sthref1288"></a>XMLType_view_clause</span></p>
<pre dir="ltr">
OF XMLTYPE [ XMLSchema_spec ]
WITH OBJECT { IDENTIFIER | ID }
  { DEFAULT | ( expr [, expr ]...) }
</pre>
<p class="subhead2"><a id="SQLQR951"></a><span class="italic"><a id="sthref1289"></a>XMLType_virtual_columns</span></p>
<pre dir="ltr">
VIRTUAL COLUMNS ( column AS (expr) [, column AS (expr) ]... )
</pre>
<p class="subhead2"><a id="SQLQR952"></a><span class="italic"><a id="sthref1290"></a>ym_iso_format</span></p>
<pre dir="ltr">
[-] P [ years Y ] [months M] [days D]
  [T [hours H] [minutes M] [seconds [. frac_secs] S ] ]
</pre></div>
<!-- class="sect1" --></div>
<!-- class="chapter" -->
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1889">
<tr>
<td class="cellalignment1898">
<table class="cellalignment1894">
<tr>
<td class="cellalignment1893"><a href="sqlqr05.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1893"><a href="sqlqr06.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2003, 2016,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1900">
<table class="cellalignment1892">
<tr>
<td class="cellalignment1893"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1893"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1893"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1893"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1893"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1893"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
