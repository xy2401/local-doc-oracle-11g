<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Data Type and DDL Support on a Logical Standby Database</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 748" />
<meta name="dcterms.created" content="2014-02-25T8:43:2Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Data Guard Concepts and Administration" />
<meta name="dcterms.identifier" content="E41134-03" />
<meta name="dcterms.isVersionOf" content="SBYDB" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="upgrades.htm" title="Previous" type="text/html" />
<link rel="Next" href="rac_support.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e41134.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">30/34</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='data_support'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="SBYDB00305" class="appendix"><a id="CHDGFADJ"></a>
<h1 class="appendix"><span class="secnum">C</span> Data Type and DDL<a id="sthref1335"></a><a id="sthref1336"></a> Support on a Logical Standby Database <a id="sthref1337"></a><a id="sthref1338"></a></h1>
<p>When setting up a logical standby database, you must ensure the logical standby database can maintain the datatypes and tables in your primary database. This appendix lists the various database objects, storage types, and PL/SQL supplied packages that are supported and unsupported by logical standby databases. It contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDGEHCC">Datatype Considerations</a></p>
</li>
<li>
<p><a href="#CHDFFJAJ">Support for Transparent Data Encryption (TDE)</a></p>
</li>
<li>
<p><a href="#BEHEJJIH">Support for Tablespace Encryption</a></p>
</li>
<li>
<p><a href="#BEHFBIII">Support For Row-level Security and Fine-Grained Auditing</a></p>
</li>
<li>
<p><a href="#CHDEAEBI">Oracle Label Security</a></p>
</li>
<li>
<p><a href="#CHDHEIDJ">Oracle E-Business Suite</a></p>
</li>
<li>
<p><a href="#CHDCIACJ">Supported Table Storage Types</a></p>
</li>
<li>
<p><a href="#BEHJHJFD">Unsupported Table Storage Types</a></p>
</li>
<li>
<p><a href="#CHDDDHDG">PL/SQL Supplied Packages Considerations</a></p>
</li>
<li>
<p><a href="#i637080">Unsupported Tables</a></p>
</li>
<li>
<p><a href="#CHDFIDDI">Skipped SQL Statements on a Logical Standby Database</a></p>
</li>
<li>
<p><a href="#CHDEAGBF">DDL Statements Supported by a Logical Standby Database</a></p>
</li>
<li>
<p><a href="#CHDIGCFH">Distributed transactions and XA Support</a></p>
</li>
<li>
<p><a href="#CHDIEIIJ">Support for SecureFiles LOBs</a></p>
</li>
<li>
<p><a href="#CHDCFHEB">Character Set Considerations</a></p>
</li>
</ul>
<a id="CHDGEHCC"></a>
<div id="SBYDB4934" class="sect1">
<h2 class="sect1"><span class="secnum">C.1</span> Datatype Considerations</h2>
<p>The following sections list the supported and unsupported database objects:</p>
<ul>
<li>
<p><a href="#CHDIHEGA">Supported Datatypes in a Logical Standby Database</a></p>
</li>
<li>
<p><a href="#CHDDCCIG">Unsupported Datatypes in a Logical Standby Database</a></p>
</li>
</ul>
<a id="CHDIHEGA"></a>
<div id="SBYDB4935" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">C.1.1</span> Supported Datatypes in a Logical Standby Databas<a id="sthref1339"></a><a id="sthref1340"></a>e</h3>
<p>Logical standby databases support the following datatypes:</p>
<ul>
<li>
<p><code>BINARY_DOUBLE</code></p>
</li>
<li>
<p><code>BINARY_FLOAT</code></p>
</li>
<li>
<p><code>BLOB</code></p>
</li>
<li>
<p><code>CHAR</code></p>
</li>
<li>
<p><code>CLOB</code> and <code>NCLOB</code></p>
</li>
<li>
<p><code>DATE</code></p>
</li>
<li>
<p><code>INTERVAL YEAR TO MONTH</code></p>
</li>
<li>
<p><code>INTERVAL DAY TO SECOND</code></p>
</li>
<li>
<p><code>LONG</code></p>
</li>
<li>
<p><code>LONG RAW</code></p>
</li>
<li>
<p><code>NCHAR</code></p>
</li>
<li>
<p><code>NUMBER</code></p>
</li>
<li>
<p><code>NVARCHAR2</code></p>
</li>
<li>
<p><code>RAW</code></p>
</li>
<li>
<p><code>TIMESTAMP</code></p>
</li>
<li>
<p><code>TIMESTAMP WITH TIMEZONE</code></p>
</li>
<li>
<p><code>TIMESTAMP WITH LOCAL TIMEZONE</code></p>
</li>
<li>
<p><code>VARCHAR</code> and <code>VARCHAR2</code></p>
</li>
<li>
<p>LOBs stored as SecureFiles (requires that the primary database be run at a compatibility of 11.2 or higher. See <a href="#CHDIEIIJ">Section C.14, "Support for SecureFiles LOBs"</a>.)</p>
</li>
<li>
<p><code>XMLType</code> data for all storage models, assuming the following primary database compatibility requirements:</p>
<ul>
<li>
<p><code>XMLType</code> stored in <code>CLOB</code> format requires primary database to run at a compatibility of 11.1 or higher</p>
</li>
<li>
<p><code>XMLType</code> stored in object-relational format or as binary XML requires that the primary database be running Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.3) or higher with a redo compatibility setting of 11.2.0.3 or higher</p>
</li>
</ul>
</li>
</ul>
<div id="SBYDB5139" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1341"></a>
<h4 class="sect3"><span class="secnum">C.1.1.1</span> Compatibility Requirements</h4>
<p>SQL Apply support for the following has compatibility requirements on the primary database:</p>
<ul>
<li>
<p>Multibyte <code>CLOB</code> support requires primary database to run at a compatibility of 10.1 or higher.</p>
</li>
<li>
<p>IOT support without <code>LOB</code>s and Overflows requires primary database to run at a compatibility of 10.1 or higher.</p>
</li>
<li>
<p>IOT support with <code>LOB</code> and Overflow requires primary database to run at a compatibility of 10.2 or higher.</p>
</li>
<li>
<p>TDE support requires primary database to run at a compatibility of 11.1 or higher.</p>
</li>
<li>
<p>Segment compression requires primary database to run at a compatibility of 11.1 or higher.</p>
</li>
<li>
<p>Hybrid Columnar Compression support is dependent on the underlying storage system.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT89198" href="../../server.112/e40540/tablecls.htm#CNCPT89198"><span class="italic">Oracle Database Concepts</span></a> for more information about Hybrid Columnar Compression</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDDCCIG"></a>
<div id="SBYDB4936" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">C.1.2</span> Unsupported Datatypes in a Logical Standby Databas<a id="sthref1342"></a><a id="sthref1343"></a>e</h3>
<p>The following data types are not supported by Logical standby databases. If a table contains columns having any of these unsupported data types, then the entire table is ignored by SQL Apply.</p>
<br />
<code><a id="sthref1344"></a><a id="sthref1345"></a>BFILE</code><br />
<a id="sthref1346"></a><a id="sthref1347"></a>Collections (including <code>VARRAYS</code> and nested tables)<br />
<a id="sthref1348"></a><a id="sthref1349"></a><a id="sthref1350"></a><a id="sthref1351"></a><a id="sthref1352"></a>Multimedia data types (including Spatial, Image, and <a id="sthref1353"></a><a id="sthref1354"></a>Oracle Text<a id="sthref1355"></a><a id="sthref1356"></a>)<br />
<code><a id="sthref1357"></a><a id="sthref1358"></a>ROWID</code>, <a id="sthref1359"></a><a id="sthref1360"></a><code>UROWID</code><br />
<a id="sthref1361"></a><a id="sthref1362"></a>User-defined types</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDFFJAJ"></a>
<div id="SBYDB4937" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">C.2</span> Support for <a id="sthref1363"></a><a id="sthref1364"></a>Transparent Data Encryption (TDE)</h2>
<p>Data Guard SQL Apply can be used to provide data protection for a primary database with Transparent Data Encryption (TDE) enabled. Consider the following when using a logical standby database to provide data protection for applications with advanced security requirements:</p>
<ul>
<li>
<p>Tables with Transparent Data Encryption using server held keys are replicated on a logical standby database when both the primary and the standby databases are running at a compatibility level of 11.1 or higher.</p>
</li>
<li>
<p>Transparent Data Encryption in the context of Hardware Security Modules is not supported for logical standby databases in 11g Release 1.</p>
</li>
</ul>
<p>You must consider the following restrictions when, in the context of a logical standby database, you want to replicate tables that have encrypted columns:</p>
<ol>
<li>
<p>To translate encrypted redo records, SQL Apply must have access to an open wallet containing the Transparent Data Encryption keys. Therefore, you must copy the wallet containing the keys from the primary database to the standby database after it has been created.</p>
</li>
<li>
<p>The wallet must be copied from the primary database to the logical standby database every time the master key is changed.</p>
</li>
<li>
<p>Oracle recommends that you not rekey the master key at the logical standby database while the logical standby database is replicating encrypted tables from the primary database. Doing so may cause SQL Apply to halt when it encounters an encrypted redo record.</p>
</li>
<li>
<p>You can rekey the encryption key of a replicated table at the logical standby database. This requires that you lower the guard setting to <code>NONE</code> before you issue the rekey command.</p>
</li>
<li>
<p>Replicated encrypted tables can use a different encryption scheme for columns than the one used in the primary database. For example, if the <code>SALARY</code> column of the <code>HR.EMPLOYEES</code> table is encrypted at the primary database using the AES192 encryption algorithm, it can be encrypted at the logical standby using the AES256 encryption algorithm. Or, the <code>SALARY</code> column can remain unencrypted at the logical standby database.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="BEHEJJIH"></a>
<div id="SBYDB4938" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">C.3</span> Support for Tablespace Encryption</h2>
<p>Data Guard SQL Apply can be used to provide data protection for a primary database that has tablespace encryption enabled. In such a case, restrictions 1, 2, and 3 listed in <a href="#CHDFFJAJ">Section C.2, "Support for Transparent Data Encryption (TDE)"</a> will apply.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In some cases, when SQL Apply mines and applies redo records for changes made to tables in encrypted tablespaces, records of user data in unencrypted form may be kept for a long period of time. If this is not acceptable, you should issue the following command to move all metadata tables pertaining to the mining component of SQL Apply to an encrypted tablespace:
<pre>
SQL&gt; DBMS_LOGMNR_D.SET_TABLESPACE(NEW_TABLESPACE =&gt; 'ENCRYPTED_LOGMNR_TS'); 
</pre></div>
</div>
<!-- class="sect1" -->
<a id="BEHFBIII"></a>
<div id="SBYDB4939" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">C.4</span> Support For Row-level Security and Fine-Grained Auditing</h2>
<p>As of Oracle Database 11<span class="italic">g</span>, Logical Standby can automatically replicate the security environment provided through the <code>DBMS_RLS</code> and <code>DBMS_FGA</code> PL/SQL packages. This support simplifies management of security considerations when a server fails over to the standby since the security environment will transparently be maintained. It also ensures that access control policies applied to the primary data can be automatically forwarded to the standby, and the standby data transparently given the same level of protection. If a standby server is newly created with 11g, this replication is enabled by default; otherwise it has to be enabled by the DBA at an appropriate time.</p>
<p>Support for the replication of these PL/SQL packages requires that both the primary and the standby be running with a compatibility setting of 11.1 or higher.</p>
<p>It also requires that the table referenced be a Logical Standby maintained object. For example, a table with a rowid column will not have its data maintained by Logical Standby, in which case <code>DBMS_RLS</code> and <code>DBMS_FGA</code> calls referencing that table will also not be maintained.</p>
<div id="SBYDB01350" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1365"></a>
<h3 class="sect2"><span class="secnum">C.4.1</span> Row-level Security</h3>
<p>Row-Level Security, also known as Virtual Private Database (VPD), is a feature that enforces security at a fine level of granularity, when accessing tables, views, or synonyms. When a user directly or indirectly accesses a table, view, or synonym protected with a VPD policy, the server dynamically modifies the SQL statement of the user. The modification creates a <code>WHERE</code> condition (known as a predicate) returned by a function implementing the security policy. The statement is modified dynamically, transparently to the user, using any condition that can be expressed in, or returned by, a function. VPD policies can be applied to <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>INDEX</code>, and <code>DELETE</code> statements. VPD is implemented by using the <code>DBMS_RLS</code> package to apply security policies.</p>
<p>When a <code>DBMS_RLS</code> procedure is executed on the primary, additional information is captured in the redo that allows the procedure call to be logically reconstructed and executed on the standby. Logical Standby supports replication of ancillary objects for VPD such as Contexts, Database Logon Triggers, and their supporting packages. You must ensure that these objects are placed in maintained schemas and that no DDL skips have been configured that would stop their replication.</p>
</div>
<!-- class="sect2" -->
<div id="SBYDB4940" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1366"></a>
<h3 class="sect2"><span class="secnum">C.4.2</span> Fine-Grained Auditing</h3>
<p>Fine-grained auditing provides a way to audit select statements. The <code>DBMS_FGA</code> package enables all select statements that access a table to be captured, together with what data was accessed. An FGA policy may be applied to a particular column or even to only those select statements that return rows for which a specified predicate returns <code>TRUE</code>.</p>
<p>When a <code>DBMS_FGA</code> procedure is executed on the primary, additional information is captured to the redo that allows the procedure call to be logically reconstructed and executed on the standby.</p>
</div>
<!-- class="sect2" -->
<div id="SBYDB4941" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1367"></a>
<h3 class="sect2"><span class="secnum">C.4.3</span> Skipping and Enabling PL/SQL Replication</h3>
<p>PL/SQL can be configured with skip and skip_error rules exactly as DDL statements except that wildcarding on the package and procedure are not supported. For example to skip all aspects of VPD, do the following:</p>
<pre>
DBMS_LOGSTDBY.Skip (
stmt =&gt; 'PL/SQL',
schema_name =&gt; 'SYS',
object_name =&gt;'DBMS_RLS',
use_like =&gt; FALSE);
</pre>
<p>Note that the schema specified is the schema in which the package is defined. To skip an individual procedure in a package, the syntax would be as follows:</p>
<pre>
DBMS_LOGSTDBY.Skip (
stmt =&gt; 'PL/SQL',
schema_name =&gt; 'SYS',
object_name =&gt;'DBMS_RLS.Add_Policy',
use_like =&gt; FALSE);
</pre>
<p>In order to skip VPD on certain schemas or tables, a skip procedure must be used. The skip procedure will be passed the fully qualified PL/SQL statement that is to be executed, for example:</p>
<pre>
DBMS_RLS.Drop_Policy(
object_schema =&gt; 'SCOTT, 
object_name  =&gt; 'EMP',
policy_name =&gt; 'MYPOLICY');
</pre>
<p>The procedure could then parse the statement to decide whether to skip it, to apply it, or to stop apply and let the DBA take a compensating action.</p>
<p>Unlike DDL, skip procedures on PL/SQL do not support returning a replacement statement.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDEAEBI"></a>
<div id="SBYDB4942" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">C.5</span> Oracle Label Security</h2>
<p>Logical standby databases do not support Oracle Label Security. If Oracle Label Security is installed on the primary database, SQL Apply fails on the logical standby database with an internal error during startup.</p>
</div>
<!-- class="sect1" -->
<a id="CHDHEIDJ"></a>
<div id="SBYDB5119" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">C.6</span> Oracle E-Business Suite</h2>
<p>Logical standby databases do not fully support an Oracle E-Business Suite implementation because there are tables that contain unsupported data types. However, using <code>SKIP</code> rules, it is possible for you to replicate a subset of the E-Business Suite schemas and tables to offload applications to the logical standby.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The My Oracle Support note 851603.1 at <code><a href="http://support.oracle.com">http://support.oracle.com</a></code> for additional information about using Logical standby with Oracle E-Business Suite</div>
</div>
<!-- class="sect1" -->
<a id="CHDCIACJ"></a>
<div id="SBYDB4943" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">C.7</span> Supported Table Storage Types</h2>
<p>Logical standby databases support the following table storage types:</p>
<ul>
<li>
<p>Cluster tables (including index clusters and heap clusters)</p>
</li>
<li>
<p>Index-organized tables (partitioned and nonpartitioned, including overflow segments)</p>
</li>
<li>
<p>Heap-organized tables (partitioned and nonpartitioned)</p>
</li>
<li>
<p>OLTP table compression (<code>COMPRESS FOR OLTP</code>) and basic table compression (<code>COMPRESS BASIC</code>). OLTP table compression and basic table compression require that the compatibility setting of the primary database be set to 11.1.0 or higher.</p>
</li>
<li>
<p>Tables with virtual columns (provided the table has no other columns or properties not supported by logical standby). This support is available only in Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.3) and higher.</p>
</li>
<li>
<p>Tables using Hybrid Columnar Compression</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT89198" href="../../server.112/e40540/tablecls.htm#CNCPT89198"><span class="italic">Oracle Database Concepts</span></a> for more information about Hybrid Columnar Compression</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BEHJHJFD"></a>
<div id="SBYDB4944" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">C.8</span> Unsupported Table Storage Types</h2>
<p>Logical standby does not support tables that contain <span class="italic">only</span> the following datatypes:</p>
<ul>
<li>
<p><code>LOB</code> (<code>CLOB</code>, <code>NCLOB</code>, <code>BLOB</code>)</p>
</li>
<li>
<p><code>LONG</code></p>
</li>
<li>
<p><code>LONG</code> <code>RAW</code></p>
</li>
<li>
<p><code>OBJECT</code> <code>TYPE</code></p>
</li>
<li>
<p><code>COLLECTIONS</code></p>
</li>
<li>
<p><code>XML</code></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDIEIIJ">Support for SecureFiles LOBs</a></div>
</div>
<!-- class="sect1" -->
<a id="CHDDDHDG"></a>
<div id="SBYDB00315" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">C.9</span> PL/SQL Supplied Packages Considerations</h2>
<p>This section discusses the following considerations regarding PL/SQL supplied packages:</p>
<ul>
<li>
<p><a href="#CHDFGHCA">Supported PL/SQL Supplied Packages</a></p>
</li>
<li>
<p><a href="#CHDEBJEH">Unsupported PL/SQL Supplied Packages</a></p>
</li>
<li>
<p><a href="#BEHGGFFE">Handling XML and XDB PL/SQL Packages in Logical Standby</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS" href="../../appdev.112/e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about Oracle PL/SQL supplied packages</div>
<a id="CHDFGHCA"></a>
<div id="SBYDB4945" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">C.9.1</span> Supported PL/SQL Supplied Package<a id="sthref1368"></a><a id="sthref1369"></a><a id="sthref1370"></a>s</h3>
<p>Oracle PL/SQL supplied packages that do not modify system metadata or user data leave no footprint in the archived redo log files, and hence are safe to use on the primary database. Examples of such packages are <code><a id="sthref1371"></a>DBMS_OUTPUT</code>, <code><a id="sthref1372"></a>DBMS_RANDOM</code>, <code><a id="sthref1373"></a>DBMS_PIPE</code>, <code><a id="sthref1374"></a>DBMS_DESCRIBE</code>, <code><a id="sthref1375"></a>DBMS_OBFUSCATION_TOOLKIT</code>, <code><a id="sthref1376"></a>DBMS_TRACE</code>, <code><a id="sthref1377"></a>DBMS_METADATA</code><code><a id="sthref1378"></a></code>, <code>DBMS_CRYPTO</code>.</p>
<p>Oracle PL/SQL supplied packages that do not modify system metadata but may modify user data are supported by SQL Apply, as long as the modified data belongs to the supported data types listed in <a href="#CHDIHEGA">Section C.1.1</a>. Examples of such packages are <code><a id="sthref1379"></a>DBMS_LOB</code>, <code><a id="sthref1380"></a>DBMS_SQL</code>, and <code><a id="sthref1381"></a>DBMS_TRANSACTION</code>.</p>
<p>Data Guard logical standby supports replication of actions performed through the following packages: <code>DBMS_RLS</code>, <code>DBMS_FGA</code>, and <code>DBMS_REDEFINITION</code>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDEBJEH"></a>
<div id="SBYDB4946" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">C.9.2</span> Unsupported PL/SQL Supplied Packages<a id="sthref1382"></a><a id="sthref1383"></a><a id="sthref1384"></a></h3>
<p>Oracle PL/SQL supplied packages that modify system metadata typically are not supported by SQL Apply, and therefore their effects are not visible on the logical standby database. Examples of such packages are <code><a id="sthref1385"></a>DBMS_JAVA</code>, <code><a id="sthref1386"></a>DBMS_REGISTRY</code>, <code><a id="sthref1387"></a>DBMS_ALERT</code>, <code><a id="sthref1388"></a>DBMS_SPACE_ADMIN</code>, <code><a id="sthref1389"></a>DBMS_REFRESH</code>, <code><a id="sthref1390"></a></code><code>and <a id="sthref1391"></a>DBMS_AQ</code>.</p>
<p>Specific support for <code>DBMS_JOB</code> has been provided. Jobs created on the primary database are replicated on the standby database, but will not be run as long as the standby maintains its standby role. In the event of a switchover or failover, jobs scheduled on the original primary database will automatically begin running on the new primary database.</p>
<p>You can also create jobs at the logical standby. These jobs will only run as long as the logical standby maintains it standby role.</p>
<p>Specific support for <code>DBMS_SCHEDULER</code> has been provided to allow jobs to be run on a standby database. A new attribute of a scheduler job has been created in 11<span class="italic">g</span> called <code>database_role</code> whose contents match the <code>database_role</code> attribute of <code>V$DATABASE</code>. When a scheduler job is created, it defaults to the local role (that is, a job created on the standby defaults to a <code>database_role</code> of <code>LOGICAL STANDBY</code>). The job scheduler executes only jobs specific to the current role. On switchover or failover, the scheduler automatically switches to running jobs specific to the new role.</p>
<p>Scheduler jobs are not replicated to the standby. However, existing jobs can be activated under the new role by using the <code>DBMS_SCHEDULER.Set_Attribute</code> procedure. Alternatively, jobs that should run in both roles can be cloned and the copy made specific to the other role. The <code>DBA_SCHEDULER_JOB_ROLES</code> view shows which jobs are specific to which role.</p>
<p>Scheduler jobs obey the database guard when they run on a logical standby database. Thus, in order to run jobs that need to modify unmaintained tables, the database guard should be set to <code>STANDBY</code>. (It is not possible to use the <code>ALTER SESSION DISABLE GUARD</code> statement inside a PL/SQL block and have it take effect.)</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS" href="../../appdev.112/e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for details about specific packages</div>
</div>
<!-- class="sect2" -->
<a id="BEHGGFFE"></a>
<div id="SBYDB4947" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">C.9.3</span> Handling XML and XDB PL/SQL Packages in Logical Standby</h3>
<p>In Oracle Database 11<span class="italic">g</span> release 1 (11.1), Logical Standby supports XML when it is stored in CLOB format. However, there are several PL/SQL packages used in conjunction with XML that are not fully supported.</p>
<p>The PL/SQL packages and procedures that are supported by Logical Standby only modify in-memory structures; they do not modify data stored in the database. These packages do not generate redo and therefore are not replicated to a Logical Standby.</p>
<p>Certain PL/SQL packages and procedures related to XML and XDB that are not supported by Logical Standby, but that require corresponding invocations at the logical standby database for replication activities to continue, are instrumented such that invocations of these procedures at the primary database will generate additional redo records indicating procedure invocation. When SQL Apply encounters such redo records, it stops and writes an error message in the <code>DBA_LOGSTDBY_EVENTS</code> table, indicating the procedure name. This allows the DBA to invoke the corresponding procedure at the logical standby database at the appropriate time so that subsequent redo records generated at the primary database can be applied successfully at the logical standby database. See <a href="#BEHJDJJJ">Section C.9.3.1</a> through <a href="#BEHCBEBG">Section C.9.3.6</a> for more information about dealing with these unsupported procedures.</p>
<p>The following packages contain unsupported procedures:</p>
<ul>
<li>
<p><code>DBMS_XMLSCHEMA</code></p>
</li>
<li>
<p><code>DBMS_XMLINDEX</code></p>
</li>
</ul>
<p>In addition to these packages, Logical Standby does not support any modifications to the XDB schema. The objects within the XDB schema are considered to be system metadata and direct modifications to them are not replicated.</p>
<p>Tables managed by the Oracle XML DB Repository, also known as hierarchy-enabled tables, are not supported by Logical Standby. These tables are used to store XML data and can be accessed using the FTP and HTTP protocols, as well as the normal SQL access. For more information on these tables, refer to the <a class="olink ADXDB" href="../../appdev.112/e23094/toc.htm"><span class="italic">Oracle XML DB Developer's Guide</span></a>.</p>
<a id="BEHJDJJJ"></a>
<div id="SBYDB4948" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">C.9.3.1</span> The DBMS_XMLSCHEMA Schema</h4>
<p>The following procedures within the DBMS_XMLSCHEMA package are unsupported and cannot be replicated by Logical Standby. Logical Standby stops when it encounters calls to these procedures to provide the user an opportunity to take a compensating action for these calls. Sections <a href="#BEHGCBFA">Section C.9.3.3</a> through <a href="#BEHCBEBG">Section C.9.3.6</a> provide more information on the alternatives available for dealing with these unsupported procedures.</p>
<ul>
<li>
<p><code>REGISTERSCHEMA</code></p>
</li>
<li>
<p><code>REGISTERURI</code></p>
</li>
<li>
<p><code>DELETESCHEMA</code></p>
</li>
<li>
<p><code>PURGESCHEMA</code></p>
</li>
<li>
<p><code>COPYEVOLVE</code></p>
</li>
<li>
<p><code>INPLACEEVOLVE</code></p>
</li>
<li>
<p><code>COMPILESCHEMA</code></p>
</li>
</ul>
<p>The XDB schema is an Oracle managed schema. Any changes to this schema are automatically skipped by Logical Standby. The following procedure makes changes to the XDB schema which will not be replicated:</p>
<ul>
<li>
<p><code>GENERATEBEAN</code></p>
</li>
</ul>
<p>The following procedures and functions do not generate redo and therefore do not stop Logical Standby:</p>
<ul>
<li>
<p><code>GENERATESCHEMAS</code></p>
</li>
<li>
<p><code>GENERATESCHEMA</code></p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="SBYDB4949" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1392"></a>
<h4 class="sect3"><span class="secnum">C.9.3.2</span> The DBMS_XMLINDEX Package</h4>
<p>The <code>SYNCINDEX</code> procedure within the <code>DBMS_XMLINDEX</code> package is marked as unsupported and cannot be replicated by Logical Standby. Logical Standby stops when it encounters calls to it.</p>
<p>The following functions and procedures do not generate redo and therefore do not stop Logical Standby:</p>
<ul>
<li>
<p><code>NODEREFGETREF</code></p>
</li>
<li>
<p><code>NODEREFGETVALUE</code></p>
</li>
<li>
<p><code>NODEREFGETPARENTREF</code></p>
</li>
<li>
<p><code>NODEREFGETNAME</code></p>
</li>
<li>
<p><code>NODEREFGETNAMESPACE</code></p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BEHGCBFA"></a>
<div id="SBYDB4950" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">C.9.3.3</span> Dealing With Unsupported PL/SQL Procedures</h4>
<p>There are a couple options for dealing with unsupported PL/SQL procedures. The first option is to allow the Logical Standby apply process to stop and to manually perform some compensating action. The second option is to take a preemptive action and to skip the unsupported PL/SQL either by using Logical Standby skip procedures. Each of these options is discussed in the following sections.</p>
</div>
<!-- class="sect3" -->
<div id="SBYDB4951" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1393"></a>
<h4 class="sect3"><span class="secnum">C.9.3.4</span> Manually Compensating for Unsupported PL/SQL</h4>
<p>When Logical Standby encounters something that is unsupported, it stops the apply process and records an error in the <code>DBA_LOGSTDBY_EVENTS</code> table. You can query this table to determine what action caused the standby to stop and what action, if any, needs to be taken to compensate.</p>
<p>The following example shows a sample of what this query and its output might look like:</p>
<pre>
select status, event from dba_logstdby_events
          where commit_scn &gt;= (select applied_scn from dba_logstdby_progress) and
          status_code = 16265
          order by commit_scn desc;
 
STATUS
--------------------------------------------------------------------------------
EVENT
--------------------------------------------------------------------------------
ORA-16265: Unsupported PL/SQL procedure encountered
begin
 "XDB"."DBMS_XMLSCHEMA"."REGISTERSCHEMA" (
   "SCHEMAURL" =&gt; 'xmlplsqlsch2
 
ORA-16265: Unsupported PL/SQL procedure encountered
begin
 "XDB"."DBMS_XMLSCHEMA"."REGISTERSCHEMA" (
   "SCHEMAURL" =&gt; 'xmlplsqlsch2
 
 
2 rows selected.
</pre>
<p>Two rows with the same information are returned because Logical Standby automatically retries the failed transaction. The results show that the standby was stopped when a call to <code>DBMS_XMLSCHEMA.REGISTERSCHEMA</code> was encountered for the <code>xmlplsqlsch2</code> schema. You can use this information to transfer any needed files from the primary and register the schema on the standby.</p>
<p>Once the schema has been successfully registered on the standby, the apply process on the Logical Standby can be restarted. This must be performed using the <code>SKIP FAILED TRANSACTION</code> option, for example:</p>
<pre>
alter database start logical standby apply skip failed transaction'
</pre>
<p>Logical Standby skips past the offending transaction and continues applying redo from the primary.</p>
<p>The general procedure for manually replicating unsupported PL/SQL follows these steps:</p>
<ol>
<li>
<p>Some unsupported PL/SQL is executed on the primary database.</p>
</li>
<li>
<p>The standby database encounters the unsupported PL/SQL and stops Apply.</p>
</li>
<li>
<p>You examine the <code>DBA_LOGSTDBY_EVENTS</code> table to determine what caused Apply to stop.</p>
</li>
<li>
<p>You execute some compensating actions on the standby for the unsupported PL/SQL.</p>
</li>
<li>
<p>You restart apply on the standby.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div id="SBYDB4952" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1394"></a>
<h4 class="sect3"><span class="secnum">C.9.3.5</span> Proactively Compensating for Unsupported PL/SQL</h4>
<p>In certain cases, you know that an action you are going to perform on the primary database will cause the standby to halt. In those cases, you may want to take action ahead of time to either minimize or eliminate the time that the standby is not applying redo.</p>
<p>For example, suppose you know that a new application is going to be installed. Part of the installation requires a large number of XML schemas to be registered. You can register these schemas on the standby before they are registered on the primary. You can also install a skip procedure on the standby for the <code>DBMS_XMLSCHEMA.REGISTERSCHEMA</code> procedure which will check to see if the XML schema is registered and if so, it will tell Logical Standby to skip that PL/SQL call.</p>
<p>This approach can also be used for some of the other PL/SQL procedures that are unsupported. For example, <code>DBMS_XMLSCHEMA.DELETESCHEMA</code> can be handled in a similar way. A skip procedure can be written to see if the schema is installed on the standby and if it is not, then that PL/SQL can be safely skipped because it would not have had any meaningful affect on the standby.</p>
</div>
<!-- class="sect3" -->
<a id="BEHCBEBG"></a>
<div id="SBYDB4953" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">C.9.3.6</span> Compensating for Ordering Sensitive Unsupported PL/SQL</h4>
<p>Although the previous approach is useful, it cannot be used in all cases. It can only be safely used when the time that the PL/SQL is executed relative to other transactions is not critical. One case that this should not be used for is that of <code>DBMS_XMLSCHEMA.copyEvolve</code>.</p>
<p>This procedure evolves, or changes, a schema and can modify tables by adding and or removing columns and it can also change whether or not XML documents are valid. The timing of when this procedure should be executed on the Logical Standby is critical. The only time guaranteed to be safe is when apply has stopped on the Logical Standby when it sees that this procedure was executed on the primary database.</p>
<p>Before evolving a schema, it is also important to quiesce any traffic on the primary that may be using the schema. Otherwise, a transaction that is executed close in time to the evolveSchema on the primary may be executed in a different order on the Logical Standby because the dependency between the two transactions is not apparent to the Logical Standby. Therefore, when ordering sensitive PL/SQL is involved, you should follow these steps:</p>
<ol>
<li>
<p>Quiesce changes to dependent tables on the primary.</p>
</li>
<li>
<p>Execute the CopyEvolve on the primary.</p>
</li>
<li>
<p>Wait for the standby to stop on the CopyEvolve PL/SQL.</p>
</li>
<li>
<p>Apply the compensating CopyEvolve on the standby.</p>
</li>
<li>
<p>Restart apply on the standby.</p>
</li>
</ol>
<p><a href="#BEHEAFGB">Example C-1</a> shows a sample of the procedures that could be used to determine how to handle RegisterSchema calls.</p>
<div id="SBYDB5096" class="example">
<p class="titleinexample"><a id="BEHEAFGB"></a>Example C-1 PL/SQL Skip Procedure for RegisterSchema</p>
<pre>
-- Procedures to determine how to handle registerSchema calls
 
-- This procedure extracts the schema URL, or name, from the statement
-- string that is passed into the skip procedure.
 
Create or replace procedure sec_mgr.parse_schema_str(
  statement             in varchar2,
  schema_name      out varchar2)
Is
  pos1 number;
  pos2 number;
  workingstr   varchar2(32767);
Begin
 
-- Find the correct argument
pos1 := instr(statement, '"SCHEMAURL" =&gt; ''');
workingstr := substr(statement, pos1 + 16);
 
-- Find the end of the schema name
pos1 := instr(workingstr, '''');
 
-- Get just the schema name
workingstr := substr(workingstr, 1, pos1 - 1);
 
schema_name := workingstr;
 
End parse_schema_str;
/
show errors
 
 
-- This procedure checks if a schema is already registered. If so,
-- it returns the value DBMS_LOGSTDBY.SKIP_ACTION_SKIP to indicate that
-- the PL/SQL should be skipped. Otherwise, the value 
-- DBMS_LOGSTDBY.SKIP_ACTION_SKIP is returned and Logical Standby apply 
-- will halt to allow the DBA to deal with the registerSchema call.
 
Create or replace procedure sec_mgr.skip_registerschema(
  statement             in varchar2,
  package_owner            in varchar2,
  package_name             in varchar2,
  procedure_name                 in varchar2,
  current_user                   in varchar2,
  xidusn                in number,
  xidslt                in number,
  xidsqn                in number, 
  exit_status            in number, 
  skip_action            out number)
Is
  schema_exists number;
  schemastr varchar2(2000);
Begin
 
  skip_action := DBMS_LOGSTDBY.SKIP_ACTION_SKIP;
 
  -- get the schame name from statement
  parse_schema_str(statement, schemastr);
 
  -- see if the schema is already registered
  select count(*) into schema_exists from sys.all_xml_schemas s 
                                     where s.schema_url = schemastr and
                                           s.owner = current_user;
 
  IF schema_exists = 0 THEN
      -- if the schema is not  registered, then we must stop apply
      skip_action := DBMS_LOGSTDBY.SKIP_ACTION_APPLY;     
  ELSE
      -- if the schema is already registered, then we can skip this statement
      skip_action := DBMS_LOGSTDBY.SKIP_ACTION_SKIP;     
  END IF;
 
End skip_registerschema;
/
show errors
 
-- Register the skip procedure to deal with the unsupported registerSchema 
-- PL/SQL.
Begin
   sys.dbms_logstdby.skip(stmt =&gt; 'PL/SQL', 
        schema_name =&gt; 'XDB', 
                                        object_name   =&gt; 'DBMS_XMLSCHEMA.REGISTERSCHEMA', 
                                        proc_name     =&gt; 'SEC_MGR.SKIP_REGISTERSCHEMA',
        use_like         =&gt; FALSE );
                  End;
    /
show errors
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i637080"></a>
<div id="SBYDB4954" class="sect1">
<h2 class="sect1"><span class="secnum">C.10</span> Unsupported Tables<a id="sthref1395"></a><a id="sthref1396"></a></h2>
<p>It is important to identify unsupported database objects on the primary database before you create a logical standby database because changes made to unsupported data types and tables on the primary database will be automatically skipped by SQL Apply on the logical standby database. Moreover, no error message will be returned.</p>
<p>There are three types of objects on a database, from the perspective of logical standby support:</p>
<ul>
<li>
<p>Objects that are explicitly maintained by SQL Apply</p>
</li>
<li>
<p>Objects that are implicitly maintained by SQL Apply</p>
</li>
<li>
<p>Objects that are not maintained by SQL Apply</p>
</li>
</ul>
<p>Some schemas that ship with the Oracle database (for example, <code>SYSTEM</code>) contain objects that will be implicitly maintained by SQL Apply. However, if you put a user-defined table in <code>SYSTEM</code>, it will not be maintained even if it has columns of supported data types. To discover which objects are not maintained by SQL Apply, you must run two queries. The first query is as follows:</p>
<pre>
SQL&gt; SELECT OWNER FROM DBA_LOGSTDBY_SKIP WHERE STATEMENT_OPT = 'INTERNAL SCHEMA';
</pre>
<p>This will return all schemas that are considered to be internal. User tables placed in these schemas will not be replicated on a logical standby database and will not show up in the <code>DBA_LOGSTDBY_UNSUPPORTED</code> view. Tables in these schemas that are created by Oracle will be maintained on a logical standby, if the feature implemented in the schema is supported in the context of logical standby.</p>
<p>The second query you must run is as follows. It returns tables that do not belong to internal schemas and will not be maintained by SQL Apply because of unsupported data types:</p>
<pre>
SQL&gt; SELECT DISTINCT OWNER,TABLE_NAME FROM DBA_LOGSTDBY_UNSUPPORTED -
&gt; ORDER BY OWNER,TABLE_NAME;

OWNER        TABLE_NAME
-----------  --------------------------
HR           COUNTRIES
OE           ORDERS
OE           CUSTOMERS
OE           WAREHOUSES
</pre>
<p>To view the column names and data types for one of the tables listed in the previous query, use a <code>SELECT</code> statement similar to the following:</p>
<pre>
SQL&gt; SELECT COLUMN_NAME,DATA_TYPE FROM DBA_LOGSTDBY_UNSUPPORTED -
&gt; WHERE OWNER='OE' AND TABLE_NAME = 'CUSTOMERS';

COLUMN_NAME                      DATA_TYPE
-------------------------------  -------------------
CUST_ADDRESS                     CUST_ADDRESS_TYP
PHONE_NUMBERS                    PHONE_LIST_TYP
CUST_GEO_LOCATION                SDO_GEOMETRY
</pre>
<p>If the primary database contains unsupported tables, SQL Apply automatically excludes these tables when applying redo data to the logical standby database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you determine that the critical tables in your primary database will not be supported on a logical standby database, then you might want to consider using a physical standby database. Physical standby databases do not have any such data type restrictions.</div>
</div>
<!-- class="sect1" -->
<a id="CHDFIDDI"></a>
<div id="SBYDB4955" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">C.11</span> S<a id="sthref1397"></a>kipped SQL Statements on a Logical Standby Database</h2>
<p><a id="sthref1398"></a>By default, the following SQ<a id="sthref1399"></a><a id="sthref1400"></a>L statements are automatically skipped by SQL Apply:</p>
<br />
<code>ALTER DATABASE</code><br />
<code>ALTER MATERIALIZED VIEW</code><br />
<code>ALTER MATERIALIZED VIEW LOG</code><br />
<code>ALTER SESSION</code><br />
<code>ALTER SYSTEM</code><br />
<code>CREATE CONTROL FILE</code><br />
<code>CREATE DATABASE</code><br />
<code>CREATE DATABASE LINK</code><br />
<code>CREATE PFILE FROM SPFILE</code><br />
<code>CREATE MATERIALIZED VIEW</code><br />
<code>CREATE MATERIALIZED VIEW LOG</code><br />
<code>CREATE SCHEMA AUTHORIZATION</code><br />
<code>CREATE SPFILE FROM PFILE</code><br />
<code>DROP DATABASE LINK</code><br />
<code>DROP MATERIALIZED VIEW</code><br />
<code>DROP MATERIALIZED VIEW LOG</code><br />
<code>EXPLAIN</code><br />
<code>LOCK TABLE</code><br />
<code>SET CONSTRAINTS</code><br />
<code>SET ROLE</code><br />
<code>SET TRANSACTION</code><br />
<p>All other SQL statements executed on the primary database are applied to the logical standby database.</p>
</div>
<!-- class="sect1" -->
<a id="CHDEAGBF"></a>
<div id="SBYDB4956" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">C.12</span> DDL Statements Supported by a Logical Standby Databas<a id="sthref1401"></a>e</h2>
<p><a href="#BABGCFCA">Table C-1</a> lists the supported values for the <code>stmt</code> parameter of the <code>DBMS_LOGSTDBY.SKIP</code> procedure. The left column of the table lists the keywords that may be used to identify the set of SQL statements to the right of the keyword. In addition, any of the SQL statements listed in the <code>sys.audit_actions</code> table (shown in the right column of Table 1-13) are also valid values. Note that keywords are generally defined by database object.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS" href="../../appdev.112/e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for complete information about the <a class="olink ARPLS363" href="../../appdev.112/e40758/d_lsbydb.htm#ARPLS363"><code>DBMS_LOGSTDBY</code></a> package and <a href="manage_ls.htm#CHDCGBAJ">Section 10.5.3, "Setting up a Skip Handler for a DDL Statement"</a></div>
<div id="SBYDB5097" class="tblformal">
<p class="titleintable"><a id="sthref1402"></a><a id="BABGCFCA"></a>Table C-1 Values for stmt Parameter of the DBMS_LOGSTDBY.SKIP procedure</p>
<table class="cellalignment1825" title="Values for stmt Parameter of the DBMS_LOGSTDBY.SKIP procedure" summary="Lists optional keywords for the SKIP statement." >
<thead>
<tr class="cellalignment1814">
<th class="cellalignment1824" id="r1c1-t11">Keyword</th>
<th class="cellalignment1824" id="r1c2-t11">Associated SQL Statements</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r2c1-t11" headers="r1c1-t11">
<p>There is no keyword for this group of SQL statements.</p>
</td>
<td class="cellalignment1820" headers="r2c1-t11 r1c2-t11">
<pre>
GRANT
REVOKE
ANALYZE TABLE
ANALYZE INDEX
ANALYZE CLUSTER
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r3c1-t11" headers="r1c1-t11">
<p><code>CLUSTER</code></p>
</td>
<td class="cellalignment1820" headers="r3c1-t11 r1c2-t11">
<pre>
AUDIT CLUSTER
CREATE CLUSTER
DROP CLUSTER
TRUNCATE CLUSTER
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r4c1-t11" headers="r1c1-t11">
<p><code>CONTEXT</code></p>
</td>
<td class="cellalignment1820" headers="r4c1-t11 r1c2-t11">
<pre>
CREATE CONTEXT
DROP CONTEXT
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r5c1-t11" headers="r1c1-t11">
<p><code>DATABASE LINK</code></p>
</td>
<td class="cellalignment1820" headers="r5c1-t11 r1c2-t11">
<pre>
CREATE DATABASE LINK
CREATE PUBLIC DATABASE LINK
DROP DATABASE LINK
DROP PUBLIC DATABASE LINK
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r6c1-t11" headers="r1c1-t11">
<p><code>DIMENSION</code></p>
</td>
<td class="cellalignment1820" headers="r6c1-t11 r1c2-t11">
<pre>
ALTER DIMENSION
CREATE DIMENSION
DROP DIMENSION
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r7c1-t11" headers="r1c1-t11">
<p><code>DIRECTORY</code></p>
</td>
<td class="cellalignment1820" headers="r7c1-t11 r1c2-t11">
<pre>
CREATE DIRECTORY
DROP DIRECTORY
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r8c1-t11" headers="r1c1-t11">
<p><code>DML</code></p>
</td>
<td class="cellalignment1820" headers="r8c1-t11 r1c2-t11">
<p>Includes DML statements on a table (for example: <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code>)</p>
</td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r9c1-t11" headers="r1c1-t11">
<p><code>INDEX</code></p>
</td>
<td class="cellalignment1820" headers="r9c1-t11 r1c2-t11">
<pre>
ALTER INDEX
CREATE INDEX
DROP INDEX
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r10c1-t11" headers="r1c1-t11">
<p><code>NON_SCHEMA_DDL</code></p>
</td>
<td class="cellalignment1820" headers="r10c1-t11 r1c2-t11">
<p><span class="italic">All DDL that does not pertain to a particular schema</span></p>
<p><span class="bold">Note:</span> <code>SCHEMA_NAME</code> and <code>OBJECT_NAME</code> must be null</p>
</td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r11c1-t11" headers="r1c1-t11">
<p><code>PROCEDURE</code><a id="sthref1403" href="#sthref1403" onclick='footdisplay(1,"Java schema objects (sources, classes, and resources) are considered the same as procedures for purposes of skipping (ignoring) SQL statements.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment1820" headers="r11c1-t11 r1c2-t11">
<pre>
ALTER FUNCTION
ALTER PACKAGE
ALTER PACKAGE BODY
ALTER PROCEDURE
CREATE FUNCTION
CREATE LIBRARY
CREATE PACKAGE
CREATE PACKAGE BODY
CREATE PROCEDURE
DROP FUNCTION
DROP LIBRARY
DROP PACKAGE
DROP PACKAGE BODY
DROP PROCEDURE
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r12c1-t11" headers="r1c1-t11">
<p><code>PROFILE</code></p>
</td>
<td class="cellalignment1820" headers="r12c1-t11 r1c2-t11">
<pre>
ALTER PROFILE
CREATE PROFILE
DROP PROFILE
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r13c1-t11" headers="r1c1-t11">
<p><code>PUBLIC DATABASE LINK</code></p>
</td>
<td class="cellalignment1820" headers="r13c1-t11 r1c2-t11">
<pre>
CREATE PUBLIC DATABASE LINK
DROP PUBLIC DATABASE LINK
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r14c1-t11" headers="r1c1-t11">
<p><code>PUBLIC SYNONYM</code></p>
</td>
<td class="cellalignment1820" headers="r14c1-t11 r1c2-t11">
<pre>
CREATE PUBLIC SYNONYM
DROP PUBLIC SYNONYM
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r15c1-t11" headers="r1c1-t11">
<p><code>ROLE</code></p>
</td>
<td class="cellalignment1820" headers="r15c1-t11 r1c2-t11">
<pre>
ALTER ROLE
CREATE ROLE
DROP ROLE
SET ROLE
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r16c1-t11" headers="r1c1-t11">
<p><code>ROLLBACK SEGMENT</code></p>
</td>
<td class="cellalignment1820" headers="r16c1-t11 r1c2-t11">
<pre>
ALTER ROLLBACK SEGMENT
CREATE ROLLBACK SEGMENT
DROP ROLLBACK SEGMENT
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r17c1-t11" headers="r1c1-t11">
<p><code>SCHEMA_DDL</code></p>
</td>
<td class="cellalignment1820" headers="r17c1-t11 r1c2-t11">
<p><span class="italic">All DDL statements that create, modify, or drop schema objects (for example: tables, indexes, and columns)</span></p>
<p><span class="bold">Note:</span> <code>SCHEMA_NAME</code> and <code>OBJECT_NAME</code> must <span class="italic">not</span> be null</p>
</td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r18c1-t11" headers="r1c1-t11">
<p><code>SEQUENCE</code></p>
</td>
<td class="cellalignment1820" headers="r18c1-t11 r1c2-t11">
<pre>
ALTER SEQUENCE
CREATE SEQUENCE
DROP SEQUENCE
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r19c1-t11" headers="r1c1-t11">
<p><code>SYNONYM</code></p>
</td>
<td class="cellalignment1820" headers="r19c1-t11 r1c2-t11">
<pre>
CREATE PUBLIC SYNONYM
CREATE SYNONYM
DROP PUBLIC SYNONYM
DROP SYNONYM
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r20c1-t11" headers="r1c1-t11">
<p><code>SYSTEM AUDIT</code></p>
</td>
<td class="cellalignment1820" headers="r20c1-t11 r1c2-t11">
<pre>
AUDIT <span class="variable">SQL_statements</span>
NOAUDIT <span class="variable">SQL_statements</span>
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r21c1-t11" headers="r1c1-t11">
<p><code>TABLE</code></p>
</td>
<td class="cellalignment1820" headers="r21c1-t11 r1c2-t11">
<pre>
CREATE TABLE
ALTER TABLE
DROP TABLE
TRUNCATE TABLE
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r22c1-t11" headers="r1c1-t11">
<p><code>TABLESPACE</code></p>
</td>
<td class="cellalignment1820" headers="r22c1-t11 r1c2-t11">
<pre>
CREATE TABLESPACE
DROP TABLESPACE
ALTER TABLESPACE
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r23c1-t11" headers="r1c1-t11">
<p><code>TRIGGER</code></p>
</td>
<td class="cellalignment1820" headers="r23c1-t11 r1c2-t11">
<pre>
ALTER TRIGGER
CREATE TRIGGER
DISABLE ALL TRIGGERS
DISABLE TRIGGER
DROP TRIGGER
ENABLE ALL TRIGGERS
ENABLE TRIGGER
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r24c1-t11" headers="r1c1-t11">
<p><code>TYPE</code></p>
</td>
<td class="cellalignment1820" headers="r24c1-t11 r1c2-t11">
<pre>
ALTER TYPE
ALTER TYPE BODY
CREATE TYPE
CREATE TYPE BODY
DROP TYPE
DROP TYPE BODY
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r25c1-t11" headers="r1c1-t11">
<p><code>USER</code></p>
</td>
<td class="cellalignment1820" headers="r25c1-t11 r1c2-t11">
<pre>
ALTER USER
CREATE USER
DROP USER
</pre></td>
</tr>
<tr class="cellalignment1814">
<td class="cellalignment1820" id="r26c1-t11" headers="r1c1-t11">
<p><code>VIEW</code></p>
</td>
<td class="cellalignment1820" headers="r26c1-t11 r1c2-t11">
<pre>
CREATE VIEW
DROP VIEW
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>Java schema objects (sources, classes, and resources) are considered the same as procedures for purposes of skipping (ignoring) SQL statements.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The following sections that provide usage examples of the <code>SKIP</code> and <code>UNSKIP</code> options:
<ul>
<li>
<p><a href="manage_ls.htm#CHDGBCJG">Section 10.5.2, "Using DBMS_LOGSTDBY.SKIP to Prevent Changes to Specific Schema Objects"</a></p>
</li>
<li>
<p><a href="manage_ls.htm#CHDCGBAJ">Section 10.5.3, "Setting up a Skip Handler for a DDL Statement"</a></p>
</li>
<li>
<p><a href="manage_ls.htm#i1045623">Section 10.5.4, "Modifying a Logical Standby Database"</a></p>
</li>
<li>
<p><a href="manage_ls.htm#i1016645">Section 10.5.5, "Adding or Re-Creating Tables On a Logical Standby Database"</a></p>
</li>
</ul>
</div>
<div id="SBYDB4957" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1404"></a>
<h3 class="sect2"><span class="secnum">C.12.1</span> DDL Statements that Use DBLINKS</h3>
<p>SQL Apply<a id="sthref1405"></a> may not correctly apply DDL statements such as the following, that reference a database link:</p>
<pre>
CREATE TABLE <span class="italic">tablename</span> AS SELECT * FROM <span class="italic">bar</span>@<span class="italic">dblink</span>
</pre>
<p>This is because the <code><span class="codeinlineitalic">dblink</span></code> at the logical standby database may not point to the same database as the primary database. If SQL Apply fails while executing such a DDL statement, you should use the <code>DBMS_LOGSTDBY.INSTANTIATE_TABLE</code> procedure for the table being created, and then restart SQL APPLY operations.</p>
</div>
<!-- class="sect2" -->
<a id="CHDCDDJA"></a>
<div id="SBYDB4958" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">C.12.2</span> Replication of AUD$ and FGA_LOG$ on Logical Standbys</h3>
<p>Auditing and fine-grained auditing are supported on logical standbys. Changes<a id="sthref1406"></a><a id="sthref1407"></a> made to the <code>AUD$</code> and <code>FGA_AUD$</code> tables at the primary database are replicated at the logical standby.</p>
<p>Both the <code>AUD$</code> table and the <code>FGA_AUD$</code> table have a DBID column. If the DBID value is that of the primary database, then the row was replicated to the logical standby based on activities at the primary. If the DBID value is that of the logical standby database, then the row was inserted as a result of local activities at the logical standby.</p>
<p>After the logical standby database assumes the primary role as a result of a role transition (either a switchover or failover), the <code>AUD$</code> and <code>FGA_AUD$</code> tables at the <span class="italic">new primary</span> (originally the logical standby) and at the <span class="italic">new logical standby</span> (originally the primary) are not necessarily synchronized. Therefore, it is possible that not all rows in the <code>AUD$</code> or <code>FGA_AUD$</code> tables at the new primary database will be present in the new logical standby database. However, all rows in <code>AUD$</code> and <code>FGA_LOG$</code> that were inserted while the database was in a primary role are replicated and present in the logical standby database.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDIGCFH"></a>
<div id="SBYDB4959" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">C.13</span> Distributed transactions and XA Support</h2>
<p>You can perform distributed transactions<a id="sthref1408"></a> using either of the following methods:</p>
<ul>
<li>
<p>Modify tables in multiple databases in a coordinated manner using database links.</p>
</li>
<li>
<p>Use the XA interface, as exposed by the <code>DBMS_XA</code> package in supplied PL/SQL packages or via OCI or JDBC libraries. The XA interface implements X/Open Distributed Transaction Processing (DTP) architecture.</p>
</li>
</ul>
<p>Changes made to the primary database during a distributed transaction using either of these two methods are replicated to the logical standby database.</p>
<p>However, the distributed transaction state is not replicated. The logical standby database does not inherit the in-doubt or prepared state of such a transaction, and it does not replicate the changes using the same global transaction identifier used at the primary database for the XA transactions. As a result, if you fail over to a logical standby database before committing a distributed transaction, the changes are rolled back at the logical standby. This rollback occurs even if the distributed transaction on the primary database is in a prepared state and has successfully completed the first phase of the two-phased commit protocol. Switchover operations wait for all active distributed transactions to complete, and are not affected by this restriction.</p>
<p>XA transactions can be performed in two ways:</p>
<ul>
<li>
<p>tightly coupled, where different XA branches share locks</p>
</li>
<li>
<p>loosely coupled, where different XA branches do not share locks</p>
</li>
</ul>
<p>Replication of changes made by loosely coupled XA branches is supported regardless of the <code>COMPATIBLE</code> parameter value. Replication of changes made by tightly coupled branches on an Oracle RAC primary (introduced in 11g Release 1) is supported only with <code>COMPATIBLE=11.2</code> or higher.</p>
</div>
<!-- class="sect1" -->
<a id="CHDIEIIJ"></a>
<div id="SBYDB5120" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">C.14</span> Support for SecureFiles LOBs</h2>
<p>SecureFiles LOBs are supported when the database compatibility level is set to 11.2 or higher.</p>
<p>Transparent data encryption and data compression can be enabled on SecureFiles LOB columns at the primary database. De-duplication of SecureFiles LOB columns is not supported. Also, the following operations contained within the <code>DBMS_LOB</code> PL/SQL package are not supported on SecureFiles LOB columns:</p>
<p><code>FRAGMENT_DELETE</code>, <code>FRAGMENT_INSERT</code>, <code>FRAGMENT_MOVE</code>, <code>FRAGMENT_REPLACE</code>, <code>COPY_FROM_DBFS_LINK</code>, <code>MOVE_TO_DBFS_LINK</code>, <code>SET_DBFS_LINK</code>, <code>COPY_DBFS_LINK</code>, <code>SETCONTENTTYPE</code></p>
<p>If SQL Apply encounters redo generated by any of these operations, it stops with an <code>ORA-16211: Unsupported record found in the archived redo log</code> error. To continue, add a skip rule for the affected table using <code>DBMS_LOGSTDBY.SKIP</code> and restart SQL Apply.</p>
</div>
<!-- class="sect1" -->
<a id="CHDCFHEB"></a>
<div id="SBYDB5121" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">C.15</span> Character Set Considerations<a id="sthref1409"></a></h2>
<p>Configurations are not supported in which the primary database and standby database have different character sets.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="appendix" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1813">
<tr>
<td class="cellalignment1820">
<table class="cellalignment1818">
<tr>
<td class="cellalignment1817"><a href="upgrades.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1817"><a href="rac_support.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1822">
<table class="cellalignment1816">
<tr>
<td class="cellalignment1817"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1817"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1817"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1817"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1817"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1817"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
