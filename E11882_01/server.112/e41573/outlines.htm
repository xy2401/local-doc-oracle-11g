<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using Plan Stability</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023" />
<meta name="dcterms.created" content="2014-06-30T4:25:7Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Performance Tuning Guide" />
<meta name="dcterms.identifier" content="E41573-04" />
<meta name="dcterms.isVersionOf" content="PFGRF" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="hintsref.htm" title="Previous" type="text/html" />
<link rel="Next" href="sqltrace.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e41573.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">28/31</span> <!-- End Header -->
<div id="PFGRF707" class="chapter"><a id="g35579"></a>
<h1 class="chapter"><span class="secnum">20</span> Using Plan Stability</h1>
<p>This chapter describes how to use plan stability to preserve performance characteristics. Plan stability also facilitates migration from the rule-based optimizer to the query optimizer when you upgrade to a new Oracle Database release.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#i29475">Using Plan Stability to Preserve Execution Plans</a></p>
</li>
<li>
<p><a href="#i29159">Using Plan Stability with Query Optimizer Upgrades</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Stored outlines will be desupported in a future release in favor of SQL plan management. In Oracle Database 11<span class="italic">g</span>, stored outlines continue to function as in past releases. However, Oracle strongly recommends that you use SQL plan management for new applications. SQL plan management creates SQL plan baselines, which offer superior SQL performance and stability compared with stored outlines.
<p>If you have existing stored outlines, then consider migrating them to SQL plan baselines by following the steps in <a href="optplanmgmt.htm#BABFCFHC">"Migrating Stored Outlines to SQL Plan Baselines"</a>. When the migration is complete, disable or remove the stored outlines.</p>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="optplanmgmt.htm#BABEAFGG">Chapter 15, "Using SQL Plan Management"</a> for information about SQL plan management</p>
</li>
<li>
<p><a class="olink ARPLS150" href="../../appdev.112/e40758/d_spm.htm#ARPLS150"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code>DBMS_SPM</code> package</p>
</li>
<li>
<p><a class="olink DBLIC116" href="../../license.112/e47877/editions.htm#DBLIC116"><span class="italic">Oracle Database Licensing Information</span></a> to determine whether your database edition includes SQL Plan Management</p>
</li>
</ul>
</div>
<a id="i29475"></a>
<div id="PFGRF70701" class="sect1">
<h2 class="sect1"><span class="secnum">20.1</span> Using Plan Stability to Preserve Execution Plans</h2>
<p><a id="sthref1499"></a><a id="sthref1500"></a>Plan stability prevents certain database environment changes from affecting the performance characteristics of applications. Such changes include changes in optimizer statistics, changes to the optimizer mode settings, and changes to parameters affecting the sizes of memory structures, such as <code>SORT_AREA_SIZE</code> and <code>BITMAP_MERGE_AREA_SIZE</code>. Plan stability is most useful when you cannot risk any performance changes in an application.</p>
<p><a id="sthref1501"></a><a id="sthref1502"></a><a id="sthref1503"></a>Plan stability preserves execution plans in stored outlines. An <a id="sthref1504"></a>outline is implemented as a set of optimizer hints that are associated with the SQL statement. If the use of the outline is enabled for the statement, then Oracle Database automatically considers the stored hints and tries to generate an execution plan in accordance with those hints.</p>
<p>Oracle Database can create a public or private stored outline for one or all SQL statements. The optimizer then generates equivalent execution plans from the outlines when you enable the use of stored outlines. You can group outlines into categories and control which category of outlines Oracle Database uses to simplify outline administration and deployment.</p>
<p>The plans that Oracle Database maintains in <a id="sthref1505"></a>stored <a id="sthref1506"></a>outlines remain consistent despite changes to a system's configuration or statistics. Using stored outlines also stabilizes the generated execution plan if the optimizer changes in subsequent Oracle Database releases.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
If you develop applications for mass distribution, then you can use stored outlines to ensure that all customers access the same execution plans.</div>
<a id="i30836"></a>
<div id="PFGRF94956" class="sect2">
<h3 class="sect2"><span class="secnum">20.1.1</span> Using Hints with Plan Stability</h3>
<p><a id="sthref1507"></a>The degree to which <a id="sthref1508"></a>plan stability controls execution plans is dictated by how much the Oracle Database hint mechanism controls execution plans, because Oracle Database uses hints to record stored plans.</p>
<p>There is a one-to-one correspondence between SQL text and its stored outline. If you specify a different literal in a predicate, then a different outline applies. To avoid this situation, replace literals in applications with bind variables.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
Oracle Database can allow similar statements to share SQL by replacing literals with system-generated bind variables. This works with plan stability if the outline was generated using the <code>CREATE_STORED_OUTLINES</code> parameter, not the <code>CREATE</code> <code>OUTLINE</code> statement. Also, the outline must have been created with the <code>CURSOR_SHARING</code> parameter set to <code>FORCE</code>, and the parameter must also set to <code>FORCE</code> when attempting to use the outline. See <a href="memory.htm#g77696">Chapter 7, "Configuring and Using Memory"</a> for more information.</div>
<p>Plan stability relies on preserving execution plans at a point in time when performance is satisfactory. In many environments, however, attributes for data types such as <code>dates</code> or <code>order numbers</code> can change rapidly. In these cases, permanent use of an execution plan can result in performance degradation over time as the data characteristics change.</p>
<p>This implies that techniques that rely on preserving plans in dynamic environments are somewhat contrary to the purpose of using query optimization. Query optimization attempts to produce execution plans based on statistics that accurately reflect the state of the data. Thus, you must balance the need to control plan stability with the benefit obtained from the optimizer's ability to adjust to changes in data characteristics.</p>
<div id="PFGRF94957" class="sect3"><a id="sthref1509"></a>
<h4 class="sect3"><span class="secnum">20.1.1.1</span> How Outlines Use Hints</h4>
<p>An outline consists primarily of a set of <a id="sthref1510"></a><a id="sthref1511"></a><a id="sthref1512"></a>hints that is equivalent to the optimizer's results for the execution plan generation of a particular SQL statement. When Oracle Database creates an outline, plan stability examines the optimization results using the same data used to generate the execution plan. That is, Oracle Database uses the input to the execution plan to generate an outline, and not the execution plan itself.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle Database creates the <code>USER_OUTLINES</code> and <code>USER_OUTLINE_HINTS</code> views in the <code>SYS</code> tablespace based on data in the <code>OL$</code> and <code>OL$HINTS</code> tables, respectively. Direct manipulation of the <code>OL$</code>, <code>OL$HINTS</code>, and <code>OL$NODES</code> tables is prohibited.
<p>You can embed hints in SQL statements, but this has no effect on how Oracle Database uses outlines. Oracle Database considers a SQL statement that you revised with hints to be different from the original SQL statement stored in the outline.</p>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="PFGRF94958" class="sect2"><a id="sthref1513"></a>
<h3 class="sect2"><span class="secnum">20.1.2</span> Storing Outlines</h3>
<p><a id="sthref1514"></a><a id="sthref1515"></a>Oracle Database stores outline data in the <code>OL$</code>, <code>OL$HINTS</code>, and <code>OL$NODES</code> tables. Unless you remove them, Oracle Database retains outlines indefinitely.</p>
<p>The only effect outlines have on caching execution plans is that the database uses the outline category name in addition to the SQL text to determine whether the plan is in cache. This ensures that Oracle Database does not use an execution plan compiled under one category to execute a SQL statement that the database should compile under a different category.</p>
</div>
<!-- class="sect2" -->
<div id="PFGRF94959" class="sect2"><a id="sthref1516"></a>
<h3 class="sect2"><span class="secnum">20.1.3</span> Enabling Plan Stability</h3>
<p>Settings for several parameters, especially those ending with the suffix <code>_ENABLED</code>, must be consistent across execution environments for outlines to function properly. These parameters are:</p>
<ul>
<li>
<p><code>QUERY_REWRITE_ENABLED</code></p>
</li>
<li>
<p><code>STAR_TRANSFORMATION_ENABLED</code></p>
</li>
<li>
<p><code>OPTIMIZER_FEATURES_ENABLE</code></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i26856"></a>
<div id="PFGRF70711" class="sect2">
<h3 class="sect2"><span class="secnum">20.1.4</span> Using Supplied Packages to Manage Stored Outlines</h3>
<p>The <code><a id="sthref1517"></a>DBMS_OUTLN</code> and <code><a id="sthref1518"></a>DBMS_OUTLN_EDIT</code> package provides procedures used for managing stored outlines and their outline categories.</p>
<p>Users need the <code>EXECUTE_CATALOG_ROLE</code> role to execute <code>DBMS_OUTLN</code>, but public has execute privileges on <code>DBMS_OUTLN_EDIT</code>. The <code>DBMS_OUTLN_EDIT</code> package is an invoker's rights package.</p>
<p>Some of the useful <code>DBMS_OUTLN</code> and <code>DBMS_OUTLN_EDIT</code> procedures are:</p>
<ul>
<li>
<p><code>CLEAR_USED</code> - Clears specified outline</p>
</li>
<li>
<p><code>DROP_BY_CAT</code> - Drops outlines that belong to a specified category</p>
</li>
<li>
<p><code>UPDATE_BY_CAT</code> - Changes the category of outlines in one specified category to a new specified category</p>
</li>
<li>
<p><code>EXACT_TEXT_SIGNATURES</code> - Computes an outline signature according to an exact text matching scheme</p>
</li>
<li>
<p><code>GENERATE_SIGNATURE</code> - Generates a signature for the specified SQL text</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS034" href="../../appdev.112/e40758/d_outln.htm#ARPLS034"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information on using <code>DBMS_OUTLN</code> package procedures</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i13515"></a>
<div id="PFGRF94960" class="sect2">
<h3 class="sect2"><span class="secnum">20.1.5</span> Creating Outlines</h3>
<p><a id="sthref1519"></a>Oracle Database can automatically create outlines for all SQL statements, or you can create them for specific SQL statements. In either case, the outlines derive their input from the optimizer.</p>
<p><a id="sthref1520"></a>Oracle Database creates stored outlines automatically when you set the initialization parameter <code><a id="sthref1521"></a><a id="sthref1522"></a>CREATE_STORED_OUTLINES</code> to <code>true</code>. When activated, Oracle Database creates outlines for all compiled SQL statements. You can create stored outlines for specific statements using the <code><a id="sthref1523"></a><a id="sthref1524"></a>CREATE</code> <code>OUTLINE</code> statement.</p>
<p>When creating or editing a private outline, the outline data is written to global temporary tables in the <code>SYSTEM</code> schema. These tables are accessible with the <code>OL$</code>, <code>OL$HINTS</code>, and <code>OL$NODES</code> synonyms.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must ensure that schemas in which outlines are to be created have the <code>CREATE</code> <code>ANY</code> <code>OUTLINE</code> privilege. Otherwise, despite having turned on the <code>CREATE_STORED_OUTLINE</code> initialization parameter, no outlines appear in the database after you run the application.
<p>Also, the default system tablespace can become exhausted if the <code>CREATE_STORED_OUTLINES</code> initialization parameter is enabled and the running application has many literal SQL statements. If this happens, then use the <code>DBMS_OUTLN</code>.<code>DROP_UNUSED</code> procedure to remove those literal SQL outlines.</p>
</div>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><a class="olink SQLRF01305" href="../../server.112/e41084/statements_6005.htm#SQLRF01305"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information on the <code>CREATE</code> <code>OUTLINE</code> statement</p>
</li>
<li>
<p><a class="olink ARPLS034" href="../../appdev.112/e40758/d_outln.htm#ARPLS034"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information on the <code>DBMS_OUTLN</code> and <code>DBMS_OUTLN_EDIT</code> packages</p>
</li>
<li>
<p><a href="#i12916">"Moving from RBO to the Query Optimizer"</a> to learn how to move from the rule-based optimizer to the query optimizer</p>
</li>
</ul>
</div>
<div id="PFGRF94961" class="sect3"><a id="sthref1525"></a>
<h4 class="sect3"><span class="secnum">20.1.5.1</span> Using Category Names for Stored Outlines</h4>
<p>You can categorize outlines to simplify the management task. The <code>CREATE</code> <code>OUTLINE</code> statement allows for specification of a category. The <code>DEFAULT</code> category is chosen if unspecified. Likewise, the <code><a id="sthref1526"></a>CREATE_STORED_OUTLINES</code> initialization parameter lets you specify a category name, where specifying <code>true</code> produces outlines in the <code>DEFAULT</code> category.</p>
<p>If you specify a category name using the <code>CREATE_STORED_OUTLINES</code> initialization parameter, then Oracle Database assigns all subsequently created outlines to that category until you reset the category name. Set the parameter to <code>false</code> to suspend outline generation.</p>
<p>If you set <code>CREATE_STORED_OUTLINES</code> to <code>true</code>, or if you use the <code>CREATE</code> <code>OUTLINE</code> statement without a category name, then Oracle Database assigns outlines to the category name of <code>DEFAULT</code>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="PFGRF94962" class="sect2"><a id="sthref1527"></a>
<h3 class="sect2"><span class="secnum">20.1.6</span> Using Stored Outlines</h3>
<p>When you activate the use of stored outlines, Oracle Database always uses the query optimizer. Outlines rely on hints. To be effective, most hints require the optimizer.</p>
<p><a id="sthref1528"></a><a id="sthref1529"></a>To use stored outlines when Oracle Database compiles a SQL statement, set the system parameter <code><a id="sthref1530"></a><a id="sthref1531"></a>USE_STORED_OUTLINES</code> to <code>true</code> or to a category name. If you set <code>USE_STORED_OUTLINES</code> to <code>true</code>, then Oracle Database uses outlines in the <code>default</code> category. If you specify a category with the <code>USE_STORED_OUTLINES</code> parameter, then Oracle Database uses outlines in that category until you reset the parameter to another category name or until you suspend outline use by setting <code>USE_STORED_OUTLINES</code> to <code>false</code>. If you specify a category name, and if Oracle Database does not find an outline in that category that matches the SQL statement, then the database searches for an outline in the <code>default</code> category.</p>
<p>To use a specific outline rather than all the outlines in a category, execute the <code>ALTER</code> <code>OUTLINE</code> statement to enable the specific outline. To use the outlines in a category except for a specific outline, use the <code>ALTER</code> <code>OUTLINE</code> statement to disable the specific outline in the category that is being used. The <code>ALTER</code> <code>OUTLINE</code> statement can also rename a stored outline, reassign it to a different category, or regenerate it.</p>
<p>The designated outlines only control the compilation of SQL statements that have outlines. If you set <code>USE_STORED_OUTLINES</code> to <code>false</code>, then Oracle Database does not use outlines. When you set <code>USE_STORED_OUTLINES</code> to <code>false</code> and you set <code>CREATE_STORED_OUTLINES</code> to <code>true</code>, Oracle Database creates outlines but does not use them.</p>
<p>The <code>USE_PRIVATE_OUTLINES</code> parameter lets you control the use of private outlines. A private outline is an outline seen only in the current session and whose data resides in the current parsing schema. Any changes made to such an outline are not seen by any other session on the system, and applying a private outline to the compilation of a statement can only be done in the current session with the <code>USE_PRIVATE_OUTLINES</code> parameter. Only when you explicitly choose to save your edits back to the public area are they seen by the rest of the users.</p>
<p>While the optimizer usually chooses optimal plans for queries, there are times when users know things about the execution environment that are inconsistent with the heuristics that the optimizer follows. By editing outlines directly, you can tune the SQL query without having to alter the application.</p>
<p>When the <code>USE_PRIVATE_OUTLINES</code> parameter is enabled and an outlined SQL statement is issued, the optimizer retrieves the outline from the session private area rather than the public area used when <code>USE_STORED_OUTLINES</code> is enabled. If no outline exists in the session private area, then the optimizer does not use an outline to compile the statement.</p>
<p>Any <code>CREATE</code> <code>OUTLINE</code> statement requires the <code>CREATE</code> <code>ANY</code> <code>OUTLINE</code> privilege. Specification of the <code>FROM</code> clause also requires the <code>SELECT</code> privilege. This privilege should be granted only to those users who would have the authority to view SQL text and hint text associated with the outlined statements. This role is required for the <code>CREATE</code> <code>OUTLINE</code> <code>FROM</code> command unless the issuer of the command is also the owner of the outline.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>USE_STORED_OUTLINES</code> and <code>USE_PRIVATE_OUTLINES</code> parameters are system or session specific. They are not initialization parameters. For more information on these parameters, see the <a class="olink SQLRF" href="../e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a><span class="italic">.</span></div>
<p>You can test whether the database is using an outline with the <code>V$SQL</code> view. Query the <code>OUTLINE_CATEGORY</code> column in conjunction with the SQL statement. If the database applied an outline, then this column contains the category to which the outline belongs. Otherwise, it is <code>NULL</code>. The <code>OUTLINE_SID</code> column tells you whether this particular cursor is using a public outline (value is 0) or a private outline (session's SID of the corresponding session using it).</p>
<p>For example:</p>
<pre>
SELECT OUTLINE_CATEGORY, OUTLINE_SID
  FROM V$SQL 
  WHERE SQL_TEXT LIKE 'SELECT COUNT(*) FROM emp%';
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF00810" href="../../server.112/e41084/statements_2005.htm#SQLRF00810"><span class="italic">Oracle Database SQL Language Reference</span></a> to learn about the <code>ALTER</code> <code>OUTLINE</code> statement</div>
</div>
<!-- class="sect2" -->
<div id="PFGRF94963" class="sect2"><a id="sthref1532"></a>
<h3 class="sect2"><span class="secnum">20.1.7</span> Viewing Outline Data</h3>
<p>You can access information about outlines and <a id="sthref1533"></a><a id="sthref1534"></a>related hint data that Oracle Database stores in the data dictionary from the following views<code><a id="sthref1535"></a><a id="sthref1536"></a><a id="sthref1537"></a><a id="sthref1538"></a><a id="sthref1539"></a><a id="sthref1540"></a></code>:</p>
<ul>
<li>
<p><code>USER_OUTLINES</code></p>
</li>
<li>
<p><code>USER_OUTLINE_HINTS</code></p>
</li>
<li>
<p><code>ALL_OUTLINES</code></p>
</li>
<li>
<p><code>ALL_OUTLINE_HINTS</code></p>
</li>
<li>
<p><code>DBA_OUTLINES</code></p>
</li>
<li>
<p><code>DBA_OUTLINE_HINTS</code></p>
</li>
</ul>
<p>Use the following syntax to obtain outline information from the <code>USER_OUTLINES</code> view, where the outline category is <code>mycat</code>:</p>
<pre>
SELECT NAME, SQL_TEXT 
  FROM USER_OUTLINES 
  WHERE CATEGORY='mycat';
</pre>
<p>Oracle Database responds by displaying the names and text of all outlines in category <code>mycat</code>.</p>
<p>To see all generated hints for the outline <code>name1</code>, use the following syntax:</p>
<pre>
SELECT HINT 
  FROM USER_OUTLINE_HINTS 
  WHERE NAME='name1';
</pre>
<p>You can check the flags in <code>_OUTLINES</code> views for information about compatibility, format, and whether an outline is enabled. For example, check the <code>ENABLED</code> field in the <code>USER_OUTLINES</code> view to determine whether an outline is enabled or not.</p>
<pre>
SELECT NAME, CATEGORY, ENABLED FROM USER_OUTLINES;
</pre>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a class="olink REFRN" href="../e40402/toc.htm"><span class="italic">Oracle Database Reference</span></a> to learn about views related to outlines</div>
</div>
<!-- class="sect2" -->
<a id="i19935"></a>
<div id="PFGRF94964" class="sect2">
<h3 class="sect2"><span class="secnum">20.1.8</span> Moving Outline Tables</h3>
<p><a id="sthref1541"></a><a id="sthref1542"></a>Oracle Database creates the <code>USER_OUTLINES</code> and <code>USER_OUTLINE_HINTS</code> views based on data in the <code>OL$</code> and <code>OL$HINTS</code> tables, respectively. These tables and the <code>OL$NODES</code> table reside in the <code>outln</code> schema.</p>
<p>The <code>outln</code> schema stores data in the <code>SYSTEM</code> tablespace. If outlines use too much space in the <code>SYSTEM</code> tablespace, then you can move them. To achieve this goal, create a separate tablespace and move the outline tables into this tablespace.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The default system tablespace could become exhausted if the <code>CREATE_STORED_OUTLINES</code> parameter is on and if the running application has many literal SQL statements. In this case, use the <code>DBMS_OUTLN</code>.<code>DROP_UNUSED</code> procedure to remove the literal SQL outlines.</div>
<p class="orderedlisttitle">To move outline tables into a new tablespace:&nbsp;</p>
<ol>
<li>
<p>Use the Oracle Data Pump Export utility to export the <code>OL$</code>, <code>OL$HINTS</code>, and <code>OL$NODES</code> tables.</p>
<p>The following example exports these tables to the <code>exp.dmp</code> file located in the directory that maps to the <code>outln_dir</code> object:</p>
<pre>
% expdp outln DIRECTORY=outln_dir DUMPFILE=exp.dmp TABLES=OL$,OL$HINTS,OL$NODES
Password: <span class="italic">password</span>
</pre></li>
<li>
<p>Start SQL*Plus and connect to the database as the <code>outln</code> user, as shown in the following example:</p>
<pre>
SQL&gt; CONNECT outln
Enter password: <span class="italic">password</span>
</pre></li>
<li>
<p>Remove the previous <code>OL$</code>, <code>OL$HINTS</code>, and <code>OL$NODES</code> tables, as shown in the following example:</p>
<pre>
SQL&gt; DROP TABLE OL$;
SQL&gt; DROP TABLE OL$HINTS; 
SQL&gt; DROP TABLE OL$NODES; 
</pre></li>
<li>
<p>Create a new tablespace for the tables.</p>
<p>The following example connects as <code>SYSTEM</code> and creates a tablespace named <code>outln_ts</code>:</p>
<pre>
SQL&gt; CONNECT SYSTEM
Enter password: <span class="italic">password</span>

SQL&gt; CREATE TABLESPACE outln_ts DATAFILE 'tspace.dat' SIZE 2M
  2 DEFAULT STORAGE ( INITIAL 10K NEXT 20K MINEXTENTS 1 MAXEXTENTS 999
  3                   PCTINCREASE 10 ) ONLINE; 
</pre></li>
<li>
<p>Change the default tablespace for the <code>outln</code> schema.</p>
<p>The following statement changes the default tablespace to <code>outln_ts</code>:</p>
<pre>
SQL&gt; ALTER USER OUTLN DEFAULT TABLESPACE outln_ts;
</pre></li>
<li>
<p>To force the import into the <code>outln_ts</code> tablespace, perform the following tasks:</p>
<ol>
<li>
<p>Set the quota for the <code>SYSTEM</code> tablespace to <code>0K</code> for the <code>outln</code> user.</p>
</li>
<li>
<p>Revoke the <code>UNLIMITED TABLESPACE</code> privilege and all roles, such as the <code>RESOURCE</code> role, that have unlimited tablespace privileges or quotas.</p>
</li>
<li>
<p>Set a quota for the <code>outln</code> tablespace.</p>
</li>
</ol>
</li>
<li>
<p>Use the Data Pump Import utility to import the <code>OL$</code>, <code>OL$HINTS</code>, and <code>OL$NODES</code> tables, as in the following example:</p>
<pre>
% impdp outln DIRECTORY=outln_dir DUMPFILE=exp.dmp TABLES=OL$,OL$HINTS,OL$NODES
Password: <span class="italic">password</span>
</pre>
<p>When the import completes, the <code>OL$</code>, <code>OL$HINTS</code>, and <code>OL$NODES</code> tables are re-created in the schema named <code>outln</code> and reside in the <code>outln_ts</code> tablespace.</p>
</li>
<li>
<p>Optionally, adjust the tablespace quotas for the <code>outln</code> user appropriately by adding any privileges and roles that were removed in a previous step.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SUTIL100" href="../../server.112/e22490/dp_overview.htm#SUTIL100"><span class="italic">Oracle Database Utilities</span></a> for detailed information about using the Data Pump Export and Import utilities</p>
</li>
<li>
<p><a class="olink ARPLS034" href="../../appdev.112/e40758/d_outln.htm#ARPLS034"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed information about using the <code>DBMS_OUTLN</code> package</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i29159"></a>
<div id="PFGRF70702" class="sect1">
<h2 class="sect1"><span class="secnum">20.2</span> Using Plan Stability with Query Optimizer Upgrades</h2>
<p><a id="sthref1544"></a>This <a id="sthref1545"></a>section describes procedures you can use to significantly improve performance by taking advantage of query optimizer functionality. Plan stability provides a way to preserve a system's targeted execution plans with satisfactory performance while also taking advantage of new query optimizer features for the rest of the SQL statements.</p>
<p>While there are classes of SQL statements and features where an exact reproduction of the original execution plan is not guaranteed, plan stability can still be a highly useful part of the migration. Before the migration, outline capturing of execution plan should be turned on until all or most of the applications SQL-statement have been covered.</p>
<p>If performance problems for some specific SQL-statement occur after migration, then you can turn on the stored outline for the specified statement as a way of restoring the old behavior. Stored outlines are not always the best way of resolving a migration related performance problem because they prevent plans from adapting to changing data properties. However, stored outlines add to the arsenal of techniques that you can use to address such problems.</p>
<p>Topics covered in this section are:</p>
<ul>
<li>
<p><a href="#i12916">Moving from RBO to the Query Optimizer</a></p>
</li>
<li>
<p><a href="#i19350">Moving to a New Oracle Release under the Query Optimizer</a></p>
</li>
</ul>
<a id="i12916"></a>
<div id="PFGRF94965" class="sect2">
<h3 class="sect2"><span class="secnum">20.2.1</span> Moving from RBO to the Query Optimizer</h3>
<p><a id="sthref1546"></a><a id="sthref1547"></a>If an application was developed using the rule-based optimizer, then a considerable amount of effort might have gone into manually tuning the SQL statements to optimize performance. You can use plan stability to leverage the effort that has gone into performance tuning by preserving the behavior of the application when upgrading from rule-based to query optimization.</p>
<p>By creating outlines for an application before switching to query optimization, the plans generated by the rule-based optimizer can be used, while statements generated by newly written applications developed after the switch use query plans. To create and use outlines for an application, use the following process.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<span class="italic">Carefully read this procedure and consider its implications before executing it!</span></div>
<ol>
<li>
<p>Ensure that schemas in which outlines are to be created have the <code>CREATE</code> <code>ANY</code> <code>OUTLINE</code> privilege. For example, from <code>SYS</code>:</p>
<pre>
GRANT CREATE ANY OUTLINE TO <span class="italic">user-name</span> 
</pre></li>
<li>
<p>Execute syntax similar to the following to designate; for example, the <code>RBOCAT</code> outline category.</p>
<pre>
ALTER SESSION SET CREATE_STORED_OUTLINES = rbocat;
</pre></li>
<li>
<p>Run the application long enough to capture stored outlines for all important SQL statements.</p>
</li>
<li>
<p>Suspend outline generation:</p>
<pre>
ALTER SESSION SET CREATE_STORED_OUTLINES = FALSE;
</pre></li>
<li>
<p>Gather statistics with the <code>DBMS_STATS</code> package.</p>
</li>
<li>
<p>Alter the parameter <code>OPTIMIZER_MODE</code> to <code>CHOOSE</code>.</p>
</li>
<li>
<p>Enter the following syntax to make Oracle database use the outlines in category <code>RBOCAT</code>:</p>
<pre>
ALTER SESSION SET USE_STORED_OUTLINES = rbocat;
</pre></li>
<li>
<p>Run the application.</p>
<p>Subject to the limitations of plan stability, access paths for this application's SQL statements should be unchanged.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
If a query was not executed in step 2, then you can capture the old behavior of the query even after switching to query optimization. To achieve this goal, change the optimizer mode to <code>RULE</code>, create an outline for the query, and then change the optimizer mode back to <code>CHOOSE</code>.</div>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i19350"></a>
<div id="PFGRF94966" class="sect2">
<h3 class="sect2"><span class="secnum">20.2.2</span> Moving to a New Oracle Release under the Query Optimizer</h3>
<p><a id="sthref1548"></a>When <a id="sthref1549"></a><a id="sthref1550"></a>upgrading to a new Oracle Database release under query optimization, some SQL statements may have their execution plans changed because of changes in the optimizer. While such changes benefit performance, you might have applications that perform so well that you would consider any changes in their behavior to be an unnecessary risk. For such applications, you can create outlines before the upgrade using the following procedure.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<span class="italic">Carefully read this procedure and consider its implications before running it!</span></div>
<ol>
<li>
<p>Enter the following syntax to enable outline creation:</p>
<pre>
ALTER SESSION SET CREATE_STORED_OUTLINES = ALL_QUERIES;
</pre></li>
<li>
<p>Run the application long enough to capture stored outlines for all critical SQL statements.</p>
</li>
<li>
<p>Enter this syntax to suspend outline generation:</p>
<pre>
ALTER SESSION SET CREATE_STORED_OUTLINES = FALSE;
</pre></li>
<li>
<p>Upgrade the production system to the new version of the RDBMS.</p>
</li>
<li>
<p>Run the application.</p>
</li>
</ol>
<p>After the upgrade, you can enable the use of stored outlines, or alternatively, you can use the outlines that were stored as a backup if you find that some statements exhibit performance degradation after the upgrade.</p>
<p>With the latter approach, you can selectively use the stored outlines for such problematic statements as follows:</p>
<ol>
<li>
<p>For each problematic SQL statement, change the <code>CATEGORY</code> of the associated stored outline to a category name similar to this:</p>
<pre>
ALTER OUTLINE <span class="italic">outline_name</span> CHANGE CATEGORY TO problemcat;
</pre></li>
<li>
<p>Enter this syntax to make Oracle database use outlines from the category <code>problemcat</code>.</p>
<pre>
ALTER SESSION SET USE_STORED_OUTLINES = problemcat;
</pre></li>
</ol>
<div id="PFGRF94967" class="sect3"><a id="sthref1551"></a>
<h4 class="sect3"><span class="secnum">20.2.2.1</span> Upgrading with a Test System</h4>
<p>A test database, separate from the production database, is useful for conducting experiments with optimizer behavior after an upgrade. You can migrate statistics from the production system to the test system using import/export. This technique alleviates the need to fill the tables in the test database with data.</p>
<p>You can move outlines between the systems by category. For example, after you create outlines in the <code>problemcat</code> category, export them by category using the query-based export option. This is a convenient and efficient way to export only selected outlines from one database to another without exporting all outlines in the source database. Use the Data Pump Export utility with the <code>QUERY</code> parameter as in the following example (note the use of the line continuation character):</p>
<pre>
% expdp outln DIRECTORY=outln_dir DUMPFILE=exp_file.dmp \
?  TABLES=OL$,OL$HINTS,OL$NODES QUERY='WHERE CATEGORY="problemcat"'
Password: <span class="italic">password</span>
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SUTIL100" href="../../server.112/e22490/dp_overview.htm#SUTIL100"><span class="italic">Oracle Database Utilities</span></a> for detailed information about using the Data Pump Export and Import utilities</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1679">
<tr>
<td class="cellalignment1688">
<table class="cellalignment1684">
<tr>
<td class="cellalignment1683"><a href="hintsref.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1683"><a href="sqltrace.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1690">
<table class="cellalignment1682">
<tr>
<td class="cellalignment1683"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1683"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1683"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1683"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1683"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1683"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
