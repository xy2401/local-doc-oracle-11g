<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Automatic SQL Tuning</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023" />
<meta name="dcterms.created" content="2014-06-30T4:25:7Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Performance Tuning Guide" />
<meta name="dcterms.identifier" content="E41573-04" />
<meta name="dcterms.isVersionOf" content="PFGRF" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="sql_overview.htm" title="Previous" type="text/html" />
<link rel="Next" href="advisor.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e41573.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">25/31</span> <!-- End Header -->
<div id="PFGRF028" class="chapter"><a id="g42443"></a> <a id="i22019"></a>
<h1 class="chapter"><span class="secnum">17</span> Automatic SQL Tuning</h1>
<p>This chapter discusses the automatic SQL tuning features of Oracle Database. <a id="sthref1361"></a>Automatic SQL tuning automates the manual process, which is complex, repetitive, and time-consuming.</p>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#i36217">Overview of the Automatic Tuning Optimizer</a></p>
</li>
<li>
<p><a href="#CHDIBFGA">Managing the Automatic SQL Tuning Advisor</a></p>
</li>
<li>
<p><a href="#i34782">Tuning Reactively with SQL Tuning Advisor</a></p>
</li>
<li>
<p><a href="#i34915">Managing SQL Tuning Sets</a></p>
</li>
<li>
<p><a href="#i36634">Managing SQL Profiles</a></p>
</li>
<li>
<p><a href="#i35947">SQL Tuning Views</a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink TDPPT160" href="../../server.112/e10822/tdppt_sqltune.htm#TDPPT160"><span class="italic">Oracle Database 2 Day + Performance Tuning Guide</span></a> for information about using the automatic SQL tuning features with Oracle Enterprise Manager (Enterprise Manager)</div>
</li>
</ul>
<a id="i36217"></a>
<div id="PFGRF94840" class="sect1">
<h2 class="sect1"><span class="secnum">17.1</span> Overview of the Automatic Tuning Optimizer</h2>
<p>Oracle Database uses the optimizer to generate the execution plans for submitted SQL statements. The <a id="sthref1362"></a>optimizer operates in the following modes:</p>
<ul>
<li>
<p>Normal mode</p>
<p>The optimizer compiles the SQL and generates an execution plan. The normal mode generates a reasonable plan for the vast majority of SQL statements. Under normal mode, the optimizer operates with very strict time constraints, usually a fraction of a second.</p>
</li>
<li>
<p>Tuning mode</p>
<p>The optimizer performs additional analysis to check whether it can further improve the plan produced in normal mode. The optimizer output is not an execution plan, but a series of actions, along with their rationale and expected benefit for producing a significantly better plan. When running in tuning mode, the optimizer is known as the <a id="sthref1363"></a><span class="bold">Automatic Tuning Optimizer</span>.</p>
</li>
</ul>
<p>Under tuning mode, the optimizer can take several minutes to tune a single statement. It is both time and resource intensive to invoke Automatic Tuning Optimizer every time a query must be hard-parsed. Automatic Tuning Optimizer is meant for complex and high-load SQL statements that have nontrivial impact on the database.</p>
<p>Automatic Database Diagnostic Monitor (ADDM) proactively identifies high-load SQL statements that are good candidates for SQL tuning (see <a href="diag.htm#g41683">Chapter 6, "Automatic Performance Diagnostics"</a>). The automatic SQL tuning feature also automatically identifies problematic SQL statements and implements tuning recommendations during system maintenance windows as an automated maintenance task.</p>
<p><a id="sthref1364"></a>The Automatic Tuning Optimizer performs the following types of tuning analysis:</p>
<ul>
<li>
<p><a href="#i37659">Statistics Analysis</a></p>
</li>
<li>
<p><a href="#i37675">SQL Profiling</a></p>
</li>
<li>
<p><a href="#i37688">Access Path Analysis</a></p>
</li>
<li>
<p><a href="#i37689">SQL Structure Analysis</a></p>
</li>
<li>
<p><a href="#CHDDCAAG">Alternative Plan Analysis</a></p>
</li>
</ul>
<a id="i37659"></a>
<div id="PFGRF94841" class="sect2">
<h3 class="sect2"><span class="secnum">17.1.1</span> Statistics Analysis</h3>
<p>The optimizer relies on object statistics to generate execution plans. If these statistics are stale or missing, then the optimizer does not have the necessary information it needs and can generate poor execution plans. The Automatic Tuning Optimizer checks each query object for missing or stale statistics, and produces two types of output:</p>
<ul>
<li>
<p>Recommendations to gather relevant statistics for objects with stale or no statistics</p>
<p>Because optimizer statistics are automatically collected and refreshed, this problem occurs only when automatic optimizer statistics collection is disabled. See <a href="stats.htm#i41282">"Managing Automatic Optimizer Statistics Collection"</a>.</p>
</li>
<li>
<p>Auxiliary statistics for objects with no statistics, and statistic adjustment factor for objects with stale statistics</p>
</li>
</ul>
<p>The database stores this auxiliary information in an object called a SQL profile.</p>
</div>
<!-- class="sect2" -->
<a id="i37675"></a>
<div id="PFGRF94842" class="sect2">
<h3 class="sect2"><span class="secnum">17.1.2</span> SQL Profiling</h3>
<p>A <a href="glossary.htm#BGBEICCA"><span class="xrefglossterm">SQL profile</span></a> is a set of auxiliary information specific to a SQL statement. Conceptually, a SQL profile is to a SQL statement what statistics are to a table or index. The database can use the auxiliary information to improve execution plans.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i36634">"Managing SQL Profiles"</a></div>
</div>
<!-- class="sect2" -->
<a id="i37688"></a>
<div id="PFGRF94843" class="sect2">
<h3 class="sect2"><span class="secnum">17.1.3</span> Access Path Analysis</h3>
<p>An <a href="glossary.htm#BGBDBFGI"><span class="xrefglossterm">access path</span></a> is the means by which data is retrieved from a database. For example, a query using an index and a query using a full table scan use different access paths.</p>
<p>Indexes can tremendously enhance performance of a SQL statement by reducing the need for full scans of large tables. Effective indexing is a common tuning technique. Automatic Tuning Optimizer explores whether a new index can significantly enhance query performance. If so, then the advisor recommends index creation.</p>
<p>Because the Automatic Tuning Optimizer does not analyze how its index recommendation can affect the entire SQL workload, it also recommends running SQL Access Advisor on the SQL statement along with a representative SQL workload. SQL Access Advisor looks at the impact of creating an index on the entire SQL workload before making recommendations. See <a href="sql_overview.htm#i35740">"Automatic SQL Tuning Features"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i37689"></a>
<div id="PFGRF94844" class="sect2">
<h3 class="sect2"><span class="secnum">17.1.4</span> SQL Structure Analysis</h3>
<p>Automatic Tuning Optimizer identifies common problems with the structure of SQL statements that can lead to poor performance. These could be syntactic, semantic, or design problems. In each case, Automatic Tuning Optimizer makes relevant suggestions to restructure the statements. The suggested alternative is similar, but not equivalent, to the original statement.</p>
<p>For example, the optimizer may suggest replacing the <code>UNION</code> operator with <code>UNION</code> <code>ALL</code> or <code>NOT</code> <code>IN</code> with <code>NOT</code> <code>EXISTS</code>. You can then determine if the advice is applicable to your situation. For example, if the schema design is such that duplicates are not possible, then the <code>UNION</code> <code>ALL</code> operator is much more efficient than the <code>UNION</code> operator. These changes require a good understanding of the data properties and should be implemented only after careful consideration.</p>
</div>
<!-- class="sect2" -->
<a id="CHDDCAAG"></a>
<div id="PFGRF95155" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">17.1.5</span> Alternative Plan Analysis</h3>
<p>While tuning a SQL statement, SQL Tuning Advisor searches real-time and historical performance data for <span class="bold">alternative execution plans</span> for the statement. If plans other than the original plan exist, then SQL Tuning Advisor reports an alternative plan finding.</p>
<p>SQL Tuning Advisor validates the alternative execution plans and notes any plans that are not reproducible. When reproducible alternative plans are found, you can create a SQL plan baseline to instruct the optimizer to choose these plans in the future.</p>
<p><a href="#CHDEBAEB">Example 17-1</a> shows an alternative plan finding for a <code>SELECT</code> statement.</p>
<div id="PFGRF95156" class="example">
<p class="titleinexample"><a id="CHDEBAEB"></a>Example 17-1 Alternative Plan Finding</p>
<pre>
2- Alternative Plan Finding
---------------------------
  Some alternative execution plans for this statement were found by searching
  the system's real-time and historical performance data.
 
  The following table lists these plans ranked by their average elapsed time.
  See section "ALTERNATIVE PLANS SECTION" for detailed information on each
  plan.
 
  id plan hash  last seen            elapsed (s)  origin          note
  -- ---------- -------------------- ------------ --------------- ----------------
   1 1378942017  2009-02-05/23:12:08        0.000 Cursor Cache    original plan
   2 2842999589  2009-02-05/23:12:08        0.002 STS
 
  Information
  -----------
  - The Original Plan appears to have the best performance, based on the
    elapsed time per execution.  However, if you know that one alternative
    plan is better than the Original Plan, you can create a SQL plan baseline
    for it. This will instruct the Oracle optimizer to pick it over any other
    choices in the future.
    execute dbms_sqltune.create_sql_plan_baseline(task_name =&gt; 'TASK_XXXXX',
            object_id =&gt; 2, task_owner =&gt; 'SYS', plan_hash =&gt; xxxxxxxx);
</pre></div>
<!-- class="example" -->
<p><a href="#CHDEBAEB">Example 17-1</a> shows that SQL Tuning Advisor found two plans, one in the shared SQL area and one in a SQL tuning set. The plan in the shared SQL area is the same as the original plan.</p>
<p>SQL Tuning Advisor only recommends an alternative plan if the elapsed time of the original plan is worse than alternative plans. In this case, SQL Tuning Advisor recommends that users create a SQL plan baseline on the plan with the best performance. In <a href="#CHDEBAEB">Example 17-1</a>, the alternative plan did not perform as well as the original plan, so SQL Tuning Advisor did not recommend using the alternative plan.</p>
<p>In <a href="#CHDBIJJE">Example 17-2</a>, the alternative plans section of the SQL Tuning Advisor output includes both the original and alternative plans and summarizes their performance. The most important statistic is elapsed time. The original plan used an index, whereas the alternative plan used a full table scan, increasing elapsed time by .002 seconds.</p>
<div id="PFGRF95157" class="example">
<p class="titleinexample"><a id="CHDBIJJE"></a>Example 17-2 Alternative Plans Section</p>
<pre>
Plan 1
------
 
  Plan Origin                 :Cursor Cache
  Plan Hash Value             :1378942017
  Executions                  :50
  Elapsed Time                :0.000 sec
  CPU Time                    :0.000 sec
  Buffer Gets                 :0
  Disk Reads                  :0
  Disk Writes                 :0
 
Notes:
  1. Statistics shown are averaged over multiple executions.
  2. The plan matches the original plan.
 
--------------------------------------------
| Id  | Operation            | Name        |
--------------------------------------------
|   0 | SELECT STATEMENT     |             |
|   1 |  SORT AGGREGATE      |             |
|   2 |   MERGE JOIN         |             |
|   3 |    INDEX FULL SCAN   | TEST1_INDEX |
|   4 |    SORT JOIN         |             |
|   5 |     TABLE ACCESS FULL| TEST        |
--------------------------------------------
 
Plan 2
------
 
  Plan Origin                 :STS
  Plan Hash Value             :2842999589
  Executions                  :10
  Elapsed Time                :0.002 sec
  CPU Time                    :0.002 sec
  Buffer Gets                 :3
  Disk Reads                  :0
  Disk Writes                 :0
 
Notes:
  1. Statistics shown are averaged over multiple executions.
 
-------------------------------------
| Id  | Operation           | Name  | 
-------------------------------------
|   0 | SELECT STATEMENT    |       |
|   1 |  SORT AGGREGATE     |       |
|   2 |   HASH JOIN         |       |
|   3 |    TABLE ACCESS FULL| TEST  |
|   4 |    TABLE ACCESS FULL| TEST1 |
-------------------------------------
</pre></div>
<!-- class="example" -->
<p>To adopt an alternative plan regardless of whether SQL Tuning Advisor recommends it, call <code>DBMS_SQLTUNE.CREATE_SQL_PLAN_BASELINE</code>. You can use this procedure to create a SQL plan baseline on any existing reproducible plan.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDIBFGA"></a>
<div id="PFGRF94846" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">17.2</span> Managing the Automatic SQL Tuning Advisor</h2>
<p>SQL Tuning Advisor<a id="sthref1365"></a><a id="sthref1366"></a> takes one or more SQL statements as an input and invokes the Automatic Tuning Optimizer to perform SQL tuning on the statements. The output takes the form of advice or recommendations, along with a rationale for each recommendation and its expected benefit. The recommendation relates to a collection of statistics on objects, creation of new indexes, restructuring of the SQL statement, or creation of a SQL profile. You can choose to accept the recommendation to complete the tuning of the SQL statements.</p>
<p>The database can automatically tune SQL statements by identifying problematic statements and implementing recommendations using SQL Tuning Advisor during system maintenance windows. When run automatically, SQL Tuning Advisor is known as the <span class="bold">Automatic SQL Tuning Advisor</span>.</p>
<p>This section explains how to manage the Automatic SQL Tuning Advisor:</p>
<ul>
<li>
<p><a href="#CHDHICFI">How Automatic SQL Tuning Works</a></p>
</li>
<li>
<p><a href="#CHDHJBDA">Enabling and Disabling Automatic SQL Tuning</a></p>
</li>
<li>
<p><a href="#CHDDICIF">Configuring Automatic SQL Tuning</a></p>
</li>
<li>
<p><a href="#CHDHDHHI">Viewing Automatic SQL Tuning Reports</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN12331" href="../../server.112/e25494/tasks.htm#ADMIN12331"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about automated maintenance tasks</div>
<a id="CHDHICFI"></a>
<div id="PFGRF95158" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">17.2.1</span> How Automatic SQL Tuning Works</h3>
<p>Oracle Database automatically runs SQL Tuning Advisor on selected high-load SQL statements from the Automatic Workload Repository (AWR) that qualify as tuning candidates. This task, called <span class="bold">Automatic SQL Tuning</span>, runs in the default maintenance windows on a nightly basis. By default, automatic SQL tuning runs for at most one hour. You can customize attributes of the maintenance windows, including start and end time, frequency, and days of the week.</p>
<p>After automatic SQL tuning begins, the database performs the following steps:</p>
<ol>
<li>
<p>Identifies SQL candidates in the AWR for tuning</p>
<p>Oracle Database analyzes statistics in AWR and generates a list of potential SQL statements that are eligible for tuning. These statements include repeating high-load statements that have a significant impact on the database.</p>
<p>The database tunes only SQL statements that have an execution plan with a high potential for improvement. The database ignores recursive SQL and statements that have been tuned recently (in the last month), parallel queries, DML, DDL, and SQL statements with performance problems caused by concurrency issues.</p>
<p>The database orders the SQL statements that are selected as candidates based on their performance impact. The database calculates the impact by summing the CPU time and the I/O times in AWR for the selected statement in the past week.</p>
</li>
<li>
<p>Tunes each SQL statement individually by calling SQL Tuning Advisor</p>
<p>During the tuning process, the database considers and reports all recommendation types, but it can implement only SQL profiles automatically.</p>
</li>
<li>
<p>Tests SQL profiles by executing the SQL statement</p>
<p>If a SQL profile is recommended, the database tests the new profile by executing the SQL statement both with and without the profile. If the performance improvement improves at least threefold, then the database accepts the SQL profile, but only if the <code>ACCEPT_SQL_PROFILES</code> task parameter is set to <code>TRUE</code>. Otherwise, the automatic SQL tuning reports merely report the recommendation to create a SQL profile.</p>
</li>
<li>
<p>Optionally, implements the SQL profiles provided they meet the criteria of threefold performance improvement</p>
<p>The database considers other factors when deciding whether to implement the SQL profile. For example, the database does not implement a profile when the objects referenced in the statement have stale optimizer statistics. SQL profiles that have been implemented automatically show type is <code>AUTO</code> in the <code>DBA_SQL_PROFILES</code> view.</p>
<p>If the database uses SQL plan management, and if a SQL plan baseline exists for the SQL statement, then the database adds a new plan baseline when creating the SQL profile. As a result, the optimizer uses the new plan immediately after profile creation. See <a href="optplanmgmt.htm#BABEAFGG">Chapter 15, "Using SQL Plan Management"</a>.</p>
</li>
</ol>
<p>At any time during or after the automatic SQL tuning process, you can view the results using the automatic SQL tuning report. This report describes in detail all the SQL statements that were analyzed, the recommendations generated, and the SQL profiles that were automatically implemented.</p>
<p><a href="#CHDIIHDB">Figure 17-1</a> shows the steps performed by the database during automatic SQL tuning.</p>
<div id="PFGRF94847" class="figure">
<p class="titleinfigure"><a id="CHDIIHDB"></a>Figure 17-1 Automatic SQL Tuning</p>
<img width="345" height="447" src="img/pfgrf227.gif" alt="Description of Figure 17-1 follows" /><br />
<a id="sthref1367" href="img_text/pfgrf227.htm">Description of "Figure 17-1 Automatic SQL Tuning"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="CHDHJBDA"></a>
<div id="PFGRF94848" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">17.2.2</span> Enabling and Disabling Automatic SQL Tuning</h3>
<p>Automatic SQL tuning runs as part of the automated maintenance tasks infrastructure.</p>
<p>To enable automatic SQL tuning, use the <code>ENABLE</code> procedure in the <code>DBMS_AUTO_TASK_ADMIN</code> package:</p>
<pre>
BEGIN
  DBMS_AUTO_TASK_ADMIN.ENABLE(
    client_name =&gt; 'sql tuning advisor'
,   operation   =&gt; NULL
,   window_name =&gt; NULL
);
END;
/
</pre>
<p>To disable automatic SQL tuning, use the <code>DISABLE</code> procedure in the <code>DBMS_AUTO_TASK_ADMIN</code> package:</p>
<pre>
BEGIN
  DBMS_AUTO_TASK_ADMIN.DISABLE(
    client_name =&gt; 'sql tuning advisor'
,   operation   =&gt; NULL
,   window_name =&gt; NULL
);
END;
/
</pre>
<p>You can pass a specific window name using the <code>window_name</code> parameter to enable or disable the task in certain maintenance windows only.</p>
<p>Setting the <code>STATISTICS_LEVEL</code> parameter to <code>BASIC</code> disables automatic statistics gathering by the AWR and, as a result, also disables automatic SQL tuning.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADMIN0235" href="../../server.112/e25494/tasks.htm#ADMIN0235"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about the AutoTask infrastructure</p>
</li>
<li>
<p><a class="olink ARPLS032" href="../../appdev.112/e40758/d_autotaskadm.htm#ARPLS032"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code>DBMS_AUTO_TASK_ADMIN</code> package</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDDICIF"></a>
<div id="PFGRF94849" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">17.2.3</span> Configuring Automatic SQL Tuning</h3>
<p>Starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2), you can use the <code>DBMS_AUTO_SQLTUNE</code> package to configure the behavior of the automatic SQL tuning task. For previous releases, use <code>DBMS_SQLTUNE</code> instead.</p>
<p><a href="#CHDBIDAD">Table 17-2</a> lists the configurable parameters specific to automatic SQL tuning.</p>
<div id="PFGRF94850" class="tblformal">
<p class="titleintable"><a id="sthref1368"></a><a id="sthref1369"></a>Table 17-1 SET_AUTO_TUNING_TASK_PARAMETER Automatic SQL Tuning Parameters</p>
<table class="cellalignment1686" title="SET_AUTO_TUNING_TASK_PARAMETER Automatic SQL Tuning Parameters" summary="Lists and describes the parameters that are specific to automatic SQL tuning which can be configured using the SET_TUNING_TASK_PARAMETER procedure" dir="ltr">
<thead>
<tr class="cellalignment1680">
<th class="cellalignment1687" id="r1c1-t6">Parameter</th>
<th class="cellalignment1687" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r2c1-t6" headers="r1c1-t6">
<p><code>ACCEPT_SQL_PROFILE</code></p>
</td>
<td class="cellalignment1688" headers="r2c1-t6 r1c2-t6">
<p>Specifies whether to accept SQL profiles automatically.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r3c1-t6" headers="r1c1-t6">
<p><code>EXECUTION_DAYS_TO_EXPIRE</code></p>
</td>
<td class="cellalignment1688" headers="r3c1-t6 r1c2-t6">
<p>Specifies the number of days for which to save the task history in the advisor framework schema. By default, the task history is saved for 30 days before it expires.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r4c1-t6" headers="r1c1-t6">
<p><code>MAX_SQL_PROFILES_PER_EXEC</code></p>
</td>
<td class="cellalignment1688" headers="r4c1-t6 r1c2-t6">
<p>Specifies the limit of SQL profiles that are accepted for each automatic SQL tuning task. Consider setting the limit of SQL profiles that are accepted for each automatic SQL tuning task based on the acceptable level of changes that can be made to the system on a daily basis.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r5c1-t6" headers="r1c1-t6">
<p><code>MAX_AUTO_SQL_PROFILES</code></p>
</td>
<td class="cellalignment1688" headers="r5c1-t6 r1c2-t6">
<p>Specifies the limit of SQL profiles that are accepted in total.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>To use the <code>DBMS_AUTO_SQLTUNE</code> package, you must have the <code>DBA</code> role, or have <code>EXECUTE</code> privileges granted by an administrator. The only exception is the <code>EXECUTE_AUTO_TUNING_TASK</code> procedure, which can only be run by <code>SYS</code>.</p>
<p class="orderedlisttitle">To configure automatic SQL tuning:&nbsp;</p>
<ol>
<li>
<p>Start SQL*Plus, and connect to the database with <code>DBA</code> privileges (or connect as <code>SYS</code> if you plan to run <code>EXECUTE_AUTO_TUNING_TASK</code>).</p>
</li>
<li>
<p>Run the <code>DBMS_AUTO_SQLTUNE.SET_AUTO_TUNING_TASK_PARAMETER</code> procedure.</p>
<p>The following example configures the automatic SQL tuning task to automatically accept SQL profiles recommended by SQL Tuning Advisor:</p>
<pre>
BEGIN
  DBMS_AUTO_SQLTUNE.SET_AUTO_TUNING_TASK_PARAMETER(
    parameter =&gt; 'ACCEPT_SQL_PROFILES', value =&gt; 'TRUE');
END;
/
</pre></li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CHDDDIBA">"Configuring a SQL Tuning Task"</a> to learn about other parameters that you can configure for a SQL tuning task</p>
</li>
<li>
<p><a class="olink ARPLS73155" href="../../appdev.112/e40758/d_autosta.htm#ARPLS73155"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code>DBMS_AUTO_SQLTUNE</code> package</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDHDHHI"></a>
<div id="PFGRF94851" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">17.2.4</span> Viewing Automatic SQL Tuning Reports</h3>
<p>Starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2), you can use the <code>DBMS_AUTO_SQLTUNE</code>.<code>REPORT_AUTO_TUNING_TASK</code> function to generate the automatic SQL tuning report. For previous releases, use the <code>DBMS_SQLTUNE</code> package instead.</p>
<p>The report contains information about multiple executions of the Automatic SQL Tuning task. Depending on the sections that were included in the report, you can view information about the automatic SQL tuning task in the following sections:</p>
<ul>
<li>
<p>General information</p>
<p>The general information section has a high-level description of the automatic SQL tuning task, including information about the inputs given for the report, the number of SQL statements tuned during the maintenance, and the number of SQL profiles created.</p>
</li>
<li>
<p>Summary</p>
<p>The summary section lists the SQL statements (by their SQL identifiers) that were tuned during the maintenance window and the estimated benefit of each SQL profile, or their actual execution statistics after test executing the SQL statement with the SQL profile.</p>
</li>
<li>
<p>Tuning findings</p>
<p>This section contains the following information about each SQL statement analyzed by SQL Tuning Advisor:</p>
<ul>
<li>
<p>All findings associated with each SQL statement</p>
</li>
<li>
<p>Whether the profile was accepted on the database, and why</p>
</li>
<li>
<p>Whether the SQL profile is currently enabled on the database</p>
</li>
<li>
<p>Detailed execution statistics captured when testing the SQL profile</p>
</li>
</ul>
</li>
<li>
<p>Explain plans</p>
<p>This section shows the old and new explain plans used by each SQL statement analyzed by SQL Tuning Advisor.</p>
</li>
<li>
<p>Errors</p>
<p>This section lists all errors encountered by the automatic SQL tuning task.</p>
</li>
</ul>
<p class="orderedlisttitle">To view the automatic SQL tuning report using DBMS_AUTO_SQLTUNE:&nbsp;</p>
<ol>
<li>
<p>Start SQL*Plus, and connect to the database with the appropriate privileges.</p>
</li>
<li>
<p>Run the <code>DBMS_AUTO_SQLTUNE.REPORT_AUTO_TUNING_TASK</code> function.</p>
<p>In the following example, the advisor generates a text report to show all SQL statements that were analyzed in the most recent execution, including recommendations that were not implemented.</p>
<pre>
VARIABLE my_rept CLOB;
BEGIN
  :my_rept :=DBMS_AUTO_SQLTUNE.REPORT_AUTO_TUNING_TASK(
    begin_exec   =&gt; NULL,
    end_exec     =&gt; NULL,
    type         =&gt; 'TEXT',
    level        =&gt; 'TYPICAL',
    section      =&gt; 'ALL',
    object_id    =&gt; NULL,
    result_limit =&gt; NULL);
END;
/

PRINT :my_rept
</pre></li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink TDPPT311" href="../../server.112/e10822/tdppt_sqltune.htm#TDPPT311"><span class="italic">Oracle Database 2 Day + Performance Tuning Guide</span></a> to learn how to view automatic SQL tuning reports using Enterprise Manager</p>
</li>
<li>
<p><a class="olink ARPLS220" href="../../appdev.112/e40758/d_sqltun.htm#ARPLS220"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code>DBMS_AUTO_SQLTUNE</code> package</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i34782"></a>
<div id="PFGRF02603" class="sect1">
<h2 class="sect1"><span class="secnum">17.3</span> Tuning Reactively with SQL Tuning Advisor</h2>
<p>You can invoke SQL Tuning Advisor manually for on-demand tuning of one or more SQL statements. To tune multiple statements, you must create a <a id="sthref1372"></a>SQL tuning set (STS). A SQL tuning set is a database object that stores SQL statements along with their execution context. You can create a SQL tuning set using command line APIs or Enterprise Manager. See <a href="#i34915">"Managing SQL Tuning Sets"</a>.</p>
<a id="CHDJBGIE"></a>
<div id="PFGRF94852" class="sect2">
<h3 class="sect2"><span class="secnum">17.3.1</span> Input Sources</h3>
<p>Input for <a id="sthref1373"></a>SQL Tuning Advisor can come from several sources, including the following:</p>
<ul>
<li>
<p>ADDM (Automatic Database Diagnostic Monitor)</p>
<p>The primary input source is ADDM. By default, ADDM runs proactively once every hour and analyzes key statistics gathered by the Automatic Workload Repository (AWR) over the last hour to identify any performance problems including high-load SQL statements. If a high-load SQL is identified, ADDM recommends running SQL Tuning Advisor on the SQL. See <a href="diag.htm#i37241">"Overview of the Automatic Database Diagnostic Monitor"</a>.</p>
</li>
<li>
<p>AWR</p>
<p>The second most important input source is the Automatic Workload Repository (AWR). AWR takes regular snapshots of system activity, including high-load SQL statements ranked by relevant statistics, such as CPU consumption and wait time.</p>
<p>You can view the AWR and manually identify high-load SQL statements. You can run SQL Tuning Advisor on these statements, although Oracle Database automatically performs this work as part of automatic SQL tuning. By default, AWR retains data for the last eight days. You can locate and tune any high-load SQL that ran within the retention period of AWR using this method. See <a href="autostat.htm#i27008">"Overview of the Automatic Workload Repository"</a>.</p>
</li>
<li>
<p>Shared SQL area</p>
<p>The third likely source of input is the shared SQL area. The database uses this source to tune recent SQL statements that have yet to be captured in the AWR. The shared SQL area and AWR provide the capability to identify and tune high-load SQL statements from the current time going as far back as the AWR retention allows, which by default is at least 8 days.</p>
</li>
<li>
<p>SQL tuning set</p>
<p>Another possible input source for SQL Tuning Advisor is the SQL tuning set. A SQL tuning set <a id="sthref1374"></a>(STS) is a database object that stores SQL statements along with their execution context. An STS can include SQL statements that are yet to be deployed, with the goal of measuring their individual performance, or identifying the ones whose performance falls short of expectation. When a set of SQL statements serve as input, the database must first construct and use an STS. See <a href="#i34915">"Managing SQL Tuning Sets"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDFHCIF"></a>
<div id="PFGRF94853" class="sect2">
<h3 class="sect2"><span class="secnum">17.3.2</span> Tuning Options</h3>
<p><a id="sthref1375"></a>SQL Tuning Advisor provides options to manage the scope and duration of a tuning task. You can set the scope of a tuning task either of the following:</p>
<ul>
<li>
<p>Limited</p>
<p>In this case, SQL Tuning Advisor produces recommendations based on statistical checks, access path analysis, and SQL structure analysis. SQL profile recommendations are not generated.</p>
</li>
<li>
<p>Comprehensive</p>
<p>In this case, SQL Tuning Advisor carries out all the analysis it performs under limited scope plus SQL Profiling. With the comprehensive option you can also specify a time limit for the tuning task, which by default is 30 minutes.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDCBEGH"></a>
<div id="PFGRF94854" class="sect2">
<h3 class="sect2"><span class="secnum">17.3.3</span> Advisor Output</h3>
<p>After analyzing the SQL statements, SQL Tuning Advisor provides advice on optimizing the execution plan, the rationale for the proposed optimization, the estimated performance benefit, and the command to implement the advice. You choose whether to accept the recommendations to optimize the SQL statements.</p>
</div>
<!-- class="sect2" -->
<a id="i34827"></a>
<div id="PFGRF02802" class="sect2">
<h3 class="sect2"><span class="secnum">17.3.4</span> Running SQL Tuning Advisor</h3>
<p>The recommended interface for running SQL Tuning Advisor is Enterprise Manager. Whenever possible, run SQL Tuning Advisor using Enterprise Manager, as described in the <a class="olink TDPPT161" href="../../server.112/e10822/tdppt_sqltune.htm#TDPPT161"><span class="italic">Oracle Database 2 Day + Performance Tuning Guide</span></a>. <a id="sthref1376"></a><a id="sthref1377"></a>If Enterprise Manager is unavailable, then you can run SQL Tuning Advisor using procedures in the <code>DBMS_SQLTUNE</code> package. To use the APIs, the user must be granted specific privileges.</p>
<p>Running SQL Tuning Advisor using <code>DBMS_SQLTUNE</code> package is a multi-step process:</p>
<ol>
<li>
<p>Create a SQL tuning set (if tuning multiple SQL statements)</p>
</li>
<li>
<p>Create a SQL tuning task</p>
</li>
<li>
<p>Execute a SQL tuning task</p>
</li>
<li>
<p>Display the results of a SQL tuning task</p>
</li>
<li>
<p>Implement recommendations as appropriate</p>
</li>
</ol>
<p>You can create a SQL tuning task for a single SQL statement. For tuning multiple statements, a <a id="sthref1378"></a>SQL tuning set (STS) has to be first created. An STS is a database object that stores SQL statements along with their execution context. You can create an STS manually using command line APIs or automatically using Enterprise Manager. See <a href="#i34915">"Managing SQL Tuning Sets"</a>.</p>
<p><a href="#CHDIHFHA">Figure 17-2</a> shows the steps involved when running SQL Tuning Advisor using the <code>DBMS_SQLTUNE</code> package.</p>
<div id="PFGRF94855" class="figure">
<p class="titleinfigure"><a id="CHDIHFHA"></a>Figure 17-2 SQL Tuning Advisor APIs</p>
<img width="452" height="357" src="img/pfgrf217.gif" alt="Description of Figure 17-2 follows" /><br />
<a id="sthref1379" href="img_text/pfgrf217.htm">Description of "Figure 17-2 SQL Tuning Advisor APIs"</a><br />
<br /></div>
<!-- class="figure" -->
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CHDJDHGE">Creating a SQL Tuning Task</a></p>
</li>
<li>
<p><a href="#CHDDDIBA">Configuring a SQL Tuning Task</a></p>
</li>
<li>
<p><a href="#CHDGHAFB">Executing a SQL Tuning Task</a></p>
</li>
<li>
<p><a href="#CHDEHGBC">Checking the Status of a SQL Tuning Task</a></p>
</li>
<li>
<p><a href="#CHDECCCD">Checking the Progress of SQL Tuning Advisor</a></p>
</li>
<li>
<p><a href="#CHDDGAEB">Displaying the Results of a SQL Tuning Task</a></p>
</li>
<li>
<p><a href="#CHDCEFIF">Additional Operations on a SQL Tuning Task</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink TDPPT310" href="../../server.112/e10822/tdppt_sqltune.htm#TDPPT310"><span class="italic">Oracle Database 2 Day + Performance Tuning Guide</span></a> to learn how to run SQL Tuning Advisor manually using Enterprise Manager</p>
</li>
<li>
<p><a class="olink ARPLS220" href="../../appdev.112/e40758/d_sqltun.htm#ARPLS220"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code>DBMS_SQLTUNE</code> package</p>
</li>
</ul>
</div>
<a id="CHDJDHGE"></a>
<div id="PFGRF94856" class="sect3">
<h4 class="sect3"><span class="secnum">17.3.4.1</span> Creating a SQL Tuning Task</h4>
<p>You can create tuning tasks from the text of a single SQL statement, a SQL tuning set containing multiple statements, a SQL statement selected by SQL identifier from the shared SQL area, or a SQL statement selected by SQL identifier from AWR.</p>
<p>For example, to use SQL Tuning Advisor to optimize a specified SQL statement text, create a tuning task with the SQL statement passed as a CLOB argument. For the following PL/SQL code, the user <code>hr</code> has been granted the <code>ADVISOR</code> privilege, and the function is run as user <code>hr</code> on the <code>hr.employees</code> table.</p>
<pre>
DECLARE
 my_task_name VARCHAR2(30);
 my_sqltext   CLOB;
BEGIN
 my_sqltext := 'SELECT /*+ ORDERED */ * '                      ||
               'FROM employees e, locations l, departments d ' ||
               'WHERE e.department_id = d.department_id AND '  ||
                     'l.location_id = d.location_id AND '      ||
                     'e.employee_id &lt; :bnd';

 my_task_name := DBMS_SQLTUNE.CREATE_TUNING_TASK(
         sql_text    =&gt; my_sqltext,
         bind_list   =&gt; sql_binds(anydata.ConvertNumber(100)),
         user_name   =&gt; 'HR',
         scope       =&gt; 'COMPREHENSIVE',
         time_limit  =&gt; 60,
         task_name   =&gt; 'my_sql_tuning_task',
         description =&gt; 'Task to tune a query on a specified employee');
END;
/
</pre>
<p>In the preceding example, <code>100</code> is the value for bind variable <code>:bnd</code> passed as function argument of type <code>SQL_BINDS</code>, <code>HR</code> is the user under which the <code>CREATE_TUNING_TASK</code> function analyzes the SQL statement, the scope is set to <code>COMPREHENSIVE</code> which means that the advisor also performs SQL Profiling analysis, and 60 is the maximum time in seconds that the function can run. In addition, values for task name and description are provided.</p>
<p>The <code>CREATE_TUNING_TASK</code> function returns the task name that you provided or generates a unique name. You can use the task name to specify this task when using other APIs. To view task names associated with an owner, run the following query:</p>
<pre>
SELECT TASK_NAME 
FROM   DBA_ADVISOR_LOG 
WHERE  OWNER = 'HR';
</pre></div>
<!-- class="sect3" -->
<a id="CHDDDIBA"></a>
<div id="PFGRF94857" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">17.3.4.2</span> Configuring a SQL Tuning Task</h4>
<p>You can fine tune a SQL tuning task after it has been created by configuring its parameters using the <code>SET_TUNING_TASK_PARAMETER</code> procedure in the <code>DBMS_SQLTUNE</code> package:</p>
<pre>
BEGIN
  DBMS_SQLTUNE.SET_TUNING_TASK_PARAMETER(
    task_name =&gt; 'my_sql_tuning_task',
    parameter =&gt; 'TIME_LIMIT', value =&gt; 300);
END;
/
</pre>
<p>In the preceding example, the maximum time that the SQL tuning task can run is changed to 300 seconds.</p>
<p><a href="#CHDBIDAD">Table 17-2</a> lists parameters that you can configure using the <code>SET_TUNING_TASK_PARAMETER</code> procedure.</p>
<div id="PFGRF94858" class="tblformal">
<p class="titleintable"><a id="sthref1380"></a><a id="CHDBIDAD"></a>Table 17-2 SET_TUNING_TASK_PARAMETER Procedure Parameters</p>
<table class="cellalignment1686" title="SET_TUNING_TASK_PARAMETER Procedure Parameters" summary="Lists and describes the parameters that can be configured using the SET_TUNING_TASK_PARAMETER procedure" dir="ltr">
<thead>
<tr class="cellalignment1680">
<th class="cellalignment1687" id="r1c1-t10">Parameter</th>
<th class="cellalignment1687" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r2c1-t10" headers="r1c1-t10">
<p><code>MODE</code></p>
</td>
<td class="cellalignment1688" headers="r2c1-t10 r1c2-t10">
<p>Specifies the scope of the tuning task:</p>
<ul>
<li>
<p><code>LIMITED</code> takes approximately 1 second to tune each SQL statement but does not recommend a SQL profile</p>
</li>
<li>
<p><code>COMPREHENSIVE</code> performs a complete analysis and recommends a SQL profile, when appropriate, but may take much longer.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r3c1-t10" headers="r1c1-t10">
<p><code>USERNAME</code></p>
</td>
<td class="cellalignment1688" headers="r3c1-t10 r1c2-t10">
<p>Username under which the SQL statement is parsed</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r4c1-t10" headers="r1c1-t10">
<p><code>DAYS_TO_EXPIRE</code></p>
</td>
<td class="cellalignment1688" headers="r4c1-t10 r1c2-t10">
<p>Number of days before the task is deleted</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r5c1-t10" headers="r1c1-t10">
<p><code>DEFAULT_EXECUTION_TYPE</code></p>
</td>
<td class="cellalignment1688" headers="r5c1-t10 r1c2-t10">
<p>Default execution type if not specified by the <code>EXECUTE_TUNING_TASK</code> function when the task is executed</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r6c1-t10" headers="r1c1-t10">
<p><code>TIME_LIMIT</code></p>
</td>
<td class="cellalignment1688" headers="r6c1-t10 r1c2-t10">
<p>Time limit (in number of seconds) before the task times out</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r7c1-t10" headers="r1c1-t10">
<p><code>LOCAL_TIME_LIMIT</code></p>
</td>
<td class="cellalignment1688" headers="r7c1-t10 r1c2-t10">
<p>Time limit (in number of seconds) for each SQL statement</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r8c1-t10" headers="r1c1-t10">
<p><code>TEST_EXECUTE</code></p>
</td>
<td class="cellalignment1688" headers="r8c1-t10 r1c2-t10">
<p>Determines if the SQL Tuning Advisor test executes the SQL statements to verify the recommendation benefit:</p>
<ul>
<li>
<p><code>FULL</code> - Test executes SQL statements for as much of the local time limit as necessary</p>
</li>
<li>
<p><code>AUTO</code> - Test executes SQL statements using an automatic time limit</p>
</li>
<li>
<p><code>OFF</code> - Does not test execute SQL statements</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r9c1-t10" headers="r1c1-t10">
<p><code>BASIC_FILTER</code></p>
</td>
<td class="cellalignment1688" headers="r9c1-t10 r1c2-t10">
<p>Basic filter used for SQL tuning set</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r10c1-t10" headers="r1c1-t10">
<p><code>OBJECT_FILTER</code></p>
</td>
<td class="cellalignment1688" headers="r10c1-t10 r1c2-t10">
<p>Object filter used for SQL tuning set</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r11c1-t10" headers="r1c1-t10">
<p><code>PLAN_FILTER</code></p>
</td>
<td class="cellalignment1688" headers="r11c1-t10 r1c2-t10">
<p>Plan filter used for SQL tuning set</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r12c1-t10" headers="r1c1-t10">
<p><code>RANK_MEASURE1</code></p>
</td>
<td class="cellalignment1688" headers="r12c1-t10 r1c2-t10">
<p>First ranking measure used for SQL tuning set</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r13c1-t10" headers="r1c1-t10">
<p><code>RANK_MEASURE2</code></p>
</td>
<td class="cellalignment1688" headers="r13c1-t10 r1c2-t10">
<p>Second ranking measure used for SQL tuning set</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r14c1-t10" headers="r1c1-t10">
<p><code>RANK_MEASURE3</code></p>
</td>
<td class="cellalignment1688" headers="r14c1-t10 r1c2-t10">
<p>Third ranking measure used for SQL tuning set</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r15c1-t10" headers="r1c1-t10">
<p><code>RESUME_FILTER</code></p>
</td>
<td class="cellalignment1688" headers="r15c1-t10 r1c2-t10">
<p>Extra filter used for SQL tuning set (besides <code>BASIC_FILTER</code>)</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r16c1-t10" headers="r1c1-t10">
<p><code>SQL_LIMIT</code></p>
</td>
<td class="cellalignment1688" headers="r16c1-t10 r1c2-t10">
<p>Maximum number of SQL statements to tune</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r17c1-t10" headers="r1c1-t10">
<p><code>SQL_PERCENTAGE</code></p>
</td>
<td class="cellalignment1688" headers="r17c1-t10 r1c2-t10">
<p>Percentage filter of statements from SQL tuning set</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<a id="CHDGHAFB"></a>
<div id="PFGRF94859" class="sect3">
<h4 class="sect3"><span class="secnum">17.3.4.3</span> Executing a SQL Tuning Task</h4>
<p>After you have created a tuning task, execute the task and start the tuning process. For example, run the following PL/SQL code:</p>
<pre>
BEGIN
  DBMS_SQLTUNE.EXECUTE_TUNING_TASK( task_name =&gt; 'my_sql_tuning_task' );
END;
/
</pre>
<p>Like any other SQL Tuning Advisor task, you can also execute the automatic tuning task <code>SYS_AUTO_SQL_TUNING_TASK</code> using the <code>EXECUTE_TUNING_TASK</code> API. SQL Tuning Advisor performs the same analysis and actions as it would when run automatically. You can also pass an execution name to the API to name the new execution.</p>
</div>
<!-- class="sect3" -->
<a id="CHDEHGBC"></a>
<div id="PFGRF94860" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">17.3.4.4</span> Checking the Status of a SQL Tuning Task</h4>
<p>You can check the status of the task by reviewing the information in the <code>USER_ADVISOR_TASKS</code> view or check execution progress of the task in the <code>V$SESSION_LONGOPS</code> view. For example, run the following query:</p>
<pre>
SELECT status 
FROM   USER_ADVISOR_TASKS 
WHERE  task_name = 'my_sql_tuning_task';
</pre></div>
<!-- class="sect3" -->
<a id="CHDECCCD"></a>
<div id="PFGRF02801" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">17.3.4.5</span> Checking the Progress of SQL Tuning Advisor</h4>
<p>You can check the execution progress of SQL Tuning Advisor in the <a id="sthref1381"></a><code>V$ADVISOR_PROGRESS</code> view. For example, run the following query:</p>
<pre>
SELECT SOFAR, TOTALWORK 
FROM   V$ADVISOR_PROGRESS 
WHERE  USER_NAME = 'HR' AND TASK_NAME = 'my_sql_tuning_task';
</pre>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a class="olink REFRN30327" href="../../server.112/e40402/dynviews_1008.htm#REFRN30327"><span class="italic">Oracle Database Reference</span></a> to learn about the <code>V$ADVISOR_PROGRESS</code> view</div>
</div>
<!-- class="sect3" -->
<a id="CHDDGAEB"></a>
<div id="PFGRF94861" class="sect3">
<h4 class="sect3"><span class="secnum">17.3.4.6</span> Displaying the Results of a SQL Tuning Task</h4>
<p>After a task has been executed, you display a report of the results with the <code>REPORT_TUNING_TASK</code> function. For example:</p>
<pre>
SET LONG 1000
SET LONGCHUNKSIZE 1000
SET LINESIZE 100
SELECT DBMS_SQLTUNE.REPORT_TUNING_TASK( 'my_sql_tuning_task')
FROM   DUAL;
</pre>
<p>The report contains all the findings and recommendations of SQL Tuning Advisor. For each proposed recommendation, the rationale and benefit is provided along with the SQL statements needed to implement the recommendation.</p>
<p>You can find additional information about tuning tasks and results in DBA views. See <a href="#i35947">"SQL Tuning Views"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CHDCEFIF"></a>
<div id="PFGRF94862" class="sect3">
<h4 class="sect3"><span class="secnum">17.3.4.7</span> Additional Operations on a SQL Tuning Task</h4>
<p>You can use the following APIs for managing SQL tuning tasks:</p>
<ul>
<li>
<p><code>INTERRUPT_TUNING_TASK</code> to interrupt a task while executing, causing a normal exit with intermediate results</p>
</li>
<li>
<p><code>RESUME_TUNING_TASK</code> to resume a previously interrupted task</p>
</li>
<li>
<p><code>CANCEL_TUNING_TASK</code> to cancel a task while executing, removing all results from the task</p>
</li>
<li>
<p><code>RESET_TUNING_TASK</code> to reset a task while executing, removing all results from the task and returning the task to its initial state</p>
</li>
<li>
<p><code>DROP_TUNING_TASK</code> to drop a task, removing all results associated with the task</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i34915"></a>
<div id="PFGRF02604" class="sect1">
<h2 class="sect1"><span class="secnum">17.4</span> Managing SQL Tuning Sets</h2>
<p>A <a id="sthref1382"></a><span class="bold">SQL tuning set (STS)</span> is a database object that includes one or more SQL statements along with their execution statistics and execution context, and could include a user priority ranking. You can load SQL statements into a SQL tuning set from different SQL sources, such as AWR, the shared SQL area, or customized SQL provided by the user. An STS includes:</p>
<ul>
<li>
<p>A set of SQL statements</p>
</li>
<li>
<p>Associated execution context, such as user schema, application module name and action, list of bind values, and the cursor compilation environment</p>
</li>
<li>
<p>Associated basic execution statistics, such as elapsed time, CPU time, buffer gets, disk reads, rows processed, cursor fetches, the number of executions, the number of complete executions, optimizer cost, and the command type</p>
</li>
<li>
<p>Associated execution plans and row source statistics for each SQL statement (optional)</p>
</li>
</ul>
<p>You can filter SQL statements using the application module name and action, or any of the execution statistics. In addition, you can rank statements based on any combination of execution statistics.</p>
<p>You can use an STS as input to SQL Tuning Advisor, which performs automatic tuning of the SQL statements based on other user-specified input parameters. You can export SQL tuning sets from one database to another, enabling transfer of SQL workloads between databases for remote performance diagnostics and tuning. When poorly performing SQL statements occur on a production database, developers may not want investigate and tune directly on the production database. The DBA can transport the problematic SQL statements to a test database where the developers can safely analyze and tune them. To transport SQL tuning sets, use the <code>DBMS_SQLTUNE</code> package.</p>
<p>Whenever possible, you should manage SQL tuning sets using Enterprise Manager, as described in the <a class="olink TDPPT164" href="../../server.112/e10822/tdppt_sqltune.htm#TDPPT164"><span class="italic">Oracle Database 2 Day + Performance Tuning Guide</span></a>. <a id="sthref1383"></a><a id="sthref1384"></a>If Enterprise Manager is unavailable, then you can manage <a id="sthref1385"></a><a id="sthref1386"></a>SQL tuning sets using the <code>DBMS_SQLTUNE</code> package procedures.</p>
<p>Typically, you use STS operations in the following sequence:</p>
<ol>
<li>
<p>Create a new STS</p>
<p><a href="#CHDHFGCJ">"Creating a SQL Tuning Set"</a> describes this task.</p>
</li>
<li>
<p>Load the STS</p>
<p><a href="#i34940">"Loading a SQL Tuning Set"</a> describes this task.</p>
</li>
<li>
<p>Select the STS to review the contents</p>
<p><a href="#CHDBFEDH">"Displaying the Contents of a SQL Tuning Set"</a> describes this task.</p>
</li>
<li>
<p>Update the STS if necessary</p>
<p><a href="#CHDDGJIE">"Modifying a SQL Tuning Set"</a> describes this task.</p>
</li>
<li>
<p>Create a tuning task with the STS as input</p>
</li>
<li>
<p>Transport the STS to another system, if necessary</p>
<p><a href="#CHDEBDFC">"Transporting a SQL Tuning Set"</a> describes this task.</p>
</li>
<li>
<p>Drop the STS when finished</p>
<p><a href="#CHDFBHGJ">"Dropping a SQL Tuning Set"</a> describes this task.</p>
</li>
</ol>
<p>To use the APIs, you need the <code>ADMINISTER SQL TUNING SET</code> system privilege to manage SQL tuning sets that you own, or the <code>ADMINISTER</code> <code>ANY</code> <code>SQL</code> <code>TUNING</code> <code>SET</code> system privilege to manage any SQL tuning sets.</p>
<p><a href="#CHDFFICA">Figure 17-3</a> shows the steps involved when using SQL tuning sets APIs.</p>
<div id="PFGRF94863" class="figure">
<p class="titleinfigure"><a id="CHDFFICA"></a>Figure 17-3 SQL Tuning Sets APIs</p>
<img width="659" height="291" src="img/pfgrf218.gif" alt="Description of Figure 17-3 follows" /><br />
<a id="sthref1387" href="img_text/pfgrf218.htm">Description of "Figure 17-3 SQL Tuning Sets APIs"</a><br />
<br /></div>
<!-- class="figure" -->
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CHDHFGCJ">Creating a SQL Tuning Set</a></p>
</li>
<li>
<p><a href="#i34940">Loading a SQL Tuning Set</a></p>
</li>
<li>
<p><a href="#CHDBFEDH">Displaying the Contents of a SQL Tuning Set</a></p>
</li>
<li>
<p><a href="#CHDDGJIE">Modifying a SQL Tuning Set</a></p>
</li>
<li>
<p><a href="#CHDEBDFC">Transporting a SQL Tuning Set</a></p>
</li>
<li>
<p><a href="#CHDFBHGJ">Dropping a SQL Tuning Set</a></p>
</li>
<li>
<p><a href="#CHDECDAF">Additional Operations on SQL Tuning Sets</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink TDPPT164" href="../../server.112/e10822/tdppt_sqltune.htm#TDPPT164"><span class="italic">Oracle Database 2 Day + Performance Tuning Guide</span></a> to learn how to manage SQL tuning sets using Enterprise Manager</p>
</li>
<li>
<p><a class="olink ARPLS220" href="../../appdev.112/e40758/d_sqltun.htm#ARPLS220"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code>DBMS_SQLTUNE</code> package</p>
</li>
</ul>
</div>
<a id="CHDHFGCJ"></a>
<div id="PFGRF94864" class="sect2">
<h3 class="sect2"><span class="secnum">17.4.1</span> Creating a SQL Tuning Set</h3>
<p>The <code>CREATE_SQLSET</code> procedure creates an empty STS object in the database. For example, the following procedure creates an STS object that you could use to tune I/O-intensive SQL statements during a specific period:</p>
<pre>
BEGIN
  DBMS_SQLTUNE.CREATE_SQLSET(
    sqlset_name =&gt; 'my_sql_tuning_set', 
    description  =&gt; 'I/O intensive workload');
END;
/
</pre>
<p>In the preceding example, <code>my_sql_tuning_set</code> is the name of the STS in the database. <code>'I/O intensive workload'</code> is the description assigned to the STS.</p>
</div>
<!-- class="sect2" -->
<a id="i34940"></a>
<div id="PFGRF94865" class="sect2">
<h3 class="sect2"><span class="secnum">17.4.2</span> Loading a SQL Tuning Set</h3>
<p>The <code>LOAD_SQLSET</code> procedure populates the STS with selected SQL statements. The standard sources for populating an STS are the workload repository, another STS, or the shared SQL area. For both the workload repository and STS, predefined table functions can select columns from the source to populate a new STS.</p>
<p>In the following example, procedure calls load <code>my_sql_tuning_set</code> from an AWR baseline called <code>peak</code> <code>baseline</code>. The data has been filtered to select only the top 30 SQL statements ordered by elapsed time. First a ref cursor is opened to select from the specified baseline. Next the statements and their statistics are loaded from the baseline into the STS.</p>
<pre>
DECLARE
 baseline_cursor DBMS_SQLTUNE.SQLSET_CURSOR;
BEGIN
 OPEN baseline_cursor FOR
    SELECT VALUE(p)
    FROM TABLE (DBMS_SQLTUNE.SELECT_WORKLOAD_REPOSITORY(
                  'peak baseline',
                   NULL, NULL,
                   'elapsed_time',
                   NULL, NULL, NULL,
                   30)) p;

    DBMS_SQLTUNE.LOAD_SQLSET(
             sqlset_name     =&gt; 'my_sql_tuning_set',
             populate_cursor =&gt; baseline_cursor);
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CHDBFEDH"></a>
<div id="PFGRF94866" class="sect2">
<h3 class="sect2"><span class="secnum">17.4.3</span> Displaying the Contents of a SQL Tuning Set</h3>
<p>The <code>SELECT_SQLSET</code> table function reads the contents of the STS. After an STS has been created and populated, you can browse the SQL in the STS using different filtering criteria. The <code>SELECT_SQLSET</code> procedure is provided for this purpose.</p>
<p>In the following example, the SQL statements in the STS are displayed for statements with a disk-reads to buffer-gets ratio greater than or equal to 75%.</p>
<pre>
SELECT * FROM TABLE(DBMS_SQLTUNE.SELECT_SQLSET( 
   'my_sql_tuning_set',
   '(disk_reads/buffer_gets) &gt;= 0.75'));
</pre>
<p>Additional details of the SQL tuning sets that have been created and loaded can also be displayed with DBA views, such as <code>DBA_SQLSET</code>, <code>DBA_SQLSET_STATEMENTS</code>, and <code>DBA_SQLSET_BINDS</code>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDDGJIE"></a>
<div id="PFGRF94867" class="sect2">
<h3 class="sect2"><span class="secnum">17.4.4</span> Modifying a SQL Tuning Set</h3>
<p>You can update and delete SQL statements from an STS based on a search condition. In the following example, the <code>DELETE_SQLSET</code> procedure deletes SQL statements from <code>my_sql_tuning_set</code> that have been executed less than fifty times.</p>
<pre>
BEGIN
  DBMS_SQLTUNE.DELETE_SQLSET(
      sqlset_name  =&gt; 'my_sql_tuning_set',
      basic_filter =&gt; 'executions &lt; 50');
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CHDEBDFC"></a>
<div id="PFGRF94868" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">17.4.5</span> Transporting a SQL Tuning Set</h3>
<p>You can <span class="bold">transport</span> SQL tuning sets. This operation involves exporting the STS from one database to a staging table, and then importing the STS from the staging table into another database.</p>
<p>You can transport a SQL tuning set to any database created in Oracle Database 10<span class="italic">g</span> (Release 2) or later. This technique is useful when using SQL Performance Analyzer to tune regressions on a test database. For example, you can transport an STS in the following scenario:</p>
<ul>
<li>
<p>An STS with regressed SQL resides in a production database created in Oracle Database 11<span class="italic">g</span> Release 2 (11.2).</p>
</li>
<li>
<p>You are running SQL Performance Analyzer trials on a remote test database created in Oracle Database 11<span class="italic">g</span> Release 1 (11.1) or Oracle Database 10<span class="italic">g</span>.</p>
</li>
<li>
<p>You want to copy the STS from the production database to the test database and tune the regressions from the SQL Performance Analyzer trials.</p>
</li>
</ul>
<p class="orderedlisttitle">To transport a SQL tuning set:&nbsp;</p>
<ol>
<li>
<p>Use the <code>CREATE_STGTAB_SQLSET</code> procedure to create a staging table where the SQL tuning sets will be exported.</p>
<p>The following example creates <code>my_10g_staging_table</code> in the <code>dba1</code> schema and specifies the format of the staging table as 10.2:</p>
<pre>
BEGIN
  DBMS_SQLTUNE.create_stgtab_sqlset( 
    table_name  =&gt; 'my_10g_staging_table',
    schema_name =&gt; 'dba1',
    db_version  =&gt; DBMS_SQLTUNE.STS_STGTAB_10_2_VERSION );
END;
/
</pre></li>
<li>
<p>Use the <code>PACK_STGTAB_SQLSET</code> procedure to export SQL tuning sets into the staging table.</p>
<p>The following example populates <code>dba1.my_10g_staging_table</code> with the STS <code>my_sts</code> owned by <code>hr</code>:</p>
<pre>
BEGIN
  DBMS_SQLTUNE.pack_stgtab_sqlset(      
    sqlset_name          =&gt; 'my_sts',     
    sqlset_owner         =&gt; 'hr',     
    staging_table_name   =&gt; 'my_10g_staging_table',
    staging_schema_owner =&gt; 'dba1',
    db_version           =&gt; DBMS_SQLTUNE.STS_STGTAB_10_2_VERSION );
END;
/ 
</pre></li>
<li>
<p>Move the staging table to the database where the SQL tuning sets will be imported using the mechanism of choice (such as Oracle Data Pump or database link).</p>
</li>
<li>
<p>On the database where the SQL tuning sets will be imported, use the <code>UNPACK_STGTAB_SQLSET</code> procedure to import SQL tuning sets from the staging table.</p>
<p>The following example shows how to import SQL tuning sets contained in the staging table:</p>
<pre>
BEGIN
  DBMS_SQLTUNE.UNPACK_STGTAB_SQLSET(
      sqlset_name  =&gt; '%',
      replace  =&gt; TRUE,
      staging_table_name =&gt; 'my_10g_staging_table');
END;
/
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDFBHGJ"></a>
<div id="PFGRF94869" class="sect2">
<h3 class="sect2"><span class="secnum">17.4.6</span> Dropping a SQL Tuning Set</h3>
<p>The <code>DROP_SQLSET</code> procedure drops an STS that is no longer needed. For example:</p>
<pre>
BEGIN
  DBMS_SQLTUNE.DROP_SQLSET( sqlset_name =&gt; 'my_sql_tuning_set' );
END;
/
</pre></div>
<!-- class="sect2" -->
<a id="CHDECDAF"></a>
<div id="PFGRF94870" class="sect2">
<h3 class="sect2"><span class="secnum">17.4.7</span> Additional Operations on SQL Tuning Sets</h3>
<p>You can use the following APIs to manage an STS:</p>
<ul>
<li>
<p>Updating the attributes of SQL statements in an STS</p>
<p>The <code>UPDATE_SQLSET</code> procedure updates the attributes of SQL statements (such as <code>PRIORITY</code> or <code>OTHER</code>) in an existing STS identified by STS name and SQL ID.</p>
</li>
<li>
<p>Capturing the full system workload</p>
<p>The <code>CAPTURE_CURSOR_CACHE_SQLSET</code> function enables the capture of the full system workload by repeatedly polling the shared SQL area over a specified interval. This function more efficient than repeatedly using the <code>SELECT_CURSOR_CACHE</code> and <code>LOAD_SQLSET</code> procedures to capture the shared SQL area over an extended period. This function effectively captures the entire workload, as opposed to the AWR&mdash;which only captures the workload of high-load SQL statements&mdash;or the <code>LOAD_SQLSET</code> procedure, which accesses the data source only once.</p>
</li>
<li>
<p>Adding and removing a reference to an STS</p>
<p>The <code>ADD_SQLSET_REFERENCE</code> function adds a new reference to an existing STS to indicate its use by a client. The function returns the identifier of the added reference. The <code>REMOVE_SQLSET_REFERENCE</code> procedure deactivates an STS to indicate it is no longer used by the client.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i36634"></a>
<div id="PFGRF02605" class="sect1">
<h2 class="sect1"><span class="secnum">17.5</span> Managing SQL Profiles</h2>
<p>A <span class="bold">SQL profile</span> is a set of auxiliary information specific to a SQL statement.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDBHJEA">Overview of SQL Profiles</a></p>
</li>
<li>
<p><a href="#CHDDGHIG">Accepting a SQL Profile</a></p>
</li>
<li>
<p><a href="#CHDDABDE">Altering a SQL Profile</a></p>
</li>
<li>
<p><a href="#CHDIDBBG">Dropping a SQL Profile</a></p>
</li>
<li>
<p><a href="#CHDGHGCJ">Transporting a SQL Profile</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink TDPPT163" href="../../server.112/e10822/tdppt_sqltune.htm#TDPPT163"><span class="italic">Oracle Database 2 Day + Performance Tuning Guide</span></a> to learn how to manage SQL profiles using Enterprise Manager</div>
<a id="CHDBHJEA"></a>
<div id="PFGRF95159" class="sect2">
<h3 class="sect2"><span class="secnum">17.5.1</span> Overview of SQL Profiles</h3>
<p>A SQL profile contains corrections for poor optimizer estimates discovered during Automatic SQL Tuning. This information can improve optimizer cardinality and selectivity estimates, which in turn leads the optimizer to select better plans.</p>
<p>The SQL profile does not contain information about individual execution plans. Rather, the optimizer has the following sources of information when choosing plans:</p>
<ul>
<li>
<p>The environment, which contains the database configuration, bind variable values, optimizer statistics, data set, and so on</p>
</li>
<li>
<p>The supplemental statistics in the SQL profile</p>
</li>
</ul>
<p>If the environment or SQL profile change, then the optimizer can create a new plan.</p>
<p>You can use SQL profiles with or without SQL plan management. If you use SQL plan management, then the plan chosen by the optimizer must be an enabled plan baseline. If the statement has multiple plans in the baseline, then the profile remains useful because it enables the optimizer to chose the lowest-cost plan in the baseline.</p>
<p><a href="#CACCCDFJ">Figure 17-4</a> illustrates the relationship between a SQL statement and the SQL profile for this statement. The optimizer uses the profile and the environment to generate a query plan. In this example, the plan is in the SQL plan baseline for the statement.</p>
<div id="PFGRF95295" class="figure">
<p class="titleinfigure"><a id="CACCCDFJ"></a>Figure 17-4 SQL Profile</p>
<img width="594" height="221" src="img/pfgrf234.gif" alt="Description of Figure 17-4 follows" /><br />
<a id="sthref1389" href="img_text/pfgrf234.htm">Description of "Figure 17-4 SQL Profile"</a><br />
<br /></div>
<!-- class="figure" -->
<p>SQL profiles provide the following benefits:</p>
<ul>
<li>
<p>Unlike hints and stored outlines, profiles do not tie the optimizer to a specific plan or subplan. Profiles fix incorrect estimates while giving the optimizer the flexibility to pick the best plan in different situations.</p>
</li>
<li>
<p>Unlike hints, no changes to application source code are necessary when using profiles.</p>
<p>The use of SQL profiles by the database is transparent to the user.</p>
</li>
</ul>
<a id="CHDGDAGB"></a>
<div id="PFGRF95161" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">17.5.1.1</span> SQL Profile Recommendations</h4>
<p>During SQL tuning, you select a statement for automatic tuning and run SQL Tuning Advisor. The database can profile the following types of statement:</p>
<ul>
<li>
<p>DML statements (<code>SELECT</code>, <code>INSERT</code> with a <code>SELECT</code> clause, <code>UPDATE</code>, and <code>DELETE</code>)</p>
</li>
<li>
<p><code>CREATE</code> <code>TABLE</code> statements (only with the <code>AS</code> <code>SELECT</code> clause)</p>
</li>
<li>
<p><code>MERGE</code> statements (the update or insert operations)</p>
</li>
</ul>
<p>SQL Tuning Advisor invokes Automatic Tuning Optimizer to generate recommendations. Recommendations to accept SQL profiles occur in a finding.</p>
<p><a href="#CHDHBJEC">Example 17-3</a> shows that the database found a better plan for a <code>SELECT</code> statement that uses several expensive joins. The recommendation is to run <code>DBMS_SQLTUNE.ACCEPT_SQL_PROFILE</code> to accept the profile, which should enable the statement to run 98.53% faster.</p>
<div id="PFGRF95162" class="example">
<p class="titleinexample"><a id="CHDHBJEC"></a>Example 17-3 Sample SQL Profile Finding</p>
<pre>
-------------------------------------------------------------------------------
FINDINGS SECTION (2 findings)
-------------------------------------------------------------------------------
 
1- SQL Profile Finding (see explain plans section below)
--------------------------------------------------------
  A potentially better execution plan was found for this statement. Choose
  one of the following SQL profiles to implement.
 
  Recommendation (estimated benefit: 99.45%)
  ------------------------------------------
  - Consider accepting the recommended SQL profile.
    execute dbms_sqltune.accept_sql_profile(task_name =&gt; 'my_task',
            object_id =&gt; 3, task_owner =&gt; 'SH', replace =&gt; TRUE);
 
  Validation results
  ------------------
  The SQL profile was tested by executing both its plan and the original plan
  and measuring their respective execution statistics. A plan may have been
  only partially executed if the other could be run to completion in less time.
 
                           Original Plan  With SQL Profile  % Improved
                           -------------  ----------------  ----------
  Completion Status:             PARTIAL          COMPLETE
  Elapsed Time(us):            15467783            226902      98.53 %
  CPU Time(us):                15336668            226965      98.52 %
  User I/O Time(us):                  0                 0
  Buffer Gets:                  3375243             18227      99.45 %
  Disk Reads:                         0                 0
  Direct Writes:                      0                 0
  Rows Processed:                     0               109
  Fetches:                            0               109
  Executions:                         0                 1
 
  Notes
  -----
  1. The SQL profile plan was first executed to warm the buffer cache.
  2. Statistics for the SQL profile plan were averaged over next 3 executions.
</pre></div>
<!-- class="example" -->
<p>Sometimes SQL Tuning Advisor may recommend accepting a profile that uses the <span class="bold">Automatic Degree of Parallelism (Auto DOP)</span> feature. A parallel query profile is only recommended when the original plan is serial and when parallel execution can significantly reduce the response time for a long-running query. When it recommends a profile that uses Auto DOP, SQL Tuning Advisor gives details about the performance overhead of using parallel execution for the SQL statement in the report.</p>
<p>For parallel execution recommendations, SQL Tuning Advisor may provide two SQL profile recommendations, one using serial execution and one using parallel. In this case, the parallel profile is identical to the standard profile except for the directive to run in parallel.</p>
<p><a href="#CHDFHDAC">Example 17-4</a> shows a parallel query recommendation. In this example, a degree of parallelism of 7 improves response time significantly at the cost of increasing resource consumption by almost 25%. You must decide whether the reduction in database throughput is worth the increase in response time.</p>
<div id="PFGRF95163" class="example">
<p class="titleinexample"><a id="CHDFHDAC"></a>Example 17-4 Parallel Query Recommendation</p>
<pre>
  Recommendation (estimated benefit: 99.99%)
  ------------------------------------------
  - Consider accepting the recommended SQL profile to use parallel execution
    for this statement.
    execute dbms_sqltune.accept_sql_profile(task_name =&gt; 'gfk_task',
            object_id =&gt; 3, task_owner =&gt; 'SH', replace =&gt; TRUE,
            profile_type =&gt; DBMS_SQLTUNE.PX_PROFILE);
 
  Executing this query parallel with DOP 7 will improve its response time
  82.22% over the SQL profile plan. However, there is some cost in enabling
  parallel execution. It will increase the statement's resource consumption by
  an estimated 24.43% which may result in a reduction of system throughput.
  Also, because these resources are consumed over a much smaller duration, the
  response time of concurrent statements might be negatively impacted if
  sufficient hardware capacity is not available.
 
  The following data shows some sampled statistics for this SQL from the past
  week and projected weekly values when parallel execution is enabled.
 
                                 Past week sampled statistics for this SQL
                                 -----------------------------------------
  Number of executions                                                   0
  Percent of total activity                                            .29
  Percent of samples with #Active Sessions &gt; 2*CPU                       0
  Weekly DB time (in sec)                                            76.51
 
                              Projected statistics with Parallel Execution
                              --------------------------------------------
  Weekly DB time (in sec)                                            95.21
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<div id="PFGRF95164" class="sect3"><a id="sthref1390"></a>
<h4 class="sect3"><span class="secnum">17.5.1.2</span> SQL Profile Creation</h4>
<p>When you <span class="bold">accept</span> a profile, the database creates the profile and stores it persistently in the data dictionary. If a user issues a statement for which a profile has been built, then the query optimizer (in normal mode) uses both the environment and the SQL profile to build a well-tuned plan.</p>
<p>If the database uses SQL plan management, and if a SQL plan baseline exists for the SQL statement, then the database adds a new plan to the baseline when a SQL profile is created. Otherwise, the database does not add a new plan baseline.</p>
<p>No strict relationship exists between the SQL profile and the plan baseline. When hard parsing, the optimizer uses the SQL profile to select the best plan baseline from the available plans. In some conditions, the SQL profile may cause the optimizer to select different plan baselines.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="optplanmgmt.htm#BABEAFGG">Chapter 15, "Using SQL Plan Management"</a></div>
</div>
<!-- class="sect3" -->
<div id="PFGRF95165" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1391"></a>
<h4 class="sect3"><span class="secnum">17.5.1.3</span> SQL Profile APIs</h4>
<p>While SQL profiles are usually handled by Enterprise Manager as part of Automatic SQL tuning, you can manage SQL profiles with the <code>DBMS_SQLTUNE</code> package. To use the APIs, you must have the <code>ADMINISTER SQL MANAGEMENT OBJECT</code> privilege.</p>
<p><a href="#CHDIAACJ">Table 17-3</a> shows the main procedures and functions for managing SQL profiles.</p>
<div id="PFGRF95166" class="tblformalwide">
<p class="titleintable"><a id="sthref1392"></a><a id="CHDIAACJ"></a>Table 17-3 DBMS_SQLTUNE APIs for SQL Profiles</p>
<table class="cellalignment1691" title="DBMS_SQLTUNE APIs for SQL Profiles" summary="SQLTUNE APIs" dir="ltr">
<thead>
<tr class="cellalignment1680">
<th class="cellalignment1687" id="r1c1-t15">Procedure or Function</th>
<th class="cellalignment1687" id="r1c2-t15">Description</th>
<th class="cellalignment1687" id="r1c3-t15">Section</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r2c1-t15" headers="r1c1-t15">
<p><code>ACCEPT_SQL_PROFILE</code></p>
</td>
<td class="cellalignment1688" headers="r2c1-t15 r1c2-t15">
<p>Creates a SQL Profile for the specified tuning task</p>
</td>
<td class="cellalignment1688" headers="r2c1-t15 r1c3-t15">
<p><a href="#CHDDGHIG">"Accepting a SQL Profile"</a></p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r3c1-t15" headers="r1c1-t15">
<p><code>ALTER_SQL_PROFILE</code></p>
</td>
<td class="cellalignment1688" headers="r3c1-t15 r1c2-t15">
<p>Alters specific attributes of an existing SQL Profile object</p>
</td>
<td class="cellalignment1688" headers="r3c1-t15 r1c3-t15">
<p><a href="#CHDDABDE">"Altering a SQL Profile"</a></p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r4c1-t15" headers="r1c1-t15">
<p><code>DROP_SQL_PROFILE</code></p>
</td>
<td class="cellalignment1688" headers="r4c1-t15 r1c2-t15">
<p>Drops the named SQL Profile from the database</p>
</td>
<td class="cellalignment1688" headers="r4c1-t15 r1c3-t15">
<p><a href="#CHDIDBBG">"Dropping a SQL Profile"</a></p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r5c1-t15" headers="r1c1-t15">
<p><code>CREATE_STGTAB_SQLPROF</code></p>
</td>
<td class="cellalignment1688" headers="r5c1-t15 r1c2-t15">
<p>Creates the staging table used for copying SQL profiles from one system to another</p>
</td>
<td class="cellalignment1688" headers="r5c1-t15 r1c3-t15">
<p><a href="#CHDGHGCJ">"Transporting a SQL Profile"</a></p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r6c1-t15" headers="r1c1-t15">
<p><code>PACK_STGTAB_SQLPROF</code></p>
</td>
<td class="cellalignment1688" headers="r6c1-t15 r1c2-t15">
<p>Moves profile data out of the <code>SYS</code> schema into the staging table</p>
</td>
<td class="cellalignment1688" headers="r6c1-t15 r1c3-t15">
<p><a href="#CHDGHGCJ">"Transporting a SQL Profile"</a></p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r7c1-t15" headers="r1c1-t15">
<p><code>UNPACK_STGTAB_SQLPROF</code></p>
</td>
<td class="cellalignment1688" headers="r7c1-t15 r1c2-t15">
<p>Uses the profile data stored in the staging table to create profiles on this system</p>
</td>
<td class="cellalignment1688" headers="r7c1-t15 r1c3-t15">
<p><a href="#CHDGHGCJ">"Transporting a SQL Profile"</a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p><a href="#CHDFJHIJ">Figure 17-5</a> shows the possible actions when using SQL profile APIs.</p>
<div id="PFGRF94871" class="figure">
<p class="titleinfigure"><a id="CHDFJHIJ"></a>Figure 17-5 SQL Profile APIs</p>
<img width="501" height="339" src="img/cncpt289.gif" alt="Description of Figure 17-5 follows" /><br />
<a id="sthref1393" href="img_text/cncpt289.htm">Description of "Figure 17-5 SQL Profile APIs"</a><br />
<br /></div>
<!-- class="figure" -->
<p>As tables grow or indexes are created or dropped, the plan for a profile can change. The profile continues to be relevant even if the data distribution or access path of the corresponding statement changes. In general, you do not need to refresh SQL profiles.</p>
<p>Over a long period, profile content can become outdated. In this case, the performance of the corresponding SQL statement may degrade. The poorly performing statement may appear as high-load or top SQL. In this situation, the Automatic SQL Tuning task again captures the statement as high-load SQL. You can create a new profile for the statement.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS220" href="../../appdev.112/e40758/d_sqltun.htm#ARPLS220"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code>DBMS_SQLTUNE</code> package</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDDGHIG"></a>
<div id="PFGRF94872" class="sect2">
<h3 class="sect2"><span class="secnum">17.5.2</span> Accepting a SQL Profile</h3>
<p>You can use the <code>DBMS_SQLTUNE.ACCEPT_SQL_PROFILE</code> procedure or function to accept a SQL profile recommended by SQL Tuning Advisor. This procedure creates and stores a SQL profile in the database.</p>
<p>As a rule of thumb, accept a SQL profile recommended by SQL Tuning Advisor. If both an index and a SQL profile are recommended, then either use both or use the SQL profile only. If you create an index, then the optimizer may need the profile to pick the new index.</p>
<p>In some situations, SQL Tuning Advisor may find an improved serial plan in addition to an even better parallel plan. In this case, the advisor recommends both a standard and a parallel SQL profile, enabling you to choose between the best serial and best parallel plan for the statement. Accept a parallel plan only if the increase in response time is worth the decrease in throughput (see <a href="#CHDFHDAC">Example 17-4</a>).</p>
<p class="itemizedlisttitle">To accept a SQL profile:&nbsp;</p>
<ul>
<li>
<p>Call the <code>DBMS_SQLTUNE.ALTER_SQL_PROFILE</code> procedure.</p>
<p>In following example, <code>my_sql_tuning_task</code> is the name of the SQL tuning task and <code>my_sql_profile</code> is the name of the SQL profile. The PL/SQL block accepts a profile that uses parallel execution (<code>profile_type</code>):</p>
<pre>
DECLARE
  my_sqlprofile_name VARCHAR2(30);
BEGIN
  my_sqlprofile_name := DBMS_SQLTUNE.ACCEPT_SQL_PROFILE ( 
    task_name    =&gt; 'my_sql_tuning_task',
    name         =&gt; 'my_sql_profile',
    profile_type =&gt; DBMS_SQLTUNE.PX_PROFILE,
    force_match  =&gt; TRUE );
END;
/
</pre>
<p>The <code>force_match</code> setting controls statement matching. Typically, an accepted SQL profile is associated with the SQL statement through a <span class="bold">SQL signature</span> that is generated using a hash function. This hash function changes the SQL statement to upper case and removes all extra whites spaces before generating the signature. Thus, the same SQL profile works for all SQL statements in which the only difference is case and white spaces.</p>
<p>By setting <code>force_match</code> to <code>TRUE</code>, the SQL profile additionally targets all SQL statements that have the same text after normalizing literal values to bind variables. This setting may be useful for applications that use only literal values because it allows SQL with text differing only in its literal values to share a SQL profile. If both literal values and bind variables are in the SQL text, or if <code>force_match</code> is set to <code>FALSE</code> (default), then literal values are not normalized.</p>
<p>You can view information about a SQL profile in the <code>DBA_SQL_PROFILES</code> view.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDDABDE"></a>
<div id="PFGRF94873" class="sect2">
<h3 class="sect2"><span class="secnum">17.5.3</span> Altering a SQL Profile</h3>
<p>You can alter attributes of an existing SQL profile with the <code>ALTER_SQL_PROFILE</code> procedure. Modifiable attributes are <code>STATUS</code>, <code>NAME</code>, <code>DESCRIPTION</code>, and <code>CATEGORY</code>.</p>
<p>The <code>CATEGORY</code> attribute determines which sessions can apply a profile. You can view the <code>CATEGORY</code> attribute by querying <code>DBA_SQL_PROFILES.CATEGORY</code>. By default, all profiles are in the <code>DEFAULT</code> category, which means that all sessions in which the <code><a id="sthref1395"></a>SQLTUNE_CATEGORY</code> initialization parameter is set to <code>DEFAULT</code> can use the profile.</p>
<p>By altering the category of a SQL profile, you can determine which sessions are affected by profile creation. For example, by setting the category to <code>DEV</code>, only sessions in which the <code>SQLTUNE_CATEGORY</code> initialization parameter is set to <code>DEV</code> can use the profile. Other sessions do not have access to the SQL profile and execution plans for SQL statements are not impacted by the SQL profile. This technique enables you to test a profile in a restricted environment before making it available to other sessions.</p>
<p class="itemizedlisttitle">To alter a SQL profile:&nbsp;</p>
<ul>
<li>
<p>Call the <code>DBMS_SQLTUNE.ALTER_SQL_PROFILE</code> procedure.</p>
<p>In the following example, the <code>STATUS</code> attribute of <code>my_sql_profile</code> is changed to <code>DISABLED</code>, which means the SQL profile is not used during SQL compilation:</p>
<pre>
BEGIN
  DBMS_SQLTUNE.ALTER_SQL_PROFILE(
    name            =&gt; 'my_sql_profile', 
    attribute_name  =&gt; 'STATUS', 
    value           =&gt; 'DISABLED');
END;
/
</pre></li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN10257" href="../../server.112/e40402/initparams250.htm#REFRN10257"><span class="italic">Oracle Database Reference</span></a> to learn about the <code>SQLTUNE_CATEGORY</code> initialization parameter</div>
</div>
<!-- class="sect2" -->
<a id="CHDIDBBG"></a>
<div id="PFGRF94874" class="sect2">
<h3 class="sect2"><span class="secnum">17.5.4</span> Dropping a SQL Profile</h3>
<p>You can drop a SQL profile with the <code>DROP_SQL_PROFILE</code> procedure. You can specify whether to ignore errors raised if the name does not exist. For this example, the default value of <code>FALSE</code> is accepted</p>
<p class="itemizedlisttitle">To drop a SQL profile:&nbsp;</p>
<ul>
<li>
<p>Call the <code>DBMS_SQLTUNE.DROP_SQL_PROFILE</code> procedure.</p>
<p>The following example drops the profile named <code>my_sql_profile</code>:</p>
<pre>
BEGIN
  DBMS_SQLTUNE.DROP_SQL_PROFILE( name =&gt; 'my_sql_profile' );
END;
/
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDGHGCJ"></a>
<div id="PFGRF2938" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">17.5.5</span> Transporting a SQL Profile</h3>
<p>You can <span class="bold">transport</span> SQL profiles. This operation involves exporting the SQL profile from the <code>SYS</code> schema in one database to a staging table, and then importing the SQL profile from the staging table into another database. You can transport a SQL profile to any Oracle database created in the same release or later.</p>
<p class="orderedlisttitle">To transport a SQL profile:&nbsp;</p>
<ol>
<li>
<p>Use the <code>CREATE_STGTAB_SQLPROF</code> procedure to create a staging table where the SQL profiles will be exported.</p>
<p>The following example creates <code>my_staging_table</code> in the <code>DBA1</code> schema:</p>
<pre>
BEGIN
  DBMS_SQLTUNE.create_stgtab_sqlprof( 
    table_name  =&gt; 'my_staging_table',
    schema_name =&gt; 'DBA1' );
END;
/
</pre></li>
<li>
<p>Use the <code>PACK_STGTAB_SQLPROF</code> procedure to export SQL profiles into the staging table.</p>
<p>The following example populates <code>dba1.my_staging_table</code> with the SQL profile <code>my_profile</code>:</p>
<pre>
BEGIN
  DBMS_SQLTUNE.pack_stgtab_sqlprof(      
    profile_name         =&gt; 'my_profile',   
    staging_table_name   =&gt; 'my_staging_table',
    staging_schema_owner =&gt; 'dba1' );
END;
/ 
</pre></li>
<li>
<p>Move the staging table to the database where the SQL profiles will be imported using the mechanism of choice (such as Oracle Data Pump or database link).</p>
</li>
<li>
<p>On the database where the SQL profiles will be imported, use the <code>UNPACK_STGTAB_SQLPROF</code> procedure to import SQL profiles from the staging table.</p>
<p>The following example shows how to import SQL profiles contained in the staging table:</p>
<pre>
BEGIN
  DBMS_SQLTUNE.UNPACK_STGTAB_SQLPROF(
      replace  =&gt; TRUE,
      staging_table_name =&gt; 'my_staging_table');
END;
/
</pre></li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i35947"></a>
<div id="PFGRF94875" class="sect1">
<h2 class="sect1"><span class="secnum">17.6</span> SQL Tuning Views</h2>
<p>This section summarizes views that shows information gathered for tuning the SQL statements. You need DBA privileges to access these views.</p>
<ul>
<li>
<p>Advisor information views, such as <code>DBA_ADVISOR_TASKS</code>, <code>DBA_ADVISOR_EXECUTIONS</code>, <code>DBA_ADVISOR_FINDINGS</code>, <code>DBA_ADVISOR_RECOMMENDATIONS</code>, and <code>DBA_ADVISOR_RATIONALE</code> views.</p>
</li>
<li>
<p>SQL tuning information views, such as <code>DBA_SQLTUNE_STATISTICS</code>, <code>DBA_SQLTUNE_BINDS</code>, and <code>DBA_SQLTUNE_PLANS</code> views.</p>
</li>
<li>
<p>SQL tuning set views, such as <code>DBA_SQLSET</code>, <code>DBA_SQLSET_BINDS</code>, <code>DBA_SQLSET_STATEMENTS</code>, and <code>DBA_SQLSET_REFERENCES</code> views.</p>
</li>
<li>
<p>Information on captured execution plans for statements in SQL tuning sets are displayed in the <code>DBA_SQLSET_PLANS</code> and <code>USER_SQLSET_PLANS</code> views.</p>
</li>
<li>
<p>SQL profile information is displayed in the <code>DBA_SQL_PROFILES</code> view.</p>
<p>If <code>TYPE</code> = <code>MANUAL</code>, then the SQL profile was created manually by SQL Tuning Advisor. If <code>TYPE</code> = <code>AUTO</code>, then the profile was created by automatic SQL tuning.</p>
</li>
<li>
<p>Advisor execution progress information is displayed in the <a id="sthref1399"></a><code>V$ADVISOR_PROGRESS</code> view.</p>
</li>
<li>
<p>Dynamic views containing information relevant to the SQL tuning, such as <code>V$SQL</code>, <code>V$SQLAREA</code>, <code>V$SQLSTATS</code>, and <code>V$SQL_BIND_DATA</code> views.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a class="olink REFRN" href="../e40402/toc.htm"><span class="italic">Oracle Database Reference</span></a> for descriptions of the static data dictionary and dynamic views</div>
</li>
</ul>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1679">
<tr>
<td class="cellalignment1688">
<table class="cellalignment1684">
<tr>
<td class="cellalignment1683"><a href="sql_overview.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1683"><a href="advisor.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1690">
<table class="cellalignment1682">
<tr>
<td class="cellalignment1683"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1683"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1683"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1683"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1683"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1683"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
