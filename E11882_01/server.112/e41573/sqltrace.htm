<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using Application Tracing Tools</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023" />
<meta name="dcterms.created" content="2014-06-30T4:25:7Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Performance Tuning Guide" />
<meta name="dcterms.identifier" content="E41573-04" />
<meta name="dcterms.isVersionOf" content="PFGRF" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="outlines.htm" title="Previous" type="text/html" />
<link rel="Next" href="glossary.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e41573.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">29/31</span> <!-- End Header -->
<div id="PFGRF010" class="chapter"><a id="g33356"></a> <a id="i4170"></a>
<h1 class="chapter"><span class="secnum">21</span> Using Application Tracing Tools</h1>
<p>Oracle Database provides several tracing tools that can help you monitor and analyze applications running against an Oracle database.</p>
<p><a id="sthref1552"></a>End-to-End Application Tracing can identify the source of an excessive workload, such as a high load SQL statement, by client identifier, service, module, action, session, instance, or an entire database. This isolates the problem to a specific user, service, session, or application component.</p>
<p>Oracle Database provides the <code>trcsess</code> command-line utility that consolidates tracing information based on specific criteria.</p>
<p>The SQL Trace facility and <code>TKPROF</code> are two basic performance diagnostic tools that can help you monitor applications running against the Oracle database.</p>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#i19083">End-to-End Application Tracing</a></p>
</li>
<li>
<p><a href="#i20110">Using the trcsess Utility</a></p>
</li>
<li>
<p><a href="#i4640">Understanding SQL Trace and TKPROF</a></p>
</li>
<li>
<p><a href="#i4763">Using the SQL Trace Facility and TKPROF</a></p>
</li>
<li>
<p><a href="#i4206">Avoiding Pitfalls in TKPROF Interpretation</a></p>
</li>
<li>
<p><a href="#i17039">Sample TKPROF Output</a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQPUG" href="../../server.112/e16604/toc.htm"><span class="italic">SQL*Plus User's Guide and Reference</span></a> for information about the use of Autotrace to trace and tune SQL*Plus statements</div>
</li>
</ul>
<a id="i19083"></a>
<div id="PFGRF01005" class="sect1">
<h2 class="sect1"><span class="secnum">21.1</span> End-to-End Application Tracing</h2>
<p><a id="sthref1553"></a>End-to-End Application Tracing simplifies the process of diagnosing performance problems in multitier environments. In these environments, a request from an end client is routed to different database sessions by the middle tier, making it difficult to track a client across database sessions. End-to-End Application Tracing uses a client ID to uniquely trace a specific end client through all tiers to the database.</p>
<p>This feature could identify the source of an excessive workload, such as a high-load SQL statement, and enables you to contact the specific user responsible. Also, a user having problems can contact you. You can then identify what this user session is doing at the database level.</p>
<p>End-to-End Application Tracing also simplifies management of application workloads by tracking specific modules and actions in a service. End-to-End Application Tracing can identify workload problems for the following:</p>
<ul>
<li>
<p>Client identifier</p>
<p>This specifies an end user based on the logon ID, such as <code>HR.HR</code>.</p>
</li>
<li>
<p>Service</p>
<p>This specifies either a single application (such as <code>ACCTG</code> for an accounting application), or a group of applications with common attributes, service level thresholds, and priorities.</p>
</li>
<li>
<p>Module</p>
<p>This specifies a functional block, such as Accounts Receivable or General Ledger, of an application.</p>
</li>
<li>
<p>Action</p>
<p>This specifies an action, such as an <code>INSERT</code> or <code>UPDATE</code> operation, in a module.</p>
</li>
<li>
<p>Session</p>
<p>This represents the state of a current user login to a database.</p>
</li>
<li>
<p>Instance</p>
<p>This represents the combination of the system global area (SGA) and background processes.</p>
</li>
</ul>
<p>After tracing information is written to files, you can consolidate this information with the <code>trcsess</code> utility and diagnose it with an analysis utility such as <code>TKPROF</code>.</p>
<p><a id="sthref1554"></a>To create services on single-instance Oracle databases, use the <code>DBMS_SERVICE.CREATE_SERVICE</code> procedure or set the <code>SERVICE_NAMES</code> initialization parameter.</p>
<p><a id="sthref1555"></a><a id="sthref1556"></a>The module and action names are set by the application developer. For example, you would use the <code>SET_MODULE</code> and <code>SET_ACTION</code> procedures in the <code>DBMS_APPLICATION_INFO</code> package to set these values in a PL/SQL program.</p>
<p>The recommended interface for End-to-End Application Tracing is Oracle Enterprise Manager. Using Enterprise Manager, you can view the top consumers for each consumer type, and enable or disable statistics gathering and SQL tracing for specific consumers. Whenever possible, you should use Enterprise Manager to manage End-to-End Application Tracing, as described in <a class="olink TDPPT034" href="../../server.112/e10822/tdppt_realtime.htm#TDPPT034"><span class="italic">Oracle Database 2 Day + Performance Tuning Guide</span></a>. If Oracle Enterprise Manager is unavailable, then you can manage this feature using the <a id="sthref1557"></a><a id="sthref1558"></a><code>DBMS_MONITOR</code> APIs, as described in the following sections:</p>
<ul>
<li>
<p><a href="#BABJBHBE">Enabling and Disabling Statistic Gathering for End-to-End Tracing</a></p>
</li>
<li>
<p><a href="#BABEFGFD">Viewing Gathered Statistics for End-to-End Application Tracing</a></p>
</li>
<li>
<p><a href="#CHDHEJDG">Enabling and Disabling for End-to-End Tracing</a></p>
</li>
<li>
<p><a href="#BABJAFBF">Viewing Enabled Traces for End-to-End Tracing</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT" href="../e40540/toc.htm"><span class="italic">Oracle Database Concepts</span></a> to learn about services</p>
</li>
<li>
<p><a class="olink LNOCI" href="../../appdev.112/e10646/toc.htm"><span class="italic">Oracle Call Interface Programmer's Guide</span></a> to learn how to set the necessary parameters in an OCI application</p>
</li>
<li>
<p><a class="olink ARPLS" href="../../appdev.112/e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code>DBMS_MONITOR</code>, <code>DBMS_SESSION, DBMS_SERVICE</code>, and <code>DBMS_APPLICATION_INFO</code> packages</p>
</li>
<li>
<p><a class="olink REFRN" href="../e40402/toc.htm"><span class="italic">Oracle Database Reference</span></a> for information about <code>V$</code> views and initialization parameters</p>
</li>
</ul>
</div>
<a id="BABJBHBE"></a>
<div id="PFGRF94968" class="sect2">
<h3 class="sect2"><span class="secnum">21.1.1</span> Enabling and Disabling Statistic Gathering for End-to-End Tracing</h3>
<p>To gather the appropriate statistics using PL/SQL, you need to enable statistics gathering for client identifier, service, module, or action using procedures in the <code>DBMS_MONITOR</code> package.</p>
<p>You can gather statistics by the following criteria:</p>
<ul>
<li>
<p><a href="#CHDGHJJF">Statistic Gathering for Client Identifier</a></p>
</li>
<li>
<p><a href="#CHDIFCJH">Statistic Gathering for Service, Module, and Action</a></p>
</li>
</ul>
<p>The default level is the session-level statistics gathering. Statistics gathering is global for the database and continues after an instance is restarted.</p>
<a id="CHDGHJJF"></a>
<div id="PFGRF94969" class="sect3">
<h4 class="sect3"><span class="secnum">21.1.1.1</span> Statistic Gathering for Client Identifier</h4>
<p>The procedure <code>CLIENT_ID_STAT_ENABLE</code> enables statistic gathering for a given client identifier. For example, to enable statistics gathering for a specific client identifier:</p>
<pre>
EXECUTE DBMS_MONITOR.CLIENT_ID_STAT_ENABLE(client_id =&gt; 'OE.OE');
</pre>
<p>In the example, <code>OE.OE</code> is the client identifier for which you want to collect statistics. You can view client identifiers in the <code>CLIENT_IDENTIFIER</code> column in <code>V$SESSION</code>.</p>
<p>The procedure <code>CLIENT_ID_STAT_DISABLE</code> disables statistic gathering for a given client identifier. For example:</p>
<pre>
EXECUTE DBMS_MONITOR.CLIENT_ID_STAT_DISABLE(client_id =&gt; 'OE.OE');
</pre></div>
<!-- class="sect3" -->
<a id="CHDIFCJH"></a>
<div id="PFGRF94970" class="sect3">
<h4 class="sect3"><span class="secnum">21.1.1.2</span> Statistic Gathering for Service, Module, and Action</h4>
<p>The procedure <code>SERV_MOD_ACT_STAT_ENABLE</code> enables statistic gathering for a combination of service, module, and action. For example:</p>
<pre>
EXECUTE DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE(service_name =&gt; 'ACCTG', 
        module_name =&gt; 'PAYROLL');

EXECUTE DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE(service_name =&gt; 'ACCTG', 
        module_name =&gt; 'GLEDGER', action_name =&gt; 'INSERT ITEM');
</pre>
<p>If both of the previous commands are executed, then statistics are gathered as follows:</p>
<ul>
<li>
<p>For the <code>ACCTG</code> service, because accumulation for each service name is the default</p>
</li>
<li>
<p>For all actions in the <code>PAYROLL</code> module</p>
</li>
<li>
<p>For the <code>INSERT</code> <code>ITEM</code> action within the <code>GLEDGER</code> module</p>
</li>
</ul>
<p>The procedure <code>SERV_MOD_ACT_STAT_DISABLE</code> disables statistic gathering for a combination of service, module, and action. For example:</p>
<pre>
EXECUTE DBMS_MONITOR.SERV_MOD_ACT_STAT_DISABLE(service_name =&gt; 'ACCTG', 
        module_name =&gt; 'GLEDGER', action_name =&gt; 'INSERT ITEM');
</pre>
<p>Regarding statistics gathering, when you change the module or action using these procedures, the change takes effect when the next user call is executed in the session. For example, if a module is set to <code>module1</code> in a session, and if the module is reset to <code>module2</code> in a user call in the session, then the module remains <code>module1</code> during this user call. The module is changed to <code>module2</code> in the next user call in the session.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABEFGFD"></a>
<div id="PFGRF94971" class="sect2">
<h3 class="sect2"><span class="secnum">21.1.2</span> Viewing Gathered Statistics for End-to-End Application Tracing</h3>
<p>You can display the statistics that have been gathered with several dynamic views.</p>
<ul>
<li>
<p>The accumulated global statistics for the currently enabled statistics can be displayed with the <code>DBA_ENABLED_AGGREGATIONS</code> view.</p>
</li>
<li>
<p>The accumulated statistics for a specified client identifier can be displayed in the <code>V$CLIENT_STATS</code> view.</p>
</li>
<li>
<p>The accumulated statistics for a specified service can be displayed in <code>V$SERVICE_STATS</code> view.</p>
</li>
<li>
<p>The accumulated statistics for a combination of specified service, module, and action can be displayed in the <code>V$SERV_MOD_ACT_STATS</code> view.</p>
</li>
<li>
<p>The accumulated statistics for elapsed time of database calls and for CPU use can be displayed in the <code>V$SERVICEMETRIC</code> view.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDHEJDG"></a>
<div id="PFGRF94972" class="sect2">
<h3 class="sect2"><span class="secnum">21.1.3</span> Enabling and Disabling for End-to-End Tracing</h3>
<p>To enable tracing for client identifier, service, module, action, session, instance or database, execute the appropriate procedures in the <code>DBMS_MONITOR</code> package. You can enable tracing for specific diagnosis and workload management by the following criteria:</p>
<ul>
<li>
<p><a href="#CHDFCGAE">Tracing for Client Identifier</a></p>
</li>
<li>
<p><a href="#CHDEEIAD">Tracing for Service, Module, and Action</a></p>
</li>
<li>
<p><a href="#CHDDGCCB">Tracing for Session</a></p>
</li>
<li>
<p><a href="#CHDCAACH">Tracing for Entire Instance or Database</a></p>
</li>
</ul>
<p>With the criteria that you provide, specific trace information is captured in a set of trace files and combined into a single output trace file.</p>
<a id="CHDFCGAE"></a>
<div id="PFGRF94973" class="sect3">
<h4 class="sect3"><span class="secnum">21.1.3.1</span> Tracing for Client Identifier</h4>
<p>The <code>CLIENT_ID_TRACE_ENABLE</code> procedure enables tracing globally for the database for a given client identifier. For example:</p>
<pre>
EXECUTE DBMS_MONITOR.CLIENT_ID_TRACE_ENABLE(client_id =&gt; 'OE.OE', 
        waits =&gt; TRUE, binds =&gt; FALSE);
</pre>
<p>In this example, <code>OE.OE</code> is the client identifier for which SQL tracing is to be enabled. The <code>TRUE</code> argument specifies that wait information will be present in the trace. The <code>FALSE</code> argument specifies that bind information will not be present in the trace.</p>
<p>The <code>CLIENT_ID_TRACE_DISABLE</code> procedure disables tracing globally for the database for a given client identifier. To disable tracing, for the previous example:</p>
<pre>
EXECUTE DBMS_MONITOR.CLIENT_ID_TRACE_DISABLE(client_id =&gt; 'OE.OE');
</pre></div>
<!-- class="sect3" -->
<a id="CHDEEIAD"></a>
<div id="PFGRF94974" class="sect3">
<h4 class="sect3"><span class="secnum">21.1.3.2</span> Tracing for Service, Module, and Action</h4>
<p>The <code>SERV_MOD_ACT_TRACE_ENABLE</code> procedure enables SQL tracing for a given combination of service name, module, and action globally for a database, unless an instance name is specified in the procedure.</p>
<pre>
EXECUTE DBMS_MONITOR.SERV_MOD_ACT_TRACE_ENABLE(service_name =&gt; 'ACCTG', 
        waits =&gt; TRUE, binds =&gt; FALSE, instance_name =&gt; 'inst1');
</pre>
<p>In this example, the service <code>ACCTG</code> is specified. The module or action name is not specified. The <code>TRUE</code> argument specifies that wait information will be present in the trace. The <code>FALSE</code> argument specifies that bind information will not be present in the trace. The <code>inst1</code> instance is specified to enable tracing only for that instance.</p>
<p>To enable tracing for all actions for a given combination of service and module:</p>
<pre>
EXECUTE DBMS_MONITOR.SERV_MOD_ACT_TRACE_ENABLE(service_name =&gt; 'ACCTG', 
        module_name =&gt; 'PAYROLL', waits =&gt; TRUE,  binds =&gt; FALSE, 
        instance_name =&gt; 'inst1');
</pre>
<p>The <code>SERV_MOD_ACT_TRACE_DISABLE</code> procedure disables the trace at all enabled instances for a given combination of service name, module, and action name globally. For example, the following disables tracing for the first example in this section:</p>
<pre>
EXECUTE DBMS_MONITOR.SERV_MOD_ACT_TRACE_DISABLE(service_name =&gt; 'ACCTG',
        instance_name =&gt; 'inst1');
</pre>
<p>This example disables tracing for the second example in this section:</p>
<pre>
EXECUTE DBMS_MONITOR.SERV_MOD_ACT_TRACE_DISABLE(service_name =&gt; 'ACCTG', 
        module_name =&gt; 'PAYROLL', instance_name =&gt; 'inst1');
</pre></div>
<!-- class="sect3" -->
<a id="CHDDGCCB"></a>
<div id="PFGRF94975" class="sect3">
<h4 class="sect3"><span class="secnum">21.1.3.3</span> Tracing for Session</h4>
<p>The <code>SESSION_TRACE_ENABLE</code> procedure enables the trace for a given database session identifier (SID), on the local instance.</p>
<p>To enable tracing for a specific session ID and serial number, determine the values for the session to trace:</p>
<pre>
SELECT SID, SERIAL#, USERNAME FROM V$SESSION;

       SID    SERIAL# USERNAME
---------- ---------- ------------------------------
        27         60 OE
...
</pre>
<p>Use the appropriate values to enable tracing for a specific session:</p>
<pre>
EXECUTE DBMS_MONITOR.SESSION_TRACE_ENABLE(session_id =&gt; 27, serial_num =&gt; 60,
        waits =&gt; TRUE, binds =&gt; FALSE);
</pre>
<p>The <code>TRUE</code> argument specifies that wait information will be present in the trace. The <code>FALSE</code> argument specifies that bind information will not be present in the trace.</p>
<p>The <code>SESSION_TRACE_DISABLE</code> procedure disables the trace for a given database session identifier (SID) and serial number. For example:</p>
<pre>
EXECUTE DBMS_MONITOR.SESSION_TRACE_DISABLE(session_id =&gt; 27, serial_num =&gt; 60);
</pre>
<p>While the <code>DBMS_MONITOR</code> package can only be invoked by a user with the DBA role, any user can also enable SQL tracing for their own session by using the <code>DBMS_SESSION</code> package. A user can invoke the <code>SESSION_TRACE_ENABLE</code> procedure to enable session-level SQL trace for the user's session. For example:</p>
<pre>
EXECUTE DBMS_SESSION.SESSION_TRACE_ENABLE(waits =&gt; TRUE, binds =&gt; FALSE);
</pre>
<p>The <code>TRUE</code> argument specifies that wait information will be present in the trace. The <code>FALSE</code> argument specifies that bind information will not be present in the trace.</p>
<p>The <code>SESSION_TRACE_DISABLE</code> procedure disables the trace for the invoking session. For example:</p>
<pre>
EXECUTE DBMS_SESSION.SESSION_TRACE_DISABLE();
</pre></div>
<!-- class="sect3" -->
<a id="CHDCAACH"></a>
<div id="PFGRF94976" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">21.1.3.4</span> Tracing for Entire Instance or Database</h4>
<p>The <code>DATABASE_TRACE_ENABLE</code> procedure enables SQL tracing for a given instance or an entire database. Tracing is enabled for all current and future sessions. For example:</p>
<pre>
EXECUTE DBMS_MONITOR.DATABASE_TRACE_ENABLE(waits =&gt; TRUE, binds =&gt; FALSE, 
        instance_name =&gt; 'inst1');
</pre>
<p>In this example, the <code>inst1</code> instance is specified to enable tracing for that instance. The <code>TRUE</code> argument specifies that wait information will be present in the trace. The <code>FALSE</code> argument specifies that bind information will not be present in the trace. This example results in SQL tracing of all SQL in the <code>inst1</code> instance.</p>
<p>The <code>DATABASE_TRACE_ENABLE</code> procedure overrides all other session-level traces, but will be complementary to the client identifier, service, module, and action traces. All new sessions will inherit the wait and bind information specified by this procedure until the <code>DATABASE_TRACE_DISABLE</code> procedure is called. When this procedure is invoked with the <code>instance_name</code> parameter specified, it will reset the session-level SQL trace for the named instance. If this procedure is invoked without the <code>instance_name</code> parameter specified, then it will reset the session-level SQL trace for the entire database.</p>
<p>The <code>DATABASE_TRACE_DISABLE</code> procedure disables the tracing for an entire instance or database. For example:</p>
<pre>
EXECUTE DBMS_MONITOR.DATABASE_TRACE_DISABLE(instance_name =&gt; 'inst1');
</pre>
<p>In this example, all session-level SQL tracing will be disabled for the <code>inst1</code> instance. To disable the session-level SQL tracing for an entire database, invoke the <code>DATABASE_TRACE_DISABLE</code> procedure without specifying the <code>instance_name</code> parameter:</p>
<pre>
EXECUTE DBMS_MONITOR.DATABASE_TRACE_DISABLE();
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABJAFBF"></a>
<div id="PFGRF94977" class="sect2">
<h3 class="sect2"><span class="secnum">21.1.4</span> Viewing Enabled Traces for End-to-End Tracing</h3>
<p>An Oracle Enterprise Manager report or the <code>DBA_ENABLED_TRACES</code> view can display outstanding traces. In the <code>DBA_ENABLED_TRACES</code> view, you can determine detailed information about how a trace was enabled, including the trace type. The trace type specifies whether the trace is enabled for client identifier, session, service, database, or a combination of service, module, and action.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i20110"></a>
<div id="PFGRF01050" class="sect1">
<h2 class="sect1"><span class="secnum">21.2</span> Using the trcsess Utility</h2>
<p><a id="sthref1559"></a><a id="sthref1560"></a>The <code>trcsess</code> utility consolidates trace output from selected trace files based on several criteria:</p>
<ul>
<li>
<p>Session ID</p>
</li>
<li>
<p>Client ID</p>
</li>
<li>
<p>Service name</p>
</li>
<li>
<p>Action name</p>
</li>
<li>
<p>Module name</p>
</li>
</ul>
<p>After <code>trcsess</code> merges the trace information into a single output file, the output file could be processed by <code>TKPROF</code>.</p>
<p><code>trcsess</code> is useful for consolidating the tracing of a particular session for performance or debugging purposes. Tracing a specific session is usually not a problem in the dedicated server model as a single dedicated process serves a session during its lifetime. You can see the trace information for the session from the trace file belonging to the dedicated server serving it. However, in a shared server configuration a user session is serviced by different processes from time to time. The trace pertaining to the user session is scattered across different trace files belonging to different processes. This makes it difficult to get a complete picture of the life cycle of a session.</p>
<div id="PFGRF94978" class="sect2"><a id="sthref1561"></a>
<h3 class="sect2"><span class="secnum">21.2.1</span> Syntax for trcsess</h3>
<p>The syntax for the <code>trcsess</code> utility is:</p>
<pre>
trcsess  [output=<span class="italic">output_file_name</span>]
         [session=<span class="italic">session_id</span>]
         [clientid=<span class="italic">client_id</span>]
         [service=<span class="italic">service_name</span>]
         [action=<span class="italic">action_name</span>]
         [module=<span class="italic">module_name</span>]
         [<span class="italic">trace_files</span>]
</pre>
<p>where</p>
<ul>
<li>
<p><code>output</code> specifies the file where the output is generated. If this option is not specified, then the utility writes to standard output.</p>
</li>
<li>
<p><code>session</code> consolidates the trace information for the session specified. The session identifier is a combination of session index and session serial number, such as <code>21.2371</code>. You can locate these values in the <code>V$SESSION</code> view.</p>
</li>
<li>
<p><code>clientid</code> consolidates the trace information given client ID.</p>
</li>
<li>
<p><code>service</code> consolidates the trace information for the given service name.</p>
</li>
<li>
<p><code>action</code> consolidates the trace information for the given action name.</p>
</li>
<li>
<p><code>module</code> consolidates the trace information for the given module name.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">trace_files</span></code> is a list of all the trace file names, separated by spaces, in which <code>trcsess</code> should look for trace information. You can use the wildcard character (<code>*</code>) to specify the trace file names. If you do not specify trace files, then <code>trcsess</code> takes all the files in the current directory as input.</p>
</li>
</ul>
<p>You must specify one of the <code>session</code>, <code>clientid</code>, <code>service</code>, <code>action</code>, or <code>module</code> options. If more then one of the <code>session</code>, <code>clientid</code>, <code>service</code>, <code>action</code>, or <code>module</code> options is specified, then the trace files which satisfies all the criteria specified are consolidated into the output file.</p>
</div>
<!-- class="sect2" -->
<div id="PFGRF94979" class="sect2"><a id="sthref1562"></a>
<h3 class="sect2"><span class="secnum">21.2.2</span> Sample Output of trcsess</h3>
<p>This sample output of <code>trcsess</code> shows the consolidation of traces for a particular session. In this example the session index and serial number equals <code>21.2371</code>.</p>
<p>You can invoke <code>trcsess</code> with various options. In the following case, all files in current directory are taken as input:</p>
<pre>
trcsess session=21.2371
</pre>
<p>In this case, several trace files are specified:</p>
<pre>
trcsess session=21.2371 main_12359.trc main_12995.trc 
</pre>
<p>The sample output is similar to the following:</p>
<pre>
[PROCESS ID = 12359] 
*** 2002-04-02 09:48:28.376 
PARSING IN CURSOR #1 len=17 dep=0 uid=27 oct=3 lid=27 tim=868373970961 hv=887450622 ad='22683fb4' 
select * from cat 
END OF STMT 
PARSE #1:c=0,e=339,p=0,cr=0,cu=0,mis=0,r=0,dep=0,og=4,tim=868373970944 
EXEC #1:c=0,e=221,p=0,cr=0,cu=0,mis=0,r=0,dep=0,og=4,tim=868373971411 
FETCH #1:c=0,e=791,p=0,cr=7,cu=0,mis=0,r=1,dep=0,og=4,tim=868373972435 
FETCH #1:c=0,e=1486,p=0,cr=20,cu=0,mis=0,r=6,dep=0,og=4,tim=868373986238 
*** 2002-04-02 10:03:58.058 
XCTEND rlbk=0, rd_only=1 
STAT #1 id=1 cnt=7 pid=0 pos=1 obj=0 op='FILTER  ' 
STAT #1 id=2 cnt=7 pid=1 pos=1 obj=18 op='TABLE ACCESS BY INDEX ROWID OBJ$ ' 
STAT #1 id=3 cnt=7 pid=2 pos=1 obj=37 op='INDEX RANGE SCAN I_OBJ2 ' 
STAT #1 id=4 cnt=0 pid=1 pos=2 obj=4 op='TABLE ACCESS CLUSTER TAB$J2 ' 
STAT #1 id=5 cnt=6 pid=4 pos=1 obj=3 op='INDEX UNIQUE SCAN I_OBJ# ' 
[PROCESS ID=12995] 
*** 2002-04-02 10:04:32.738 
Archiving is disabled 
Archiving is disabled 
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i4640"></a>
<div id="PFGRF01010" class="sect1">
<h2 class="sect1"><span class="secnum">21.3</span> Understanding SQL Trace and TKPROF</h2>
<p>The SQL Trace facility and <code>TKPROF</code> let you accurately assess the efficiency of the SQL statements an application runs. For best results, use these tools with <code>EXPLAIN</code> <code>PLAN</code> rather than using <code>EXPLAIN</code> <code>PLAN</code> alone.</p>
<a id="i8894"></a>
<div id="PFGRF94980" class="sect2">
<h3 class="sect2"><span class="secnum">21.3.1</span> Understanding the SQL Trace Facility</h3>
<p><a id="sthref1563"></a>The SQL Trace facility provides performance information on individual SQL statements. It generates the following statistics for each statement:</p>
<ul>
<li>
<p>Parse, execute, and fetch counts</p>
</li>
<li>
<p>CPU and elapsed times</p>
</li>
<li>
<p>Physical reads and logical reads</p>
</li>
<li>
<p>Number of rows processed</p>
</li>
<li>
<p>Misses on the library cache</p>
</li>
<li>
<p>Username under which each parse occurred</p>
</li>
<li>
<p>Each commit and rollback</p>
</li>
<li>
<p>Wait event data for each SQL statement, and a summary for each trace file</p>
</li>
</ul>
<p>If the cursor for the SQL statement is closed, then SQL Trace also provides row source information that includes:</p>
<ul>
<li>
<p>Row operations showing the actual execution plan of each SQL statement</p>
</li>
<li>
<p>Number of rows, number of consistent reads, number of physical reads, number of physical writes, and time elapsed for each operation on a row</p>
</li>
</ul>
<p>Although it is possible to enable the SQL Trace facility for a session or for an instance, it is recommended that you use the <code>DBMS_SESSION</code> or <code>DBMS_MONITOR</code> packages instead. When the SQL Trace facility is enabled for a session or for an instance, performance statistics for all SQL statements executed in a user session or in the instance are placed into trace files. Using the SQL Trace facility can have a severe performance impact and may result in increased system overhead, excessive CPU usage, and inadequate disk space.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDHEJDG">"Enabling and Disabling for End-to-End Tracing"</a> to learn how to use the <code>DBMS_SESSION</code> or <code>DBMS_MONITOR</code> packages to enable SQL tracing for a session or an instance</div>
<p>Oracle Database provides the <code>trcsess</code> command-line utility that consolidates tracing information from several trace files based on specific criteria, such as session or client ID. See <a href="#i20110">"Using the trcsess Utility"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i4514"></a>
<div id="PFGRF94981" class="sect2">
<h3 class="sect2"><span class="secnum">21.3.2</span> Understanding TKPROF</h3>
<p>You can run the <code>TKPROF</code> program<a id="sthref1564"></a> to format the contents of the trace file and place the output into a readable output file. <code>TKPROF</code> can also:</p>
<ul>
<li>
<p>Create a SQL script that stores the statistics in the database</p>
</li>
<li>
<p>Determine the execution plans of SQL statements</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the cursor for a SQL statement is not closed, then <code>TKPROF</code> output does not automatically include the actual execution plan of the SQL statement. In this situation, you can use the <code>EXPLAIN</code> option with <code>TKPROF</code> to generate an execution plan.</div>
</li>
</ul>
<p><code>TKPROF</code> reports each statement executed with the resources it has consumed, the number of times it was called, and the number of rows which it processed. This information lets you easily locate those statements that are using the greatest resource. With experience or with baselines available, you can assess whether the resources used are reasonable given the work done.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i4763"></a>
<div id="PFGRF01020" class="sect1">
<h2 class="sect1"><span class="secnum">21.4</span> Using the SQL Trace Facility and TKPROF</h2>
<p>Follow these steps to use the SQL Trace facility and <code>TKPROF</code>:<a id="sthref1565"></a></p>
<ol>
<li>
<p>Set initialization parameters for trace file management.</p>
<p>See <a href="#i4183">"Step 1: Setting Initialization Parameters for Trace File Management"</a>.</p>
</li>
<li>
<p>Enable the SQL Trace facility for the desired session, and run the application. This step produces a trace file containing statistics for the SQL statements issued by the application.</p>
<p>See <a href="#i8759">"Step 2: Enabling the SQL Trace Facility"</a>.</p>
</li>
<li>
<p>Run <code>TKPROF</code> to translate the trace file created in Step 2 into a readable output file. This step can optionally create a SQL script that you can use to store the statistics in a database.</p>
<p>See <a href="#i4191">"Step 3: Formatting Trace Files with TKPROF"</a>.</p>
</li>
<li>
<p>Interpret the output file created in Step 3.</p>
<p>See <a href="#i4642">"Step 4: Interpreting TKPROF Output"</a>.</p>
</li>
<li>
<p>Optionally, run the SQL script produced in Step 3 to store the statistics in the database.</p>
<p>See <a href="#i4202">"Step 5: Storing SQL Trace Facility Statistics"</a>.</p>
</li>
</ol>
<p>The following sections discuss each step in depth.</p>
<a id="i4183"></a>
<div id="PFGRF94982" class="sect2">
<h3 class="sect2"><span class="secnum">21.4.1</span> Step 1: Setting Initialization Parameters for Trace File Management</h3>
<p>When the SQL Trace facility is enabled for a session, Oracle Database generates a trace file containing statistics for traced SQL statements for that session. When the SQL Trace facility is enabled for an instance, Oracle Database creates a separate trace file for each process. Before enabling the SQL Trace facility:</p>
<ol>
<li>
<p>Check the settings of the <code>TIMED_STATISTICS</code>, <code>MAX_DUMP_FILE_SIZE</code>, and <code>DIAGNOSTIC_DEST</code> initialization parameters, as indicated in <a href="#CHDCDGFH">Table 21-1</a>.</p>
<div id="PFGRF95289" class="tblformal">
<p class="titleintable"><a id="sthref1566"></a><a id="CHDCDGFH"></a>Table 21-1 Initialization Parameters to Check Before Enabling SQL Trace</p>
<table class="cellalignment1686" title="Initialization Parameters to Check Before Enabling SQL Trace" summary="This table describes the initialization parameters that should be checked before enabling SQL Trace." dir="ltr">
<thead>
<tr class="cellalignment1680">
<th class="cellalignment1687" id="r1c1-t6">Parameter</th>
<th class="cellalignment1687" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r2c1-t6" headers="r1c1-t6">
<p><code>DIAGNOSTIC_DEST<a id="sthref1567"></a></code></p>
</td>
<td class="cellalignment1688" headers="r2c1-t6 r1c2-t6">
<p><a id="sthref1568"></a><a id="sthref1569"></a>Specifies the location of the Automatic Diagnostic Repository (ADR) Home. The diagnostic files for each database instance are located in this dedicated directory. <a class="olink REFRN10280" href="../../server.112/e40402/initparams078.htm#REFRN10280"><span class="italic">Oracle Database Reference</span></a> for information about the <code>DIAGNOSTIC_DEST</code> initialization parameter.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r3c1-t6" headers="r1c1-t6">
<p><code>MAX_DUMP_FILE_SIZE<a id="sthref1570"></a></code></p>
</td>
<td class="cellalignment1688" headers="r3c1-t6 r1c2-t6">
<p>When the SQL Trace facility is enabled at the database instance level, every call to the database writes a text line in a file in the operating system's file format. The maximum size of these files in operating system blocks is limited by this initialization parameter. The default is <code>UNLIMITED</code>. See <a class="olink ADMIN11244" href="../../server.112/e25494/monitoring.htm#ADMIN11244"><span class="italic">Oracle Database Administrator's Guide</span></a> to learn how to control the trace file size.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r4c1-t6" headers="r1c1-t6">
<p><code>TIMED_STATISTICS<a id="sthref1571"></a></code></p>
</td>
<td class="cellalignment1688" headers="r4c1-t6 r1c2-t6">
<p>Enables and disables the collection of timed statistics, such as CPU and elapsed times, by the SQL Trace facility, and the collection of various statistics in the <code>V$</code> views.</p>
<p>If <code>STATISTICS_LEVEL</code> is set to <code>TYPICAL</code> or <code>ALL</code>, then the default value of <code>TIMED_STATISTICS</code> is <code>TRUE</code>. If <code>STATISTICS_LEVEL</code> is set to <code>BASIC</code>, then the default value is <code>FALSE</code>. See <a class="olink REFRN10214" href="../../server.112/e40402/initparams254.htm#REFRN10214"><span class="italic">Oracle Database Reference</span></a> for information about the <code>STATISTICS_LEVEL</code> initialization parameter.</p>
<p>Enabling timing causes extra timing calls for low-level operations. This is a dynamic parameter. It is also a session parameter. See <a class="olink REFRN10218" href="../../server.112/e40402/initparams259.htm#REFRN10218"><span class="italic">Oracle Database Reference</span></a> for information about the <code>TIMED_STATISTICS</code> initialization parameter.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></li>
<li>
<p>Devise a way of recognizing the resulting trace file.</p>
<p><a id="sthref1572"></a><a id="sthref1573"></a>Be sure you know how to distinguish the trace files by name. You can tag trace files by including in your programs a statement like <code>SELECT</code> <code>'</code><code><span class="codeinlineitalic">program_name</span></code><code>'</code> <code>FROM</code> <code>DUAL</code>. You can then trace each file back to the process that created it.</p>
<p>You can also set the <code><a id="sthref1574"></a>TRACEFILE_IDENTIFIER</code> initialization parameter to specify a custom identifier that becomes part of the trace file name. For example, you can add <code><span class="codeinlineitalic">my_trace_id</span></code> to subsequent trace file names for easy identification with the following:</p>
<pre>
ALTER SESSION SET TRACEFILE_IDENTIFIER = '<span class="italic">my_trace_id</span>';
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN10220" href="../../server.112/e40402/initparams261.htm#REFRN10220"><span class="italic">Oracle Database Reference</span></a> for information about the <code>TRACEFILE_IDENTIFIER</code> initialization parameter</div>
</li>
<li>
<p>If the operating system retains multiple versions of files, then ensure that the version limit is high enough to accommodate the number of trace files you expect the SQL Trace facility to generate.</p>
</li>
<li>
<p>The generated trace files can be owned by an operating system user other than yourself. This user must make the trace files available to you before you can use <code>TKPROF</code> to format them.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="instance_tune.htm#i34268">"Setting the Level of Statistics Collection"</a> for information about <code>STATISTICS_LEVEL</code> settings</p>
</li>
<li>
<p><a class="olink REFRN10214" href="../../server.112/e40402/initparams254.htm#REFRN10214"><span class="italic">Oracle Database Reference</span></a> for information about the <code>STATISTICS_LEVEL</code> initialization parameter</p>
</li>
</ul>
</div>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i8759"></a>
<div id="PFGRF94984" class="sect2">
<h3 class="sect2"><span class="secnum">21.4.2</span> Step 2: Enabling the SQL Trace Facility</h3>
<p><a id="sthref1575"></a><a id="sthref1576"></a>Enable the SQL Trace facility at either of the following levels:</p>
<ul>
<li>
<p>Database instance</p>
<p>Use <code>DBMS_MONITOR.DATABASE_TRACE_ENABLE</code> procedure to enable tracing, and <code>DBMS_MONITOR.DATABASE_TRACE_DISABLE</code> procedure to disable tracing.</p>
</li>
<li>
<p>Database session</p>
<p>Use <code>DBMS_SESSION.SET_SQL_TRACE</code> procedure to enable tracing (<code>TRUE</code>) or disable tracing (<code>FALSE</code>).</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
Because running the SQL Trace facility increases system overhead, enable it only when tuning SQL statements, and disable it when you are finished.</div>
</li>
</ul>
<p class="orderedlisttitle">To enable and disable tracing at the database instance level:&nbsp;</p>
<ol>
<li>
<p>Start SQL*Plus, and connect to the database with administrator privileges.</p>
</li>
<li>
<p>Enable tracing at the database instance level.</p>
<p>The following example enables tracing for the <code>orcl</code> instance:</p>
<pre>
EXEC DBMS_MONITOR.DATABASE_TRACE_ENABLE(INSTANCE_NAME =&gt; 'orcl');
</pre></li>
<li>
<p>Execute the statements to be traced.</p>
</li>
<li>
<p>Disable tracing for the database instance.</p>
<p>The following example disables tracing for the <code>orcl</code> instance:</p>
<pre>
EXEC DBMS_MONITOR.DATABASE_TRACE_DISABLE(INSTANCE_NAME =&gt; 'orcl');
</pre></li>
</ol>
<p class="orderedlisttitle">To enable and disable tracing at the session level:&nbsp;</p>
<ol>
<li>
<p>Start SQL*Plus, and connect to the database with the desired credentials.</p>
</li>
<li>
<p>Enable tracing for the current session.</p>
<p>The following example enables tracing for the current session:</p>
<pre>
EXEC DBMS_SESSION.SET_SQL_TRACE(sql_trace =&gt; TRUE);
</pre></li>
<li>
<p>Execute the statements to be traced.</p>
</li>
<li>
<p>Disable tracing for the current session.</p>
<p>The following example disables tracing for the current session:</p>
<pre>
EXEC DBMS_SESSION.SET_SQL_TRACE(sql_trace =&gt; FALSE);
</pre></li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS67166" href="../../appdev.112/e40758/d_monitor.htm#ARPLS67166"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> to learn about <code>DBMS_MONITOR.DATABASE_TRACE_ENABLE</code></div>
</div>
<!-- class="sect2" -->
<a id="i4191"></a>
<div id="PFGRF94985" class="sect2">
<h3 class="sect2"><span class="secnum">21.4.3</span> Step 3: Formatting Trace Files with TKPROF</h3>
<p><code><a id="sthref1579"></a><a id="sthref1580"></a>TKPROF</code> accepts as input a trace file produced by the SQL Trace facility, and it produces a formatted output file. <code>TKPROF</code> can also be used to generate execution plans.</p>
<p>After the SQL Trace facility has generated trace files, you can:</p>
<ul>
<li>
<p>Run <code>TKPROF</code> on each individual trace file, producing several formatted output files, one for each session.</p>
</li>
<li>
<p>Concatenate the trace files, and then run <code>TKPROF</code> on the result to produce a formatted output file for the entire instance.</p>
</li>
<li>
<p>Run the <code>trcsess</code> command-line utility to consolidate tracing information from several trace files, then run <code>TKPROF</code> on the result. See <a href="#i20110">"Using the trcsess Utility"</a>.</p>
</li>
</ul>
<p><code>TKPROF</code> does not report <code>COMMITs</code> and <code>ROLLBACKs</code> that are recorded in the trace file.</p>
<a id="i4146"></a>
<div id="PFGRF94986" class="sect3">
<h4 class="sect3"><span class="secnum">21.4.3.1</span> Sample TKPROF Output</h4>
<p>Sample output from <code>TKPROF</code> is as follows:</p>
<pre>
SELECT * FROM emp, dept 
WHERE emp.deptno = dept.deptno;

call   count      cpu    elapsed     disk    query current    rows
---- -------  -------  --------- -------- -------- -------  ------
Parse      1     0.16      0.29         3       13       0       0
Execute    1     0.00      0.00         0        0       0       0
Fetch      1     0.03      0.26         2        2       4      14 
 
Misses in library cache during parse: 1 
Parsing user id: (8) SCOTT 

Rows     Execution Plan
-------  --------------------------------------------------- 
</pre>
<pre>
14  MERGE JOIN
 4   SORT JOIN
 4     TABLE ACCESS (FULL) OF 'DEPT'
14    SORT JOIN
14      TABLE ACCESS (FULL) OF 'EMP'
</pre>
<pre>
</pre>
<p><a id="sthref1581"></a>For this statement, <code>TKPROF</code> output includes the following information:</p>
<ul>
<li>
<p>The text of the SQL statement</p>
</li>
<li>
<p>The SQL Trace statistics in tabular form</p>
</li>
<li>
<p>The number of library cache misses for the parsing and execution of the statement.</p>
</li>
<li>
<p>The user initially parsing the statement.</p>
</li>
<li>
<p>The execution plan<a id="sthref1582"></a> generated by <code>EXPLAIN</code> <code>PLAN</code>.</p>
</li>
</ul>
<p><code>TKPROF</code> also provides a summary of user level statements and recursive SQL calls for the trace file.</p>
</div>
<!-- class="sect3" -->
<a id="i4537"></a>
<div id="PFGRF94987" class="sect3">
<h4 class="sect3"><span class="secnum">21.4.3.2</span> Syntax of TKPROF<code><a id="sthref1583"></a></code></h4>
<p><code>TKPROF</code> is run from the operating system prompt. The syntax is:</p>
<pre>
tkprof filename1 filename2 [waits=yes|no] [sort=<span class="italic">option</span>] [print=<span class="italic">n</span>]
    [aggregate=yes|no] [insert=<span class="italic">filename3</span>] [sys=yes|no] [table=<span class="italic">schema.table</span>]
    [explain=<span class="italic">user/password</span>] [record=<span class="italic">filename4</span>] [width=<span class="italic">n</span>]
</pre>
<p>The input and output files are the only required arguments. If you invoke <code>TKPROF</code> without arguments, then the tool displays online help. Use the arguments in <a href="#g22383">Table 21-2</a> with <code>TKPROF</code>.</p>
<div id="PFGRF94988" class="tblformalwide">
<p class="titleintable"><a id="sthref1584"></a><a id="g22383"></a>Table 21-2 TKPROF Arguments</p>
<table class="cellalignment1691" title="TKPROF Arguments" summary="This table describes the arguments that are used with TKPROF." dir="ltr">
<thead>
<tr class="cellalignment1680">
<th class="cellalignment1687" id="r1c1-t11">Argument</th>
<th class="cellalignment1687" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r2c1-t11" headers="r1c1-t11">
<p><code><span class="codeinlineitalic">filename1</span></code></p>
</td>
<td class="cellalignment1688" headers="r2c1-t11 r1c2-t11">
<p>Specifies the input file, a trace file containing statistics produced by the SQL Trace facility. This file can be either a trace file produced for a single session, or a file produced by concatenating individual trace files from multiple sessions.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r3c1-t11" headers="r1c1-t11">
<p><code><span class="codeinlineitalic">filename2</span></code></p>
</td>
<td class="cellalignment1688" headers="r3c1-t11 r1c2-t11">
<p>Specifies the file to which <code>TKPROF</code> writes its formatted output.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r4c1-t11" headers="r1c1-t11">
<p><code>WAITS</code></p>
</td>
<td class="cellalignment1688" headers="r4c1-t11 r1c2-t11">
<p>Specifies whether to record summary for any wait events found in the trace file. Values are <code>YES</code> or <code>NO</code>. The default is <code>YES</code>.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r5c1-t11" headers="r1c1-t11">
<p><code>SORT</code></p>
</td>
<td class="cellalignment1688" headers="r5c1-t11 r1c2-t11">
<p>Sorts traced SQL statements in descending order of specified sort option before listing them into the output file. If multiple options are specified, then the output is sorted in descending order by the sum of the values specified in the sort options. If you omit this parameter, then <code>TKPROF</code> lists statements into the output file in order of first use. Sort options are listed as follows:</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r6c1-t11" headers="r1c1-t11">
<p><code>PRSCNT</code></p>
</td>
<td class="cellalignment1688" headers="r6c1-t11 r1c2-t11">
<p>Number of times parsed.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r7c1-t11" headers="r1c1-t11">
<p><code>PRSCPU</code></p>
</td>
<td class="cellalignment1688" headers="r7c1-t11 r1c2-t11">
<p>CPU time spent parsing.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r8c1-t11" headers="r1c1-t11">
<p><code>PRSELA</code></p>
</td>
<td class="cellalignment1688" headers="r8c1-t11 r1c2-t11">
<p>Elapsed time spent parsing.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r9c1-t11" headers="r1c1-t11">
<p><code>PRSDSK</code></p>
</td>
<td class="cellalignment1688" headers="r9c1-t11 r1c2-t11">
<p>Number of physical reads from disk during parse.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r10c1-t11" headers="r1c1-t11">
<p><code>PRSQRY</code></p>
</td>
<td class="cellalignment1688" headers="r10c1-t11 r1c2-t11">
<p>Number of consistent mode block reads during parse.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r11c1-t11" headers="r1c1-t11">
<p><code>PRSCU</code></p>
</td>
<td class="cellalignment1688" headers="r11c1-t11 r1c2-t11">
<p>Number of current mode block reads during parse.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r12c1-t11" headers="r1c1-t11">
<p><code>PRSMIS</code></p>
</td>
<td class="cellalignment1688" headers="r12c1-t11 r1c2-t11">
<p>Number of library cache misses during parse.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r13c1-t11" headers="r1c1-t11">
<p><code>EXECNT</code></p>
</td>
<td class="cellalignment1688" headers="r13c1-t11 r1c2-t11">
<p>Number of executes.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r14c1-t11" headers="r1c1-t11">
<p><code>EXECPU</code></p>
</td>
<td class="cellalignment1688" headers="r14c1-t11 r1c2-t11">
<p>CPU time spent executing.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r15c1-t11" headers="r1c1-t11">
<p><code>EXEELA</code></p>
</td>
<td class="cellalignment1688" headers="r15c1-t11 r1c2-t11">
<p>Elapsed time spent executing.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r16c1-t11" headers="r1c1-t11">
<p><code>EXEDSK</code></p>
</td>
<td class="cellalignment1688" headers="r16c1-t11 r1c2-t11">
<p>Number of physical reads from disk during execute.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r17c1-t11" headers="r1c1-t11">
<p><code>EXEQRY</code></p>
</td>
<td class="cellalignment1688" headers="r17c1-t11 r1c2-t11">
<p>Number of consistent mode block reads during execute.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r18c1-t11" headers="r1c1-t11">
<p><code>EXECU</code></p>
</td>
<td class="cellalignment1688" headers="r18c1-t11 r1c2-t11">
<p>Number of current mode block reads during execute.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r19c1-t11" headers="r1c1-t11">
<p><code>EXEROW</code></p>
</td>
<td class="cellalignment1688" headers="r19c1-t11 r1c2-t11">
<p>Number of rows processed during execute.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r20c1-t11" headers="r1c1-t11">
<p><code>EXEMIS</code></p>
</td>
<td class="cellalignment1688" headers="r20c1-t11 r1c2-t11">
<p>Number of library cache misses during execute.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r21c1-t11" headers="r1c1-t11">
<p><code>FCHCNT</code></p>
</td>
<td class="cellalignment1688" headers="r21c1-t11 r1c2-t11">
<p>Number of fetches.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r22c1-t11" headers="r1c1-t11">
<p><code>FCHCPU</code></p>
</td>
<td class="cellalignment1688" headers="r22c1-t11 r1c2-t11">
<p>CPU time spent fetching.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r23c1-t11" headers="r1c1-t11">
<p><code>FCHELA</code></p>
</td>
<td class="cellalignment1688" headers="r23c1-t11 r1c2-t11">
<p>Elapsed time spent fetching.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r24c1-t11" headers="r1c1-t11">
<p><code>FCHDSK</code></p>
</td>
<td class="cellalignment1688" headers="r24c1-t11 r1c2-t11">
<p>Number of physical reads from disk during fetch.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r25c1-t11" headers="r1c1-t11">
<p><code>FCHQRY</code></p>
</td>
<td class="cellalignment1688" headers="r25c1-t11 r1c2-t11">
<p>Number of consistent mode block reads during fetch.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r26c1-t11" headers="r1c1-t11">
<p><code>FCHCU</code></p>
</td>
<td class="cellalignment1688" headers="r26c1-t11 r1c2-t11">
<p>Number of current mode block reads during fetch.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r27c1-t11" headers="r1c1-t11">
<p><code>FCHROW</code></p>
</td>
<td class="cellalignment1688" headers="r27c1-t11 r1c2-t11">
<p>Number of rows fetched.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r28c1-t11" headers="r1c1-t11">
<p><code>USERID</code></p>
</td>
<td class="cellalignment1688" headers="r28c1-t11 r1c2-t11">
<p>Userid of user that parsed the cursor.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r29c1-t11" headers="r1c1-t11">
<p><code>PRINT</code></p>
</td>
<td class="cellalignment1688" headers="r29c1-t11 r1c2-t11">
<p>Lists only the first integer sorted SQL statements from the output file. If you omit this parameter, then <code>TKPROF</code> lists all traced SQL statements. This parameter does not affect the optional SQL script. The SQL script always generates insert data for all traced SQL statements.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r30c1-t11" headers="r1c1-t11">
<p><code>AGGREGATE</code></p>
</td>
<td class="cellalignment1688" headers="r30c1-t11 r1c2-t11">
<p>If you specify <code>AGGREGATE</code> = <code>NO</code>, then <code>TKPROF</code> does not aggregate multiple users of the same SQL text.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r31c1-t11" headers="r1c1-t11">
<p><code>INSERT</code></p>
</td>
<td class="cellalignment1688" headers="r31c1-t11 r1c2-t11">
<p>Creates a SQL script that stores the trace file statistics in the database. <code>TKPROF</code> creates this script with the name <code><span class="codeinlineitalic">filename3</span></code>. This script creates a table and inserts a row of statistics for each traced SQL statement into the table.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r32c1-t11" headers="r1c1-t11">
<p><code>SYS</code></p>
</td>
<td class="cellalignment1688" headers="r32c1-t11 r1c2-t11">
<p>Enables and disables the listing of SQL statements issued by the user <code>SYS</code>, or recursive SQL statements, into the output file. The default value of <code>YES</code> causes <code>TKPROF</code> to list these statements. The value of <code>NO</code> causes <code>TKPROF</code> to omit them. This parameter does not affect the optional SQL script. The SQL script always inserts statistics for all traced SQL statements, including recursive SQL statements.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r33c1-t11" headers="r1c1-t11">
<p><code>TABLE</code></p>
</td>
<td class="cellalignment1688" headers="r33c1-t11 r1c2-t11">
<p>Specifies the schema and name of the table into which <code>TKPROF</code> temporarily places execution plans before writing them to the output file. If the specified table exists, then <code>TKPROF</code> deletes all rows in the table, uses it for the <code>EXPLAIN</code> <code>PLAN</code> statement (which writes more rows into the table), and then deletes those rows. If this table does not exist, then <code>TKPROF</code> creates it, uses it, and then drops it.</p>
<p>The specified <span class="italic">user</span> must be able to issue <code>INSERT</code>, <code>SELECT</code>, and <code>DELETE</code> statements against the table. If the table does not exist, then the user must also be able to issue <code>CREATE</code> <code>TABLE</code> and <code>DROP</code> <code>TABLE</code> statements. For the privileges to issue these statements, see the <a class="olink SQLRF" href="../e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a><span class="italic">.</span></p>
<p>This option allows multiple individuals to run <code>TKPROF</code> concurrently with the same user in the <code>EXPLAIN</code> value. These individuals can specify different <code>TABLE</code> values and avoid destructively interfering with each other's processing on the temporary plan table.</p>
<p>If you use the <code>EXPLAIN</code> parameter without the <code>TABLE</code> parameter, then <code>TKPROF</code> uses the table <code>PROF$PLAN_TABLE</code> in the schema of the user specified by the <code>EXPLAIN</code> parameter. If you use the <code>TABLE</code> parameter without the <code>EXPLAIN</code> parameter, then <code>TKPROF</code> ignores the <code>TABLE</code> parameter.</p>
<p>If no plan table exists, <code>TKPROF</code> creates the table <code>PROF$PLAN_TABLE</code> and then drops it at the end.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r34c1-t11" headers="r1c1-t11">
<p><code>EXPLAIN</code></p>
</td>
<td class="cellalignment1688" headers="r34c1-t11 r1c2-t11">
<p>Determines<a id="sthref1585"></a> the execution plan for each SQL statement in the trace file and writes these execution plans to the output file<a id="sthref1586"></a>. <code>TKPROF</code> determines execution plans by issuing the <code>EXPLAIN</code> <code>PLAN</code> statement after connecting to Oracle Database with the user and password specified in this parameter. The specified user must have <code>CREATE</code> <code>SESSION</code> system privileges.<a id="sthref1587"></a> <code>TKPROF</code> takes longer to process a large trace file if the <code>EXPLAIN</code> option is used.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r35c1-t11" headers="r1c1-t11">
<p><code>RECORD</code></p>
</td>
<td class="cellalignment1688" headers="r35c1-t11 r1c2-t11">
<p>Creates a SQL script with the specified <code><span class="codeinlineitalic">filename4</span></code> with all of the nonrecursive SQL in the trace file. You can use this script to replay the user events from the trace file.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r36c1-t11" headers="r1c1-t11">
<p><code>WIDTH</code></p>
</td>
<td class="cellalignment1688" headers="r36c1-t11 r1c2-t11">
<p>An integer that controls the output line width of some TKPROF output, such as the explain plan. This parameter is useful for post-processing of TKPROF output.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect3" -->
<a id="i21476"></a>
<div id="PFGRF94989" class="sect3">
<h4 class="sect3"><span class="secnum">21.4.3.3</span> Examples of TKPROF Statement</h4>
<p>This section provides two brief examples of <code>TKPROF</code> usage. For an complete example of <code>TKPROF</code> output, see <a href="#i17039">"Sample TKPROF Output"</a>.</p>
<div id="PFGRF94990" class="sect4"><a id="sthref1588"></a>
<h5 class="sect4"><span class="secnum">21.4.3.3.1</span> TKPROF Example 1</h5>
<p>If you are processing a large trace file using a combination of <code>SORT</code> parameters and the <code>PRINT</code> parameter, then you can produce a <code>TKPROF</code> output file containing only the highest resource-intensive statements. For example, the following statement prints the 10 statements in the trace file that have generated the most physical I/O:</p>
<pre>
TKPROF ora53269.trc ora53269.prf SORT = (PRSDSK, EXEDSK, FCHDSK) PRINT = 10
</pre></div>
<!-- class="sect4" -->
<div id="PFGRF94991" class="sect4"><a id="sthref1589"></a>
<h5 class="sect4"><span class="secnum">21.4.3.3.2</span> TKPROF Example 2</h5>
<p>This example runs <code>TKPROF</code>, accepts a trace file named <code>examp12_jane_fg_sqlplus_007</code>.<code>trc</code>, and writes a formatted output file named <code>outputa</code>.<code>prf</code>:</p>
<pre>
TKPROF examp12_jane_fg_sqlplus_007.trc OUTPUTA.PRF
EXPLAIN=scott/tiger TABLE=scott.temp_plan_table_a INSERT=STOREA.SQL SYS=NO
SORT=(EXECPU,FCHCPU)
</pre>
<p>This example is likely to be longer than a single line on the screen, and you might need to use continuation characters, depending on the operating system.</p>
<p>Note the other parameters in this example:</p>
<ul>
<li>
<p>The <code>EXPLAIN</code> value causes <code>TKPROF</code> to connect as the user <code>scott</code> and use the <code>EXPLAIN</code> <code>PLAN</code> statement to generate the execution plan for each traced SQL statement. You can use this to get access paths and row source counts.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the cursor for a SQL statement is not closed, then <code>TKPROF</code> output does not automatically include the actual execution plan of the SQL statement. In this situation, you can use the <code>EXPLAIN</code> option with <code>TKPROF</code> to generate an execution plan.</div>
</li>
<li>
<p>The <code>TABLE</code> value causes <code>TKPROF</code> to use the table <code>temp_plan_table_a</code> in the schema <code>scott</code> as a temporary plan table.</p>
</li>
<li>
<p>The <code>INSERT</code> value causes <code>TKPROF</code> to generate a SQL script named <code>STOREA</code>.<code>SQL</code> that stores statistics for all traced SQL statements in the database.</p>
</li>
<li>
<p>The <code>SYS</code> parameter with the value of <code>NO</code> causes <code>TKPROF</code> to omit recursive SQL statements from the output file. In this way, you can ignore internal Oracle Database statements such as temporary table operations.</p>
</li>
<li>
<p>The <code>SORT</code> value causes <code>TKPROF</code> to sort the SQL statements in order of the sum of the CPU time spent executing and the CPU time spent fetching rows before writing them to the output file. For greatest efficiency, always use <code>SORT</code> parameters.</p>
</li>
</ul>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i4642"></a>
<div id="PFGRF94992" class="sect2">
<h3 class="sect2"><span class="secnum">21.4.4</span> Step 4: Interpreting TKPROF Output</h3>
<p>This section provides pointers for interpreting <code>TKPROF</code> output.</p>
<ul>
<li>
<p><a href="#i4225">Tabular Statistics in TKPROF</a></p>
</li>
<li>
<p><a href="#i18110">Row Source Operations</a></p>
</li>
<li>
<p><a href="#i18143">Wait Event Information</a></p>
</li>
<li>
<p><a href="#i18111">Interpreting the Resolution of Statistics</a></p>
</li>
<li>
<p><a href="#i18112">Understanding Recursive Calls</a></p>
</li>
<li>
<p><a href="#i4229">Library Cache Misses in TKPROF</a></p>
</li>
<li>
<p><a href="#i7060">Statement Truncation in SQL Trace</a></p>
</li>
<li>
<p><a href="#i4233">Identification of User Issuing the SQL Statement in TKPROF</a></p>
</li>
<li>
<p><a href="#i4237">Execution Plan in TKPROF</a></p>
</li>
<li>
<p><a href="#i4241">Deciding Which Statements to Tune</a></p>
</li>
</ul>
<p>While <code>TKPROF</code> provides a very useful analysis, the most accurate measure of efficiency is the actual performance of the application in question. At the end of the <code>TKPROF</code> output is a summary of the work done in the database engine by the process during the period that the trace was running.</p>
<a id="i4225"></a>
<div id="PFGRF94993" class="sect3">
<h4 class="sect3"><span class="secnum">21.4.4.1</span> Tabular Statistics in TKPROF</h4>
<p><code>TKPROF</code> lists the statistics for a SQL statement returned by the SQL Trace facility in rows and columns. Each row corresponds to one of three steps of SQL statement processing. Statistics are identified by the value of the <code>CALL</code> column. See <a href="#g22309">Table 21-3</a>.</p>
<div id="PFGRF94994" class="tblformal">
<p class="titleintable"><a id="sthref1590"></a><a id="g22309"></a>Table 21-3 CALL Column Values</p>
<table class="cellalignment1686" title="CALL Column Values" summary="This table explains the meaning of the CALL column values." dir="ltr">
<thead>
<tr class="cellalignment1680">
<th class="cellalignment1687" id="r1c1-t13">CALL Value</th>
<th class="cellalignment1687" id="r1c2-t13">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r2c1-t13" headers="r1c1-t13">
<p><code>PARSE</code></p>
</td>
<td class="cellalignment1688" headers="r2c1-t13 r1c2-t13">
<p>Translates the SQL statement into an execution plan, including checks for proper security authorization and checks for the existence of tables, columns, and other referenced objects.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r3c1-t13" headers="r1c1-t13">
<p><code>EXECUTE</code></p>
</td>
<td class="cellalignment1688" headers="r3c1-t13 r1c2-t13">
<p>Actual execution of the statement by Oracle. For <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> statements, this modifies the data. For <code>SELECT</code> statements, this identifies the selected rows.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r4c1-t13" headers="r1c1-t13">
<p><code>FETCH</code></p>
</td>
<td class="cellalignment1688" headers="r4c1-t13 r1c2-t13">
<p>Retrieves rows returned by a query. Fetches are only performed for <code>SELECT</code> statements.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a id="sthref1591"></a>The other columns of the SQL Trace facility output are combined statistics for all parses, all executes, and all fetches of a statement. The sum of <code>query</code> and <code>current</code> is the total number of buffers accessed, also called Logical I/Os (LIOs). See <a href="#g22527">Table 21-4</a>.</p>
<div id="PFGRF94995" class="tblformal">
<p class="titleintable"><a id="sthref1592"></a><a id="g22527"></a>Table 21-4 SQL Trace Statistics for Parses, Executes, and Fetches.</p>
<table class="cellalignment1686" title="SQL Trace Statistics for Parses, Executes, and Fetches." summary="This table explains the meaning of the the trace statistics for parses, executes, and fetches." dir="ltr">
<thead>
<tr class="cellalignment1680">
<th class="cellalignment1687" id="r1c1-t14">SQL Trace Statistic</th>
<th class="cellalignment1687" id="r1c2-t14">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r2c1-t14" headers="r1c1-t14">
<p><code>COUNT</code></p>
</td>
<td class="cellalignment1688" headers="r2c1-t14 r1c2-t14">
<p>Number of times a statement was parsed, executed, or fetched.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r3c1-t14" headers="r1c1-t14">
<p><code>CPU</code></p>
</td>
<td class="cellalignment1688" headers="r3c1-t14 r1c2-t14">
<p>Total CPU time in seconds for all parse, execute, or fetch calls for the statement. This value is zero (0) if <code>TIMED_STATISTICS</code> is not turned&nbsp;on.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r4c1-t14" headers="r1c1-t14">
<p><code>ELAPSED</code></p>
</td>
<td class="cellalignment1688" headers="r4c1-t14 r1c2-t14">
<p>Total elapsed time in seconds for all parse, execute, or fetch calls for the statement. This value is zero (0) if <code>TIMED_STATISTICS</code> is not turned on.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r5c1-t14" headers="r1c1-t14">
<p><code>DISK</code></p>
</td>
<td class="cellalignment1688" headers="r5c1-t14 r1c2-t14">
<p>Total number of data blocks physically read from the data files on disk for all parse, execute, or fetch calls.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r6c1-t14" headers="r1c1-t14">
<p><code>QUERY</code></p>
</td>
<td class="cellalignment1688" headers="r6c1-t14 r1c2-t14">
<p>Total number of buffers retrieved in consistent mode for all parse, execute, or fetch calls. Usually, buffers are retrieved in <a id="sthref1593"></a>consistent mode for queries.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r7c1-t14" headers="r1c1-t14">
<p><code>CURRENT</code></p>
</td>
<td class="cellalignment1688" headers="r7c1-t14 r1c2-t14">
<p>Total number of buffers retrieved in <a id="sthref1594"></a>current mode. Buffers are retrieved in current mode for statements such as <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>Statistics about the processed rows appear in the <code>ROWS</code> column. See <a href="#CIACAHBJ">Table 21-5</a>.</p>
<div id="PFGRF94996" class="tblformal">
<p class="titleintable"><a id="sthref1595"></a><a id="CIACAHBJ"></a>Table 21-5 SQL Trace Statistics for the ROWS Column</p>
<table class="cellalignment1686" title="SQL Trace Statistics for the ROWS Column" summary="This table explains the meaning og the SQL Trace statistics for the ROWS column." dir="ltr">
<thead>
<tr class="cellalignment1680">
<th class="cellalignment1687" id="r1c1-t15">SQL Trace Statistic</th>
<th class="cellalignment1687" id="r1c2-t15">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r2c1-t15" headers="r1c1-t15">
<p><code>ROWS</code></p>
</td>
<td class="cellalignment1688" headers="r2c1-t15 r1c2-t15">
<p>Total number of rows processed by the SQL statement. This total does not include rows processed by subqueries of the SQL statement.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>For <code>SELECT</code> statements, the number of rows returned appears for the fetch step. For <code>UPDATE</code>, <code>DELETE</code>, and <code>INSERT</code> statements, the number of rows processed appears for the execute step.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
The row source counts are displayed when a cursor is closed. In SQL*Plus, there is only one user cursor, so each statement executed causes the previous cursor to be closed; therefore, the row source counts are displayed. PL/SQL has its own cursor handling and does not close child cursors when the parent cursor is closed. Exiting (or reconnecting) causes the counts to be displayed.</div>
</div>
<!-- class="sect3" -->
<a id="i18110"></a>
<div id="PFGRF94997" class="sect3">
<h4 class="sect3"><span class="secnum">21.4.4.2</span> Row Source Operations</h4>
<p><a id="sthref1596"></a>Row source operations provide the number of rows processed for each operation executed on the rows and additional row source information, such as physical reads and writes. The following is a sample:</p>
<pre>
Rows     Row Source Operation
-------  ---------------------------------------------------
      0  DELETE  (cr=43141 r=266947 w=25854 time=60235565 us)
  28144   HASH JOIN ANTI (cr=43057 r=262332 w=25854 time=48830056 us)
  51427    TABLE ACCESS FULL STATS$SQLTEXT (cr=3465 r=3463 w=0 time=865083 us)
 647529    INDEX FAST FULL SCAN STATS$SQL_SUMMARY_PK 
                      (cr=39592 r=39325 w=0 time=10522877 us) (object id 7409)
</pre>
<p>In this sample <code>TKPROF</code> output, note the following under the Row Source Operation column:</p>
<ul>
<li>
<p><code>cr</code> specifies consistent reads performed by the row source</p>
</li>
<li>
<p><code>r</code> specifies physical reads performed by the row source</p>
</li>
<li>
<p><code>w</code> specifies physical writes performed by the row source</p>
</li>
<li>
<p><code>time</code> specifies time in microseconds</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i18143"></a>
<div id="PFGRF94998" class="sect3">
<h4 class="sect3"><span class="secnum">21.4.4.3</span> Wait Event Information</h4>
<p><a id="sthref1597"></a>If wait event information exists, then the <code>TKPROF</code> output includes a section similar to the following:</p>
<pre>
Elapsed times include waiting on following events:
  Event waited on                             Times   Max. Wait  Total Waited
  ----------------------------------------   Waited  ----------  ------------
  db file sequential read                      8084        0.12          5.34
  direct path write                             834        0.00          0.00
  direct path write temp                        834        0.00          0.05
  db file parallel read                           8        1.53          5.51
  db file scattered read                       4180        0.07          1.45
  direct path read                             7082        0.00          0.05
  direct path read temp                        7082        0.00          0.44
  rdbms ipc reply                                20        0.00          0.01
  SQL*Net message to client                       1        0.00          0.00
  SQL*Net message from client                     1        0.00          0.00
</pre>
<p>In addition, wait events are summed for the entire trace file at the end of the file.</p>
<p>To ensure that wait events information is written to the trace file for the session, run the following SQL statement:</p>
<pre>
ALTER SESSION SET EVENTS '10046 trace name context forever, level 8';
</pre></div>
<!-- class="sect3" -->
<a id="i18111"></a>
<div id="PFGRF94999" class="sect3">
<h4 class="sect3"><span class="secnum">21.4.4.4</span> Interpreting the Resolution of Statistics</h4>
<p>Timing statistics have a resolution of one hundredth of a second; therefore, any operation on a cursor that takes a hundredth of a second or less might not be timed accurately. Keep this in mind when interpreting statistics. In particular, be careful when interpreting the results from simple queries that execute very quickly.</p>
</div>
<!-- class="sect3" -->
<a id="i18112"></a>
<div id="PFGRF95000" class="sect3">
<h4 class="sect3"><span class="secnum">21.4.4.5</span> Understanding Recursive Calls</h4>
<p><a id="sthref1598"></a>Sometimes, to execute a SQL statement issued by a user, Oracle Database must issue additional statements. Such statements are called recursive calls or recursive SQL statements. For example, if you insert a row into a table that does not have enough space to hold that row, then Oracle Database makes recursive calls to allocate the space dynamically. Recursive calls are also generated when data dictionary information is not available in the data dictionary cache and must be retrieved from disk.</p>
<p>If recursive calls occur while the SQL Trace facility is enabled, then <code>TKPROF</code> produces statistics for the recursive SQL statements and marks them clearly as recursive SQL statements in the output file. You can suppress the listing of Oracle Database internal recursive calls (for example, space management) in the output file by setting the <code>SYS</code> command-line parameter to <code>NO</code>. The statistics for a recursive SQL statement are included in the listing for that statement, not in the listing for the SQL statement that caused the recursive call. So, when you are calculating the total resources required to process a SQL statement, consider the statistics for that statement and those for recursive calls caused by that statement.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Recursive SQL statistics are not included for SQL-level operations.</div>
</div>
<!-- class="sect3" -->
<a id="i4229"></a>
<div id="PFGRF95001" class="sect3">
<h4 class="sect3"><span class="secnum">21.4.4.6</span> Library Cache Misses in TKPROF</h4>
<p><code>TKPROF</code> also lists the number of library cache misses resulting from parse and execute steps for each SQL statement. These statistics appear on separate lines following the tabular statistics. If the statement resulted in no library cache misses, then <code>TKPROF</code> does not list the statistic. In <a href="#i4146">"Sample TKPROF Output"</a>, the statement resulted in one library cache miss for the parse step and no misses for the execute step.</p>
</div>
<!-- class="sect3" -->
<a id="i7060"></a>
<div id="PFGRF95002" class="sect3">
<h4 class="sect3"><span class="secnum">21.4.4.7</span> Statement Truncation in SQL Trace</h4>
<p>The following SQL statements are truncated to 25 characters in the <a id="sthref1599"></a>SQL Trace file:</p>
<pre>
SET ROLE
GRANT
ALTER USER
ALTER ROLE
CREATE USER
CREATE ROLE
</pre></div>
<!-- class="sect3" -->
<a id="i4233"></a>
<div id="PFGRF95003" class="sect3">
<h4 class="sect3"><span class="secnum">21.4.4.8</span> Identification of User Issuing the SQL Statement in TKPROF</h4>
<p><code>TKPROF</code> also lists the user ID of the user issuing each SQL statement. If the SQL Trace input file contained statistics from multiple users, and if the statement was issued by multiple users, then <code>TKPROF</code> lists the ID of the last user to parse the statement. The user ID of all database users appears in the data dictionary in the column <code>ALL_USERS</code>.<code>USER_ID</code>.</p>
</div>
<!-- class="sect3" -->
<a id="i4237"></a>
<div id="PFGRF95004" class="sect3">
<h4 class="sect3"><span class="secnum">21.4.4.9</span> Execution Plan in TKPROF</h4>
<p>If you specify the <code>EXPLAIN</code> parameter on the <code>TKPROF</code> statement line, then <code>TKPROF</code> uses the <code>EXPLAIN</code> <code>PLAN</code> statement to generate the execution plan of each SQL statement traced. <code>TKPROF</code> also displays the number of rows processed by each step of the execution plan.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
Trace files generated immediately after instance startup contain data that reflects the activity of the startup process. In particular, they reflect a disproportionate amount of I/O activity as caches in the system global area (SGA) are filled. For the purposes of tuning, ignore such trace files.</div>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a href="ex_plan.htm#g42231">Chapter 12, "Using EXPLAIN PLAN"</a> for more information on interpreting execution plans</div>
</div>
<!-- class="sect3" -->
<a id="i4241"></a>
<div id="PFGRF95005" class="sect3">
<h4 class="sect3"><span class="secnum">21.4.4.10</span> Deciding Which Statements to Tune</h4>
<p>You need to find which SQL statements use the most CPU or disk resource. If the <code>TIMED_STATISTICS</code> parameter is on, then you can find high CPU activity in the <code>CPU</code> column. If <code>TIMED_STATISTICS</code> is not on, then check the <code>QUERY</code> and <code>CURRENT</code> columns.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i21476">"Examples of TKPROF Statement"</a> for examples of finding resource intensive statements</div>
<p>With the exception of locking problems and inefficient PL/SQL loops, neither the CPU time nor the elapsed time is necessary to find problem statements. The key is the number of block visits, both query (that is, subject to read consistency) and current (that is, not subject to read consistency). Segment headers and blocks that are going to be updated are acquired in current mode, but all query and subquery processing requests the data in query mode. These are precisely the same measures as the instance statistics <code>CONSISTENT</code> <code>GETS</code> and <code>DB</code> <code>BLOCK</code> <code>GETS</code>. You can find high disk activity in the disk column.</p>
<p>The following listing shows <code><a id="sthref1600"></a><a id="sthref1601"></a>TKPROF</code> output for one SQL statement as it appears in the output file<a id="sthref1602"></a><a id="sthref1603"></a>:<a id="sthref1604"></a></p>
<pre>
SELECT * 
FROM emp, dept 
WHERE emp.deptno = dept.deptno;

call   count      cpu    elapsed     disk    query current    rows
---- -------  -------  --------- -------- -------- -------  ------
Parse     11     0.08      0.18        0       0       0         0
Execute   11     0.23      0.66        0       3       6         0
Fetch     35     6.70      6.83      100   12326       2       824
------------------------------------------------------------------
total     57     7.01      7.67      100   12329       8       826

Misses in library cache during parse: 0 
</pre>
<p>If it is acceptable to have 7.01 CPU seconds and to retrieve 824 rows, then you need not look any further at this trace output. In fact, a major use of <code>TKPROF</code> reports in a tuning exercise is to eliminate processes from the detailed tuning phase.</p>
<p>You can also see that 10 unnecessary parse call were made (because there were 11 parse calls for this one statement) and that array fetch operations were performed. You know this because more rows were fetched than there were fetches performed. A large gap between <code>CPU</code> and <code>elapsed</code> timings indicates Physical I/Os (PIOs).</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i4202"></a>
<div id="PFGRF95006" class="sect2">
<h3 class="sect2"><span class="secnum">21.4.5</span> Step 5: Storing SQL Trace Facility Statistics</h3>
<p>You might want to keep a history of the statistics generated by the SQL Trace facility for an application, and compare them over time. <code>TKPROF</code> can generate a SQL script that creates a table and inserts rows of statistics into it. This script contains:</p>
<ul>
<li>
<p>A <code>CREATE</code> <code>TABLE</code> statement that creates an output table named <code>TKPROF_TABLE</code>.</p>
</li>
<li>
<p><code>INSERT</code> statements that add rows of statistics, one for each traced SQL statement, to the <code>TKPROF_TABLE</code>.</p>
</li>
</ul>
<p>After running <code>TKPROF</code>, you can run this script to store the statistics in the database.</p>
<a id="i4255"></a>
<div id="PFGRF95007" class="sect3">
<h4 class="sect3"><span class="secnum">21.4.5.1</span> Generating the TKPROF Output SQL Script</h4>
<p><a id="sthref1605"></a>When you run <code>TKPROF</code>, use the <code>INSERT</code> parameter to specify the name of the generated SQL script. If you omit this parameter, then <code>TKPROF</code> does not generate a script.</p>
</div>
<!-- class="sect3" -->
<a id="i4259"></a>
<div id="PFGRF95008" class="sect3">
<h4 class="sect3"><span class="secnum">21.4.5.2</span> Editing the TKPROF Output SQL Script</h4>
<p><a id="sthref1606"></a>After <code>TKPROF</code> has created the SQL script, you might want to edit the script before running it. If you have created an output table for previously collected statistics, and if you want to add new statistics to this table, then remove the <code>CREATE</code> <code>TABLE</code> statement from the script. The script then inserts the new rows into the existing table.</p>
<p>If you have created multiple output tables, perhaps to store statistics from different databases in different tables, then edit the <code>CREATE</code> <code>TABLE</code> and <code>INSERT</code> statements to change the name of the output table.</p>
</div>
<!-- class="sect3" -->
<a id="i4263"></a>
<div id="PFGRF95009" class="sect3">
<h4 class="sect3"><span class="secnum">21.4.5.3</span> Querying the Output Table</h4>
<p><a id="sthref1607"></a>The following <code>CREATE</code> <code>TABLE</code> statement creates the <code>TKPROF_TABLE</code>:</p>
<pre>
CREATE TABLE TKPROF_TABLE (
</pre>
<pre>
DATE_OF_INSERT    DATE,
CURSOR_NUM        NUMBER,
DEPTH             NUMBER,
USER_ID           NUMBER,
PARSE_CNT         NUMBER,
PARSE_CPU         NUMBER,
PARSE_ELAP        NUMBER,
PARSE_DISK        NUMBER,
PARSE_QUERY       NUMBER,
PARSE_CURRENT     NUMBER,
PARSE_MISS        NUMBER,
EXE_COUNT         NUMBER,
EXE_CPU           NUMBER,
EXE_ELAP          NUMBER,
EXE_DISK          NUMBER,
EXE_QUERY         NUMBER,
EXE_CURRENT       NUMBER,
EXE_MISS          NUMBER,
EXE_ROWS          NUMBER,
FETCH_COUNT       NUMBER,
FETCH_CPU         NUMBER,
FETCH_ELAP        NUMBER,
FETCH_DISK        NUMBER,
FETCH_QUERY       NUMBER,
FETCH_CURRENT     NUMBER,
FETCH_ROWS        NUMBER,
CLOCK_TICKS       NUMBER,
SQL_STATEMENT     LONG);
</pre>
<pre>
</pre>
<p>Most output table columns correspond directly to the statistics that appear in the formatted output file. For example, the <code>PARSE_CNT</code> column value corresponds to the count statistic for the parse step in the output file.</p>
<p>The columns<a id="sthref1608"></a> in <a href="#g22325">Table 21-6</a> help you identify a row of statistics.</p>
<div id="PFGRF95010" class="tblformal">
<p class="titleintable"><a id="sthref1609"></a><a id="g22325"></a>Table 21-6 TKPROF_TABLE Columns for Identifying a Row of Statistics</p>
<table class="cellalignment1686" title="TKPROF_TABLE Columns for Identifying a Row of Statistics" summary="This table describes the TKPROF_TABLE columns." dir="ltr">
<thead>
<tr class="cellalignment1680">
<th class="cellalignment1687" id="r1c1-t21">Column</th>
<th class="cellalignment1687" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r2c1-t21" headers="r1c1-t21">
<p><code>SQL_STATEMENT</code></p>
</td>
<td class="cellalignment1688" headers="r2c1-t21 r1c2-t21">
<p><a id="sthref1610"></a>This is the SQL statement for which the SQL Trace facility collected the row of statistics. Because this column has data type <code>LONG</code>, you cannot use it in expressions or <code>WHERE</code> clause conditions.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r3c1-t21" headers="r1c1-t21">
<p><code>DATE_OF_INSERT</code></p>
</td>
<td class="cellalignment1688" headers="r3c1-t21 r1c2-t21">
<p><a id="sthref1611"></a>This is the date and time when the row was inserted into the table. This value is not exactly the same as the time the statistics were collected by the SQL Trace facility.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r4c1-t21" headers="r1c1-t21">
<p><code>DEPTH</code></p>
</td>
<td class="cellalignment1688" headers="r4c1-t21 r1c2-t21">
<p><a id="sthref1612"></a>This indicates the level of recursion at which the SQL statement was issued. For example, a value of 0 indicates that a user issued the statement. A value of 1 indicates that Oracle Database generated the statement as a recursive call to process a statement with a value of 0 (a statement issued by a user). A value of <span class="italic">n</span> indicates that Oracle Database generated the statement as a recursive call to process a statement with a value of <span class="italic">n</span>-1.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r5c1-t21" headers="r1c1-t21">
<p><code>USER_ID</code></p>
</td>
<td class="cellalignment1688" headers="r5c1-t21 r1c2-t21">
<p><a id="sthref1613"></a>This identifies the user issuing the statement. This value also appears in the formatted output file.</p>
</td>
</tr>
<tr class="cellalignment1680">
<td class="cellalignment1688" id="r6c1-t21" headers="r1c1-t21">
<p><code>CURSOR_NUM</code></p>
</td>
<td class="cellalignment1688" headers="r6c1-t21 r1c2-t21">
<p><a id="sthref1614"></a>Oracle database uses this column value to keep track of the cursor to which each SQL statement was assigned.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>The output table does not store the statement's execution plan. The following query returns the statistics from the output table. These statistics correspond to the formatted output shown in the section <a href="#i4146">"Sample TKPROF Output"</a>.</p>
<pre>
SELECT * FROM TKPROF_TABLE;
</pre>
<p>Oracle Database responds with something similar to:</p>
<pre>
DATE_OF_INSERT CURSOR_NUM DEPTH USER_ID PARSE_CNT PARSE_CPU PARSE_ELAP
-------------- ---------- ----- ------- --------- --------- ---------- 
21-DEC-1998          1      0     8         1        16         22

PARSE_DISK PARSE_QUERY PARSE_CURRENT PARSE_MISS EXE_COUNT EXE_CPU 
---------- ----------- ------------- ---------- --------- ------- 
    3          11           0            1           1         0 

EXE_ELAP EXE_DISK EXE_QUERY EXE_CURRENT EXE_MISS EXE_ROWS FETCH_COUNT 
-------- -------- --------- ----------- -------- -------- ----------- 
    0        0        0          0          0        0         1 

FETCH_CPU FETCH_ELAP FETCH_DISK FETCH_QUERY FETCH_CURRENT FETCH_ROWS 
--------- ---------- ---------- ----------- ------------- ---------- 
     2        20          2          2            4           10 

SQL_STATEMENT 
---------------------------------------------------------------------
SELECT * FROM EMP, DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO 
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i4206"></a>
<div id="PFGRF01030" class="sect1">
<h2 class="sect1"><span class="secnum">21.5</span> Avoiding Pitfalls in TKPROF Interpretation</h2>
<p>This section describes some fine points of <code>TKPROF</code> interpretation:</p>
<ul>
<li>
<p><a href="#i4283">Avoiding the Argument Trap</a></p>
</li>
<li>
<p><a href="#i4287">Avoiding the Read Consistency Trap</a></p>
</li>
<li>
<p><a href="#i21440">Avoiding the Schema Trap</a></p>
</li>
<li>
<p><a href="#i4295">Avoiding the Time Trap</a></p>
</li>
</ul>
<a id="i4283"></a>
<div id="PFGRF95011" class="sect2">
<h3 class="sect2"><span class="secnum">21.5.1</span> Avoiding the Argument Trap</h3>
<p>If you are not aware of the values being bound at run time, then it is possible to fall into the argument trap. <code>EXPLAIN</code> <code>PLAN</code> cannot determine the type of a bind variable from the text of SQL statements, and it always assumes that the type is <code>varchar</code>. If the bind variable is actually a number or a date, then <code>TKPROF</code> can cause implicit data conversions, which can cause inefficient plans to be executed. To avoid this situation, experiment with different data types in the query.</p>
<p>To avoid this problem, perform the conversion yourself.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a href="ex_plan.htm#i25909">"EXPLAIN PLAN Restrictions"</a> for information about <code>TKPROF</code> and bind variables</div>
</div>
<!-- class="sect2" -->
<a id="i4287"></a>
<div id="PFGRF95012" class="sect2">
<h3 class="sect2"><span class="secnum">21.5.2</span> Avoiding the Read Consistency Trap</h3>
<p>The next example illustrates the read consistency trap. Without knowing that an uncommitted transaction had made a series of updates to the <code>NAME</code> column, it is very difficult to see why so many block visits would be incurred.</p>
<p>Cases like this are not normally repeatable: if the process were run again, it is unlikely that another transaction would interact with it in the same way.</p>
<pre>
SELECT name_id
FROM cq_names 
WHERE name = 'FLOOR';

call     count     cpu     elapsed     disk     query current     rows
----     -----     ---     -------     ----     ----- -------     ----
Parse        1    0.10        0.18        0         0       0        0
Execute      1    0.00        0.00        0         0       0        0
Fetch        1    0.11        0.21        2       101       0        1

Misses in library cache during parse: 1
Parsing user id: 01 (USER1)

Rows     Execution Plan
----     --------- ----
   0     SELECT STATEMENT
   1       TABLE ACCESS (BY ROWID) OF 'CQ_NAMES'
   2         INDEX (RANGE SCAN) OF 'CQ_NAMES_NAME' (NON_UNIQUE) 
</pre></div>
<!-- class="sect2" -->
<a id="i21440"></a>
<div id="PFGRF95013" class="sect2">
<h3 class="sect2"><span class="secnum">21.5.3</span> Avoiding the Schema Trap</h3>
<p>This example shows an extreme (and thus easily detected) example of the schema trap. At first, it is difficult to see why such an apparently straightforward indexed query needs to look at so many database blocks, or why it should access any blocks at all in current mode.</p>
<pre>
SELECT name_id
FROM cq_names 
WHERE name = 'FLOOR';

call        count        cpu      elapsed     disk  query current rows
--------  -------   --------    ---------  ------- ------ ------- ----
Parse           1       0.06         0.10        0      0       0    0
Execute         1       0.02         0.02        0      0       0    0 
Fetch           1       0.23         0.30       31     31       3    1

Misses in library cache during parse: 0
Parsing user id: 02  (USER2)

Rows     Execution Plan
-------  ---------------------------------------------------
      0  SELECT STATEMENT
   2340    TABLE ACCESS (BY ROWID) OF 'CQ_NAMES'
      0      INDEX (RANGE SCAN) OF 'CQ_NAMES_NAME' (NON-UNIQUE)
</pre>
<p>Two statistics suggest that the query might have been executed with a full table scan. These statistics are the current mode block visits, plus the number of rows originating from the Table Access row source in the execution plan. The explanation is that the required index was built after the trace file had been produced, but before <code>TKPROF</code> had been run.</p>
<p>Generating a new trace file gives the following data:</p>
<pre>
SELECT name_id
FROM cq_names 
WHERE name = 'FLOOR'; 

call    count    cpu   elapsed  disk  query current     rows
-----  ------ ------  -------- ----- ------ -------    -----
Parse       1   0.01      0.02     0      0       0        0
Execute     1   0.00      0.00     0      0       0        0
Fetch       1   0.00      0.00     0      2       0        1

Misses in library cache during parse: 0
Parsing user id: 02  (USER2)

Rows     Execution Plan
-------  ---------------------------------------------------
      0  SELECT STATEMENT
      1    TABLE ACCESS (BY ROWID) OF 'CQ_NAMES'
      2      INDEX (RANGE SCAN) OF 'CQ_NAMES_NAME' (NON-UNIQUE)
</pre>
<p>One of the marked features of this correct version is that the parse call took 10 milliseconds of CPU time and 20 milliseconds of elapsed time, but the query apparently took no time at all to execute and perform the fetch. These anomalies arise because the clock tick of 10 milliseconds is too long relative to the time taken to execute and fetch the data. In such cases, it is important to get lots of executions of the statements, so that you have statistically valid numbers.</p>
</div>
<!-- class="sect2" -->
<a id="i4295"></a>
<div id="PFGRF95014" class="sect2">
<h3 class="sect2"><span class="secnum">21.5.4</span> Avoiding the Time Trap</h3>
<p>Sometimes, as in the following example, you might wonder why a particular query has taken so long.</p>
<pre>
UPDATE cq_names SET ATTRIBUTES = lower(ATTRIBUTES)
WHERE ATTRIBUTES = :att 

call       count       cpu    elapsed     disk    query current        rows
-------- -------  --------  --------- -------- -------- -------  ----------
Parse          1      0.06       0.24        0        0       0           0
Execute        1      0.62      19.62       22      526      12           7
Fetch          0      0.00       0.00        0        0       0           0

Misses in library cache during parse: 1
Parsing user id: 02  (USER2)

Rows     Execution Plan
-------  ---------------------------------------------------
      0  UPDATE STATEMENT
  2519  TABLE ACCESS (FULL) OF 'CQ_NAMES'
</pre>
<p>Again, the answer is interference from another transaction. In this case, another transaction held a shared lock on the table <code>cq_names</code> for several seconds before and after the update was issued. It takes a fair amount of experience to diagnose that interference effects are occurring. On the one hand, comparative data is essential when the interference is contributing only a short delay (or a small increase in block visits in the previous example). However, if the interference contributes only modest overhead, and if the statement is essentially efficient, then its statistics may not require analysis.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i17039"></a>
<div id="PFGRF01040" class="sect1">
<h2 class="sect1"><span class="secnum">21.6</span> Sample TKPROF Output</h2>
<p>This section provides an example of <code>TKPROF</code> output. Portions have been edited out for the sake of brevity.</p>
<div id="PFGRF95016" class="sect2"><a id="sthref1615"></a>
<h3 class="sect2"><span class="secnum">21.6.1</span> Sample TKPROF Header</h3>
<pre>
TKPROF: Release 10.1.0.0.0 - Mon Feb 10 14:43:00 2003

(c) Copyright 2001 Oracle Corporation.  All rights reserved.

Trace file: main_ora_27621.trc
Sort options: default

********************************************************************************
count    = number of times OCI procedure was executed
cpu      = cpu time in seconds executing 
elapsed  = elapsed time in seconds executing
disk     = number of physical reads of buffers from disk
query    = number of buffers gotten for consistent read
current  = number of buffers gotten in current mode (usually for update)
rows     = number of rows processed by the fetch or execute call
********************************************************************************
</pre></div>
<!-- class="sect2" -->
<div id="PFGRF95017" class="sect2"><a id="sthref1616"></a>
<h3 class="sect2"><span class="secnum">21.6.2</span> Sample TKPROF Body</h3>
<pre>
call     count       cpu    elapsed       disk      query    current        rows
------- ------  -------- ---------- ---------- ---------- ----------  ----------
Parse        1      0.01       0.00          0          0          0           0
Execute      1      0.00       0.00          0          0          0           0
Fetch        0      0.00       0.00          0          0          0           0
------- ------  -------- ---------- ---------- ---------- ----------  ----------
total        2      0.01       0.00          0          0          0           0

Misses in library cache during parse: 1
Optimizer mode: FIRST_ROWS
Parsing user id: 44  

Elapsed times include waiting on following events:
  Event waited on                             Times   Max. Wait  Total Waited
  ----------------------------------------   Waited  ----------  ------------
  SQL*Net message to client                       1        0.00          0.00
  SQL*Net message from client                     1       28.59         28.59
********************************************************************************

select condition 
from
 cdef$ where rowid=:1

call     count       cpu    elapsed       disk      query    current        rows
------- ------  -------- ---------- ---------- ---------- ----------  ----------
Parse        1      0.00       0.00          0          0          0           0
Execute      1      0.00       0.00          0          0          0           0
Fetch        1      0.00       0.00          0          2          0           1
------- ------  -------- ---------- ---------- ---------- ----------  ----------
total        3      0.00       0.00          0          2          0           1

Misses in library cache during parse: 1
Optimizer mode: CHOOSE
Parsing user id: SYS   (recursive depth: 1)

Rows     Row Source Operation
-------  ---------------------------------------------------
      1  TABLE ACCESS BY USER ROWID OBJ#(31) (cr=1 r=0 w=0 time=151 us)

********************************************************************************

SELECT last_name, job_id, salary
  FROM employees
WHERE salary =
  (SELECT max(salary) FROM employees)

call     count       cpu    elapsed       disk      query    current        rows
------- ------  -------- ---------- ---------- ---------- ----------  ----------
Parse        1      0.02       0.01          0          0          0           0
Execute      1      0.00       0.00          0          0          0           0
Fetch        2      0.00       0.00          0         15          0           1
------- ------  -------- ---------- ---------- ---------- ----------  ----------
total        4      0.02       0.01          0         15          0           1

Misses in library cache during parse: 1
Optimizer mode: FIRST_ROWS
Parsing user id: 44  

Rows     Row Source Operation
-------  ---------------------------------------------------
      1  TABLE ACCESS FULL EMPLOYEES (cr=15 r=0 w=0 time=1743 us)
      1   SORT AGGREGATE (cr=7 r=0 w=0 time=777 us)
    107    TABLE ACCESS FULL EMPLOYEES (cr=7 r=0 w=0 time=655 us)

Elapsed times include waiting on following events:
  Event waited on                             Times   Max. Wait  Total Waited
  ----------------------------------------   Waited  ----------  ------------
  SQL*Net message to client                       2        0.00          0.00
  SQL*Net message from client                     2        9.62          9.62
********************************************************************************

********************************************************************************
 delete
         from stats$sqltext st
        where (hash_value, text_subset) not in
             (select --+ hash_aj
                     hash_value, text_subset
                from stats$sql_summary ss
               where (   (   snap_id     &lt; :lo_snap
                          or snap_id     &gt; :hi_snap
                         )
                         and dbid            = :dbid
                         and instance_number = :inst_num
                     )
                  or (   dbid            != :dbid
                      or instance_number != :inst_num)
              )

call     count       cpu    elapsed       disk      query    current rows
------- ------  -------- ---------- ---------- ---------- ---------- ----------
Parse        1      0.00       0.00          0          0          0          0
Execute      1     29.60      60.68     266984      43776     131172      28144
Fetch        0      0.00       0.00          0          0          0          0
------- ------  -------- ---------- ---------- ---------- ---------- ----------
total        2     29.60      60.68     266984      43776     131172      28144

Misses in library cache during parse: 1
Misses in library cache during execute: 1
Optimizer mode: CHOOSE
Parsing user id: 22

Rows     Row Source Operation
-------  ---------------------------------------------------
      0  DELETE  (cr=43141 r=266947 w=25854 time=60235565 us)
  28144   HASH JOIN ANTI (cr=43057 r=262332 w=25854 time=48830056 us)
  51427    TABLE ACCESS FULL STATS$SQLTEXT (cr=3465 r=3463 w=0 time=865083 us)
 647529    INDEX FAST FULL SCAN STATS$SQL_SUMMARY_PK 
                      (cr=39592 r=39325 w=0 time=10522877 us) (object id 7409)

Elapsed times include waiting on following events:
  Event waited on                             Times   Max. Wait  Total Waited
  ----------------------------------------   Waited  ----------  ------------
  db file sequential read                      8084        0.12          5.34
  direct path write                             834        0.00          0.00
  direct path write temp                        834        0.00          0.05
  db file parallel read                           8        1.53          5.51
  db file scattered read                       4180        0.07          1.45
  direct path read                             7082        0.00          0.05
  direct path read temp                        7082        0.00          0.44
  rdbms ipc reply                                20        0.00          0.01
  SQL*Net message to client                       1        0.00          0.00
  SQL*Net message from client                     1        0.00          0.00
********************************************************************************
</pre></div>
<!-- class="sect2" -->
<div id="PFGRF95018" class="sect2"><a id="sthref1617"></a>
<h3 class="sect2"><span class="secnum">21.6.3</span> Sample TKPROF Summary</h3>
<pre>
OVERALL TOTALS FOR ALL NON-RECURSIVE STATEMENTS

call     count       cpu    elapsed       disk      query    current        rows
------- ------  -------- ---------- ---------- ---------- ----------  ----------
Parse        4      0.04       0.01          0          0          0           0
Execute      5      0.00       0.04          0          0          0           0
Fetch        2      0.00       0.00          0         15          0           1
------- ------  -------- ---------- ---------- ---------- ----------  ----------
total       11      0.04       0.06          0         15          0           1

Misses in library cache during parse: 4
Misses in library cache during execute: 1
Elapsed times include waiting on following events:
  Event waited on                             Times   Max. Wait  Total Waited
  ----------------------------------------   Waited  ----------  ------------
  SQL*Net message to client                       6        0.00          0.00
  SQL*Net message from client                     5       77.77        128.88

OVERALL TOTALS FOR ALL RECURSIVE STATEMENTS

call     count       cpu    elapsed       disk      query    current        rows
------- ------  -------- ---------- ---------- ---------- ----------  ----------
Parse        1      0.00       0.00          0          0          0           0
Execute      1      0.00       0.00          0          0          0           0
Fetch        1      0.00       0.00          0          2          0           1
------- ------  -------- ---------- ---------- ---------- ----------  ----------
total        3      0.00       0.00          0          2          0           1

Misses in library cache during parse: 1
    5  user  SQL statements in session.
    1  internal SQL statements in session.
    6  SQL statements in session.
********************************************************************************
Trace file: main_ora_27621.trc
Trace file compatibility: 9.00.01
Sort options: default
       1  session in tracefile.
       5  user  SQL statements in trace file.
       1  internal SQL statements in trace file.
       6  SQL statements in trace file.
       6  unique SQL statements in trace file.
      76  lines in trace file.
     128  elapsed seconds in trace file.
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1679">
<tr>
<td class="cellalignment1688">
<table class="cellalignment1684">
<tr>
<td class="cellalignment1683"><a href="outlines.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1683"><a href="glossary.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2000, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1690">
<table class="cellalignment1682">
<tr>
<td class="cellalignment1683"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1683"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1683"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1683"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1683"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1683"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
