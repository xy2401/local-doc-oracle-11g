<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using Oracle Precompilers and the Oracle Call Interface</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1058" />
<meta name="dcterms.created" content="2015-06-25T1:51:6Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Administrator's Reference" />
<meta name="dcterms.identifier" content="E56697-01" />
<meta name="dcterms.isVersionOf" content="VMSAR" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2008, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="ch5.htm" title="Previous" type="text/html" />
<link rel="Next" href="ch7.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e56697.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/18</span> <!-- End Header -->
<div id="VMSAR475" class="chapter"><a id="g48713"></a> <a id="i40111"></a>
<h1 class="chapter"><span class="secnum">6</span> Using Oracle Precompilers and the Oracle Call Interface</h1>
<p>This chapter describes how to use Oracle Precompilers and the Oracle Call Interface.</p>
<p>It contains the following topics:</p>
<ul>
<li>
<p><a href="#i33304">Section 6.1, "Overview of Oracle Precompilers"</a></p>
</li>
<li>
<p><a href="#i38576">Section 6.2, "Precompiling"</a></p>
</li>
<li>
<p><a href="#i43036">Section 6.3, "Compiling"</a></p>
</li>
<li>
<p><a href="#i43037">Section 6.4, "Linking"</a></p>
</li>
<li>
<p><a href="#i33246">Section 6.5, "Pro*C/C++ Precompiler"</a></p>
</li>
<li>
<p><a href="#i36455">Section 6.6, "Pro*COBOL Precompiler"</a></p>
</li>
<li>
<p><a href="#i28565">Section 6.7, "Pro*FORTRAN Precompiler"</a></p>
</li>
<li>
<p><a href="#i43039">Section 6.8, "Using the Oracle Call Interface Routines"</a></p>
</li>
<li>
<p><a href="#i43040">Section 6.9, "Data Areas and Data Types"</a></p>
</li>
<li>
<p><a href="#i43041">Section 6.10, "Using Literals as Call Arguments"</a></p>
</li>
<li>
<p><a href="#i43042">Section 6.11, "Optional or Missing Parameters"</a></p>
</li>
<li>
<p><a href="#CCHGHHII">Section 6.12, "Using Event Flags"</a></p>
</li>
<li>
<p><a href="#i26133">Section 6.13, "Custom Link Files"</a></p>
</li>
<li>
<p><a href="#i26193">Section 6.14, "Multithreaded Applications"</a></p>
</li>
</ul>
<a id="i33304"></a>
<div id="VMSAR476" class="sect1">
<h2 class="sect1"><span class="secnum">6.1</span> Overview of Oracle Precompilers<a id="sthref333"></a></h2>
<p>Oracle Precompilers are application development tools used to combine SQL statements from an Oracle Database with programs written in a high-level language. Oracle Precompilers are compatible with ANSI SQL and develop open, customized applications that run with the Oracle Database or any other ANSI SQL database management system.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ZZPRE" href="../../appdev.112/e10830/toc.htm"><span class="italic">Programmer's Guide to the Oracle Precompilers</span></a> for general information about Oracle Precompilers and interface features</div>
<ul>
<li>
<p><a href="#BABGJJIB">Section 6.1.1, "Precompiler Configuration Files"</a></p>
</li>
<li>
<p><a href="#BABGJDAI">Section 6.1.2, "Precompiler Executables"</a></p>
</li>
<li>
<p><a href="#BABBFCDD">Section 6.1.3, "Precompiler README Files"</a></p>
</li>
<li>
<p><a href="#BABHIFJJ">Section 6.1.4, "Issues Common to All Precompilers"</a></p>
</li>
<li>
<p><a href="#BABIEBGG">Section 6.1.5, "Static and Dynamic Linking"</a></p>
</li>
<li>
<p><a href="#BABGABIJ">Section 6.1.6, "Client Shared and Static Libraries"</a></p>
</li>
</ul>
<a id="BABGJJIB"></a>
<div id="VMSAR477" class="sect2">
<h3 class="sect2"><span class="secnum">6.1.1</span> Precompiler Configuration Files<a id="sthref334"></a><a id="sthref335"></a></h3>
<p>System configuration files for the Oracle Precompilers are located in the <code dir="ltr">ORA_ROOT:[PRECOMP.ADMIN]</code>directory.</p>
<p><a href="#g45891">Table 6-1</a> lists the names of the system configuration files for each precompiler. These files are currently empty. Their purpose is to specify command-line parameters, such as the <code dir="ltr">include</code> directories.</p>
<div id="VMSAR478" class="tblformal">
<p class="titleintable"><a id="sthref336"></a><a id="g45891"></a>Table 6-1 System Configuration Files for Oracle Precompilers</p>
<table class="cellalignment1602" title="System Configuration Files for Oracle Precompilers" summary="This table lists the Oracle Precompiler products and the system configuration files that are associated with each." dir="ltr">
<thead>
<tr class="cellalignment1596">
<th class="cellalignment1603" id="r1c1-t3">Product</th>
<th class="cellalignment1603" id="r1c2-t3">Configuration File</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r2c1-t3" headers="r1c1-t3">
<p>Pro*C/C++</p>
</td>
<td class="cellalignment1604" headers="r2c1-t3 r1c2-t3">
<p><code dir="ltr">PCSCFG.CFG</code></p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r3c1-t3" headers="r1c1-t3">
<p>Pro*COBOL</p>
</td>
<td class="cellalignment1604" headers="r3c1-t3 r1c2-t3">
<p><code dir="ltr">PCBCFG.CFG</code></p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r4c1-t3" headers="r1c1-t3">
<p>Pro*FORTRAN</p>
</td>
<td class="cellalignment1604" headers="r4c1-t3 r1c2-t3">
<p><code dir="ltr">PCCFOR.CFG</code></p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r5c1-t3" headers="r1c1-t3">
<p>Object Type Translator</p>
</td>
<td class="cellalignment1604" headers="r5c1-t3 r1c2-t3">
<p><code dir="ltr">OTTCFG.CFG</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="BABGJDAI"></a>
<div id="VMSAR479" class="sect2">
<h3 class="sect2"><span class="secnum">6.1.2</span> Precompiler Executables</h3>
<p><a href="#BABDIEBD">Table 6-2</a> lists products and their corresponding executable names as well as the HP OpenVMS symbols associated with them. These images are found in the <code dir="ltr">ORA_ROOT:[BIN]</code> directory.</p>
<div id="VMSAR480" class="sect3"><a id="sthref337"></a>
<h4 class="sect3"><span class="secnum">6.1.2.1</span> Precompiler README files</h4>
<p>Precompiler <code dir="ltr">README</code> files for the various languages are located in <code dir="ltr">ORA_ROOT:[PRECOMP.DOC.</code><code dir="ltr"><span class="codeinlineitalic">LANGUAGE</span></code><code dir="ltr">]</code>.</p>
<p><a href="#BABDIEBD">Table 6-2</a> lists precompiler products, executable names and HP OpenVMS symbols.</p>
<div id="VMSAR481" class="tblformal">
<p class="titleintable"><a id="sthref338"></a><a id="BABDIEBD"></a>Table 6-2 Executable Names and HP OpenVMS Symbols for Precompiler Products</p>
<table class="cellalignment1602" title="Executable Names and HP OpenVMS Symbols for Precompiler Products" summary="This table lists Oracle Precompiler products and the coresponding executables associated with them. Column 3 lists the OpenVMS symbol for each one." dir="ltr">
<thead>
<tr class="cellalignment1596">
<th class="cellalignment1603" id="r1c1-t4">Product</th>
<th class="cellalignment1603" id="r1c2-t4">Executable</th>
<th class="cellalignment1603" id="r1c3-t4">HP OpenVMS Symbol</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r2c1-t4" headers="r1c1-t4">
<p>Pro*C/C++</p>
</td>
<td class="cellalignment1604" headers="r2c1-t4 r1c2-t4">
<p><code dir="ltr">PROC.EXE</code></p>
</td>
<td class="cellalignment1604" headers="r2c1-t4 r1c3-t4">
<p>PROC</p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r3c1-t4" headers="r1c1-t4">
<p>Pro*COBOL</p>
</td>
<td class="cellalignment1604" headers="r3c1-t4 r1c2-t4">
<p><code dir="ltr">PROCOB.EXE</code></p>
</td>
<td class="cellalignment1604" headers="r3c1-t4 r1c3-t4">
<p>PROCOB</p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r4c1-t4" headers="r1c1-t4">
<p>Pro*FORTRAN</p>
</td>
<td class="cellalignment1604" headers="r4c1-t4 r1c2-t4">
<p><code dir="ltr">PROFOR.EXE</code></p>
</td>
<td class="cellalignment1604" headers="r4c1-t4 r1c3-t4">
<p>PROFOR</p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r5c1-t4" headers="r1c1-t4">
<p>Object Type Translator</p>
</td>
<td class="cellalignment1604" headers="r5c1-t4 r1c2-t4">
<p><code dir="ltr">OTT.COM</code></p>
</td>
<td class="cellalignment1604" headers="r5c1-t4 r1c3-t4">
<p>OTT</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABBFCDD"></a>
<div id="VMSAR482" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.1.3</span> Precompiler README Files<a id="sthref339"></a></h3>
<p><a href="#BABCFEBH">Table 6-3</a> lists the location of the precompiler <code dir="ltr">README</code> files. The <code dir="ltr">README</code> files describe changes made to the precompiler since the last release.</p>
<div id="VMSAR483" class="tblruleformal">
<p class="titleintable"><a id="sthref340"></a><a id="BABCFEBH"></a>Table 6-3 Location of Precompiler README Files</p>
<table class="cellalignment1609" title="Location of Precompiler README Files" summary="This table lists the location of the README files for Oracle products." dir="ltr">
<thead>
<tr class="cellalignment1596">
<th class="cellalignment1603" id="r1c1-t5">Precompiler</th>
<th class="cellalignment1603" id="r1c2-t5">README File</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r2c1-t5" headers="r1c1-t5">
<p>Pro*C/C++</p>
</td>
<td class="cellalignment1604" headers="r2c1-t5 r1c2-t5">
<p><code dir="ltr">ORA_ROOT:[PRECOMP.DOC.PROC]README.DOC</code></p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r3c1-t5" headers="r1c1-t5">
<p>Pro*COBOL</p>
</td>
<td class="cellalignment1604" headers="r3c1-t5 r1c2-t5">
<p><code dir="ltr">ORA_ROOT:[PRECOMP.DOC.PROCOB2]README.DOC</code></p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r4c1-t5" headers="r1c1-t5">
<p>Pro*FORTRAN</p>
</td>
<td class="cellalignment1604" headers="r4c1-t5 r1c2-t5">
<p><code dir="ltr">ORA_ROOT:[PRECOMP.DOC.PRO1X]README.TXT</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblruleformal" --></div>
<!-- class="sect2" -->
<a id="BABHIFJJ"></a>
<div id="VMSAR484" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.1.4</span> Issues Common to All Precompilers</h3>
<p>The following issues are common to all precompilers.</p>
<p class="subhead2"><a id="VMSAR485"></a>Conversion for Uppercase to Lowercase<a id="sthref341"></a></p>
<p>In languages other than the C programming language, the compiler converts an uppercase function or subprogram name to lowercase. This can cause the following error message to be displayed:</p>
<p><code dir="ltr">No such user exists</code></p>
<p>If this error message is displayed, then verify that the function or subprogram name in the option file matches the case used in the <code dir="ltr">IAPXTB</code> table.</p>
<p class="subhead2"><a id="VMSAR486"></a>Vendor Debugger Programs<a id="sthref342"></a><a id="sthref343"></a></p>
<p>Precompilers and vendor-supplied debuggers can be incompatible. Oracle does not guarantee that a program run using a debugger performs the same way when it is run without the debugger.</p>
<p class="subhead2"><a id="VMSAR487"></a>Values of the IRECLEN and ORECLEN<a id="sthref344"></a><a id="sthref345"></a><a id="sthref346"></a> Parameters</p>
<p>The <code dir="ltr">IRECLEN</code> and <code dir="ltr">ORECLEN</code> parameters do not have maximum values.</p>
</div>
<!-- class="sect2" -->
<a id="BABIEBGG"></a>
<div id="VMSAR488" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.1.5</span> Static and Dynamic Linking<a id="sthref347"></a></h3>
<p>You can statically or dynamically link Oracle libraries with precompiler and OCI applications. With static linking, the libraries and objects of the whole application are linked together into a single executable program. As a result, application executables can become very large.</p>
<p>With dynamic linking, the executing code is partly stored in the executable program and partly stored in libraries that are loaded with the application at run time, or later, after the program starts, when referenced. These libraries are called sharable libraries or dynamic libraries. The benefits of dynamic linking are:</p>
<ul>
<li>
<p>Reduced disk space requirements: More than one application or invocation of the same application can use the same dynamic library.</p>
</li>
</ul>
<ul>
<li>
<p>Reduced main memory requirements: The same dynamic library image is loaded into main memory only once and it can be shared by more than one application, if the library is installed as a shared image.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABGABIJ"></a>
<div id="VMSAR489" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.1.6</span> Client Shared and Static Libra<a id="sthref348"></a><a id="sthref349"></a><a id="sthref350"></a>ries</h3>
<p>The client shared and static libraries are located in the <code dir="ltr">ORA_ROOT:[LIB32]</code> directory. If you use the Oracle provided installer or link scripts to link an application, then the client shared library is linked by default. The necessary logical name for the client shared library is defined by default when the client environment is set up.</p>
<p>The client shared library is created automatically during installation. If you must re-create it, then perform the following:</p>
<ol>
<li>
<p>Exit all client applications that use the client shared library, including all Oracle Database client applications.</p>
</li>
<li>
<p>Log in as the <code dir="ltr">oracle</code> user, and enter the following command:</p>
<pre dir="ltr">
@ORA_ROOT:[BIN]RELINK CLIENT_SHAREDLIB
</pre></li>
</ol>
<p>If an application links with the client shared library and needs to be installed as a known image, HP OpenVMS requires that an executive mode logical name point to the shared library.</p>
<p>If there is only one Oracle Installation on the system, add the following command to the system startup file:</p>
<pre dir="ltr">
$ DEFINE/SYSTEM/EXEC LIBCLNTSH <span class="italic">full_Path</span>/LIBCLNTSH.SO
</pre>
<p>Do not use concealed logical names, including <code dir="ltr">ORA_ROOT</code>, in the <code dir="ltr"><span class="codeinlineitalic">full_path</span></code> specification.If you have multiple Oracle installations on the system, you must uniquely identify the client shared library for the installation in question. Do the following:</p>
<ol>
<li>
<p>Copy <code dir="ltr">LIBCLNTSH.SO</code> to <code dir="ltr">LIBCLNTSH_</code><code dir="ltr"><span class="codeinlineitalic">unique_id</span></code><code dir="ltr">.SO</code>, where the <code dir="ltr"><span class="codeinlineitalic">unique_id</span></code> is a string not common to any other Oracle installation on the system.</p>
</li>
<li>
<p>Install the shared library <code dir="ltr">LIBCLNTSH_</code><code dir="ltr"><span class="codeinlineitalic">unique_id</span></code><code dir="ltr">.SO</code>. Refer to <code dir="ltr">ORA_ROOT:[000000]INSORACLE.COM</code> for the correct syntax.</p>
</li>
<li>
<p>Define the logical name <code dir="ltr">LIBCLNTSH_</code><code dir="ltr"><span class="codeinlineitalic">unique_id</span></code> as follows:</p>
<pre dir="ltr">
$ DEFINE/SYSTEM/EXEC LIBCLNTSH_<span class="italic">unique_id</span> <span class="italic">full_path</span>/LIBCLNTSH_<span class="italic">unique_id</span>.SO
</pre>
<p>Again, do not use concealed logical names in the <code dir="ltr"><span class="codeinlineitalic">full_path</span></code>.</p>
</li>
<li>
<p>Link your application with this uniquely named client shared library. you must modify the file <code dir="ltr">ORA_ROOT:[RDBMS]ORA_CLIENT.OPT</code> to do this</p>
</li>
</ol>
<p>Steps 2 and 3 the previous procedure should be added to the system startup command file.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i38576"></a>
<div id="VMSAR490" class="sect1">
<h2 class="sect1"><span class="secnum">6.2</span> Precompiling<a id="sthref351"></a><a id="sthref352"></a></h2>
<p>You start the precompilers and Object Type Translators by using the HP OpenVMS symbols specified in <a href="#BABDIEBD">Table 6-2</a>.</p>
<p>This section covers the following aspects of precompiling:</p>
<ul>
<li>
<p><a href="#BABEGGBD">Section 6.2.1, "Syntax"</a></p>
</li>
<li>
<p><a href="#BABCHBJG">Section 6.2.2, "Guidelines and Restrictions"</a></p>
</li>
</ul>
<a id="BABEGGBD"></a>
<div id="VMSAR491" class="sect2">
<h3 class="sect2"><span class="secnum">6.2.1</span> Syntax</h3>
<p>The syntax of the command for precompiling source files is as follows:<a id="sthref353"></a><a id="sthref354"></a><a id="sthref355"></a><a id="sthref356"></a><a id="sthref357"></a></p>
<pre dir="ltr">
$ <span class="italic">VMS_symbol</span> INAME=<span class="italic">filename</span> <span class="italic">OPTION</span>=<span class="italic">value</span> ... 
</pre>
<p>In this syntax:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">VMS_symbol</span></code> is the HP OpenVMS symbol for the precompiler</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">filename</span></code> is the name of the source file you want to precompile</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">OPTION</span></code> is the precompiling option available for the Oracle Precompilers program You can supply any number of option-value pairs, separated by a space</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">value</span></code> is the value of the option specified</p>
</li>
</ul>
<div id="VMSAR492" class="example">
<p class="titleinexample"><a id="sthref358"></a>Example 6-1 Syntax for Precompiling</p>
<pre dir="ltr">
$ PROFOR INAME=MYFILE HOST=FORTRAN INCLUDE=ORA_PRECOMP
</pre></div>
<!-- class="example" -->
<p><a id="sthref359"></a><a id="sthref360"></a>The <code dir="ltr">HOST=</code><code dir="ltr"><span class="codeinlineitalic">language</span></code> identifier is optional. For example, the following command is also valid:</p>
<pre dir="ltr">
$ PROFOR INAME=MYFILE INCLUDE=ORA_PRECOMP
</pre>
<p>The <code dir="ltr">INCLUDE</code> option gives the path to the directory that contains the precompiler include files. If this option is not provided, then the path to the directory in which the include files are distributed is taken as the default. <a id="sthref361"></a></p>
<p>You can display a list of options and their values (if you have an Oracle instance running) by entering the required symbol name. For example:<a id="sthref362"></a></p>
<pre dir="ltr">
$ PROFOR
</pre>
<p>The system displays a list of options and their values for Pro*FORTRAN.</p>
</div>
<!-- class="sect2" -->
<a id="BABCHBJG"></a>
<div id="VMSAR493" class="sect2">
<h3 class="sect2"><span class="secnum">6.2.2</span> Guidelines and Restrictions</h3>
<p>The following guidelines and restrictions apply to <a id="sthref363"></a>precompiling:</p>
<p class="subhead2"><a id="VMSAR494"></a>Using the <a id="sthref364"></a><a id="sthref365"></a>HP OpenVMS Debugger</p>
<p><a id="sthref366"></a><a id="sthref367"></a>Precompiler programs can be run with the HP OpenVMS debugger by compiling the program with the <code dir="ltr">/DEBUG</code> qualifier and linking using the D option with the <code dir="ltr">LNPRO</code><span class="italic">language</span> symbol. <a id="sthref368"></a></p>
<p class="subhead2"><a id="VMSAR495"></a>Using Event Flags</p>
<p>If you use <a id="sthref369"></a>HP OpenVMS<a id="sthref370"></a> event flags in the source code, then ensure that none of them are numbered 1 through 18 before compiling the code for use with Oracle Database. Event flags 1 through 18 are reserved for the server.</p>
<p class="subhead2"><a id="VMSAR496"></a>Migrating Applications Developed with Pro*C Compilers</p>
<p>When migrating applications developed with Pro*C precompilers, each application must have a unique SQLCA, ORACA, or both. Oracle recommends that you insert the following definition in one module to produce a defining declaration of the SQLCA structure:</p>
<pre dir="ltr">
#define SQLCA_STORAGE_CLASS GLOBALDEF
</pre>
<p>Each of the other modules should have the following global reference to product referencing declarations.</p>
<pre dir="ltr">
#define SQLCA_STORAGE_CLASS GLOBALREF
</pre>
<p>This line must precede inclusion of <code dir="ltr">SQLCA.H</code>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i43036"></a>
<div id="VMSAR497" class="sect1">
<h2 class="sect1"><span class="secnum">6.3</span> Compiling<a id="sthref371"></a><a id="sthref372"></a></h2>
<p>You must ensure that the conditions described in the following are met when using the precompilers listed in this section:</p>
<ul>
<li>
<p><a href="#BABEAGEE">Section 6.3.1, "Compiler Options Used to Compile Oracle Database 11<span class="italic">g</span>"</a></p>
</li>
<li>
<p><a href="#BABBAIJC">Section 6.3.2, "Floating Point Format"</a></p>
</li>
<li>
<p><a href="#BABHEEFA">Section 6.3.3, "Pro*COBOL"</a></p>
</li>
</ul>
<a id="BABEAGEE"></a>
<div id="VMSAR498" class="sect2">
<h3 class="sect2"><span class="secnum">6.3.1</span> Compiler Options Used to Compile Oracle Database 11<span class="italic">g</span></h3>
<p><a id="sthref373"></a>Oracle Database 11<span class="italic">g</span> is compiled with as few deviations from the default C <a id="sthref374"></a>compiler options as possible and with minimal use of pragma statements.</p>
<p>For the HP C compiler on HP OpenVMS, the compilation options are as follows:</p>
<pre dir="ltr">
/DECC /NOSTANDARD /DEBUG=TRACE /PREFIX_LIBRARY_ENTRIES=ALL_ENTRIES
/GRANULARITY=LONGWORD /NAMES=AS_IS /FLOAT=IEEE
/IEEE_MODE=DENORM_RESULTS /EXTERN_MODEL=STRICT_REFDEF /NOANSI_ALIAS
</pre>
<p>If you compile the code with <code dir="ltr">/DEBUG=TRACE</code>, then line numbers in the modules are displayed, as required, in Oracle Database 11<span class="italic">g</span> stack trace listings.</p>
</div>
<!-- class="sect2" -->
<a id="BABBAIJC"></a>
<div id="VMSAR499" class="sect2">
<h3 class="sect2"><span class="secnum">6.3.2</span> Floating Point Format</h3>
<p>Oracle Database 11<span class="italic">g</span> is compiled with the IEEE floating point format supported by the C compiler. The conversion routines within Oracle Database 11<span class="italic">g</span> translate operating system-specific floating point numbers into Oracle Database 11<span class="italic">g</span> internal floating point representation.</p>
<p>This is a change from Oracle Database 9<span class="italic">i</span> release 2 for HP OpenVMS. If you had an application that depended on non-IEEE defaults, then you may need to recompile.</p>
<div id="VMSAR500" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref375"></a>
<h4 class="sect3"><span class="secnum">6.3.2.1</span> Application Compatibility for Floating Point Format</h4>
<p>With Oracle Database 11<span class="italic">g</span> for HP OpenVMS, the floating point format supported by Oracle code is the IEEE floating point format.</p>
<p>Earlier releases of the product supported the default native floating format of the C compiler, which was the <code dir="ltr">F</code> float for single and <code dir="ltr">G</code> float for double.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABHEEFA"></a>
<div id="VMSAR501" class="sect2">
<h3 class="sect2"><span class="secnum">6.3.3</span> Pro*COBOL</h3>
<p>You must specify the <code dir="ltr"><a id="sthref376"></a>/ANSI</code> option when you compile the <a id="sthref377"></a><code dir="ltr">Pro*COBOL</code> demonstration source files.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i43037"></a>
<div id="VMSAR502" class="sect1">
<h2 class="sect1"><span class="secnum">6.4</span> Linking<a id="sthref378"></a><a id="sthref379"></a><a id="sthref380"></a></h2>
<p>Use the following command procedures to link object files:</p>
<ul>
<li>
<p><code dir="ltr">LNPRO</code><code dir="ltr"><span class="codeinlineitalic">language</span></code><code dir="ltr">.COM</code></p>
<p><code dir="ltr">LNPRO</code><code dir="ltr"><span class="codeinlineitalic">language</span></code><code dir="ltr">.COM</code> is the standard, recommended linking method.</p>
<p>Use <code dir="ltr">LNPRO</code><code dir="ltr"><span class="codeinlineitalic">language</span></code><code dir="ltr">.COM</code> to link precompiled files, object files, and SQL*Module files.</p>
</li>
<li>
<p><code dir="ltr">LNOCI.COM</code> to link OCI programs that are not written in the C programming language</p>
</li>
<li>
<p><code dir="ltr">LNOCIC.COM</code> to link OCI C programs</p>
</li>
<li>
<p><code dir="ltr">LOUTL.COM</code></p>
<p>Use <code dir="ltr">LOUTL.COM</code> under special circumstances when <code dir="ltr">LNPRO</code><code dir="ltr"><span class="codeinlineitalic">language</span></code><code dir="ltr">.COM</code> is not appropriate. If you decide to use <code dir="ltr">LOUTL.COM</code>, then use a command syntax similar to that found in the required <code dir="ltr">LNPRO</code><code dir="ltr"><span class="codeinlineitalic">language</span></code><code dir="ltr">.COM</code> script.</p>
</li>
<li>
<p><code dir="ltr">LNPROC == "@ora_proc:lnproc"</code></p>
</li>
<li>
<p><code dir="ltr">LNPROCOB == "@ora_procob:lnprocob"</code></p>
</li>
<li>
<p><code dir="ltr">LNPROCXX == "@ora_proc:lnprocxx"</code></p>
</li>
<li>
<p><code dir="ltr">LNPROFOR == "@ora_profor:lnprofor"</code></p>
</li>
</ul>
<p>This section discusses the following aspects of linking:</p>
<ul>
<li>
<p><a href="#BABIEBHC">Section 6.4.1, "Syntax"</a></p>
</li>
<li>
<p><a href="#BABJGJFJ">Section 6.4.2, "Linking Precautions"</a></p>
</li>
<li>
<p><a href="#BABFGFDD">Section 6.4.3, "Guidelines for Linking"</a></p>
</li>
</ul>
<a id="BABIEBHC"></a>
<div id="VMSAR503" class="sect2">
<h3 class="sect2"><span class="secnum">6.4.1</span> Syntax</h3>
<p>To link compiled <code dir="ltr">PRO</code><code dir="ltr"><span class="codeinlineitalic">language</span></code> object files, use the <code dir="ltr">LNPRO</code><code dir="ltr"><span class="codeinlineitalic">language</span></code> symbol.</p>
<p><a href="#g45860">Table 6-4</a> provides a description of each argument.</p>
<div id="VMSAR504" class="tblformal">
<p class="titleintable"><a id="sthref381"></a><a id="g45860"></a>Table 6-4 Linking Precompiled Programs</p>
<table class="cellalignment1602" title="Linking Precompiled Programs" summary="This table lists the arguments for linking precompiled programs, and describes each argument." dir="ltr">
<thead>
<tr class="cellalignment1596">
<th class="cellalignment1603" id="r1c1-t6">Argument</th>
<th class="cellalignment1603" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr"><span class="codeinlineitalic">language</span></code></p>
</td>
<td class="cellalignment1604" headers="r2c1-t6 r1c2-t6">
<p>Abbreviation for the programming language you are using</p>
<p>For example: C, COB, or FOR</p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr"><span class="codeinlineitalic">executable</span></code></p>
</td>
<td class="cellalignment1604" headers="r3c1-t6 r1c2-t6">
<p>Name of the executable image to be created</p>
<p>The file name extension is optional.</p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr"><span class="codeinlineitalic">objectfilelist</span></code></p>
</td>
<td class="cellalignment1604" headers="r4c1-t6 r1c2-t6">
<p>Comma-delimited list of object files and libraries</p>
<p>If this list is longer than one line, then use the continuation character, the dash sign (-). There are no spaces in this specification.</p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r5c1-t6" headers="r1c1-t6">
<p><code dir="ltr"><span class="codeinlineitalic">options</span></code></p>
</td>
<td class="cellalignment1604" headers="r5c1-t6 r1c2-t6">
<p>List of options with no separators needed:</p>
<p><code dir="ltr">D</code> links with the HP OpenVMS <code dir="ltr">DEBUG</code> utility.</p>
<p><code dir="ltr">F</code> produces a full map.</p>
<p><code dir="ltr">M</code> creates a link map.</p>
<p><code dir="ltr">X</code> produces a link map with cross-references.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a id="VMSAR505"></a><span class="subhead3">Example&nbsp;</span>To link <code dir="ltr">MYOBJ</code> and <code dir="ltr">SUB</code> into a <code dir="ltr">COB</code> executable called <code dir="ltr">MYFILE</code> and to specify options <code dir="ltr">D</code> and <code dir="ltr">M</code>, use the following command:</p>
<pre dir="ltr">
$ LNPROCOB MYFILE MYOBJ,SUB DM<a id="sthref382"></a>
</pre></div>
<!-- class="sect2" -->
<a id="BABJGJFJ"></a>
<div id="VMSAR506" class="sect2">
<h3 class="sect2"><span class="secnum">6.4.2</span> Linking Precautions</h3>
<p>Oracle Database 11<span class="italic">g</span> is compiled with the IEEE floating point format supported by the C compiler.</p>
<p>Applications that were compiled with earlier releases of the Oracle Database 11<span class="italic">g</span> for HP OpenVMS should not be directly linked with the static or dynamic libraries that are provided with the current release. Although they may link correctly, run-time results may be unpredictable. Oracle recommends that all such applications be either recompiled or continue to be run from a 10.2 client environment connecting to Oracle Database 11<span class="italic">g</span> through Oracle Net Services.</p>
</div>
<!-- class="sect2" -->
<a id="BABFGFDD"></a>
<div id="VMSAR507" class="sect2">
<h3 class="sect2"><span class="secnum">6.4.3</span> Guidelines for Linking</h3>
<p>Apply the guidelines defined in this section when using link scripts.</p>
<p class="subhead2"><a id="VMSAR508"></a>Using the Demonstrations</p>
<p>Several sample programs, covering different aspects of precompiler programs, are provided in the <code dir="ltr">PRO</code><code dir="ltr"><span class="codeinlineitalic">language</span></code> demonstration directories. Oracle recommends that you precompile, compile, and link these programs. You can use these programs as models for new programming efforts.</p>
<p>Before running the <code dir="ltr">P<a id="sthref383"></a><a id="sthref384"></a>ROC</code> demonstrations, ensure that you define the following environment setting:</p>
<pre dir="ltr">
$ DEFINE SYS DECC$LIBRARY_INCLUDE
</pre>
<p class="subhead2"><a id="VMSAR509"></a>Compatibility with ANSI Standard Compilers</p>
<p>Oracle makes every effort to ensure compatibility with the <a id="sthref385"></a><a id="sthref386"></a>ANSI standard compilers supported by Hewlett-Packard. However, new functionality available with the latest compilers may not yet be supported.</p>
<p class="subhead2"><a id="VMSAR510"></a>Linking Sharable Images with <a id="sthref387"></a><a id="sthref388"></a>LOUTL.COM</p>
<p>You may link a sharable image against Oracle Database 11<span class="italic">g</span> code using the D option with <code dir="ltr">LOUTL.COM</code> or one of the <code dir="ltr">LNPRO*.COM</code> link scripts that internally calls <code dir="ltr">LOUTL.COM</code>.</p>
<p>You may want to install the sharable image in system memory with a command similar to the following:</p>
<pre dir="ltr">
$ INSTALL CREATE/SHARE/WRITE/HEADER <span class="italic">shareable_image</span>
</pre>
<p>To avoid receiving an error when you link the main program, include the sharable image in the link list.</p>
<p class="subhead2"><a id="VMSAR511"></a>Watching the Link Command Passed to LOUTL</p>
<p><a id="sthref389"></a><code dir="ltr">LOUTL</code> looks for the symbol <a id="sthref390"></a><code dir="ltr">SHOW_LINK_COMMAND</code>, which lets you see the <code dir="ltr">LINK</code> command that is constructed by <code dir="ltr">LOUTL.COM</code> without waiting for a link map. If this symbol is defined to any non-null value, then <code dir="ltr">LOUTL</code> displays the link command. If this symbol is undefined, then <code dir="ltr">LOUTL</code> issues the link command silently.</p>
<p class="subhead2"><a id="VMSAR512"></a>Using <a id="sthref391"></a>LNK$LIBRARY When Linking Against Oracle</p>
<p>All Oracle link scripts call the <code dir="ltr">LINK</code> command with the <code dir="ltr">/NOUSERLIBRARY</code> qualifier. This means that any libraries you want to link automatically using the <code dir="ltr">LNK$LIBRARY</code> logical names are ignored. Therefore, explicitly include these libraries in the link line or by using an option file.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i33246"></a>
<div id="VMSAR513" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.5</span> Pro*C/C++ Precompiler<a id="sthref392"></a><a id="sthref393"></a></h2>
<p>Before you use the Pro*C/C++ precompiler, verify that the correct version of the operating system compiler is properly installed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink OIDBI" href="../../install.112/e56668/toc.htm"><span class="italic">Oracle Database Installation Guide for HP OpenVMS Itanium</span></a> for information about the required compiler versions</p>
</li>
<li>
<p><a class="olink LNPCC" href="../../appdev.112/e10825/toc.htm"><span class="italic">Pro*C/C++ Programmer's Guide</span></a> for information about the Pro*C/C++ precompiler and interface features</p>
</li>
</ul>
</div>
<p>This section discusses the following topics:</p>
<ul>
<li>
<p><a href="#BABEGAEF">Section 6.5.1, "Pro*C/C++ Demonstrations"</a></p>
</li>
<li>
<p><a href="#BABCHDJF">Section 6.5.2, "Pro*C/C++ User Programs"</a></p>
</li>
<li>
<p><a href="#CACBICAC">Section 6.5.3, "Operating System (HP OpenVMS) Header Files"</a></p>
</li>
</ul>
<a id="BABEGAEF"></a>
<div id="VMSAR514" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.5.1</span> Pro*C/C++ Demonstrations<a id="sthref394"></a><a id="sthref395"></a></h3>
<p>Demonstrations are provided to show the features of the Pro*C/C++ precompiler. There are three types of demonstrations: C, C++, and Object programs. All the demonstrations are located in the <code dir="ltr">ORA_ROOT:[PRECOMP.DEMO.PROC]</code> directory. By default, all programs are dynamically linked with the client shared library.</p>
<p>To run, the programs require the demonstration tables created by the <code dir="ltr">ORA_ROOT:[SQLPLUS.DEMO]DEMOBLD.SQL</code> script to exist in the <code dir="ltr">SCOTT</code> schema with the password <code dir="ltr">TIGER</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must unlock the <code dir="ltr">SCOTT</code> account and set the password before creating the demonstrations.</div>
<p>For example, the following are the steps to precompile, compile, and link the sample1 demonstration program:</p>
<p>The DBA of the site must install Oracle Database Sample Schemas and unlock SCOTT/TIGER. For example:</p>
<pre dir="ltr">
$ @disk:[oracle_home_directory]ORAUSER <span class="italic">sid</span>
$ sqlplus / as sysdba
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The following is for illustrative purposes only. Contact the DBA of the site for information about the required security settings.</div>
<pre dir="ltr">
SQL&gt; ALTER USER SCOTT ACCOUNT UNLOCK;
SQL&gt; ALTER USER SCOTT IDENTIFIED BY TIGER;
SQL&gt; EXIT
$ SET DEFAULT ORA_ROOT:[PRECOMP.DEMO.PROC]
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The following is for illustrative purposes only. Contact the system manager of the site for information about the required C programming language compiler header location.</div>
<pre dir="ltr">
$ PROC INAME=SAMPLE1 INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")')
$ CC /DECC /NOSTANDARD /DEBUG=TRACE /OPTIMIZE /PREFIX=ALL /GRAN=LONG -
/NAMES=AS_IS /FLOAT=IEEE /INCLUDE=ORA_ROOT:[PRECOMP.PUBLIC] SAMPLE1.C
$ LNPROC SAMPLE1
$ RUN SAMPLE1
7934
0
</pre>
<p>Use similar commands for the demonstration programs <code dir="ltr">SAMPLE2</code>, <code dir="ltr">3</code>, <code dir="ltr">6</code>, <code dir="ltr">7</code>, <code dir="ltr">8</code>, <code dir="ltr">12</code>, <code dir="ltr">SQLVCP.PC</code> and <code dir="ltr">SCDEMO2.PC</code>. This procedure does not require data entry.</p>
<p>To create the Proc*C <code dir="ltr">SAMPLE4</code> demonstration, additional parameters and data entry are required as follows:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The following is for illustrative purposes only. Contact the system manager of the site for information about the required C programming language compiler definitions.</div>
<pre dir="ltr">
$ DEFINE SYS DECC$LIBRARY_INCLUDE
$ PROC INAME=SAMPLE4 INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")',ORA_ROOT:[RDBMS.PUBLIC])
$ CC /DECC /NOSTANDARD /DEBUG=TRACE /OPTIMIZE /PREFIX=ALL /GRAN=LONG -
/NAMES=AS_IS /FLOAT=IEEE -
/INCLUDE=(ORA_ROOT:[RDBMS.PUBLIC],ORA_ROOT:[PRECOMP.PUBLIC]) SAMPLE4.C
$ LNPROC SAMPLE4
$ RUN SAMPLE4
y
l
i
dd
sample4.pc
l
r
dd
tsamp4.pc
d
dd
l
q
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code dir="ltr">SAMPLE5.PC</code> is not supported.</div>
<p>Some demonstrations require you to run a SQL script that is located in the <code dir="ltr">ORA_ROOT:[PRECOMP.DEMO.SQL]</code> directory. If you do not run the script, then a message requesting you to run it is displayed. For example, to create the <code dir="ltr">SAMPLE9</code> demonstration program and run the required <code dir="ltr">ORA_ROOT:[PRECOMP.DEMO.SQL]CALLDEMO.SQL</code> script, run the following commands:</p>
<pre dir="ltr">
$ SQLPLUS/NOLOG
SQL&gt; @ORA_ROOT:[PRECOMP.DEMO.SQL]CALLDEMO.SQL
$ PROC INAME=SAMPLE9 INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")') SQLCHECK=FULL USER=SCOTT/TIGER
$ CC /DECC/NOSTANDARD/DEBUG=TRACE/OPTIMIZE/PREFIX=ALL/GRAN=LONG/NAMES=AS_IS -
/FLOAT=IEEE/INCLUDE=ORA_ROOT:[PRECOMP.PUBLIC] SAMPLE9.C
$ LNPROC SAMPLE9
$ RUN SAMPLE9
30
</pre>
<p>Running the <code dir="ltr">SAMPLE10</code> demonstration requires additional data entry as follows:</p>
<pre dir="ltr">
$ RUN SAMPLE10
scott
tiger
select * from dept;
select * from emp;
exit
</pre>
<p>Running the <code dir="ltr">SAMPLE11</code> demonstration requires additional SQL statements, parameters, and data entry as follows:</p>
<pre dir="ltr">
$ SQLPLUS/NOLOG
SQL&gt; @ORA_ROOT:[PRECOMP.DEMO.SQL]SAMPLE11.SQL
$ PROC INAME=SAMPLE11 INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")') SQLCHECK=FULL USER=SCOTT/TIGER
$ CC /DECC/NOSTANDARD/DEBUG=TRACE/OPTIMIZE/PREFIX=ALL/GRAN=LONG -
/NAMES=AS_IS/FLOAT=IEEE/INCLUDE=ORA_ROOT:[PRECOMP.PUBLIC] SAMPLE11.C
$ LNPROC SAMPLE11
$ RUN SAMPLE11
10
20
30
40
0
</pre>
<p>Running the <code dir="ltr">ANSIDYN1</code> demonstration requires additional parameters and data entry:</p>
<pre dir="ltr">
$ PROC INAME=ANSIDYN1 INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")') MODE=ANSI
$ CC /DECC/NOSTANDARD/DEBUG=TRACE/OPTIMIZE/PREFIX=ALL/GRAN=LONG -
/NAMES=AS_IS/FLOAT=IEEE/INCLUDE=ORA_ROOT:[PRECOMP.PUBLIC] ANSIDYN1.C
$ LNPROC ANSIDYN1
$ RUN ANSIDYN1
scott
tiger
SELECT empno, ename, mgr FROM emp;
SELECT deptno, dname FROM dept;
EXIT;
</pre>
<p>Running the <code dir="ltr">ANSIDYN2</code> demonstration requires additional parameters and data entry as follows:</p>
<pre dir="ltr">
$ PROC INAME=ANSIDYN2 INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")') DYNAMIC=ANSI
$ CC /DECC/NOSTANDARD/DEBUG=TRACE/OPTIMIZE/PREFIX=ALL/GRAN=LONG -
/NAMES=AS_IS/FLOAT=IEEE/INCLUDE=ORA_ROOT:[PRECOMP.PUBLIC] ANSIDYN2.C
$ LNPROC ANSIDYN2
$ RUN ANSIDYN2
scott
tiger
SELECT empno, ename, mgr FROM emp;
1
SELECT deptno, dname FROM dept;
1
EXIT;
10
20
0
</pre>
<p>Running the <code dir="ltr">CV_DEMO</code> demonstration requires additional SQL statements, parameters, and data entry as follows:</p>
<pre dir="ltr">
$ SQLPLUS/NOLOG
SQL&gt; @ORA_ROOT:[PRECOMP.DEMO.SQL]CV_DEMO.SQL
$ PROC INAME=CV_DEMO USER=SCOTT/TIGER SQLCHECK=FULL - 
INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")',ORA_ROOT:[RDBMS.PUBLIC])
$ CC /DECC/NOSTANDARD/DEBUG=TRACE/OPTIMIZE/PREFIX=ALL/GRAN=LONG -
/NAMES=AS_IS/FLOAT=IEEE/INCLUDE=ORA_ROOT:[PRECOMP.PUBLIC] CV_DEMO.C
$ LNPROC CV_DEMO
$ RUN CV_DEMO
</pre>
<p>Running the <code dir="ltr">LOBDEMO1</code> demonstration requires additional SQL statements, parameters, and data entry as follows:</p>
<pre dir="ltr">
$ SQLPLUS/NOLOG
SQL&gt; @ORA_ROOT:[PRECOMP.DEMO.SQL]LOBDEMO1.SQL
$ PROC INAME=LOBDEMO1 SQLCHECK=FULL USER=SCOTT/TIGER - 
/INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")',ORA_ROOT:[RDBMS.PUBLIC])
$ CC /DECC /NOSTANDARD /DEBUG=TRACE /OPTIMIZE /PREFIX=ALL /GRAN=LONG /NAMES=AS_IS -
/FLOAT=IEEE /INCLUDE=(ORA_ROOT:[PRECOMP.PUBLIC],ora_root:[rdbms.public]) LOBDEMO1.C
$ LNPROC LOBDEMO1
$ RUN LOBDEMO1
L
G
555001212
I
123456789
John Doe
A
123456789
2
Q
</pre>
<p>Alternatively, <code dir="ltr">LOBDEMO1.PC</code> can be precompiled with by setting <code dir="ltr">cpool</code> to the values <code dir="ltr">yes</code> as follows:</p>
<pre dir="ltr">
$ PROC INAME=LOBDEMO1 SQLCHECK=FULL USER=SCOTT/TIGER CPOOL=YES - 
/INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")',ORA_ROOT:[RDBMS.PUBLIC]) 
</pre>
<p>The remainder of the demonstration is the same as shown earlier.</p>
<p>Running the <code dir="ltr">ORACA</code> demonstration requires additional SQL statements and data entry as follows:</p>
<pre dir="ltr">
$ SQLPLUS/NOLOG
SQL&gt; @ORA_ROOT:[PRECOMP.DEMO.SQL]ORACATST.SQL
$ PROC INAME=ORACA INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")')
$ CC /DECC /NOSTANDARD /DEBUG=TRACE /OPTIMIZE /PREFIX=ALL /GRAN=LONG -
/NAMES=AS_IS /FLOAT=IEEE /INCLUDE=ORA_ROOT:[PRECOMP.PUBLIC] ORACA.C
$ LNPROC ORACA
$ RUN ORACA
10
</pre>
<p>Running the <code dir="ltr">SCDEMO1</code> demonstration requires additional parameters and data entry as follows:</p>
<pre dir="ltr">
$ PROC INAME=SCDEMO1 INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")')
$ CC /DECC /NOSTANDARD /DEBUG=TRACE /OPTIMIZE /PREFIX=ALL /GRAN=LONG -
/NAMES=AS_IS /FLOAT=IEEE /INCLUDE=ORA_ROOT:[PRECOMP.PUBLIC] SCDEMO1.C
$ LNPROC SCDEMO1
$ SCDEMO1 :== $ORA_ROOT:[PRECOMP.DEMO.PROC]SCDEMO1.EXE
$ SCDEMO1 SCOTT/TIGER
SELECT ENAME, JOB FROM EMP
1
1
y
4
n
EXIT
</pre>
<p>The <code dir="ltr">CPDEMO1.PC</code> and <code dir="ltr">CPDEMO2.PC</code> demonstrations are not supported.</p>
<p>To precompile, compile, and link the C++ <code dir="ltr">CPPDEMO1.PC</code> demonstration program, run the following commands:</p>
<pre dir="ltr">
$ SET DEFAULT ORA_ROOT:[PRECOMP.DEMO.PROC]
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The following is for illustrative purposes only. Contact the system manager of the site for information about the required header locations for the C and C++ programming language compilers.</div>
<pre dir="ltr">
$ PROC INAME=CPPDEMO1  DEFINE=_RWSTD_USE_CONFIG CODE=CPP - 
/INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")',SYS$COMMON:[CXX$LIB.REFERENCE.CXXL$ANSI_DEF]) 
$ CXX /DEBUG=TRACE /OPTIMIZE /PREFIX=ALL /GRAN=LONG /NAMES=AS_IS /FLOAT=IEEE -
/INCLUDE=(ORA_ROOT:[PRECOMP.PUBLIC]) CPPDEMO1.C/DEFINE=(_RWSTD_USE_CONFIG)
$ LNPROC CPPDEMO1 CPPDEMO1 CPP
$ RUN CPPDEMO1
7369
7499
0
</pre>
<p>To create the Pro*C++ <code dir="ltr">CPPDEMO2.PC</code> demonstration program which also includes <code dir="ltr">EMPCLASS.PC</code>, run commands similar to those of <code dir="ltr">CPPDEMO1.PC</code>, but without data entry, as follows:</p>
<pre dir="ltr">
$ SQLPLUS/NOLOG
SQL&gt; @ORA_ROOT:[PRECOMP.DEMO.SQL]CPPDEMO2.SQL
$ PROC INAME=EMPCLASS CODE=CPP SQLCHECK=FULL USER=SCOTT/TIGER - 
/INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")',SYS$COMMON:[CXX$LIB.REFERENCE.CXXL$ANSI_DEF]) 
$ CXX /NOSTANDARD /DEBUG=TRACE /OPTIMIZE /PREFIX=ALL /GRAN=LONG -
/NAMES=AS_IS /FLOAT=IEEE /INCLUDE=(ORA_ROOT:[PRECOMP.PUBLIC]) EMPCLASS.C
$ PROC INAME=CPPDEMO2 CODE=CPP - 
/INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")',SYS$COMMON:[CXX$LIB.REFERENCE.CXXL$ANSI_DEF]) 
$ CXX /NOSTANDARD /DEBUG=TRACE /OPTIMIZE /PREFIX=ALL /GRAN=LONG /NAMES=AS_IS -
/FLOAT=IEEE /INCLUDE=(ORA_ROOT:[PRECOMP.PUBLIC]) CPPDEMO2.C
$ LNPROC CPPDEMO2 CPPDEMO2,EMPCLASS CPP
$ RUN CPPDEMO2
</pre>
<p>To create the Pro*C++ <code dir="ltr">CPPDEMO3.PC</code> demonstration program, run commands similar to those of <code dir="ltr">CPPDEMO1.PC</code>. This procedure does not require data entry.</p>
<p>To precompile, compile, and link the OTT <code dir="ltr">COLDEMO1.PC</code> demonstration program, run the following commands:</p>
<pre dir="ltr">
$ SET DEFAULT ORA_ROOT:[PRECOMP.DEMO.SQL]
$ SQLPLUS/NOLOG
SQL&gt; @ORA_ROOT:[PRECOMP.DEMO.SQL]COLDEMO1.SQL
$ SET DEFAULT ORA_ROOT:[PRECOMP.DEMO.PROC]
$ @ORA_ROOT:[JDBC]JDBC_SETUP_JDK12.COM
$ OTT COLDEMO1 CODE=C USERID=SCOTT/TIGER INTYPE=COLDEMO1.TYP OUTTYPE=COLDEMO1O.TYP HFILE=COLDEMO1.H
$ PROC INAME=COLDEMO1 INTY=COLDEMO1O.TYP - 
/INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")',ORA_ROOT:[RDBMS.PUBLIC])
$ CC /DECC /NOSTANDARD /DEBUG=TRACE /OPTIMIZE /PREFIX=ALL /GRAN=LONG /NAMES=AS_IS -
/FLOAT=IEEE /INCLUDE=([],ORA_ROOT:[PRECOMP.PUBLIC],ORA_ROOT:[RDBMS.PUBLIC]) COLDEMO1.C
$ LNPROC COLDEMO1
$ RUN COLDEMO1
A
Q
</pre>
<p>Optionally, <code dir="ltr">COLDEMO1.PC</code> may also be precompiled with "cpool=yes" as follows:</p>
<pre dir="ltr">
$ PROC INAME=COLDEMO1 INTY=COLDEMO1O.TYP CPOOL=YES - 
/INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")',ORA_ROOT:[RDBMS.PUBLIC]) 
</pre>
<p>To run the Pro*C <code dir="ltr">NAVDEMO1.PC</code>, <code dir="ltr">OBJDEMO1.PC</code> OTT demonstrations, run commands similar to <code dir="ltr">COLDEMO1.PC</code>. This procedure does not require data entry.</p>
<p>To precompile, compile, and link the OTT <code dir="ltr">COLDEMO2.PC</code> demonstration program, run the following commands:</p>
<pre dir="ltr">
$ SET DEFAULT ORA_ROOT:[PRECOMP.DEMO.SQL]
$ SQLPLUS/NOLOG
SQL&gt; CONNECT SCOTT/TIGER
SQL&gt; DROP TABLE COUNTY_TBL;
SQL&gt; @ORA_ROOT:[PRECOMP.DEMO.SQL]COLDEMO2.SQL
$ SET DEFAULT ORA_ROOT:[PRECOMP.DEMO.PROC]
$ @ORA_ROOT:[JDBC]JDBC_SETUP_JDK12.COM
$ OTT COLDEMO2 CODE=C USERID=SCOTT/TIGER INTYPE=COLDEMO2.TYP OUTTYPE=COLDEMO2O.TYP HFILE=COLDEMO2.H
$ PROC INAME=COLDEMO2 INTY=COLDEMO2O.TYP - 
/INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")',ORA_ROOT:[RDBMS.PUBLIC]) 
$ CC /DECC /NOSTANDARD /DEBUG=TRACE -
/OPTIMIZE /PREFIX=ALL /GRAN=LONG /NAMES=AS_IS /FLOAT=IEEE -
/INCLUDE=([],ORA_ROOT:[PRECOMP.PUBLIC],ORA_ROOT:[RDBMS.PUBLIC]) COLDEMO2.C
$ LNPROC COLDEMO2
$ RUN COLDEMO2
Y
1999
A
Q
</pre></div>
<!-- class="sect2" -->
<a id="BABCHDJF"></a>
<div id="VMSAR515" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.5.2</span> Pro*C/C++ User Programs<a id="sthref396"></a><a id="sthref397"></a></h3>
<p>To create and run a program, enter commands similar to the following:</p>
<pre dir="ltr">
$ PROC INAME=objfile1 INCLUDE=('f$trnlnm("DECC$LIBRARY_INCLUDE")')
$ PROC INAME=objfile2 INCLUDE=('f$trnlnm("DECC$LIBRARY_INCLUDE")')
$ CC /DECC /NOSTANDARD /DEBUG=TRACE /OPTIMIZE /PREFIX=ALL /GRAN=LONG /NAMES=AS_IS -
/FLOAT=IEEE /INCLUDE=(ORA_ROOT:[PRECOMP.PUBLIC]) objfile1.c
$ CC /DECC /NOSTANDARD /DEBUG=TRACE /OPTIMIZE /PREFIX=ALL /GRAN=LONG /NAMES=AS_IS -
/FLOAT=IEEE /INCLUDE=(ORA_ROOT:[PRECOMP.PUBLIC]) objfile2.c
$ LNPROC OBJFILE1 OBJFILE1,OBJFILE2
$ RUN OBJFILE1
</pre>
<p>In this example:</p>
<ul>
<li>
<p><code dir="ltr">OBJFILEN</code> is the C source file for the program</p>
</li>
<li>
<p>the first <code dir="ltr">LNPROC</code> parameter is the executable program</p>
</li>
</ul>
<p>For example, to create the program <code dir="ltr">MYPROG</code> from the Pro*C/C++ source file <code dir="ltr">MYPROG.PC</code>, enter one of the following commands, depending on the source and the type of executable that you want to create:</p>
<ul>
<li>
<p>For C source, linked with the client shared library, enter the following commands:</p>
<pre dir="ltr">
$ PROC INAME=MYPROG INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")')
$ CC /DECC /NOSTANDARD /DEBUG=TRACE /OPTIMIZE /PREFIX=ALL /GRAN=LONG -
/NAMES=AS_IS /FLOAT=IEEE /INCLUDE=(ORA_ROOT:[PRECOMP.PUBLIC]) MYPROG.C
$ LNPROC MYPROG
</pre></li>
<li>
<p>For C source, linked with the client object library, enter the following commands:</p>
<pre dir="ltr">
$ PROC INAME=MYPROG INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")')
$ CC /DECC /NOSTANDARD /DEBUG=TRACE /OPTIMIZE /PREFIX=ALL /GRAN=LONG -
/NAMES=AS_IS /FLOAT=IEEE /INCLUDE=(ORA_ROOT:[PRECOMP.PUBLIC]) MYPROG.C
$ DEFINE ORA_OLB ORA_ROOT:[LIB32],ORA_RDBMS
$ DEFINE ORA_UTIL ORA_OLB 
$ LOUTL MYPROG MYPROG MYPROG NS
</pre></li>
<li>
<p>For C++ source, linked with the client shared library, enter the following commands:</p>
<pre dir="ltr">
$ PROC INAME=myprog CODE=CPP - 
/INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")',SYS$COMMON:[CXX$LIB.REFERENCE.CXXL$ANSI_DEF])
$ CXX /NOSTANDARD /DEBUG=TRACE /OPTIMIZE /PREFIX=ALL /GRAN=LONG /NAMES=AS_IS -
/FLOAT=IEEE /INCLUDE=(ORA_ROOT:[PRECOMP.PUBLIC]) MYPROG.C
$ LNPROC MYPROG MYPROG CPP
</pre></li>
<li>
<p>For C++ source, linked with the client object library, enter the following commands:</p>
<pre dir="ltr">
$ PROC INAME=MYPROG CODE=CPP -
/INCLUDE=('F$TRNLNM("DECC$LIBRARY_INCLUDE")',SYS$COMMON:[CXX$LIB.REFERENCE.CXXL$ANSI_DEF])
$ CXX /NOSTANDARD /DEBUG=TRACE /OPTIMIZE /PREFIX=ALL /GRAN=LONG /NAMES=AS_IS -
/FLOAT=IEEE /INCLUDE=(ORA_ROOT:[PRECOMP.PUBLIC]) MYPROG.C
$ DEFINE ORA_OLB ORA_ROOT:[LIB32],ORA_RDBMS
$ DEFINE ORA_UTIL ORA_OLB 
$ LOUTL MYPROG MYPROG MYPROG NS CPP
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CACBICAC"></a>
<div id="VMSAR516" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.5.3</span> Operating System (HP OpenVMS) Header Files</h3>
<p>If you want to upgrade the C/C++ libraries, then you have to refresh Oracle's local copies of these files. This is achieved using the following commands:</p>
<pre dir="ltr">
$ SET DEFAULT ORA_ROOT:[PRECOMP]
$ @BUILD_DIRS
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i36455"></a>
<div id="VMSAR517" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.6</span> Pro*COBOL Precompiler<a id="sthref398"></a><a id="sthref399"></a></h2>
<p><a href="#BABBJHHC">Table 6-5</a> shows the naming conventions for the Pro*COBOL precompiler.</p>
<div id="VMSAR518" class="tblformal">
<p class="titleintable"><a id="sthref400"></a><a id="BABBJHHC"></a>Table 6-5 Pro*COBOL Naming Conventions <a id="sthref401"></a></p>
<table class="cellalignment1602" title="Pro*COBOL Naming Conventions " summary="This table shows Pro*COBOL naming conventions" dir="ltr">
<thead>
<tr class="cellalignment1596">
<th class="cellalignment1603" id="r1c1-t14">Item</th>
<th class="cellalignment1603" id="r1c2-t14">Pro*COBOL</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r2c1-t14" headers="r1c1-t14">
<p>Executable</p>
</td>
<td class="cellalignment1604" headers="r2c1-t14 r1c2-t14">
<p><code dir="ltr">PROCOB.EXE</code></p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r3c1-t14" headers="r1c1-t14">
<p><code dir="ltr">demo</code> directory</p>
</td>
<td class="cellalignment1604" headers="r3c1-t14 r1c2-t14">
<p><code dir="ltr">PROCOB2</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>Pro*COBOL supports static linking with the static client object library, <code dir="ltr">ORA_ROOT:[LIB32]LIBCLNTST10.OLB</code>, as well as dynamic linking with the dynamically loadable client shared library, <code dir="ltr">ORA_ROOT:[LIB32]LIBCLNTSH.SO</code>.</p>
<p>This section discusses the following topics:</p>
<ul>
<li>
<p><a href="#BABCIFFH">Section 6.6.1, "Pro*COBOL Oracle Runtime System"</a></p>
</li>
<li>
<p><a href="#BABDEGCD">Section 6.6.2, "Pro*COBOL Demonstrations"</a></p>
</li>
<li>
<p><a href="#BABGDGFH">Section 6.6.3, "Pro*COBOL User Programs"</a></p>
</li>
<li>
<p><a href="#BABGEIAI">Section 6.6.4, "FORMAT Precompiler Option"</a></p>
</li>
<li>
<p><a href="#CACFCFIF">Section 6.6.5, "Pro*COBOL Restriction"</a></p>
</li>
</ul>
<a id="BABCIFFH"></a>
<div id="VMSAR519" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.6.1</span> Pro*COBOL Oracle Runtime System<a id="sthref402"></a><a id="sthref403"></a><a id="sthref404"></a><a id="sthref405"></a></h3>
<p>The <code dir="ltr">RUN</code> command or a symbol may be used to invoke Pro*COBOL programs. For example:</p>
<pre dir="ltr">
$ RUN SAMPLE1
</pre>
<p>If the program requires input parameters, then define a symbol for the executable and then use the symbol to invoke the program. For example:</p>
<pre dir="ltr">
$ MYPROG  :== $ORA_ROOT:[BIN]MYPROG.EXE
$ MYPROG <span class="italic">parameter_list</span>
</pre></div>
<!-- class="sect2" -->
<a id="BABDEGCD"></a>
<div id="VMSAR520" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.6.2</span> Pro*COBOL Demo<a id="sthref406"></a>nstratio<a id="sthref407"></a>ns</h3>
<p>Demonstrations are provided to show the features of the Pro*COBOL precompiler. These programs are located in the <code dir="ltr">ORA_ROOT:[PRECOMP.DEMO.PROCOB2]</code> directory. By default, all programs are linked with the client shared library.</p>
<p>To run the programs, the demonstration tables created by the <code dir="ltr">ORA_ROOT:[SQLPLUS.DEMO]DEMOBLD.SQL</code> script must exist in the <code dir="ltr">SCOTT</code> schema with the password <code dir="ltr">TIGER</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must unlock the <code dir="ltr">SCOTT</code> account and set the password before creating the demonstrations.</div>
<p>To precompile, compile, and link the <code dir="ltr">SAMPLE1</code> demonstration program for Pro*COBOL, run the following commands:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The DBA of the site must install Oracle Database Sample Schemas and unlock <code dir="ltr">SCOTT</code>/<code dir="ltr">TIGER</code>. The following is for illustrative purposes only. Contact the DBA of the site for information about the required security settings.</div>
<pre dir="ltr">
$ @ORA_ROOT:[000000]ORAUSER <span class="italic">sid</span>
$ sqlplus / as sysdba
</pre>
<pre dir="ltr">
SQL&gt; ALTER USER SCOTT ACCOUNT UNLOCK;
SQL&gt; ALTER USER SCOTT IDENTIFIED BY TIGER;
SQL&gt; EXIT
$ SET DEFAULT ORA_ROOT:[PRECOMP.DEMO.PROCOB2]
$ PROCOB INAME=SAMPLE1
$ COB /ANSI /NAMES=AS_IS /FLOAT=IEEE SAMPLE1.COB
$ LNPROCOB SAMPLE1
$ RUN SAMPLE1
7934
0
</pre>
<p>To create the Pro*COBOL <code dir="ltr">SAMPLE2</code>, <code dir="ltr">3</code>, <code dir="ltr">6</code>, <code dir="ltr">7</code>, <code dir="ltr">8</code>, <code dir="ltr">14</code> demonstrations, run commands similar to <code dir="ltr">SAMPLE1</code>. No data entry is required.</p>
<p>Running the <code dir="ltr">SAMPLE4</code> demonstration requires the following data entry:</p>
<pre dir="ltr">
$ RUN SAMPLE4
y
7499
0
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code dir="ltr">SAMPLE5.PCO</code> is not supported.</div>
<p>Some demonstrations require you to run a SQL script that is located in the <code dir="ltr">ORA_ROOT:[PRECOMP.DEMO.SQL]</code> directory. If you do not run the script, then a message requesting you to run it is displayed. For example, to create the <code dir="ltr">SAMPLE9</code> demonstration program and run the required <code dir="ltr">ORA_ROOT:[PRECOMP.DEMO.SQL]CALLDEMO.SQL</code> script, enter:</p>
<pre dir="ltr">
$ SQLPLUS/NOLOG
SQL&gt; @ORA_ROOT:[PRECOMP.DEMO.SQL]CALLDEMO.SQL
$ PROCOB INAME=SAMPLE9 SQLCHECK=FULL USERID=SCOTT/TIGER PICX=VARCHAR2
$ COB /ANSI /NAMES=AS_IS /FLOAT=IEEE SAMPLE9.COB
$ LNPROCOB SAMPLE9
$ RUN SAMPLE9
10
</pre>
<p>Running the <code dir="ltr">SAMPLE10</code> demonstration requires additional parameters and data entry:</p>
<pre dir="ltr">
$ PROCOB INAME=SAMPLE10 INCLUDE=ORA_ROOT:[PRECOMP.PUBLIC]
$ COB /ANSI /NAMES=AS_IS /FLOAT=IEEE SAMPLE10.COB
$ LNPROCOB SAMPLE10
$ RUN SAMPLE10
scott
tiger
SELECT empno FROM emp
</pre>
<p>Running the <code dir="ltr">SAMPLE11</code> demonstration requires additional SQL statements, parameters, and data entry as follows:</p>
<pre dir="ltr">
$ SQLPLUS/NOLOG
SQL&gt; @ORA_ROOT:[PRECOMP.DEMO.SQL]SAMPLE11.SQL
$ PROCOB INAME=SAMPLE11 SQLCHECK=FULL USERID=SCOTT/TIGER PICX=VARCHAR2
$ COB /ANSI /NAMES=AS_IS /FLOAT=IEEE SAMPLE11.COB
$ LNPROCOB SAMPLE11
$ RUN SAMPLE11
20
</pre>
<p>Running the <code dir="ltr">SAMPLE12</code> requires additional parameters and data entry as follows:</p>
<pre dir="ltr">
$ PROCOB INAME=SAMPLE12 DYNAMIC=ANSI
$ COB /ANSI /NAMES=AS_IS /FLOAT=IEEE SAMPLE12.COB
$ LNPROCOB SAMPLE12
$ RUN SAMPLE12
scott
tiger
SELECT * FROM emp WHERE deptno = :b1
30
</pre>
<p>Running the <code dir="ltr">SAMPLE13</code> demonstration requires additional data entry as follows:</p>
<pre dir="ltr">
$ RUN SAMPLE13
30
20
10
0
</pre>
<p>Running the <code dir="ltr">LOBDEMO1</code> demonstration requires additional SQL statements and data entry as follows:</p>
<pre dir="ltr">
$ SQLPLUS/NOLOG
SQL&gt; @ORA_ROOT:[PRECOMP.DEMO.SQL]LOBDEMO1.SQL
$ PROCOB INAME=LOBDEMO1
$ COB /ANSI /NAMES=AS_IS /FLOAT=IEEE LOBDEMO1.COB
$ LNPROCOB LOBDEMO1
$ RUN LOBDEMO1
1
2
555001212
3
555001212
4
4
111223333
Mickey
1
2
111223333
3
111223333
5
3
111223333
2
5
</pre></div>
<!-- class="sect2" -->
<a id="BABGDGFH"></a>
<div id="VMSAR521" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.6.3</span> Pro*COBOL User Programs<a id="sthref408"></a><a id="sthref409"></a><a id="sthref410"></a><a id="sthref411"></a></h3>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The make file for information about creating 32-bit user programs</div>
<p>To create a program, enter commands similar to the following:</p>
<pre dir="ltr">
$ PROCOB INAME=cobfile1
$ PROCOB INAME=cobfil2
$ COB /ANSI /NAMES=AS_IS /FLOAT=IEEE cobfile1.COB
$ COB /ANSI /NAMES=AS_IS /FLOAT=IEEE cobfile2.COB
$ LNPROCOB cobfile1 cobfile1,cobfile2
$ RUN cobfile1
</pre>
<p>In this example:</p>
<ul>
<li>
<p><code dir="ltr">cobfilen</code> is the COBOL source file for the program</p>
</li>
<li>
<p>The first <code dir="ltr">LNPROCOB</code> parameter is the executable program</p>
</li>
</ul>
<p>For example:</p>
<p>To create the <code dir="ltr">myprog</code> program, enter one of the following commands, depending on the source and type of executable that you want to create:</p>
<ul>
<li>
<p>To link with the client shared library, enter the following commands:</p>
<pre dir="ltr">
$ PROCOB INAME=myprog
$ COB /ANSI /NAMES=AS_IS /FLOAT=IEEE myprog.COB
$ LNPROCOB myprog
</pre></li>
<li>
<p>To link with the client object library (non-shared), enter the following commands:</p>
<pre dir="ltr">
$ PROCOB INAME=myprog
$ COB /ANSI /NAMES=AS_IS /FLOAT=IEEE myprog.COB
$ DEFINE ORA_OLB ORA_ROOT:[LIB32],ORA_RDBMS
$ DEFINE ORA_UTIL ORA_OLB 
$ LOUTL MYPROG MYPROG MYPROG NS
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABGEIAI"></a>
<div id="VMSAR522" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.6.4</span> FORMAT Precompiler <a id="sthref412"></a><a id="sthref413"></a>Option</h3>
<p>The FORMAT precompiler option specifies the format of input lines for COBOL. If you specify the default value <code dir="ltr">ANSI</code>, then columns 1 to 6 contain an optional sequence number, column 7 indicates comments or continuation lines, paragraph names begin in columns 8 to 11, and statements begin in columns 12 to 72.</p>
<p>If you specify the value <code dir="ltr">TERMINAL</code>, then columns 1 to 6 are dropped, making column 7 the left-most column.</p>
</div>
<!-- class="sect2" -->
<a id="CACFCFIF"></a>
<div id="VMSAR523" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.6.5</span> Pro*COBOL Restriction</h3>
<p>The use of incorrectly aligned binary data, such as COMP-1, in Pro*COBOL applications will generate unaligned access warnings that will prevent optimum compiler performance. However, the application results are not affected.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i28565"></a>
<div id="VMSAR524" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.7</span> Pro*FORTRAN Precompiler</h2>
<p>Before you use the Pro*FORTRAN precompiler, verify that the correct version of the compiler is installed.</p>
<p>This section discusses the following topics:</p>
<ul>
<li>
<p><a href="#i28568">Section 6.7.1, "Pro*FORTRAN Demonstrations"</a></p>
</li>
<li>
<p><a href="#i28599">Section 6.7.2, "Pro*FORTRAN User Programs"</a></p>
</li>
</ul>
<a id="i28568"></a>
<div id="VMSAR525" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.7.1</span> Pro*FORTRAN Demonstrations<a id="sthref414"></a></h3>
<p>Demonstrations are provided to show the features of the Pro*FORTRAN precompiler. All of the demonstrations are located in the <code dir="ltr">ORA_ROOT:[PRECOMP.DEMO.PROFOR]</code> directory. By default, all programs are dynamically linked with the client shared library.</p>
<p>To run the programs, the demonstration tables created by the <code dir="ltr">ORA_ROOT:[sqlplus.demo]demobld.sql</code> script must exist in the <code dir="ltr">SCOTT</code> schema with the password <code dir="ltr">TIGER</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must unlock the <code dir="ltr">SCOTT</code> account and set the password before creating the demonstrations.</div>
<p>Before creating the demonstrations, review the <code dir="ltr">DEMO_PROFOR.MK</code> make file, which is located in the <code dir="ltr">ORA_ROOT:[PRECOMP.DEMO.PROFOR]</code> directory.</p>
<p>For example, to precompile, compile, and link the <code dir="ltr">SAMPLE1</code> demonstration program, enter the following commands:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The DBA of the site must install Oracle Database Sample Schemas and unlock SCOTT/TIGER.
<p>The following is for illustrative purposes only. Contact the DBA of the site for information about the required security settings.</p>
</div>
<pre dir="ltr">
$ @ORA_ROOT:[000000]ORAUSER <span class="italic">sid</span>
$ sqlplus / as sysdba
</pre>
<pre dir="ltr">
SQL&gt; ALTER USER SCOTT ACCOUNT UNLOCK;
SQL&gt; ALTER USER SCOTT IDENTIFIED BY TIGER;
SQL&gt; EXIT
$ SET DEFAULT ORA_ROOT:[PRECOMP.DEMO.PROFOR]
$ PROFOR INAME=SAMPLE1 INCLUDE=(ORA_ROOT:[RDBMS.PUBLIC],ORA_ROOT:[PRECOMP.PUBLIC])
$ FORT /NAMES=AS_IS /FLOAT=IEEE -
/INCLUDE=(ORA_ROOT:[RDBMS.PUBLIC],ORA_ROOT:[PRECOMP.PUBLIC]) SAMPLE1
$ LNPROFOR SAMPLE1
$ RUN SAMPLE1
7934
0
</pre>
<p>To create the Pro*FORTRAN <code dir="ltr">SAMPLE2</code>, <code dir="ltr">3</code>, <code dir="ltr">6</code>, <code dir="ltr">7</code>, and <code dir="ltr">8</code> demonstrations programs, run commands similar to those run for <code dir="ltr">SAMPLE1</code>. This procedure does not require data entry.</p>
<p>Running the <code dir="ltr">SAMPLE4</code> demonstration requires additional data entry as follows:</p>
<pre dir="ltr">
$ RUN SAMPLE4
y
7934
0
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code dir="ltr">SAMPLE5.PFO</code> is not supported.</div>
<p>Some demonstrations require you to run a SQL script, located in the <code dir="ltr">ORA_ROOT:[PRECOMP.DEMO.SQL]</code> directory. If you do not run the script, then a message requesting you to run it is displayed. For example, to create the <code dir="ltr">SAMPLE9</code> demonstration and run the required <code dir="ltr">ORA_ROOT:[PRECOMP.DEMO.SQL]CALLDEMO.SQL</code> script, run the following commands:</p>
<pre dir="ltr">
$ SQLPLUS/NOLOG
SQL&gt; @ORA_ROOT:[PRECOMP.DEMO.SQL]CALLDEMO.SQL
$ PROFOR INAME=SAMPLE9 INCLUDE=(ORA_ROOT:[RDBMS.PUBLIC],
ORA_ROOT:[PRECOMP.PUBLIC]) SQLCHECK=FULL USERID=SCOTT/TIGER
$ FORT /NAMES=AS_IS /FLOAT=IEEE /INCLUDE=(ORA_ROOT:[RDBMS.PUBLIC],
ORA_ROOT:[PRECOMP.PUBLIC]) SAMPLE9
$ LNPROFOR SAMPLE9
$ RUN SAMPLE9
10
</pre>
<p>Running the <code dir="ltr">SAMPLE10</code> demonstration requires data entry as follows:</p>
<pre dir="ltr">
$ RUN SAMPLE10
scott
tiger
SELECT empno, ename, job FROM emp;
</pre>
<p>Running the <code dir="ltr">SAMPLE11</code> demonstration requires additional SQL statements, parameters, and data entry as follows:</p>
<pre dir="ltr">
$ SQLPLUS/NOLOG
SQL&gt; @ORA_ROOT:[PRECOMP.DEMO.SQL]SAMPLE11.SQL
$ PROFOR INAME=SAMPLE11 INCLUDE=(ORA_ROOT:[RDBMS.PUBLIC],
ORA_ROOT:[PRECOMP.PUBLIC]) SQLCHECK=FULL USERID=SCOTT/TIGER
$ FORT /NAMES=AS_IS /FLOAT=IEEE /
INCLUDE=(ORA_ROOT:[RDBMS.PUBLIC],ORA_ROOT:[PRECOMP.PUBLIC]) SAMPLE11
$ LNPROFOR SAMPLE11
$ RUN SAMPLE11
20
</pre></div>
<!-- class="sect2" -->
<a id="i28599"></a>
<div id="VMSAR526" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.7.2</span> Pro*FORTRAN User Programs</h3>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The make file for information about creating 32-bit user programs</div>
<p>To create a program, enter a commands similar to the following:</p>
<pre dir="ltr">
$ PROFOR INAME=forfile1 INCLUDE=(ORA_ROOT:[RDBMS.PUBLIC],ORA_ROOT:[PRECOMP.PUBLIC])
$ PROFOR INAME=forfil2 INCLUDE=(ORA_ROOT:[RDBMS.PUBLIC],ORA_ROOT:[PRECOMP.PUBLIC])
$ FORT /NAMES=AS_IS /FLOAT=IEEE /
INCLUDE=(ORA_ROOT:[RDBMS.PUBLIC],ORA_ROOT:[PRECOMP.PUBLIC]) forfile1.for
$ FORT /NAMES=AS_IS /FLOAT=IEEE /
INCLUDE=(ORA_ROOT:[RDBMS.PUBLIC],ORA_ROOT:[PRECOMP.PUBLIC]) forfile2.for
$ LNPROFOR forfile1 forfile1,forfile2.
$ RUN forfile1
</pre>
<p>In this example:</p>
<ul>
<li>
<p><code dir="ltr">forfile1</code> and <code dir="ltr">forfile2</code> are the FORTRAN source files for the program</p>
</li>
<li>
<p>The first <code dir="ltr">LNPROFOR</code> parameter is the executable program</p>
</li>
</ul>
<p>For example, to create the <code dir="ltr">myprog</code> program from the Pro*FORTRAN source file <code dir="ltr">myprog.PFO</code>, enter one of the following commands, depending on the type of executable that you want to create:</p>
<ul>
<li>
<p>For an executable linked with the client shared library, enter the following commands:</p>
<pre dir="ltr">
$ PROFOR INAME=myprog
$ FORT /NAMES=AS_IS /FLOAT=IEEE /
INCLUDE=(ORA_ROOT:[RDBMS.PUBLIC],ORA_ROOT:[PRECOMP.PUBLIC]) myprog.FOR
$ LNPROFOR myprog
</pre></li>
<li>
<p>For an executable linked with the client object library (non-shared), enter the following commands:</p>
<pre dir="ltr">
$ PROFOR INAME=myprog
$ FORT /NAMES=AS_IS /FLOAT=IEEE /
INCLUDE=(ORA_ROOT:[RDBMS.PUBLIC],ORA_ROOT:[PRECOMP.PUBLIC]) myprog.FOR
$ DEFINE ORA_OLB ORA_ROOT:[LIB32],ORA_RDBMS$ DEFINE ORA_UTIL ORA_OLB 
$ LOUTL myprog myprog myprog NS
</pre></li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i43039"></a>
<div id="VMSAR527" class="sect1">
<h2 class="sect1"><span class="secnum">6.8</span> Using the Oracle Call Interface Routines <a id="sthref415"></a><a id="sthref416"></a></h2>
<p>Oracle Call Interface routines enable high-level language applications to access data in an Oracle Database. Programs that use the OCI routines can make direct calls to Oracle subroutines. They need not be precompiled. The C programming language, FORTRAN, and COBOL are supported on HP OpenVMS for OCI programs.</p>
<p>OCI sample programs are supplied in the following directory:</p>
<pre dir="ltr">
ORA_ROOT:[RDBMS.DEMO]
</pre>
<p>This section discusses the following topics:</p>
<ul>
<li>
<p><a href="#BABHEDEF">Section 6.8.1, "Guidelines"</a></p>
</li>
<li>
<p><a href="#BABGHDFJ">Section 6.8.2, "CDA/LDA Structure Information"</a></p>
</li>
<li>
<p><a href="#CACGEAIH">Section 6.8.3, "Linking Oracle Call Interface Programs Written in the C Programming Language"</a></p>
</li>
<li>
<p><a href="#BABECHFJ">Section 6.8.4, "Linking Oracle Call Interface Programs Written in Other Languages"</a></p>
</li>
</ul>
<a id="BABHEDEF"></a>
<div id="VMSAR528" class="sect2">
<h3 class="sect2"><span class="secnum">6.8.1</span> Guidelines</h3>
<p>The following guidelines apply when using OCI routines:</p>
<ul>
<li>
<p>You can run OCI programs with the HP OpenVMS debugger by compiling with the <code dir="ltr">/DEBUG</code> directive and then linking using the D option of the <code dir="ltr">LNOCIC</code> (or <code dir="ltr">LNOCI</code>) command file.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CACGEAIH">Section 6.8.3, "Linking Oracle Call Interface Programs Written in the C Programming Language"</a> for information about the syntax of <code dir="ltr">LNOCIC</code></div>
</li>
<li>
<p>While using an asynchronous system trap (AST), you are restricted to using only the OBREAK procedure. No other OCI calls can be used.<a id="sthref417"></a><a id="sthref418"></a></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABGHDFJ"></a>
<div id="VMSAR529" class="sect2">
<h3 class="sect2"><span class="secnum">6.8.2</span> CDA/LDA Structure Information</h3>
<p>For the C OCI programmer, the CDA and LDA structures (64 bytes each) are declared in the header file <code dir="ltr">OCIDFN.H</code>.</p>
<p>The following tabulation of the size and offsets of the structure elements allows COBOL and FORTRAN programmers to use these structures.</p>
<div id="VMSAR530" class="sect3"><a id="sthref419"></a>
<h4 class="sect3"><span class="secnum">6.8.2.1</span> Size and Offsets of Structure Elements</h4>
<p>The information for the <code dir="ltr">cda_def</code> structure, of which <code dir="ltr">Cda_Def</code> and <code dir="ltr">Lda_Def</code> are type definitions, is shown in <a href="#BABGACDA">Table 6-6</a>.</p>
<p><a href="#BABGACDA">Table 6-6</a> lists the sizes and offsets of structure elements.</p>
<div id="VMSAR531" class="tblformal">
<p class="titleintable"><a id="sthref420"></a><a id="BABGACDA"></a>Table 6-6 Size and Offset of Structure Elements</p>
<table class="cellalignment1602" title="Size and Offset of Structure Elements" summary="This table lists the alpha size and offsets of structure elements, to allow COBOL and FORTRAN programmers to use the CDA and LDA structures." dir="ltr">
<thead>
<tr class="cellalignment1596">
<th class="cellalignment1603" id="r1c1-t24">Structure Element</th>
<th class="cellalignment1603" id="r1c2-t24">Offset (Bytes)</th>
<th class="cellalignment1603" id="r1c3-t24">Size (Bytes)</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r2c1-t24" headers="r1c1-t24">
<p>v2_rc</p>
</td>
<td class="cellalignment1604" headers="r2c1-t24 r1c2-t24">
<p>0</p>
</td>
<td class="cellalignment1604" headers="r2c1-t24 r1c3-t24">
<p>2</p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r3c1-t24" headers="r1c1-t24">
<p>ft</p>
</td>
<td class="cellalignment1604" headers="r3c1-t24 r1c2-t24">
<p>2</p>
</td>
<td class="cellalignment1604" headers="r3c1-t24 r1c3-t24">
<p>2</p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r4c1-t24" headers="r1c1-t24">
<p>rpc</p>
</td>
<td class="cellalignment1604" headers="r4c1-t24 r1c2-t24">
<p>4</p>
</td>
<td class="cellalignment1604" headers="r4c1-t24 r1c3-t24">
<p>4</p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r5c1-t24" headers="r1c1-t24">
<p>peo</p>
</td>
<td class="cellalignment1604" headers="r5c1-t24 r1c2-t24">
<p>8</p>
</td>
<td class="cellalignment1604" headers="r5c1-t24 r1c3-t24">
<p>2</p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r6c1-t24" headers="r1c1-t24">
<p>fc</p>
</td>
<td class="cellalignment1604" headers="r6c1-t24 r1c2-t24">
<p>10</p>
</td>
<td class="cellalignment1604" headers="r6c1-t24 r1c3-t24">
<p>1</p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r7c1-t24" headers="r1c1-t24">
<p>rc</p>
</td>
<td class="cellalignment1604" headers="r7c1-t24 r1c2-t24">
<p>12</p>
</td>
<td class="cellalignment1604" headers="r7c1-t24 r1c3-t24">
<p>2</p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r8c1-t24" headers="r1c1-t24">
<p>wrn</p>
</td>
<td class="cellalignment1604" headers="r8c1-t24 r1c2-t24">
<p>14</p>
</td>
<td class="cellalignment1604" headers="r8c1-t24 r1c3-t24">
<p>1</p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r9c1-t24" headers="r1c1-t24">
<p>rid</p>
</td>
<td class="cellalignment1604" headers="r9c1-t24 r1c2-t24">
<p>20</p>
</td>
<td class="cellalignment1604" headers="r9c1-t24 r1c3-t24">
<p>16</p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r10c1-t24" headers="r1c1-t24">
<p>ose</p>
</td>
<td class="cellalignment1604" headers="r10c1-t24 r1c2-t24">
<p>36</p>
</td>
<td class="cellalignment1604" headers="r10c1-t24 r1c3-t24">
<p>4</p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r11c1-t24" headers="r1c1-t24">
<p>rcsp</p>
</td>
<td class="cellalignment1604" headers="r11c1-t24 r1c2-t24">
<p>44</p>
</td>
<td class="cellalignment1604" headers="r11c1-t24 r1c3-t24">
<p>4</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CACGEAIH"></a>
<div id="VMSAR532" class="sect2">
<h3 class="sect2"><span class="secnum">6.8.3</span> Linking <a id="sthref421"></a>Oracle Call Interface Programs Written in the C Programming Language</h3>
<p><code dir="ltr">LNOCIC.COM</code><a id="sthref422"></a> is used to link Oracle Call Interface routines written in the C programming language. The syntax of this command is as follows:<a id="sthref423"></a></p>
<pre dir="ltr">
$ LNOCIC <span class="italic">executable</span> <span class="italic">objfilelist</span> <span class="italic">options</span>
</pre>
<p>In this syntax:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">executable</span></code> is the name of the executable image to be created.</p>
<p>A file name extension is not required.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">objfilelist</span></code> is a list of object files and libraries separated by commas.</p>
<p>If this list is longer than one line, then use the continuation character, the hyphen (-).&nbsp; Spaces are not allowed in the object file list.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">options</span></code> is a list of options with no separators needed:</p>
<ul>
<li>
<p><code dir="ltr">D</code>: Links with the HP OpenVMS <code dir="ltr">DEBUG</code> utility</p>
</li>
<li>
<p><code dir="ltr">F</code>: Produces a full map</p>
</li>
<li>
<p><code dir="ltr">M</code>: Creates a link map</p>
</li>
<li>
<p><code dir="ltr">X</code>: Produces a link map with cross-references</p>
</li>
</ul>
<p>For example:</p>
<pre dir="ltr">
$ LNOCIC SAMPLE OBJECT1 D 
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABECHFJ"></a>
<div id="VMSAR533" class="sect2">
<h3 class="sect2"><span class="secnum">6.8.4</span> Linking <a id="sthref424"></a>Oracle Call Interface Programs Written in Other Languages</h3>
<p><code dir="ltr">LNOCI.COM</code><a id="sthref425"></a> is used to link with programs that are not written in the C programming language. Of these, only FORTRAN, and COBOL are supported on HP OpenVMS for OCI programs. The syntax is as follows:<a id="sthref426"></a></p>
<pre dir="ltr">
$ LNOCI <span class="italic">executable</span> <span class="italic">objectfilelist</span> <span class="italic">options</span>
</pre>
<p>For example:</p>
<pre dir="ltr">
$ LNOCI SAMPLE OBJECT1 D 
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The old style Oracle Call Interface (HLI) function calls are not supported in Oracle Database 11<span class="italic">g</span> Enterprise Edition.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i43040"></a>
<div id="VMSAR534" class="sect1">
<h2 class="sect1"><span class="secnum">6.9</span> <a id="sthref427"></a><a id="sthref428"></a>Data Areas and Data Types</h2>
<p>Data types for Oracle on HP OpenVMS are described in the following section. The Cursor Data Area is correct for HP OpenVMS as shown in the programmatic interface guides.</p>
<p class="subhead2"><a id="VMSAR535"></a>Binary Integers</p>
<p><a id="sthref429"></a>For HP OpenVMS, binary integers are 32 bits and short binary integers are 16 bits, as shown in <a href="#g45968">Table 6-7</a>.</p>
<p><a id="sthref430"></a><a href="#g45968">Table 6-7</a> lists binary integers for programming languages.</p>
<div id="VMSAR536" class="tblformal">
<p class="titleintable"><a id="sthref431"></a><a id="g45968"></a>Table 6-7 Usage of Binary and Short Binary Integers</p>
<table class="cellalignment1602" title="Usage of Binary and Short Binary Integers" summary="This table lists the ways that various programming languages use binary integers. The table has 3 columns: Programming Languages, Usage of Binary Integers, and Usage of Short Binary Integers." dir="ltr">
<thead>
<tr class="cellalignment1596">
<th class="cellalignment1603" id="r1c1-t26">Programming Language</th>
<th class="cellalignment1603" id="r1c2-t26">Usage of Binary Integers</th>
<th class="cellalignment1603" id="r1c3-t26">Usage of Short Binary Integers</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r2c1-t26" headers="r1c1-t26">
<p>C</p>
</td>
<td class="cellalignment1604" headers="r2c1-t26 r1c2-t26">
<p>int; short</p>
</td>
<td class="cellalignment1604" headers="r2c1-t26 r1c3-t26">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r3c1-t26" headers="r1c1-t26">
<p>FORTRAN</p>
</td>
<td class="cellalignment1604" headers="r3c1-t26 r1c2-t26">
<p>INTEGER*4</p>
</td>
<td class="cellalignment1604" headers="r3c1-t26 r1c3-t26">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment1596">
<td class="cellalignment1604" id="r4c1-t26" headers="r1c1-t26">
<p>COBOL</p>
</td>
<td class="cellalignment1604" headers="r4c1-t26 r1c2-t26">
<p>PIC S9(9) COMP</p>
</td>
<td class="cellalignment1604" headers="r4c1-t26 r1c3-t26">
<p>PIC S9(4) COMP</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect1" -->
<a id="i43041"></a>
<div id="VMSAR537" class="sect1">
<h2 class="sect1"><span class="secnum">6.10</span> Using Literals as Call Arguments <a id="sthref432"></a><a id="sthref433"></a><a id="sthref434"></a></h2>
<p>In FORTRAN, literals and the CHARACTER data type are passed by descriptor to subroutines. Oracle requires all data to be passed by reference. HP OpenVMS FORTRAN provides the <code dir="ltr">%REF</code> compiler directive for overriding the normal calling mechanism. This compiler directive should be used to pass literal strings and <code dir="ltr">CHAR</code> data to Oracle software routines like OCI.</p>
<p>For example:</p>
<pre dir="ltr">
CALL ORLON (LDA(1), HDA(1), %REF('SCOTT'), 5, %REF('TIGER'), 5)
</pre></div>
<!-- class="sect1" -->
<a id="i43042"></a>
<div id="VMSAR538" class="sect1">
<h2 class="sect1"><span class="secnum">6.11</span> Optional or Missing Parameters<a id="sthref435"></a><a id="sthref436"></a></h2>
<p>On HP OpenVMS, the C programming language does not permit missing optional parameters. All call parameters must be specified. FORTRAN and COBOL, however, allow for missing trailing parameters. The required defaults are automatically provided. FORTRAN also allows missing embedded parameters. The required defaults are automatically provided.</p>
<p>If you omit a parameter by using the -1 convention, then the argument can be either the integer value -1 or a reference to the integer value -1, as long as the argument is of the integer or short binary integer data type. If the argument is the address of any data type, then -1 must be passed by value.</p>
<p>The following two examples show how to override the normal calling mechanism. In FORTRAN, you could use the following:<a id="sthref437"></a></p>
<pre dir="ltr">
CALL ORLON(LDA(1), HDA(1), %REF('SCOTT/TIGER'), -1, X, %VAL(-1)) 
</pre>
<p>In COBOL, you could use this:<a id="sthref438"></a></p>
<pre dir="ltr">
01 DEFLT PIC S9(9) COMP VALUE -1. 
01 LDA PIC X(64). 
01 HDA PIC X(256). 
01 UID PIC X(11) VALUE 'SCOTT/TIGER' 
01 UIDL PIC S9(9) VALUE 11. 
CALL ORLON USING LDA, HDA, UID, UIDL, 
BY VALUE DEFLT. 
</pre></div>
<!-- class="sect1" -->
<a id="CCHGHHII"></a>
<div id="VMSAR539" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.12</span> Using Event Flags</h2>
<p>E<a id="sthref439"></a>vent flags signal the completion of synchronous and asynchronous events in HP OpenVMS, such as disk I/O, terminal I/O, timers, the return of system and user information, lock acquisition, and user interrupts.</p>
<p>Oracle Database 11<span class="italic">g</span> prevents asynchronous events from interfering with synchronous events by overwriting their event flags. This may increase the reliability of Oracle Database 11<span class="italic">g</span> software on modern hardware, but it may introduce some problems for application programmers.</p>
<p>In Oracle Database 11<span class="italic">g</span>, references to event flags 1 through 18 are included in the software. All of these event flags except flags 1 and 5 are tied to specific asynchronous events within Oracle Database 11<span class="italic">g</span>. Event flags 1 and 5 are used by all synchronous events within Oracle Database 11<span class="italic">g</span> and can also be used by application programmers. <code dir="ltr">SYS$GETEF()</code> is not used for these event flags.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Record Management Services (RMS) uses event flags 27 through 31.</div>
</div>
<!-- class="sect1" -->
<a id="i26133"></a>
<div id="VMSAR540" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.13</span> Custom Link Files<a id="sthref440"></a><a id="sthref441"></a></h2>
<p>Oracle recommends that you use the provided link scripts to create user programs as described in the product-specific sections of this chapter. If you modify the provided link file or if you choose to use a custom-written link file, then the following restrictions apply:</p>
<ul>
<li>
<p>Do not modify the order of the Oracle libraries. Oracle libraries are included on the link line more than once so that all the symbols are resolved during linking.</p>
<p>The order of the Oracle libraries is essential for the following reasons:</p>
<ul>
<li>
<p>Oracle libraries are mutually referential.</p>
<p>For example, functions in library A call functions in library B, and functions in library B call functions in library A.</p>
</li>
</ul>
</li>
<li>
<p>If you want to add a library to the link line, then add it to the beginning or to the end of the link line. Do not place user libraries between Oracle libraries.</p>
</li>
<li>
<p>Oracle library names and the contents of Oracle libraries are subject to change between releases. Always use the link scripts file that ships with the current release as a guide to determine the required libraries.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i26193"></a>
<div id="VMSAR541" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">6.14</span> Multithreaded Applications<a id="sthref442"></a></h2>
<p>The Oracle libraries provided with this release are thread-safe, which enables support for multithreaded applications.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1595">
<tr>
<td class="cellalignment1604">
<table class="cellalignment1600">
<tr>
<td class="cellalignment1599"><a href="ch5.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1599"><a href="ch7.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2008, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1606">
<table class="cellalignment1598">
<tr>
<td class="cellalignment1599"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1599"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1599"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1599"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1599"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1599"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
