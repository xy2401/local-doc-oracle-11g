<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Classifying Documents in Oracle Text</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 748" />
<meta name="dcterms.created" content="2014-02-11T12:39:53Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Text Application Developer's Guide" />
<meta name="dcterms.identifier" content="E24435-03" />
<meta name="dcterms.isVersionOf" content="CCAPP" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2004, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="txtgloss.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="view.htm" title="Previous" type="text/html" />
<link rel="Next" href="aoptim.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e24435.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/21</span> <!-- End Header -->
<div id="CCAPP0600" class="chapter"><a id="g1011013"></a><a id="i1007041"></a>
<h1 class="chapter"><span class="secnum">6</span> Classifying Documents in Oracle Text<a id="sthref554"></a></h1>
<p>This chapter includes the following topics:</p>
<ul>
<li>
<p><a href="#i1007089">Overview of Document Classification</a></p>
</li>
<li>
<p><a href="#i1007094">Classification Solutions</a></p>
</li>
<li>
<p><a href="#i1007151">Rule-Based Classification</a></p>
</li>
<li>
<p><a href="#i1007173">Supervised Classification</a></p>
</li>
<li>
<p><a href="#i1007174">Unsupervised Classification (Clustering)</a></p>
</li>
</ul>
<a id="i1007089"></a>
<div id="CCAPP9214" class="sect1">
<h2 class="sect1"><span class="secnum">6.1</span> Overview of Document Classification</h2>
<p>A major problem facing businesses and institutions today is that of information overload. Sorting out useful documents from documents that are not of interest challenges the ingenuity and resources of both individuals and organizations.</p>
<p>One way to sift through numerous documents is to use keyword search engines. However, keyword searches have limitations. One major drawback is that keyword searches do not discriminate by context. In many languages, a word or phrase may have multiple meanings, so a search may result in many matches that are not on the desired topic. For example, a query on the phrase <span class="italic">river bank</span> might return documents about the Hudson River Bank &amp; Trust Company, because the word <span class="italic">bank</span> has two meanings.</p>
<p>An alternative strategy is to have human beings sort through documents and classify them by content, but this is not feasible for very large volumes of documents.</p>
<p>Oracle Text offers various approaches to document classification. Under <span class="italic">rule-based classification</span>, you write the classification rules yourself. With <span class="italic">supervised classification</span>, Oracle Text creates classification rules based on a set of sample documents that you pre-classify. Finally, with <span class="italic">unsupervised classification</span> (also known as <span class="italic">clustering</span>), Oracle Text performs all the steps, from writing the classification rules to classifying the documents, for you.</p>
<div id="CCAPP9215" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref555"></a>
<h3 class="sect2"><span class="secnum">6.1.1</span> Classification Applications</h3>
<p>Oracle Text enables you to build document classification applications. A document classification application performs some action based on document content. Actions include assigning category IDs to a document for future lookup or sending a document to a user. The result is a set or stream of categorized documents. <a href="#i1008553">Figure 6-1</a> illustrates how the classification process works.</p>
<p>Oracle Text enables you to create document classification applications in different ways. This chapter defines a typical classification scenario and shows how you can use Oracle Text to build a solution.</p>
<div id="CCAPP9512" class="figure">
<p class="titleinfigure"><a id="i1008553"></a>Figure 6-1 Overview of a Document Classification Application</p>
<img width="579" height="333" src="img/ccapp018.gif" alt="Description of Figure 6-1 follows" /><br />
<a id="sthref556" href="img_text/ccapp018.htm">Description of "Figure 6-1 Overview of a Document Classification Application"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007094"></a>
<div id="CCAPP9216" class="sect1">
<h2 class="sect1"><span class="secnum">6.2</span> Classification Solutions</h2>
<p>Oracle Text enables you to classify documents in the following ways:</p>
<ul>
<li>
<p><a href="#i1007151">Rule-Based Classification</a>. In rule-based classification, you group your documents together, decide on categories, and formulate the rules that define those categories; these rules are actually query phrases. You then index the rules and use the <code>MATCHES</code> operator to classify documents.</p>
<p><span class="bold">Advantage:</span> Rule-based classification is very accurate for small document sets. Results are always based on what you define, because you write the rules.</p>
<p><span class="bold">Disadvantages:</span> Defining rules can be tedious for large document sets with many categories. As your document set grows, you may need to write correspondingly more rules.</p>
</li>
<li>
<p><a href="#i1007173">Supervised Classification</a>. This method is similar to rule-based classification, but the rule writing step is automated with <code>CTX_CLS.TRAIN</code>. <code>CTX_CLS.TRAIN</code> formulates a set of classification rules from a sample set of pre-classified documents that you provide. As with rule-based classification, you use <code>MATCHES</code> operator to classify documents.</p>
<p>Oracle Text offers two versions of supervised classification, one using the <code>RULE_CLASSIFIER</code> preference and one using the <code>SVM_CLASSIFIER</code> preference. These are discussed in <a href="#i1007173">"Supervised Classification"</a>.</p>
<p><span class="bold">Advantage</span>: Rules are written for you automatically. This is useful for large document sets.</p>
<p><span class="bold">Disadvantages:</span></p>
<ul>
<li>
<p>You must assign documents to categories before generating the rules.</p>
</li>
<li>
<p>Rules may not be as specific or accurate as those you write yourself.</p>
</li>
</ul>
</li>
<li>
<p><a href="#i1007174">Unsupervised Classification (Clustering)</a>. All steps from grouping your documents to writing the category rules are automated with <code>CTX_CLS.CLUSTERING</code>. Oracle Text statistically analyzes your document set and correlates them with clusters according to content.</p>
<p><span class="bold">Advantages:</span></p>
<ul>
<li>
<p>You do not need to provide either the classification rules or the sample documents as a training set.</p>
</li>
<li>
<p>Helps to discover patterns and content similarities in your document set that you might overlook.</p>
<p>In fact, you can use unsupervised classification when you do not have a clear idea of rules or classifications. One possible scenario is to use unsupervised classification to provide an initial set of categories, and to subsequently build on these through supervised classification.</p>
</li>
</ul>
<p><span class="bold">Disadvantages:</span></p>
<ul>
<li>
<p>Clustering might result in unexpected groupings, because the clustering operation is not user-defined, but based on an internal algorithm.</p>
</li>
<li>
<p>You do not see the rules that create the clusters.</p>
</li>
<li>
<p>The clustering operation is CPU-intensive and can take at least the same time as indexing.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1007151"></a>
<div id="CCAPP9217" class="sect1">
<h2 class="sect1"><span class="secnum">6.3</span> Rule-Based Classification<a id="sthref557"></a><a id="sthref558"></a></h2>
<p>Rule-based classification (sometimes called "simple classification") is the basic way of creating an Oracle Text classification application.</p>
<p>The basic steps for rule-based classification are as follows. Specific steps are explored in greater detail in the example.</p>
<ol>
<li>
<p>Create a table for the documents to be classified, and populate it.</p>
</li>
<li>
<p>Create a rule table (also known as a category table). The rule table consists of categories that you name, such as "medicine" or "finance," and the rules that sort documents into those categories.</p>
<p>These rules are actually queries. For example, you might define the "medicine" category as consisting of documents that include the words "hospital," "doctor," or "disease," so you would set up a rule of the form "hospital OR doctor OR disease." See <a href="#BEJHFGAC">"CTXRULE Parameters and Limitations"</a> for information on which operators are allowed for queries.</p>
</li>
<li>
<p>Create a <code>CTXRULE</code> index on the rule table.</p>
</li>
<li>
<p>Classify the documents.</p>
</li>
</ol>
<div id="CCAPP9218" class="sect2"><a id="sthref559"></a>
<h3 class="sect2"><span class="secnum">6.3.1</span> Rule-based Classification Example</h3>
<p>In this example, we gather news articles on different subjects and then classify them.</p>
<p>Once our rules are created, we can index them and then use the <code>MATCHES</code> statement to classify documents. The steps are as follows:</p>
<dl>
<dd><a id="sthref560"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Create schema</dt>
<dd>
<p>We create the tables to store the data. The <code>news_table</code> stores the documents to be classified. The <code>news_categories</code> table stores the categories and rules that define our categories. The <code>news_id_cat</code> table stores the document ids and their associated categories after classification.</p>
<pre>
create table news_table (
       tk number primary key not null,
       title varchar2(1000),
       text clob);

create table news_categories (
        queryid  number primary key not null,
        category varchar2(100),
        query    varchar2(2000));

create table news_id_cat (
        tk number, 
        category_id number);
</pre></dd>
<dd><a id="sthref561"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Load Documents with SQLLDR</dt>
<dd>
<p>In this step, we load the HTML news articles into the <code>news_table</code> using the <code>SQLLDR</code> program. The filenames and titles are read from loader.dat.</p>
<pre>
LOAD DATA
     INFILE 'loader.dat'
     INTO TABLE news_table
     REPLACE
     FIELDS TERMINATED BY ';'
     (tk         INTEGER EXTERNAL,
      title      CHAR,
      text_file  FILLER CHAR,
      text       LOBFILE(text_file) TERMINATED BY EOF)
</pre></dd>
<dd><a id="sthref562"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Create Categories</dt>
<dd>
<p>In this step, we define our categories and write the rules for each of our categories.</p>
<div class="inftblsimple">
<table class="cellalignment118" title="Sample Subjects for Classification Categories" summary="table shows categories" dir="ltr">
<thead>
<tr class="cellalignment106">
<th class="cellalignment116">Defined Categories:</th>
<th class="cellalignment116"><br /></th>
<th class="cellalignment116"><br /></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment106">
<td class="cellalignment112">United States</td>
<td class="cellalignment112">Europe</td>
<td class="cellalignment112">Middle East</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112">Asia</td>
<td class="cellalignment112">Africa</td>
<td class="cellalignment112">Conflicts</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112">Finance</td>
<td class="cellalignment112">Technology</td>
<td class="cellalignment112">Consumer Electronics</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112">Latin America</td>
<td class="cellalignment112">World Politics</td>
<td class="cellalignment112">U.S. Politics</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112">Astronomy</td>
<td class="cellalignment112">Paleontology</td>
<td class="cellalignment112">Health</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112">Natural Disasters</td>
<td class="cellalignment112">Law</td>
<td class="cellalignment112">Music News</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblsimple" -->
<p>A rule is a query that selects documents for the category. For example, the category 'Asia' has a rule of 'China or Pakistan or India or Japan'. We insert our rules in the <code>news_categories</code> table as follows:</p>
<pre>
insert into news_categories values
  (1,'United States','Washington or George Bush or Colin Powell');

insert into news_categories values
  (2,'Europe','England or Britain or Germany');

insert into news_categories values
  (3,'Middle East','Israel or Iran or Palestine');

insert into news_categories values(4,'Asia','China or Pakistan or India or Japan');

insert into news_categories values(5,'Africa','Egypt or Kenya or Nigeria');

insert into news_categories values
  (6,'Conflicts','war or soliders or military or troops');

insert into news_categories values(7,'Finance','profit or loss or wall street');
insert into news_categories values
  (8,'Technology','software or computer or Oracle 
   or Intel or IBM or Microsoft');

insert into news_categories values
  (9,'Consumer electronics','HDTV or electronics');

insert into news_categories values
  (10,'Latin America','Venezuela or Colombia 
   or Argentina or Brazil or Chile');

insert into news_categories values
  (11,'World Politics','Hugo Chavez or George Bush 
   or Tony Blair or Saddam Hussein or United Nations');

insert into news_categories values
  (12,'US Politics','George Bush or Democrats or Republicans 
   or civil rights or Senate or White House');

insert into news_categories values
  (13,'Astronomy','Jupiter or Earth or star or planet or Orion 
   or Venus or Mercury or Mars or Milky Way 
   or Telescope or astronomer 
   or NASA or astronaut');

insert into news_categories values
  (14,'Paleontology','fossils or scientist 
   or paleontologist or dinosaur or Nature');

insert into news_categories values
  (15,'Health','stem cells or embryo or health or medical
   or medicine or World Health Organization or AIDS or HIV 
   or virus or centers for disease control or vaccination');

insert into news_categories values
  (16,'Natural Disasters','earthquake or hurricane or tornado');

insert into news_categories values
  (17,'Law','abortion or Supreme Court or illegal 
   or legal or legislation');

insert into news_categories values
  (18,'Music News','piracy or anti-piracy 
   or Recording Industry Association of America 
   or copyright or copy-protection or CDs 
   or music or artist or song');

commit;
</pre></dd>
<dd><a id="sthref563"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Create the CTXRULE index</dt>
<dd>
<p>In this step, we create a <code>CTXRULE</code> index on our news_categories query column.</p>
<pre>
create index news_cat_idx on news_categories(query)
indextype is ctxsys.ctxrule;
</pre></dd>
<dd><a id="sthref564"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Classify Documents<a id="sthref565"></a></dt>
<dd>
<p>To classify the documents, we use the <code>CLASSIFIER.THIS</code> PL/SQL procedure (a simple procedure designed for this example), which scrolls through the <code>news_table</code>, matches each document to a category, and writes the categorized results into the <code>news_id_cat</code> table.</p>
<pre>
create or replace package classifier asprocedure this;end;/

show errors

create or replace package body classifier as

 procedure this
 is
  v_document    clob;
  v_item        number;
  v_doc         number;
 begin

  for doc in (select tk, text from news_table)
     loop
        v_document := doc.text;
        v_item := 0;
        v_doc  := doc.tk;
        for c in (select queryid, category from news_categories
             where matches(query, v_document) &gt; 0 )
          loop
            v_item := v_item + 1;
            insert into news_id_cat values (doc.tk,c.queryid);
          end loop;
   end loop;

 end this;

end;
/
show errors
exec classifier.this
</pre></dd>
</dl>
</div>
<!-- class="sect2" -->
<a id="BEJHFGAC"></a>
<div id="CCAPP9219" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">6.3.2</span> <a id="sthref566"></a><a id="sthref567"></a><a id="sthref568"></a><a id="sthref569"></a><a id="sthref570"></a>CTXRULE Parameters and Limitations</h3>
<p>The following considerations apply to indexing a <code>CTXRULE</code> index.</p>
<ul>
<li>
<p><a id="sthref571"></a><a id="sthref572"></a>If the <code>SVM_CLASSIFIER</code> classifier is used, then you may use the <code>BASIC_LEXER</code>, <code>CHINESE_LEXER</code>, <code>JAPANESE_LEXER</code>, or <code>KOREAN_MORPH_LEXER</code> lexers. If <code>SVM_CLASSIFIER</code> is not used, only the <code>BASIC_LEXER</code> lexer type may be used for indexing your query set. (See <a class="olink CCREF0200" href="../../text.112/e24436/cdatadic.htm#CCREF0200"><span class="italic">Oracle Text Reference</span></a> for more on lexer and classifier preferences.)</p>
</li>
<li>
<p>Filter, memory, datastore, and [no]populate parameters are not applicable to index type <code>CTXRULE</code>.</p>
</li>
<li>
<p>The <code>CREATE</code> <code>INDEX</code> storage clause is supported for creating the index on the queries.</p>
</li>
<li>
<p>Wordlists are supported for stemming operations on your query set.</p>
</li>
<li>
<p>Queries for <code>CTXRULE</code> are similar to those of <code>CONTAINS</code> queries. Basic phrasing ("dog house") is supported, as are the following <code>CONTAINS</code> operators: <code>ABOUT</code>, <code>AND</code>, <code>NEAR</code>, <code>NOT</code>, <code>OR</code>, <code>STEM</code>, <code>WITHIN</code>, and <code>THESAURUS</code>. Section groups are supported for using the <code>MATCHES</code> operator to classify documents. Field sections are also supported; however, <code>CTXRULE</code> does not directly support field queries, so you must use a query rewrite on a <code>CONTEXT</code> query.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="ind.htm#i1007378">"Creating a CTXRULE Index"</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007173"></a>
<div id="CCAPP9220" class="sect1">
<h2 class="sect1"><span class="secnum">6.4</span> Supervised Classification<a id="sthref573"></a><a id="sthref574"></a><a id="sthref575"></a><a id="sthref576"></a></h2>
<p>With supervised classification, you employ the <a class="olink CCREF1500" href="../../text.112/e24436/cclspkg.htm#CCREF1500"><code>CTX_CLS.TRAIN</code></a> procedure to automate the rule writing step. <code>CTX_CLS.TRAIN</code> uses a training set of sample documents to deduce classification rules. This is the major advantage over rule-based classification, in which you must write the classification rules.</p>
<p>However, before you can run the <code>CTX_CLS.TRAIN</code> procedure, you must manually create categories and assign each document in the sample training set to a category. See <a class="olink CCREF1500" href="../../text.112/e24436/cclspkg.htm#CCREF1500"><span class="italic">Oracle Text Reference</span></a> for more information on <code>CTX_CLS.TRAIN</code>.</p>
<p>When the rules are generated, you index them to create a <code>CTXRULE</code> index. You can then use the <code>MATCHES</code> operator to classify an incoming stream of new documents.</p>
<p>You may choose between two different classification algorithms for supervised classification:</p>
<ul>
<li>
<p><span class="bold">Decision Tree classification.</span> The advantage of Decision Tree classification is that the generated rules are easily observed (and modified).</p>
</li>
<li>
<p><span class="bold">SVM-based classification.</span> This method uses the Support Vector Machine (SVM) algorithm for creating rules. The advantage of SVM-based classification is that it is often more accurate than Decision Tree classification. The disadvantage is that it generates binary rules, so the rules themselves are opaque.</p>
</li>
</ul>
<a id="BABJJIAJ"></a>
<div id="CCAPP9221" class="sect2">
<h3 class="sect2"><span class="secnum">6.4.1</span> <a id="sthref577"></a><a id="sthref578"></a><a id="sthref579"></a>Decision Tree Supervised Classification</h3>
<p>To use Decision Tree classification, you set the preference argument to <code>CTX_CLS.TRAIN</code> to <code>RULE_CLASSIFIER</code>.</p>
<p>This form of classification uses a <span class="italic">decision tree</span> algorithm for creating rules. Generally speaking, a decision tree is a method of deciding between two (or more, but usually two) choices. In document classification, the choices are "the document matches the training set" or "the document does not match the training set."</p>
<p>A decision tree has a set of attributes that can be tested. In this case, these include:</p>
<ul>
<li>
<p>words from the document</p>
</li>
<li>
<p>stems of words from the document (as an example, the stem of <span class="italic">running</span> is <span class="italic">run</span>)</p>
</li>
<li>
<p>themes from the document (if themes are supported for the language in use)</p>
</li>
</ul>
<p>The learning algorithm in Oracle Text builds one or more decision trees for each category provided in the training set. These decision trees are then coded into queries suitable for use by a <code>CTXRULE</code> index. As a trivial example, if one category is provided with a training document that consists of "Japanese beetle" and another category with a document reading "Japanese currency," the algorithm may create decision trees based on the words "Japanese," "beetle," and "currency," and classify documents accordingly.</p>
<p>The decision trees include the concept of <span class="italic">confidence</span>. Each rule that is generated is allocated a percentage value that represents the accuracy of the rule, given the current training set. In trivial examples, this accuracy is almost always 100%, but this merely represents the limitations of the training set. Similarly, the rules generated from a trivial training set may seem to be less than what you might expect, but these are sufficient to distinguish the different categories given the current training set.</p>
<p>The advantage of the Decision Tree method is that it can generate rules that are easily inspected and modified by a human. Using Decision Tree classification makes sense when you want to the computer to generate the bulk of the rules, but you want to fine tune them afterward by editing the rule sets.</p>
<div id="CCAPP9222" class="sect3"><a id="sthref580"></a>
<h4 class="sect3"><span class="secnum">6.4.1.1</span> Decision Tree Supervised Classification Example</h4>
<p>The following SQL example steps through creating your document and classification tables, classifying the documents, and generating the rules. It then goes on to generate rules with <code>CTX_CLS.TRAIN</code>.</p>
<p>Rules are then indexed to create <code>CTXRULE</code> index and new documents are classified with <code>MATCHES</code>.</p>
<p>The general steps for supervised classification can be broken down as follows:</p>
<ul>
<li>
<p><a href="#i1008222">Create the Category Rules</a></p>
</li>
<li>
<p><a href="#i1008238">Index Rules to Categorize New Documents</a></p>
</li>
</ul>
<a id="i1008222"></a>
<div id="CCAPP9223" class="sect4">
<h5 class="sect4"><span class="secnum">6.4.1.1.1</span> Create the Category Rules</h5>
<p>The <code>CTX_CLS.TRAIN</code> procedure requires an input training document set. A training set is a set of documents that have already been assigned a category.</p>
<dl>
<dd><a id="sthref581"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Create and populate a training document table</dt>
<dd>
<p>Create and load a table of training documents. This example uses a simple set; three concern fast food and three concern computers.</p>
<pre>
create table docs (
  doc_id number primary key,
  doc_text   clob);

insert into docs values
(1, 'MacTavishes is a fast-food chain specializing in burgers, fries and -
shakes. Burgers are clearly their most important line.');
insert into docs values
(2, 'Burger Prince are an up-market chain of burger shops, who sell burgers -
and fries in competition with the likes of MacTavishes.');
insert into docs values
(3, 'Shakes 2 Go are a new venture in the low-cost restaurant arena, 
specializing in semi-liquid frozen fruit-flavored vegetable oil products.');
insert into docs values
(4, 'TCP/IP network engineers generally need to know about routers, 
firewalls, hosts, patch cables networking etc');
insert into docs values
(5, 'Firewalls are used to protect a network from attack by remote hosts,
 generally across TCP/IP');
</pre></dd>
<dd><a id="sthref582"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Create category tables, category descriptions and ids</dt>
<dd>
<pre>
----------------------------------------------------------------------------
</pre>
<pre>
-- Create category tables
-- Note that "category_descriptions" isn't really needed for this demo -
-- it just provides a descriptive name for the category numbers in
-- doc_categories
----------------------------------------------------------------------------

create table category_descriptions (
  cd_category    number,
  cd_description varchar2(80));

create table doc_categories (
  dc_category    number,
  dc_doc_id      number,
  primary key (dc_category, dc_doc_id)) 
  organization index;

-- descriptons for categories

insert into category_descriptions values (1, 'fast food');
insert into category_descriptions values (2, 'computer networking');
</pre></dd>
<dd><a id="sthref583"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Assign each document to a category</dt>
<dd>
<p>In this case, the fast food documents all go into category 1, and the computer documents into category 2.</p>
<pre>
insert into doc_categories values (1, 1);
insert into doc_categories values (1, 2);
insert into doc_categories values (1, 3);
insert into doc_categories values (2, 4);
insert into doc_categories values (2, 5);
</pre></dd>
<dd><a id="sthref584"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Create a CONTEXT index to be used by CTX_CLS.TRAIN</dt>
<dd>
<p>Create an Oracle Text preference for the index. This enables us to experiment with the effects of turning themes on and off:</p>
<pre>
exec ctx_ddl.create_preference('my_lex', 'basic_lexer');
exec ctx_ddl.set_attribute    ('my_lex', 'index_themes', 'no');
exec ctx_ddl.set_attribute    ('my_lex', 'index_text',   'yes');

create index docsindex on docs(doc_text) indextype is ctxsys.context
parameters ('lexer my_lex');
</pre></dd>
<dd><a id="sthref585"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create the rules table</dt>
<dd>
<p>Create the table that will be populated by the generated rules.</p>
<pre>
create table rules(
  rule_cat_id     number,
  rule_text       varchar2(4000),
  rule_confidence number
);
</pre></dd>
<dd><a id="sthref586"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Call CTX_CLS.TRAIN procedure to generate category rules</dt>
<dd>
<p>Now call the <a class="olink CCREF1500" href="../../text.112/e24436/cclspkg.htm#CCREF1500"><code>CTX_CLS.TRAIN</code></a> procedure to generate some rules. Note all the arguments are the names of tables, columns or indexes previously created in this example. The <code>rules</code> table now contains the rules, which you can view.</p>
<pre>
begin
  ctx_cls.train(
    index_name =&gt; 'docsindex',
    docid      =&gt; 'doc_id',
    cattab     =&gt; 'doc_categories',
    catdocid   =&gt; 'dc_doc_id',
    catid      =&gt; 'dc_category',
    restab     =&gt; 'rules',
    rescatid   =&gt; 'rule_cat_id',
    resquery   =&gt; 'rule_text',
    resconfid  =&gt; 'rule_confidence'
  );
end;
/
</pre></dd>
<dd><a id="sthref587"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Fetch the generated rules, viewed by category</dt>
<dd>
<p>Fetch the generated rules. For convenience's sake, the <code>rules</code> table is joined with <code>category_descriptions</code> so we can see to which category each rule applies:</p>
<pre>
select cd_description, rule_confidence, rule_text from rules, 
category_descriptions where cd_category = rule_cat_id;
</pre></dd>
</dl>
</div>
<!-- class="sect4" -->
<a id="i1008238"></a>
<div id="CCAPP9224" class="sect4">
<h5 class="sect4"><span class="secnum">6.4.1.1.2</span> Index Rules to Categorize New Documents</h5>
<p>Once the rules are generated, you can test them by first indexing them and then using <code>MATCHES</code> to classify new documents. The process is as follows:</p>
<dl>
<dd><a id="sthref588"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Index the rules to create the CTXRULE index</dt>
<dd>
<p>Use <code>CREATE INDEX</code> to create the <code>CTXRULE</code> index on the previously generated rules:</p>
<pre>
create index rules_idx on rules (rule_text) indextype is ctxsys.ctxrule;
</pre></dd>
<dd><a id="sthref589"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Test an incoming document using MATCHES</dt>
<dd>
<pre>
set serveroutput on;
</pre>
<pre>
declare
   incoming_doc clob;
begin
   incoming_doc 
       := 'I have spent my entire life managing restaurants selling burgers';
   for c in 
     ( select distinct cd_description from rules, category_descriptions
       where cd_category = rule_cat_id
       and matches (rule_text, incoming_doc) &gt; 0) loop
     dbms_output.put_line('CATEGORY: '||c.cd_description);
   end loop;
end;
/
</pre></dd>
</dl>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="CCAPP9225" class="sect2"><a id="sthref590"></a>
<h3 class="sect2"><span class="secnum">6.4.2</span> SVM-Based Supervised Classification<a id="sthref591"></a><a id="sthref592"></a></h3>
<p>The second method we can use for training purposes is known as Support Vector Machine (SVM) classification. SVM is a type of machine learning algorithm derived from statistical learning theory. A property of SVM classification is the ability to learn from a very small sample set.</p>
<p>Using the SVM classifier is much the same as using the Decision Tree classifier, with the following differences.</p>
<ul>
<li>
<p>The preference used in the call to <code>CTX_CLS.TRAIN</code> should be of type <code>SVM_CLASSIFIER</code> instead of <code>RULE_CLASSIFIER</code>. (If you do not want to modify any attributes, you can use the predefined preference <code>CTXSYS.SVM_CLASSIFIER</code>.)</p>
</li>
<li>
<p>The <code>CONTEXT</code> index on the table does not have to be populated; that is, you can use the <code>NOPOPULATE</code> keyword. The classifier uses it only to find the source of the text, by means of datastore and filter preferences, and to determine how to process the text, through lexer and sectioner preferences.</p>
</li>
<li>
<p>The table for the generated rules must have (as a minimum) these columns:</p>
<pre>
cat_id      number,
type        number,
rule        blob );
</pre></li>
</ul>
<p>As you can see, the generated rule is written into a <code>BLOB</code> column. It is therefore opaque to the user, and unlike Decision Tree classification rules, it cannot be edited or modified. The trade-off here is that you often get considerably better accuracy with SVM than with Decision Tree classification.</p>
<p><a id="sthref593"></a>With SVM classification, allocated memory has to be large enough to load the SVM model; otherwise, the application built on SVM will incur an out-of-memory error. Here is how to calculate the memory allocation:</p>
<pre>
<span class="italic">Minimum memory request (in bytes)</span> = <span class="italic">number of unique categories</span> x <span class="italic">number of features</span> 
                                    example: (<span class="italic">value of MAX_FEATURES attributes</span>) x 8
</pre>
<p>If necessary to meet the minimum memory requirements, either:</p>
<ul>
<li>
<p>increase SGA memory (if in shared server mode)</p>
</li>
<li>
<p>increase PGA memory (if in dedicated server mode)</p>
</li>
</ul>
<div id="CCAPP9226" class="sect3"><a id="sthref594"></a>
<h4 class="sect3"><span class="secnum">6.4.2.1</span> SVM-Based Supervised Classification Example</h4>
<p>The following example uses SVM-based classification. It uses essentially the same steps as the Decision Tree example. Some differences between the examples:</p>
<ul>
<li>
<p>In this example, we set the <code>SVM_CLASSIFIER</code> preference with <code>CTX_DDL.CREATE_PREFERENCE</code> rather than setting it in <code>CTX_CLS.TRAIN</code>. (You can do it either way.)</p>
</li>
<li>
<p>In this example, our category table includes category descriptions, unlike the category table in the Decision Tree example. (You can do it either way.)</p>
</li>
<li>
<p><code>CTX_CLS.TRAIN</code> takes fewer arguments than in the Decision Tree example, as rules are opaque to the user.</p>
</li>
</ul>
<dl>
<dd><a id="sthref595"></a></dd>
<dt class="seghead">Step 1&nbsp;&nbsp;&nbsp;Create and populate the training document table:</dt>
<dd>
<pre>
create table doc (id number primary key, text varchar2(2000));
insert into doc values(1,'1 2 3 4 5 6');
insert into doc values(2,'3 4 7 8 9 0');
insert into doc values(3,'a b c d e f');
insert into doc values(4,'g h i j k l m n o p q r');
insert into doc values(5,'g h i j k s t u v w x y z');
</pre></dd>
<dd><a id="sthref596"></a></dd>
<dt class="seghead">Step 2&nbsp;&nbsp;&nbsp;Create and populate the category table:</dt>
<dd>
<pre>
create table testcategory (
        doc_id number, 
        cat_id number, 
        cat_name varchar2(100)
         );
insert into testcategory values (1,1,'number');
insert into testcategory values (2,1,'number');
insert into testcategory values (3,2,'letter');
insert into testcategory values (4,2,'letter');
insert into testcategory values (5,2,'letter');
</pre></dd>
<dd><a id="sthref597"></a></dd>
<dt class="seghead">Step 3&nbsp;&nbsp;&nbsp;Create the CONTEXT index on the document table:</dt>
<dd>
<p>In this case, we create the index without populating.</p>
<pre>
create index docx on doc(text) indextype is ctxsys.context 
       parameters('nopopulate'); 
</pre></dd>
<dd><a id="sthref598"></a></dd>
<dt class="seghead">Step 4&nbsp;&nbsp;&nbsp;Set SVM_CLASSIFIER:</dt>
<dd>
<p>This can also be done in <code>CTX.CLS_TRAIN</code>.</p>
<pre>
exec ctx_ddl.create_preference('my_classifier','SVM_CLASSIFIER'); 
exec ctx_ddl.set_attribute('my_classifier','MAX_FEATURES','100');
</pre></dd>
<dd><a id="sthref599"></a></dd>
<dt class="seghead">Step 5&nbsp;&nbsp;&nbsp;Create the result (rule) table:</dt>
<dd>
<pre>
create table restab (
  cat_id number,
  type number(3) not null,
  rule blob
 );
</pre></dd>
<dd><a id="sthref600"></a></dd>
<dt class="seghead">Step 6&nbsp;&nbsp;&nbsp;Perform the training:</dt>
<dd>
<pre>
exec ctx_cls.train('docx', 'id','testcategory','doc_id','cat_id',
     'restab','my_classifier');
</pre></dd>
<dd><a id="sthref601"></a></dd>
<dt class="seghead">Step 7&nbsp;&nbsp;&nbsp;Create a CTXRULE index on the rules table:</dt>
<dd>
<pre>
exec ctx_ddl.create_preference('my_filter','NULL_FILTER');
create index restabx on restab (rule) 
       indextype is ctxsys.ctxrule 
       parameters ('filter my_filter classifier my_classifier');
</pre></dd>
</dl>
<p>Now we can classify two unknown documents:</p>
<pre>
select cat_id, match_score(1) from restab 
       where matches(rule, '4 5 6',1)&gt;50;

select cat_id, match_score(1) from restab 
       where matches(rule, 'f h j',1)&gt;50;

drop table doc;
drop table testcategory;
drop table restab;
exec ctx_ddl.drop_preference('my_classifier');
exec ctx_ddl.drop_preference('my_filter');
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007174"></a>
<div id="CCAPP9227" class="sect1">
<h2 class="sect1"><span class="secnum">6.5</span> Unsupervised Classification (Clustering)<a id="sthref602"></a></h2>
<p>With <a href="#i1007151">Rule-Based Classification</a>, you write the rules for classifying documents yourself. With <a href="#i1007173">Supervised Classification</a>, Oracle Text writes the rules for you, but you must provide a set of training documents that you pre-classify. With <span class="italic">unsupervised classification</span> (also known as <span class="italic">clustering</span>), you do not even have to provide a training set of documents.</p>
<p>Clustering is performed with the <code>CTX_CLS.CLUSTERING</code> procedure. <code>CTX_CLS.CLUSTERING</code> creates a hierarchy of document groups, known as <span class="italic">clusters</span>, and, for each document, returns relevancy scores for all leaf clusters.</p>
<p>For example, suppose that you have a large collection of documents concerning animals. <code>CTX_CLS.CLUSTERING</code> might create one leaf cluster about dogs, another about cats, another about fish, and a fourth cluster about bears. (The first three might be grouped under a node cluster concerning pets.) Suppose further that you have a document about one breed of dogs, such as chihuahuas. <code>CTX_CLS.CLUSTERING</code> would assign the dog cluster to the document with a very high relevancy score, while the cat cluster would be assigned with a lower score and the fish and bear clusters with still lower scores. When scores for all clusters have been assigned to all documents, an application can then take action based on the scores.</p>
<p>As noted in <a href="#BABJJIAJ">"Decision Tree Supervised Classification"</a>, attributes used for determining clusters may consist of simple words (or tokens), word stems, and themes (where supported).</p>
<p><code>CTX_CLS.CLUSTERING</code> assigns output to two tables (which may be in-memory tables):</p>
<ul>
<li>
<p>A document assignment table showing how similar the document is to each leaf cluster. This information takes the form of document identification, cluster identification, and a similarity score between the document and a cluster.</p>
</li>
<li>
<p>A cluster description table containing information about what a generated cluster is about. This table contains cluster identification, cluster description text, a suggested cluster label, and a quality score for the cluster.</p>
</li>
</ul>
<p><code>CTX_CLS.CLUSTERING</code> employs a <code>K-MEAN</code> algorithm to perform clustering. Use the <code>KMEAN_CLUSTERING</code> preference to determine how <code>CTX_CLS.CLUSTERING</code> works.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0200" href="../../text.112/e24436/cdatadic.htm#CCREF0200"><span class="italic">Oracle Text Reference</span></a> for more on cluster types and hierarchical clustering</div>
<div id="CCAPP9228" class="sect2"><a id="sthref603"></a>
<h3 class="sect2"><span class="secnum">6.5.1</span> Clustering Example</h3>
<p>The following SQL example creates a small collection of documents in the collection table and creates a <code>CONTEXT</code> index. It then creates a document assignment and cluster description table, which are populated with a call to the <code>CLUSTERING</code> procedure. The output would then be viewed with a select statement:</p>
<pre>
set serverout on

/* collect document into a table */
create table collection (id number primary key, text varchar2(4000));
insert into collection values (1, 'Oracle Text can index any document or textual content.');
insert into collection values (2, 'Ultra Search uses a crawler to access documents.');
insert into collection values (3, 'XML is a tag-based markup language.');
insert into collection values (4, 'Oracle Database 11g XML DB treats XML 
as a native datatype in the database.');
insert into collection values (5, 'There are three Text index types to cover 
all text search needs.');
insert into collection values (6, 'Ultra Search also provides API 
for content management solutions.');

create index collectionx on collection(text) 
   indextype is ctxsys.context parameters('nopopulate');

/* prepare result tables, if you omit this step, procedure will create table automatically */
create table restab (       
       docid NUMBER,
       clusterid NUMBER,
       score NUMBER);

create table clusters (
       clusterid NUMBER,
       descript varchar2(4000),
       label varchar2(200),
       sze   number,
       quality_score number,
       parent number);

/* set the preference */
exec ctx_ddl.drop_preference('my_cluster');
exec ctx_ddl.create_preference('my_cluster','KMEAN_CLUSTERING');
exec ctx_ddl.set_attribute('my_cluster','CLUSTER_NUM','3');

/* do the clustering */
exec ctx_output.start_log('my_log');
exec ctx_cls.clustering('collectionx','id','restab','clusters','my_cluster');
exec ctx_output.end_log;
</pre>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a class="olink CCREF1500" href="../../text.112/e24436/cclspkg.htm#CCREF1500"><span class="italic">Oracle Text Reference</span></a> for <code>CTX_CLS.CLUSTERING</code> syntax and examples</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment105">
<tr>
<td class="cellalignment112">
<table class="cellalignment110">
<tr>
<td class="cellalignment109"><a href="view.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment109"><a href="aoptim.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2004, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment114">
<table class="cellalignment108">
<tr>
<td class="cellalignment109"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment109"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment109"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment109"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment109"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment109"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
