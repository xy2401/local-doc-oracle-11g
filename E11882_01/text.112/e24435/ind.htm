<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Indexing with Oracle Text</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 748" />
<meta name="dcterms.created" content="2014-02-11T12:39:52Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Text Application Developer's Guide" />
<meta name="dcterms.identifier" content="E24435-03" />
<meta name="dcterms.isVersionOf" content="CCAPP" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2004, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="txtgloss.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="quicktour.htm" title="Previous" type="text/html" />
<link rel="Next" href="query.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e24435.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">7/21</span> <!-- End Header -->
<div id="CCAPP0300" class="chapter"><a id="g1020588"></a><a id="i1004902"></a>
<h1 class="chapter"><span class="secnum">3</span> Indexing with Oracle Text</h1>
<p>This chapter provides an introduction to Oracle Text indexing. The following topics are discussed:</p>
<ul>
<li>
<p><a href="#i1006201">About Oracle Text Indexes</a></p>
</li>
<li>
<p><a href="#i1006394">Considerations For Indexing</a></p>
</li>
<li>
<p><a href="#i1006887">Creating Oracle Text Indexes</a></p>
</li>
<li>
<p><a href="#i1007436">Maintaining Oracle Text Indexes</a></p>
</li>
<li>
<p><a href="#i1007544">Managing DML Operations for a CONTEXT Index</a></p>
</li>
</ul>
<a id="i1006201"></a>
<div id="CCAPP9023" class="sect1">
<h2 class="sect1"><span class="secnum">3.1</span> About Oracle Text Indexes<a id="sthref75"></a></h2>
<p>This section discusses the different types of Oracle Text indexes, their structure, the indexing process, and limitations. The following subjects are included:</p>
<ul>
<li>
<p><a href="#BEIIEAFD">Types of Oracle Text Indexes</a></p>
</li>
<li>
<p><a href="#CIHIBDAH">Structure of the Oracle Text CONTEXT Index</a></p>
</li>
<li>
<p><a href="#CIHIHJGG">The Oracle Text Indexing Process</a></p>
</li>
<li>
<p><a href="#CIHHECJC">Partitioned Tables and Indexes</a></p>
</li>
<li>
<p><a href="#CIHFGAEI">Creating an Index Online</a></p>
</li>
<li>
<p><a href="#CIHCBABI">Parallel Indexing</a></p>
</li>
<li>
<p><a href="#CIHHDBHG">Indexing and Views</a></p>
</li>
</ul>
<a id="BEIIEAFD"></a>
<div id="CCAPP9024" class="sect2">
<h3 class="sect2"><span class="secnum">3.1.1</span> Types of Oracle Text Indexes<a id="sthref76"></a></h3>
<p>With Oracle Text, you can create indexes of several types, using <code>CREATE</code> <code>INDEX</code>. <a href="#BEICEDBG">Table 3-1</a> describes each index type, its purpose, and the features it supports.</p>
<div id="CCAPP9491" class="tblformalwide">
<p class="titleintable"><a id="sthref77"></a><a id="BEICEDBG"></a>Table 3-1 Oracle Text Index Types</p>
<table class="cellalignment115" title="Oracle Text Index Types" summary="This table describes the various kinds of indexes available in Oracle Text." dir="ltr">
<thead>
<tr class="cellalignment106">
<th class="cellalignment116" id="r1c1-t2">Index Type</th>
<th class="cellalignment116" id="r1c2-t2">Description</th>
<th class="cellalignment116" id="r1c3-t2">Supported Preferences and Parameters</th>
<th class="cellalignment116" id="r1c4-t2">Query Operator</th>
<th class="cellalignment116" id="r1c5-t2">Notes</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment106">
<td class="cellalignment112" id="r2c1-t2" headers="r1c1-t2">
<p><code><a id="sthref78"></a>CONTEXT</code></p>
</td>
<td class="cellalignment112" headers="r2c1-t2 r1c2-t2">
<p>Use this index to build a text retrieval application when your text consists of large coherent documents. You can index documents of different formats such as MS Word, HTML or plain text.</p>
<p>You can customize the index in a variety of ways.</p>
<p>This index type requires <code>CTX_DDL.SYNC_INDEX</code> after DML on base table.</p>
</td>
<td class="cellalignment112" headers="r2c1-t2 r1c3-t2">
<p>All <code>CREATE</code> <code>INDEX</code> preferences and parameters supported except for <code>INDEX</code> <code>SET</code>.</p>
<p>These supported parameters include the index partition clause, and the format, charset, and language columns.</p>
</td>
<td class="cellalignment112" headers="r2c1-t2 r1c4-t2">
<p><code>CONTAINS</code></p>
<p>Grammar is called the <code>CONTEXT</code> grammar, which supports a rich set of operations.</p>
<p>The <code>CTXCAT</code> grammar can be used with query templating.</p>
</td>
<td class="cellalignment112" headers="r2c1-t2 r1c5-t2">
<p>Supports all documents services and query services.</p>
<p>Supports indexing of partitioned text tables.</p>
<p>Supports <code>FILTER</code> <code>BY</code> and <code>ORDER</code> <code>BY</code> clauses of <code>CREATE</code> <code>INDEX</code> to also index structured column values for more efficient processing of mixed queries.</p>
</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r3c1-t2" headers="r1c1-t2">
<p><code><a id="sthref79"></a>CTXCAT</code></p>
</td>
<td class="cellalignment112" headers="r3c1-t2 r1c2-t2">
<p>Use this index type for better mixed query performance. Typically, with this index type, you index small documents or text fragments. Other columns in the base table, such as item names, prices, and descriptions can be included in the index to improve mixed query performance.</p>
<p>This index type is transactional, automatically updating itself after DML to base table. No <code>CTX_DDL.SYNC_INDEX</code> is necessary.</p>
</td>
<td class="cellalignment112" headers="r3c1-t2 r1c3-t2">
<p><code>INDEX</code> <code>SET</code></p>
<p><code>LEXER</code></p>
<p><code>STOPLIST</code></p>
<p><code>STORAGE</code></p>
<p><code>WORDLIST</code> (only prefix_index attribute supported for Japanese data)</p>
<p>Format, charset, and language columns not supported.</p>
<p>Table and index partitioning not supported.</p>
</td>
<td class="cellalignment112" headers="r3c1-t2 r1c4-t2">
<p><code>CATSEARCH</code></p>
<p>Grammar is called <code>CTXCAT</code>, which supports logical operations, phrase queries, and wildcarding.</p>
<p>The <code>CONTEXT</code> grammar can be used with query templating.</p>
<p>Theme querying is supported.</p>
</td>
<td class="cellalignment112" headers="r3c1-t2 r1c5-t2">
<p>This index is larger and takes longer to build than a <code>CONTEXT</code> index.</p>
<p>The size of a <code>CTXCAT</code> index is related to the total amount of text to be indexed, the number of indexes in the index set, and the number of columns indexed. Carefully consider your queries and your resources before adding indexes to the index set.</p>
<p>The <code>CTXCAT</code> index does not support table and index partitioning, documents services (highlighting, markup, themes, and gists) or query services (explain, query feedback, and browse words.)</p>
</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r4c1-t2" headers="r1c1-t2">
<p><code><a id="sthref80"></a>CTXRULE</code></p>
</td>
<td class="cellalignment112" headers="r4c1-t2 r1c2-t2">
<p>Use <code>CTXRULE</code> index to build a document classification or routing application. This index is created on a table of queries, where the queries define the classification or routing criteria.</p>
</td>
<td class="cellalignment112" headers="r4c1-t2 r1c3-t2">
<p>See <a href="classify.htm#BEJHFGAC">"CTXRULE Parameters and Limitations"</a>.</p>
</td>
<td class="cellalignment112" headers="r4c1-t2 r1c4-t2">
<p><code>MATCHES</code></p>
</td>
<td class="cellalignment112" headers="r4c1-t2 r1c5-t2">
<p>Single documents (plain text, HTML, or XML) can be classified using the <code>MATCHES</code> operator, which turns a document into a set of queries and finds the matching rows in the <code>CTXRULE</code> index.</p>
</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r5c1-t2" headers="r1c1-t2">
<p><code>CTXXPATH</code><code><a id="sthref81"></a></code></p>
</td>
<td class="cellalignment112" headers="r5c1-t2 r1c2-t2">
<p>Create this index when you need to speed up <code>existsNode()</code> queries on an <code>XMLType</code> column.</p>
</td>
<td class="cellalignment112" headers="r5c1-t2 r1c3-t2">
<p><code>STORAGE</code></p>
</td>
<td class="cellalignment112" headers="r5c1-t2 r1c4-t2">
<p>Use with <code>existsNode()</code></p>
</td>
<td class="cellalignment112" headers="r5c1-t2 r1c5-t2">
<p>This indextype is deprecated and is only supported for backward compatibility with older releases of Oracle Database where <code>XMLIndex</code> is not available. If you are building a new application, Oracle recommends that you use <code>XMLIndex</code>.</p>
<p>Can only create this index on <code>XMLType</code> column.</p>
<p>Although this index type can be helpful for <code>existsNode()</code> queries, it is not required for XML searching. See <a href="overview.htm#BABFFCBI">"XML Search Applications"</a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006887">"Creating Oracle Text Indexes"</a></div>
<p>An Oracle Text index is an Oracle Database domain index. To build your query application, you can create an index of type <code>CONTEXT</code> with a mixture of text and structured data columns, and query it with the <code>CONTAINS</code> operator.</p>
<p>You create an index from a populated text table. In a query application, the table must contain the text or pointers to where the text is stored. Text is usually a collection of documents, but can also be small text fragments.</p>
<p>For better performance for mixed queries, you can create a <code>CONTEXT</code> index with <code>FILTER</code> <code>BY</code> and/or <code>ORDER</code> <code>BY</code> clauses to specify relational columns that will be used in structured criteria of the mixed query. Query this index with the <code>CONTAINS</code> operator.</p>
<p>Use the <code>CTXCAT</code> index type when your application relies heavily on mixed queries to search small documents or descriptive text fragments based on related criteria such as dates or prices. Query this index with the <code>CATSEARCH</code> operator.</p>
<p>To build a document classification application using <span class="italic">simple</span> or <span class="italic">rule-based</span> classification, create an index of type <code>CTXRULE</code>. This index classifies plain text, HTML, or XML documents using the <code>MATCHES</code> operator. Store your defining query set in the text table you index.</p>
<p>If you are working with <code>XMLtype</code> columns, then create an <code>XMLIndex</code> index to speed up queries with <code>existsNode</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>CTXXPATH</code> index type is deprecated. It is only supported for backward compatibility with older releases of Oracle Database where <code>XMLIndex</code> is not available. If you are building a new application, then Oracle recommends that you use <code>XMLIndex</code>.</div>
<p>Create a text index as a type of extensible index to Oracle Database using standard SQL. This means that an Oracle Text index operates like an Oracle Database index. It has a name by which it is referenced and can be manipulated with standard SQL statements.</p>
<p>The benefits of a creating an Oracle Text index include fast response time for text queries with the <code>CONTAINS</code>, <code>CATSEARCH</code>, and <code>MATCHES</code> Oracle Text operators. These operators query the <code>CONTEXT</code>, <code>CTXCAT</code>, and <code>CTXRULE</code> index types respectively.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Because a transparent data encryption-enabled column does not support domain indexes, it cannot be used with Oracle Text. However, you can create an Oracle Text index on a column in a table stored in TDE-enabled tablespace.</div>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a href="#i1006887">"Creating Oracle Text Indexes"</a></div>
</div>
<!-- class="sect2" -->
<a id="CIHIBDAH"></a>
<div id="CCAPP9025" class="sect2">
<h3 class="sect2"><span class="secnum">3.1.2</span> Structure of the Oracle Text CONTEXT Index</h3>
<p>Oracle Text indexes text by converting all words into tokens. <a id="sthref82"></a>The general structure of an Oracle Text <code>CONTEXT</code> index is an inverted index where each token contains the list of documents (rows) that contain that token.</p>
<p>For example, after a single initial indexing operation, the word DOG might have an entry as follows:</p>
<div class="inftblinformal">
<table class="cellalignment115" title="Sample Oracle Text Index Structure" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment106">
<th class="cellalignment116" id="r1c1-t7">Word</th>
<th class="cellalignment116" id="r1c2-t7">Appears in Document</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment106">
<td class="cellalignment112" id="r2c1-t7" headers="r1c1-t7">DOG</td>
<td class="cellalignment112" headers="r2c1-t7 r1c2-t7">DOC1 DOC3 DOC5</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p>This means that the word DOG is contained in the rows that store documents one, three, and five.</p>
<div id="CCAPP9026" class="sect3"><a id="sthref83"></a>
<h4 class="sect3"><span class="secnum">3.1.2.1</span> Merged Word and Theme Index</h4>
<p>By default in English and French, Oracle Text indexes theme information with word information. You can query theme information with the <code>ABOUT</code> operator. You can optionally enable and disable theme indexing.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006972">"Creating Preferences"</a> to learn more about indexing theme information</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHIHJGG"></a>
<div id="CCAPP9027" class="sect2">
<h3 class="sect2"><span class="secnum">3.1.3</span> The Oracle Text Indexing Process</h3>
<p><a id="sthref84"></a>This section describes the Oracle Text indexing process. Initiate the indexing process with the <code>CREATE</code> <code>INDEX</code> statement. Initiate the indexing process using the CREATE INDEX statement to create an Oracle Text index of tokens, organized according to the parameters and preferences you specify.</p>
<p><a href="#BABIAGAC">Figure 3-1</a> shows the indexing process. This process is a data stream that is acted upon by the different indexing objects. Each object corresponds to an indexing preference type or section group you can specify in the parameter string of <code>CREATE</code> <code>INDEX</code> or <code>ALTER</code> <code>INDEX</code>. The following sections describe these objects.</p>
<div id="CCAPP9492" class="figure">
<p class="titleinfigure"><a id="BABIAGAC"></a>Figure 3-1 Oracle Text Indexing Process</p>
<img width="670" height="392" src="img/ccapp011.gif" alt="Description of Figure 3-1 follows" /><br />
<a id="sthref85" href="img_text/ccapp011.htm">Description of "Figure 3-1 Oracle Text Indexing Process"</a><br />
<br /></div>
<!-- class="figure" -->
<div id="CCAPP9028" class="sect3"><a id="sthref86"></a>
<h4 class="sect3"><span class="secnum">3.1.3.1</span> Datastore Object<a id="sthref87"></a></h4>
<p>The stream starts with the datastore reading in the documents as they are stored in the system according to your datastore preference. For example, if you have defined your datastore as <code><a id="sthref88"></a>FILE_DATASTORE</code>, then the stream starts by reading the files from the operating system. You can also store your documents on the Internet or in Oracle Database. Wherever your files reside physically, you must always have a text table in Oracle Database that points to the file.</p>
</div>
<!-- class="sect3" -->
<div id="CCAPP9029" class="sect3"><a id="sthref89"></a>
<h4 class="sect3"><span class="secnum">3.1.3.2</span> Filter Object<a id="sthref90"></a></h4>
<p>The stream then passes through the filter. What happens here is determined by your <code>FILTER</code> preference. The stream can be acted upon in one of the following ways:</p>
<ul>
<li>
<p>No filtering takes place. This happens when you specify the <code><a id="sthref91"></a>NULL_FILTER</code> preference type or when the value of the format column is <code>IGNORE</code>. Documents that are plain text, HTML, or XML need no filtering.</p>
</li>
<li>
<p>Formatted documents (binary) are filtered to marked-up text. This happens when you specify the <code><a id="sthref92"></a>AUTO_FILTER</code> preference type or when the value of the format column is <code>BINARY</code>.</p>
</li>
<li>
<p>Text is converted from a non-database character set to the database character set. This happens when you specify <code><a id="sthref93"></a>CHARSET_FILTER</code> preference type.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="CCAPP9030" class="sect3"><a id="sthref94"></a>
<h4 class="sect3"><span class="secnum">3.1.3.3</span> Sectioner Object<a id="sthref95"></a></h4>
<p>After being filtered, the marked-up text passes through the sectioner that separates the stream into text and section information. Section information includes where sections begin and end in the text stream. The type of sections extracted is determined by your section group type.</p>
<p>The section information is passed directly to the indexing engine which uses it later. The text is passed to the lexer.</p>
</div>
<!-- class="sect3" -->
<div id="CCAPP9031" class="sect3"><a id="sthref96"></a>
<h4 class="sect3"><span class="secnum">3.1.3.4</span> Lexer Object<a id="sthref97"></a></h4>
<p>You create a lexer preference using one of the Oracle Text lexer types to specify the language of the text to be indexed. The lexer breaks the text into tokens according to your language. These tokens are usually words. To extract tokens, the lexer uses the parameters as defined in your lexer preference. These parameters include the definitions for the characters that separate tokens such as whitespace, and whether to convert the text to all uppercase or to leave it in mixed case.</p>
<p>When theme indexing is enabled, the lexer analyzes your text to create theme tokens for indexing.</p>
</div>
<!-- class="sect3" -->
<div id="CCAPP9032" class="sect3"><a id="sthref98"></a>
<h4 class="sect3"><span class="secnum">3.1.3.5</span> Indexing Engine<a id="sthref99"></a></h4>
<p>The indexing engine creates the inverted index that maps tokens to the documents that contain them. In this phase, Oracle Text uses the stoplist you specify to exclude stopwords or stopthemes from the index. Oracle Text also uses the parameters defined in your <code>WORDLIST</code> preference, which tell the system how to create a prefix index or substring index, if enabled.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHHECJC"></a>
<div id="CCAPP9033" class="sect2">
<h3 class="sect2"><span class="secnum">3.1.4</span> Partitioned Tables and Indexes</h3>
<p>You can create a partitioned <code>CONTEXT</code> index on a partitioned text table. The table must be partitioned by range. Hash, composite, and list partitions are not supported.</p>
<p>You might create a partitioned text table to partition your data by date. For example, if your application maintains a large library of dated news articles, you can partition your information by month or year. Partitioning simplifies the manageability of large databases, because querying, DML, and backup and recovery can act on a single partition.</p>
<p>On local <code>CONTEXT</code> indexes with multiple table sets, Oracle Text supports the number of partitions supported by Oracle Database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The number of partitions supported in Oracle Text is approximately 1024K-1. This limit, which should be more than adequate, is not applicable to a <code>CONTEXT</code> index on partitioned tables.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT112" href="../../server.112/e40540/schemaob.htm#CNCPT112"><span class="italic">Oracle Database Concepts</span></a> for more information about partitioning</div>
<div id="CCAPP9034" class="sect3"><a id="sthref100"></a>
<h4 class="sect3"><span class="secnum">3.1.4.1</span> Querying Partitioned Tables</h4>
<p>To query a partitioned table, you use <code>CONTAINS</code> in the <code>WHERE</code> clause of a <code>SELECT</code> statement as you query a regular table. You can query the entire table or a single partition. However, if you are using the <code>ORDER</code> <code>BY</code> <code>SCORE</code> clause, Oracle recommends that you query single partitions unless you include a range predicate that limits the query to a single partition.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHFGAEI"></a>
<div id="CCAPP9035" class="sect2">
<h3 class="sect2"><span class="secnum">3.1.5</span> Creating an Index Online</h3>
<p>When it is not practical to lock up your base table for indexing because of ongoing updates, you can create your index online with the <code>ONLINE</code> parameter of <code>CREATE INDEX</code>. This way an application with heavy DML need not stop updating the base table for indexing.</p>
<p>There are short periods, however, when the base table is locked at the beginning and end of the indexing process.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0105" href="../../text.112/e24436/csql.htm#CCREF0105"><span class="italic">Oracle Text Reference</span></a> to learn more about creating an index online</div>
</div>
<!-- class="sect2" -->
<a id="CIHCBABI"></a>
<div id="CCAPP9036" class="sect2">
<h3 class="sect2"><span class="secnum">3.1.6</span> Parallel Indexing<a id="sthref101"></a><a id="sthref102"></a></h3>
<p>Oracle Text supports parallel indexing with <code>CREATE</code> <code>INDEX</code>.</p>
<p>When you enter a parallel indexing statement on a non-partitioned table, Oracle Text splits the base table into temporary partitions, spawns child processes, and assigns a child to a partition. Each child then indexes the rows in its partition. The method of slicing the base table into partitions is determined by Oracle and is not under your direct control. This is true as well for the number of child processes actually spawned, which depends on machine capabilities, system load, your <code>init.ora</code> settings, and other factors. Because of these variables, the actual parallel degree may not match the degree of parallelism requested.</p>
<p>Because indexing is an I/O intensive operation, parallel indexing is most effective in decreasing your indexing time when you have distributed disk access and multiple CPUs. Parallel indexing can only affect the performance of an initial index with <code>CREATE</code> <code>INDEX</code>. It does not affect DML performance with <code>ALTER</code> <code>INDEX</code>, and has minimal impact on query performance.</p>
<p>Because parallel indexing decreases the <span class="italic">initial</span> indexing time, it is useful for the following scenarios:</p>
<ul>
<li>
<p>Data staging, when your product includes an Oracle Text index</p>
</li>
<li>
<p>Rapid initial startup of applications based on large data collections</p>
</li>
<li>
<p>Application testing, when you need to test different index parameters and schemas while developing your application</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="aoptim.htm#CHDBDJFD">"Parallel Queries on a Local Context Index"</a></p>
</li>
<li>
<p><a href="aoptim.htm#i1006756">"Frequently Asked Questions About Indexing Performance"</a></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIHHDBHG"></a>
<div id="CCAPP9037" class="sect2">
<h3 class="sect2"><span class="secnum">3.1.7</span> Indexing and Views<a id="sthref103"></a><a id="sthref104"></a></h3>
<p>Oracle SQL standards do not support creating indexes on views. If you need to index documents whose contents are in different tables, you can create a data storage preference using the <code><a id="sthref105"></a>USER_DATASTORE</code> object. With this object, you can define a procedure that synthesizes documents from different tables at index time.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0203" href="../../text.112/e24436/cdatadic.htm#CCREF0203"><span class="italic">Oracle Text Reference</span></a> to learn more about <code>USER_DATASTORE</code></div>
<p>Oracle Text does support the creation of <code>CONTEXT</code>, <code>CTXCAT</code>, <code>CTXRULE</code>, and <code>CTXXPATH</code> indexes on materialized views (<code>MVIEW</code>).</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006394"></a>
<div id="CCAPP9038" class="sect1">
<h2 class="sect1"><span class="secnum">3.2</span> Considerations For Indexing<a id="sthref106"></a></h2>
<p>Use the <code>CREATE</code> <code>INDEX</code> statement to create an Oracle Text index. When you create an index and specify no parameter string, an index is created with default parameters. You can create either a <code>CONTEXT</code>, <code>CTXCAT</code>, or <code>CTXRULE</code> index. This sections contains the following topics:</p>
<ul>
<li>
<p><a href="#i1006503">Location of Text</a></p>
</li>
<li>
<p><a href="#i1006559">Document Formats and Filtering</a></p>
</li>
<li>
<p><a href="#i1006594">Bypassing Rows for Indexing</a></p>
</li>
<li>
<p><a href="#CIHFBFJA">Document Character Set</a></p>
</li>
<li>
<p><a href="#CIHHJFJC">Document Language</a></p>
</li>
<li>
<p><a href="#CIHFFIFB">Indexing Special Characters</a></p>
</li>
<li>
<p><a href="#CIHIJEAJ">Case-Sensitive Indexing and Querying</a></p>
</li>
<li>
<p><a href="#CIHFFIEE">Language-Specific Features</a></p>
</li>
<li>
<p><a href="#CIHCCCIF">Fuzzy Matching and Stemming</a></p>
</li>
<li>
<p><a href="#CIHDJEED">Better Wildcard Query Performance</a></p>
</li>
<li>
<p><a href="#CIHIAAIA">Document Section Searching</a></p>
</li>
<li>
<p><a href="#CIHCGIEA">Stopwords and Stopthemes</a></p>
</li>
<li>
<p><a href="#CIHEGJAA">Index Performance</a></p>
</li>
<li>
<p><a href="#CIHEJBED">Query Performance and Storage of LOB Columns</a></p>
</li>
<li>
<p><a href="#CIHJBDFG">Mixed Query Performance</a></p>
</li>
</ul>
<p>You can also override the defaults and customize your index to suit your query application. The parameters and preference types you use to customize your index with <code>CREATE</code> <code>INDEX</code> fall into the following general categories.</p>
<a id="i1006503"></a>
<div id="CCAPP9039" class="sect2">
<h3 class="sect2"><span class="secnum">3.2.1</span> Location of Text<a id="sthref107"></a><a id="sthref108"></a><a id="sthref109"></a></h3>
<p><a id="sthref110"></a>The basic prerequisite for an Oracle Text query application is to have a populated text table. The text table is where you store information about your document collection and is required for indexing.</p>
<p>When you create a <code>CONTEXT</code> index, you can populate rows in your text table with one of the following elements:</p>
<ul>
<li>
<p>Text information (can be documents or text fragments)</p>
</li>
<li>
<p>Path names of documents in your file system</p>
</li>
<li>
<p>URLs that specify World Wide Web documents</p>
</li>
</ul>
<p><a href="#BABCCHDD">Figure 3-2</a> illustrates these different methods.</p>
<p>When creating a <code>CTXCAT</code> or <code>CTXRULE</code> index, only the first method shown is supported.</p>
<div id="CCAPP9493" class="figure">
<p class="titleinfigure"><a id="BABCCHDD"></a>Figure 3-2 Different Ways of Storing Text</p>
<img width="600" height="607" src="img/ccapp002.gif" alt="Description of Figure 3-2 follows" /><br />
<a id="sthref111" href="img_text/ccapp002.htm">Description of "Figure 3-2 Different Ways of Storing Text"</a><br />
<br /></div>
<!-- class="figure" -->
<p>By default, the indexing operation expects your document text to be directly loaded in your text table, which is the first method shown previously.</p>
<p>However, when you create a <code>CONTEXT</code> index, you can specify the other ways of identifying your documents such as with filenames or with URLs by using the corresponding data storage indexing preference.</p>
<div id="CCAPP9040" class="sect3"><a id="sthref112"></a>
<h4 class="sect3"><span class="secnum">3.2.1.1</span> Supported Column Types<a id="sthref113"></a><a id="sthref114"></a><a id="sthref115"></a><a id="sthref116"></a><a id="sthref117"></a><a id="sthref118"></a><a id="sthref119"></a></h4>
<p>With Oracle Text, you can create a <code>CONTEXT</code> index with columns of type <code>VARCHAR2</code>, <code>CLOB</code>, <code>BLOB</code>, <code>CHAR</code>, <code>BFILE</code>, <code>XMLType</code>, and <code>URIType</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The column types <code>NCLOB</code>, <code>DATE</code> and <code>NUMBER</code> cannot be indexed.</div>
</div>
<!-- class="sect3" -->
<div id="CCAPP9041" class="sect3"><a id="sthref120"></a>
<h4 class="sect3"><span class="secnum">3.2.1.2</span> Storing Text in the Text Table<a id="sthref121"></a></h4>
<p>This section discusses how you can store text in directly in your table with the different indexes.</p>
<div id="CCAPP9042" class="sect4"><a id="sthref122"></a>
<h5 class="sect4"><span class="secnum">3.2.1.2.1</span> CONTEXT Data Storage</h5>
<p>You can store documents in your text table in different ways.</p>
<p>You can store documents in one column using the <code><a id="sthref123"></a>DIRECT_DATASTORE</code> data storage type or over a number of columns using the <code><a id="sthref124"></a>MULTI_COLUMN_DATASTORE</code> type. When your text is stored over a number of columns, Oracle Text concatenates the columns into a virtual document for indexing.</p>
<p>You can also create master-detail relationships for your documents, where one document can be stored across a number of rows. To create master-detail index, use the <code><a id="sthref125"></a>DETAIL_DATASTORE</code> data storage type.</p>
<p>You can also store your text in a nested table using the <code><a id="sthref126"></a>NESTED_DATASTORE</code> type.</p>
<p>Oracle Text supports the indexing of the <code>XMLType</code> datatype, which you use to store XML documents.</p>
</div>
<!-- class="sect4" -->
<div id="CCAPP9043" class="sect4"><a id="sthref127"></a>
<h5 class="sect4"><span class="secnum">3.2.1.2.2</span> CTXCAT Data Storage</h5>
<p>In your text table, you can also store short text fragments such as names, descriptions, and addresses over a number of columns and create a <code>CTXCAT</code> index. A <code>CTXCAT</code> index improves performance for mixed queries.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div id="CCAPP9044" class="sect3"><a id="sthref128"></a>
<h4 class="sect3"><span class="secnum">3.2.1.3</span> Storing File Path Names</h4>
<p>In your text table, you can store path names to files stored in your file system. When you do so, use the <code><a id="sthref129"></a><a id="sthref130"></a>FILE_DATASTORE</code> preference type during indexing. This method of data storage is supported for <code>CONTEXT</code> indexes only.</p>
</div>
<!-- class="sect3" -->
<div id="CCAPP9045" class="sect3"><a id="sthref131"></a>
<h4 class="sect3"><span class="secnum">3.2.1.4</span> Storing URLs<a id="sthref132"></a></h4>
<p>You can store URL names to index Web sites. When you do so, use the <code>URL_DATASTORE</code> preference type during indexing. This method of data storage is supported for <code>CONTEXT</code> indexes only.</p>
</div>
<!-- class="sect3" -->
<div id="CCAPP9046" class="sect3"><a id="sthref133"></a>
<h4 class="sect3"><span class="secnum">3.2.1.5</span> Storing Associated Document Information</h4>
<p>In your text table, you can create additional columns to store structured information that your query application might need, such as primary key, date, description, or author.</p>
</div>
<!-- class="sect3" -->
<div id="CCAPP9047" class="sect3"><a id="sthref134"></a>
<h4 class="sect3"><span class="secnum">3.2.1.6</span> <a id="sthref135"></a><a id="sthref136"></a>Format and Character Set Columns</h4>
<p>If your documents are of mixed formats or of mixed character sets, you can create the following additional columns:</p>
<ul>
<li>
<p>A format column to record the format (<code>TEXT</code> or <code>BINARY</code>) to help filtering during indexing. You can also use the format column to ignore rows for indexing by setting the format column to <code>IGNORE</code>. This is useful for bypassing rows that contain data incompatible with text indexing such as images.</p>
</li>
<li>
<p>A character set column to record the document character set for each row.</p>
</li>
</ul>
<p>When you create your index, you must specify the name of the format or character set column in the parameter clause of <code>CREATE</code> <code>INDEX</code>.</p>
<p>For all rows containing the keywords <code>AUTO</code> or <code>AUTOMATIC</code> in character set or language columns, Oracle Text will apply statistical techniques to determine the character set and language respectively of the documents and modify document indexing appropriately.</p>
</div>
<!-- class="sect3" -->
<div id="CCAPP9048" class="sect3"><a id="sthref137"></a>
<h4 class="sect3"><span class="secnum">3.2.1.7</span> Supported Document Formats<a id="sthref138"></a><a id="sthref139"></a></h4>
<p>Because the system can index most document formats including HTML, PDF, Microsoft Word, and plain text, you can load any supported type into the text column.</p>
<p>When you have mixed formats in your text column, you can optionally include a format column to help filtering during indexing. With the format column you can specify whether a document is binary (formatted) or text (non-formatted such as HTML). If you mix HTML and XML documents in 1 index, you might not be able to configure your index to your needs; you cannot prevent stylesheet information from being added to the index.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF1300" href="../../text.112/e24436/afilsupt.htm#CCREF1300"><span class="italic">Oracle Text Reference</span></a> for more information about the supported document formats</div>
</div>
<!-- class="sect3" -->
<div id="CCAPP9049" class="sect3"><a id="sthref140"></a>
<h4 class="sect3"><span class="secnum">3.2.1.8</span> Summary of DATASTORE Types</h4>
<p>When you index with <code>CREATE INDEX</code>, you specify the location using the datastore preference. Use the appropriate datastore according to your application.</p>
<p><a href="#BGBFJACH">Table 3-2</a> summarizes the different ways you can store your text with the datastore preference type.</p>
<div id="CCAPP9494" class="tblformal">
<p class="titleintable"><a id="sthref141"></a><a id="BGBFJACH"></a>Table 3-2 Summary of DATASTORE Types</p>
<table class="cellalignment117" title="Summary of DATASTORE Types" summary="This table describes the different DATASTORE preference types." dir="ltr">
<thead>
<tr class="cellalignment106">
<th class="cellalignment116" id="r1c1-t16">Datastore Type</th>
<th class="cellalignment116" id="r1c2-t16">Use When</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment106">
<td class="cellalignment112" id="r2c1-t16" headers="r1c1-t16">
<p><code><a id="sthref142"></a>DIRECT_DATASTORE</code></p>
</td>
<td class="cellalignment112" headers="r2c1-t16 r1c2-t16">
<p>Data is stored internally in a text column. Each row is indexed as a single document.</p>
<p>Your text column can be <code>VARCHAR2, CLOB, BLOB, CHAR, or BFILE</code>. <code>XMLType</code> columns are supported for the context index type.</p>
</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r3c1-t16" headers="r1c1-t16">
<p><code><a id="sthref143"></a>MULTI_COLUMN_DATASTORE</code></p>
</td>
<td class="cellalignment112" headers="r3c1-t16 r1c2-t16">
<p>Data is stored in a text table in more than one column. Columns are concatenated to create a virtual document, one document for each row.</p>
</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r4c1-t16" headers="r1c1-t16">
<p><code><a id="sthref144"></a>DETAIL_DATASTORE</code></p>
</td>
<td class="cellalignment112" headers="r4c1-t16 r1c2-t16">
<p>Data is stored internally in a text column. Document consists of one or more rows stored in a text column in a detail table, with header information stored in a master table.</p>
</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r5c1-t16" headers="r1c1-t16">
<p><code><a id="sthref145"></a>FILE_DATASTORE</code></p>
</td>
<td class="cellalignment112" headers="r5c1-t16 r1c2-t16">
<p>Data is stored externally in operating system files. Filenames are stored in the text column, one for each row.</p>
</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r6c1-t16" headers="r1c1-t16">
<p><code><a id="sthref146"></a>NESTED_DATASTORE</code></p>
</td>
<td class="cellalignment112" headers="r6c1-t16 r1c2-t16">
<p>Data is stored in a nested table.</p>
</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r7c1-t16" headers="r1c1-t16">
<p><code><a id="sthref147"></a>URL_DATASTORE</code></p>
</td>
<td class="cellalignment112" headers="r7c1-t16 r1c2-t16">
<p>Data is stored externally in files located on an intranet or the Internet. URLs are stored in the text column.</p>
</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r8c1-t16" headers="r1c1-t16">
<p><code><a id="sthref148"></a>USER_DATASTORE</code></p>
</td>
<td class="cellalignment112" headers="r8c1-t16 r1c2-t16">
<p>Documents are synthesized at index time by a user-defined stored procedure.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>Indexing time and document retrieval time will be increased for indexing URLs, because the system must retrieve the document from the network.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006976">"Datastore Examples"</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006559"></a>
<div id="CCAPP9050" class="sect2">
<h3 class="sect2"><span class="secnum">3.2.2</span> Document Formats and Filtering<a id="sthref149"></a><a id="sthref150"></a><a id="sthref151"></a></h3>
<p>Formatted documents such as Microsoft Word and PDF must be filtered to text to be indexed. The type of filtering the system uses is determined by the <code>FILTER</code> preference type. By default, the system uses the <code><a id="sthref152"></a>AUTO_FILTER</code> filter type, which automatically detects the format of your documents and filters them to text.</p>
<p>Oracle Text can index most formats. Oracle Text can also index columns that contain documents with mixed formats.</p>
<div id="CCAPP9051" class="sect3"><a id="sthref153"></a>
<h4 class="sect3"><span class="secnum">3.2.2.1</span> No Filtering for HTML</h4>
<p>If you are indexing HTML or plain text files, do not use the <code>AUTO_FILTER</code> type. For best results, use the <code>NULL_FILTER</code> preference type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1007026">"NULL_FILTER Example: Indexing HTML Documents"</a></div>
</div>
<!-- class="sect3" -->
<div id="CCAPP9052" class="sect3"><a id="sthref154"></a>
<h4 class="sect3"><span class="secnum">3.2.2.2</span> Filtering Mixed-Format Columns<a id="sthref155"></a><a id="sthref156"></a><a id="sthref157"></a><a id="sthref158"></a><a id="sthref159"></a></h4>
<p>If you have a mixed-format column such as one that contains Microsoft Word, plain text, and HTML documents, you can bypass filtering for plain text or HTML by including a format column in your text table. In the format column, you tag each row <code>TEXT</code> or <code>BINARY</code>. Rows that are tagged <code>TEXT</code> are not filtered.</p>
<p>For example, you can tag the HTML and plain text rows as <code>TEXT</code> and the Microsoft Word rows as <code>BINARY</code>. You specify the format column in the <code>CREATE INDEX</code> parameter clause.</p>
<p>A third format column type, <code>IGNORE</code>, is provided for when you do not want a document to be indexed at all. This is useful, for example, when you have a mixed-format table that includes plain-text documents in both Japanese and English, but you only want to process the English documents; another example might be that of a mixed-format table that includes both plain-text documents and images. Because <code>IGNORE</code> is implemented at the datastore level, it can be used with all filters.</p>
</div>
<!-- class="sect3" -->
<div id="CCAPP9053" class="sect3"><a id="sthref160"></a>
<h4 class="sect3"><span class="secnum">3.2.2.3</span> Custom Filtering<a id="sthref161"></a></h4>
<p>You can create your own custom filter to filter documents for indexing. You can create either an external filter that is executed from the file system or an internal filter as a PL/SQL or Java stored procedure.</p>
<p>For external custom filtering, use the <code><a id="sthref162"></a>USER_FILTER</code> filter preference type.</p>
<p>For internal filtering, use the <code><a id="sthref163"></a>PROCEDURE_FILTER</code> filter type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1007035">"PROCEDURE_FILTER Example"</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1006594"></a>
<div id="CCAPP9054" class="sect2">
<h3 class="sect2"><span class="secnum">3.2.3</span> Bypassing <a id="sthref164"></a><a id="sthref165"></a><a id="sthref166"></a><a id="sthref167"></a>Rows for Indexing</h3>
<p>You can bypass rows in your text table that are not to be indexed, such as rows that contain image data. To do so, create a format column in your table and set it to <code>IGNORE</code>. You name the format column in the parameter clause of <code>CREATE INDEX</code>.</p>
</div>
<!-- class="sect2" -->
<a id="CIHFBFJA"></a>
<div id="CCAPP9055" class="sect2">
<h3 class="sect2"><span class="secnum">3.2.4</span> Document Character Set<a id="sthref168"></a></h3>
<p>The indexing engine expects filtered text to be in the database character set. When you use the <code>AUTO_FILTER</code> filter type, formatted documents are converted to text in the database character set.</p>
<p>If your source is text and your document character set is not the database character set, then you can use the <code><a id="sthref169"></a>AUTO_FILTER</code> or <code><a id="sthref170"></a>CHARSET_FILTER</code> filter type to convert your text for indexing.</p>
<div id="CCAPP9455" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref171"></a>
<h4 class="sect3"><span class="secnum">3.2.4.1</span> Character Set Detection</h4>
<p>When the <code>CHARSET</code> column is set to <code>AUTO</code>, the <code>AUTO_FILTER</code> filter detects the character set of the document and converts it from the detected character set to the database character set, if there is a difference.</p>
</div>
<!-- class="sect3" -->
<div id="CCAPP9056" class="sect3"><a id="sthref172"></a>
<h4 class="sect3"><span class="secnum">3.2.4.2</span> Mixed Character Set Columns<a id="sthref173"></a><a id="sthref174"></a></h4>
<p>If your document set contains documents with different character sets, such as JA16EUC and JA16SJIS, you can index the documents provided you create a charset column. You populate this column with the name of the document character set for each row. You name the column in the parameter clause of the <code>CREATE INDEX</code> statement.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHHJFJC"></a>
<div id="CCAPP9057" class="sect2">
<h3 class="sect2"><span class="secnum">3.2.5</span> Document Language<a id="sthref175"></a></h3>
<p>Oracle Text can index most languages. By default, Oracle Text assumes the language of text to index is the language you specify in your database setup. Depending on the language of your documents, use one of the following lexer types:</p>
<p>Use the <code><a id="sthref176"></a>BASIC_LEXER</code> preference type to index whitespace-delimited languages such as English, French, German, and Spanish. For some of these languages, you can enable alternate spelling, composite word indexing, and base letter conversion.</p>
<p>Use the <code>MULTI_LEXER</code> preference type for indexing tables containing documents of different languages such as English, German, and Japanese.</p>
<p>Use the <code>USER_LEXER</code> preference type to create your own lexer for indexing a particular language.</p>
<p>Use the <code>WORLD_LEXER</code> preference type for indexing tables containing documents of different languages and to autodetect the languages in the document.</p>
<p>You can also use other lexer types that are designed specifically to tokenize and index Japanese, Chinese, and Korean.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0217" href="../../text.112/e24436/cdatadic.htm#CCREF0217"><span class="italic">Oracle Text Reference</span></a> to learn more about indexing languages and lexer types</div>
<div id="CCAPP9058" class="sect3"><a id="sthref177"></a>
<h4 class="sect3"><span class="secnum">3.2.5.1</span> Language Features Outside BASIC_LEXER</h4>
<p>With the <code>BASIC_LEXER</code>, Japanese, Chinese and Korean lexers, Oracle Text provides a lexing solution for most languages. For other languages, you can create your own lexing solution using the user-defined lexer interface. This interface enables you to create a PL/SQL or Java procedure to process your documents during indexing and querying.</p>
<p>You can also use the user-defined lexer to create your own theme lexing solution or linguistic processing engine.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0217" href="../../text.112/e24436/cdatadic.htm#CCREF0217"><span class="italic">Oracle Text Reference</span></a> to learn more about the user-defined lexer</div>
</div>
<!-- class="sect3" -->
<div id="CCAPP9059" class="sect3"><a id="sthref178"></a>
<h4 class="sect3"><span class="secnum">3.2.5.2</span> Indexing Multi-language Columns<a id="sthref179"></a></h4>
<p>Oracle Text can index text columns that contain documents of different languages, such as a column that contains documents written in English, German, and Japanese. To index a multi-language column, you need a language column in your text table. Use the <code><a id="sthref180"></a>MULTI_LEXER</code> preference type.</p>
<p>You can also incorporate a multi-language stoplist when you index multi-language columns.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1007064">"MULTI_LEXER Example: Indexing a Multi-Language Table"</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHFFIFB"></a>
<div id="CCAPP9060" class="sect2">
<h3 class="sect2"><span class="secnum">3.2.6</span> Indexing Special Characters<a id="sthref181"></a><a id="sthref182"></a></h3>
<p>When you use the <code>BASIC_LEXER</code> preference type, you can specify how non-alphanumeric characters such as hyphens and periods are indexed in relation to the tokens that contain them. For example, you can specify that Oracle Text include or exclude hyphen character (-) when indexing a word such as <span class="italic">web-site</span>.</p>
<p>These characters fall into <code>BASIC_LEXER</code> categories according to the behavior you require during indexing. The way you set the lexer to behave for indexing is the way it behaves for query parsing.</p>
<p>Some of the special characters you can set are as follows:</p>
<ul>
<li>
<p><a href="#CIHBGCHG">Printjoin Characters</a></p>
</li>
<li>
<p><a href="#CIHGEDBG">Skipjoin Characters</a></p>
</li>
<li>
<p><a href="#CIHJIEDJ">Other Characters</a></p>
</li>
</ul>
<a id="CIHBGCHG"></a>
<div id="CCAPP9061" class="sect3">
<h4 class="sect3"><span class="secnum">3.2.6.1</span> Printjoin Characters<a id="sthref183"></a></h4>
<p>Define a non-alphanumeric character as <code>printjoin</code> when you want this character to be included in the token during indexing.</p>
<p>For example, if you want your index to include hyphens and underscore characters, define them as printjoins. This means that words such as <span class="italic">web-site</span> are indexed as <span class="italic">web-site</span>. A query on <span class="italic">website</span> does not find <span class="italic">web-site</span>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1007050">"BASIC_LEXER Example: Setting Printjoin Characters"</a></div>
</div>
<!-- class="sect3" -->
<a id="CIHGEDBG"></a>
<div id="CCAPP9062" class="sect3">
<h4 class="sect3"><span class="secnum">3.2.6.2</span> Skipjoin Characters<a id="sthref184"></a></h4>
<p>Define a non-alphanumeric character as a <code>skipjoin</code> when you do not want this character to be indexed with the token that contains it.</p>
<p>For example, with the hyphen (-) character defined as a skipjoin, the word <span class="italic">web-site</span> is indexed as <span class="italic">website</span>. A query on <span class="italic">web-site</span> finds documents containing <span class="italic">website</span> and <span class="italic">web-site</span>.</p>
</div>
<!-- class="sect3" -->
<a id="CIHJIEDJ"></a>
<div id="CCAPP9063" class="sect3">
<h4 class="sect3"><span class="secnum">3.2.6.3</span> Other Characters</h4>
<p>Other characters can be specified to control other tokenization behavior such as token separation (startjoins, endjoins, whitespace), punctuation identification (punctuations), number tokenization (numjoins), and word continuation after line-breaks (continuation). These categories of characters have defaults, which you can modify.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0218" href="../../text.112/e24436/cdatadic.htm#CCREF0218"><span class="italic">Oracle Text Reference</span></a> to learn more about the <code>BASIC_LEXER</code></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHIJEAJ"></a>
<div id="CCAPP9064" class="sect2">
<h3 class="sect2"><span class="secnum">3.2.7</span> Case-Sensitive Indexing and Querying<a id="sthref185"></a></h3>
<p>By default, all text tokens are converted to uppercase and then indexed. This results in case-insensitive queries. For example, separate queries on each of the three words <span class="italic">cat,</span> <span class="italic">CAT,</span> and <span class="italic">Cat</span> all return the same documents.</p>
<p>You can change the default and have the index record tokens as they appear in the text. When you create a case-sensitive index, you must specify your queries with exact case to match documents. For example, if a document contains <span class="italic">Cat</span>, you must specify your query as <span class="italic">Cat</span> to match this document. Specifying <span class="italic">cat</span> or <span class="italic">CAT</span> does not return the document.</p>
<p>To enable or disable case-sensitive indexing, use the <code>mixed_case</code> attribute of the <code>BASIC_LEXER</code> preference.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0218" href="../../text.112/e24436/cdatadic.htm#CCREF0218"><span class="italic">Oracle Text Reference</span></a> to learn more about the <code>BASIC_LEXER</code></div>
</div>
<!-- class="sect2" -->
<a id="CIHFFIEE"></a>
<div id="CCAPP9065" class="sect2">
<h3 class="sect2"><span class="secnum">3.2.8</span> Language-Specific Features<a id="sthref186"></a></h3>
<p>You can enable the following language-specific features at index time:</p>
<ul>
<li>
<p><a href="#CIHGFFDF">Indexing Themes</a></p>
</li>
<li>
<p><a href="#CIHBDGBF">Base-Letter Conversion for Characters with Diacritical Marks</a></p>
</li>
<li>
<p><a href="#CIHHBDCJ">Alternate Spelling</a></p>
</li>
<li>
<p><a href="#CIHCBHEH">Composite Words</a></p>
</li>
<li>
<p><a href="#CIHEBDGC">Korean, Japanese, and Chinese Indexing</a></p>
</li>
</ul>
<a id="CIHGFFDF"></a>
<div id="CCAPP9066" class="sect3">
<h4 class="sect3"><span class="secnum">3.2.8.1</span> Indexing Themes<a id="sthref187"></a></h4>
<p>For English and French, you can index document <span class="italic">theme</span> information. A document theme is a concept that is sufficiently developed in the document. Themes can be queried with the <code>ABOUT</code> operator.</p>
<p>You can index theme information in other languages provided you have loaded and compiled a knowledge base for the language.</p>
<p>By default themes are indexed in English and French. You can enable and disable theme indexing with the <code>index_themes</code> attribute of the <code>BASIC_LEXER</code> preference type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CCREF" href="../e24436/toc.htm"><span class="italic">Oracle Text Reference</span></a> to learn more about the <code>BASIC_LEXER</code></p>
</li>
<li>
<p><a href="query.htm#i1006398">"ABOUT Queries and Themes"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="CIHBDGBF"></a>
<div id="CCAPP9067" class="sect3">
<h4 class="sect3"><span class="secnum">3.2.8.2</span> Base-Letter Conversion for Characters with Diacritical Marks<a id="sthref188"></a><a id="sthref189"></a><a id="sthref190"></a><a id="sthref191"></a><a id="sthref192"></a></h4>
<p>Some languages contain characters with diacritical marks such as tildes, umlauts, and accents. When your indexing operation converts words containing diacritical marks to their base letter form, queries need not contain diacritical marks to score matches. For example in Spanish with a base-letter index, a query of <span class="italic">energ&iacute;a</span> matches <span class="italic">energ&iacute;a</span> and <span class="italic">energia</span> in the index.</p>
<p>However, with base-letter indexing disabled, a query of <span class="italic">energ&iacute;a</span> matches only <span class="italic">energ&iacute;a</span>.</p>
<p>You can enable and disable base-letter indexing for your language with the <code>base_letter</code> attribute of the <code>BASIC_LEXER</code> preference type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0218" href="../../text.112/e24436/cdatadic.htm#CCREF0218"><span class="italic">Oracle Text Reference</span></a> to learn more about the <code>BASIC_LEXER</code></div>
</div>
<!-- class="sect3" -->
<a id="CIHHBDCJ"></a>
<div id="CCAPP9068" class="sect3">
<h4 class="sect3"><span class="secnum">3.2.8.3</span> Alternate Spelling<a id="sthref193"></a><a id="sthref194"></a><a id="sthref195"></a></h4>
<p>Languages such as German, Danish, and Swedish contain words that have more than one accepted spelling. For instance, in German, <span class="italic">ae</span> can be substituted for <span class="italic">&auml;</span>. The <span class="italic">ae</span> character pair is known as the alternate form.</p>
<p>By default, Oracle Text indexes words in their alternate forms for these languages. Query terms are also converted to their alternate forms. The result is that these words can be queried with either spelling.</p>
<p>You can enable and disable alternate spelling for your language using the <code>alternate_spelling</code> attribute in the <code>BASIC_LEXER</code> preference type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0218" href="../../text.112/e24436/cdatadic.htm#CCREF0218"><span class="italic">Oracle Text Reference</span></a> to learn more about the <code>BASIC_LEXER</code></div>
</div>
<!-- class="sect3" -->
<a id="CIHCBHEH"></a>
<div id="CCAPP9069" class="sect3">
<h4 class="sect3"><span class="secnum">3.2.8.4</span> Composite Words<a id="sthref196"></a><a id="sthref197"></a></h4>
<p>German and Dutch text contain composite words. By default, Oracle Text creates composite indexes for these languages. The result is that a query on a term returns words that contain the term as a sub-composite.</p>
<p>For example, in German, a query on the term <span class="italic">Bahnhof</span> (train station) returns documents that contain <span class="italic">Bahnhof</span> or any word containing <span class="italic">Bahnhof</span> as a sub-composite, such as <span class="italic">Hauptbahnhof</span>, <span class="italic">Nordbahnhof</span>, or <span class="italic">Ostbahnhof</span>.</p>
<p>You can enable and disable the creation of composite indexes with the <code>composite</code> attribute of the <code>BASIC_LEXER</code> preference.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0218" href="../../text.112/e24436/cdatadic.htm#CCREF0218"><span class="italic">Oracle Text Reference</span></a> to learn more about the <code>BASIC_LEXER</code></div>
</div>
<!-- class="sect3" -->
<a id="CIHEBDGC"></a>
<div id="CCAPP9070" class="sect3">
<h4 class="sect3"><span class="secnum">3.2.8.5</span> Korean, Japanese, and Chinese Indexing<a id="sthref198"></a><a id="sthref199"></a><a id="sthref200"></a></h4>
<p>Index these languages with specific lexers:</p>
<div id="CCAPP9495" class="tblformal">
<p class="titleintable"><a id="sthref201"></a><a id="sthref202"></a>Table 3-3 Lexers for Asian Languages</p>
<table class="cellalignment117" title="Lexers for Asian Languages" summary="This table shows lexers for Asian languages." dir="ltr">
<thead>
<tr class="cellalignment106">
<th class="cellalignment116" id="r1c1-t30">Language</th>
<th class="cellalignment116" id="r1c2-t30">Lexer</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment106">
<td class="cellalignment112" id="r2c1-t30" headers="r1c1-t30">
<p>Korean</p>
</td>
<td class="cellalignment112" headers="r2c1-t30 r1c2-t30">
<p><code><a id="sthref203"></a>KOREAN_MORPH_LEXER</code></p>
</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r3c1-t30" headers="r1c1-t30">
<p>Japanese</p>
</td>
<td class="cellalignment112" headers="r3c1-t30 r1c2-t30">
<p><code><a id="sthref204"></a>JAPANESE_LEXER</code>, <code>JAPANESE_VGRAM_LEXER</code></p>
</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r4c1-t30" headers="r1c1-t30">
<p>Chinese</p>
</td>
<td class="cellalignment112" headers="r4c1-t30 r1c2-t30">
<p><code><a id="sthref205"></a>CHINESE_LEXER,CHINESE_VGRAM_LEXER</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>These lexers have their own sets of attributes to control indexing.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0217" href="../../text.112/e24436/cdatadic.htm#CCREF0217"><span class="italic">Oracle Text Reference</span></a> to learn more about these lexers</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHCCCIF"></a>
<div id="CCAPP9071" class="sect2">
<h3 class="sect2"><span class="secnum">3.2.9</span> Fuzzy Matching and Stemming<a id="sthref206"></a><a id="sthref207"></a></h3>
<p>Fuzzy matching enables you to match similarly spelled words in queries.</p>
<p>Stemming enables you to match words with the same linguistic root. For example a query on <span class="italic">$speak</span>, expands to search for all documents that contain <span class="italic">speak, speaks, spoke, and spoken.</span></p>
<p>Fuzzy matching and stemming are automatically enabled in your index if Oracle Text supports this feature for your language.</p>
<p>Fuzzy matching is enabled with default parameters for its similarity score lower limit and for its maximum number of expanded terms. At index time you can change these default parameters.</p>
<p>To improve the performance of stem queries, create a stem index by enabling the <code>index_stems</code> attribute of the <code>BASIC_LEXER</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0200" href="../../text.112/e24436/cdatadic.htm#CCREF0200"><span class="italic">Oracle Text Reference</span></a></div>
</div>
<!-- class="sect2" -->
<a id="CIHDJEED"></a>
<div id="CCAPP9072" class="sect2">
<h3 class="sect2"><span class="secnum">3.2.10</span> Better Wildcard Query Performance</h3>
<p>Wildcard queries enable you to enter left-truncated, right-truncated and doubly truncated queries, such as <span class="italic">%ing</span>, <span class="italic">cos%</span>, or <span class="italic">%benz%</span>. With normal indexing, these queries can sometimes expand into large word lists, degrading your query performance.</p>
<p>Wildcard queries have better response time when token prefixes and substrings are recorded in the index.</p>
<p>By default, token prefixes and substrings are not recorded in the Oracle Text index. If your query application makes heavy use of wildcard queries, consider indexing token prefixes and substrings. To do so, use the wordlist preference type. The trade-off is a bigger index for improved wildcard searching.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1007102">"BASIC_WORDLIST Example: Enabling Substring and Prefix Indexing"</a></div>
</div>
<!-- class="sect2" -->
<a id="CIHIAAIA"></a>
<div id="CCAPP9073" class="sect2">
<h3 class="sect2"><span class="secnum">3.2.11</span> Document Section Searching</h3>
<p>For documents that have internal structure such as HTML and XML, you can define and index document sections. Indexing document sections enables you to narrow the scope of your queries to within pre-defined sections. For example, you can specify a query to find all documents that contain the term <span class="italic">dog</span> within a section you define as <span class="italic">Headings</span>.</p>
<p>Sections must be defined prior to indexing and specified with the section group preference.</p>
<p>Oracle Text provides section groups with system-defined section definitions for HTML and XML. You can also specify that the system automatically create sections from XML documents during indexing.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="csection.htm#g1011230">Chapter 8, "Searching Document Sections in Oracle Text"</a></div>
</div>
<!-- class="sect2" -->
<a id="CIHCGIEA"></a>
<div id="CCAPP9074" class="sect2">
<h3 class="sect2"><span class="secnum">3.2.12</span> Stopwords and Stopthemes<a id="sthref208"></a><a id="sthref209"></a></h3>
<p>A <span class="italic">stopword</span> is a word that is not to be indexed. Usually stopwords are low information words in a given language such as <span class="italic">this</span> and <span class="italic">that</span> in English.</p>
<p>By default, Oracle Text provides a list of stopwords called a stoplist for indexing a given language. You can modify this list or create your own with the <code>CTX_DDL</code> package. You specify the stoplist in the parameter string of <code>CREATE INDEX</code>.</p>
<p>A stoptheme is a word that is prevented from being theme-indexed or prevented from contributing to a theme. You can add stopthemes with the <code>CTX_DDL</code> package.</p>
<p>You can search document themes with the <code>ABOUT</code> operator. You can retrieve document themes programatically with the <code>CTX_DOC</code> PL/SQL package.</p>
<div id="CCAPP9458" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref210"></a>
<h4 class="sect3"><span class="secnum">3.2.12.1</span> Language Detection and Stoplists</h4>
<p>At query time, the language of the query is inherited from the query template, or from the session language (if no language is specified through the query template).</p>
</div>
<!-- class="sect3" -->
<a id="i1006858"></a>
<div id="CCAPP9075" class="sect3">
<h4 class="sect3"><span class="secnum">3.2.12.2</span> Multi-Language Stoplists<a id="sthref211"></a></h4>
<p>You can also create multi-language stoplists to hold language-specific stopwords. A multi-language stoplist is useful when you use the <code>MULTI_LEXER</code> to index a table that contains documents in different languages, such as English, German, and Japanese.</p>
<p>At index creation, the language column of each document is examined, and only the stopwords for that language are eliminated. At query time, the session language setting determines the active stopwords, like it determines the active lexer when using the multi-lexer.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHEGJAA"></a>
<div id="CCAPP9076" class="sect2">
<h3 class="sect2"><span class="secnum">3.2.13</span> Index Performance</h3>
<p>There are factors that influence indexing performance including memory allocation, document format, degree of parallelism, and partitioned tables.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="aoptim.htm#i1006756">"Frequently Asked Questions About Indexing Performance"</a></div>
</div>
<!-- class="sect2" -->
<a id="CIHEJBED"></a>
<div id="CCAPP9077" class="sect2">
<h3 class="sect2"><span class="secnum">3.2.14</span> Query Performance and Storage of LOB Columns</h3>
<p>If your table contains LOB structured columns that are frequently accessed in queries but rarely updated, you can improve query performance by storing these columns out of line.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot map attributes to a remote LOB column.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="aoptim.htm#i1006643">"Does out of line LOB storage of wide base table columns improve performance?"</a></div>
</div>
<!-- class="sect2" -->
<a id="CIHJBDFG"></a>
<div id="CCAPP9078" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.2.15</span> Mixed Query Performance</h3>
<p>If your <code>CONTAINS()</code> query also has structured predicates on the non-text columns, then you may consider having the Text index also index those column values. To do so, specify those columns in the <code>FILTER</code> <code>BY</code> clause of the <code>CREATE</code> <code>INDEX</code> statement. This enables Oracle Text to determine whether to have the structured predicate(s) also be processed by the Text index for better performance.</p>
<p>Additionally, if your <code>CONTAINS()</code> query has <code>ORDER</code> <code>BY</code> criteria on one or more structured columns, then the Text index can also index those column values. Specify those columns in the <code>ORDER</code> <code>BY</code> clause of the <code>CREATE</code> <code>INDEX</code> statement. This enables Oracle Text to determine whether to push the sort into the Text index for better query response time.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIHHJJJE">"CONTEXT Index Example: Query Processing with FILTER BY and ORDER BY"</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006887"></a>
<div id="CCAPP9079" class="sect1">
<h2 class="sect1"><span class="secnum">3.3</span> Creating Oracle Text Indexes<a id="sthref212"></a></h2>
<p>You can create four types of indexes with Oracle Text: <code>CONTEXT</code>, <code>CTXCAT</code>, and <code>CTXRULE</code>, and <code>CTXXPATH</code>. The section contains these topics:</p>
<ul>
<li>
<p><a href="#CIHHFBEI">Summary of Procedure for Creating a Text Index</a></p>
</li>
<li>
<p><a href="#i1006972">Creating Preferences</a></p>
</li>
<li>
<p><a href="#CIHBBCII">Creating Section Groups for Section Searching</a></p>
</li>
<li>
<p><a href="#CIHBIBIB">Using Stopwords and Stoplists</a></p>
</li>
<li>
<p><a href="#CIHJAJFJ">Creating a CONTEXT Index</a></p>
</li>
<li>
<p><a href="#i1007263">Creating a CTXCAT Index</a></p>
</li>
<li>
<p><a href="#i1007378">Creating a CTXRULE Index</a></p>
</li>
</ul>
<a id="CIHHFBEI"></a>
<div id="CCAPP9080" class="sect2">
<h3 class="sect2"><span class="secnum">3.3.1</span> Summary of Procedure for Creating a Text Index<a id="sthref213"></a></h3>
<p>By default, the system expects your documents to be stored in a text column. Once this requirement is satisfied, you can create a Text index using the <code>CREATE</code> <code>INDEX</code> SQL statement as an extensible index of type <code>CONTEXT</code>, without explicitly specifying any preferences. The system automatically detects your language, the datatype of the text column, format of documents, and sets indexing preferences accordingly.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1007205">Default CONTEXT Index Example</a></div>
<p>To create an Oracle Text index:</p>
<ol>
<li>
<p>Optionally, determine your custom indexing preferences, section groups, or stoplists if not using defaults. The following table describes these indexing classes:</p>
<div class="inftblinformal">
<table class="cellalignment115" title="Determining Your Custom Index Preferences" summary="This table provides questions with which you can determine your indexing preferences." dir="ltr">
<thead>
<tr class="cellalignment106">
<th class="cellalignment116" id="r1c1-t40">Class</th>
<th class="cellalignment116" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment106">
<td class="cellalignment112" id="r2c1-t40" headers="r1c1-t40"><a id="sthref214"></a>Datastore</td>
<td class="cellalignment112" headers="r2c1-t40 r1c2-t40">How are your documents stored?</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r3c1-t40" headers="r1c1-t40"><a id="sthref215"></a>Filter</td>
<td class="cellalignment112" headers="r3c1-t40 r1c2-t40">How can the documents be converted to plaintext?</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r4c1-t40" headers="r1c1-t40"><a id="sthref216"></a>Lexer</td>
<td class="cellalignment112" headers="r4c1-t40 r1c2-t40">What language is being indexed?</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r5c1-t40" headers="r1c1-t40"><a id="sthref217"></a>Wordlist</td>
<td class="cellalignment112" headers="r5c1-t40 r1c2-t40">How should stem and fuzzy queries be expanded?</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r6c1-t40" headers="r1c1-t40"><a id="sthref218"></a>Storage</td>
<td class="cellalignment112" headers="r6c1-t40 r1c2-t40">How should the index data be stored?</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r7c1-t40" headers="r1c1-t40">Stop <a id="sthref219"></a>List</td>
<td class="cellalignment112" headers="r7c1-t40 r1c2-t40">What words or themes are not to be indexed?</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r8c1-t40" headers="r1c1-t40">Section Group<a id="sthref220"></a></td>
<td class="cellalignment112" headers="r8c1-t40 r1c2-t40">How are documents sections defined?</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></li>
<li>
<p>Optionally, create your own custom preferences, section groups, or stoplists. See <a href="#i1006972">"Creating Preferences"</a>.</p>
</li>
<li>
<p>Create the Text index with the SQL statement <code>CREATE</code> <code>INDEX</code>, naming your index and optionally specifying preferences. See <a href="#CIHJAJFJ">"Creating a CONTEXT Index"</a>.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006394">"Considerations For Indexing"</a> and CREATE INDEX topic in <a class="olink CCREF0200" href="../../text.112/e24436/cdatadic.htm#CCREF0200"><span class="italic">Oracle Text Reference</span></a></div>
</div>
<!-- class="sect2" -->
<a id="i1006972"></a>
<div id="CCAPP9081" class="sect2">
<h3 class="sect2"><span class="secnum">3.3.2</span> Creating Preferences<a id="sthref221"></a></h3>
<p>You can optionally create your own custom index preferences to override the defaults. Use the preferences to specify index information such as where your files are stored and how to filter your documents. You create the preferences then set the attributes.</p>
<a id="i1006976"></a>
<div id="CCAPP9082" class="sect3">
<h4 class="sect3"><span class="secnum">3.3.2.1</span> Datastore Examples</h4>
<p>The following sections give examples for setting direct, multi-column, URL, and file datastores.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0203" href="../../text.112/e24436/cdatadic.htm#CCREF0203"><span class="italic">Oracle Text Reference</span></a> for more information about data storage</div>
<div id="CCAPP9083" class="sect4"><a id="sthref222"></a>
<h5 class="sect4"><span class="secnum">3.3.2.1.1</span> Specifying DIRECT_DATASTORE<a id="sthref223"></a></h5>
<p>The following example creates a table with a <code>CLOB</code> column to store text data. It then populates two rows with text data and indexes the table using the system-defined preference <code>CTXSYS.DEFAULT_DATASTORE</code> which uses the <code>DIRECT_DATASTORE</code> preference type.</p>
<pre>
create table mytable(id number primary key, docs clob); 

insert into mytable values(111555,'this text will be indexed');
insert into mytable values(111556,'this is a default datastore example');
commit;

create index myindex on mytable(docs) 
  indextype is ctxsys.context 
  parameters ('DATASTORE CTXSYS.DEFAULT_DATASTORE');
</pre></div>
<!-- class="sect4" -->
<div id="CCAPP9084" class="sect4"><a id="sthref224"></a>
<h5 class="sect4"><span class="secnum">3.3.2.1.2</span> Specifying <a id="sthref225"></a>MULTI_COLUMN_DATASTORE</h5>
<p>The following example creates a multi-column datastore preference called <code>my_multi</code> on the three text columns to be concatenated and indexed:</p>
<pre>
begin
ctx_ddl.create_preference('my_multi', 'MULTI_COLUMN_DATASTORE');
ctx_ddl.set_attribute('my_multi', 'columns', 'column1, column2, column3');
end;
</pre></div>
<!-- class="sect4" -->
<div id="CCAPP9085" class="sect4"><a id="sthref226"></a>
<h5 class="sect4"><span class="secnum">3.3.2.1.3</span> Specifying URL Data Storage</h5>
<p>This example creates a <code><a id="sthref227"></a>URL_DATASTORE</code> preference called <code>my_url</code> to which the <code>http_proxy</code>, <code>no_proxy</code>, and <code>timeout</code> attributes are set. The timeout attribute is set to 300 seconds. The defaults are used for the attributes that are not set.</p>
<pre>
begin
 ctx_ddl.create_preference('my_url','URL_DATASTORE');
 ctx_ddl.set_attribute('my_url','HTTP_PROXY','www-proxy.us.oracle.com');
 ctx_ddl.set_attribute('my_url','NO_PROXY','us.oracle.com');
 ctx_ddl.set_attribute('my_url','Timeout','300');
end;
</pre></div>
<!-- class="sect4" -->
<div id="CCAPP9086" class="sect4"><a id="sthref228"></a>
<h5 class="sect4"><span class="secnum">3.3.2.1.4</span> Specifying File Data Storage<a id="sthref229"></a></h5>
<p>The following example creates a data storage preference using the <code><a id="sthref230"></a>FILE_DATASTORE</code>. This tells the system that the files to be indexed are stored in the operating system. The example uses <code>CTX_DDL.SET_ATTRIBUTE</code> to set the PATH attribute of to the directory <code>/docs</code>.</p>
<pre>
begin
ctx_ddl.create_preference('mypref', 'FILE_DATASTORE');
ctx_ddl.set_attribute('mypref', 'PATH', '/docs'); 
end;
</pre></div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="i1007026"></a>
<div id="CCAPP9087" class="sect3">
<h4 class="sect3"><span class="secnum">3.3.2.2</span> NULL_FILTER Example: Indexing HTML Documents<a id="sthref231"></a><a id="sthref232"></a><a id="sthref233"></a><a id="sthref234"></a></h4>
<p>If your document set is entirely in HTML, then Oracle recommends that you use the <code>NULL_FILTER</code> in your filter preference, which does no filtering.</p>
<p>For example, to index an HTML document set, you can specify the system-defined preferences for <code>NULL_FILTER</code> and <code>HTML_SECTION_GROUP</code> as follows:</p>
<pre>
create index myindex on docs(htmlfile) indextype is ctxsys.context 
  parameters('filter ctxsys.null_filter
  section group ctxsys.html_section_group');
</pre></div>
<!-- class="sect3" -->
<a id="i1007035"></a>
<div id="CCAPP9088" class="sect3">
<h4 class="sect3"><span class="secnum">3.3.2.3</span> PROCEDURE_FILTER Example</h4>
<p>Consider a filter procedure <code>CTXSYS.NORMALIZE</code> that you define with the following signature:</p>
<pre>
PROCEDURE NORMALIZE(id IN ROWID, charset IN VARCHAR2, input IN CLOB, 
output IN OUT NOCOPY VARCHAR2);
</pre>
<p>To use this procedure as your filter, you set up your filter preference as follows:</p>
<pre>
begin
</pre>
<pre>
ctx_ddl.create_preference('myfilt', 'procedure_filter');
ctx_ddl.set_attribute('myfilt', 'procedure', 'normalize');
ctx_ddl.set_attribute('myfilt', 'input_type', 'clob');
ctx_ddl.set_attribute('myfilt', 'output_type', 'varchar2');
ctx_ddl.set_attribute('myfilt', 'rowid_parameter', 'TRUE');
ctx_ddl.set_attribute('myfilt', 'charset_parameter', 'TRUE');
</pre>
<pre>
end;
</pre></div>
<!-- class="sect3" -->
<a id="i1007050"></a>
<div id="CCAPP9089" class="sect3">
<h4 class="sect3"><span class="secnum">3.3.2.4</span> BASIC_LEXER Example: Setting Printjoin Characters</h4>
<p>Printjoin characters are non-alphanumeric characters that are to be included in index tokens, so that words such as <span class="italic">web-site</span> are indexed as <span class="italic">web-site</span>.</p>
<p><a id="i1007054"></a>The following example sets printjoin characters to be the hyphen and underscore with the <code>BASIC_LEXER</code>:</p>
<pre>
begin
ctx_ddl.create_preference('mylex', 'BASIC_LEXER');
ctx_ddl.set_attribute('mylex', 'printjoins', '_-');
end;
</pre>
<p>To create the index with printjoins characters set as previously shown, enter the following statement:</p>
<pre>
create index myindex on mytable ( docs ) 
  indextype is ctxsys.context 
  parameters ( 'LEXER mylex' ); 
</pre></div>
<!-- class="sect3" -->
<a id="i1007064"></a>
<div id="CCAPP9090" class="sect3">
<h4 class="sect3"><span class="secnum">3.3.2.5</span> MULTI_LEXER Example: Indexing a Multi-Language Table<a id="sthref235"></a><a id="sthref236"></a></h4>
<p><a id="i1007067"></a>You use the <code>MULTI_LEXER</code> preference type to index a column containing documents in different languages. For example, you can use this preference type when your text column stores documents in English, German, and French.</p>
<p>The first step is to create the multi-language table with a primary key, a text column, and a language column as follows:</p>
<pre>
create table globaldoc (
   doc_id number primary key,
   lang varchar2(3),
   text clob
);
</pre>
<p>Assume that the table holds mostly English documents, with some German and Japanese documents. To handle the three languages, you must create three sub-lexers, one for English, one for German, and one for Japanese:</p>
<pre>
ctx_ddl.create_preference('english_lexer','basic_lexer');
ctx_ddl.set_attribute('english_lexer','index_themes','yes');
ctx_ddl.set_attribute('english_lexer','theme_language','english');

ctx_ddl.create_preference('german_lexer','basic_lexer');
ctx_ddl.set_attribute('german_lexer','composite','german');
ctx_ddl.set_attribute('german_lexer','mixed_case','yes');
ctx_ddl.set_attribute('german_lexer','alternate_spelling','german');

ctx_ddl.create_preference('japanese_lexer','japanese_vgram_lexer');
</pre>
<p>Create the multi-lexer preference:</p>
<pre>
ctx_ddl.create_preference('global_lexer', 'multi_lexer');
</pre>
<p>Because the stored documents are mostly English, make the English lexer the default using <code>CTX_DDL.ADD_SUB_LEXER</code>:</p>
<pre>
ctx_ddl.add_sub_lexer('global_lexer','default','english_lexer');
</pre>
<p>Now add the German and Japanese lexers in their respective languages with <code>CTX_DDL.ADD_SUB_LEXER</code> procedure. Also assume that the language column is expressed in the standard ISO 639-2 language codes, so add those as alternate values.</p>
<pre>
ctx_ddl.add_sub_lexer('global_lexer','german','german_lexer','ger');
ctx_ddl.add_sub_lexer('global_lexer','japanese','japanese_lexer','jpn');
</pre>
<p>Now create the index <code>globalx</code>, specifying the multi-lexer preference and the language column in the parameter clause as follows:</p>
<pre>
create index globalx on globaldoc(text) indextype is ctxsys.context
parameters ('lexer global_lexer language column lang');
</pre></div>
<!-- class="sect3" -->
<a id="i1007102"></a>
<div id="CCAPP9091" class="sect3">
<h4 class="sect3"><span class="secnum">3.3.2.6</span> BASIC_WORDLIST Example: Enabling Substring and Prefix Indexing</h4>
<p>The following example sets the wordlist preference for prefix and substring indexing. Having a prefix and sub-string component to your index improves performance for wildcard queries.</p>
<p>For prefix indexing, the example specifies that Oracle Text create token prefixes between three and four characters long:</p>
<pre>
begin 
</pre>
<pre>
ctx_ddl.create_preference('mywordlist', 'BASIC_WORDLIST'); 
ctx_ddl.set_attribute('mywordlist','PREFIX_INDEX','TRUE');
ctx_ddl.set_attribute('mywordlist','PREFIX_MIN_LENGTH', '3');
ctx_ddl.set_attribute('mywordlist','PREFIX_MAX_LENGTH', '4');
ctx_ddl.set_attribute('mywordlist','SUBSTRING_INDEX', 'YES');
</pre>
<pre>
end;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHBBCII"></a>
<div id="CCAPP9092" class="sect2">
<h3 class="sect2"><span class="secnum">3.3.3</span> Creating Section Groups for Section Searching<a id="sthref237"></a><a id="sthref238"></a><a id="sthref239"></a></h3>
<p>When documents have internal structure such as in HTML and XML, you can define document sections using embedded tags before you index. This enables you to query within the sections using the <code>WITHIN</code> operator. You define sections as part of a section group.</p>
<div id="CCAPP9093" class="sect3"><a id="sthref240"></a>
<h4 class="sect3"><span class="secnum">3.3.3.1</span> Example: Creating HTML Sections<a id="sthref241"></a><a id="sthref242"></a></h4>
<p>The following code defines a section group called <code>htmgroup</code> of type <code>HTML_SECTION_GROUP.</code> It then creates a zone section in <code>htmgroup</code> called <code>heading</code> identified by the &lt;H1&gt; tag:</p>
<pre>
begin
ctx_ddl.create_section_group('htmgroup', 'HTML_SECTION_GROUP');
ctx_ddl.add_zone_section('htmgroup', 'heading', 'H1');
end;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="csection.htm#g1011230">Chapter 8, "Searching Document Sections in Oracle Text"</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHBIBIB"></a>
<div id="CCAPP9094" class="sect2">
<h3 class="sect2"><span class="secnum">3.3.4</span> Using Stopwords and Stoplists<a id="sthref243"></a><a id="sthref244"></a></h3>
<p>A stopword is a word that is not to be indexed. A stopword is usually a low information word such as <span class="italic">this</span> or <span class="italic">that</span> in English.</p>
<p>The system supplies a list of stopwords called a stoplist for every language. By default during indexing, the system uses the Oracle Text default stoplist for your language.</p>
<p>You can edit the default stoplist <code>CTXSYS.DEFAULT_STOPLIST</code> or create your own with the following PL/SQL procedures:</p>
<ul>
<li>
<p><code>CTX_DDL.<a id="sthref245"></a>CREATE_STOPLIST</code></p>
</li>
<li>
<p><code>CTX_DDL.<a id="sthref246"></a>ADD_STOPWORD</code></p>
</li>
<li>
<p><code>CTX_DDL.<a id="sthref247"></a>REMOVE_STOPWORD</code></p>
</li>
</ul>
<p>You specify your custom stoplists in the parameter clause of <code>CREATE INDEX</code>.</p>
<p>You can also dynamically add stopwords after indexing with the <code>ALTER INDEX</code> statement.</p>
<div id="CCAPP9095" class="sect3"><a id="sthref248"></a>
<h4 class="sect3"><span class="secnum">3.3.4.1</span> Multi-Language Stoplists<a id="sthref249"></a><a id="sthref250"></a></h4>
<p>You can create multi-language stoplists to hold language-specific stopwords. A multi-language stoplist is useful when you use the <code>MULTI_LEXER</code> to index a table that contains documents in different languages, such as English, German, and Japanese.</p>
<p>To create a multi-language stoplist, use the <code>CTX_DLL.CREATE_STOPLIST</code> procedure and specify a stoplist type of <code>MULTI_STOPLIST</code>. You add language specific stopwords with <code>CTX_DDL.ADD_STOPWORD</code>.</p>
</div>
<!-- class="sect3" -->
<div id="CCAPP9096" class="sect3"><a id="sthref251"></a>
<h4 class="sect3"><span class="secnum">3.3.4.2</span> Stopthemes and Stopclasses<a id="sthref252"></a><a id="sthref253"></a></h4>
<p><a id="sthref254"></a><a id="sthref255"></a><a id="sthref256"></a>In addition to defining your own stopwords, you can define stopthemes, which are themes that are not to be indexed. This feature is available for English and French only.</p>
<p>You can also specify that numbers are not to be indexed. A class of alphanumeric characters such a numbers that is not to be indexed is a <span class="italic">stopclass</span>.</p>
<p>You record your own stopwords, stopthemes, stopclasses by creating a single stoplist, to which you add the stopwords, stopthemes, and stopclasses. You specify the stoplist in the <span class="syntaxinline">paramstring</span> for <code>CREATE INDEX</code>.</p>
</div>
<!-- class="sect3" -->
<div id="CCAPP9097" class="sect3"><a id="sthref257"></a>
<h4 class="sect3"><span class="secnum">3.3.4.3</span> PL/SQL Procedures for Managing Stoplists<a id="sthref258"></a></h4>
<p>You use the following procedures to manage stoplists, stopwords, stopthemes, and stopclasses:</p>
<ul>
<li>
<p><code>CTX_DDL.<a id="sthref259"></a>CREATE_STOPLIST</code></p>
</li>
<li>
<p><code>CTX_DDL.<a id="sthref260"></a>ADD_STOPWORD</code></p>
</li>
<li>
<p><code>CTX_DDL.<a id="sthref261"></a><a id="sthref262"></a>ADD_STOPTHEME</code></p>
</li>
<li>
<p><code>CTX_DDL.<a id="sthref263"></a>ADD_STOPCLASS</code></p>
</li>
<li>
<p><code>CTX_DDL.<a id="sthref264"></a>REMOVE_STOPWORD</code></p>
</li>
<li>
<p><code>CTX_DDL.<a id="sthref265"></a>REMOVE_STOPTHEME</code></p>
</li>
<li>
<p><code>CTX_DDL.<a id="sthref266"></a>REMOVE_STOPCLASS</code></p>
</li>
<li>
<p><code>CTX_DDL.<a id="sthref267"></a>DROP_STOPLIST</code></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0600" href="../../text.112/e24436/cddlpkg.htm#CCREF0600"><span class="italic">Oracle Text Reference</span></a> to learn more about using these statements</div>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHJAJFJ"></a>
<div id="CCAPP9099" class="sect2">
<h3 class="sect2"><span class="secnum">3.3.5</span> Creating a CONTEXT Index<a id="sthref268"></a></h3>
<p>The <code>CONTEXT</code> index type is well suited for indexing large coherent documents in formats such as Microsoft Word, HTML, or plain text. With a <code>CONTEXT</code> index, you can also customize your index in a variety of ways. The documents must be loaded in a text table.</p>
<a id="CIHEBDIH"></a>
<div id="CCAPP9100" class="sect3">
<h4 class="sect3"><span class="secnum">3.3.5.1</span> CONTEXT Index and DML</h4>
<p>A <code>CONTEXT</code> index is not transactional. When a record is deleted, the index change is immediate. That is, your own session will no longer find the record from the moment you make the change, and other users will not find the record as soon as you commit. For inserts and updates, the new information will not be visible to text searches until an index synchronization has occurred. Therefore, when you perform inserts or updates on the base table, you must explicitly synchronize the index with <code>CTX_DDL.SYNC_INDEX</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1008452">"Synchronizing the Index"</a></div>
</div>
<!-- class="sect3" -->
<a id="i1007205"></a>
<div id="CCAPP9101" class="sect3">
<h4 class="sect3"><span class="secnum">3.3.5.2</span> Default CONTEXT Index Example<a id="sthref269"></a><a id="sthref270"></a></h4>
<p>The following statement creates a default <code>CONTEXT</code> index called <code>myindex</code> on the <code>text</code> column in the <code>docs</code> table:</p>
<pre>
CREATE INDEX myindex ON docs(text) INDEXTYPE IS CTXSYS.CONTEXT;
</pre>
<p>When you use <code>CREATE INDEX</code> without explicitly specifying parameters, the system does the following actions by default for all languages:</p>
<ul>
<li>
<p><a id="sthref271"></a><a id="sthref272"></a><a id="sthref273"></a><a id="sthref274"></a><a id="sthref275"></a><a id="sthref276"></a><a id="sthref277"></a><a id="sthref278"></a>Assumes that the text to be indexed is stored directly in a text column. The text column can be of type <code>CLOB</code>, <code>BLOB</code>, <code>BFILE</code>, <code>VARCHAR2</code>, or <code>CHAR</code>.</p>
</li>
<li>
<p><a id="sthref279"></a>Detects the column type and uses filtering for the binary column types of <code>BLOB</code> and <code>BFILE</code>. Most document formats are supported for filtering. If your column is plain text, the system does not use filtering.</p>
<div class="infoboxnotealso">
<p class="notep1">Note:</p>
For document filtering to work correctly in your system, you must ensure that your environment is set up correctly to support the <code>AUTO_FILTER</code> filter.
<p>To learn more about configuring your environment to use the <code>AUTO_FILTER</code> filter, see the <a class="olink CCREF1300" href="../../text.112/e24436/afilsupt.htm#CCREF1300"><span class="italic">Oracle Text Reference</span></a>.</p>
</div>
</li>
<li>
<p><a id="sthref280"></a>Assumes the language of text to index is the language you specify in your database setup.</p>
</li>
<li>
<p><a id="sthref281"></a>Uses the default stoplist for the language you specify in your database setup. Stoplists identify the words that the system ignores during indexing.</p>
</li>
<li>
<p><a id="sthref282"></a><a id="sthref283"></a>Enables fuzzy and stemming queries for your language, if this feature is available for your language.</p>
</li>
</ul>
<p>You can always change the default indexing behavior by creating your own preferences and specifying these custom preferences in the parameter string of <code>CREATE</code> <code>INDEX</code>.</p>
</div>
<!-- class="sect3" -->
<div id="CCAPP9470" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref284"></a>
<h4 class="sect3"><span class="secnum">3.3.5.3</span> Incrementally Creating an Index with ALTER INDEX and CREATE INDEX</h4>
<p><a id="sthref285"></a>The <code>ALTER</code> <code>INDEX</code> and <code>CREATE</code> <code>INDEX</code> statements support incrementally creating a global <code>CONTEXT</code> index.</p>
<ul>
<li>
<p><a id="sthref286"></a>For creating a global index, <code>CREATE</code> <code>INDEX</code> supports the <code>NOPOPULATE</code> keyword of the <code>REBUILD</code> clause. Using the <code>NOPOPULATE</code> keyword in the <code>REPLACE</code> parameter, you can create indexes incrementally. This is valuable for creating text indexes in large installations that cannot afford to have the indexing process running continuously.</p>
</li>
<li>
<p>For creating a local index partition, <code>ALTER</code> <code>INDEX</code> ... <code>REBUILD</code> <code>partition</code> ... <code>parameters</code> ('<code>REPLACE</code> ...') parameter string is modified to support the <code>NOPOPULATE</code> keyword.</p>
</li>
<li>
<p>For creating a partition on a local index, <code>CREATE</code> <code>INDEX</code> ... <code>LOCAL</code> ... (<code>partition</code> ... <code>parameters</code> ('<code>NOPOPULATE</code>')) is supported. The partition-level <code>POPULATE</code> or <code>NOPOPULATE</code> keywords override any <code>POPULATE</code> or <code>NOPOPULATE</code> specified at the index level.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0101" href="../../text.112/e24436/csql.htm#CCREF0101"><span class="italic">Oracle Text Reference</span></a> to learn more about the syntax for the <code>ALTER</code> <code>INDEX</code> and <code>CREATE</code> <code>INDEX</code> statements</div>
</div>
<!-- class="sect3" -->
<a id="CIHCAGHA"></a>
<div id="CCAPP9459" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">3.3.5.4</span> Creating a CONTEXT Index Incrementally with <a id="sthref287"></a>POPULATE_PENDING</h4>
<p>For large installations that cannot afford to have the indexing process run continuously, you can use the <code>CTX_DDL.</code><a class="olink CCREF2110" href="../../text.112/e24436/cddlpkg.htm#CCREF2110"><code>POPULATE_PENDING</code></a> procedure. This also provides finer control over creating the indexes. The preferred method is to create an empty index, place all the rowids into the pending queue, and build the index through <code>CTX_DDL.</code><a class="olink CCREF0652" href="../../text.112/e24436/cddlpkg.htm#CCREF0652"><code>SYNC_INDEX</code></a>.</p>
<p>This procedure populates the pending queue with every rowid in the base table or table partition.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF2110" href="../../text.112/e24436/cddlpkg.htm#CCREF2110"><span class="italic">Oracle Text Reference</span></a> for information about <code>CTX.DDL.POPULATE_PENDING</code></div>
</div>
<!-- class="sect3" -->
<a id="CIHHHCGI"></a>
<div id="CCAPP9102" class="sect3">
<h4 class="sect3"><span class="secnum">3.3.5.5</span> Custom CONTEXT Index Example: Indexing HTML Documents<a id="sthref288"></a></h4>
<p>To index an HTML document set located by URLs, you can specify the system-defined preference for the <code>NULL_FILTER</code> in the <code>CREATE</code> <code>INDEX</code> statement.</p>
<p>You can also specify your section group <code>htmgroup</code> that uses <code>HTML_SECTION_GROUP</code> and datastore <code>my_url</code> that uses <code>URL_DATASTORE</code> as follows:</p>
<pre>
begin
 ctx_ddl.create_preference('my_url','URL_DATASTORE');
 ctx_ddl.set_attribute('my_url','HTTP_PROXY','www-proxy.us.oracle.com');
 ctx_ddl.set_attribute('my_url','NO_PROXY','us.oracle.com');
 ctx_ddl.set_attribute('my_url','Timeout','300');
end;

begin
ctx_ddl.create_section_group('htmgroup', 'HTML_SECTION_GROUP');
ctx_ddl.add_zone_section('htmgroup', 'heading', 'H1');
end;
</pre>
<p>You can then index your documents as follows:</p>
<pre>
CREATE INDEX myindex on docs(htmlfile) indextype is ctxsys.context 
parameters(
'datastore my_url filter ctxsys.null_filter section group htmgroup'
);
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006972">"Creating Preferences"</a> for more examples on creating a custom <code>context</code> index</div>
</div>
<!-- class="sect3" -->
<a id="CIHHJJJE"></a>
<div id="CCAPP9103" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">3.3.5.6</span> CONTEXT Index Example: Query Processing with FILTER BY and ORDER BY</h4>
<p>To enable more efficient query processing and better response time for mixed queries, you can use <code>FILTER</code> <code>BY</code> and <code>ORDER</code> <code>BY</code> clauses as shown in the following example.</p>
<pre>
CREATE INDEX myindex on docs(text) INDEXTYPE is CTXSYS.CONTEXT
FILTER BY category, publisher, pub_date
ORDER BY pub_date desc;
</pre>
<p>In this example, by specifying the clause <code>FILTER</code> <code>BY</code> <code>category,</code> <code>publisher,</code> <code>pub_date</code> at query time, Oracle Text will also consider pushing any relational predicate on any of these columns into the Text index row source for more efficient query processing.</p>
<p>Also, when the query has matching <code>ORDER</code> <code>BY</code> criteria, by specifying <code>ORDER</code> <code>BY</code> <code>pub_date desc</code>, Oracle Text will determine whether to push the <code>SORT</code> into the Text index row source for better response time.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1007263"></a>
<div id="CCAPP9104" class="sect2">
<h3 class="sect2"><span class="secnum">3.3.6</span> Creating a CTXCAT Index<a id="sthref289"></a></h3>
<p><a id="sthref290"></a>The <code>CTXCAT</code> indextype is well-suited for indexing small text fragments and related information. If created correctly, this type of index can provide better structured query performance over a <code>CONTEXT</code> index.</p>
<div id="CCAPP9105" class="sect3"><a id="sthref291"></a>
<h4 class="sect3"><span class="secnum">3.3.6.1</span> CTXCAT Index and DML</h4>
<p>A <code>CTXCAT</code> index is transactional. When you perform DML (inserts, updates, and deletes) on the base table, Oracle Text automatically synchronizes the index. Unlike a <code>CONTEXT</code> index, no <code>CTX_DDL.SYNC_INDEX</code> is necessary.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Applications that insert without invoking triggers such as SQL*Loader will not result in automatic index synchronization as described in this section.</div>
</div>
<!-- class="sect3" -->
<div id="CCAPP9106" class="sect3"><a id="sthref292"></a>
<h4 class="sect3"><span class="secnum">3.3.6.2</span> About CTXCAT Sub-Indexes and Their Costs</h4>
<p>A <code>CTXCAT</code> index comprises sub-indexes that you define as part of your index set. You create a sub-index on one or more columns to improve mixed query performance. However, adding sub-indexes to the index set has its costs. The time Oracle Text takes to create a <code>CTXCAT</code> index depends on its total size, and the total size of a <code>CTXCAT</code> index is directly related to the following factors:</p>
<ul>
<li>
<p>Total text to be indexed</p>
</li>
<li>
<p>Number of sub-indexes in the index set</p>
</li>
<li>
<p>Number of columns in the base table that make up the sub-indexes</p>
</li>
</ul>
<p>Having many component indexes in your index set also degrades DML performance, because more indexes must be updated.</p>
<p>Because of the added index time and disk space costs for creating a <code>CTXCAT</code> index, carefully consider the query performance benefit that each component index gives your application before adding it to your index set.</p>
</div>
<!-- class="sect3" -->
<div id="CCAPP9107" class="sect3"><a id="sthref293"></a>
<h4 class="sect3"><span class="secnum">3.3.6.3</span> Creating CTXCAT Sub-indexes</h4>
<p>An online auction site that must store item descriptions, prices and bid-close dates for ordered look-up provides a good example for creating a <code>CTXCAT</code> index.</p>
<div id="CCAPP9496" class="figure">
<p class="titleinfigure"><a id="BABJBCGB"></a>Figure 3-3 Auction Table Schema and CTXCAT Index</p>
<img width="451" height="263" src="img/ccapp010.gif" alt="Description of Figure 3-3 follows" /><br />
<a id="sthref294" href="img_text/ccapp010.htm">Description of "Figure 3-3 Auction Table Schema and CTXCAT Index"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a href="#BABJBCGB">Figure 3-3</a> shows a table called <code>AUCTION</code> with the following schema:</p>
<pre>
create table auction(
</pre>
<pre>
item_id number,
title varchar2(100),
category_id number,
price number,
bid_close date);
</pre>
<pre>
</pre>
<p>To create your sub-indexes, create an index set to contain them:</p>
<pre>
begin
</pre>
<pre>
ctx_ddl.create_index_set('auction_iset');
</pre>
<pre>
end;
</pre>
<p>Next, determine the structured queries your application is likely to enter. The <code><a id="sthref295"></a>CATSEARCH</code> query operator takes a mandatory text clause and optional structured clause.</p>
<p>In our example, this means all queries include a clause for the <code>title</code> column which is the text column.</p>
<p>Assume that the structured clauses fall into the following categories:</p>
<div class="inftblinformal">
<table class="cellalignment115" title="Sample Structured Clauses" summary="This table describes structured clauses for queries on a sample index." dir="ltr">
<thead>
<tr class="cellalignment106">
<th class="cellalignment116" id="r1c1-t51">Structured Clauses</th>
<th class="cellalignment116" id="r1c2-t51">Sub-index Definition to Serve Query</th>
<th class="cellalignment116" id="r1c3-t51">Category</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment106">
<td class="cellalignment112" id="r2c1-t51" headers="r1c1-t51">'price &lt; 200'
<p>'price = 150'</p>
<p>'order by price'</p>
</td>
<td class="cellalignment112" headers="r2c1-t51 r1c2-t51">'price'</td>
<td class="cellalignment112" headers="r2c1-t51 r1c3-t51">A</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r3c1-t51" headers="r1c1-t51">'price = 100 order by bid_close'
<p>'order by price, bid_close'</p>
</td>
<td class="cellalignment112" headers="r3c1-t51 r1c2-t51">'price, bid_close'</td>
<td class="cellalignment112" headers="r3c1-t51 r1c3-t51">B</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div id="CCAPP9108" class="sect4"><a id="sthref296"></a>
<h5 class="sect4"><span class="secnum">3.3.6.3.1</span> Structured Query Clause Category A</h5>
<p>The structured query clause contains an expression for only the price column as follows:</p>
<pre>
SELECT FROM auction WHERE CATSEARCH(title, 'camera', 'price &lt; 200')&gt; 0;
SELECT FROM auction WHERE CATSEARCH(title, 'camera', 'price = 150')&gt; 0;
SELECT FROM auction WHERE CATSEARCH(title, 'camera', 'order by price')&gt; 0;
</pre>
<p>These queries can be served using sub-index B, but for efficiency you can also create a sub-index only on <code>price</code>, which we call sub-index A:</p>
<pre>
begin
</pre>
<pre>
ctx_ddl.add_index('auction_iset','price'); /* sub-index A */
</pre>
<pre>
end;
</pre></div>
<!-- class="sect4" -->
<div id="CCAPP9109" class="sect4"><a id="sthref297"></a>
<h5 class="sect4"><span class="secnum">3.3.6.3.2</span> Structured Query Clause Category B</h5>
<p>The structured query clause includes an equivalence expression for <code>price</code> ordered by <code>bid_close</code>, and an expression for ordering by price and <code>bid_close</code> in that order:</p>
<pre>
SELECT FROM auction WHERE CATSEARCH(
   title, 'camera','price = 100 
   ORDER BY bid_close')&gt; 0;
SELECT FROM auction 
   WHERE CATSEARCH(
   title, 'camera','order by price, bid_close')&gt; 0;
</pre>
<p>These queries can be served with a sub-index defined as follows:</p>
<pre>
begin
</pre>
<pre>
ctx_ddl.add_index('auction_iset','price, bid_close'); /* sub-index B */
</pre>
<pre>
end;
</pre>
<p>Like a combined b-tree index, the column order you specify with <code>CTX_DDL.ADD_INDEX</code> affects the efficiency and viability of the index scan Oracle Text uses to serve specific queries. For example, if two structured columns <code>p</code> and <code>q</code> have a b-tree index specified as <code>'p,q'</code>, Oracle Text cannot scan this index to sort <code>'ORDER</code> <code>BY q,p'</code>.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<div id="CCAPP9110" class="sect3"><a id="sthref298"></a>
<h4 class="sect3"><span class="secnum">3.3.6.4</span> Creating CTXCAT Index</h4>
<p>The following example combines the previous examples and creates the index set preference with the two sub-indexes:</p>
<pre>
begin
</pre>
<pre>
ctx_ddl.create_index_set('auction_iset');
ctx_ddl.add_index('auction_iset','price'); /* sub-index A */
ctx_ddl.add_index('auction_iset','price, bid_close'); /* sub-index B */
</pre>
<pre>
end;
</pre>
<p><a href="#BABJBCGB">Figure 3-3</a> shows how the sub-indexes A and B are created from the auction table. Each sub-index is a b-tree index on the text column and the named structured columns. For example, sub-index A is an index on the <code>title</code> column and the <code>bid_close</code> column.</p>
<p>You create the combined catalog index with <code>CREATE</code> <code>INDEX</code> as follows:</p>
<pre>
CREATE INDEX auction_titlex ON AUCTION(title) 
  INDEXTYPE IS CTXSYS.CTXCAT 
  PARAMETERS ('index set auction_iset')
;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0105" href="../../text.112/e24436/csql.htm#CCREF0105"><span class="italic">Oracle Text Reference</span></a> to learn more about creating a <code>CTXCAT</code> index with <code>CREATE</code><code>INDEX</code></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1007378"></a>
<div id="CCAPP9111" class="sect2">
<h3 class="sect2"><span class="secnum">3.3.7</span> Creating a CTXRULE Index<a id="sthref299"></a><a id="sthref300"></a></h3>
<p>You use the <code>CTXRULE</code> index to build a document classification application. In such an application, a stream of incoming documents is classified based on their content. Document routing is achieved by creating a <code>CTXRULE</code> index on a table or queries. The queries define your categories. You can use the <code>MATCHES</code> operator to classify single documents.</p>
<p>This section contains the following steps toward creating a <code>CTXRULE</code> index and a simple document classification application:</p>
<ul>
<li>
<p><a href="#CIHBAIJH">Step One: Create a Table of Queries</a></p>
</li>
<li>
<p><a href="#CIHFBCJB">Step Two: Create the CTXRULE Index</a></p>
</li>
<li>
<p><a href="#CIHGFHDC">Step Three: Classify a Document</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="classify.htm#g1011013">Chapter 6, "Classifying Documents in Oracle Text"</a> for more information on document classification and the <code>CTXRULE</code> index</div>
<a id="CIHBAIJH"></a>
<div id="CCAPP9112" class="sect3">
<h4 class="sect3"><span class="secnum">3.3.7.1</span> Step One: Create a Table of Queries</h4>
<p>The first step is to create a table of queries that define your classifications. We create a table <code>myqueries</code> to hold the category name and query text:</p>
<pre>
CREATE TABLE myqueries (
</pre>
<pre>
queryid NUMBER PRIMARY KEY,
category VARCHAR2(30),
query VARCHAR2(2000)
</pre>
<pre>
);
</pre>
<p>Populate the table with the classifications and the queries that define each. For example, consider a classification for the subjects <span class="italic">US Politics</span>, <span class="italic">Music</span>, and <span class="italic">Soccer</span>.:</p>
<pre>
INSERT INTO myqueries VALUES(1, 'US Politics', 'democrat or republican');
INSERT INTO myqueries VALUES(2, 'Music', 'ABOUT(music)');
INSERT INTO myqueries VALUES(3, 'Soccer', 'ABOUT(soccer)');
</pre>
<div id="CCAPP9113" class="sect4"><a id="sthref301"></a>
<h5 class="sect4"><span class="secnum">3.3.7.1.1</span> Using CTX_CLS.TRAIN</h5>
<p>You can also generate a table of rules (or queries) with the <code>CTX_CLS.TRAIN</code> procedure, which takes as input a document training set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF1500" href="../../text.112/e24436/cclspkg.htm#CCREF1500"><span class="italic">Oracle Text Reference</span></a> for more information on <code>CTX_CLS.TRAIN</code></div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CIHFBCJB"></a>
<div id="CCAPP9114" class="sect3">
<h4 class="sect3"><span class="secnum">3.3.7.2</span> Step Two: Create the CTXRULE Index</h4>
<p>Use <code>CREATE</code> <code>INDEX</code> to create the <code>CTXRULE</code> index. You can specify lexer, storage, section group, and wordlist parameters if needed:</p>
<pre>
CREATE INDEX myruleindex ON myqueries(query)
     INDEXTYPE IS CTXRULE PARAMETERS
           ('lexer lexer_pref 
             storage storage_pref 
             section group section_pref 
             wordlist wordlist_pref');
</pre></div>
<!-- class="sect3" -->
<a id="CIHGFHDC"></a>
<div id="CCAPP9115" class="sect3">
<h4 class="sect3"><span class="secnum">3.3.7.3</span> Step Three: Classify a Document</h4>
<p>With a <code>CTXRULE</code> index created on a query set, you can use the <code><a id="sthref302"></a>MATCHES</code> operator to classify a document.</p>
<p>Assume that incoming documents are stored in the table <code>news</code>:</p>
<pre>
CREATE TABLE news ( 
</pre>
<pre>
newsid NUMBER,
author VARCHAR2(30),
source VARCHAR2(30),
article CLOB);
</pre>
<pre>
</pre>
<p>You can create a before insert trigger with <code>MATCHES</code> to route each document to another table <code>news_route</code> based on its classification:</p>
<pre>
BEGIN
  -- find matching queries
  FOR c1 IN (select category
               from myqueries
              where MATCHES(query, :new.article)&gt;0) 
  LOOP
    INSERT INTO news_route(newsid, category)
      VALUES (:new.newsid, c1.category);
  END LOOP;
END;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007436"></a>
<div id="CCAPP9116" class="sect1">
<h2 class="sect1"><span class="secnum">3.4</span> Maintaining Oracle Text Indexes<a id="sthref303"></a><a id="sthref304"></a></h2>
<p>This section describes maintaining your index in the event of an error or indexing failure. The following topics are included:</p>
<ul>
<li>
<p><a href="#CIHCIFEJ">Viewing Index Errors</a></p>
</li>
<li>
<p><a href="#i1007466">Dropping an Index</a></p>
</li>
<li>
<p><a href="#i1007488">Resuming Failed Index</a></p>
</li>
<li>
<p><a href="#CIHIBAHH">Re-creating an Index</a></p>
</li>
<li>
<p><a href="#i1007507">Rebuilding an Index</a></p>
</li>
<li>
<p><a href="#CIHEHGED">Dropping a Preference</a></p>
</li>
</ul>
<a id="CIHCIFEJ"></a>
<div id="CCAPP9117" class="sect2">
<h3 class="sect2"><span class="secnum">3.4.1</span> Viewing Index Errors<a id="sthref305"></a><a id="sthref306"></a></h3>
<p>Sometimes an indexing operation might fail or not complete successfully. When the system encounters an error during indexing a row, it logs the error in an Oracle Text view.</p>
<p>You can view errors on your indexes with <a id="sthref307"></a><code>CTX_USER_INDEX_ERRORS</code>. View errors on all indexes as <code>CTXSYS</code> with <a id="sthref308"></a><code>CTX_INDEX_ERRORS</code>.</p>
<p>For example, to view the most recent errors on your indexes, enter the following statement:</p>
<pre>
SELECT err_timestamp, err_text 
  FROM ctx_user_index_errors 
  ORDER BY err_timestamp DESC;
</pre>
<p>To clear the view of errors, enter:</p>
<pre>
DELETE FROM ctx_user_index_errors;
</pre>
<p>This view is cleared automatically when you create a new index.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF1800" href="../../text.112/e24436/aviews.htm#CCREF1800"><span class="italic">Oracle Text Reference</span></a> to learn more about these views</div>
</div>
<!-- class="sect2" -->
<a id="i1007466"></a>
<div id="CCAPP9118" class="sect2">
<h3 class="sect2"><span class="secnum">3.4.2</span> Dropping an Index<a id="sthref309"></a><a id="sthref310"></a></h3>
<p>You must drop an existing index before you can re-create it with <code>CREATE</code> <code>INDEX</code>.</p>
<p>Drop an index using the <code><a id="sthref311"></a>DROP</code> <code>INDEX</code> statement in SQL.</p>
<p>If you try to create an index with an invalid <code>PARAMETERS</code> string, then you still need to drop it before you can re-create it.</p>
<p>For example, to drop an index called <code>newsindex</code>, enter the following SQL statement:</p>
<pre>
DROP INDEX newsindex; 
</pre>
<p>If Oracle Text cannot determine the state of the index, for example as a result of an indexing malfunction, you cannot drop the index as described previously. Instead use:</p>
<pre>
DROP INDEX newsindex FORCE;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF" href="../e24436/toc.htm"><span class="italic">Oracle Text Reference</span></a> to learn more about this statement</div>
</div>
<!-- class="sect2" -->
<a id="i1007488"></a>
<div id="CCAPP9119" class="sect2">
<h3 class="sect2"><span class="secnum">3.4.3</span> Resuming Failed Index<a id="sthref312"></a><a id="sthref313"></a></h3>
<p>You can sometimes resume a failed index creation operation using the <code><a id="sthref314"></a>ALTER</code> <code>INDEX</code> statement. You typically resume a failed index after you have investigated and corrected the index failure. Not all index failures can be resumed.</p>
<p>Index optimization commits at regular intervals. Therefore, if an optimization operation fails, then all optimization work up to the commit point has already been saved.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0101" href="../../text.112/e24436/csql.htm#CCREF0101"><span class="italic">Oracle Text Reference</span></a> to learn more about the <code>ALTER</code> <code>INDEX</code> statement syntax</div>
<p class="subhead2"><a id="CCAPP9120"></a>Example: Resuming a Failed Index</p>
<p>The following statement resumes the indexing operation on <code>newsindex</code> with 10 megabytes of memory:</p>
<pre>
ALTER INDEX newsindex REBUILD PARAMETERS('resume memory 10M');
</pre></div>
<!-- class="sect2" -->
<a id="CIHIBAHH"></a>
<div id="CCAPP9460" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.4.4</span> Re-creating an Index</h3>
<p>This section describes the procedures available for <a id="sthref315"></a>re-creating an index, which enable index settings to be changed. During the re-creation process, the index can be queried normally.</p>
<a id="CIHCDIHB"></a>
<div id="CCAPP9461" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">3.4.4.1</span> <a id="sthref316"></a>Re-creating a Global Index</h4>
<p><a id="sthref317"></a>Oracle Text provides <a id="sthref318"></a><code>RECREATE_INDEX_ONLINE</code> to <a id="sthref319"></a>re-create a <code>CONTEXT</code> index with new preferences, while preserving the base table DML and query capability during the re-create process. You can use <a id="sthref320"></a><code>RECREATE_INDEX_ONLINE</code> in a one step procedure to re-create a <code>CONTEXT</code> index online for global indexes. Because the new index is created alongside the existing index, this operation requires storage roughly equal to the size of the existing index. Also, because the <code>RECREATE_INDEX_ONLINE</code> operation is performed online, you may issue DML on the base table during the operation. All DML that occurs during re-creation is logged into an online pending queue.</p>
<ul>
<li>
<p>After the re-create index operation is complete, any new information resulting from DML during the re-creation process may not be immediately reflected. As with creating an index online, the index should be synchronized after the re-create index operation is complete in order to bring it fully up-to-date.</p>
</li>
<li>
<p>Synchronizations issued against the index during the re-creation are processed against the old, existing data. Synchronizations are blocked during this time when queries return errors.</p>
</li>
<li>
<p>Optimize commands issued against the index during the re-creation return immediately without error and without processing.</p>
</li>
<li>
<p>During <code>RECREATE_INDEX_ONLINE</code>, the index can be queried normally most of the time. Queries return results based on the existing index and policy until after the final swap. Also, if you issue DML statements and synchronize them, then you will be able to see the new rows when you query on the existing index.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF2111" href="../../text.112/e24436/cddlpkg.htm#CCREF2111"><span class="italic">Oracle Text Reference</span></a> to learn more about the <code>RECREATE_INDEX_ONLINE</code> procedure</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
Transactional query is not supported with <code>RECREATE_INDEX_ONLINE</code>.</div>
<p class="subhead2"><a id="CCAPP9497"></a><a id="sthref321"></a>Re-creating a Local Partitioned Index</p>
<p>If the index is locally partitioned, you cannot re-create the index in one step. You must first create a shadow policy, and then run the <a id="sthref322"></a><code>RECREATE_INDEX_ONLINE</code> procedure for every partition. You can specify <code>SWAP</code> or <code>NOSWAP</code>, which indicates whether re-creating the index for the partition will swap the index partition data and index partition metadata.</p>
<p>This procedure can also be used to update the metadata (for example the storage preference) of each partition when you specify <a id="sthref323"></a><code>NOPOPULATE</code> in the parameter string. This is useful for incremental building of a shadow index through time-limited synchronization. If <code>NOPOPULATE</code> is specified, then <code>NOSWAP</code> is silently enforced.</p>
<ul>
<li>
<p>When all of the partitions use <code>NOSWAP</code>, the storage requirement is approximately equal to the size of the existing index. During the re-creation of the index partition, since no swapping is performed, queries on the partition are processed normally. Queries spanning multiple partitions return consistent results across partitions until the swapping stage is reached.</p>
</li>
<li>
<p>When the partitions are rebuilt with <code>SWAP</code>, the storage requirement for the operation is equal to the size of the existing index partition. Since index partition data and metadata are swapped after re-creation, queries spanning multiple partitions will not return consistent results from partition to partition, but will always be correct with respect to each index partition.</p>
</li>
<li>
<p>If <code>SWAP</code> is specified, then DML and synchronization on the partition are blocked during the swap process.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0101" href="../../text.112/e24436/csql.htm#CCREF0101"><span class="italic">Oracle Text Reference</span></a> for complete information about <code>RECREATE_INDEX_ONLINE</code></div>
<p class="subhead2"><a id="CCAPP9498"></a>Re-creating a Global Index with Time Limit for Synch</p>
<p>You can control index re-creation to set a time limit for <code>SYNC_INDEX</code> during non-business hours and incrementally re-create the index. You use the <a class="olink CCREF2106" href="../../text.112/e24436/cddlpkg.htm#CCREF2106"><code>CREATE_SHADOW_INDEX</code></a> procedure with <code>POPULATE_PENDING</code> and maxtime.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF2106" href="../../text.112/e24436/cddlpkg.htm#CCREF2106"><span class="italic">Oracle Text Reference</span></a> for information and examples for <code>CREATE_SHADOW_INDEX</code></div>
<p class="subhead2"><a id="CCAPP9499"></a>Re-creating a Global Index with Scheduled Swap</p>
<p>With <code>CTX_DDL.EXCHANGE_SHADOW_INDEX</code> you can perform index re-creation during non-business hours when query failures and DML blocking can be tolerated.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF2109" href="../../text.112/e24436/cddlpkg.htm#CCREF2109"><span class="italic">Oracle Text Reference</span></a> for information and examples for <code>CTX_DDL.EXCHANGE_SHADOW_INDEX</code></div>
<p class="subhead2"><a id="CCAPP9500"></a>Re-creating a Local Index with All-at-Once Swap</p>
<p>You can re-create a local partitioned index online to create or change preferences. The swapping of the index and partition metadata occurs at the end of the process. Queries spanning multiple partitions return consistent results across partitions when re-create is in process, except at the end when <a class="olink CCREF2109" href="../../text.112/e24436/cddlpkg.htm#CCREF2109"><code>EXCHANGE_SHADOW_INDEX</code></a> is running.</p>
<p class="subhead2"><a id="CCAPP9501"></a>Scheduling Local Index Re-creation with All-at-Once Swap</p>
<p>With <code>RECREATE_INDEX_ONLINE</code> of the <code>CTX.DDL</code> package, you can incrementally re-create a local partitioned index, where partitions are all swapped at the end.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0101" href="../../text.112/e24436/csql.htm#CCREF0101"><span class="italic">Oracle Text Reference</span></a> for complete information and the example for this process with <code>RECREATE_INDEX_ONLINE</code></div>
<p class="subhead2"><a id="CCAPP9502"></a>Re-creating a Local Index with Per-Partition Swap</p>
<p>Instead of swapping all partitions at once, you can re-create the index online with new preferences, with each partition being swapped as it is completed. Queries across all partitions may return inconsistent results during this process. This procedure uses <code>CREATE_SHADOW_INDEX</code> with <code>RECREATE_INDEX_ONLINE</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF2111" href="../../text.112/e24436/cddlpkg.htm#CCREF2111"><span class="italic">Oracle Text Reference</span></a> for an example of swapping index partitions with the <code>RECREATE_INDEX_ONLINE</code> procedure</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1007507"></a>
<div id="CCAPP9121" class="sect2">
<h3 class="sect2"><span class="secnum">3.4.5</span> Rebuilding an Index<a id="sthref324"></a><a id="sthref325"></a><a id="sthref326"></a></h3>
<p><a id="sthref327"></a>You can rebuild a valid index using <code>ALTER</code> <code>INDEX</code>. Rebuilding an index does not allow most index settings to be changed. You might rebuild an index when you want to index with a new preference. Generally, there is no advantage in rebuilding an index over dropping it and re-creating it with <code>CREATE</code> <code>INDEX</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIHIBAHH">"Re-creating an Index"</a> for information about changing index settings</div>
<p class="subhead2"><a id="CCAPP9122"></a>Example: Rebuilding an Index</p>
<p>The following statement rebuilds the index, replacing the lexer preference with <code>my_lexer</code>.</p>
<pre>
ALTER INDEX newsindex REBUILD PARAMETERS('replace lexer my_lexer');
</pre></div>
<!-- class="sect2" -->
<a id="CIHEHGED"></a>
<div id="CCAPP9123" class="sect2">
<h3 class="sect2"><span class="secnum">3.4.6</span> Dropping a Preference<a id="sthref328"></a></h3>
<p>You might drop a custom index preference when you no longer need it for indexing.</p>
<p>You drop index preferences with the procedure <code>CTX_DDL.DROP_PREFERENCE</code>.</p>
<p>Dropping a preference does not affect the index created from the preference.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0632" href="../../text.112/e24436/cddlpkg.htm#CCREF0632"><span class="italic">Oracle Text Reference</span></a> to learn more about the syntax for the <code>CTX_DDL.DROP_PREFERENCE</code> procedure</div>
<p class="subhead2"><a id="CCAPP9124"></a>Example: Dropping a Preference</p>
<p>The following code drops the preference <code>my_lexer</code>.</p>
<pre>
begin
ctx_ddl.drop_preference('my_lexer');
end;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007544"></a>
<div id="CCAPP9125" class="sect1">
<h2 class="sect1"><span class="secnum">3.5</span> Managing DML Operations for a CONTEXT Index</h2>
<p>DML operations to the base table refer to when documents are inserted, updated, or deleted from the base table. This section describes how you can monitor, synchronize, and optimize the Oracle Text <code>CONTEXT</code> index when DML operations occur. This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHFFHEA">Viewing Pending DML</a></p>
</li>
<li>
<p><a href="#i1008452">Synchronizing the Index</a></p>
</li>
<li>
<p><a href="#i1007604">Optimizing the Index</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>CTXCAT</code> indexes are transactional and, thus, they are updated immediately when there is a change to the base table. Manual synchronization as described in this section is not necessary for a <code>CTXCAT</code> index.</div>
<a id="CIHFFHEA"></a>
<div id="CCAPP9126" class="sect2">
<h3 class="sect2"><span class="secnum">3.5.1</span> Viewing Pending DML<a id="sthref329"></a><a id="sthref330"></a></h3>
<p>When documents in the base table are inserted or updated, their ROWIDs are held in a DML queue until you synchronize the index. You can view this queue with the <code>CTX_USER_PENDING</code> view.</p>
<p>For example, to view pending DML on all your indexes, enter the following statement:</p>
<pre>
SELECT pnd_index_name, pnd_rowid, to_char(
        pnd_timestamp, 'dd-mon-yyyy hh24:mi:ss'
        ) timestamp FROM ctx_user_pending;
</pre>
<p>This statement gives output in the form:</p>
<pre>
PND_INDEX_NAME                 PND_ROWID          TIMESTAMP
------------------------------ ------------------ --------------------
MYINDEX                        AAADXnAABAAAS3SAAC 06-oct-1999 15:56:50
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF1800" href="../../text.112/e24436/aviews.htm#CCREF1800"><span class="italic">Oracle Text Reference</span></a> to learn more about this view</div>
</div>
<!-- class="sect2" -->
<a id="i1008452"></a>
<div id="CCAPP9127" class="sect2">
<h3 class="sect2"><span class="secnum">3.5.2</span> Synchronizing the Index<a id="sthref331"></a><a id="sthref332"></a></h3>
<p>Synchronizing the index involves processing all pending updates and inserts to the base table. You can do this in PL/SQL with the <code>CTX_DDL.SYNC_INDEX</code> procedure. The following sections describe how you can control the duration and locking behavior for synchronizing an index:</p>
<ul>
<li>
<p><a href="#CIHCJJEJ">Maxtime Parameter for SYNC_INDEX</a></p>
</li>
<li>
<p><a href="#CIHCFDFA">Locking Parameter for SYNC_INDEX</a></p>
</li>
</ul>
<div id="CCAPP9463" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref333"></a>
<h4 class="sect3"><span class="secnum">3.5.2.1</span> Example</h4>
<p>The following example synchronizes the index with 2 megabytes of memory:</p>
<pre>
begin
</pre>
<pre>
ctx_ddl.sync_index('myindex', '2M');
</pre>
<pre>
end;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0652" href="../../text.112/e24436/cddlpkg.htm#CCREF0652"><span class="italic">Oracle Text Reference</span></a> to learn more about the <code>CTX_DDL.SYNC_INDEX</code> statement syntax</div>
</div>
<!-- class="sect3" -->
<a id="CIHCJJEJ"></a>
<div id="CCAPP9464" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">3.5.2.2</span> <a id="sthref334"></a>Maxtime Parameter for SYNC_INDEX</h4>
<p><a id="sthref335"></a>The <code>sync_index</code> procedure includes a <code>maxtime</code> parameter that, like <code>optimize_index</code>, indicates a suggested time limit in minutes for the operation. The <code>sync_index</code> will process as many documents in the queue as possible within the given time limit.</p>
<ul>
<li>
<p>NULL <code>maxtime</code> is equivalent to <code>CTX_DDL.MAXTIME_UNLIMITED</code>.</p>
</li>
<li>
<p>The time limit is approximate. The actual time taken may be somewhat less than, or greater than what you specify.</p>
</li>
<li>
<p>There is no change to the <code>ALTER</code> <code>INDEX</code>... <code>sync</code> command, which is deprecated.</p>
</li>
<li>
<p>The <code>maxtime</code> parameter is ignored when <code>sync_index</code> is invoked without an index name.</p>
</li>
<li>
<p>The <code>maxtime</code> parameter cannot be communicated for automatic synchronizations (for example, <code>sync</code> <code>on</code> <code>commit</code> or <code>sync</code> <code>every</code>).</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHCFDFA"></a>
<div id="CCAPP9465" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">3.5.2.3</span> <a id="sthref336"></a>Locking Parameter for SYNC_INDEX</h4>
<p><a id="sthref337"></a>The locking parameter of <code>sync_index</code> enables you to configure how the synchronization deals with the scenario where another sync is already running on the index.</p>
<ul>
<li>
<p>The locking parameter is ignored when <code>sync_index</code> is invoked without an index name.</p>
</li>
<li>
<p>The locking parameter cannot be communicated for automatic syncs (i.e. sync on commit/sync every)</p>
</li>
<li>
<p>When locking mode is <code>LOCK_WAIT</code>, in the event of not being able to get a lock, it will wait forever and ignore the maxtime setting.</p>
</li>
</ul>
<p>The options are as follows:</p>
<div class="inftblinformal">
<table class="cellalignment115" title="Locing Behavior Options for SYNC_INDEX" summary="This table describes locking behavior for syn_index." dir="ltr">
<thead>
<tr class="cellalignment106">
<th class="cellalignment116" id="r1c1-t70">Option</th>
<th class="cellalignment116" id="r1c2-t70">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment106">
<td class="cellalignment112" id="r2c1-t70" headers="r1c1-t70"><code>CTX_DDL.LOCK_WAIT</code></td>
<td class="cellalignment112" headers="r2c1-t70 r1c2-t70">If another sync is running, wait until the running sync is complete, then begin new sync.</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r3c1-t70" headers="r1c1-t70"><code>CTX_DDL.LOCK_NOWAIT</code></td>
<td class="cellalignment112" headers="r3c1-t70 r1c2-t70">If another sync is running, immediately return without error.</td>
</tr>
<tr class="cellalignment106">
<td class="cellalignment112" id="r4c1-t70" headers="r1c1-t70"><code>CTX_DDL.LOCK_NOWAIT_ERROR</code></td>
<td class="cellalignment112" headers="r4c1-t70 r1c2-t70">If another sync is running, immediately raise an error (DRG-51313: timeout while waiting for DML or optimize lock).</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1007604"></a>
<div id="CCAPP9128" class="sect2">
<h3 class="sect2"><span class="secnum">3.5.3</span> Optimizing the Index<a id="sthref338"></a><a id="sthref339"></a></h3>
<p>Frequent index synchronization ultimately causes fragmentation of your <code>CONTEXT</code> index. Index fragmentation can adversely affect query response time. You should, therefore, allow time to optimize your <code>CONTEXT</code> index in order to reduce fragmentation and index size and to ensure optimal query performance. To understand index optimization, you must understand the structure of the index and what happens when it is synchronized.</p>
<div id="CCAPP9129" class="sect3"><a id="sthref340"></a>
<h4 class="sect3"><span class="secnum">3.5.3.1</span> CONTEXT Index Structure<a id="sthref341"></a><a id="sthref342"></a></h4>
<p>The <code>CONTEXT</code> index is an inverted index where each word contains the list of documents that contain that word. For example, after a single initial indexing operation, the word DOG might have an entry as follows:</p>
<pre>
DOG DOC1 DOC3 DOC5
</pre></div>
<!-- class="sect3" -->
<div id="CCAPP9130" class="sect3"><a id="sthref343"></a>
<h4 class="sect3"><span class="secnum">3.5.3.2</span> Index Fragmentation<a id="sthref344"></a><a id="sthref345"></a></h4>
<p>When new documents are added to the base table, the index is synchronized by adding new rows. Thus, if you add a new document (for example, DOC 7) with the word <span class="italic">dog</span> to the base table and synchronize the index, you now have:</p>
<pre>
DOG DOC1 DOC3 DOC5
DOG DOC7
</pre>
<p>Subsequent DML will also create new rows as follows:</p>
<pre>
DOG DOC1 DOC3 DOC5
DOG DOC7
DOG DOC9
DOG DOC11
</pre>
<p>Adding new documents and synchronizing the index causes index fragmentation. In particular, background DML, which synchronizes the index frequently, generally produces more fragmentation than synchronizing in batch mode.</p>
<p>Less frequent batch processing results in longer document lists, reducing the number of rows in the index and thus reducing fragmentation.</p>
<p>You can reduce index fragmentation by optimizing the index in either <code>FULL</code> or <code>FAST</code> mode with <code>CTX_DDL.OPTIMIZE_INDEX</code>.</p>
</div>
<!-- class="sect3" -->
<div id="CCAPP9131" class="sect3"><a id="sthref346"></a>
<h4 class="sect3"><span class="secnum">3.5.3.3</span> Document Invalidation and Garbage Collection<a id="sthref347"></a><a id="sthref348"></a></h4>
<p>When documents are removed from the base table, Oracle Text marks the document as removed but does not immediately alter the index.</p>
<p>Because the old information takes up space and can cause extra overhead at query time, you must remove the old information from the index by optimizing it in <code>FULL</code> mode. This is called <span class="bold">garbage collection</span>. Optimizing in <code>FULL</code> mode for garbage collection is necessary when you have frequent updates or deletes to the base table.</p>
</div>
<!-- class="sect3" -->
<div id="CCAPP9132" class="sect3"><a id="sthref349"></a>
<h4 class="sect3"><span class="secnum">3.5.3.4</span> Single Token Optimization<a id="sthref350"></a></h4>
<p>In addition to optimizing the entire index, you can optimize single tokens. You can use token mode to optimize index tokens that are frequently searched, without spending time on optimizing tokens that are rarely referenced.</p>
<p>For example, you can specify that only the token <span class="italic">DOG</span> be optimized in the index, if you know that this token is updated and queried frequently.</p>
<p>An optimized token can improve query response time for the token.</p>
<p>To optimize an index in token mode, use <code>CTX_DDL.OPTIMIZE_INDEX</code>.</p>
</div>
<!-- class="sect3" -->
<div id="CCAPP9133" class="sect3"><a id="sthref351"></a>
<h4 class="sect3"><span class="secnum">3.5.3.5</span> Viewing Index Fragmentation and Garbage Data<a id="sthref352"></a><a id="sthref353"></a><a id="sthref354"></a></h4>
<p>With the <code>CTX_REPORT.INDEX_STATS</code> procedure, you can create a statistical report on your index. The report includes information on optimal row fragmentation, a list of most fragmented tokens, and the amount of garbage data in your index. Although this report might take a long time to run for large indexes, it can help you decide whether to optimize your index.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF1100" href="../../text.112/e24436/crptpkg.htm#CCREF1100"><span class="italic">Oracle Text Reference</span></a> to learn more about using this procedure</div>
</div>
<!-- class="sect3" -->
<div id="CCAPP9134" class="sect3"><a id="sthref355"></a>
<h4 class="sect3"><span class="secnum">3.5.3.6</span> Examples: Optimizing the Index<a id="sthref356"></a><a id="sthref357"></a></h4>
<p>To optimize an index, Oracle recommends that you use <code>CTX_DDL.OPTIMIZE_INDEX</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCREF0638" href="../../text.112/e24436/cddlpkg.htm#CCREF0638"><span class="italic">Oracle Text Reference</span></a> for the <code>CTX_DDL.OPTIMIZE_INDEX</code> statement syntax and examples</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment105">
<tr>
<td class="cellalignment112">
<table class="cellalignment110">
<tr>
<td class="cellalignment109"><a href="quicktour.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment109"><a href="query.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2004, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment114">
<table class="cellalignment108">
<tr>
<td class="cellalignment109"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment109"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment109"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment109"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment109"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment109"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
