<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>CTX_DOC Package</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1071" />
<meta name="dcterms.created" content="2015-10-23T12:26:36Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Text Reference" />
<meta name="dcterms.identifier" content="E24436-05" />
<meta name="dcterms.isVersionOf" content="CCREF" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1998, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="cddlpkg.htm" title="Previous" type="text/html" />
<link rel="Next" href="coutpkg.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e24436.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">13/29</span> <!-- End Header -->
<div id="CCREF0700" class="chapter"><a id="CEGCIDAJ"></a>
<h1 class="chapter"><span class="secnum">8</span> CTX_DOC Package</h1>
<p><a id="CCREF2115"></a><a id="sthref1564"></a><a id="sthref1565"></a>This chapter describes the <code dir="ltr">CTX_DOC</code> PL/SQL package for requesting document services, such as highlighting extracted text or generating a list of themes for a document.</p>
<p><a id="sthref1566"></a><a id="sthref1567"></a>Many of these procedures exist in two versions: those that make use of indexes, and those that do not. Those that do not are called "policy-based" procedures. They are offered because there are times when you may want to use document services on a single document without creating a Context index in advance. Policy-based procedures enable you to do this.</p>
<p>The policy_<span class="italic">*</span> procedures mirror the conventional in-memory document services and are used with <span class="syntaxinline">policy_name</span> replacing <span class="syntaxinline">index_ name</span>, and document of type <code dir="ltr">VARCHAR2</code>, <code dir="ltr">CLOB</code>, <code dir="ltr">BLOB</code>, or <code dir="ltr">BFILE</code> replacing <span class="syntaxinline">textkey</span>. Thus, you need not create an index to obtain document services output with these procedures.</p>
<p>For the procedures that generate character offsets and lengths, such as <code dir="ltr">HIGHLIGHT</code> and <code dir="ltr">TOKENS</code>, Oracle Text follows USC-2 codepoint semantics.</p>
<p>The <code dir="ltr">CTX_DOC</code> package includes the following procedures and functions:</p>
<div class="inftblinformal">
<table class="cellalignment96" title="ctx_doc procedures" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment90">
<th class="cellalignment97" id="r1c1-t2">Name</th>
<th class="cellalignment97" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment90">
<td class="cellalignment98" id="r2c1-t2" headers="r1c1-t2"><a href="#i997868">FILTER</a></td>
<td class="cellalignment98" headers="r2c1-t2 r1c2-t2">Generates a plain text or HTML version of a document.</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r3c1-t2" headers="r1c1-t2"><a href="#i996898">GIST</a></td>
<td class="cellalignment98" headers="r3c1-t2 r1c2-t2">Generates a Gist or theme summaries for a document.</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r4c1-t2" headers="r1c1-t2"><a href="#i997035">HIGHLIGHT</a></td>
<td class="cellalignment98" headers="r4c1-t2 r1c2-t2">Generates plain text or HTML highlighting offset information for a document.</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r5c1-t2" headers="r1c1-t2"><a href="#i997130">IFILTER</a></td>
<td class="cellalignment98" headers="r5c1-t2 r1c2-t2">Generates a plain text version of binary data. Can be called from a <code dir="ltr">USER_DATASTORE</code> procedure.</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r6c1-t2" headers="r1c1-t2"><a href="#i997146">MARKUP</a></td>
<td class="cellalignment98" headers="r6c1-t2 r1c2-t2">Generates a plain text or HTML version of a document with query terms highlighted.</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r7c1-t2" headers="r1c1-t2"><a href="#i997381">PKENCODE</a></td>
<td class="cellalignment98" headers="r7c1-t2 r1c2-t2">Encodes a composite textkey string (value) for use in other <code dir="ltr">CTX_DOC</code> procedures.</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r8c1-t2" headers="r1c1-t2"><a href="#i999845">POLICY_FILTER</a></td>
<td class="cellalignment98" headers="r8c1-t2 r1c2-t2">Generates a plain text or HTML version of a document, without requiring an index.</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r9c1-t2" headers="r1c1-t2"><a href="#i999414">POLICY_GIST</a></td>
<td class="cellalignment98" headers="r9c1-t2 r1c2-t2">Generates a Gist or theme summaries for a document, without requiring an index.</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r10c1-t2" headers="r1c1-t2"><a href="#i999473">POLICY_HIGHLIGHT</a></td>
<td class="cellalignment98" headers="r10c1-t2 r1c2-t2">Generates plain text or HTML highlighting offset information for a document, without requiring an index.</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r11c1-t2" headers="r1c1-t2"><a href="#i999514">POLICY_MARKUP</a></td>
<td class="cellalignment98" headers="r11c1-t2 r1c2-t2">Generates a plain text or HTML version of a document with query terms highlighted, without requiring an index.</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r12c1-t2" headers="r1c1-t2"><a href="#CHDGHGJH">POLICY_SNIPPET</a></td>
<td class="cellalignment98" headers="r12c1-t2 r1c2-t2">Generates a concordance for a document, based on query terms, without requiring an index.</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r13c1-t2" headers="r1c1-t2"><a href="#i999671">POLICY_THEMES</a></td>
<td class="cellalignment98" headers="r13c1-t2 r1c2-t2">Generates a list of themes for a document, without requiring an index.</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r14c1-t2" headers="r1c1-t2"><a href="#i999739">POLICY_TOKENS</a></td>
<td class="cellalignment98" headers="r14c1-t2 r1c2-t2">Generates all index tokens for a document, without requiring an index.</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r15c1-t2" headers="r1c1-t2"><a href="#i997423">SET_KEY_TYPE</a></td>
<td class="cellalignment98" headers="r15c1-t2 r1c2-t2">Sets <code dir="ltr">CTX_DOC</code> procedures to accept rowid or primary key document identifiers.</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r16c1-t2" headers="r1c1-t2"><a href="#i997446">SNIPPET</a></td>
<td class="cellalignment98" headers="r16c1-t2 r1c2-t2">Generates a concordance for a document, based on query terms.</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r17c1-t2" headers="r1c1-t2"><a href="#CHDDHABH">THEMES</a></td>
<td class="cellalignment98" headers="r17c1-t2 r1c2-t2">Generates a list of themes for a document.</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r18c1-t2" headers="r1c1-t2"><a href="#i997538">TOKENS</a></td>
<td class="cellalignment98" headers="r18c1-t2 r1c2-t2">Generates all index tokens for a document.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="refentry"><a id="i997868"></a>
<div id="CCREF0702" class="refsect1">
<h2 class="refsect1">FILTER <a id="sthref1568"></a><a id="sthref1569"></a><a id="sthref1570"></a><a id="sthref1571"></a><a id="sthref1572"></a><a id="sthref1573"></a></h2>
<p>Use the <code dir="ltr">CTX_DOC.FILTER</code> procedure to generate either a plain text or HTML version of a document. You can store the rendered document in either a result table or in memory. This procedure is generally called after a query, from which you identify the document to be filtered.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The resultant HTML document does not include graphics.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1574"></a>Syntax 1: In-memory Result Storage</p>
<pre dir="ltr">
exec CTX_DOC.FILTER(
          index_name  IN VARCHAR2, 
          textkey     IN VARCHAR2, 
          restab      IN OUT NOCOPY CLOB, 
          plaintext   IN BOOLEAN  DEFAULT FALSE);

exec  CTX_DOC.HIGHLIGHT_CLOB_QUERY(
          index_name IN VARCHAR2,
          textkey IN VARCHAR2,
          text_query IN CLOB,
          restab IN OUT NOCOPY HIGHLIGHT_TAB,
          plaintext IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1575"></a>Syntax 2: Result Table Storage</p>
<pre dir="ltr">
exec CTX_DOC.FILTER(
          index_name  IN VARCHAR2, 
          textkey     IN VARCHAR2, 
          restab      IN VARCHAR2, 
          query_id    IN NUMBER DEFAULT 0,
          plaintext   IN BOOLEAN  DEFAULT FALSE);

exec  CTX_DOC.HIGHLIGHT_CLOB_QUERY(
          index_name IN VARCHAR2,
          textkey IN VARCHAR2,
          text_query IN CLOB,
          restab IN VARCHAR2,
          query_id IN NUMBER DEFAULT 0,
          plaintext IN BOOLEAN DEFAULT FALSE);
</pre>
<dl>
<dt>index_name</dt>
<dd>
<p>Specify the name of the index associated with the text column containing the document identified by <span class="syntaxinline">textkey</span>.</p>
</dd>
<dt>textkey</dt>
<dd>
<p>Specify the unique identifier (usually the primary key) for the document.</p>
<p>The <span class="syntaxinline">textkey</span> parameter can be as follows:</p>
</dd>
</dl>
<ul>
<li>
<p>a single column primary key value</p>
</li>
<li>
<p>encoded specification for a composite (multiple column) primary key. Use CTX_DOC.<a href="#i997381">PKENCODE</a></p>
</li>
<li>
<p>the rowid of the row containing the document</p>
</li>
</ul>
<p>Toggle between primary key and rowid identification using CTX_DOC.<a href="#i997423">SET_KEY_TYPE</a>.</p>
<dl>
<dt>restab</dt>
<dd>
<p>You can specify that this procedure store the marked-up text to either a table or to an in-memory <code dir="ltr">CLOB</code>.</p>
<p>To store results to a table, specify the name of the table. The table to which you want to store results must exist before you make this call.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="arestab.htm#i635884">"Filter Table"</a> in <a href="arestab.htm#g640034">Appendix A, "Oracle Text Result Tables"</a> for more information about the structure of the filter result table</div>
<p>To store results in memory, specify the name of the <code dir="ltr">CLOB</code> locator. If <span class="syntaxinline">restab</span> is <code dir="ltr">NULL</code>, then a temporary <code dir="ltr">CLOB</code> is allocated and returned. You must de-allocate the locator after using it with <code dir="ltr">DBMS_LOB.FREETEMPORARY()</code>.</p>
<p>If <span class="syntaxinline">restab</span> is not <code dir="ltr">NULL</code>, then the <code dir="ltr">CLOB</code> is truncated before the operation.</p>
<dl>
<dt>query_id</dt>
<dd>
<p>Specify an identifier to use to identify the row inserted into <span class="syntaxinline">restab</span>.</p>
<p>When <span class="syntaxinline">query_id</span> is not specified or set to <code dir="ltr">NULL</code>, it defaults to 0. You must manually truncate the table specified in <span class="syntaxinline">restab</span>.</p>
</dd>
<dt>plaintext</dt>
<dd>
<p>Specify <code dir="ltr">TRUE</code> to generate a plaintext version of the document. Specify <code dir="ltr">FALSE</code> to generate an HTML version of the document if you are using the <code dir="ltr">AUTO_FILTER</code> filter or indexing HTML documents.</p>
</dd>
</dl>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1576"></a>Example</p>
<p class="subhead1"><a id="CCREF23904"></a>In-Memory Filter<a id="sthref1577"></a></p>
<p>The following code shows how to filter a document to HTML in memory.</p>
<pre dir="ltr">
declare
mklob clob;
amt number := 40;
line varchar2(80);

begin
 ctx_doc.filter('myindex','1', mklob, FALSE);
 -- mklob is NULL when passed-in, so ctx-doc.filter will allocate a temporary
 -- CLOB for us and place the results there.
 dbms_lob.read(mklob, amt, 1, line);
 dbms_output.put_line('FIRST 40 CHARS ARE:'||line);
 -- have to de-allocate the temp lob
 dbms_lob.freetemporary(mklob);
 end;
</pre>
<p>Create<a id="sthref1578"></a> the filter result table to store the filtered document as follows:</p>
<pre dir="ltr">
create table filtertab (query_id  number,   
                        document  clob); 
</pre>
<p>To obtain a plaintext version of document with textkey 20, enter the following statement:</p>
<pre dir="ltr">
begin 
ctx_doc.filter('newsindex', '20', 'filtertab', '0', TRUE);
end;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i996898"></a>
<div id="CCREF0704" class="refsect1">
<h2 class="refsect1">GIST<a id="sthref1579"></a><a id="sthref1580"></a><a id="sthref1581"></a><a id="sthref1582"></a></h2>
<p>Use the <code dir="ltr">CTX_DOC.GIST</code> procedure to generate gist and theme summaries for a document. You can generate paragraph-level or sentence-level gists or theme summaries.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code dir="ltr">CTX_DOC.GIST</code> requires an installed knowledge base. A knowledge base may or may not have been installed with Oracle Text. For more information on knowledge bases, see the <a class="olink CCAPP0900" href="../../text.112/e24435/cthes.htm#CCAPP0900"><span class="italic">Oracle Text Application Developer's Guide</span></a>.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1583"></a>Syntax 1: In-Memory Storage</p>
<pre dir="ltr">
CTX_DOC.GIST(
</pre>
<pre dir="ltr">
index_name    IN VARCHAR2, 
textkey       IN VARCHAR2, 
restab        IN OUT CLOB, 
glevel        IN VARCHAR2 DEFAULT 'P',
pov           IN VARCHAR2 DEFAULT 'GENERIC',
numParagraphs IN NUMBER DEFAULT 16,
maxPercent    IN NUMBER DEFAULT 10,
num_themes   IN NUMBER DEFAULT 50);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1584"></a>Syntax 2: Result Table Storage</p>
<pre dir="ltr">
CTX_DOC.GIST(
</pre>
<pre dir="ltr">
index_name    IN VARCHAR2, 
textkey       IN VARCHAR2, 
restab        IN VARCHAR2, 
query_id      IN NUMBER DEFAULT 0,
glevel        IN VARCHAR2 DEFAULT 'P',
pov           IN VARCHAR2 DEFAULT NULL,
numParagraphs IN NUMBER DEFAULT 16,
maxPercent    IN NUMBER DEFAULT 10,
num_themes     IN NUMBER DEFAULT 50);
</pre>
<dl>
<dt>index_name</dt>
<dd>
<p>Specify the name of the index associated with the text column containing the document identified by <span class="syntaxinline">textkey</span>.</p>
</dd>
<dt>textkey</dt>
<dd>
<p>Specify the unique identifier (usually the primary key) for the document.</p>
<p>The <span class="syntaxinline">textkey</span> parameter can as follows:</p>
</dd>
</dl>
<ul>
<li>
<p>a single column primary key value</p>
</li>
<li>
<p>an encoded specification for a composite (multiple column) primary key. To encode a composite textkey, use the <code dir="ltr">CTX_DOC.PKENCODE</code> procedure</p>
</li>
<li>
<p>the rowid of the row containing the document</p>
</li>
</ul>
<p>Toggle between primary key and rowid identification using <code dir="ltr">CTX_DOC.SET_KEY_TYPE</code>.</p>
<dl>
<dt>restab</dt>
<dd>
<p>Specify that this procedure store the gist and theme summaries to either a table or to an in-memory <code dir="ltr">CLOB</code>.</p>
<p>To store results to a table specify the name of an existing table.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="arestab.htm#i635047">"Gist Table"</a> in <a href="arestab.htm#g640034">Appendix A, "Oracle Text Result Tables"</a></div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<p>To store results in memory, specify the name of the <code dir="ltr">CLOB</code> locator. If <span class="syntaxinline">restab</span> is <code dir="ltr">NULL</code>, then a temporary <code dir="ltr">CLOB</code> is allocated and returned. You must de-allocate the locator after using it.</p>
<p>If <code dir="ltr">restab</code> is not <code dir="ltr">NULL</code>, then the <code dir="ltr">CLOB</code> is truncated before the operation.</p>
<dl>
<dt>query_id</dt>
<dd>
<p>Specify an identifier to use to identify the row(s) inserted into <span class="syntaxinline">restab</span>.</p>
</dd>
<dt>glevel</dt>
<dd>
<p>Specify the type of gist or theme summary to produce. The possible values are:</p>
</dd>
</dl>
<ul>
<li>
<p><span class="italic">P</span> for paragraph</p>
</li>
<li>
<p><span class="italic">S</span> for sentence</p>
</li>
</ul>
<p>The default is <span class="italic">P</span>.</p>
<dl>
<dt>pov</dt>
<dd>
<p>Specify whether a gist or a single theme summary is generated. The type of gist or theme summary generated (sentence-level or paragraph-level) depends on the value specified for <code dir="ltr">glevel</code>.</p>
<p>To generate a gist for the entire document, specify a value of '<code dir="ltr">GENERIC</code>' for <code dir="ltr">pov</code>. To generate a theme summary for a single theme in a document, specify the theme as the value for <code dir="ltr">pov</code>.</p>
<p>When using result table storage, if you do not specify a value for <code dir="ltr">pov</code>, then this procedure returns the generic gist plus up to 50 theme summaries for the document.</p>
<p>When using in-memory result storage to a <code dir="ltr">CLOB</code>, you must specify a <code dir="ltr">pov</code>. However, if you do not specify a <code dir="ltr">pov</code>, then this procedure generates only a generic gist for the document.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr">pov</code> parameter is case sensitive. To return a gist for a document, specify '<code dir="ltr">GENERIC</code>' in all uppercase. To return a theme summary, specify the theme exactly as it is generated for the document.
<p>Only the themes generated by <a href="#CHDDHABH">THEMES</a> for a document can be used as input for <code dir="ltr">pov</code>.</p>
</div>
</dd>
<dt>numParagraphs</dt>
<dd>
<p>Specify the maximum number of document paragraphs (or sentences) selected for the document gist or theme summaries. The default is 16.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr">numParagraphs</code> parameter is used only when this parameter yields a smaller gist or theme summary size than the gist or theme summary size yielded by the <code dir="ltr">maxPercent</code> parameter.
<p>This means that the system always returns the smallest size gist or theme summary.</p>
</div>
</dd>
<dt>maxPercent</dt>
<dd>
<p>Specify the maximum number of document paragraphs (or sentences) selected for the document gist or theme summaries as a percentage of the total paragraphs (or sentences) in the document. The default is 10.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr">maxPercent</code> parameter is used only when this parameter yields a smaller gist or theme summary size than the gist or theme summary size yielded by the <code dir="ltr">numParagraphs</code> parameter.
<p>This means that the system always returns the smallest size gist or theme summary.</p>
</div>
</dd>
<dt>num_themes</dt>
<dd>
<p>Specify the number of theme summaries to produce when you do not specify a value for <code dir="ltr">pov</code>. For example, if you specify 10, this procedure returns the top 10 theme summaries. The default is 50.</p>
<p>If you specify 0 or NULL, then this procedure returns all themes in a document. If the document contains more than 50 themes, only the top 50 themes show conceptual hierarchy.</p>
</dd>
</dl>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1585"></a>Examples</p>
<p class="subhead1"><a id="CCREF23905"></a>In-Memory Gist</p>
<p>The following example generates a non-default size generic gist of at most 10 paragraphs. The result is stored in memory in a <code dir="ltr">CLOB</code> locator. The code then de-allocates the returned <code dir="ltr">CLOB</code> locator after using it.</p>
<pre dir="ltr">
set serveroutput on;
declare
  gklob clob;
  amt number := 40;
  line varchar2(80);

begin
 ctx_doc.gist('newsindex','34',gklob, pov =&gt; 'GENERIC',numParagraphs =&gt; 10);
  -- gklob is NULL when passed-in, so ctx-doc.gist will allocate a temporary
  -- CLOB for us and place the results there.
  
  dbms_lob.read(gklob, amt, 1, line);
  dbms_output.put_line('FIRST 40 CHARS ARE:'||line);
  -- have to de-allocate the temp lob
  dbms_lob.freetemporary(gklob);
 end;
</pre>
<p class="subhead1"><a id="CCREF23906"></a>Result Table Gists</p>
<p>The following example creates a gist table called <code dir="ltr">CTX_GIST</code>:</p>
<pre dir="ltr">
create table CTX_GIST (query_id  number,
                       pov       varchar2(80),
                       gist      CLOB);
</pre>
<p class="subhead2"><a id="CCREF23907"></a><a id="sthref1586"></a><a id="sthref1587"></a>Gists and Theme Summaries</p>
<p>The following example returns a default sized paragraph-level gist for document 34 as well as the top 10 theme summaries in the document:</p>
<pre dir="ltr">
begin
   ctx_doc.gist('newsindex','34','CTX_GIST', 1, num_themes=&gt;10);
end;
</pre>
<p>The following example generates a non-default size gist of at most 10 paragraphs:</p>
<pre dir="ltr">
begin
  ctx_doc.gist('newsindex','34','CTX_GIST',1,pov =&gt;'GENERIC',numParagraphs=&gt;10);
end;
</pre>
<p>The following example generates a gist whose number of paragraphs is at most 10 percent of the total paragraphs in document:</p>
<pre dir="ltr">
begin 
  ctx_doc.gist('newsindex','34','CTX_GIST',1,pov =&gt; 'GENERIC',  maxPercent =&gt; 10);
end;
</pre>
<p class="subhead2"><a id="CCREF23908"></a>Theme Summary</p>
<p>The following example returns a paragraph-level theme summary for <span class="italic">insects</span> for document 34. The default theme summary size is returned.</p>
<pre dir="ltr">
begin
   ctx_doc.gist('newsindex','34','CTX_GIST',1, pov =&gt; 'insects');
end;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i997035"></a>
<div id="CCREF0706" class="refsect1">
<h2 class="refsect1">HIGHLIGHT <a id="sthref1588"></a><a id="sthref1589"></a><a id="sthref1590"></a><a id="sthref1591"></a><a id="sthref1592"></a><a id="sthref1593"></a><a id="sthref1594"></a><a id="sthref1595"></a></h2>
<p>Use the <code dir="ltr">CTX_DOC.HIGHLIGHT</code> procedure to generate highlight offsets for a document. The offset information is generated for the terms in the document that satisfy the query you specify. These highlighted terms are either the words that satisfy a word query or the themes that satisfy an <code dir="ltr">ABOUT</code> query.</p>
<p>You can generate highlight offsets for either plaintext or HTML versions of the document. The table returned by <code dir="ltr">CTX_DOC.HIGHLIGHT</code> does not include any graphics found in the original document. Apply the offset information to the same documents filtered with CTX_DOC.<a href="#i997868">FILTER</a>.</p>
<p>You usually call this procedure after a query, from which you identify the document to be processed.</p>
<p>You can store the highlight offsets to either an in-memory PL/SQL table or a result table.</p>
<p>See CTX_DOC.<a href="#i999473">POLICY_HIGHLIGHT</a> for a version of this procedure that does not require an index.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1596"></a>Syntax 1: In-Memory Result Storage</p>
<pre dir="ltr">
exec CTX_DOC.HIGHLIGHT(
        index_name  IN VARCHAR2,
        textkey     IN VARCHAR2,
        text_query  IN VARCHAR2,
        restab      IN OUT NOCOPY HIGHLIGHT_TAB,
        plaintext   IN BOOLEAN  DEFAULT FALSE);

exec CTX_DOC.HIGHLIGHT_CLOB_QUERY(
        index_name  IN VARCHAR2,
        textkey     IN VARCHAR2,
        text_query  IN CLOB,
        restab      IN OUT NOCOPY HIGHLIGHT_TAB,
        plaintext   IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1597"></a>Syntax 2: Result Table Storage</p>
<pre dir="ltr">
exec CTX_DOC.HIGHLIGHT(
          index_name  IN VARCHAR2, 
          textkey     IN VARCHAR2, 
          text_query  IN VARCHAR2, 
          restab      IN VARCHAR2, 
          query_id    IN NUMBER   DEFAULT 0,
          plaintext   IN BOOLEAN  DEFAULT FALSE);

exec CTX_DOC.HIGHLIGHT_CLOB_QUERY(
          index_name  IN VARCHAR2,
          textkey     IN VARCHAR2,
          text_query  IN CLOB,
          restab      IN VARCHAR2,
          query_id    IN NUMBER DEFAULT 0,
          plaintext   IN BOOLEAN DEFAULT FALSE);
</pre>
<dl>
<dt>index_name</dt>
<dd>
<p>Specify the name of the index associated with the text column containing the document identified by <span class="syntaxinline">textkey</span>.</p>
</dd>
<dt>textkey</dt>
<dd>
<p>Specify the unique identifier (usually the primary key) for the document.</p>
<p>The <span class="syntaxinline">textkey</span> parameter can be as follows:</p>
</dd>
</dl>
<ul>
<li>
<p>a single column primary key value</p>
</li>
<li>
<p>encoded specification for a composite (multiple column) primary key. Use the CTX_DOC.<a href="#i997381">PKENCODE</a> procedure.</p>
</li>
<li>
<p>the rowid of the row containing the document</p>
</li>
</ul>
<p>Toggle between primary key and rowid identification using CTX_DOC.<a href="#i997423">SET_KEY_TYPE</a>.</p>
<dl>
<dt>text_query</dt>
<dd>
<p>Specify the original query expression used to retrieve the document. If NULL, no highlights are generated.</p>
<p>If <code dir="ltr">text_query</code> includes wildcards, stemming, fuzzy matching which result in stopwords being returned, <code dir="ltr">HIGHLIGHT</code> does not highlight the stopwords.</p>
<p>If <code dir="ltr">text_query</code> contains the threshold operator, the operator is ignored. The <code dir="ltr">HIGHLIGHT</code> procedure always returns highlight information for the entire result set.</p>
</dd>
<dt>restab</dt>
<dd>
<p>You can specify that this procedure store highlight offsets to either a table or to an in-memory PL/SQL table.</p>
<p>To store results to a table specify the name of the table. The table must exist before you call this procedure.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="arestab.htm#i635731">"Highlight Table"</a> in <a href="arestab.htm#g640034">Appendix A, "Oracle Text Result Tables"</a> for more information about the structure of the highlight result table.</div>
<p>To store results to an in-memory table, specify the name of the in-memory table of type <code dir="ltr">CTX_DOC.HIGHLIGHT_TAB</code>. The <code dir="ltr">HIGHLIGHT_TAB</code> datatype is defined as follows:</p>
<pre dir="ltr">
type highlight_rec is record (
  offset number,
  length number
);
type highlight_tab is table of highlight_rec index by binary_integer;
</pre>
<p><code dir="ltr">CTX_DOC.HIGHLIGHT</code> clears <code dir="ltr">HIGHLIGHT_TAB</code> before the operation.</p>
</dd>
<dt>query_id</dt>
<dd>
<p>Specify the identifier used to identify the row inserted into <span class="syntaxinline">restab</span>.</p>
<p>When <span class="syntaxinline">query_id</span> is not specified or set to <code dir="ltr">NULL</code>, it defaults to 0. You must manually truncate the table specified in <span class="syntaxinline">restab</span>.</p>
</dd>
<dt>plaintext</dt>
<dd>
<p>Specify <code dir="ltr">TRUE</code> to generate a plaintext offsets of the document.</p>
<p>Specify <code dir="ltr">FALSE</code> to generate HTML offsets of the document if you are using the <code dir="ltr">AUTO_FILTER</code> filter or indexing HTML documents.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1598"></a>Examples</p>
<p class="subhead1"><a id="CCREF23909"></a>Create Highlight Table<a id="sthref1599"></a></p>
<p>Create the highlight table to store the highlight offset information:</p>
<pre dir="ltr">
create table hightab(query_id number, 
                     offset number, 
                     length number);
</pre>
<p class="subhead1"><a id="CCREF23910"></a>Word Highlight Offsets</p>
<p>T<a id="sthref1600"></a>o obtain HTML highlight offset information for document 20 for the word <span class="italic">dog</span>:</p>
<pre dir="ltr">
begin
ctx_doc.highlight('newsindex', '20', 'dog', 'hightab', 0, FALSE);
end;
</pre>
<p class="subhead1"><a id="CCREF23911"></a>Theme Highlight Offsets<a id="sthref1601"></a><a id="sthref1602"></a></p>
<p>Assuming the index <span class="italic">newsindex</span> has a theme component, obtain HTML highlight offset information for the theme query of <span class="italic">politics</span> by issuing the following query:</p>
<pre dir="ltr">
begin
ctx_doc.highlight('newsindex', '20', 'about(politics)', 'hightab', 0, FALSE);
end;
</pre>
<p>The output for this statement are the offsets to highlighted words and phrases that represent the theme of <span class="italic">politics</span> in the document.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1603"></a>Restrictions</p>
<p><code dir="ltr">CTX_DOC.HIGHLIGHT</code> does not support the use of query templates or highlighting XML attribute values.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1604"></a>Related Topics</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i999473">"POLICY_HIGHLIGHT"</a>, <a href="#i997146">"MARKUP"</a>, and <a href="#i997446">"SNIPPET"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i997130"></a>
<div id="CCREF0708" class="refsect1">
<h2 class="refsect1">IFILTER<a id="sthref1605"></a><a id="sthref1606"></a><a id="sthref1607"></a><a id="sthref1608"></a><a id="sthref1609"></a></h2>
<p>Use this procedure to filter binary data to text.</p>
<p>This procedure takes binary data (<code dir="ltr">BLOB IN</code>), filters the data with the <code dir="ltr">AUTO_FILTER</code> filter, and writes the text version to a <code dir="ltr">CLOB</code>. (Any graphics in the original document are ignored.) <code dir="ltr">CTX_DOC.IFILTER</code> employs the safe callout, and it does not require an index, as <code dir="ltr">CTX_DOC.FILTER</code> does.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure will not be supported in future releases. Applications should use CTX_DOC.<a href="#i999845">POLICY_FILTER</a> instead.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1610"></a>Requirements</p>
<p>Because <code dir="ltr">CTX_DOC.IFILTER</code> employs the safe callout mechanism, the SQL*Net listener must be running and configured for <code dir="ltr">extproc</code> agent startup.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1611"></a>Syntax</p>
<pre dir="ltr">
CTX_DOC.IFILTER(data IN BLOB, text IN OUT NOCOPY CLOB);
</pre>
<dl>
<dt>data</dt>
<dd>
<p>Specify the binary data to be filtered.</p>
</dd>
<dt>text</dt>
<dd>
<p>Specify the destination <code dir="ltr">CLOB</code>. The filtered data is placed in here. This parameter must be a valid <code dir="ltr">CLOB</code> locator that is writable. Passing <code dir="ltr">NULL</code> or a non-writable <code dir="ltr">CLOB</code> will result in an error. Filtered text will be appended to the end of existing content, if any.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1612"></a>Example</p>
<p>The document text used in a <code dir="ltr">MATCHES</code> query can be <code dir="ltr">VARCHAR2</code> or <code dir="ltr">CLOB</code>. It does not accept <code dir="ltr">BLOB</code> input, so you cannot match filtered documents directly. Instead, you must filter the binary content to <code dir="ltr">CLOB</code> using the <code dir="ltr">AUTO_FILTER</code> filter. Assuming the document data is in bind variable <code dir="ltr">:doc_blob</code>:</p>
<pre dir="ltr">
  declare
    doc_text clob;
  begin
    -- create a temporary CLOB to hold the document text
    dbms_lob.createtemporary(doc_text, TRUE, DBMS_LOB.SESSION);

    -- call ctx_doc.ifilter to filter the BLOB to CLOB data
    ctx_doc.ifilter(:doc_blob, doc_text);

    -- now do the matches query using the CLOB version
    for c1 in (select * from queries where matches(query_string, doc_text)&gt;0)
    loop
      -- do what you need to do here
    end loop;

    dbms_lob.freetemporary(doc_text);
  end;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i997146"></a>
<div id="CCREF0710" class="refsect1">
<h2 class="refsect1">MARKUP <a id="sthref1613"></a><a id="sthref1614"></a><a id="sthref1615"></a><a id="sthref1616"></a><a id="sthref1617"></a><a id="sthref1618"></a><a id="sthref1619"></a><a id="sthref1620"></a></h2>
<p>The <code dir="ltr">CTX_DOC.MARKUP</code> procedure takes a query specification and a document textkey and returns a version of the document in which the query terms are marked up. These marked-up terms are either the words that satisfy a word query or the themes that satisfy an <code dir="ltr">ABOUT</code> query.</p>
<p>You can set the marked-up output to be either plaintext or HTML. The marked-up document returned by <code dir="ltr">CTX_DOC.MARKUP</code> does not include any graphics found in the original document.</p>
<p>You can use one of the pre-defined tag sets for marking highlighted terms, including a tag sequence that enables HTML navigation.</p>
<p>You usually call <code dir="ltr">CTX_DOC.MARKUP</code> after a query, from which you identify the document to be processed.</p>
<p>You can store the marked-up document either in memory or in a result table.</p>
<p>See CTX_DOC.<a href="#i999514">POLICY_MARKUP</a> for a version of this procedure that does not require an index.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle Text does not guarantee well-formed output from <code dir="ltr">CTX.DOC.MARKUP</code>, especially for terms that are already marked up with HTML or XML. In particular, unexpected nesting of markup tags may occasionally result.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1621"></a>Syntax 1: In-Memory Result Storage</p>
<pre dir="ltr">
exec CTX_DOC.MARKUP( 
</pre>
<pre dir="ltr">
index_name     IN VARCHAR2, 
textkey        IN VARCHAR2, 
text_query     IN VARCHAR2, 
restab         IN OUT NOCOPY CLOB, 
plaintext      IN BOOLEAN   DEFAULT FALSE, 
tagset         IN VARCHAR2  DEFAULT 'TEXT_DEFAULT', 
starttag       IN VARCHAR2  DEFAULT NULL, 
endtag         IN VARCHAR2  DEFAULT NULL, 
prevtag        IN VARCHAR2  DEFAULT NULL, 
nexttag        IN VARCHAR2  DEFAULT NULL);

exec CTX_DOC.MARKUP_CLOB_QUERY(
index_name     IN VARCHAR2,
textkey        IN VARCHAR2,
text_query     IN CLOB,
restab         IN OUT NOCOPY CLOB,
plaintext      IN BOOLEAN DEFAULT FALSE,
tagset         IN VARCHAR2 DEFAULT 'TEXT_DEFAULT',
starttag       IN VARCHAR2 DEFAULT NULL,
endtag         IN VARCHAR2 DEFAULT NULL,
prevtag        IN VARCHAR2 DEFAULT NULL,
nexttag        IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1622"></a>Syntax 2: Result Table Storage</p>
<pre dir="ltr">
exec CTX_DOC.MARKUP( 
</pre>
<pre dir="ltr">
index_name     IN VARCHAR2, 
textkey        IN VARCHAR2, 
text_query     IN VARCHAR2, 
restab         IN VARCHAR2, 
query_id       IN NUMBER    DEFAULT 0,  
plaintext      IN BOOLEAN   DEFAULT FALSE, 
tagset         IN VARCHAR2  DEFAULT 'TEXT_DEFAULT', 
starttag       IN VARCHAR2  DEFAULT NULL, 
endtag         IN VARCHAR2  DEFAULT NULL, 
prevtag        IN VARCHAR2  DEFAULT NULL, 
nexttag        IN VARCHAR2  DEFAULT NULL);

exec CTX_DOC.MARKUP_CLOB_QUERY(
index_name     IN VARCHAR2,
textkey        IN CLOB,
text_query     IN VARCHAR2,
restab         IN VARCHAR2,
query_id       IN NUMBER DEFAULT 0,
plaintext      IN BOOLEAN DEFAULT FALSE,
tagset         IN VARCHAR2 DEFAULT 'TEXT_DEFAULT',
starttag       IN VARCHAR2 DEFAULT NULL,
endtag         IN VARCHAR2 DEFAULT NULL,
prevtag        IN VARCHAR2 DEFAULT NULL,
nexttag        IN VARCHAR2 DEFAULT NULL);
</pre>
<dl>
<dt>index_name</dt>
<dd>
<p>Specify the name of the index associated with the text column containing the document identified by <span class="syntaxinline">textkey</span>.</p>
</dd>
<dt>textkey</dt>
<dd>
<p>Specify the unique identifier (usually the primary key) for the document.</p>
<p>The <span class="syntaxinline">textkey</span> parameter can be as follows:</p>
</dd>
</dl>
<ul>
<li>
<p>A single column primary key value</p>
</li>
<li>
<p>Encoded specification for a composite (multiple column) primary key. Use the CTX_DOC.<a href="#i997381">PKENCODE</a> procedure.</p>
</li>
<li>
<p>The rowid of the row containing the document</p>
</li>
</ul>
<p>Toggle between primary key and rowid identification using CTX_DOC.<a href="#i997423">SET_KEY_TYPE</a>.</p>
<dl>
<dt>text_query</dt>
<dd>
<p>Specify the original query expression used to retrieve the document.</p>
<p>If <span class="syntaxinline">text_query</span> includes wildcards, stemming, fuzzy matching which result in stopwords being returned, <code dir="ltr">MARKUP</code> does not highlight the stopwords.</p>
<p>If <span class="syntaxinline">text_query</span> contains the threshold operator, the operator is ignored. The <code dir="ltr">MARKUP</code> procedure always returns highlight information for the entire result set.</p>
</dd>
<dt>restab</dt>
<dd>
<p>You can specify that this procedure store the marked-up text to either a table or to an in-memory <code dir="ltr">CLOB</code>.</p>
<p>To store results to a table specify the name of the table. The result table must exist before you call this procedure.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For more information about the structure of the markup result table, see <a href="arestab.htm#i635134">"Markup Table"</a> in <a href="arestab.htm#g640034">Appendix A, "Oracle Text Result Tables"</a>.</div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<p>To store results in memory, specify the name of the CLOB locator. If <span class="syntaxinline">restab</span> is <code dir="ltr">NULL</code>, a temporary CLOB is allocated and returned. You must de-allocate the locator after using it.</p>
<p>If <span class="syntaxinline">restab</span> is not <code dir="ltr">NULL</code>, the CLOB is truncated before the operation.</p>
<dl>
<dt>query_id</dt>
<dd>
<p>Specify the identifier used to identify the row inserted into <span class="syntaxinline">restab</span>.</p>
<p>When <span class="syntaxinline">query_id</span> is not specified or set to <code dir="ltr">NULL</code>, it defaults to 0. You must manually truncate the table specified in <span class="syntaxinline">restab</span>.</p>
</dd>
<dt>plaintext</dt>
<dd>
<p>Specify <code dir="ltr">TRUE</code> to generate plaintext marked-up document. Specify <code dir="ltr">FALSE</code> to generate a marked-up HTML version of document if you are using the <code dir="ltr">AUTO_FILTER</code> filter or indexing HTML documents.</p>
</dd>
<dt>tagset</dt>
<dd>
<p>Specify one of the following pre-defined tag sets. The second and third columns show how the four different tags are defined for each <code dir="ltr">tagset</code>:</p>
<div class="inftblinformal">
<table class="cellalignment96" title="ctx_doc.markup tagset values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment90">
<th class="cellalignment97" id="r1c1-t15">Tagset</th>
<th class="cellalignment97" id="r1c2-t15">Tag</th>
<th class="cellalignment97" id="r1c3-t15">Tag Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment90">
<td class="cellalignment98" id="r2c1-t15" headers="r1c1-t15"><code dir="ltr">TEXT_DEFAULT</code></td>
<td class="cellalignment98" headers="r2c1-t15 r1c2-t15">starttag</td>
<td class="cellalignment98" headers="r2c1-t15 r1c3-t15"><code dir="ltr">&lt;&lt;&lt;</code></td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r3c1-t15" headers="r1c1-t15">&nbsp;</td>
<td class="cellalignment98" headers="r3c1-t15 r1c2-t15">endtag</td>
<td class="cellalignment98" headers="r3c1-t15 r1c3-t15"><code dir="ltr">&gt;&gt;&gt;</code></td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r4c1-t15" headers="r1c1-t15">&nbsp;</td>
<td class="cellalignment98" headers="r4c1-t15 r1c2-t15">prevtag</td>
<td class="cellalignment98" headers="r4c1-t15 r1c3-t15">&nbsp;</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r5c1-t15" headers="r1c1-t15">&nbsp;</td>
<td class="cellalignment98" headers="r5c1-t15 r1c2-t15">nexttag</td>
<td class="cellalignment98" headers="r5c1-t15 r1c3-t15">&nbsp;</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r6c1-t15" headers="r1c1-t15"><code dir="ltr">HTML_DEFAULT</code></td>
<td class="cellalignment98" headers="r6c1-t15 r1c2-t15">starttag</td>
<td class="cellalignment98" headers="r6c1-t15 r1c3-t15"><code dir="ltr">&lt;B&gt;</code></td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r7c1-t15" headers="r1c1-t15">&nbsp;</td>
<td class="cellalignment98" headers="r7c1-t15 r1c2-t15">endtag</td>
<td class="cellalignment98" headers="r7c1-t15 r1c3-t15"><code dir="ltr">&lt;/B&gt;</code></td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r8c1-t15" headers="r1c1-t15">&nbsp;</td>
<td class="cellalignment98" headers="r8c1-t15 r1c2-t15">prevtag</td>
<td class="cellalignment98" headers="r8c1-t15 r1c3-t15">&nbsp;</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r9c1-t15" headers="r1c1-t15">&nbsp;</td>
<td class="cellalignment98" headers="r9c1-t15 r1c2-t15">nexttag</td>
<td class="cellalignment98" headers="r9c1-t15 r1c3-t15">&nbsp;</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r10c1-t15" headers="r1c1-t15"><code dir="ltr">HTML_NAVIGATE</code></td>
<td class="cellalignment98" headers="r10c1-t15 r1c2-t15">starttag</td>
<td class="cellalignment98" headers="r10c1-t15 r1c3-t15"><code dir="ltr">&lt;A NAME=ctx%CURNUM&gt;&lt;B&gt;</code></td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r11c1-t15" headers="r1c1-t15">&nbsp;</td>
<td class="cellalignment98" headers="r11c1-t15 r1c2-t15">endtag</td>
<td class="cellalignment98" headers="r11c1-t15 r1c3-t15"><code dir="ltr">&lt;/B&gt;&lt;/A&gt;</code></td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r12c1-t15" headers="r1c1-t15">&nbsp;</td>
<td class="cellalignment98" headers="r12c1-t15 r1c2-t15">prevtag</td>
<td class="cellalignment98" headers="r12c1-t15 r1c3-t15"><code dir="ltr">&lt;A HREF=#ctx%PREVNUM&gt;&amp;lt;&lt;/A&gt;</code></td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r13c1-t15" headers="r1c1-t15">&nbsp;</td>
<td class="cellalignment98" headers="r13c1-t15 r1c2-t15">nexttag</td>
<td class="cellalignment98" headers="r13c1-t15 r1c3-t15"><code dir="ltr">&lt;A HREF=#ctx%NEXTNUM&gt;&amp;gt;&lt;/A&gt;</code></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></dd>
<dt>starttag</dt>
<dd>
<p>Specify the character(s) inserted by <code dir="ltr">MARKUP</code> to indicate the start of a highlighted term.</p>
<p>The sequence of <span class="syntaxinline">starttag, endtag, prevtag</span> and <span class="syntaxinline">nexttag</span> with respect to the highlighted word is as follows:</p>
<pre dir="ltr">
... prevtag starttag <span class="italic">word</span> endtag nexttag...
</pre></dd>
<dt>endtag</dt>
<dd>
<p>Specify the character(s) inserted by <code dir="ltr">MARKUP</code> to indicate the end of a highlighted term.</p>
</dd>
<dt>prevtag</dt>
<dd>
<p>Specify the markup sequence that defines the tag that navigates the user to the previous highlight.</p>
<p>In the markup sequences <span class="syntaxinline">prevtag</span> and <span class="syntaxinline">nexttag</span>, you can specify the following offset variables which are set dynamically:</p>
<div class="inftblinformal">
<table class="cellalignment96" title="ctx_doc.markup prevtag values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment90">
<th class="cellalignment97" id="r1c1-t16">Offset Variable</th>
<th class="cellalignment97" id="r1c2-t16">Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment90">
<td class="cellalignment98" id="r2c1-t16" headers="r1c1-t16"><code dir="ltr">%CURNUM</code></td>
<td class="cellalignment98" headers="r2c1-t16 r1c2-t16">the current offset number</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r3c1-t16" headers="r1c1-t16"><code dir="ltr">%PREVNUM</code></td>
<td class="cellalignment98" headers="r3c1-t16 r1c2-t16">the previous offset number</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r4c1-t16" headers="r1c1-t16"><code dir="ltr">%NEXTNUM</code></td>
<td class="cellalignment98" headers="r4c1-t16 r1c2-t16">the next offset number</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></dd>
</dl>
<p>See the description of the <code dir="ltr">HTML_NAVIGATE</code> tag set for an example.</p>
<dl>
<dt>nexttag</dt>
<dd>
<p>Specify the markup sequence that defines the tag that navigates the user to the next highlight tag.</p>
<p>Within the markup sequence, you can use the same offset variables you use for <span class="syntaxinline">prevtag</span>. See the explanation for <span class="syntaxinline">prevtag</span> and the <code dir="ltr">HTML_NAVIGATE</code> tag set for an example.</p>
</dd>
</dl>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1623"></a>Examples</p>
<p class="subhead1"><a id="CCREF23912"></a>In-Memory Markup</p>
<p>The following code takes document (<span class="italic">the dog chases the cat</span>), performs the assigned markup on it, and stores the result in memory.</p>
<pre dir="ltr">
set serveroutput on
 
drop table mark_tab;
create table mark_tab (id number primary key, text varchar2(80) );
insert into mark_tab values ('1', 'The dog chases the cat.');
 
create index mark_tab_idx on mark_tab(text)
        indextype is ctxsys.context parameters
        ('filter ctxsys.null_filter');
 
declare
mklob clob;
amt number := 40;
line varchar2(80);
 
begin
 ctx_doc.markup('mark_tab_idx','1','dog AND cat', mklob);
 -- mklob is NULL when passed-in, so ctx_doc.markup will
 -- allocate a temporary CLOB for us and place the results there.
 dbms_lob.read(mklob, amt, 1, line);
 dbms_output.put_line('FIRST 40 CHARS ARE:'||line);
 -- have to de-allocate the temp lob
 dbms_lob.freetemporary(mklob);
 end;
/
</pre>
<p>The output from this example shows what the marked-up document looks like:</p>
<pre dir="ltr">
FIRST 40 CHARS ARE:  The &lt;&lt;&lt;dog&gt;&gt;&gt; chases the &lt;&lt;&lt;cat&gt;&gt;&gt;.
</pre>
<p class="subhead1"><a id="CCREF23913"></a>Markup Table</p>
<p>Create<a id="sthref1624"></a><a id="sthref1625"></a> the highlight markup table to store the marked-up document as follows:</p>
<pre dir="ltr">
create table markuptab (query_id  number,   
                        document  clob); 
</pre>
<p class="subhead1"><a id="CCREF23914"></a>Word Highlighting in HTML<a id="sthref1626"></a><a id="sthref1627"></a></p>
<p>You can also store your MARKUP results in a table. To create HTML highlight markup for the words <span class="italic">dog</span> or <span class="italic">cat</span> for document 23, enter the following statement:</p>
<pre dir="ltr">
begin
  ctx_doc.markup(index_name =&gt; 'my_index',
                      textkey =&gt; '23',
                      text_query =&gt; 'dog|cat',
                      restab =&gt; 'markuptab',
                      query_id =&gt; '1',
                      tagset =&gt; 'HTML_DEFAULT');
end;
</pre>
<p class="subhead1"><a id="CCREF23915"></a>Theme Highlighting in HTML<a id="sthref1628"></a></p>
<p>To create HTML highlight markup for the theme of <span class="italic">politics</span> for document 23, enter the following statement:</p>
<pre dir="ltr">
begin
  ctx_doc.markup(index_name =&gt; 'my_index',
                      textkey =&gt; '23',
                      text_query =&gt; 'about(politics)',
                      restab =&gt; 'markuptab',
                      query_id =&gt; '1',
                      tagset =&gt; 'HTML_DEFAULT');
end;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1629"></a>Restrictions</p>
<p><code dir="ltr">CTX_DOC.MARKUP</code> does not support the use of query templates.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1630"></a>Related Topics</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i999514">"POLICY_MARKUP"</a>, <a href="#i997035">"HIGHLIGHT"</a> and <a href="#i997446">"SNIPPET"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i997381"></a>
<div id="CCREF23916" class="refsect1">
<h2 class="refsect1">PKENCODE <a id="sthref1631"></a><a id="sthref1632"></a><a id="sthref1633"></a></h2>
<p>The <code dir="ltr">CTX_DOC.PKENCODE</code> function converts a composite textkey list into a single string and returns the string.</p>
<p>The string created by <code dir="ltr">PKENCODE</code> can be used as the primary key parameter <span class="syntaxinline">textkey</span> in other <code dir="ltr">CTX_DOC</code> procedures, such as CTX_DOC.<a href="#CHDDHABH">THEMES</a> and CTX_DOC.<a href="#i996898">GIST</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1634"></a>Syntax</p>
<pre dir="ltr">
CTX_DOC.PKENCODE(
         pk1    IN VARCHAR2,
         pk2    IN VARCHAR2 DEFAULT NULL, 
         pk4    IN VARCHAR2 DEFAULT NULL, 
         pk5    IN VARCHAR2 DEFAULT NULL, 
         pk6    IN VARCHAR2 DEFAULT NULL,
         pk7    IN VARCHAR2 DEFAULT NULL,
         pk8    IN VARCHAR2 DEFAULT NULL,
         pk9    IN VARCHAR2 DEFAULT NULL,
         pk10   IN VARCHAR2 DEFAULT NULL,
         pk11   IN VARCHAR2 DEFAULT NULL,
         pk12   IN VARCHAR2 DEFAULT NULL,
         pk13   IN VARCHAR2 DEFAULT NULL,
         pk14   IN VARCHAR2 DEFAULT NULL,
         pk15   IN VARCHAR2 DEFAULT NULL,
         pk16   IN VARCHAR2 DEFAULT NULL)
RETURN VARCHAR2;
</pre>
<dl>
<dt>pk1-pk16</dt>
<dd>
<p>Each PK argument specifies a column element in the composite textkey list. You can encode at most 16 column elements.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1635"></a>Returns</p>
<p>String that represents the encoded value of the composite textkey.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1636"></a>Example</p>
<pre dir="ltr">
begin 
ctx_doc.gist('newsindex',CTX_DOC.PKENCODE('smith', 14), 'CTX_GIST');
end;
</pre>
<p>In this example, <span class="italic">smith</span> and <span class="italic">14</span> constitute the composite textkey value for the document.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i999845"></a>
<div id="CCREF2116" class="refsect1">
<h2 class="refsect1">POLICY_FILTER<a id="sthref1637"></a><a id="sthref1638"></a><a id="sthref1639"></a></h2>
<p>Generates a plain text or an HTML version of a document. With this procedure, no <code dir="ltr">CONTEXT</code> index is required.</p>
<p>This procedure uses a trusted callout.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1640"></a>Syntax</p>
<pre dir="ltr">
ctx_doc.policy_filter(policy_name    in  VARCHAR2,
                      document       in [VARCHAR2|CLOB|BLOB|BFILE],
                      restab         in out nocopy CLOB,
                      plaintext      in BOOLEAN default FALSE,
                      language       in VARCHAR2 default NULL,
                      format         in VARCHAR2 default NULL,
                      charset        in VARCHAR2 default NULL);
</pre>
<dl>
<dt>policy_name</dt>
<dd>
<p>Specify the policy name created with CTX_DDL.<a href="cddlpkg.htm#i997662">CREATE_POLICY</a>.</p>
</dd>
<dt>document</dt>
<dd>
<p>Specify the document to filter.</p>
</dd>
<dt>restab</dt>
<dd>
<p>Specify the name of the <code dir="ltr">CLOB</code> locator.</p>
</dd>
<dt>plaintext</dt>
<dd>
<p>Specify <code dir="ltr">TRUE</code> to generate a plaintext version of the document. Specify <code dir="ltr">FALSE</code> to generate an HTML version of the document if you are using the <code dir="ltr">AUTO_FILTER</code> filter or indexing HTML documents.</p>
</dd>
<dt>language</dt>
<dd>
<p>Specify the language of the document. Use an Oracle Text supported language value as you would in the language column of the base table. See <a href="cdatadic.htm#i1007615">BASIC_LEXER</a> in <a href="cdatadic.htm#BHCDHIAI">Chapter 2, "Oracle Text Indexing Elements"</a>.</p>
</dd>
<dt>format</dt>
<dd>
<p>Specify the format of the document. Use an Oracle Text supported format value, either TEXT, BINARY or IGNORE as you would specify in the format column of the base table. For more information, see the format column description in <a href="csql.htm#i997677">CREATE INDEX</a> in <a href="csql.htm#i996741">Chapter 1, "Oracle Text SQL Statements and Operators"</a>.</p>
</dd>
<dt>charset</dt>
<dd>
<p>Specify the character set of the document. Use an Oracle Text supported value as you would specify in the charset column of the base table. See <a href="cdatadic.htm#BHCIFFHE">Indexing Mixed-Character Set Columns</a> in <a href="cdatadic.htm#BHCDHIAI">Chapter 2, "Oracle Text Indexing Elements"</a>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i999414"></a>
<div id="CCREF2117" class="refsect1">
<h2 class="refsect1">POLICY_GIST<a id="sthref1641"></a><a id="sthref1642"></a><a id="sthref1643"></a></h2>
<p>Generates a Gist or theme summary for document.You can generate paragraph-level or sentence-level gists or theme summaries. With this procedure, no <code dir="ltr">CONTEXT</code> index is required.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code dir="ltr">CTX_DOC.POLICY_GIST</code> requires an installed knowledge base. A knowledge base may or may not have been installed with Oracle Text. For more information on knowledge bases, see <a class="olink CCAPP0900" href="../../text.112/e24435/cthes.htm#CCAPP0900"><span class="italic">Oracle Text Application Developer's Guide</span></a>.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1644"></a>Syntax</p>
<pre dir="ltr">
ctx_doc.policy_gist(policy_name      in VARCHAR2,
                    document         in [VARCHAR2|CLOB|BLOB|BFILE],
                    restab           in out nocopy CLOB,
                    glevel           in VARCHAR2 default 'P',
                    pov              in VARCHAR2 default 'GENERIC',
                    numParagraphs    in VARCHAR2 default NULL,
                    maxPercent       in NUMBER default NULL,
                    num_themes       in NUMBER default 50
                    language         in VARCHAR2 default NULL,
                    format           in VARCHAR2 default NULL,
                    charset          in VARCHAR2 default NULL
);
</pre>
<dl>
<dt>policy_name</dt>
<dd>
<p>Specify the policy name created with CTX_DDL.<a href="cddlpkg.htm#i997662">CREATE_POLICY</a>.</p>
</dd>
<dt>document</dt>
<dd>
<p>Specify the document for which to generate the Gist or theme summary.</p>
</dd>
<dt>restab</dt>
<dd>
<p>Specify the name of the <code dir="ltr">CLOB</code> locator.</p>
</dd>
<dt>glevel</dt>
<dd>
<p>Specify the type of gist or theme summary to produce. The possible values are:</p>
</dd>
</dl>
<ul>
<li>
<p><span class="italic">P</span> for paragraph</p>
</li>
<li>
<p><span class="italic">S</span> for sentence</p>
</li>
</ul>
<p>The default is <span class="italic">P</span>.</p>
<dl>
<dt>pov</dt>
<dd>
<p>Specify whether a gist or a single theme summary is generated. The type of gist or theme summary generated (sentence-level or paragraph-level) depends on the value specified for <code dir="ltr">glevel</code>.</p>
<p>To generate a gist for the entire document, specify a value of 'GENERIC' for <code dir="ltr">pov</code>. To generate a theme summary for a single theme in a document, specify the theme as the value for <code dir="ltr">pov</code>.</p>
<p>When using result table storage and you do not specify a value for <code dir="ltr">pov</code>, this procedure returns the generic gist plus up to 50 theme summaries for the document.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
The <code dir="ltr">pov</code> parameter is case sensitive. To return a gist for a document, specify '<code dir="ltr">GENERIC</code>' in all uppercase. To return a theme summary, specify the theme <span class="italic">exactly</span> as it is generated for the document.
<p>Only the themes generated by <a href="#CHDDHABH">THEMES</a> for a document can be used as input for <code dir="ltr">pov</code>.</p>
</div>
</dd>
<dt>numParagraphs</dt>
<dd>
<p>Specify the maximum number of document paragraphs (or sentences) selected for the document gist or theme summaries. The default is 16.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr">numParagraphs</code> parameter is used only when this parameter yields a smaller gist or theme summary size than the gist or theme summary size yielded by the <code dir="ltr">maxPercent</code> parameter.
<p>This means that the system always returns the smallest size gist or theme summary.</p>
</div>
</dd>
<dt>maxPercent</dt>
<dd>
<p>Specify the maximum number of document paragraphs (or sentences) selected for the document gist or theme summaries as a percentage of the total paragraphs (or sentences) in the document. The default is 10.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr">maxPercent</code> parameter is used only when this parameter yields a smaller gist or theme summary size than the gist or theme summary size yielded by the <code dir="ltr">numParagraphs</code> parameter.
<p>This means that the system always returns the smallest size gist or theme summary.</p>
</div>
</dd>
<dt>num_themes</dt>
<dd>
<p>Specify the number of theme summaries to produce when you do not specify a value for <code dir="ltr">pov</code>. For example, if you specify 10, this procedure returns the top 10 theme summaries. The default is 50.</p>
<p>If you specify 0 or NULL, this procedure returns all themes in a document. If the document contains more than 50 themes, only the top 50 themes show conceptual hierarchy.</p>
</dd>
<dt>language</dt>
<dd>
<p>Specify the language of the document. Use an Oracle Text supported language value as you would in the language column of the base table. See <a href="cdatadic.htm#i1007955">"MULTI_LEXER"</a>.</p>
</dd>
<dt>format</dt>
<dd>
<p>Specify the format of the document. Use an Oracle Text supported format value, either TEXT, BINARY or IGNORE as you would specify in the format column of the base table. For more information, see the format column description in <a href="csql.htm#i997677">"CREATE INDEX"</a>.</p>
</dd>
<dt>charset</dt>
<dd>
<p>Specify the character set of the document. Use an Oracle Text supported value as you would specify in the charset column of the base table.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i999473"></a>
<div id="CCREF2118" class="refsect1">
<h2 class="refsect1">POLICY_HIGHLIGHT<a id="sthref1645"></a><a id="sthref1646"></a><a id="sthref1647"></a><a id="sthref1648"></a><a id="sthref1649"></a><a id="sthref1650"></a><a id="sthref1651"></a></h2>
<p>Generates plain text or HTML highlighting offset information for a document.With this procedure, no <code dir="ltr">CONTEXT</code> index is required.</p>
<p>The offset information is generated for the terms in the document that satisfy the query you specify. These highlighted terms are either the words that satisfy a word query or the themes that satisfy an <code dir="ltr">ABOUT</code> query.</p>
<p>You can generate highlight offsets for either plaintext or HTML versions of the document. You can apply the offset information to the same documents filtered with CTX_DOC.<a href="#i997868">FILTER</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1652"></a>Syntax</p>
<pre dir="ltr">
exec ctx_doc.policy_highlight(
                         policy_name  in  VARCHAR2,
                         document     in  [VARCHAR2|CLOB|BLOB|BFILE],
                         text_query   in VARCHAR2,
                         restab       in out nocopy highlight_tab,
                         plaintext    in boolean FALSE
                         language     in VARCHAR2 default NULL,
                         format       in VARCHAR2 default NULL,
                         charset      in VARCHAR2 default NULL
);

exec ctx_doc.policy_highlight_clob_query(
                         policy_name  in VARCHAR2,
                         document     in [VARCHAR2|CLOB|BLOB|BFILE],
                         text_query   in CLOB,
                         restab       in out nocopy highlight_tab,
                         plaintext    in boolean FALSE
                         language     in VARCHAR2 default NULL,
                         format       in VARCHAR2 default NULL,
                         charset      in VARCHAR2 default NULL
);
</pre>
<dl>
<dt>policy_name</dt>
<dd>
<p>Specify the policy name created with CTX_DDL.<a href="cddlpkg.htm#i997662">CREATE_POLICY</a>.</p>
</dd>
<dt>document</dt>
<dd>
<p>Specify the document to generate highlighting offset information.</p>
</dd>
<dt>text_query</dt>
<dd>
<p>Specify the original query expression used to retrieve the document. If NULL, no highlights are generated.</p>
<p>If <code dir="ltr">text_query</code> includes wildcards, stemming, or fuzzy matching which result in stopwords being returned, this procedure does not highlight the stopwords.</p>
<p>If <code dir="ltr">text_query</code> contains the threshold operator, the operator is ignored. This procedure always returns highlight information for the entire result set.</p>
</dd>
<dt>restab</dt>
<dd>
<p>Specify the name of the <code dir="ltr">highlight_tab</code> PL/SQL index-by-table type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
see <a href="#i997035">"HIGHLIGHT"</a> for more information about the structure of the <code dir="ltr">highlight_tab</code> table type.</div>
</dd>
<dt>plaintext</dt>
<dd>
<p>Specify <code dir="ltr">TRUE</code> to generate a plaintext offsets of the document.</p>
<p>Specify <code dir="ltr">FALSE</code> to generate HTML offsets of the document if you are using the <code dir="ltr">AUTO_FILTER</code> filter or indexing HTML documents.</p>
</dd>
<dt>language</dt>
<dd>
<p>Specify the language of the document. Use an Oracle Text supported language value as you would in the language column of the base table. See <a href="cdatadic.htm#i1007955">"MULTI_LEXER"</a> in <a href="cdatadic.htm#BHCDHIAI">Chapter 2, "Oracle Text Indexing Elements"</a>.</p>
</dd>
<dt>format</dt>
<dd>
<p>Specify the format of the document. Use an Oracle Text supported format value, either TEXT, BINARY or IGNORE as you would specify in the format column of the base table. For more information, see the format column description under <a href="csql.htm#i997677">"CREATE INDEX"</a>.</p>
</dd>
<dt>charset</dt>
<dd>
<p>Specify the character set of the document. Use an Oracle Text supported value as you would specify in the charset column of the base table.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1653"></a>Restrictions</p>
<p><code dir="ltr">CTX_DOC.POLICY_HIGHLIGHT</code> does not support the use of query templates.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i999514"></a>
<div id="CCREF2119" class="refsect1">
<h2 class="refsect1">POLICY_MARKUP<a id="sthref1654"></a><a id="sthref1655"></a><a id="sthref1656"></a><a id="sthref1657"></a><a id="sthref1658"></a><a id="sthref1659"></a><a id="sthref1660"></a></h2>
<p>Generates plain text or HTML version of a document with query terms highlighted. With this procedure, no <code dir="ltr">CONTEXT</code> index is required.</p>
<p>The <code dir="ltr">CTX_DOC.POLICY_MARKUP</code> procedure takes a query specification and a document and returns a version of the document in which the query terms are marked up. These marked-up terms are either the words that satisfy a word query or the themes that satisfy an <code dir="ltr">ABOUT</code> query.</p>
<p>You can set the marked-up output to be either plaintext or HTML.</p>
<p>You can use one of the pre-defined tag sets for marking highlighted terms, including a tag sequence that enables HTML navigation.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1661"></a>Syntax</p>
<pre dir="ltr">
ctx_doc.policy_markup(policy_name     in VARCHAR2,
                      document        in [VARCHAR2|CLOB|BLOB|BFILE],
                      text_query      in VARCHAR2,
                      restab          in out nocopy CLOB,
                      plaintext       in BOOLEAN default FALSE,
                      tagset          in VARCHAR2 default 'TEXT_DEFAULT',
                      starttag        in VARCHAR2 default NULL,
                      endtag          in VARCHAR2 default NULL,
                      prevtag         in VARCHAR2 default NULL,
                      nexttag         in VARCHAR2 default NULL
                      language        in VARCHAR2 default NULL,
                      format          in VARCHAR2 default NULL,
                      charset         in VARCHAR2 default NULL
);

ctx_doc.policy_markup_clob_query(
                      policy_name     in VARCHAR2,
                      document        in [VARCHAR2|CLOB|BLOB|BFILE],
                      text_query      in CLOB,
                      restab          in out nocopy CLOB,
                      plaintext       in BOOLEAN default FALSE,
                      tagset          in VARCHAR2 default 'TEXT_DEFAULT',
                      starttag        in VARCHAR2 default NULL,
                      endtag          in VARCHAR2 default NULL,
                      prevtag         in VARCHAR2 default NULL,
                      nexttag         in VARCHAR2 default NULL
                      language        in VARCHAR2 default NULL,
                      format          in VARCHAR2 default NULL,
                      charset         in VARCHAR2 default NULL
);
</pre>
<dl>
<dt>policy_name</dt>
<dd>
<p>Specify the policy name created with CTX_DDL.<a href="cddlpkg.htm#i997662">CREATE_POLICY</a>.</p>
</dd>
<dt>document</dt>
<dd>
<p>Specify the document to generate highlighting offset information.</p>
</dd>
<dt>text_query</dt>
<dd>
<p>Specify the original query expression used to retrieve the document.</p>
<p>If <code dir="ltr">text_query</code> includes a NULL, then this procedure will fail and generate errors.</p>
<p>If <code dir="ltr">text_query</code> includes wildcards, stemming, or fuzzy matching which result in stopwords being returned, then this procedure does not highlight the stopwords.</p>
<p>If <code dir="ltr">text_query</code> contains the threshold operator, the operator is ignored. This procedure always returns highlight information for the entire result set.</p>
</dd>
<dt>restab</dt>
<dd>
<p>Specify the name of the <code dir="ltr">CLOB</code> locator.</p>
</dd>
<dt>plaintext</dt>
<dd>
<p>Specify <code dir="ltr">TRUE</code> to generate a plaintext marked-up document. Specify <code dir="ltr">FALSE</code> to generate a marked-up HTML version of the document if you are using the <code dir="ltr">AUTO_FILTER</code> filter or indexing HTML documents.</p>
</dd>
<dt>tagset</dt>
<dd>
<p>Specify one of the following pre-defined tag sets. The second and third columns show how the four different tags are defined for each tagset:</p>
<div class="inftblinformal">
<table class="cellalignment96" title="ctx_doc.policy_markup tagset values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment90">
<th class="cellalignment97" id="r1c1-t23">Tagset</th>
<th class="cellalignment97" id="r1c2-t23">Tag</th>
<th class="cellalignment97" id="r1c3-t23">Tag Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment90">
<td class="cellalignment98" id="r2c1-t23" headers="r1c1-t23"><code dir="ltr">TEXT_DEFAULT</code></td>
<td class="cellalignment98" headers="r2c1-t23 r1c2-t23">starttag</td>
<td class="cellalignment98" headers="r2c1-t23 r1c3-t23"><code dir="ltr">&lt;&lt;&lt;</code></td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r3c1-t23" headers="r1c1-t23">&nbsp;</td>
<td class="cellalignment98" headers="r3c1-t23 r1c2-t23">endtag</td>
<td class="cellalignment98" headers="r3c1-t23 r1c3-t23"><code dir="ltr">&gt;&gt;&gt;</code></td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r4c1-t23" headers="r1c1-t23">&nbsp;</td>
<td class="cellalignment98" headers="r4c1-t23 r1c2-t23">prevtag</td>
<td class="cellalignment98" headers="r4c1-t23 r1c3-t23">&nbsp;</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r5c1-t23" headers="r1c1-t23">&nbsp;</td>
<td class="cellalignment98" headers="r5c1-t23 r1c2-t23">nexttag</td>
<td class="cellalignment98" headers="r5c1-t23 r1c3-t23">&nbsp;</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r6c1-t23" headers="r1c1-t23"><code dir="ltr">HTML_DEFAULT</code></td>
<td class="cellalignment98" headers="r6c1-t23 r1c2-t23">starttag</td>
<td class="cellalignment98" headers="r6c1-t23 r1c3-t23"><code dir="ltr">&lt;B&gt;</code></td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r7c1-t23" headers="r1c1-t23">&nbsp;</td>
<td class="cellalignment98" headers="r7c1-t23 r1c2-t23">endtag</td>
<td class="cellalignment98" headers="r7c1-t23 r1c3-t23"><code dir="ltr">&lt;/B&gt;</code></td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r8c1-t23" headers="r1c1-t23">&nbsp;</td>
<td class="cellalignment98" headers="r8c1-t23 r1c2-t23">prevtag</td>
<td class="cellalignment98" headers="r8c1-t23 r1c3-t23">&nbsp;</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r9c1-t23" headers="r1c1-t23">&nbsp;</td>
<td class="cellalignment98" headers="r9c1-t23 r1c2-t23">nexttag</td>
<td class="cellalignment98" headers="r9c1-t23 r1c3-t23">&nbsp;</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r10c1-t23" headers="r1c1-t23"><code dir="ltr">HTML_NAVIGATE</code></td>
<td class="cellalignment98" headers="r10c1-t23 r1c2-t23">starttag</td>
<td class="cellalignment98" headers="r10c1-t23 r1c3-t23"><code dir="ltr">&lt;A NAME=ctx%CURNUM&gt;&lt;B&gt;</code></td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r11c1-t23" headers="r1c1-t23">&nbsp;</td>
<td class="cellalignment98" headers="r11c1-t23 r1c2-t23">endtag</td>
<td class="cellalignment98" headers="r11c1-t23 r1c3-t23"><code dir="ltr">&lt;/B&gt;&lt;/A&gt;</code></td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r12c1-t23" headers="r1c1-t23">&nbsp;</td>
<td class="cellalignment98" headers="r12c1-t23 r1c2-t23">prevtag</td>
<td class="cellalignment98" headers="r12c1-t23 r1c3-t23"><code dir="ltr">&lt;A HREF=#ctx%PREVNUM&gt;&amp;lt;&lt;/A&gt;</code></td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r13c1-t23" headers="r1c1-t23">&nbsp;</td>
<td class="cellalignment98" headers="r13c1-t23 r1c2-t23">nexttag</td>
<td class="cellalignment98" headers="r13c1-t23 r1c3-t23"><code dir="ltr">&lt;A HREF=#ctx%NEXTNUM&gt;&amp;gt;&lt;/A&gt;</code></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></dd>
<dt>starttag</dt>
<dd>
<p>Specify the character(s) inserted by <code dir="ltr">MARKUP</code> to indicate the start of a highlighted term.</p>
<p>The sequence of <span class="syntaxinline">starttag, endtag, prevtag</span> and <span class="syntaxinline">nexttag</span> with regard to the highlighted word is as follows:</p>
<pre dir="ltr">
... prevtag starttag <span class="italic">word</span> endtag nexttag...
</pre></dd>
<dt>endtag</dt>
<dd>
<p>Specify the character(s) inserted by <code dir="ltr">MARKUP</code> to indicate the end of a highlighted term.</p>
</dd>
<dt>prevtag</dt>
<dd>
<p>Specify the markup sequence that defines the tag that navigates the user to the previous highlight.</p>
<p>In the markup sequences <span class="syntaxinline">prevtag</span> and <span class="syntaxinline">nexttag</span>, you can specify the following offset variables which are set dynamically:</p>
<div class="inftblinformal">
<table class="cellalignment96" title="ctx_doc.policy_markup prevtag values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment90">
<th class="cellalignment97" id="r1c1-t24">Offset Variable</th>
<th class="cellalignment97" id="r1c2-t24">Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment90">
<td class="cellalignment98" id="r2c1-t24" headers="r1c1-t24"><code dir="ltr">%CURNUM</code></td>
<td class="cellalignment98" headers="r2c1-t24 r1c2-t24">the current offset number</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r3c1-t24" headers="r1c1-t24"><code dir="ltr">%PREVNUM</code></td>
<td class="cellalignment98" headers="r3c1-t24 r1c2-t24">the previous offset number</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r4c1-t24" headers="r1c1-t24"><code dir="ltr">%NEXTNUM</code></td>
<td class="cellalignment98" headers="r4c1-t24 r1c2-t24">the next offset number</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></dd>
</dl>
</div>
<!-- class="refsubsect" -->
<p>See the description of the <code dir="ltr">HTML_NAVIGATE</code> tagset for an example.</p>
<dl>
<dt>nexttag</dt>
<dd>
<p>Specify the markup sequence that defines the tag that navigates the user to the next highlight tag.</p>
<p>Within the markup sequence, you can use the same offset variables you use for <span class="syntaxinline">prevtag</span>. See the explanation for <span class="syntaxinline">prevtag</span> and the <code dir="ltr">HTML_NAVIGATE</code> tagset for an example.</p>
</dd>
<dt>language</dt>
<dd>
<p>Specify the language of the document. Use an Oracle Text supported language value as you would in the language column of the base table. See <a href="cdatadic.htm#i1007955">"MULTI_LEXER"</a> in <a href="cdatadic.htm#BHCDHIAI">Chapter 2, "Oracle Text Indexing Elements"</a>.</p>
</dd>
<dt>format</dt>
<dd>
<p>Specify the format of the document. Use an Oracle Text supported format value, either TEXT, BINARY or IGNORE as you would specify in the format column of the base table. For more information, see the format column description in <a href="csql.htm#i997677">"CREATE INDEX"</a>.</p>
</dd>
<dt>charset</dt>
<dd>
<p>Specify the character set of the document. Use an Oracle Text supported value as you would specify in the charset column of the base table. See <a href="cdatadic.htm#BHCIFFHE">"Indexing Mixed-Character Set Columns"</a> in <a href="cdatadic.htm#BHCDHIAI">Chapter 2, "Oracle Text Indexing Elements"</a>.</p>
</dd>
</dl>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1662"></a>Restrictions</p>
<p><code dir="ltr">CTX_DOC.POLICY_MARKUP</code> does not support the use of query templates.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDGHGJH"></a>
<div id="CCREF2120" class="refsect1">
<h2 class="refsect1">POLICY_SNIPPET<a id="sthref1663"></a><a id="sthref1664"></a></h2>
<p>Display marked-up keywords in context. The returned text contains either the words that satisfy a word query or the themes that satisfy an <code dir="ltr">ABOUT</code> query. This version of the CTX_DOC.<a href="#i997446">SNIPPET</a> procedure does not require an index.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1665"></a>Syntax</p>
<p class="subhead2"><a id="CCREF23917"></a>Syntax 1</p>
<pre dir="ltr">
exec CTX_DOC.POLICY_SNIPPET(
</pre>
<pre dir="ltr">
policy_name              IN VARCHAR2,
document                 IN [VARCHAR2|CLOB|BLOB|BFILE],
text_query               IN VARCHAR2,
language                 IN VARCHAR2 default NULL,
format                   IN VARCHAR2 default NULL,
charset                  IN VARCHAR2 default NULL,
starttag                 IN VARCHAR2 DEFAULT '&lt;b&gt;',
endtag                   IN VARCHAR2 DEFAULT '&lt;/b&gt;',
entity_translation       IN BOOLEAN  DEFAULT TRUE,
separator                IN VARCHAR2 DEFAULT '&lt;b&gt;...&lt;/b&gt;'
)
return varchar2;
</pre>
<p class="subhead2"><a id="CCREF23918"></a>Syntax 2</p>
<pre dir="ltr">
exec CTX_DOC.POLICY_SNIPPET_CLOB_QUERY(
policy_name              IN VARCHAR2,
document                 IN [VARCHAR2|CLOB|BLOB|BFILE],
text_query               IN CLOB,
language                 IN VARCHAR2 default NULL,
format                   IN VARCHAR2 default NULL,
charset                  IN VARCHAR2 default NULL,
starttag                 IN VARCHAR2 DEFAULT '&lt;b&gt;',
endtag                   IN VARCHAR2 DEFAULT '&lt;/b&gt;',
entity_translation       IN BOOLEAN DEFAULT TRUE,
separator                IN VARCHAR2 DEFAULT '&lt;b&gt;...&lt;/b&gt;'
)
return varchar2;
</pre>
<dl>
<dt>policy_name</dt>
<dd>
<p>Specify the name of a policy created with <code dir="ltr">CTX_DDL.CREATE_POLICY</code>.</p>
</dd>
<dt>document</dt>
<dd>
<p>Specify the document in which to search for keywords.</p>
</dd>
</dl>
<dl>
<dt>text_query</dt>
<dd>
<p>Specify the original query expression used to retrieve the document. If NULL, no highlights are generated.</p>
<p>If <code dir="ltr">text_query</code> includes wildcards, stemming, fuzzy matching which result in stopwords being returned, <code dir="ltr">POLICY_SNIPPET</code> does not highlight the stopwords.</p>
<p>If <code dir="ltr">text_query</code> contains the threshold operator, the operator is ignored.</p>
</dd>
<dt>language</dt>
<dd>
<p>Specify the language of the document. Use an Oracle Text supported language value as you would in the language column of the base table. See <a href="cdatadic.htm#i1007955">MULTI_LEXER</a> in <a href="cdatadic.htm#BHCDHIAI">Chapter 2, "Oracle Text Indexing Elements"</a>.</p>
</dd>
<dt>format</dt>
<dd>
<p>Specify the format of the document. Use an Oracle Text supported format value, either TEXT, BINARY or IGNORE as you would specify in the format column of the base table. For more information, see the format column description in <a href="csql.htm#i997677">"CREATE INDEX"</a>.</p>
</dd>
<dt>charset</dt>
<dd>
<p>Specify the character set of the document. Use an Oracle Text supported value as you would specify in the charset column of the base table. See <a href="cdatadic.htm#BHCIFFHE">"Indexing Mixed-Character Set Columns"</a> in <a href="cdatadic.htm#BHCDHIAI">Chapter 2, "Oracle Text Indexing Elements"</a>.</p>
</dd>
<dt>starttag</dt>
<dd>
<p>Specify the start tag for marking up the query keywords. Default is '<span class="italic">&lt;b&gt;</span>'.</p>
</dd>
<dt>endtag</dt>
<dd>
<p>Specify the end tag for marking up the query keywords. Default is '<span class="italic">&lt;/b&gt;</span>'.</p>
</dd>
<dt>entity_translation</dt>
<dd>
<p>Specify if you want HTML entities to be translated. The default is TRUE, which means the special entities (<span class="italic">&lt;</span>, <span class="italic">&gt;</span>, and <span class="italic">&amp;</span>) are translated into their alternate forms ('<span class="italic">&amp;lt;</span>', '<span class="italic">&amp;gt;</span>', and '<span class="italic">&amp;amp;</span>') when output by the procedure. However, special characters in the markup tags generated by <code dir="ltr">CTX_DOC.POLICY_SNIPPET</code> will not be translated.</p>
</dd>
<dt>separator</dt>
<dd>
<p>Specify the string separating different returned fragments. Default is '<span class="italic">&lt;b&gt;...&lt;/b&gt;</span>'.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1666"></a>Limitations</p>
<p><code dir="ltr">CTX_DOC.POLICY_SNIPPET</code> does not support the use of query templates.</p>
<p><code dir="ltr">CTX_DOC.POLICY_SNIPPET</code> displays marked-up keywords in context when used with <code dir="ltr">NULL_SECTION_GROUP</code>. However, there are limitations when using this procedure with XML documents. When used with <code dir="ltr">XML_SECTION_GROUP</code> or <code dir="ltr">AUTO_SECTION_GROUP</code>, the XML structure is ignored and user-specified tags are stripped out, which results in parts of surrounding text to be included in the returned snippet.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1667"></a>Related Topics</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i997446">"SNIPPET"</a>, <a href="#i997035">"HIGHLIGHT"</a>, and <a href="#i997146">"MARKUP"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i999671"></a>
<div id="CCREF2121" class="refsect1">
<h2 class="refsect1">POLICY_THEMES<a id="sthref1668"></a><a id="sthref1669"></a><a id="sthref1670"></a></h2>
<p>Generates a list of themes for a document. With this procedure, no <code dir="ltr">CONTEXT</code> index is required.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code dir="ltr">CTX_DOC.POLICY_THEMES</code> requires an installed knowledge base. A knowledge base may or may not have been installed with Oracle Text. For more information on knowledge bases, see the <a class="olink CCAPP0900" href="../../text.112/e24435/cthes.htm#CCAPP0900"><span class="italic">Oracle Text Application Developer's Guide</span></a>.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1671"></a>Syntax</p>
<pre dir="ltr">
ctx_doc.policy_themes(policy_name    in VARCHAR2, 
                              document       in [VARCHAR2|CLOB|BLOB|BFILE],
                      restab         in out nocopy theme_tab,
                      full_themes    in BOOLEAN default FALSE,
                      num_themes     in number    default 50
                      language       in VARCHAR2 default NULL,
                      format         in VARCHAR2 default NULL,
                      charset        in VARCHAR2 default NULL
);
</pre>
<dl>
<dt>policy_name</dt>
<dd>
<p>Specify the policy you create with CTX_DDL.<a href="cddlpkg.htm#i997662">CREATE_POLICY</a>.</p>
</dd>
<dt>document</dt>
<dd>
<p>Specify the document for which to generate a list of themes.</p>
</dd>
<dt>restab</dt>
<dd>
<p>Specify the name of the <code dir="ltr">theme_tab</code> PL/SQL index-by-table type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDDHABH">"THEMES"</a> for more information about the structure of the <code dir="ltr">theme_tab</code> type.</div>
</dd>
<dt>full_themes</dt>
<dd>
<p>Specify whether this procedure generates a single theme or a hierarchical list of parent themes (full themes) for each document theme.</p>
<p>Specify <code dir="ltr">TRUE</code> for this procedure to write full themes to the <code dir="ltr">THEME</code> column of the result table.</p>
<p>Specify <code dir="ltr">FALSE</code> for this procedure to write single theme information to the <code dir="ltr">THEME</code> column of the result table. This is the default.</p>
</dd>
<dt>num_themes</dt>
<dd>
<p>Specify the maximum number of themes to retrieve. For example, if you specify 10, up to first 10 themes are returned for the document. The default is 50.</p>
<p>If you specify 0 or <code dir="ltr">NULL</code>, this procedure returns all themes in a document. If the document contains more than 50 themes, only the first 50 themes show conceptual hierarchy.</p>
</dd>
<dt>language</dt>
<dd>
<p>Specify the language of the document. Use an Oracle Text supported language value as you would in the language column of the base table. See <a href="cdatadic.htm#i1007955">"MULTI_LEXER"</a> in <a href="cdatadic.htm#BHCDHIAI">Chapter 2, "Oracle Text Indexing Elements"</a>.</p>
</dd>
<dt>format</dt>
<dd>
<p>Specify the format of the document. Use an Oracle Text supported format value, either <code dir="ltr">TEXT</code>, <code dir="ltr">BINARY</code> or <code dir="ltr">IGNORE</code> as you would specify in the format column of the base table. For more information, see the format column description in <a href="csql.htm#i997677">"CREATE INDEX"</a> in <a href="csql.htm#i996741">Chapter 1, "Oracle Text SQL Statements and Operators"</a>.</p>
</dd>
<dt>charset</dt>
<dd>
<p>Specify the character set of the document. Use an Oracle Text supported value as you would specify in the charset column of the base table. See <a href="cdatadic.htm#BHCIFFHE">"Indexing Mixed-Character Set Columns"</a> in <a href="cdatadic.htm#BHCDHIAI">Chapter 2, "Oracle Text Indexing Elements"</a>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1672"></a>Example</p>
<p>Create a policy:</p>
<pre dir="ltr">
exec ctx_ddl.create_policy('mypolicy');
</pre>
<p>Run themes:</p>
<pre dir="ltr">
declare
  la      varchar2(200);
  rtab    ctx_doc.theme_tab;
begin
   ctx_doc.policy_themes('mypolicy', 
           'To define true madness, What is''t but to be nothing but mad?', rtab);
   for i in 1..rtab.count loop
     dbms_output.put_line(rtab(i).theme||':'||rtab(i).weight);
   end loop;
end;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i999739"></a>
<div id="CCREF2122" class="refsect1">
<h2 class="refsect1">POLICY_TOKENS<a id="sthref1673"></a><a id="sthref1674"></a><a id="sthref1675"></a></h2>
<p>Generate all index tokens for document.With this procedure, no <code dir="ltr">CONTEXT</code> index is required.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1676"></a>Syntax</p>
<pre dir="ltr">
ctx_doc.policy_tokens(policy_name    in  VARCHAR2,
                      document       in  [VARCHAR2|CLOB|BLOB|BFILE],
                      restab         in  out nocopy token_tab,
                      language       in  VARCHAR2 default NULL,
                      format         in  VARCHAR2 default NULL,
                      charset        in  VARCHAR2 default NULL);
</pre>
<dl>
<dt>policy_name</dt>
<dd>
<p>Specify the policy name created with CTX_DDL.<a href="cddlpkg.htm#i997662">CREATE_POLICY</a>.</p>
</dd>
<dt>document</dt>
<dd>
<p>Specify the document for which to generate tokens.</p>
</dd>
<dt>restab</dt>
<dd>
<p>Specify the name of the <code dir="ltr">token_tab</code> PL/SQL index-by-table type.</p>
<p>The tokens returned are those tokens which are inserted into the index for the document. Stop words are not returned. Section tags are not returned because they are not text tokens.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i997538">"TOKENS"</a> of this chapter for more information about the structure of the <code dir="ltr">token_tab</code> type</div>
</dd>
<dt>language</dt>
<dd>
<p>Specify the language of the document. Use an Oracle Text supported language value as you would in the language column of the base table. See <a href="cdatadic.htm#i1007955">"MULTI_LEXER"</a> in <a href="cdatadic.htm#BHCDHIAI">Chapter 2, "Oracle Text Indexing Elements"</a>.</p>
</dd>
<dt>format</dt>
<dd>
<p>Specify the format of the document. Use an Oracle Text supported format value, either TEXT, BINARY or IGNORE as you would specify in the format column of the base table. For more information, see the format column description in <a href="csql.htm#i997677">"CREATE INDEX"</a>.</p>
</dd>
<dt>charset</dt>
<dd>
<p>Specify the character set of the document. Use an Oracle Text supported value as you would specify in the charset column of the base table. See <a href="cdatadic.htm#BHCIFFHE">"Indexing Mixed-Character Set Columns"</a> in <a href="cdatadic.htm#BHCDHIAI">Chapter 2, "Oracle Text Indexing Elements"</a>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1677"></a>Example</p>
<p>Get tokens:</p>
<pre dir="ltr">
declare
  la     varchar2(200);
  rtab   ctx_doc.token_tab;
begin
   ctx_doc.policy_tokens('mypolicy', 
        'To define true madness, What is''t but to be nothing but mad?',rtab);
   for i in 1..rtab.count loop
     dbms_output.put_line(rtab(i).offset||':'||rtab(i).token);
   end loop;
end;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i997423"></a>
<div id="CCREF0714" class="refsect1">
<h2 class="refsect1"><a id="sthref1678"></a><a id="sthref1679"></a>SET_KEY_TYPE</h2>
<p>Use this procedure to set the <code dir="ltr">CTX_DOC</code> procedures to accept either the <code dir="ltr">ROWID</code> or the <code dir="ltr">PRIMARY_KEY</code> document identifiers. This setting affects the invoking session only.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1680"></a>Syntax</p>
<pre dir="ltr">
ctx_doc.set_key_type(key_type in varchar2);
</pre>
<dl>
<dt>key_type</dt>
<dd>
<p>Specify either <code dir="ltr">ROWID</code> or <code dir="ltr">PRIMARY_KEY</code> as the input key type (document identifier) for <code dir="ltr">CTX_DOC</code> procedures.</p>
<p>This parameter defaults to the value of the <code dir="ltr">CTX_DOC_KEY_TYPE</code> system parameter.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When your base table has no primary key, setting key_type to <code dir="ltr">PRIMARY_KEY</code> is ignored. The textkey parameter that you specify for any <code dir="ltr">CTX_DOC</code> procedure is interpreted as a <code dir="ltr">ROWID</code>.</div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1681"></a>Example</p>
<p>The following example sets <code dir="ltr">CTX_DOC</code> procedures to accept primary key document identifiers.</p>
<pre dir="ltr">
begin
ctx_doc.set_key_type('PRIMARY_KEY');
end
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i997446"></a>
<div id="CCREF2123" class="refsect1">
<h2 class="refsect1">SNIPPET<a id="sthref1682"></a><a id="sthref1683"></a></h2>
<p>Use the <code dir="ltr">CTX_DOC.SNIPPET</code> procedure to produce a concordance<a id="sthref1684"></a> for a document. A concordance is a text fragment that contains a query term with some of its surrounding text. This is also sometimes known as Key Word in Context or KWIC<a id="sthref1685"></a>, because it returns query keywords marked up in their surrounding text, which enables the user to evaluate them in context. The returned text can also contain themes that satisfy an <code dir="ltr">ABOUT</code> query.</p>
<p>For example, a search on <span class="italic">brillig</span> and <span class="italic">slithey</span> might return one relevant fragment of a document as follows:</p>
<pre dir="ltr">
'Twas &lt;b&gt;brillig&lt;/b&gt;, and the &lt;b&gt;slithey&lt;/b&gt; toves did gyre and
</pre>
<p><code dir="ltr">CTX_DOC.SNIPPET</code> returns one or more most relevant fragments for a document that contains the query term. Because <code dir="ltr">CTX_DOC.SNIPPET</code> returns surrounding text, you can immediately evaluate how useful the returned term is. <code dir="ltr">CTX_DOC.SNIPPET</code> returns the entire document if no words in the returned text are marked up.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
CTX_DOC.<a href="#CHDGHGJH">POLICY_SNIPPET</a> for a policy-based version of this procedure</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1686"></a>Syntax</p>
<p class="subhead2"><a id="CCREF23919"></a>Syntax 1</p>
<pre dir="ltr">
exec CTX_DOC.SNIPPET(
</pre>
<pre dir="ltr">
index_name              IN VARCHAR2,
textkey                  IN VARCHAR2,
text_query               IN VARCHAR2,
starttag                 IN VARCHAR2 DEFAULT '&lt;b&gt;',
endtag                   IN VARCHAR2 DEFAULT '&lt;/b&gt;',
entity_translation       IN BOOLEAN  DEFAULT TRUE,
separator                IN VARCHAR2 DEFAULT '&lt;b&gt;...&lt;/b&gt;'
)
return varchar2;
</pre>
<p class="subhead2"><a id="CCREF23920"></a>Syntax 2</p>
<pre dir="ltr">
exec CTX_DOC.SNIPPET_CLOB_QUERY(
index_name               IN VARCHAR2,
textkey                  IN VARCHAR2,
text_query               IN CLOB,
starttag                 IN VARCHAR2 DEFAULT '&lt;b&gt;',
endtag                   IN VARCHAR2 DEFAULT '&lt;/b&gt;',
entity_translation       IN BOOLEAN DEFAULT TRUE,
separator                IN VARCHAR2 DEFAULT '&lt;b&gt;...&lt;/b&gt;'
)
return varchar2;
</pre>
<dl>
<dt>index_name</dt>
<dd>
<p>Specify the name of the index for the text column.</p>
</dd>
<dt>textkey</dt>
<dd>
<p>Specify the unique identifier (usually the primary key) for the document.</p>
<p>The <span class="syntaxinline">textkey</span> parameter can be as follows:</p>
</dd>
</dl>
<ul>
<li>
<p>A single column primary key value</p>
</li>
<li>
<p>An encoded specification for a composite (multiple column) primary key. When textkey is a composite key, you must encode the composite textkey string using the <code dir="ltr">CTX_DOC.PKENCODE</code> procedure.</p>
</li>
<li>
<p>The rowid of the row containing the document</p>
</li>
</ul>
<p>Use <code dir="ltr">CTX_DOC.SET_KEY_TYPE</code> to toggle between primary key and rowid identification.</p>
<dl>
<dt>text_query</dt>
<dd>
<p>Specify the original query expression used to retrieve the document. If NULL, no highlights are generated.</p>
<p>If <code dir="ltr">text_query</code> includes wildcards, stemming, fuzzy matching which result in stopwords being returned, <code dir="ltr">SNIPPET</code> does not highlight the stopwords.</p>
<p>If <code dir="ltr">text_query</code> contains the threshold operator, the operator is ignored.</p>
</dd>
<dt>starttag</dt>
<dd>
<p>Specify the start tag for marking up the query keywords. Default is '<span class="italic">&lt;b&gt;</span>'.</p>
</dd>
<dt>endtag</dt>
<dd>
<p>Specify the end tag for marking up the query keywords. Default is '<span class="italic">&lt;/b&gt;</span>'.</p>
</dd>
<dt>entity_translation</dt>
<dd>
<p>Specify if you want HTML entities to be translated. The default is TRUE, which means that the special entities (<span class="italic">&lt;</span>, <span class="italic">&gt;</span>, and <span class="italic">&amp;</span>) are translated into their alternative forms ('<span class="italic">&amp;lt;</span>', '<span class="italic">&amp;gt;</span>', and '<span class="italic">&amp;amp;</span>') when output by the procedure. However, special characters in the markup tags that are generated by <code dir="ltr">CTX_DOC.SNIPPET</code> will not be translated.</p>
</dd>
<dt>separator</dt>
<dd>
<p>Specify the string separating different returned fragments. Default is '<span class="italic">&lt;b&gt;...&lt;/b&gt;</span>'.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1687"></a>Example</p>
<pre dir="ltr">
create table tdrbhk01 (id number primary key, text varchar2(4000));

insert into tdrbhk01 values (1, 'Oracle Text adds powerful search
&lt;title&gt;withintitle&lt;/title&gt; and intelligent text management to the Oracle
database.  Complete.  You can search and manage documents, web pages,
catalog entries in more than 150 formats in any language.  Provides a
complete text query language and complete character support.  Simple.  You
can index and search text using SQL. Oracle Text Management can be done
using Oracle Enterprise Manager - a GUI tool.  Fast.  You can search
millions of documents, document,web pages, catalog entries using the
power and scalability of the database.  Intelligent.  Oracle Text''s
unique knowledge-base enables you to search, classify, manage
documents, clusters and summarize text based on its meaning as well as
its content. ');

exec ctx_ddl.create_section_group('my_sectioner','BASIC_SECTION_GROUP');
exec ctx_ddl.add_field_section('my_sectioner','title','title', false);
 
create index tdrbhk01x on tdrbhk01(text) indextype is ctxsys.context
  parameters ('filter CTXSYS.NULL_FILTER
               section group my_sectioner
               nopopulate');
 
select ctx_doc.snippet('tdrbhk01x','1',
              'search | classify') from dual;
 
</pre>
<p>The result looks something like this:</p>
<pre dir="ltr">
CTX_DOC.SNIPPET('TDRBHK01X','1','SEARCH|CLASSIFY')
------------------------------------------------------------------------
 
Text's unique knowledge-base enables you to &lt;b&gt;search&lt;/b&gt;,
&lt;b&gt;classify&lt;/b&gt;, manage documents, clusters and summarize
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1688"></a>Limitations</p>
<p><code dir="ltr">CTX_DOC.SNIPPET</code> does not support the use of query templates.</p>
<p><code dir="ltr">CTX_DOC.SNIPPET</code> displays marked-up keywords in context when used with <code dir="ltr">NULL_SECTION_GROUP</code>. However, there are limitations when using this procedure with XML documents. When used with <code dir="ltr">XML_SECTION_GROUP</code> or <code dir="ltr">AUTO_SECTION_GROUP</code>, the XML structure is ignored and user-specified tags are stripped out, which results in parts of surrounding text to be included in the returned snippet.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1689"></a>Related Topics</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGHGJH">"POLICY_SNIPPET"</a>, <a href="#i997035">"HIGHLIGHT"</a>, and <a href="#i997146">"MARKUP"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDHABH"></a>
<div id="CCREF0716" class="refsect1">
<h2 class="refsect1">THEMES<a id="sthref1690"></a><a id="sthref1691"></a><a id="sthref1692"></a></h2>
<p>Use the <code dir="ltr">CTX_DOC.THEMES</code> procedure to generate a list of themes for a document. You can store each theme as a row in either a result table or an in-memory PL/SQL table that you specify.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code dir="ltr">CTX_DOC.THEMES</code> requires an installed knowledge base. A knowledge base may or may not have been installed with Oracle Text. For more information on knowledge bases, see <a class="olink CCAPP0900" href="../../text.112/e24435/cthes.htm#CCAPP0900"><span class="italic">Oracle Text Application Developer's Guide</span></a>.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1693"></a>Syntax 1: In-Memory Table Storage</p>
<pre dir="ltr">
CTX_DOC.THEMES(
</pre>
<pre dir="ltr">
index_name      IN VARCHAR2,
textkey         IN VARCHAR2,
restab          IN OUT NOCOPY THEME_TAB,
full_themes     IN BOOLEAN DEFAULT FALSE,
num_themes       IN NUMBER DEFAULT 50);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1694"></a>Syntax 2: Result Table Storage</p>
<pre dir="ltr">
CTX_DOC.THEMES(
</pre>
<pre dir="ltr">
index_name      IN VARCHAR2,
textkey         IN VARCHAR2,
restab          IN VARCHAR2,
query_id        IN NUMBER DEFAULT 0,
full_themes     IN BOOLEAN DEFAULT FALSE,
num_themes       IN NUMBER DEFAULT 50);
</pre>
<dl>
<dt>index_name</dt>
<dd>
<p>Specify the name of the index for the text column.</p>
</dd>
<dt>textkey</dt>
<dd>
<p>Specify the unique identifier (usually the primary key) for the document.</p>
<p>The <span class="syntaxinline">textkey</span> parameter can be as follows:</p>
</dd>
</dl>
<ul>
<li>
<p>A single column primary key value</p>
</li>
<li>
<p>An encoded specification for a composite (multiple column) primary key. When textkey is a composite key, you must encode the composite <span class="syntaxinline">textkey</span> string using the <code dir="ltr">CTX_DOC.PKENCODE</code> procedure.</p>
</li>
<li>
<p>The rowid of the row containing the document</p>
</li>
</ul>
<p>Toggle between primary key and rowid identification using <code dir="ltr">CTX_DOC.SET_KEY_TYPE</code>.</p>
<dl>
<dt>restab</dt>
<dd>
<p>You can specify this procedure to store results to either a table or to an in-memory PL/SQL table.</p>
<p>To store results in a table, specify the name of the table.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="arestab.htm#i635168">"Theme Table"</a> in <a href="arestab.htm#g640034">Appendix A, "Oracle Text Result Tables"</a></div>
<p>To store results in an in-memory table, specify the name of the in-memory table of type <code dir="ltr">THEME_TAB</code>. The <code dir="ltr">THEME_TAB</code> datatype is defined as follows:</p>
<pre dir="ltr">
type theme_rec is record (
   theme varchar2(2000),
   weight number
);

type theme_tab is table of theme_rec index by binary_integer;
</pre>
<p><code dir="ltr">CTX_DOC.THEMES</code> clears the <code dir="ltr">THEME_TAB</code> you specify before the operation.</p>
</dd>
<dt>query_id</dt>
<dd>
<p>Specify the identifier used to identify the row(s) inserted into <span class="syntaxinline">restab</span>.</p>
</dd>
<dt>full_themes</dt>
<dd>
<p>Specify whether this procedure generates a single theme or a hierarchical list of parent themes (full themes) for each document theme.</p>
<p>Specify <code dir="ltr">TRUE</code> for this procedure to write full themes to the <code dir="ltr">THEME</code> column of the result table.</p>
<p>Specify <code dir="ltr">FALSE</code> for this procedure to write single theme information to the <code dir="ltr">THEME</code> column of the result table. This is the default.</p>
</dd>
<dt>num_themes</dt>
<dd>
<p>Specify the maximum number of themes to retrieve. For example, if you specify 10, then up to the first 10 themes are returned for the document. The default is 50.</p>
<p>If you specify 0 or <code dir="ltr">NULL</code>, then this procedure returns all themes in a document. If the document contains more than 50 themes, then only the first 50 themes show conceptual hierarchy.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1695"></a>Examples</p>
<p class="subhead1"><a id="CCREF23921"></a>In-Memory Themes</p>
<p>The following example generates the first 10 themes for document 1 and stores them in an in-memory table called <code dir="ltr">the_themes</code>. The example then loops through the table to display the document themes.</p>
<pre dir="ltr">
declare
 the_themes ctx_doc.theme_tab;

begin
 ctx_doc.themes('myindex','1',the_themes, num_themes=&gt;10);
 for i in 1..the_themes.count loop
  dbms_output.put_line(the_themes(i).theme||':'||the_themes(i).weight);
  end loop;
end;
</pre>
<p class="subhead1"><a id="CCREF23922"></a>Theme Table</p>
<p>The following example creates a theme table called <code dir="ltr">CTX_THEMES</code>:</p>
<pre dir="ltr">
create table CTX_THEMES (query_id number, 
                         theme varchar2(2000), 
                         weight number);
</pre>
<p class="subhead1"><a id="CCREF23923"></a>Single Themes</p>
<p>To obtain a list of up to the first 20 themes, where each element in the list is a single theme, enter a statement like the following example:</p>
<pre dir="ltr">
begin
</pre>
<pre dir="ltr">
 ctx_doc.themes('newsindex','34','CTX_THEMES',1,full_themes =&gt; FALSE, 
 num_themes=&gt; 20);
</pre>
<pre dir="ltr">
end;
</pre>
<p class="subhead1"><a id="CCREF23924"></a>Full Themes</p>
<p>To<a id="sthref1696"></a> obtain a list of the top 20 themes, where each element in the list is a hierarchical list of parent themes, enter a statement like the following example:</p>
<pre dir="ltr">
begin
</pre>
<pre dir="ltr">
ctx_doc.themes('newsindex','34','CTX_THEMES',1,full_themes =&gt; TRUE, num_
themes=&gt;20);
</pre>
<pre dir="ltr">
end;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i997538"></a>
<div id="CCREF0718" class="refsect1">
<h2 class="refsect1">TOKENS<a id="sthref1697"></a><a id="sthref1698"></a><a id="sthref1699"></a></h2>
<p>Use this procedure to identify all text tokens in a document. The tokens returned are those tokens that are inserted into the index. This feature is useful for implementing document classification, routing, or clustering.</p>
<p>Stopwords are not returned. Section tags are not returned because they are not text tokens.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1700"></a>Syntax 1: In-Memory Table Storage</p>
<pre dir="ltr">
CTX_DOC.TOKENS(index_name      IN VARCHAR2,
               textkey         IN VARCHAR2,
               restab          IN OUT NOCOPY TOKEN_TAB);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1701"></a>Syntax 2: Result Table Storage</p>
<pre dir="ltr">
CTX_DOC.TOKENS(index_name      IN VARCHAR2,
               textkey         IN VARCHAR2,
               restab          IN VARCHAR2,
               query_id        IN NUMBER DEFAULT 0);
</pre>
<dl>
<dt>index_name</dt>
<dd>
<p>Specify the name of the index for the text column.</p>
</dd>
<dt>textkey</dt>
<dd>
<p>Specify the unique identifier (usually the primary key) for the document.</p>
<p>The <span class="syntaxinline">textkey</span> parameter can be as follows:</p>
</dd>
</dl>
<ul>
<li>
<p>A single column primary key value</p>
</li>
<li>
<p>Encoded specification for a composite (multiple column) primary key. To encode a composite <span class="syntaxinline">textkey</span>, use the CTX_DOC.<a href="#i997381">PKENCODE</a> procedure.</p>
</li>
<li>
<p>The rowid of the row containing the document</p>
</li>
</ul>
<p>Toggle between primary key and rowid identification using CTX_DOC.<a href="#i997423">SET_KEY_TYPE</a>.</p>
<dl>
<dt>restab</dt>
<dd>
<p>You can specify that this procedure store results to either a table or to an in-memory PL/SQL table.</p>
<p>The tokens returned are those tokens that are inserted into the index for the document (or row) named with <span class="syntaxinline">textkey</span>. Stop words are not returned. Section tags are not returned because they are not text tokens.</p>
</dd>
</dl>
<p class="subhead2"><a id="CCREF23925"></a>Specifying a Token Table</p>
<p>To store results to a table, specify the name of the table. Token tables can be named anything, but must include the columns shown in the following table, with names and datatypes as specified.</p>
<div id="CCREF23926" class="tblformal">
<p class="titleintable"><a id="sthref1702"></a><a id="sthref1703"></a>Table 8-1 Required Columns for Token Tables</p>
<table class="cellalignment103" title="Required Columns for Token Tables" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment90">
<th class="cellalignment97" id="r1c1-t34">Column Name</th>
<th class="cellalignment97" id="r1c2-t34">Type</th>
<th class="cellalignment97" id="r1c3-t34">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment90">
<td class="cellalignment98" id="r2c1-t34" headers="r1c1-t34">
<p><code dir="ltr">QUERY_ID</code></p>
</td>
<td class="cellalignment98" headers="r2c1-t34 r1c2-t34">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment98" headers="r2c1-t34 r1c3-t34">
<p>The identifier for the results generated by a particular call to <code dir="ltr">CTX_DOC.TOKENS</code> (only populated when table is used to store results from multiple <code dir="ltr">TOKEN</code> calls)</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r3c1-t34" headers="r1c1-t34">
<p><code dir="ltr">TOKEN</code></p>
</td>
<td class="cellalignment98" headers="r3c1-t34 r1c2-t34">
<p><code dir="ltr">VARCHAR2(64)</code></p>
</td>
<td class="cellalignment98" headers="r3c1-t34 r1c3-t34">
<p>The token string in the text.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r4c1-t34" headers="r1c1-t34">
<p><code dir="ltr">OFFSET</code></p>
</td>
<td class="cellalignment98" headers="r4c1-t34 r1c2-t34">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment98" headers="r4c1-t34 r1c3-t34">
<p>The position of the token in the document, relative to the start of document which has a position of 1.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r5c1-t34" headers="r1c1-t34">
<p><code dir="ltr">LENGTH</code></p>
</td>
<td class="cellalignment98" headers="r5c1-t34 r1c2-t34">
<p><code dir="ltr">NUMBER</code></p>
</td>
<td class="cellalignment98" headers="r5c1-t34 r1c3-t34">
<p>The character length of the token.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<p class="subhead2"><a id="CCREF23927"></a>Specifying an In-Memory Table</p>
<p>To store results to an in-memory table, specify the name of the in-memory table of type <code dir="ltr">TOKEN_TAB</code>. The <code dir="ltr">TOKEN_TAB</code> datatype is defined as follows:</p>
<pre dir="ltr">
type token_rec is record (
</pre>
<pre dir="ltr">
token varchar2(64),
offset number,
length number
</pre>
<pre dir="ltr">
);

type token_tab is table of token_rec index by binary_integer;
</pre>
<p><code dir="ltr">CTX_DOC.TOKENS</code> clears the <code dir="ltr">TOKEN_TAB</code> you specify before the operation.</p>
<dl>
<dt>query_id</dt>
<dd>
<p>Specify the identifier used to identify the row(s) inserted into <span class="syntaxinline">restab</span>.</p>
</dd>
</dl>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1704"></a>Example</p>
<p class="subhead1"><a id="CCREF23928"></a>In-Memory Tokens</p>
<p>The following example generates the tokens for document 1 and stores them in an in-memory table, declared as <code dir="ltr">the_tokens</code>. The example then loops through the table to display the document tokens.</p>
<pre dir="ltr">
declare
 the_tokens ctx_doc.token_tab;

begin
 ctx_doc.tokens('myindex','1',the_tokens);
 for i in 1..the_tokens.count loop
  dbms_output.put_line(the_tokens(i).token);
  end loop;
end;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment89">
<tr>
<td class="cellalignment98">
<table class="cellalignment94">
<tr>
<td class="cellalignment93"><a href="cddlpkg.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment93"><a href="coutpkg.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1998, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment100">
<table class="cellalignment92">
<tr>
<td class="cellalignment93"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment93"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment93"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment93"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment93"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment93"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
