<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Oracle Text SQL Statements and Operators</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1071" />
<meta name="dcterms.created" content="2015-10-23T12:26:33Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Text Reference" />
<meta name="dcterms.identifier" content="E24436-05" />
<meta name="dcterms.isVersionOf" content="CCREF" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1998, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="whatsnew.htm" title="Previous" type="text/html" />
<link rel="Next" href="cdatadic.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e24436.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/29</span> <!-- End Header -->
<div id="CCREF0100" class="chapter"><a id="i996741"></a>
<h1 class="chapter"><span class="secnum">1</span> Oracle Text SQL Statements and Operators</h1>
<p>This chapter describes the SQL statements and Oracle Text operators for creating and managing Oracle Text indexes and performing Oracle Text queries.</p>
<p>The following statements are described in this chapter:</p>
<ul>
<li>
<p><a href="#CIHBFDCE">ALTER INDEX</a></p>
</li>
<li>
<p><a href="#CIHIEIDE">ALTER TABLE: Supported Partitioning Statements</a></p>
</li>
<li>
<p><a href="#i997226">CATSEARCH</a></p>
</li>
<li>
<p><a href="#i997503">CONTAINS</a></p>
</li>
<li>
<p><a href="#i997677">CREATE INDEX</a></p>
</li>
<li>
<p><a href="#BJEGAJFD">DROP INDEX</a></p>
</li>
<li>
<p><a href="#i998478">MATCHES</a></p>
</li>
<li>
<p><a href="#i999883">MATCH_SCORE</a></p>
</li>
<li>
<p><a href="#i998514">SCORE</a></p>
</li>
</ul>
<div class="refentry"><a id="CIHBFDCE"></a>
<div id="CCREF0101" class="refsect1">
<h2 class="refsect1">ALTER INDEX<a id="sthref5"></a><a id="sthref6"></a><a id="sthref7"></a><a id="sthref8"></a></h2>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
This section describes the <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> statement as it pertains to managing an Oracle Text domain index.
<p>For a complete description of the <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> statement, see <a class="olink SQLRF00805" href="../../server.112/e41084/statements_1010.htm#SQLRF00805"><span class="italic">Oracle Database SQL Language Reference</span>.</a></p>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9"></a>Purpose</p>
<p>Use <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> to make changes to, or perform maintenance tasks for a <code dir="ltr">CONTEXT</code>, <code dir="ltr">CTXCAT</code>, or <code dir="ltr">CTXRULE</code> index.</p>
<p class="subhead1"><a id="CCREF23682"></a>All Index Types</p>
<p>Use <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> to perform the following tasks on all Oracle Text index types:</p>
<ul>
<li>
<p>Rename the index or index partition. See <a href="#i996830">"ALTER INDEX RENAME Syntax"</a>.</p>
</li>
<li>
<p>Rebuild the index using different preferences. Some restrictions apply for the <code dir="ltr">CTXCAT</code> index type. See <a href="#i996850">"ALTER INDEX REBUILD Syntax"</a>.</p>
</li>
<li>
<p>Add stopwords to the index. See <a href="#i996850">"ALTER INDEX REBUILD Syntax"</a>.</p>
</li>
</ul>
<p class="subhead1"><a id="CCREF23683"></a>CONTEXT and CTXRULE Index Types</p>
<p>Use <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> to perform the following tasks on <code dir="ltr">CONTEXT</code> and <code dir="ltr">CTXRULE</code> index types:</p>
<ul>
<li>
<p>Resume a failed index operation (creation/optimization).</p>
</li>
<li>
<p>Add sections and stop sections to the index.</p>
</li>
<li>
<p>Replace index metadata.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i996850">"ALTER INDEX REBUILD Syntax"</a> to learn more about performing these tasks</div>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref10"></a><a id="sthref11"></a>Overview of ALTER INDEX Syntax</p>
<p>The syntax for <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> is fairly complex. The major divisions are covered in the following sections:</p>
<ul>
<li>
<p><a href="#BJEBEICE">"ALTER INDEX MODIFY PARTITION Syntax"</a>&mdash;use this to modify an index partition's metadata.</p>
</li>
<li>
<p><a href="#BJECABDI">"ALTER INDEX PARAMETERS Syntax"</a>&mdash;use this to modify the parameters of a nonpartitioned index, or to modify all partitions of a local partitioned index, without rebuilding the index.</p>
</li>
<li>
<p><a href="#i996830">"ALTER INDEX RENAME Syntax"</a>&mdash;use this to rename an index or index partition.</p>
</li>
<li>
<p><a href="#i996850">"ALTER INDEX REBUILD Syntax"</a>&mdash;use this to rebuild an index or index partition. With this statement, you can also replace index metadata; add stopwords, sections, and stop sections to an index; and resume a failed operation.</p>
<p>The parameters for <code dir="ltr">ALTER INDEX REBUILD</code> have their own syntax, which is a subset of the syntax for <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code>. For example, the <code dir="ltr">ALTER INDEX REBUILD PARAMETERS</code> statement can take either <code dir="ltr">REPLACE</code> or <code dir="ltr">RESUME</code> as an argument, and <code dir="ltr">ALTER INDEX REBUILD PARAMETERS ('REPLACE')</code> can take several arguments. Valid examples of <code dir="ltr">ALTER INDEX REBUILD</code> include the following statements:</p>
<pre dir="ltr">
ALTER INDEX REBUILD PARALLEL <span class="italic">n</span>
ALTER INDEX REBUILD PARAMETERS ('SYNC <span class="italic">memsize'</span>)
ALTER INDEX REBUILD PARAMETERS ('REPLACE DATASTORE <span class="italic">datastore_pref'</span>)
ALTER INDEX REBUILD PARAMETERS ('REPLACE WORDLIST <span class="italic">wordlist_pref</span>')
</pre></li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BJEBEICE"></a>ALTER INDEX MODIFY PARTITION Syntax</p>
<p>Use the following syntax to modify the metadata of an index partition:</p>
<pre dir="ltr">
ALTER INDEX <span class="italic">index_name</span> MODIFY PARTITION <span class="italic">partition_name</span> PARAMETER (<span class="italic">paramstring</span>)
</pre>
<dl>
<dt>index_name</dt>
<dd>
<p>Specify the name of the index whose partition metadata you want to modify.</p>
</dd>
<dt>partition_name</dt>
<dd>
<p>Specify the name of the index partition whose metadata you want to modify.</p>
</dd>
<dt>paramstring</dt>
<dd>
<p>The only valid argument here is '<code dir="ltr">REPLACE METADATA</code>'. This follows the same syntax as <code dir="ltr">ALTER INDEX REBUILD PARTITION PARAMETERS ('REPLACE METADATA')</code>; see the <code dir="ltr">REPLACE METADATA</code> subsection of the <a href="#i996850">"ALTER INDEX REBUILD Syntax"</a> section for more information. (The two statements are equivalent. <code dir="ltr">ALTER INDEX MODIFY PARTITION</code> is offered for ease of use, and is the recommended syntax.)</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BJECABDI"></a>ALTER INDEX PARAMETERS Syntax</p>
<p>Use the following syntax to modify the parameters either of nonpartitioned or local partitioned indexes, without rebuilding the index. For partitioned indexes, this statement works at the index level, not at the partition level. This statement changes information for the entire index, including all partitions.</p>
<pre dir="ltr">
ALTER INDEX <span class="italic">index_name</span> PARAMETERS (<span class="italic">paramstring</span>)
</pre>
<dl>
<dt>paramstring</dt>
<dd>
<p><code dir="ltr">ALTER INDEX PARAMETERS</code> accepts the following arguments for <span class="variable">paramstring</span>:</p>
<ul>
<li>
<p>'<code dir="ltr">REPLACE METADATA</code>'</p>
<p>Replaces current metadata. See the <code dir="ltr">REPLACE METADATA</code> subsection of the <a href="#i996850">"ALTER INDEX REBUILD Syntax"</a> section for more information.</p>
</li>
<li>
<p>'<code dir="ltr">ADD STOPWORD</code>'</p>
<p>Dynamically adds a stopword to an index. See the <code dir="ltr">ADD STOPWORD</code> subsection of the <a href="#i996850">"ALTER INDEX REBUILD Syntax"</a> section for more information.</p>
</li>
<li>
<p>'<code dir="ltr">ADD FIELD SECTION</code>'</p>
<p>Dynamically adds a field section to an index. See the <code dir="ltr">ADD FIELD</code> subsection of the <a href="#i996850">"ALTER INDEX REBUILD Syntax"</a> section for more information.</p>
</li>
<li>
<p>'<code dir="ltr">ADD ZONE SECTION</code>'</p>
<p>Dynamically adds a zone section to an index. See the <code dir="ltr">ADD ZONE</code> subsection of the <a href="#i996850">"ALTER INDEX REBUILD Syntax"</a> section for more information.</p>
</li>
<li>
<p>'<code dir="ltr">ADD ATTR SECTION</code>'</p>
<p>Dynamically adds an attribute section to an index. See the <code dir="ltr">ADD ATTR</code> subsection of the <a href="#i996850">"ALTER INDEX REBUILD Syntax"</a> section for more information.</p>
</li>
</ul>
</dd>
</dl>
<p>Each of the prior statements has an equivalent <code dir="ltr">ALTER INDEX REBUILD PARAMETERS</code> version. For example, <code dir="ltr">ALTER INDEX PARAMETERS ('REPLACE METADATA')</code> is equivalent to <code dir="ltr">ALTER INDEX REBUILD PARAMETERS ('REPLACE METADATA')</code>. However, the <code dir="ltr">ALTER INDEX PARAMETERS</code> versions work on either partitioned or nonpartitioned indexes, whereas the <code dir="ltr">ALTER INDEX REBUILD PARAMETERS</code> versions work only on nonpartitioned indexes.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i996830"></a>ALTER INDEX RENAME Syntax<a id="sthref12"></a><a id="sthref13"></a><a id="sthref14"></a></p>
<p>Use the following syntax to rename an index or index partition:</p>
<pre dir="ltr">
ALTER INDEX [<span class="variable">schema.]index_name</span> RENAME TO <span class="variable">new_index_name;  </span>

ALTER INDEX [schema.]index_name RENAME PARTITION part_name TO new_part_name;
</pre>
<dl>
<dt>[schema.]index_name</dt>
<dd>
<p>Specify the name of the index to rename.</p>
</dd>
<dt>new_index_name</dt>
<dd>
<p>Specify the new name for <code dir="ltr">schema.index.</code> The <code dir="ltr">new_index_name</code> parameter can be no more than 25 bytes, and 21 bytes for a partitioned index. If you specify a name longer than 25 bytes (or longer than 21 bytes for a partitioned index), then Oracle Text returns an error and the renamed index is no longer valid.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When <code dir="ltr">new_index_name</code> is more than 25 bytes (21 for local partitioned index) and less than 30 bytes, Oracle Text renames the index, even though the system returns an error. To drop the index and associated tables, you must drop <code dir="ltr">new_index_name</code> with the <code dir="ltr">DROP</code> <code dir="ltr">INDEX</code> statement and then re-create and drop <code dir="ltr">index_name</code>.</div>
</dd>
<dt>part_name</dt>
<dd>
<p>Specify the name of the index partition to rename.</p>
</dd>
<dt>new_part_name</dt>
<dd>
<p>Specify the new name for partition.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i996850"></a>ALTER INDEX REBUILD Syntax<a id="sthref15"></a><a id="sthref16"></a><a id="sthref17"></a><a id="sthref18"></a><a id="sthref19"></a><a id="sthref20"></a><a id="sthref21"></a></p>
<p>Use <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> <code dir="ltr">REBUILD</code> to rebuild an index, rebuild an index partition, resume a failed operation, replace index metadata, add stopwords to an index, or add sections and stop sections to an index.</p>
<p>The <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> <code dir="ltr">REBUILD</code> syntax has its own subsyntax. That is, its parameters have their own syntax. For example, the <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> <code dir="ltr">REBUILD</code> <code dir="ltr">PARAMETERS</code> statement can take either <code dir="ltr">REPLACE</code> or <code dir="ltr">RESUME</code> as an argument, and <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> <code dir="ltr">REBUILD</code> <code dir="ltr">PARAMETERS</code> <code dir="ltr">('REPLACE')</code> has several arguments it can take.</p>
<p>Valid examples of <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> <code dir="ltr">REBUILD</code> include the following statements:</p>
<pre dir="ltr">
ALTER INDEX REBUILD PARALLEL <span class="italic">n</span>
ALTER INDEX REBUILD PARAMETERS (SYNC <span class="italic">memsize)</span>
ALTER INDEX REBUILD PARAMETERS (REPLACE DATASTORE <span class="italic">datastore_pref</span>)
ALTER INDEX REBUILD PARAMETERS (REPLACE WORDLIST <span class="italic">wordlist_pref</span>)
</pre>
<p>This is the syntax for <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> <code dir="ltr">REBUILD</code>:</p>
<pre dir="ltr">
ALTER INDEX <span class="variable">[schema.]index</span> [REBUILD] [PARTITION partname] [ONLINE] [PARAMETERS
(<span class="variable">paramstring</span>)][PARALLEL N];
</pre>
<dl>
<dt>PARTITION <span class="italic">partname</span></dt>
<dd>
<p>Rebuilds the index partition <code dir="ltr">partname</code>. Only one index partition can be built at a time.</p>
<p>When you rebuild a partition you can specify only <code dir="ltr">RESUME</code> or <code dir="ltr">REPLACE</code> in <code dir="ltr">paramstring</code>. These operations work only on the <code dir="ltr">partname</code> you specify.</p>
<p>With the <code dir="ltr">REPLACE</code> operation, you can specify only <code dir="ltr">MEMORY</code> and <code dir="ltr">STORAGE</code> for each index partition.</p>
<p><span class="bold">Adding Partitions</span> To add a partition to the base table, use the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> SQL statement. When you add a partition to an indexed table, Oracle Text automatically creates the metadata for the new index partition. The new index partition has the same name as the new table partition. Change the index partition name with <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> <code dir="ltr">RENAME</code>.</p>
<p><span class="bold">Splitting or Merging Partitions</span> Splitting or merging a table partition with <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> renders the index partitions invalid. You must rebuild them with <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> <code dir="ltr">REBUILD</code>.</p>
</dd>
<dt>[ONLINE]</dt>
<dd>
<p>Enables you to continue to perform updates, insertions, and deletions on a base table. It does not enable you to query the base table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can specify <code dir="ltr">REPLACE</code> or <code dir="ltr">RESUME</code> when rebuilding an index or an index partition <code dir="ltr">ONLINE</code>.</div>
</dd>
<dt>PARAMETERS (paramstring)</dt>
<dd>
<p>Optionally specify <code dir="ltr">paramstring</code>. If you do not specify <code dir="ltr">paramstring</code>, then Oracle Text rebuilds the index with existing preference settings.</p>
<p>The syntax for <code dir="ltr">paramstring</code> is as follows:</p>
<pre dir="ltr">
paramstring = 
</pre>
<pre dir="ltr">
'REPLACE 
     [DATASTORE <span class="italic">datastore_pref</span>] 
     [FILTER <span class="italic">filter_pref</span>] 
     [LEXER <span class="italic">lexer_pref</span>] 
     [WORDLIST <span class="italic">wordlist_pref</span>] 
     [STORAGE <span class="italic">storage_pref</span>] 
     [STOPLIST <span class="italic">stoplist</span>] 
     [SECTION GROUP <span class="italic">section_group</span>]
     [MEMORY <span class="italic">memsize</span>
     [[POPULATE | NOPOPULATE]
     [INDEX SET <span class="italic">index_set</span>]
 
     [METADATA <span class="italic">preference new_preference</span>]
     [METADATA FORMAT COLUMN format_column_name]
     [[METADATA] SYNC (MANUAL | EVERY "<span class="variable">interval-string</span>" | ON COMMIT)]
     [[METADATA] TRANSACTIONAL|NONTRANSACTIONAL

| RESUME [memory <span class="italic">memsize</span>]
| OPTIMIZE [token <span class="italic">index_token</span> | fast | full [maxtime (<span class="italic">time</span> | unlimited)]
| SYNC [memory <span class="italic">memsize</span>]
| ADD STOPWORD <span class="italic">word </span>[language <span class="italic">language</span>]
| ADD ZONE SECTION <span class="italic">section_name</span> tag <span class="italic">tag</span>
| ADD FIELD SECTION <span class="italic">section_name</span> tag <span class="italic">tag</span> [(VISIBLE | INVISIBLE)]
| ADD ATTR SECTION <span class="italic">section_name</span> tag <span class="italic">tag@attr</span>
| ADD STOP SECTION <span class="italic">tag'</span>
</pre></dd>
<dt>REPLACE [<span class="italic">optional_preference_list</span>]</dt>
<dd>
<p>Rebuilds an index. You can optionally specify your own preferences, or system-defined preferences.</p>
<p>You can replace only preferences that are supported for that index type. For instance, you cannot replace index set for a <code dir="ltr">CONTEXT</code> or <code dir="ltr">CTXRULE</code> index. Similarly, for the <code dir="ltr">CTXCAT</code> index type, you can replace lexer, wordlist, storage index set, and memory preferences.</p>
<p>The <code dir="ltr">POPULATE</code> parameter is the default and need not be specified. If you want to empty the index of its contents, then specify <code dir="ltr">NOPOPULATE</code>. Clear an index of its contents when you must rebuild your index incrementally. The <code dir="ltr">NOPOPULATE</code> choice is available for a specific partition of the index, and not just for the entire index.</p>
<p>If you are rebuilding a partitioned index using the <code dir="ltr">REPLACE</code> parameter, then you can specify only <code dir="ltr">STORAGE</code>, <code dir="ltr">MEMORY</code>, and <code dir="ltr">NOPOPULATE</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="cdatadic.htm#BHCDHIAI">Chapter 2, "Oracle Text Indexing Elements"</a> for more information about creating and setting preferences, including information about system-defined preferences</div>
</dd>
<dd><a id="BJEJFFFJ"></a></dd>
<dt><a id="sthref22"></a><a id="sthref23"></a><a id="sthref24"></a><a id="sthref25"></a><a id="sthref26"></a>REPLACE METADATA <span class="italic">preference new_preference</span></dt>
<dd>
<p>Replaces the existing <code dir="ltr">preference</code> class settings, including <code dir="ltr">SYNC</code> parameters, of the index with the settings from <code dir="ltr">new_preference</code>. Only index preferences and attributes are replaced. The index is not rebuilt.</p>
<p>This statement is useful for when you want to replace a preference and its attribute settings after the index is built, without reindexing all data. Reindexing data can require significant time and computing resources.</p>
<p>This statement is also useful for changing the <code dir="ltr">SYNC</code> parameter type, which can be automatic, manual, or on-commit.</p>
<p>The <code dir="ltr">ALTER INDEX REBUILD PARAMETER ('REPLACE METADATA')</code> statement does not work for a local partitioned index at the global level for the index. You cannot, for example, use this syntax to change a global preference, such as filter or lexer type, without rebuilding the index. Use <code dir="ltr">ALTER INDEX PARAMETERS</code> instead to change the metadata of an index at the global level, including all partitions. See <a href="#BJECABDI">"ALTER INDEX PARAMETERS Syntax"</a>.</p>
<p><span class="bold">When should I use the METADATA keyword?</span> <code dir="ltr">REPLACE METADATA</code> should be used only when the change in index metadata will not lead to an inconsistent index, which can lead to incorrect query results.</p>
<p>For example, use this statement in the following instances:</p>
<ul>
<li>
<p>To go from a single-language lexer to a multilexer in anticipation of multilingual data. For an example, see <a href="#i1000829">"Replacing Index Metadata: Changing Single-Lexer to Multilexer"</a>.</p>
</li>
<li>
<p>To change the <code dir="ltr">WILDCARD_MAXTERMS</code> setting in <a href="cdatadic.htm#i1008935">BASIC_WORDLIST</a>.</p>
</li>
<li>
<p>To change the <code dir="ltr">SYNC</code> parameter type, which can be automatic, manual, or on-commit.</p>
</li>
</ul>
<p>These changes are safe and will not lead to an inconsistent index that might adversely affect your query results.</p>
<div class="infoboxnotewarn">
<p class="notep1">Caution:</p>
<p class="warnsp">The <code dir="ltr">REPLACE</code> <code dir="ltr">METADATA</code> statement can result in inconsistent index data, which can lead to incorrect query results. As such, Oracle does not recommend using this statement, unless you carefully consider the effect it will have on the consistency of your index data and subsequent queries.</p>
</div>
<p>There can be many instances when changing metadata can result in inconsistent index data. For example, Oracle recommends <span class="italic">against</span> using the <code dir="ltr">METADATA</code> keyword after performing the following procedures:</p>
<ul>
<li>
<p>Changing the <a href="cdatadic.htm#i1006810">USER_DATASTORE</a> procedure to a new PL/SQL stored procedure that has different output.</p>
</li>
<li>
<p>Changing the <a href="cdatadic.htm#i1008935">BASIC_WORDLIST</a> attribute <code dir="ltr">PREFIX_INDEX</code> from <code dir="ltr">NO</code> to <code dir="ltr">YES</code> because no prefixes have been generated for existing documents. Changing it from <code dir="ltr">YES</code> to <code dir="ltr">NO</code> is safe.</p>
</li>
<li>
<p>Adding or changing <code dir="ltr">BASIC_LEXER</code> printjoin and skipjoin characters, because new queries with these characters would be lexed differently from how these characters were lexed at index time.</p>
</li>
</ul>
<p>In these unsafe cases, Oracle recommends rebuilding the index.</p>
</dd>
<dd><a id="BJEFFJBC"></a></dd>
<dt><a id="sthref27"></a><a id="sthref28"></a><a id="sthref29"></a><a id="sthref30"></a><a id="sthref31"></a><a id="sthref32"></a><a id="sthref33"></a><a id="sthref34"></a>REPLACE [METADATA] SYNC (MANUAL | EVERY "<span class="variable">interval-string</span>" | ON COMMIT)</dt>
<dd>
<p>Specifies <code dir="ltr">SYNC</code> for automatic synchronization of the <code dir="ltr">CONTEXT</code> index when a DML change has occurred to the base table. You can specify one of the <code dir="ltr">SYNC</code> methods shown in <a href="#CIHGAAFI">Table 1-1</a>.</p>
<div id="CCREF23684" class="tblformal">
<p class="titleintable"><a id="sthref35"></a><a id="CIHGAAFI"></a>Table 1-1 ALTER INDEX SYNC Methods</p>
<table class="cellalignment103" title="ALTER INDEX SYNC Methods" summary="This table shows methods for using ALTER INDEX REPLACE SYNC." dir="ltr">
<thead>
<tr class="cellalignment90">
<th class="cellalignment97" id="r1c1-t8">SYNC Type</th>
<th class="cellalignment97" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment90">
<td class="cellalignment98" id="r2c1-t8" headers="r1c1-t8">
<p><code dir="ltr">MANUAL</code></p>
</td>
<td class="cellalignment98" headers="r2c1-t8 r1c2-t8">
<p>Means no automatic synchronization. This is the default. You must manually synchronize the index using <code dir="ltr">CTX_DDL.SYNC_INDEX</code>.</p>
<p>Use <code dir="ltr">MANUAL</code> to disable <code dir="ltr">ON</code> <code dir="ltr">COMMIT</code> and <code dir="ltr">EVERY</code> synchronization.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r3c1-t8" headers="r1c1-t8">
<p><code dir="ltr">EVERY</code> <span class="variable">interval-string</span></p>
</td>
<td class="cellalignment98" headers="r3c1-t8 r1c2-t8">
<p>Automatically synchronize the index at a regular interval specified by the value of <span class="variable">interval-string</span>, which takes the same syntax as that for scheduler jobs. Automatic synchronization using <code dir="ltr">EVERY</code> requires that the index creator have <code dir="ltr">CREATE</code> <code dir="ltr">JOB</code> privileges.</p>
<p>Ensure that <span class="variable">interval-string</span> is set to a long enough period so that any previous synchronization jobs will have completed. Otherwise, the synchronization job may hang. The <span class="variable">interval-string</span> argument must be enclosed in double quotation marks ('' '').</p>
<p>See <a href="#i1000959">"Enabling Automatic Index Synchronization"</a> for an example of automatic synchronization syntax.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r4c1-t8" headers="r1c1-t8">
<p><code dir="ltr">ON</code> <code dir="ltr">COMMIT</code></p>
</td>
<td class="cellalignment98" headers="r4c1-t8 r1c2-t8">
<p>Synchronize the index immediately after a commit. The commit does not return until the sync is complete. (Because the synchronization is performed as a separate transaction, there may be a time period, usually small, when the data is committed but index changes are not.)</p>
<p>The operation uses the memory specified with the <span class="variable">memory</span> parameter.</p>
<p>Note that the sync operation has its own transaction context. If this operation fails, the data transaction still commits. Index synchronization errors are logged in the <code dir="ltr">CTX_USER_INDEX_ERRORS</code> view. See <a href="#i1000916">"Viewing Index Errors"</a> under <code dir="ltr">CREATE INDEX</code>.</p>
<p>See <a href="#i1000959">"Enabling Automatic Index Synchronization"</a> for an example of <code dir="ltr">ON</code> <code dir="ltr">COMMIT</code> syntax.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>Each partition of a locally partitioned index can have its own type of sync: (<code dir="ltr">ON COMMIT</code>, <code dir="ltr">EVERY</code>, or <code dir="ltr">MANUAL</code>). The type of sync specified in master parameter strings applies to all index partitions unless a partition specifies its own type.</p>
<p>With automatic (<code dir="ltr">EVERY</code>) synchronization, you can specify memory size and parallel synchronization. The syntax is:</p>
<pre dir="ltr">
... EVERY <span class="variable">interval_string</span> MEMORY <span class="variable">mem_size</span> PARALLEL <span class="variable">paradegree</span> ...
</pre>
<p><code dir="ltr">ON</code> <code dir="ltr">COMMIT</code> synchronizations can only be executed serially and at the same memory size as what was specified at index creation.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This command rebuilds the index. When you want to change the <code dir="ltr">SYNC</code> setting without rebuilding the index, use the <code dir="ltr">REBUILD REPLACE METADATA SYNC (MANUAL | ON COMMIT)</code> operation.</div>
</dd>
<dt>REPLACE [METADATA] TRANSACTIONAL | NONTRANSACTIONAL</dt>
<dd>
<p><a id="sthref36"></a><a id="sthref37"></a><a id="sthref38"></a><a id="sthref39"></a><a id="sthref40"></a>This parameter enables you to turn the <code dir="ltr">TRANSACTIONAL</code> property on or off. For more information, see <a href="#BJECACGF">"TRANSACTIONAL"</a>.</p>
<p>Using this parameter only succeeds if there are no rows in the DML pending queue. Therefore, you may need to sync the index before issuing this command.</p>
<p>To turn on the <code dir="ltr">TRANSACTIONAL</code> index property:</p>
<pre dir="ltr">
ALTER INDEX myidx REBUILD PARAMETERS('replace metadata transactional');
</pre>
<p>or</p>
<pre dir="ltr">
ALTER INDEX myidx REBUILD PARAMETERS('replace  transactional');
</pre>
<p>To turn off the <code dir="ltr">TRANSACTIONAL</code> index property:</p>
<pre dir="ltr">
ALTER INDEX myidx REBUILD PARAMETERS('replace metadata nontransactional');
</pre>
<p>or</p>
<pre dir="ltr">
ALTER INDEX myidx REBUILD PARAMETERS('replace  nontransactional');
</pre></dd>
<dt>RESUME [MEMORY <span class="italic">memsize</span>]<a id="sthref41"></a><a id="sthref42"></a></dt>
<dd>
<p>Resumes a failed index operation. You can optionally specify the amount of memory to use with <code dir="ltr">memsize</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> operation applies only to <code dir="ltr">CONTEXT</code> and <code dir="ltr">CTXRULE</code> indexes. It does not apply to <code dir="ltr">CTXCAT</code> indexes.</div>
</dd>
<dt><a id="sthref43"></a><a id="sthref44"></a><a id="sthref45"></a>OPTIMIZE [token index_token | fast | full [maxtime (time | unlimited)]</dt>
<dd>
<div class="infobox-note">
<p class="notep1">Note:</p>
This <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> operation will not be supported in future releases.
<p>To optimize your index, use CTX_DDL.<a href="cddlpkg.htm#i998200">OPTIMIZE_INDEX</a>.</p>
</div>
<p>Optimizes the index. Specify <code dir="ltr">token</code>, <code dir="ltr">fast,</code> or <code dir="ltr">full</code> optimization. You typically optimize after you synchronize the index.</p>
<p>When you optimize in <code dir="ltr">token</code> mode, Oracle Text optimizes only <code dir="ltr">index_token</code>. Use this method of optimization to quickly optimize index information for specific words.</p>
<p>When you optimize in <code dir="ltr">fast</code> mode, Oracle Text works on the entire index, compacting fragmented rows. However, in <code dir="ltr">fast</code> mode, old data is not removed.</p>
<p>When you optimize in <code dir="ltr">full</code> mode, you can optimize the whole index or a portion. This method compacts rows and removes old data (deleted rows).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Optimizing in <code dir="ltr">full</code> mode runs even when there are no deleted document rows. This is useful when you must optimize time-limited batches with the <code dir="ltr">maxtime</code> parameter.</div>
<p>Use the <code dir="ltr">maxtime</code> parameter to specify in minutes the time Oracle Text is to spend on the optimization operation. Oracle Text starts the optimization where it left off and optimizes until complete or until the time limit has been reached, whichever comes first. Specifying a time limit is useful for automating index optimization, where you set Oracle Text to optimize the index for a specified time on a regular basis.</p>
<p>When you specify <code dir="ltr">maxtime</code> <code dir="ltr">unlimited</code>, the entire index is optimized. This is the default. When you specify 0 for <code dir="ltr">maxtime</code>, Oracle Text performs minimal optimization.</p>
<p>Log the progress of optimization by writing periodic progress updates to the <code dir="ltr">CTX_OUTPUT</code> log. An event for <code dir="ltr">CTX_OUTPUT.ADD_EVENT</code>, called <code dir="ltr">CTX_OUTPUT.EVENT_OPT_PRINT_TOKEN</code>, prints each token as it is being optimized.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> operation applies only to <code dir="ltr">CONTEXT</code> and <code dir="ltr">CTXRULE</code> indexes. It does not apply to <code dir="ltr">CTXCAT</code> indexes.</div>
</dd>
<dt><a id="sthref46"></a>SYNC [MEMORY <span class="italic">memsize</span>]</dt>
<dd>
<div class="infobox-note">
<p class="notep1">Note:</p>
This <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> operation will not be supported in future releases.
<p>To synchronize your index, use CTX_DDL.<a href="cddlpkg.htm#i998469">SYNC_INDEX</a>.</p>
</div>
<p>Synchronizes the index. You can optionally specify the amount of run-time memory to use with <code dir="ltr">memsize</code>. Synchronize the index when you have DML operations on your base table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> operation applies only to <code dir="ltr">CONTEXT</code> and <code dir="ltr">CTXRULE</code> indexes. It does not apply to <code dir="ltr">CTXCAT</code> indexes.</div>
<p><a id="sthref47"></a><span class="bold">Memory Considerations</span> The memory parameter <span class="syntaxinline">memsize</span> specifies the amount of memory Oracle Text uses for the <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> operation before flushing the index to disk. Specifying a large amount of memory improves indexing performance because there is less I/O and improves query performance and maintenance because there is less fragmentation.</p>
<p>Specifying smaller amounts of memory increases disk I/O and index fragmentation, but might be useful if you want to track indexing progress or when run-time memory is scarce.</p>
</dd>
<dd><a id="BJECBEJG"></a></dd>
<dt>ADD STOPWORD <span class="italic">word</span> [language <span class="italic">language</span>]<a id="sthref48"></a></dt>
<dd>
<p>Dynamically adds a stopword word to the index.</p>
<p>Index entries for <code dir="ltr">word</code> that existed before this operation are not deleted. However, subsequent queries on <code dir="ltr">word</code> are treated as though it has always been a stopword.</p>
<p>When your stoplist is a multilanguage stoplist, you must specify <code dir="ltr">language</code>.</p>
<p>The index is <span class="italic">not</span> rebuilt by this statement.</p>
</dd>
<dd><a id="BJEBBEDA"></a></dd>
<dt>ADD ZONE SECTION <span class="italic">section_name</span> tag <span class="italic">tag<a id="sthref49"></a></span></dt>
<dd>
<p>Dynamically adds the zone section <code dir="ltr">section_name</code> identified by <code dir="ltr">tag</code> to the existing index.</p>
<p>The added section <code dir="ltr">section_name</code> applies only to documents indexed after this operation. For the change to take effect, you must manually re-index any existing documents that contain the tag.</p>
<p>The index is <span class="italic">not</span> rebuilt by this statement.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> operation applies only to <code dir="ltr">CONTEXT</code> and <code dir="ltr">CTXRULE</code> indexes. It does not apply to <code dir="ltr">CTXCAT</code> indexes.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABEIJDB">"Notes"</a></div>
</dd>
<dd><a id="BJEBHEGJ"></a></dd>
<dt>ADD FIELD SECTION <span class="italic">section_name</span> tag <span class="italic">tag<a id="sthref50"></a> [</span>(VISIBLE | INVISIBLE)]</dt>
<dd>
<p>Dynamically adds the field section <code dir="ltr">section_name</code> identified by <code dir="ltr">tag</code> to the existing index.</p>
<p>Optionally specify <code dir="ltr">VISIBLE</code> to make the field sections visible. The default is <code dir="ltr">INVISIBLE</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
CTX_DDL.<a href="cddlpkg.htm#i999153">ADD_FIELD_SECTION</a> for more information on visible and invisible field sections.</div>
<p>The added section <code dir="ltr">section_name</code> applies only to documents indexed after this operation. For the change to affect previously indexed documents, you must explicitly re-index the documents that contain the tag.</p>
<p>This statement does not rebuild the index.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> operation applies only to <code dir="ltr">CONTEXT</code> <code dir="ltr">CTXRULE</code> indexes. It does not apply to <code dir="ltr">CTXCAT</code> indexes.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABEIJDB">"Notes"</a></div>
</dd>
<dd><a id="BJEBIAID"></a></dd>
<dt>ADD ATTR SECTION <span class="italic">section_name</span> tag <span class="italic">tag@attr<a id="sthref51"></a></span></dt>
<dd>
<p>Dynamically adds an attribute section <code dir="ltr">section_name</code> to the existing index. You must specify the XML tag and attribute in the form <code dir="ltr">tag@attr</code>. You can add attribute sections only to XML section groups.</p>
<p>The added attribute section <code dir="ltr">section_name</code> applies only to documents indexed after this operation. For the change to take effect, you must manually re-index any existing documents that contain the tag.</p>
<p>The index is <span class="italic">not</span> rebuilt by this statement.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> operation applies only to <code dir="ltr">CONTEXT</code> <code dir="ltr">CTXRULE</code> indexes. It does not apply to <code dir="ltr">CTXCAT</code> indexes.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABEIJDB">"Notes"</a>.</div>
</dd>
<dt>ADD STOP SECTION <span class="italic">tag<a id="sthref52"></a></span></dt>
<dd>
<p>Dynamically adds the stop section identified by <code dir="ltr">tag</code> to the existing index. As stop sections apply only to automatic sectioning of XML documents, the index must use the <code dir="ltr">AUTO_SECTION_GROUP</code> section group. The tag you specify must be case sensitive and unique within the automatic section group or else <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> raises an error.</p>
<p>The added stop section <code dir="ltr">tag</code> applies only to documents indexed after this operation. For the change to affect previously indexed documents, you must explicitly re-index the documents that contain the tag.</p>
<p>The text within a stop section can always searched.</p>
<p>The number of stop sections you can add is unlimited.</p>
<p>The index is <span class="italic">not</span> rebuilt by this statement.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABEIJDB">"Notes"</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
This <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> operation applies only to <code dir="ltr">CONTEXT</code> indexes. It does not apply to <code dir="ltr">CTXCAT</code> indexes.</div>
</dd>
<dt>PARALLEL n<a id="sthref53"></a><a id="sthref54"></a></dt>
<dd>
<p>Using <span class="italic">n</span>, you can optionally specify the parallel degree for parallel indexing. This parameter is supported only when you use <code dir="ltr">SYNC</code>, <code dir="ltr">REPLACE</code>, and <code dir="ltr">RESUME</code> <code dir="ltr">in paramstring</code>. The actual degree of parallelism might be smaller depending on your resources.</p>
<p>Parallel indexing can speed up indexing when you have large amounts of data to index and when your operating system supports multiple CPUs.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref55"></a>ALTER INDEX Examples<a id="sthref56"></a></p>
<p class="subhead1"><a id="CCREF23685"></a>Resuming Failed Index<a id="sthref57"></a></p>
<p>The following statement resumes the indexing operation on <code dir="ltr">newsindex</code> with 2 megabytes of memory:</p>
<pre dir="ltr">
ALTER INDEX newsindex REBUILD PARAMETERS('resume memory 2M');
</pre>
<p class="subhead1"><a id="CCREF23686"></a>Rebuilding an Index<a id="sthref58"></a></p>
<p>The following statement rebuilds the index, replacing the stoplist preference with <code dir="ltr">new_stop</code>.</p>
<pre dir="ltr">
ALTER INDEX newsindex REBUILD PARAMETERS('replace stoplist new_stop');
</pre>
<p class="subhead1"><a id="CCREF23687"></a>Rebuilding a Partitioned Index <a id="sthref59"></a></p>
<p>The following example creates a partitioned text table, populates it, and creates a partitioned index. It then adds a new partition to the table and rebuilds the index with <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> as follows:</p>
<pre dir="ltr">
PROMPT create partitioned table and populate it

create table part_tab (a int, b varchar2(40)) partition by range(a)
(partition p_tab1 values less than (10),
 partition p_tab2 values less than (20),
 partition p_tab3 values less than (30));

insert into part_tab values (1,'Actinidia deliciosa');
insert into part_tab values (8,'Distictis buccinatoria');
insert into part_tab values (12,'Actinidia quinata');
insert into part_tab values (18,'Distictis Rivers');
insert into part_tab values (21,'pandorea jasminoides Lady Di');
insert into part_tab values (28,'pandorea rosea');

commit;

PROMPT create partitioned index
create index part_idx on part_tab(b) indextype is ctxsys.context
local (partition p_idx1, partition p_idx2, partition p_idx3);
</pre>
<pre dir="ltr">
PROMPT add a partition and populate it
alter table part_tab add partition p_tab4 values less than (40);
insert into part_tab values (32, 'passiflora citrina');
insert into part_tab values (33, 'passiflora alatocaerulea');
commit;
</pre>
<p>The following statement rebuilds the index in the newly populated partition. In general, the index partition name for a newly added partition is the same as the table partition name, unless the name has already been used. In this case, Oracle Text generates a new name.</p>
<pre dir="ltr">
alter index part_idx rebuild partition p_tab4;
</pre>
<p>The following statement queries the table for the two hits in the newly added partition:</p>
<pre dir="ltr">
select * from part_tab where contains(b,'passiflora') &gt;0;
</pre>
<p>The following statement queries the newly added partition directly:</p>
<pre dir="ltr">
select * from part_tab partition (p_tab4) where contains(b,'passiflora') &gt;;
</pre>
<p class="subhead1"><a id="i1000829"></a><a id="CCREF23688"></a>Replacing Index Metadata: Changing Single-Lexer to Multilexer<a id="sthref60"></a><a id="sthref61"></a></p>
<p>The following example demonstrates how an application can migrate from single-language documents (English) to multilanguage documents (English and Spanish) by replacing the index metadata for the lexer.</p>
<pre dir="ltr">
REM creates a simple table, which stores only English (American) text

create table simple (text varchar2(80));
insert into simple values ('the quick brown fox');
commit;

REM create a simple lexer to lex this English text

begin
  ctx_ddl.create_preference('us_lexer','basic_lexer');
end;
/

REM create a text index on the simple table
create index simple_idx on simple(text)
indextype is ctxsys.context parameters ('lexer us_lexer');

REM we can query easily
select * from simple where contains(text, 'fox')&gt;0;

REM now suppose we want to start accepting Spanish documents.
REM first we have to extend the table with a language column
alter table simple add (lang varchar2(10) default 'us');

REM now let's create a Spanish lexer, 
begin
  ctx_ddl.create_preference('e_lexer','basic_lexer');
  ctx_ddl.set_attribute('e_lexer','base_letter','yes');
end;
/
REM Then create a multilexer incorporating our English and Spanish lexers.
REM Note that the DEFAULT lexer is the exact same lexer, with which we have
REM have already indexed all the documents.
begin
  ctx_ddl.create_preference('m_lexer','multi_lexer');
  ctx_ddl.add_sub_lexer('m_lexer','default','us_lexer');
  ctx_ddl.add_sub_lexer('m_lexer','spanish','e_lexer');
end;
/
REM next replace our metadata
alter index simple_idx rebuild
parameters ('replace metadata language column lang lexer m_lexer');

REM We are ready for some Spanish data.  Note that we could have inserted
REM this BEFORE the alter index, as long as we did not SYNC.
insert into simple values ('el zorro marr&amp;oacute;n r&amp;aacute;pido', 'e');
commit;
exec ctx_ddl.sync_index('simple_idx');
REM now query the Spanish data with base lettering:
select * from simple where contains(text, 'rapido')&gt;0;
</pre>
<p class="subhead1"><a id="CCREF23689"></a>Optimizing the Index</p>
<p>To optimize your index, use CTX_DDL.<a href="cddlpkg.htm#i998200">OPTIMIZE_INDEX</a>.</p>
<p class="subhead1"><a id="i997106"></a><a id="CCREF23690"></a>Synchronizing the Index</p>
<p>To synchronize your index, use CTX_DDL.<a href="cddlpkg.htm#i998469">SYNC_INDEX</a>.</p>
<p class="subhead1"><a id="CCREF23691"></a>Adding a Zone Section<a id="sthref62"></a></p>
<p>To add to the index the zone section <code dir="ltr">author</code> identified by the tag &lt;<code dir="ltr">author&gt;</code>, enter the following statement:</p>
<pre dir="ltr">
ALTER INDEX myindex REBUILD PARAMETERS('add zone section author tag author');
</pre>
<p class="subhead1"><a id="CCREF23692"></a>Adding a Stop Section<a id="sthref63"></a></p>
<p>To add a stop section identified by tag &lt;<code dir="ltr">fluff&gt;</code> to the index that uses the <code dir="ltr">AUTO_SECTION_GROUP</code>, enter the following statement:</p>
<pre dir="ltr">
ALTER INDEX myindex REBUILD PARAMETERS('add stop section fluff');
</pre>
<p class="subhead1"><a id="CCREF23693"></a>Adding an Attribute Section<a id="sthref64"></a></p>
<p>Assume that the following text appears in an XML document:</p>
<pre dir="ltr">
&lt;book title="Tale of Two Cities"&gt;It was the best of times.&lt;/book&gt;
</pre>
<p>Assume also that you want to create a separate section for the title attribute and you want to name the new attribute section <code dir="ltr">booktitle</code>. To do so, enter the following statement:</p>
<pre dir="ltr">
ALTER INDEX myindex REBUILD PARAMETERS('add attr section booktitle tag
title@book');
</pre>
<p class="subhead1"><a id="CCREF23694"></a>Using Flashback Queries</p>
<p>If a Text query is flashed back to a point before an <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> statement was issued on the Text index for which the query is being run, then:</p>
<ul>
<li>
<p>The query optimizer will not choose the index access path for that given index because the index is treated according to its creation time with <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code>. Therefore, to the query optimizer, the index is perceived not to exist.</p>
</li>
<li>
<p>The functional processing of the Text operator will fail with ORA-01466 or ORA-08176 errors if the <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> statement involves re-creation of <code dir="ltr">DR$</code> index tables.</p>
</li>
</ul>
<p>To work around this issue, use the <code dir="ltr">DBMS_FLASHBACK</code> package. For example:</p>
<pre dir="ltr">
EXEC dbms_flashback.enable_at_system_change_number(:scn);
SELECT id from documents WHERE CONTAINS(text, 'oracle')&gt;0;
EXEC dbms_flashback.disable;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
In previous releases, flashback Text queries using <code dir="ltr">AS</code> <code dir="ltr">OF</code> predicates with Text operators such as <code dir="ltr">CONTAINS</code> and <code dir="ltr">CATSEARCH</code> are not supported.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
"<a class="olink ADFNS01009" href="../../appdev.112/e41502/adfns_flashback.htm#ADFNS01009">Using DBMS_FLASHBACK Package</a>" in <span class="italic">Oracle Database Development Guide</span></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABEIJDB"></a>Notes</p>
<p class="subhead2"><a id="CCREF23695"></a><a id="sthref65"></a>Add Section Constraints</p>
<p><a id="sthref66"></a>Before altering the index section information, Oracle Text checks the new section against the existing sections to ensure that all validity constraints are met. These constraints are the same for adding a section to a section group with the <code dir="ltr">CTX_DDL</code> PL/SQL package and are as follows:</p>
<ul>
<li>
<p>You cannot add zone, field, or stop sections to a <code dir="ltr">NULL_SECTION_GROUP</code>.</p>
</li>
<li>
<p>You cannot add zone, field, or attribute sections to an automatic section group.</p>
</li>
<li>
<p>You cannot add attribute sections to anything other than XML section groups.</p>
</li>
<li>
<p>You cannot have the same tag for two different sections.</p>
</li>
<li>
<p>Section names for zone, field, and attribute sections cannot intersect.</p>
</li>
<li>
<p>You cannot exceed 64 fields per section.</p>
</li>
<li>
<p>You cannot add stop sections to basic, HTML, XML, or news section groups.</p>
</li>
<li>
<p><code dir="ltr">SENTENCE</code> and <code dir="ltr">PARAGRAPH</code> are reserved section names.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABGDCCC"></a>Related Topics</p>
<p>CTX_DDL.<a href="cddlpkg.htm#i998469">SYNC_INDEX</a> in <a href="cddlpkg.htm#g1014415">Chapter 7, "CTX_DDL Package"</a></p>
<p>CTX_DDL.<a href="cddlpkg.htm#i998200">OPTIMIZE_INDEX</a> in <a href="cddlpkg.htm#g1014415">Chapter 7, "CTX_DDL Package"</a></p>
<p><a href="#i997677">CREATE INDEX</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHIEIDE"></a>
<div id="CCREF0110" class="refsect1">
<h2 class="refsect1">ALTER TABLE: Supported Partitioning Statements<a id="sthref67"></a><a id="sthref68"></a></h2>
<div class="infobox-note">
<p class="notep1">Note:</p>
This section describes the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement as it pertains to adding and modifying a partitioned text table with a context domain index.
<p>For a complete description of the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement, see <a class="olink SQLRF01001" href="../../server.112/e41084/statements_3001.htm#SQLRF01001"><span class="italic">Oracle Database SQL Language Reference</span>.</a></p>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref69"></a>Purpose</p>
<p>Use the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> statement to add, modify, split, merge, exchange, or drop a partitioned text table with a context domain index. The following sections describe some of the <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> operations.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref70"></a>Modify Partition Syntax</p>
<p class="subhead1"><a id="CCREF23696"></a>Unusable Local Indexes</p>
<pre dir="ltr">
ALTER TABLE  [schema.]table MODIFY PARTITION partition UNUSABLE LOCAL INDEXES
</pre>
<p>Marks the index partition corresponding to the given table partition <code dir="ltr">UNUSABLE</code>. You might mark an index partition unusable before you rebuild the index partition as described in <a href="#i1000191">"Rebuild Unusable Local Indexes"</a>.</p>
<p>If the index partition is not marked unusable, then the statement returns without actually rebuilding the local index partition.</p>
<p class="subhead1"><a id="i1000191"></a><a id="CCREF23697"></a>Rebuild Unusable Local Indexes</p>
<pre dir="ltr">
ALTER TABLE  [schema.]table MODIFY PARTITION partition REBUILD UNUSABLE LOCAL
INDEXES
</pre>
<p>Rebuilds the index partition corresponding to the specified table partition that has an <code dir="ltr">UNUSABLE</code> status.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the index partition status is already <code dir="ltr">VALID</code> before you enter this statement, then this statement does <span class="italic">not</span> rebuild the index partition. Do not depend on this statement to rebuild the index partition unless the index partition status is <code dir="ltr">UNUSABLE</code>.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref71"></a>Add Partition Syntax</p>
<pre dir="ltr">
ALTER TABLE [schema.]table ADD PARTITION [partition] 
VALUES LESS THAN (value_list) [partition_description]
</pre>
<p>Adds a new partition to the high end of a range-partitioned table.</p>
<p>To add a partition to the beginning or to the middle of the table, use the <code dir="ltr">ALTER TABLE SPLIT PARTITION</code> statement.</p>
<p>The newly added table partition is always empty, and the context domain index (if any) status for this partition is always <code dir="ltr">VALID</code>. After issuing DML, if you want to synchronize or optimize this newly added index partition, then you must look up the index partition name and enter the <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> <code dir="ltr">REBUILD</code> <code dir="ltr">PARTITION</code> statement. For this newly added partition, the index partition name is usually the same as the table partition name, but if the table partition name is already used by another index partition, the system assigns a name in the form of <code dir="ltr">SYS_Pn</code>.</p>
<p>By querying the <code dir="ltr">USER_IND_PARTITIONS</code> view and comparing the <code dir="ltr">HIGH_VALUE</code> field, you can determine the index partition name for the newly added partition.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref72"></a>Merge Partition Syntax</p>
<pre dir="ltr">
ALTER TABLE [schema.]table 
MERGE PARTITIONS partition1, partition2 
[INTO PARTITION [new_partition] [partition_description]]
[UPDATE GLOBAL INDEXES]
</pre>
<p>Applies only to a range partition. This statement merges the contents of two adjacent partitions into a new partition and then drops the original two partitions. If the resulting partition is non-empty, then the corresponding local domain index partition is marked <code dir="ltr">UNUSABLE</code>. You can use <code dir="ltr">ALTER TABLE MODIFY PARTITION</code> to rebuild the partition index.</p>
<p><a id="sthref73"></a><a id="sthref74"></a>For a global, nonpartitioned index, if you perform the merge operation without an <code dir="ltr">UPDATE GLOBAL INDEXES</code> clause, then the resulting index (if not <code dir="ltr">NULL</code>) will be invalid and must be rebuilt. If you specify the <code dir="ltr">UPDATE GLOBAL INDEXES</code> clause after the operation and the <code dir="ltr">SYNC</code> type is <code dir="ltr">MANUAL</code>, then the index will be valid, but you still must synchronize the index with CTX_DDL.<a href="cddlpkg.htm#i998469">SYNC_INDEX</a> for the update to take place.</p>
<p>The naming convention for the resulting index partition is the same as in the <code dir="ltr">ALTER TABLE ADD PARTITION</code> statement.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref75"></a>Split Partition Syntax</p>
<pre dir="ltr">
ALTER TABLE [schema.]table
SPLIT PARTITION partition_name_old 
AT (value_list)
[into (partition_description, partition_description)]
[prallel_clause]
[UPDATE GLOBAL INDEXES]
</pre>
<p>Applies only to range partitions. This statement divides a table partition into two partitions, thus adding a new partition to the table. The local corresponding index partitions will be marked <code dir="ltr">UNUSABLE</code> if the corresponding table partitions are non-empty. Use the <code dir="ltr">ALTER TABLE MODIFY PARTITION</code> statement to rebuild the partition indexes.</p>
<p><a id="sthref76"></a><a id="sthref77"></a>For a global, nonpartitioned index, if you perform the split operation without an <code dir="ltr">UPDATE GLOBAL INDEXES</code> clause, then the resulting index (if not <code dir="ltr">NULL</code>) will be invalid and must be rebuilt. If you specify the <code dir="ltr">UPDATE GLOBAL INDEXES</code> clause after the operation and the <code dir="ltr">SYNC</code> type is <code dir="ltr">MANUAL</code>, then the index will be valid, but you still must synchronize the index with CTX_DDL.<a href="cddlpkg.htm#i998469">SYNC_INDEX</a> for the update to take place.</p>
<p>The naming convention for the two resulting index partition is the same as in the <code dir="ltr">ALTER TABLE ADD PARTITION</code> statement.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref78"></a>Exchange Partition Syntax</p>
<pre dir="ltr">
ALTER TABLE [schema.]table EXCHANGE PARTITION partition WITH TABLE table
[INCLUDING|EXCLUDING INDEXES}
[WITH|WITHOUT VALIDATION]
[EXCEPTIONS INTO [schema.]table]
[UPDATE GLOBAL INDEXES]
</pre>
<p>Converts a partition to a nonpartitioned table, and converts a table to a partition of a partitioned table by exchanging their data segments. Rowids are preserved.</p>
<p>If <code dir="ltr">EXCLUDING INDEXES</code> is specified, all the context indexes corresponding to the partition and all the indexes on the exchanged table are marked as <code dir="ltr">UNUSABLE</code>. To rebuild the new index partition in this case, issue an <code dir="ltr">ALTER TABLE MODIFY PARTITION</code> statement.</p>
<p>If <code dir="ltr">INCLUDING INDEXES</code> is specified, then for every local domain index on the partitioned table, there must be a nonpartitioned domain index on the nonpartitioned table. The local index partitions are exchanged with the corresponding regular indexes.</p>
<p><a id="sthref79"></a><a id="sthref80"></a>For a global, nonpartitioned index, if you perform the exchange operation without an <code dir="ltr">UPDATE GLOBAL INDEXES</code> clause, then the resulting index (if not <code dir="ltr">NULL</code>) will be invalid and must be rebuilt. If you specify the <code dir="ltr">UPDATE GLOBAL INDEXES</code> clause after the operation and the <code dir="ltr">SYNC</code> type is <code dir="ltr">MANUAL</code>, then the index will be valid, but you still must synchronize the index with CTX_DDL.<a href="cddlpkg.htm#i998469">SYNC_INDEX</a> for the update to take place.</p>
<p class="subhead2"><a id="CCREF23698"></a>Field Sections</p>
<p>Field section queries might not work the same way if the nonpartitioned index and local index use different section IDs for the same field section.</p>
<p class="subhead2"><a id="CCREF23699"></a>Storage</p>
<p>Storage is not changed. So if the index on the nonpartitioned table <code dir="ltr">$I</code> table was in tablespace XYZ, then after the exchange partition, it will still be in tablespace XYZ, but now it is the <code dir="ltr">$I</code> table for an index partition.</p>
<p>Storage preferences are not switched, so if you switch and then rebuild the index, then the table may be created in a different location.</p>
<p class="subhead2"><a id="CCREF23700"></a>Restrictions</p>
<p>Both indexes must be equivalent. They must use the same objects and the same settings for each object. Note that Oracle Text checks only that the indexes are using the same object. But they should use the same exact everything.</p>
<p>No index object can be partitioned, that is, when the user has used the storage object to partition the $I, $N tables.</p>
<p>If either index or index partition does not meet all these restrictions an error is raised and both the index and index partition will be <code dir="ltr">INVALID</code>. You must manually rebuild both index and index partition using the <code dir="ltr">ALTER INDEX REBUILD</code> statement.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref81"></a>Truncate Partition Syntax</p>
<pre dir="ltr">
ALTER TABLE [schema.]table TRUNCATE PARTITION [DROP|REUSE STORAGE] [UPDATE GLOBAL
INDEXES]
</pre>
<p>Removes all rows from a partition in a table. Corresponding <code dir="ltr">CONTEXT</code> index partitions are also removed.</p>
<p><a id="sthref82"></a><a id="sthref83"></a>For a global, nonpartitioned index, if you perform the truncate operation without an <code dir="ltr">UPDATE GLOBAL INDEXES</code> clause, then the resulting index (if not <code dir="ltr">NULL</code>) will be invalid and must be rebuilt. If you specify the <code dir="ltr">UPDATE GLOBAL INDEXES</code> clause after the operation, the index will be valid.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref84"></a>ALTER TABLE Examples</p>
<p class="subhead1"><a id="CCREF23701"></a>Global Index on Partitioned Table Examples</p>
<p>The following example creates a range-partitioned table with three partitions. Each partition is populated with two rows. A global, nonpartitioned <code dir="ltr">CONTEXT</code> index is then created. To demonstrate the <code dir="ltr">UPDATE GLOBAL INDEXES</code> clause, the partitions are split and merged with an index synchronization.</p>
<pre dir="ltr">
create table tdrexglb_part(a int, b varchar2(40)) partition by range(a)
(partition p1 values less than (10),
 partition p2 values less than (20),
 partition p3 values less than (30));

insert into tdrexglb_part values (1,'row1');
insert into tdrexglb_part values (8,'row2');
insert into tdrexglb_part values (11,'row11');
insert into tdrexglb_part values (18,'row18');
insert into tdrexglb_part values (21,'row21');
insert into tdrexglb_part values (28,'row28');

commit;
create index tdrexglb_parti on tdrexglb_part(b) indextype is ctxsys.context;

create table tdrexglb(a int, b varchar2(40));

insert into tdrexglb values(20,'newrow20');
commit;


PROMPT make sure query works
select * from tdrexglb_part where contains(b,'row18') &gt;0;

PROMPT split partition
alter table tdrexglb_part split partition p2 at (15) into
(partition p21, partition p22) update global indexes;

PROMPT before sync
select * from tdrexglb_part where contains(b,'row11') &gt;0;
select * from tdrexglb_part where contains(b,'row18') &gt;0;

exec ctx_ddl.sync_index('tdrexglb_parti')

PROMPT after sync
select * from tdrexglb_part where contains(b,'row11') &gt;0;
select * from tdrexglb_part where contains(b,'row18') &gt;0;

PROMPT merge partition
alter table tdrexglb_part merge partitions p22, p3 
into partition pnew3 update global indexes;

PROMPT before sync
select * from tdrexglb_part where contains(b,'row18') &gt;0;
select * from tdrexglb_part where contains(b,'row28') &gt;0;
exec ctx_ddl.sync_index('tdrexglb_parti');

PROMPT after sync
select * from tdrexglb_part where contains(b,'row18') &gt;0;
select * from tdrexglb_part where contains(b,'row28') &gt;0;

PROMPT drop partition 
alter table tdrexglb_part drop partition p1 update global indexes;

PROMPT before sync
select * from tdrexglb_part where contains(b,'row1') &gt;0;
exec ctx_ddl.sync_index('tdrexglb_parti');

PROMPT after sync
select * from tdrexglb_part where contains(b,'row1') &gt;0;

PROMPT exchange partition
alter table tdrexglb_part exchange partition pnew3 with table
tdrexglb update global indexes;

PROMPT before sync
select * from tdrexglb_part where contains(b,'newrow20') &gt;0;
select * from tdrexglb_part where contains(b,'row28') &gt;0;

exec ctx_ddl.sync_index('tdrexglb_parti');
PROMPT after sync
select * from tdrexglb_part where contains(b,'newrow20') &gt;0;
select * from tdrexglb_part where contains(b,'row28') &gt;0;

PROMPT move table partition
alter table tdrexglb_part move partition p21 update global indexes;
PROMPT before sync
select * from tdrexglb_part where contains(b,'row11') &gt;0;

exec ctx_ddl.sync_index('tdrexglb_parti');
PROMPT after sync
select * from tdrexglb_part where contains(b,'row11') &gt;0;

PROMPT truncate table partition
alter table tdrexglb_part truncate partition p21 update global indexes;

update global indexes;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i997226"></a>
<div id="CCREF0103" class="refsect1">
<h2 class="refsect1">CATSEARCH<a id="sthref85"></a></h2>
<p>Use the <code dir="ltr">CATSEARCH</code> operator to search <a href="#i999894"><span class="bold">CTXCAT</span></a> indexes. Use this operator in the <code dir="ltr">WHERE</code> clause of a <code dir="ltr">SELECT</code> statement.</p>
<p>The <code dir="ltr">CATSEARCH</code> operator also supports database links. You can identify a remote table or materialized view by appending <code dir="ltr">@dblink</code> to the end of its name. The <code dir="ltr">dblink</code> must be a complete or partial name for a database link to the database containing the remote table or materialized view. (Indexing of remote views is not supported.)</p>
<p>The grammar of this operator is called <code dir="ltr">CTXCAT</code>. You can also use the <code dir="ltr">CONTEXT</code> grammar if your search criteria require special functionality, such as thesaurus, fuzzy matching, proximity searching, or stemming. To utilize the <code dir="ltr">CONTEXT</code> grammar, use the Query Template Specification in the <code dir="ltr">text_query</code> parameter as described in this section.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref86"></a>About Performance</p>
<p>Use the <code dir="ltr">CATSEARCH</code> operator with a <a href="#i999894"><span class="bold">CTXCAT</span></a> index mainly to improve mixed-query performance. Specify your text query condition with <code dir="ltr">text_query</code> and your structured condition with the <code dir="ltr">structured_query</code> argument.</p>
<p>Internally, Oracle Text uses a combined B-tree index on text and structured columns to quickly produce results satisfying the query.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref87"></a>Limitations</p>
<p>If the optimizer chooses to use the functional query invocation, then your query will fail. The optimizer might choose functional invocation when your structured clause is highly selective.</p>
<p>The <code dir="ltr">structured_query</code> argument of the <code dir="ltr">CATSEARCH</code> operator must reference columns used during <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> sets; otherwise, error DRG-10845 will be raised. For example, the error will be raised if you issue a <code dir="ltr">CATSEARCH</code> query on a view created on top of a table with the <code dir="ltr">CTXCAT</code> index on it, and the name of the logical column on the view is different from the actual column name on the physical table. The columns referenced by the <code dir="ltr">structured_query</code> argument of the <code dir="ltr">CATSEARCH</code> operator must be the physical column name used during <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> sets, not the logical column on the view.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref88"></a>Syntax</p>
<pre dir="ltr">
CATSEARCH(
</pre>
<pre dir="ltr">
[<span class="italic">schema</span>.]<span class="italic">column</span>,
text_query       [VARCHAR2|CLOB],
structured_query VARCHAR2,
</pre>
<pre dir="ltr">
RETURN NUMBER;
</pre>
<dl>
<dt>[schema.]column</dt>
<dd>
<p>Specifies the text column to be searched on. This column must have a <code dir="ltr">CTXCAT</code> index associated with it.</p>
</dd>
<dt>text_query</dt>
<dd>
<p>Specify one of the following to define your search in <code dir="ltr">column</code>:</p>
</dd>
</dl>
<ul>
<li>
<p><a href="#i997256">CATSEARCH Query Operations</a></p>
</li>
<li>
<p><a href="#i997325">Query Template Specification</a> (for using <code dir="ltr">CONTEXT</code> grammar)</p>
</li>
</ul>
<p class="subhead2"><a id="i997256"></a><a id="CCREF23702"></a>CATSEARCH Query Operations</p>
<p>The <code dir="ltr">CATSEARCH</code> operator supports only the following query operations:</p>
<ul>
<li>
<p>Logical <code dir="ltr">AND</code></p>
</li>
<li>
<p>Logical <code dir="ltr">OR</code> (|)</p>
</li>
<li>
<p>Logical <code dir="ltr">NOT</code> (-)</p>
</li>
<li>
<p>" " (quoted phrases)</p>
</li>
<li>
<p>Wildcarding</p>
</li>
</ul>
<p><a href="#CHDJBGHE">Table 1-2</a> provides the syntax for these operators.</p>
<div id="CCREF23703" class="tblformal">
<p class="titleintable"><a id="sthref89"></a><a id="CHDJBGHE"></a>Table 1-2 CATSEARCH Query Operators</p>
<table class="cellalignment103" title="CATSEARCH Query Operators" summary="This table describes the various CATSEARCH query operators." dir="ltr">
<thead>
<tr class="cellalignment90">
<th class="cellalignment97" id="r1c1-t29">Operation</th>
<th class="cellalignment97" id="r1c2-t29">Syntax</th>
<th class="cellalignment97" id="r1c3-t29">Description of Operation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment90">
<td class="cellalignment98" id="r2c1-t29" headers="r1c1-t29">
<p>Logical <code dir="ltr">AND</code></p>
</td>
<td class="cellalignment98" headers="r2c1-t29 r1c2-t29">
<p>a b c</p>
</td>
<td class="cellalignment98" headers="r2c1-t29 r1c3-t29">
<p>Returns rows that contain a, b, and c.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r3c1-t29" headers="r1c1-t29">
<p>Logical <code dir="ltr">OR</code></p>
</td>
<td class="cellalignment98" headers="r3c1-t29 r1c2-t29">
<p>a | b | c</p>
</td>
<td class="cellalignment98" headers="r3c1-t29 r1c3-t29">
<p>Returns rows that contain a, b, or c.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r4c1-t29" headers="r1c1-t29">
<p>Logical <code dir="ltr">NOT</code></p>
</td>
<td class="cellalignment98" headers="r4c1-t29 r1c2-t29">
<p>a - b</p>
</td>
<td class="cellalignment98" headers="r4c1-t29 r1c3-t29">
<p>Returns rows that contain a and not b.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r5c1-t29" headers="r1c1-t29">
<p>Hyphen with no space</p>
</td>
<td class="cellalignment98" headers="r5c1-t29 r1c2-t29">
<p>a-b</p>
</td>
<td class="cellalignment98" headers="r5c1-t29 r1c3-t29">
<p>Hyphen treated as a regular character.</p>
<p>For example, if the hyphen is defined as skipjoin, words such as <span class="italic">web-site</span> are treated as the single query term <span class="italic">website</span>.</p>
<p>Likewise, if the hyphen is defined as a printjoin, words such as <span class="italic">web-site</span> are treated as <span class="italic">web-site</span> in the <code dir="ltr">CTXCAT</code> query language.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r6c1-t29" headers="r1c1-t29">
<p>" "</p>
</td>
<td class="cellalignment98" headers="r6c1-t29 r1c2-t29">
<p>"a b c"</p>
</td>
<td class="cellalignment98" headers="r6c1-t29 r1c3-t29">
<p>Returns rows that contain the phrase "a b c".</p>
<p>For example, entering "Sony CD Player" means return all rows that contain this sequence of words.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r7c1-t29" headers="r1c1-t29">
<p>( )</p>
</td>
<td class="cellalignment98" headers="r7c1-t29 r1c2-t29">
<p>(A B) | C</p>
</td>
<td class="cellalignment98" headers="r7c1-t29 r1c3-t29">
<p>Parentheses group operations. This query is equivalent to the <code dir="ltr">CONTAINS</code> query (A &amp;B) | C.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r8c1-t29" headers="r1c1-t29">
<p>Wildcard</p>
<p>(right and double truncated)</p>
</td>
<td class="cellalignment98" headers="r8c1-t29 r1c2-t29">
<p>term*</p>
<p>a*b</p>
</td>
<td class="cellalignment98" headers="r8c1-t29 r1c3-t29">
<p>The wildcard character matches zero or more characters.</p>
<p>For example, <span class="italic">do*</span> matches <span class="italic">dog</span>, and <span class="italic">gl*s</span> matches <span class="italic">glass</span>.</p>
<p>Left truncation not supported.</p>
<p>Note: Oracle recommends that you create a prefix index if your application uses wildcard searching. Set prefix indexing with the <a href="cdatadic.htm#i1008935">BASIC_WORDLIST</a> preference.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>The following limitations apply to these operators:</p>
<ul>
<li>
<p>The left-hand side (the column name) must be a column named in at least one of the indexes of the index set.</p>
</li>
<li>
<p>The left-hand side must be a plain column name. Functions and expressions are not allowed.</p>
</li>
<li>
<p>The right-hand side must be composed of literal values. Functions, expressions, other columns, and subselects are not allowed.</p>
</li>
<li>
<p>Multiple criteria can be combined with <code dir="ltr">AND</code>. Note that <code dir="ltr">OR</code> is not supported.</p>
</li>
<li>
<p>When querying a remote table through a database link, the database link must be specified for <code dir="ltr">CATSEARCH</code> as well as for the table being queried.</p>
</li>
</ul>
<p>For example, these expressions are supported:</p>
<pre dir="ltr">
catsearch(text, 'dog', 'foo &gt; 15')
catsearch(text, 'dog', 'bar = ''SMITH''')
catsearch(text, 'dog', 'foo between 1 and 15')
catsearch(text, 'dog', 'foo = 1 and abc = 123')
catsearch@remote(text, 'dog', 'foo = 1 and abc = 123')
</pre>
<p>These expressions are not supported:</p>
<pre dir="ltr">
catsearch(text, 'dog', 'upper(bar) = ''A''')
catsearch(text, 'dog', 'bar LIKE ''A%''')
catsearch(text, 'dog', 'foo = abc')
catsearch(text, 'dog', 'foo = 1 or abc = 3')
</pre>
<p class="subhead2"><a id="i997325"></a><a id="CCREF23704"></a>Query Template Specification<a id="sthref90"></a><a id="sthref91"></a></p>
<p>Specifies a marked-up string that specifies a query template. Specify one of the following templates:</p>
<ul>
<li>
<p>Query rewrite, used to expand a query string into different versions</p>
</li>
<li>
<p>Progressive relaxation, used to progressively enter less restrictive versions of a query to increase recall</p>
</li>
<li>
<p>Alternate grammar, used to specify <code dir="ltr">CONTAINS</code> operators (See <a href="#i1000002">"CONTEXT Query Grammar Examples"</a>)</p>
</li>
<li>
<p>Alternate language, used to specify alternate query language</p>
</li>
<li>
<p>Alternate scoring, used to specify alternate scoring algorithms</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The <a href="#BJECJFFJ">text_query</a> parameter description for <code dir="ltr">CONTAINS</code> for more information about the syntax for these query templates</div>
</li>
</ul>
<dl>
<dt>structured_query</dt>
<dd>
<p>Specifies the structured conditions and the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause. There must exist an index for any column you specify. For example, if you specify <code dir="ltr">'category_id=1 order by bid_close'</code>, you must have an index for <code dir="ltr">'category_id, bid_close'</code> as specified with the <code dir="ltr">CTX_DDL</code>.<code dir="ltr">ADD_INDEX</code> package.</p>
<p>With <code dir="ltr">structured_query</code>, you can use standard SQL syntax only with the following operators:</p>
</dd>
</dl>
<ul>
<li>
<p>=</p>
</li>
<li>
<p>&lt;=</p>
</li>
<li>
<p>&gt;=</p>
</li>
<li>
<p>&gt;</p>
</li>
<li>
<p>&lt;</p>
</li>
<li>
<p><code dir="ltr">IN</code></p>
</li>
<li>
<p><code dir="ltr">BETWEEN</code></p>
</li>
<li>
<p><code dir="ltr">AND</code> (to combine two or more clauses)</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot use parentheses () in the <code dir="ltr">structured_query</code> parameter.</div>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref92"></a>Examples</p>
<ol>
<li>
<p>Create the table.</p>
</li>
</ol>
<p>The following statement creates the table to be indexed:</p>
<pre dir="ltr">
CREATE TABLE auction (category_id number primary key, title varchar2(20), 
bid_close date);
</pre>
<p>The following table inserts the values into the table:</p>
<pre dir="ltr">
INSERT INTO auction values(1, 'Sony CD Player', '20-FEB-2000');
INSERT INTO auction values(2, 'Sony CD Player', '24-FEB-2000');
INSERT INTO auction values(3, 'Pioneer DVD Player', '25-FEB-2000');
INSERT INTO auction values(4, 'Sony CD Player', '25-FEB-2000');
INSERT INTO auction values(5, 'Bose Speaker', '22-FEB-2000');
INSERT INTO auction values(6, 'Tascam CD Burner', '25-FEB-2000');
INSERT INTO auction values(7, 'Nikon digital camera', '22-FEB-2000');
INSERT INTO auction values(8, 'Canon digital camera', '26-FEB-2000');
</pre>
<ol>
<li>
<p>Create the <code dir="ltr">CTXCAT</code> index:</p>
</li>
</ol>
<p>The following statements create the <code dir="ltr">CTXCAT</code> index:</p>
<pre dir="ltr">
begin
</pre>
<pre dir="ltr">
ctx_ddl.create_index_set('auction_iset');
ctx_ddl.add_index('auction_iset','bid_close'); 
</pre>
<pre dir="ltr">
end;
/
CREATE INDEX auction_titlex ON auction(title) INDEXTYPE IS CTXSYS.CTXCAT
PARAMETERS ('index set auction_iset');
</pre>
<ol>
<li>
<p>Query the Table:</p>
</li>
</ol>
<p>A typical query with <code dir="ltr">CATSEARCH</code> might include a structured clause as follows to find all rows that contain the word <span class="italic">camera</span> ordered by <code dir="ltr">bid_close</code>:</p>
<pre dir="ltr">
SELECT * FROM auction WHERE CATSEARCH(title, 'camera', 'order by bid_close desc')&gt;
0;

CATEGORY_ID TITLE                BID_CLOSE
----------- -------------------- ---------
          8 Canon digital camera 26-FEB-00
          7 Nikon digital camera 22-FEB-00
</pre>
<p>The following query finds all rows that contain the phrase <span class="italic">Sony CD Player</span> and that have a bid close date of February 20, 2000:</p>
<pre dir="ltr">
SELECT * FROM auction WHERE CATSEARCH(title, '"Sony CD Player"',
'bid_close=''20-FEB-00''')&gt; 0;

CATEGORY_ID TITLE                BID_CLOSE
----------- -------------------- ---------
          1 Sony CD Player       20-FEB-00
</pre>
<p>The following query finds all rows with the terms <span class="italic">Sony</span> and <span class="italic">CD</span> and <span class="italic">Player</span>:</p>
<pre dir="ltr">
SELECT * FROM auction WHERE CATSEARCH(title, 'Sony CD Player', 'order by bid_close
desc')&gt; 0;
CATEGORY_ID TITLE                BID_CLOSE
----------- -------------------- ---------
          4 Sony CD Player       25-FEB-00
          2 Sony CD Player       24-FEB-00
          1 Sony CD Player       20-FEB-00
</pre>
<p>The following query finds all rows with the term <span class="italic">CD</span> and not <span class="italic">Player</span>:</p>
<pre dir="ltr">
SELECT * FROM auction WHERE CATSEARCH(title, 'CD - Player', 'order by bid_close
desc')&gt; 0;

CATEGORY_ID TITLE                BID_CLOSE
----------- -------------------- ---------
          6 Tascam CD Burner     25-FEB-00
</pre>
<p>The following query finds all rows with the terms <span class="italic">CD</span> or <span class="italic">DVD</span> or <span class="italic">Speaker</span>:</p>
<pre dir="ltr">
SELECT * FROM auction WHERE CATSEARCH(title, 'CD | DVD | Speaker', 'order by
bid_close desc')&gt; 0;

CATEGORY_ID TITLE                BID_CLOSE
----------- -------------------- ---------
          3 Pioneer DVD Player   25-FEB-00
          4 Sony CD Player       25-FEB-00
          6 Tascam CD Burner     25-FEB-00
          2 Sony CD Player       24-FEB-00
          5 Bose Speaker         22-FEB-00
          1 Sony CD Player       20-FEB-00
</pre>
<p>The following query finds all rows that are about <span class="italic">audio equipment</span>:</p>
<pre dir="ltr">
SELECT * FROM auction WHERE CATSEARCH(title, 'ABOUT(audio equipment)', NULL)&gt; 0;
</pre>
<p class="subhead1"><a id="i1000002"></a><a id="CCREF23705"></a>CONTEXT Query Grammar Examples</p>
<p>The following examples show how to specify the <code dir="ltr">CONTEXT</code> grammar in <code dir="ltr">CATSEARCH</code> queries using the template feature:</p>
<pre dir="ltr">
PROMPT
PROMPT fuzzy: query = ?test
PROMPT should match all fuzzy variations of test (for example, text)
select pk||' ==&gt; '||text from test 
where catsearch(text,
'&lt;query&gt; 
  &lt;textquery grammar="context"&gt;
     ?test
  &lt;/textquery&gt;
&lt;/query&gt;','')&gt;0
order by pk; 

PROMPT
PROMPT fuzzy: query = !sail
PROMPT should match all soundex variations of bot (for example, sell)
select pk||' ==&gt; '||text from test 
where catsearch(text,
'&lt;query&gt; 
  &lt;textquery grammar="context"&gt;
     !sail
  &lt;/textquery&gt;
&lt;/query&gt;','')&gt;0
order by pk; 

PROMPT
PROMPT theme (ABOUT) query
PROMPT query: about(California)
select pk||' ==&gt; '||text from test 
where catsearch(text,
'&lt;query&gt; 
  &lt;textquery grammar="context"&gt;
     about(California)
  &lt;/textquery&gt;
&lt;/query&gt;','')&gt;0
order by pk; 
</pre>
<p>The following example shows a field section search against a <code dir="ltr">CTXCAT</code> index using <code dir="ltr">CONTEXT</code> grammar by means of a query template in a <code dir="ltr">CATSEARCH</code> query:</p>
<pre dir="ltr">
-- Create and populate table
create table BOOKS (ID number, INFO varchar2(200), PUBDATE DATE);
 
insert into BOOKS values(1, '&lt;author&gt;NOAM CHOMSKY&lt;/author&gt;&lt;subject&gt;CIVIL
   RIGHTS&lt;/subject&gt;&lt;language&gt;ENGLISH&lt;/language&gt;&lt;publisher&gt;MIT
  PRESS&lt;/publisher&gt;', '01-NOV-2003');
 
insert into BOOKS values(2, '&lt;author&gt;NICANOR PARRA&lt;/author&gt;&lt;subject&gt;POEMS 
  AND ANTIPOEMS&lt;/subject&gt;&lt;language&gt;SPANISH&lt;/language&gt;
  &lt;publisher&gt;VASQUEZ&lt;/publisher&gt;', '01-JAN-2001');
 
insert into BOOKS values(1, '&lt;author&gt;LUC SANTE&lt;/author&gt;&lt;subject&gt;XML
  DATABASE&lt;/subject&gt;&lt;language&gt;FRENCH&lt;/language&gt;&lt;publisher&gt;FREE
  PRESS&lt;/publisher&gt;', '15-MAY-2002');
 
commit;
 
-- Create index set and section group
exec ctx_ddl.create_index_set('BOOK_INDEX_SET');
exec ctx_ddl.add_index('BOOKSET','PUBDATE');
 
exec ctx_ddl.create_section_group('BOOK_SECTION_GROUP',
      'BASIC_SECTION_GROUP');
exec ctx_ddl.add_field_section('BOOK_SECTION_GROUP','AUTHOR','AUTHOR');
exec ctx_ddl.add_field_section('BOOK_SECTION_GROUP','SUBJECT','SUBJECT');
exec ctx_ddl.add_field_section('BOOK_SECTION_GROUP','LANGUAGE','LANGUAGE');
exec ctx_ddl.add_field_section('BOOK_SECTION_GROUP','PUBLISHER','PUBLISHER'); 
  
-- Create index
create index books_index on books(info) indextype is ctxsys.ctxcat
  parameters('index set book_index_set section group book_section_group');
 
-- Use the index
-- Note that: even though CTXCAT index can be created with field sections, it
-- cannot be accessed using CTXCAT grammar (default for CATSEARCH).
-- We need to use query template with CONTEXT grammar to access field 
-- sections with CATSEARCH.
 
select  id, info from books
where catsearch(info,
'&lt;query&gt;
      &lt;textquery grammar="context"&gt;
              NOAM within author and english within language
      &lt;/textquery&gt;
 &lt;/query&gt;',
'order by pubdate')&gt;0; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref93"></a>Related Topics</p>
<p><a href="#i998134">"Syntax for CTXCAT Index Type"</a></p>
<p><a class="olink CCAPP" href="../e24435/toc.htm"><span class="italic">Oracle Text Application Developer's Guide</span></a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i997503"></a>
<div id="CCREF0104" class="refsect1">
<h2 class="refsect1"><a id="sthref94"></a>CONTAINS</h2>
<p><span class="bold"><a id="sthref95"></a></span>Use the <code dir="ltr">CONTAINS</code> operator in the <code dir="ltr">WHERE</code> clause of a <code dir="ltr">SELECT</code> statement to specify the query expression for a Text query.</p>
<p>The <code dir="ltr">CONTAINS</code> operator also supports database links. You can identify a remote table or materialized view by appending <code dir="ltr">@dblink</code> to the end of its name. The <code dir="ltr">dblink</code> must be a complete or partial name for a database link to the database containing the remote table or materialized view. (Querying of remote views is not supported.)</p>
<p><code dir="ltr">CONTAINS</code> returns a relevance score for every row selected. Obtain this score with the <a href="#i998514">SCORE</a> operator.</p>
<p>The grammar for this operator is called the <code dir="ltr">CONTEXT</code> grammar. You can also use <code dir="ltr">CTXCAT</code> grammar if your application works better with simpler syntax. To do so, use the Query Template Specification in the <code dir="ltr">text_query</code> parameter as described in this section.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
"The CONTEXT Grammar" topic in <a class="olink CCAPP" href="../e24435/toc.htm"><span class="italic">Oracle Text Application Developer's Guide</span></a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref96"></a>Syntax</p>
<pre dir="ltr">
CONTAINS(
         [<span class="italic">schema</span>.]<span class="italic">column</span>,
         text_query    [VARCHAR2|CLOB]
         [,label       NUMBER])
RETURN NUMBER;
</pre>
<dl>
<dt>[schema.]column</dt>
<dd>
<p>Specify the text column to be searched on. This column must have a Text index associated with it.</p>
</dd>
<dd><a id="BJECJFFJ"></a></dd>
<dt>text_query<a id="sthref97"></a><a id="sthref98"></a></dt>
<dd>
<p>Specify one of the following:</p>
</dd>
</dl>
<ul>
<li>
<p>The query expression that defines your search in <code dir="ltr">column</code>.</p>
</li>
<li>
<p>A marked-up document that specifies a query template. Use one of the following templates:</p>
</li>
</ul>
<p class="subhead1"><a id="CCREF23706"></a>Query Rewrite Template<a id="sthref99"></a><a id="sthref100"></a></p>
<p>Use this template to automatically write different versions of a query before you submit the query to Oracle Text. This is useful when you need to maximize the recall of a user query. For example, you can program your application to expand a single phrase query of 'cat dog' into the following queries:</p>
<pre dir="ltr">
{cat} {dog}
{cat} ; {dog}
{cat} AND {dog}
{cat} ACCUM {dog}
</pre>
<p>These queries are submitted as one query and results are returned with no duplication. In this example, the query returns documents that contain the phrase <span class="italic">cat dog</span> as well as documents in which <span class="italic">cat</span> is near <span class="italic">dog</span>, and documents that have <span class="italic">cat</span> and <span class="italic">dog</span>.</p>
<p>This is done with the following template:</p>
<pre dir="ltr">
 &lt;query&gt;
   &lt;textquery lang="ENGLISH" grammar="CONTEXT"&gt; cat dog
     &lt;progression&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, "{", "}", " "))&lt;/rewrite&gt;&lt;/seq&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, "{", "}", " ; "))&lt;/rewrite&gt;&lt;/seq&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, "{", "}", "AND"))&lt;/rewrite&gt;&lt;/seq&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, "{", "}", "ACCUM"))&lt;/rewrite&gt;&lt;/seq&gt;
     &lt;/progression&gt;
   &lt;/textquery&gt;
  &lt;score datatype="INTEGER" algorithm="COUNT"/&gt;
&lt;/query&gt;
</pre>
<p><a id="sthref101"></a><a id="sthref102"></a>The operator <code dir="ltr">TRANSFORM</code> is used to specify the rewrite rules and has the following syntax (note that it uses double parentheses). The parameters are described in <a href="#CHDEAGEF">Table 1-3</a>.</p>
<pre dir="ltr">
TRANSFORM((terms, prefix, suffix, connector))
</pre>
<div id="CCREF23707" class="tblformal">
<p class="titleintable"><a id="sthref103"></a><a id="CHDEAGEF"></a>Table 1-3 TRANSFORM Parameters</p>
<table class="cellalignment103" title="TRANSFORM Parameters" summary="This table shows TRANSFORM parameters." dir="ltr">
<thead>
<tr class="cellalignment90">
<th class="cellalignment97" id="r1c1-t33">Parameter</th>
<th class="cellalignment97" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment90">
<td class="cellalignment98" id="r2c1-t33" headers="r1c1-t33">
<p><code dir="ltr">term</code></p>
</td>
<td class="cellalignment98" headers="r2c1-t33 r1c2-t33">
<p>Specifies the type of terms to be produced from the original query. Specify either <code dir="ltr">TOKENS</code> or <code dir="ltr">THEMES</code>.</p>
<p>Specifying <code dir="ltr">THEMES</code> requires an installed knowledge base. A knowledge base may or may not have been installed with Oracle Text. For more information, see <a class="olink CCAPP" href="../e24435/toc.htm"><span class="italic">Oracle Text Application Developer's Guide</span></a>.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r3c1-t33" headers="r1c1-t33">
<p><code dir="ltr">prefix</code></p>
</td>
<td class="cellalignment98" headers="r3c1-t33 r1c2-t33">
<p>Specifies the literal string to be prepended to all terms.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r4c1-t33" headers="r1c1-t33">
<p><code dir="ltr">suffix</code></p>
</td>
<td class="cellalignment98" headers="r4c1-t33 r1c2-t33">
<p>Specifies the literal string to be appended to all terms.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r5c1-t33" headers="r1c1-t33">
<p><code dir="ltr">connector</code></p>
</td>
<td class="cellalignment98" headers="r5c1-t33 r1c2-t33">
<p>Specifies the literal string to connect all terms after applying the prefix and suffix.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
An error will be raised if the input Text query string specified in the Query Rewrite Template with <code dir="ltr">TRANSFORM</code> rules contains any Oracle Text query operators (such as <code dir="ltr">AND</code>, <code dir="ltr">OR</code>, or <code dir="ltr">SOUNDEX</code>). Also, any special characters (such as <code dir="ltr">%</code> or <code dir="ltr">$</code>) in the input Text query string must be preceded by an escape character, or an error is raised.</div>
<p class="subhead1"><a id="CCREF23708"></a>Query Relaxation Template<a id="sthref104"></a><a id="sthref105"></a><a id="sthref106"></a></p>
<p>Use this template to progressively relax your query. <span class="bold">Progressive</span> <span class="bold">relaxation</span> is when you increase recall by progressively issuing less restrictive versions of a query, so that your application can return an appropriate number of hits to the user.</p>
<p>For example, the query of <span class="italic">black pen</span> can be progressively relaxed to:</p>
<pre dir="ltr">
black pen
black NEAR pen
black AND pen
black ACCUM pen
</pre>
<p>This is done with the following template</p>
<pre dir="ltr">
&lt;query&gt;
   &lt;textquery lang="ENGLISH" grammar="CONTEXT"&gt;
     &lt;progression&gt;
       &lt;seq&gt;black pen&lt;/seq&gt;
       &lt;seq&gt;black NEAR pen&lt;/seq&gt;
       &lt;seq&gt;black AND pen&lt;/seq&gt;
       &lt;seq&gt;black ACCUM pen&lt;/seq&gt;
     &lt;/progression&gt;
   &lt;/textquery&gt;
   &lt;score datatype="INTEGER" algorithm="COUNT"/&gt;
&lt;/query&gt;
</pre>
<p class="subhead1"><a id="CCREF23709"></a>Alternate Grammar Template<a id="sthref107"></a></p>
<p>Use this template to specify an alternate grammar, such as <code dir="ltr">CONTEXT</code> or <code dir="ltr">CATSEARCH</code>. Specifying an alternate grammar enables you to enter queries using different syntax and operators.</p>
<p>For example, with <code dir="ltr">CATSEARCH</code>, enter <code dir="ltr">ABOUT</code> queries using the <code dir="ltr">CONTEXT</code> grammar. Likewise with <code dir="ltr">CONTAINS</code>, enter logical queries using the simplified <code dir="ltr">CATSEARCH</code> syntax.</p>
<p>The phrase <span class="italic">'dog cat mouse'</span> is interpreted as a phrase in <code dir="ltr">CONTAINS</code>. However, with <code dir="ltr">CATSEARCH</code>, this is equivalent to an <code dir="ltr">AND</code> query of <span class="italic">'dog AND cat AND mouse'</span>. Specify that <code dir="ltr">CONTAINS</code> use the alternate grammar with the following template:</p>
<pre dir="ltr">
&lt;query&gt; 
  &lt;textquery grammar="CTXCAT"&gt;dog cat mouse&lt;/textquery&gt;
  &lt;score datatype="integer"/&gt;
&lt;/query&gt;
</pre>
<p class="subhead1"><a id="CCREF23710"></a>Alternate Language Template<a id="sthref108"></a></p>
<p>Use this template to specify an alternate language:</p>
<pre dir="ltr">
&lt;query&gt;&lt;textquery lang="french"&gt;bon soir&lt;/textquery&gt;&lt;/query&gt;
</pre>
<p class="subhead1"><a id="CCREF23711"></a>Alternative Scoring Template<a id="sthref109"></a></p>
<p>Use this template to specify an alternative scoring algorithm.</p>
<p>The following example specifies that the query use the <code dir="ltr">CONTEXT</code> grammar and return integer scores using the <code dir="ltr">COUNT</code> algorithm. This algorithm returns a score as the number of query occurrences in the document.</p>
<pre dir="ltr">
&lt;query&gt;        
     &lt;textquery grammar="CONTEXT" lang="english"&gt; mustang  
     &lt;/textquery&gt;     
     &lt;score datatype="INTEGER" algorithm="COUNT"/&gt;     
&lt;/query&gt;
</pre>
<p>The following example uses the <code dir="ltr">normalization_expr</code> attribute to add <code dir="ltr">SDATA</code>(<span class="italic">price</span>) into the score returned by the query, and uses it as the final score:</p>
<pre dir="ltr">
&lt;query&gt;
    &lt;textquery grammar="CONTEXT" lang="english"&gt;
        DEFINESCORE(dog, RELEVANCE) and  cat
    &lt;/textquery&gt;
    &lt;score  algorithm="COUNT"  normalization_expr ="doc_score+ SDATA(price)"/&gt;
&lt;/query&gt;
</pre>
<p>The <a id="sthref110"></a><code dir="ltr">normalization_expr</code> attribute is used only with the alternate scoring template, and is an arithmetic expression that consists of:</p>
<ul>
<li>
<p>Arithmetic operators: + - * /. The operator precedence is the same as that for SQL operator precedence.</p>
</li>
<li>
<p>Grouping operators: (). Parentheses can be used to alter the precedence of the arithmetic operators.</p>
</li>
<li>
<p>Absolute function: ABS(<span class="italic">n</span>) returns the absolute value of <span class="italic">n</span>; where <span class="italic">n</span> is any expression that returns a number.</p>
</li>
<li>
<p>Logarithmic function: LOG(<span class="italic">n</span>): returns the base-10 logarithmic value of <span class="italic">n</span>; where <span class="italic">n</span> is any expression that returns a number.</p>
</li>
<li>
<p>Predefined components: The <code dir="ltr">doc_score</code> predefined component can be used to return the initial query score of a particular document.</p>
</li>
<li>
<p><code dir="ltr">SDATA</code> component: <code dir="ltr">SDATA</code><span class="italic">(name)</span> returns the value of the <code dir="ltr">SDATA</code> with the specified name as the score.</p>
<ul>
<li>
<p>Only <code dir="ltr">SDATA</code> with a <code dir="ltr">NUMBER</code> or <code dir="ltr">DATE</code> data type is allowed. An error is raised otherwise.</p>
</li>
<li>
<p>The <span class="italic">sdata</span> string and the <code dir="ltr">SDATA</code> name are case-insensitive.</p>
</li>
<li>
<p>Because an <code dir="ltr">SDATA</code> section value can be <code dir="ltr">NULL</code>, any expression with <code dir="ltr">NULL</code> <code dir="ltr">SDATA</code> section value is evaluated as 0. For example: the <code dir="ltr">normalization_expr "doc_score + SDATA(price)"</code> will be evaluated to 0 if <code dir="ltr">SDATA(price)</code> for a given document has a <code dir="ltr">NULL</code> value.</p>
</li>
</ul>
</li>
<li>
<p>Numeric literals: There are any number literal that conforms to the SQL pattern of <code dir="ltr">NUMBER</code> literal and is within the range of the double-precision floating-point (<code dir="ltr">-3.4e38</code> to <code dir="ltr">3.4e38</code>).</p>
</li>
<li>
<p>Date literals: Date literals must be enclosed with <code dir="ltr">DATE</code> (). Only the following format is allowed: <code dir="ltr">YYYY-MM-DD</code> or <code dir="ltr">YYYY-MM-DD HH24:MI:SS</code>. For example: <code dir="ltr">DATE(2005-11-08)</code>.</p>
<p>Consistent with SQL, if no time is specified, then <code dir="ltr">00:00:00</code> is assumed.</p>
</li>
</ul>
<p>The <code dir="ltr">normalization_expr</code> attribute overrides the algorithm attribute. That is, if algorithm is set to <code dir="ltr">COUNT</code>, and the user also specifies <code dir="ltr">normalization_expr</code>, then the score will not be count, but the calculated score based on the <code dir="ltr">normalization_expr</code>.</p>
<p>If the score (either from <code dir="ltr">algorithm = COUNT</code> or <code dir="ltr">normalization_expr =</code> ...) is internally calculated to be greater than 100, then it will be set to 100.</p>
<p>If the query relaxation template is used, the score will be further normalized in such a way that documents returned from higher sequences will always have higher scores than documents returned from sequence(s) below.</p>
<dl>
<dt>DATE Literal Restrictions</dt>
<dd>
<p>Only the minus (<code dir="ltr">-</code>) operator is allowed between date-type data (<code dir="ltr">DATE</code> literals and date-type <code dir="ltr">SDATA</code>). Using other operators will result in an error. Subtracting two date-type data will produce a number (float) that represents the difference in number of days between the two dates. For example, the following expression is allowed:</p>
<pre dir="ltr">
SDATA(dob) &ndash;  DATE(2005-11-08)
</pre>
<p>The following expression is not allowed:</p>
<pre dir="ltr">
SDATA(dob) +  DATE(2005-11-08)
</pre>
<p>The plus (<code dir="ltr">+</code>) and minus (<code dir="ltr">-</code>) operators are allowed between numeric data and date type of data. The number operand is interpreted as the number or fraction of days. For example, the following expression is allowed:</p>
<pre dir="ltr">
DATE(2005-11-08) + 1        = 9 NOV 2005
</pre>
<p>The following expression is not allowed:</p>
<pre dir="ltr">
DATE(2005-11-08)* 3          = ERROR
</pre></dd>
</dl>
<p class="subhead1"><a id="CCREF23712"></a>Template Attribute Values</p>
<p><a href="#CHDEBEHA">Table 1-4</a> gives the possible values for template attributes.</p>
<div id="CCREF23713" class="tblformal">
<p class="titleintable"><a id="sthref111"></a><a id="CHDEBEHA"></a>Table 1-4 Template Attribute Values</p>
<table class="cellalignment103" title="Template Attribute Values" summary="This table describes template attribute values." dir="ltr">
<thead>
<tr class="cellalignment90">
<th class="cellalignment97" id="r1c1-t35">Tag Attribute</th>
<th class="cellalignment97" id="r1c2-t35">Description</th>
<th class="cellalignment97" id="r1c3-t35">Possible Values</th>
<th class="cellalignment97" id="r1c4-t35">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment90">
<td class="cellalignment98" id="r2c1-t35" headers="r1c1-t35">
<p>grammar=</p>
</td>
<td class="cellalignment98" headers="r2c1-t35 r1c2-t35">
<p>Specifies the grammar of the query.</p>
</td>
<td class="cellalignment98" headers="r2c1-t35 r1c3-t35">
<p><code dir="ltr">CONTEXT</code></p>
<p><code dir="ltr">CTXCAT</code></p>
</td>
<td class="cellalignment98" headers="r2c1-t35 r1c4-t35">
<p>The grammar of the query.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r3c1-t35" headers="r1c1-t35">
<p>datatype=</p>
</td>
<td class="cellalignment98" headers="r3c1-t35 r1c2-t35">
<p>Specifies the type of number returned as score.</p>
</td>
<td class="cellalignment98" headers="r3c1-t35 r1c3-t35">
<p><code dir="ltr">INTEGER</code></p>
<p><code dir="ltr">FLOAT</code></p>
</td>
<td class="cellalignment98" headers="r3c1-t35 r1c4-t35">
<p>Returns score as integer between 0 and 100.</p>
<p>Returns score as its high-precision floating-point number between 0 and 100.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r4c1-t35" headers="r1c1-t35">
<p>algorithm=</p>
</td>
<td class="cellalignment98" headers="r4c1-t35 r1c2-t35">
<p>Specifies the scoring algorithm to use.</p>
</td>
<td class="cellalignment98" headers="r4c1-t35 r1c3-t35">
<p><code dir="ltr">DEFAULT</code></p>
<p><code dir="ltr">COUNT</code></p>
</td>
<td class="cellalignment98" headers="r4c1-t35 r1c4-t35">
<p>Returns the default.</p>
<p>Returns scores as the number of occurrences in the document.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r5c1-t35" headers="r1c1-t35">
<p>lang=</p>
</td>
<td class="cellalignment98" headers="r5c1-t35 r1c2-t35">
<p>Specifies the language name.</p>
</td>
<td class="cellalignment98" headers="r5c1-t35 r1c3-t35">
<p>Any language supported by Oracle Database. See <a class="olink NLSPG" href="../../server.112/e10729/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a>.</p>
</td>
<td class="cellalignment98" headers="r5c1-t35 r1c4-t35">
<p>The language name.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead1"><a id="CCREF23714"></a>Template Grammar Definition</p>
<p>The query template interface is an XML document. Its grammar is defined with the following XML DTD:</p>
</div>
<!-- class="refsubsect" -->
<pre dir="ltr">
&lt;!ELEMENT query (textquery, score?)&gt; 
&lt;!ELEMENT textquery (#PCDATA|progression)*&gt; 
&lt;!ELEMENT progression (seq)+&gt; 
&lt;!ELEMENT seq (#PCDATA|rewrite)*&gt; 
&lt;!ELEMENT rewrite (#PCDATA)&gt; 
&lt;!ELEMENT score EMPTY&gt; 
&lt;!ATTLIST textquery grammar (context | ctxcat) #IMPLIED&gt;
&lt;!ATTLIST textquery language CDATA #IMPLIED&gt;
&lt;!ATTLIST score datatype (integer | float) "integer"&gt;
&lt;!ATTLIST score algorithm (default | count) "default"&gt;
</pre>
<p>All tags and attributes values are case-sensitive.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="cqoper.htm#CHDEGDDF">Chapter 3, "Oracle Text CONTAINS Query Operators"</a> for more information about the operators in query expressions</div>
<dl>
<dt>label</dt>
<dd>
<p>Optionally, specifies the label that identifies the score generated by the <code dir="ltr">CONTAINS</code> operator.</p>
</dd>
</dl>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref112"></a>Returns</p>
<p>For each row selected, the <code dir="ltr">CONTAINS</code> operator returns a number between 0 and 100 that indicates how relevant the document row is to the query. The number 0 means that Oracle Text found no matches in the row.</p>
</div>
<!-- class="refsubsect" -->
<div class="infoboxnotealso">
<p class="notep1">Note:</p>
You must use the <code dir="ltr">SCORE</code> operator with a label to obtain this number.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref113"></a>Example<a id="sthref114"></a><a id="sthref115"></a></p>
<p>The following example searches for all documents in the <code dir="ltr">text</code> column that contain the word <span class="italic">oracle</span>. The score for each row is selected with the <code dir="ltr">SCORE</code> operator using a label of <code dir="ltr">1</code>:</p>
<pre dir="ltr">
SELECT SCORE(1), title from newsindex 
    WHERE CONTAINS(text, 'oracle', 1) &gt; 0;
</pre>
<p>The <code dir="ltr">CONTAINS</code> operator must be followed by an expression such as &gt; 0, which specifies that the score value calculated must be greater than zero for the row to be selected.</p>
<p>When the <code dir="ltr">SCORE</code> operator is called (for example, in a <code dir="ltr">SELECT</code> clause), the <code dir="ltr">CONTAINS</code> clause must reference the score label value as in the following example:</p>
<pre dir="ltr">
SELECT SCORE(1), title from newsindex 
     WHERE CONTAINS(text, 'oracle', 1) &gt; 0 ORDER BY SCORE(1) DESC;
</pre>
<p>The following example specifies that the query be parsed using the <code dir="ltr">CATSEARCH</code> grammar:</p>
<pre dir="ltr">
SELECT id FROM test WHERE CONTAINS (text,
 '&lt;query&gt;
   &lt;textquery lang="ENGLISH" grammar="CATSEARCH"&gt;
      cheap pokemon
   &lt;/textquery&gt;
   &lt;score datatype="INTEGER"/&gt;
  &lt;/query&gt;' ) &gt; 0;
</pre>
<p class="subhead1"><a id="CCREF23715"></a>Grammar Template Example</p>
<p>The following example shows how to use the <code dir="ltr">CTXCAT</code> grammar in a <code dir="ltr">CONTAINS</code> query. The example creates a <code dir="ltr">CTXCAT</code> and a <code dir="ltr">CONTEXT</code> index on the same table, and compares the query results.</p>
<pre dir="ltr">
PROMPT create context and ctxcat indexes, both using theme indexing
PROMPT
create index tdrbqcq101x on test(text) indextype is ctxsys.context
parameters ('lexer theme_lexer');

create index tdrbqcq101cx on test(text) indextype is ctxsys.ctxcat
parameters ('lexer theme_lexer');

PROMPT *****  San Diego             ***********
PROMPT *****  CONTEXT grammar       ***********
PROMPT ** should be interpreted as phrase query **
select pk||' ==&gt; '||text from test 
where contains(text,'San Diego')&gt;0
order by pk;

PROMPT *****  San Diego      ***********
PROMPT *****  CTXCAT grammar ***********
PROMPT ** should be interpreted as AND query  ***
select pk||' ==&gt; '||text from test 
where contains(text,
'&lt;query&gt; 
  &lt;textquery grammar="CTXCAT"&gt;San Diego&lt;/textquery&gt;
  &lt;score datatype="integer"/&gt;
&lt;/query&gt;')&gt;0
order by pk;

PROMPT *****  Hitlist from CTXCAT index ***********
select pk||' ==&gt; '||text from test 
where catsearch(text,'San Diego','')&gt;0
order by pk;
</pre>
<p class="subhead1"><a id="CCREF23716"></a>Alternate Scoring Query Template Example</p>
<p>The following query template adds price <code dir="ltr">SDATA</code> section (or <code dir="ltr">SDATA</code> filter-by column) value into the score returned by the query and uses it as the final score:</p>
<pre dir="ltr">
&lt;query&gt;
      &lt;textquery grammar="CONTEXT" lang="english"&gt;
             DEFINESCORE(dog, RELEVANCE) and cat
      &lt;/textquery&gt;
      &lt;score algorithm="COUNT" normalization_expr ="doc_score+SDATA(price)"/&gt;
&lt;/query&gt;
</pre>
<p class="subhead1"><a id="CCREF23717"></a>Query Relaxation Template Example</p>
<p>The following query template defines a query relaxation sequence. The query of <span class="italic">black pen</span> is entered in sequence as <span class="italic">black pen</span>, then <span class="italic">black NEAR pen</span>, then <span class="italic">black AND pen</span>, and then <span class="italic">black ACCUM pen</span>. Query hits are returned in this sequence with no duplication as long as the application requires results.</p>
<pre dir="ltr">
select id from docs where CONTAINS (text, '
&lt;query&gt;
   &lt;textquery lang="ENGLISH" grammar="CONTEXT"&gt;
     &lt;progression&gt;
       &lt;seq&gt;black pen&lt;/seq&gt;
       &lt;seq&gt;black NEAR pen&lt;/seq&gt;
       &lt;seq&gt;black AND pen&lt;/seq&gt;
       &lt;seq&gt;black ACCUM pen&lt;/seq&gt;
     &lt;/progression&gt;
   &lt;/textquery&gt;
   &lt;score datatype="INTEGER" algorithm="COUNT"/&gt;
&lt;/query&gt;')&gt;0;
</pre>
<p>Query relaxation is most effective when your application requires the top <span class="italic">n</span> hits to a query, which you can obtain with the <code dir="ltr">DOMAIN_INDEX_SORT</code> or <code dir="ltr">FIRST_ROWS</code> hint, which is being deprecated, in a PL/SQL cursor.</p>
<p class="subhead1"><a id="CCREF23718"></a>Query Rewrite Example</p>
<p>The following template defines a query rewrite sequence. The query of <span class="italic">kukui nut</span> is rewritten as follows:</p>
<p>{kukui} {nut}</p>
<p>{kukui} ; {nut}</p>
<p>{kukui} AND {nut}</p>
<p>{kukui} ACCUM {nut}</p>
<pre dir="ltr">
select id from docs where CONTAINS (text, '
 &lt;query&gt;
   &lt;textquery lang="ENGLISH" grammar="CONTEXT"&gt; kukui nut
     &lt;progression&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, "{", "}", " "))&lt;/rewrite&gt;&lt;/seq&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, "{", "}", " ; "))&lt;/rewrite&gt;/seq&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, "{", "}", "AND"))&lt;/rewrite&gt;&lt;seq/&gt;
       &lt;seq&gt;&lt;rewrite&gt;transform((TOKENS, "{", "}", "ACCUM"))&lt;/rewrite&gt;&lt;seq/&gt;
     &lt;/progression&gt;
   &lt;/textquery&gt;
  &lt;score datatype="INTEGER" algorithm="COUNT"/&gt;
&lt;/query&gt;')&gt;0;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref116"></a>Notes</p>
<p class="subhead1"><a id="CCREF23719"></a>Querying Multilanguage Tables<a id="sthref117"></a></p>
<p>With the multilexer preference, you can create indexes from multilanguage tables. At query time, the multilexer examines the session's language setting and uses the sublexer preference for that language to parse the query. If the language setting is not mapped, then the default lexer is used.</p>
<p>When the language setting is mapped, the query is parsed and run as usual. The index contains tokens from multiple languages, so such a query can return documents in several languages.</p>
<p>To limit your query to returning documents of a given language, use a structured clause on the language column.</p>
<p class="subhead1"><a id="i997611"></a><a id="CCREF23720"></a>Query Performance Limitation with a Partitioned Index</p>
<p>Oracle Text supports the <code dir="ltr">CONTEXT</code> indexing and querying of a partitioned text table.</p>
<p>However, for optimal performance when querying a partitioned table with an <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> <code dir="ltr">SCORE</code> clause, query the partition. If you query the entire table and use an <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> <code dir="ltr">SCORE</code> clause, the query might not perform optimally unless you include a range predicate that can limit the query to a single partition.</p>
<p>For example, the following statement queries the partition <code dir="ltr">p_tab4</code> partition directly:</p>
<pre dir="ltr">
select * from part_tab partition (p_tab4) where contains(b,'oracle') &gt; 0 ORDER BY
SCORE DESC;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref118"></a>Related Topics</p>
<p><a href="#i997737">"Syntax for CONTEXT Index Type"</a></p>
<p><a href="cqoper.htm#CHDEGDDF">Chapter 3, "Oracle Text CONTAINS Query Operators"</a></p>
<p>"The CONTEXT Grammar" topic in <a class="olink CCAPP" href="../e24435/toc.htm"><span class="italic">Oracle Text Application Developer's Guide</span></a></p>
<p><a href="#i998514">"SCORE"</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i997677"></a>
<div id="CCREF0105" class="refsect1">
<h2 class="refsect1">CREATE INDEX<a id="sthref119"></a><a id="sthref120"></a><a id="sthref121"></a><a id="sthref122"></a><a id="sthref123"></a></h2>
<p>This section describes the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> statement as it pertains to creating an Oracle Text domain index and composite domain index.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
"<a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for a complete description of the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> statement</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref124"></a>Purpose</p>
<p>Use <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> to create an Oracle Text index. An Oracle Text index is an Oracle Database <a id="sthref125"></a>domain index or composite domain index of type <code dir="ltr">CONTEXT</code>, <code dir="ltr">CTXCAT,</code> <code dir="ltr">CTXRULE,</code> or <code dir="ltr">CTXXPATH</code>. A domain index is an application-specific index. A <a id="sthref126"></a>composite domain index (CDI) is an Oracle Text index that not only indexes and processes a specified text column, but also indexes and processes <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> and <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> structured columns, which are specified during index creation.</p>
<p>You must create an appropriate Oracle Text index to enter <code dir="ltr">CONTAINS</code>, <code dir="ltr">CATSEARCH</code>, or <code dir="ltr">MATCHES</code> queries.</p>
<p>You cannot create an Oracle Text index on an index-organized table<a id="sthref127"></a>.</p>
<p>You can create the following types of Oracle Text indexes.</p>
<p class="subhead1"><a id="CCREF23721"></a>CONTEXT<a id="sthref128"></a></p>
<p>A <code dir="ltr">CONTEXT</code> index is the basic type of Oracle Text index. This is an index on a text column. A <code dir="ltr">CONTEXT</code> index is useful when your source text consists of many large, coherent documents. Query this index with the <code dir="ltr">CONTAINS</code> operator in the <code dir="ltr">WHERE</code> clause of a <code dir="ltr">SELECT</code> statement. This index requires manual synchronization after DML. See <a href="#i997737">"Syntax for CONTEXT Index Type"</a>.</p>
<p class="subhead1"><a id="i999894"></a><a id="CCREF23722"></a><span class="bold"><a id="sthref129"></a>CTXCAT</span></p>
<p>The <code dir="ltr">CTXCAT</code> index is a combined index on a text column and one or more other columns. The <code dir="ltr">CTXCAT</code> type is typically used to index small documents or text fragments, such as item names, prices, and descriptions found in catalogs. Query this index with the <code dir="ltr">CATSEARCH</code> operator in the <code dir="ltr">WHERE</code> clause of a <code dir="ltr">SELECT</code> statement. This type of index is optimized for mixed queries. This index is transactional, automatically updating itself with DML to the base table. See <a href="#i998134">"Syntax for CTXCAT Index Type"</a>.</p>
<p class="subhead1"><a id="CCREF23723"></a><span class="bold"><a id="sthref130"></a>CTXRULE</span></p>
<p>A <code dir="ltr">CTXRULE</code> index is used to build a document classification application. The <code dir="ltr">CTXRULE</code> index is an index created on a table of queries or a column containing a set of queries, where the queries serve as rules to define the classification criteria. Query this index with the <code dir="ltr">MATCHES</code> operator in the <code dir="ltr">WHERE</code> clause of a <code dir="ltr">SELECT</code> statement. See <a href="#i1002072">"Syntax for CTXRULE Index Type"</a>.</p>
<p class="subhead1"><a id="CCREF23724"></a><span class="bold"><a id="sthref131"></a>CTXXPATH</span></p>
<p>The <code dir="ltr">CTXPATH</code> index is used to speed up <code dir="ltr">existsNode()</code> queries on an <code dir="ltr">XMLType</code> column. See <a href="#i998344">"Syntax for CTXXPATH Index Type"</a>.</p>
<p class="subhead1"><a id="CCREF23725"></a>Required Privileges<a id="sthref132"></a></p>
<p>You do not need the <code dir="ltr">CTXAPP</code> role to create an Oracle Text index. If you have Oracle Database grants to create a B-tree index on the text column, you have sufficient privilege to create a text index. The issuing owner, table owner, and index owner can all be different users, which is consistent with Oracle standards for creating regular B-tree indexes.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997737"></a>Syntax for CONTEXT Index Type<a id="sthref133"></a><a id="sthref134"></a></p>
<p>Uses a <code dir="ltr">CONTEXT</code> index to create an index on a text column. Query this index with the <code dir="ltr">CONTAINS</code> operator in the <code dir="ltr">WHERE</code> clause of a <code dir="ltr">SELECT</code> statement. This index requires manual synchronization after DML.</p>
<pre dir="ltr">
CREATE INDEX [<span class="variable">schema</span>.]<span class="variable">index</span> ON [<span class="variable">schema</span>.]<span class="variable">table</span>(<span class="italic">txt_column</span>)
  INDEXTYPE IS ctxsys.context [ONLINE]
  [FILTER BY <span class="italic">filter_column</span>[, <span class="italic">filter_column</span>]...]
  [ORDER BY <span class="italic">oby_column</span>[desc|asc][, <span class="italic">oby_column</span>[desc|asc]]...]
  [LOCAL [(PARTITION [<span class="italic">partition</span>] [PARAMETERS('<span class="italic">paramstring</span>')]
</pre>
<pre dir="ltr">
  [, PARTITION [<span class="italic">partition</span>] [PARAMETERS('<span class="italic">paramstring</span>')]])]
</pre>
<pre dir="ltr">
  [PARAMETERS(<span class="variable">paramstring</span>)] [PARALLEL n] [UNUSABLE]];
</pre>
<dl>
<dt>[<span class="variable">schema</span>.]<span class="variable">index</span></dt>
<dd>
<p>Specifies the name of the Text index to create.</p>
</dd>
<dt>[<span class="variable">schema</span>.]<span class="variable">table</span>(<span class="variable">txt_column</span>)</dt>
<dd>
<p>Specifies the name of the table and column to index. <code dir="ltr">txt_column</code> is the name of the domain index column on which the <code dir="ltr">CONTAINS()</code> operator will be invoked.</p>
<p>Your table can optionally contain a primary key if you prefer to identify your rows as such when you use procedures in <code dir="ltr">CTX_DOC</code>. When your table has no primary key, document services identifies your documents by <code dir="ltr">ROWID</code>.</p>
<p><a id="sthref135"></a><a id="sthref136"></a><a id="sthref137"></a><a id="sthref138"></a><a id="sthref139"></a><a id="sthref140"></a><a id="sthref141"></a><a id="sthref142"></a>The column that you specify must be one of the following types: <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">BLOB</code>, <code dir="ltr">CLOB</code>, <code dir="ltr">BFILE</code>, <code dir="ltr">XMLType</code>, or <code dir="ltr">URIType</code>.</p>
<p>The table that you specify can be a partitioned table. If you do not specify the <code dir="ltr">LOCAL</code> clause, then a global, nonpartitioned index is created.</p>
<p>The <code dir="ltr"><a id="sthref143"></a><a id="sthref144"></a>DATE</code>, <code dir="ltr">NUMBER</code>, and nested table columns cannot be indexed. Object columns also cannot be indexed, but their attributes can be indexed, provided that they are atomic data types.</p>
<p>Attempting to create an index on a Virtual Private Database (VPD) protected table will fail unless one of the following criteria is true:</p>
</dd>
</dl>
<ul>
<li>
<p>The VPD policy is created such that it does not apply to the <code dir="ltr">INDEX</code> statement type.</p>
</li>
<li>
<p>The policy function returns a <code dir="ltr">NULL</code> predicate for the current user.</p>
</li>
<li>
<p>The user (or index owner) is <code dir="ltr">SYS</code>.</p>
</li>
<li>
<p>The user has the <code dir="ltr">EXEMPT</code> <code dir="ltr">ACCESS</code> <code dir="ltr">POLICY</code> privilege.</p>
</li>
</ul>
<p>Indexes on multiple columns are not supported with the <code dir="ltr">CONTEXT</code> index type. You must specify only one column in the column list.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
With the <code dir="ltr">CTXCAT</code> index type, you can create indexes on text and structured columns. See <a href="#i998134">"Syntax for CTXCAT Index Type"</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
Because a transparent data encryption-enabled column does not support domain indexes, it cannot be used with Oracle Text. However, you can create an Oracle Text index on a column in a table stored in a TDE-enabled tablespace.</div>
<dl>
<dt><a id="sthref145"></a>ONLINE</dt>
<dd>
<p>Creates the index while enabling DML insertions/updates/deletions on the base table.</p>
<p>During indexing, Oracle Text enqueues DML requests in a pending queue. At the end of the index creation, Oracle Text locks the base table. During this time, DML is blocked. You must synchronize the index in order for DML changes to be available.</p>
</dd>
</dl>
<p class="subhead2"><a id="CCREF23726"></a>Limitations</p>
<p>The following limitations apply to using <code dir="ltr">ONLINE</code>:</p>
<ul>
<li>
<p>At the very beginning or very end of the <code dir="ltr">ONLINE</code> process, DML might fail.</p>
</li>
<li>
<p><code dir="ltr">ONLINE</code> is supported for <code dir="ltr">CONTEXT</code> indexes only.</p>
</li>
</ul>
<dl>
<dt><a id="sthref146"></a>FILTER BY filter_column</dt>
<dd>
<p>This is the structured indexed column on which a range or equality predicate in the <code dir="ltr">WHERE</code> clause of a mixed query will operate. You can specify one or more structured columns for <code dir="ltr">filter_column</code>, on which the relational predicates are expected to be specified along with the <code dir="ltr">CONTAINS()</code> predicate in a query.</p>
<p>The cost-based optimizer (CBO) will consider pushing down the structured predicates on these <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> columns with the following relational operators: <code dir="ltr">&lt;</code>, <code dir="ltr">&lt;=</code>, <code dir="ltr">=</code>, <code dir="ltr">&gt;=</code>, <code dir="ltr">&gt;</code>, <code dir="ltr">between</code>, and <code dir="ltr">LIKE</code> (for <code dir="ltr">VARCHAR2</code>).</p>
<p>These columns can only be of <code dir="ltr">CHAR</code>, <code dir="ltr">NUMBER</code>, <code dir="ltr">DATE</code>, <code dir="ltr">VARCHAR2</code>, or <code dir="ltr">RAW</code> type. Additionally, <code dir="ltr">VARCHAR2</code> and <code dir="ltr">RAW</code> types are supported only if the maximum length is specified and is limited to no more than <code dir="ltr">249</code>. The <code dir="ltr">ADT</code> attributes of supported types (<code dir="ltr">CHAR</code>, <code dir="ltr">NUMBER</code>, <code dir="ltr">DATE</code>, <code dir="ltr">VARCHAR2</code>, or <code dir="ltr">RAW</code>) are also allowed. An error is raised for all other data types. Expressions, for example, <code dir="ltr">func(cola)</code>, and virtual columns are not allowed.</p>
<p><code dir="ltr">txt_column</code> is allowed in the <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> column list.</p>
<p>DML operations on <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> columns are always transactional.</p>
</dd>
</dl>
<dl>
<dt><a id="sthref147"></a>ORDER BY oby_column</dt>
<dd>
<p>This is the structured indexed column on which a structured <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> mixed query will be based. A list of structured <span class="italic">oby_columns</span> can be specified in the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause of a <code dir="ltr">CONTAINS()</code> query.</p>
<p>These columns can only be of <code dir="ltr">CHAR</code>, <code dir="ltr">NUMBER</code>, <code dir="ltr">DATE</code>, <code dir="ltr">VARCHAR2</code>, or <code dir="ltr">RAW</code> type. Additionally, <code dir="ltr">VARCHAR2</code> and <code dir="ltr">RAW</code> types are supported only if the maximum length is specified and is limited to no more than <code dir="ltr">249</code>. Expressions, for example, <code dir="ltr">func(cola)</code>, and virtual columns are not allowed.</p>
<p>The order of the specified columns matters. The cost-based optimizer will consider pushing the sort into the composite domain index only if the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause in the text query contains:</p>
<ul>
<li>
<p>Entire ordered <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> columns declared by the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause during <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code>,</p>
</li>
<li>
<p>CBO will consider pushing the sort into the CDI only if the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause in the text query contains:</p>
<ul>
<li>
<p>Entire ordered <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> columns declared by the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause during the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> statement</p>
</li>
<li>
<p>Only the prefix of the ordered <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> columns declared by the <code dir="ltr">ORDER</code> BY clause during the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> statement</p>
</li>
<li>
<p>The score followed by the prefix of the ordered <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> columns declared by the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause during the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> statement</p>
</li>
<li>
<p>The score following the prefix of the ordered <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> columns declared by the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause during the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> statement</p>
</li>
</ul>
<p>The following example illustrates CBO behavior with regard to <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> columns:</p>
<pre dir="ltr">
CREATE INDEX foox ON foo(D) INDEXTYPE IS CTXSYS.CONTEXT
FILTER BY B, C
ORDER BY A, B desc;
</pre>
<p>Consider the following query:</p>
<pre dir="ltr">
SELECT A, SCORE(1) FROM foo WHERE CONTAINS(D, 'oracle',1)&gt;0 
AND C&gt;100 ORDER BY col_list;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you set <code dir="ltr">NLS_SORT</code> or <code dir="ltr">NLS_COMP</code> parameters (that is, <code dir="ltr">alter session set NLS_SORT = &lt;some lang&gt;;</code> ), then CBO will not push the sort or related structured predicate into the CDI. This behavior is consistent with regular B-tree indexes.</div>
<p>CBO will consider pushing the sort into CDI if <code dir="ltr">col_list</code> has the following values:</p>
<pre dir="ltr">
A
A, B desc
SCORE(1), A
SCORE(1), A, B desc
A, SCORE(1)
A, B desc, SCORE(1)
</pre>
<p>CBO will not consider to push the sort into CDI if <code dir="ltr">col_list</code> has the following values:</p>
<pre dir="ltr">
B
B,A
SCORE(1), B
B, SCORE(1)
A, B, C
A, B asc (or simply A, B)
</pre>
<p>(or simply <code dir="ltr">A</code>, <code dir="ltr">B</code>)</p>
</li>
<li>
<p><code dir="ltr">score</code> followed by the prefix of the ordered <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> columns declared by the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause during the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> statement.</p>
</li>
<li>
<p>The <code dir="ltr">score</code> following the prefix of the ordered <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> columns declared by the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause during the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> statement.</p>
</li>
</ul>
<p>Expressions, for example, <code dir="ltr">func(cola)</code>, are not allowed.</p>
<p><code dir="ltr">txt_column</code> appearing in the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> column list is allowed.</p>
<p>DML operations on <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> columns are always transactional.</p>
</dd>
</dl>
<p class="subhead2"><a id="CCREF23727"></a>Limitations</p>
<p>The following limitations apply to <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> and <code dir="ltr">ORDER</code> <code dir="ltr">BY</code>:</p>
<ul>
<li>
<p>A structured column is allowed in <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> and <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clauses. However, a column that is mapped to <code dir="ltr">MDATA</code> in a <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> clause cannot also appear in the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause. An error will be raised in this case.</p>
</li>
<li>
<p>The maximum length for <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, and <code dir="ltr">RAW</code> columns cannot be greater than 249. Additionally, if the <code dir="ltr">VARCHAR2</code> or <code dir="ltr">RAW</code> column is mapped to an <code dir="ltr">MDATA</code> column, then the specified maximum length cannot exceed 64 and 32 bytes, respectively. (Note that <code dir="ltr">MDATA</code> does not support <code dir="ltr">CHAR</code> data types. If a <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> column of <code dir="ltr">CHAR</code> data type is mapped to an <code dir="ltr">MDATA</code> section, then an error will be raised during the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> statement.)</p>
</li>
<li>
<p>The sum of the numbers for <code dir="ltr">INDEXED_COLUMN</code>, <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> columns, and <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> columns cannot be greater than 32.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>As with concatenated B-tree indexes or bitmap indexes, performance degradation may occur in DML as the number of <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> and <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> columns increases.</p>
</li>
<li>
<p>Mapping a <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> column to <code dir="ltr">MDATA</code> is not recommended if the <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> column contains sequential values or has very high cardinality. Doing so can result in a very long and narrow <code dir="ltr">$I</code> table and reduced <code dir="ltr">$X</code> performance. An example is a column of type <code dir="ltr">DATE</code>. For columns of this type, mapping to <code dir="ltr">SDATA</code> is recommended.</p>
</li>
</ul>
</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
An index table with the name <code dir="ltr">DR$</code><span class="italic">indextable</span><code dir="ltr">$S</code> is created to store <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> and <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> columns that are mapped to <code dir="ltr">SDATA</code> sections. If nothing is mapped to an <code dir="ltr">SDATA</code> section, then the <code dir="ltr">$S</code> table will not be created.
<p><code dir="ltr">$S</code> table contains the following columns:</p>
<ul>
<li>
<p><code dir="ltr">SDATA_ID</code> <span class="italic">number</span> is the internal <code dir="ltr">SDATA</code> section ID.</p>
</li>
<li>
<p><code dir="ltr">SDATA_LAST</code> <span class="italic">number</span>, the last document ID, which is analogous to <code dir="ltr">token_last</code>.</p>
</li>
<li>
<p><code dir="ltr">SDATA_DATA</code> <code dir="ltr">RAW</code><code dir="ltr">(2000)</code>, the compressed <code dir="ltr">SDATA</code> values. Note that if <code dir="ltr">$S</code> is created on a tablespace with 4K database block size, then it will be defined as <code dir="ltr">RAW</code><code dir="ltr">(1500)</code>.</p>
</li>
</ul>
<p><span class="bold">Restriction:</span> For performance reasons, <code dir="ltr">$S</code> table must be created on a tablespace with db block size &gt;= 4K without overflow segment and without <code dir="ltr">PCTTHRESHOLD</code> clause. If <code dir="ltr">$S</code> is created on a tablespace with db block size &lt; 4K, or is created with an overflow segment or with a <code dir="ltr">PCTTHRESHOLD</code> clause, then appropriate errors will be raised during the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> statement.</p>
</div>
<p>Restrictions on exporting and importing text tables with composite domain index created with <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> and/or <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clauses are as follows:</p>
<ul>
<li>
<p>Regular <code dir="ltr">exp</code> and <code dir="ltr">imp</code> will not support exporting and importing of composite domain index. Doing so will lead to the following error: <code dir="ltr">EXP-00113: Feature Composite Domain Index is unsupported</code>.</p>
</li>
<li>
<p>To export a text table with composite domain index, you must use Data Pump Export and Import utilities (invoked with the <code dir="ltr">expdp</code> and <code dir="ltr">impdp</code> commands, respectively), or <code dir="ltr">DBMS_DATAPUMP</code> PL/SQL package.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="cddlpkg.htm#CEGFAEJJ">ADD_SDATA_COLUMN</a> in <a href="cddlpkg.htm#g1014415">Chapter 7, "CTX_DDL Package"</a></div>
<p>Limitations of using <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> and <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> with <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> and <code dir="ltr">ORDER</code> BY columns of the composite domain index, which are imposed by Extensible Indexing Framework in Oracle Database:</p>
<p><a id="sthref148"></a>(These limitations are imposed by Extensible Indexing Framework in Oracle Database.)</p>
<ul>
<li>
<p>Using <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> to add or drop <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> and <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> columns is currently not supported. You must re-create the index to add or drop <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> or <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> columns.</p>
</li>
<li>
<p>To use <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> <code dir="ltr">MODIFY</code> <code dir="ltr">COLUMN</code> to modify the datatype of a column that has the composite domain index built on it, you must first drop the composite domain index before modifying the column.</p>
</li>
<li>
<p>To use <code dir="ltr">ALTER</code> <code dir="ltr">TABLE</code> <code dir="ltr">DROP</code> <code dir="ltr">COLUMN</code> to drop a column that is part of the composite domain index, you must first drop the composite domain index before dropping the index column.</p>
</li>
</ul>
<p><a id="sthref149"></a>The following limitations apply to <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> and <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> when used with PL/SQL packages:</p>
<ul>
<li>
<p>Mapping <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> columns to sections is optional. If section mapping does not exist for a <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> column, then it is mapped to an <code dir="ltr">SDATA</code> section by default. The section name assumes the name of the <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> column.</p>
</li>
<li>
<p>If a section group is not specified during the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> clause of a composite domain index, then system default section group settings are used. An <code dir="ltr">SDATA</code> section is created for each of the <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> and <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> columns.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Because a section name does not allow certain special characters and is case-insensitive, if the column name is case-sensitive or contains special characters, then an error will be raised. To work around this problem, you must map the column to an <code dir="ltr">MDATA</code> or <code dir="ltr">SDATA</code> section before creating the index. See CTX_DDL.<a href="cddlpkg.htm#CEGCABJJ">ADD_MDATA_COLUMN</a> or CTX_DDL.<a href="cddlpkg.htm#CEGFAEJJ">ADD_SDATA_COLUMN</a>.</div>
</li>
<li>
<p>An error is raised if a column that is mapped to an <code dir="ltr">MDATA</code> section also appears in the <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> column clause.</p>
</li>
<li>
<p>Column section names are unique to their section group. That is, you cannot have an <code dir="ltr">MDATA</code> column section named <code dir="ltr">FOO</code> if you already have an <code dir="ltr">MDATA</code> column section named <code dir="ltr">FOO</code>. Nor can you have a field section named <code dir="ltr">FOO</code> if you already have an <code dir="ltr">SDATA</code> column section named <code dir="ltr">FOO</code>. This is true whether it is implicitly created (by <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> for <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> or <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clauses) or explicitly created (by <code dir="ltr">CTX_DDL.ADD_SDATA_COLUMN</code>).</p>
</li>
<li>
<p>One section name can be mapped to only one <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> column, and vice versa. Mapping a section to more than one column, or mapping a column to more than one section is not allowed.</p>
</li>
<li>
<p>Column sections can be added to any type of section group, including the <code dir="ltr">NULL</code> section group.</p>
</li>
<li>
<p>If a section group with sections added by the <code dir="ltr">CTX_DDL.ADD_MDATA_COLUMN</code> or <code dir="ltr">CTX_DDL.ADD_SDATA_COLUMN</code> packages is specified for a <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> statement without a <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> clause, then the mapped column sections will be ignored. However, the index will still get created without those column sections. The same is true for a <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> clause that does not contain mapped columns in the specified section group.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
CTX_DDL.<a href="cddlpkg.htm#CEGFAEJJ">ADD_SDATA_COLUMN</a></div>
<dl>
<dt><a id="sthref150"></a><a id="sthref151"></a>LOCAL [(PARTITION [<span class="italic">partition</span>] [PARAMETERS('<span class="italic">paramstring</span>')]</dt>
<dd>
<p>Specifies a local partitioned context index on a partitioned table. The partitioned table must be partitioned by range. Hash, composite, and list partitions are not supported.</p>
<p>You can specify the list of index partition names with <span class="italic">partition_name</span>. If you do not specify a partition name, then the system assigns one. The order of the index partition list must correspond to the table partition order.</p>
<p>The <code dir="ltr">PARAMETERS</code> clause associated with each partition specifies the parameters string specific to that partition. You can only specify <span class="italic">sync (manual|every |on commit)</span>, <span class="italic">memory</span> and <span class="italic">storage</span> for each index partition.</p>
<p>The <code dir="ltr">PARAMETERS</code> clause also supports the <code dir="ltr">POPULATE</code> and <code dir="ltr">NOPOPULATE</code> arguments. See <a href="#BJEHFDFH">"POPULATE | NOPOPULATE"</a>.</p>
<p>Query the views <a href="aviews.htm#i16446">CTX_INDEX_PARTITIONS</a> or <a href="aviews.htm#i16448">CTX_USER_INDEX_PARTITIONS</a> to find out index partition information, such as index partition name, and index partition status.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1000586">"Creating a Local Partitioned Index"</a></div>
</dd>
</dl>
<p class="subhead2"><a id="CCREF23728"></a>Query Performance Limitation with Partitioned Index</p>
<p>For optimal performance when querying a partitioned index with an <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> <code dir="ltr">SCORE</code> clause, query the partition. If you query the entire table and use an <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> <code dir="ltr">SCORE</code> clause, the query might not perform optimally unless you include a range predicate that can limit the query to the fewest number of partitions, which is optimally a single partition.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i997611">"Query Performance Limitation with a Partitioned Index"</a></div>
<dl>
<dt><a id="sthref152"></a><a id="sthref153"></a><a id="sthref154"></a>PARALLEL n<a id="sthref155"></a><a id="sthref156"></a><a id="sthref157"></a></dt>
<dd>
<p>Optionally specifies the parallel degree for parallel indexing. The actual degree of parallelism might be smaller depending on your resources. You can use this parameter on nonpartitioned tables. However, creating a nonpartitioned index in parallel does not turn on parallel query processing. Parallel indexing is supported for creating a local partitioned index.</p>
<p>The indexing memory size specified in the parameter clause applies to each parallel slave. For example, if indexing memory size is specified in the parameter clause as 500M and parallel degree is specified as 2, then you must ensure that there is at least 1GB of memory available for indexing.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i998082">"Parallel Indexing"</a></p>
</li>
<li>
<p><a href="#i998102">"Creating a Local Partitioned Index in Parallel"</a></p>
</li>
<li>
<p>The "Performance Tuning" chapter in <a class="olink CCAPP0500" href="../../text.112/e24435/aoptim.htm#CCAPP0500"><span class="italic">Oracle Text Application Developer's Guide</span></a></p>
</li>
</ul>
</div>
</dd>
</dl>
<p class="subhead2"><a id="CCREF23729"></a>Performance</p>
<p>Parallel indexing can speed up indexing when you have large amounts of data to index and when your operating system supports multiple CPUs.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Using <code dir="ltr">PARALLEL</code> to create a local partitioned index that enables parallel queries. (Creating a nonpartitioned index in parallel does not turn on parallel query processing.)
<p>Parallel querying degrades query throughput especially on heavily loaded systems. Because of this, Oracle recommends that you disable parallel querying after creating a local index. To do so, use the <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> <code dir="ltr">NOPARALLEL</code> statement.</p>
<p>For more information on parallel querying, see the "Performance Tuning" chapter in <a class="olink CCAPP0500" href="../../text.112/e24435/aoptim.htm#CCAPP0500"><span class="italic">Oracle Text Application Developer's Guide</span></a>.</p>
</div>
<p class="subhead2"><a id="CCREF23730"></a>Limitations</p>
<p>Parallel indexing is supported only for the <code dir="ltr">CONTEXT</code> index type.</p>
<dl>
<dt>UNUSABLE</dt>
<dd>
<p>Creates an unusable index. This creates index metadata only and exits immediately.</p>
<p>You might create an unusable index when you need to create a local partitioned index in parallel.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i998102">"Creating a Local Partitioned Index in Parallel"</a></div>
</dd>
<dt><a id="sthref158"></a>PARAMETERS(<span class="italic">paramstring</span>)</dt>
<dd>
<p>Optionally specify indexing parameters in <code dir="ltr">paramstring</code>. You can specify preferences owned by another user using the <code dir="ltr">user.preference</code> notation.</p>
<p>The syntax for <code dir="ltr">paramstring</code> is as follows:</p>
<pre dir="ltr">
paramstring = 
</pre>
<pre dir="ltr">
'[DATASTORE <span class="variable">datastore_pref</span>] 
 [FILTER <span class="variable">filter_pref</span>] 
 [CHARSET COLUMN <span class="italic">charset_column_name</span>]  
 [FORMAT COLUMN <span class="italic">format_column_name</span>]

 [LEXER <span class="variable">lexer_pref</span>]
 [LANGUAGE COLUMN <span class="italic">language_column_name</span>] 

 [WORDLIST <span class="variable">wordlist_pref</span>] 
 [STORAGE <span class="variable">storage_pref</span>] 
 [STOPLIST <span class="variable">stoplist</span>] 
 [SECTION GROUP <span class="variable">section_group</span>]
 [MEMORY <span class="variable">memsize</span>]
 [POPULATE | NOPOPULATE]
 [SYNC (MANUAL | EVERY "<span class="variable">interval-string</span>" | ON COMMIT)]
 [TRANSACTIONAL]'
</pre>
<pre dir="ltr">
</pre>
<p>Create datastore, filter, lexer, wordlist, and storage preferences with CTX_DDL.<a href="cddlpkg.htm#i997746">CREATE_PREFERENCE</a> and then specify them in the paramstring.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you specify no paramstring, Oracle Text uses the system defaults.
<p>For more information about these defaults, see <a href="cdatadic.htm#i1009891">"Default Index Parameters"</a>.</p>
</div>
</dd>
<dt>DATASTORE <span class="italic">datastore_pref</span></dt>
<dd>
<p>Specifies the name of your datastore preference. Use the datastore preference to specify where your text is stored.See <a href="cdatadic.htm#i1006307">"Datastore Types"</a>.</p>
</dd>
<dt>FILTER <span class="italic">filter_pref</span></dt>
<dd>
<p>Specifies the name of your filter preference. Use the filter preference to specify how to filter formatted documents to plain text or HTML. See <a href="cdatadic.htm#i1007013">"Filter Types"</a>.</p>
</dd>
<dt><a id="sthref159"></a>CHARSET COLUMN <span class="italic">charset_column_name</span></dt>
<dd>
<p>Specifies the name of the character set column. This column must be in the same table as the text column, and it must be of type <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR</code>, or <code dir="ltr">VARCHAR2</code>. Use this column to specify the document character set for conversion to the database character set. The value is case-insensitive. You must specify a globalization support character set string, such as JA16EUC.</p>
<p>When the document is plain text or HTML, the <code dir="ltr">AUTO_FILTER</code> and <code dir="ltr">CHARSET</code> filters use this column to convert the document character set to the database character set for indexing.</p>
<p>Use this column when you have plain text or HTML documents with different character sets or in a character set different from the database character set.</p>
<p>Setting <code dir="ltr">NLS_LENGTH_SEMANTICS</code> parameter to <code dir="ltr">CHAR</code> is not supported at the database level. This parameter is supported for the following columns:</p>
<ul>
<li>
<p>The <code dir="ltr">CHARSET</code> <code dir="ltr">COLUMN</code>, for example:</p>
<pre dir="ltr">
VARCHAR2 &lt;<span class="italic">size</span>&gt; CHAR
CHAR &lt;<span class="italic">size</span>&gt; CHAR
</pre></li>
<li>
<p>An index created on a <code dir="ltr">VARCHAR2</code> and <code dir="ltr">CHAR</code> column</p>
</li>
<li>
<p><code dir="ltr">VARCHAR2</code> and <code dir="ltr">CHAR</code> columns for <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> and <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clauses of <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code></p>
</li>
<li>
<p><code dir="ltr">FORMAT</code> <code dir="ltr">COLUMN</code></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Documents are not marked for re-indexing when only the character set column changes. The indexed column must be updated to flag the re-index.</p>
</li>
<li>
<p>The <a id="sthref160"></a><code dir="ltr">NLS_LENGTH_SEMANTICS = CHAR</code> parameter is supported at the column level only, and is not supported at the database level, as described in this section.</p>
</li>
</ul>
</div>
</dd>
<dt><a id="sthref161"></a><a id="sthref162"></a><a id="sthref163"></a><a id="sthref164"></a>FORMAT COLUMN <span class="italic">format_column_name</span></dt>
<dd>
<p>Specifies the name of the format column. The format column must be in the same table as the text column and it must be <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR</code>, or <code dir="ltr">VARCHAR2</code> type.</p>
<p><code dir="ltr">FORMAT COLUMN</code> determines how a document is filtered, or, in the case of the <code dir="ltr">IGNORE</code> value, if it is to be indexed.</p>
<p><code dir="ltr">AUTO_FILTER</code> uses the format column when filtering documents. Use this column with heterogeneous document sets to optionally bypass filtering for plain text or HTML documents.</p>
<p>In the format column, you can specify one of the following options:</p>
</dd>
</dl>
<ul>
<li>
<p><code dir="ltr">TEXT</code></p>
</li>
<li>
<p><code dir="ltr">BINARY</code></p>
</li>
<li>
<p><code dir="ltr">IGNORE</code></p>
</li>
</ul>
<p>The <code dir="ltr">TEXT</code> option indicates that the document is either plain text or HTML. When <code dir="ltr">TEXT</code> is specified, the document is not filtered, but may have the character set converted.</p>
<p>The <code dir="ltr">BINARY</code> option indicates that the document is a format supported by the <code dir="ltr">AUTO_FILTER</code> object other than plain text or HTML, for example PDF. <code dir="ltr">BINARY</code> is the default, if the format column entry cannot be mapped.</p>
<p>The <code dir="ltr">IGNORE</code> option indicates that the row is to be ignored during indexing. Use this value when you need to bypass rows that contain data incompatible with text indexing such as image data, or rows in languages that you do not want to process. The difference between documents with <code dir="ltr">TEXT</code> and <code dir="ltr">IGNORE</code> format column types is that the former are indexed but ignored by the filter, while the latter are not indexed at all. Thus, <code dir="ltr">IGNORE</code> can be used with any filter type.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Documents are not marked for re-indexing when only the format column changes. The indexed column must be updated to flag the re-index.</div>
<dl>
<dt>LEXER <span class="italic">lexer_pref</span></dt>
<dd>
<p>Specifies the name of your lexer or multilexer preference. Use the lexer preference to identify the language of your text and how text is tokenized for indexing. See <a href="cdatadic.htm#i1007538">"Lexer Types"</a>.</p>
</dd>
<dt><a id="sthref165"></a>LANGUAGE COLUMN <span class="italic">language_column_name</span></dt>
<dd>
<p>Specifies the name of the language column when using a multi-lexer preference. See <a href="cdatadic.htm#i1007955">"MULTI_LEXER"</a>.</p>
<p>This column must exist in the base table. It cannot be the same column as the indexed column. Only the first 30 bytes of the language column are examined for language identification.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Documents are not marked for re-indexing when only the language column changes. The indexed column must be updated to flag the re-index.</div>
</dd>
<dt>WORDLIST <span class="italic">wordlist_pref</span></dt>
<dd>
<p>Specifies the name of your wordlist preference. Use the wordlist preference to enable features such as fuzzy, stemming, and prefix indexing for better wildcard searching. See <a href="cdatadic.htm#i1008929">"Wordlist Type"</a>.</p>
</dd>
<dt>STORAGE <span class="italic">storage_pref</span></dt>
<dd>
<p>Specifies the name of your storage preference for the Text index. Use the storage preference to specify how the index tables are stored. See <a href="cdatadic.htm#i1009245">"Storage Types"</a>.</p>
</dd>
<dt>STOPLIST <span class="italic">stoplist</span></dt>
<dd>
<p>Specifies the name of your stoplist. Use stoplist to identify words that are not to be indexed. See CTX_DDL.<a href="cddlpkg.htm#i998026">CREATE_STOPLIST</a>.</p>
</dd>
<dt>SECTION GROUP <span class="italic">section_group</span></dt>
<dd>
<p>Specifies the name of your section group. Use section groups to create searchable sections in structured documents. See CTX_DDL.<a href="cddlpkg.htm#i997893">CREATE_SECTION_GROUP</a>.</p>
</dd>
<dt>MEMORY <span class="italic">memsize<a id="sthref166"></a></span></dt>
<dd>
<p>Specifies the amount of run-time memory to use for indexing. The syntax for <span class="syntaxinline">memsize</span> is as follows:</p>
<pre dir="ltr">
memsize = <span class="variable">number</span>[K|M|G]
</pre>
<p>K stands for kilobytes, M stands for megabytes, and G stands for gigabytes.</p>
<p>The value you specify for <code dir="ltr">memsize</code> must be between 1M and the value of <code dir="ltr">MAX_INDEX_MEMORY</code> in the <a href="aviews.htm#i12685">CTX_PARAMETERS</a> view. To specify a memory size larger than the <code dir="ltr">MAX_INDEX_MEMORY</code>, you must reset this parameter with CTX_ADM.<a href="cadmpkg.htm#i996788">SET_PARAMETER</a> to be larger than or equal to <code dir="ltr">memsize</code>.</p>
<p>The default is the value specified for <code dir="ltr">DEFAULT_INDEX_MEMORY</code> in <code dir="ltr">CTX_PARAMETERS</code>.</p>
<p><a id="sthref167"></a><a id="sthref168"></a>The <code dir="ltr">memsize</code> parameter specifies the amount of memory Oracle Text uses for indexing before flushing the index to disk. Specifying a large amount memory improves indexing performance because there are fewer I/O operations and improves query performance and maintenance, because there is less fragmentation.</p>
<p>Specifying smaller amounts of memory increases disk I/O and index fragmentation, but might be useful when run-time memory is scarce.</p>
</dd>
<dd><a id="BJEHFDFH"></a></dd>
<dt><a id="sthref169"></a><a id="sthref170"></a>POPULATE | NOPOPULATE<a id="sthref171"></a><a id="sthref172"></a><a id="sthref173"></a></dt>
<dd>
<p>Specifies whether an index should be empty or populated. The default is <code dir="ltr">POPULATE</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code dir="ltr">POPULATE</code> | <code dir="ltr">NOPOPULATE</code> is the only option whose default value cannot be set with CTX_ADM.<a href="cadmpkg.htm#i996788">SET_PARAMETER</a>.
<p>This option is not valid with <code dir="ltr">CTXXPATH</code> indexes.</p>
</div>
<p><a id="sthref174"></a>Empty indexes are populated by updates or inserts to the base table. You might create an empty index when you need to create your index incrementally or to selectively index documents in the base table. You might also create an empty index when you require only theme and Gist output from a document set.</p>
</dd>
<dd><a id="BJEDAGCH"></a></dd>
<dt><a id="sthref175"></a><a id="sthref176"></a><a id="sthref177"></a><a id="sthref178"></a><a id="sthref179"></a><a id="sthref180"></a><a id="sthref181"></a><a id="sthref182"></a>SYNC (MANUAL | EVERY "<span class="variable">interval-string</span>" | ON COMMIT)</dt>
<dd>
<p>Specifies <code dir="ltr">SYNC</code> for automatic synchronization of the <code dir="ltr">CONTEXT</code> index when there are inserts, updates or deletes to the base table. You can specify one of the following <code dir="ltr">SYNC</code> methods:</p>
<div id="CCREF23731" class="tblformal">
<p class="titleintable"><a id="sthref183"></a><a id="sthref184"></a>Table 1-5 SYNC Types</p>
<table class="cellalignment103" title="SYNC Types" summary="This table shows SYNC methods." dir="ltr">
<thead>
<tr class="cellalignment90">
<th class="cellalignment97" id="r1c1-t57">SYNC Type</th>
<th class="cellalignment97" id="r1c2-t57">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment90">
<td class="cellalignment98" id="r2c1-t57" headers="r1c1-t57">
<p><code dir="ltr">MANUAL</code></p>
</td>
<td class="cellalignment98" headers="r2c1-t57 r1c2-t57">
<p>Provides no automatic synchronization. This is the default. You must manually synchronize the index with <code dir="ltr">CTX_DDL.SYNC_INDEX</code>.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r3c1-t57" headers="r1c1-t57">
<p>EVERY "<span class="variable">interval-string</span>"</p>
</td>
<td class="cellalignment98" headers="r3c1-t57 r1c2-t57">
<p>Automatically synchronizes the index at a regular interval specified by the value of <span class="variable">interval-string</span>, which takes the same syntax as that for scheduler jobs. Automatic synchronization using <code dir="ltr">EVERY</code> requires that the index creator have <code dir="ltr">CREATE JOB</code> privileges.</p>
<p>Ensure that <span class="variable">interval-string</span> is set to a long enough period that any previous sync jobs will have completed; otherwise, the sync job might hang. <span class="variable">interval-string</span> must be enclosed in double quotes, and any single quote within <span class="variable">interval-string</span> must be preceded by the escape character with another single quote.</p>
<p>See <a href="#i1000959">"Enabling Automatic Index Synchronization"</a> for an example of automatic sync syntax.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r4c1-t57" headers="r1c1-t57">
<p>ON COMMIT</p>
</td>
<td class="cellalignment98" headers="r4c1-t57 r1c2-t57">
<p>Synchronizes the index immediately after a commit transaction. The commit transaction does not return until the sync is complete. (Because the synchronization is performed as a separate transaction, there may be a period, usually small, when the data is committed but index changes are not.)</p>
<p>The operation uses the memory specified with the <span class="variable">memory</span> parameter.</p>
<p>Note that the sync operation has its own transaction context. If this operation fails, the data transaction is still commited. Index synchronization errors are logged in the <code dir="ltr">CTX_USER_INDEX_ERRORS</code> view. See <a href="#i1000916">"Viewing Index Errors"</a>.</p>
<p>See <a href="#i1000959">"Enabling Automatic Index Synchronization"</a> for an example of <code dir="ltr">ON COMMIT</code> syntax.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>Each partition of a locally partitioned index can have its own type of sync (<code dir="ltr">ON COMMIT</code>, <code dir="ltr">EVERY</code>, or <code dir="ltr">MANUAL</code>). The type of sync specified in master parameter strings applies to all index partitions unless a partition specifies its own type.</p>
<p>With automatic (<code dir="ltr">EVERY</code>) synchronization, users can specify memory size and parallel synchronization. That syntax is:</p>
<pre dir="ltr">
... EVERY <span class="variable">interval_string</span> MEMORY <span class="variable">mem_size</span> PARALLEL <span class="variable">paradegree</span> ...
</pre>
<p>The <code dir="ltr">ON</code> <code dir="ltr">COMMIT</code> synchronizations can be run only serially and must use the same memory size that was specified at index creation.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN035" href="../../server.112/e25494/schedadmin.htm#ADMIN035"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about job scheduling</div>
</dd>
<dd><a id="BJECACGF"></a></dd>
<dt>TRANSACTIONAL</dt>
<dd>
<p><a id="sthref185"></a><a id="sthref186"></a><a id="sthref187"></a><a id="sthref188"></a><a id="sthref189"></a><a id="sthref190"></a><a id="sthref191"></a>Specifies that documents can be searched immediately after they are inserted or updated. If a text index is created with <code dir="ltr">TRANSACTIONAL</code> enabled, then, in addition to processing the synchronized rowids already in the index, the <code dir="ltr">CONTAINS</code> operator will process unsynchronized rowids as well. Oracle Text does in-memory indexing of unsynchronized rowids and processes the query against the in-memory index.</p>
<p><code dir="ltr">TRANSACTIONAL</code> is an index-level parameter and does not apply at the partition level.</p>
<p>You must still synchronize your text indexes from time to time (with <code dir="ltr">CTX_DDL.SYNC_INDEX</code>) to bring pending rowids into the index. Query performance degrades as the number of unsynchronized rowids increases. For that reason, Oracle recommends setting up your index to use automatic synchronization with the <code dir="ltr">EVERY</code> parameter. (See <a href="#BJEDAGCH">"SYNC (MANUAL | EVERY "<span class="variable">interval-string</span>" | ON COMMIT)"</a>.)</p>
<p><a id="sthref192"></a><a id="sthref193"></a><a id="sthref194"></a>Transactional querying for indexes that have been created with the <code dir="ltr">TRANSACTIONAL</code> parameter can be turned on and off (for the duration of a user session) with the PL/SQL variable <code dir="ltr">CTX_QUERY.disable_transactional_query</code>. This is useful, for example, if you find that querying is slow due to the presence of too many pending rowids. Here is an example of setting this session variable:</p>
<pre dir="ltr">
exec ctx_query.disable_transactional_query := TRUE;
</pre>
<p>If the index uses <code dir="ltr"><a id="sthref195"></a>AUTO_FILTER</code>, queries involving unsynchronized rowids will require filtering of unsynchronized documents.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref196"></a>CREATE INDEX: CONTEXT Index Examples</p>
<p>The following sections give examples of creating a <code dir="ltr">CONTEXT</code> index.</p>
<p class="subhead1"><a id="CCREF23732"></a><a id="sthref197"></a><a id="sthref198"></a>Creating CONTEXT Index Using Default Preferences</p>
<p>The following example creates a <code dir="ltr">CONTEXT</code> index called <code dir="ltr">myindex</code> on the <code dir="ltr">docs</code> column in <code dir="ltr">mytable</code>. Default preferences are used.</p>
<pre dir="ltr">
CREATE INDEX myindex ON mytable(docs) INDEXTYPE IS ctxsys.context;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CCAPP" href="../e24435/toc.htm"><span class="italic">Oracle Text Application Developer's Guide</span></a></p>
</li>
<li>
<p>For more information about default settings, see <a href="cdatadic.htm#i1009891">"Default Index Parameters"</a></p>
</li>
</ul>
</div>
<p class="subhead1"><a id="CCREF23733"></a><a id="sthref199"></a>Creating CONTEXT Index with Custom Preferences</p>
<p>The following example creates a <code dir="ltr">CONTEXT</code> index called <code dir="ltr">myindex</code> on the <code dir="ltr">docs</code> column in <code dir="ltr">mytable</code>. The index is created with a custom lexer preference called <code dir="ltr">my_lexer</code> and a custom stoplist called <code dir="ltr">my_stop</code>.</p>
<p>This example also assumes that the preference and stoplist were previously created with CTX_DDL.<a href="cddlpkg.htm#i997746">CREATE_PREFERENCE</a> for <code dir="ltr">my_lexer</code>, and CTX_DDL.<a href="cddlpkg.htm#i998026">CREATE_STOPLIST</a> for <code dir="ltr">my_stop</code>. Default preferences are used for the unspecified preferences.</p>
<pre dir="ltr">
CREATE INDEX myindex ON mytable(docs) INDEXTYPE IS ctxsys.context 
  PARAMETERS('LEXER my_lexer STOPLIST my_stop');
</pre>
<p>Any user can use any preference. To specify preferences that exist in another user's schema, add the user name to the preference name. The following example assumes that the preferences <code dir="ltr">my_lexer</code> and <code dir="ltr">my_stop</code> exist in the schema that belongs to user <code dir="ltr">kenny</code>:</p>
<pre dir="ltr">
CREATE INDEX myindex ON mytable(docs) INDEXTYPE IS ctxsys.context 
  PARAMETERS('LEXER kenny.my_lexer STOPLIST kenny.my_stop');
</pre>
<p class="subhead1"><a id="i1000959"></a><a id="CCREF23734"></a>Enabling Automatic Index Synchronization</p>
<p>You can create your index and specify that the index be synchronized at regular intervals for insertions, updates and deletions to the base table. To do so, create the index with the <code dir="ltr">SYNC</code> <code dir="ltr">(</code><code dir="ltr">EVERY</code> <code dir="ltr">"</code><span class="variable">interval-string</span><code dir="ltr">")</code> parameter.</p>
<p>To use job scheduling, you must log in as a user who has DBA privileges and then grant <code dir="ltr">CREATE JOB</code> privileges.</p>
<p>The following example creates an index and schedules three synchronization jobs for three index partitions. The first partition uses <code dir="ltr">ON</code> <code dir="ltr">COMMIT</code> synchronization. The other two partitions are synchronized by jobs that are scheduled to be executed every Monday at 3 P.M.</p>
<pre dir="ltr">
CONNECT system/manager
GRANT CREATE JOB TO dr_test

CREATE INDEX tdrmauto02x ON tdrmauto02(text)
   INDEXTYPE IS CTXSYS.CONTEXT local
   (PARTITION tdrm02x_i1 PARAMETERS('
   MEMORY 20m SYNC(ON COMMIT)'),
   PARTITION tdrm02x_i2,
   PARTITION tdrm02x_i3)  PARAMETERS('
   SYNC (EVERY "NEXT_DAY(TRUNC(SYSDATE), ''MONDAY'') + 15/24")
  ');
</pre>
<p>See <a class="olink ADMIN035" href="../../server.112/e25494/schedadmin.htm#ADMIN035"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about job scheduling syntax.</p>
<p class="subhead1"><a id="CCREF23735"></a>Creating CONTEXT Index with Multilexer Preference<a id="sthref200"></a></p>
<p>The multilexer preference decides which lexer to use for each row based on a language column. This is a character column in the table that stores the language of the document in the text column. For example, create the table <code dir="ltr">globaldoc</code> to hold documents of different languages:</p>
<pre dir="ltr">
CREATE TABLE globaldoc (
   doc_id NUMBER PRIMARY KEY,
   lang VARCHAR2(10),
   text CLOB
);
</pre>
<p>Assume that <code dir="ltr">global_lexer</code> is a multilexer preference you created. To index the <code dir="ltr">global_doc</code> table, specify the multilexer preference and the name of the language column as follows:</p>
<pre dir="ltr">
CREATE INDEX globalx ON globaldoc(text) INDEXTYPE IS ctxsys.context PARAMETERS
('LEXER global_lexer LANGUAGE COLUMN lang');
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="cdatadic.htm#i1007955">"MULTI_LEXER"</a> for more information about creating multilexer preferences</div>
<p class="subhead1"><a id="i1000586"></a><a id="CCREF23736"></a>Creating a Local Partitioned Index<a id="sthref201"></a></p>
<p>The following example creates a text table that is partitioned into three, populates it, and then creates a partitioned index:</p>
<pre dir="ltr">
PROMPT create partitioned table and populate it

CREATE TABLE part_tab (a int, b varchar2(40)) PARTITION BY RANGE(a)
</pre>
<pre dir="ltr">
(partition p_tab1 values less than (10),
 partition p_tab2 values less than (20),
 partition p_tab3 values less than (30));
</pre>
<pre dir="ltr">
PROMPT create partitioned index
CREATE INDEX part_idx on part_tab(b) INDEXTYPE IS CTXSYS.CONTEXT
</pre>
<pre dir="ltr">
LOCAL (partition p_idx1, partition p_idx2, partition p_idx3);
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The limit for the number of partitions in Oracle Text is the same as the maximum number of partitions per table in Oracle Database.</div>
<p class="subhead1"><a id="CCREF23737"></a><a id="sthref202"></a>Using FILTER BY and ORDER BY Clauses</p>
<p>The following example creates an index on table <span class="italic">docs</span> and orders the documents by author's publishing date.</p>
<p>First, create the table:</p>
<pre dir="ltr">
CREATE TABLE docs (
    docid    NUMBER, 
    pub_date DATE, 
    author   VARCHAR2(30), 
    category VARCHAR2(30), 
    document CLOB
);
 
</pre>
<p>Create the index with <code dir="ltr">FILTER</code> <code dir="ltr">BY</code> and <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clauses:</p>
<pre dir="ltr">
CREATE INDEX doc_idx on docs(document) indextype is ctxsys.context
  FILTER BY category, author
  ORDER BY pub_date desc, docid
  PARAMETERS ('memory 500M');
</pre>
<p class="subhead1"><a id="i998082"></a><a id="CCREF23738"></a>Parallel Indexing<a id="sthref203"></a></p>
<p>Parallel indexing can improve index performance when you have multiple CPUs.</p>
<p>To create an index in parallel, use the <code dir="ltr">PARALLEL</code> clause with a parallel degree. This example uses a parallel degree of 3:</p>
<pre dir="ltr">
CREATE INDEX myindex ON mytab(pk) INDEXTYPE IS ctxsys.context PARALLEL 3;
</pre>
<p class="subhead1"><a id="i998102"></a><a id="CCREF23739"></a>Creating a Local Partitioned Index in Parallel<a id="sthref204"></a><a id="sthref205"></a><a id="sthref206"></a><a id="sthref207"></a></p>
<p>Creating a local partitioned index in parallel can improve performance when you have multiple CPUs. With partitioned tables, you can divide the work. You can create a local partitioned index in parallel in two ways:</p>
<ul>
<li>
<p>Use the <code dir="ltr">PARALLEL</code> clause with the <code dir="ltr">LOCAL</code> clause in the <code dir="ltr">CREATE INDEX</code> statement. In this case, the maximum parallel degree is limited to the number of partitions you have. See <a href="#i1000611">"Parallelism with CREATE INDEX"</a>.</p>
</li>
<li>
<p>Create an unusable index first, then run the <code dir="ltr">DBMS_PCLXUTIL.BUILD_PART_INDEX</code> utility. This method can result in a higher degree of parallelism, especially if you have more CPUs than partitions. See <a href="#i1000635">"Parallelism with DBMS_PCLUTIL.BUILD_PART_INDEX"</a>.</p>
</li>
</ul>
<p>If you attempt to create a local partitioned index in parallel, and the attempt fails, you may see the following error message:</p>
<pre dir="ltr">
ORA-29953: error in the execution of the ODCIIndexCreate routine for one or more
of the index partitions
</pre>
<p>To determine the specific reason why the index creation failed, query the <a href="aviews.htm#i13049">CTX_USER_INDEX_ERRORS</a> view.</p>
<p class="subhead2"><a id="i1000611"></a><a id="CCREF23740"></a>Parallelism with CREATE INDEX</p>
<p>You can achieve local index parallelism by using the <code dir="ltr">PARALLEL</code> and <code dir="ltr">LOCAL</code> clauses in the <code dir="ltr">CREATE INDEX</code> statement. In this case, the maximum parallel degree is limited to the number of partitions that you have.</p>
<p>The following example creates a table with three partitions, populates them, and then creates the local indexes in parallel with a degree of 2:</p>
<pre dir="ltr">
create table part_tab3(id number primary key, text varchar2(100)) 
partition by range(id) 
(partition p1 values less than (1000), 
 partition p2 values less than (2000), 
 partition p3 values less than (3000)); 

begin 
  for i in 0..2999 
  loop 
      insert into part_tab3 values (i,'oracle'); 
  end loop; 
end; 
/ 

create index part_tab3x on part_tab3(text) 
indextype is ctxsys.context local (partition part_tabx1, 
                                   partition part_tabx2, 
                                   partition part_tabx3) 
parallel 2;                                                              
</pre>
<p class="subhead2"><a id="i1000635"></a><a id="CCREF23741"></a><a id="sthref208"></a><a id="sthref209"></a><a id="sthref210"></a>Parallelism with DBMS_PCLUTIL.BUILD_PART_INDEX</p>
<p>You can achieve local index parallelism by first creating an unusable <code dir="ltr">CONTEXT</code> index, and then running the <a class="olink ARPLS037" href="../../appdev.112/e40758/d_pclxut.htm#ARPLS037"><code dir="ltr">DBMS_PCLUTIL.BUILD_PART_INDEX</code></a> utility. This method can result in a higher degree of parallelism, especially when you have more CPUs than partitions.</p>
<p>In this example, the base table has three partitions. We create a local partitioned unusable index first, then run <a class="olink ARPLS037" href="../../appdev.112/e40758/d_pclxut.htm#ARPLS037"><code dir="ltr">DBMS_PCLUTIL.BUILD_PART_INDEX</code></a>, which builds the 3 partitions in parallel (referred to as inter-partition parallelism). Also, inside each partition, index creation proceeds in parallel (called intra-partition parallelism) with a parallel degree of 2. Therefore, the total parallel degree is 6 (3 times 2).</p>
<pre dir="ltr">
create table part_tab3(id number primary key, text varchar2(100)) 
partition by range(id) 
(partition p1 values less than (1000), 
 partition p2 values less than (2000), 
 partition p3 values less than (3000)); 

begin 
  for i in 0..2999 
  loop 
      insert into part_tab3 values (i,'oracle'); 
  end loop; 
end; 
/ 

create index part_tab3x on part_tab3(text) 
indextype is ctxsys.context local (partition part_tabx1, 
                                   partition part_tabx2, 
                                   partition part_tabx3) 
unusable; 

exec dbms_pclxutil.build_part_index(jobs_per_batch=&gt;3,
  procs_per_job=&gt;2,
  tab_name=&gt;'PART_TAB3',
  idx_name=&gt;'PART_TAB3X',
  force_opt=&gt;TRUE); 
</pre>
<p class="subhead1"><a id="i1000916"></a><a id="CCREF23742"></a>Viewing Index Errors <a id="sthref211"></a><a id="sthref212"></a><a id="sthref213"></a><a id="sthref214"></a></p>
<p>After a <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> or <code dir="ltr">ALTER</code> <code dir="ltr">INDEX</code> operation, you can view index errors with Oracle Text views. To view errors on your indexes, query the <a href="aviews.htm#i13049">CTX_USER_INDEX_ERRORS</a> view. To view errors on all indexes as <code dir="ltr">CTXSYS</code>, query the <a href="aviews.htm#i12656">CTX_INDEX_ERRORS</a> view.</p>
<p>For example, to view the most recent errors on your indexes, enter the following statement:</p>
<pre dir="ltr">
SELECT err_timestamp, err_text FROM ctx_user_index_errors
ORDER BY err_timestamp DESC;
</pre>
<p class="subhead1"><a id="CCREF23743"></a>Deleting Index Errors<a id="sthref215"></a></p>
<p>To clear the index error view, enter the following statement:</p>
<pre dir="ltr">
DELETE FROM ctx_user_index_errors;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i998134"></a>Syntax for CTXCAT Index Type<a id="sthref216"></a><a id="sthref217"></a></p>
<p>Combines an index on a text column and one or more other columns. Query this index with the <code dir="ltr">CATSEARCH</code> operator in the <code dir="ltr">WHERE</code> clause of a <code dir="ltr">SELECT</code> statement. This type of index is optimized for mixed queries. This index is transactional, automatically updating itself with DML to the base table.</p>
<pre dir="ltr">
CREATE INDEX [<span class="variable">schema</span>.]<span class="variable">index</span> on [<span class="variable">schema</span>.]<span class="variable">table</span>(<span class="variable">column</span>) INDEXTYPE IS ctxsys.ctxcat 
</pre>
<pre dir="ltr">
[PARAMETERS
</pre>
<pre dir="ltr">
('[index set <span class="italic">index_set</span>]
[lexer <span class="variable">lexer_pref</span>]
[storage <span class="variable">storage_pref</span>] 
[stoplist <span class="variable">stoplist</span>] 
[section group <span class="italic">sectiongroup_pref</span>
[wordlist <span class="variable">wordlist_pref</span>] 
[memory <span class="variable">memsize</span>]');
</pre>
<dl>
<dt>[<span class="variable">schema</span>.]<span class="variable">table</span>(<span class="variable">column</span>)</dt>
<dd>
<p>Specifies the name of the table and column to index.</p>
<p><a id="sthref218"></a>The column that you specify when you create a <code dir="ltr">CTXCAT</code> index must be of type <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code>. No other types are supported for <code dir="ltr">CTXCAT</code>.</p>
<p>Attempting to create an index on a Virtual Private Database (VPD) protected table will fail unless one of the following options is true:</p>
</dd>
</dl>
<ul>
<li>
<p>The VPD policy is created such that it does not apply to <code dir="ltr">INDEX</code> statement type, which is the default</p>
</li>
<li>
<p>The policy function returns a null predicate for the current user.</p>
</li>
<li>
<p>The user (index owner) is <code dir="ltr">SYS</code>.</p>
</li>
<li>
<p>The user has the <code dir="ltr">EXEMPT</code> <code dir="ltr">ACCESS</code> <code dir="ltr">POLICY</code> privilege.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref219"></a>Supported CTXCAT Preferences<a id="sthref220"></a></p>
<dl>
<dt>index set <span class="italic">index_set</span></dt>
<dd>
<p>Specifies the index set preference to create the <code dir="ltr">CTXCAT</code> index. Index set preferences name the columns that make up your subindexes. Any column that is named in an index set column list cannot have a <code dir="ltr">NULL</code> value in any row of the base table, or else you get an error.</p>
<p>Always ensure that your columns have non-null values before and after indexing.</p>
<p>See <a href="#i998241">"Creating a CTXCAT Index"</a>.</p>
</dd>
</dl>
<p class="subhead2"><a id="CCREF23744"></a>Index Performance and Size Considerations</p>
<p>Although a <code dir="ltr">CTXCAT</code> index offers query performance benefits, creating this type of index has its costs. The time that it takes Oracle Text to create a <code dir="ltr">CTXCAT</code> index depends on the total size of the index.</p>
<p>The total size of a <code dir="ltr">CTXCAT</code> index is directly related to:</p>
<ul>
<li>
<p>Total text to be indexed</p>
</li>
<li>
<p>Number of component indexes in the index set</p>
</li>
<li>
<p>Number of columns in the base table that make up the component indexes</p>
</li>
</ul>
<p>Having many component indexes in your index set also degrades DML performance because more indexes must be updated.</p>
<p>Because of these added costs in creating a <code dir="ltr">CTXCAT</code> index, you should carefully consider the query performance benefit that each component index gives your application before adding it to your index set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCAPP" href="../e24435/toc.htm"><span class="italic">Oracle Text Application Developer's Guide</span></a> for more information about creating <code dir="ltr">CTXCAT</code> indexes and the benefits</div>
<dl>
<dt>Other CTXCAT Preferences</dt>
<dd>
<p>When you create an index of type <code dir="ltr">CTXCAT</code>, you can use the supported index preferences listed in <a href="#BJEJBHAG">Table 1-6</a> in the <code dir="ltr">parameters</code> string.</p>
</dd>
</dl>
<div id="CCREF23745" class="tblformal">
<p class="titleintable"><a id="sthref221"></a><a id="BJEJBHAG"></a>Table 1-6 Supported CTXCAT Index Preferences</p>
<table class="cellalignment103" title="Supported CTXCAT Index Preferences" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment90">
<th class="cellalignment97" id="r1c1-t63">Preference Class</th>
<th class="cellalignment97" id="r1c2-t63">Supported Types</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment90">
<td class="cellalignment98" id="r2c1-t63" headers="r1c1-t63">
<p>Datastore</p>
</td>
<td class="cellalignment98" headers="r2c1-t63 r1c2-t63">
<p>This preference class is not supported for <code dir="ltr">CTXCAT</code>.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r3c1-t63" headers="r1c1-t63">
<p>Filter</p>
</td>
<td class="cellalignment98" headers="r3c1-t63 r1c2-t63">
<p>This preference class is not supported for <code dir="ltr">CTXCAT</code>.</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r4c1-t63" headers="r1c1-t63">
<p>Lexer</p>
</td>
<td class="cellalignment98" headers="r4c1-t63 r1c2-t63">
<p><a href="cdatadic.htm#i1007615">BASIC_LEXER</a> (<code dir="ltr">index_themes</code> attribute not supported)</p>
<p><a href="cdatadic.htm#i1008040">CHINESE_LEXER</a></p>
<p><a href="cdatadic.htm#i1008019">CHINESE_VGRAM_LEXER</a></p>
<p><a href="cdatadic.htm#i1008067">JAPANESE_LEXER</a></p>
<p><a href="cdatadic.htm#i1017169">JAPANESE_VGRAM_LEXER</a></p>
<p><a href="cdatadic.htm#i1008175">KOREAN_MORPH_LEXER</a></p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r5c1-t63" headers="r1c1-t63">
<p>Wordlist</p>
</td>
<td class="cellalignment98" headers="r5c1-t63 r1c2-t63">
<p><a href="cdatadic.htm#i1008935">BASIC_WORDLIST</a></p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r6c1-t63" headers="r1c1-t63">
<p>Storage</p>
</td>
<td class="cellalignment98" headers="r6c1-t63 r1c2-t63">
<p><a href="cdatadic.htm#i1009262">BASIC_STORAGE</a></p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r7c1-t63" headers="r1c1-t63">
<p>Stoplist</p>
</td>
<td class="cellalignment98" headers="r7c1-t63 r1c2-t63">
<p>Supports single language stoplists only (<code dir="ltr">BASIC_STOPLIST</code> type).</p>
</td>
</tr>
<tr class="cellalignment90">
<td class="cellalignment98" id="r8c1-t63" headers="r1c1-t63">
<p>Section Group</p>
</td>
<td class="cellalignment98" headers="r8c1-t63 r1c2-t63">
<p>Only Field Section is supported for <code dir="ltr">CTXCAT</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref222"></a>Unsupported Preferences and Parameters<a id="sthref223"></a></p>
<p>When you create a <code dir="ltr">CTXCAT</code> index, you cannot specify datastore and filter preferences. For section group preferences, only the field section preference is supported. You also cannot specify language, format, or charset columns as with a <code dir="ltr">CONTEXT</code> index.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i998241"></a>Creating a CTXCAT Index</p>
<p>This section gives a brief example for creating a <code dir="ltr">CTXCAT</code> index. For a more complete example, see <a class="olink CCAPP" href="../e24435/toc.htm"><span class="italic">Oracle Text Application Developer's Guide</span></a>.</p>
<p>Consider a table called <code dir="ltr">AUCTION</code> with the following schema:</p>
<pre dir="ltr">
create table auction(
</pre>
<pre dir="ltr">
item_id number,
title varchar2(100),
category_id number,
price number,
bid_close date);
</pre>
<pre dir="ltr">
</pre>
<p>Assume that queries on the table involve a mandatory text query clause and optional structured conditions on <code dir="ltr">price</code>. Results must be sorted based on <code dir="ltr">bid_close</code>. This means that an index to support good response time for the structured and sorting criteria is required.</p>
<p>You can create a catalog index to support the different types of structured queries a user might enter. For structured queries, a <code dir="ltr">CTXCAT</code> index improves query performance over a context index.</p>
<p>To create the indexes, first, create the index set preference, next, optionally, add the storage preference, and, finally, add the required indexes to it:</p>
<pre dir="ltr">
begin
</pre>
<pre dir="ltr">
ctx_ddl.create_index_set('auction_iset');
ctx_ddl.add_index('auction_iset','bid_close');
ctx_ddl.add_index('auction_iset','price, bid_close');
</pre>
<pre dir="ltr">
end;
</pre>
<p>Optionally, create the storage preference:</p>
<pre dir="ltr">
begin
 ctx_ddl.create_preference('auction_st_pref', 'BASIC_STORAGE');
 ctx_ddl.set_attribute('auction_st_pref', 'I_TABLE_CLAUSE',
                       'tablespace TEXT storage (initial 5M)');
 ctx_ddl.set_attribute('auction_st_pref', 'I_ROWID_INDEX_CLAUSE',
                        'tablespace TEXT storage (initial 5M)');
 ctx_ddl.set_attribute('auction_st_pref', 'I_INDEX_CLAUSE',
                        'tablespace TEXT storage (initial 5M) compress 2');
end;
/ 
</pre>
<p>Then, create the <code dir="ltr">CTXCAT</code> index with the <code dir="ltr">CREATE</code> <code dir="ltr">INDEX</code> statement as follows:</p>
<pre dir="ltr">
create index auction_titlex on AUCTION(title) indextype is CTXSYS.CTXCAT
parameters ('index set auction_iset storage auction_st_pref');
</pre>
<p class="subhead1"><a id="CCREF23746"></a>Querying a CTXCAT Index</p>
<p>To query the title column for the word <span class="italic">pokemon</span>, enter regular and mixed queries as follows:</p>
<pre dir="ltr">
select * from AUCTION where CATSEARCH(title, 'pokemon',NULL)&gt; 0;
select * from AUCTION where CATSEARCH(title, 'pokemon', 'price &lt; 50 order by
bid_close desc')&gt; 0;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CCAPP" href="../e24435/toc.htm"><span class="italic">Oracle Text Application Developer's Guide</span></a> for a complete <code dir="ltr">CTXCAT</code> example</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i1002072"></a>Syntax for CTXRULE Index Type<a id="sthref224"></a><a id="sthref225"></a></p>
<p>The <code dir="ltr">CTXRULE</code> type is an index on a column containing a set of queries. Query this index with the <code dir="ltr">MATCHES</code> operator in the <code dir="ltr">WHERE</code> clause of a <code dir="ltr">SELECT</code> statement.</p>
<pre dir="ltr">
CREATE INDEX [<span class="variable">schema</span>.]<span class="variable">index</span> on [<span class="variable">schema</span>.]<span class="variable">table</span>(<span class="italic">rule_co</span><span class="variable">l</span>) INDEXTYPE IS 
</pre>
<pre dir="ltr">
ctxsys.ctxrule 
[PARAMETERS ('[lexer lexer_pref] [storage storage_pref]
</pre>
<pre dir="ltr">
[section group section_pref] [wordlist wordlist_pref]
[classifier classifier_pref]');
</pre>
<pre dir="ltr">
[PARALLEL n];
</pre>
<dl>
<dt>[<span class="variable">schema</span>.]<span class="variable">table</span>(<span class="variable">column</span>)</dt>
<dd>
<p>Specifies the name of the table and rule column to index. The rules can be query compatible strings, query template strings, or binary support vector machine rules.</p>
<p><a id="sthref226"></a>The column you specify when you create a <code dir="ltr">CTXRULE</code> index must be <code dir="ltr">VARCHAR2</code>, <code dir="ltr">CLOB or BLOB</code>. No other types are supported for the <code dir="ltr">CTXRULE</code> type.</p>
<p>Attempting to create an index on a Virtual Private Database (VPD) protected table will fail unless one of the following is true:</p>
</dd>
</dl>
<ul>
<li>
<p>The VPD policy does not have the <code dir="ltr">INDEX</code> statement type turned on (which is the default).</p>
</li>
<li>
<p>The policy function returns a null predicate for the current user.</p>
</li>
<li>
<p>The user (index owner) is <code dir="ltr">SYS</code>.</p>
</li>
<li>
<p>The user has the <code dir="ltr">EXEMPT</code> <code dir="ltr">ACCESS</code> <code dir="ltr">POLICY</code> privilege.</p>
</li>
</ul>
<dl>
<dt><a id="sthref227"></a><a id="sthref228"></a>lexer_pref</dt>
<dd>
<p>Specifies the lexer preference to be used for processing queries and later for the documents to be classified with the <code dir="ltr">MATCHES</code> function.</p>
<p>With both classifiers <code dir="ltr">SVN_CLASSFIER</code> and <code dir="ltr">RULE_CLASSIFIER</code>, you can use the <code dir="ltr">BASIC_LEXER</code>, <code dir="ltr">CHINESE_LEXER</code>, <code dir="ltr">JAPANESE_LEXER</code>, or <code dir="ltr">KOREAN_MORPH_LEXER</code> lexer. (See <a href="cdatadic.htm#i1009435">"Classifier Types"</a> and <a href="cdatadic.htm#i1007538">"Lexer Types"</a>.)</p>
<p>For processing queries, these lexers support the following operators: <code dir="ltr">ABOUT</code>, <code dir="ltr">STEM</code>, <code dir="ltr">AND</code>, <code dir="ltr">NEAR</code>, <code dir="ltr">NOT</code>, <code dir="ltr">OR</code>, and <code dir="ltr">WITHIN</code>.</p>
<p>The thesaural operators (<code dir="ltr">BT*</code>, <code dir="ltr">NT*</code>, <code dir="ltr">PT</code>, <code dir="ltr">RT</code>, <code dir="ltr">SYN</code>, <code dir="ltr">TR</code>, <code dir="ltr">TRSYS</code>, <code dir="ltr">TT,</code> and so on) are supported. However, these operators are expanded using a snapshot of the thesaurus at index time, not when the <code dir="ltr">MATCHES</code> function is entered. This means that if you change your thesaurus after you index, you must re-index your query set.</p>
</dd>
<dt>storage_pref</dt>
<dd>
<p>Specify the storage preference for the index on the queries.Use the storage preference to specify how the index tables are stored. See <a href="cdatadic.htm#i1009245">"Storage Types"</a>.</p>
</dd>
<dt>section group</dt>
<dd>
<p>Specify the section group. This parameter does not affect the queries. It applies to sections in the documents to be classified. The following section groups are supported for the <code dir="ltr">CTXRULE</code> index type:</p>
</dd>
</dl>
<ul>
<li>
<p><code dir="ltr"><a id="sthref229"></a>BASIC_SECTION_GROUP</code></p>
</li>
<li>
<p><code dir="ltr"><a id="sthref230"></a><a id="sthref231"></a>HTML_SECTION_GROUP</code></p>
</li>
<li>
<p><code dir="ltr"><a id="sthref232"></a>XML_SECTION_GROUP</code></p>
</li>
<li>
<p><code dir="ltr"><a id="sthref233"></a><a id="sthref234"></a>AUTO_SECTION_GROUP</code></p>
</li>
</ul>
<p>See <a href="cdatadic.htm#i1009342">"Section Group Types"</a>.</p>
<p><code dir="ltr">CTXRULE</code> does not support special sections. It also does not support <code dir="ltr">NDATA</code> sections.</p>
<dl>
<dt>wordlist_pref</dt>
<dd>
<p>Specifies the wordlist preferences. This is used to enable stemming operations on query terms. See <a href="cdatadic.htm#i1008929">Wordlist Type</a>.</p>
</dd>
<dt>classifier_pref</dt>
<dd>
<p>Specifies the classifier preference. See <a href="cdatadic.htm#i1009435">"Classifier Types"</a>. You must use the same preference name you specify with <code dir="ltr">CTX_CLS.TRAIN</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref235"></a>Example for Creating a CTXRULE Index</p>
<p>See <a class="olink CCAPP" href="../e24435/toc.htm"><span class="italic">Oracle Text Application Developer's Guide</span></a> for a complete example of using the <code dir="ltr">CTXRULE</code> index type in a document routing application.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i998344"></a>Syntax for CTXXPATH Index Type<a id="sthref236"></a><a id="sthref237"></a></p>
<p>This indextype if provided only for backward compatibility. Create a <code dir="ltr">CTXXPATH</code> index when you need to speed up <code dir="ltr">existsNode()</code> queries on an <code dir="ltr">XMLType</code> column.</p>
<pre dir="ltr">
CREATE INDEX [<span class="variable">schema</span>.]<span class="variable">index</span> on [<span class="variable">schema</span>.]<span class="variable">table</span><span class="italic">(XMLType co</span><span class="variable">lumn</span>) INDEXTYPE IS 
ctxsys.CTXXPATH 
[PARAMETERS ('[storage storage_pref]
              [memory memsize]')];
</pre>
<dl>
<dt>[<span class="variable">schema</span>.]<span class="variable">table</span>(<span class="variable">column</span>)</dt>
<dd>
<p>Specifies the name of the table and column to index.</p>
<p><a id="sthref238"></a>The column you specify when you create a <code dir="ltr">CTXXPATH</code> index must be <code dir="ltr">XMLType</code>. No other types are supported for the <code dir="ltr">CTXXPATH</code> index.</p>
</dd>
<dt>storage_pref</dt>
<dd>
<p>Specifies the storage preference for the index on the queries.</p>
<p>Use the storage preference to specify how the index tables are stored. See <a href="cdatadic.htm#i1009245">"Storage Types"</a> in <a href="cdatadic.htm#BHCDHIAI">Chapter 2, "Oracle Text Indexing Elements"</a>.</p>
</dd>
<dt>memory <span class="italic">memsize<a id="sthref239"></a></span></dt>
<dd>
<p>Specifies the amount of run-time memory to use for indexing. The syntax for <code dir="ltr">memsize</code> is as follows:</p>
<pre dir="ltr">
memsize = <span class="variable">number</span>[M|G|K]
</pre>
<p>M stands for megabytes, G stands for gigabytes, and K stands for kilobytes.</p>
<p>The value you specify for <code dir="ltr">memsize</code> must be between 1M and the value of <code dir="ltr">MAX_INDEX_MEMORY</code> in the <a href="aviews.htm#i12685">CTX_PARAMETERS</a> view. To specify a memory size larger than the <code dir="ltr">MAX_INDEX_MEMORY</code>, you must reset this parameter with CTX_ADM.<a href="cadmpkg.htm#i996788">SET_PARAMETER</a> to be larger than or equal to <code dir="ltr">memsize</code>.</p>
<p>The default is the value specified for <code dir="ltr">DEFAULT_INDEX_MEMORY</code> in <code dir="ltr">CTX_PARAMETERS</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref240"></a>CTXXPATH Examples<a id="sthref241"></a><a id="sthref242"></a></p>
<p>Index creation on an <code dir="ltr">XMLType</code> column:</p>
<pre dir="ltr">
CREATE INDEX xml_index ON xml_tab(col_xml) indextype is ctxsys.CTXXPATH;
</pre>
<p>Or</p>
<pre dir="ltr">
CREATE INDEX xml_index ON xml_tab(col_xml) indextype is ctxsys.CTXXPATH
 PARAMETERS('storage my_storage memory 40M');
</pre>
<p>Querying the table with <code dir="ltr">existsNode</code>:</p>
<pre dir="ltr">
select xml_id from xml_tab x where
x.col_xml.existsnode('/book/chapter[@title="XML"]') &gt; 0;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADXDB" href="../../appdev.112/e23094/toc.htm"><span class="italic">Oracle XML DB Developer's Guide</span></a> for information about using the <code dir="ltr">CTXXPATH</code> index type</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref243"></a>Related Topics</p>
<p>CTX_DDL.<a href="cddlpkg.htm#i997746">CREATE_PREFERENCE</a></p>
<p>CTX_DDL.<a href="cddlpkg.htm#i998026">CREATE_STOPLIST</a></p>
<p>CTX_DDL.<a href="cddlpkg.htm#i997893">CREATE_SECTION_GROUP</a></p>
<p><a href="#CIHBFDCE">"ALTER INDEX"</a></p>
<p><a href="#i997226">"CATSEARCH"</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEGAJFD"></a>
<div id="CCREF0109" class="refsect1">
<h2 class="refsect1">DROP INDEX<a id="sthref244"></a><a id="sthref245"></a></h2>
<div class="infobox-note">
<p class="notep1">Note:</p>
This section describes the <code dir="ltr">DROP</code> <code dir="ltr">INDEX</code> statement as it pertains to dropping a Text domain index.
<p>For a complete description of the <code dir="ltr">DROP</code> <code dir="ltr">INDEX</code> statement, see <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference.</span></a></p>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref246"></a>Purpose</p>
<p>Use <code dir="ltr">DROP</code> <code dir="ltr">INDEX</code> to drop a specified Text index.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref247"></a>Syntax</p>
<pre dir="ltr">
DROP INDEX [<span class="variable">schema</span>.]<span class="variable">index [force</span>];
</pre>
<dl>
<dt>[force]</dt>
<dd>
<p>Optionally forces the index to be dropped. Use the <code dir="ltr">force</code> option when Oracle Text cannot determine the state of the index, such as when an indexing operation fails.</p>
<p>Oracle recommends against using this option by default. Use it only when a regular call to <code dir="ltr">DROP</code> <code dir="ltr">INDEX</code> fails.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref248"></a>Example</p>
<p>The following example drops an index named <code dir="ltr">doc_index</code> in the current user's database schema:</p>
<pre dir="ltr">
DROP INDEX doc_index;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref249"></a>Related Topics</p>
<p><a href="#CIHBFDCE">"ALTER INDEX"</a></p>
<p><a href="#i997677">"CREATE INDEX"</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i998478"></a>
<div id="CCREF0106" class="refsect1">
<h2 class="refsect1">MATCHES<a id="sthref250"></a></h2>
<p><a id="sthref251"></a><a id="sthref252"></a><a id="sthref253"></a>Use the <code dir="ltr">MATCHES</code> operator to find all rows in a query table that match a given document. The document must be a plain text, HTML, or XML document.</p>
<p>The <code dir="ltr">MATCHES</code> operator also supports database links. You can identify a remote table or materialized view by appending <code dir="ltr">@dblink</code> to the end of its name. The <code dir="ltr">dblink</code> must be a complete or partial name for a database link to the database containing the remote table or materialized view. (Querying of remote views is not supported.)</p>
<p>This operator requires a <code dir="ltr">CTXRULE</code> index on your set of queries.</p>
<p>When the <a href="cdatadic.htm#i1018114">SVM_CLASSIFIER</a> classifier type is used, <code dir="ltr">MATCHES</code> returns a score in the range 0 to 100; a higher number indicates a greater confidence in the match. Use the <code dir="ltr">label</code> parameter and <code dir="ltr">MATCH_SCORE</code> to obtain this number. Then use the matching score to apply a category-specific threshold to a particular category.</p>
<p>If the <code dir="ltr">SVM_CLASSIFIER</code> type is not used, then this operator returns either 100 (the document matches the criteria) or 0 (the document does not match).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref254"></a>Limitation</p>
<p>If the optimizer chooses to use the functional query invocation with a <code dir="ltr">MATCHES</code> query, your query will fail.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref255"></a>Syntax</p>
<pre dir="ltr">
MATCHES(
</pre>
<pre dir="ltr">
[schema.]column,
document VARCHAR2 or CLOB
[,label INTEGER])
</pre>
<pre dir="ltr">
RETURN NUMBER;
</pre>
<dl>
<dt>column</dt>
<dd>
<p>Specifies the column containing the indexed query set.</p>
</dd>
<dt>document</dt>
<dd>
<p>Specifies the document to be classified. The document can be plain text, HTML, or XML. Binary formats are not supported.</p>
</dd>
<dt>label</dt>
<dd>
<p>Optionally specifies the label that identifies the score generated by the <code dir="ltr">MATCHES</code> operator. Use this label with <a href="#i999883">MATCH_SCORE</a>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref256"></a>Matches Example</p>
<p>The following example creates a table <code dir="ltr">querytable</code>, and populates it with classification names and associated rules. It then creates a <code dir="ltr">CTXRULE</code> index.</p>
<p>The example enters the <code dir="ltr">MATCHES</code> query with a document string to be classified. The <code dir="ltr">SELECT</code> statement returns all rows (queries) that are satisfied by the document:</p>
<pre dir="ltr">
create table querytable (classification varchar2(64), text varchar2(4000));
insert into querytable values ('common names', 'smith OR jones OR brown');
insert into querytable values ('countries', 'United States OR Great Britain OR
France');
insert into querytable values ('Oracle DB', 'oracle NEAR database');

create index query_rule on querytable(text) indextype is ctxsys.ctxrule;

SELECT classification FROM querytable WHERE MATCHES(text, 'Smith is a common name
in the United States') &gt; 0;


CLASSIFICATION
----------------------------------------------------------------
common names
countries
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref257"></a>Related Topics</p>
<p><a href="#i999883">"MATCH_SCORE"</a></p>
<p><a href="#i1002072">"Syntax for CTXRULE Index Type"</a></p>
<p>CTX_CLS.<a href="cclspkg.htm#CHDBGADF">TRAIN</a></p>
<p><a class="olink CCAPP0600" href="../../text.112/e24435/classify.htm#CCAPP0600"><span class="italic">Oracle Text Application Developer's Guide</span></a> contains extended examples of simple and supervised classification, which make use of the <code dir="ltr">MATCHES</code> operator.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i999883"></a>
<div id="CCREF0112" class="refsect1">
<h2 class="refsect1">MATCH_SCORE</h2>
<p><a id="sthref258"></a><a id="sthref259"></a><a id="sthref260"></a>Use the <code dir="ltr">MATCH_SCORE</code> operator in a statement to return scores produced by a <code dir="ltr">MATCHES</code> query.</p>
<p>The <code dir="ltr">MATCH_SCORE</code> operator also supports database links. You can identify a remote table or materialized view by appending <code dir="ltr">@dblink</code> to the end of its name. The <code dir="ltr">dblink</code> must be a complete or partial name for a database link to the database containing the remote table or materialized view. (Querying of remote views is not supported.)</p>
<p>When the <code dir="ltr">SVM_CLASSIFIER</code> classifier type is used, this operator returns a score in the range 0 to 100. Use the matching score to apply a category-specific threshold to a particular category.</p>
<p>If the <code dir="ltr">SVM_CLASSIFIER</code> classifier is not used, then this operator returns either 100 (the document matches the criteria) or 0 (the document does not match).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref261"></a>Syntax</p>
<pre dir="ltr">
MATCH_SCORE(label NUMBER)
</pre>
<dl>
<dt>label</dt>
<dd>
<p>Specifies a number to identify the score produced by the query. Use this number to identify the <code dir="ltr">MATCHES</code> clause that returns this score.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref262"></a>Example</p>
<p>To get the matching score, use:</p>
<pre dir="ltr">
select cat_id, match_score(1) from training_result where matches(profile,
text,1)&gt;0;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref263"></a>Related Topics</p>
<p><a href="#i998478">"MATCHES"</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i998514"></a>
<div id="CCREF0107" class="refsect1">
<h2 class="refsect1">SCORE</h2>
<p><a id="sthref264"></a><a id="sthref265"></a><a id="sthref266"></a>Use the <code dir="ltr">SCORE</code> operator in a <code dir="ltr">SELECT</code> statement to return the score values produced by a <a href="#i997503">CONTAINS</a> query. The <code dir="ltr">SCORE</code> operator can be used in a <code dir="ltr">SELECT</code>, <code dir="ltr">ORDER</code> <code dir="ltr">BY</code>, or <code dir="ltr">GROUP</code> <code dir="ltr">BY</code> clause.</p>
<p>The <code dir="ltr">SCORE</code> operator also supports database links. You can identify a remote table or materialized view by appending <code dir="ltr">@dblink</code> to the end of its name. The <code dir="ltr">dblink</code> must be a complete or partial name for a database link to the database containing the remote table or materialized view. (Querying of remote views is not supported.)</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref267"></a>Syntax</p>
<pre dir="ltr">
SCORE(label NUMBER)
</pre>
<dl>
<dt>label</dt>
<dd>
<p>Specifies a number to identify the score produced by the query. Use this number to identify the <code dir="ltr">CONTAINS</code> clause that returns this score.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref268"></a>Example</p>
<p class="subhead1"><a id="CCREF23747"></a>Single CONTAINS</p>
<p>When the <code dir="ltr">SCORE</code> operator is called (for example, in a <code dir="ltr">SELECT</code> clause), the <code dir="ltr">CONTAINS</code> clause must reference the score label value as in the following example:</p>
<pre dir="ltr">
SELECT SCORE(1), title from newsindex 
           WHERE CONTAINS(text, 'oracle', 1) &gt; 0 ORDER BY SCORE(1) DESC;
</pre>
<p class="subhead1"><a id="CCREF23748"></a>Multiple CONTAINS</p>
<p>Assume that a news database stores and indexes the title and body of news articles separately. The following query returns all the documents that include the words <span class="italic">Oracle</span> in their title and <span class="italic">java</span> in their body. The articles are sorted by the scores for the first <code dir="ltr">CONTAINS</code> (<span class="italic">Oracle</span>) and then by the scores for the second <code dir="ltr">CONTAINS</code> (<span class="italic">java</span>).</p>
<pre dir="ltr">
SELECT title, body, SCORE(10), SCORE(20)
</pre>
<pre dir="ltr">
FROM news
WHERE CONTAINS (news.title, 'Oracle', 10) &gt; 0 OR
</pre>
<pre dir="ltr">
CONTAINS (news.body, 'java', 20) &gt; 0 
ORDER BY SCORE(10), SCORE(20);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref269"></a>Related Topics</p>
<p><a href="#i997503">"CONTAINS"</a></p>
<p><a href="ascore.htm#g635054">Appendix F, "The Oracle Text Scoring Algorithm"</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment89">
<tr>
<td class="cellalignment98">
<table class="cellalignment94">
<tr>
<td class="cellalignment93"><a href="whatsnew.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment93"><a href="cdatadic.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1998, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment100">
<table class="cellalignment92">
<tr>
<td class="cellalignment93"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment93"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment93"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment93"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment93"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment93"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
