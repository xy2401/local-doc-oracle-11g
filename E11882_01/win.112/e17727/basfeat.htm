<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Basic Features</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-08-09T14:48:30Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Objects for OLE Developer's Guide" />
<meta name="dcterms.identifier" content="E17727-04" />
<meta name="dcterms.isVersionOf" content="OOFOL" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="clients.htm" title="Previous" type="text/html" />
<link rel="Next" href="advfeat.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e17727.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">7/438</span> <!-- End Header -->
<div id="OOFOL0003" class="chapter"><a id="BABJDIIF"></a>
<h1 class="chapter"><span class="secnum">3</span> Basic Features</h1>
<p>This chapter describes basic features of Oracle Objects for OLE<a id="sthref153"></a>.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#CIHDGIIC">Overview of Client Applications</a></p>
</li>
<li>
<p><a href="#CIHGADBH">Accessing the Oracle Objects for OLE Automation Server</a></p>
</li>
<li>
<p><a href="#CIHIBCDE">Connecting to Oracle Database</a></p>
</li>
<li>
<p><a href="#CIHFFFHC">Executing Commands</a></p>
</li>
<li>
<p><a href="#CIHEIFCB">Thread Safety</a></p>
</li>
<li>
<p><a href="#BGBGECFJ">Using the Connection Pool Management Facility</a></p>
</li>
<li>
<p><a href="#CIHCGBGI">Detection of Lost Connections</a></p>
</li>
<li>
<p><a href="#CIHBJCED">PL/SQL Support</a></p>
</li>
<li>
<p><a href="#BGBHFDHE">Transaction Control</a></p>
</li>
<li>
<p><a href="#BGBEDECE">Microsoft Transaction Server Support</a></p>
</li>
<li>
<p><a href="#BGBEAFID">Asynchronous Processing</a></p>
</li>
</ul>
<a id="CIHDGIIC"></a>
<div id="OOFOL142" class="sect1">
<h2 class="sect1">Overview of Client Applications</h2>
<p>Oracle Objects for OLE enables client applications to connect to Oracle databases, execute commands, and access and manipulate the results returned. While some flexibility exists in the order in which specific tasks can be performed, every application using OO4O Automation objects performs the following basic steps:</p>
<ul>
<li>
<p><a href="#CIHGADBH">Accessing the Oracle Objects for OLE Automation Server</a></p>
</li>
<li>
<p><a href="#CIHIBCDE">Connecting to Oracle Database</a></p>
</li>
<li>
<p><a href="#CIHFFFHC">Executing Commands</a></p>
</li>
<li>
<p>Disconnect from the servers and free the OO4O objects used</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CIHGADBH"></a>
<div id="OOFOL143" class="sect1">
<h2 class="sect1">Accessing the Oracle Objects for OLE Automation Server<a id="sthref154"></a><a id="sthref155"></a><a id="sthref156"></a></h2>
<p>To connect to an Oracle database with the OO4O Automation Server, you must first create an instance of the server. In Visual Basic (VB), this is usually done by calling the <code>CreateObject</code> method, although the <code>NEW</code> keyword can also be used.</p>
<p>You can use the Visual Basic <code>CreateObject</code> method with either of the following two OO4O server objects. The interfaces of these objects can provide access to OO4O and enable a connection to Oracle Database.</p>
<ul>
<li>
<p><code>OraSession</code></p>
<p>Highest level object for an application. It manages collections of <code>OraDatabase</code>, <code>OraConnection</code>, and <code>OraDynaset</code> objects.</p>
</li>
<li>
<p><code>OraServer</code></p>
<p>Represents a physical connection to a database instance and allows for connection multiplexing</p>
</li>
</ul>
<p>The <code>CreateObject</code> method uses the <code>ID</code> of the component and object as arguments.</p>
<div id="OOFOL144" class="sect2"><a id="sthref157"></a>
<h3 class="sect2">Obtaining an OraSession Object</h3>
<p>The following script demonstrates how to obtain an <code>OraSession</code> object in Visual Basic. <code>OO4OSession</code> is the object variable that holds an instance of the <code>OraSession</code> object.</p>
<pre>
Dim OO4OSession as Object 
Set OO4OSession = CreateObject(&ldquo;OracleInProcServer.XOraSession") 
</pre>
<p>or</p>
<pre>
Dim OO4OSession as OraSession 
Set OO4OSession = New OraSessionClass 
</pre>
<p>or</p>
<pre>
Dim OO4OSession as New OraSessionClass 
</pre>
<p>The following example demonstrates how to obtain an <code>OraSession</code> object in IIS Active Server Pages.</p>
<pre>
&lt;OBJECT RUNAT=Server SCOPE=APPLICATION ID=OO4OSession
                PROGID="OracleInProcServer.XOraSession"&gt; 
&lt;/OBJECT&gt; 
</pre>
<p><code>OracleInProcServer.XOraSession</code> is the version independent program <code>ID</code> for OO4O that the Oracle client installation program registers in the Windows registry. It is the symbolic name for a globally unique identifier (<code>CLSID</code>) that identifies the OO4O component.</p>
</div>
<!-- class="sect2" -->
<div id="OOFOL145" class="sect2"><a id="sthref158"></a>
<h3 class="sect2">Obtaining an OraServer Object</h3>
<p>You can also use the <code>OraServer</code> object interface for accessing the OO4O Automation Server.</p>
<pre>
Dim OO4OServer as Object 
Set OO4OServer = CreateObject("OracleInProcServer.XOraServer") 
</pre>
<p>Now you can connect to Oracle Database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIHIBCDE">"Connecting to Oracle Database"</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHIBCDE"></a>
<div id="OOFOL146" class="sect1">
<h2 class="sect1">Connecting to Oracle Database</h2>
<p>Once you have obtained an interface, you can use it to establish a user session in an Oracle database by invoking the <code>OpenDatabase</code> method.</p>
<pre>
Set EmpDb= OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "Scott/Tiger", 0) 
</pre>
<p>or</p>
<pre>
Set EmpDb= OO4OServer.OpenDatabase("Scott/Tiger") 
</pre>
<p>The variable <code>EmpDb</code> represents a user session. It holds an <code>OraDatabase</code> interface and can be used to send commands to Oracle Database using <code><span class="codeinlineitalic">ExampleDb</span></code> for the network connection alias and <code>scott</code>/<code>tiger</code> for the user name and password.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sermthod141.htm#CIHCBJHD">OpenDatabase Method</a></div>
<a id="CIHHHIAC"></a>
<div id="OOFOL147" class="sect2">
<h3 class="sect2">Using OraServer for Connection Multiplexing<a id="sthref159"></a><a id="sthref160"></a></h3>
<p>The <code>OraServer</code> interface allows multiple user sessions to share a physical network connection to the database. This reduces resource usage on the network and the database, and allows for better server scalability. However, execution of commands by multiple user sessions is serialized on the connection. Therefore, this feature is not recommended for use in multithreaded applications in which parallel command execution is needed for performance.</p>
<p>The following code example shows how to use the <code>OraServer</code> interface to establish two user sessions:</p>
<pre>
Set OO4OServer = CreateObject("OracleInProcServer.XOraServer") 
OO4OServer.Open("<span class="italic">ExampleDb</span>") 
Set EmpDb1 = OO4OServer.OpenDatabase("Scott/Tiger") 
Set EmpDb2 = OO4OServer.OpenDatabase("Scott/Tiger") 
</pre>
<p>You can also obtain user sessions from a previously created pool of objects.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BGBGECFJ">"Using the Connection Pool Management Facility"</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHFFFHC"></a>
<div id="OOFOL148" class="sect1">
<h2 class="sect1">Executing Commands<a id="sthref161"></a><a id="sthref162"></a></h2>
<p>Commands that can be sent to Oracle databases using OO4O Automation objects are divided into the following categories:</p>
<ul>
<li>
<p><a href="#CIHGACII">"Queries"</a></p>
</li>
<li>
<p><a href="#CIHGAEHD">"Data Manipulation Language Statements"</a></p>
</li>
</ul>
<a id="CIHGACII"></a>
<div id="OOFOL149" class="sect2">
<h3 class="sect2">Queries<a id="sthref163"></a><a id="sthref164"></a><a id="sthref165"></a><a id="sthref166"></a><a id="sthref167"></a></h3>
<p>Queries are statements that retrieve data from a database. A query can return zero, one, or many rows of data. All queries begin with the SQL keyword <code>SELECT</code>, as in the following example:</p>
<pre>
SELECT ename, empno FROM emp 
</pre>
<p>In OO4O, <code>SELECT</code> statements such as this are used with the <code>CreateDynaset</code> method of the <code>OraDatabase</code> interface to execute queries. This method returns an <code>OraDynaset</code> object that is then used to access and manipulate the set of rows returned. An <code>OraDynaset</code> object encapsulates the functions of a client-side scrollable (forward and backward) cursor that allows browsing the set of rows returned by the query it executes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Caching result sets on the client's local disk can be disabled if backward scrollability is not a requirement. This is strongly recommended and can provide significant performance improvements. Passing the <code>ORADYN_NOCACHE</code> option in the <code>CreateDynaset</code> method disables caching. This constant is defined in the <code>oraconst.txt</code> file and can be found in the root directory where OO4O is installed, <code><span class="codeinlineitalic">ORACLE_BASE\\ORACLE_HOME</span></code><code>\OO4O</code>.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="serobjch011.htm#BABJBBAI">OraDynaset Object</a></p>
</li>
<li>
<p><a href="sermthod054.htm#CIHFHBEI">CreateDynaset Method</a></p>
</li>
</ul>
</div>
<p>The following code example shows how to connect to the <code><span class="codeinlineitalic">ExampleDb</span></code> database, execute a query, move through the result set of rows, and displays the column values of each row in a simple message box.</p>
<pre>
Set OO4OSession = CreateObject(&ldquo;OracleInProcServer.XOraSession") 
Set EmpDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "Scott/Tiger", 0 ) 
 
' SELECT query described above used in next line 
Set Employees = EmpDb.CreateDynaset("SELECT ename, empno FROM" &amp; _ 
          "emp",ORADYN_NOCACHE) 
While NOT Employees.EOF 
  MsgBox "Name: " &amp; Employees("ENAME").value &amp; "Employee #: " &amp; _
          Employees("EMPNO").value 
Employees.MoveNext 
Wend 
</pre>
<p>In the previous example, <code>Employees</code>(<code>"ENAME"</code>) and <code>Employees</code>(<code>"EMPNO"</code>) return values of the <code>ENAME</code> and the <code>EMPNO</code> columns from the current row in the result set, respectively. An alternative method of accessing the column values is to use the positions of the columns, <code>Employees(0)</code> for the <code>ENAME</code> column and <code>Employee(1)</code> for <code>EMPNO</code>. This method obtains the column value faster than referencing a column by its name.</p>
<p>The <code>Employees.MoveNext</code> statement in the example sets the current row of the result set to the next row. The <code>EOF</code> property of the <code>OraDynaset</code> is set to <code>True</code> if an attempt is made to move past the last row in the result set.</p>
<p>The <code>MoveNext</code> method is one navigational method in the <code>OraDynaset</code> interface. Other methods include <code>MoveFirst</code>, <code>MoveLast</code>, <code>MoveNext</code>, <code>MovePrevious</code>, <code>MoveNextn</code>, <code>MovePreviousn</code>, <code>MoveRel</code>, and <code>MoveTo</code>.</p>
<p>An <code>OraDynaset</code> object also provides methods to update and delete rows retrieved from base tables or views that can be updated. In addition, it provides a way to insert new rows. See <a href="serobjch011.htm#BABJBBAI">"OraDynaset Object"</a>.</p>
<p>Queries can also require the program to supply data to the database using input (bind) variables, as in the following example:</p>
<pre>
SELECT name, empno 
        FROM employees 
        WHERE ename = :ENAME
</pre>
<p>In the SQL statement, <code>:ENAME</code> is a placeholder for a value that is supplied by the application.</p>
<p>In OO4O, the <code>OraParameter</code> object is used to supply data values for placeholders.</p>
<p>To define a parameter, use the <code>OraParameters</code> collection object. This object is obtained by referencing the <code>Parameters</code> property of an <code>OraDatabase</code> interface. The <code>OraParameters</code> collection provides methods for adding, removing, and obtaining references to <code>OraParameter</code> objects.</p>
<p>The following statement adds an input parameter, <code>ORAPARM_INPUT</code>, to the <code>OraParameters</code> collection contained in the <code>EmpDb</code> object.</p>
<pre>
EmpDb.Parameters.Add "ENAME", "JONES", ORAPARM_INPUT 
</pre>
<p><code>ENAME</code> is the name of the parameter and must be the same as the name of the placeholder in the SQL statement, <code>:ENAME</code> in the sample code. <code>JONES</code> is provided as the initial value, and <code>ORAPARM_INPUT</code> notifies OO4O that it is used as an <code>INPUT</code> parameter.</p>
<p>The following example creates an <code>OraDynaset</code> object that contains only one row for an employee whose name is <code>'JONES'</code>.</p>
<pre>
Set OO4OSession = CreateObject(&ldquo;OracleInProcServer.XOraSession") 
Set EmpDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "Scott/Tiger", 0 ) 
EmpDb.Parameters.Add "ENAME", "JONES", ORAPARM_INPUT 
Set Employees = EmpDb.CreateDynaset("SELECT ename, empno FROM emp" &amp; _
           "WHERE ename = :ENAME",ORADYN_NOCACHE) 

While NOT Employees.EOF 
   MsgBox "Name: " &amp; Employees("ename").value &amp; "Employee #: " &amp; _
            Employees("empno").value 
   Employees.MoveNext 
Wend 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="serobjch020.htm#BABDIJAH">OraParameter Object</a></p>
</li>
<li>
<p><a href="serobjch030.htm#BABBFAHC">OraParameters Collection</a></p>
</li>
<li>
<p><a href="sermthod131.htm#CIHIHCBD">MoveFirst, MoveLast, MoveNext, and MovePrevious Methods</a></p>
</li>
<li>
<p><a href="sermthod132.htm#CIHGJGDB">MovePreviousn, MoveNextn, MoveRel, and MoveTo Methods</a></p>
</li>
<li>
<p><a href="serobjch010.htm#BABGDAJI">OraDatabase Object</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CIHGAEHD"></a>
<div id="OOFOL150" class="sect2">
<h3 class="sect2">Data Manipulation Language Statements<a id="sthref168"></a><a id="sthref169"></a></h3>
<p>Data manipulation language (DML) statements can change data in the database tables. For example, DML statements are used to:</p>
<ul>
<li>
<p><a href="#BGBEIBHB">Updating Database Records</a></p>
</li>
<li>
<p><a href="#BGBFEFDC">Deleting Rows from a Table</a></p>
</li>
<li>
<p><a href="#BGBHADCF">Inserting New Rows into a Table</a></p>
</li>
</ul>
<p>The <code>OraDatabase</code> interface in OO4O provides two methods for executing DML statements: <code>ExecuteSQL</code> and <code>CreateSQL</code>. The following discussion describes how these methods can be used to execute various types of DML statements.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="sermthod086.htm#CIHEEIEC">ExecuteSQL Method</a></p>
</li>
<li>
<p><a href="sermthod066.htm#BHBDJJIG">CreateSQL Method</a></p>
</li>
</ul>
</div>
<a id="BGBEIBHB"></a>
<div id="OOFOL151" class="sect3">
<h4 class="sect3">Updating Database Records<a id="sthref170"></a><a id="sthref171"></a><a id="sthref172"></a><a id="sthref173"></a><a id="sthref174"></a><a id="sthref175"></a></h4>
<p>The following example uses the <code>ExecuteSQL</code> method to execute an <code>UPDATE</code> statement.</p>
<pre>
Set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
Set EmpDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
EmpDb.Parameters.Add "ENAME", "JONES", ORAPARM_INPUT 
EmpDb.ExecuteSQL ("UPDATE emp SET sal = sal + 1000 WHERE ename = :ENAME") 
</pre>
<p>Another way to execute the <code>UPDATE</code> statement is to use the <code>CreateSQL</code> method:</p>
<pre>
Set sqlStatement = EmpDb.CreateSQL("UPDATE emp SET sal = sal + 1000" &amp; _ 
             "WHERE ename = :ENAME", 0&amp;) 
</pre>
<p>Both the <code>ExecuteSQL</code> and <code>CreateSQL</code> methods execute the UPDATE statement provided. The difference is that the <code>CreateSQL</code> method returns a reference to an <code>OraSQLStmt</code> interface, in addition to executing the statement. This interface can later be used to execute the same query using the <code>Refresh</code> method. Because the query has already been parsed by the database, subsequent execution of the same query results in faster execution, especially if bind parameters are used.</p>
<p>For example, to increase the salary of an employee named <code>KING</code> by 1000, change the value of the placeholder, and refresh the <code>sqlStatement</code> object as follows:</p>
<pre>
EmpDb.Parameters("ENAME").Value = "KING" sqlStatement.Refresh 
</pre>
<p>For DML statements that are frequently executed, using parameters with <code>OraSqlStmt</code> objects is more efficient than using the <code>ExecuteSql</code> statement repeatedly. When the <code>Refresh</code> method of the <code>OraSQLStmt</code> is executed, the statement no longer needs to be parsed by the database. In application servers, such as Web servers, where the same queries are frequently executed with different parameter values, this can lead to significant savings in Oracle Database processing.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="sermthod086.htm#CIHEEIEC">ExecuteSQL Method</a></p>
</li>
<li>
<p><a href="sermthod066.htm#BHBDJJIG">CreateSQL Method</a></p>
</li>
<li>
<p><a href="serobjch024.htm#BABGAHBH">OraSQLStmt Object</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="BGBFEFDC"></a>
<div id="OOFOL152" class="sect3">
<h4 class="sect3">Deleting Rows from a Table<a id="sthref176"></a></h4>
<p>The following example uses the <code>CreateSQL</code> method to delete rows from the <code>emp</code> table.</p>
<pre>
Set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
Set EmpDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
EmpDb.Parameters.Add "ENAME", "JONES", ORAPARM_INPUT 
Set sqlStatement = EmpDb.CreateSQL ("DELETE from emp WHERE ename = :ENAME")
</pre>
<p>To delete another row from the <code>emp</code> table, the value of the parameter is changed, and the <code>sqlStatement</code> object is refreshed.</p>
<pre>
EmpDb.Parameters("ENAME").Value = "KING" sqlStatement.Refresh 
</pre></div>
<!-- class="sect3" -->
<a id="BGBHADCF"></a>
<div id="OOFOL153" class="sect3">
<h4 class="sect3">Inserting New Rows into a Table<a id="sthref177"></a><a id="sthref178"></a><a id="sthref179"></a><a id="sthref180"></a></h4>
<p>The following example adds a new row into the table.</p>
<pre>
Set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
Set EmpDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
EmpDb.ExecuteSQL ("INSERT INTO emp (empno, ename, job, mgr, deptno)" &amp; _ 
           "VALUES (1233,'OERTEL', 'WRITER', 7839, 30) ") 
</pre>
<p class="subhead2"><a id="OOFOL154"></a>Inserting Multiple Rows Using Parameter Arrays</p>
<p>You can use parameter arrays to fetch, update, insert, or delete multiple rows in a table. Using parameter arrays for manipulating multiple rows is more efficient than executing multiple statements that operate on individual rows.</p>
<p>The following example demonstrates how the <code>AddTable</code> method of the <code>OraDatabase</code> interface is used to create parameter arrays. The arrays are then populated with values, and used as placeholders in the execution of an <code>INSERT</code> statement that inserts two rows into the <code>emp</code> table.</p>
<pre>
Set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
Set EmpDb = OO4OSession.OpenDatabase("<span class="italic">Exampledb</span>", "scott/tiger", 0) 
 
'Creates parameter arrays for the empno, ename, job, and salary columns 
EmpDb.Parameters.AddTable "EMPNO_ARRAY", ORAPARM_INPUT, ORATYPE_NUMBER, 2
EmpDb.Parameters.AddTable "ENAME_ARRAY", ORAPARM_INPUT, ORATYPE_VARCHAR2, 2, 10
EmpDb.Parameters.AddTable "JOB_ARRAY", ORAPARM_INPUT, ORATYPE_VARCHAR2, 2, 9
EmpDb.Parameters.AddTable "MGR_ARRAY", ORAPARM_INPUT, ORATYPE_NUMBER, 2
EmpDb.Parameters.AddTable "DEPT_ARRAY", ORAPARM_INPUT, ORATYPE_VARCHAR2, 2, 10
Set EmpnoArray = EmpDb.Parameters("EMPNO_ARRAY") 
Set EnameArray = EmpDb.Parameters("ENAME_ARRAY") 
Set JobArray = EmpDb.Parameters("JOB_ARRAY") 
Set MgrArray = EmpDb.Parameters("MGR_ARRAY") 
Set DeptArray = EmpDb.Parameters("DEPT_ARRAY") 
 
'Populate the arrays with values 
EmpnoArray(0) = 1234 
EnameArray(0) = "JORDAN" 
JobArray(0) = "SALESMAN" 
MgrArray(0) = 7839 
DeptArray(0) = 30 
EmpnoArray(1) = 1235 
EnameArray(1) = "YOUNG" 
JobArray(1) = "SALESMAN" 
MgrArray(1) = 7839 
DeptArray(1) = 30 
 
'Insert two rows 
EmpDb.ExecuteSQL ("INSERT INTO emp (empno, ename, job, mgr, deptno) VALUES" &amp; _ 
          "(:EMPNO_ARRAY,:ENAME_ARRAY, :JOB_ARRAY,:MGR_ARRAY, :DEPT_ARRAY)") 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sermthod010.htm#CIHCDEJH">AddTable Method</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHEIFCB"></a>
<div id="OOFOL155" class="sect1">
<h2 class="sect1">Thread Safety</h2>
<p>OO4O is thread-safe and can be used effectively in multithreaded applications and environments such as the Microsoft Internet Information Server (IIS). OO4O supports both the free and apartment threading models in COM/DCOM.</p>
<p>Access to OO4O object attributes is serialized when used with multiple threads of execution. To achieve maximum concurrency in query execution in a multithreaded application with OO4O, avoid sharing objects in multiple threads.</p>
<p>Avoid using commit and rollback operations on a session object that is shared among multiple threads because all connections associated with that session are committed or rolled back. To perform commit and rollback operations on a session object, create a unique session object for each database object used.</p>
</div>
<!-- class="sect1" -->
<a id="BGBGECFJ"></a>
<div id="OOFOL156" class="sect1">
<h2 class="sect1">Using the Connection Pool Management Facility<a id="sthref181"></a><a id="sthref182"></a></h2>
<p>The connection pool in OO4O is a pool of <code>OraDatabase</code> objects. An OO4O connection pool is a group of (possibly) already connected <code>OraDatabase</code> objects. For applications that require constant connections and disconnections to the database, such as ASP Web applications, using a connection pool results in enhanced performance.</p>
<div id="OOFOL157" class="sect2"><a id="sthref183"></a>
<h3 class="sect2">Creating the Connection Pool</h3>
<p>The connection pool is created by invoking the <code>CreateDatabasePool</code> method of the <code>OraSession</code> interface. An <code>OraDatabase</code> object represents a connection to an Oracle database and contains methods for executing SQL statements and PL/SQL blocks.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sermthod053.htm#CIHBCBCH">CreateDatabasePool Method</a></div>
</div>
<!-- class="sect2" -->
<div id="OOFOL158" class="sect2"><a id="sthref184"></a>
<h3 class="sect2">Obtaining from and Returning Objects to the Pool</h3>
<p>To retrieve an <code>OraDatabase</code> object from the pool, call the <code>GetDatabaseFromPool</code> method. This function returns a reference to an <code>OraDatabase</code> object.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sermthod094.htm#CIHBHGDF">GetDatabaseFromPool Method</a></div>
</div>
<!-- class="sect2" -->
<div id="OOFOL159" class="sect2"><a id="sthref185"></a>
<h3 class="sect2">Destroying the Pool</h3>
<p>The pool is implicitly destroyed if the parent session object that it belongs to is destroyed. It can also be destroyed at any time by invoking the <code>DestroyDatabasePool</code> method.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sermthod074.htm#CIHDCCJG">DestroyDatabasePool Method</a></div>
</div>
<!-- class="sect2" -->
<div id="OOFOL160" class="sect2"><a id="sthref186"></a>
<h3 class="sect2">Accessing the Pool attributes</h3>
<p>The following are the database pool properties. These properties are read-only:</p>
<ul>
<li>
<p><code>DbPoolMaxSize</code> - maximum pool size</p>
</li>
<li>
<p><code>DbPoolCurrentSize</code> - current size of the pool</p>
</li>
<li>
<p><code>DbPoolInitialSize</code> - initial size of the pool</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="OOFOL161" class="sect2"><a id="sthref187"></a>
<h3 class="sect2">Processing Transactions Using the Database from the Connection Pool</h3>
<p>The following example shows the recommended way to process transactions:</p>
<pre>
set Odb = OraSession.GetDatabaseFromPool(0) 
Odb.Connection.BeginTrans 
&hellip; 
 
Odb.Connection.CommitTrans 
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHCGBGI"></a>
<div id="OOFOL162" class="sect1">
<h2 class="sect1">Detection of Lost Connections</h2>
<p>OO4O, linked with clients from releases 8.1.6 or higher, supports detection of lost connections.</p>
<p>Applications can verify the status of the database connection by invoking the <code>ConnectionOK</code> property of the <code>OraDatabase</code> object. The <code>OraSession.GetDatabaseFromPool</code> method now verifies the connection before returning the <code>OraDatabase</code> to the application.</p>
<p>If the connection is lost, the <code>GetDatabaseFromPool</code> method drops the lost connection and fetches a new connection.</p>
<pre>
Dim MyDatabase As OraDatabase 
Set MySession = CreateObject("OracleInProcServer.XOraSession") 
Set MyDatabase = MySession.OpenDatabase("<span class="italic">ora90</span>", "scott/tiger", 0&amp;) 
 
' Other code 
...
' Check if the database connection has not timed out 
if MyDatabase.ConnectionOK 
  MsgBox " The database connection is valid" 
endif 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="serprop017.htm#CEGIBDCD">ConnectionOK Property</a></p>
</li>
<li>
<p><a href="serobjch010.htm#BABGDAJI">OraDatabase Object</a></p>
</li>
<li>
<p><a href="sermthod094.htm#CIHBHGDF">GetDatabaseFromPool Method</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="CIHBJCED"></a>
<div id="OOFOL163" class="sect1">
<h2 class="sect1">PL/SQL Support<a id="sthref188"></a><a id="sthref189"></a><a id="sthref190"></a><a id="sthref191"></a><a id="sthref192"></a><a id="sthref193"></a><a id="sthref194"></a><a id="sthref195"></a><a id="sthref196"></a><a id="sthref197"></a></h2>
<p>PL/SQL is the Oracle procedural extension to the SQL language. PL/SQL processes complicated tasks that simple queries and SQL data manipulation language statements cannot perform. Without PL/SQL, Oracle Database would have to process SQL statements one at a time. Each SQL statement results in another call to the database and consequently higher performance overhead. In a networked environment, the overhead can be significant. Every time a SQL statement is issued, it must be sent over the network, creating more traffic. However, with PL/SQL, an entire block of statements can be sent to a database at one time. This can greatly reduce communication between an application and a database.</p>
<p>PL/SQL allows a number of constructs to be grouped into a single block and executed as a unit. These include:</p>
<ul>
<li>
<p>One or more SQL statements</p>
</li>
<li>
<p>Variable declarations</p>
</li>
<li>
<p>Assignment statements</p>
</li>
<li>
<p>Procedural control statements (<code>IF...THEN...ELSE</code> statements and loops)</p>
</li>
<li>
<p>Exception handling statements</p>
</li>
<li>
<p>Calls to other Oracle stored procedures and stored functions</p>
</li>
<li>
<p>Special PL/SQL features such as records, tables, and cursor <code>FOR</code> loops</p>
</li>
<li>
<p>Cursor variables</p>
</li>
</ul>
<div id="OOFOL164" class="sect2"><a id="sthref198"></a>
<h3 class="sect2">PL/SQL Integration with Oracle Objects for OLE</h3>
<p>Oracle Objects for OLE (OO4O) provides tight integration with PL/SQL stored procedures. OO4O supports PL/SQL stored procedures, PL/SQL tables, PL/SQL, cursors and so on. The PL/SQL bind variables are supported through the <code>OraParameter</code> <code>Add</code> method.</p>
<p>The stored procedure block is executed either through the <code>CreateSQL</code> method or the <code>ExecuteSQL</code> method.</p>
<p>Oracle Objects for OLE can return a cursor created in the stored procedure or anonymous PL/SQL block as a <code>READONLY</code> dynaset object.To do this, you must assign the cursor variable as an <code>OraParameter</code> object of type <code>ORATYPE_CURSOR</code>.</p>
<p>After executing the stored procedure, the <code>Value</code> property of this <code>OraParameter</code> object returns a read-only dynaset object.</p>
<p>This dynaset object can be treated the same as other dynaset objects.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="sermthod010.htm#CIHCDEJH">AddTable Method</a></p>
</li>
<li>
<p><a href="sermthod002.htm#CIHJHFAG">Add Method</a></p>
</li>
<li>
<p><a href="sermthod086.htm#CIHEEIEC">ExecuteSQL Method</a></p>
</li>
<li>
<p><a href="sermthod066.htm#BHBDJJIG">CreateSQL Method</a></p>
</li>
<li>
<p><a href="serprop140.htm#CHDCGBBG">Value Property</a></p>
</li>
<li>
<p><a href="serobjch020.htm#BABDIJAH">OraParameter Object</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BIICEGFC"></a>
<div id="OOFOL165" class="sect2">
<h3 class="sect2">Executing PL/SQL Blocks Using ExecuteSQL and CreateSQL</h3>
<p>In OO4O, you can use the <code>ExecuteSQL</code> or <code>CreateSQL</code> methods of the <code>OraDatabase</code> object to execute PL/SQL blocks, as the following example shows:</p>
<pre>
Set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
Set EmpDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
 
'Add EMPNO as an Input parameter and set its initial value. 
EmpDb.Parameters.Add "EMPNO", 7369, ORAPARM_INPUT 
EmpDb.Parameters("EMPNO").ServerType = ORATYPE_NUMBER 
 
'Add ENAME as an Output parameter and set its initial value. 
EmpDb.Parameters.Add "ENAME", 0, ORAPARM_OUTPUT 
EmpDb.Parameters("ENAME").ServerType = ORATYPE_VARCHAR2 
 
'Add SAL as an Output parameter 
EmpDb.Parameters.Add "SAL", 0, ORAPARM_OUTPUT 
EmpDb.Parameters("SAL").ServerType = ORATYPE_NUMBER 
 
'Add COMMISSION as an Output parameter and set its initial value. 
EmpDb.Parameters.Add "COMMISSION", 0, ORAPARM_OUTPUT 
EmpDb.Parameters("COMMISSION").ServerType = ORATYPE_NUMBER 
EmpDb.ExecuteSQL ("BEGIN SELECT ename, sal, comm INTO :ENAME, :SAL," &amp; _ 
             ":COMMISSION FROM emp WHERE empno = :EMPNO; END;") 
 
'display the values of Ename, Sal, Commission parameters 
MsgBox "Name: " &amp; EmpDb.Parameters("ENAME").Value 
MsgBox "Salary " &amp; EmpDb.Parameters("SAL").Value 
MsgBox "Commission: " &amp; EmpDb.Parameters("COMMISSION").Value 
</pre>
<p>The following example executes a PL/SQL block that calls a stored procedure using the <code>CreateSQL</code> method in OO4O. The procedure takes a department number as input and returns the name and location of the department.</p>
<p>This example is used for creating the stored procedure in the employee database.</p>
<pre>
CREATE OR REPLACE PACKAGE Department as 
PROCEDURE GetDeptName (inDeptNo IN NUMBER, outDeptName OUT VARCHAR2, 
                   outDeptLoc OUT VARCHAR2); 
END Department;
/
 
CREATE OR REPLACE PACKAGE BODY Department as 
PROCEDURE GetDeptName(inDeptNo IN NUMBER, outDeptName OUT VARCHAR2, 
                 outDeptLoc OUT VARCHAR2) is 
BEGIN 
   SELECT dname, loc into outDeptName, outDeptLoc from DEPT 
      WHERE deptno = inDeptNo; 
   END; 
END Department;
/ 
</pre>
<p>The following example executes the previously created procedure to get the name and location of the department where <code>deptno</code> is <code>10</code>.</p>
<pre>
Set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
Set EmpDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
empDb.Parameters.Add "DEPTNO", 10, ORAPARM_INPUT 
empDb.Parameters("DEPTNO").ServerType = ORATYPE_NUMBER 
empDb.Parameters.Add "DNAME", 0, ORAPARM_OUTPUT 
empDb.Parameters("DNAME").ServerType = ORATYPE_VARCHAR2 
empDb.Parameters.Add "DLOC", 0, ORAPARM_OUTPUT 
empDb.Parameters("DLOC").ServerType = ORATYPE_VARCHAR2 
Set PlSqlStmt = empDb.CreateSQL("Begin Department.GetDeptname" &amp; _ 
             "(:DEPTNO, :DNAME, :DLOC); end;", 0&amp;) 
 
'Display Department name and location 
MsgBox empDb.Parameters("DNAME").Value &amp; empDb.Parameters("DLOC").Value 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="sermthod086.htm#CIHEEIEC">ExecuteSQL Method</a></p>
</li>
<li>
<p><a href="sermthod066.htm#BHBDJJIG">CreateSQL Method</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABJAAAF"></a>
<div id="OOFOL166" class="sect2">
<h3 class="sect2">Returning PL/SQL Cursor Variables<a id="sthref199"></a><a id="sthref200"></a><a id="sthref201"></a></h3>
<p>PL/SQL cursor variables are mainly used for accessing one or more query result sets from PL/SQL blocks and stored procedures and functions. The <code>OraParameter</code> object in OO4O can be used to hold a PL/SQL cursor variable.</p>
<p>The <code>OraParameter</code> object representing a cursor variable should be of type <code>ORATYPE_CURSOR</code>, and can only be defined as an output variable. After the PL/SQL block is executed, the <code>Value</code> property of the <code>OraParameter</code> object contains a read-only <code>OraDynaset</code> object. This <code>OraDynaset</code> object can be used to scroll through the returned rows.</p>
<p>In some cases, it is better to use the <code>CreateSQL</code> method for executing PL/SQL procedures than the <code>ExecuteSQL</code> method. The <code>Refresh</code> method on the <code>OraSQLStmt</code> object can result in modified PL/SQL cursors. If the <code>CreateSQL</code> method is used, these modified cursors are automatically associated with the existing dynaset object, and no new dynaset object is created.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BIICEGFC">"Executing PL/SQL Blocks Using ExecuteSQL and CreateSQL"</a></div>
<p>You cannot set the SQL property of the dynaset object; this raises an error.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
PL/SQL stored procedures that contain cursors as table parameters are not supported.</div>
<p>You should call the <code>Remove</code> method on the parameter object. This helps in cleaning the dynaset object and local temporary cache files.</p>
<p>The following example contains a stored procedure that gets the cursors for the <code>emp</code> and <code>dept</code> tables and a small application that executes the procedure.</p>
<p><span class="bold">Stored Procedure</span></p>
<pre>
CREATE PACKAGE EmpAndDept AS
   cursor emp is select * from emp;
   cursor dept is select * from dept;
   TYPE EmpCurTyp IS REF CURSOR RETURN emp%ROWTYPE;
   TYPE DeptCurTyp IS REF CURSOR RETURN dept%ROWTYPE;
   PROCEDURE GetEmpAndDeptData (emp_cv OUT EmpCurTyp, 
                              dept_cv OUT DeptCurTyp);
END EmpAndDept;/
 
 
CREATE PACKAGE BODY EmpAndDept AS
   PROCEDURE GetEmpAndDeptData (emp_cv OUT EmpCurTyp, 
                                dept_cv OUT DeptCurTyp) IS
       BEGIN 
         OPEN emp_cv FOR SELECT * FROM emp;
         OPEN dept_cv FOR SELECT * FROM dept; END GetEmpAndDeptData;
END EmpAndDept;
/
</pre>
<p><span class="bold">Application</span></p>
<pre>
Set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
Set EmpDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
empDb.Parameters.Add "EMPCUR", 0, ORAPARM_OUTPUT 
empDb.Parameters("EMPCUR").serverType = ORATYPE_CURSOR 
empDb.Parameters.Add "DEPTCUR", 0, ORAPARM_OUTPUT 
empDb.Parameters("DEPTCUR").serverType = ORATYPE_CURSOR 
Set PlSqlStmt = empDb.CreateSql("Begin EmpAndDept.GetEmpAndDeptData (:EMPCUR," &amp; _
             ":DEPTCUR); end;", 0) 
Set EmpDynaset = empDb.Parameters("EmpCur").Value 
Set DeptDynaset = empDb.Parameters("DeptCur").Value 
MsgBox EmpDynaset.Fields("ENAME").Value 
MsgBox DeptDynaset.Fields("DNAME").Value 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="serobjch020.htm#BABDIJAH">OraParameter Object</a></p>
</li>
<li>
<p><a href="serprop115.htm#CHDDFGIE">ServerType Property</a></p>
</li>
<li>
<p><a href="serprop140.htm#CHDCGBBG">Value Property</a></p>
</li>
<li>
<p><a href="serobjch011.htm#BABJBBAI">OraDynaset Object</a></p>
</li>
<li>
<p><a href="serobjch024.htm#BABGAHBH">OraSQLStmt Object</a></p>
</li>
<li>
<p><a href="serprop038.htm#CEGEADIA">DynasetOption Property</a></p>
</li>
<li>
<p><a href="sermthod066.htm#BHBDJJIG">CreateSQL Method</a></p>
</li>
<li>
<p><a href="sermthod148.htm#CIHJFCGG">Refresh Method</a></p>
</li>
<li>
<p><a href="sermthod151.htm#CIHGDBFG">Remove Method</a></p>
</li>
<li>
<p><a href="sermthod079.htm#BHBHGEEE">DynasetCacheParams Method</a></p>
</li>
<li>
<p><a href="dcprop024.htm#CHDEEHGI">Recordset Property</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="OOFOL167" class="sect2"><a id="sthref202"></a>
<h3 class="sect2">Returning PL/SQL Tables<a id="sthref203"></a><a id="sthref204"></a><a id="sthref205"></a></h3>
<p>PL/SQL tables are mainly used for accessing arrays of PL/SQL data. The <code>OraParamArray</code> object in OO4O can be used to hold a PL/SQL cursor variable.</p>
<p>The <code>OraParamArray</code> object representing a table variable should be created first the using the <code>AddTable</code> method. Table values are accessed or set using the <code>Get_Value</code> and <code>Put_Value</code> methods of the <code>OraParamArray</code> object.</p>
<p>The PL/SQL procedure <code>GetEmpNamesInArray</code> returns an array of <code>ENAME</code> values for array of <code>EMPNO</code>s.</p>
<pre>
CREATE PACKAGE EmpNames AS 
    type NUMARRAY is table of NUMBER index by 
          BINARY_INTEGER; --Define EMPNOS array 
    type VCHAR2ARRAY is table of VARCHAR2(10) index by 
          BINARY_INTEGER; --Define ENAMES array 
    PROCEDURE GetEmpNamesInArray (ArraySize IN INTEGER, 
              inEmpnos IN NUMARRAY, outEmpNames OUT VCHAR2ARRAY); 
END EmpNames; /
 
 
CREATE PACKAGE BODY EmpNames AS 
    PROCEDURE GetEmpNamesInArray (ArraySize IN INTEGER, 
              inEmpnos IN NUMARRAY, outEmpNames OUT VCHAR2ARRAY) is 
    BEGIN 
    FOR I in 1..ArraySize loop 
        SELECT ENAME into outEmpNames(I) from EMP 
                       WHERE EMPNO = inEmpNos(I); 
    END LOOP; 
END; 
 
END EmpNames; /
 
</pre>
<p>The following example executes the previous procedure to get the <code>ename</code> table.</p>
<pre>
Set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
Set Empdb = OO4OSession.OpenDatabase("<span class="italic">Exampledb</span>", "scott/tiger", 0) 
Empdb.Parameters.Add "ArraySize", 3, ORAPARM_INPUT 
Empdb.Parameters.AddTable "EMPNOS", ORAPARM_INPUT, ORATYPE_NUMBER, 3, 22 
Empdb.Parameters.AddTable "ENAMES", ORAPARM_OUTPUT, ORATYPE_VARCHAR2, 3, 10
Set EmpnoArray = Empdb.Parameters("EMPNOS") 
Set EnameArray = Empdb.Parameters("ENAMES") 
 
'Initialize the newly created input parameter table EMPNOS 
EmpnoArray(0) = 7698 
EmpnoArray(1) = 7782 
EmpnoArray(2) = 7654 
Empdb.ExecuteSQL ("Begin EmpNames.GetEmpNamesInArray(:ArraySize," &amp; _ 
              ":EMPNOS, :ENAMES); End;") 
MsgBox EnameArray(0) 
MsgBox EnameArray(1) 
MsgBox EnameArray(2) 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="sermthod101.htm#BHBEJGHF">Get_Value Method</a></p>
</li>
<li>
<p><a href="sermthod145.htm#BHBFFJBC">Put_Value Method</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="OOFOL168" class="sect2"><a id="sthref206"></a>
<h3 class="sect2">Executing Data Definition Language Statements<a id="sthref207"></a><a id="sthref208"></a><a id="sthref209"></a></h3>
<p>Data Definition Language (DDL) statements manage schema objects in the database. DDL statements create new tables, drop old tables, and establish other schema objects. They also control access to schema objects. For example:</p>
<pre>
Set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
Set EmpDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
EmpDb.ExecuteSQL("create table employees (name VARCHAR2(20)," &amp; _
          "ssn VARCHAR2(12), empno NUMBER(6), mgr NUMBER(6), salary NUMBER(6)") 

EmpDb.ExecuteSQL("GRANT UPDATE, INSERT, DELETE ON employees TO donna") 
EmpDb.ExecuteSQL("REVOKE UPDATE ON employees FROM jamie") 
</pre>
<p>DDL statements also allow you to work with objects in Oracle Database, for example:</p>
<pre>
Set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
Set EmpDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0)  
EmpDb.ExecuteSQL("create type person_t as object (name VARCHAR2(30)," &amp; _
             "ssn VARCHAR2(12),address VARCHAR2(50))") 
EmpDb.ExecuteSQL("create table person_tab OF person_t") 
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBHFDHE"></a>
<div id="OOFOL169" class="sect1">
<h2 class="sect1">Transaction Control<a id="sthref210"></a><a id="sthref211"></a><a id="sthref212"></a></h2>
<p>A transaction is a logical unit of work that comprises one or more SQL statements executed by a single user. A typical example is transferring money from one bank account to another. Two operations take place:</p>
<ol>
<li>
<p>Money is taken out of one account.</p>
</li>
<li>
<p>Money is put into the other account.</p>
</li>
</ol>
<p>These operations need to be performed together. If one operation was completed but not the other (for example, if the network connection went down), the bank's books would not balance correctly.</p>
<p>Normally, when you execute an update method on a dynaset, the changes are committed to the database immediately. Each operation is treated as a distinct transaction. The <code>BeginTrans</code>, <code>CommitTrans</code>, and <code>Rollback</code> transactional control methods of the <code>OraSession</code> object allow operations to be grouped into larger transactions.</p>
<p>The <code>BeginTrans</code> method tells the session that you are starting a group of operations. The <code>CommitTrans</code> method makes the entire group of operations permanent. The <code>Rollback</code> method cancels the entire group. The <code>CommitTrans</code> and <code>Rollback</code> methods end the transaction, and the program returns to normal operation: one transaction for each operation. Experienced Oracle Database users should note the following differences between the operation of Oracle Objects for OLE and many Oracle Database tools:</p>
<ul>
<li>
<p>Oracle Database tools, such as SQL*Plus, execute as if the <code>BeginTrans</code> method was called when the tool was started. This means that updates are not committed immediately; they are held until a commit or rollback is executed.</p>
</li>
<li>
<p>SQL*Plus starts a new transaction every time a commit or rollback is executed.</p>
</li>
<li>
<p>SQL*Plus does not take a row lock in the case of a failed <code>UPDATE</code> or <code>DELETE</code> statement. However, in the case of OO4O, if <code>UPDATE</code> or <code>DELETE</code> methods fail on a given row in a dynaset in a global transaction (such as cases in which you issued a <code>BeginTrans</code> method), be aware that locks remain on those rows. These locks persist until you call a <code>CommitTrans</code> or <code>Rollback</code> method.</p>
</li>
</ul>
<p>If you are connected to more than one database and use the transaction methods, be aware that Oracle Objects for OLE commits each database separately. This is <span class="italic">not</span> the same as the two-phase commit that Oracle Database provides. If your application needs to guarantee data integrity across databases, connect to a single database and then access additional databases by way of the Oracle Database link feature. This method gives you the benefit of the Oracle Database two-phase commit. Consult your Oracle Database documentation for more information about two-phase commit, database links, and distributed transactions.</p>
<p>Transactions apply only to the Data Manipulation Language (DML) portion of the SQL language (such as <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> statements). Transactions do not apply to the Data Control Language (DCL) or Data Definition Language (DDL) portions (such as <code>CREATE</code>, <code>DROP</code>, and <code>ALTER</code> statements) of the SQL language. DCL and DDL commands always force a commit, which in turn commits everything done previously.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="sermthod024.htm#CIHDADDI">BeginTrans Method</a></p>
</li>
<li>
<p><a href="sermthod042.htm#CIHFEHJI">CommitTrans Method</a></p>
</li>
<li>
<p><a href="serobjch009.htm#BABGFCIG">OraConnection Object</a></p>
</li>
<li>
<p><a href="serobjch023.htm#BABFCBJH">OraSession Object</a></p>
</li>
<li>
<p><a href="sermthod154.htm#CIHJDIDG">ResetTrans Method</a></p>
</li>
<li>
<p><a href="sermthod155.htm#CIHIEADG">Rollback Method</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="BGBEDECE"></a>
<div id="OOFOL170" class="sect1">
<h2 class="sect1">Microsoft Transaction Server Support<a id="sthref213"></a><a id="sthref214"></a><a id="sthref215"></a></h2>
<p>Oracle database transactions initiated in Oracle Objects for OLE (OO4O) automatically participate in global transactions coordinated by the Microsoft Distributed Transaction Coordinator (DTC) in the Microsoft Transaction Server (MTS), if all the following conditions are true:</p>
<ul>
<li>
<p>The <code>OpenDatabase</code> method of <code>OraSession</code> uses the <code>ORADB_ENLIST_IN_MTS</code> option.</p>
</li>
<li>
<p>OO4O determines that it is running in the context of a global transaction in MTS.</p>
</li>
<li>
<p>Oracle Service for Microsoft Transaction Server is installed and running.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink NTMTS" href="../e26104/toc.htm"><span class="italic">Oracle Services for Microsoft Transaction Server Developer's Guide</span></a></p>
</li>
<li>
<p><a href="sermthod141.htm#CIHCBJHD">OpenDatabase Method</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="BGBEAFID"></a>
<div id="OOFOL171" class="sect1">
<h2 class="sect1">Asynchronous Processing</h2>
<p>In OO4O Automation, you can execute commands using asynchronous processing. This enables you to execute SQL statements and PL/SQL blocks in nonblocking mode. Nonblocking mode is an option of the <code>CreateSQL</code> method.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sermthod066.htm#BHBDJJIG">CreateSQL Method</a></div>
<div id="OOFOL172" class="sect2"><a id="sthref216"></a>
<h3 class="sect2">Nonblocking Mode</h3>
<p>In nonblocking mode, control is returned to the application immediately even if the execution is not complete. This allows the application to execute other tasks that are not dependent on the results of the last execution.</p>
<p>To enable nonblocking mode, pass in the <code>ORASQL_NONBLK</code> option to the <code>CreateSQL</code> method while creating the <code>OraSQLStmt</code> object. If this mode is not specified, the <code>OraSQLStmt</code> object executes in blocking mode (default behavior).</p>
<pre>
'Create the statement in NON-BLOCKING mode 
OraSQL = Oradb.CreateSQL("delete from emp",ORASQL_NONBLK) 
</pre>
<p>An <code>OraSQLStmt</code> object created in nonblocking mode executes in nonblocking mode for the lifetime of the object.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="serobjch024.htm#BABGAHBH">OraSQLStmt Object</a></div>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BABHFGJJ">Checking the Status of a Nonblocking Operation</a></p>
</li>
<li>
<p><a href="#BABGCBBF">Canceling a Nonblocking Operation</a></p>
</li>
<li>
<p><a href="#BGBEJCCH">Executing Multiple Queries in Asynchronous Mode</a></p>
</li>
<li>
<p><a href="#BABGHCHI">Limitations on Nonblocking</a></p>
</li>
</ul>
<a id="BABHFGJJ"></a>
<div id="OOFOL173" class="sect3">
<h4 class="sect3">Checking the Status of a Nonblocking Operation</h4>
<p>To determine the status of an <code>OraSQLStmt</code> object executing asynchronously, applications need to poll the <code>NonBlockingState</code> property. The <code>NonBlockingState</code> property returns <code>ORASQL_STILL_EXECUTING</code> if execution is still pending or <code>ORASQL_SUCCESS</code> if execution has completed successfully.</p>
<p>Any failures are thrown as exceptions.</p>
<p>On successful completion, the output parameters, if any, are placed in the bound parameter buffers. The application can then access the parameters as in the blocking case.</p>
<p>The following example demonstrates the usage of the <code>NonBlockingState</code> property.</p>
<pre>
Dim OraDatabase as OraDatabase 
Dim OraStmt as OraSQLStmt 
Dim stat as long 
Dim OraSess as OraSession 
Set OraSess = CreateObject("OracleInProcServer.XOraSession") 
Set OraDatabase =OraSess.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
 
'execute the select statement with NONBLOCKING mode on 
set OraStmt = OraDatabase.CreateSQL ("update emp set sal = sal + 1000", _
            ORASQL_NONBLK)
 
'Check if the call has completed 
stat = OraStmt.NonBlockingState 
while stat = ORASQL_STILL_EXECUTING 
MsgBox "Asynchronous Operation under progress" 
stat = OraStmt.NonBlockingState 
wend 
MsgBox "Asynchronous Operation completed successfully" 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="serprop092.htm#CEGEHBIA">NonBlockingState Property</a></div>
</div>
<!-- class="sect3" -->
<a id="BABGCBBF"></a>
<div id="OOFOL174" class="sect3">
<h4 class="sect3">Canceling a Nonblocking Operation</h4>
<p>You can cancel a nonblocking operation that is underway by calling the <code>Cancel</code> method on the <code>OraSQLStmt</code> object that is executing the asynchronous call.</p>
<pre>
Dim OraDatabase as OraDatabase 
Dim OraStmt as OraSQLStmt 
Dim stat as long 
Dim OraSess as OraSession 
Set OraSess = CreateObject("OracleInProcServer.XOraSession") 
Set OraDatabase =OraSess.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
 
'execute the select statement with NONBLOCKING mode on 
set OraStmt = OraDatabase.CreateSQL ("update emp set sal = sal + 1000", _ 
         ORASQL_NONBLK)
 
'Check if the call has completed 
stat = OraStmt.NonBlockingState 
if stat = ORASQL_STILL_EXECUTING 
MsgBox "Cancelling the asynchronous operation that is underway" 
OraStmt.Cancel 
End if 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sermthod025.htm#BHBEGDGC">Cancel Method</a></div>
</div>
<!-- class="sect3" -->
<a id="BGBEJCCH"></a>
<div id="OOFOL175" class="sect3">
<h4 class="sect3">Executing Multiple Queries in Asynchronous Mode</h4>
<p>Multiple queries can be executed in asynchronous mode. In this example, while the first connection is executing a non-blocking call, the second connection executes a SQL statement in blocking mode.</p>
<pre>
Dim OraSess as OraSession 
Dim OraServ as OraServer 
Dim OraDb1 as OraDatabase 
Dim OraDb2 as OraDatabase 
Dim OraStmtnonblk as OraSQLStmt 
Dim OraStmtblk as OraSQLStmt 
Dim stat as long 
set OraSess = CreateObject("OracleInProcServer.XOraSession") 
set OraDb1 = OraSess.OpenDatabase("exampledb","scott/tiger",0&amp;) 
Set OraServ = CreateObject("OracleInProcServer.XOraServer") 
set OraDb2 = OraServ.OpenDatabase("<span class="italic">Exampledb</span>","scott/tiger",0&amp;) 
 
'execute the select statement with NONBLOCKING mode on 
set OraStmtnonblk = OraDb1.CreateSQL ("update emp set sal = sal + 1000", _
             ORASQL_NONBLK) 
 
'Check if the call has completed 
stat = OraStmt.NonBlockingState 
while stat = ORASQL_STILL_EXECUTING 
  MsgBox "Asynchronous Operation under progress" 
  stat = OraStmt.NonBlockingState 
wend 
  MsgBox "Asynchronous Operation completed successfully" 
 
'execute on the second connection in BLOCKING mode 
set OraStmtblk = OraDb2.CreateSQL ("update emp set sal = sal + 500",0&amp;) 
</pre></div>
<!-- class="sect3" -->
<a id="BABGHCHI"></a>
<div id="OOFOL176" class="sect3">
<h4 class="sect3">Limitations on Nonblocking</h4>
<p>The following are limitations on nonblocking mode:</p>
<ul>
<li>
<p>When a nonblocking operation is running on an <code>OraSQLStmt</code> object, you cannot change the properties or attributes of this object, as it can affect the execution that is in progress.</p>
</li>
<li>
<p>You cannot create an <code>OraSQLStmt</code> object in nonblocking mode if there are other objects that are already instantiated on the connection. In other words, creating an <code>OraSQLStmt</code> object to execute in nonblocking mode only succeeds if no other objects, such as <code>OraDynaset</code> and <code>OraAQ</code>, are currently active on the same database session. The only exceptions are <code>OraParameter</code> and <code>OraObject</code> objects. These are permitted, as they may be required for the nonblocking execution.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BGBEJCCH">"Executing Multiple Queries in Asynchronous Mode"</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2275">
<tr>
<td class="cellalignment2284">
<table class="cellalignment2280">
<tr>
<td class="cellalignment2279"><a href="clients.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2279"><a href="advfeat.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2286">
<table class="cellalignment2278">
<tr>
<td class="cellalignment2279"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2279"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2279"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2279"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2279"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2279"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
