<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Quick Tour with Visual Basic</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-08-09T14:48:30Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Objects for OLE Developer's Guide" />
<meta name="dcterms.identifier" content="E17727-04" />
<meta name="dcterms.isVersionOf" content="OOFOL" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="tips.htm" title="Previous" type="text/html" />
<link rel="Next" href="codewiz.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e17727.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/438</span> <!-- End Header -->
<div id="OOFOL0006" class="chapter"><a id="CCHCCJDC"></a>
<h1 class="chapter"><span class="secnum">6</span> Quick Tour with Visual Basic</h1>
<p><a id="sthref516"></a><a id="sthref517"></a><a id="sthref518"></a><a id="sthref519"></a>This quick tour is designed to get you started with Oracle Objects for OLE for Visual Basic. An example application, the employee database application, demonstrates how to program basic database operations, such as navigating through data and, adding, modifying, and querying records. A more advanced section demonstrates how to perform batch inserts using parameter arrays and SQL statement objects. This quick tour and example application assume that the <code>Scott</code>/<code>Tiger</code> schema is installed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="clients.htm#CIHFAFDD">"Demonstration Schema and Code Examples"</a></div>
<p>The entire code for this example application is provided in the <code><span class="codeinlineitalic">ORACLE_BASE\\ORACLE_HOME</span></code><code>\OO4O\VB\SAMPLES\QT\</code> directory.</p>
<p>This quick tour covers the following topics:</p>
<ul>
<li>
<p><a href="#BABDICDD">Introduction</a></p>
</li>
<li>
<p><a href="#BABBAFEJ">Getting Started: Steps to Accessing Oracle Data</a></p>
</li>
<li>
<p><a href="#BABGJCEF">Programming a Data Entry Form</a></p>
</li>
<li>
<p><a href="#BABEFFIF">Programming a Batch Form</a></p>
</li>
</ul>
<a id="BABDICDD"></a>
<div id="OOFOL283" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Introduction</h2>
<p>This section introduces the employee database application and the two Visual Basic forms that users interact with to use the application.</p>
<div id="OOFOL284" class="sect2"><a id="sthref520"></a>
<h3 class="sect2">About the Employee Database Application</h3>
<p>The employee database application lets the user do the following:</p>
<ul>
<li>
<p>Browse through data</p>
</li>
<li>
<p>Add records</p>
</li>
<li>
<p>Update records</p>
</li>
<li>
<p>Query the database</p>
</li>
<li>
<p>Add records in a batch operation</p>
</li>
</ul>
<p>To provide these functions, this example uses the following forms:</p>
<ul>
<li>
<p><a href="#CCHHBJJE">Employee Form</a></p>
</li>
<li>
<p><a href="#CCHCGCCH">Batch Insert Form</a></p>
</li>
</ul>
<a id="CCHHBJJE"></a>
<div id="OOFOL285" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Employee Form</h4>
<p>The Employee Form displays the fields of the database <code>EMP</code> table and has functional buttons that allow the user to browse, add, update, and query records.</p>
<p><a href="#BABJHDHA">Figure 6-1</a> shows the Employee Form.</p>
<div id="OOFOL286" class="figure">
<p class="titleinfigure"><a id="BABJHDHA"></a>Figure 6-1 Employee Form</p>
<img width="376" height="422" src="img/emp8.gif" alt="Description of Figure 6-1 follows" /><br />
<a id="sthref521" href="img_text/emp8.htm">Description of "Figure 6-1 Employee Form"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BABEFGBD">"Completed Sample Form_Load Procedure"</a> for the code for the <code>Form_Load</code> procedure that initializes the Employee Form</p>
</li>
<li>
<p><a href="#BABGJCEF">"Programming a Data Entry Form"</a> for a detailed description of the Employee Form and code for the navigational buttons</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="CCHCGCCH"></a>
<div id="OOFOL287" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Batch Insert Form</h4>
<p>The Batch Insert Form allows users to enter records in a batch operation.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABEFFIF">"Programming a Batch Form"</a> for a detailed description of the Batch Insert Form and code for its commands</div>
<p><a href="#BABCHDCD">Figure 6-2</a> shows the Batch Insert Form.</p>
<div id="OOFOL288" class="figure">
<p class="titleinfigure"><a id="BABCHDCD"></a>Figure 6-2 Batch insert Form</p>
<img width="433" height="419" src="img/batch2.gif" alt="Description of Figure 6-2 follows" /><br />
<a id="sthref522" href="img_text/batch2.htm">Description of "Figure 6-2 Batch insert Form"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABBAFEJ"></a>
<div id="OOFOL289" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Getting Started: Steps to Accessing Oracle Data</h2>
<p>Before server data can be manipulated, the application must accomplish the four steps that are described in this section. Sample code for this example is provided in <a href="#BABEFGBD">"Completed Sample Form_Load Procedure"</a>.</p>
<ol>
<li>
<p>Start the Oracle In-Process Automation Server.</p>
<p>The Oracle In-Process Server (OIP) provides the interface between the Visual Basic application and Oracle Database. To start the Oracle In-Process Server, you must create an <code>OraSession</code> object using the Visual Basic <code>CreateObject()</code> function, as follows:</p>
<pre>
Set OraSession = CreateObject("OracleInProcServer.XOraSession")
</pre>
<p>When creating the <code>OraSession</code> object, the argument supplied to the <code>CreateObject()</code> function must always be <code>OracleInProcServer.XOraSession</code>. The left side of the argument defines the application name as registered in your system, in this case, <code>OracleInProcServer</code>. The right side identifies the type of object to create, in this case, the <code>XOraSession</code> object. Executing this command starts the Oracle In-Process Server.</p>
</li>
<li>
<p>Connect to Oracle Database.</p>
<p>After the OIP server is running, you can connect to a local or remote Oracle database. To do so, you must create the <code>OraDatabase</code> object as follows:</p>
<pre>
Set OraDatabase = OraSession.OpenDatabase("Exampledb", "scott/tiger", _
       ORADB_DEFAULT)
</pre>
<p>The <code>OraSession.OpenDatabase()</code> method creates the <code>OraDatabase</code> object. The method call must specify the database name, the connection string, and a bit flag that represents the database mode. The constant <code>ORADB_DEFAULT</code> represents the default database mode. When Visual Basic executes this line, a connection is created to the specified database.</p>
</li>
<li>
<p>Create a global <code>OraDynaset</code> object to manipulate the data.</p>
<p>Oracle Objects for OLE lets users browse and update data using an object called a dynaset.</p>
<p>The Employee application needs a global dynaset that the rest of the program can access. The <code>OraDatabase.CreateDynaset()</code> method creates the dynaset specifying a valid SQL <code>SELECT</code> statement. In the example, the statement selects all the rows from the <code>emp</code> table and assigns the resulting dynaset to the global <code>EmpDynaset</code> variable as follows:</p>
<pre>
Set EmpDynaset = OraDatabase.CreateDynaset("select * from emp", _ 
     ORADYN_DEFAULT)
</pre>
<p>The <code>CreateDynaset()</code> method returns a pointer to the result of the SQL SELECT statement.</p>
<p>The <code>ORADYN_DEFAULT</code> parameter value specifies the default dynaset state. In the default state, Oracle Objects for OLE sets unset fields to <code>NULL</code> while adding records using the <code>AddNew</code> method. This behavior is preferable because the <code>emp</code> table has no column defaults defined. You can also specify other options to allow server column defaults when adding records.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sermthod054.htm#CIHFHBEI">"CreateDynaset Method"</a></div>
</li>
<li>
<p>Refresh the Employee Form with dynaset data.</p>
<p>The Employee Form displays database records one row at a time. Changes to the current row, such as those caused by navigating to a different row, must be reflected on the screen. The <code>EmpRefresh()</code> subroutine updates fields with the current dynaset row. For <code>NULL</code> field values, empty strings are displayed.</p>
<p>The following is an example of an <code>EmpRefresh()</code> subroutine:</p>
<pre>
  Private Sub EmpRefresh()
 'check if the current dynaset row is valid
 If EmpDynaset.BOF &lt;&gt; True And EmpDynaset.EOF &lt;&gt; True Then
 
  txtEmpno = EmpDynaset.Fields("empno").Value
  
  ' we can't display nulls, so display ""  for NULL fields
  If Not IsNull(EmpDynaset.Fields("ename").Value) Then
    txtEname = EmpDynaset.Fields("ename").Value
    Else
      txtEname = ""
    End If
    
  If Not IsNull(EmpDynaset.Fields("job").Value) Then
    txtJob = EmpDynaset.Fields("job").Value
    Else
      txtJob = ""
    End If
    
  'check if mgr=nul
  If Not IsNull(EmpDynaset.Fields("mgr").Value) Then
   txtMgr = EmpDynaset.Fields("mgr").Value
   Else
     txtMgr = ""
   End If
  
  If Not IsNull(EmpDynaset.Fields("hiredate").Value) Then
    txtHireDate = EmpDynaset.Fields("hiredate").Value
  Else
    txtHireDate = ""
  End If
  
  If Not IsNull(EmpDynaset.Fields("hiredate").Value) Then
    txtSal = EmpDynaset.Fields("sal").Value
  Else
    txtSal = ""
   End If
    
  'check if comm=nul
  If Not IsNull(EmpDynaset.Fields("comm").Value) Then
   txtComm = EmpDynaset.Fields("comm").Value
  Else
   txtComm = ""
  End If
 
  txtDeptno = EmpDynaset.Fields("deptno").Value
 
'if the current dynaset row is invalid, display nothing
 Else
 
  txtEmpno = ""
  txtEname = ""
  txtJob = ""
  txtMgr = ""
  txtHireDate = ""
  txtSal = ""
  txtComm = ""
  txtDeptno = ""
 
 End If
 
End Sub
</pre></li>
</ol>
<a id="BABEFGBD"></a>
<div id="OOFOL290" class="sect2">
<h3 class="sect2">Completed Sample Form_Load Procedure</h3>
<p>In the employee application described in the previous section, the <code>Form_Load()</code> procedure creates the OIP server, connects to the database, creates a global dynaset, and calls the <code>EmpRefresh</code> function to display the field values on the Employee Form. The following is an example of a <code>Form_Load()</code> procedure:</p>
<pre>
Private Sub Form_Load()
'OraSession and OraDatabase are global
 Set OraSession = CreateObject("OracleInProcServer.XOraSession")
 Set OraDatabase = OraSession.OpenDatabase("Exampledb", "scott/tiger", 0&amp;)
 Set EmpDynaset = OraDatabase.CreateDynaset("select * from emp", 0&amp;) 
 
 Call EmpRefresh
 
End Sub
</pre>
<p>The following variables must be defined globally in <code>EMP_QT.BAS</code>:</p>
<pre>
Global OraSession As Object
Global OraDatabase As Object
Global EmpDynaset As Object
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABGJCEF"></a>
<div id="OOFOL291" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Programming a Data Entry Form</h2>
<p>This section describes the Employee Form in detail and then describes the functions that it uses.</p>
<div id="OOFOL292" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref523"></a>
<h3 class="sect2">About the Employee Form</h3>
<p>The Employee form displays the fields of the database <code>EMP</code> table and has functional buttons that allow the user to browse, add, update, and query records.</p>
<p>Each field corresponds to a column in the database <code>EMP</code> table. The Employee field (<code>ENAME</code>) is the indexed column and is mandatory for each record. The field data types and sizes are defined as follows in the <code>EMP</code> table:</p>
<pre>
Name                     Null?       Type
-----------------------   ----------  --------------------------
EMPNO                     NOT NULL    NUMBER(4)
ENAME                                 VARCHAR2(10)
JOB                                   VARCHAR2(9)
MGR                                   NUMBER(4)
HIREDATE                              DATE
SAL                                   NUMBER(7,2)
COMM                                  NUMBER(7,2)
DEPTNO                    NOT NULL    NUMBER(2)
</pre>
<p>The Employee Number (<code>EMPNO</code>) and Department (<code>DEPTNO</code>) columns are <code>NOT</code> <code>NULL</code>, and, therefore, always require a value when a record is added. The length of each field is enforced by setting the <code>MaxLength</code> property of each <code>TextBox</code> to the appropriate number.</p>
<p><a href="#BABBBJGI">Figure 6-3</a> shows the Employee Form.</p>
<div id="OOFOL293" class="figure">
<p class="titleinfigure"><a id="BABBBJGI"></a>Figure 6-3 Employee Form</p>
<img width="376" height="422" src="img/emp8.gif" alt="Description of Figure 6-3 follows" /><br />
<a id="sthref524" href="img_text/emp8.htm">Description of "Figure 6-3 Employee Form"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The initial code for the actual <code>Form_Load</code> procedure is provided in <a href="#BABEFGBD">"Completed Sample Form_Load Procedure"</a>.</p>
<p>The Employee form is initialized by the <code>Form_Load()</code> procedure and includes the following features:</p>
<ul>
<li>
<p><a href="#BABHIGIH">Navigating Through Data</a></p>
</li>
<li>
<p><a href="#BABEGBHJ">Adding Records</a></p>
</li>
<li>
<p><a href="#BABJHIII">Updating Records</a></p>
</li>
<li>
<p><a href="#BABJEACJ">Deleting Records</a></p>
</li>
<li>
<p><a href="#BABJICEG">Querying the Database</a></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABHIGIH"></a>
<div id="OOFOL294" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Navigating Through Data</h3>
<p>Database applications typically require that the user be able to view data in the database. The Employee form has four buttons that let the user scroll through data. <a href="#BABEEIAA">Table 6-1</a> lists the buttons, what they do, which dynaset move method enables the action of the button, and where to look for further information.</p>
<div id="OOFOL295" class="tblformal">
<p class="titleintable"><a id="sthref525"></a><a id="BABEEIAA"></a>Table 6-1 Navigational Buttons and Dynaset Move Methods</p>
<table class="cellalignment2287" title="Navigational Buttons and Dynaset Move Methods" summary="rows contain navigational buttons: first column is name, second column activity, third column is method, fourth column is a link to further information" dir="ltr">
<thead>
<tr class="cellalignment2276">
<th class="cellalignment2283" id="r1c1-t6">Button</th>
<th class="cellalignment2283" id="r1c2-t6">Action</th>
<th class="cellalignment2283" id="r1c3-t6">Method</th>
<th class="cellalignment2283" id="r1c4-t6">See...</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment2276">
<td class="cellalignment2284" id="r2c1-t6" headers="r1c1-t6">
<p><code>|&lt;</code></p>
</td>
<td class="cellalignment2284" headers="r2c1-t6 r1c2-t6">
<p>Moves to the first record</p>
</td>
<td class="cellalignment2284" headers="r2c1-t6 r1c3-t6">
<p><code>MoveFirst</code></p>
</td>
<td class="cellalignment2284" headers="r2c1-t6 r1c4-t6">
<p><a href="#CCHHHEFC">Moving to First or Last Rows</a></p>
</td>
</tr>
<tr class="cellalignment2276">
<td class="cellalignment2284" id="r3c1-t6" headers="r1c1-t6">
<p><code>&lt;</code></p>
</td>
<td class="cellalignment2284" headers="r3c1-t6 r1c2-t6">
<p>Moves to the previous record</p>
</td>
<td class="cellalignment2284" headers="r3c1-t6 r1c3-t6">
<p><code>MovePrevious</code></p>
</td>
<td class="cellalignment2284" headers="r3c1-t6 r1c4-t6">
<p><a href="#CCHJEDJE">Moving to the Previous Row</a></p>
</td>
</tr>
<tr class="cellalignment2276">
<td class="cellalignment2284" id="r4c1-t6" headers="r1c1-t6">
<p><code>&gt;</code></p>
</td>
<td class="cellalignment2284" headers="r4c1-t6 r1c2-t6">
<p>Moves to the next record</p>
</td>
<td class="cellalignment2284" headers="r4c1-t6 r1c3-t6">
<p><code>MoveNext</code></p>
</td>
<td class="cellalignment2284" headers="r4c1-t6 r1c4-t6">
<p><a href="#CCHDEGHA">Moving to the Next Row</a></p>
</td>
</tr>
<tr class="cellalignment2276">
<td class="cellalignment2284" id="r5c1-t6" headers="r1c1-t6">
<p><code>&gt;|</code></p>
</td>
<td class="cellalignment2284" headers="r5c1-t6 r1c2-t6">
<p>Moves to the last record</p>
</td>
<td class="cellalignment2284" headers="r5c1-t6 r1c3-t6">
<p><code>MoveLast</code></p>
</td>
<td class="cellalignment2284" headers="r5c1-t6 r1c4-t6">
<p><a href="#CCHHHEFC">Moving to First or Last Rows</a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>To enable navigation through the records of the Employee database, you must first create a global dynaset that selects all the records (rows). Then use the dynaset move methods to program the navigation buttons.</p>
<a id="CCHHHEFC"></a>
<div id="OOFOL296" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Moving to First or Last Rows</h4>
<p>To enable a move to the first row of a dynaset, use the <code>MoveFirst</code> method. Then call the <code>EmpRefresh()</code> routine to refresh the data in the Employee form.</p>
<p>The following example code shows the first-click event procedure for the employee example:</p>
<pre>
Private Sub cmdFirst_Click() 
 EmpDynaset.MoveFirst
 Call EmpRefresh
 
End Sub
</pre>
<p>For a move to the last row, use the <code>MoveLast</code> method. Then, call the <code>EmpRefresh()</code> routine to refresh the data in the Employee form.</p>
<p>The following example code shows the last-click event procedure for the employee example:</p>
<pre>
Private Sub cmdLast_Click()
 
 EmpDynaset.MoveLast
 Call EmpRefresh
 
End Sub
</pre></div>
<!-- class="sect3" -->
<a id="CCHJEDJE"></a>
<div id="OOFOL297" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Moving to the Previous Row</h4>
<p>Navigation is possible to any row of a dynaset. If a user is positioned in the middle of a dynaset (that is, the current row is not the first row), the <code>MovePrevious</code> method enables navigation to the previous row.</p>
<p>However, when a user is positioned on the first row (current row is the first row) and executes the <code>MovePrevious</code> method, the beginning-of-file (BOF) condition becomes <code>TRUE</code> and the current row becomes invalid. In this case, the current row must be reset to the first row using the <code>MoveFirst</code> method.</p>
<p>The following example code shows the click-event procedure for the Previous button:</p>
<pre>
Private Sub cmdPrevious_Click()
 
 If EmpDynaset.BOF &lt;&gt; True Then
  EmpDynaset.DbMovePrevious
  If EmpDynaset.BOF = True Then
   MsgBox WarnFirstEmp$
   EmpDynaset.DbMoveFirst
  End If
 End If
</pre></div>
<!-- class="sect3" -->
<a id="CCHDEGHA"></a>
<div id="OOFOL298" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Moving to the Next Row</h4>
<p>If a user is positioned in the middle of a dynaset (that is, the current row is not the last row), the <code>MoveNext</code> method enables navigation to the next row.</p>
<p>However, when a user is positioned on the last row (current row is the last row) and then executes <code>MoveNext</code>, the end-of-file condition (EOF) becomes <code>TRUE</code> and the current row becomes invalid. In this case, the current row must be reset to the last row using the <code>MoveLast</code> method.</p>
<p>The following example code shows the click-event procedure for the Next button:</p>
<pre>
Private Sub cmdNext_Click()
 
 If EmpDynaset.EOF &lt;&gt; True Then
  EmpDynaset.DbMoveNext
  If EmpDynaset.EOF = True Then
   MsgBox WarnLastEmp$
   EmpDynaset.DbMoveLast
  End If
 End If
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABEGBHJ"></a>
<div id="OOFOL299" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Adding Records</h3>
<p>In the example application, the following buttons allow users to add employee records to the database:</p>
<ul>
<li>
<p>Add</p>
</li>
<li>
<p>Commit</p>
</li>
</ul>
<p>To add a record, the user clicks on the Add button, enters the new fields in the text boxes, and then clicks the Commit button to save the data to the database.</p>
<div id="OOFOL300" class="sect3"><a id="sthref526"></a>
<h4 class="sect3">Coding the Add Button</h4>
<p>The Add event procedure must perform the following steps:</p>
<ol>
<li>
<p>Clear the fields on the form.</p>
</li>
<li>
<p>Disable the Add button.</p>
</li>
<li>
<p>Enable the Commit button.</p>
</li>
<li>
<p>Let the user enter new field values.</p>
</li>
</ol>
<p>The following example code shows the Add event procedure for the Add button:</p>
<pre>
Private Sub AddNew_Click()
'Blank out the fields
  txtEmpno = ""
  txtEname = ""
  txtJob = ""
  txtMgr = ""
  txtHireDate = ""
  txtSal = ""
  txtComm = ""
  txtDeptno = ""
    
'Disable the Add button and enable the commit button
  AddNew.Enabled = False
  Commit.Enabled = True
'Disable the navigation buttons
  DisableNavButtons
'Set doadd to true for commit procedure
  DoAdd = True
End Sub
</pre>
<p>When the <code>AddNew_Click()</code> method exits, control returns to the Employee Form where the user enters values in the fields.</p>
</div>
<!-- class="sect3" -->
<div id="OOFOL301" class="sect3"><a id="sthref527"></a>
<h4 class="sect3">Coding the Commit Button (Add)</h4>
<p>To commit an addition, you must place the dynaset in add mode using the <code>AddNew</code> method. Then, you assign the new data to the dynaset fields and update the database using the <code>Update</code> method. To make the program robust, the software validates some fields before adding them to the database.</p>
<p>The <code>Commit_Click()</code> event procedure for adding records must do the following:</p>
<ol>
<li>
<p>Check that the Employee Number and Department fields are not null.</p>
</li>
<li>
<p>Check that the new Employee Number is not a duplicate entry.</p>
<p>Steps 1 and 2 are performed by the <code>DoValidationChecks()</code> function which is described following the <code>Commit_Click()</code> .</p>
</li>
<li>
<p>Place the dynaset in add mode using the <code>AddNew</code> method.</p>
</li>
<li>
<p>Assign entered data to dynaset fields using the <code>Fields().Value</code> property. This step is performed by the <code>UpdateDynasetFields</code> function.</p>
</li>
<li>
<p>Update the database with new records, using the <code>Update</code> method.</p>
</li>
<li>
<p>Disable the Commit button.</p>
</li>
<li>
<p>Enable the Add button.</p>
</li>
</ol>
<p>The code for the <code>Commit</code> function is broken into the following routines:</p>
<ul>
<li>
<p><a href="#CCHJEDHH">"Commit_Click Event Procedure (Add)"</a></p>
</li>
<li>
<p><a href="#BABFFIHB">"DoValidationChecks( ) Function"</a></p>
</li>
<li>
<p><a href="#BABBDGBD">"UpdateDynasetFields( ) Function"</a></p>
</li>
</ul>
<a id="CCHJEDHH"></a>
<div id="OOFOL302" class="sect4">
<h5 class="sect4">Commit_Click Event Procedure (Add)</h5>
<p>The following is a typical <code>Commit_Click()</code> event procedure for adding records:</p>
<pre>
Private Sub Commit_Click()
 
On Error GoTo err_commit
 
ErrMsg = ""
'Do validation checks on entered data
If DoValidationChecks Then 'If validation checks have passed
    
'Add the new record to dynaset
EmpDynaset.AddNew
 
'Update the dynaset fields and then update database if there is no error.
If UpdateDynasetFields Then

'Update the database
  EmpDynaset.Update
 
Commit.Enabled = False
AddNew.Enabled = True
 
Exit Sub
 
err_commit:
    If ErrMsg &lt;&gt; "" Then
        MsgBox ErrMsg
    Else
        MsgBox Error$
    End If
 
End Sub
</pre></div>
<!-- class="sect4" -->
<a id="BABFFIHB"></a>
<div id="OOFOL303" class="sect4">
<h5 class="sect4">DoValidationChecks( ) Function</h5>
<p>To check for duplicate entries as suggested in Step 2, you must create a local dynaset with the <code>NOCACHE</code> option, using a SQL statement that counts the rows matching the entered Employee Number field. If a match is found (row count greater than 0), the entered employee number is a duplicate entry and an error is displayed. In this case, because the SQL <code>SELECT</code> statement returns only a number, creating the dynaset without a cache is a more efficient error check than the server finding a duplicate entery.</p>
<p><code>DoValidationChecks()</code> returns <code>True</code> if the entered data is valid; otherwise, it returns <code>False</code>.</p>
<pre>
Function DoValidationChecks() As Boolean
 
Dim DupDyn As Object
Dim DupDynQry As String
 
On Error GoTo err_ValidationCheck
 
ErrMsg = ""
'Empno cannot be changed while in Update mode, so we can skip over validation
If DoAdd Then
    If txtEmpno = "" Then
        ErrMsg = "You must enter a value for Employee Number"
        Error 1
    End If
End If
 
If txtHireDate &lt;&gt; "" And Not IsDate(txtHireDate) Then
    ErrMsg = "Enter date as dd-mmm-yy."
    Error 2
End If
 
If txtDeptno = "" Then
    ErrMsg = "You must enter a value for Department Number"
    Error 3
End If
 
'If adding a record, check for Duplicate empno value by
'attempting to count rows with same value
'Build Query:
If DoAdd Then
    DupDynQry = "select count(*) from emp where empno = " &amp; txtEmpno
    Set DupDyn = OraDatabase.CreateDynaset(DupDynQry, ORADYN_NOCACHE)
 
    If DupDyn.Fields(0).Value &lt;&gt; 0 Then
        ErrNum = DUPLICATE_KEY
        ErrMsg = "Employee Number already exists."
        Error ErrNum
    End If
End If
'Succesful validation with no errors returns True
DoValidationChecks = True
Exit Function
 
err_ValidationCheck:
    If ErrMsg &lt;&gt; "" Then
        MsgBox ErrMsg
    Else
        MsgBox Error$
    End If
    'Validation returns false on failure
    DoValidationChecks = False
    
End Function
</pre></div>
<!-- class="sect4" -->
<a id="BABBDGBD"></a>
<div id="OOFOL304" class="sect4">
<h5 class="sect4">UpdateDynasetFields( ) Function</h5>
<p>The commit event procedure calls this function after putting the dynaset in either <code>Edit</code> or <code>AddNew</code> mode. The <code>UpdateDynasetFields()</code> function sets the dynaset fields to the values entered in the text boxes. The function returns <code>TRUE</code> if successful, or returns <code>FALSE</code> if there is an error.</p>
<pre>
 Function UpdateDynasetFields() As Integer
'This function sets the dynaset field value to those entered in the text boxes. 
'The function returns true on success, false on error.
 
ErrMsg = ""
 
On Error GoTo err_updatedynasetfields
 
EmpDynaset.Fields("empno").Value = txtEmpno
EmpDynaset.Fields("ename").Value = txtEname
EmpDynaset.Fields("job").Value = txtJob
EmpDynaset.Fields("mgr").Value = txtManager
EmpDynaset.Fields("hiredate").Value = txtHireDate
EmpDynaset.Fields("sal").Value = txtSal
EmpDynaset.Fields("comm").Value = txtComm
EmpDynaset.Fields("deptno").Value = txtDeptno
 
UpdateDynasetFields = True
 
Exit Function
 
err_updatedynasetfields:
    If ErrMsg &lt;&gt; "" Then
        MsgBox ErrMsg
    Else
        MsgBox Error$
    End If
    UpdateDynasetFields = False
</pre></div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABJHIII"></a>
<div id="OOFOL305" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Updating Records</h3>
<p>To allow users to update existing records in the database, you need to include an Update button in the Employee Form. Users navigate to a particular record, click the Update button, make changes, and then click the Commit button.</p>
<p>While in update mode, the application makes the following restrictions:</p>
<ul>
<li>
<p>Users cannot navigate to another record or perform another function.</p>
</li>
<li>
<p>Users cannot change the employee number because this is the primary key.</p>
</li>
</ul>
<p>To program the Update function, write an event procedure for the Update button and modify the Commit procedure so that it handles both updating and adding records.</p>
<div id="OOFOL306" class="sect3"><a id="sthref528"></a>
<h4 class="sect3">Coding the Update Button</h4>
<p>To code the Update button, disable the Employee Number text box to prevent changes to this field while updating records, because this is a primary key. You must also disable the other buttons to disable other functions, such as navigation, while updating records.</p>
<p>Set the <code>DoUpdate</code> Boolean expression to <code>TRUE</code>, so the commit procedure recognizes the current process as an update operation, not an addition.</p>
<p>The update event procedure must do the following:</p>
<ol>
<li>
<p>Disable the Update button.</p>
</li>
<li>
<p>Enable the Commit button.</p>
</li>
<li>
<p>Disable other buttons to disable functions, such as navigation, during the update operation.</p>
</li>
<li>
<p>Disable the Employee Number text box.</p>
</li>
<li>
<p>Set the <code>DoUpdate</code> flag to <code>True</code>.</p>
</li>
<li>
<p>Let the user enter changes.</p>
</li>
</ol>
<p>The following example code shows the update event procedure:</p>
<pre>
Private Sub cmdUpdate_Click()
'Disable the Update button and enable the commit button
  cmdUpdate.Enabled = False
  Commit.Enabled = True
'Disable all other buttons
  DisableNavButtons
  
  txtEmpno.Enabled = False
  DoUpdate = True
End Sub
</pre>
<p>The update and add event procedures call the <code>DisableNavButtons()</code> subroutine to disable navigation and other functions during an add or update operation.</p>
<pre>
Private Sub DisableNavButtons()
'disable all buttons while adding and updating
cmdFirst.Enabled = False
cmdPrevious.Enabled = False
cmdNext.Enabled = False
cmdLast.Enabled = False
cmdFind.Enabled = False
cmdUpdate.Enabled = False
AddNew.Enabled = False
 
End Sub
</pre></div>
<!-- class="sect3" -->
<div id="OOFOL307" class="sect3"><a id="sthref529"></a>
<h4 class="sect3">Coding the Commit Button to Add and Update Records</h4>
<p>The procedure for committing an update operation is similar to committing an add, except that the dynaset is set in edit mode using the <code>Edit</code> method and then the new dynaset values are assigned.</p>
<p>Because the same commit button and the same commit event procedure are used to add and update, two global flags <code>DoAdd</code> and <code>DoUpdate</code> are added to distinguish between adding and updating. The Add and Update click event procedures set these flags.</p>
<p>The Commit event procedure for adding and updating must do the following:</p>
<ol>
<li>
<p>Validate entered data using the <code>DoValidationChecks()</code> function as before.</p>
</li>
<li>
<p>Use <code>AddNew</code> to add records or else use <code>Edit</code> for updates.</p>
</li>
<li>
<p>Assign entered data to dynaset fields, using the <code>Fields().Value</code> property using <code>UpdateDynasetFields()</code> as before.</p>
</li>
<li>
<p>Update database with new records, using <code>Update</code>.</p>
</li>
<li>
<p>Disable the Commit button.</p>
</li>
<li>
<p>Reenable all other functional buttons including the Add and Update buttons.</p>
</li>
<li>
<p>Set the <code>DoUpdate</code> and <code>DoAdd</code> flags to <code>False</code>.</p>
</li>
</ol>
<p>The code that changes button and flag states in Steps 5 through 7 is provided in a new subroutine called <code>SetAfterCommitFlags()</code>. This replaces the lines of code that originally enabled <code>Commit</code> and <code>AddNew</code>.</p>
<p>The code for this Commit function is broken into the following routines:</p>
<ul>
<li>
<p><a href="#BABHAHBD">"Commit_Click( ) Event Procedure Example"</a></p>
</li>
<li>
<p><a href="#BABFFIHB">"DoValidationChecks( ) Function"</a> <a href="#BABFFIHB">(UNKNOWN STEP NUMBER)</a> , also used in the original <code>Commit</code> function</p>
</li>
<li>
<p><a href="#BABBDGBD">"UpdateDynasetFields( ) Function"</a>, also used in the original <code>Commit</code> function</p>
</li>
<li>
<p><a href="#BABBBJIC">"SetAfterCommitFlags() Subroutine Example"</a>, which is a new subroutine</p>
</li>
</ul>
<a id="BABHAHBD"></a>
<div id="OOFOL308" class="sect4">
<h5 class="sect4">Commit_Click( ) Event Procedure Example</h5>
<p>The following example shows the <code>Commit_Click</code> Event Procedure.</p>
<pre>
Private Sub Commit_Click()
 
On Error GoTo err_commit 
 
ErrMsg = ""
'Do validation checks on entered data
If DoValidationChecks Then 'If validation checks have passed
   
    'If we are adding a record use AddNew
    If DoAdd = True Then
        EmpDynaset.AddNew
    End If
    'If we are updating a record use Edit
    If DoUpdate = True Then
       EmpDynaset.Edit
    End If
    'Update the dynaset fields and then update database if there is no error.
    If UpdateDynasetFields Then
        EmpDynaset.Update
    End If
 
    SetAfterCommitFlags
 
End If 'Endif for DoValidationChecks
 
Exit Sub
 
err_commit:
    If ErrMsg &lt;&gt; "" Then
        MsgBox ErrMsg
    Else
        MsgBox Error$
    End If
 
End Sub
</pre></div>
<!-- class="sect4" -->
<a id="BABBBJIC"></a>
<div id="OOFOL309" class="sect4">
<h5 class="sect4">SetAfterCommitFlags() Subroutine Example</h5>
<p>The following example shows the <code>SetAfterCommitFlag()</code> Subroutine.</p>
<p>The <code>SetAfterCommitFlags()</code> subroutine is called at the end of the commit event procedure. The <code>SetAfterCommitFlags()</code> subroutine reenables disabled buttons and text boxes and sets the <code>DoUpdate</code> and <code>DoAdd</code> flags to <code>False</code>.</p>
<pre>
Sub SetAfterCommitFlags()
'disable commit and re-enable add and update buttons
Commit.Enabled = False
AddNew.Enabled = True
cmdUpdate.Enabled = True
 
'enable the other buttons
cmdFirst.Enabled = True
cmdPrevious.Enabled = True
cmdNext.Enabled = True
cmdLast.Enabled = True
cmdFind.Enabled = True
cmdUpdate.Enabled = True
AddNew.Enabled = True
 
DoUpdate = False
DoAdd = False
 
txtEmpno.Enabled = True
 
End Sub
</pre></div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABJEACJ"></a>
<div id="OOFOL310" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Deleting Records</h3>
<p>Users can delete records by navigating to a particular record and clicking the Delete button. The application prompts the user to verify the deletion, then the application deletes the record using the <code>Delete</code> method. The program then refreshes the screen with the next record or with the previous record if the user deleted the last record in the dynaset.</p>
<p>The following example shows the delete-click event procedure:</p>
<pre>
Private Sub cmdDelete_Click()
'prompt user
Response = MsgBox("Do you really want to Delete?", vbYesNo + vbExclamation)
    
If Response = vbYes Then
    EmpDynaset.Delete
    'attempt to move to next record
    EmpDynaset.MoveNext
    If EmpDynaset.EOF Then 'If deleted last record
        EmpDynaset.MovePrevious
    End If
    Call EmpRefresh
End If
End Sub
</pre></div>
<!-- class="sect2" -->
<a id="BABJICEG"></a>
<div id="OOFOL311" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Querying the Database</h3>
<p>The employee application can be configured to allow users to search for particular records in the database. For demonstration purposes, a Find button is included to allow users to query only employee names. At any time, the user can enter the query in the Employee Name field, and click the Find button. The application then displays the result or displays a message if the name cannot be found.</p>
<p>To search for records, the <code>FindFirst</code> method is used. When the find operation succeeds, the record is displayed. If the find fails, a message is displayed. The current row is reset to the first row, because failures cause the dynaset to be BOF (beginning-of-file), effectively making the current row invalid.</p>
<p>The <code>Find_Click()</code> event procedure must do the following:</p>
<ol>
<li>
<p>Build a find clause to find the record where the <code>ENAME</code> column matches the entered string.</p>
</li>
<li>
<p>Execute the find using the <code>FindFirst</code> method.</p>
</li>
<li>
<p>Display the record if it is found; if the record was not found, display a message and reset the current row to the first row.</p>
</li>
</ol>
<p>The following example shows a typical find click event procedure:</p>
<pre>
Private Sub cmdFind_Click()
Dim FindClause As String
Dim SingleQuote As String
 
ErrMsg = ""
SingleQuote = "'"
 
On Error GoTo err_find
'build the find clause:
'Can make our query case insensitive by converting the names to upper case
'FindClause = "UPPER(ename) = " &amp; SingleQuote &amp; UCase(txtEname) &amp; SingleQuote
FindClause = "ename = " &amp; SingleQuote &amp; txtEname &amp; SingleQuote
   
EmpDynaset.DbFindFirst FindClause
 
If EmpDynaset.NoMatch Then
    MsgBox "Could not find record matching Employee Name " &amp; txtEname
    EmpDynaset.DbMoveFirst
End If
 
Call EmpRefresh
 
Exit Sub
</pre></div>
<!-- class="sect2" -->
<div id="OOFOL312" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref530"></a>
<h3 class="sect2">Using Batch Insert</h3>
<p>A typical command to load the Batch Insert form looks like this:</p>
<pre>
Private Sub BInsert_Click()
  Load BatchInsert
  BatchInsert.Show
End Sub
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABEFFIF">"Programming a Batch Form"</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABEFFIF"></a>
<div id="OOFOL313" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Programming a Batch Form</h2>
<p>This section describes the Batch Insert Form and then describes the functions that it uses.</p>
<div id="OOFOL314" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref531"></a>
<h3 class="sect2">About the Batch Insert Form</h3>
<p>The Batch Insert Form allows users to insert rows in a batch operation, that is, to insert more than one record into the database by using only one command. This feature is implemented using parameter arrays and SQL statements.</p>
<p><a href="#BABFGACD">Table 6-1</a> shows a typical Batch Insert Form:</p>
<div id="OOFOL315" class="figure">
<p class="titleinfigure"><a id="BABFGACD"></a>Figure 6-4 Batch Insert Form</p>
<img width="433" height="419" src="img/batch2.gif" alt="Description of Figure 6-4 follows" /><br />
<a id="sthref532" href="img_text/batch2.htm">Description of "Figure 6-4 Batch Insert Form"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Users navigate to the Batch Insert Form by clicking the Batch Insert button on the Employee Form. The Batch Insert Form has a grid that displays the entered data and a row of fields where the user enters each record. To keep the example simple, users are only allowed to enter information into the Employee Number, Employee Name, and Department Number fields.</p>
<p>Users enter records in the fields and click the Add to Grid button. The program displays the entered records in the grid. To insert the entire batch to the database, users click the CommitGrid button.</p>
<p>The Batch Insert Form uses three procedures. The <code>Form_Load()</code> procedure initializes the grid with the column headers. The <code>CmdAddtoGrid_click()</code> procedure copies the entered data from the fields to the grid. The <code>CommitGrid_Click()</code> procedure contains the parameter array and SQL statements used to make the batch insert.</p>
<p>These procedures are described as follows:</p>
<ul>
<li>
<p><a href="#BABFGEIC">Coding the Batch Insert Form_Load( ) Procedure</a></p>
</li>
<li>
<p><a href="#BABGJHJB">Coding the CmdAddtoGrid( ) Procedure</a></p>
</li>
<li>
<p><a href="#BABIBDHB">Coding the CommitGrid_Click( ) Procedure</a></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABFGEIC"></a>
<div id="OOFOL316" class="sect2">
<h3 class="sect2">Coding the Batch Insert Form_Load( ) Procedure</h3>
<p>The following examples show how the Batch Insert <code>Form_Load()</code> procedure sets the column headings for the grid:</p>
<pre>
Private Sub Form_Load()
Grid1.Enabled = True
CurrRow = 0  'Top row
ReadRow = 0
ReadCol = 0
    
'Set column headings
 
Grid1.Row = CurrRow
Grid1.Col = 0
Grid1.Text = "Employee Number"
 
Grid1.Col = 1
Grid1.Text = "Employee Name"
 
Grid1.Col = 2
Grid1.Text = "Department Number"
 
NoOfCols = 3
 
CurrRow = CurrRow + 1
    
End Sub
</pre></div>
<!-- class="sect2" -->
<a id="BABGJHJB"></a>
<div id="OOFOL317" class="sect2">
<h3 class="sect2">Coding the CmdAddtoGrid( ) Procedure</h3>
<p>The <code>CmdAddtoGrid_Click()</code> procedure copies the data entered in the fields to the next empty grid row. The global variable <code>CurrRow</code> always points to the first empty row in the grid.</p>
<p>The following example shows the <code>CmdAddtoGrid_Click()</code>:</p>
<pre>
Private Sub CmdAddtoGrid_Click()
 
'Update the grid
'Update Empno column
Grid1.Row = CurrRow
Grid1.Col = 0
Grid1.Text = txtEmpno
'Update Ename column
Grid1.Row = CurrRow
Grid1.Col = 1
Grid1.Text = txtEname
'Update Deptno column
Grid1.Row = CurrRow
Grid1.Col = 2
Grid1.Text = txtDeptno
 
'Increment CurrCol
CurrRow = CurrRow + 1
 
NoOfRows = CurrRow - 1
 
End Sub
</pre></div>
<!-- class="sect2" -->
<a id="BABIBDHB"></a>
<div id="OOFOL318" class="sect2">
<h3 class="sect2">Coding the CommitGrid_Click( ) Procedure</h3>
<p>The <code>CommitGrid_Click()</code> procedure inserts the grid data into the database. To do so, this procedure creates a parameter array object for each column in the <code>EMP</code> table that corresponds to a column in the grid. The <code>OraParameters.AddTable()</code> method defines each parameter array. For example, a parameter array called <code>EMPNO_ARR</code> holds all Employee Number column elements.</p>
<p>After the parameter arrays are defined, the <code>Put_Value</code> method populates them with grid column elements.</p>
<p>To commit the parameter array elements to the database, this procedure uses the <code>CreateSQL()</code> method with a SQL <code>INSERT</code> statement containing the parameter arrays. Because the <code>CreateSQL()</code> method executes the SQL <code>INSERT</code> statement in addition to creating a SQL statement object, all column elements (parameter array elements) are inserted into the <code>EMP</code> table with this one statement.</p>
<p>If an error occurs during a SQL <code>INSERT</code> statement that contains parameter arrays, the SQL statement object is still created with no explicitly raised error. To identify such errors, always check the <code>OraDatabase.LastServerErr</code> and <code>OraDatabase.LastServerErrText</code> properties immediately after executing the <code>CreateSQL</code> method.</p>
<p>The <code>CreateSQL</code> method updates the database directly and has no effect on the dynaset. The <code>EmpDynaset</code>. <code>Refresh</code> method must used to refresh this dynaset so that it reflects the newly inserted records.</p>
<p>The <code>CommitGrid_Click()</code> event procedure must do the following:</p>
<ol>
<li>
<p>Define a parameter array for each grid (database) column, using the <code>AddTable</code> method.</p>
</li>
<li>
<p>Copy grid column elements into parameter arrays, using the <code>Put_Value</code> method within a nested loop.</p>
</li>
<li>
<p>Create a SQL statement object using the <code>CreateSQL</code> method to insert parameter array elements into the <code>EMP</code> table.</p>
</li>
<li>
<p>Check the <code>LastServerErrText</code> and <code>LastServerErr</code> properties to catch SQL statement execution errors.</p>
</li>
<li>
<p>Refresh the global dyanset to reflect newly inserted records, using the <code>Refresh</code> method.</p>
</li>
</ol>
<p>The following example shows a typical <code>cmdCommitGrid_Click()</code> procedure:</p>
<pre>
Private Sub cmdCommitGrid_Click()
Dim OraSqlStmt As Object
Dim OraPArray(2) As Object
 
On Error GoTo err_CommitGrid
ErrMsg = ""
 
'Define parameter arrays, one for each column
OraDatabase.Parameters.AddTable "EMPNO_ARR", ORAPARM_INPUT, ORATYPE_NUMBER, _
            NoOfRows
OraDatabase.Parameters.AddTable "ENAME_ARR", ORAPARM_INPUT, ORATYPE_VARCHAR2, _ 
            NoOfRows, 10
OraDatabase.Parameters.AddTable "DEPTNO_ARR", ORAPARM_INPUT, ORATYPE_NUMBER, _
            NoOfRows
If OraDatabase.LastServerErr &lt;&gt; 0 Or OraDatabase.LastServerErrText &lt;&gt; "" Then
Error 1
End If
 
'Initialize local array to hold parameter arrays
Set OraPArray(0) = OraDatabase.Parameters("EMPNO_ARR")
Set OraPArray(1) = OraDatabase.Parameters("ENAME_ARR")
Set OraPArray(2) = OraDatabase.Parameters("DEPTNO_ARR")
 
'Init the param array variables. Add loop to read thru grid ROWS
For ReadRow = 0 To (NoOfRows - 1)
Grid1.Row = ReadRow + 1
'Loop to read thru grid CELLS
    For ReadCol = 0 To NoOfCols - 1
        Grid1.Col = ReadCol
        OraPArray(ReadCol).Put_Value Grid1.Text, ReadRow
    Next ReadCol
Next ReadRow
 
'create a sqlstmt to insert array values into table
Set OraSqlStmt = OraDatabase.CreateSql("insert into emp(empno,ename,deptno)" &amp; _
        "values(:EMPNO_ARR,:ENAME_ARR,:DEPTNO_ARR)", 0&amp;)
If OraDatabase.LastServerErr &lt;&gt; 0 Or OraDatabase.LastServerErrText &lt;&gt; "" Then
  ErrMsg = OraDatabase.LastServerErrText
  Error 1
End If
 
'Refresh the Dynaset
EmpDynaset.Refresh

OraDatabase.Parameters.Remove "EMPNO_ARR"
OraDatabase.Parameters.Remove "ENAME_ARR"
OraDatabase.Parameters.Remove "DEPTNO_ARR" 

Exit Sub
 
err_CommitGrid:
    If ErrMsg &lt;&gt; "" Then
        MsgBox ErrMsg
    Else
        MsgBox Error$
    End If
 
End Sub
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment2275">
<tr>
<td class="cellalignment2284">
<table class="cellalignment2280">
<tr>
<td class="cellalignment2279"><a href="tips.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment2279"><a href="codewiz.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment2286">
<table class="cellalignment2278">
<tr>
<td class="cellalignment2279"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment2279"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment2279"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment2279"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment2279"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment2279"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
